[
  {
    "discussion_id": "2054765445",
    "pr_number": 186,
    "pr_file": "packages/agents/src/mcp/index.ts",
    "created_at": "2025-04-22T19:56:31+00:00",
    "commented_code": "onStateUpdate(state: State | undefined, source: Connection | \"server\") {\n         return self.onStateUpdate(state, source);\n       }\n+\n+      async onMessage(connection: Connection, event: WSMessage) {\n+        return self.onMessage(connection, event);\n+      }\n     })(this.ctx, this.env);\n \n     this.props = (await this.ctx.storage.get(\"props\")) as Props;\n+    this.#protocol = (await this.ctx.storage.get(\"protocol\")) as Protocol;\n     this.init?.();\n \n     // Connect to the MCP server\n-    this.#transport = new McpTransport(() => this.getWebSocket());\n-    await this.server.connect(this.#transport);\n+    if (this.#protocol === \"sse\") {\n+      this.#transport = new McpSSETransport(() => this.getWebSocket());\n+      await this.server.connect(this.#transport);\n+    } else if (this.#protocol === \"streamable-http\") {\n+      this.#transport = new McpStreamableHttpTransport(\n+        (id) => this.getWebSocketForResponseID(id),\n+        (id) => this.#requestIdToConnectionId.delete(id)\n+      );\n+      await this.server.connect(this.#transport);",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2054765445",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 186,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2054765445",
        "commented_code": "@@ -142,14 +312,27 @@ export abstract class McpAgent<\n       onStateUpdate(state: State | undefined, source: Connection | \"server\") {\n         return self.onStateUpdate(state, source);\n       }\n+\n+      async onMessage(connection: Connection, event: WSMessage) {\n+        return self.onMessage(connection, event);\n+      }\n     })(this.ctx, this.env);\n \n     this.props = (await this.ctx.storage.get(\"props\")) as Props;\n+    this.#protocol = (await this.ctx.storage.get(\"protocol\")) as Protocol;\n     this.init?.();\n \n     // Connect to the MCP server\n-    this.#transport = new McpTransport(() => this.getWebSocket());\n-    await this.server.connect(this.#transport);\n+    if (this.#protocol === \"sse\") {\n+      this.#transport = new McpSSETransport(() => this.getWebSocket());\n+      await this.server.connect(this.#transport);\n+    } else if (this.#protocol === \"streamable-http\") {\n+      this.#transport = new McpStreamableHttpTransport(\n+        (id) => this.getWebSocketForResponseID(id),\n+        (id) => this.#requestIdToConnectionId.delete(id)\n+      );\n+      await this.server.connect(this.#transport);",
        "comment_created_at": "2025-04-22T19:56:31+00:00",
        "comment_author": "ashubham",
        "comment_body": "nit: looks to be common code with line 328. Can move out of the the `if .. else`",
        "pr_file_module": null
      },
      {
        "comment_id": "2055199326",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 186,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2054765445",
        "commented_code": "@@ -142,14 +312,27 @@ export abstract class McpAgent<\n       onStateUpdate(state: State | undefined, source: Connection | \"server\") {\n         return self.onStateUpdate(state, source);\n       }\n+\n+      async onMessage(connection: Connection, event: WSMessage) {\n+        return self.onMessage(connection, event);\n+      }\n     })(this.ctx, this.env);\n \n     this.props = (await this.ctx.storage.get(\"props\")) as Props;\n+    this.#protocol = (await this.ctx.storage.get(\"protocol\")) as Protocol;\n     this.init?.();\n \n     // Connect to the MCP server\n-    this.#transport = new McpTransport(() => this.getWebSocket());\n-    await this.server.connect(this.#transport);\n+    if (this.#protocol === \"sse\") {\n+      this.#transport = new McpSSETransport(() => this.getWebSocket());\n+      await this.server.connect(this.#transport);\n+    } else if (this.#protocol === \"streamable-http\") {\n+      this.#transport = new McpStreamableHttpTransport(\n+        (id) => this.getWebSocketForResponseID(id),\n+        (id) => this.#requestIdToConnectionId.delete(id)\n+      );\n+      await this.server.connect(this.#transport);",
        "comment_created_at": "2025-04-23T03:46:51+00:00",
        "comment_author": "jmorrell-cloudflare",
        "comment_body": "You can, but then typescript loses track of the type of the transport and thinks it might be `undefined` requiring null checks or an assertion. The type safety and clarity is worth the repetition imo.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2018434256",
    "pr_number": 125,
    "pr_file": "packages/agents/src/index.ts",
    "created_at": "2025-03-28T11:02:41+00:00",
    "commented_code": "// biome-ignore lint/complexity/noBannedTypes: <explanation>\n     return callableMetadata.has(this[method as keyof this] as Function);\n   }\n+",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2018434256",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 125,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2018434256",
        "commented_code": "@@ -759,6 +780,94 @@ export class Agent<Env, State = unknown> extends Server<Env> {\n     // biome-ignore lint/complexity/noBannedTypes: <explanation>\n     return callableMetadata.has(this[method as keyof this] as Function);\n   }\n+",
        "comment_created_at": "2025-03-28T11:02:41+00:00",
        "comment_author": "threepointone",
        "comment_body": "I'm hesitant to add this to root Agent class, tho I might be able to be convinced. Ping me and let's chat about it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2019031471",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 125,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2018434256",
        "commented_code": "@@ -759,6 +780,94 @@ export class Agent<Env, State = unknown> extends Server<Env> {\n     // biome-ignore lint/complexity/noBannedTypes: <explanation>\n     return callableMetadata.has(this[method as keyof this] as Function);\n   }\n+",
        "comment_created_at": "2025-03-28T17:00:28+00:00",
        "comment_author": "cmsparks",
        "comment_body": "Decided to move this into a separate MCPClientManager class, which handles managing multiple MCP servers at once.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2017741235",
    "pr_number": 128,
    "pr_file": "packages/agents/src/mcp.ts",
    "created_at": "2025-03-28T00:07:21+00:00",
    "commented_code": "}\n \n export abstract class McpAgent<\n-  Env = unknown,\n-  State = unknown,\n-  Props extends Record<string, unknown> = Record<string, unknown>,\n-> extends DurableObject<Env> {\n+    Env = unknown,\n+    State = unknown,\n+    Props extends Record<string, unknown> = Record<string, unknown>,\n+  >\n+  extends DurableObject<Env>\n+  implements Transport",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2017741235",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 128,
        "pr_file": "packages/agents/src/mcp.ts",
        "discussion_id": "2017741235",
        "commented_code": "@@ -33,10 +37,13 @@ interface CORSOptions {\n }\n \n export abstract class McpAgent<\n-  Env = unknown,\n-  State = unknown,\n-  Props extends Record<string, unknown> = Record<string, unknown>,\n-> extends DurableObject<Env> {\n+    Env = unknown,\n+    State = unknown,\n+    Props extends Record<string, unknown> = Record<string, unknown>,\n+  >\n+  extends DurableObject<Env>\n+  implements Transport",
        "comment_created_at": "2025-03-28T00:07:21+00:00",
        "comment_author": "geelen",
        "comment_body": "Feels weird if the Transport methods are visible within the McpAgent class, unless there's some reason why they should be?\r\n\r\nYour other option is a `#transport` internal object, where you wire up just the methods that the hibernation API requires...",
        "pr_file_module": null
      },
      {
        "comment_id": "2021650197",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 128,
        "pr_file": "packages/agents/src/mcp.ts",
        "discussion_id": "2017741235",
        "commented_code": "@@ -33,10 +37,13 @@ interface CORSOptions {\n }\n \n export abstract class McpAgent<\n-  Env = unknown,\n-  State = unknown,\n-  Props extends Record<string, unknown> = Record<string, unknown>,\n-> extends DurableObject<Env> {\n+    Env = unknown,\n+    State = unknown,\n+    Props extends Record<string, unknown> = Record<string, unknown>,\n+  >\n+  extends DurableObject<Env>\n+  implements Transport",
        "comment_created_at": "2025-03-31T19:27:59+00:00",
        "comment_author": "jmorrell-cloudflare",
        "comment_body": "Agreed. This is all really messy. I'll try factoring this out.",
        "pr_file_module": null
      }
    ]
  }
]