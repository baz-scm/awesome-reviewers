[
  {
    "discussion_id": "2224486141",
    "pr_number": 378,
    "pr_file": "packages/agents/src/mcp/index.ts",
    "created_at": "2025-07-23T06:08:02+00:00",
    "commented_code": "const id = namespace.idFromName(`sse:${sessionId}`);\n           const doStub = namespace.get(id);\n \n-          // Forward the request to the Durable Object\n-          const error = await doStub.onSSEMcpMessage(sessionId, request);\n+          const messageBody = await request.json();\n+          const error = await doStub.onSSEMcpMessage(sessionId, messageBody);",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2224486141",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 378,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2224486141",
        "commented_code": "@@ -738,8 +737,8 @@ export abstract class McpAgent<\n           const id = namespace.idFromName(`sse:${sessionId}`);\n           const doStub = namespace.get(id);\n \n-          // Forward the request to the Durable Object\n-          const error = await doStub.onSSEMcpMessage(sessionId, request);\n+          const messageBody = await request.json();\n+          const error = await doStub.onSSEMcpMessage(sessionId, messageBody);",
        "comment_created_at": "2025-07-23T06:08:02+00:00",
        "comment_author": "amorriscode",
        "comment_body": "I was struggling to get the tests to pass when passing the entire request to `onSSEMcpMessage`. I noticed that the only thing it actually needs is the message body so being explicit seemed okay.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183620620",
    "pr_number": 342,
    "pr_file": "packages/agents/src/index.ts",
    "created_at": "2025-07-03T19:32:24+00:00",
    "commented_code": "return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(\n+  email: ForwardableEmailMessage,\n+  _env: Env\n+): Promise<{ agentName: string; agentId: string } | null> {\n+  const messageId = email.headers.get(\"message-id\");\n+  if (messageId) {\n+    const messageIdMatch = messageId.match(/<([^@]+)@([^>]+)>/);\n+    if (messageIdMatch) {\n+      const [, agentId, domain] = messageIdMatch;\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const references = email.headers.get(\"references\");\n+  if (references) {\n+    const referencesMatch = references.match(/<([A-Za-z0-9+\\/]{43}=)@([^>]+)>/);\n+    if (referencesMatch) {\n+      const [, base64Id, domain] = referencesMatch;\n+      const agentId = Buffer.from(base64Id, \"base64\").toString(\"hex\");\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const agentName = email.headers.get(\"x-agent-name\");\n+  const agentId = email.headers.get(\"x-agent-id\");\n+  if (agentName && agentId) {\n+    return { agentName, agentId };\n+  }\n+\n+  return null;\n+}\n+\n+export function createEmailAddressResolver<Env>(\n+  defaultAgentName: string\n+): EmailResolver<Env> {\n+  return async (email: ForwardableEmailMessage, _env: Env) => {\n+    const emailMatch = email.to.match(/^([^+@]+)(?:\\+([^@]+))?@(.+)$/);\n+    if (!emailMatch) {\n+      return null;\n+    }\n+\n+    const [, localPart, subAddress] = emailMatch;\n+\n+    if (subAddress) {\n+      return {\n+        agentName: localPart,\n+        agentId: subAddress,\n+      };\n+    }\n+\n+    return {\n+      agentName: localPart,\n+      agentId: defaultAgentName || localPart,\n+    };",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2183620620",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 342,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2183620620",
        "commented_code": "@@ -1173,17 +1193,181 @@ export async function routeAgentRequest<Env>(\n   return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(\n+  email: ForwardableEmailMessage,\n+  _env: Env\n+): Promise<{ agentName: string; agentId: string } | null> {\n+  const messageId = email.headers.get(\"message-id\");\n+  if (messageId) {\n+    const messageIdMatch = messageId.match(/<([^@]+)@([^>]+)>/);\n+    if (messageIdMatch) {\n+      const [, agentId, domain] = messageIdMatch;\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const references = email.headers.get(\"references\");\n+  if (references) {\n+    const referencesMatch = references.match(/<([A-Za-z0-9+\\/]{43}=)@([^>]+)>/);\n+    if (referencesMatch) {\n+      const [, base64Id, domain] = referencesMatch;\n+      const agentId = Buffer.from(base64Id, \"base64\").toString(\"hex\");\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const agentName = email.headers.get(\"x-agent-name\");\n+  const agentId = email.headers.get(\"x-agent-id\");\n+  if (agentName && agentId) {\n+    return { agentName, agentId };\n+  }\n+\n+  return null;\n+}\n+\n+export function createEmailAddressResolver<Env>(\n+  defaultAgentName: string\n+): EmailResolver<Env> {\n+  return async (email: ForwardableEmailMessage, _env: Env) => {\n+    const emailMatch = email.to.match(/^([^+@]+)(?:\\+([^@]+))?@(.+)$/);\n+    if (!emailMatch) {\n+      return null;\n+    }\n+\n+    const [, localPart, subAddress] = emailMatch;\n+\n+    if (subAddress) {\n+      return {\n+        agentName: localPart,\n+        agentId: subAddress,\n+      };\n+    }\n+\n+    return {\n+      agentName: localPart,\n+      agentId: defaultAgentName || localPart,\n+    };",
        "comment_created_at": "2025-07-03T19:32:24+00:00",
        "comment_author": "deloreyj",
        "comment_body": "With a default on one of these properties we could go one of two ways\r\n1. Multiple Agent namespaces each with a single default agent instance\r\n2. A single default Agent namespace with many instances identified by the `localPart`\r\n\r\nOption 2 seems like the much more common use case to me, but I believe this is implementing option 1. Would you consider swapping so the default gets applied to the agentName instead? \r\n\r\nI'd imagine using option 2 when I have a catch-all email route that points at an Email Worker with a single EmailAgent namespace. In that setup it makes sense to me for the email address to be the agentId and hardcode the default namespace.",
        "pr_file_module": null
      },
      {
        "comment_id": "2183639465",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 342,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2183620620",
        "commented_code": "@@ -1173,17 +1193,181 @@ export async function routeAgentRequest<Env>(\n   return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(\n+  email: ForwardableEmailMessage,\n+  _env: Env\n+): Promise<{ agentName: string; agentId: string } | null> {\n+  const messageId = email.headers.get(\"message-id\");\n+  if (messageId) {\n+    const messageIdMatch = messageId.match(/<([^@]+)@([^>]+)>/);\n+    if (messageIdMatch) {\n+      const [, agentId, domain] = messageIdMatch;\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const references = email.headers.get(\"references\");\n+  if (references) {\n+    const referencesMatch = references.match(/<([A-Za-z0-9+\\/]{43}=)@([^>]+)>/);\n+    if (referencesMatch) {\n+      const [, base64Id, domain] = referencesMatch;\n+      const agentId = Buffer.from(base64Id, \"base64\").toString(\"hex\");\n+      const agentName = domain.split(\".\")[0];\n+      return { agentName, agentId };\n+    }\n+  }\n+\n+  const agentName = email.headers.get(\"x-agent-name\");\n+  const agentId = email.headers.get(\"x-agent-id\");\n+  if (agentName && agentId) {\n+    return { agentName, agentId };\n+  }\n+\n+  return null;\n+}\n+\n+export function createEmailAddressResolver<Env>(\n+  defaultAgentName: string\n+): EmailResolver<Env> {\n+  return async (email: ForwardableEmailMessage, _env: Env) => {\n+    const emailMatch = email.to.match(/^([^+@]+)(?:\\+([^@]+))?@(.+)$/);\n+    if (!emailMatch) {\n+      return null;\n+    }\n+\n+    const [, localPart, subAddress] = emailMatch;\n+\n+    if (subAddress) {\n+      return {\n+        agentName: localPart,\n+        agentId: subAddress,\n+      };\n+    }\n+\n+    return {\n+      agentName: localPart,\n+      agentId: defaultAgentName || localPart,\n+    };",
        "comment_created_at": "2025-07-03T19:47:58+00:00",
        "comment_author": "whoiskatrin",
        "comment_body": "swapped, let me know what's your experience like ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2189388394",
    "pr_number": 342,
    "pr_file": "packages/agents/src/index.ts",
    "created_at": "2025-07-07T08:44:31+00:00",
    "commented_code": "return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2189388394",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 342,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2189388394",
        "commented_code": "@@ -1173,17 +1193,183 @@ export async function routeAgentRequest<Env>(\n   return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(",
        "comment_created_at": "2025-07-07T08:44:31+00:00",
        "comment_author": "ghostwriternr",
        "comment_body": "This is a DX comment, but I think is handy to improve. I was wondering if we could leave it this way too, but this particular part confused me a lot when I first looked at this PR and my only way out was to read the source code to understand.\r\n\r\nThe current behaviour for the user to get one of the pre-configured routers is:\r\n1. For address-based routing, they've gotta do `const resolver = createEmailAddressResolver(\"default\");`\r\n2. For header-based routing, they just skip creating a resolver and use the 'default' behaviour\r\n3. For catch-all routing (which imo feels more simple/default-y), they've gotta do `const resolver = createCatchAllResolver(\"EmailAgent\", \"main\");`.\r\n\r\nBut because the default behaviour is 'hidden' + inconsistencies in how they're all invoked (questions I asked myself: why do I need 2 params for a simple catch-all resolver? what is the default behaviour? can I write my own resolver?), it gets a bit confusing. Furthermore, `EmailRoutingOptions` actually needs `defaultAgentName` and `defaultAgentId` IF the developer actually doesn't pass any of the branches defined in the hidden `defaultEmailResolver` method, and we seem to have implicit logic to access `env[routingInfo.agentName]` too.\r\n\r\nMy proposal to improve this would be to change the signature of `routeAgentEmail` to:\r\n```ts\r\nrouteAgentEmail<Env>(\r\n  email: ForwardableEmailMessage,\r\n  env: Env,\r\n  resolver: EmailResolver<Env> // not optional anymore\r\n): Promise<void>\r\n```\r\nThis will indicate to the developer clearly that a resolver is always needed. And we can add a docstring + docs to indicate they can use one of our pre-packaged ones. And get rid of the need for them to pass `defaultAgentName` and `defaultAgentId`, which was solving this redundant purpose anyway.\r\n\r\nThat way, the usage becomes a bit cleaner:\r\n```\r\n  // Three explicit choices - pick exactly one\r\n  const resolver = createAddressBasedResolver(\"default\");\r\n  const resolver = createHeaderBasedResolver();\r\n  const resolver = createCatchAllResolver(\"EmailAgent\", \"main\");\r\n\r\n  // Or write your own\r\n  const resolver = async (email, env) => {\r\n    // custom logic\r\n    return { agentName: \"MyAgent\", agentId: \"some-id\" };\r\n  };\r\n```\r\n\r\nI do have a feeling its possible to clean up the params for these resolvers further by using sane defaults and letting the user pass optional names they prefer. And possibly even package into a single objects so it becomes a nice builder pattern - but that's completely optional : P\r\n```ts\r\n  - DefaultEmailResolvers.addressBased() - they expect specific format\r\n  - DefaultEmailResolvers.headerBased() - they expect headers to exist\r\n  - DefaultEmailResolvers.catchAll() - they want everything to go somewhere\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2189716934",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 342,
        "pr_file": "packages/agents/src/index.ts",
        "discussion_id": "2189388394",
        "commented_code": "@@ -1173,17 +1193,183 @@ export async function routeAgentRequest<Env>(\n   return response;\n }\n \n-/**\n- * Route an email to the appropriate Agent\n- * @param email Email message to route\n- * @param env Environment containing Agent bindings\n- * @param options Routing options\n- */\n+export type EmailResolver<Env> = (\n+  email: ForwardableEmailMessage,\n+  env: Env\n+) => Promise<{\n+  agentName: string;\n+  agentId: string;\n+} | null>;\n+\n+async function defaultEmailResolver<Env>(",
        "comment_created_at": "2025-07-07T10:56:40+00:00",
        "comment_author": "whoiskatrin",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  }
]