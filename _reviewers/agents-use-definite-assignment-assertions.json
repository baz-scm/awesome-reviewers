[
  {
    "discussion_id": "2253612164",
    "pr_number": 391,
    "pr_file": "openai-sdk/human-in-the-loop/src/server.ts",
    "created_at": "2025-08-05T08:52:36+00:00",
    "commented_code": "},\n   parameters: z.object({\n     location: z.string()\n-  })\n+  }) as any",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2253612164",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 391,
        "pr_file": "openai-sdk/human-in-the-loop/src/server.ts",
        "discussion_id": "2253612164",
        "commented_code": "@@ -30,7 +30,7 @@ const getWeatherTool = tool({\n   },\n   parameters: z.object({\n     location: z.string()\n-  })\n+  }) as any",
        "comment_created_at": "2025-08-05T08:52:36+00:00",
        "comment_author": "threepointone",
        "comment_body": "please use `as any` only as a last resort. use proper types in this full pr, I spot 6 instances ",
        "pr_file_module": null
      },
      {
        "comment_id": "2290410267",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 391,
        "pr_file": "openai-sdk/human-in-the-loop/src/server.ts",
        "discussion_id": "2253612164",
        "commented_code": "@@ -30,7 +30,7 @@ const getWeatherTool = tool({\n   },\n   parameters: z.object({\n     location: z.string()\n-  })\n+  }) as any",
        "comment_created_at": "2025-08-21T09:05:31+00:00",
        "comment_author": "threepointone",
        "comment_body": "why is this resolved? I still see 6 `as any` instances. didn't you mention openai sdk updated themselves?",
        "pr_file_module": null
      },
      {
        "comment_id": "2290802689",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 391,
        "pr_file": "openai-sdk/human-in-the-loop/src/server.ts",
        "discussion_id": "2253612164",
        "commented_code": "@@ -30,7 +30,7 @@ const getWeatherTool = tool({\n   },\n   parameters: z.object({\n     location: z.string()\n-  })\n+  }) as any",
        "comment_created_at": "2025-08-21T11:49:31+00:00",
        "comment_author": "threepointone",
        "comment_body": "still is `as any`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2290411571",
    "pr_number": 391,
    "pr_file": "packages/agents/src/ai-chat-agent.ts",
    "created_at": "2025-08-21T09:06:04+00:00",
    "commented_code": "private async _reply(id: string, response: Response) {\n     // now take chunks out from dataStreamResponse and send them to the client\n     return this._tryCatchChat(async () => {\n-      if (response.body) {\n-        await this._drainStream(response.body);\n-        response.body.cancel();\n+      // @ts-expect-error TODO: fix this type error",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2290411571",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 391,
        "pr_file": "packages/agents/src/ai-chat-agent.ts",
        "discussion_id": "2290411571",
        "commented_code": "@@ -259,9 +231,16 @@ export class AIChatAgent<Env = unknown, State = unknown> extends Agent<\n   private async _reply(id: string, response: Response) {\n     // now take chunks out from dataStreamResponse and send them to the client\n     return this._tryCatchChat(async () => {\n-      if (response.body) {\n-        await this._drainStream(response.body);\n-        response.body.cancel();\n+      // @ts-expect-error TODO: fix this type error",
        "comment_created_at": "2025-08-21T09:06:04+00:00",
        "comment_author": "threepointone",
        "comment_body": "what's the error here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2290587578",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 391,
        "pr_file": "packages/agents/src/ai-chat-agent.ts",
        "discussion_id": "2290411571",
        "commented_code": "@@ -259,9 +231,16 @@ export class AIChatAgent<Env = unknown, State = unknown> extends Agent<\n   private async _reply(id: string, response: Response) {\n     // now take chunks out from dataStreamResponse and send them to the client\n     return this._tryCatchChat(async () => {\n-      if (response.body) {\n-        await this._drainStream(response.body);\n-        response.body.cancel();\n+      // @ts-expect-error TODO: fix this type error",
        "comment_created_at": "2025-08-21T10:17:05+00:00",
        "comment_author": "whoiskatrin",
        "comment_body": "fixed by replacing with proper getReader() and adding null check. TS doesn't recognize ReadableStream as async iterable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031841355",
    "pr_number": 158,
    "pr_file": "packages/agents/src/mcp/index.ts",
    "created_at": "2025-04-07T19:08:37+00:00",
    "commented_code": "* websockets, don't support hibernation), let's only expose a couple of the methods\n    * to the outer class: initialState/state/setState/onStateUpdate/sql\n    */\n-  readonly #agent: Agent<Env, State>;\n+  #agent: Agent<Env, State>;\n \n   protected constructor(ctx: DurableObjectState, env: Env) {\n     super(ctx, env);\n     const self = this;\n \n-    // Since McpAgent's _aren't_ yet real \"Agents\" (they route differently, they don't support\n-    // scheduling etc, let's only expose a couple of the methods\n-    // to the outer class for now.\n     this.#agent = new (class extends Agent<Env, State> {",
    "repo_full_name": "cloudflare/agents",
    "discussion_comments": [
      {
        "comment_id": "2031841355",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 158,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2031841355",
        "commented_code": "@@ -93,15 +93,12 @@ export abstract class McpAgent<\n    * websockets, don't support hibernation), let's only expose a couple of the methods\n    * to the outer class: initialState/state/setState/onStateUpdate/sql\n    */\n-  readonly #agent: Agent<Env, State>;\n+  #agent: Agent<Env, State>;\n \n   protected constructor(ctx: DurableObjectState, env: Env) {\n     super(ctx, env);\n     const self = this;\n \n-    // Since McpAgent's _aren't_ yet real \"Agents\" (they route differently, they don't support\n-    // scheduling etc, let's only expose a couple of the methods\n-    // to the outer class for now.\n     this.#agent = new (class extends Agent<Env, State> {",
        "comment_created_at": "2025-04-07T19:08:37+00:00",
        "comment_author": "jmorrell-cloudflare",
        "comment_body": "I left this initialization here. I don't think it does anything since it immediately gets re-written in `onStart` but leaving it out here makes `this.#agent`'s type `Agent<Env, State> | undefined` which requires a lot of useless checks throughout the code to pass typechecking.\r\n\r\nUltimately this should go away if we refactor to be a direct subclass of `Agent`",
        "pr_file_module": null
      },
      {
        "comment_id": "2032061812",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 158,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2031841355",
        "commented_code": "@@ -93,15 +93,12 @@ export abstract class McpAgent<\n    * websockets, don't support hibernation), let's only expose a couple of the methods\n    * to the outer class: initialState/state/setState/onStateUpdate/sql\n    */\n-  readonly #agent: Agent<Env, State>;\n+  #agent: Agent<Env, State>;\n \n   protected constructor(ctx: DurableObjectState, env: Env) {\n     super(ctx, env);\n     const self = this;\n \n-    // Since McpAgent's _aren't_ yet real \"Agents\" (they route differently, they don't support\n-    // scheduling etc, let's only expose a couple of the methods\n-    // to the outer class for now.\n     this.#agent = new (class extends Agent<Env, State> {",
        "comment_created_at": "2025-04-07T21:55:40+00:00",
        "comment_author": "geelen",
        "comment_body": "You can change the declaration above on line 96 to be `#agent: Agent<Env, State>!;`. Basically, \"trust us TSC, it'll always be there\"",
        "pr_file_module": null
      },
      {
        "comment_id": "2032628030",
        "repo_full_name": "cloudflare/agents",
        "pr_number": 158,
        "pr_file": "packages/agents/src/mcp/index.ts",
        "discussion_id": "2031841355",
        "commented_code": "@@ -93,15 +93,12 @@ export abstract class McpAgent<\n    * websockets, don't support hibernation), let's only expose a couple of the methods\n    * to the outer class: initialState/state/setState/onStateUpdate/sql\n    */\n-  readonly #agent: Agent<Env, State>;\n+  #agent: Agent<Env, State>;\n \n   protected constructor(ctx: DurableObjectState, env: Env) {\n     super(ctx, env);\n     const self = this;\n \n-    // Since McpAgent's _aren't_ yet real \"Agents\" (they route differently, they don't support\n-    // scheduling etc, let's only expose a couple of the methods\n-    // to the outer class for now.\n     this.#agent = new (class extends Agent<Env, State> {",
        "comment_created_at": "2025-04-08T08:01:19+00:00",
        "comment_author": "threepointone",
        "comment_body": "https://github.com/cloudflare/agents/pull/161",
        "pr_file_module": null
      }
    ]
  }
]