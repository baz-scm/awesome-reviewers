[
  {
    "discussion_id": "2192438428",
    "pr_number": 7121,
    "pr_file": "content/providers/01-ai-sdk-providers/90-elevenlabs.mdx",
    "created_at": "2025-07-08T12:52:10+00:00",
    "commented_code": "Whether to annotate which speaker is currently talking in the uploaded file.\n   Defaults to `true`.\n \n-- **fileFormat** _enum_\n+- **file_format** _enum_",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2192438428",
        "repo_full_name": "vercel/ai",
        "pr_number": 7121,
        "pr_file": "content/providers/01-ai-sdk-providers/90-elevenlabs.mdx",
        "discussion_id": "2192438428",
        "commented_code": "@@ -115,7 +115,7 @@ The following provider options are available:\n   Whether to annotate which speaker is currently talking in the uploaded file.\n   Defaults to `true`.\n \n-- **fileFormat** _enum_\n+- **file_format** _enum_",
        "comment_created_at": "2025-07-08T12:52:10+00:00",
        "comment_author": "lgrammel",
        "comment_body": "why was this changed to snake case? if that is the case in the code we should fix the code instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2024173157",
    "pr_number": 5496,
    "pr_file": "content/providers/01-ai-sdk-providers/02-openai.mdx",
    "created_at": "2025-04-02T06:48:17+00:00",
    "commented_code": "| ---------- | ------------------------------- |\n | `dall-e-3` | 1024x1024, 1792x1024, 1024x1792 |\n | `dall-e-2` | 256x256, 512x512, 1024x1024     |\n+\n+## Transcription Models\n+\n+You can create models that call the [OpenAI transcription API](https://platform.openai.com/docs/api-reference/audio/transcribe)\n+using the `.transcription()` factory method.\n+\n+The first argument is the model id e.g. `whisper-1`.\n+\n+```ts\n+const model = openai.transcription('whisper-1');\n+```\n+\n+OpenAI transcription models support a single `audio` argument which can be a `File`, `Blob`, `Uint8Array`, `ArrayBuffer`, or a `string` (a URL or base64 encoded audio data).\n+\n+```ts\n+const model = openai.transcription('whisper-1', {\n+  audio: new File([], 'audio.mp3', { type: 'audio/mp3' }),\n+});\n+```\n+\n+You can also pass additional provider-specific options using the `providerOptions` argument.\n+\n+```ts\n+const model = openai.transcription('whisper-1', {\n+  providerOptions: { openai: { timestamp_granularities: ['word'] } },",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2024173157",
        "repo_full_name": "vercel/ai",
        "pr_number": 5496,
        "pr_file": "content/providers/01-ai-sdk-providers/02-openai.mdx",
        "discussion_id": "2024173157",
        "commented_code": "@@ -804,3 +804,63 @@ const model = openai.image('dall-e-3');\n | ---------- | ------------------------------- |\n | `dall-e-3` | 1024x1024, 1792x1024, 1024x1792 |\n | `dall-e-2` | 256x256, 512x512, 1024x1024     |\n+\n+## Transcription Models\n+\n+You can create models that call the [OpenAI transcription API](https://platform.openai.com/docs/api-reference/audio/transcribe)\n+using the `.transcription()` factory method.\n+\n+The first argument is the model id e.g. `whisper-1`.\n+\n+```ts\n+const model = openai.transcription('whisper-1');\n+```\n+\n+OpenAI transcription models support a single `audio` argument which can be a `File`, `Blob`, `Uint8Array`, `ArrayBuffer`, or a `string` (a URL or base64 encoded audio data).\n+\n+```ts\n+const model = openai.transcription('whisper-1', {\n+  audio: new File([], 'audio.mp3', { type: 'audio/mp3' }),\n+});\n+```\n+\n+You can also pass additional provider-specific options using the `providerOptions` argument.\n+\n+```ts\n+const model = openai.transcription('whisper-1', {\n+  providerOptions: { openai: { timestamp_granularities: ['word'] } },",
        "comment_created_at": "2025-04-02T06:48:17+00:00",
        "comment_author": "lgrammel",
        "comment_body": "we usually use `camelCase` in the provider options to match conventions (even if the provider uses `snake_case` in their apis)",
        "pr_file_module": null
      }
    ]
  }
]