[
  {
    "discussion_id": "2080125127",
    "pr_number": 6237,
    "pr_file": "packages/anthropic/src/anthropic-api-types.ts",
    "created_at": "2025-05-08T17:08:23+00:00",
    "commented_code": "cache_control: AnthropicCacheControl | undefined;\n }\n \n+// New type for web search tool result errors\n+export interface AnthropicWebSearchToolResultErrorContent {\n+  type: 'web_search_tool_result_error';\n+  error_code: string; // e.g., 'max_uses_exceeded', 'too_many_requests', etc.",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2080125127",
        "repo_full_name": "vercel/ai",
        "pr_number": 6237,
        "pr_file": "packages/anthropic/src/anthropic-api-types.ts",
        "discussion_id": "2080125127",
        "commented_code": "@@ -87,6 +96,22 @@ export interface AnthropicToolResultContent {\n   cache_control: AnthropicCacheControl | undefined;\n }\n \n+// New type for web search tool result errors\n+export interface AnthropicWebSearchToolResultErrorContent {\n+  type: 'web_search_tool_result_error';\n+  error_code: string; // e.g., 'max_uses_exceeded', 'too_many_requests', etc.",
        "comment_created_at": "2025-05-08T17:08:23+00:00",
        "comment_author": "samdenty",
        "comment_body": "maybe we could add a JSDoc comment pointing to https://docs.anthropic.com/en/docs/build-with-claude/tool-use/web-search-tool#errors",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127581479",
    "pr_number": 6631,
    "pr_file": "packages/ai/src/ui/abstract-chat.ts",
    "created_at": "2025-06-04T23:15:48+00:00",
    "commented_code": "this.messageMetadataSchema = messageMetadataSchema;\n     this.dataPartSchemas = dataPartSchemas;\n     this.state = state;\n+    this.onError = onError;\n+    this.onToolCall = onToolCall;\n+    this.onFinish = onFinish;\n   }\n \n-  getStatus(): ChatStatus {\n-    return this.state.getStatus();\n+  /**\n+   * Hook status:\n+   *\n+   * - `submitted`: The message has been sent to the API and we're awaiting the start of the response stream.\n+   * - `streaming`: The response is actively streaming in from the API, receiving chunks of data.\n+   * - `ready`: The full response has been received and processed; a new user message can be submitted.\n+   * - `error`: An error occurred during the API request, preventing successful completion.",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2127581479",
        "repo_full_name": "vercel/ai",
        "pr_number": 6631,
        "pr_file": "packages/ai/src/ui/abstract-chat.ts",
        "discussion_id": "2127581479",
        "commented_code": "@@ -158,53 +181,69 @@ export abstract class AbstractChat<\n     this.messageMetadataSchema = messageMetadataSchema;\n     this.dataPartSchemas = dataPartSchemas;\n     this.state = state;\n+    this.onError = onError;\n+    this.onToolCall = onToolCall;\n+    this.onFinish = onFinish;\n   }\n \n-  getStatus(): ChatStatus {\n-    return this.state.getStatus();\n+  /**\n+   * Hook status:\n+   *\n+   * - `submitted`: The message has been sent to the API and we're awaiting the start of the response stream.\n+   * - `streaming`: The response is actively streaming in from the API, receiving chunks of data.\n+   * - `ready`: The full response has been received and processed; a new user message can be submitted.\n+   * - `error`: An error occurred during the API request, preventing successful completion.",
        "comment_created_at": "2025-06-04T23:15:48+00:00",
        "comment_author": "elliott-with-the-longest-name-on-github",
        "comment_body": "Pushed JSDoc back into the abstraction so it can be inherited",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040712079",
    "pr_number": 5697,
    "pr_file": "packages/assemblyai/src/assemblyai-transcription-model.ts",
    "created_at": "2025-04-12T18:12:44+00:00",
    "commented_code": "+import {\n+  TranscriptionModelV1,\n+  TranscriptionModelV1CallWarning,\n+} from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createJsonResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+  postToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { AssemblyAIConfig } from './assemblyai-config';\n+import { assemblyaiFailedResponseHandler } from './assemblyai-error';\n+import { AssemblyAITranscriptionModelId } from './assemblyai-transcription-settings';\n+import { AssemblyAITranscriptionAPITypes } from './assemblyai-api-types';\n+\n+// https://www.assemblyai.com/docs/api-reference/transcripts/submit\n+const assemblyaiProviderOptionsSchema = z.object({\n+  audioEndAt: z.number().int().nullish(),",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040712079",
        "repo_full_name": "vercel/ai",
        "pr_number": 5697,
        "pr_file": "packages/assemblyai/src/assemblyai-transcription-model.ts",
        "discussion_id": "2040712079",
        "commented_code": "@@ -0,0 +1,785 @@\n+import {\n+  TranscriptionModelV1,\n+  TranscriptionModelV1CallWarning,\n+} from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createJsonResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+  postToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { AssemblyAIConfig } from './assemblyai-config';\n+import { assemblyaiFailedResponseHandler } from './assemblyai-error';\n+import { AssemblyAITranscriptionModelId } from './assemblyai-transcription-settings';\n+import { AssemblyAITranscriptionAPITypes } from './assemblyai-api-types';\n+\n+// https://www.assemblyai.com/docs/api-reference/transcripts/submit\n+const assemblyaiProviderOptionsSchema = z.object({\n+  audioEndAt: z.number().int().nullish(),",
        "comment_created_at": "2025-04-12T18:12:44+00:00",
        "comment_author": "samdenty",
        "comment_body": "can we add jsdoc here?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040708763",
    "pr_number": 5721,
    "pr_file": "packages/deepgram/src/deepgram-transcription-model.ts",
    "created_at": "2025-04-12T17:51:44+00:00",
    "commented_code": "+import {\n+  TranscriptionModelV1,\n+  TranscriptionModelV1CallWarning,\n+} from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  convertBase64ToUint8Array,\n+  createJsonResponseHandler,\n+  parseProviderOptions,\n+  postToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { DeepgramConfig } from './deepgram-config';\n+import { deepgramFailedResponseHandler } from './deepgram-error';\n+import { DeepgramTranscriptionModelId } from './deepgram-transcription-settings';\n+import { DeepgramTranscriptionAPITypes } from './deepgram-api-types';\n+\n+// https://developers.deepgram.com/docs/pre-recorded-audio#results\n+const deepgramProviderOptionsSchema = z.object({\n+  // Base parameters\n+  language: z.string().nullish(),",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040708763",
        "repo_full_name": "vercel/ai",
        "pr_number": 5721,
        "pr_file": "packages/deepgram/src/deepgram-transcription-model.ts",
        "discussion_id": "2040708763",
        "commented_code": "@@ -0,0 +1,243 @@\n+import {\n+  TranscriptionModelV1,\n+  TranscriptionModelV1CallWarning,\n+} from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  convertBase64ToUint8Array,\n+  createJsonResponseHandler,\n+  parseProviderOptions,\n+  postToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { DeepgramConfig } from './deepgram-config';\n+import { deepgramFailedResponseHandler } from './deepgram-error';\n+import { DeepgramTranscriptionModelId } from './deepgram-transcription-settings';\n+import { DeepgramTranscriptionAPITypes } from './deepgram-api-types';\n+\n+// https://developers.deepgram.com/docs/pre-recorded-audio#results\n+const deepgramProviderOptionsSchema = z.object({\n+  // Base parameters\n+  language: z.string().nullish(),",
        "comment_created_at": "2025-04-12T17:51:44+00:00",
        "comment_author": "samdenty",
        "comment_body": "optional improvement: I believe if we add JSDoc here on each property in the schema, it'll display on the provider options type inline in the IDE",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2041069341",
    "pr_number": 5727,
    "pr_file": "packages/hume/src/hume-speech-model.ts",
    "created_at": "2025-04-13T07:53:30+00:00",
    "commented_code": "+import { SpeechModelV1, SpeechModelV1CallWarning } from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createBinaryResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { HumeConfig } from './hume-config';\n+import { humeFailedResponseHandler } from './hume-error';\n+import { HumeSpeechAPITypes } from './hume-api-types';\n+\n+const humeSpeechCallOptionsUtterancesSchema = z.array(\n+  z.object({\n+    text: z.string(),\n+    description: z.string().optional(),\n+    speed: z.number().optional(),\n+    trailingSilence: z.number().optional(),\n+    voice: z\n+      .object({\n+        id: z.string(),\n+        provider: z.enum(['HUME_AI', 'CUSTOM_VOICE']).optional(),\n+      })\n+      .or(\n+        z.object({\n+          name: z.string(),\n+          provider: z.enum(['HUME_AI', 'CUSTOM_VOICE']).optional(),\n+        }),\n+      )\n+      .optional(),\n+  }),\n+);\n+\n+// https://dev.hume.ai/reference/text-to-speech-tts/synthesize-file\n+const humeSpeechCallOptionsSchema = z.object({\n+  context: z\n+    .object({\n+      generationId: z.string(),\n+    })\n+    .or(\n+      z.object({\n+        utterances: humeSpeechCallOptionsUtterancesSchema,\n+      }),\n+    )\n+    .nullish(),\n+  numGenerations: z.number().nullish(),\n+  splitUtterances: z.boolean().nullish(),\n+});\n+",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2041069341",
        "repo_full_name": "vercel/ai",
        "pr_number": 5727,
        "pr_file": "packages/hume/src/hume-speech-model.ts",
        "discussion_id": "2041069341",
        "commented_code": "@@ -0,0 +1,197 @@\n+import { SpeechModelV1, SpeechModelV1CallWarning } from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createBinaryResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { HumeConfig } from './hume-config';\n+import { humeFailedResponseHandler } from './hume-error';\n+import { HumeSpeechAPITypes } from './hume-api-types';\n+\n+const humeSpeechCallOptionsUtterancesSchema = z.array(\n+  z.object({\n+    text: z.string(),\n+    description: z.string().optional(),\n+    speed: z.number().optional(),\n+    trailingSilence: z.number().optional(),\n+    voice: z\n+      .object({\n+        id: z.string(),\n+        provider: z.enum(['HUME_AI', 'CUSTOM_VOICE']).optional(),\n+      })\n+      .or(\n+        z.object({\n+          name: z.string(),\n+          provider: z.enum(['HUME_AI', 'CUSTOM_VOICE']).optional(),\n+        }),\n+      )\n+      .optional(),\n+  }),\n+);\n+\n+// https://dev.hume.ai/reference/text-to-speech-tts/synthesize-file\n+const humeSpeechCallOptionsSchema = z.object({\n+  context: z\n+    .object({\n+      generationId: z.string(),\n+    })\n+    .or(\n+      z.object({\n+        utterances: humeSpeechCallOptionsUtterancesSchema,\n+      }),\n+    )\n+    .nullish(),\n+  numGenerations: z.number().nullish(),\n+  splitUtterances: z.boolean().nullish(),\n+});\n+",
        "comment_created_at": "2025-04-13T07:53:30+00:00",
        "comment_author": "lgrammel",
        "comment_body": "add model id and jsdoc?",
        "pr_file_module": null
      }
    ]
  }
]