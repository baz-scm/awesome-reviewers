[
  {
    "discussion_id": "2192963475",
    "pr_number": 7140,
    "pr_file": "packages/ai/src/ui/ui-messages.ts",
    "created_at": "2025-07-08T16:31:21+00:00",
    "commented_code": "state: 'input-streaming';\n         input: DeepPartial<TOOLS[NAME]['input']>;\n         providerExecuted?: boolean;\n+        output: undefined;\n+        errorText: undefined;",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2192963475",
        "repo_full_name": "vercel/ai",
        "pr_number": 7140,
        "pr_file": "packages/ai/src/ui/ui-messages.ts",
        "discussion_id": "2192963475",
        "commented_code": "@@ -179,21 +179,27 @@ export type ToolUIPart<TOOLS extends UITools = UITools> = ValueOf<{\n         state: 'input-streaming';\n         input: DeepPartial<TOOLS[NAME]['input']>;\n         providerExecuted?: boolean;\n+        output: undefined;\n+        errorText: undefined;",
        "comment_created_at": "2025-07-08T16:31:21+00:00",
        "comment_author": "lgrammel",
        "comment_body": "`undefined` or `never`? (i have used `never` in other places for something similar)",
        "pr_file_module": null
      },
      {
        "comment_id": "2192963906",
        "repo_full_name": "vercel/ai",
        "pr_number": 7140,
        "pr_file": "packages/ai/src/ui/ui-messages.ts",
        "discussion_id": "2192963475",
        "commented_code": "@@ -179,21 +179,27 @@ export type ToolUIPart<TOOLS extends UITools = UITools> = ValueOf<{\n         state: 'input-streaming';\n         input: DeepPartial<TOOLS[NAME]['input']>;\n         providerExecuted?: boolean;\n+        output: undefined;\n+        errorText: undefined;",
        "comment_created_at": "2025-07-08T16:31:36+00:00",
        "comment_author": "lgrammel",
        "comment_body": "`never` is actually better ts wise imo",
        "pr_file_module": null
      },
      {
        "comment_id": "2192965622",
        "repo_full_name": "vercel/ai",
        "pr_number": 7140,
        "pr_file": "packages/ai/src/ui/ui-messages.ts",
        "discussion_id": "2192963475",
        "commented_code": "@@ -179,21 +179,27 @@ export type ToolUIPart<TOOLS extends UITools = UITools> = ValueOf<{\n         state: 'input-streaming';\n         input: DeepPartial<TOOLS[NAME]['input']>;\n         providerExecuted?: boolean;\n+        output: undefined;\n+        errorText: undefined;",
        "comment_created_at": "2025-07-08T16:32:34+00:00",
        "comment_author": "lgrammel",
        "comment_body": "and you might want it to be optional ",
        "pr_file_module": null
      },
      {
        "comment_id": "2192999078",
        "repo_full_name": "vercel/ai",
        "pr_number": 7140,
        "pr_file": "packages/ai/src/ui/ui-messages.ts",
        "discussion_id": "2192963475",
        "commented_code": "@@ -179,21 +179,27 @@ export type ToolUIPart<TOOLS extends UITools = UITools> = ValueOf<{\n         state: 'input-streaming';\n         input: DeepPartial<TOOLS[NAME]['input']>;\n         providerExecuted?: boolean;\n+        output: undefined;\n+        errorText: undefined;",
        "comment_created_at": "2025-07-08T16:49:45+00:00",
        "comment_author": "remorses",
        "comment_body": "I use never now, tested the destructing and it still works",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1639577338",
    "pr_number": 1949,
    "pr_file": "packages/ui-utils/src/types.ts",
    "created_at": "2024-06-14T09:51:40+00:00",
    "commented_code": "role: 'data';\n   data: JSONValue; // application-specific data\n };\n+\n+export type AssistantStreamPart = {\n+  event: AssistantThreadStatus;\n+  data?: any;\n+};",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "1639577338",
        "repo_full_name": "vercel/ai",
        "pr_number": 1949,
        "pr_file": "packages/ui-utils/src/types.ts",
        "discussion_id": "1639577338",
        "commented_code": "@@ -463,3 +464,8 @@ export type DataMessage = {\n   role: 'data';\n   data: JSONValue; // application-specific data\n };\n+\n+export type AssistantStreamPart = {\n+  event: AssistantThreadStatus;\n+  data?: any;\n+};",
        "comment_created_at": "2024-06-14T09:51:40+00:00",
        "comment_author": "lgrammel",
        "comment_body": "most stream parts are defined in stream parts afaik. do we need to expose this? otherwise would prefer if it's consistent with the other stream parts. also, `any` is risky. is `unknown` possible?",
        "pr_file_module": null
      },
      {
        "comment_id": "1642823064",
        "repo_full_name": "vercel/ai",
        "pr_number": 1949,
        "pr_file": "packages/ui-utils/src/types.ts",
        "discussion_id": "1639577338",
        "commented_code": "@@ -463,3 +464,8 @@ export type DataMessage = {\n   role: 'data';\n   data: JSONValue; // application-specific data\n };\n+\n+export type AssistantStreamPart = {\n+  event: AssistantThreadStatus;\n+  data?: any;\n+};",
        "comment_created_at": "2024-06-17T13:30:45+00:00",
        "comment_author": "jeremyphilemon",
        "comment_body": "updated to `unknown` and also defined it inside `stream-parts`!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157322948",
    "pr_number": 6802,
    "pr_file": "packages/openai/src/responses/openai-responses-prepare-tools.ts",
    "created_at": "2025-06-19T15:58:57+00:00",
    "commented_code": "},\n             });\n             break;\n+          case 'openai.file_search':\n+            openaiTools.push({\n+              type: 'file_search',\n+              vector_store_ids: tool.args.vectorStoreIds as\n+                | string[]\n+                | undefined,\n+              max_results: tool.args.maxResults as number | undefined,\n+              search_type: tool.args.searchType as",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2157322948",
        "repo_full_name": "vercel/ai",
        "pr_number": 6802,
        "pr_file": "packages/openai/src/responses/openai-responses-prepare-tools.ts",
        "discussion_id": "2157322948",
        "commented_code": "@@ -61,6 +62,20 @@ export function prepareResponsesTools({\n               },\n             });\n             break;\n+          case 'openai.file_search':\n+            openaiTools.push({\n+              type: 'file_search',\n+              vector_store_ids: tool.args.vectorStoreIds as\n+                | string[]\n+                | undefined,\n+              max_results: tool.args.maxResults as number | undefined,\n+              search_type: tool.args.searchType as",
        "comment_created_at": "2025-06-19T15:58:57+00:00",
        "comment_author": "lgrammel",
        "comment_body": "shouldnt this be automatically typed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2157361903",
        "repo_full_name": "vercel/ai",
        "pr_number": 6802,
        "pr_file": "packages/openai/src/responses/openai-responses-prepare-tools.ts",
        "discussion_id": "2157322948",
        "commented_code": "@@ -61,6 +62,20 @@ export function prepareResponsesTools({\n               },\n             });\n             break;\n+          case 'openai.file_search':\n+            openaiTools.push({\n+              type: 'file_search',\n+              vector_store_ids: tool.args.vectorStoreIds as\n+                | string[]\n+                | undefined,\n+              max_results: tool.args.maxResults as number | undefined,\n+              search_type: tool.args.searchType as",
        "comment_created_at": "2025-06-19T16:23:50+00:00",
        "comment_author": "dancer",
        "comment_body": "the type assertions are needed because tool.args is typed as unknown - the generic interface can't know each tools specific arg types afaik",
        "pr_file_module": null
      },
      {
        "comment_id": "2158175193",
        "repo_full_name": "vercel/ai",
        "pr_number": 6802,
        "pr_file": "packages/openai/src/responses/openai-responses-prepare-tools.ts",
        "discussion_id": "2157322948",
        "commented_code": "@@ -61,6 +62,20 @@ export function prepareResponsesTools({\n               },\n             });\n             break;\n+          case 'openai.file_search':\n+            openaiTools.push({\n+              type: 'file_search',\n+              vector_store_ids: tool.args.vectorStoreIds as\n+                | string[]\n+                | undefined,\n+              max_results: tool.args.maxResults as number | undefined,\n+              search_type: tool.args.searchType as",
        "comment_created_at": "2025-06-20T06:41:45+00:00",
        "comment_author": "lgrammel",
        "comment_body": "can you add a zod schema and validate instead?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142713306",
    "pr_number": 6727,
    "pr_file": "packages/anthropic/src/anthropic-messages-language-model.ts",
    "created_at": "2025-06-12T13:16:34+00:00",
    "commented_code": "filename?: string;\n     mediaType: string;\n   }> {\n-    // Helper function to check if citations are enabled for a file part\n-    const isCitationEnabled = (part: any) => {\n+    const isCitationPart = (part: any) => {",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2142713306",
        "repo_full_name": "vercel/ai",
        "pr_number": 6727,
        "pr_file": "packages/anthropic/src/anthropic-messages-language-model.ts",
        "discussion_id": "2142713306",
        "commented_code": "@@ -371,8 +398,18 @@ export class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n     filename?: string;\n     mediaType: string;\n   }> {\n-    // Helper function to check if citations are enabled for a file part\n-    const isCitationEnabled = (part: any) => {\n+    const isCitationPart = (part: any) => {",
        "comment_created_at": "2025-06-12T13:16:34+00:00",
        "comment_author": "lgrammel",
        "comment_body": "avoid any",
        "pr_file_module": null
      },
      {
        "comment_id": "2142714893",
        "repo_full_name": "vercel/ai",
        "pr_number": 6727,
        "pr_file": "packages/anthropic/src/anthropic-messages-language-model.ts",
        "discussion_id": "2142713306",
        "commented_code": "@@ -371,8 +398,18 @@ export class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n     filename?: string;\n     mediaType: string;\n   }> {\n-    // Helper function to check if citations are enabled for a file part\n-    const isCitationEnabled = (part: any) => {\n+    const isCitationPart = (part: any) => {",
        "comment_created_at": "2025-06-12T13:17:18+00:00",
        "comment_author": "lgrammel",
        "comment_body": "also return type should be narrowed via is",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2137221962",
    "pr_number": 6691,
    "pr_file": "packages/cohere/src/cohere-chat-language-model.ts",
    "created_at": "2025-06-10T08:13:40+00:00",
    "commented_code": "content.push({ type: 'text', text });\n     }\n \n+    // citations:\n+    if (response.message.citations != null) {\n+      for (const citation of response.message.citations) {",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2137221962",
        "repo_full_name": "vercel/ai",
        "pr_number": 6691,
        "pr_file": "packages/cohere/src/cohere-chat-language-model.ts",
        "discussion_id": "2137221962",
        "commented_code": "@@ -130,6 +250,32 @@ export class CohereChatLanguageModel implements LanguageModelV2 {\n       content.push({ type: 'text', text });\n     }\n \n+    // citations:\n+    if (response.message.citations != null) {\n+      for (const citation of response.message.citations) {",
        "comment_created_at": "2025-06-10T08:13:40+00:00",
        "comment_author": "lgrammel",
        "comment_body": "you can remove indent via \r\n\r\nfor (const citation of response.message.citations ?? [])",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2026218734",
    "pr_number": 5496,
    "pr_file": "packages/provider-utils/src/test/unified-test-server.ts",
    "created_at": "2025-04-03T05:24:11+00:00",
    "commented_code": "class TestServerCall {\n   constructor(private request: Request) {}\n \n-  get requestBody() {\n+  get requestBodyJson() {\n     return this.request!.text().then(JSON.parse);\n   }\n \n+  get requestBodyMultipart() {\n+    const requestClone = this.request.clone();\n+\n+    return requestClone.text().then(text => {\n+      // Check if the request is multipart/form-data\n+      const contentType = requestClone.headers.get('content-type') || '';\n+      if (contentType.startsWith('multipart/form-data')) {",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2026218734",
        "repo_full_name": "vercel/ai",
        "pr_number": 5496,
        "pr_file": "packages/provider-utils/src/test/unified-test-server.ts",
        "discussion_id": "2026218734",
        "commented_code": "@@ -58,10 +58,30 @@ export type UrlHandlers<\n class TestServerCall {\n   constructor(private request: Request) {}\n \n-  get requestBody() {\n+  get requestBodyJson() {\n     return this.request!.text().then(JSON.parse);\n   }\n \n+  get requestBodyMultipart() {\n+    const requestClone = this.request.clone();\n+\n+    return requestClone.text().then(text => {\n+      // Check if the request is multipart/form-data\n+      const contentType = requestClone.headers.get('content-type') || '';\n+      if (contentType.startsWith('multipart/form-data')) {",
        "comment_created_at": "2025-04-03T05:24:11+00:00",
        "comment_author": "lgrammel",
        "comment_body": "can leave undefined (no `|| ''`) and then use `?.` before `startsWith`",
        "pr_file_module": null
      }
    ]
  }
]