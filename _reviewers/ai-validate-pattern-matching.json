[
  {
    "discussion_id": "2066234402",
    "pr_number": 6028,
    "pr_file": "packages/ai/core/generate-object/output-strategy.ts",
    "created_at": "2025-04-29T12:38:23+00:00",
    "commented_code": "};\n     },\n \n-    validatePartialResult() {\n-      // no streaming in enum mode\n-      throw new UnsupportedFunctionalityError({\n-        functionality: 'partial results in enum mode',\n-      });\n+    async validatePartialResult({ value, textDelta }) {\n+      if (!isJSONObject(value) || typeof value.result !== 'string') {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause:\n+              'value must be an object that contains a string in the \"result\" property.',\n+          }),\n+        };\n+      }\n+\n+      const result = value.result as string;\n+      const possibleEnumValues = enumValues.filter(enumValue =>\n+        enumValue.startsWith(result),\n+      );\n+\n+      if (value.result.length === 0 || possibleEnumValues.length === 0) {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause: 'value must be a string in the enum',\n+          }),\n+        };\n+      }\n+\n+      return {\n+        success: true,\n+        value: {\n+          partial:\n+            possibleEnumValues.length > 1 ? result : possibleEnumValues[0],\n+          textDelta,\n+        },\n+      };",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2066234402",
        "repo_full_name": "vercel/ai",
        "pr_number": 6028,
        "pr_file": "packages/ai/core/generate-object/output-strategy.ts",
        "discussion_id": "2066234402",
        "commented_code": "@@ -335,11 +335,41 @@ const enumOutputStrategy = <ENUM extends string>(\n           };\n     },\n \n-    validatePartialResult() {\n-      // no streaming in enum mode\n-      throw new UnsupportedFunctionalityError({\n-        functionality: 'partial results in enum mode',\n-      });\n+    async validatePartialResult({ value, textDelta }) {\n+      if (!isJSONObject(value) || typeof value.result !== 'string') {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause:\n+              'value must be an object that contains a string in the \"result\" property.',\n+          }),\n+        };\n+      }\n+\n+      const result = value.result as string;\n+      const possibleEnumValues = enumValues.filter(enumValue =>\n+        enumValue.startsWith(result),\n+      );\n+\n+      if (value.result.length === 0 || possibleEnumValues.length === 0) {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause: 'value must be a string in the enum',\n+          }),\n+        };\n+      }\n+\n+      return {\n+        success: true,\n+        value: {\n+          partial:\n+            possibleEnumValues.length > 1 ? result : possibleEnumValues[0],\n+          textDelta,\n+        },\n+      };",
        "comment_created_at": "2025-04-29T12:38:23+00:00",
        "comment_author": "lgrammel",
        "comment_body": "this can lead to issues where the wrong enum value is selected as a partial result, leading to changing enum values. i'd prefer a solution where that cannot happen (either by only returning fully matched enum values, or (more complicated) by returning enum values for which only one value is possible per prefix)",
        "pr_file_module": null
      },
      {
        "comment_id": "2066257595",
        "repo_full_name": "vercel/ai",
        "pr_number": 6028,
        "pr_file": "packages/ai/core/generate-object/output-strategy.ts",
        "discussion_id": "2066234402",
        "commented_code": "@@ -335,11 +335,41 @@ const enumOutputStrategy = <ENUM extends string>(\n           };\n     },\n \n-    validatePartialResult() {\n-      // no streaming in enum mode\n-      throw new UnsupportedFunctionalityError({\n-        functionality: 'partial results in enum mode',\n-      });\n+    async validatePartialResult({ value, textDelta }) {\n+      if (!isJSONObject(value) || typeof value.result !== 'string') {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause:\n+              'value must be an object that contains a string in the \"result\" property.',\n+          }),\n+        };\n+      }\n+\n+      const result = value.result as string;\n+      const possibleEnumValues = enumValues.filter(enumValue =>\n+        enumValue.startsWith(result),\n+      );\n+\n+      if (value.result.length === 0 || possibleEnumValues.length === 0) {\n+        return {\n+          success: false,\n+          error: new TypeValidationError({\n+            value,\n+            cause: 'value must be a string in the enum',\n+          }),\n+        };\n+      }\n+\n+      return {\n+        success: true,\n+        value: {\n+          partial:\n+            possibleEnumValues.length > 1 ? result : possibleEnumValues[0],\n+          textDelta,\n+        },\n+      };",
        "comment_created_at": "2025-04-29T12:47:17+00:00",
        "comment_author": "samdenty",
        "comment_body": "yep good call out - I added tests to test for these cases. In this case I check for `possibleEnumValues.length > 1` which means there's more than one match, in that case i return just the partial value. If there's only one possible enum per prefix, i return the full value preemptively",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040695274",
    "pr_number": 5718,
    "pr_file": "packages/ai/core/util/detect-mimetype.ts",
    "created_at": "2025-04-12T16:50:53+00:00",
    "commented_code": "},\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040695274",
        "repo_full_name": "vercel/ai",
        "pr_number": 5718,
        "pr_file": "packages/ai/core/util/detect-mimetype.ts",
        "discussion_id": "2040695274",
        "commented_code": "@@ -83,13 +85,58 @@ export const audioMimeTypeSignatures = [\n   },\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
        "comment_created_at": "2025-04-12T16:50:53+00:00",
        "comment_author": "lgrammel",
        "comment_body": "What is this for? Can we do this more elegantly?",
        "pr_file_module": null
      },
      {
        "comment_id": "2040695498",
        "repo_full_name": "vercel/ai",
        "pr_number": 5718,
        "pr_file": "packages/ai/core/util/detect-mimetype.ts",
        "discussion_id": "2040695274",
        "commented_code": "@@ -83,13 +85,58 @@ export const audioMimeTypeSignatures = [\n   },\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
        "comment_created_at": "2025-04-12T16:51:44+00:00",
        "comment_author": "haydenbleasel",
        "comment_body": "So this was a bit of a rabbit hole! Turns out some mp3 files contain id3 tags at the start of the buffer (metadata basically) so i have to check for and strip that, otherwise the byte prefixes are different.",
        "pr_file_module": null
      },
      {
        "comment_id": "2040710888",
        "repo_full_name": "vercel/ai",
        "pr_number": 5718,
        "pr_file": "packages/ai/core/util/detect-mimetype.ts",
        "discussion_id": "2040695274",
        "commented_code": "@@ -83,13 +85,58 @@ export const audioMimeTypeSignatures = [\n   },\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
        "comment_created_at": "2025-04-12T18:04:39+00:00",
        "comment_author": "samdenty",
        "comment_body": "ooh cool i love hacking with file encodings \ud83d\udc40",
        "pr_file_module": null
      },
      {
        "comment_id": "2041062488",
        "repo_full_name": "vercel/ai",
        "pr_number": 5718,
        "pr_file": "packages/ai/core/util/detect-mimetype.ts",
        "discussion_id": "2040695274",
        "commented_code": "@@ -83,13 +85,58 @@ export const audioMimeTypeSignatures = [\n   },\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
        "comment_created_at": "2025-04-13T07:05:52+00:00",
        "comment_author": "lgrammel",
        "comment_body": "interesting - looks like this is not going to work for base64? we need tests around this and make it work for base 64 as well. Also it might be good to have some way of opting (or flagging on the signatures) since this removal won't be needed for images presumably.",
        "pr_file_module": null
      },
      {
        "comment_id": "2041062611",
        "repo_full_name": "vercel/ai",
        "pr_number": 5718,
        "pr_file": "packages/ai/core/util/detect-mimetype.ts",
        "discussion_id": "2040695274",
        "commented_code": "@@ -83,13 +85,58 @@ export const audioMimeTypeSignatures = [\n   },\n ] as const;\n \n+const getID3v2TagSize = (header: Uint8Array) => {\n+  const size =\n+    ((header[6] & 0x7f) << 21) |\n+    ((header[7] & 0x7f) << 14) |\n+    ((header[8] & 0x7f) << 7) |\n+    (header[9] & 0x7f);\n+\n+  return size + 10; // add header size\n+};\n+\n+const stripID3 = (arrayBuffer: Uint8Array) => {\n+  const bytes = new Uint8Array(arrayBuffer);\n+\n+  if (\n+    bytes[0] === 0x49 && // 'I'\n+    bytes[1] === 0x44 && // 'D'\n+    bytes[2] === 0x33 // '3'\n+  ) {\n+    const id3Size = getID3v2TagSize(bytes);\n+    return bytes.slice(id3Size); // The raw MP3 starts here\n+  }\n+\n+  return bytes; // No ID3 tag, return as-is\n+};\n+\n export function detectMimeType({\n   data,\n   signatures,\n }: {\n   data: Uint8Array | string;\n   signatures: typeof audioMimeTypeSignatures | typeof imageMimeTypeSignatures;\n }): (typeof signatures)[number]['mimeType'] | undefined {\n+  // Handle MP3 files with ID3 tags",
        "comment_created_at": "2025-04-13T07:07:05+00:00",
        "comment_author": "lgrammel",
        "comment_body": "btw, is this a separate bugfix that should be extracted into a standalone PR?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040736059",
    "pr_number": 5726,
    "pr_file": "packages/lmnt/src/lmnt-speech-model.ts",
    "created_at": "2025-04-12T20:33:29+00:00",
    "commented_code": "+import { SpeechModelV1, SpeechModelV1CallWarning } from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createBinaryResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { LMNTConfig } from './lmnt-config';\n+import { lmntFailedResponseHandler } from './lmnt-error';\n+import { LMNTSpeechModelId } from './lmnt-speech-settings';\n+import { LMNTSpeechAPITypes } from './lmnt-api-types';\n+\n+// https://docs.lmnt.com/api-reference/speech/synthesize-speech-bytes\n+const lmntSpeechCallOptionsSchema = z.object({\n+  model: z.enum(['aurora', 'blizzard']).optional().default('aurora'),\n+  language: z\n+    .enum([\n+      'auto',\n+      'en',\n+      'es',\n+      'pt',\n+      'fr',\n+      'de',\n+      'zh',\n+      'ko',\n+      'hi',\n+      'ja',\n+      'ru',\n+      'it',\n+      'tr',\n+    ])\n+    .optional()\n+    .default('auto'),\n+  format: z\n+    .enum(['aac', 'mp3', 'mulaw', 'raw', 'wav'])\n+    .optional()\n+    .default('mp3'),\n+  sampleRate: z.number().int().optional().default(24000),\n+  speed: z.number().min(0.25).max(2).optional().default(1),\n+  seed: z.number().int().optional(),\n+  conversational: z.boolean().optional().default(false),\n+  length: z.number().max(300).optional(),\n+  topP: z.number().min(0).max(1).optional().default(1),\n+  temperature: z.number().min(0).optional().default(1),\n+});\n+\n+export type LMNTSpeechCallOptions = z.infer<typeof lmntSpeechCallOptionsSchema>;\n+\n+interface LMNTSpeechModelConfig extends LMNTConfig {\n+  _internal?: {\n+    currentDate?: () => Date;\n+  };\n+}\n+\n+export class LMNTSpeechModel implements SpeechModelV1 {\n+  readonly specificationVersion = 'v1';\n+\n+  get provider(): string {\n+    return this.config.provider;\n+  }\n+\n+  constructor(\n+    readonly modelId: LMNTSpeechModelId,\n+    private readonly config: LMNTSpeechModelConfig,\n+  ) {}\n+\n+  private getArgs({\n+    text,\n+    voice = 'ava',\n+    outputFormat = 'mp3',\n+    speed,\n+    providerOptions,\n+  }: Parameters<SpeechModelV1['doGenerate']>[0]) {\n+    const warnings: SpeechModelV1CallWarning[] = [];\n+\n+    // Parse provider options\n+    const lmntOptions = parseProviderOptions({\n+      provider: 'lmnt',\n+      providerOptions,\n+      schema: lmntSpeechCallOptionsSchema,\n+    });\n+\n+    // Create request body\n+    const requestBody: Record<string, unknown> = {\n+      model: this.modelId,\n+      text,\n+      voice,\n+      response_format: 'mp3',\n+      speed,\n+    };\n+\n+    if (outputFormat) {\n+      if (['mp3', 'aac', 'mulaw', 'raw', 'wav'].includes(outputFormat)) {\n+        requestBody.response_format = outputFormat;\n+      } else {\n+        warnings.push({\n+          type: 'unsupported-setting',\n+          setting: 'outputFormat',\n+          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`,\n+        });\n+      }\n+    }\n+\n+    // Add provider-specific options\n+    if (lmntOptions) {\n+      const speechModelOptions: Omit<LMNTSpeechAPITypes, 'voice' | 'text'> = {};\n+\n+      for (const key in speechModelOptions) {\n+        const value =\n+          speechModelOptions[\n+            key as keyof Omit<LMNTSpeechAPITypes, 'voice' | 'text'>\n+          ];\n+        if (value !== undefined) {\n+          requestBody[key] = value;",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040736059",
        "repo_full_name": "vercel/ai",
        "pr_number": 5726,
        "pr_file": "packages/lmnt/src/lmnt-speech-model.ts",
        "discussion_id": "2040736059",
        "commented_code": "@@ -0,0 +1,163 @@\n+import { SpeechModelV1, SpeechModelV1CallWarning } from '@ai-sdk/provider';\n+import {\n+  combineHeaders,\n+  createBinaryResponseHandler,\n+  parseProviderOptions,\n+  postJsonToApi,\n+} from '@ai-sdk/provider-utils';\n+import { z } from 'zod';\n+import { LMNTConfig } from './lmnt-config';\n+import { lmntFailedResponseHandler } from './lmnt-error';\n+import { LMNTSpeechModelId } from './lmnt-speech-settings';\n+import { LMNTSpeechAPITypes } from './lmnt-api-types';\n+\n+// https://docs.lmnt.com/api-reference/speech/synthesize-speech-bytes\n+const lmntSpeechCallOptionsSchema = z.object({\n+  model: z.enum(['aurora', 'blizzard']).optional().default('aurora'),\n+  language: z\n+    .enum([\n+      'auto',\n+      'en',\n+      'es',\n+      'pt',\n+      'fr',\n+      'de',\n+      'zh',\n+      'ko',\n+      'hi',\n+      'ja',\n+      'ru',\n+      'it',\n+      'tr',\n+    ])\n+    .optional()\n+    .default('auto'),\n+  format: z\n+    .enum(['aac', 'mp3', 'mulaw', 'raw', 'wav'])\n+    .optional()\n+    .default('mp3'),\n+  sampleRate: z.number().int().optional().default(24000),\n+  speed: z.number().min(0.25).max(2).optional().default(1),\n+  seed: z.number().int().optional(),\n+  conversational: z.boolean().optional().default(false),\n+  length: z.number().max(300).optional(),\n+  topP: z.number().min(0).max(1).optional().default(1),\n+  temperature: z.number().min(0).optional().default(1),\n+});\n+\n+export type LMNTSpeechCallOptions = z.infer<typeof lmntSpeechCallOptionsSchema>;\n+\n+interface LMNTSpeechModelConfig extends LMNTConfig {\n+  _internal?: {\n+    currentDate?: () => Date;\n+  };\n+}\n+\n+export class LMNTSpeechModel implements SpeechModelV1 {\n+  readonly specificationVersion = 'v1';\n+\n+  get provider(): string {\n+    return this.config.provider;\n+  }\n+\n+  constructor(\n+    readonly modelId: LMNTSpeechModelId,\n+    private readonly config: LMNTSpeechModelConfig,\n+  ) {}\n+\n+  private getArgs({\n+    text,\n+    voice = 'ava',\n+    outputFormat = 'mp3',\n+    speed,\n+    providerOptions,\n+  }: Parameters<SpeechModelV1['doGenerate']>[0]) {\n+    const warnings: SpeechModelV1CallWarning[] = [];\n+\n+    // Parse provider options\n+    const lmntOptions = parseProviderOptions({\n+      provider: 'lmnt',\n+      providerOptions,\n+      schema: lmntSpeechCallOptionsSchema,\n+    });\n+\n+    // Create request body\n+    const requestBody: Record<string, unknown> = {\n+      model: this.modelId,\n+      text,\n+      voice,\n+      response_format: 'mp3',\n+      speed,\n+    };\n+\n+    if (outputFormat) {\n+      if (['mp3', 'aac', 'mulaw', 'raw', 'wav'].includes(outputFormat)) {\n+        requestBody.response_format = outputFormat;\n+      } else {\n+        warnings.push({\n+          type: 'unsupported-setting',\n+          setting: 'outputFormat',\n+          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`,\n+        });\n+      }\n+    }\n+\n+    // Add provider-specific options\n+    if (lmntOptions) {\n+      const speechModelOptions: Omit<LMNTSpeechAPITypes, 'voice' | 'text'> = {};\n+\n+      for (const key in speechModelOptions) {\n+        const value =\n+          speechModelOptions[\n+            key as keyof Omit<LMNTSpeechAPITypes, 'voice' | 'text'>\n+          ];\n+        if (value !== undefined) {\n+          requestBody[key] = value;",
        "comment_created_at": "2025-04-12T20:33:29+00:00",
        "comment_author": "Copilot",
        "comment_body": "The loop iterates over the empty object 'speechModelOptions' instead of iterating over 'lmntOptions' to apply provider-specific options. Consider replacing 'speechModelOptions' with 'lmntOptions' to correctly merge options into the request body.\n```suggestion\n      if (lmntOptions) {\n        for (const key in lmntOptions) {\n          const value =\n            lmntOptions[\n              key as keyof Omit<LMNTSpeechAPITypes, 'voice' | 'text'>\n            ];\n          if (value !== undefined) {\n            requestBody[key] = value;\n          }\n```",
        "pr_file_module": null
      }
    ]
  }
]