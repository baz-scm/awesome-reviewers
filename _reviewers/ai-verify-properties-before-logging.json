[
  {
    "discussion_id": "2040698199",
    "pr_number": 5721,
    "pr_file": "examples/ai-core/src/transcribe/deepgram-url.ts",
    "created_at": "2025-04-12T16:57:42+00:00",
    "commented_code": "+import { deepgram } from '@ai-sdk/deepgram';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: deepgram.transcription('nova-3'),\n+    audio: new URL(\n+      'https://github.com/vercel/ai/raw/refs/heads/main/examples/ai-core/data/galileo.mp3',\n+    ),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040698199",
        "repo_full_name": "vercel/ai",
        "pr_number": 5721,
        "pr_file": "examples/ai-core/src/transcribe/deepgram-url.ts",
        "discussion_id": "2040698199",
        "commented_code": "@@ -0,0 +1,21 @@\n+import { deepgram } from '@ai-sdk/deepgram';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: deepgram.transcription('nova-3'),\n+    audio: new URL(\n+      'https://github.com/vercel/ai/raw/refs/heads/main/examples/ai-core/data/galileo.mp3',\n+    ),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);",
        "comment_created_at": "2025-04-12T16:57:42+00:00",
        "comment_author": "Copilot",
        "comment_body": "The logged property should be 'response' instead of 'responses' to match the actual return value from doGenerate.\n```suggestion\n  console.log('Response:', result.response);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040698217",
    "pr_number": 5721,
    "pr_file": "examples/ai-core/src/transcribe/deepgram-string.ts",
    "created_at": "2025-04-12T16:57:42+00:00",
    "commented_code": "+import { deepgram } from '@ai-sdk/deepgram';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: deepgram.transcription('nova-3'),\n+    audio: Buffer.from(await readFile('./data/galileo.mp3')).toString('base64'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040698217",
        "repo_full_name": "vercel/ai",
        "pr_number": 5721,
        "pr_file": "examples/ai-core/src/transcribe/deepgram-string.ts",
        "discussion_id": "2040698217",
        "commented_code": "@@ -0,0 +1,20 @@\n+import { deepgram } from '@ai-sdk/deepgram';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: deepgram.transcription('nova-3'),\n+    audio: Buffer.from(await readFile('./data/galileo.mp3')).toString('base64'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);",
        "comment_created_at": "2025-04-12T16:57:42+00:00",
        "comment_author": "Copilot",
        "comment_body": "Update the log to use 'response' instead of 'responses' since doGenerate returns a property named 'response'.\n```suggestion\n  console.log('Response:', result.response);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040736061",
    "pr_number": 5726,
    "pr_file": "examples/ai-core/src/generate-speech/lmnt.ts",
    "created_at": "2025-04-12T20:33:30+00:00",
    "commented_code": "+import { lmnt } from '@ai-sdk/lmnt';\n+import { experimental_generateSpeech as generateSpeech } from 'ai';\n+import 'dotenv/config';\n+import { saveAudioFile } from '../lib/save-audio';\n+\n+async function main() {\n+  const result = await generateSpeech({\n+    model: lmnt.speech('aurora'),\n+    text: 'Hello from the AI SDK!',\n+  });\n+\n+  console.log('Audio:', result.audio);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040736061",
        "repo_full_name": "vercel/ai",
        "pr_number": 5726,
        "pr_file": "examples/ai-core/src/generate-speech/lmnt.ts",
        "discussion_id": "2040736061",
        "commented_code": "@@ -0,0 +1,20 @@\n+import { lmnt } from '@ai-sdk/lmnt';\n+import { experimental_generateSpeech as generateSpeech } from 'ai';\n+import 'dotenv/config';\n+import { saveAudioFile } from '../lib/save-audio';\n+\n+async function main() {\n+  const result = await generateSpeech({\n+    model: lmnt.speech('aurora'),\n+    text: 'Hello from the AI SDK!',\n+  });\n+\n+  console.log('Audio:', result.audio);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
        "comment_created_at": "2025-04-12T20:33:30+00:00",
        "comment_author": "Copilot",
        "comment_body": "The example logs 'result.responses' and 'result.providerMetadata', but the implementation returns a 'response' field without a 'providerMetadata' property. Update the example to log the correct keys (e.g., 'result.response').\n```suggestion\n  console.log('Response:', result.response);\n  // Removed logging of Provider Metadata as it does not exist in the result object.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040887068",
    "pr_number": 5730,
    "pr_file": "examples/ai-core/src/transcribe/revai.ts",
    "created_at": "2025-04-13T04:07:40+00:00",
    "commented_code": "+import { revai } from '@ai-sdk/revai';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: revai.transcription('machine'),\n+    audio: await readFile('data/galileo.mp3'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040887068",
        "repo_full_name": "vercel/ai",
        "pr_number": 5730,
        "pr_file": "examples/ai-core/src/transcribe/revai.ts",
        "discussion_id": "2040887068",
        "commented_code": "@@ -0,0 +1,21 @@\n+import { revai } from '@ai-sdk/revai';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: revai.transcription('machine'),\n+    audio: await readFile('data/galileo.mp3'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
        "comment_created_at": "2025-04-13T04:07:40+00:00",
        "comment_author": "Copilot",
        "comment_body": "The property 'providerMetadata' is logged but is not returned by the transcription method. Consider removing or updating this log to reflect the actual response structure.\n```suggestion\n// Removed the log statement for 'Provider Metadata' as it is not part of the response structure.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040887071",
    "pr_number": 5730,
    "pr_file": "examples/ai-core/src/transcribe/revai-string.ts",
    "created_at": "2025-04-13T04:07:40+00:00",
    "commented_code": "+import { revai } from '@ai-sdk/revai';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: revai.transcription('machine'),\n+    audio: Buffer.from(await readFile('./data/galileo.mp3')).toString('base64'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
    "repo_full_name": "vercel/ai",
    "discussion_comments": [
      {
        "comment_id": "2040887071",
        "repo_full_name": "vercel/ai",
        "pr_number": 5730,
        "pr_file": "examples/ai-core/src/transcribe/revai-string.ts",
        "discussion_id": "2040887071",
        "commented_code": "@@ -0,0 +1,21 @@\n+import { revai } from '@ai-sdk/revai';\n+import { experimental_transcribe as transcribe } from 'ai';\n+import 'dotenv/config';\n+import { readFile } from 'fs/promises';\n+\n+async function main() {\n+  const result = await transcribe({\n+    model: revai.transcription('machine'),\n+    audio: Buffer.from(await readFile('./data/galileo.mp3')).toString('base64'),\n+  });\n+\n+  console.log('Text:', result.text);\n+  console.log('Duration:', result.durationInSeconds);\n+  console.log('Language:', result.language);\n+  console.log('Segments:', result.segments);\n+  console.log('Warnings:', result.warnings);\n+  console.log('Responses:', result.responses);\n+  console.log('Provider Metadata:', result.providerMetadata);",
        "comment_created_at": "2025-04-13T04:07:40+00:00",
        "comment_author": "Copilot",
        "comment_body": "The log references 'responses' whereas the transcription model returns 'response'. Please update the property name in the log output.\n```suggestion\n  console.log('Response:', result.response);\n```",
        "pr_file_module": null
      }
    ]
  }
]