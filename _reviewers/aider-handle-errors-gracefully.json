[
  {
    "discussion_id": "2040703821",
    "pr_number": 3789,
    "pr_file": "aider/repo.py",
    "created_at": "2025-04-12T17:27:38+00:00",
    "commented_code": "original_user_name = self.repo.git.config(\"--get\", \"user.name\")\n         original_committer_name_env = os.environ.get(\"GIT_COMMITTER_NAME\")\n+        original_author_name_env = os.environ.get(\"GIT_AUTHOR_NAME\")\n         committer_name = f\"{original_user_name} (aider)\"\n \n-        if self.attribute_committer:\n-            os.environ[\"GIT_COMMITTER_NAME\"] = committer_name\n-\n-        if aider_edits and self.attribute_author:\n-            original_author_name_env = os.environ.get(\"GIT_AUTHOR_NAME\")\n-            os.environ[\"GIT_AUTHOR_NAME\"] = committer_name\n-\n         try:\n-            self.repo.git.commit(cmd)\n-            commit_hash = self.get_head_commit_sha(short=True)\n-            self.io.tool_output(f\"Commit {commit_hash} {commit_message}\", bold=True)\n-            return commit_hash, commit_message\n+            # Use context managers to handle environment variables\n+            with contextlib.ExitStack() as stack:\n+                if use_attribute_committer:\n+                    stack.enter_context(\n+                        set_git_env(\"GIT_COMMITTER_NAME\", committer_name, original_committer_name_env)\n+                    )\n+                if use_attribute_author:\n+                    stack.enter_context(\n+                        set_git_env(\"GIT_AUTHOR_NAME\", committer_name, original_author_name_env)\n+                    )\n+\n+                # Perform the commit\n+                self.repo.git.commit(cmd)\n+                commit_hash = self.get_head_commit_sha(short=True)\n+                self.io.tool_output(f\"Commit {commit_hash} {commit_message}\", bold=True)\n+                return commit_hash, commit_message\n+\n         except ANY_GIT_ERROR as err:\n             self.io.tool_error(f\"Unable to commit: {err}\")\n-        finally:\n-            # Restore the env\n-\n-            if self.attribute_committer:\n-                if original_committer_name_env is not None:\n-                    os.environ[\"GIT_COMMITTER_NAME\"] = original_committer_name_env\n-                else:\n-                    del os.environ[\"GIT_COMMITTER_NAME\"]\n-\n-            if aider_edits and self.attribute_author:\n-                if original_author_name_env is not None:\n-                    os.environ[\"GIT_AUTHOR_NAME\"] = original_author_name_env\n-                else:\n-                    del os.environ[\"GIT_AUTHOR_NAME\"]\n+            # No return here, implicitly returns None",
    "repo_full_name": "Aider-AI/aider",
    "discussion_comments": [
      {
        "comment_id": "2040703821",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 3789,
        "pr_file": "aider/repo.py",
        "discussion_id": "2040703821",
        "commented_code": "@@ -152,36 +283,30 @@ def commit(self, fnames=None, context=None, message=None, aider_edits=False):\n \n         original_user_name = self.repo.git.config(\"--get\", \"user.name\")\n         original_committer_name_env = os.environ.get(\"GIT_COMMITTER_NAME\")\n+        original_author_name_env = os.environ.get(\"GIT_AUTHOR_NAME\")\n         committer_name = f\"{original_user_name} (aider)\"\n \n-        if self.attribute_committer:\n-            os.environ[\"GIT_COMMITTER_NAME\"] = committer_name\n-\n-        if aider_edits and self.attribute_author:\n-            original_author_name_env = os.environ.get(\"GIT_AUTHOR_NAME\")\n-            os.environ[\"GIT_AUTHOR_NAME\"] = committer_name\n-\n         try:\n-            self.repo.git.commit(cmd)\n-            commit_hash = self.get_head_commit_sha(short=True)\n-            self.io.tool_output(f\"Commit {commit_hash} {commit_message}\", bold=True)\n-            return commit_hash, commit_message\n+            # Use context managers to handle environment variables\n+            with contextlib.ExitStack() as stack:\n+                if use_attribute_committer:\n+                    stack.enter_context(\n+                        set_git_env(\"GIT_COMMITTER_NAME\", committer_name, original_committer_name_env)\n+                    )\n+                if use_attribute_author:\n+                    stack.enter_context(\n+                        set_git_env(\"GIT_AUTHOR_NAME\", committer_name, original_author_name_env)\n+                    )\n+\n+                # Perform the commit\n+                self.repo.git.commit(cmd)\n+                commit_hash = self.get_head_commit_sha(short=True)\n+                self.io.tool_output(f\"Commit {commit_hash} {commit_message}\", bold=True)\n+                return commit_hash, commit_message\n+\n         except ANY_GIT_ERROR as err:\n             self.io.tool_error(f\"Unable to commit: {err}\")\n-        finally:\n-            # Restore the env\n-\n-            if self.attribute_committer:\n-                if original_committer_name_env is not None:\n-                    os.environ[\"GIT_COMMITTER_NAME\"] = original_committer_name_env\n-                else:\n-                    del os.environ[\"GIT_COMMITTER_NAME\"]\n-\n-            if aider_edits and self.attribute_author:\n-                if original_author_name_env is not None:\n-                    os.environ[\"GIT_AUTHOR_NAME\"] = original_author_name_env\n-                else:\n-                    del os.environ[\"GIT_AUTHOR_NAME\"]\n+            # No return here, implicitly returns None",
        "comment_created_at": "2025-04-12T17:27:38+00:00",
        "comment_author": "ei-grad",
        "comment_body": "> \"# No return here, implicitly returns None\", doesn't \"self.io.tool_error\" raise error?\r\n\r\nYou are correct to question this. Looking at the typical behavior of `aider.io.InputOutput.tool_error` (based on the file summaries and common patterns in aider), it usually *prints* the error message to the user interface and increments an internal error counter (`num_error_outputs`). It does **not** typically raise an exception that would halt execution. Therefore, after `self.io.tool_error(...)` is called in the `except ANY_GIT_ERROR` block, the execution flow continues to the end of the `commit` function. Since there's no explicit `return` statement in that `except` block's path, the function indeed implicitly returns `None`. So, the comment is actually accurate in describing the control flow in case of a Git error during the commit attempt. We should keep this comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989403584",
    "pr_number": 3498,
    "pr_file": "aider/main.py",
    "created_at": "2025-03-11T14:23:08+00:00",
    "commented_code": "if not repo:\n         return\n \n-    user_name = repo.git.config(\"--default\", \"\", \"--get\", \"user.name\") or None",
    "repo_full_name": "Aider-AI/aider",
    "discussion_comments": [
      {
        "comment_id": "1989403584",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 3498,
        "pr_file": "aider/main.py",
        "discussion_id": "1989403584",
        "commented_code": "@@ -126,8 +126,8 @@ def setup_git(git_root, io):\n     if not repo:\n         return\n \n-    user_name = repo.git.config(\"--default\", \"\", \"--get\", \"user.name\") or None",
        "comment_created_at": "2025-03-11T14:23:08+00:00",
        "comment_author": "akirak",
        "comment_body": "- Without `--default ''`, this statement will raise a `git.exc.GitCommandError` exception, so you need to wrap the statement in a `try .. except ...` block. \r\n-  `or None` only makes sense when the function returns an empty string.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1644580177",
    "pr_number": 633,
    "pr_file": "tests/test_main.py",
    "created_at": "2024-06-18T14:36:26+00:00",
    "commented_code": "class TestMain(TestCase):\n     def setUp(self):\n+        self.original_env = os.environ.copy()\n         os.environ[\"OPENAI_API_KEY\"] = \"deadbeef\"\n         self.original_cwd = os.getcwd()\n-        self.tempdir = tempfile.mkdtemp()\n+        self.tempdir_obj = tempfile.TemporaryDirectory()\n+        self.tempdir = self.tempdir_obj.name\n         os.chdir(self.tempdir)\n \n     def tearDown(self):\n         os.chdir(self.original_cwd)\n-        shutil.rmtree(self.tempdir, ignore_errors=True)\n+        self.tempdir_obj.cleanup()",
    "repo_full_name": "Aider-AI/aider",
    "discussion_comments": [
      {
        "comment_id": "1644580177",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 633,
        "pr_file": "tests/test_main.py",
        "discussion_id": "1644580177",
        "commented_code": "@@ -18,14 +18,18 @@\n \n class TestMain(TestCase):\n     def setUp(self):\n+        self.original_env = os.environ.copy()\n         os.environ[\"OPENAI_API_KEY\"] = \"deadbeef\"\n         self.original_cwd = os.getcwd()\n-        self.tempdir = tempfile.mkdtemp()\n+        self.tempdir_obj = tempfile.TemporaryDirectory()\n+        self.tempdir = self.tempdir_obj.name\n         os.chdir(self.tempdir)\n \n     def tearDown(self):\n         os.chdir(self.original_cwd)\n-        shutil.rmtree(self.tempdir, ignore_errors=True)\n+        self.tempdir_obj.cleanup()",
        "comment_created_at": "2024-06-18T14:36:26+00:00",
        "comment_author": "paul-gauthier",
        "comment_body": "Windows tests throw errors cleaning up temp dirs, due to some process still holding a reference to the dir or files it contains. You'll need to catch these errors. Or see aider/utils.py:IgnorantTemporaryDirectory.\r\n\r\n```\r\n        except (OSError, PermissionError):\r\n            pass  # Ignore errors (Windows)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1644596149",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 633,
        "pr_file": "tests/test_main.py",
        "discussion_id": "1644580177",
        "commented_code": "@@ -18,14 +18,18 @@\n \n class TestMain(TestCase):\n     def setUp(self):\n+        self.original_env = os.environ.copy()\n         os.environ[\"OPENAI_API_KEY\"] = \"deadbeef\"\n         self.original_cwd = os.getcwd()\n-        self.tempdir = tempfile.mkdtemp()\n+        self.tempdir_obj = tempfile.TemporaryDirectory()\n+        self.tempdir = self.tempdir_obj.name\n         os.chdir(self.tempdir)\n \n     def tearDown(self):\n         os.chdir(self.original_cwd)\n-        shutil.rmtree(self.tempdir, ignore_errors=True)\n+        self.tempdir_obj.cleanup()",
        "comment_created_at": "2024-06-18T14:46:12+00:00",
        "comment_author": "jpshack-at-palomar",
        "comment_body": "Got it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1644599552",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 633,
        "pr_file": "tests/test_main.py",
        "discussion_id": "1644580177",
        "commented_code": "@@ -18,14 +18,18 @@\n \n class TestMain(TestCase):\n     def setUp(self):\n+        self.original_env = os.environ.copy()\n         os.environ[\"OPENAI_API_KEY\"] = \"deadbeef\"\n         self.original_cwd = os.getcwd()\n-        self.tempdir = tempfile.mkdtemp()\n+        self.tempdir_obj = tempfile.TemporaryDirectory()\n+        self.tempdir = self.tempdir_obj.name\n         os.chdir(self.tempdir)\n \n     def tearDown(self):\n         os.chdir(self.original_cwd)\n-        shutil.rmtree(self.tempdir, ignore_errors=True)\n+        self.tempdir_obj.cleanup()",
        "comment_created_at": "2024-06-18T14:48:17+00:00",
        "comment_author": "jpshack-at-palomar",
        "comment_body": "Do you prefer rebase or merge?",
        "pr_file_module": null
      },
      {
        "comment_id": "1644604183",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 633,
        "pr_file": "tests/test_main.py",
        "discussion_id": "1644580177",
        "commented_code": "@@ -18,14 +18,18 @@\n \n class TestMain(TestCase):\n     def setUp(self):\n+        self.original_env = os.environ.copy()\n         os.environ[\"OPENAI_API_KEY\"] = \"deadbeef\"\n         self.original_cwd = os.getcwd()\n-        self.tempdir = tempfile.mkdtemp()\n+        self.tempdir_obj = tempfile.TemporaryDirectory()\n+        self.tempdir = self.tempdir_obj.name\n         os.chdir(self.tempdir)\n \n     def tearDown(self):\n         os.chdir(self.original_cwd)\n-        shutil.rmtree(self.tempdir, ignore_errors=True)\n+        self.tempdir_obj.cleanup()",
        "comment_created_at": "2024-06-18T14:51:13+00:00",
        "comment_author": "paul-gauthier",
        "comment_body": "Your choice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1635314457",
    "pr_number": 666,
    "pr_file": "aider/models.py",
    "created_at": "2024-06-11T18:26:17+00:00",
    "commented_code": "return res\n \n+def register_models(model_def_fnames):\n+    for model_def_fname in model_def_fnames:\n+        if not os.path.exists(model_def_fname):\n+            continue\n+        print(f\"Registering model definition from {model_def_fname}\")\n+        try:\n+            with open(model_def_fname, \"r\") as model_def_file:\n+                model_def = json.load(model_def_file)\n+        except json.JSONDecodeError as e:\n+            print(f\"Error opening/decoding model definition: {e}\")",
    "repo_full_name": "Aider-AI/aider",
    "discussion_comments": [
      {
        "comment_id": "1635314457",
        "repo_full_name": "Aider-AI/aider",
        "pr_number": 666,
        "pr_file": "aider/models.py",
        "discussion_id": "1635314457",
        "commented_code": "@@ -426,6 +426,18 @@ def validate_environment(self):\n \n         return res\n \n+def register_models(model_def_fnames):\n+    for model_def_fname in model_def_fnames:\n+        if not os.path.exists(model_def_fname):\n+            continue\n+        print(f\"Registering model definition from {model_def_fname}\")\n+        try:\n+            with open(model_def_fname, \"r\") as model_def_file:\n+                model_def = json.load(model_def_file)\n+        except json.JSONDecodeError as e:\n+            print(f\"Error opening/decoding model definition: {e}\")",
        "comment_created_at": "2024-06-11T18:26:17+00:00",
        "comment_author": "paul-gauthier",
        "comment_body": "Throw an error here and catch it in main so it can print with io.tool_error. Probably best to exit main on such an error. ",
        "pr_file_module": null
      }
    ]
  }
]