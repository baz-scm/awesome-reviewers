[
  {
    "discussion_id": "2181854222",
    "pr_number": 52297,
    "pr_file": "airflow-core/docs/core-concepts/xcoms.rst",
    "created_at": "2025-07-03T05:45:06+00:00",
    "commented_code": "If you want to implement your own backend, you should subclass :class:`~airflow.models.xcom.BaseXCom`, and override the ``serialize_value`` and ``deserialize_value`` methods.",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2181854222",
        "repo_full_name": "apache/airflow",
        "pr_number": 52297,
        "pr_file": "airflow-core/docs/core-concepts/xcoms.rst",
        "discussion_id": "2181854222",
        "commented_code": "@@ -93,6 +94,9 @@ The XCom system has interchangeable backends, and you can set which backend is b\n \n If you want to implement your own backend, you should subclass :class:`~airflow.models.xcom.BaseXCom`, and override the ``serialize_value`` and ``deserialize_value`` methods.",
        "comment_created_at": "2025-07-03T05:45:06+00:00",
        "comment_author": "amoghrajesh",
        "comment_body": "```suggestion\r\nIf you want to implement your own backend, you should subclass :class:`~airflow.sdk.bases.xcom.BaseXCom`, and override the ``serialize_value`` and ``deserialize_value`` methods.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2165168694",
    "pr_number": 52197,
    "pr_file": "airflow-core/docs/public-airflow-interface.rst",
    "created_at": "2025-06-25T00:07:23+00:00",
    "commented_code": "Using Airflow Public Interfaces\n ===============================\n \n+.. note::\n+\n+   As of **Airflow 3.0**, users should use the ``airflow.sdk`` namespace as the official **Public Interface**, as defined in `AIP-72 <https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-72+Task+Execution+Interface+aka+Task+SDK>`_.\n+\n+   Direct interaction with internal modules or the metadata database is **discouraged**.",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2165168694",
        "repo_full_name": "apache/airflow",
        "pr_number": 52197,
        "pr_file": "airflow-core/docs/public-airflow-interface.rst",
        "discussion_id": "2165168694",
        "commented_code": "@@ -28,6 +28,21 @@ and for automating certain aspects of the Airflow workflow.\n Using Airflow Public Interfaces\n ===============================\n \n+.. note::\n+\n+   As of **Airflow 3.0**, users should use the ``airflow.sdk`` namespace as the official **Public Interface**, as defined in `AIP-72 <https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-72+Task+Execution+Interface+aka+Task+SDK>`_.\n+\n+   Direct interaction with internal modules or the metadata database is **discouraged**.  ",
        "comment_created_at": "2025-06-25T00:07:23+00:00",
        "comment_author": "potiuk",
        "comment_body": "```suggestion\r\n   Direct interaction with internal modules or the metadata database is not possible.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2165172135",
        "repo_full_name": "apache/airflow",
        "pr_number": 52197,
        "pr_file": "airflow-core/docs/public-airflow-interface.rst",
        "discussion_id": "2165168694",
        "commented_code": "@@ -28,6 +28,21 @@ and for automating certain aspects of the Airflow workflow.\n Using Airflow Public Interfaces\n ===============================\n \n+.. note::\n+\n+   As of **Airflow 3.0**, users should use the ``airflow.sdk`` namespace as the official **Public Interface**, as defined in `AIP-72 <https://cwiki.apache.org/confluence/display/AIRFLOW/AIP-72+Task+Execution+Interface+aka+Task+SDK>`_.\n+\n+   Direct interaction with internal modules or the metadata database is **discouraged**.  ",
        "comment_created_at": "2025-06-25T00:11:09+00:00",
        "comment_author": "nrnavaneet",
        "comment_body": "Good catch, @potiuk â€” thanks for pointing that out!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167552364",
    "pr_number": 52255,
    "pr_file": "airflow-core/docs/administration-and-deployment/plugins.rst",
    "created_at": "2025-06-25T20:18:13+00:00",
    "commented_code": "\"name\": \"Name of the Middleware\",\n     }\n \n-    # Creating a iframe view that will be rendered in the Airflow UI.\n+    # Creating an external view that will be rendered in the Airflow UI.\n     external_view_with_metadata = {\n-        \"name\": \"Name of the Iframe View as displayed in the UI\",\n+        # Name of the external view, this will be displayed in the UI.\n+        \"name\": \"Name of the External View\",\n         # Source URL of the external view. This URL can be templated using context variables, depending on the location where the external view is rendered\n         # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).\n-        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}\",\n-        # Destination of the iframe view. This is used to determine where the iframe will be loaded in the UI.\n+        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}/{MAP_INDEX}\",\n+        # Destination of the external view. This is used to determine where the view will be loaded in the UI.\n         # Supported locations are Literal[\"nav\", \"dag\", \"dag_run\", \"task\", \"task_instance\"], default to \"nav\".\n         \"destination\": \"dag_run\",\n         # Optional icon, url to an svg file.\n         \"icon\": \"https://example.com/icon.svg\",\n         # Optional dark icon for the dark theme, url to an svg file. If not provided, \"icon\" will be used for both light and dark themes.\n         \"icon_dark_mode\": \"https://example.com/dark_icon.svg\",\n-        # Optional parameters, relative URL location for the iframe rendering. If not provided, external view will be rendeded as an external link. Should\n-        # not contain a leading slash.\n+        # Optional parameters, relative URL location for the External View rendering. If not provided, external view will be rendeded as an external link. If provided\n+        # will rendered inside an Iframe in the UI. Should not contain a leading slash.\n         \"url_route\": \"my_iframe_view\",\n         # Optional category, only relevant for destination \"nav\". This is used to group the external links in the navigation bar.  We will match the existing\n         # menus of [\"browse\", \"docs\", \"admin\", \"user\"] and if there's no match then create a new menu.\n         \"category\": \"browse\",\n     }\n \n+    react_app_with_metadata = {\n+        # Name of the React app, this will be displayed in the UI.\n+        \"name\": \"Name of the React App\",\n+        # Bundle URL of the React app. This is the URL where the React app is served from. It can be a static file or a CDN.\n+        # This URL can be templated using context variables, depending on the location where the external view is rendered\n+        # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2167552364",
        "repo_full_name": "apache/airflow",
        "pr_number": 52255,
        "pr_file": "airflow-core/docs/administration-and-deployment/plugins.rst",
        "discussion_id": "2167552364",
        "commented_code": "@@ -194,27 +196,49 @@ definitions in Airflow.\n         \"name\": \"Name of the Middleware\",\n     }\n \n-    # Creating a iframe view that will be rendered in the Airflow UI.\n+    # Creating an external view that will be rendered in the Airflow UI.\n     external_view_with_metadata = {\n-        \"name\": \"Name of the Iframe View as displayed in the UI\",\n+        # Name of the external view, this will be displayed in the UI.\n+        \"name\": \"Name of the External View\",\n         # Source URL of the external view. This URL can be templated using context variables, depending on the location where the external view is rendered\n         # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).\n-        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}\",\n-        # Destination of the iframe view. This is used to determine where the iframe will be loaded in the UI.\n+        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}/{MAP_INDEX}\",\n+        # Destination of the external view. This is used to determine where the view will be loaded in the UI.\n         # Supported locations are Literal[\"nav\", \"dag\", \"dag_run\", \"task\", \"task_instance\"], default to \"nav\".\n         \"destination\": \"dag_run\",\n         # Optional icon, url to an svg file.\n         \"icon\": \"https://example.com/icon.svg\",\n         # Optional dark icon for the dark theme, url to an svg file. If not provided, \"icon\" will be used for both light and dark themes.\n         \"icon_dark_mode\": \"https://example.com/dark_icon.svg\",\n-        # Optional parameters, relative URL location for the iframe rendering. If not provided, external view will be rendeded as an external link. Should\n-        # not contain a leading slash.\n+        # Optional parameters, relative URL location for the External View rendering. If not provided, external view will be rendeded as an external link. If provided\n+        # will rendered inside an Iframe in the UI. Should not contain a leading slash.\n         \"url_route\": \"my_iframe_view\",\n         # Optional category, only relevant for destination \"nav\". This is used to group the external links in the navigation bar.  We will match the existing\n         # menus of [\"browse\", \"docs\", \"admin\", \"user\"] and if there's no match then create a new menu.\n         \"category\": \"browse\",\n     }\n \n+    react_app_with_metadata = {\n+        # Name of the React app, this will be displayed in the UI.\n+        \"name\": \"Name of the React App\",\n+        # Bundle URL of the React app. This is the URL where the React app is served from. It can be a static file or a CDN.\n+        # This URL can be templated using context variables, depending on the location where the external view is rendered\n+        # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).",
        "comment_created_at": "2025-06-25T20:18:13+00:00",
        "comment_author": "bbovenzi",
        "comment_body": "I guess the work for fastapi to actually host the js bundle will be another PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "2168805661",
        "repo_full_name": "apache/airflow",
        "pr_number": 52255,
        "pr_file": "airflow-core/docs/administration-and-deployment/plugins.rst",
        "discussion_id": "2167552364",
        "commented_code": "@@ -194,27 +196,49 @@ definitions in Airflow.\n         \"name\": \"Name of the Middleware\",\n     }\n \n-    # Creating a iframe view that will be rendered in the Airflow UI.\n+    # Creating an external view that will be rendered in the Airflow UI.\n     external_view_with_metadata = {\n-        \"name\": \"Name of the Iframe View as displayed in the UI\",\n+        # Name of the external view, this will be displayed in the UI.\n+        \"name\": \"Name of the External View\",\n         # Source URL of the external view. This URL can be templated using context variables, depending on the location where the external view is rendered\n         # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).\n-        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}\",\n-        # Destination of the iframe view. This is used to determine where the iframe will be loaded in the UI.\n+        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}/{MAP_INDEX}\",\n+        # Destination of the external view. This is used to determine where the view will be loaded in the UI.\n         # Supported locations are Literal[\"nav\", \"dag\", \"dag_run\", \"task\", \"task_instance\"], default to \"nav\".\n         \"destination\": \"dag_run\",\n         # Optional icon, url to an svg file.\n         \"icon\": \"https://example.com/icon.svg\",\n         # Optional dark icon for the dark theme, url to an svg file. If not provided, \"icon\" will be used for both light and dark themes.\n         \"icon_dark_mode\": \"https://example.com/dark_icon.svg\",\n-        # Optional parameters, relative URL location for the iframe rendering. If not provided, external view will be rendeded as an external link. Should\n-        # not contain a leading slash.\n+        # Optional parameters, relative URL location for the External View rendering. If not provided, external view will be rendeded as an external link. If provided\n+        # will rendered inside an Iframe in the UI. Should not contain a leading slash.\n         \"url_route\": \"my_iframe_view\",\n         # Optional category, only relevant for destination \"nav\". This is used to group the external links in the navigation bar.  We will match the existing\n         # menus of [\"browse\", \"docs\", \"admin\", \"user\"] and if there's no match then create a new menu.\n         \"category\": \"browse\",\n     }\n \n+    react_app_with_metadata = {\n+        # Name of the React app, this will be displayed in the UI.\n+        \"name\": \"Name of the React App\",\n+        # Bundle URL of the React app. This is the URL where the React app is served from. It can be a static file or a CDN.\n+        # This URL can be templated using context variables, depending on the location where the external view is rendered\n+        # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).",
        "comment_created_at": "2025-06-26T11:05:15+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "I thought about that, and I think this is already handled by the plugin system. If someone wants to host the bundle in airflow, they can simply add a `fastapi_app` to extend the api-server capabilities and serve static content from anywhere they'd like. \r\n\r\n\r\n\r\nSomething similar to what we are doing for the Simple Auth Manager. That would look like this in your plugin:\r\n\r\n```python\r\n# In your plugins folder\r\napp = FastAPI()\r\n\r\ndirectory = Path(__file__).parent.joinpath(\"static\") # Folder holding static assets\r\n\r\napp.mount(\r\n    \"/static\",\r\n    StaticFiles(\r\n        directory=directory,\r\n        html=True,\r\n    ),\r\n    name=\"static_file_plugin\",\r\n)\r\n\r\n    \r\nclass AirflowServeStaticFilesPlugin(AirflowPlugin):\r\n    fastapi_apps = [\r\n        {\r\n            \"app\": app,\r\n            \"url_prefix\": \"/static-plugin\",\r\n            \"name\": \"Static plugin\",\r\n        }\r\n    ]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2168875280",
        "repo_full_name": "apache/airflow",
        "pr_number": 52255,
        "pr_file": "airflow-core/docs/administration-and-deployment/plugins.rst",
        "discussion_id": "2167552364",
        "commented_code": "@@ -194,27 +196,49 @@ definitions in Airflow.\n         \"name\": \"Name of the Middleware\",\n     }\n \n-    # Creating a iframe view that will be rendered in the Airflow UI.\n+    # Creating an external view that will be rendered in the Airflow UI.\n     external_view_with_metadata = {\n-        \"name\": \"Name of the Iframe View as displayed in the UI\",\n+        # Name of the external view, this will be displayed in the UI.\n+        \"name\": \"Name of the External View\",\n         # Source URL of the external view. This URL can be templated using context variables, depending on the location where the external view is rendered\n         # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).\n-        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}\",\n-        # Destination of the iframe view. This is used to determine where the iframe will be loaded in the UI.\n+        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}/{MAP_INDEX}\",\n+        # Destination of the external view. This is used to determine where the view will be loaded in the UI.\n         # Supported locations are Literal[\"nav\", \"dag\", \"dag_run\", \"task\", \"task_instance\"], default to \"nav\".\n         \"destination\": \"dag_run\",\n         # Optional icon, url to an svg file.\n         \"icon\": \"https://example.com/icon.svg\",\n         # Optional dark icon for the dark theme, url to an svg file. If not provided, \"icon\" will be used for both light and dark themes.\n         \"icon_dark_mode\": \"https://example.com/dark_icon.svg\",\n-        # Optional parameters, relative URL location for the iframe rendering. If not provided, external view will be rendeded as an external link. Should\n-        # not contain a leading slash.\n+        # Optional parameters, relative URL location for the External View rendering. If not provided, external view will be rendeded as an external link. If provided\n+        # will rendered inside an Iframe in the UI. Should not contain a leading slash.\n         \"url_route\": \"my_iframe_view\",\n         # Optional category, only relevant for destination \"nav\". This is used to group the external links in the navigation bar.  We will match the existing\n         # menus of [\"browse\", \"docs\", \"admin\", \"user\"] and if there's no match then create a new menu.\n         \"category\": \"browse\",\n     }\n \n+    react_app_with_metadata = {\n+        # Name of the React app, this will be displayed in the UI.\n+        \"name\": \"Name of the React App\",\n+        # Bundle URL of the React app. This is the URL where the React app is served from. It can be a static file or a CDN.\n+        # This URL can be templated using context variables, depending on the location where the external view is rendered\n+        # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).",
        "comment_created_at": "2025-06-26T11:47:18+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "Maybe I can add a note in the doc for this. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2169015982",
        "repo_full_name": "apache/airflow",
        "pr_number": 52255,
        "pr_file": "airflow-core/docs/administration-and-deployment/plugins.rst",
        "discussion_id": "2167552364",
        "commented_code": "@@ -194,27 +196,49 @@ definitions in Airflow.\n         \"name\": \"Name of the Middleware\",\n     }\n \n-    # Creating a iframe view that will be rendered in the Airflow UI.\n+    # Creating an external view that will be rendered in the Airflow UI.\n     external_view_with_metadata = {\n-        \"name\": \"Name of the Iframe View as displayed in the UI\",\n+        # Name of the external view, this will be displayed in the UI.\n+        \"name\": \"Name of the External View\",\n         # Source URL of the external view. This URL can be templated using context variables, depending on the location where the external view is rendered\n         # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).\n-        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}\",\n-        # Destination of the iframe view. This is used to determine where the iframe will be loaded in the UI.\n+        \"href\": \"https://example.com/{DAG_ID}/{RUN_ID}/{TASK_ID}/{MAP_INDEX}\",\n+        # Destination of the external view. This is used to determine where the view will be loaded in the UI.\n         # Supported locations are Literal[\"nav\", \"dag\", \"dag_run\", \"task\", \"task_instance\"], default to \"nav\".\n         \"destination\": \"dag_run\",\n         # Optional icon, url to an svg file.\n         \"icon\": \"https://example.com/icon.svg\",\n         # Optional dark icon for the dark theme, url to an svg file. If not provided, \"icon\" will be used for both light and dark themes.\n         \"icon_dark_mode\": \"https://example.com/dark_icon.svg\",\n-        # Optional parameters, relative URL location for the iframe rendering. If not provided, external view will be rendeded as an external link. Should\n-        # not contain a leading slash.\n+        # Optional parameters, relative URL location for the External View rendering. If not provided, external view will be rendeded as an external link. If provided\n+        # will rendered inside an Iframe in the UI. Should not contain a leading slash.\n         \"url_route\": \"my_iframe_view\",\n         # Optional category, only relevant for destination \"nav\". This is used to group the external links in the navigation bar.  We will match the existing\n         # menus of [\"browse\", \"docs\", \"admin\", \"user\"] and if there's no match then create a new menu.\n         \"category\": \"browse\",\n     }\n \n+    react_app_with_metadata = {\n+        # Name of the React app, this will be displayed in the UI.\n+        \"name\": \"Name of the React App\",\n+        # Bundle URL of the React app. This is the URL where the React app is served from. It can be a static file or a CDN.\n+        # This URL can be templated using context variables, depending on the location where the external view is rendered\n+        # the context variables available will be different, i.e a subset of (DAG_ID, RUN_ID, TASK_ID, MAP_INDEX).",
        "comment_created_at": "2025-06-26T12:59:59+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "![Screenshot 2025-06-26 at 15 02 09](https://github.com/user-attachments/assets/650e64de-6db0-404c-acdf-39bbb71db40a)\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135806777",
    "pr_number": 51153,
    "pr_file": "task-sdk/docs/index.rst",
    "created_at": "2025-06-09T14:14:47+00:00",
    "commented_code": "+ .. Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+ ..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+ .. Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+Apache Airflow Task SDK\n+=================================\n+\n+:any:`DAG` is where to start. :any:`dag`\n+\n+The Apache Airflow Task SDK(Task SDK) provides python-native interfaces for defining DAGs,\n+executing tasks in isolated subprocesses and interacting with Airflow resources\n+(e.g., Connections, Variables, XComs, Metrics, Logs, and OpenLineage events) at runtime.\n+It also includes core execution-time components to manage communication between the worker\n+and the Airflow scheduler/backend.\n+\n+This approach reduces boilerplate and keeps your DAG definitions concise and readable.\n+\n+\n+Installation\n+------------\n+To install the Task SDK, run:\n+\n+.. code-block:: bash\n+\n+   pip install apache-airflow-task-sdk\n+\n+Getting Started\n+---------------\n+Define a basic DAG and task in just a few lines of Python:\n+\n+.. literalinclude:: ../../airflow-core/src/airflow/example_dags/example_simplest_dag.py\n+   :language: python\n+   :start-after: [START simplest_dag]\n+   :end-before: [END simplest_dag]\n+   :caption: Simplest DAG with :func:`@dag <airflow.sdk.dag>`  and :func:`@task <airflow.sdk.task>`\n+\n+Examples\n+--------\n+\n+For more examples DAGs and patterns, see the :doc:`examples` page.\n+\n+Key Concepts\n+------------\n+Defining DAGs\n+~~~~~~~~~~~~~\n+Use ``@dag`` to convert a function into an Airflow DAG. All nested ``@task`` calls\n+become part of the workflow.\n+\n+Decorators\n+~~~~~~~~~~\n+Simplify task definitions using decorators:\n+\n+- :func:`@task <airflow.sdk.task>` : define tasks.\n+- :func:`@task_group <airflow.sdk.task_group>`: group related tasks into logical units.\n+- :func:`@setup <airflow.sdk.setup>` and :func:`@teardown <airflow.sdk.teardown>`: define setup and teardown tasks for DAGs and TaskGroups.\n+\n+Tasks and Operators\n+~~~~~~~~~~~~~~~~~~~\n+Wrap Python callables with :func:`@task <airflow.sdk.task>` to create tasks, leverage dynamic task mapping with\n+``.expand()``, and pass data via ``XComArg``. You can also create traditional Operators\n+(e.g., sensors) via classes imported from the SDK:\n+\n+  - **BaseOperator**, **Sensor**, **OperatorLink**, **Notifier**, **XComArg**, etc.\n+    (see the **api reference** section for details)\n+\n+Assets\n+~~~~~~\n+Model data as assets and emit them to downstream tasks with the SDK's asset library under\n+``airflow.sdk.definitions.asset``. You can use:\n+\n+- :func:`@asset <airflow.sdk.asset>`, :class:`~airflow.sdk.AssetAlias`, etc. (see the **api reference** section below)\n+\n+\n+Execution Time Components\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+At runtime, tasks run in an isolated subprocess managed by the SDK:\n+\n+  - **Supervisor** coordinates the worker's lifecycle.\n+  - **TaskRunner** actually executes the user's task code.\n+  - **Context** objects provide runtime metadata (e.g., connections, variables).\n+    (see the **Execution Time** section below for details)",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2135806777",
        "repo_full_name": "apache/airflow",
        "pr_number": 51153,
        "pr_file": "task-sdk/docs/index.rst",
        "discussion_id": "2135806777",
        "commented_code": "@@ -0,0 +1,102 @@\n+ .. Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+ ..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+ .. Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+Apache Airflow Task SDK\n+=================================\n+\n+:any:`DAG` is where to start. :any:`dag`\n+\n+The Apache Airflow Task SDK(Task SDK) provides python-native interfaces for defining DAGs,\n+executing tasks in isolated subprocesses and interacting with Airflow resources\n+(e.g., Connections, Variables, XComs, Metrics, Logs, and OpenLineage events) at runtime.\n+It also includes core execution-time components to manage communication between the worker\n+and the Airflow scheduler/backend.\n+\n+This approach reduces boilerplate and keeps your DAG definitions concise and readable.\n+\n+\n+Installation\n+------------\n+To install the Task SDK, run:\n+\n+.. code-block:: bash\n+\n+   pip install apache-airflow-task-sdk\n+\n+Getting Started\n+---------------\n+Define a basic DAG and task in just a few lines of Python:\n+\n+.. literalinclude:: ../../airflow-core/src/airflow/example_dags/example_simplest_dag.py\n+   :language: python\n+   :start-after: [START simplest_dag]\n+   :end-before: [END simplest_dag]\n+   :caption: Simplest DAG with :func:`@dag <airflow.sdk.dag>`  and :func:`@task <airflow.sdk.task>`\n+\n+Examples\n+--------\n+\n+For more examples DAGs and patterns, see the :doc:`examples` page.\n+\n+Key Concepts\n+------------\n+Defining DAGs\n+~~~~~~~~~~~~~\n+Use ``@dag`` to convert a function into an Airflow DAG. All nested ``@task`` calls\n+become part of the workflow.\n+\n+Decorators\n+~~~~~~~~~~\n+Simplify task definitions using decorators:\n+\n+- :func:`@task <airflow.sdk.task>` : define tasks.\n+- :func:`@task_group <airflow.sdk.task_group>`: group related tasks into logical units.\n+- :func:`@setup <airflow.sdk.setup>` and :func:`@teardown <airflow.sdk.teardown>`: define setup and teardown tasks for DAGs and TaskGroups.\n+\n+Tasks and Operators\n+~~~~~~~~~~~~~~~~~~~\n+Wrap Python callables with :func:`@task <airflow.sdk.task>` to create tasks, leverage dynamic task mapping with\n+``.expand()``, and pass data via ``XComArg``. You can also create traditional Operators\n+(e.g., sensors) via classes imported from the SDK:\n+\n+  - **BaseOperator**, **Sensor**, **OperatorLink**, **Notifier**, **XComArg**, etc.\n+    (see the **api reference** section for details)\n+\n+Assets\n+~~~~~~\n+Model data as assets and emit them to downstream tasks with the SDK's asset library under\n+``airflow.sdk.definitions.asset``. You can use:\n+\n+- :func:`@asset <airflow.sdk.asset>`, :class:`~airflow.sdk.AssetAlias`, etc. (see the **api reference** section below)\n+\n+\n+Execution Time Components\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+At runtime, tasks run in an isolated subprocess managed by the SDK:\n+\n+  - **Supervisor** coordinates the worker's lifecycle.\n+  - **TaskRunner** actually executes the user's task code.\n+  - **Context** objects provide runtime metadata (e.g., connections, variables).\n+    (see the **Execution Time** section below for details)",
        "comment_created_at": "2025-06-09T14:14:47+00:00",
        "comment_author": "amoghrajesh",
        "comment_body": "If we want to continue mentioning these, we should also mention SDK API client",
        "pr_file_module": null
      },
      {
        "comment_id": "2137566584",
        "repo_full_name": "apache/airflow",
        "pr_number": 51153,
        "pr_file": "task-sdk/docs/index.rst",
        "discussion_id": "2135806777",
        "commented_code": "@@ -0,0 +1,102 @@\n+ .. Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+ ..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+ .. Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+Apache Airflow Task SDK\n+=================================\n+\n+:any:`DAG` is where to start. :any:`dag`\n+\n+The Apache Airflow Task SDK(Task SDK) provides python-native interfaces for defining DAGs,\n+executing tasks in isolated subprocesses and interacting with Airflow resources\n+(e.g., Connections, Variables, XComs, Metrics, Logs, and OpenLineage events) at runtime.\n+It also includes core execution-time components to manage communication between the worker\n+and the Airflow scheduler/backend.\n+\n+This approach reduces boilerplate and keeps your DAG definitions concise and readable.\n+\n+\n+Installation\n+------------\n+To install the Task SDK, run:\n+\n+.. code-block:: bash\n+\n+   pip install apache-airflow-task-sdk\n+\n+Getting Started\n+---------------\n+Define a basic DAG and task in just a few lines of Python:\n+\n+.. literalinclude:: ../../airflow-core/src/airflow/example_dags/example_simplest_dag.py\n+   :language: python\n+   :start-after: [START simplest_dag]\n+   :end-before: [END simplest_dag]\n+   :caption: Simplest DAG with :func:`@dag <airflow.sdk.dag>`  and :func:`@task <airflow.sdk.task>`\n+\n+Examples\n+--------\n+\n+For more examples DAGs and patterns, see the :doc:`examples` page.\n+\n+Key Concepts\n+------------\n+Defining DAGs\n+~~~~~~~~~~~~~\n+Use ``@dag`` to convert a function into an Airflow DAG. All nested ``@task`` calls\n+become part of the workflow.\n+\n+Decorators\n+~~~~~~~~~~\n+Simplify task definitions using decorators:\n+\n+- :func:`@task <airflow.sdk.task>` : define tasks.\n+- :func:`@task_group <airflow.sdk.task_group>`: group related tasks into logical units.\n+- :func:`@setup <airflow.sdk.setup>` and :func:`@teardown <airflow.sdk.teardown>`: define setup and teardown tasks for DAGs and TaskGroups.\n+\n+Tasks and Operators\n+~~~~~~~~~~~~~~~~~~~\n+Wrap Python callables with :func:`@task <airflow.sdk.task>` to create tasks, leverage dynamic task mapping with\n+``.expand()``, and pass data via ``XComArg``. You can also create traditional Operators\n+(e.g., sensors) via classes imported from the SDK:\n+\n+  - **BaseOperator**, **Sensor**, **OperatorLink**, **Notifier**, **XComArg**, etc.\n+    (see the **api reference** section for details)\n+\n+Assets\n+~~~~~~\n+Model data as assets and emit them to downstream tasks with the SDK's asset library under\n+``airflow.sdk.definitions.asset``. You can use:\n+\n+- :func:`@asset <airflow.sdk.asset>`, :class:`~airflow.sdk.AssetAlias`, etc. (see the **api reference** section below)\n+\n+\n+Execution Time Components\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+At runtime, tasks run in an isolated subprocess managed by the SDK:\n+\n+  - **Supervisor** coordinates the worker's lifecycle.\n+  - **TaskRunner** actually executes the user's task code.\n+  - **Context** objects provide runtime metadata (e.g., connections, variables).\n+    (see the **Execution Time** section below for details)",
        "comment_created_at": "2025-06-10T10:54:05+00:00",
        "comment_author": "sunank200",
        "comment_body": "Added the following: \r\n```\r\n **API Client** provides a client for communicating with the Airflow Execution API (e.g., heartbeats, task instance updates, XCom pushes, etc).\r\n```",
        "pr_file_module": null
      }
    ]
  }
]