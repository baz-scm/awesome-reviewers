[
  {
    "discussion_id": "2182878696",
    "pr_number": 52668,
    "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
    "created_at": "2025-07-03T14:01:35+00:00",
    "commented_code": "max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2182878696",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-03T14:01:35+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "I think this problem will be here for any state that has a `start_date` None. (no_status, scheduled, queued, etc....)",
        "pr_file_module": null
      },
      {
        "comment_id": "2182886390",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-03T14:04:40+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "Maybe we should completely remove that `where` clause. The run does not have to be 'started' to actually be considered, WDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "2182887776",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-03T14:05:16+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "Also we most likely want to add a test case for this scenario.",
        "pr_file_module": null
      },
      {
        "comment_id": "2184115457",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-04T01:42:49+00:00",
        "comment_author": "choo121600",
        "comment_body": "Thanks for the feedback!\r\n\r\nThis function is currently only used in the /dashboard stats endpoint, so initially I handled it by allowing only QUEUED runs (which are the only valid state with start_date=None).\r\n\r\nHowever, I checked other places like the Grid UI and found that they do not use start_date as a filter when retrieving the latest run. In fact, this function is the only one that includes .where(DagRun.start_date.is_not(null())), which seems inconsistent with the intended purpose of the function — returning the latest DagRun regardless of state.\r\n\r\nSo I agree — we should remove that line entirely.\r\nI’ll go ahead and revise the PR accordingly and add a test case to cover this scenario.",
        "pr_file_module": null
      },
      {
        "comment_id": "2184704222",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-04T08:16:32+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "> This function is currently only used in the /dashboard stats endpoint, so initially I handled it by allowing only QUEUED runs (which are the only valid state with start_date=None).\r\n\r\nWhat function are you talking about `generate_dag_with_latest_run_query` ? `generate_dag_with_latest_run_query` is not used in the stats endpoint but in many other dag listing endpoints.",
        "pr_file_module": null
      },
      {
        "comment_id": "2185547202",
        "repo_full_name": "apache/airflow",
        "pr_number": 52668,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/db/dags.py",
        "discussion_id": "2182878696",
        "commented_code": "@@ -37,7 +38,7 @@ def generate_dag_with_latest_run_query(max_run_filters: list[BaseParam], order_b\n \n     max_run_id_query = (  # ordering by id will not always be \"latest run\", but it's a simplifying assumption\n         select(DagRun.dag_id, func.max(DagRun.id).label(\"max_dag_run_id\"))\n-        .where(DagRun.start_date.is_not(null()))\n+        .where(or_(DagRun.start_date.is_not(null()), DagRun.state == DagRunState.QUEUED))",
        "comment_created_at": "2025-07-04T14:42:57+00:00",
        "comment_author": "choo121600",
        "comment_body": "You're absolutely right — I initially thought `generate_dag_with_latest_run_query` was only used in the stats endpoint, but after taking a closer look today, I realized it's used in many places where DAGs are listed and sorted.\r\n\r\nIt seems I didn’t fully grasp the scope of its usage earlier. Thanks for pointing it out!\r\nI'll make sure to take that into account and create appropriate test cases to cover these scenarios.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164045609",
    "pr_number": 51264,
    "pr_file": "airflow-core/src/airflow/api_fastapi/common/parameters.py",
    "created_at": "2025-06-24T13:42:45+00:00",
    "commented_code": "return cls().set_value(offset)\n \n \n+class _FavoriteFilter(BaseParam[bool]):\n+    \"\"\"Filter DAGs by favorite status.\"\"\"\n+\n+    user_id: str\n+\n+    def to_orm(self, select_stmt: Select) -> Select:\n+        if self.value is None and self.skip_none:\n+            return select_stmt\n+\n+        if self.value:\n+            select_stmt = select_stmt.join(DagFavorite, DagFavorite.dag_id == DagModel.dag_id).where(\n+                DagFavorite.user_id == self.user_id\n+            )\n+        else:\n+            select_stmt = select_stmt.where(\n+                ~select(DagFavorite)\n+                .where((DagFavorite.dag_id == DagModel.dag_id) & (DagFavorite.user_id == self.user_id))\n+                .exists()\n+            )",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2164045609",
        "repo_full_name": "apache/airflow",
        "pr_number": 51264,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/parameters.py",
        "discussion_id": "2164045609",
        "commented_code": "@@ -112,6 +114,35 @@ def depends(cls, offset: NonNegativeInt = 0) -> OffsetFilter:\n         return cls().set_value(offset)\n \n \n+class _FavoriteFilter(BaseParam[bool]):\n+    \"\"\"Filter DAGs by favorite status.\"\"\"\n+\n+    user_id: str\n+\n+    def to_orm(self, select_stmt: Select) -> Select:\n+        if self.value is None and self.skip_none:\n+            return select_stmt\n+\n+        if self.value:\n+            select_stmt = select_stmt.join(DagFavorite, DagFavorite.dag_id == DagModel.dag_id).where(\n+                DagFavorite.user_id == self.user_id\n+            )\n+        else:\n+            select_stmt = select_stmt.where(\n+                ~select(DagFavorite)\n+                .where((DagFavorite.dag_id == DagModel.dag_id) & (DagFavorite.user_id == self.user_id))\n+                .exists()\n+            )",
        "comment_created_at": "2025-06-24T13:42:45+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "Please don't use bitwise operator, sqlalchemy exposes \"not\" \"and\" \"or\" which are clearer.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167378597",
        "repo_full_name": "apache/airflow",
        "pr_number": 51264,
        "pr_file": "airflow-core/src/airflow/api_fastapi/common/parameters.py",
        "discussion_id": "2164045609",
        "commented_code": "@@ -112,6 +114,35 @@ def depends(cls, offset: NonNegativeInt = 0) -> OffsetFilter:\n         return cls().set_value(offset)\n \n \n+class _FavoriteFilter(BaseParam[bool]):\n+    \"\"\"Filter DAGs by favorite status.\"\"\"\n+\n+    user_id: str\n+\n+    def to_orm(self, select_stmt: Select) -> Select:\n+        if self.value is None and self.skip_none:\n+            return select_stmt\n+\n+        if self.value:\n+            select_stmt = select_stmt.join(DagFavorite, DagFavorite.dag_id == DagModel.dag_id).where(\n+                DagFavorite.user_id == self.user_id\n+            )\n+        else:\n+            select_stmt = select_stmt.where(\n+                ~select(DagFavorite)\n+                .where((DagFavorite.dag_id == DagModel.dag_id) & (DagFavorite.user_id == self.user_id))\n+                .exists()\n+            )",
        "comment_created_at": "2025-06-25T18:42:33+00:00",
        "comment_author": "PNL0",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175543440",
    "pr_number": 51410,
    "pr_file": "airflow-core/src/airflow/jobs/scheduler_job_runner.py",
    "created_at": "2025-06-30T17:11:01+00:00",
    "commented_code": "Log.map_index == ti.map_index,\n                 Log.try_number == ti.try_number,\n                 Log.event == TASK_STUCK_IN_QUEUED_RESCHEDULE_EVENT,\n+                since_running,",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175543440",
        "repo_full_name": "apache/airflow",
        "pr_number": 51410,
        "pr_file": "airflow-core/src/airflow/jobs/scheduler_job_runner.py",
        "discussion_id": "2175543440",
        "commented_code": "@@ -2037,6 +2056,7 @@ def _get_num_times_stuck_in_queued(self, ti: TaskInstance, session: Session = NE\n                 Log.map_index == ti.map_index,\n                 Log.try_number == ti.try_number,\n                 Log.event == TASK_STUCK_IN_QUEUED_RESCHEDULE_EVENT,\n+                since_running,",
        "comment_created_at": "2025-06-30T17:11:01+00:00",
        "comment_author": "dstandish",
        "comment_body": "This is confusing.\r\n\r\nBetter would be \r\n\r\n```\r\nquery = ...\r\n\r\nif last_running_time:\r\n    query = query.where(Log.dttm > last_running_time)\r\n```\r\n\r\nthe reason it is confusing is, it looks like you are just adding a simple boolean.\r\n\r\nin which case, just either query or don't.  \r\n\r\nbut that's actually not the case.  it's half true.  sometimes you are just adding `true` -- in which case, why bother adding that as a where clause.  and the other half is when you are adding an extra filter.  just conditionally add the filter is better to show this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175544904",
        "repo_full_name": "apache/airflow",
        "pr_number": 51410,
        "pr_file": "airflow-core/src/airflow/jobs/scheduler_job_runner.py",
        "discussion_id": "2175543440",
        "commented_code": "@@ -2037,6 +2056,7 @@ def _get_num_times_stuck_in_queued(self, ti: TaskInstance, session: Session = NE\n                 Log.map_index == ti.map_index,\n                 Log.try_number == ti.try_number,\n                 Log.event == TASK_STUCK_IN_QUEUED_RESCHEDULE_EVENT,\n+                since_running,",
        "comment_created_at": "2025-06-30T17:12:07+00:00",
        "comment_author": "dstandish",
        "comment_body": "It's also a bit fragile to do this because, it's not really guaranteed that what we put in the log table won't change.  (not saying there's a better option)",
        "pr_file_module": null
      },
      {
        "comment_id": "2175723758",
        "repo_full_name": "apache/airflow",
        "pr_number": 51410,
        "pr_file": "airflow-core/src/airflow/jobs/scheduler_job_runner.py",
        "discussion_id": "2175543440",
        "commented_code": "@@ -2037,6 +2056,7 @@ def _get_num_times_stuck_in_queued(self, ti: TaskInstance, session: Session = NE\n                 Log.map_index == ti.map_index,\n                 Log.try_number == ti.try_number,\n                 Log.event == TASK_STUCK_IN_QUEUED_RESCHEDULE_EVENT,\n+                since_running,",
        "comment_created_at": "2025-06-30T19:06:58+00:00",
        "comment_author": "jedcunningham",
        "comment_body": "Yep, that refactor is a good suggestion.\r\n\r\nThe relying of log table bit is the best answer we had to detect this scenario. We could rework it to do it differently, but that'd be a bigger undertaking.",
        "pr_file_module": null
      },
      {
        "comment_id": "2175752988",
        "repo_full_name": "apache/airflow",
        "pr_number": 51410,
        "pr_file": "airflow-core/src/airflow/jobs/scheduler_job_runner.py",
        "discussion_id": "2175543440",
        "commented_code": "@@ -2037,6 +2056,7 @@ def _get_num_times_stuck_in_queued(self, ti: TaskInstance, session: Session = NE\n                 Log.map_index == ti.map_index,\n                 Log.try_number == ti.try_number,\n                 Log.event == TASK_STUCK_IN_QUEUED_RESCHEDULE_EVENT,\n+                since_running,",
        "comment_created_at": "2025-06-30T19:29:00+00:00",
        "comment_author": "collinmcnulty",
        "comment_body": "Great suggestion. Done!",
        "pr_file_module": null
      }
    ]
  }
]