[
  {
    "discussion_id": "2159073667",
    "pr_number": 51264,
    "pr_file": "airflow-core/src/airflow/ui/src/pages/Dashboard/FavoriteDags/FavoriteDags.tsx",
    "created_at": "2025-06-20T14:03:50+00:00",
    "commented_code": "+/*!\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import { Box, Flex, Heading, SimpleGrid, Text } from \"@chakra-ui/react\";\n+import { useQueryClient } from \"@tanstack/react-query\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { FiStar } from \"react-icons/fi\";\n+import { useLocation } from \"react-router-dom\";\n+\n+import { useDagServiceGetDags } from \"openapi/queries\";\n+\n+import { FavoriteDagCard } from \"./FavoriteDagCard\";\n+\n+const MAX_VISIBLE = 5;",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2159073667",
        "repo_full_name": "apache/airflow",
        "pr_number": 51264,
        "pr_file": "airflow-core/src/airflow/ui/src/pages/Dashboard/FavoriteDags/FavoriteDags.tsx",
        "discussion_id": "2159073667",
        "commented_code": "@@ -0,0 +1,96 @@\n+/*!\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import { Box, Flex, Heading, SimpleGrid, Text } from \"@chakra-ui/react\";\n+import { useQueryClient } from \"@tanstack/react-query\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { FiStar } from \"react-icons/fi\";\n+import { useLocation } from \"react-router-dom\";\n+\n+import { useDagServiceGetDags } from \"openapi/queries\";\n+\n+import { FavoriteDagCard } from \"./FavoriteDagCard\";\n+\n+const MAX_VISIBLE = 5;",
        "comment_created_at": "2025-06-20T14:03:50+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "You don't need to do that slicing in the front-end. Endpoint is paginated, just request the first 5.",
        "pr_file_module": null
      },
      {
        "comment_id": "2160444610",
        "repo_full_name": "apache/airflow",
        "pr_number": 51264,
        "pr_file": "airflow-core/src/airflow/ui/src/pages/Dashboard/FavoriteDags/FavoriteDags.tsx",
        "discussion_id": "2159073667",
        "commented_code": "@@ -0,0 +1,96 @@\n+/*!\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import { Box, Flex, Heading, SimpleGrid, Text } from \"@chakra-ui/react\";\n+import { useQueryClient } from \"@tanstack/react-query\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useTranslation } from \"react-i18next\";\n+import { FiStar } from \"react-icons/fi\";\n+import { useLocation } from \"react-router-dom\";\n+\n+import { useDagServiceGetDags } from \"openapi/queries\";\n+\n+import { FavoriteDagCard } from \"./FavoriteDagCard\";\n+\n+const MAX_VISIBLE = 5;",
        "comment_created_at": "2025-06-22T19:34:43+00:00",
        "comment_author": "PNL0",
        "comment_body": "Done. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049310825",
    "pr_number": 49412,
    "pr_file": "airflow-core/src/airflow/ui/src/queries/useLogs.tsx",
    "created_at": "2025-04-17T16:37:12+00:00",
    "commented_code": "return { data: parsedData, ...rest };\n };\n+\n+type LineObject = {\n+  props?: Props;\n+};\n+\n+const logDateTime = (line: string): string | undefined => {\n+  if (!line || typeof line !== \"object\") {\n+    return undefined;\n+  }\n+\n+  const lineObj = line as LineObject;\n+\n+  if (!lineObj.props || !(\"children\" in lineObj.props)) {\n+    return undefined;\n+  }\n+\n+  const { children } = lineObj.props;\n+\n+  if (!Array.isArray(children) || children.length <= 2) {\n+    return undefined;\n+  }\n+\n+  const { 2: thirdChild } = children;\n+\n+  const thirdChildObj = thirdChild as { props?: { datetime?: string } };\n+\n+  if (!thirdChildObj.props || typeof thirdChildObj.props.datetime !== \"string\") {\n+    return undefined;\n+  }\n+\n+  const datetimeStr = thirdChildObj.props.datetime;\n+  const date = new Date(datetimeStr);\n+\n+  if (isNaN(date.getTime())) {\n+    return undefined;\n+  }\n+\n+  const year = date.getFullYear();\n+  const month = date.getMonth() + 1;\n+  const day = date.getDate();\n+  const hours = date.getHours();\n+  const minutes = date.getMinutes();\n+  const seconds = date.getSeconds();\n+  const formattedDate = `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n+  const formattedTime = `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n+\n+  return `${formattedDate}, ${formattedTime}`;\n+};\n+\n+const logText = ({ data, logLevelFilters, sourceFilters, taskInstance, tryNumber }: ParseLogsProps) => {\n+  let warning;\n+  let parsedLines;\n+  const sources: Array<string> = [];\n+  const logLink = taskInstance ? `${getTaskInstanceLink(taskInstance)}?try_number=${tryNumber}` : \"\";\n+  const elements: Array<string> = [];\n+\n+  try {\n+    parsedLines = data.map((datum, index) => {\n+      if (typeof datum !== \"string\" && \"logger\" in datum) {\n+        const source = datum.logger as string;\n+\n+        if (!sources.includes(source)) {\n+          sources.push(source);\n+        }\n+      }\n+\n+      return renderStructuredLog({ index, logLevelFilters, logLink, logMessage: datum, sourceFilters });\n+    });\n+  } catch (error) {\n+    const errorMessage = error instanceof Error ? error.message : \"An error occurred.\";\n+\n+    console.warn(`Error parsing logs: ${errorMessage}`);\n+    warning = \"Unable to show logs. There was an error parsing logs.\";\n+\n+    return { data, warning };\n+  }\n+  parsedLines.map((line) => {\n+    const text = innerText(line);\n+\n+    if (text !== \"\") {\n+      const datetime = logDateTime(line as string);\n+\n+      if (datetime === undefined) {\n+        elements.push(`${text}\n`);\n+      } else {\n+        const first = text.slice(0, Math.max(0, text.indexOf(\"[\")));\n+        const second = text.slice(Math.max(0, text.indexOf(\"[\") + 1));\n+        const newtext = `${first}[${datetime}${second}`;\n+\n+        elements.push(`${newtext}\n`);\n+      }\n+    }\n+\n+    return text;\n+  });\n+\n+  return elements;\n+};\n+\n+export const useLogDownload = (\n+  { dagId, logLevelFilters, sourceFilters, taskInstance, tryNumber = 1 }: Props,\n+  options?: Omit<UseQueryOptions<TaskInstancesLogResponse>, \"queryFn\" | \"queryKey\">,\n+) => {\n+  const refetchInterval = useAutoRefresh({ dagId });\n+\n+  const { data, ...rest } = useTaskInstanceServiceGetLog(",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2049310825",
        "repo_full_name": "apache/airflow",
        "pr_number": 49412,
        "pr_file": "airflow-core/src/airflow/ui/src/queries/useLogs.tsx",
        "discussion_id": "2049310825",
        "commented_code": "@@ -155,3 +155,138 @@ export const useLogs = (\n \n   return { data: parsedData, ...rest };\n };\n+\n+type LineObject = {\n+  props?: Props;\n+};\n+\n+const logDateTime = (line: string): string | undefined => {\n+  if (!line || typeof line !== \"object\") {\n+    return undefined;\n+  }\n+\n+  const lineObj = line as LineObject;\n+\n+  if (!lineObj.props || !(\"children\" in lineObj.props)) {\n+    return undefined;\n+  }\n+\n+  const { children } = lineObj.props;\n+\n+  if (!Array.isArray(children) || children.length <= 2) {\n+    return undefined;\n+  }\n+\n+  const { 2: thirdChild } = children;\n+\n+  const thirdChildObj = thirdChild as { props?: { datetime?: string } };\n+\n+  if (!thirdChildObj.props || typeof thirdChildObj.props.datetime !== \"string\") {\n+    return undefined;\n+  }\n+\n+  const datetimeStr = thirdChildObj.props.datetime;\n+  const date = new Date(datetimeStr);\n+\n+  if (isNaN(date.getTime())) {\n+    return undefined;\n+  }\n+\n+  const year = date.getFullYear();\n+  const month = date.getMonth() + 1;\n+  const day = date.getDate();\n+  const hours = date.getHours();\n+  const minutes = date.getMinutes();\n+  const seconds = date.getSeconds();\n+  const formattedDate = `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n+  const formattedTime = `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n+\n+  return `${formattedDate}, ${formattedTime}`;\n+};\n+\n+const logText = ({ data, logLevelFilters, sourceFilters, taskInstance, tryNumber }: ParseLogsProps) => {\n+  let warning;\n+  let parsedLines;\n+  const sources: Array<string> = [];\n+  const logLink = taskInstance ? `${getTaskInstanceLink(taskInstance)}?try_number=${tryNumber}` : \"\";\n+  const elements: Array<string> = [];\n+\n+  try {\n+    parsedLines = data.map((datum, index) => {\n+      if (typeof datum !== \"string\" && \"logger\" in datum) {\n+        const source = datum.logger as string;\n+\n+        if (!sources.includes(source)) {\n+          sources.push(source);\n+        }\n+      }\n+\n+      return renderStructuredLog({ index, logLevelFilters, logLink, logMessage: datum, sourceFilters });\n+    });\n+  } catch (error) {\n+    const errorMessage = error instanceof Error ? error.message : \"An error occurred.\";\n+\n+    console.warn(`Error parsing logs: ${errorMessage}`);\n+    warning = \"Unable to show logs. There was an error parsing logs.\";\n+\n+    return { data, warning };\n+  }\n+  parsedLines.map((line) => {\n+    const text = innerText(line);\n+\n+    if (text !== \"\") {\n+      const datetime = logDateTime(line as string);\n+\n+      if (datetime === undefined) {\n+        elements.push(`${text}\\n`);\n+      } else {\n+        const first = text.slice(0, Math.max(0, text.indexOf(\"[\")));\n+        const second = text.slice(Math.max(0, text.indexOf(\"[\") + 1));\n+        const newtext = `${first}[${datetime}${second}`;\n+\n+        elements.push(`${newtext}\\n`);\n+      }\n+    }\n+\n+    return text;\n+  });\n+\n+  return elements;\n+};\n+\n+export const useLogDownload = (\n+  { dagId, logLevelFilters, sourceFilters, taskInstance, tryNumber = 1 }: Props,\n+  options?: Omit<UseQueryOptions<TaskInstancesLogResponse>, \"queryFn\" | \"queryKey\">,\n+) => {\n+  const refetchInterval = useAutoRefresh({ dagId });\n+\n+  const { data, ...rest } = useTaskInstanceServiceGetLog(",
        "comment_created_at": "2025-04-17T16:37:12+00:00",
        "comment_author": "tirkarthi",
        "comment_body": "I guess you can pass `text/plain` in the accept here and get the raw value of the log file in the storage which is the value users usually want to reduce the code for formatting.\r\n\r\n`accept?: \"application/json\" | \"text/plain\" | \"*/*\";`\r\n\r\nhttps://github.com/apache/airflow/blob/96c6daa97c94b20b14ec5fa7f39de26b3f2d2559/airflow-core/src/airflow/api_fastapi/core_api/routes/public/log.py#L136-L153",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161158134",
    "pr_number": 51682,
    "pr_file": "airflow-core/src/airflow/ui/src/pages/AssetsGroupedList/AssetsGroupedList.tsx",
    "created_at": "2025-06-23T09:34:24+00:00",
    "commented_code": "+/*!\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import { Box, Link, IconButton, VStack, Flex, Heading, Text, Input } from \"@chakra-ui/react\";\n+import { useState, useMemo } from \"react\";\n+import { Link as RouterLink } from \"react-router-dom\";\n+\n+import { useAssetServiceGetAssets } from \"openapi/queries\";\n+import type { AssetResponse } from \"openapi/requests/types.gen\";\n+import { DataTable } from \"src/components/DataTable\";\n+import { useTableURLState } from \"src/components/DataTable/useTableUrlState\";\n+import { ErrorAlert } from \"src/components/ErrorAlert\";\n+import Time from \"src/components/Time\";\n+\n+import { CreateAssetEvent } from \"../Asset/CreateAssetEvent\";\n+import { DependencyPopover } from \"../AssetsList/DependencyPopover\";\n+\n+// Ícones SVG inline para expandir/colapsar\n+const ChevronDownIcon = () => (\n+  <svg fill=\"currentColor\" height=\"1em\" viewBox=\"0 0 20 20\" width=\"1em\">\n+    <path\n+      clipRule=\"evenodd\"\n+      d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.085l3.71-3.855a.75.75 0 111.08 1.04l-4.24 4.4a.75.75 0 01-1.08 0l-4.24-4.4a.75.75 0 01.02-1.06z\"\n+      fillRule=\"evenodd\"\n+    />\n+  </svg>\n+);\n+\n+const ChevronRightIcon = () => (\n+  <svg fill=\"currentColor\" height=\"1em\" viewBox=\"0 0 20 20\" width=\"1em\">\n+    <path\n+      clipRule=\"evenodd\"\n+      d=\"M7.21 5.23a.75.75 0 011.06-.02l4.4 4.24a.75.75 0 010 1.08l-4.4 4.24a.75.75 0 11-1.04-1.08L11.085 10 7.23 6.29a.75.75 0 01-.02-1.06z\"\n+      fillRule=\"evenodd\"\n+    />\n+  </svg>\n+);\n+\n+const NameCell = ({ original }: { readonly original: AssetResponse }) => (\n+  <Link asChild color=\"fg.info\" fontWeight=\"bold\">\n+    <RouterLink to={`/assets/${original.id}`}>{original.name}</RouterLink>\n+  </Link>\n+);\n+\n+const LastAssetEventCell = ({ original }: { readonly original: AssetResponse }) => {\n+  const assetEvent = original.last_asset_event;\n+  const timestamp = assetEvent?.timestamp;\n+\n+  if (timestamp === undefined || timestamp === null) {\n+    return undefined;\n+  }\n+\n+  return <Time datetime={timestamp} />;\n+};\n+\n+const GroupCell = ({ original }: { readonly original: AssetResponse }) => {\n+  const { group } = original;\n+\n+  if (!group) {\n+    return undefined;\n+  }\n+\n+  return (\n+    <Link asChild color=\"fg.info\" fontWeight=\"bold\">\n+      <RouterLink to={`/assets/group/${group}`}>{group}</RouterLink>\n+    </Link>\n+  );\n+};\n+\n+const ConsumingDagsCell = ({ original }: { readonly original: AssetResponse }) =>\n+  original.consuming_dags.length ? (\n+    <DependencyPopover dependencies={original.consuming_dags} type=\"Dag\" />\n+  ) : undefined;\n+\n+const ProducingTasksCell = ({ original }: { readonly original: AssetResponse }) =>\n+  original.producing_tasks.length ? (\n+    <DependencyPopover dependencies={original.producing_tasks} type=\"Task\" />\n+  ) : undefined;\n+\n+const TriggerCell = ({ original }: { readonly original: AssetResponse }) => (\n+  <CreateAssetEvent asset={original} withText={false} />\n+);\n+\n+const truncate = (str: string, max = 32) => (str.length > max ? `${str.slice(0, max - 3)}...` : str);\n+\n+const nameCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <NameCell original={original} />\n+);\n+const lastAssetEventCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <LastAssetEventCell original={original} />\n+);\n+const groupCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <GroupCell original={original} />\n+);\n+const consumingDagsCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <ConsumingDagsCell original={original} />\n+);\n+const producingTasksCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <ProducingTasksCell original={original} />\n+);\n+const triggerCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <TriggerCell original={original} />\n+);\n+\n+export const AssetsGroupedList = () => {\n+  const { setTableURLState, tableURLState } = useTableURLState();\n+  const { sorting } = tableURLState;\n+  const [sort] = sorting;\n+  const orderBy = sort ? `${sort.desc ? \"-\" : \"\"}${sort.id}` : undefined;\n+\n+  const { data, error, isLoading } = useAssetServiceGetAssets({\n+    limit: 1000,\n+    offset: 0,\n+    orderBy,\n+  });\n+\n+  const [search, setSearch] = useState(\"\");\n+  const [sortAsc, setSortAsc] = useState(true);\n+\n+  // Group assets by group\n+  const grouped = useMemo(() => {\n+    const filtered = (data?.assets ?? []).filter((asset) =>\n+      asset.group.toLowerCase().includes(search.toLowerCase()),\n+    );\n+    const groupedObj = filtered.reduce<Record<string, Array<AssetResponse>>>((acc, asset) => {\n+      const groupName = asset.group;\n+\n+      acc[groupName] ??= [];\n+      acc[groupName].push(asset);\n+\n+      return acc;\n+    }, {});",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2161158134",
        "repo_full_name": "apache/airflow",
        "pr_number": 51682,
        "pr_file": "airflow-core/src/airflow/ui/src/pages/AssetsGroupedList/AssetsGroupedList.tsx",
        "discussion_id": "2161158134",
        "commented_code": "@@ -0,0 +1,297 @@\n+/*!\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import { Box, Link, IconButton, VStack, Flex, Heading, Text, Input } from \"@chakra-ui/react\";\n+import { useState, useMemo } from \"react\";\n+import { Link as RouterLink } from \"react-router-dom\";\n+\n+import { useAssetServiceGetAssets } from \"openapi/queries\";\n+import type { AssetResponse } from \"openapi/requests/types.gen\";\n+import { DataTable } from \"src/components/DataTable\";\n+import { useTableURLState } from \"src/components/DataTable/useTableUrlState\";\n+import { ErrorAlert } from \"src/components/ErrorAlert\";\n+import Time from \"src/components/Time\";\n+\n+import { CreateAssetEvent } from \"../Asset/CreateAssetEvent\";\n+import { DependencyPopover } from \"../AssetsList/DependencyPopover\";\n+\n+// Ícones SVG inline para expandir/colapsar\n+const ChevronDownIcon = () => (\n+  <svg fill=\"currentColor\" height=\"1em\" viewBox=\"0 0 20 20\" width=\"1em\">\n+    <path\n+      clipRule=\"evenodd\"\n+      d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.085l3.71-3.855a.75.75 0 111.08 1.04l-4.24 4.4a.75.75 0 01-1.08 0l-4.24-4.4a.75.75 0 01.02-1.06z\"\n+      fillRule=\"evenodd\"\n+    />\n+  </svg>\n+);\n+\n+const ChevronRightIcon = () => (\n+  <svg fill=\"currentColor\" height=\"1em\" viewBox=\"0 0 20 20\" width=\"1em\">\n+    <path\n+      clipRule=\"evenodd\"\n+      d=\"M7.21 5.23a.75.75 0 011.06-.02l4.4 4.24a.75.75 0 010 1.08l-4.4 4.24a.75.75 0 11-1.04-1.08L11.085 10 7.23 6.29a.75.75 0 01-.02-1.06z\"\n+      fillRule=\"evenodd\"\n+    />\n+  </svg>\n+);\n+\n+const NameCell = ({ original }: { readonly original: AssetResponse }) => (\n+  <Link asChild color=\"fg.info\" fontWeight=\"bold\">\n+    <RouterLink to={`/assets/${original.id}`}>{original.name}</RouterLink>\n+  </Link>\n+);\n+\n+const LastAssetEventCell = ({ original }: { readonly original: AssetResponse }) => {\n+  const assetEvent = original.last_asset_event;\n+  const timestamp = assetEvent?.timestamp;\n+\n+  if (timestamp === undefined || timestamp === null) {\n+    return undefined;\n+  }\n+\n+  return <Time datetime={timestamp} />;\n+};\n+\n+const GroupCell = ({ original }: { readonly original: AssetResponse }) => {\n+  const { group } = original;\n+\n+  if (!group) {\n+    return undefined;\n+  }\n+\n+  return (\n+    <Link asChild color=\"fg.info\" fontWeight=\"bold\">\n+      <RouterLink to={`/assets/group/${group}`}>{group}</RouterLink>\n+    </Link>\n+  );\n+};\n+\n+const ConsumingDagsCell = ({ original }: { readonly original: AssetResponse }) =>\n+  original.consuming_dags.length ? (\n+    <DependencyPopover dependencies={original.consuming_dags} type=\"Dag\" />\n+  ) : undefined;\n+\n+const ProducingTasksCell = ({ original }: { readonly original: AssetResponse }) =>\n+  original.producing_tasks.length ? (\n+    <DependencyPopover dependencies={original.producing_tasks} type=\"Task\" />\n+  ) : undefined;\n+\n+const TriggerCell = ({ original }: { readonly original: AssetResponse }) => (\n+  <CreateAssetEvent asset={original} withText={false} />\n+);\n+\n+const truncate = (str: string, max = 32) => (str.length > max ? `${str.slice(0, max - 3)}...` : str);\n+\n+const nameCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <NameCell original={original} />\n+);\n+const lastAssetEventCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <LastAssetEventCell original={original} />\n+);\n+const groupCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <GroupCell original={original} />\n+);\n+const consumingDagsCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <ConsumingDagsCell original={original} />\n+);\n+const producingTasksCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <ProducingTasksCell original={original} />\n+);\n+const triggerCellRenderer = ({ row: { original } }: { row: { original: AssetResponse } }) => (\n+  <TriggerCell original={original} />\n+);\n+\n+export const AssetsGroupedList = () => {\n+  const { setTableURLState, tableURLState } = useTableURLState();\n+  const { sorting } = tableURLState;\n+  const [sort] = sorting;\n+  const orderBy = sort ? `${sort.desc ? \"-\" : \"\"}${sort.id}` : undefined;\n+\n+  const { data, error, isLoading } = useAssetServiceGetAssets({\n+    limit: 1000,\n+    offset: 0,\n+    orderBy,\n+  });\n+\n+  const [search, setSearch] = useState(\"\");\n+  const [sortAsc, setSortAsc] = useState(true);\n+\n+  // Group assets by group\n+  const grouped = useMemo(() => {\n+    const filtered = (data?.assets ?? []).filter((asset) =>\n+      asset.group.toLowerCase().includes(search.toLowerCase()),\n+    );\n+    const groupedObj = filtered.reduce<Record<string, Array<AssetResponse>>>((acc, asset) => {\n+      const groupName = asset.group;\n+\n+      acc[groupName] ??= [];\n+      acc[groupName].push(asset);\n+\n+      return acc;\n+    }, {});",
        "comment_created_at": "2025-06-23T09:34:24+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "I think this logic can holds a few problems, first of the endpoint `useAssetServiceGetAssets` is paginated. It means that you'll only retrieve the first 50 items, and you need a mechanism to display the remaining items (cf tables pagination component).\r\n\r\nIn addition, there is no guarantee at this point that all assets for a specified group will be on the same page, you could end up with a group missing some assets because those were not returned yet.\r\n\r\nI think the easiest approach would be to add a backend ui endpoints to list/retrieve asset groups directly. (I group would list all of it's child asset and we would paginate on groups directly). Maybe there are other approaches possible but I would need to think about it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161178838",
    "pr_number": 51682,
    "pr_file": "airflow-core/src/airflow/ui/src/pages/AssetsList/AssetsList.tsx",
    "created_at": "2025-06-23T09:44:34+00:00",
    "commented_code": "},\n ];\n \n-const NAME_PATTERN_PARAM = SearchParamsKeys.NAME_PATTERN;\n-\n export const AssetsList = () => {\n   const { t: translate } = useTranslation([\"assets\", \"common\"]);\n   const [searchParams, setSearchParams] = useSearchParams();\n \n-  const [namePattern, setNamePattern] = useState(searchParams.get(NAME_PATTERN_PARAM) ?? undefined);\n+  const [searchValue, setSearchValue] = useState(\n+    searchParams.get(SearchParamsKeys.NAME_PATTERN) ??\n+      searchParams.get(SearchParamsKeys.GROUP_PATTERN) ??\n+      undefined,\n+  );\n \n   const { setTableURLState, tableURLState } = useTableURLState();\n   const { pagination, sorting } = tableURLState;\n   const [sort] = sorting;\n   const orderBy = sort ? `${sort.desc ? \"-\" : \"\"}${sort.id}` : undefined;\n \n-  const { data, error, isLoading } = useAssetServiceGetAssets({\n+  const {\n+    data: dataByName,\n+    error: errorByName,\n+    isLoading: isLoadingByName,\n+  } = useAssetServiceGetAssets({\n     limit: pagination.pageSize,\n-    namePattern,\n+    namePattern: searchValue ?? undefined,\n     offset: pagination.pageIndex * pagination.pageSize,\n     orderBy,\n   });\n \n+  const {\n+    data: dataByGroup,\n+    error: errorByGroup,\n+    isLoading: isLoadingByGroup,\n+  } = useAssetServiceGetAssets({\n+    groupPattern: searchValue ?? undefined,\n+    limit: pagination.pageSize,\n+    offset: pagination.pageIndex * pagination.pageSize,\n+    orderBy,\n+  });",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2161178838",
        "repo_full_name": "apache/airflow",
        "pr_number": 51682,
        "pr_file": "airflow-core/src/airflow/ui/src/pages/AssetsList/AssetsList.tsx",
        "discussion_id": "2161178838",
        "commented_code": "@@ -92,64 +105,111 @@ const createColumns = (translate: (key: string) => string): Array<ColumnDef<Asse\n   },\n ];\n \n-const NAME_PATTERN_PARAM = SearchParamsKeys.NAME_PATTERN;\n-\n export const AssetsList = () => {\n   const { t: translate } = useTranslation([\"assets\", \"common\"]);\n   const [searchParams, setSearchParams] = useSearchParams();\n \n-  const [namePattern, setNamePattern] = useState(searchParams.get(NAME_PATTERN_PARAM) ?? undefined);\n+  const [searchValue, setSearchValue] = useState(\n+    searchParams.get(SearchParamsKeys.NAME_PATTERN) ??\n+      searchParams.get(SearchParamsKeys.GROUP_PATTERN) ??\n+      undefined,\n+  );\n \n   const { setTableURLState, tableURLState } = useTableURLState();\n   const { pagination, sorting } = tableURLState;\n   const [sort] = sorting;\n   const orderBy = sort ? `${sort.desc ? \"-\" : \"\"}${sort.id}` : undefined;\n \n-  const { data, error, isLoading } = useAssetServiceGetAssets({\n+  const {\n+    data: dataByName,\n+    error: errorByName,\n+    isLoading: isLoadingByName,\n+  } = useAssetServiceGetAssets({\n     limit: pagination.pageSize,\n-    namePattern,\n+    namePattern: searchValue ?? undefined,\n     offset: pagination.pageIndex * pagination.pageSize,\n     orderBy,\n   });\n \n+  const {\n+    data: dataByGroup,\n+    error: errorByGroup,\n+    isLoading: isLoadingByGroup,\n+  } = useAssetServiceGetAssets({\n+    groupPattern: searchValue ?? undefined,\n+    limit: pagination.pageSize,\n+    offset: pagination.pageIndex * pagination.pageSize,\n+    orderBy,\n+  });",
        "comment_created_at": "2025-06-23T09:44:34+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "We shouldn't do that manually in the UI. (call the endpoints with two different parameters and then merge results in the UI).\r\n\r\nThe backend should support this. (You can write a custom filter that will do the search accross both 'asset.name` and `asset.group`, or expand the `search_param_factory` and `_SearchParam` to be able to take a `list[ColumnElement]` as attribute. And perform a search across multiple columns.",
        "pr_file_module": null
      }
    ]
  }
]