[
  {
    "discussion_id": "1990565769",
    "pr_number": 47592,
    "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
    "created_at": "2025-03-12T04:57:28+00:00",
    "commented_code": "sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n-        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n+        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=False))",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "1990565769",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
        "discussion_id": "1990565769",
        "commented_code": "@@ -48,12 +49,16 @@ def upgrade():\n         sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n-        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n+        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=False))",
        "comment_created_at": "2025-03-12T04:57:28+00:00",
        "comment_author": "jedcunningham",
        "comment_body": "We can't just set it nullable false here - we first have to populate it with data. Try this migration from 2.10 with some DAGs to see what I mean.\r\n\r\nThat means you will need an UPDATE statement like you had originally, you just didn't have it in the right spot.",
        "pr_file_module": null
      },
      {
        "comment_id": "1990749567",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
        "discussion_id": "1990565769",
        "commented_code": "@@ -48,12 +49,16 @@ def upgrade():\n         sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n-        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n+        batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=False))",
        "comment_created_at": "2025-03-12T07:05:01+00:00",
        "comment_author": "ephraimbuddy",
        "comment_body": "Oh, my bad, this is tricky, then. Should it be populated with `dags-folder` or `example-dags` or just any string? What if the old dag is from a git repo. I think best to update with dummy string and have the dag processor update it in the next cycle. \r\n\r\n@gyli , basically, you have to first set this column as nullable, then run the update query and alter the column to make it non-nullable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1997731716",
    "pr_number": 47592,
    "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
    "created_at": "2025-03-16T21:46:04+00:00",
    "commented_code": "sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n         batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n         batch_op.add_column(sa.Column(\"bundle_version\", sa.String(length=200), nullable=True))\n+\n         batch_op.create_foreign_key(\n             batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n         )\n+\n+        conn = op.get_bind()\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "1997731716",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
        "discussion_id": "1997731716",
        "commented_code": "@@ -48,12 +49,32 @@ def upgrade():\n         sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n         batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n         batch_op.add_column(sa.Column(\"bundle_version\", sa.String(length=200), nullable=True))\n+\n         batch_op.create_foreign_key(\n             batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n         )\n+\n+        conn = op.get_bind()\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'",
        "comment_created_at": "2025-03-16T21:46:04+00:00",
        "comment_author": "ephraimbuddy",
        "comment_body": "@jedcunningham what do you think of this? I guess any string would work here instead of having the case statement. Dag processor will later update the dag on the next run. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1998979758",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow/migrations/versions/0050_3_0_0_add_dagbundlemodel.py",
        "discussion_id": "1997731716",
        "commented_code": "@@ -48,12 +49,32 @@ def upgrade():\n         sa.Column(\"last_refreshed\", UtcDateTime(timezone=True), nullable=True),\n         sa.PrimaryKeyConstraint(\"name\", name=op.f(\"dag_bundle_pkey\")),\n     )\n+\n     with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n         batch_op.add_column(sa.Column(\"bundle_name\", sa.String(length=250), nullable=True))\n         batch_op.add_column(sa.Column(\"bundle_version\", sa.String(length=200), nullable=True))\n+\n         batch_op.create_foreign_key(\n             batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n         )\n+\n+        conn = op.get_bind()\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'",
        "comment_created_at": "2025-03-17T15:10:27+00:00",
        "comment_author": "jedcunningham",
        "comment_body": "This is fine. I think `dags-folder` will need to be our catch-all and we will just document that you need a bundle with that name during the migration - we have a FK to bundle, so it has to be a \"real\" value.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094121926",
    "pr_number": 47592,
    "pr_file": "airflow-core/src/airflow/models/dagbundle.py",
    "created_at": "2025-05-17T13:21:31+00:00",
    "commented_code": "\"\"\"\n \n     __tablename__ = \"dag_bundle\"\n-    name = Column(StringID(), primary_key=True)\n+    name = Column(StringID(), primary_key=True, nullable=False)",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2094121926",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/models/dagbundle.py",
        "discussion_id": "2094121926",
        "commented_code": "@@ -36,7 +36,7 @@ class DagBundleModel(Base):\n     \"\"\"\n \n     __tablename__ = \"dag_bundle\"\n-    name = Column(StringID(), primary_key=True)\n+    name = Column(StringID(), primary_key=True, nullable=False)",
        "comment_created_at": "2025-05-17T13:21:31+00:00",
        "comment_author": "ephraimbuddy",
        "comment_body": "You need to also migrate this change. I think that's what's causing the error you got. dag_bundle.name is nullable but dag.bundle_name is not nullable so both columns are not compatible to be used as FK",
        "pr_file_module": null
      },
      {
        "comment_id": "2102798018",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/models/dagbundle.py",
        "discussion_id": "2094121926",
        "commented_code": "@@ -36,7 +36,7 @@ class DagBundleModel(Base):\n     \"\"\"\n \n     __tablename__ = \"dag_bundle\"\n-    name = Column(StringID(), primary_key=True)\n+    name = Column(StringID(), primary_key=True, nullable=False)",
        "comment_created_at": "2025-05-22T15:06:10+00:00",
        "comment_author": "gyli",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2145272243",
    "pr_number": 47592,
    "pr_file": "airflow-core/src/airflow/migrations/versions/0071_3_1_0_make_bundle_name_not_nullable.py",
    "created_at": "2025-06-13T14:52:52+00:00",
    "commented_code": "+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Make bundle_name not nullable.\n+\n+Revision ID: 1b612ec87098\n+Revises: 0242ac120002\n+Create Date: 2025-05-20 21:13:32.525404\n+\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import sqlalchemy as sa\n+from alembic import op\n+from sqlalchemy.sql import text\n+\n+# revision identifiers, used by Alembic.\n+revision = \"1b612ec87098\"\n+down_revision = \"0242ac120002\"\n+branch_labels = None\n+depends_on = None\n+airflow_version = \"3.1.0\"\n+\n+\n+def upgrade():\n+    \"\"\"Apply Make bundle_name not nullable.\"\"\"\n+    dialect_name = op.get_bind().dialect.name\n+    if dialect_name == \"postgresql\":\n+        op.execute(\"\"\"\n+                    INSERT INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder')\n+                    ON CONFLICT (name) DO NOTHING;\n+                    \"\"\")\n+    if dialect_name == \"mysql\":\n+        op.execute(\"\"\"\n+                    INSERT IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+    if dialect_name == \"sqlite\":\n+        op.execute(\"\"\"\n+                    INSERT OR IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+\n+    conn = op.get_bind()\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'\n+                    END\n+                WHERE bundle_name IS NULL\n+                \"\"\"\n+            )\n+        )\n+        # drop the foreign key temporarily and recreate it once both columns are changed\n+        batch_op.drop_constraint(batch_op.f(\"dag_bundle_name_fkey\"), type_=\"foreignkey\")\n+        batch_op.alter_column(\"bundle_name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag_bundle\", schema=None) as batch_op:\n+        batch_op.alter_column(\"name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        batch_op.create_foreign_key(\n+            batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n+        )\n+\n+\n+def downgrade():\n+    \"\"\"NO downgrade because the primary key cannot be null.\"\"\"",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2145272243",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/migrations/versions/0071_3_1_0_make_bundle_name_not_nullable.py",
        "discussion_id": "2145272243",
        "commented_code": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Make bundle_name not nullable.\n+\n+Revision ID: 1b612ec87098\n+Revises: 0242ac120002\n+Create Date: 2025-05-20 21:13:32.525404\n+\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import sqlalchemy as sa\n+from alembic import op\n+from sqlalchemy.sql import text\n+\n+# revision identifiers, used by Alembic.\n+revision = \"1b612ec87098\"\n+down_revision = \"0242ac120002\"\n+branch_labels = None\n+depends_on = None\n+airflow_version = \"3.1.0\"\n+\n+\n+def upgrade():\n+    \"\"\"Apply Make bundle_name not nullable.\"\"\"\n+    dialect_name = op.get_bind().dialect.name\n+    if dialect_name == \"postgresql\":\n+        op.execute(\"\"\"\n+                    INSERT INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder')\n+                    ON CONFLICT (name) DO NOTHING;\n+                    \"\"\")\n+    if dialect_name == \"mysql\":\n+        op.execute(\"\"\"\n+                    INSERT IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+    if dialect_name == \"sqlite\":\n+        op.execute(\"\"\"\n+                    INSERT OR IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+\n+    conn = op.get_bind()\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'\n+                    END\n+                WHERE bundle_name IS NULL\n+                \"\"\"\n+            )\n+        )\n+        # drop the foreign key temporarily and recreate it once both columns are changed\n+        batch_op.drop_constraint(batch_op.f(\"dag_bundle_name_fkey\"), type_=\"foreignkey\")\n+        batch_op.alter_column(\"bundle_name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag_bundle\", schema=None) as batch_op:\n+        batch_op.alter_column(\"name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        batch_op.create_foreign_key(\n+            batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n+        )\n+\n+\n+def downgrade():\n+    \"\"\"NO downgrade because the primary key cannot be null.\"\"\"",
        "comment_created_at": "2025-06-13T14:52:52+00:00",
        "comment_author": "jedcunningham",
        "comment_body": "@ephraimbuddy don't you think we should make it nullable again so in a downgrade, we are still in a consistent state orm wise? Maybe it doesn't matter...",
        "pr_file_module": null
      },
      {
        "comment_id": "2148914065",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/migrations/versions/0071_3_1_0_make_bundle_name_not_nullable.py",
        "discussion_id": "2145272243",
        "commented_code": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Make bundle_name not nullable.\n+\n+Revision ID: 1b612ec87098\n+Revises: 0242ac120002\n+Create Date: 2025-05-20 21:13:32.525404\n+\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import sqlalchemy as sa\n+from alembic import op\n+from sqlalchemy.sql import text\n+\n+# revision identifiers, used by Alembic.\n+revision = \"1b612ec87098\"\n+down_revision = \"0242ac120002\"\n+branch_labels = None\n+depends_on = None\n+airflow_version = \"3.1.0\"\n+\n+\n+def upgrade():\n+    \"\"\"Apply Make bundle_name not nullable.\"\"\"\n+    dialect_name = op.get_bind().dialect.name\n+    if dialect_name == \"postgresql\":\n+        op.execute(\"\"\"\n+                    INSERT INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder')\n+                    ON CONFLICT (name) DO NOTHING;\n+                    \"\"\")\n+    if dialect_name == \"mysql\":\n+        op.execute(\"\"\"\n+                    INSERT IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+    if dialect_name == \"sqlite\":\n+        op.execute(\"\"\"\n+                    INSERT OR IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+\n+    conn = op.get_bind()\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'\n+                    END\n+                WHERE bundle_name IS NULL\n+                \"\"\"\n+            )\n+        )\n+        # drop the foreign key temporarily and recreate it once both columns are changed\n+        batch_op.drop_constraint(batch_op.f(\"dag_bundle_name_fkey\"), type_=\"foreignkey\")\n+        batch_op.alter_column(\"bundle_name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag_bundle\", schema=None) as batch_op:\n+        batch_op.alter_column(\"name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        batch_op.create_foreign_key(\n+            batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n+        )\n+\n+\n+def downgrade():\n+    \"\"\"NO downgrade because the primary key cannot be null.\"\"\"",
        "comment_created_at": "2025-06-16T01:39:35+00:00",
        "comment_author": "gyli",
        "comment_body": "Ideally it can be a breaking db change in Airflow 3, but it's probably too late. While personally I don'y think it matter too much, unless it's common or necessary during dev to downgrade while keeping the metadata.",
        "pr_file_module": null
      },
      {
        "comment_id": "2148914699",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/migrations/versions/0071_3_1_0_make_bundle_name_not_nullable.py",
        "discussion_id": "2145272243",
        "commented_code": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Make bundle_name not nullable.\n+\n+Revision ID: 1b612ec87098\n+Revises: 0242ac120002\n+Create Date: 2025-05-20 21:13:32.525404\n+\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import sqlalchemy as sa\n+from alembic import op\n+from sqlalchemy.sql import text\n+\n+# revision identifiers, used by Alembic.\n+revision = \"1b612ec87098\"\n+down_revision = \"0242ac120002\"\n+branch_labels = None\n+depends_on = None\n+airflow_version = \"3.1.0\"\n+\n+\n+def upgrade():\n+    \"\"\"Apply Make bundle_name not nullable.\"\"\"\n+    dialect_name = op.get_bind().dialect.name\n+    if dialect_name == \"postgresql\":\n+        op.execute(\"\"\"\n+                    INSERT INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder')\n+                    ON CONFLICT (name) DO NOTHING;\n+                    \"\"\")\n+    if dialect_name == \"mysql\":\n+        op.execute(\"\"\"\n+                    INSERT IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+    if dialect_name == \"sqlite\":\n+        op.execute(\"\"\"\n+                    INSERT OR IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+\n+    conn = op.get_bind()\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'\n+                    END\n+                WHERE bundle_name IS NULL\n+                \"\"\"\n+            )\n+        )\n+        # drop the foreign key temporarily and recreate it once both columns are changed\n+        batch_op.drop_constraint(batch_op.f(\"dag_bundle_name_fkey\"), type_=\"foreignkey\")\n+        batch_op.alter_column(\"bundle_name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag_bundle\", schema=None) as batch_op:\n+        batch_op.alter_column(\"name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        batch_op.create_foreign_key(\n+            batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n+        )\n+\n+\n+def downgrade():\n+    \"\"\"NO downgrade because the primary key cannot be null.\"\"\"",
        "comment_created_at": "2025-06-16T01:40:29+00:00",
        "comment_author": "gyli",
        "comment_body": "But please let me know if any of you have different opinion though! I am going to improve some of the tests using the fixture.",
        "pr_file_module": null
      },
      {
        "comment_id": "2149582163",
        "repo_full_name": "apache/airflow",
        "pr_number": 47592,
        "pr_file": "airflow-core/src/airflow/migrations/versions/0071_3_1_0_make_bundle_name_not_nullable.py",
        "discussion_id": "2145272243",
        "commented_code": "@@ -0,0 +1,94 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\"\n+Make bundle_name not nullable.\n+\n+Revision ID: 1b612ec87098\n+Revises: 0242ac120002\n+Create Date: 2025-05-20 21:13:32.525404\n+\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+import sqlalchemy as sa\n+from alembic import op\n+from sqlalchemy.sql import text\n+\n+# revision identifiers, used by Alembic.\n+revision = \"1b612ec87098\"\n+down_revision = \"0242ac120002\"\n+branch_labels = None\n+depends_on = None\n+airflow_version = \"3.1.0\"\n+\n+\n+def upgrade():\n+    \"\"\"Apply Make bundle_name not nullable.\"\"\"\n+    dialect_name = op.get_bind().dialect.name\n+    if dialect_name == \"postgresql\":\n+        op.execute(\"\"\"\n+                    INSERT INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder')\n+                    ON CONFLICT (name) DO NOTHING;\n+                    \"\"\")\n+    if dialect_name == \"mysql\":\n+        op.execute(\"\"\"\n+                    INSERT IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+    if dialect_name == \"sqlite\":\n+        op.execute(\"\"\"\n+                    INSERT OR IGNORE INTO dag_bundle (name) VALUES\n+                      ('example_dags'),\n+                      ('dags-folder');\n+                    \"\"\")\n+\n+    conn = op.get_bind()\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        conn.execute(\n+            text(\n+                \"\"\"\n+                UPDATE dag\n+                SET bundle_name =\n+                    CASE\n+                        WHEN fileloc LIKE '%/airflow/example_dags/%' THEN 'example_dags'\n+                        ELSE 'dags-folder'\n+                    END\n+                WHERE bundle_name IS NULL\n+                \"\"\"\n+            )\n+        )\n+        # drop the foreign key temporarily and recreate it once both columns are changed\n+        batch_op.drop_constraint(batch_op.f(\"dag_bundle_name_fkey\"), type_=\"foreignkey\")\n+        batch_op.alter_column(\"bundle_name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag_bundle\", schema=None) as batch_op:\n+        batch_op.alter_column(\"name\", nullable=False, existing_type=sa.String(length=250))\n+\n+    with op.batch_alter_table(\"dag\", schema=None) as batch_op:\n+        batch_op.create_foreign_key(\n+            batch_op.f(\"dag_bundle_name_fkey\"), \"dag_bundle\", [\"bundle_name\"], [\"name\"]\n+        )\n+\n+\n+def downgrade():\n+    \"\"\"NO downgrade because the primary key cannot be null.\"\"\"",
        "comment_created_at": "2025-06-16T10:15:20+00:00",
        "comment_author": "ephraimbuddy",
        "comment_body": "Thought about this and I think we should do a db migration but not data migration. That is, make the columns nullable but don't nullify or remove already added data",
        "pr_file_module": null
      }
    ]
  }
]