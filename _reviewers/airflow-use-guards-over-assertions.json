[
  {
    "discussion_id": "2176905905",
    "pr_number": 52408,
    "pr_file": "airflow-core/src/airflow/ui/src/layouts/Nav/PluginMenus.tsx",
    "created_at": "2025-07-01T08:57:01+00:00",
    "commented_code": "export const PluginMenus = () => {\n   const { t: translate } = useTranslation(\"common\");\n-  const { data } = usePluginServiceGetPlugins();\n+  const menuPlugins = (useConfig(\"plugins_extra_menu_items\") as Array<ExternalViewResponse>) ?? [];",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2176905905",
        "repo_full_name": "apache/airflow",
        "pr_number": 52408,
        "pr_file": "airflow-core/src/airflow/ui/src/layouts/Nav/PluginMenus.tsx",
        "discussion_id": "2176905905",
        "commented_code": "@@ -30,32 +30,27 @@ import { PluginMenuItem } from \"./PluginMenuItem\";\n \n export const PluginMenus = () => {\n   const { t: translate } = useTranslation(\"common\");\n-  const { data } = usePluginServiceGetPlugins();\n+  const menuPlugins = (useConfig(\"plugins_extra_menu_items\") as Array<ExternalViewResponse>) ?? [];\n ",
        "comment_created_at": "2025-07-01T08:57:01+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "We shouldn't need a hard casting like that. \"as\"\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152285382",
    "pr_number": 51714,
    "pr_file": "airflow-core/src/airflow/ui/src/layouts/Nav/PluginMenus.tsx",
    "created_at": "2025-06-17T13:29:50+00:00",
    "commented_code": "import { FiChevronRight } from \"react-icons/fi\";\n import { LuPlug } from \"react-icons/lu\";\n \n-import { usePluginServiceGetPlugins } from \"openapi/queries\";\n import type { AppBuilderMenuItemResponse } from \"openapi/requests/types.gen\";\n import { Menu } from \"src/components/ui\";\n+import { useConfig } from \"src/queries/useConfig\";\n \n import { NavButton } from \"./NavButton\";\n \n export const PluginMenus = () => {\n   const { t: translate } = useTranslation(\"common\");\n-  const { data } = usePluginServiceGetPlugins();\n+  const menuItems = useConfig(\"plugins_extra_menu_items\");\n \n-  const menuPlugins = data?.plugins.filter((plugin) => plugin.appbuilder_menu_items.length > 0);\n-\n-  if (data === undefined || menuPlugins === undefined) {\n+  if (\n+    !Array.isArray(menuItems) ||\n+    !menuItems.every(\n+      (item): item is AppBuilderMenuItemResponse => \"name\" in item && \"href\" in item && \"category\" in item,\n+    )",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2152285382",
        "repo_full_name": "apache/airflow",
        "pr_number": 51714,
        "pr_file": "airflow-core/src/airflow/ui/src/layouts/Nav/PluginMenus.tsx",
        "discussion_id": "2152285382",
        "commented_code": "@@ -21,36 +21,39 @@ import { useTranslation } from \"react-i18next\";\n import { FiChevronRight } from \"react-icons/fi\";\n import { LuPlug } from \"react-icons/lu\";\n \n-import { usePluginServiceGetPlugins } from \"openapi/queries\";\n import type { AppBuilderMenuItemResponse } from \"openapi/requests/types.gen\";\n import { Menu } from \"src/components/ui\";\n+import { useConfig } from \"src/queries/useConfig\";\n \n import { NavButton } from \"./NavButton\";\n \n export const PluginMenus = () => {\n   const { t: translate } = useTranslation(\"common\");\n-  const { data } = usePluginServiceGetPlugins();\n+  const menuItems = useConfig(\"plugins_extra_menu_items\");\n \n-  const menuPlugins = data?.plugins.filter((plugin) => plugin.appbuilder_menu_items.length > 0);\n-\n-  if (data === undefined || menuPlugins === undefined) {\n+  if (\n+    !Array.isArray(menuItems) ||\n+    !menuItems.every(\n+      (item): item is AppBuilderMenuItemResponse => \"name\" in item && \"href\" in item && \"category\" in item,\n+    )",
        "comment_created_at": "2025-06-17T13:29:50+00:00",
        "comment_author": "pierrejeambrun",
        "comment_body": "You'll be able to simplify this check once the backend always returns a list for `menuItems`",
        "pr_file_module": null
      }
    ]
  }
]