[
  {
    "discussion_id": "2175465435",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465435",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465435",
        "commented_code": "@@ -43,8 +45,95 @@\n logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/492)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175465439",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465439",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465439",
        "commented_code": "@@ -43,8 +45,95 @@\n logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/493)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175465442",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465442",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465442",
        "commented_code": "@@ -43,8 +45,95 @@\n logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/494)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175465446",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():\n+            logger.warning(\n+                \"Attempt to access non-file resource: '%s' (type: %s)\",\n+                resolved_path,\n+                \"directory\" if resolved_path.is_dir() else \"special file\",",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465446",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465446",
        "commented_code": "@@ -43,8 +45,95 @@\n logger = logging.getLogger(__name__)\n \n \n+def _validate_log_file_path(filename: str, log_directory: str) -> Path:\n+    \"\"\"\n+    Validate that the requested file path is within the log directory and safe to serve.\n+\n+    :param filename: The requested filename from the URL path\n+    :param log_directory: The base log directory path\n+\n+    :returns: Path: The validated file path\n+    \"\"\"\n+    # URL decode the filename to handle encoded path traversal attempts\n+    try:\n+        decoded_filename = urllib.parse.unquote(filename)\n+    except Exception as e:\n+        logger.warning(\"Failed to URL decode filename '%s': %s\", filename, e)\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid URL encoding in filename\",\n+        )\n+\n+    # Check for control characters and other invalid characters\n+    if not decoded_filename or any(ord(c) < 32 for c in decoded_filename):\n+        logger.warning(\n+            \"Invalid characters detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Invalid characters in filename\",\n+        )\n+\n+    # Check for null bytes specifically (additional security check)\n+    if \"\\x00\" in decoded_filename:\n+        logger.warning(\n+            \"Null byte detected in filename: '%s' (decoded: '%s')\",\n+            filename,\n+            decoded_filename,\n+        )\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST,\n+            detail=\"Null byte in filename\",\n+        )\n+\n+    try:\n+        # Normalize the log directory path and join the decoded filename with the log directory\n+        log_dir = Path(log_directory).resolve()\n+        file_path = log_dir / decoded_filename\n+\n+        # Resolve the full path to handle any symbolic links or relative components\n+        resolved_path = file_path.resolve()\n+\n+        # Ensure the resolved path is within the log directory (prevents path traversal)\n+        if not resolved_path.is_relative_to(log_dir):\n+            logger.warning(\n+                \"Path traversal attempt detected. Requested path '%s' (decoded: '%s') resolves to '%s' \"\n+                \"which is outside the log directory '%s'\",\n+                filename,\n+                decoded_filename,\n+                resolved_path,\n+                log_dir,\n+            )\n+            raise HTTPException(\n+                status_code=status.HTTP_403_FORBIDDEN,\n+                detail=\"Access denied: path outside log directory\",\n+            )\n+\n+        # Additional security check: ensure it's a regular file (not a directory or special file)\n+        if resolved_path.exists() and not resolved_path.is_file():\n+            logger.warning(\n+                \"Attempt to access non-file resource: '%s' (type: %s)\",\n+                resolved_path,\n+                \"directory\" if resolved_path.is_dir() else \"special file\",",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/495)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175465449",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Expired signature\")\n         except InvalidIssuedAtError:\n             logger.warning(\n-                \"The request was issues in the future. Make sure that all components \"\n+                \"The request was issued in the future. Make sure that all components \"\n                 \"in your system have synchronized clocks. \"\n                 \"See more at %s\",\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Token issued in future\")\n         except Exception:\n             logger.warning(\"Unknown error\", exc_info=True)\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Authentication failed\")\n+\n+    fastapi_app = FastAPI(\n+        dependencies=[Depends(validate_jwt_token)],\n+    )\n+\n+    @fastapi_app.get(\"/log/{filename:path}\")\n+    def serve_logs_handler(filename: str):\n+        # Validate the file path for security\n+        file_path = _validate_log_file_path(filename, log_directory)\n+\n+        if not file_path.exists():",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465449",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465449",
        "commented_code": "@@ -119,25 +210,39 @@\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Expired signature\")\n         except InvalidIssuedAtError:\n             logger.warning(\n-                \"The request was issues in the future. Make sure that all components \"\n+                \"The request was issued in the future. Make sure that all components \"\n                 \"in your system have synchronized clocks. \"\n                 \"See more at %s\",\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Token issued in future\")\n         except Exception:\n             logger.warning(\"Unknown error\", exc_info=True)\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Authentication failed\")\n+\n+    fastapi_app = FastAPI(\n+        dependencies=[Depends(validate_jwt_token)],\n+    )\n+\n+    @fastapi_app.get(\"/log/{filename:path}\")\n+    def serve_logs_handler(filename: str):\n+        # Validate the file path for security\n+        file_path = _validate_log_file_path(filename, log_directory)\n+\n+        if not file_path.exists():",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/496)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175465453",
    "pr_number": 52581,
    "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
    "created_at": "2025-06-30T16:23:39+00:00",
    "commented_code": "get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Expired signature\")\n         except InvalidIssuedAtError:\n             logger.warning(\n-                \"The request was issues in the future. Make sure that all components \"\n+                \"The request was issued in the future. Make sure that all components \"\n                 \"in your system have synchronized clocks. \"\n                 \"See more at %s\",\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Token issued in future\")\n         except Exception:\n             logger.warning(\"Unknown error\", exc_info=True)\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Authentication failed\")\n+\n+    fastapi_app = FastAPI(\n+        dependencies=[Depends(validate_jwt_token)],\n+    )\n+\n+    @fastapi_app.get(\"/log/{filename:path}\")\n+    def serve_logs_handler(filename: str):\n+        # Validate the file path for security\n+        file_path = _validate_log_file_path(filename, log_directory)\n+\n+        if not file_path.exists():\n+            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Log file not found\")\n \n-    @flask_app.route(\"/log/<path:filename>\")\n-    def serve_logs_view(filename):\n-        return send_from_directory(log_directory, filename, mimetype=\"application/json\", as_attachment=False)\n+        return FileResponse(\n+            path=file_path,",
    "repo_full_name": "apache/airflow",
    "discussion_comments": [
      {
        "comment_id": "2175465453",
        "repo_full_name": "apache/airflow",
        "pr_number": 52581,
        "pr_file": "airflow-core/src/airflow/utils/serve_logs.py",
        "discussion_id": "2175465453",
        "commented_code": "@@ -119,25 +210,39 @@\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Expired signature\")\n         except InvalidIssuedAtError:\n             logger.warning(\n-                \"The request was issues in the future. Make sure that all components \"\n+                \"The request was issued in the future. Make sure that all components \"\n                 \"in your system have synchronized clocks. \"\n                 \"See more at %s\",\n                 get_docs_url(\"configurations-ref.html#secret-key\"),\n                 exc_info=True,\n             )\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Token issued in future\")\n         except Exception:\n             logger.warning(\"Unknown error\", exc_info=True)\n-            abort(403)\n+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Authentication failed\")\n+\n+    fastapi_app = FastAPI(\n+        dependencies=[Depends(validate_jwt_token)],\n+    )\n+\n+    @fastapi_app.get(\"/log/{filename:path}\")\n+    def serve_logs_handler(filename: str):\n+        # Validate the file path for security\n+        file_path = _validate_log_file_path(filename, log_directory)\n+\n+        if not file_path.exists():\n+            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Log file not found\")\n \n-    @flask_app.route(\"/log/<path:filename>\")\n-    def serve_logs_view(filename):\n-        return send_from_directory(log_directory, filename, mimetype=\"application/json\", as_attachment=False)\n+        return FileResponse(\n+            path=file_path,",
        "comment_created_at": "2025-06-30T16:23:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Uncontrolled data used in path expression\n\nThis path depends on a [user-provided value](1).\n\n[Show more details](https://github.com/apache/airflow/security/code-scanning/497)",
        "pr_file_module": null
      }
    ]
  }
]