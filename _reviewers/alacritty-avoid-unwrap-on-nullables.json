[
  {
    "discussion_id": "1847389567",
    "pr_number": 8312,
    "pr_file": "alacritty/src/macos/locale.rs",
    "created_at": "2024-11-18T22:59:54+00:00",
    "commented_code": "// https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1847389567",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-18T22:59:54+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "This unwrap does not sound right to me. This is deprecated, is there plan to remove it potentially which could cause this to fail? We shouldn't crash here under any circumstances.",
        "pr_file_module": null
      },
      {
        "comment_id": "1848801960",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-19T17:47:21+00:00",
        "comment_author": "madsmtm",
        "comment_body": "The nullability has nothing to do with it being deprecated.\r\n\r\nThis was nullable before, you just weren't handling it (which was potentially UB).",
        "pr_file_module": null
      },
      {
        "comment_id": "1848958545",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-19T19:36:36+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Seems easy enough to handle, so I don't see why we wouldn't. Unwrap's not the right choice.",
        "pr_file_module": null
      },
      {
        "comment_id": "1849405505",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-20T02:14:34+00:00",
        "comment_author": "madsmtm",
        "comment_body": "How do you want me to handle it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1849457121",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-20T03:37:36+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Just falling back to the `else` branch if anything goes wrong is fine, should be the simplest solution. I'd just early return on success probably.",
        "pr_file_module": null
      },
      {
        "comment_id": "1849553427",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-20T05:25:32+00:00",
        "comment_author": "madsmtm",
        "comment_body": "But... The comment above says:\r\n> `localeIdentifier` returns extra metadata with the locale (including currency and collator) on newer versions of macOS. This is not a valid locale, so we use `languageCode` and `countryCode`, if they're available (macOS 10.12+):\r\n\r\nSo we can't fall back to `localeIdentifier` on newer versions of macOS?",
        "pr_file_module": null
      },
      {
        "comment_id": "1849558460",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-20T05:33:00+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "That's a good point. Falling back to en_US.UTF-8 is also fine or whatever you think is a reasonable default. I think the assumption here is this is almost never hit anyway, so we just don't want to crash really. Bugs would be easier to work around for users than crashes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1849564351",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1847389567",
        "commented_code": "@@ -61,38 +58,15 @@ fn system_locale() -> String {\n         // https://developer.apple.com/documentation/foundation/nslocale/1416263-localeidentifier?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643060-countrycode?language=objc\n         // https://developer.apple.com/documentation/foundation/nslocale/1643026-languagecode?language=objc\n-        let is_language_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(languageCode)];\n-        let is_country_code_supported: bool =\n-            msg_send![locale, respondsToSelector: sel!(countryCode)];\n-        let locale_id = if is_language_code_supported && is_country_code_supported {\n-            let language_code: *const Object = msg_send![locale, languageCode];\n-            let language_code_str = nsstring_as_str(language_code).to_owned();\n-            let _: () = msg_send![language_code, release];\n-\n-            let country_code: *const Object = msg_send![locale, countryCode];\n-            let country_code_str = nsstring_as_str(country_code).to_owned();\n-            let _: () = msg_send![country_code, release];\n-\n-            format!(\"{}_{}.UTF-8\", &language_code_str, &country_code_str)\n+        let is_language_code_supported: bool = locale.respondsToSelector(sel!(languageCode));\n+        let is_country_code_supported: bool = locale.respondsToSelector(sel!(countryCode));\n+        if is_language_code_supported && is_country_code_supported {\n+            let language_code = locale.languageCode();\n+            #[allow(deprecated)]\n+            let country_code = locale.countryCode().unwrap();",
        "comment_created_at": "2024-11-20T05:41:19+00:00",
        "comment_author": "madsmtm",
        "comment_body": "I've done that now, then",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849605476",
    "pr_number": 8312,
    "pr_file": "alacritty/src/macos/locale.rs",
    "created_at": "2024-11-20T06:08:10+00:00",
    "commented_code": "if is_language_code_supported && is_country_code_supported {\n             let language_code = locale.languageCode();\n             #[allow(deprecated)]\n-            let country_code = locale.countryCode().unwrap();\n-            format!(\"{}_{}.UTF-8\", language_code, country_code)\n+            if let Some(country_code) = locale.countryCode() {\n+                format!(\"{}_{}.UTF-8\", language_code, country_code)\n+            } else {\n+                // Fall back to en_US in case the country code is not available",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1849605476",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8312,
        "pr_file": "alacritty/src/macos/locale.rs",
        "discussion_id": "1849605476",
        "commented_code": "@@ -63,8 +63,12 @@ fn system_locale() -> String {\n         if is_language_code_supported && is_country_code_supported {\n             let language_code = locale.languageCode();\n             #[allow(deprecated)]\n-            let country_code = locale.countryCode().unwrap();\n-            format!(\"{}_{}.UTF-8\", language_code, country_code)\n+            if let Some(country_code) = locale.countryCode() {\n+                format!(\"{}_{}.UTF-8\", language_code, country_code)\n+            } else {\n+                // Fall back to en_US in case the country code is not available",
        "comment_created_at": "2024-11-20T06:08:10+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "```suggestion\r\n                // Fall back to en_US in case the country code is not available.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1465595903",
    "pr_number": 7658,
    "pr_file": "alacritty/src/input/keyboard.rs",
    "created_at": "2024-01-24T22:05:02+00:00",
    "commented_code": "modifiers\n     }\n }\n+\n+/// Check that the text represents either C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {\n+    let codepoint = text.chars().next().map(u32::from).unwrap_or(0);",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1465595903",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7658,
        "pr_file": "alacritty/src/input/keyboard.rs",
        "discussion_id": "1465595903",
        "commented_code": "@@ -644,3 +642,10 @@ impl From<ModifiersState> for SequenceModifiers {\n         modifiers\n     }\n }\n+\n+/// Check that the text represents either C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {\n+    let codepoint = text.chars().next().map(u32::from).unwrap_or(0);",
        "comment_created_at": "2024-01-24T22:05:02+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "This would mean that an empty string is a c0 or c1 codepoint. Which I'd say is inaccurate.\r\n\r\nI also think that looking at chars/u32s is unnecessary here. Just getting `bytes()` should be fine since no valid unicode character (and `&str` is always valid unicode) can start with a C0/C1 character?",
        "pr_file_module": null
      },
      {
        "comment_id": "1465612766",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7658,
        "pr_file": "alacritty/src/input/keyboard.rs",
        "discussion_id": "1465595903",
        "commented_code": "@@ -644,3 +642,10 @@ impl From<ModifiersState> for SequenceModifiers {\n         modifiers\n     }\n }\n+\n+/// Check that the text represents either C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {\n+    let codepoint = text.chars().next().map(u32::from).unwrap_or(0);",
        "comment_created_at": "2024-01-24T22:23:18+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Yeah, maybe checking for empty should be better on callee side.",
        "pr_file_module": null
      },
      {
        "comment_id": "1465628056",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7658,
        "pr_file": "alacritty/src/input/keyboard.rs",
        "discussion_id": "1465595903",
        "commented_code": "@@ -644,3 +642,10 @@ impl From<ModifiersState> for SequenceModifiers {\n         modifiers\n     }\n }\n+\n+/// Check that the text represents either C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {\n+    let codepoint = text.chars().next().map(u32::from).unwrap_or(0);",
        "comment_created_at": "2024-01-24T22:38:40+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I still can't remove the len check due to compose input, since it could be an actual string in the end of the day.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2061600395",
    "pr_number": 8557,
    "pr_file": "alacritty/src/display/hint.rs",
    "created_at": "2025-04-26T20:27:56+00:00",
    "commented_code": "self.hyperlink.as_ref()\n     }\n \n+    pub fn get_hint_mouse_button(&self) -> MouseButton {\n+        match self.hint.mouse {\n+            None => MouseButton::Left,\n+            Some(c) => c.button.0,\n+        }",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "2061600395",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8557,
        "pr_file": "alacritty/src/display/hint.rs",
        "discussion_id": "2061600395",
        "commented_code": "@@ -225,6 +226,13 @@ impl HintMatch {\n         self.hyperlink.as_ref()\n     }\n \n+    pub fn get_hint_mouse_button(&self) -> MouseButton {\n+        match self.hint.mouse {\n+            None => MouseButton::Left,\n+            Some(c) => c.button.0,\n+        }",
        "comment_created_at": "2025-04-26T20:27:56+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "This should be cleaner as `map_or`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "186247284",
    "pr_number": 1290,
    "pr_file": "src/config.rs",
    "created_at": "2018-05-05T00:44:41+00:00",
    "commented_code": "dimensions: Dimensions,\n \n     /// Pixel padding\n-    #[serde(default=\"default_padding\", deserialize_with = \"deserialize_padding\")]\n-    padding: Delta<u8>,\n+    #[serde(default, deserialize_with = \"deserialize_padding\")]\n+    padding: Padding,\n \n     /// Draw the window with title bar / borders\n     #[serde(default, deserialize_with = \"failure_default\")]\n     decorations: bool,\n }\n \n-fn default_padding() -> Delta<u8> {\n-    Delta { x: 2, y: 2 }\n+fn default_padding() -> Padding {\n+    Padding {\n+        top: default_padding_field(),\n+        right: default_padding_field(),\n+        bottom: default_padding_field(),\n+        left: default_padding_field(),\n+        x: default_padding_field_deprecated(),\n+        y: default_padding_field_deprecated(),\n+    }\n+}\n+\n+fn default_padding_field() -> u8 {\n+    2\n+}\n+\n+fn default_padding_field_deprecated() -> Option<u8> {\n+    None\n }\n \n-fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Delta<u8>, D::Error>\n+fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Padding, D::Error>\n     where D: de::Deserializer<'a>\n {\n-    match Delta::deserialize(deserializer) {\n-        Ok(delta) => Ok(delta),\n+    use ::util::fmt;\n+    match Padding::deserialize(deserializer) {\n+        Ok(mut padding) => {\n+            match padding.x {\n+                Some(x) => {\n+                    padding.left = x;\n+                    padding.right = x;\n+                        eprintln!(\"{}\", fmt::Yellow(\"Config `padding.x` is deprecated. Please use \\\n+                                                    `right|left` instead\"));\n+                },\n+                None => {}\n+            }\n+            match padding.y {\n+                Some(y) => {\n+                    padding.top = y;\n+                    padding.bottom = y;\n+                    eprintln!(\"{}\", fmt::Yellow(\"Config `padding.y` is deprecated. Please use \\\n+                                                `top|bottom` instead\"));\n+                },\n+                None => {}",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "186247284",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 1290,
        "pr_file": "src/config.rs",
        "discussion_id": "186247284",
        "commented_code": "@@ -269,23 +269,59 @@ pub struct WindowConfig {\n     dimensions: Dimensions,\n \n     /// Pixel padding\n-    #[serde(default=\"default_padding\", deserialize_with = \"deserialize_padding\")]\n-    padding: Delta<u8>,\n+    #[serde(default, deserialize_with = \"deserialize_padding\")]\n+    padding: Padding,\n \n     /// Draw the window with title bar / borders\n     #[serde(default, deserialize_with = \"failure_default\")]\n     decorations: bool,\n }\n \n-fn default_padding() -> Delta<u8> {\n-    Delta { x: 2, y: 2 }\n+fn default_padding() -> Padding {\n+    Padding {\n+        top: default_padding_field(),\n+        right: default_padding_field(),\n+        bottom: default_padding_field(),\n+        left: default_padding_field(),\n+        x: default_padding_field_deprecated(),\n+        y: default_padding_field_deprecated(),\n+    }\n+}\n+\n+fn default_padding_field() -> u8 {\n+    2\n+}\n+\n+fn default_padding_field_deprecated() -> Option<u8> {\n+    None\n }\n \n-fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Delta<u8>, D::Error>\n+fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Padding, D::Error>\n     where D: de::Deserializer<'a>\n {\n-    match Delta::deserialize(deserializer) {\n-        Ok(delta) => Ok(delta),\n+    use ::util::fmt;\n+    match Padding::deserialize(deserializer) {\n+        Ok(mut padding) => {\n+            match padding.x {\n+                Some(x) => {\n+                    padding.left = x;\n+                    padding.right = x;\n+                        eprintln!(\"{}\", fmt::Yellow(\"Config `padding.x` is deprecated. Please use \\\n+                                                    `right|left` instead\"));\n+                },\n+                None => {}\n+            }\n+            match padding.y {\n+                Some(y) => {\n+                    padding.top = y;\n+                    padding.bottom = y;\n+                    eprintln!(\"{}\", fmt::Yellow(\"Config `padding.y` is deprecated. Please use \\\n+                                                `top|bottom` instead\"));\n+                },\n+                None => {}",
        "comment_created_at": "2018-05-05T00:44:41+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Instead of doing `match padding.y { Some(y) => { ... }, None => {} }` it would be more ergonomic to use `if let Some(y) => { ... }`. Like this the `None => {}` part which does nothing can just be left out.",
        "pr_file_module": null
      },
      {
        "comment_id": "186253591",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 1290,
        "pr_file": "src/config.rs",
        "discussion_id": "186247284",
        "commented_code": "@@ -269,23 +269,59 @@ pub struct WindowConfig {\n     dimensions: Dimensions,\n \n     /// Pixel padding\n-    #[serde(default=\"default_padding\", deserialize_with = \"deserialize_padding\")]\n-    padding: Delta<u8>,\n+    #[serde(default, deserialize_with = \"deserialize_padding\")]\n+    padding: Padding,\n \n     /// Draw the window with title bar / borders\n     #[serde(default, deserialize_with = \"failure_default\")]\n     decorations: bool,\n }\n \n-fn default_padding() -> Delta<u8> {\n-    Delta { x: 2, y: 2 }\n+fn default_padding() -> Padding {\n+    Padding {\n+        top: default_padding_field(),\n+        right: default_padding_field(),\n+        bottom: default_padding_field(),\n+        left: default_padding_field(),\n+        x: default_padding_field_deprecated(),\n+        y: default_padding_field_deprecated(),\n+    }\n+}\n+\n+fn default_padding_field() -> u8 {\n+    2\n+}\n+\n+fn default_padding_field_deprecated() -> Option<u8> {\n+    None\n }\n \n-fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Delta<u8>, D::Error>\n+fn deserialize_padding<'a, D>(deserializer: D) -> ::std::result::Result<Padding, D::Error>\n     where D: de::Deserializer<'a>\n {\n-    match Delta::deserialize(deserializer) {\n-        Ok(delta) => Ok(delta),\n+    use ::util::fmt;\n+    match Padding::deserialize(deserializer) {\n+        Ok(mut padding) => {\n+            match padding.x {\n+                Some(x) => {\n+                    padding.left = x;\n+                    padding.right = x;\n+                        eprintln!(\"{}\", fmt::Yellow(\"Config `padding.x` is deprecated. Please use \\\n+                                                    `right|left` instead\"));\n+                },\n+                None => {}\n+            }\n+            match padding.y {\n+                Some(y) => {\n+                    padding.top = y;\n+                    padding.bottom = y;\n+                    eprintln!(\"{}\", fmt::Yellow(\"Config `padding.y` is deprecated. Please use \\\n+                                                `top|bottom` instead\"));\n+                },\n+                None => {}",
        "comment_created_at": "2018-05-05T05:54:14+00:00",
        "comment_author": "sodiumjoe",
        "comment_body": "Ah yes that's much nicer. I first tried with `if padding.y.is_some()`, but that involved an `unwrap`, `if let` was exactly what I was looking for, thanks!",
        "pr_file_module": null
      }
    ]
  }
]