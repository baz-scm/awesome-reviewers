[
  {
    "discussion_id": "1825105401",
    "pr_number": 8269,
    "pr_file": "alacritty/src/config/window.rs",
    "created_at": "2024-10-31T20:07:51+00:00",
    "commented_code": "/// System decorations theme variant.\n     decorations_theme_variant: Option<Theme>,\n+\n+    /// Window level.\n+    pub window_level: Option<WindowLevel>,",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1825105401",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8269,
        "pr_file": "alacritty/src/config/window.rs",
        "discussion_id": "1825105401",
        "commented_code": "@@ -61,6 +61,9 @@ pub struct WindowConfig {\n \n     /// System decorations theme variant.\n     decorations_theme_variant: Option<Theme>,\n+\n+    /// Window level.\n+    pub window_level: Option<WindowLevel>,",
        "comment_created_at": "2024-10-31T20:07:51+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "What is the difference between `None` and `WindowLevel::Normal`? Either `WindowLevel::Normal` should be removed, or the option. Otherwise this seems redundant.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1769664203",
    "pr_number": 8192,
    "pr_file": "alacritty/src/config/general.rs",
    "created_at": "2024-09-21T22:19:03+00:00",
    "commented_code": "+//! Miscellaneous configuration options.\n+\n+use std::path::PathBuf;\n+\n+use alacritty_config_derive::ConfigDeserialize;\n+\n+/// General config section.\n+///\n+/// This section is for fields which can not be easily categorized,\n+/// to avoid common TOML issues with root-level fields.\n+#[derive(ConfigDeserialize, Clone, PartialEq, Debug)]\n+pub struct General {\n+    /// Configuration file imports.\n+    ///\n+    /// This is never read since the field is directly accessed through the config's\n+    /// [`toml::Value`], but still present to prevent unused field warnings.\n+    pub import: Vec<String>,\n+\n+    /// Shell startup directory.\n+    pub working_directory: Option<PathBuf>,\n+\n+    /// Live config reload.\n+    pub live_config_reload: bool,\n+\n+    /// Offer IPC through a unix socket.\n+    #[allow(unused)]",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1769664203",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8192,
        "pr_file": "alacritty/src/config/general.rs",
        "discussion_id": "1769664203",
        "commented_code": "@@ -0,0 +1,39 @@\n+//! Miscellaneous configuration options.\n+\n+use std::path::PathBuf;\n+\n+use alacritty_config_derive::ConfigDeserialize;\n+\n+/// General config section.\n+///\n+/// This section is for fields which can not be easily categorized,\n+/// to avoid common TOML issues with root-level fields.\n+#[derive(ConfigDeserialize, Clone, PartialEq, Debug)]\n+pub struct General {\n+    /// Configuration file imports.\n+    ///\n+    /// This is never read since the field is directly accessed through the config's\n+    /// [`toml::Value`], but still present to prevent unused field warnings.\n+    pub import: Vec<String>,\n+\n+    /// Shell startup directory.\n+    pub working_directory: Option<PathBuf>,\n+\n+    /// Live config reload.\n+    pub live_config_reload: bool,\n+\n+    /// Offer IPC through a unix socket.\n+    #[allow(unused)]",
        "comment_created_at": "2024-09-21T22:19:03+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Switched this from `cfg(unix)` to `allow(unused)` because otherwise you'd get warnings on Windows with this in your config. We don't need to change the old one since that will warn for deprecation anyway. Realistically this should have never gotten added with a `cfg` attribute.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1306671763",
    "pr_number": 7176,
    "pr_file": "alacritty_terminal/src/tty/mod.rs",
    "created_at": "2023-08-27T14:07:10+00:00",
    "commented_code": "// Advertise 24-bit color support.\n     env::set_var(\"COLORTERM\", \"truecolor\");\n \n+    // When not on a Windows or macOs system, EGL is preferred over GLX by default. May be\n+    // overridden by user's config below.\n+    env::set_var(\"EGL_OVER_GLX\", \"true\");",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1306671763",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7176,
        "pr_file": "alacritty_terminal/src/tty/mod.rs",
        "discussion_id": "1306671763",
        "commented_code": "@@ -70,6 +70,10 @@ pub fn setup_env(config: &Config) {\n     // Advertise 24-bit color support.\n     env::set_var(\"COLORTERM\", \"truecolor\");\n \n+    // When not on a Windows or macOs system, EGL is preferred over GLX by default. May be\n+    // overridden by user's config below.\n+    env::set_var(\"EGL_OVER_GLX\", \"true\");",
        "comment_created_at": "2023-08-27T14:07:10+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Don't set a variable like that, it's user controllable. So completely remove those lines.",
        "pr_file_module": null
      },
      {
        "comment_id": "1306706024",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7176,
        "pr_file": "alacritty_terminal/src/tty/mod.rs",
        "discussion_id": "1306671763",
        "commented_code": "@@ -70,6 +70,10 @@ pub fn setup_env(config: &Config) {\n     // Advertise 24-bit color support.\n     env::set_var(\"COLORTERM\", \"truecolor\");\n \n+    // When not on a Windows or macOs system, EGL is preferred over GLX by default. May be\n+    // overridden by user's config below.\n+    env::set_var(\"EGL_OVER_GLX\", \"true\");",
        "comment_created_at": "2023-08-27T18:40:03+00:00",
        "comment_author": "RolfSievert",
        "comment_body": "I noticed that the variable stays set even when removed from the config (and restarting), that is why I added this line. Perhaps it requires a restart of the terminal spawning alacritty to reset properly? I'll remove this anyway if you don't see an issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1307356021",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7176,
        "pr_file": "alacritty_terminal/src/tty/mod.rs",
        "discussion_id": "1306671763",
        "commented_code": "@@ -70,6 +70,10 @@ pub fn setup_env(config: &Config) {\n     // Advertise 24-bit color support.\n     env::set_var(\"COLORTERM\", \"truecolor\");\n \n+    // When not on a Windows or macOs system, EGL is preferred over GLX by default. May be\n+    // overridden by user's config below.\n+    env::set_var(\"EGL_OVER_GLX\", \"true\");",
        "comment_created_at": "2023-08-28T12:23:57+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Shouldn't be a thing, but switching to a config option easily solves this too.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1215451963",
    "pr_number": 6673,
    "pr_file": "alacritty_config_derive/src/config_deserialize/de_struct.rs",
    "created_at": "2023-06-03T11:35:05+00:00",
    "commented_code": "{\n                 let mut config = Self::Value::default();\n \n-                // NOTE: This could be used to print unused keys.\n-                let mut unused = serde_yaml::Mapping::new();\n+                // Unused keys for flattening and warning.\n+                let mut unused = toml::Table::new();\n \n-                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                while let Some((key, value)) = map.next_entry::<String, toml::Value>()? {\n                     match key.as_str() {\n                         #match_assignments\n                         _ => {\n-                            unused.insert(serde_yaml::Value::String(key), value);\n+                            unused.insert(key, value);\n                         },\n                     }\n                 }\n \n                 #flatten\n \n+                // Warn about unused keys.\n+                for key in unused.keys() {\n+                    log::warn!(target: #LOG_TARGET, \"Unused config key: {}\", key);",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1215451963",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty_config_derive/src/config_deserialize/de_struct.rs",
        "discussion_id": "1215451963",
        "commented_code": "@@ -42,20 +42,25 @@ pub fn derive_deserialize<T>(\n             {\n                 let mut config = Self::Value::default();\n \n-                // NOTE: This could be used to print unused keys.\n-                let mut unused = serde_yaml::Mapping::new();\n+                // Unused keys for flattening and warning.\n+                let mut unused = toml::Table::new();\n \n-                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                while let Some((key, value)) = map.next_entry::<String, toml::Value>()? {\n                     match key.as_str() {\n                         #match_assignments\n                         _ => {\n-                            unused.insert(serde_yaml::Value::String(key), value);\n+                            unused.insert(key, value);\n                         },\n                     }\n                 }\n \n                 #flatten\n \n+                // Warn about unused keys.\n+                for key in unused.keys() {\n+                    log::warn!(target: #LOG_TARGET, \"Unused config key: {}\", key);",
        "comment_created_at": "2023-06-03T11:35:05+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I actually had a setting for a year which was unused, because I've added it during `dev` and then we changed it at the last second and I forgot about it.\r\n\r\nProbably should add that we warn on unused config keys?",
        "pr_file_module": null
      },
      {
        "comment_id": "1225273980",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty_config_derive/src/config_deserialize/de_struct.rs",
        "discussion_id": "1215451963",
        "commented_code": "@@ -42,20 +42,25 @@ pub fn derive_deserialize<T>(\n             {\n                 let mut config = Self::Value::default();\n \n-                // NOTE: This could be used to print unused keys.\n-                let mut unused = serde_yaml::Mapping::new();\n+                // Unused keys for flattening and warning.\n+                let mut unused = toml::Table::new();\n \n-                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                while let Some((key, value)) = map.next_entry::<String, toml::Value>()? {\n                     match key.as_str() {\n                         #match_assignments\n                         _ => {\n-                            unused.insert(serde_yaml::Value::String(key), value);\n+                            unused.insert(key, value);\n                         },\n                     }\n                 }\n \n                 #flatten\n \n+                // Warn about unused keys.\n+                for key in unused.keys() {\n+                    log::warn!(target: #LOG_TARGET, \"Unused config key: {}\", key);",
        "comment_created_at": "2023-06-10T10:38:06+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Add it where?",
        "pr_file_module": null
      },
      {
        "comment_id": "1225292206",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty_config_derive/src/config_deserialize/de_struct.rs",
        "discussion_id": "1215451963",
        "commented_code": "@@ -42,20 +42,25 @@ pub fn derive_deserialize<T>(\n             {\n                 let mut config = Self::Value::default();\n \n-                // NOTE: This could be used to print unused keys.\n-                let mut unused = serde_yaml::Mapping::new();\n+                // Unused keys for flattening and warning.\n+                let mut unused = toml::Table::new();\n \n-                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                while let Some((key, value)) = map.next_entry::<String, toml::Value>()? {\n                     match key.as_str() {\n                         #match_assignments\n                         _ => {\n-                            unused.insert(serde_yaml::Value::String(key), value);\n+                            unused.insert(key, value);\n                         },\n                     }\n                 }\n \n                 #flatten\n \n+                // Warn about unused keys.\n+                for key in unused.keys() {\n+                    log::warn!(target: #LOG_TARGET, \"Unused config key: {}\", key);",
        "comment_created_at": "2023-06-10T11:10:20+00:00",
        "comment_author": "kchibisov",
        "comment_body": "In the `CHANGELOG`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "909334900",
    "pr_number": 6139,
    "pr_file": "alacritty/src/config/ui_config.rs",
    "created_at": "2022-06-29T08:15:41+00:00",
    "commented_code": "binding: Option<HintBinding>,\n }\n \n+#[derive(Default, Clone, Debug, PartialEq, Eq)]\n+pub struct HintContent {\n+    /// Regex for finding matches.\n+    pub regex: Option<LazyRegex>,\n+\n+    /// Hyperlinks.\n+    pub hyperlinks: bool,\n+}\n+\n+impl HintContent {\n+    pub fn new(regex: Option<LazyRegex>, hyperlinks: bool) -> Self {\n+        Self { regex, hyperlinks }\n+    }\n+}\n+\n+impl<'de> Deserialize<'de> for HintContent {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        struct HintContentVisitor;\n+        impl<'a> Visitor<'a> for HintContentVisitor {\n+            type Value = HintContent;\n+\n+            fn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+                f.write_str(\"a mapping\")\n+            }\n+\n+            fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>\n+            where\n+                M: MapAccess<'a>,\n+            {\n+                let mut content = Self::Value::default();\n+\n+                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                    match key.as_str() {\n+                        \"regex\" => match Option::<LazyRegex>::deserialize(value) {\n+                            Ok(regex) => content.regex = regex,\n+                            Err(err) => {\n+                                error!(\n+                                    target: LOG_TARGET_CONFIG,\n+                                    \"Config error: hint.regex: {}\", err\n+                                );\n+                            },\n+                        },\n+                        \"hyperlinks\" => match bool::deserialize(value) {\n+                            Ok(hyperlink) => content.hyperlinks = hyperlink,\n+                            Err(err) => {\n+                                error!(\n+                                    target: LOG_TARGET_CONFIG,\n+                                    \"Config error: hint.hyperlinks {}\", err\n+                                );\n+                            },\n+                        },\n+                        _ => (),\n+                    }\n+                }\n+\n+                // If the user requested no hyperlink and hasn't provided any regex, error out,\n+                // since at least one of them should be able to trigger hint matches.",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "909334900",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6139,
        "pr_file": "alacritty/src/config/ui_config.rs",
        "discussion_id": "909334900",
        "commented_code": "@@ -349,6 +352,81 @@ pub struct Hint {\n     binding: Option<HintBinding>,\n }\n \n+#[derive(Default, Clone, Debug, PartialEq, Eq)]\n+pub struct HintContent {\n+    /// Regex for finding matches.\n+    pub regex: Option<LazyRegex>,\n+\n+    /// Hyperlinks.\n+    pub hyperlinks: bool,\n+}\n+\n+impl HintContent {\n+    pub fn new(regex: Option<LazyRegex>, hyperlinks: bool) -> Self {\n+        Self { regex, hyperlinks }\n+    }\n+}\n+\n+impl<'de> Deserialize<'de> for HintContent {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        struct HintContentVisitor;\n+        impl<'a> Visitor<'a> for HintContentVisitor {\n+            type Value = HintContent;\n+\n+            fn expecting(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+                f.write_str(\"a mapping\")\n+            }\n+\n+            fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>\n+            where\n+                M: MapAccess<'a>,\n+            {\n+                let mut content = Self::Value::default();\n+\n+                while let Some((key, value)) = map.next_entry::<String, serde_yaml::Value>()? {\n+                    match key.as_str() {\n+                        \"regex\" => match Option::<LazyRegex>::deserialize(value) {\n+                            Ok(regex) => content.regex = regex,\n+                            Err(err) => {\n+                                error!(\n+                                    target: LOG_TARGET_CONFIG,\n+                                    \"Config error: hint.regex: {}\", err\n+                                );\n+                            },\n+                        },\n+                        \"hyperlinks\" => match bool::deserialize(value) {\n+                            Ok(hyperlink) => content.hyperlinks = hyperlink,\n+                            Err(err) => {\n+                                error!(\n+                                    target: LOG_TARGET_CONFIG,\n+                                    \"Config error: hint.hyperlinks {}\", err\n+                                );\n+                            },\n+                        },\n+                        _ => (),\n+                    }\n+                }\n+\n+                // If the user requested no hyperlink and hasn't provided any regex, error out,\n+                // since at least one of them should be able to trigger hint matches.",
        "comment_created_at": "2022-06-29T08:15:41+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "```suggestion\r\n                // Require at least one of hyperlink or regex to trigger hint matches.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]