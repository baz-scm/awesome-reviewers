[
  {
    "discussion_id": "1306671983",
    "pr_number": 7176,
    "pr_file": "alacritty/src/renderer/platform.rs",
    "created_at": "2023-08-27T14:08:22+00:00",
    "commented_code": "/// Create the GL display.\n pub fn create_gl_display(\n     raw_display_handle: RawDisplayHandle,\n-    _raw_window_handle: Option<RawWindowHandle>,\n+    display_api: DisplayApiPreference,\n ) -> GlutinResult<Display> {\n+    let display = unsafe { Display::new(raw_display_handle, display_api)? };\n+    log::info!(\"Using {}\", { display.version_string() });\n+    Ok(display)\n+}\n+\n+pub fn preferred_display_api(_raw_window_handle: Option<RawWindowHandle>) -> DisplayApiPreference {\n     #[cfg(target_os = \"macos\")]\n-    let preference = DisplayApiPreference::Cgl;\n+    return DisplayApiPreference::Cgl;\n \n     #[cfg(windows)]\n-    let preference = DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n+    return DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n \n     #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n-    let preference = DisplayApiPreference::GlxThenEgl(Box::new(x11::register_xlib_error_hook));\n+    {\n+        let egl_over_glx = match env::var(\"EGL_OVER_GLX\") {\n+            Ok(egl) => egl,\n+            Err(_) => panic!(\"Could not find environment variable 'EGL_OVER_GLX'\"),\n+        };",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1306671983",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7176,
        "pr_file": "alacritty/src/renderer/platform.rs",
        "discussion_id": "1306671983",
        "commented_code": "@@ -20,23 +22,36 @@ use winit::platform::x11;\n /// Create the GL display.\n pub fn create_gl_display(\n     raw_display_handle: RawDisplayHandle,\n-    _raw_window_handle: Option<RawWindowHandle>,\n+    display_api: DisplayApiPreference,\n ) -> GlutinResult<Display> {\n+    let display = unsafe { Display::new(raw_display_handle, display_api)? };\n+    log::info!(\"Using {}\", { display.version_string() });\n+    Ok(display)\n+}\n+\n+pub fn preferred_display_api(_raw_window_handle: Option<RawWindowHandle>) -> DisplayApiPreference {\n     #[cfg(target_os = \"macos\")]\n-    let preference = DisplayApiPreference::Cgl;\n+    return DisplayApiPreference::Cgl;\n \n     #[cfg(windows)]\n-    let preference = DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n+    return DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n \n     #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n-    let preference = DisplayApiPreference::GlxThenEgl(Box::new(x11::register_xlib_error_hook));\n+    {\n+        let egl_over_glx = match env::var(\"EGL_OVER_GLX\") {\n+            Ok(egl) => egl,\n+            Err(_) => panic!(\"Could not find environment variable 'EGL_OVER_GLX'\"),\n+        };",
        "comment_created_at": "2023-08-27T14:08:22+00:00",
        "comment_author": "kchibisov",
        "comment_body": "No need to do any sort of panics like that it's just error prone, simply handle good value and use prefer otherwise use standard behavior.\r\n\r\nSo it'll be \r\n```rust\r\nOk(\"1\") => DisplayApiPreference::EglThenGlx(Box::new(x11::register_xlib_error_hook)), // Or wgl\r\n_ => // default\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1307745244",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7176,
        "pr_file": "alacritty/src/renderer/platform.rs",
        "discussion_id": "1306671983",
        "commented_code": "@@ -20,23 +22,36 @@ use winit::platform::x11;\n /// Create the GL display.\n pub fn create_gl_display(\n     raw_display_handle: RawDisplayHandle,\n-    _raw_window_handle: Option<RawWindowHandle>,\n+    display_api: DisplayApiPreference,\n ) -> GlutinResult<Display> {\n+    let display = unsafe { Display::new(raw_display_handle, display_api)? };\n+    log::info!(\"Using {}\", { display.version_string() });\n+    Ok(display)\n+}\n+\n+pub fn preferred_display_api(_raw_window_handle: Option<RawWindowHandle>) -> DisplayApiPreference {\n     #[cfg(target_os = \"macos\")]\n-    let preference = DisplayApiPreference::Cgl;\n+    return DisplayApiPreference::Cgl;\n \n     #[cfg(windows)]\n-    let preference = DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n+    return DisplayApiPreference::Wgl(Some(_raw_window_handle.unwrap()));\n \n     #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n-    let preference = DisplayApiPreference::GlxThenEgl(Box::new(x11::register_xlib_error_hook));\n+    {\n+        let egl_over_glx = match env::var(\"EGL_OVER_GLX\") {\n+            Ok(egl) => egl,\n+            Err(_) => panic!(\"Could not find environment variable 'EGL_OVER_GLX'\"),\n+        };",
        "comment_created_at": "2023-08-28T18:04:09+00:00",
        "comment_author": "RolfSievert",
        "comment_body": "Thanks for the example, see the fix :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1209929748",
    "pr_number": 6673,
    "pr_file": "alacritty/src/migrate.rs",
    "created_at": "2023-05-30T08:37:56+00:00",
    "commented_code": "+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1209929748",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-05-30T08:37:56+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Do we really want to do `process::exit(1)` instead of doing the flow we have with any other command with returning an error? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1210256008",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-05-30T13:14:42+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Seems like the easiest solution to me?",
        "pr_file_module": null
      },
      {
        "comment_id": "1210259526",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-05-30T13:17:22+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I mean, it's a bit weird that we have normal error handling in other sub command and have lazy `eprintln` + `exit` here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1210268403",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-05-30T13:24:10+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Well it's a completely separate execution path.",
        "pr_file_module": null
      },
      {
        "comment_id": "1210295218",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-05-30T13:42:27+00:00",
        "comment_author": "kchibisov",
        "comment_body": "That's true, but the same you could say for `msg`, yet `msg` propagates error, they are being called from the exact same `match` handler in the end.",
        "pr_file_module": null
      },
      {
        "comment_id": "1215453919",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-06-03T11:37:38+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I'd still suggest to be consistent with other subcommands.",
        "pr_file_module": null
      },
      {
        "comment_id": "1225275171",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6673,
        "pr_file": "alacritty/src/migrate.rs",
        "discussion_id": "1209929748",
        "commented_code": "@@ -0,0 +1,130 @@\n+//! Configuration file migration.\n+\n+use std::fs;\n+use std::path::Path;\n+\n+use toml::Value;\n+\n+use crate::cli::MigrateOptions;\n+use crate::config;\n+\n+/// Handle migration.\n+pub fn migrate(options: MigrateOptions) {",
        "comment_created_at": "2023-06-10T10:39:27+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "I want to keep it this way because it gives us more control over the error messages.\r\n\r\nWe're not just trying to print errors and bail here, but instead we're trying to have nice human-readable CLI output.\r\n\r\nThat's why I did it this way, letting Rust's `?` handle error printing is usually worse.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1499818495",
    "pr_number": 7729,
    "pr_file": "alacritty_config_derive/src/serde_replace.rs",
    "created_at": "2024-02-22T19:32:54+00:00",
    "commented_code": "_ => alacritty_config::SerdeReplace::replace(&mut self.#ident, value)?,\n             });\n         } else {\n+            // Extract all `#[config(alias = \"...\")]` attribute values.\n+            let aliases = field\n+                .attrs\n+                .iter()\n+                .filter(|attr| (*attr).path().is_ident(\"config\"))\n+                .filter_map(|attr| attr.parse_args::<Attr>().ok())\n+                .filter(|parsed| parsed.ident.as_str() == \"alias\")\n+                .map(|parsed| {\n+                    let value = parsed\n+                        .param\n+                        .unwrap_or_else(|| panic!(\"Field \\\"{}\\\" has no alias value\", ident))\n+                        .value();\n+\n+                    if value.is_empty() {\n+                        panic!(\"Field \\\"{}\\\" has an empty alias value\", ident);\n+                    }",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1499818495",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7729,
        "pr_file": "alacritty_config_derive/src/serde_replace.rs",
        "discussion_id": "1499818495",
        "commented_code": "@@ -98,9 +99,30 @@ fn match_arms<T>(fields: &Punctuated<Field, T>) -> TokenStream2 {\n                 _ => alacritty_config::SerdeReplace::replace(&mut self.#ident, value)?,\n             });\n         } else {\n+            // Extract all `#[config(alias = \"...\")]` attribute values.\n+            let aliases = field\n+                .attrs\n+                .iter()\n+                .filter(|attr| (*attr).path().is_ident(\"config\"))\n+                .filter_map(|attr| attr.parse_args::<Attr>().ok())\n+                .filter(|parsed| parsed.ident.as_str() == \"alias\")\n+                .map(|parsed| {\n+                    let value = parsed\n+                        .param\n+                        .unwrap_or_else(|| panic!(\"Field \\\"{}\\\" has no alias value\", ident))\n+                        .value();\n+\n+                    if value.is_empty() {\n+                        panic!(\"Field \\\"{}\\\" has an empty alias value\", ident);\n+                    }",
        "comment_created_at": "2024-02-22T19:32:54+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "You should return an error with span information, not panic. See `src/config_deserialize/mod.rs` for reference.",
        "pr_file_module": null
      },
      {
        "comment_id": "1500377369",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7729,
        "pr_file": "alacritty_config_derive/src/serde_replace.rs",
        "discussion_id": "1499818495",
        "commented_code": "@@ -98,9 +99,30 @@ fn match_arms<T>(fields: &Punctuated<Field, T>) -> TokenStream2 {\n                 _ => alacritty_config::SerdeReplace::replace(&mut self.#ident, value)?,\n             });\n         } else {\n+            // Extract all `#[config(alias = \"...\")]` attribute values.\n+            let aliases = field\n+                .attrs\n+                .iter()\n+                .filter(|attr| (*attr).path().is_ident(\"config\"))\n+                .filter_map(|attr| attr.parse_args::<Attr>().ok())\n+                .filter(|parsed| parsed.ident.as_str() == \"alias\")\n+                .map(|parsed| {\n+                    let value = parsed\n+                        .param\n+                        .unwrap_or_else(|| panic!(\"Field \\\"{}\\\" has no alias value\", ident))\n+                        .value();\n+\n+                    if value.is_empty() {\n+                        panic!(\"Field \\\"{}\\\" has an empty alias value\", ident);\n+                    }",
        "comment_created_at": "2024-02-23T09:03:08+00:00",
        "comment_author": "placintaalexandru",
        "comment_body": "Thanks for the comment. I did not know that. \r\n\r\nIn addition I noticed that also the compilation message regarding the usage of multiple `#[config(flatten)]` attributes was not correctly reported: I could've used as many `#[config(flatten)]` inside a struct, but the compilation message was something weird because of the way how `replace_arms` was used directly.",
        "pr_file_module": null
      },
      {
        "comment_id": "1500424730",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7729,
        "pr_file": "alacritty_config_derive/src/serde_replace.rs",
        "discussion_id": "1499818495",
        "commented_code": "@@ -98,9 +99,30 @@ fn match_arms<T>(fields: &Punctuated<Field, T>) -> TokenStream2 {\n                 _ => alacritty_config::SerdeReplace::replace(&mut self.#ident, value)?,\n             });\n         } else {\n+            // Extract all `#[config(alias = \"...\")]` attribute values.\n+            let aliases = field\n+                .attrs\n+                .iter()\n+                .filter(|attr| (*attr).path().is_ident(\"config\"))\n+                .filter_map(|attr| attr.parse_args::<Attr>().ok())\n+                .filter(|parsed| parsed.ident.as_str() == \"alias\")\n+                .map(|parsed| {\n+                    let value = parsed\n+                        .param\n+                        .unwrap_or_else(|| panic!(\"Field \\\"{}\\\" has no alias value\", ident))\n+                        .value();\n+\n+                    if value.is_empty() {\n+                        panic!(\"Field \\\"{}\\\" has an empty alias value\", ident);\n+                    }",
        "comment_created_at": "2024-02-23T09:46:21+00:00",
        "comment_author": "placintaalexandru",
        "comment_body": "The correct compilation messages are reported now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1380933733",
    "pr_number": 7337,
    "pr_file": "alacritty/src/main.rs",
    "created_at": "2023-11-03T00:48:02+00:00",
    "commented_code": "// FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1380933733",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T00:48:02+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "I don't like the idea of sidestepping error handling to cause an explicit panic, doesn't really make sense.\r\n\r\nEspecially not in here, considering there's other places this function could error out from. If anything, our error handling should be consistent?",
        "pr_file_module": null
      },
      {
        "comment_id": "1380951399",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T01:00:34+00:00",
        "comment_author": "kchibisov",
        "comment_body": "there's only one place and it's an event loop builder, but I think message box won't show if you don't build event loop on windows. Not sure about that though.\r\n\r\nIt's also tricky that you need to call it before `FreeConsole`, otherwise you won't log into pty, so I don't see other place you'd through it on windows.\r\n\r\nThe good thing about side stepping panic like that, that it's visible for the users so they can report something at least. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1380953387",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T01:05:54+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "That just sounds like the `FreeConsole` code should be reworked.",
        "pr_file_module": null
      },
      {
        "comment_id": "1381974197",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T16:50:02+00:00",
        "comment_author": "proski",
        "comment_body": "I'm open to suggestions. Ideally, all fatal errors from Alacritty should be reported through GUI on all platforms, as we cannot expect users to run Alacritty from another terminal.",
        "pr_file_module": null
      },
      {
        "comment_id": "1382002902",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T17:19:23+00:00",
        "comment_author": "kchibisov",
        "comment_body": "The fatal error could be due to crash of the event loop, so it's effectively not possible to do so.\r\n\r\nOnly windows always has windows around, but not X11/Wayland, you need to somehow draw that sort of thing. In general, you should send information to crash report service, which is system log, basically, so you'll see crashes inside the `journalctl`, etc, since rust's panic doesn't do that sort of thing.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1382005862",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T17:22:36+00:00",
        "comment_author": "kchibisov",
        "comment_body": "You should run `FreeConsole` from inside the `fn main`, from the `match` there you should get a `let result` and then do the same panic logic there.",
        "pr_file_module": null
      },
      {
        "comment_id": "1382006822",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T17:23:38+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Also, do we really need a `panic`? Can't we call some `Win32` API function with panic message and do a normal return?",
        "pr_file_module": null
      },
      {
        "comment_id": "1382182033",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-03T20:44:13+00:00",
        "comment_author": "proski",
        "comment_body": "I've extracted the message box from the panic handler. The message box is called directly without panic.\r\n\r\nI'm not sure about moving `FreeConsole` to `main`, but I'll give it a try later.",
        "pr_file_module": null
      },
      {
        "comment_id": "1401005558",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7337,
        "pr_file": "alacritty/src/main.rs",
        "discussion_id": "1380933733",
        "commented_code": "@@ -205,7 +205,14 @@ fn alacritty(options: Options) -> Result<(), Box<dyn Error>> {\n     // FIXME patch notify library to have a shutdown method.\n     // config_reloader.join().ok();\n \n-    // Without explicitly detaching the console cmd won't redraw it's prompt.\n+    // Panic on error on Windows, that way the error message is shown in a message box.\n+    // It is done before FreeConsole() so the message appears on the console as well.\n+    #[cfg(windows)]\n+    if let Err(err) = result {\n+        panic!(\"{}\", err);\n+    }",
        "comment_created_at": "2023-11-21T18:29:15+00:00",
        "comment_author": "proski",
        "comment_body": "I've removed the GUI and the top-level code from the PR.",
        "pr_file_module": null
      }
    ]
  }
]