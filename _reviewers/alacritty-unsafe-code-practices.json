[
  {
    "discussion_id": "1343190576",
    "pr_number": 6846,
    "pr_file": "alacritty_terminal/src/tty/mod.rs",
    "created_at": "2023-10-02T21:36:46+00:00",
    "commented_code": "type Reader: io::Read;\n     type Writer: io::Write;\n \n-    fn register(\n-        &mut self,\n-        _: &mio::Poll,\n-        _: &mut dyn Iterator<Item = mio::Token>,\n-        _: mio::Ready,\n-        _: mio::PollOpt,\n-    ) -> io::Result<()>;\n-    fn reregister(&mut self, _: &mio::Poll, _: mio::Ready, _: mio::PollOpt) -> io::Result<()>;\n-    fn deregister(&mut self, _: &mio::Poll) -> io::Result<()>;\n+    /// # Safety\n+    ///\n+    /// The underlying sources must outlive their registration in the `Poller`.\n+    unsafe fn register(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;\n+    fn reregister(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1343190576",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6846,
        "pr_file": "alacritty_terminal/src/tty/mod.rs",
        "discussion_id": "1343190576",
        "commented_code": "@@ -22,20 +25,15 @@ pub trait EventedReadWrite {\n     type Reader: io::Read;\n     type Writer: io::Write;\n \n-    fn register(\n-        &mut self,\n-        _: &mio::Poll,\n-        _: &mut dyn Iterator<Item = mio::Token>,\n-        _: mio::Ready,\n-        _: mio::PollOpt,\n-    ) -> io::Result<()>;\n-    fn reregister(&mut self, _: &mio::Poll, _: mio::Ready, _: mio::PollOpt) -> io::Result<()>;\n-    fn deregister(&mut self, _: &mio::Poll) -> io::Result<()>;\n+    /// # Safety\n+    ///\n+    /// The underlying sources must outlive their registration in the `Poller`.\n+    unsafe fn register(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;\n+    fn reregister(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;",
        "comment_created_at": "2023-10-02T21:36:46+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "I'd assume that reregister has mostly the same properties as register. Is this safety note not also true for reregister?",
        "pr_file_module": null
      },
      {
        "comment_id": "1343304599",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6846,
        "pr_file": "alacritty_terminal/src/tty/mod.rs",
        "discussion_id": "1343190576",
        "commented_code": "@@ -22,20 +25,15 @@ pub trait EventedReadWrite {\n     type Reader: io::Read;\n     type Writer: io::Write;\n \n-    fn register(\n-        &mut self,\n-        _: &mio::Poll,\n-        _: &mut dyn Iterator<Item = mio::Token>,\n-        _: mio::Ready,\n-        _: mio::PollOpt,\n-    ) -> io::Result<()>;\n-    fn reregister(&mut self, _: &mio::Poll, _: mio::Ready, _: mio::PollOpt) -> io::Result<()>;\n-    fn deregister(&mut self, _: &mio::Poll) -> io::Result<()>;\n+    /// # Safety\n+    ///\n+    /// The underlying sources must outlive their registration in the `Poller`.\n+    unsafe fn register(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;\n+    fn reregister(&mut self, _: &Arc<Poller>, _: Event, _: PollMode) -> io::Result<()>;",
        "comment_created_at": "2023-10-03T01:01:56+00:00",
        "comment_author": "notgull",
        "comment_body": "\"register\" clones the raw file descriptor into the `Poller`, which is an unsafe operation. \"reregister\" does not do this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1297558196",
    "pr_number": 7079,
    "pr_file": "alacritty/src/display/window.rs",
    "created_at": "2023-08-17T17:52:53+00:00",
    "commented_code": "&config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1297558196",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-17T17:52:53+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "This really doesn't seem like something Alacritty should be doing by hand. That seems like a rather poor Winit API? Especially as an unsafe interface, that's kinda unacceptable\u2026",
        "pr_file_module": null
      },
      {
        "comment_id": "1297578335",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-17T18:13:36+00:00",
        "comment_author": "kchibisov",
        "comment_body": "You'd be surprised, but we already do that. It's unsafe because it touches env variables, as in mutates the global state. You can't do that transparently, because it's again, global variables and it's all racy.\r\n\r\nFor example if you try to create a window and spawn the process at the same time, winit could implicitly remove the variables, and your process won't activate, so that's why it's all explicit.",
        "pr_file_module": null
      },
      {
        "comment_id": "1300786473",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-22T00:40:44+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "> You'd be surprised, but we already do that. It's unsafe because it touches env variables, as in mutates the global state. You can't do that transparently, because it's again, global variables and it's all racy.\r\n\r\nYou mean without using `std::env`? Also which env is this removed from? If it's Alacritty, can't we do this in Rust?",
        "pr_file_module": null
      },
      {
        "comment_id": "1301974291",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-22T17:29:43+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I mean, the function simply calls `std::env::remove_var` that's all it does and that's the reason it's unsafe, because it removes the `env` which you could use for launching, so you should take care. Nothing will really break or you can't lead to undefined state, it's just global state mutation basically, which is fine in application code, but I think is unsafe in library code, because it could remove a state set by application.",
        "pr_file_module": null
      },
      {
        "comment_id": "1303633807",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-23T23:21:39+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "> I mean, the function simply calls std::env::remove_var that's all it does and that's the reason it's unsafe, because it removes the env which you could use for launching, so you should take care.\r\n\r\nHow is that unsafe?",
        "pr_file_module": null
      },
      {
        "comment_id": "1303690171",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-24T01:29:10+00:00",
        "comment_author": "kchibisov",
        "comment_body": "mutates a global state. The variables may change over time. I don't understand what's wrong with adding `unsafe` on a function you where you should at least read what it does before using. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1304944602",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-24T22:47:20+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Mutating global state that is behind a lock is not unsafe\u2026\r\n\r\nThat's just not how this works.",
        "pr_file_module": null
      },
      {
        "comment_id": "1304948104",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-24T22:54:09+00:00",
        "comment_author": "kchibisov",
        "comment_body": "The issue is that it's not like the mutation itself is unsafe, it's just that if you spawn a process using those variables from thread `A` and then try to remove them on thread `B`, you could simply remove them for `A` and it won't start up notify anything, because the tokens were simply removed.\r\n\r\nSo the extra care should be taken and set and extra synchronization on top of that should be used.",
        "pr_file_module": null
      },
      {
        "comment_id": "1304948485",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-24T22:54:51+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Like it won't break anything or result in UB, it just you could have sometimes things launched with the wrong env, if you don't add extra `Mutex` to sync threads here, thus it was decided to have it unsafe in winit.",
        "pr_file_module": null
      },
      {
        "comment_id": "1304962689",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-24T23:25:43+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Yeah that's not how the unsafe keyword is supposed to be used.",
        "pr_file_module": null
      },
      {
        "comment_id": "1304988702",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-25T00:13:01+00:00",
        "comment_author": "kchibisov",
        "comment_body": "```\r\nThe unsafe keyword has two uses:\r\n\r\n    to declare the existence of contracts the compiler can\u2019t check (unsafe fn and unsafe trait),\r\n    and to declare that a programmer has checked that these contracts have been upheld (unsafe {} and unsafe impl, but also unsafe fn \u2013 see below).\r\n```\r\n\r\nSo it clearly a contract which compiler can't check.",
        "pr_file_module": null
      },
      {
        "comment_id": "1310994681",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7079,
        "pr_file": "alacritty/src/display/window.rs",
        "discussion_id": "1297558196",
        "commented_code": "@@ -145,13 +143,25 @@ impl Window {\n             &config.window,\n             #[cfg(all(feature = \"x11\", not(any(target_os = \"macos\", windows))))]\n             x11_visual,\n+            #[cfg(target_os = \"macos\")]\n+            tabbing_id,\n         );\n \n         if let Some(position) = config.window.position {\n             window_builder = window_builder\n                 .with_position(PhysicalPosition::<i32>::from((position.x, position.y)));\n         }\n \n+        #[cfg(not(any(target_os = \"macos\", windows)))]\n+        if let Some(token) = event_loop.read_token_from_env() {\n+            log::debug!(\"Activating window with token: {token:?}\");\n+            window_builder = window_builder.with_activation_token(token);\n+            // Remove the token from the env.\n+            unsafe {\n+                startup_notify::reset_activation_token_env();\n+            }",
        "comment_created_at": "2023-08-31T01:18:33+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "There are no safety-relevant contracts that could be violated here.",
        "pr_file_module": null
      }
    ]
  }
]