[
  {
    "discussion_id": "2202006359",
    "pr_number": 8622,
    "pr_file": "alacritty_terminal/src/grid/mod.rs",
    "created_at": "2025-07-11T22:37:39+00:00",
    "commented_code": "match self.point {\n             Point { column, .. } if column == self.grid.last_column() => {\n                 self.point.column = Column(0);\n-                self.point.line += 1;\n+                self.point.line += Line(1);\n             },\n             _ => self.point.column += Column(1),\n         }\n \n         Some(Indexed { cell: &self.grid[self.point], point: self.point })\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        if self.point >= self.end {\n+            return (0, Some(0));\n+        }\n+\n+        let size = if self.point.line == self.end.line {\n+            self.end.column.saturating_sub(self.point.column.0)\n+        } else {\n+            let first_line = self.grid.columns.saturating_sub(self.point.column.0);",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "2202006359",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8622,
        "pr_file": "alacritty_terminal/src/grid/mod.rs",
        "discussion_id": "2202006359",
        "commented_code": "@@ -601,13 +601,34 @@ impl<'a, T> Iterator for GridIterator<'a, T> {\n         match self.point {\n             Point { column, .. } if column == self.grid.last_column() => {\n                 self.point.column = Column(0);\n-                self.point.line += 1;\n+                self.point.line += Line(1);\n             },\n             _ => self.point.column += Column(1),\n         }\n \n         Some(Indexed { cell: &self.grid[self.point], point: self.point })\n     }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        if self.point >= self.end {\n+            return (0, Some(0));\n+        }\n+\n+        let size = if self.point.line == self.end.line {\n+            self.end.column.saturating_sub(self.point.column.0)\n+        } else {\n+            let first_line = self.grid.columns.saturating_sub(self.point.column.0);",
        "comment_created_at": "2025-07-11T22:37:39+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "The variable name is confusing, since you're storing a column count not a line number.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1826771500",
    "pr_number": 8269,
    "pr_file": "alacritty/src/config/window.rs",
    "created_at": "2024-11-02T20:20:21+00:00",
    "commented_code": "/// System decorations theme variant.\n     decorations_theme_variant: Option<Theme>,\n+\n+    /// Window level.\n+    pub window_level: WindowLevel,",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1826771500",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 8269,
        "pr_file": "alacritty/src/config/window.rs",
        "discussion_id": "1826771500",
        "commented_code": "@@ -61,6 +61,9 @@ pub struct WindowConfig {\n \n     /// System decorations theme variant.\n     decorations_theme_variant: Option<Theme>,\n+\n+    /// Window level.\n+    pub window_level: WindowLevel,",
        "comment_created_at": "2024-11-02T20:20:21+00:00",
        "comment_author": "kchibisov",
        "comment_body": "This should be called just `level`, since it's in `window` section already.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1589669785",
    "pr_number": 7935,
    "pr_file": "alacritty/src/logging.rs",
    "created_at": "2024-05-03T19:51:35+00:00",
    "commented_code": "/// Logging target for config error messages.\n pub const LOG_TARGET_CONFIG: &str = \"alacritty_config_derive\";\n \n+/// Logging target for winit events.\n+pub const LOG_TARGET_WINIT: &str = \"winit\";",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1589669785",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7935,
        "pr_file": "alacritty/src/logging.rs",
        "discussion_id": "1589669785",
        "commented_code": "@@ -28,6 +28,9 @@ const ALACRITTY_LOG_ENV: &str = \"ALACRITTY_LOG\";\n /// Logging target for config error messages.\n pub const LOG_TARGET_CONFIG: &str = \"alacritty_config_derive\";\n \n+/// Logging target for winit events.\n+pub const LOG_TARGET_WINIT: &str = \"winit\";",
        "comment_created_at": "2024-05-03T19:51:35+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "How frequently does winit log? I could see this easily going out of control.",
        "pr_file_module": null
      },
      {
        "comment_id": "1589680924",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7935,
        "pr_file": "alacritty/src/logging.rs",
        "discussion_id": "1589669785",
        "commented_code": "@@ -28,6 +28,9 @@ const ALACRITTY_LOG_ENV: &str = \"ALACRITTY_LOG\";\n /// Logging target for config error messages.\n pub const LOG_TARGET_CONFIG: &str = \"alacritty_config_derive\";\n \n+/// Logging target for winit events.\n+pub const LOG_TARGET_WINIT: &str = \"winit\";",
        "comment_created_at": "2024-05-03T20:06:28+00:00",
        "comment_author": "kchibisov",
        "comment_body": "I could name it `winit_event`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1589781655",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7935,
        "pr_file": "alacritty/src/logging.rs",
        "discussion_id": "1589669785",
        "commented_code": "@@ -28,6 +28,9 @@ const ALACRITTY_LOG_ENV: &str = \"ALACRITTY_LOG\";\n /// Logging target for config error messages.\n pub const LOG_TARGET_CONFIG: &str = \"alacritty_config_derive\";\n \n+/// Logging target for winit events.\n+pub const LOG_TARGET_WINIT: &str = \"winit\";",
        "comment_created_at": "2024-05-03T22:40:05+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Could go for `alacritty_winit_event` just to be precise that this isn't actually logged from winit?\r\n\r\nThere's zero reason to be brief here, since it's always used through the constant anyway.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1465795896",
    "pr_number": 7658,
    "pr_file": "alacritty/src/input/keyboard.rs",
    "created_at": "2024-01-25T03:24:51+00:00",
    "commented_code": "modifiers\n     }\n }\n+\n+/// Check whether the text represents a C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1465795896",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7658,
        "pr_file": "alacritty/src/input/keyboard.rs",
        "discussion_id": "1465795896",
        "commented_code": "@@ -644,3 +643,11 @@ impl From<ModifiersState> for SequenceModifiers {\n         modifiers\n     }\n }\n+\n+/// Check whether the text represents a C0 or C1 codepoint.\n+fn is_c0c1_codepoint(text: &str) -> bool {",
        "comment_created_at": "2024-01-25T03:24:51+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Might want to change the name because of `0x7f`? Maybe just `is_control_character` with a comment which specific control characters this function detects?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1439238255",
    "pr_number": 7534,
    "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
    "created_at": "2024-01-02T08:34:54+00:00",
    "commented_code": "// Fourth quadrant.\n             canvas.draw_rect(x_center, y_center, w_fourth, h_fourth, COLOR_FILL);\n         },\n+        // Sextants: '\ud83e\udf00', '\ud83e\udf01', '\ud83e\udf02', '\ud83e\udf03', '\ud83e\udf04', '\ud83e\udf05', '\ud83e\udf06', '\ud83e\udf07', '\ud83e\udf08', '\ud83e\udf09', '\ud83e\udf0a', '\ud83e\udf0b', '\ud83e\udf0c', '\ud83e\udf0d', '\ud83e\udf0e',\n+        // '\ud83e\udf0f', '\ud83e\udf10', '\ud83e\udf11', '\ud83e\udf12', '\ud83e\udf13', '\ud83e\udf14', '\ud83e\udf15', '\ud83e\udf16', '\ud83e\udf17', '\ud83e\udf18', '\ud83e\udf19', '\ud83e\udf1a', '\ud83e\udf1b', '\ud83e\udf1c', '\ud83e\udf1d', '\ud83e\udf1e', '\ud83e\udf1f',\n+        // '\ud83e\udf20', '\ud83e\udf21', '\ud83e\udf22', '\ud83e\udf23', '\ud83e\udf24', '\ud83e\udf25', '\ud83e\udf26', '\ud83e\udf27', '\ud83e\udf28', '\ud83e\udf29', '\ud83e\udf2a', '\ud83e\udf2b', '\ud83e\udf2c', '\ud83e\udf2d', '\ud83e\udf2e', '\ud83e\udf2f', '\ud83e\udf30',\n+        // '\ud83e\udf31', '\ud83e\udf32', '\ud83e\udf33', '\ud83e\udf34', '\ud83e\udf35', '\ud83e\udf36', '\ud83e\udf37', '\ud83e\udf38', '\ud83e\udf39', '\ud83e\udf3a', '\ud83e\udf3b'.\n+        '\\u{1fb00}'..='\\u{1fb3b}' => {\n+            let x_center = canvas.x_center().round().max(1.);\n+            let y_third = (height as f32 / 3.).round().max(1.);\n+            let y_last_third = height as f32 - 2. * y_third;\n+\n+            let (w_1, h_1) = match character {",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1439238255",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7534,
        "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
        "discussion_id": "1439238255",
        "commented_code": "@@ -487,6 +489,89 @@ fn box_drawing(character: char, metrics: &Metrics, offset: &Delta<i8>) -> Raster\n             // Fourth quadrant.\n             canvas.draw_rect(x_center, y_center, w_fourth, h_fourth, COLOR_FILL);\n         },\n+        // Sextants: '\ud83e\udf00', '\ud83e\udf01', '\ud83e\udf02', '\ud83e\udf03', '\ud83e\udf04', '\ud83e\udf05', '\ud83e\udf06', '\ud83e\udf07', '\ud83e\udf08', '\ud83e\udf09', '\ud83e\udf0a', '\ud83e\udf0b', '\ud83e\udf0c', '\ud83e\udf0d', '\ud83e\udf0e',\n+        // '\ud83e\udf0f', '\ud83e\udf10', '\ud83e\udf11', '\ud83e\udf12', '\ud83e\udf13', '\ud83e\udf14', '\ud83e\udf15', '\ud83e\udf16', '\ud83e\udf17', '\ud83e\udf18', '\ud83e\udf19', '\ud83e\udf1a', '\ud83e\udf1b', '\ud83e\udf1c', '\ud83e\udf1d', '\ud83e\udf1e', '\ud83e\udf1f',\n+        // '\ud83e\udf20', '\ud83e\udf21', '\ud83e\udf22', '\ud83e\udf23', '\ud83e\udf24', '\ud83e\udf25', '\ud83e\udf26', '\ud83e\udf27', '\ud83e\udf28', '\ud83e\udf29', '\ud83e\udf2a', '\ud83e\udf2b', '\ud83e\udf2c', '\ud83e\udf2d', '\ud83e\udf2e', '\ud83e\udf2f', '\ud83e\udf30',\n+        // '\ud83e\udf31', '\ud83e\udf32', '\ud83e\udf33', '\ud83e\udf34', '\ud83e\udf35', '\ud83e\udf36', '\ud83e\udf37', '\ud83e\udf38', '\ud83e\udf39', '\ud83e\udf3a', '\ud83e\udf3b'.\n+        '\\u{1fb00}'..='\\u{1fb3b}' => {\n+            let x_center = canvas.x_center().round().max(1.);\n+            let y_third = (height as f32 / 3.).round().max(1.);\n+            let y_last_third = height as f32 - 2. * y_third;\n+\n+            let (w_1, h_1) = match character {",
        "comment_created_at": "2024-01-02T08:34:54+00:00",
        "comment_author": "kchibisov",
        "comment_body": "Could you name the variables based on the location in the shape, like `top-left`, `top-right`, `mid-left`, etc?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437965707",
    "pr_number": 7489,
    "pr_file": "alacritty_terminal/src/event_loop.rs",
    "created_at": "2023-12-29T03:27:53+00:00",
    "commented_code": "return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),\n+        }\n+    }\n+}\n+\n+impl std::error::Error for EventLoopSendError {\n+    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n+        match self {\n+            EventLoopSendError::Io(x) => Some(x),\n+            EventLoopSendError::Send(x) => Some(x),",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1437965707",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7489,
        "pr_file": "alacritty_terminal/src/event_loop.rs",
        "discussion_id": "1437965707",
        "commented_code": "@@ -339,13 +340,37 @@ impl event::Notify for Notifier {\n             return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),\n+        }\n+    }\n+}\n+\n+impl std::error::Error for EventLoopSendError {\n+    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n+        match self {\n+            EventLoopSendError::Io(x) => Some(x),\n+            EventLoopSendError::Send(x) => Some(x),",
        "comment_created_at": "2023-12-29T03:27:53+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "`x` is not a good variable name.",
        "pr_file_module": null
      },
      {
        "comment_id": "1438066702",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7489,
        "pr_file": "alacritty_terminal/src/event_loop.rs",
        "discussion_id": "1437965707",
        "commented_code": "@@ -339,13 +340,37 @@ impl event::Notify for Notifier {\n             return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),\n+        }\n+    }\n+}\n+\n+impl std::error::Error for EventLoopSendError {\n+    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {\n+        match self {\n+            EventLoopSendError::Io(x) => Some(x),\n+            EventLoopSendError::Send(x) => Some(x),",
        "comment_created_at": "2023-12-29T07:22:17+00:00",
        "comment_author": "HyperHamster",
        "comment_body": "Renamed to `err` to conform with other `std::error::Error` `impl`s in the project.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437965805",
    "pr_number": 7489,
    "pr_file": "alacritty_terminal/src/event_loop.rs",
    "created_at": "2023-12-29T03:28:20+00:00",
    "commented_code": "return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1437965805",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7489,
        "pr_file": "alacritty_terminal/src/event_loop.rs",
        "discussion_id": "1437965805",
        "commented_code": "@@ -339,13 +340,37 @@ impl event::Notify for Notifier {\n             return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),",
        "comment_created_at": "2023-12-29T03:28:20+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "`x` is not a good variable name.",
        "pr_file_module": null
      },
      {
        "comment_id": "1438067037",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7489,
        "pr_file": "alacritty_terminal/src/event_loop.rs",
        "discussion_id": "1437965805",
        "commented_code": "@@ -339,13 +340,37 @@ impl event::Notify for Notifier {\n             return;\n         }\n \n-        self.0.send(Msg::Input(bytes));\n+        let _ = self.0.send(Msg::Input(bytes));\n     }\n }\n \n impl event::OnResize for Notifier {\n     fn on_resize(&mut self, window_size: WindowSize) {\n-        self.0.send(Msg::Resize(window_size));\n+        let _ = self.0.send(Msg::Resize(window_size));\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum EventLoopSendError {\n+    Io(io::Error),\n+    Send(mpsc::SendError<Msg>),\n+}\n+\n+impl Display for EventLoopSendError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            EventLoopSendError::Io(x) => x.fmt(f),\n+            EventLoopSendError::Send(x) => x.fmt(f),",
        "comment_created_at": "2023-12-29T07:23:27+00:00",
        "comment_author": "HyperHamster",
        "comment_body": "Renamed to `err` to conform with other `std::fmt::Display` `impl`s in the project.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1359078739",
    "pr_number": 7125,
    "pr_file": "alacritty/src/input.rs",
    "created_at": "2023-10-14T02:52:24+00:00",
    "commented_code": "}\n \n         // Vi mode on its own doesn't have any input, the search input was done before.\n-        if self.ctx.terminal().mode().contains(TermMode::VI) || text.is_empty() {\n+        if mode.contains(TermMode::VI) {\n             return;\n         }\n \n-        self.ctx.on_terminal_input_start();\n+        // We use normal input when we have associated text with the given key and we have one\n+        // of the following situations:\n+        //\n+        // 1. No keyboard input protocol is enabled.\n+        // 2. TermMode is KEYBOARD_DISAMBIGUATE_ESC_CODES, but we have text + empty or Shift\n+        //    modifiers and the location of the key is not on the numpad, and it's not an `Esc`.",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1359078739",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7125,
        "pr_file": "alacritty/src/input.rs",
        "discussion_id": "1359078739",
        "commented_code": "@@ -1039,19 +1065,44 @@ impl<T: EventListener, A: ActionContext<T>> Processor<T, A> {\n         }\n \n         // Vi mode on its own doesn't have any input, the search input was done before.\n-        if self.ctx.terminal().mode().contains(TermMode::VI) || text.is_empty() {\n+        if mode.contains(TermMode::VI) {\n             return;\n         }\n \n-        self.ctx.on_terminal_input_start();\n+        // We use normal input when we have associated text with the given key and we have one\n+        // of the following situations:\n+        //\n+        // 1. No keyboard input protocol is enabled.\n+        // 2. TermMode is KEYBOARD_DISAMBIGUATE_ESC_CODES, but we have text + empty or Shift\n+        //    modifiers and the location of the key is not on the numpad, and it's not an `Esc`.",
        "comment_created_at": "2023-10-14T02:52:24+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "\"normal\" is a bad variable name because there's no reference for what is normal about it.\r\n\r\nIt would probably be easier to name this variable if it is inverted.\r\n\r\nThe comment size can also probably be reduced by replacing the list with an unnumbered one and removing the extra whitespace.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1396570877",
    "pr_number": 7362,
    "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
    "created_at": "2023-11-17T01:34:19+00:00",
    "commented_code": "fn powerline_drawing(character: char, metrics: &Metrics, offset: &Delta<i8>) -> RasterizedGlyph {\n     let height = (metrics.line_height as i32 + offset.y as i32) as usize;\n     let width = (metrics.average_advance as i32 + offset.x as i32) as usize;\n-    // Use one eight of the cell width, since this is used as a step size for block elements.\n-    let stroke_size = cmp::max((width as f32 / 8.).round() as usize, 1) as f32;\n+    let extra_thickness = calculate_stroke_size(width) as i32 - 1;\n \n     let mut canvas = Canvas::new(width, height);\n \n-    let y_center = (height - 1) as f32 / 2.;\n-    // Start with offset `1` and draw until the intersection of the f(x) = x + 1 and\n-    // g(x) = H - x + 1 lines. The intersection happens when f(x) = g(x), which is at\n-    // x = H/2 (`y_center`).\n-    let from_y = 1;\n-    let x_end = y_center.floor();\n-    let y_end = (height - from_y - 1) as f32;\n-\n-    // Pick the start point outside of the canvas to even-out the start.\n-    let from_x = 0.;\n-    let to_x = x_end;\n-    canvas.draw_line_grid(from_x, from_y as f32, to_x, y_center.floor());\n-    canvas.draw_line_grid(from_x, y_end, to_x, y_center.ceil());\n-\n-    // For regular arrows we handle thickness by drawing 2 angle arrows and then just filling\n-    // the contents between them.\n-    if (character == '\\u{e0b1}' || character == '\\u{e0b3}') && stroke_size > 1. {\n-        // The default line is of stroke size 1, so the 0.5 is computed by subtracting 1 from\n-        // stroke_size and then adding 0.5 to to put the target in the center of the cell.\n-        let to_x = x_end - stroke_size;\n-        canvas.draw_line_grid(from_x, from_y as f32 + stroke_size, to_x, y_center.floor());\n-        canvas.draw_line_grid(from_x, y_end - stroke_size, to_x, y_center.ceil());\n-    }\n+    let slope = 1;\n+    let f_y0 = 1;\n+    let g_y0 = height as i32 - f_y0 - 1;\n \n-    let buffer = canvas.buffer_mut();\n-    if character == '\\u{e0b0}' || character == '\\u{e0b2}' {\n-        for row in from_y..height - from_y {\n-            let row_offset = row * width;\n-            for index in 1..width {\n-                let index = row_offset + index;\n-                if buffer[index - 1]._r > buffer[index]._r && buffer[index]._r == 0 {\n-                    break;\n-                }\n-\n-                buffer[index - 1] = COLOR_FILL;\n-            }\n-        }\n-    } else if stroke_size > 1. {\n-        // Find the bottom/top most points of extra line we draw, so we can properly set the\n-        // `start`.\n-\n-        let mut y1 = 0;\n-        for row in (0..height / 2).rev() {\n-            if buffer[row * width]._r != 0 {\n-                y1 = row;\n-                break;\n-            }\n-        }\n-        let mut y2 = height / 2;\n-        for row in height / 2..height {\n-            if buffer[row * width]._r != 0 {\n-                y2 = row;\n+    // Start with offset `1` and draw until the intersection of the f(x) = x + 1 and\n+    // g(x) = H - x - 1 lines. The intersection happens when f(x) = g(x), which is at\n+    // x = H/2 - 1.\n+    let intersection = (height as i32 + 1) / 2 - 1;\n+\n+    let f_x = LineEquation::new(slope, f_y0, 0, intersection);\n+    let g_x = LineEquation::new(-slope, g_y0, 0, intersection);",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1396570877",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7362,
        "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
        "discussion_id": "1396570877",
        "commented_code": "@@ -500,106 +506,50 @@ fn box_drawing(character: char, metrics: &Metrics, offset: &Delta<i8>) -> Raster\n fn powerline_drawing(character: char, metrics: &Metrics, offset: &Delta<i8>) -> RasterizedGlyph {\n     let height = (metrics.line_height as i32 + offset.y as i32) as usize;\n     let width = (metrics.average_advance as i32 + offset.x as i32) as usize;\n-    // Use one eight of the cell width, since this is used as a step size for block elements.\n-    let stroke_size = cmp::max((width as f32 / 8.).round() as usize, 1) as f32;\n+    let extra_thickness = calculate_stroke_size(width) as i32 - 1;\n \n     let mut canvas = Canvas::new(width, height);\n \n-    let y_center = (height - 1) as f32 / 2.;\n-    // Start with offset `1` and draw until the intersection of the f(x) = x + 1 and\n-    // g(x) = H - x + 1 lines. The intersection happens when f(x) = g(x), which is at\n-    // x = H/2 (`y_center`).\n-    let from_y = 1;\n-    let x_end = y_center.floor();\n-    let y_end = (height - from_y - 1) as f32;\n-\n-    // Pick the start point outside of the canvas to even-out the start.\n-    let from_x = 0.;\n-    let to_x = x_end;\n-    canvas.draw_line_grid(from_x, from_y as f32, to_x, y_center.floor());\n-    canvas.draw_line_grid(from_x, y_end, to_x, y_center.ceil());\n-\n-    // For regular arrows we handle thickness by drawing 2 angle arrows and then just filling\n-    // the contents between them.\n-    if (character == '\\u{e0b1}' || character == '\\u{e0b3}') && stroke_size > 1. {\n-        // The default line is of stroke size 1, so the 0.5 is computed by subtracting 1 from\n-        // stroke_size and then adding 0.5 to to put the target in the center of the cell.\n-        let to_x = x_end - stroke_size;\n-        canvas.draw_line_grid(from_x, from_y as f32 + stroke_size, to_x, y_center.floor());\n-        canvas.draw_line_grid(from_x, y_end - stroke_size, to_x, y_center.ceil());\n-    }\n+    let slope = 1;\n+    let f_y0 = 1;\n+    let g_y0 = height as i32 - f_y0 - 1;\n \n-    let buffer = canvas.buffer_mut();\n-    if character == '\\u{e0b0}' || character == '\\u{e0b2}' {\n-        for row in from_y..height - from_y {\n-            let row_offset = row * width;\n-            for index in 1..width {\n-                let index = row_offset + index;\n-                if buffer[index - 1]._r > buffer[index]._r && buffer[index]._r == 0 {\n-                    break;\n-                }\n-\n-                buffer[index - 1] = COLOR_FILL;\n-            }\n-        }\n-    } else if stroke_size > 1. {\n-        // Find the bottom/top most points of extra line we draw, so we can properly set the\n-        // `start`.\n-\n-        let mut y1 = 0;\n-        for row in (0..height / 2).rev() {\n-            if buffer[row * width]._r != 0 {\n-                y1 = row;\n-                break;\n-            }\n-        }\n-        let mut y2 = height / 2;\n-        for row in height / 2..height {\n-            if buffer[row * width]._r != 0 {\n-                y2 = row;\n+    // Start with offset `1` and draw until the intersection of the f(x) = x + 1 and\n+    // g(x) = H - x - 1 lines. The intersection happens when f(x) = g(x), which is at\n+    // x = H/2 - 1.\n+    let intersection = (height as i32 + 1) / 2 - 1;\n+\n+    let f_x = LineEquation::new(slope, f_y0, 0, intersection);\n+    let g_x = LineEquation::new(-slope, g_y0, 0, intersection);",
        "comment_created_at": "2023-11-17T01:34:19+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Honestly thinking about it `f_x` and `g_x` are pretty terrible names. Would be much easier to understand all of this by just naming them after what they actually are. Something like `top_line` and `bottom_line` maybe.\r\n\r\nThe whole `_x` thing is just confusing because it's basically referring to a variable that isn't actually passed to the line function (we just call `.next()`). It makes sense mathematically but the concept just doesn't translate.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1396572590",
    "pr_number": 7362,
    "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
    "created_at": "2023-11-17T01:38:08+00:00",
    "commented_code": "}\n }\n \n+/// Size of the stroke to use.\n+fn calculate_stroke_size(width: usize) -> usize {\n+    // Use one eight of the cell width, since this is used as a step size for block elements.\n+    cmp::max((width as f32 / 8.).round() as usize, 1)\n+}\n+\n+/// Equation for `f(x) = slope * x + offset.\n+struct LineEquation {",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1396572590",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7362,
        "pr_file": "alacritty/src/renderer/text/builtin_font.rs",
        "discussion_id": "1396572590",
        "commented_code": "@@ -960,6 +883,39 @@ impl Canvas {\n     }\n }\n \n+/// Size of the stroke to use.\n+fn calculate_stroke_size(width: usize) -> usize {\n+    // Use one eight of the cell width, since this is used as a step size for block elements.\n+    cmp::max((width as f32 / 8.).round() as usize, 1)\n+}\n+\n+/// Equation for `f(x) = slope * x + offset.\n+struct LineEquation {",
        "comment_created_at": "2023-11-17T01:38:08+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "This is a bad name. It's not an equation it's an iterator. An equation would map to a function in programming so it would just be `fn f(x: i32) -> i32` or whatever.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1387434450",
    "pr_number": 7329,
    "pr_file": "alacritty/src/config/bindings.rs",
    "created_at": "2023-11-09T03:09:30+00:00",
    "commented_code": "}\n }\n \n+#[derive(SerdeReplace, Debug, Copy, Clone, Eq, PartialEq)]\n+pub struct ViMotionWrapper(ViMotion);",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1387434450",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7329,
        "pr_file": "alacritty/src/config/bindings.rs",
        "discussion_id": "1387434450",
        "commented_code": "@@ -1213,6 +1214,21 @@ impl<'a> Deserialize<'a> for KeyBinding {\n     }\n }\n \n+#[derive(SerdeReplace, Debug, Copy, Clone, Eq, PartialEq)]\n+pub struct ViMotionWrapper(ViMotion);",
        "comment_created_at": "2023-11-09T03:09:30+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Not really a fan of naming a variable after what it is, rather than *why* it is.\r\n\r\nCalling it just `ViMotion` would be fine. If you wanted to change the name a more descriptive one would be `SerdeViMotion` which communicates *why* it is wrapped.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1296516623",
    "pr_number": 7149,
    "pr_file": "alacritty/src/config/window.rs",
    "created_at": "2023-08-16T23:00:07+00:00",
    "commented_code": "pub fn maximized(&self) -> bool {\n         self.startup_mode == StartupMode::Maximized\n     }\n+\n+    #[cfg(target_os = \"macos\")]\n+    pub fn option_as_alt(&self) -> winit::platform::macos::OptionAsAlt {\n+        match self.option_as_alt {\n+            OptionAsAlt::OnlyLeft => winit::platform::macos::OptionAsAlt::OnlyLeft,\n+            OptionAsAlt::OnlyRight => winit::platform::macos::OptionAsAlt::OnlyRight,\n+            OptionAsAlt::Both => winit::platform::macos::OptionAsAlt::Both,\n+            OptionAsAlt::None => winit::platform::macos::OptionAsAlt::None,",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1296516623",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 7149,
        "pr_file": "alacritty/src/config/window.rs",
        "discussion_id": "1296516623",
        "commented_code": "@@ -137,6 +137,16 @@ impl WindowConfig {\n     pub fn maximized(&self) -> bool {\n         self.startup_mode == StartupMode::Maximized\n     }\n+\n+    #[cfg(target_os = \"macos\")]\n+    pub fn option_as_alt(&self) -> winit::platform::macos::OptionAsAlt {\n+        match self.option_as_alt {\n+            OptionAsAlt::OnlyLeft => winit::platform::macos::OptionAsAlt::OnlyLeft,\n+            OptionAsAlt::OnlyRight => winit::platform::macos::OptionAsAlt::OnlyRight,\n+            OptionAsAlt::Both => winit::platform::macos::OptionAsAlt::Both,\n+            OptionAsAlt::None => winit::platform::macos::OptionAsAlt::None,",
        "comment_created_at": "2023-08-16T23:00:07+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Shouldn't use the full path here. Just import it as `WinitOptionsAsAlt` or something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1093129544",
    "pr_number": 6649,
    "pr_file": "alacritty_terminal/src/tty/unix.rs",
    "created_at": "2023-02-01T12:03:01+00:00",
    "commented_code": "}\n }\n \n-/// Look for a shell in the `$SHELL` environment variable, then in `passwd`.\n-fn default_shell(pw: &Passwd<'_>) -> String {\n-    env::var(\"SHELL\").unwrap_or_else(|_| pw.shell.to_owned())\n+struct ShellUser {\n+    user: String,\n+    longname: String,\n+    home: String,\n+    shell: String,\n+}\n+\n+impl ShellUser {\n+    /// look for shell, username, longname, and home dir in the respective environment variables\n+    /// before falling back on looking in to `passwd`.\n+    fn from_env() -> Result<Self> {\n+        let mut buf = [0; 1024];\n+        let pw = get_pw_entry(&mut buf);\n+\n+        let user = match env::var(\"USER\") {\n+            Ok(u) => u,",
    "repo_full_name": "alacritty/alacritty",
    "discussion_comments": [
      {
        "comment_id": "1093129544",
        "repo_full_name": "alacritty/alacritty",
        "pr_number": 6649,
        "pr_file": "alacritty_terminal/src/tty/unix.rs",
        "discussion_id": "1093129544",
        "commented_code": "@@ -118,19 +118,57 @@ impl Pty {\n     }\n }\n \n-/// Look for a shell in the `$SHELL` environment variable, then in `passwd`.\n-fn default_shell(pw: &Passwd<'_>) -> String {\n-    env::var(\"SHELL\").unwrap_or_else(|_| pw.shell.to_owned())\n+struct ShellUser {\n+    user: String,\n+    longname: String,\n+    home: String,\n+    shell: String,\n+}\n+\n+impl ShellUser {\n+    /// look for shell, username, longname, and home dir in the respective environment variables\n+    /// before falling back on looking in to `passwd`.\n+    fn from_env() -> Result<Self> {\n+        let mut buf = [0; 1024];\n+        let pw = get_pw_entry(&mut buf);\n+\n+        let user = match env::var(\"USER\") {\n+            Ok(u) => u,",
        "comment_created_at": "2023-02-01T12:03:01+00:00",
        "comment_author": "chrisduerr",
        "comment_body": "Please refrain from single-character variables. There's no reason not to just use `user` here. Same applies to the other match blocks.",
        "pr_file_module": null
      }
    ]
  }
]