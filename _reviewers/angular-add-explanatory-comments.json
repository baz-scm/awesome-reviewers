[
  {
    "discussion_id": "2299398562",
    "pr_number": 63387,
    "pr_file": "packages/core/src/render3/view_ref.ts",
    "created_at": "2025-08-26T00:06:06+00:00",
    "commented_code": "* introduce other changes.\n    */\n   checkNoChanges(): void {\n-    if (!ngDevMode) return;\n-\n-    try {\n-      this.exhaustive ??= this._lView[INJECTOR].get(\n-        UseExhaustiveCheckNoChanges,\n-        USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n-      );\n-    } catch {\n-      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n+    if (ngDevMode) {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2299398562",
        "repo_full_name": "angular/angular",
        "pr_number": 63387,
        "pr_file": "packages/core/src/render3/view_ref.ts",
        "discussion_id": "2299398562",
        "commented_code": "@@ -328,17 +328,17 @@ export class ViewRef<T> implements EmbeddedViewRef<T>, ChangeDetectorRefInterfac\n    * introduce other changes.\n    */\n   checkNoChanges(): void {\n-    if (!ngDevMode) return;\n-\n-    try {\n-      this.exhaustive ??= this._lView[INJECTOR].get(\n-        UseExhaustiveCheckNoChanges,\n-        USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n-      );\n-    } catch {\n-      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n+    if (ngDevMode) {",
        "comment_created_at": "2025-08-26T00:06:06+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "Can we please add a short comment to why we're not doing an early return here ? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2300396563",
        "repo_full_name": "angular/angular",
        "pr_number": 63387,
        "pr_file": "packages/core/src/render3/view_ref.ts",
        "discussion_id": "2299398562",
        "commented_code": "@@ -328,17 +328,17 @@ export class ViewRef<T> implements EmbeddedViewRef<T>, ChangeDetectorRefInterfac\n    * introduce other changes.\n    */\n   checkNoChanges(): void {\n-    if (!ngDevMode) return;\n-\n-    try {\n-      this.exhaustive ??= this._lView[INJECTOR].get(\n-        UseExhaustiveCheckNoChanges,\n-        USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n-      );\n-    } catch {\n-      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n+    if (ngDevMode) {",
        "comment_created_at": "2025-08-26T09:31:45+00:00",
        "comment_author": "thePunderWoman",
        "comment_body": "\u2795 Yeah, otherwise we'll probably regress in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "2300579031",
        "repo_full_name": "angular/angular",
        "pr_number": 63387,
        "pr_file": "packages/core/src/render3/view_ref.ts",
        "discussion_id": "2299398562",
        "commented_code": "@@ -328,17 +328,17 @@ export class ViewRef<T> implements EmbeddedViewRef<T>, ChangeDetectorRefInterfac\n    * introduce other changes.\n    */\n   checkNoChanges(): void {\n-    if (!ngDevMode) return;\n-\n-    try {\n-      this.exhaustive ??= this._lView[INJECTOR].get(\n-        UseExhaustiveCheckNoChanges,\n-        USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT,\n-      );\n-    } catch {\n-      this.exhaustive = USE_EXHAUSTIVE_CHECK_NO_CHANGES_DEFAULT;\n+    if (ngDevMode) {",
        "comment_created_at": "2025-08-26T10:43:42+00:00",
        "comment_author": "arturovt",
        "comment_body": "Updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243445550",
    "pr_number": 62905,
    "pr_file": "packages/forms/experimental/src/api/types.ts",
    "created_at": "2025-07-30T17:42:49+00:00",
    "commented_code": "* A signal indicating whether field value has been changed by user.\n    */\n   readonly dirty: Signal<boolean>;\n+\n+  /**\n+   * A signal indicating whether a field is hidden.\n+   * \n+   * Note: This doesn't hide the field in the template, that must be done manually.",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2243445550",
        "repo_full_name": "angular/angular",
        "pr_number": 62905,
        "pr_file": "packages/forms/experimental/src/api/types.ts",
        "discussion_id": "2243445550",
        "commented_code": "@@ -182,6 +184,18 @@ export interface FieldState<TValue, TKey extends string | number = string | numb\n    * A signal indicating whether field value has been changed by user.\n    */\n   readonly dirty: Signal<boolean>;\n+\n+  /**\n+   * A signal indicating whether a field is hidden.\n+   * \n+   * Note: This doesn't hide the field in the template, that must be done manually.",
        "comment_created_at": "2025-07-30T17:42:49+00:00",
        "comment_author": "msmallest",
        "comment_body": "IMO I would add something that explains what `hidden` accomplishes, like \"When a field is hidden it is ignored for the purposes of determining the valid, touched, and dirty states\" in the current markdown guide.",
        "pr_file_module": null
      },
      {
        "comment_id": "2244927169",
        "repo_full_name": "angular/angular",
        "pr_number": 62905,
        "pr_file": "packages/forms/experimental/src/api/types.ts",
        "discussion_id": "2243445550",
        "commented_code": "@@ -182,6 +184,18 @@ export interface FieldState<TValue, TKey extends string | number = string | numb\n    * A signal indicating whether field value has been changed by user.\n    */\n   readonly dirty: Signal<boolean>;\n+\n+  /**\n+   * A signal indicating whether a field is hidden.\n+   * \n+   * Note: This doesn't hide the field in the template, that must be done manually.",
        "comment_created_at": "2025-07-31T10:00:54+00:00",
        "comment_author": "kirjs",
        "comment_body": "Thanks, good point ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2168685734",
    "pr_number": 62283,
    "pr_file": "packages/core/testing/src/test_bed.ts",
    "created_at": "2025-06-26T09:57:42+00:00",
    "commented_code": "}\n \n   createComponent<T>(type: Type<T>, options?: TestComponentOptions): ComponentFixture<T> {\n-    const testComponentRenderer = this.inject(TestComponentRenderer);\n-    const rootElId = `root${_nextRootElementId++}`;\n-    testComponentRenderer.insertRootElement(rootElId);\n-\n     if (getAsyncClassMetadataFn(type)) {\n       throw new Error(\n         `Component '${type.name}' has unresolved metadata. ` +\n           `Please call \\`await TestBed.compileComponents()\\` before running this test.`,\n       );\n     }\n \n-    const componentDef = (type as any).\u0275cmp;\n+    // Note: injecting the renderer before accessing the definition appears to be load-bearing.\n+    const testComponentRenderer = this.inject(TestComponentRenderer);\n+    const componentDef: ComponentDef<T> = (type as any).\u0275cmp;\n+    const rootElId = `root${_nextRootElementId++}`;",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2168685734",
        "repo_full_name": "angular/angular",
        "pr_number": 62283,
        "pr_file": "packages/core/testing/src/test_bed.ts",
        "discussion_id": "2168685734",
        "commented_code": "@@ -645,18 +646,24 @@ export class TestBedImpl implements TestBed {\n   }\n \n   createComponent<T>(type: Type<T>, options?: TestComponentOptions): ComponentFixture<T> {\n-    const testComponentRenderer = this.inject(TestComponentRenderer);\n-    const rootElId = `root${_nextRootElementId++}`;\n-    testComponentRenderer.insertRootElement(rootElId);\n-\n     if (getAsyncClassMetadataFn(type)) {\n       throw new Error(\n         `Component '${type.name}' has unresolved metadata. ` +\n           `Please call \\`await TestBed.compileComponents()\\` before running this test.`,\n       );\n     }\n \n-    const componentDef = (type as any).\u0275cmp;\n+    // Note: injecting the renderer before accessing the definition appears to be load-bearing.\n+    const testComponentRenderer = this.inject(TestComponentRenderer);\n+    const componentDef: ComponentDef<T> = (type as any).\u0275cmp;\n+    const rootElId = `root${_nextRootElementId++}`;",
        "comment_created_at": "2025-06-26T09:57:42+00:00",
        "comment_author": "thePunderWoman",
        "comment_body": "Optional nit: It'd be nice to have a comment for the next two lines explaining what this is doing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258430914",
    "pr_number": 62962,
    "pr_file": "packages/core/src/render3/reactivity/projected_signal/internal.ts",
    "created_at": "2025-08-06T22:16:36+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {ReactiveNode, COMPUTED_NODE, ComputedNode, Version} from '../../../../primitives/signals';\n+\n+export interface ProjectedSignalNode extends ComputedNode<unknown> {\n+  rawDirty: boolean;\n+  propertyNode: ReactiveNode | undefined;\n+  parentNode: ReactiveNode;\n+  lastProperty: PropertyKey | undefined;\n+  lastPropertyValueVersion: Version;",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2258430914",
        "repo_full_name": "angular/angular",
        "pr_number": 62962,
        "pr_file": "packages/core/src/render3/reactivity/projected_signal/internal.ts",
        "discussion_id": "2258430914",
        "commented_code": "@@ -0,0 +1,93 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {ReactiveNode, COMPUTED_NODE, ComputedNode, Version} from '../../../../primitives/signals';\n+\n+export interface ProjectedSignalNode extends ComputedNode<unknown> {\n+  rawDirty: boolean;\n+  propertyNode: ReactiveNode | undefined;\n+  parentNode: ReactiveNode;\n+  lastProperty: PropertyKey | undefined;\n+  lastPropertyValueVersion: Version;",
        "comment_created_at": "2025-08-06T22:16:36+00:00",
        "comment_author": "leonsenft",
        "comment_body": "A small comment on these fields (particularly `propertyNode` and `lastProperty`) would be very helpful. It wasn't until getting to `projected_signal.ts` that I understand that `propertyNode` was only used when the projectedSignal key argument is reactive.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214386224",
    "pr_number": 62429,
    "pr_file": "devtools/projects/ng-devtools/src/lib/application-providers/settings_provider.ts",
    "created_at": "2025-07-17T21:56:26+00:00",
    "commented_code": "Settings,\n   ];\n }\n+\n+function applyMigrations(data: {[key: string]: unknown}, appOperations: ApplicationOperations) {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2214386224",
        "repo_full_name": "angular/angular",
        "pr_number": 62429,
        "pr_file": "devtools/projects/ng-devtools/src/lib/application-providers/settings_provider.ts",
        "discussion_id": "2214386224",
        "commented_code": "@@ -27,3 +33,15 @@ export function provideSettings(): (Provider | EnvironmentProviders)[] {\n     Settings,\n   ];\n }\n+\n+function applyMigrations(data: {[key: string]: unknown}, appOperations: ApplicationOperations) {",
        "comment_created_at": "2025-07-17T21:56:26+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Consider: It would be helpful to include a detailed doc comment explaining what we mean by \"migration\" in this context and how it should be used.\r\n\r\nAs it is right now, this is basically just dead code and an isolated observer would probably struggle to understand it. So some documentation or an example of a migration would be helpful for when we need to actually use it.",
        "pr_file_module": null
      }
    ]
  }
]