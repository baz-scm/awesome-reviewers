[
  {
    "discussion_id": "2252659014",
    "pr_number": 62750,
    "pr_file": "adev/src/content/tutorials/signals/steps/10-reacting-to-signal-changes-with-effect/README.md",
    "created_at": "2025-08-04T21:59:36+00:00",
    "commented_code": "+# Reacting to signal changes with effect",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2252659014",
        "repo_full_name": "angular/angular",
        "pr_number": 62750,
        "pr_file": "adev/src/content/tutorials/signals/steps/10-reacting-to-signal-changes-with-effect/README.md",
        "discussion_id": "2252659014",
        "commented_code": "@@ -0,0 +1,103 @@\n+# Reacting to signal changes with effect",
        "comment_created_at": "2025-08-04T21:59:36+00:00",
        "comment_author": "jelbourn",
        "comment_body": "One thing we want to emphasize here (basically anywhere we explain `effect`) is that developers should _try_ to avoid `effect` if they can. \n\n* Always prefer a `computed` or `linkedSignal` to reaching for an `effect`\n* If you find yourself using an `effect` to copy data from one signal to _another signal_, it's a sign (\ud83d\udea9) that you should move your source-of-truth higher-up and be using a `computed` or a `linkedSignal`\n* `effect` is good if you need to sync state from a signal to an imperative, non-signal API (e.g. localStorage)",
        "pr_file_module": null
      },
      {
        "comment_id": "2255245639",
        "repo_full_name": "angular/angular",
        "pr_number": 62750,
        "pr_file": "adev/src/content/tutorials/signals/steps/10-reacting-to-signal-changes-with-effect/README.md",
        "discussion_id": "2252659014",
        "commented_code": "@@ -0,0 +1,103 @@\n+# Reacting to signal changes with effect",
        "comment_created_at": "2025-08-05T20:13:16+00:00",
        "comment_author": "bencodezen",
        "comment_body": "Got it. I'll update this step to better communicate this point!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2317269719",
    "pr_number": 62750,
    "pr_file": "adev/src/content/tutorials/signals/steps/10-reacting-to-signal-changes-with-effect/README.md",
    "created_at": "2025-09-02T22:04:44+00:00",
    "commented_code": "+# Reacting to signal changes with effect\n+\n+Now that you've learned [querying child elements with signal queries](/tutorials/signals/9-query-child-elements-with-signal-queries), let's explore how to react to signal changes with effects. Effects are functions that run automatically when their dependencies change, making them perfect for side effects like logging, DOM manipulation, or API calls.\n+\n+**Important: Effects should be your last resort.** Always prefer `computed()` for derived values and `linkedSignal()` for values that can be both derived and manually set. If you find yourself copying data from one signal to another with an effect, it's a sign you should move your source-of-truth higher up and use `computed()` or `linkedSignal()` instead. Effects are best for syncing signal state to imperative, non-signal APIs.",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2317269719",
        "repo_full_name": "angular/angular",
        "pr_number": 62750,
        "pr_file": "adev/src/content/tutorials/signals/steps/10-reacting-to-signal-changes-with-effect/README.md",
        "discussion_id": "2317269719",
        "commented_code": "@@ -0,0 +1,110 @@\n+# Reacting to signal changes with effect\n+\n+Now that you've learned [querying child elements with signal queries](/tutorials/signals/9-query-child-elements-with-signal-queries), let's explore how to react to signal changes with effects. Effects are functions that run automatically when their dependencies change, making them perfect for side effects like logging, DOM manipulation, or API calls.\n+\n+**Important: Effects should be your last resort.** Always prefer `computed()` for derived values and `linkedSignal()` for values that can be both derived and manually set. If you find yourself copying data from one signal to another with an effect, it's a sign you should move your source-of-truth higher up and use `computed()` or `linkedSignal()` instead. Effects are best for syncing signal state to imperative, non-signal APIs.",
        "comment_created_at": "2025-09-02T22:04:44+00:00",
        "comment_author": "jelbourn",
        "comment_body": "```suggestion\n**Important: Effects should be the last API you reach for.** Always prefer `computed()` for derived values and `linkedSignal()` for values that can be both derived and manually set. If you find yourself copying data from one signal to another with an effect, it's a sign you should move your source-of-truth higher up and use `computed()` or `linkedSignal()` instead. Effects are best for syncing signal state to imperative, non-signal APIs.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190750360",
    "pr_number": 62225,
    "pr_file": "adev/src/content/guide/routing/lifecycle-and-events.md",
    "created_at": "2025-07-07T18:08:19+00:00",
    "commented_code": "+# Router Lifecycle and Events\n+\n+Angular Router provides a comprehensive set of lifecycle hooks and events that allow you to respond to navigation changes and execute custom logic during the routing process.\n+\n+## Common router events\n+\n+The Angular Router emits navigation events that you can subscribe to in order to track the navigation lifecycle. These events are available through the `Router.events` observable. This section covers common routing lifecycle events for navigation and error tracking (in chronological order).\n+\n+| Events                                              | Description                                                                                              |\n+| --------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n+| [`NavigationStart`](api/router/NavigationStart)     | Occurs when navigation begins and contains the requested URL.                                            |\n+| [`RoutesRecognized`](api/router/RoutesRecognized)   | Occurs after the router determines which route matches the URL and contains the route state information. |\n+| [`GuardsCheckStart`](api/router/GuardsCheckStart)   | Begins the route guard phase. The router evaluates route guards like `canActivate` and `canDeactivate`.  |\n+| [`GuardsCheckEnd`](api/router/GuardsCheckEnd)       | Signals completion of guard evaluation. Contains the result (allowed/denied).                            |\n+| [`ResolveStart`](api/router/ResolveStart)           | Begins the data resolution phase. Route resolvers start fetching data.                                   |\n+| [`ResolveEnd`](api/router/ResolveEnd)               | Data resolution completes. All required data becomes available.                                          |\n+| [`NavigationEnd`](api/router/NavigationEnd)         | Final event when navigation completes successfully. The router updates the URL.                          |\n+| [`NavigationSkipped`](api/router/NavigationSkipped) | Occurs when the router skips navigation (e.g., same URL navigation).                                     |\n+\n+The following are common error events:\n+\n+| Event                                             | Description                                                                      |\n+| ------------------------------------------------- | -------------------------------------------------------------------------------- |\n+| [`NavigationCancel`](api/router/NavigationCancel) | Occurs when the router cancels navigation. Often due to a guard returning false. |\n+| [`NavigationError`](api/router/NavigationError)   | Occurs when navigation fails. Could be due to invalid routes or resolver errors. |\n+\n+For a list of all lifecycle events, check out the [complete table of this guide](#all-router-events).\n+\n+## How to subscribe to router events\n+\n+When you want to run code during specific navigation lifecycle events, you can do so by subscribing to the `router.events` and checking the instance of the event:\n+\n+```ts\n+// Example of subscribing to router events\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Event, Router, NavigationStart, NavigationEnd } from '@angular/router';\n+\n+@Component({\n+  selector: 'app-router-events',\n+  standalone: true,\n+  template: ''\n+})\n+export class RouterEventsComponent {\n+  private readonly router = inject(Router);\n+  \n+  // Signal to track current navigation event\n+  currentEvent = signal<Event | null>(null);\n+  \n+  constructor() {\n+    // Subscribe to router events and update signal\n+    this.router.events.subscribe((event: Event) => {\n+      this.currentEvent.set(event);\n+    });\n+    \n+    // React to event changes with effect\n+    effect(() => {\n+      const event = this.currentEvent();\n+      if (event instanceof NavigationStart) {\n+        // Navigation starting\n+        console.log('Navigation starting:', event.url);\n+      }\n+      if (event instanceof NavigationEnd) {\n+        // Navigation completed\n+        console.log('Navigation completed:', event.url);\n+      }\n+    });\n+  }",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2190750360",
        "repo_full_name": "angular/angular",
        "pr_number": 62225,
        "pr_file": "adev/src/content/guide/routing/lifecycle-and-events.md",
        "discussion_id": "2190750360",
        "commented_code": "@@ -0,0 +1,268 @@\n+# Router Lifecycle and Events\n+\n+Angular Router provides a comprehensive set of lifecycle hooks and events that allow you to respond to navigation changes and execute custom logic during the routing process.\n+\n+## Common router events\n+\n+The Angular Router emits navigation events that you can subscribe to in order to track the navigation lifecycle. These events are available through the `Router.events` observable. This section covers common routing lifecycle events for navigation and error tracking (in chronological order).\n+\n+| Events                                              | Description                                                                                              |\n+| --------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n+| [`NavigationStart`](api/router/NavigationStart)     | Occurs when navigation begins and contains the requested URL.                                            |\n+| [`RoutesRecognized`](api/router/RoutesRecognized)   | Occurs after the router determines which route matches the URL and contains the route state information. |\n+| [`GuardsCheckStart`](api/router/GuardsCheckStart)   | Begins the route guard phase. The router evaluates route guards like `canActivate` and `canDeactivate`.  |\n+| [`GuardsCheckEnd`](api/router/GuardsCheckEnd)       | Signals completion of guard evaluation. Contains the result (allowed/denied).                            |\n+| [`ResolveStart`](api/router/ResolveStart)           | Begins the data resolution phase. Route resolvers start fetching data.                                   |\n+| [`ResolveEnd`](api/router/ResolveEnd)               | Data resolution completes. All required data becomes available.                                          |\n+| [`NavigationEnd`](api/router/NavigationEnd)         | Final event when navigation completes successfully. The router updates the URL.                          |\n+| [`NavigationSkipped`](api/router/NavigationSkipped) | Occurs when the router skips navigation (e.g., same URL navigation).                                     |\n+\n+The following are common error events:\n+\n+| Event                                             | Description                                                                      |\n+| ------------------------------------------------- | -------------------------------------------------------------------------------- |\n+| [`NavigationCancel`](api/router/NavigationCancel) | Occurs when the router cancels navigation. Often due to a guard returning false. |\n+| [`NavigationError`](api/router/NavigationError)   | Occurs when navigation fails. Could be due to invalid routes or resolver errors. |\n+\n+For a list of all lifecycle events, check out the [complete table of this guide](#all-router-events).\n+\n+## How to subscribe to router events\n+\n+When you want to run code during specific navigation lifecycle events, you can do so by subscribing to the `router.events` and checking the instance of the event:\n+\n+```ts\n+// Example of subscribing to router events\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Event, Router, NavigationStart, NavigationEnd } from '@angular/router';\n+\n+@Component({\n+  selector: 'app-router-events',\n+  standalone: true,\n+  template: ''\n+})\n+export class RouterEventsComponent {\n+  private readonly router = inject(Router);\n+  \n+  // Signal to track current navigation event\n+  currentEvent = signal<Event | null>(null);\n+  \n+  constructor() {\n+    // Subscribe to router events and update signal\n+    this.router.events.subscribe((event: Event) => {\n+      this.currentEvent.set(event);\n+    });\n+    \n+    // React to event changes with effect\n+    effect(() => {\n+      const event = this.currentEvent();\n+      if (event instanceof NavigationStart) {\n+        // Navigation starting\n+        console.log('Navigation starting:', event.url);\n+      }\n+      if (event instanceof NavigationEnd) {\n+        // Navigation completed\n+        console.log('Navigation completed:', event.url);\n+      }\n+    });\n+  }",
        "comment_created_at": "2025-07-07T18:08:19+00:00",
        "comment_author": "eneajaho",
        "comment_body": "I dont think we need a signal and an effect to handle side effect on router events. Having it inside the subscribe callback should be good enough. But we need to have takeUntilDestroyed to cleanup the subscription.\n\n```suggestion\n  constructor() {\n    // Subscribe to router events and react to events\n    this.router.events.pipe(takeUntilDestroyed()).subscribe((event: Event) => {\n      if (event instanceof NavigationStart) {\n        // Navigation starting\n        console.log('Navigation starting:', event.url);\n      }\n      if (event instanceof NavigationEnd) {\n        // Navigation completed\n        console.log('Navigation completed:', event.url);\n      }\n    });\n  }\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192559979",
    "pr_number": 62225,
    "pr_file": "adev/src/content/guide/routing/lifecycle-and-events.md",
    "created_at": "2025-07-08T13:37:01+00:00",
    "commented_code": "+# Router Lifecycle and Events\n+\n+Angular Router provides a comprehensive set of lifecycle hooks and events that allow you to respond to navigation changes and execute custom logic during the routing process.\n+\n+## Common router events\n+\n+The Angular Router emits navigation events that you can subscribe to in order to track the navigation lifecycle. These events are available through the `Router.events` observable. This section covers common routing lifecycle events for navigation and error tracking (in chronological order).\n+\n+| Events                                              | Description                                                                                              |\n+| --------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n+| [`NavigationStart`](api/router/NavigationStart)     | Occurs when navigation begins and contains the requested URL.                                            |\n+| [`RoutesRecognized`](api/router/RoutesRecognized)   | Occurs after the router determines which route matches the URL and contains the route state information. |\n+| [`GuardsCheckStart`](api/router/GuardsCheckStart)   | Begins the route guard phase. The router evaluates route guards like `canActivate` and `canDeactivate`.  |\n+| [`GuardsCheckEnd`](api/router/GuardsCheckEnd)       | Signals completion of guard evaluation. Contains the result (allowed/denied).                            |\n+| [`ResolveStart`](api/router/ResolveStart)           | Begins the data resolution phase. Route resolvers start fetching data.                                   |\n+| [`ResolveEnd`](api/router/ResolveEnd)               | Data resolution completes. All required data becomes available.                                          |\n+| [`NavigationEnd`](api/router/NavigationEnd)         | Final event when navigation completes successfully. The router updates the URL.                          |\n+| [`NavigationSkipped`](api/router/NavigationSkipped) | Occurs when the router skips navigation (e.g., same URL navigation).                                     |\n+\n+The following are common error events:\n+\n+| Event                                             | Description                                                                      |\n+| ------------------------------------------------- | -------------------------------------------------------------------------------- |\n+| [`NavigationCancel`](api/router/NavigationCancel) | Occurs when the router cancels navigation. Often due to a guard returning false. |\n+| [`NavigationError`](api/router/NavigationError)   | Occurs when navigation fails. Could be due to invalid routes or resolver errors. |\n+\n+For a list of all lifecycle events, check out the [complete table of this guide](#all-router-events).\n+\n+## How to subscribe to router events\n+\n+When you want to run code during specific navigation lifecycle events, you can do so by subscribing to the `router.events` and checking the instance of the event:\n+\n+```ts\n+// Example of subscribing to router events\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Event, Router, NavigationStart, NavigationEnd } from '@angular/router';\n+\n+@Component()\n+export class RouterEventsComponent {\n+  private readonly router = inject(Router);\n+  \n+  constructor() {\n+    // Subscribe to router events and react to events\n+    this.router.events.pipe(takeUntilDestroyed()).subscribe((event: Event) => {\n+      if (event instanceof NavigationStart) {\n+        // Navigation starting\n+        console.log('Navigation starting:', event.url);\n+      }\n+      if (event instanceof NavigationEnd) {\n+        // Navigation completed\n+        console.log('Navigation completed:', event.url);\n+      }\n+    });\n+  }\n+}\n+```\n+\n+Note: The [`Event`](api/router/Event) type from `@angular/router` is named the same as the regular global [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) type, but it is different from the [`RouterEvent`](api/router/RouterEvent) type.\n+\n+## How to debug routing events\n+\n+Debugging router navigation issues can be challenging without visibility into the event sequence. Angular provides a built-in debugging feature that logs all router events to the console, helping you understand the navigation flow and identify where issues occur.\n+\n+When you need to inspect a Router event sequence, you can enable logging for internal navigation events for debugging. You can configure this by passing a configuration option (`withDebugTracing()`) that enables detailed console logging of all routing events.\n+\n+```ts\n+import { provideRouter, withDebugTracing } from '@angular/router';\n+\n+const appRoutes: Routes = [];\n+bootstrapApplication(AppComponent,\n+  {\n+    providers: [\n+      provideRouter(appRoutes, withDebugTracing())\n+    ]\n+  }\n+);\n+```\n+\n+For more information, check out the official docs on [`withDebugTracing`](api/router/withDebugTracing).\n+\n+## Common use cases\n+\n+Router events enable many practical features in real-world applications. Here are some common patterns that are used with router events.\n+\n+### Loading indicators\n+\n+Show loading indicators during navigation:\n+\n+```typescript\n+import { Component, inject } from '@angular/core';\n+import { Router } from '@angular/router';\n+import { toSignal } from '@angular/core/rxjs-interop';\n+import { map } from 'rxjs/operators';\n+\n+@Component({\n+  selector: 'app-loading',\n+  template: `\n+    @if (loading()) {\n+      <div class=\"loading-spinner\">Loading...</div>\n+    }\n+  `\n+})\n+export class AppComponent {\n+  private router = inject(Router);\n+  \n+  readonly loading = toSignal(\n+    this.router.events.pipe(\n+      map(() => !!this.router.getCurrentNavigation())\n+    ),\n+    { initialValue: false }\n+  );\n+}\n+```\n+\n+### Analytics tracking\n+\n+Track page views for analytics:\n+\n+```typescript\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Router, NavigationEnd } from '@angular/router';\n+\n+@Injectable({ providedIn: 'root' })\n+export class AnalyticsService {\n+  private router = inject(Router);\n+  private destroyRef = inject(DestroyRef);\n+\n+  startTracking() {\n+    this.router.events.pipe(takeUntilDestroyed(this.destroyRef))\n+      .subscribe(event => {\n+        // Track page views when URL changes\n+        if (event instanceof NavigationEnd) {\n+           // Send page view to analytics\n+          this.analytics.trackPageView(url);\n+        }\n+      });\n+  }\n+\n+  private analytics = {\n+    trackPageView: (url: string) => {\n+      console.log('Page view tracked:', url);\n+    }\n+  };\n+}\n+```\n+\n+### Error handling\n+\n+Handle navigation errors gracefully and provide user feedback:\n+\n+```typescript\n+import { Component, inject, signal } from '@angular/core';\n+import { Router, NavigationStart, NavigationError, NavigationCancel, NavigationCancellationCode } from '@angular/router';\n+\n+@Component({\n+  selector: 'app-error-handler',\n+  standalone: true,\n+  template: `\n+    @if (errorMessage()) {\n+      <div class=\"error-banner\">\n+        {{ errorMessage() }}\n+        <button (click)=\"dismissError()\">Dismiss</button>\n+      </div>\n+    }\n+  `\n+})\n+export class ErrorHandlerComponent {\n+  private router = inject(Router);\n+  readonly errorMessage = signal('');\n+\n+  constructor() {\n+    this.router.events.subscribe(event => {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2192559979",
        "repo_full_name": "angular/angular",
        "pr_number": 62225,
        "pr_file": "adev/src/content/guide/routing/lifecycle-and-events.md",
        "discussion_id": "2192559979",
        "commented_code": "@@ -0,0 +1,244 @@\n+# Router Lifecycle and Events\n+\n+Angular Router provides a comprehensive set of lifecycle hooks and events that allow you to respond to navigation changes and execute custom logic during the routing process.\n+\n+## Common router events\n+\n+The Angular Router emits navigation events that you can subscribe to in order to track the navigation lifecycle. These events are available through the `Router.events` observable. This section covers common routing lifecycle events for navigation and error tracking (in chronological order).\n+\n+| Events                                              | Description                                                                                              |\n+| --------------------------------------------------- | -------------------------------------------------------------------------------------------------------- |\n+| [`NavigationStart`](api/router/NavigationStart)     | Occurs when navigation begins and contains the requested URL.                                            |\n+| [`RoutesRecognized`](api/router/RoutesRecognized)   | Occurs after the router determines which route matches the URL and contains the route state information. |\n+| [`GuardsCheckStart`](api/router/GuardsCheckStart)   | Begins the route guard phase. The router evaluates route guards like `canActivate` and `canDeactivate`.  |\n+| [`GuardsCheckEnd`](api/router/GuardsCheckEnd)       | Signals completion of guard evaluation. Contains the result (allowed/denied).                            |\n+| [`ResolveStart`](api/router/ResolveStart)           | Begins the data resolution phase. Route resolvers start fetching data.                                   |\n+| [`ResolveEnd`](api/router/ResolveEnd)               | Data resolution completes. All required data becomes available.                                          |\n+| [`NavigationEnd`](api/router/NavigationEnd)         | Final event when navigation completes successfully. The router updates the URL.                          |\n+| [`NavigationSkipped`](api/router/NavigationSkipped) | Occurs when the router skips navigation (e.g., same URL navigation).                                     |\n+\n+The following are common error events:\n+\n+| Event                                             | Description                                                                      |\n+| ------------------------------------------------- | -------------------------------------------------------------------------------- |\n+| [`NavigationCancel`](api/router/NavigationCancel) | Occurs when the router cancels navigation. Often due to a guard returning false. |\n+| [`NavigationError`](api/router/NavigationError)   | Occurs when navigation fails. Could be due to invalid routes or resolver errors. |\n+\n+For a list of all lifecycle events, check out the [complete table of this guide](#all-router-events).\n+\n+## How to subscribe to router events\n+\n+When you want to run code during specific navigation lifecycle events, you can do so by subscribing to the `router.events` and checking the instance of the event:\n+\n+```ts\n+// Example of subscribing to router events\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Event, Router, NavigationStart, NavigationEnd } from '@angular/router';\n+\n+@Component()\n+export class RouterEventsComponent {\n+  private readonly router = inject(Router);\n+  \n+  constructor() {\n+    // Subscribe to router events and react to events\n+    this.router.events.pipe(takeUntilDestroyed()).subscribe((event: Event) => {\n+      if (event instanceof NavigationStart) {\n+        // Navigation starting\n+        console.log('Navigation starting:', event.url);\n+      }\n+      if (event instanceof NavigationEnd) {\n+        // Navigation completed\n+        console.log('Navigation completed:', event.url);\n+      }\n+    });\n+  }\n+}\n+```\n+\n+Note: The [`Event`](api/router/Event) type from `@angular/router` is named the same as the regular global [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) type, but it is different from the [`RouterEvent`](api/router/RouterEvent) type.\n+\n+## How to debug routing events\n+\n+Debugging router navigation issues can be challenging without visibility into the event sequence. Angular provides a built-in debugging feature that logs all router events to the console, helping you understand the navigation flow and identify where issues occur.\n+\n+When you need to inspect a Router event sequence, you can enable logging for internal navigation events for debugging. You can configure this by passing a configuration option (`withDebugTracing()`) that enables detailed console logging of all routing events.\n+\n+```ts\n+import { provideRouter, withDebugTracing } from '@angular/router';\n+\n+const appRoutes: Routes = [];\n+bootstrapApplication(AppComponent,\n+  {\n+    providers: [\n+      provideRouter(appRoutes, withDebugTracing())\n+    ]\n+  }\n+);\n+```\n+\n+For more information, check out the official docs on [`withDebugTracing`](api/router/withDebugTracing).\n+\n+## Common use cases\n+\n+Router events enable many practical features in real-world applications. Here are some common patterns that are used with router events.\n+\n+### Loading indicators\n+\n+Show loading indicators during navigation:\n+\n+```typescript\n+import { Component, inject } from '@angular/core';\n+import { Router } from '@angular/router';\n+import { toSignal } from '@angular/core/rxjs-interop';\n+import { map } from 'rxjs/operators';\n+\n+@Component({\n+  selector: 'app-loading',\n+  template: `\n+    @if (loading()) {\n+      <div class=\"loading-spinner\">Loading...</div>\n+    }\n+  `\n+})\n+export class AppComponent {\n+  private router = inject(Router);\n+  \n+  readonly loading = toSignal(\n+    this.router.events.pipe(\n+      map(() => !!this.router.getCurrentNavigation())\n+    ),\n+    { initialValue: false }\n+  );\n+}\n+```\n+\n+### Analytics tracking\n+\n+Track page views for analytics:\n+\n+```typescript\n+import { Component, inject, signal, effect } from '@angular/core';\n+import { Router, NavigationEnd } from '@angular/router';\n+\n+@Injectable({ providedIn: 'root' })\n+export class AnalyticsService {\n+  private router = inject(Router);\n+  private destroyRef = inject(DestroyRef);\n+\n+  startTracking() {\n+    this.router.events.pipe(takeUntilDestroyed(this.destroyRef))\n+      .subscribe(event => {\n+        // Track page views when URL changes\n+        if (event instanceof NavigationEnd) {\n+           // Send page view to analytics\n+          this.analytics.trackPageView(url);\n+        }\n+      });\n+  }\n+\n+  private analytics = {\n+    trackPageView: (url: string) => {\n+      console.log('Page view tracked:', url);\n+    }\n+  };\n+}\n+```\n+\n+### Error handling\n+\n+Handle navigation errors gracefully and provide user feedback:\n+\n+```typescript\n+import { Component, inject, signal } from '@angular/core';\n+import { Router, NavigationStart, NavigationError, NavigationCancel, NavigationCancellationCode } from '@angular/router';\n+\n+@Component({\n+  selector: 'app-error-handler',\n+  standalone: true,\n+  template: `\n+    @if (errorMessage()) {\n+      <div class=\"error-banner\">\n+        {{ errorMessage() }}\n+        <button (click)=\"dismissError()\">Dismiss</button>\n+      </div>\n+    }\n+  `\n+})\n+export class ErrorHandlerComponent {\n+  private router = inject(Router);\n+  readonly errorMessage = signal('');\n+\n+  constructor() {\n+    this.router.events.subscribe(event => {",
        "comment_created_at": "2025-07-08T13:37:01+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "```suggestion\r\n    this.router.events.pipe(takeUntilDestroyed()).subscribe(event => {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]