[
  {
    "discussion_id": "1589077350",
    "pr_number": 55283,
    "pr_file": "packages/core/src/i18n/locale_data_api.ts",
    "created_at": "2024-05-03T11:23:54+00:00",
    "commented_code": "* @see {@link NgPlural}\n  * @see [Internationalization (i18n) Guide](guide/i18n)\n  */\n-export function getLocalePluralCase(locale: string): (value: number) => number {\n-  const data = findLocaleData(locale);\n-  return data[LocaleDataIndex.PluralCase];",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "1589077350",
        "repo_full_name": "angular/angular",
        "pr_number": 55283,
        "pr_file": "packages/core/src/i18n/locale_data_api.ts",
        "discussion_id": "1589077350",
        "commented_code": "@@ -90,18 +92,21 @@ export function getLocaleCurrencyCode(locale: string): string|null {\n  * @see {@link NgPlural}\n  * @see [Internationalization (i18n) Guide](guide/i18n)\n  */\n-export function getLocalePluralCase(locale: string): (value: number) => number {\n-  const data = findLocaleData(locale);\n-  return data[LocaleDataIndex.PluralCase];",
        "comment_created_at": "2024-05-03T11:23:54+00:00",
        "comment_author": "devversion",
        "comment_body": "Is this a breaking change? i.e. there isn't even a way to get back to legacy CLDR here AFAICT",
        "pr_file_module": null
      },
      {
        "comment_id": "1590203046",
        "repo_full_name": "angular/angular",
        "pr_number": 55283,
        "pr_file": "packages/core/src/i18n/locale_data_api.ts",
        "discussion_id": "1589077350",
        "commented_code": "@@ -90,18 +92,21 @@ export function getLocaleCurrencyCode(locale: string): string|null {\n  * @see {@link NgPlural}\n  * @see [Internationalization (i18n) Guide](guide/i18n)\n  */\n-export function getLocalePluralCase(locale: string): (value: number) => number {\n-  const data = findLocaleData(locale);\n-  return data[LocaleDataIndex.PluralCase];",
        "comment_created_at": "2024-05-05T03:58:16+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "TGP returned green for this. \r\n\r\nHere is the support form `Intl.PluralRules.supportedLocalesOf`, it is widely within the scope of our supported browser versions. \r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf\r\n\r\nDepending on how strict we are on our breaking change policy, I can be considered breaking or non-breaking. Happy to know what you (and others) think about this. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1592352986",
        "repo_full_name": "angular/angular",
        "pr_number": 55283,
        "pr_file": "packages/core/src/i18n/locale_data_api.ts",
        "discussion_id": "1589077350",
        "commented_code": "@@ -90,18 +92,21 @@ export function getLocaleCurrencyCode(locale: string): string|null {\n  * @see {@link NgPlural}\n  * @see [Internationalization (i18n) Guide](guide/i18n)\n  */\n-export function getLocalePluralCase(locale: string): (value: number) => number {\n-  const data = findLocaleData(locale);\n-  return data[LocaleDataIndex.PluralCase];",
        "comment_created_at": "2024-05-07T11:53:51+00:00",
        "comment_author": "devversion",
        "comment_body": "Does Google3 actually use the CLDR plural data? I don't know off hand.",
        "pr_file_module": null
      },
      {
        "comment_id": "1612490540",
        "repo_full_name": "angular/angular",
        "pr_number": 55283,
        "pr_file": "packages/core/src/i18n/locale_data_api.ts",
        "discussion_id": "1589077350",
        "commented_code": "@@ -90,18 +92,21 @@ export function getLocaleCurrencyCode(locale: string): string|null {\n  * @see {@link NgPlural}\n  * @see [Internationalization (i18n) Guide](guide/i18n)\n  */\n-export function getLocalePluralCase(locale: string): (value: number) => number {\n-  const data = findLocaleData(locale);\n-  return data[LocaleDataIndex.PluralCase];",
        "comment_created_at": "2024-05-24T00:02:18+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "I changed my mind on this. Let's stay on the safe side and make plural also opt-in. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2194772336",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/devtools-tabs.component.ts",
    "created_at": "2025-07-09T11:26:42+00:00",
    "commented_code": "readonly routerGraphEnabled = signal(false);\n   readonly timingAPIEnabled = signal(false);\n   readonly signalGraphEnabled = signal(false);\n+  readonly transferStateTabEnabled = signal(true);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2194772336",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/devtools-tabs.component.ts",
        "discussion_id": "2194772336",
        "commented_code": "@@ -67,6 +69,7 @@ export class DevToolsTabsComponent {\n   readonly routerGraphEnabled = signal(false);\n   readonly timingAPIEnabled = signal(false);\n   readonly signalGraphEnabled = signal(false);\n+  readonly transferStateTabEnabled = signal(true);",
        "comment_created_at": "2025-07-09T11:26:42+00:00",
        "comment_author": "hawkgs",
        "comment_body": "We usually hide new features like this by default (hence, the flags). I suspect this will require some internal discussions as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136015938",
    "pr_number": 61971,
    "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
    "created_at": "2025-06-09T16:12:43+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2136015938",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-09T16:12:43+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "I think we should discuss if this migration should be behind a flag. \r\nIt can be far from ideal in projects with tailwind when there are several classnames in the key. (could be 10+) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2137921592",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-10T13:33:18+00:00",
        "comment_author": "MeAkib",
        "comment_body": "Ok, how should we discuss it? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2137957790",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-10T13:48:16+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "We'll discuss it with the team soon, we'll let you know. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2143493953",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-12T19:31:51+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "Ideally this shouldn't be migrated by default. \r\nMaybe we can do that in a follow-up P and behind a prompt with \"no\" by default. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2147032328",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-14T17:20:37+00:00",
        "comment_author": "MeAkib",
        "comment_body": "Ok. Can I get the logic idea? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2150669492",
        "repo_full_name": "angular/angular",
        "pr_number": 61971,
        "pr_file": "packages/core/schematics/migrations/ngclass-to-class-migration/ngclass-to-class-migration.spec.ts",
        "discussion_id": "2136015938",
        "commented_code": "@@ -0,0 +1,157 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {absoluteFrom} from '@angular/compiler-cli';\n+import {diffText, runTsurgeMigration} from '../../utils/tsurge/testing';\n+import {NgClassMigration} from './ngclass-to-class-migration';\n+import {initMockFileSystem} from '@angular/compiler-cli/src/ngtsc/file_system/testing';\n+\n+describe('ngClass migrator', () => {\n+  beforeEach(() => {\n+    initMockFileSystem('Native');\n+  });\n+\n+  describe('No change cases', () => {\n+    it('should not change static HTML elements', async () => {\n+      await verifyDeclarationNoChange(`<button id=\"123\"></button>`);\n+    });\n+\n+    it('should not change existing [class] bindings', async () => {\n+      await verifyDeclarationNoChange(`<div [class.active]=\"isActive\"></div>`);\n+    });\n+\n+    it('should not change empty ngClass binding', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty string key', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"{'': condition}\"></div>`);\n+    });\n+\n+    it('should not change ngClass with empty array', async () => {\n+      await verifyDeclarationNoChange(`<div [ngClass]=\"[]\"></div>`);\n+    });\n+  });\n+\n+  describe('Simple ngClass object migrations', () => {\n+    it('should migrate single condition', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'active': isActive}\"></div>`,\n+        after: `<div [class.active]=\"isActive\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate multiple class conditions', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1': condition1, 'class2': condition2}\"></div>`,\n+        after: `<div [class.class1]=\"condition1\" [class.class2]=\"condition2\"></div>`,\n+      });\n+    });\n+\n+    it('should migrate quoted class names', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'admin-panel': isAdmin, 'user-dense': isDense}\"></div>`,\n+        after: `<div [class.admin-panel]=\"isAdmin\" [class.user-dense]=\"isDense\"></div>`,\n+      });\n+    });\n+\n+    it('should split and migrate multiple classes in one key', async () => {\n+      await verifyDeclaration({\n+        before: `<div [ngClass]=\"{'class1 class2': condition}\"></div>`,\n+        after: `<div [class.class1]=\"condition\" [class.class2]=\"condition\"></div>`,",
        "comment_created_at": "2025-06-16T19:04:12+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "* By default don't migrate\r\n* have a `migrateMultiClassKeys` option, if explicitly set, migrate to multiple class bindings. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2102861436",
    "pr_number": 61609,
    "pr_file": "packages/compiler-cli/src/ngtsc/core/src/compiler.ts",
    "created_at": "2025-05-22T15:36:50+00:00",
    "commented_code": "')}\n   }\n }\n \n+function verifyEmitDeclarationOnly(options: NgCompilerOptions): ts.Diagnostic[] {\n+  if (!options.emitDeclarationOnly || !!options._experimentalAllowEmitDeclarationOnly) {\n+    return [];\n+  }\n+  return [\n+    makeConfigDiagnostic({\n+      category: ts.DiagnosticCategory.Error,\n+      code: ErrorCode.CONFIG_EMIT_DECLARATION_ONLY_UNSUPPORTED,\n+      messageText: 'TS compiler option \"emitDeclarationOnly\" is not supported.',",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2102861436",
        "repo_full_name": "angular/angular",
        "pr_number": 61609,
        "pr_file": "packages/compiler-cli/src/ngtsc/core/src/compiler.ts",
        "discussion_id": "2102861436",
        "commented_code": "@@ -1829,6 +1830,19 @@ ${allowedCategoryLabels.join('\\n')}\n   }\n }\n \n+function verifyEmitDeclarationOnly(options: NgCompilerOptions): ts.Diagnostic[] {\n+  if (!options.emitDeclarationOnly || !!options._experimentalAllowEmitDeclarationOnly) {\n+    return [];\n+  }\n+  return [\n+    makeConfigDiagnostic({\n+      category: ts.DiagnosticCategory.Error,\n+      code: ErrorCode.CONFIG_EMIT_DECLARATION_ONLY_UNSUPPORTED,\n+      messageText: 'TS compiler option \"emitDeclarationOnly\" is not supported.',",
        "comment_created_at": "2025-05-22T15:36:50+00:00",
        "comment_author": "kirjs",
        "comment_body": "Is there some alternative approach we can suggest to user to use here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2102995199",
        "repo_full_name": "angular/angular",
        "pr_number": 61609,
        "pr_file": "packages/compiler-cli/src/ngtsc/core/src/compiler.ts",
        "discussion_id": "2102861436",
        "commented_code": "@@ -1829,6 +1830,19 @@ ${allowedCategoryLabels.join('\\n')}\n   }\n }\n \n+function verifyEmitDeclarationOnly(options: NgCompilerOptions): ts.Diagnostic[] {\n+  if (!options.emitDeclarationOnly || !!options._experimentalAllowEmitDeclarationOnly) {\n+    return [];\n+  }\n+  return [\n+    makeConfigDiagnostic({\n+      category: ts.DiagnosticCategory.Error,\n+      code: ErrorCode.CONFIG_EMIT_DECLARATION_ONLY_UNSUPPORTED,\n+      messageText: 'TS compiler option \"emitDeclarationOnly\" is not supported.',",
        "comment_created_at": "2025-05-22T16:44:53+00:00",
        "comment_author": "jonathan-meier",
        "comment_body": "The alternative is to disable `emitDeclarationOnly`. Do we want to mention this explicitly in the error message?",
        "pr_file_module": null
      },
      {
        "comment_id": "2103189675",
        "repo_full_name": "angular/angular",
        "pr_number": 61609,
        "pr_file": "packages/compiler-cli/src/ngtsc/core/src/compiler.ts",
        "discussion_id": "2102861436",
        "commented_code": "@@ -1829,6 +1830,19 @@ ${allowedCategoryLabels.join('\\n')}\n   }\n }\n \n+function verifyEmitDeclarationOnly(options: NgCompilerOptions): ts.Diagnostic[] {\n+  if (!options.emitDeclarationOnly || !!options._experimentalAllowEmitDeclarationOnly) {\n+    return [];\n+  }\n+  return [\n+    makeConfigDiagnostic({\n+      category: ts.DiagnosticCategory.Error,\n+      code: ErrorCode.CONFIG_EMIT_DECLARATION_ONLY_UNSUPPORTED,\n+      messageText: 'TS compiler option \"emitDeclarationOnly\" is not supported.',",
        "comment_created_at": "2025-05-22T18:40:08+00:00",
        "comment_author": "kirjs",
        "comment_body": "It's pretty self explainotary, should be fine not to mention",
        "pr_file_module": null
      }
    ]
  }
]