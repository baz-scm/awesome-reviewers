[
  {
    "discussion_id": "2289468340",
    "pr_number": 62832,
    "pr_file": "packages/core/schematics/ng-generate/inject-migration/migration.ts",
    "created_at": "2025-08-20T22:55:59+00:00",
    "commented_code": "propsToAdd: string[],\n   afterSuper: string[],\n ): void {\n-  if (!ts.isIdentifier(node.name)) {\n+  const context: ParameterMigrationContext = {\n+    node,\n+    options,\n+    localTypeChecker,\n+    printer,\n+    tracker,\n+    superCall,\n+    usedInSuper,\n+    usedInConstructor,\n+    usesOtherParams,\n+    memberIndentation,\n+    innerIndentation,\n+    prependToConstructor,\n+    propsToAdd,\n+    afterSuper,\n+  };\n+\n+  if (ts.isIdentifier(node.name)) {\n+    migrateIdentifierParameter(context);\n+  } else if (ts.isObjectBindingPattern(node.name)) {\n+    migrateObjectBindingParameter(context);\n+  } else {\n     return;\n   }\n+}\n \n-  const name = node.name.text;\n+function migrateIdentifierParameter(context: ParameterMigrationContext): void {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2289468340",
        "repo_full_name": "angular/angular",
        "pr_number": 62832,
        "pr_file": "packages/core/schematics/ng-generate/inject-migration/migration.ts",
        "discussion_id": "2289468340",
        "commented_code": "@@ -312,11 +329,37 @@ function migrateParameter(\n   propsToAdd: string[],\n   afterSuper: string[],\n ): void {\n-  if (!ts.isIdentifier(node.name)) {\n+  const context: ParameterMigrationContext = {\n+    node,\n+    options,\n+    localTypeChecker,\n+    printer,\n+    tracker,\n+    superCall,\n+    usedInSuper,\n+    usedInConstructor,\n+    usesOtherParams,\n+    memberIndentation,\n+    innerIndentation,\n+    prependToConstructor,\n+    propsToAdd,\n+    afterSuper,\n+  };\n+\n+  if (ts.isIdentifier(node.name)) {\n+    migrateIdentifierParameter(context);\n+  } else if (ts.isObjectBindingPattern(node.name)) {\n+    migrateObjectBindingParameter(context);\n+  } else {\n     return;\n   }\n+}\n \n-  const name = node.name.text;\n+function migrateIdentifierParameter(context: ParameterMigrationContext): void {",
        "comment_created_at": "2025-08-20T22:55:59+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "we could make that function a bit more safer by making `ParameterMigrationContext` generic, `ParameterMigrationContext<T>` where `node` would be of type `T`. \r\n\r\nThis way you wouldn't need the following type assertion anymore. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2226324658",
    "pr_number": 62773,
    "pr_file": "packages/core/src/render3/instructions/animation.ts",
    "created_at": "2025-07-23T18:19:16+00:00",
    "commented_code": "const WS_REGEXP = /\\s+/;\n const areAnimationSupported =\n   (typeof ngServerMode === 'undefined' || !ngServerMode) &&\n-  typeof document !== 'undefined' &&\n   // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body !== 'undefined' &&\n-  // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body.getAnimations === 'function';\n+  typeof document?.documentElement?.getAnimations === 'function';",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2226324658",
        "repo_full_name": "angular/angular",
        "pr_number": 62773,
        "pr_file": "packages/core/src/render3/instructions/animation.ts",
        "discussion_id": "2226324658",
        "commented_code": "@@ -30,11 +30,8 @@ const DEFAULT_ANIMATIONS_DISABLED = false;\n const WS_REGEXP = /\\s+/;\n const areAnimationSupported =\n   (typeof ngServerMode === 'undefined' || !ngServerMode) &&\n-  typeof document !== 'undefined' &&\n   // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body !== 'undefined' &&\n-  // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body.getAnimations === 'function';\n+  typeof document?.documentElement?.getAnimations === 'function';",
        "comment_created_at": "2025-07-23T18:19:16+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "That's semanticaly different (if document is not defined, this will still throw). \r\nThat probably lacks some context on why we need this. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2226345268",
        "repo_full_name": "angular/angular",
        "pr_number": 62773,
        "pr_file": "packages/core/src/render3/instructions/animation.ts",
        "discussion_id": "2226324658",
        "commented_code": "@@ -30,11 +30,8 @@ const DEFAULT_ANIMATIONS_DISABLED = false;\n const WS_REGEXP = /\\s+/;\n const areAnimationSupported =\n   (typeof ngServerMode === 'undefined' || !ngServerMode) &&\n-  typeof document !== 'undefined' &&\n   // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body !== 'undefined' &&\n-  // tslint:disable-next-line:no-toplevel-property-access\n-  typeof document.body.getAnimations === 'function';\n+  typeof document?.documentElement?.getAnimations === 'function';",
        "comment_created_at": "2025-07-23T18:29:24+00:00",
        "comment_author": "thePunderWoman",
        "comment_body": "Yeah. I've restored the document undefined check and then combined with this, we should be good.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2184776367",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools-backend/src/lib/client-event-subscribers.ts",
    "created_at": "2025-07-04T08:54:58+00:00",
    "commented_code": "console.groupEnd();\n };\n \n+const getTransferStateCallback = (messageBus: MessageBus<Events>) => () => {\n+  try {\n+    const transferStateData = extractTransferStateFromDocument();\n+    messageBus.emit('transferStateData', [transferStateData]);\n+  } catch (error) {\n+    console.error('Error extracting transfer state:', error);\n+    messageBus.emit('transferStateData', [null]);\n+  }\n+};\n+\n+const extractTransferStateFromDocument = (): Record<string, TransferStateValue> | null => {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2184776367",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools-backend/src/lib/client-event-subscribers.ts",
        "discussion_id": "2184776367",
        "commented_code": "@@ -661,6 +664,41 @@ const logProvider = (\n   console.groupEnd();\n };\n \n+const getTransferStateCallback = (messageBus: MessageBus<Events>) => () => {\n+  try {\n+    const transferStateData = extractTransferStateFromDocument();\n+    messageBus.emit('transferStateData', [transferStateData]);\n+  } catch (error) {\n+    console.error('Error extracting transfer state:', error);\n+    messageBus.emit('transferStateData', [null]);\n+  }\n+};\n+\n+const extractTransferStateFromDocument = (): Record<string, TransferStateValue> | null => {",
        "comment_created_at": "2025-07-04T08:54:58+00:00",
        "comment_author": "alan-agius4",
        "comment_body": "NIT: consider early exits and using optional chaining to reduce the checks\r\n\r\n```ts\r\n\r\ntry {\r\n    const script = document.getElementById('ng-state') as HTMLScriptElement | null;\r\n    if (!script?.textContent) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const transferStateData = JSON.parse(script.textContent) as Record<\r\n        string,\r\n        TransferStateValue\r\n      >;\r\n\r\n      if (typeof transferStateData === 'object') {\r\n        return transferStateData;\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to parse transfer state from standard scripts:', error);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205927995",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
    "created_at": "2025-07-14T22:25:31+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {\n+  Component,\n+  inject,\n+  signal,\n+  computed,\n+  linkedSignal,\n+  ChangeDetectionStrategy,\n+} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+import {formatBytes, getFormattedValue, truncateText} from '../../shared/utils/formatting';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+export const MAX_DISPLAY_LENGTH = 200;\n+export const COPY_FEEDBACK_TIMEOUT = 2000;\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private clipboard = inject(Clipboard);\n+\n+  readonly transferStateData = signal<Record<string, TransferStateValue> | null>(null);\n+  readonly error = signal<string | null>(null);\n+  readonly isLoading = signal(false);\n+\n+  readonly transferStateItems = linkedSignal<TransferStateItem[]>(() => {\n+    const data = this.transferStateData();\n+    if (!data) return [];\n+\n+    return Object.entries(data).map(([key, value]) => ({\n+      key,\n+      value,\n+      type: this.getValueType(value),\n+      size: this.getValueSize(value),\n+      isExpanded: false,\n+      isCopied: false,\n+    }));\n+  });\n+\n+  readonly hasData = computed(() => this.transferStateItems().length > 0);\n+\n+  readonly totalSize = computed(() => {\n+    const items = this.transferStateItems();\n+    if (items.length === 0) return '0 B';\n+\n+    let totalBytes = 0;\n+    for (const item of items) {\n+      const str = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);\n+      totalBytes += new Blob([str]).size;\n+    }\n+\n+    return formatBytes(totalBytes);\n+  });\n+\n+  displayedColumns: string[] = ['key', 'type', 'size', 'value'];\n+\n+  constructor() {\n+    this.loadTransferState();\n+  }\n+\n+  private getValueType(value: TransferStateValue): string {\n+    if (value === null) return 'null';\n+    if (Array.isArray(value)) return 'array';\n+    return typeof value;\n+  }\n+\n+  getValueSize(value: TransferStateValue): string {\n+    const str = JSON.stringify(value);\n+    const bytes = new Blob([str]).size;\n+    return formatBytes(bytes);\n+  }\n+\n+  private loadTransferState(): void {\n+    this.isLoading.set(true);\n+    this.error.set(null);\n+\n+    try {\n+      this.messageBus.emit('getTransferState');\n+      this.messageBus.on('transferStateData', (data: Record<string, TransferStateValue> | null) => {\n+        this.transferStateData.set(data);\n+        this.isLoading.set(false);\n+        if (!data) {\n+          this.error.set(\n+            'No transfer state found. Make sure you are inspecting a page with Server-Side Rendering (SSR) enabled.',\n+          );\n+        }\n+      });\n+    } catch (err) {\n+      this.error.set(`Error loading transfer state: ${err}`);\n+      this.isLoading.set(false);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2205927995",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
        "discussion_id": "2205927995",
        "commented_code": "@@ -0,0 +1,193 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {\n+  Component,\n+  inject,\n+  signal,\n+  computed,\n+  linkedSignal,\n+  ChangeDetectionStrategy,\n+} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+import {formatBytes, getFormattedValue, truncateText} from '../../shared/utils/formatting';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+export const MAX_DISPLAY_LENGTH = 200;\n+export const COPY_FEEDBACK_TIMEOUT = 2000;\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private clipboard = inject(Clipboard);\n+\n+  readonly transferStateData = signal<Record<string, TransferStateValue> | null>(null);\n+  readonly error = signal<string | null>(null);\n+  readonly isLoading = signal(false);\n+\n+  readonly transferStateItems = linkedSignal<TransferStateItem[]>(() => {\n+    const data = this.transferStateData();\n+    if (!data) return [];\n+\n+    return Object.entries(data).map(([key, value]) => ({\n+      key,\n+      value,\n+      type: this.getValueType(value),\n+      size: this.getValueSize(value),\n+      isExpanded: false,\n+      isCopied: false,\n+    }));\n+  });\n+\n+  readonly hasData = computed(() => this.transferStateItems().length > 0);\n+\n+  readonly totalSize = computed(() => {\n+    const items = this.transferStateItems();\n+    if (items.length === 0) return '0 B';\n+\n+    let totalBytes = 0;\n+    for (const item of items) {\n+      const str = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);\n+      totalBytes += new Blob([str]).size;\n+    }\n+\n+    return formatBytes(totalBytes);\n+  });\n+\n+  displayedColumns: string[] = ['key', 'type', 'size', 'value'];\n+\n+  constructor() {\n+    this.loadTransferState();\n+  }\n+\n+  private getValueType(value: TransferStateValue): string {\n+    if (value === null) return 'null';\n+    if (Array.isArray(value)) return 'array';\n+    return typeof value;\n+  }\n+\n+  getValueSize(value: TransferStateValue): string {\n+    const str = JSON.stringify(value);\n+    const bytes = new Blob([str]).size;\n+    return formatBytes(bytes);\n+  }\n+\n+  private loadTransferState(): void {\n+    this.isLoading.set(true);\n+    this.error.set(null);\n+\n+    try {\n+      this.messageBus.emit('getTransferState');\n+      this.messageBus.on('transferStateData', (data: Record<string, TransferStateValue> | null) => {\n+        this.transferStateData.set(data);\n+        this.isLoading.set(false);\n+        if (!data) {\n+          this.error.set(\n+            'No transfer state found. Make sure you are inspecting a page with Server-Side Rendering (SSR) enabled.',\n+          );\n+        }\n+      });\n+    } catch (err) {\n+      this.error.set(`Error loading transfer state: ${err}`);\n+      this.isLoading.set(false);",
        "comment_created_at": "2025-07-14T22:25:31+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Consider: Could we derive `isLoading` from whether either `transferStateData` and `error` have a value provided?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208281504",
    "pr_number": 62585,
    "pr_file": "packages/language-service/src/utils/ts_utils.ts",
    "created_at": "2025-07-15T18:15:39+00:00",
    "commented_code": "private readonly includeCompletionsForModuleExports: boolean | undefined,\n   ) {}\n \n-  resolve(toImport: Reference<ClassDeclaration>, importOn: ts.Node | null): string | undefined {\n+  resolve(\n+    toImport: Reference<ClassDeclaration>,\n+    importOn: ts.Node | null,\n+  ): DirectiveModuleExportDetails | null {\n     if (toImport.node.getSourceFile().fileName === importOn?.getSourceFile().fileName) {\n-      return undefined;\n+      return null;\n     }\n-    const moduleSpecifier = getModuleSpecifierIfExists(this.compiler, importOn, toImport.node);\n+    const tsEntry = this.getMatchTsEntry(toImport);\n+    const moduleSpecifier = getModuleSpecifierIfExists(\n+      this.compiler,\n+      importOn,\n+      toImport.node,\n+      tsEntry?.tsCompletionEntrySymbolName,\n+    );\n \n     if (moduleSpecifier !== null) {\n-      return moduleSpecifier;\n+      return {\n+        moduleSpecifier,\n+        exportName: tsEntry?.tsCompletionEntrySymbolName ?? toImport.node.name.getText(),\n+      };\n     }\n \n     return getModuleSpecifierFromImportStatement(\n-      this.directive.tsCompletionEntryInfos,\n-      toImport,\n+      tsEntry,\n       importOn,\n       this.templateTypeChecker,\n       this.component,\n       this.tsLS,\n       this.includeCompletionsForModuleExports,\n     );\n   }\n+\n+  private getMatchTsEntry(\n+    toImport: Reference<ClassDeclaration>,\n+  ): TsCompletionEntryInfo | undefined {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2208281504",
        "repo_full_name": "angular/angular",
        "pr_number": 62585,
        "pr_file": "packages/language-service/src/utils/ts_utils.ts",
        "discussion_id": "2208281504",
        "commented_code": "@@ -821,26 +822,51 @@ class PotentialDirectiveModuleSpecifierResolverImpl\n     private readonly includeCompletionsForModuleExports: boolean | undefined,\n   ) {}\n \n-  resolve(toImport: Reference<ClassDeclaration>, importOn: ts.Node | null): string | undefined {\n+  resolve(\n+    toImport: Reference<ClassDeclaration>,\n+    importOn: ts.Node | null,\n+  ): DirectiveModuleExportDetails | null {\n     if (toImport.node.getSourceFile().fileName === importOn?.getSourceFile().fileName) {\n-      return undefined;\n+      return null;\n     }\n-    const moduleSpecifier = getModuleSpecifierIfExists(this.compiler, importOn, toImport.node);\n+    const tsEntry = this.getMatchTsEntry(toImport);\n+    const moduleSpecifier = getModuleSpecifierIfExists(\n+      this.compiler,\n+      importOn,\n+      toImport.node,\n+      tsEntry?.tsCompletionEntrySymbolName,\n+    );\n \n     if (moduleSpecifier !== null) {\n-      return moduleSpecifier;\n+      return {\n+        moduleSpecifier,\n+        exportName: tsEntry?.tsCompletionEntrySymbolName ?? toImport.node.name.getText(),\n+      };\n     }\n \n     return getModuleSpecifierFromImportStatement(\n-      this.directive.tsCompletionEntryInfos,\n-      toImport,\n+      tsEntry,\n       importOn,\n       this.templateTypeChecker,\n       this.component,\n       this.tsLS,\n       this.includeCompletionsForModuleExports,\n     );\n   }\n+\n+  private getMatchTsEntry(\n+    toImport: Reference<ClassDeclaration>,\n+  ): TsCompletionEntryInfo | undefined {",
        "comment_created_at": "2025-07-15T18:15:39+00:00",
        "comment_author": "atscott",
        "comment_body": "For consistency with other changes in this PR, should this return `null` instead of `undefined`? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2209086380",
        "repo_full_name": "angular/angular",
        "pr_number": 62585,
        "pr_file": "packages/language-service/src/utils/ts_utils.ts",
        "discussion_id": "2208281504",
        "commented_code": "@@ -821,26 +822,51 @@ class PotentialDirectiveModuleSpecifierResolverImpl\n     private readonly includeCompletionsForModuleExports: boolean | undefined,\n   ) {}\n \n-  resolve(toImport: Reference<ClassDeclaration>, importOn: ts.Node | null): string | undefined {\n+  resolve(\n+    toImport: Reference<ClassDeclaration>,\n+    importOn: ts.Node | null,\n+  ): DirectiveModuleExportDetails | null {\n     if (toImport.node.getSourceFile().fileName === importOn?.getSourceFile().fileName) {\n-      return undefined;\n+      return null;\n     }\n-    const moduleSpecifier = getModuleSpecifierIfExists(this.compiler, importOn, toImport.node);\n+    const tsEntry = this.getMatchTsEntry(toImport);\n+    const moduleSpecifier = getModuleSpecifierIfExists(\n+      this.compiler,\n+      importOn,\n+      toImport.node,\n+      tsEntry?.tsCompletionEntrySymbolName,\n+    );\n \n     if (moduleSpecifier !== null) {\n-      return moduleSpecifier;\n+      return {\n+        moduleSpecifier,\n+        exportName: tsEntry?.tsCompletionEntrySymbolName ?? toImport.node.name.getText(),\n+      };\n     }\n \n     return getModuleSpecifierFromImportStatement(\n-      this.directive.tsCompletionEntryInfos,\n-      toImport,\n+      tsEntry,\n       importOn,\n       this.templateTypeChecker,\n       this.component,\n       this.tsLS,\n       this.includeCompletionsForModuleExports,\n     );\n   }\n+\n+  private getMatchTsEntry(\n+    toImport: Reference<ClassDeclaration>,\n+  ): TsCompletionEntryInfo | undefined {",
        "comment_created_at": "2025-07-16T02:36:06+00:00",
        "comment_author": "ivanwonder",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214103282",
    "pr_number": 62656,
    "pr_file": "packages/forms/experimental/src/api/data.ts",
    "created_at": "2025-07-17T19:16:31+00:00",
    "commented_code": "const pathNode = FieldPathNode.unwrapFieldPath(path);\n   pathNode.logic.addDataFactory(key, factory);\n \n-  return key as DataKey<ResourceRef<TData | undefined>>;\n+  return key as StaticMetadataKey<ResourceRef<TData | undefined>>;",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2214103282",
        "repo_full_name": "angular/angular",
        "pr_number": 62656,
        "pr_file": "packages/forms/experimental/src/api/data.ts",
        "discussion_id": "2214103282",
        "commented_code": "@@ -74,5 +70,5 @@ export function defineResource<TValue, TData, TRequest, TPathKind extends PathKi\n   const pathNode = FieldPathNode.unwrapFieldPath(path);\n   pathNode.logic.addDataFactory(key, factory);\n \n-  return key as DataKey<ResourceRef<TData | undefined>>;\n+  return key as StaticMetadataKey<ResourceRef<TData | undefined>>;",
        "comment_created_at": "2025-07-17T19:16:31+00:00",
        "comment_author": "leonsenft",
        "comment_body": "Where does the `undefined` come from / why is it necessary?\n\nBoth the `opts.asKey` and default value are just `ResourceRef<TData>`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2214304075",
        "repo_full_name": "angular/angular",
        "pr_number": 62656,
        "pr_file": "packages/forms/experimental/src/api/data.ts",
        "discussion_id": "2214103282",
        "commented_code": "@@ -74,5 +70,5 @@ export function defineResource<TValue, TData, TRequest, TPathKind extends PathKi\n   const pathNode = FieldPathNode.unwrapFieldPath(path);\n   pathNode.logic.addDataFactory(key, factory);\n \n-  return key as DataKey<ResourceRef<TData | undefined>>;\n+  return key as StaticMetadataKey<ResourceRef<TData | undefined>>;",
        "comment_created_at": "2025-07-17T21:03:33+00:00",
        "comment_author": "mmalerba",
        "comment_body": "If the schema doesn't set a particular static key for a particular field, but we try to read it: `f().metadata(KEY)` it returns `undefined`. This doesn't happen for reactive ones, because for those the key itself holds a default value to use in the case that the schema didn't define it at all for that field. Since the reactive ones represent reduced values, its basically the default case of reducing an empty list",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208640802",
    "pr_number": 62653,
    "pr_file": "packages/forms/experimental/src/api/validators/pattern.ts",
    "created_at": "2025-07-15T20:48:35+00:00",
    "commented_code": "config?: BaseValidatorConfig<string, TPathKind>,\n ) {\n   const reactivePatternValue = typeof pattern === 'string' ? () => pattern : pattern;\n-  metadata(path, PATTERN, (ctx) => [reactivePatternValue(ctx)]);\n \n-  return validate(path, (ctx) => {\n+  metadata(path, PATTERN, (ctx) => {\n+    const result = reactivePatternValue(ctx);\n+    if (result === undefined) {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2208640802",
        "repo_full_name": "angular/angular",
        "pr_number": 62653,
        "pr_file": "packages/forms/experimental/src/api/validators/pattern.ts",
        "discussion_id": "2208640802",
        "commented_code": "@@ -36,9 +36,16 @@ export function pattern<TPathKind extends PathKind = PathKind.Root>(\n   config?: BaseValidatorConfig<string, TPathKind>,\n ) {\n   const reactivePatternValue = typeof pattern === 'string' ? () => pattern : pattern;\n-  metadata(path, PATTERN, (ctx) => [reactivePatternValue(ctx)]);\n \n-  return validate(path, (ctx) => {\n+  metadata(path, PATTERN, (ctx) => {\n+    const result = reactivePatternValue(ctx);\n+    if (result === undefined) {",
        "comment_created_at": "2025-07-15T20:48:35+00:00",
        "comment_author": "leonsenft",
        "comment_body": "What does the result being undefined mean? It's not clear from the documentation. `pattern` may be a _defined_ `string`, or a function that returns `string | undefined`. Why?",
        "pr_file_module": null
      },
      {
        "comment_id": "2208686553",
        "repo_full_name": "angular/angular",
        "pr_number": 62653,
        "pr_file": "packages/forms/experimental/src/api/validators/pattern.ts",
        "discussion_id": "2208640802",
        "commented_code": "@@ -36,9 +36,16 @@ export function pattern<TPathKind extends PathKind = PathKind.Root>(\n   config?: BaseValidatorConfig<string, TPathKind>,\n ) {\n   const reactivePatternValue = typeof pattern === 'string' ? () => pattern : pattern;\n-  metadata(path, PATTERN, (ctx) => [reactivePatternValue(ctx)]);\n \n-  return validate(path, (ctx) => {\n+  metadata(path, PATTERN, (ctx) => {\n+    const result = reactivePatternValue(ctx);\n+    if (result === undefined) {",
        "comment_created_at": "2025-07-15T21:10:36+00:00",
        "comment_author": "mmalerba",
        "comment_body": "It means that based on the field context, the logic decided not to enforce a pattern on this field. So maybe something like this:\r\n\r\n```\r\npattern(p.identifier, ({valueOf}) => valueOf(p.requireStandardFormat) ? 'id:.*' : undefined)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205935537",
    "pr_number": 62446,
    "pr_file": "packages/forms/experimental/src/field/submit.ts",
    "created_at": "2025-07-14T22:33:52+00:00",
    "commented_code": ": (this.node.structure.parent?.submitState.submittedStatus() ?? 'unsubmitted'),\n   );\n \n-  setServerErrors(errors: ValidationResult) {\n-    if (errors === undefined) {\n-      this.serverErrors.set([]);\n-    } else if (!Array.isArray(errors)) {\n-      this.serverErrors.set([errors as FormError]);\n+  setServerErrors(\n+    result:\n+      | ValidationError\n+      | WithField<ValidationError>\n+      | (ValidationError | WithField<ValidationError>)[],\n+  ) {\n+    let errors: ValidationError[];\n+    if (result === undefined) {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2205935537",
        "repo_full_name": "angular/angular",
        "pr_number": 62446,
        "pr_file": "packages/forms/experimental/src/field/submit.ts",
        "discussion_id": "2205935537",
        "commented_code": "@@ -33,14 +34,21 @@ export class FieldSubmitState {\n       : (this.node.structure.parent?.submitState.submittedStatus() ?? 'unsubmitted'),\n   );\n \n-  setServerErrors(errors: ValidationResult) {\n-    if (errors === undefined) {\n-      this.serverErrors.set([]);\n-    } else if (!Array.isArray(errors)) {\n-      this.serverErrors.set([errors as FormError]);\n+  setServerErrors(\n+    result:\n+      | ValidationError\n+      | WithField<ValidationError>\n+      | (ValidationError | WithField<ValidationError>)[],\n+  ) {\n+    let errors: ValidationError[];\n+    if (result === undefined) {",
        "comment_created_at": "2025-07-14T22:33:52+00:00",
        "comment_author": "leonsenft",
        "comment_body": "`undefined` isn't in the method signature, should `result` be `result?`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2206015996",
        "repo_full_name": "angular/angular",
        "pr_number": 62446,
        "pr_file": "packages/forms/experimental/src/field/submit.ts",
        "discussion_id": "2205935537",
        "commented_code": "@@ -33,14 +34,21 @@ export class FieldSubmitState {\n       : (this.node.structure.parent?.submitState.submittedStatus() ?? 'unsubmitted'),\n   );\n \n-  setServerErrors(errors: ValidationResult) {\n-    if (errors === undefined) {\n-      this.serverErrors.set([]);\n-    } else if (!Array.isArray(errors)) {\n-      this.serverErrors.set([errors as FormError]);\n+  setServerErrors(\n+    result:\n+      | ValidationError\n+      | WithField<ValidationError>\n+      | (ValidationError | WithField<ValidationError>)[],\n+  ) {\n+    let errors: ValidationError[];\n+    if (result === undefined) {",
        "comment_created_at": "2025-07-15T00:05:49+00:00",
        "comment_author": "mmalerba",
        "comment_body": "Yeah you're right, I tightened up the parameter type here so I can just remove the undefined case, which also means I can just collapse this while thing to a one-liner :)",
        "pr_file_module": null
      }
    ]
  }
]