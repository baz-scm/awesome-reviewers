[
  {
    "discussion_id": "2195265621",
    "pr_number": 62275,
    "pr_file": "packages/core/src/render3/instructions/shared.ts",
    "created_at": "2025-07-09T15:03:46+00:00",
    "commented_code": "if (!injector) {\n     return;\n   }\n-  const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);\n-  errorHandler?.(error);\n+  // Question (atscott): there's no `destroyed` property on that injector...\n+  // Should we wrap it in a try-catch and re-throw in a timer?\n+  // Or there's any other precise solution?\n+  try {\n+    const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2195265621",
        "repo_full_name": "angular/angular",
        "pr_number": 62275,
        "pr_file": "packages/core/src/render3/instructions/shared.ts",
        "discussion_id": "2195265621",
        "commented_code": "@@ -699,8 +699,17 @@ export function handleUncaughtError(lView: LView, error: any): void {\n   if (!injector) {\n     return;\n   }\n-  const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);\n-  errorHandler?.(error);\n+  // Question (atscott): there's no `destroyed` property on that injector...\n+  // Should we wrap it in a try-catch and re-throw in a timer?\n+  // Or there's any other precise solution?\n+  try {\n+    const errorHandler = injector.get(INTERNAL_APPLICATION_ERROR_HANDLER, null);",
        "comment_created_at": "2025-07-09T15:03:46+00:00",
        "comment_author": "atscott",
        "comment_body": "try...catch should only be around the `inject` call. The `errorHandler` itself can still throw an error that we don't want to throw in a timeout",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2223305197",
    "pr_number": 62737,
    "pr_file": "packages/service-worker/worker/src/data.ts",
    "created_at": "2025-07-22T17:25:38+00:00",
    "commented_code": "});\n     }\n   }\n+\n+  /**\n+   * Detect if storage is full or approaching capacity.\n+   * Returns true if storage is at or near capacity.\n+   */\n+  private async detectStorageFull() {\n+    try {\n+      const estimate = await navigator.storage.estimate();\n+      const {quota, usage} = estimate;\n+\n+      // Handle cases where quota or usage might be undefined\n+      if (typeof quota !== 'number' || typeof usage !== 'number') {\n+        return;\n+      }\n+\n+      // Consider storage \"full\" if usage is >= 95% of quota\n+      // This provides a safety buffer before actual storage exhaustion\n+      const usagePercentage = (usage / quota) * 100;\n+      const isStorageFull = usagePercentage >= 95;\n+\n+      if (isStorageFull) {\n+        this.debugHandler.log(\n+          'Storage is full or nearly full',\n+          `DataGroup(${this.config.name}@${this.config.version}).detectStorageFull()`,\n+        );\n+      }\n+    } catch (err) {\n+      // Storage API call failed\n+      this.debugHandler.log(",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2223305197",
        "repo_full_name": "angular/angular",
        "pr_number": 62737,
        "pr_file": "packages/service-worker/worker/src/data.ts",
        "discussion_id": "2223305197",
        "commented_code": "@@ -624,4 +622,38 @@ export class DataGroup {\n       });\n     }\n   }\n+\n+  /**\n+   * Detect if storage is full or approaching capacity.\n+   * Returns true if storage is at or near capacity.\n+   */\n+  private async detectStorageFull() {\n+    try {\n+      const estimate = await navigator.storage.estimate();\n+      const {quota, usage} = estimate;\n+\n+      // Handle cases where quota or usage might be undefined\n+      if (typeof quota !== 'number' || typeof usage !== 'number') {\n+        return;\n+      }\n+\n+      // Consider storage \"full\" if usage is >= 95% of quota\n+      // This provides a safety buffer before actual storage exhaustion\n+      const usagePercentage = (usage / quota) * 100;\n+      const isStorageFull = usagePercentage >= 95;\n+\n+      if (isStorageFull) {\n+        this.debugHandler.log(\n+          'Storage is full or nearly full',\n+          `DataGroup(${this.config.name}@${this.config.version}).detectStorageFull()`,\n+        );\n+      }\n+    } catch (err) {\n+      // Storage API call failed\n+      this.debugHandler.log(",
        "comment_created_at": "2025-07-22T17:25:38+00:00",
        "comment_author": "atscott",
        "comment_body": "If the storage API is throwing, I can imagine it will always throw. Might it be better to just ignore the error or at least ensure this isn't logged more than once?",
        "pr_file_module": null
      },
      {
        "comment_id": "2223438759",
        "repo_full_name": "angular/angular",
        "pr_number": 62737,
        "pr_file": "packages/service-worker/worker/src/data.ts",
        "discussion_id": "2223305197",
        "commented_code": "@@ -624,4 +622,38 @@ export class DataGroup {\n       });\n     }\n   }\n+\n+  /**\n+   * Detect if storage is full or approaching capacity.\n+   * Returns true if storage is at or near capacity.\n+   */\n+  private async detectStorageFull() {\n+    try {\n+      const estimate = await navigator.storage.estimate();\n+      const {quota, usage} = estimate;\n+\n+      // Handle cases where quota or usage might be undefined\n+      if (typeof quota !== 'number' || typeof usage !== 'number') {\n+        return;\n+      }\n+\n+      // Consider storage \"full\" if usage is >= 95% of quota\n+      // This provides a safety buffer before actual storage exhaustion\n+      const usagePercentage = (usage / quota) * 100;\n+      const isStorageFull = usagePercentage >= 95;\n+\n+      if (isStorageFull) {\n+        this.debugHandler.log(\n+          'Storage is full or nearly full',\n+          `DataGroup(${this.config.name}@${this.config.version}).detectStorageFull()`,\n+        );\n+      }\n+    } catch (err) {\n+      // Storage API call failed\n+      this.debugHandler.log(",
        "comment_created_at": "2025-07-22T18:15:13+00:00",
        "comment_author": "SkyZeroZx",
        "comment_body": "@atscott  In theory, very little should happen based on the current baseline and Can Iuse.\r\nhttps://caniuse.com/mdn-api_storagemanager_estimate\r\n\r\nBut I agree it should be displayed once. I would use import {\r\n\u0275formatRuntimeError as formatRuntimeError,\r\n} from '@angular/core';\r\n\r\nOr could it be a local flag at the class level?\r\n\r\nO better only ignore the error in this case by baseline support",
        "pr_file_module": null
      },
      {
        "comment_id": "2223531901",
        "repo_full_name": "angular/angular",
        "pr_number": 62737,
        "pr_file": "packages/service-worker/worker/src/data.ts",
        "discussion_id": "2223305197",
        "commented_code": "@@ -624,4 +622,38 @@ export class DataGroup {\n       });\n     }\n   }\n+\n+  /**\n+   * Detect if storage is full or approaching capacity.\n+   * Returns true if storage is at or near capacity.\n+   */\n+  private async detectStorageFull() {\n+    try {\n+      const estimate = await navigator.storage.estimate();\n+      const {quota, usage} = estimate;\n+\n+      // Handle cases where quota or usage might be undefined\n+      if (typeof quota !== 'number' || typeof usage !== 'number') {\n+        return;\n+      }\n+\n+      // Consider storage \"full\" if usage is >= 95% of quota\n+      // This provides a safety buffer before actual storage exhaustion\n+      const usagePercentage = (usage / quota) * 100;\n+      const isStorageFull = usagePercentage >= 95;\n+\n+      if (isStorageFull) {\n+        this.debugHandler.log(\n+          'Storage is full or nearly full',\n+          `DataGroup(${this.config.name}@${this.config.version}).detectStorageFull()`,\n+        );\n+      }\n+    } catch (err) {\n+      // Storage API call failed\n+      this.debugHandler.log(",
        "comment_created_at": "2025-07-22T18:50:54+00:00",
        "comment_author": "atscott",
        "comment_body": "I think ignoring the error is reasonable due to baseline support. This is also only a debug/helpful check, not something that's required for things to work so the error doesn't _need_ to be reported",
        "pr_file_module": null
      },
      {
        "comment_id": "2223553150",
        "repo_full_name": "angular/angular",
        "pr_number": 62737,
        "pr_file": "packages/service-worker/worker/src/data.ts",
        "discussion_id": "2223305197",
        "commented_code": "@@ -624,4 +622,38 @@ export class DataGroup {\n       });\n     }\n   }\n+\n+  /**\n+   * Detect if storage is full or approaching capacity.\n+   * Returns true if storage is at or near capacity.\n+   */\n+  private async detectStorageFull() {\n+    try {\n+      const estimate = await navigator.storage.estimate();\n+      const {quota, usage} = estimate;\n+\n+      // Handle cases where quota or usage might be undefined\n+      if (typeof quota !== 'number' || typeof usage !== 'number') {\n+        return;\n+      }\n+\n+      // Consider storage \"full\" if usage is >= 95% of quota\n+      // This provides a safety buffer before actual storage exhaustion\n+      const usagePercentage = (usage / quota) * 100;\n+      const isStorageFull = usagePercentage >= 95;\n+\n+      if (isStorageFull) {\n+        this.debugHandler.log(\n+          'Storage is full or nearly full',\n+          `DataGroup(${this.config.name}@${this.config.version}).detectStorageFull()`,\n+        );\n+      }\n+    } catch (err) {\n+      // Storage API call failed\n+      this.debugHandler.log(",
        "comment_created_at": "2025-07-22T18:55:58+00:00",
        "comment_author": "SkyZeroZx",
        "comment_body": "@atscott  updated it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2230527661",
    "pr_number": 62797,
    "pr_file": "packages/language-service/src/completions.ts",
    "created_at": "2025-07-25T08:42:01+00:00",
    "commented_code": "this.typeChecker,\n           propertySymbol,\n           kind,\n-          completion.directive.tsSymbol.name,\n+          directive.tsSymbol.name,\n         );\n         if (info === null) {\n-          return undefined;\n+          break;",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2230527661",
        "repo_full_name": "angular/angular",
        "pr_number": 62797,
        "pr_file": "packages/language-service/src/completions.ts",
        "discussion_id": "2230527661",
        "commented_code": "@@ -1198,23 +1288,46 @@ export class CompletionBuilder<N extends TmplAstNode | AST> {\n           this.typeChecker,\n           propertySymbol,\n           kind,\n-          completion.directive.tsSymbol.name,\n+          directive.tsSymbol.name,\n         );\n         if (info === null) {\n-          return undefined;\n+          break;",
        "comment_created_at": "2025-07-25T08:42:01+00:00",
        "comment_author": "ivanwonder",
        "comment_body": "I think it's better to use `break` than `return`. After the `switch` statement, there is logic for the code action.",
        "pr_file_module": null
      },
      {
        "comment_id": "2242674797",
        "repo_full_name": "angular/angular",
        "pr_number": 62797,
        "pr_file": "packages/language-service/src/completions.ts",
        "discussion_id": "2230527661",
        "commented_code": "@@ -1198,23 +1288,46 @@ export class CompletionBuilder<N extends TmplAstNode | AST> {\n           this.typeChecker,\n           propertySymbol,\n           kind,\n-          completion.directive.tsSymbol.name,\n+          directive.tsSymbol.name,\n         );\n         if (info === null) {\n-          return undefined;\n+          break;",
        "comment_created_at": "2025-07-30T13:19:50+00:00",
        "comment_author": "ivanwonder",
        "comment_body": "For example, there is a bug in the function `getTsSymbolDisplayInfo`; if the symbol is a \"get\" accessor declaration, the function returns `null`, which causes the logic of the code action to be skipped. ",
        "pr_file_module": null
      }
    ]
  }
]