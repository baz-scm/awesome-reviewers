[
  {
    "discussion_id": "2279669074",
    "pr_number": 63081,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/router-tree/route-details-row.component.ts",
    "created_at": "2025-08-15T18:45:09+00:00",
    "commented_code": "import {Component, computed, input, output, ChangeDetectionStrategy} from '@angular/core';\n import {ButtonComponent} from '../../shared/button/button.component';\n+import {JsonPipe} from '@angular/common';\n \n export type RowType = 'text' | 'chip' | 'flag' | 'list';\n \n @Component({\n+  standalone: true,\n   selector: '[ng-route-details-row]',\n   templateUrl: './route-details-row.component.html',\n   styleUrls: ['./route-details-row.component.scss'],\n-  imports: [ButtonComponent],\n+  imports: [ButtonComponent, JsonPipe],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n })\n export class RouteDetailsRowComponent {\n   readonly label = input.required<string>();\n-  readonly data = input<string | boolean | string[]>();\n+  readonly data = input<any>();",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2279669074",
        "repo_full_name": "angular/angular",
        "pr_number": 63081,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/router-tree/route-details-row.component.ts",
        "discussion_id": "2279669074",
        "commented_code": "@@ -8,31 +8,36 @@\n \n import {Component, computed, input, output, ChangeDetectionStrategy} from '@angular/core';\n import {ButtonComponent} from '../../shared/button/button.component';\n+import {JsonPipe} from '@angular/common';\n \n export type RowType = 'text' | 'chip' | 'flag' | 'list';\n \n @Component({\n+  standalone: true,\n   selector: '[ng-route-details-row]',\n   templateUrl: './route-details-row.component.html',\n   styleUrls: ['./route-details-row.component.scss'],\n-  imports: [ButtonComponent],\n+  imports: [ButtonComponent, JsonPipe],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n })\n export class RouteDetailsRowComponent {\n   readonly label = input.required<string>();\n-  readonly data = input<string | boolean | string[]>();\n+  readonly data = input<any>();",
        "comment_created_at": "2025-08-15T18:45:09+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Style: Prefer `unknown` over `any`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2194677243",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
    "created_at": "2025-07-09T10:36:50+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2194677243",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
        "discussion_id": "2194677243",
        "commented_code": "@@ -0,0 +1,211 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);",
        "comment_created_at": "2025-07-09T10:36:50+00:00",
        "comment_author": "hawkgs",
        "comment_body": "Style: We are no longer prefixing the private members with underscores.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2280606535",
    "pr_number": 63197,
    "pr_file": "adev/src/app/core/constants/links.ts",
    "created_at": "2025-08-16T21:16:32+00:00",
    "commented_code": "export const YOUTUBE = 'https://www.youtube.com/angular';\n export const DISCORD = 'https://discord.gg/angular';\n export const BLUESKY = 'https://bsky.app/profile/angular.dev';\n+export const StackOverflow = 'https://stackoverflow.com/questions/tagged/angular';",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2280606535",
        "repo_full_name": "angular/angular",
        "pr_number": 63197,
        "pr_file": "adev/src/app/core/constants/links.ts",
        "discussion_id": "2280606535",
        "commented_code": "@@ -12,3 +12,4 @@ export const MEDIUM = 'https://blog.angular.dev';\n export const YOUTUBE = 'https://www.youtube.com/angular';\n export const DISCORD = 'https://discord.gg/angular';\n export const BLUESKY = 'https://bsky.app/profile/angular.dev';\n+export const StackOverflow = 'https://stackoverflow.com/questions/tagged/angular';",
        "comment_created_at": "2025-08-16T21:16:32+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "If we add it, let's remain consistent. \r\n```suggestion\r\nexport const STACKOVERFLOW = 'https://stackoverflow.com/questions/tagged/angular';\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2280734073",
        "repo_full_name": "angular/angular",
        "pr_number": 63197,
        "pr_file": "adev/src/app/core/constants/links.ts",
        "discussion_id": "2280606535",
        "commented_code": "@@ -12,3 +12,4 @@ export const MEDIUM = 'https://blog.angular.dev';\n export const YOUTUBE = 'https://www.youtube.com/angular';\n export const DISCORD = 'https://discord.gg/angular';\n export const BLUESKY = 'https://bsky.app/profile/angular.dev';\n+export const StackOverflow = 'https://stackoverflow.com/questions/tagged/angular';",
        "comment_created_at": "2025-08-17T05:53:51+00:00",
        "comment_author": "MeAkib",
        "comment_body": "@JeanMeche  We\u2019re currently exporting each link as individual constants and then re-declaring them as readonly properties.\r\n\r\nDo you think it would make sense to group them into a single object and use as const? That way we could avoid repeating properties and keep everything in one place.",
        "pr_file_module": null
      },
      {
        "comment_id": "2280777421",
        "repo_full_name": "angular/angular",
        "pr_number": 63197,
        "pr_file": "adev/src/app/core/constants/links.ts",
        "discussion_id": "2280606535",
        "commented_code": "@@ -12,3 +12,4 @@ export const MEDIUM = 'https://blog.angular.dev';\n export const YOUTUBE = 'https://www.youtube.com/angular';\n export const DISCORD = 'https://discord.gg/angular';\n export const BLUESKY = 'https://bsky.app/profile/angular.dev';\n+export const StackOverflow = 'https://stackoverflow.com/questions/tagged/angular';",
        "comment_created_at": "2025-08-17T08:11:44+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "Yeah, it's a good suggestion ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191125472",
    "pr_number": 62429,
    "pr_file": "devtools/projects/ng-devtools/src/lib/application-services/settings_store_service.ts",
    "created_at": "2025-07-07T22:44:22+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {effect, inject, Injectable, Injector, signal, WritableSignal} from '@angular/core';\n+import {ApplicationOperations} from '../application-operations';\n+\n+export const SETTINGS_STORE_KEY = 'ng-dt-settings';\n+\n+@Injectable({providedIn: 'root'})\n+/** Provides an API for storing and preserving settings values. */",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2191125472",
        "repo_full_name": "angular/angular",
        "pr_number": 62429,
        "pr_file": "devtools/projects/ng-devtools/src/lib/application-services/settings_store_service.ts",
        "discussion_id": "2191125472",
        "commented_code": "@@ -0,0 +1,74 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {effect, inject, Injectable, Injector, signal, WritableSignal} from '@angular/core';\n+import {ApplicationOperations} from '../application-operations';\n+\n+export const SETTINGS_STORE_KEY = 'ng-dt-settings';\n+\n+@Injectable({providedIn: 'root'})\n+/** Provides an API for storing and preserving settings values. */",
        "comment_created_at": "2025-07-07T22:44:22+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Style: Typically I see doc comments precede decorators.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191229678",
    "pr_number": 62429,
    "pr_file": "devtools/src/demo-application-operations.ts",
    "created_at": "2025-07-08T00:12:06+00:00",
    "commented_code": "* found in the LICENSE file at https://angular.dev/license\n  */\n \n+import {inject} from '@angular/core';\n import {ApplicationOperations} from '../projects/ng-devtools';\n import {DirectivePosition, ElementPosition, SignalNodePosition} from '../projects/protocol';\n+import {LOCAL_STORAGE} from './local-storage.provider';\n+\n+const STORAGE_KEY = 'ng-dt-storage-sim';\n \n export class DemoApplicationOperations extends ApplicationOperations {\n+  private readonly localStorage = inject(LOCAL_STORAGE);\n+\n   override viewSource(position: ElementPosition): void {\n     console.warn('viewSource() is not implemented because the demo app runs in an Iframe');\n     throw new Error('Not implemented in demo app.');\n   }\n+\n   override selectDomElement(position: ElementPosition): void {\n     console.warn('selectDomElement() is not implemented because the demo app runs in an Iframe');\n     throw new Error('Not implemented in demo app.');\n   }\n+\n   override inspect(directivePosition: DirectivePosition, keyPath: string[]): void {\n     console.warn('inspect() is not implemented because the demo app runs in an Iframe');\n     return;\n   }\n+\n   override inspectSignal(position: SignalNodePosition): void {\n     console.warn('inspectSignal() is not implemented because the demo app runs in an Iframe');\n     return;\n   }\n+\n   override viewSourceFromRouter(name: string, type: string): void {\n     console.warn(\n       'viewSourceFromRouter() is not implemented because the demo app runs in an Iframe',\n     );\n     throw new Error('Not implemented in demo app.');\n   }\n+\n+  override setStorageItems(items: {[key: string]: unknown}): Promise<void> {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2191229678",
        "repo_full_name": "angular/angular",
        "pr_number": 62429,
        "pr_file": "devtools/src/demo-application-operations.ts",
        "discussion_id": "2191229678",
        "commented_code": "@@ -6,30 +6,91 @@\n  * found in the LICENSE file at https://angular.dev/license\n  */\n \n+import {inject} from '@angular/core';\n import {ApplicationOperations} from '../projects/ng-devtools';\n import {DirectivePosition, ElementPosition, SignalNodePosition} from '../projects/protocol';\n+import {LOCAL_STORAGE} from './local-storage.provider';\n+\n+const STORAGE_KEY = 'ng-dt-storage-sim';\n \n export class DemoApplicationOperations extends ApplicationOperations {\n+  private readonly localStorage = inject(LOCAL_STORAGE);\n+\n   override viewSource(position: ElementPosition): void {\n     console.warn('viewSource() is not implemented because the demo app runs in an Iframe');\n     throw new Error('Not implemented in demo app.');\n   }\n+\n   override selectDomElement(position: ElementPosition): void {\n     console.warn('selectDomElement() is not implemented because the demo app runs in an Iframe');\n     throw new Error('Not implemented in demo app.');\n   }\n+\n   override inspect(directivePosition: DirectivePosition, keyPath: string[]): void {\n     console.warn('inspect() is not implemented because the demo app runs in an Iframe');\n     return;\n   }\n+\n   override inspectSignal(position: SignalNodePosition): void {\n     console.warn('inspectSignal() is not implemented because the demo app runs in an Iframe');\n     return;\n   }\n+\n   override viewSourceFromRouter(name: string, type: string): void {\n     console.warn(\n       'viewSourceFromRouter() is not implemented because the demo app runs in an Iframe',\n     );\n     throw new Error('Not implemented in demo app.');\n   }\n+\n+  override setStorageItems(items: {[key: string]: unknown}): Promise<void> {",
        "comment_created_at": "2025-07-08T00:12:06+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Style: Prefer `async` keyword over `return Promise.resolve();`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191232716",
    "pr_number": 62429,
    "pr_file": "devtools/projects/ng-devtools/src/lib/application-services/settings_store_service_spec.ts",
    "created_at": "2025-07-08T00:16:20+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {fakeAsync, TestBed, tick} from '@angular/core/testing';\n+import {SETTINGS_STORE_KEY, SettingsStoreService} from './settings_store_service';\n+import {ApplicationOperations} from '../application-operations';\n+import {DirectivePosition, ElementPosition, SignalNodePosition} from '../../../../protocol';\n+import {Frame} from '../application-environment';\n+\n+describe('SettingsStoreService', () => {\n+  let settingsStore: SettingsStoreService;\n+  let getStoredSettings: () => {[key: string]: unknown};\n+\n+  beforeEach(fakeAsync(() => {\n+    const appOperationsMock = new AppOperationsMock();\n+\n+    TestBed.configureTestingModule({\n+      providers: [\n+        SettingsStoreService,\n+        {provide: ApplicationOperations, useValue: appOperationsMock},\n+      ],\n+      teardown: {destroyAfterEach: false},\n+    });\n+\n+    settingsStore = TestBed.inject(SettingsStoreService);\n+    getStoredSettings = () => appOperationsMock.getStoredSettings();\n+\n+    // We should make sure that the promise for loading the initial\n+    // data, initialized in the constructor, is resolved.\n+    tick();\n+  }));\n+\n+  it('should return a settings item with an initial value', () => {\n+    const item = settingsStore.get('item@test', 'foo');\n+    expect(item()).toEqual('foo');\n+  });\n+\n+  it('should set a settings item value', fakeAsync(() => {\n+    const value = settingsStore.get('item@test', 'foo');\n+    expect(value()).toEqual('foo');\n+\n+    value.set('bar');\n+\n+    tick();\n+\n+    expect(getStoredSettings()['item@test']).toEqual('bar');\n+  }));\n+\n+  it('should set multiple values to a single settings item', fakeAsync(() => {\n+    const value = settingsStore.get('item@test', 'foo');\n+    expect(value()).toEqual('foo');\n+\n+    value.set('bar');\n+    tick();\n+    expect(getStoredSettings()['item@test']).toEqual('bar');\n+\n+    value.set('baz');\n+    tick();\n+    expect(getStoredSettings()['item@test']).toEqual('baz');\n+  }));\n+\n+  it('should set values to multiple settings items', fakeAsync(() => {\n+    const first = settingsStore.get('first@test', 'not_set');\n+    const second = settingsStore.get('second@test', 'not_set');\n+    expect(first()).toEqual('not_set');\n+    expect(second()).toEqual('not_set');\n+\n+    first.set('1st');\n+    second.set('2nd');\n+\n+    tick();\n+\n+    expect(getStoredSettings()['first@test']).toEqual('1st');\n+    expect(getStoredSettings()['second@test']).toEqual('2nd');\n+  }));\n+\n+  it('should keep in sync multiple instances of the same settings item', fakeAsync(() => {\n+    const foo = settingsStore.get('item@test', 'foo');\n+    const bar = settingsStore.get('item@test', 'bar');\n+    expect(foo()).toEqual('foo');\n+    expect(bar()).toEqual('foo');\n+\n+    bar.set('baz');\n+    tick();\n+\n+    expect(foo()).toEqual('baz');\n+    expect(bar()).toEqual('baz');\n+\n+    expect(getStoredSettings()['item@test']).toEqual('baz');\n+  }));\n+});\n+\n+class AppOperationsMock extends ApplicationOperations {\n+  private storage: {[key: string]: unknown} = {};\n+\n+  /** Helper method \u2013\u00a0gives access to stored settings */\n+  getStoredSettings() {\n+    return this.storage[SETTINGS_STORE_KEY] as {[key: string]: unknown};\n+  }\n+\n+  override setStorageItems(items: {[key: string]: unknown}): Promise<void> {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2191232716",
        "repo_full_name": "angular/angular",
        "pr_number": 62429,
        "pr_file": "devtools/projects/ng-devtools/src/lib/application-services/settings_store_service_spec.ts",
        "discussion_id": "2191232716",
        "commented_code": "@@ -0,0 +1,149 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {fakeAsync, TestBed, tick} from '@angular/core/testing';\n+import {SETTINGS_STORE_KEY, SettingsStoreService} from './settings_store_service';\n+import {ApplicationOperations} from '../application-operations';\n+import {DirectivePosition, ElementPosition, SignalNodePosition} from '../../../../protocol';\n+import {Frame} from '../application-environment';\n+\n+describe('SettingsStoreService', () => {\n+  let settingsStore: SettingsStoreService;\n+  let getStoredSettings: () => {[key: string]: unknown};\n+\n+  beforeEach(fakeAsync(() => {\n+    const appOperationsMock = new AppOperationsMock();\n+\n+    TestBed.configureTestingModule({\n+      providers: [\n+        SettingsStoreService,\n+        {provide: ApplicationOperations, useValue: appOperationsMock},\n+      ],\n+      teardown: {destroyAfterEach: false},\n+    });\n+\n+    settingsStore = TestBed.inject(SettingsStoreService);\n+    getStoredSettings = () => appOperationsMock.getStoredSettings();\n+\n+    // We should make sure that the promise for loading the initial\n+    // data, initialized in the constructor, is resolved.\n+    tick();\n+  }));\n+\n+  it('should return a settings item with an initial value', () => {\n+    const item = settingsStore.get('item@test', 'foo');\n+    expect(item()).toEqual('foo');\n+  });\n+\n+  it('should set a settings item value', fakeAsync(() => {\n+    const value = settingsStore.get('item@test', 'foo');\n+    expect(value()).toEqual('foo');\n+\n+    value.set('bar');\n+\n+    tick();\n+\n+    expect(getStoredSettings()['item@test']).toEqual('bar');\n+  }));\n+\n+  it('should set multiple values to a single settings item', fakeAsync(() => {\n+    const value = settingsStore.get('item@test', 'foo');\n+    expect(value()).toEqual('foo');\n+\n+    value.set('bar');\n+    tick();\n+    expect(getStoredSettings()['item@test']).toEqual('bar');\n+\n+    value.set('baz');\n+    tick();\n+    expect(getStoredSettings()['item@test']).toEqual('baz');\n+  }));\n+\n+  it('should set values to multiple settings items', fakeAsync(() => {\n+    const first = settingsStore.get('first@test', 'not_set');\n+    const second = settingsStore.get('second@test', 'not_set');\n+    expect(first()).toEqual('not_set');\n+    expect(second()).toEqual('not_set');\n+\n+    first.set('1st');\n+    second.set('2nd');\n+\n+    tick();\n+\n+    expect(getStoredSettings()['first@test']).toEqual('1st');\n+    expect(getStoredSettings()['second@test']).toEqual('2nd');\n+  }));\n+\n+  it('should keep in sync multiple instances of the same settings item', fakeAsync(() => {\n+    const foo = settingsStore.get('item@test', 'foo');\n+    const bar = settingsStore.get('item@test', 'bar');\n+    expect(foo()).toEqual('foo');\n+    expect(bar()).toEqual('foo');\n+\n+    bar.set('baz');\n+    tick();\n+\n+    expect(foo()).toEqual('baz');\n+    expect(bar()).toEqual('baz');\n+\n+    expect(getStoredSettings()['item@test']).toEqual('baz');\n+  }));\n+});\n+\n+class AppOperationsMock extends ApplicationOperations {\n+  private storage: {[key: string]: unknown} = {};\n+\n+  /** Helper method \u2013\u00a0gives access to stored settings */\n+  getStoredSettings() {\n+    return this.storage[SETTINGS_STORE_KEY] as {[key: string]: unknown};\n+  }\n+\n+  override setStorageItems(items: {[key: string]: unknown}): Promise<void> {",
        "comment_created_at": "2025-07-08T00:16:20+00:00",
        "comment_author": "dgp1130",
        "comment_body": "Style: Prefer `async` over `return Promise.resolve();`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2280917271",
    "pr_number": 63200,
    "pr_file": "adev/src/app/features/references/api-reference-details-page/api-reference-details-page.component.ts",
    "created_at": "2025-08-17T15:11:03+00:00",
    "commented_code": "private highlightedElement: HTMLElement | null = null;\n \n-  docContent = input<DocContent | undefined>();\n+  readonly docContent = input<DocContent | undefined>();\n   urlFragment = toSignal(this.route.fragment);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2280917271",
        "repo_full_name": "angular/angular",
        "pr_number": 63200,
        "pr_file": "adev/src/app/features/references/api-reference-details-page/api-reference-details-page.component.ts",
        "discussion_id": "2280917271",
        "commented_code": "@@ -32,7 +32,7 @@ export default class ApiReferenceDetailsPage {\n \n   private highlightedElement: HTMLElement | null = null;\n \n-  docContent = input<DocContent | undefined>();\n+  readonly docContent = input<DocContent | undefined>();\n   urlFragment = toSignal(this.route.fragment);",
        "comment_created_at": "2025-08-17T15:11:03+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "```suggestion\r\n  readonly urlFragment = toSignal(this.route.fragment);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2282929958",
    "pr_number": 63200,
    "pr_file": "adev/shared-docs/components/top-level-banner/top-level-banner.component.ts",
    "created_at": "2025-08-18T16:45:31+00:00",
    "commented_code": "* separately for different events or instances. Without a unique ID,\n    * closing one banner could inadvertently hide other banners for different events.\n    */\n-  id = input.required<string>();\n+  readonly id = input.required<string>();\n   // Optional URL link that the banner should navigate to when clicked.\n-  link = input<string>();\n+  readonly link = input<string>();\n   // Text content to be displayed in the banner.\n-  text = input.required<string>();\n+  readonly text = input.required<string>();\n   // Optional expiry date. Setting the default expiry as a future date so we\n   // don't have to deal with undefined signal values.\n-  expiry = input(new Date('3000-01-01'), {transform: parseDate});\n+  readonly expiry = input(new Date('3000-01-01'), {transform: parseDate});\n   // Whether the user has closed the banner or the survey has expired.\n   hasClosed = linkedSignal(() => {",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2282929958",
        "repo_full_name": "angular/angular",
        "pr_number": 63200,
        "pr_file": "adev/shared-docs/components/top-level-banner/top-level-banner.component.ts",
        "discussion_id": "2282929958",
        "commented_code": "@@ -29,14 +29,14 @@ export class TopLevelBannerComponent {\n    * separately for different events or instances. Without a unique ID,\n    * closing one banner could inadvertently hide other banners for different events.\n    */\n-  id = input.required<string>();\n+  readonly id = input.required<string>();\n   // Optional URL link that the banner should navigate to when clicked.\n-  link = input<string>();\n+  readonly link = input<string>();\n   // Text content to be displayed in the banner.\n-  text = input.required<string>();\n+  readonly text = input.required<string>();\n   // Optional expiry date. Setting the default expiry as a future date so we\n   // don't have to deal with undefined signal values.\n-  expiry = input(new Date('3000-01-01'), {transform: parseDate});\n+  readonly expiry = input(new Date('3000-01-01'), {transform: parseDate});\n   // Whether the user has closed the banner or the survey has expired.\n   hasClosed = linkedSignal(() => {",
        "comment_created_at": "2025-08-18T16:45:31+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "```suggestion\r\n  readonly hasClosed = linkedSignal(() => {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193212910",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
    "created_at": "2025-07-08T18:42:06+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);\n+  readonly MAX_DISPLAY_LENGTH = 200;",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2193212910",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
        "discussion_id": "2193212910",
        "commented_code": "@@ -0,0 +1,211 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);\n+  readonly MAX_DISPLAY_LENGTH = 200;",
        "comment_created_at": "2025-07-08T18:42:06+00:00",
        "comment_author": "JeanMeche",
        "comment_body": "This can be extracted as a `const`\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2194730711",
    "pr_number": 62465,
    "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
    "created_at": "2025-07-09T11:05:10+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);\n+  readonly MAX_DISPLAY_LENGTH = 200;\n+\n+  readonly transferStateData = signal<Record<string, TransferStateValue> | null>(null);\n+  readonly error = signal<string | null>(null);\n+  readonly isLoading = signal(false);\n+\n+  readonly transferStateItems = computed<TransferStateItem[]>(() => {\n+    const data = this.transferStateData();\n+    if (!data) return [];\n+\n+    return Object.entries(data).map(([key, value]) => ({\n+      key,\n+      value,\n+      type: this.getValueType(value),\n+      size: this.getValueSize(value),\n+      isExpanded: false,\n+      isCopied: false,\n+    }));\n+  });\n+\n+  readonly hasData = computed(() => this.transferStateItems().length > 0);\n+\n+  readonly totalSize = computed(() => {\n+    const items = this.transferStateItems();\n+    if (items.length === 0) return '0 B';\n+\n+    let totalBytes = 0;\n+    for (const item of items) {\n+      const str = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);\n+      totalBytes += new Blob([str]).size;\n+    }\n+\n+    if (totalBytes < 1024) return `${totalBytes} B`;\n+    if (totalBytes < 1024 * 1024) return `${(totalBytes / 1024).toFixed(1)} KB`;\n+    return `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;\n+  });\n+\n+  displayedColumns: string[] = ['key', 'type', 'size', 'value'];\n+\n+  constructor() {\n+    this.loadTransferState();\n+  }\n+\n+  private getValueType(value: TransferStateValue): string {\n+    if (value === null) return 'null';\n+    if (Array.isArray(value)) return 'array';\n+    return typeof value;\n+  }\n+\n+  getValueSize(value: TransferStateValue): string {\n+    try {\n+      const str = JSON.stringify(value);\n+      const bytes = new Blob([str]).size;\n+      if (bytes < 1024) return `${bytes} B`;\n+      if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n+      return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n+    } catch {\n+      return 'unknown';\n+    }\n+  }\n+\n+  private formatValue(value: TransferStateValue, isExpanded = false): string {\n+    const formatters = {\n+      null: () => 'null',\n+      undefined: () => 'undefined',\n+      string: (val: string) => `\"${val}\"`,\n+      object: (val: object) => JSON.stringify(val, null, 2),\n+      default: (val: unknown) => String(val),\n+    };\n+\n+    const getFormattedValue = (val: TransferStateValue): string => {\n+      if (val === null) return formatters.null();\n+      if (val === undefined) return formatters.undefined();\n+      if (typeof val === 'string') return formatters.string(val);\n+      if (typeof val === 'object') return formatters.object(val);\n+      return formatters.default(val);\n+    };\n+\n+    const formatted = getFormattedValue(value);\n+\n+    return this.truncateIfNeeded(formatted, isExpanded);\n+  }\n+\n+  private truncateIfNeeded(text: string, isExpanded: boolean): string {\n+    if (isExpanded || text.length <= this.MAX_DISPLAY_LENGTH) {\n+      return text;\n+    }\n+\n+    return text.substring(0, this.MAX_DISPLAY_LENGTH) + '...';\n+  }\n+\n+  loadTransferState(): void {\n+    this.isLoading.set(true);\n+    this.error.set(null);\n+\n+    try {\n+      this._messageBus.emit('getTransferState');\n+      this._messageBus.on(\n+        'transferStateData',\n+        (data: Record<string, TransferStateValue> | null) => {\n+          this.transferStateData.set(data);\n+          this.isLoading.set(false);\n+          if (!data) {\n+            this.error.set(\n+              'No transfer state found. Make sure you are inspecting a page with Server-Side Rendering (SSR) enabled.',\n+            );\n+          }\n+        },\n+      );\n+    } catch (err) {\n+      this.error.set(`Error loading transfer state: ${err}`);\n+      this.isLoading.set(false);\n+    }\n+  }\n+\n+  refresh(): void {\n+    this.loadTransferState();\n+  }\n+\n+  getFormattedValue(item: TransferStateItem): string {\n+    return this.formatValue(item.value, item.isExpanded);\n+  }\n+\n+  isValueLong(value: TransferStateValue): boolean {\n+    const formatted = this.formatValue(value, true);\n+    return formatted.length > this.MAX_DISPLAY_LENGTH;\n+  }\n+\n+  toggleExpanded(item: TransferStateItem): void {\n+    item.isExpanded = !item.isExpanded;\n+  }\n+\n+  copyToClipboard(item: TransferStateItem): void {\n+    try {\n+      const textToCopy =\n+        typeof item.value === 'string' ? item.value : JSON.stringify(item.value, null, 2);\n+\n+      this._clipboard.copy(textToCopy);\n+\n+      item.isCopied = true;\n+      setTimeout(() => {\n+        item.isCopied = false;\n+      }, 2000);",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2194730711",
        "repo_full_name": "angular/angular",
        "pr_number": 62465,
        "pr_file": "devtools/projects/ng-devtools/src/lib/devtools-tabs/transfer-state/transfer-state.component.ts",
        "discussion_id": "2194730711",
        "commented_code": "@@ -0,0 +1,211 @@\n+/**\n+ * @license\n+ * Copyright Google LLC All Rights Reserved.\n+ *\n+ * Use of this source code is governed by an MIT-style license that can be\n+ * found in the LICENSE file at https://angular.dev/license\n+ */\n+\n+import {Component, inject, signal, computed, ChangeDetectionStrategy} from '@angular/core';\n+import {Clipboard} from '@angular/cdk/clipboard';\n+import {MatIcon} from '@angular/material/icon';\n+import {MatTooltip} from '@angular/material/tooltip';\n+import {\n+  MatTable,\n+  MatHeaderCell,\n+  MatCell,\n+  MatHeaderRow,\n+  MatRow,\n+  MatColumnDef,\n+  MatHeaderCellDef,\n+  MatCellDef,\n+  MatHeaderRowDef,\n+  MatRowDef,\n+} from '@angular/material/table';\n+import {CommonModule} from '@angular/common';\n+import {ButtonComponent} from '../../shared/button/button.component';\n+import {Events, MessageBus, TransferStateValue} from '../../../../../protocol';\n+\n+interface TransferStateItem {\n+  key: string;\n+  value: TransferStateValue;\n+  type: string;\n+  size: string;\n+  isExpanded?: boolean;\n+  isCopied?: boolean;\n+}\n+\n+@Component({\n+  selector: 'ng-transfer-state',\n+  standalone: true,\n+  imports: [\n+    CommonModule,\n+    MatIcon,\n+    MatTooltip,\n+    MatTable,\n+    MatHeaderCell,\n+    MatCell,\n+    MatHeaderRow,\n+    MatRow,\n+    MatColumnDef,\n+    MatHeaderCellDef,\n+    MatCellDef,\n+    MatHeaderRowDef,\n+    MatRowDef,\n+    ButtonComponent,\n+  ],\n+  templateUrl: './transfer-state.component.html',\n+  styleUrls: ['./transfer-state.component.scss'],\n+  changeDetection: ChangeDetectionStrategy.OnPush,\n+})\n+export class TransferStateComponent {\n+  private _messageBus = inject(MessageBus) as MessageBus<Events>;\n+  private _clipboard = inject(Clipboard);\n+  readonly MAX_DISPLAY_LENGTH = 200;\n+\n+  readonly transferStateData = signal<Record<string, TransferStateValue> | null>(null);\n+  readonly error = signal<string | null>(null);\n+  readonly isLoading = signal(false);\n+\n+  readonly transferStateItems = computed<TransferStateItem[]>(() => {\n+    const data = this.transferStateData();\n+    if (!data) return [];\n+\n+    return Object.entries(data).map(([key, value]) => ({\n+      key,\n+      value,\n+      type: this.getValueType(value),\n+      size: this.getValueSize(value),\n+      isExpanded: false,\n+      isCopied: false,\n+    }));\n+  });\n+\n+  readonly hasData = computed(() => this.transferStateItems().length > 0);\n+\n+  readonly totalSize = computed(() => {\n+    const items = this.transferStateItems();\n+    if (items.length === 0) return '0 B';\n+\n+    let totalBytes = 0;\n+    for (const item of items) {\n+      const str = typeof item.value === 'string' ? item.value : JSON.stringify(item.value);\n+      totalBytes += new Blob([str]).size;\n+    }\n+\n+    if (totalBytes < 1024) return `${totalBytes} B`;\n+    if (totalBytes < 1024 * 1024) return `${(totalBytes / 1024).toFixed(1)} KB`;\n+    return `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;\n+  });\n+\n+  displayedColumns: string[] = ['key', 'type', 'size', 'value'];\n+\n+  constructor() {\n+    this.loadTransferState();\n+  }\n+\n+  private getValueType(value: TransferStateValue): string {\n+    if (value === null) return 'null';\n+    if (Array.isArray(value)) return 'array';\n+    return typeof value;\n+  }\n+\n+  getValueSize(value: TransferStateValue): string {\n+    try {\n+      const str = JSON.stringify(value);\n+      const bytes = new Blob([str]).size;\n+      if (bytes < 1024) return `${bytes} B`;\n+      if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n+      return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n+    } catch {\n+      return 'unknown';\n+    }\n+  }\n+\n+  private formatValue(value: TransferStateValue, isExpanded = false): string {\n+    const formatters = {\n+      null: () => 'null',\n+      undefined: () => 'undefined',\n+      string: (val: string) => `\"${val}\"`,\n+      object: (val: object) => JSON.stringify(val, null, 2),\n+      default: (val: unknown) => String(val),\n+    };\n+\n+    const getFormattedValue = (val: TransferStateValue): string => {\n+      if (val === null) return formatters.null();\n+      if (val === undefined) return formatters.undefined();\n+      if (typeof val === 'string') return formatters.string(val);\n+      if (typeof val === 'object') return formatters.object(val);\n+      return formatters.default(val);\n+    };\n+\n+    const formatted = getFormattedValue(value);\n+\n+    return this.truncateIfNeeded(formatted, isExpanded);\n+  }\n+\n+  private truncateIfNeeded(text: string, isExpanded: boolean): string {\n+    if (isExpanded || text.length <= this.MAX_DISPLAY_LENGTH) {\n+      return text;\n+    }\n+\n+    return text.substring(0, this.MAX_DISPLAY_LENGTH) + '...';\n+  }\n+\n+  loadTransferState(): void {\n+    this.isLoading.set(true);\n+    this.error.set(null);\n+\n+    try {\n+      this._messageBus.emit('getTransferState');\n+      this._messageBus.on(\n+        'transferStateData',\n+        (data: Record<string, TransferStateValue> | null) => {\n+          this.transferStateData.set(data);\n+          this.isLoading.set(false);\n+          if (!data) {\n+            this.error.set(\n+              'No transfer state found. Make sure you are inspecting a page with Server-Side Rendering (SSR) enabled.',\n+            );\n+          }\n+        },\n+      );\n+    } catch (err) {\n+      this.error.set(`Error loading transfer state: ${err}`);\n+      this.isLoading.set(false);\n+    }\n+  }\n+\n+  refresh(): void {\n+    this.loadTransferState();\n+  }\n+\n+  getFormattedValue(item: TransferStateItem): string {\n+    return this.formatValue(item.value, item.isExpanded);\n+  }\n+\n+  isValueLong(value: TransferStateValue): boolean {\n+    const formatted = this.formatValue(value, true);\n+    return formatted.length > this.MAX_DISPLAY_LENGTH;\n+  }\n+\n+  toggleExpanded(item: TransferStateItem): void {\n+    item.isExpanded = !item.isExpanded;\n+  }\n+\n+  copyToClipboard(item: TransferStateItem): void {\n+    try {\n+      const textToCopy =\n+        typeof item.value === 'string' ? item.value : JSON.stringify(item.value, null, 2);\n+\n+      this._clipboard.copy(textToCopy);\n+\n+      item.isCopied = true;\n+      setTimeout(() => {\n+        item.isCopied = false;\n+      }, 2000);",
        "comment_created_at": "2025-07-09T11:05:10+00:00",
        "comment_author": "hawkgs",
        "comment_body": "I would move this in a `const` at the top of the file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2219975254",
    "pr_number": 62630,
    "pr_file": "packages/compiler/src/template/pipeline/src/phases/reify.ts",
    "created_at": "2025-07-21T18:40:57+00:00",
    "commented_code": "} from '../compilation';\n import * as ng from '../instruction';\n \n+const ARIA_PREFIX = 'aria';",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2219975254",
        "repo_full_name": "angular/angular",
        "pr_number": 62630,
        "pr_file": "packages/compiler/src/template/pipeline/src/phases/reify.ts",
        "discussion_id": "2219975254",
        "commented_code": "@@ -17,6 +17,8 @@ import {\n } from '../compilation';\n import * as ng from '../instruction';\n \n+const ARIA_PREFIX = 'aria';",
        "comment_created_at": "2025-07-21T18:40:57+00:00",
        "comment_author": "jelbourn",
        "comment_body": "optional: does having this as a constant meaningfully improve the code vs using using `'aria'` and `4` inline? I don't imagine the prefix ever changing, so things would be a bit more concise without the indirection \n\n(it's probably safe to assume a JS optimizer would do this, so it's _probably_ not a performance concern, just a code style one, but it also wouldn't hurt to double check that) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2220297933",
        "repo_full_name": "angular/angular",
        "pr_number": 62630,
        "pr_file": "packages/compiler/src/template/pipeline/src/phases/reify.ts",
        "discussion_id": "2219975254",
        "commented_code": "@@ -17,6 +17,8 @@ import {\n } from '../compilation';\n import * as ng from '../instruction';\n \n+const ARIA_PREFIX = 'aria';",
        "comment_created_at": "2025-07-21T20:50:07+00:00",
        "comment_author": "leonsenft",
        "comment_body": "Yeah I'm not really familiar with the details of JSCompiler's optimizations so I favored avoiding repetition. For example, surely all `'aria'` instances would be folded into the same constant, but what about `'aria-'`? My guess is we'd then ship `'aria'` and `'aria-'` as separate strings, instead of just `'aria'` and `'-'`.\r\n\r\n**Question** Do we have any quick ways to evaluate the output?\r\n\r\nEdit: I realize we might not be as concerned with the compiler (although I assume this is reused by the runtime compiler), there is a duplicate version of this function in core.\r\n\r\nEdit: I recall that I had originally inlined the length and @crisbeto specifically requested I replace the magic number https://github.com/angular/angular/pull/62630#discussion_r2206686474\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2291802384",
    "pr_number": 63298,
    "pr_file": "packages/forms/signals/src/api/validators/required.ts",
    "created_at": "2025-08-21T18:12:24+00:00",
    "commented_code": "import {aggregateProperty, property, validate} from '../logic';\n import {REQUIRED} from '../property';\n import {FieldPath, LogicFn, PathKind} from '../types';\n-import {ValidationError} from '../validation_errors';\n+import {requiredError, RequiredValidationError} from '../validation_errors';",
    "repo_full_name": "angular/angular",
    "discussion_comments": [
      {
        "comment_id": "2291802384",
        "repo_full_name": "angular/angular",
        "pr_number": 63298,
        "pr_file": "packages/forms/signals/src/api/validators/required.ts",
        "discussion_id": "2291802384",
        "commented_code": "@@ -10,7 +10,7 @@ import {computed} from '@angular/core';\n import {aggregateProperty, property, validate} from '../logic';\n import {REQUIRED} from '../property';\n import {FieldPath, LogicFn, PathKind} from '../types';\n-import {ValidationError} from '../validation_errors';\n+import {requiredError, RequiredValidationError} from '../validation_errors';",
        "comment_created_at": "2025-08-21T18:12:24+00:00",
        "comment_author": "mmalerba",
        "comment_body": "ultra-nit: I don't think `RequiredValidationError` is actually needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2292046196",
        "repo_full_name": "angular/angular",
        "pr_number": 63298,
        "pr_file": "packages/forms/signals/src/api/validators/required.ts",
        "discussion_id": "2291802384",
        "commented_code": "@@ -10,7 +10,7 @@ import {computed} from '@angular/core';\n import {aggregateProperty, property, validate} from '../logic';\n import {REQUIRED} from '../property';\n import {FieldPath, LogicFn, PathKind} from '../types';\n-import {ValidationError} from '../validation_errors';\n+import {requiredError, RequiredValidationError} from '../validation_errors';",
        "comment_created_at": "2025-08-21T20:16:13+00:00",
        "comment_author": "leonsenft",
        "comment_body": "Good catch! Also I don't really think this is a nit, I feel like we should have a presubmit check for unused imports \ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292254972",
        "repo_full_name": "angular/angular",
        "pr_number": 63298,
        "pr_file": "packages/forms/signals/src/api/validators/required.ts",
        "discussion_id": "2291802384",
        "commented_code": "@@ -10,7 +10,7 @@ import {computed} from '@angular/core';\n import {aggregateProperty, property, validate} from '../logic';\n import {REQUIRED} from '../property';\n import {FieldPath, LogicFn, PathKind} from '../types';\n-import {ValidationError} from '../validation_errors';\n+import {requiredError, RequiredValidationError} from '../validation_errors';",
        "comment_created_at": "2025-08-21T22:21:53+00:00",
        "comment_author": "mmalerba",
        "comment_body": "Yeah, I have my IDE set to clean up my imports on save, but I know not everyone likes that. lint check or something would be good",
        "pr_file_module": null
      }
    ]
  }
]