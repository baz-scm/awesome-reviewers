[
  {
    "discussion_id": "2314722711",
    "pr_number": 54835,
    "pr_file": "components/_util/hooks/useMergeSemantic/index.ts",
    "created_at": "2025-09-02T01:20:10+00:00",
    "commented_code": "return newObj;\n }\n \n+type MaybeFn<T, Props> = T | ((info?: { props: Props }) => T);\n+type ObjectOnly<T> = T extends (...args: any) => any ? never : T;\n /**\n  * Merge classNames and styles from multiple sources.\n  * When `schema` is provided, it will **must** provide the nest object structure.\n  */\n-export default function useMergeSemantic<ClassNamesType extends object, StylesType extends object>(\n+export default function useMergeSemantic<\n+  ClassNamesType extends object,\n+  StylesType extends object,\n+  Props,\n+>(\n   classNamesList: (ClassNamesType | undefined)[],\n   stylesList: (StylesType | undefined)[],\n   schema?: SemanticSchema,\n+  info?: {\n+    props: Props;\n+  },\n ) {\n-  const mergedClassNames = useSemanticClassNames(schema, ...classNamesList) as ClassNamesType;\n-  const mergedStyles = useSemanticStyles(...stylesList) as StylesType;\n+  const resolve = <T extends object>(\n+    val: MaybeFn<T | undefined, Props> | undefined,\n+  ): T | undefined => {\n+    if (typeof val === 'function') {\n+      return val(info!) as T;",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2314722711",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54835,
        "pr_file": "components/_util/hooks/useMergeSemantic/index.ts",
        "discussion_id": "2314722711",
        "commented_code": "@@ -86,26 +86,51 @@ function fillObjectBySchema<T extends object>(obj: T, schema: SemanticSchema): T\n   return newObj;\n }\n \n+type MaybeFn<T, Props> = T | ((info?: { props: Props }) => T);\n+type ObjectOnly<T> = T extends (...args: any) => any ? never : T;\n /**\n  * Merge classNames and styles from multiple sources.\n  * When `schema` is provided, it will **must** provide the nest object structure.\n  */\n-export default function useMergeSemantic<ClassNamesType extends object, StylesType extends object>(\n+export default function useMergeSemantic<\n+  ClassNamesType extends object,\n+  StylesType extends object,\n+  Props,\n+>(\n   classNamesList: (ClassNamesType | undefined)[],\n   stylesList: (StylesType | undefined)[],\n   schema?: SemanticSchema,\n+  info?: {\n+    props: Props;\n+  },\n ) {\n-  const mergedClassNames = useSemanticClassNames(schema, ...classNamesList) as ClassNamesType;\n-  const mergedStyles = useSemanticStyles(...stylesList) as StylesType;\n+  const resolve = <T extends object>(\n+    val: MaybeFn<T | undefined, Props> | undefined,\n+  ): T | undefined => {\n+    if (typeof val === 'function') {\n+      return val(info!) as T;",
        "comment_created_at": "2025-09-02T01:20:10+00:00",
        "comment_author": "zombieJ",
        "comment_body": "info \u662f\u53ef\u9009\u7684\u8bdd\u8fd9\u91cc\u5c31\u4e0d\u8981 `!` \u8f6c\u6362\u4e86\uff0c\u6ca1\u8986\u76d6\u5230\u7684\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u53ef\u4ee5\u5199\u4e00\u4e2a `{ props: {} }` \u9884\u8bbe\u5bf9\u8c61\u51fa\u6765",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2272514835",
    "pr_number": 54670,
    "pr_file": "components/_util/hooks/useMergedMask.ts",
    "created_at": "2025-08-13T08:33:28+00:00",
    "commented_code": "+import { useMemo } from 'react';\n+\n+import type { MaskType } from '../../modal/interface';\n+\n+export interface MaskConfig {\n+  enabled?: boolean;\n+  blur?: boolean;\n+}\n+\n+const normalizeMaskConfig = (mask?: MaskType | MaskConfig): MaskConfig => {\n+  if (typeof mask === 'object') {\n+    return mask;\n+  }\n+  if (mask === undefined) {\n+    return {};\n+  }\n+  return {\n+    enabled: !!mask,",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2272514835",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54670,
        "pr_file": "components/_util/hooks/useMergedMask.ts",
        "discussion_id": "2272514835",
        "commented_code": "@@ -0,0 +1,43 @@\n+import { useMemo } from 'react';\n+\n+import type { MaskType } from '../../modal/interface';\n+\n+export interface MaskConfig {\n+  enabled?: boolean;\n+  blur?: boolean;\n+}\n+\n+const normalizeMaskConfig = (mask?: MaskType | MaskConfig): MaskConfig => {\n+  if (typeof mask === 'object') {\n+    return mask;\n+  }\n+  if (mask === undefined) {\n+    return {};\n+  }\n+  return {\n+    enabled: !!mask,",
        "comment_created_at": "2025-08-13T08:33:28+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u8fd9\u91cc\u903b\u8f91\u68b3\u7406\u987a\u5e8f\uff1a\r\n\r\n1. object & not null\r\n2. boolean\r\n3. default: `{}` \u4e0d\u9700\u8981\u63d0\u524d\u8bbe\u7f6e blur ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2247214704",
    "pr_number": 54552,
    "pr_file": "components/tooltip/style/index.ts",
    "created_at": "2025-08-01T07:36:04+00:00",
    "commented_code": "minWidth: centerAlignMinWidth,\n           minHeight: controlHeight,\n           padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n-          color: tooltipColor,\n+          color: 'var(--ant-tooltip-color)',",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2247214704",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54552,
        "pr_file": "components/tooltip/style/index.ts",
        "discussion_id": "2247214704",
        "commented_code": "@@ -80,7 +79,7 @@ const genTooltipStyle: GenerateStyle<TooltipToken> = (token) => {\n           minWidth: centerAlignMinWidth,\n           minHeight: controlHeight,\n           padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n-          color: tooltipColor,\n+          color: 'var(--ant-tooltip-color)',",
        "comment_created_at": "2025-08-01T07:36:04+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u8fd9\u8fb9\u4e0d\u5bf9\uff0c\u5e94\u8be5\u662f css var \u4e0d\u5b58\u5728\u7684\u8bdd\u5c31 fallback \u5230 tooltipColor",
        "pr_file_module": null
      },
      {
        "comment_id": "2247239121",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54552,
        "pr_file": "components/tooltip/style/index.ts",
        "discussion_id": "2247214704",
        "commented_code": "@@ -80,7 +79,7 @@ const genTooltipStyle: GenerateStyle<TooltipToken> = (token) => {\n           minWidth: centerAlignMinWidth,\n           minHeight: controlHeight,\n           padding: `${unit(token.calc(paddingSM).div(2).equal())} ${unit(paddingXS)}`,\n-          color: tooltipColor,\n+          color: 'var(--ant-tooltip-color)',",
        "comment_created_at": "2025-08-01T07:49:01+00:00",
        "comment_author": "EmilyyyLiu",
        "comment_body": "\u597d\u7684",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062974969",
    "pr_number": 53685,
    "pr_file": "components/_util/extendsObject.ts",
    "created_at": "2025-04-28T06:35:05+00:00",
    "commented_code": "-import type { AnyObject } from './type';\n-\n-const extendsObject = <T extends AnyObject = AnyObject>(...list: T[]) => {\n-  const result: AnyObject = { ...list[0] };\n-\n-  for (let i = 1; i < list.length; i++) {\n-    const obj = list[i];\n-    if (obj) {\n-      Object.keys(obj).forEach((key) => {\n-        const val = obj[key];\n-        if (val !== undefined) {\n-          result[key] = val;\n+// copied https://github.com/ant-design/ant-design-mobile/blob/d3b3bae/src/utils/with-default-props.tsx\n+function mergeProps<A, B>(a: A, b: B): B & A;\n+function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A;\n+function mergeProps<A, B, C, D>(a: A, b: B, c: C, d: D): D & C & B & A;\n+function mergeProps(...items: any[]) {\n+  const ret: any = {};\n+  items.forEach((item) => {\n+    if (item) {\n+      Object.keys(item).forEach((key) => {\n+        if (item[key] !== undefined) {\n+          ret[key] = item[key];\n         }\n       });\n     }\n-  }\n-\n-  return result;\n-};\n+  });\n+  return ret;\n+}\n \n-export default extendsObject;\n+export default mergeProps;",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2062974969",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53685,
        "pr_file": "components/_util/extendsObject.ts",
        "discussion_id": "2062974969",
        "commented_code": "@@ -1,21 +1,19 @@\n-import type { AnyObject } from './type';\n-\n-const extendsObject = <T extends AnyObject = AnyObject>(...list: T[]) => {\n-  const result: AnyObject = { ...list[0] };\n-\n-  for (let i = 1; i < list.length; i++) {\n-    const obj = list[i];\n-    if (obj) {\n-      Object.keys(obj).forEach((key) => {\n-        const val = obj[key];\n-        if (val !== undefined) {\n-          result[key] = val;\n+// copied https://github.com/ant-design/ant-design-mobile/blob/d3b3bae/src/utils/with-default-props.tsx\n+function mergeProps<A, B>(a: A, b: B): B & A;\n+function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A;\n+function mergeProps<A, B, C, D>(a: A, b: B, c: C, d: D): D & C & B & A;\n+function mergeProps(...items: any[]) {\n+  const ret: any = {};\n+  items.forEach((item) => {\n+    if (item) {\n+      Object.keys(item).forEach((key) => {\n+        if (item[key] !== undefined) {\n+          ret[key] = item[key];\n         }\n       });\n     }\n-  }\n-\n-  return result;\n-};\n+  });\n+  return ret;\n+}\n \n-export default extendsObject;\n+export default mergeProps;",
        "comment_created_at": "2025-04-28T06:35:05+00:00",
        "comment_author": "afc163",
        "comment_body": "```jsx\r\n  Object.assign({ a: 1 }, { a: undefined }) // { a: undefined }\r\n  extendsObject({ a: 1 }, { a: undefined }) // { a: 1 }\r\n```\r\nextendsObject \u4e3b\u8981\u4f5c\u7528\u662f\u8df3\u8fc7 undefined\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u8fd9\u4e2a\u7279\u6027\uff0c\u5b8c\u5168\u53ef\u4ee5\u7528\u539f\u751f\u65b9\u6cd5\u66ff\u4ee3\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2062975140",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53685,
        "pr_file": "components/_util/extendsObject.ts",
        "discussion_id": "2062974969",
        "commented_code": "@@ -1,21 +1,19 @@\n-import type { AnyObject } from './type';\n-\n-const extendsObject = <T extends AnyObject = AnyObject>(...list: T[]) => {\n-  const result: AnyObject = { ...list[0] };\n-\n-  for (let i = 1; i < list.length; i++) {\n-    const obj = list[i];\n-    if (obj) {\n-      Object.keys(obj).forEach((key) => {\n-        const val = obj[key];\n-        if (val !== undefined) {\n-          result[key] = val;\n+// copied https://github.com/ant-design/ant-design-mobile/blob/d3b3bae/src/utils/with-default-props.tsx\n+function mergeProps<A, B>(a: A, b: B): B & A;\n+function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A;\n+function mergeProps<A, B, C, D>(a: A, b: B, c: C, d: D): D & C & B & A;\n+function mergeProps(...items: any[]) {\n+  const ret: any = {};\n+  items.forEach((item) => {\n+    if (item) {\n+      Object.keys(item).forEach((key) => {\n+        if (item[key] !== undefined) {\n+          ret[key] = item[key];\n         }\n       });\n     }\n-  }\n-\n-  return result;\n-};\n+  });\n+  return ret;\n+}\n \n-export default extendsObject;\n+export default mergeProps;",
        "comment_created_at": "2025-04-28T06:35:16+00:00",
        "comment_author": "afc163",
        "comment_body": "\u770b\u770b\u6709\u6ca1\u6709\u5fc5\u8981\u5b58\u5728\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2063003932",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53685,
        "pr_file": "components/_util/extendsObject.ts",
        "discussion_id": "2062974969",
        "commented_code": "@@ -1,21 +1,19 @@\n-import type { AnyObject } from './type';\n-\n-const extendsObject = <T extends AnyObject = AnyObject>(...list: T[]) => {\n-  const result: AnyObject = { ...list[0] };\n-\n-  for (let i = 1; i < list.length; i++) {\n-    const obj = list[i];\n-    if (obj) {\n-      Object.keys(obj).forEach((key) => {\n-        const val = obj[key];\n-        if (val !== undefined) {\n-          result[key] = val;\n+// copied https://github.com/ant-design/ant-design-mobile/blob/d3b3bae/src/utils/with-default-props.tsx\n+function mergeProps<A, B>(a: A, b: B): B & A;\n+function mergeProps<A, B, C>(a: A, b: B, c: C): C & B & A;\n+function mergeProps<A, B, C, D>(a: A, b: B, c: C, d: D): D & C & B & A;\n+function mergeProps(...items: any[]) {\n+  const ret: any = {};\n+  items.forEach((item) => {\n+    if (item) {\n+      Object.keys(item).forEach((key) => {\n+        if (item[key] !== undefined) {\n+          ret[key] = item[key];\n         }\n       });\n     }\n-  }\n-\n-  return result;\n-};\n+  });\n+  return ret;\n+}\n \n-export default extendsObject;\n+export default mergeProps;",
        "comment_created_at": "2025-04-28T06:55:54+00:00",
        "comment_author": "Wxh16144",
        "comment_body": "\u8fd8\u662f\u6709\u5b58\u5728\u7684\u5fc5\u8981\u5427\u3002\u4e3b\u8981\u662f\u5ffd\u7565\u5916\u9762\u4f20\u9012\u8fdb\u6765\u7684\u503c\uff0c\u5982\u679c\u662f undefined \u5c31\u4e0d\u5bf9\u524d\u9762\u7684\u8fdb\u884c\u8986\u76d6\u3002",
        "pr_file_module": null
      }
    ]
  }
]