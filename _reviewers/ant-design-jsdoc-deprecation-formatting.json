[
  {
    "discussion_id": "2199837978",
    "pr_number": 54358,
    "pr_file": "components/tabs/index.tsx",
    "created_at": "2025-07-11T07:08:41+00:00",
    "commented_code": "moreIcon?: React.ReactNode;\n   more?: MoreProps;\n   removeIcon?: React.ReactNode;\n+  /** @deprecated please use `tabsPlacement` instead */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2199837978",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54358,
        "pr_file": "components/tabs/index.tsx",
        "discussion_id": "2199837978",
        "commented_code": "@@ -47,6 +48,9 @@ export interface TabsProps\n   moreIcon?: React.ReactNode;\n   more?: MoreProps;\n   removeIcon?: React.ReactNode;\n+  /** @deprecated please use `tabsPlacement` instead */",
        "comment_created_at": "2025-07-11T07:08:41+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated please use `tabPlacement` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094732562",
    "pr_number": 53669,
    "pr_file": "components/space/Compact.tsx",
    "created_at": "2025-05-19T02:15:48+00:00",
    "commented_code": "export interface SpaceCompactProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   size?: SizeType;\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use orientation */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2094732562",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53669,
        "pr_file": "components/space/Compact.tsx",
        "discussion_id": "2094732562",
        "commented_code": "@@ -53,7 +54,9 @@ export const NoCompactStyle: React.FC<Readonly<React.PropsWithChildren>> = (prop\n export interface SpaceCompactProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   size?: SizeType;\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use orientation */",
        "comment_created_at": "2025-05-19T02:15:48+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated please use `orientation`  */\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2094733036",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53669,
        "pr_file": "components/space/Compact.tsx",
        "discussion_id": "2094732562",
        "commented_code": "@@ -53,7 +54,9 @@ export const NoCompactStyle: React.FC<Readonly<React.PropsWithChildren>> = (prop\n export interface SpaceCompactProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   size?: SizeType;\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use orientation */",
        "comment_created_at": "2025-05-19T02:16:39+00:00",
        "comment_author": "thinkasany",
        "comment_body": "\u5927\u90e8\u5206 API \u90fd\u4f1a\u7528\u53cd\u5f15\u53f7\uff0c\u53ef\u4ee5\u6bd4\u8f83\u660e\u663e\u7684\u548c\u5176\u4ed6\u5355\u8bcd\u533a\u5206\u5f00\u3002\u6216\u8005\u8bf4\u9075\u5faa\u98ce\u683c\u7edf\u4e00\u7684\u89c4\u8303\u5427\uff0c\u5176\u4ed6\u5730\u65b9\u786e\u5b9e\u662f\u8fd9\u4e48\u505a\u7684\u3002",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2101712954",
    "pr_number": 53669,
    "pr_file": "components/space/index.tsx",
    "created_at": "2025-05-22T06:11:21+00:00",
    "commented_code": "export type SpaceSize = SizeType | number;\n type SemanticName = 'root' | 'item';\n-\n export interface SpaceProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   className?: string;\n   rootClassName?: string;\n   style?: React.CSSProperties;\n   size?: SpaceSize | [SpaceSize, SpaceSize];\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use orientation */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2101712954",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53669,
        "pr_file": "components/space/index.tsx",
        "discussion_id": "2101712954",
        "commented_code": "@@ -15,14 +18,16 @@ export { SpaceContext } from './context';\n \n export type SpaceSize = SizeType | number;\n type SemanticName = 'root' | 'item';\n-\n export interface SpaceProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   className?: string;\n   rootClassName?: string;\n   style?: React.CSSProperties;\n   size?: SpaceSize | [SpaceSize, SpaceSize];\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use orientation */",
        "comment_created_at": "2025-05-22T06:11:21+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated please use `orientation` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2101713578",
    "pr_number": 53669,
    "pr_file": "components/space/Compact.tsx",
    "created_at": "2025-05-22T06:11:49+00:00",
    "commented_code": "export interface SpaceCompactProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   size?: SizeType;\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use `orientation`  */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2101713578",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53669,
        "pr_file": "components/space/Compact.tsx",
        "discussion_id": "2101713578",
        "commented_code": "@@ -53,7 +55,10 @@ export const NoCompactStyle: React.FC<Readonly<React.PropsWithChildren>> = (prop\n export interface SpaceCompactProps extends React.HTMLAttributes<HTMLDivElement> {\n   prefixCls?: string;\n   size?: SizeType;\n-  direction?: 'horizontal' | 'vertical';\n+  /** @deprecated please use `orientation`  */",
        "comment_created_at": "2025-05-22T06:11:49+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated please use `orientation` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048576045",
    "pr_number": 53535,
    "pr_file": "components/progress/Steps.tsx",
    "created_at": "2025-04-17T09:21:27+00:00",
    "commented_code": "interface ProgressStepsProps extends ProgressProps {\n   steps: number;\n   strokeColor?: string | string[];\n+  railColor?: string;\n+  /** @deprecated Please use `trailColor` instead */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2048576045",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53535,
        "pr_file": "components/progress/Steps.tsx",
        "discussion_id": "2048576045",
        "commented_code": "@@ -7,6 +7,8 @@ import { getSize } from './utils';\n interface ProgressStepsProps extends ProgressProps {\n   steps: number;\n   strokeColor?: string | string[];\n+  railColor?: string;\n+  /** @deprecated Please use `trailColor` instead */",
        "comment_created_at": "2025-04-17T09:21:27+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated Please use `railColor` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2038813250",
    "pr_number": 53401,
    "pr_file": "components/statistic/Countdown.tsx",
    "created_at": "2025-04-11T05:17:21+00:00",
    "commented_code": "import * as React from 'react';\n \n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n+import { devUseWarning } from '../_util/warning';\n import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n+import StatisticTimer from './Timer';\n \n export interface CountdownProps extends StatisticProps {\n   format?: string;\n   onFinish?: () => void;\n   onChange?: (value?: valueType) => void;\n }\n \n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n+  if (process.env.NODE_ENV !== 'production') {\n+    const warning = devUseWarning('Countdown');\n+\n+    warning.deprecated(\n+      true,\n+      'Statistic.Countdown',\n+      'Statistic.Timer type=\"countdown\"',\n+      'When using version >= 5.25.0, Please use Statistic.Timer instead',",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2038813250",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2038813250",
        "commented_code": "@@ -1,69 +1,28 @@\n import * as React from 'react';\n \n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n+import { devUseWarning } from '../_util/warning';\n import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n+import StatisticTimer from './Timer';\n \n export interface CountdownProps extends StatisticProps {\n   format?: string;\n   onFinish?: () => void;\n   onChange?: (value?: valueType) => void;\n }\n \n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n+  if (process.env.NODE_ENV !== 'production') {\n+    const warning = devUseWarning('Countdown');\n+\n+    warning.deprecated(\n+      true,\n+      'Statistic.Countdown',\n+      'Statistic.Timer type=\"countdown\"',\n+      'When using version >= 5.25.0, Please use Statistic.Timer instead',",
        "comment_created_at": "2025-04-11T05:17:21+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u7ec4\u4ef6\u7528\u5c16\u62ec\u53f7\u8868\u793a\uff0c\u53e6\u5916\u4e0d\u9700\u8981\u540e\u9762\u7684\u8bf4\u660e `deprecated` \u65b9\u6cd5\u81ea\u5df1\u4f1a\u5305\uff1a\r\n\r\n```tsx\r\nwarning.deprecated(\r\n      true,\r\n      '<Statistic.Countdown />',\r\n      '<Statistic.Timer type=\"countdown\" />',\r\n);\r\n```\r\n\r\n\u53e6\u5916\u6ca1\u6709\u5199\u5bf9\u5e94\u7684 test case \u6765\u6d4b\u8bd5\u8fd9\u4e2a warning",
        "pr_file_module": null
      },
      {
        "comment_id": "2038821979",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2038813250",
        "commented_code": "@@ -1,69 +1,28 @@\n import * as React from 'react';\n \n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n+import { devUseWarning } from '../_util/warning';\n import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n+import StatisticTimer from './Timer';\n \n export interface CountdownProps extends StatisticProps {\n   format?: string;\n   onFinish?: () => void;\n   onChange?: (value?: valueType) => void;\n }\n \n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n+  if (process.env.NODE_ENV !== 'production') {\n+    const warning = devUseWarning('Countdown');\n+\n+    warning.deprecated(\n+      true,\n+      'Statistic.Countdown',\n+      'Statistic.Timer type=\"countdown\"',\n+      'When using version >= 5.25.0, Please use Statistic.Timer instead',",
        "comment_created_at": "2025-04-11T05:28:36+00:00",
        "comment_author": "lcgash",
        "comment_body": "\u6536\u5230",
        "pr_file_module": null
      }
    ]
  }
]