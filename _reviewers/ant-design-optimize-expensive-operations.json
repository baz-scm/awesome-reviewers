[
  {
    "discussion_id": "2292879091",
    "pr_number": 54691,
    "pr_file": "components/typography/Base/util.ts",
    "created_at": "2025-08-22T06:59:51+00:00",
    "commented_code": "childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2292879091",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T06:59:51+00:00",
        "comment_author": "zhouxinyong",
        "comment_body": "These two lines could be placed at the beginning of the isEleEllipsis function. That would be better, right? @Meet-student ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292900233",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T07:06:25+00:00",
        "comment_author": "Meet-student",
        "comment_body": "> These two lines could be placed at the beginning of the isEleEllipsis function. That would be better, right?\r\n\r\n```js\r\n    // Overflow\r\n    ele.scrollWidth > ele.clientWidth ||\r\n    ele.scrollHeight > ele.clientHeight ||\r\n    // Horizontal out of range\r\n    rect.left > childRect.left ||\r\n    childRect.right > rect.right ||\r\n    // Vertical out of range\r\n    rect.top > childRect.top ||\r\n    childRect.bottom > rect.bottom\r\n```\r\n\r\nLike this? @zhouxinyong ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292958052",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T07:31:18+00:00",
        "comment_author": "zhouxinyong",
        "comment_body": "just like this, @Meet-student \r\n```ts\r\nexport function isEleEllipsis(ele: HTMLElement): boolean { \r\n  if (ele.scrollWidth > ele.clientWidth || ele.scrollHeight > ele.clientHeight) {\r\n    return true\r\n  }\r\n  // old code\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2292987898",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T07:46:17+00:00",
        "comment_author": "Meet-student",
        "comment_body": "@zhouxinyong  why?",
        "pr_file_module": null
      },
      {
        "comment_id": "2293097302",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T08:39:15+00:00",
        "comment_author": "zhouxinyong",
        "comment_body": "First, judge this newly added condition. If this condition is already satisfied, there is no need to execute the following judgment, nor is it necessary to execute this: const rect = ele.getBoundingClientRect(); const childRect = childDiv.getBoundingClientRect();\r\nI think this is better,  @Meet-student ",
        "pr_file_module": null
      },
      {
        "comment_id": "2293168838",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54691,
        "pr_file": "components/typography/Base/util.ts",
        "discussion_id": "2292879091",
        "commented_code": "@@ -41,7 +42,10 @@ export function isEleEllipsis(ele: HTMLElement): boolean {\n     childRect.right > rect.right ||\n     // Vertical out of range\n     rect.top > childRect.top ||\n-    childRect.bottom > rect.bottom\n+    childRect.bottom > rect.bottom ||\n+    // Overflow\n+    ele.scrollWidth > ele.clientWidth ||",
        "comment_created_at": "2025-08-22T09:11:00+00:00",
        "comment_author": "Meet-student",
        "comment_body": "Nice. You're right, thank you for your suggestion @zhouxinyong  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1982448568",
    "pr_number": 53024,
    "pr_file": "components/input/hooks/useHandleResizeWrapper.ts",
    "created_at": "2025-03-06T01:57:18+00:00",
    "commented_code": "+import { TextAreaRef } from 'rc-textarea';\n+import React from 'react';\n+\n+type ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\n+\n+const ELEMENT_GAP = 2;\n+\n+const adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\n+  if (wrapper.offsetWidth - width < ELEMENT_GAP) {\n+    // The textarea's width is increased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\n+    // The textarea's width is decreased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  }\n+};\n+\n+export default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\n+  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\n+    if (!rcTextArea) return;\n+    if (rcTextArea.resizableTextArea.textArea.style.width.includes('px')) {\n+      const width = parseInt(rcTextArea.resizableTextArea.textArea.style.width.replace('px', ''));\n+      adjustElementWidth(width, rcTextArea.nativeElement);\n+    }\n+  }, []);\n+\n+  return { handleResizeWrapper };\n+}",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "1982448568",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53024,
        "pr_file": "components/input/hooks/useHandleResizeWrapper.ts",
        "discussion_id": "1982448568",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { TextAreaRef } from 'rc-textarea';\n+import React from 'react';\n+\n+type ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\n+\n+const ELEMENT_GAP = 2;\n+\n+const adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\n+  if (wrapper.offsetWidth - width < ELEMENT_GAP) {\n+    // The textarea's width is increased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\n+    // The textarea's width is decreased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  }\n+};\n+\n+export default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\n+  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\n+    if (!rcTextArea) return;\n+    if (rcTextArea.resizableTextArea.textArea.style.width.includes('px')) {\n+      const width = parseInt(rcTextArea.resizableTextArea.textArea.style.width.replace('px', ''));\n+      adjustElementWidth(width, rcTextArea.nativeElement);\n+    }\n+  }, []);\n+\n+  return { handleResizeWrapper };\n+}",
        "comment_created_at": "2025-03-06T01:57:18+00:00",
        "comment_author": "afc163",
        "comment_body": "\u662f\u7684\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 `requestAnimationFrame`\uff08\u7b80\u79f0 `rAF`\uff09\u6765\u4f18\u5316\u6027\u80fd\uff0c\u4f7f\u5f97 `resize` \u64cd\u4f5c\u66f4\u52a0\u6d41\u7545\u3002\u4ee5\u4e0b\u662f\u5bf9\u4ee3\u7801\u7684\u5206\u6790\u4ee5\u53ca\u5982\u4f55\u5f15\u5165 `requestAnimationFrame` \u7684\u8be6\u7ec6\u8bf4\u660e\u3002\r\n\r\n---\r\n\r\n### **1. \u5f53\u524d\u4ee3\u7801\u7684\u95ee\u9898**\r\n\u5728\u5f53\u524d\u5b9e\u73b0\u4e2d\uff0c`adjustElementWidth` \u51fd\u6570\u76f4\u63a5\u4fee\u6539\u4e86 DOM \u5143\u7d20\u7684\u6837\u5f0f\uff08`wrapper.style.width`\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u88ab\u9891\u7e41\u8c03\u7528\uff08\u4f8b\u5982\u5728\u7528\u6237\u5feb\u901f\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u65f6\uff09\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5e03\u5c40\u91cd\u7ed8\uff08layout reflows\uff09\u548c\u6837\u5f0f\u91cd\u8ba1\u7b97\uff08style recalculations\uff09\uff0c\u4ece\u800c\u5f71\u54cd\u6027\u80fd\u3002\r\n\r\n\u6b64\u5916\uff0c\u76f4\u63a5\u64cd\u4f5c DOM \u6837\u5f0f\u7684\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6d4f\u89c8\u5668\u65e0\u6cd5\u6709\u6548\u5730\u5408\u5e76\u591a\u4e2a\u6837\u5f0f\u66f4\u65b0\uff0c\u8fdb\u4e00\u6b65\u964d\u4f4e\u6027\u80fd\u3002\r\n\r\n---\r\n\r\n### **2. \u4e3a\u4ec0\u4e48\u9700\u8981 `requestAnimationFrame`\uff1f**\r\n`requestAnimationFrame` \u662f\u4e00\u79cd\u6d4f\u89c8\u5668\u63d0\u4f9b\u7684\u4f18\u5316\u673a\u5236\uff0c\u7528\u4e8e\u5728\u4e0b\u4e00\u5e27\u6e32\u67d3\u4e4b\u524d\u6267\u884c\u52a8\u753b\u6216\u89c6\u89c9\u66f4\u65b0\u3002\u5b83\u7684\u4e3b\u8981\u4f18\u70b9\u5305\u62ec\uff1a\r\n\r\n- **\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u91cd\u7ed8**\uff1a\u901a\u8fc7\u5c06\u591a\u6b21 DOM \u66f4\u65b0\u5408\u5e76\u5230\u4e00\u5e27\u5185\u5b8c\u6210\uff0c\u907f\u514d\u9891\u7e41\u89e6\u53d1\u91cd\u7ed8\u3002\r\n- **\u63d0\u9ad8\u52a8\u753b\u6d41\u7545\u6027**\uff1a\u786e\u4fdd\u66f4\u65b0\u4e0e\u5c4f\u5e55\u5237\u65b0\u7387\u540c\u6b65\uff0c\u901a\u5e38\u4e3a 60 FPS\uff08\u6bcf\u79d2 60 \u5e27\uff09\u3002\r\n- **\u8282\u7701\u8d44\u6e90**\uff1a\u5f53\u9875\u9762\u4e0d\u53ef\u89c1\u65f6\uff08\u4f8b\u5982\u5207\u6362\u5230\u5176\u4ed6\u6807\u7b7e\u9875\uff09\uff0c`rAF` \u4f1a\u81ea\u52a8\u6682\u505c\uff0c\u907f\u514d\u6d6a\u8d39 CPU \u548c GPU \u8d44\u6e90\u3002\r\n\r\n\u56e0\u6b64\uff0c\u5728 `resize` \u573a\u666f\u4e2d\uff0c\u4f7f\u7528 `requestAnimationFrame` \u53ef\u4ee5\u663e\u8457\u63d0\u5347\u6027\u80fd\u548c\u7528\u6237\u4f53\u9a8c\u3002\r\n\r\n---\r\n\r\n### **3. \u5982\u4f55\u4f18\u5316\u4ee3\u7801\uff1f**\r\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff1a\r\n\r\n#### **3.1. \u4f7f\u7528 `requestAnimationFrame` \u5305\u88c5\u6837\u5f0f\u66f4\u65b0**\r\n\u5c06 `adjustElementWidth` \u7684\u903b\u8f91\u653e\u5165 `requestAnimationFrame` \u4e2d\uff0c\u786e\u4fdd\u6bcf\u6b21\u66f4\u65b0\u90fd\u4e0e\u6d4f\u89c8\u5668\u7684\u6e32\u67d3\u5e27\u540c\u6b65\u3002\r\n\r\n#### **3.2. \u9632\u6b62\u91cd\u590d\u8c03\u5ea6**\r\n\u4e3a\u4e86\u907f\u514d\u5728\u77ed\u65f6\u95f4\u5185\u591a\u6b21\u8c03\u7528 `handleResizeWrapper` \u5bfc\u81f4\u91cd\u590d\u8c03\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6807\u5fd7\u53d8\u91cf\uff08\u5982 `isScheduled`\uff09\u6765\u786e\u4fdd\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a `rAF` \u8c03\u5ea6\u6b63\u5728\u8fdb\u884c\u3002\r\n\r\n#### **3.3. \u6539\u8fdb\u540e\u7684\u4ee3\u7801**\r\n\u4ee5\u4e0b\u662f\u4f18\u5316\u540e\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a\r\n\r\n```typescript\r\nimport { TextAreaRef } from 'rc-textarea';\r\nimport React from 'react';\r\n\r\ntype ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\r\n\r\nconst ELEMENT_GAP = 2;\r\n\r\nlet isScheduled = false; // \u7528\u4e8e\u9632\u6b62\u91cd\u590d\u8c03\u5ea6\r\n\r\nconst adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\r\n  if (!isScheduled) {\r\n    isScheduled = true;\r\n\r\n    requestAnimationFrame(() => {\r\n      if (wrapper.offsetWidth - width < ELEMENT_GAP) {\r\n        // The textarea's width is increased\r\n        wrapper.style.width = `${width + ELEMENT_GAP}px`;\r\n      } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\r\n        // The textarea's width is decreased\r\n        wrapper.style.width = `${width + ELEMENT_GAP}px`;\r\n      }\r\n\r\n      isScheduled = false; // \u91cd\u7f6e\u8c03\u5ea6\u6807\u5fd7\r\n    });\r\n  }\r\n};\r\n\r\nexport default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\r\n  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\r\n    if (!rcTextArea) return;\r\n\r\n    const textAreaStyle = rcTextArea.resizableTextArea.textArea.style;\r\n    if (textAreaStyle.width.includes('px')) {\r\n      const width = parseInt(textAreaStyle.width.replace('px', ''), 10);\r\n      adjustElementWidth(width, rcTextArea.nativeElement);\r\n    }\r\n  }, []);\r\n\r\n  return { handleResizeWrapper };\r\n}\r\n```\r\n\r\n---\r\n\r\n### **4. \u4f18\u5316\u70b9\u8be6\u89e3**\r\n\r\n#### **4.1. `requestAnimationFrame` \u7684\u4f5c\u7528**\r\n\u901a\u8fc7\u5c06 `adjustElementWidth` \u7684\u903b\u8f91\u653e\u5165 `requestAnimationFrame` \u4e2d\uff0c\u6211\u4eec\u786e\u4fdd\u6bcf\u6b21\u6837\u5f0f\u66f4\u65b0\u90fd\u4e0e\u6d4f\u89c8\u5668\u7684\u6e32\u67d3\u5e27\u540c\u6b65\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5728\u77ed\u65f6\u95f4\u5185\u9891\u7e41\u89e6\u53d1\u91cd\u7ed8\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u3002\r\n\r\n#### **4.2. \u9632\u6b62\u91cd\u590d\u8c03\u5ea6**\r\n\u901a\u8fc7\u5f15\u5165 `isScheduled` \u6807\u5fd7\u53d8\u91cf\uff0c\u6211\u4eec\u786e\u4fdd\u5373\u4f7f `handleResizeWrapper` \u88ab\u9891\u7e41\u8c03\u7528\uff0c\u4e5f\u53ea\u4f1a\u6709\u4e00\u4e2a `rAF` \u8c03\u5ea6\u5728\u8fdb\u884c\u4e2d\u3002\u8fd9\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u548c DOM \u64cd\u4f5c\u3002\r\n\r\n#### **4.3. \u6027\u80fd\u63d0\u5347\u7684\u5b9e\u9645\u6548\u679c**\r\n- **\u51cf\u5c11\u91cd\u7ed8\u6b21\u6570**\uff1a\u7531\u4e8e `rAF` \u5c06\u591a\u6b21\u66f4\u65b0\u5408\u5e76\u5230\u4e00\u5e27\u5185\u5b8c\u6210\uff0c\u51cf\u5c11\u4e86\u5e03\u5c40\u91cd\u7ed8\u7684\u9891\u7387\u3002\r\n- **\u66f4\u6d41\u7545\u7684\u52a8\u753b**\uff1a`rAF` \u786e\u4fdd\u66f4\u65b0\u4e0e\u5c4f\u5e55\u5237\u65b0\u7387\u540c\u6b65\uff0c\u907f\u514d\u5361\u987f\u3002\r\n- **\u66f4\u4f4e\u7684\u8d44\u6e90\u6d88\u8017**\uff1a\u5f53\u9875\u9762\u4e0d\u53ef\u89c1\u65f6\uff0c`rAF` \u81ea\u52a8\u6682\u505c\uff0c\u907f\u514d\u6d6a\u8d39\u8d44\u6e90\u3002\r\n\r\n---\r\n\r\n### **5. \u8fdb\u4e00\u6b65\u4f18\u5316\u5efa\u8bae**\r\n\u5982\u679c `resize` \u64cd\u4f5c\u4ecd\u7136\u4e0d\u591f\u6d41\u7545\uff0c\u53ef\u4ee5\u8003\u8651\u4ee5\u4e0b\u989d\u5916\u7684\u4f18\u5316\u63aa\u65bd\uff1a\r\n\r\n#### **5.1. \u4f7f\u7528\u9632\u6296\uff08Debounce\uff09**\r\n\u5982\u679c `handleResizeWrapper` \u88ab\u9891\u7e41\u8c03\u7528\uff08\u4f8b\u5982\u5728\u7a97\u53e3\u5927\u5c0f\u8c03\u6574\u65f6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u9632\u6296\u6280\u672f\u6765\u9650\u5236\u8c03\u7528\u9891\u7387\u3002\u4f8b\u5982\uff1a\r\n\r\n```typescript\r\nimport { debounce } from 'lodash';\r\n\r\nconst debouncedHandleResizeWrapper = debounce(handleResizeWrapper, 100);\r\n```\r\n\r\n\u7136\u540e\u5728\u5b9e\u9645\u8c03\u7528\u65f6\u4f7f\u7528 `debouncedHandleResizeWrapper`\u3002\r\n\r\n#### **5.2. \u4f7f\u7528 CSS \u66ff\u4ee3 JavaScript**\r\n\u5982\u679c\u53ef\u80fd\uff0c\u5c3d\u91cf\u901a\u8fc7 CSS \u5b9e\u73b0\u52a8\u6001\u5bbd\u5ea6\u8c03\u6574\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 `flexbox` \u6216 `grid` \u5e03\u5c40\u6765\u81ea\u52a8\u8c03\u6574\u5143\u7d20\u5bbd\u5ea6\uff0c\u800c\u4e0d\u662f\u624b\u52a8\u8ba1\u7b97\u548c\u8bbe\u7f6e\u6837\u5f0f\u3002\r\n\r\n---\r\n\r\n### **6. \u603b\u7ed3**\r\n\u901a\u8fc7\u5f15\u5165 `requestAnimationFrame`\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u8457\u4f18\u5316 `resize` \u64cd\u4f5c\u7684\u6027\u80fd\uff0c\u4f7f\u5176\u66f4\u52a0\u6d41\u7545\u3002\u540c\u65f6\uff0c\u7ed3\u5408\u9632\u6296\u6280\u672f\u548c CSS \u4f18\u5316\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u3002\u5982\u679c\u4f60\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u9047\u5230\u5176\u4ed6\u95ee\u9898\uff0c\u6b22\u8fce\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282\uff0c\u6211\u53ef\u4ee5\u5e2e\u52a9\u8fdb\u4e00\u6b65\u5206\u6790\u548c\u4f18\u5316\uff01",
        "pr_file_module": null
      },
      {
        "comment_id": "1984605652",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53024,
        "pr_file": "components/input/hooks/useHandleResizeWrapper.ts",
        "discussion_id": "1982448568",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { TextAreaRef } from 'rc-textarea';\n+import React from 'react';\n+\n+type ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\n+\n+const ELEMENT_GAP = 2;\n+\n+const adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\n+  if (wrapper.offsetWidth - width < ELEMENT_GAP) {\n+    // The textarea's width is increased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\n+    // The textarea's width is decreased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  }\n+};\n+\n+export default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\n+  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\n+    if (!rcTextArea) return;\n+    if (rcTextArea.resizableTextArea.textArea.style.width.includes('px')) {\n+      const width = parseInt(rcTextArea.resizableTextArea.textArea.style.width.replace('px', ''));\n+      adjustElementWidth(width, rcTextArea.nativeElement);\n+    }\n+  }, []);\n+\n+  return { handleResizeWrapper };\n+}",
        "comment_created_at": "2025-03-07T07:51:53+00:00",
        "comment_author": "triyys",
        "comment_body": "Thank you for your feedback, they help me a lot. I will continue to work on the improvements. For future communications, could you please provide the details in English? It would help me understand the suggestions even better. Thanks a lot.",
        "pr_file_module": null
      },
      {
        "comment_id": "1986988377",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53024,
        "pr_file": "components/input/hooks/useHandleResizeWrapper.ts",
        "discussion_id": "1982448568",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { TextAreaRef } from 'rc-textarea';\n+import React from 'react';\n+\n+type ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\n+\n+const ELEMENT_GAP = 2;\n+\n+const adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\n+  if (wrapper.offsetWidth - width < ELEMENT_GAP) {\n+    // The textarea's width is increased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\n+    // The textarea's width is decreased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  }\n+};\n+\n+export default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\n+  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\n+    if (!rcTextArea) return;\n+    if (rcTextArea.resizableTextArea.textArea.style.width.includes('px')) {\n+      const width = parseInt(rcTextArea.resizableTextArea.textArea.style.width.replace('px', ''));\n+      adjustElementWidth(width, rcTextArea.nativeElement);\n+    }\n+  }, []);\n+\n+  return { handleResizeWrapper };\n+}",
        "comment_created_at": "2025-03-10T10:12:54+00:00",
        "comment_author": "afc163",
        "comment_body": "Yes, this code can be optimized for performance using `requestAnimationFrame` (rAF) to make the `resize` operation smoother. Below is an analysis of the code and detailed instructions on implementing rAF:\r\n\r\n---\r\n\r\n### **1. Issues with Current Code**\r\nThe current implementation directly modifies the DOM element's style (`wrapper.style.width`) in the `adjustElementWidth` function. If called frequently (e.g., during rapid window resizing), this can cause excessive layout reflows and style recalculations, degrading performance.\r\n\r\nDirect DOM manipulation also prevents browsers from batching style updates efficiently, further reducing performance.\r\n\r\n---\r\n\r\n### **2. Why Use `requestAnimationFrame`?**\r\n`requestAnimationFrame` is a browser optimization mechanism for executing animations or visual updates before the next repaint. Key benefits include:\r\n\r\n- **Reduced repaints**: Batches multiple DOM updates into a single frame.\r\n- **Smoother animations**: Syncs updates with the screen refresh rate (typically 60 FPS).\r\n- **Resource efficiency**: Pauses updates when the tab is inactive, saving CPU/GPU resources.\r\n\r\nUsing rAF in `resize` scenarios significantly improves performance and user experience.\r\n\r\n---\r\n\r\n### **3. How to Optimize the Code**\r\nFollow these steps to optimize:\r\n\r\n#### **3.1. Wrap Style Updates in rAF**\r\nEncapsulate `adjustElementWidth` logic in `requestAnimationFrame` to synchronize updates with browser repaint cycles.\r\n\r\n#### **3.2. Prevent Duplicate Scheduling**\r\nUse a flag (`isScheduled`) to ensure only one rAF callback runs at a time, even if `handleResizeWrapper` is called repeatedly.\r\n\r\n#### **3.3. Optimized Code**\r\n```typescript\r\nimport { TextAreaRef } from 'rc-textarea';\r\nimport React from 'react';\r\n\r\ntype ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\r\n\r\nconst ELEMENT_GAP = 2;\r\n\r\nlet isScheduled = false; // Prevents duplicate scheduling\r\n\r\nconst adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\r\n  if (!isScheduled) {\r\n    isScheduled = true;\r\n\r\n    requestAnimationFrame(() => {\r\n      if (wrapper.offsetWidth - width < ELEMENT_GAP) {\r\n        // Expand textarea width\r\n        wrapper.style.width = `${width + ELEMENT_GAP}px`;\r\n      } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\r\n        // Shrink textarea width\r\n        wrapper.style.width = `${width + ELEMENT_GAP}px`;\r\n      }\r\n\r\n      isScheduled = false; // Reset scheduling flag\r\n    });\r\n  }\r\n};\r\n\r\nexport default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\r\n  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\r\n    if (!rcTextArea) return;\r\n\r\n    const textAreaStyle = rcTextArea.resizableTextArea.textArea.style;\r\n    if (textAreaStyle.width.includes('px')) {\r\n      const width = parseInt(textAreaStyle.width.replace('px', ''), 10);\r\n      adjustElementWidth(width, rcTextArea.nativeElement);\r\n    }\r\n  }, []);\r\n\r\n  return { handleResizeWrapper };\r\n}\r\n```\r\n\r\n---\r\n\r\n### **4. Key Optimizations Explained**\r\n\r\n#### **4.1. rAF Synchronization**\r\nBy wrapping updates in `requestAnimationFrame`, style changes align with the browser's repaint cycle, minimizing layout thrashing.\r\n\r\n#### **4.2. Duplicate Call Prevention**\r\nThe `isScheduled` flag ensures only one rAF callback runs at a time, even during rapid consecutive calls.\r\n\r\n#### **4.3. Performance Impact**\r\n- **Fewer repaints**: Batches multiple updates into a single frame.\r\n- **Smoother resizing**: Syncs with monitor refresh rate (60 FPS typical).\r\n- **Lower resource usage**: Pauses updates when the tab is inactive.\r\n\r\n---\r\n\r\n### **5. Further Optimization Suggestions**\r\n\r\n#### **5.1. Debounce Resize Events**\r\nIf `handleResizeWrapper` is called excessively (e.g., during window resizing), add debouncing:\r\n```typescript\r\nimport { debounce } from 'lodash';\r\n\r\nconst debouncedHandleResize = debounce(handleResizeWrapper, 100);\r\n```\r\n\r\n#### **5.2. CSS-Driven Resizing**\r\nWhere possible, use CSS for dynamic sizing (e.g., `flexbox`, `grid`) instead of JavaScript calculations.\r\n\r\n---\r\n\r\n### **6. Summary**\r\nUsing `requestAnimationFrame` significantly improves resize performance. Combined with debouncing and CSS optimizations, this approach ensures smooth, efficient UI updates. Share additional details if you encounter specific issues for further analysis!",
        "pr_file_module": null
      },
      {
        "comment_id": "1989945569",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53024,
        "pr_file": "components/input/hooks/useHandleResizeWrapper.ts",
        "discussion_id": "1982448568",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { TextAreaRef } from 'rc-textarea';\n+import React from 'react';\n+\n+type ResizeWrapperHandler = (rcTextArea: TextAreaRef | null) => void;\n+\n+const ELEMENT_GAP = 2;\n+\n+const adjustElementWidth = (width: number, wrapper: HTMLElement): void => {\n+  if (wrapper.offsetWidth - width < ELEMENT_GAP) {\n+    // The textarea's width is increased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  } else if (wrapper.offsetWidth - width > ELEMENT_GAP) {\n+    // The textarea's width is decreased\n+    wrapper.style.width = `${width + ELEMENT_GAP}px`;\n+  }\n+};\n+\n+export default function useHandleResizeWrapper(): { handleResizeWrapper: ResizeWrapperHandler } {\n+  const handleResizeWrapper: ResizeWrapperHandler = React.useCallback((rcTextArea) => {\n+    if (!rcTextArea) return;\n+    if (rcTextArea.resizableTextArea.textArea.style.width.includes('px')) {\n+      const width = parseInt(rcTextArea.resizableTextArea.textArea.style.width.replace('px', ''));\n+      adjustElementWidth(width, rcTextArea.nativeElement);\n+    }\n+  }, []);\n+\n+  return { handleResizeWrapper };\n+}",
        "comment_created_at": "2025-03-11T18:51:50+00:00",
        "comment_author": "triyys",
        "comment_body": "5.1. Debounce Resize Events\r\nI tried using lodash\u2019s debounce on `handleResizeWrapper`, but it made the resizing noticeably slower and less smooth. I guess the updates need to be as real-time as possible.\r\n5.2. CSS-Driven Resizing\r\nI tried to use CSS but still need DOM manipulation, check out this PR\r\n#53132 \r\n\r\nP.S. I am still working with the `requestAnimationFrame` approach",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2032653275",
    "pr_number": 53225,
    "pr_file": "components/_util/hooks/useMergeSemantic.ts",
    "created_at": "2025-04-08T08:15:48+00:00",
    "commented_code": "import * as React from 'react';\n import classnames from 'classnames';\n \n-type SemanticClassNames<T extends string> = Partial<Record<T, string>>;\n+type TemplateSemanticClassNames<T extends string> = Partial<Record<T, string>>;\n type SemanticStyles<T extends string> = Partial<Record<T, React.CSSProperties>>;\n \n-function useSemanticClassNames<T extends string>(\n-  ...classNames: (SemanticClassNames<T> | undefined)[]\n-) {\n+/**\n+ * Check if value type is object.\n+ */\n+function isObjectStructure(value: any): value is Record<string, any> {\n+  return value && typeof value === 'object';\n+}\n+\n+export function convertToSemanticObj<T extends { default?: string }>(value?: string | T): T;\n+export function convertToSemanticObj(value: string | NestClassNames): NestClassNames;\n+export function convertToSemanticObj(value: string | NestClassNames): NestClassNames {\n+  return typeof value === 'string' ? { default: value } : value || {};\n+}\n+\n+interface NestClassNames {\n+  [key: string]: string | NestClassNames | undefined;\n+}\n+\n+function mergeClassNames<T extends NestClassNames>(...classNamesList: (T | undefined)[]) {\n+  // Init array for performance saving\n+  const keyList: string[] = [];",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2032653275",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53225,
        "pr_file": "components/_util/hooks/useMergeSemantic.ts",
        "discussion_id": "2032653275",
        "commented_code": "@@ -1,22 +1,60 @@\n import * as React from 'react';\n import classnames from 'classnames';\n \n-type SemanticClassNames<T extends string> = Partial<Record<T, string>>;\n+type TemplateSemanticClassNames<T extends string> = Partial<Record<T, string>>;\n type SemanticStyles<T extends string> = Partial<Record<T, React.CSSProperties>>;\n \n-function useSemanticClassNames<T extends string>(\n-  ...classNames: (SemanticClassNames<T> | undefined)[]\n-) {\n+/**\n+ * Check if value type is object.\n+ */\n+function isObjectStructure(value: any): value is Record<string, any> {\n+  return value && typeof value === 'object';\n+}\n+\n+export function convertToSemanticObj<T extends { default?: string }>(value?: string | T): T;\n+export function convertToSemanticObj(value: string | NestClassNames): NestClassNames;\n+export function convertToSemanticObj(value: string | NestClassNames): NestClassNames {\n+  return typeof value === 'string' ? { default: value } : value || {};\n+}\n+\n+interface NestClassNames {\n+  [key: string]: string | NestClassNames | undefined;\n+}\n+\n+function mergeClassNames<T extends NestClassNames>(...classNamesList: (T | undefined)[]) {\n+  // Init array for performance saving\n+  const keyList: string[] = [];",
        "comment_created_at": "2025-04-08T08:15:48+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u8fd9\u6837\u6ca1\u6709\u7701\u6027\u80fd\uff0c\u6bd4\u5982\u6709\u4e24\u4e2a classNames:\r\n\r\n```tsx\r\nA {\r\n  root: 'a',\r\n}\r\n\r\nB {\r\n  body: 'b'\r\n}\r\n```\r\n\r\n\u539f\u672c\u5206\u522b\u904d\u5386 `Object.keys` \u65f6\uff0c\u53ea\u9700\u8981\u904d\u5386 `A.a` + `B.b`\u3002\u73b0\u5728\u53d8\u6210\u4e86 `A.a` + `A.b` + `B.a` + `B.b`\u3002\u53cd\u800c\u8017\u8d39\u4e86\u6027\u80fd\u3002",
        "pr_file_module": null
      }
    ]
  }
]