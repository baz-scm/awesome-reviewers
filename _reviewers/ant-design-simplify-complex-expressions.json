[
  {
    "discussion_id": "2255756727",
    "pr_number": 54600,
    "pr_file": "components/table/hooks/useSelection.tsx",
    "created_at": "2025-08-06T03:09:57+00:00",
    "commented_code": "? !checkedCurrentAll && checkedCurrentSome\n                 : !allDisabledAndChecked && allDisabledSomeChecked\n             }\n-            onChange={onSelectAllChange}\n-            disabled={flattedData.length === 0 || allDisabled}\n-            aria-label={customizeSelections ? 'Custom selection' : 'Select all'}\n+            onChange={(e) => {\n+              onSelectAllChange();\n+              customCheckboxProps?.onChange?.(e);",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2255756727",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54600,
        "pr_file": "components/table/hooks/useSelection.tsx",
        "discussion_id": "2255756727",
        "commented_code": "@@ -480,9 +483,11 @@ const useSelection = <RecordType extends AnyObject = AnyObject>(\n                 ? !checkedCurrentAll && checkedCurrentSome\n                 : !allDisabledAndChecked && allDisabledSomeChecked\n             }\n-            onChange={onSelectAllChange}\n-            disabled={flattedData.length === 0 || allDisabled}\n-            aria-label={customizeSelections ? 'Custom selection' : 'Select all'}\n+            onChange={(e) => {\n+              onSelectAllChange();\n+              customCheckboxProps?.onChange?.(e);",
        "comment_created_at": "2025-08-06T03:09:57+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u505a\u6210\u89e3\u6784\u5427\uff0c\u4e0d\u8981\u5230\u5904\u90fd\u662f `?.`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193922616",
    "pr_number": 54333,
    "pr_file": "components/tag/index.tsx",
    "created_at": "2025-07-09T03:22:02+00:00",
    "commented_code": "const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n   // Style\n \n+  const sizeClassNameMap = { large: 'lg', small: 'sm', middle: 'md' };\n+\n+  const sizeFullName = useSize((ctxSize) => customizeSize ?? ctxSize);\n+\n+  const sizeCls = sizeFullName ? (sizeClassNameMap[sizeFullName] ?? '') : '';",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2193922616",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54333,
        "pr_file": "components/tag/index.tsx",
        "discussion_id": "2193922616",
        "commented_code": "@@ -80,12 +84,19 @@ const InternalTag = React.forwardRef<HTMLSpanElement, TagProps>((tagProps, ref)\n   const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n   // Style\n \n+  const sizeClassNameMap = { large: 'lg', small: 'sm', middle: 'md' };\n+\n+  const sizeFullName = useSize((ctxSize) => customizeSize ?? ctxSize);\n+\n+  const sizeCls = sizeFullName ? (sizeClassNameMap[sizeFullName] ?? '') : '';",
        "comment_created_at": "2025-07-09T03:22:02+00:00",
        "comment_author": "Wxh16144",
        "comment_body": "Can this be written like this?\r\n```tsx\r\nconst sizeCls = sizeClassNameMap[sizeFullName];\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141588018",
    "pr_number": 54053,
    "pr_file": "components/drawer/DrawerPanel.tsx",
    "created_at": "2025-06-12T03:23:51+00:00",
    "commented_code": "} = props;\n   const drawerContext = useComponentConfig('drawer');\n \n+  const closePosition =\n+    props.closable === false\n+      ? undefined\n+      : props.closable === undefined ||\n+          props.closable === true ||\n+          props.closable?.position === undefined ||\n+          props.closable?.position === 'start'\n+        ? 'start'\n+        : 'end';",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2141588018",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54053,
        "pr_file": "components/drawer/DrawerPanel.tsx",
        "discussion_id": "2141588018",
        "commented_code": "@@ -72,13 +77,30 @@ const DrawerPanel: React.FC<DrawerPanelProps> = (props) => {\n   } = props;\n   const drawerContext = useComponentConfig('drawer');\n \n+  const closePosition =\n+    props.closable === false\n+      ? undefined\n+      : props.closable === undefined ||\n+          props.closable === true ||\n+          props.closable?.position === undefined ||\n+          props.closable?.position === 'start'\n+        ? 'start'\n+        : 'end';",
        "comment_created_at": "2025-06-12T03:23:51+00:00",
        "comment_author": "afc163",
        "comment_body": "\u8fd9\u4e2a\u592a\u590d\u6742\u4e86\uff0c\u4e0d\u8981\u5d4c\u5957\u4e09\u5143\u8868\u8fbe\u5f0f\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2141621986",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54053,
        "pr_file": "components/drawer/DrawerPanel.tsx",
        "discussion_id": "2141588018",
        "commented_code": "@@ -72,13 +77,30 @@ const DrawerPanel: React.FC<DrawerPanelProps> = (props) => {\n   } = props;\n   const drawerContext = useComponentConfig('drawer');\n \n+  const closePosition =\n+    props.closable === false\n+      ? undefined\n+      : props.closable === undefined ||\n+          props.closable === true ||\n+          props.closable?.position === undefined ||\n+          props.closable?.position === 'start'\n+        ? 'start'\n+        : 'end';",
        "comment_created_at": "2025-06-12T03:39:07+00:00",
        "comment_author": "davidhsing",
        "comment_body": "\u8fd9\u4e2a\u662f\u63d0\u4ea4\u7684\u65f6\u5019\uff0cprettier \u81ea\u52a8\u683c\u5f0f\u5316\u7684\uff0c\u5199\u7684\u65f6\u5019\u5f88\u6e05\u6670\uff0c\u90fd\u6709\u62ec\u53f7",
        "pr_file_module": null
      },
      {
        "comment_id": "2141629216",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54053,
        "pr_file": "components/drawer/DrawerPanel.tsx",
        "discussion_id": "2141588018",
        "commented_code": "@@ -72,13 +77,30 @@ const DrawerPanel: React.FC<DrawerPanelProps> = (props) => {\n   } = props;\n   const drawerContext = useComponentConfig('drawer');\n \n+  const closePosition =\n+    props.closable === false\n+      ? undefined\n+      : props.closable === undefined ||\n+          props.closable === true ||\n+          props.closable?.position === undefined ||\n+          props.closable?.position === 'start'\n+        ? 'start'\n+        : 'end';",
        "comment_created_at": "2025-06-12T03:42:30+00:00",
        "comment_author": "li-jia-nan",
        "comment_body": "\u6539\u6210 if else \u5427\uff0c\u7528 useMemo \u5305\u4e00\u4e0b\uff0c\u8fd9\u79cd\u4ee3\u7801\u53ef\u8bfb\u6027\u592a\u5dee\u4e86\uff1a\r\n```ts\r\nconst closePosition = useMemo(() => {\r\n  const closable = props.closable;\r\n\r\n  if (closable === false) {\r\n    return undefined;\r\n  }\r\n\r\n  if (closable === true || closable === undefined) {\r\n    return 'start';\r\n  }\r\n\r\n  if (typeof closable === 'object') {\r\n    if (closable.position === undefined || closable.position === 'start') {\r\n      return 'start';\r\n    }\r\n    return 'end';\r\n  }\r\n\r\n  return 'end';\r\n}, [props.closable]);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2141653406",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54053,
        "pr_file": "components/drawer/DrawerPanel.tsx",
        "discussion_id": "2141588018",
        "commented_code": "@@ -72,13 +77,30 @@ const DrawerPanel: React.FC<DrawerPanelProps> = (props) => {\n   } = props;\n   const drawerContext = useComponentConfig('drawer');\n \n+  const closePosition =\n+    props.closable === false\n+      ? undefined\n+      : props.closable === undefined ||\n+          props.closable === true ||\n+          props.closable?.position === undefined ||\n+          props.closable?.position === 'start'\n+        ? 'start'\n+        : 'end';",
        "comment_created_at": "2025-06-12T03:58:34+00:00",
        "comment_author": "davidhsing",
        "comment_body": "\u5df2\u4fee\u6539\uff0c\u91c7\u7528 memo \u5305\u88f9",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2026596543",
    "pr_number": 53401,
    "pr_file": "components/statistic/Countdown.tsx",
    "created_at": "2025-04-03T09:36:49+00:00",
    "commented_code": "const syncTimer = () => {\n     const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n+    if ((!reverse && timestamp >= Date.now()) || (reverse && timestamp <= Date.now())) {\n       countdown.current = setInterval(() => {\n         forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n+        const timeDiff = reverse ? Date.now() - timestamp : timestamp - Date.now();",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2026596543",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2026596543",
        "commented_code": "@@ -36,11 +37,12 @@ const Countdown: React.FC<CountdownProps> = (props) => {\n \n   const syncTimer = () => {\n     const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n+    if ((!reverse && timestamp >= Date.now()) || (reverse && timestamp <= Date.now())) {\n       countdown.current = setInterval(() => {\n         forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n+        const timeDiff = reverse ? Date.now() - timestamp : timestamp - Date.now();",
        "comment_created_at": "2025-04-03T09:36:49+00:00",
        "comment_author": "zombieJ",
        "comment_body": "interval \u91cc\u9762\u6709\u597d\u591a Date.now\uff0c\u76f4\u63a5\u62bd\u4e2a\u53d8\u91cf\u51fa\u6765\u5427\u3002\u8fd8\u80fd\u8ba9\u4ee3\u7801\u770b\u8d77\u6765\u7b80\u5355\u4e00\u4e9b\u3002 reverse \u6709\u4e86\u4ee5\u540e\u770b\u8d77\u6765\u592a\u7ed5\u8111\u5b50",
        "pr_file_module": null
      },
      {
        "comment_id": "2026604515",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2026596543",
        "commented_code": "@@ -36,11 +37,12 @@ const Countdown: React.FC<CountdownProps> = (props) => {\n \n   const syncTimer = () => {\n     const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n+    if ((!reverse && timestamp >= Date.now()) || (reverse && timestamp <= Date.now())) {\n       countdown.current = setInterval(() => {\n         forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n+        const timeDiff = reverse ? Date.now() - timestamp : timestamp - Date.now();",
        "comment_created_at": "2025-04-03T09:41:03+00:00",
        "comment_author": "lcgash",
        "comment_body": "\u55ef\u554a",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033006534",
    "pr_number": 53401,
    "pr_file": "components/statistic/Timer.tsx",
    "created_at": "2025-04-08T11:40:42+00:00",
    "commented_code": "+import * as React from 'react';\n+\n+import useForceUpdate from '../_util/hooks/useForceUpdate';\n+import type { FormatConfig, valueType } from './utils';\n+import type { StatisticProps } from './Statistic';\n+import { formatCounter } from './utils';\n+import { cloneElement } from '../_util/reactNode';\n+import Statistic from './Statistic';\n+\n+export type TimerType = 'countdown' | 'countup';\n+\n+const REFRESH_INTERVAL = 1000 / 30;\n+\n+export interface StatisticTimerProps extends FormatConfig, StatisticProps {\n+  type: TimerType;\n+  format?: string;\n+  onFinish?: () => void;\n+  onChange?: (value?: valueType) => void;\n+}\n+\n+function getTime(value?: valueType) {\n+  return new Date(value as valueType).getTime();\n+}\n+\n+const StatisticTimer: React.FC<StatisticTimerProps> = (props) => {\n+  const { value, format = 'HH:mm:ss', onChange, onFinish, type, ...rest } = props;\n+\n+  const forceUpdate = useForceUpdate();\n+\n+  const counter = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n+\n+  const stopTimer = () => {\n+    onFinish?.();\n+    if (counter.current) {\n+      clearInterval(counter.current);\n+      counter.current = null;\n+    }\n+  };\n+\n+  const syncTimer = () => {\n+    const timestamp = getTime(value);\n+    const now = Date.now();\n+    const down = type === 'countdown';\n+    if ((down && timestamp >= now) || (!down && timestamp <= now)) {\n+      counter.current = setInterval(() => {\n+        const now = Date.now();\n+        forceUpdate();\n+        const timeDiff = !down ? now - timestamp : timestamp - now;\n+        onChange?.(timeDiff);\n+        if (down && timestamp < now) {\n+          stopTimer();\n+        }\n+      }, REFRESH_INTERVAL);\n+    }\n+  };\n+\n+  React.useEffect(() => {\n+    syncTimer();\n+    return () => {\n+      if (counter.current) {\n+        clearInterval(counter.current);\n+        counter.current = null;\n+      }\n+    };\n+  }, [value]);\n+\n+  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n+    formatCounter(formatValue, { ...config, format }, type === 'countdown');",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2033006534",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Timer.tsx",
        "discussion_id": "2033006534",
        "commented_code": "@@ -0,0 +1,76 @@\n+import * as React from 'react';\n+\n+import useForceUpdate from '../_util/hooks/useForceUpdate';\n+import type { FormatConfig, valueType } from './utils';\n+import type { StatisticProps } from './Statistic';\n+import { formatCounter } from './utils';\n+import { cloneElement } from '../_util/reactNode';\n+import Statistic from './Statistic';\n+\n+export type TimerType = 'countdown' | 'countup';\n+\n+const REFRESH_INTERVAL = 1000 / 30;\n+\n+export interface StatisticTimerProps extends FormatConfig, StatisticProps {\n+  type: TimerType;\n+  format?: string;\n+  onFinish?: () => void;\n+  onChange?: (value?: valueType) => void;\n+}\n+\n+function getTime(value?: valueType) {\n+  return new Date(value as valueType).getTime();\n+}\n+\n+const StatisticTimer: React.FC<StatisticTimerProps> = (props) => {\n+  const { value, format = 'HH:mm:ss', onChange, onFinish, type, ...rest } = props;\n+\n+  const forceUpdate = useForceUpdate();\n+\n+  const counter = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n+\n+  const stopTimer = () => {\n+    onFinish?.();\n+    if (counter.current) {\n+      clearInterval(counter.current);\n+      counter.current = null;\n+    }\n+  };\n+\n+  const syncTimer = () => {\n+    const timestamp = getTime(value);\n+    const now = Date.now();\n+    const down = type === 'countdown';\n+    if ((down && timestamp >= now) || (!down && timestamp <= now)) {\n+      counter.current = setInterval(() => {\n+        const now = Date.now();\n+        forceUpdate();\n+        const timeDiff = !down ? now - timestamp : timestamp - now;\n+        onChange?.(timeDiff);\n+        if (down && timestamp < now) {\n+          stopTimer();\n+        }\n+      }, REFRESH_INTERVAL);\n+    }\n+  };\n+\n+  React.useEffect(() => {\n+    syncTimer();\n+    return () => {\n+      if (counter.current) {\n+        clearInterval(counter.current);\n+        counter.current = null;\n+      }\n+    };\n+  }, [value]);\n+\n+  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n+    formatCounter(formatValue, { ...config, format }, type === 'countdown');",
        "comment_created_at": "2025-04-08T11:40:42+00:00",
        "comment_author": "zombieJ",
        "comment_body": "`type === 'countdown'` \u51fa\u73b0\u4e862\u6b21\uff0c\u62bd\u4e00\u4e2a\u53d8\u91cf",
        "pr_file_module": null
      }
    ]
  }
]