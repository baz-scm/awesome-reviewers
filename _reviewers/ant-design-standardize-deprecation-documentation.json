[
  {
    "discussion_id": "2182157810",
    "pr_number": 54279,
    "pr_file": "components/button/button.tsx",
    "created_at": "2025-07-03T08:14:54+00:00",
    "commented_code": "color?: ButtonColorType;\n   variant?: ButtonVariantType;\n   icon?: React.ReactNode;\n+  /** @deprecated Use iconPlacement instead */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2182157810",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54279,
        "pr_file": "components/button/button.tsx",
        "discussion_id": "2182157810",
        "commented_code": "@@ -42,7 +42,9 @@ export interface BaseButtonProps {\n   color?: ButtonColorType;\n   variant?: ButtonVariantType;\n   icon?: React.ReactNode;\n+  /** @deprecated Use iconPlacement instead */",
        "comment_created_at": "2025-07-03T08:14:54+00:00",
        "comment_author": "thinkasany",
        "comment_body": "```suggestion\r\n  /** @deprecated please use `iconPlacement` instead */\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138092798",
    "pr_number": 53793,
    "pr_file": "components/dropdown/index.tsx",
    "created_at": "2025-06-10T14:44:47+00:00",
    "commented_code": "import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2138092798",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53793,
        "pr_file": "components/dropdown/index.tsx",
        "discussion_id": "2138092798",
        "commented_code": "@@ -1,14 +1,7 @@\n import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
        "comment_created_at": "2025-06-10T14:44:47+00:00",
        "comment_author": "thinkasany",
        "comment_body": "\u8fd9\u91cc\u4e5f\u662f\u4e00\u6837\uff0c\u8bf4\u7684\u5220\u9664\u5176\u5b9e\u53ef\u80fd\u4e0d\u662f\u771f\u7684\u5220\u9664\uff0c\u56e0\u4e3a antd \u6709\u4e00\u4e2a\u5e9f\u5f03\u6d41\u7a0b\uff0c\u4e3a\u4e86\u4fdd\u6301\u7528\u6237\u8fc1\u79fb\u5347\u7ea7\u7248\u672c\u66f4\u987a\u5e8f\uff0c\u4f1a\u5728\u4e0b\u4e0b\u4e2a\u7248\u672c\u624d\u5f7b\u5e95\u79fb\u9664\uff0cv6 \u5c31\u662f\u5148\u7ed9\u4e2a warning \u548c\u66ff\u4ee3\u65b9\u6848\uff5e",
        "pr_file_module": null
      },
      {
        "comment_id": "2138106460",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53793,
        "pr_file": "components/dropdown/index.tsx",
        "discussion_id": "2138092798",
        "commented_code": "@@ -1,14 +1,7 @@\n import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
        "comment_created_at": "2025-06-10T14:48:56+00:00",
        "comment_author": "Meet-student",
        "comment_body": "@thinkasany \r\n\u90a3\r\n1 . compact-debug \r\n2.  dropdown/index.tsx\r\n3. dropdown-button.tsx\r\n\u6211\u9000\u56de\u5230\u4fdd\u7559\u540c next \u5206\u652f\u4e00\u81f4\u7684\u4ee3\u7801\uff1f",
        "pr_file_module": null
      },
      {
        "comment_id": "2138108789",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53793,
        "pr_file": "components/dropdown/index.tsx",
        "discussion_id": "2138092798",
        "commented_code": "@@ -1,14 +1,7 @@\n import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
        "comment_created_at": "2025-06-10T14:49:34+00:00",
        "comment_author": "Meet-student",
        "comment_body": "warning \u8981\u4f53\u73b0\u5728\u6587\u6863\u4e2d\u5417",
        "pr_file_module": null
      },
      {
        "comment_id": "2138128060",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53793,
        "pr_file": "components/dropdown/index.tsx",
        "discussion_id": "2138092798",
        "commented_code": "@@ -1,14 +1,7 @@\n import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
        "comment_created_at": "2025-06-10T14:56:12+00:00",
        "comment_author": "thinkasany",
        "comment_body": "1. debug \u548c test \u9000\u56de\u5427\uff0c\u9664\u4e86 debug \u4ee5\u5916\u7684 demo \u66ff\u6362\u662f\u5bf9\u7684\u3002\r\n2. warning \u4e0d\u7528\u4e86\uff0cv6 \u6587\u6863\u4e0d\u4f1a\u5c55\u793a\u8fd9\u4e00\u5757\u7684\u5f15\u5bfc\uff0c\u90a3\u4e48\u65b0\u7684\u7528\u6237\u5c31\u4e0d\u4f1a\u770b\u5230\u8fd9\u91cc\u7684\u63a8\u8350\u4e86\u3002\r\nhttps://github.com/ant-design/ant-design/pull/53262/files#diff-ac765bc110b950888a109547694db780cc37930ca44d894616ec69ae8187b1eb\r\n\r\n<img width=\"1493\" alt=\"image\" src=\"https://github.com/user-attachments/assets/859b7102-8840-4e9a-8d16-bd9340887772\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2138143504",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53793,
        "pr_file": "components/dropdown/index.tsx",
        "discussion_id": "2138092798",
        "commented_code": "@@ -1,14 +1,7 @@\n import InternalDropdown from './dropdown';\n-import DropdownButton from './dropdown-button';\n \n export type { DropdownProps as DropDownProps, DropdownProps } from './dropdown';\n-export type { DropdownButtonProps, DropdownButtonType } from './dropdown-button';\n \n-const Dropdown = InternalDropdown as typeof InternalDropdown & {\n-  Button: typeof DropdownButton;\n-};\n-\n-/** @deprecated Please use Space.Compact + Dropdown + Button instead */",
        "comment_created_at": "2025-06-10T15:01:43+00:00",
        "comment_author": "thinkasany",
        "comment_body": "\u62b1\u6b49\uff0c\u4e00\u5f00\u59cb\u6ca1\u8bf4\u6e05\u695a\u3002 \u800c\u4e14\u53d7\u7406\u7684\u6bd4\u8f83\u665a\u4e86\uff5e \u53ef\u80fd\u56e0\u4e3a\u5927\u90e8\u5206\u5728\u53e6\u5916\u4e00\u4e2apr\u4e2d\u4fee\u6539\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e2apr\u53ef\u80fd\u4fee\u6539\u7684\u5e76\u4e0d\u591a\u3002 \r\n\u987a\u4fbf\u5e26\u4f60\u4e86\u89e3\u4e00\u4e0b antd \u7684\u7248\u672c\u517c\u5bb9\u3002\u867d\u7136\u5bf9\u7ef4\u62a4\u8005\u6765\u8bf4\uff0c\u4f1a\u591a\u5f88\u591a\u9762\u6761\u5f0f\u7684\u517c\u5bb9\u4ee3\u7801\uff0c\u4f46\u662f\u5f00\u53d1\u8005\u548c\u7528\u6237\u8fc1\u79fb\u4e0a\u4f1a\u591a\u4e00\u70b9\u5b89\u5168\u3002\r\nhttps://ant.design/docs/blog/historical-debt-cn#%E5%BA%9F%E5%BC%83%E8%AD%A6%E5%91%8A\r\n<img width=\"2449\" alt=\"image\" src=\"https://github.com/user-attachments/assets/706175c4-51a0-4f90-90de-a9be948c976b\" />\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2032325558",
    "pr_number": 53401,
    "pr_file": "components/statistic/Countdown.tsx",
    "created_at": "2025-04-08T03:40:12+00:00",
    "commented_code": "-import * as React from 'react';\n-\n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n-import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n-import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n-\n-export interface CountdownProps extends StatisticProps {\n-  format?: string;\n-  onFinish?: () => void;\n-  onChange?: (value?: valueType) => void;\n-}\n-\n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n-const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n-};\n-\n-export default React.memo(Countdown);",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2032325558",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2032325558",
        "commented_code": "@@ -1,69 +0,0 @@\n-import * as React from 'react';\n-\n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n-import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n-import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n-\n-export interface CountdownProps extends StatisticProps {\n-  format?: string;\n-  onFinish?: () => void;\n-  onChange?: (value?: valueType) => void;\n-}\n-\n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n-const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n-};\n-\n-export default React.memo(Countdown);",
        "comment_created_at": "2025-04-08T03:40:12+00:00",
        "comment_author": "afc163",
        "comment_body": "\u4e0d\u80fd\u5220\uff0c\u53ea\u80fd\u5e9f\u5f03\uff0c\u5f97\u4fdd\u6301\u517c\u5bb9\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2032333099",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2032325558",
        "commented_code": "@@ -1,69 +0,0 @@\n-import * as React from 'react';\n-\n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n-import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n-import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n-\n-export interface CountdownProps extends StatisticProps {\n-  format?: string;\n-  onFinish?: () => void;\n-  onChange?: (value?: valueType) => void;\n-}\n-\n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n-const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n-};\n-\n-export default React.memo(Countdown);",
        "comment_created_at": "2025-04-08T03:51:39+00:00",
        "comment_author": "lcgash",
        "comment_body": "\u5e9f\u5f03\u5e94\u8be5\u600e\u4e48\u52a0\u6807\u8bc6\u5462",
        "pr_file_module": null
      },
      {
        "comment_id": "2032335872",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53401,
        "pr_file": "components/statistic/Countdown.tsx",
        "discussion_id": "2032325558",
        "commented_code": "@@ -1,69 +0,0 @@\n-import * as React from 'react';\n-\n-import useForceUpdate from '../_util/hooks/useForceUpdate';\n-import { cloneElement } from '../_util/reactNode';\n-import type { StatisticProps } from './Statistic';\n-import Statistic from './Statistic';\n-import type { valueType } from './utils';\n-import { formatCountdown } from './utils';\n-\n-const REFRESH_INTERVAL = 1000 / 30;\n-\n-export interface CountdownProps extends StatisticProps {\n-  format?: string;\n-  onFinish?: () => void;\n-  onChange?: (value?: valueType) => void;\n-}\n-\n-function getTime(value?: valueType) {\n-  return new Date(value as valueType).getTime();\n-}\n-\n-const Countdown: React.FC<CountdownProps> = (props) => {\n-  const { value, format = 'HH:mm:ss', onChange, onFinish, ...rest } = props;\n-\n-  const forceUpdate = useForceUpdate();\n-\n-  const countdown = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n-\n-  const stopTimer = () => {\n-    onFinish?.();\n-    if (countdown.current) {\n-      clearInterval(countdown.current);\n-      countdown.current = null;\n-    }\n-  };\n-\n-  const syncTimer = () => {\n-    const timestamp = getTime(value);\n-    if (timestamp >= Date.now()) {\n-      countdown.current = setInterval(() => {\n-        forceUpdate();\n-        onChange?.(timestamp - Date.now());\n-        if (timestamp < Date.now()) {\n-          stopTimer();\n-        }\n-      }, REFRESH_INTERVAL);\n-    }\n-  };\n-\n-  React.useEffect(() => {\n-    syncTimer();\n-    return () => {\n-      if (countdown.current) {\n-        clearInterval(countdown.current);\n-        countdown.current = null;\n-      }\n-    };\n-  }, [value]);\n-\n-  const formatter: StatisticProps['formatter'] = (formatValue, config) =>\n-    formatCountdown(formatValue, { ...config, format });\n-\n-  const valueRender: StatisticProps['valueRender'] = (node) =>\n-    cloneElement(node, { title: undefined });\n-\n-  return <Statistic {...rest} value={value} valueRender={valueRender} formatter={formatter} />;\n-};\n-\n-export default React.memo(Countdown);",
        "comment_created_at": "2025-04-08T03:55:18+00:00",
        "comment_author": "afc163",
        "comment_body": "```ts\r\n/**\r\n * @deprecated DeprecatedComponent \u5df2\u88ab\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528 NewComponent \u66ff\u4ee3\u3002\r\n */\r\n```",
        "pr_file_module": null
      }
    ]
  }
]