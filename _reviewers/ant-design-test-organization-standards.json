[
  {
    "discussion_id": "2269409783",
    "pr_number": 54664,
    "pr_file": "components/_util/__tests__/useMergeCondition.test.tsx",
    "created_at": "2025-08-12T10:27:48+00:00",
    "commented_code": "+import { renderHook } from '@testing-library/react';\n+import useMergeCondition, {\n+  useMergeConditionalStyles,\n+  useMergeConditionalClassNames,\n+} from '../hooks/useMergeCondition';\n+\n+describe('useMergeConditionalClassNames', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, classNames: { root: 'btn-outlined' } },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100 bg-large bg-hover' },\n+    },\n+    { props: { variant: 'outlined' }, classNames: { root: 'opacity-50', icon: 'opacity-50' } },\n+  ];\n+\n+  it('merges all matching classNames', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+\n+  it('merges only partial matches', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+});\n+\n+describe('useMergeConditionalStyles', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, styles: { root: { border: '1px solid red' } } },\n+    { props: { variant: 'outlined', size: 'large' }, styles: { root: { padding: '16px' } } },\n+    { props: { variant: 'outlined' }, styles: { root: { opacity: 0.5 }, icon: { opacity: 0.5 } } },\n+  ];\n+\n+  it('merges all matching styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+      icon: { opacity: 0.5 },\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+});\n+\n+describe('useMergeCondition', () => {\n+  const conditions = [\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'btn-outlined' },\n+      styles: { root: { border: '1px solid red' } },\n+    },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100' },\n+      styles: { root: { padding: '16px' } },\n+    },\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'opacity-50', icon: 'opacity-50' },\n+      styles: { root: { opacity: 0.5 } },\n+    },\n+  ];\n+\n+  it('returns merged classNames and styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeCondition(props, conditions));\n+\n+    const [classNames, styles] = result.current;\n+\n+    expect(classNames).toEqual({\n+      root: 'btn-outlined bg-gray-100 opacity-50',\n+      icon: 'opacity-50',\n+    });\n+    expect(styles).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+    });\n+  });\n+});",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2269409783",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54664,
        "pr_file": "components/_util/__tests__/useMergeCondition.test.tsx",
        "discussion_id": "2269409783",
        "commented_code": "@@ -0,0 +1,103 @@\n+import { renderHook } from '@testing-library/react';\n+import useMergeCondition, {\n+  useMergeConditionalStyles,\n+  useMergeConditionalClassNames,\n+} from '../hooks/useMergeCondition';\n+\n+describe('useMergeConditionalClassNames', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, classNames: { root: 'btn-outlined' } },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100 bg-large bg-hover' },\n+    },\n+    { props: { variant: 'outlined' }, classNames: { root: 'opacity-50', icon: 'opacity-50' } },\n+  ];\n+\n+  it('merges all matching classNames', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+\n+  it('merges only partial matches', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+});\n+\n+describe('useMergeConditionalStyles', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, styles: { root: { border: '1px solid red' } } },\n+    { props: { variant: 'outlined', size: 'large' }, styles: { root: { padding: '16px' } } },\n+    { props: { variant: 'outlined' }, styles: { root: { opacity: 0.5 }, icon: { opacity: 0.5 } } },\n+  ];\n+\n+  it('merges all matching styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+      icon: { opacity: 0.5 },\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+});\n+\n+describe('useMergeCondition', () => {\n+  const conditions = [\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'btn-outlined' },\n+      styles: { root: { border: '1px solid red' } },\n+    },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100' },\n+      styles: { root: { padding: '16px' } },\n+    },\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'opacity-50', icon: 'opacity-50' },\n+      styles: { root: { opacity: 0.5 } },\n+    },\n+  ];\n+\n+  it('returns merged classNames and styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeCondition(props, conditions));\n+\n+    const [classNames, styles] = result.current;\n+\n+    expect(classNames).toEqual({\n+      root: 'btn-outlined bg-gray-100 opacity-50',\n+      icon: 'opacity-50',\n+    });\n+    expect(styles).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+    });\n+  });\n+});",
        "comment_created_at": "2025-08-12T10:27:48+00:00",
        "comment_author": "afc163",
        "comment_body": "\u6700\u597d\u907f\u514d\u5b8c\u5168\u9760\u8fd9\u79cd\u65b9\u6cd5\u72ec\u7acb\u6d4b\u8bd5\u7c7b\u578b\u7684\u5355\u6d4b\u6765\u505a\u8986\u76d6\uff0c\u8fd9\u6837\u53ef\u80fd\u5bfc\u81f4\u6b63\u5e38\u4f7f\u7528 antd \u7ec4\u4ef6\u65f6\uff0c\u67d0\u4e9b\u4ee3\u7801\u6ca1\u88ab\u8986\u76d6\u5230\u3002\n\n\u5c3d\u91cf\u901a\u8fc7 antd \u7ec4\u4ef6\u7528\u6cd5\u6765\u89e6\u53d1\u884c\u8986\u76d6\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2269882087",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54664,
        "pr_file": "components/_util/__tests__/useMergeCondition.test.tsx",
        "discussion_id": "2269409783",
        "commented_code": "@@ -0,0 +1,103 @@\n+import { renderHook } from '@testing-library/react';\n+import useMergeCondition, {\n+  useMergeConditionalStyles,\n+  useMergeConditionalClassNames,\n+} from '../hooks/useMergeCondition';\n+\n+describe('useMergeConditionalClassNames', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, classNames: { root: 'btn-outlined' } },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100 bg-large bg-hover' },\n+    },\n+    { props: { variant: 'outlined' }, classNames: { root: 'opacity-50', icon: 'opacity-50' } },\n+  ];\n+\n+  it('merges all matching classNames', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+\n+  it('merges only partial matches', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalClassNames(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: 'btn-outlined bg-gray-100 bg-large bg-hover opacity-50',\n+      icon: 'opacity-50',\n+    });\n+  });\n+});\n+\n+describe('useMergeConditionalStyles', () => {\n+  const conditions = [\n+    { props: { variant: 'outlined' }, styles: { root: { border: '1px solid red' } } },\n+    { props: { variant: 'outlined', size: 'large' }, styles: { root: { padding: '16px' } } },\n+    { props: { variant: 'outlined' }, styles: { root: { opacity: 0.5 }, icon: { opacity: 0.5 } } },\n+  ];\n+\n+  it('merges all matching styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+      icon: { opacity: 0.5 },\n+    });\n+  });\n+\n+  it('returns empty when no match', () => {\n+    const props = { variant: 'filled' };\n+    const { result } = renderHook(() => useMergeConditionalStyles(props, conditions));\n+\n+    expect(result.current).toEqual({});\n+  });\n+});\n+\n+describe('useMergeCondition', () => {\n+  const conditions = [\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'btn-outlined' },\n+      styles: { root: { border: '1px solid red' } },\n+    },\n+    {\n+      props: { variant: 'outlined', size: 'large' },\n+      classNames: { root: 'bg-gray-100' },\n+      styles: { root: { padding: '16px' } },\n+    },\n+    {\n+      props: { variant: 'outlined' },\n+      classNames: { root: 'opacity-50', icon: 'opacity-50' },\n+      styles: { root: { opacity: 0.5 } },\n+    },\n+  ];\n+\n+  it('returns merged classNames and styles', () => {\n+    const props = { variant: 'outlined', size: 'large' };\n+    const { result } = renderHook(() => useMergeCondition(props, conditions));\n+\n+    const [classNames, styles] = result.current;\n+\n+    expect(classNames).toEqual({\n+      root: 'btn-outlined bg-gray-100 opacity-50',\n+      icon: 'opacity-50',\n+    });\n+    expect(styles).toEqual({\n+      root: { border: '1px solid red', padding: '16px', opacity: 0.5 },\n+    });\n+  });\n+});",
        "comment_created_at": "2025-08-12T13:39:23+00:00",
        "comment_author": "Meet-student",
        "comment_body": "\ud83d\udc4c\ud83c\udffb",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2086733147",
    "pr_number": 53805,
    "pr_file": "components/button/__tests__/index.test.tsx",
    "created_at": "2025-05-13T12:44:37+00:00",
    "commented_code": "jest.useRealTimers();\n   });\n \n+  it('should update loading state correctly when using ref', async () => {",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2086733147",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53805,
        "pr_file": "components/button/__tests__/index.test.tsx",
        "discussion_id": "2086733147",
        "commented_code": "@@ -194,6 +194,24 @@ describe('Button', () => {\n     jest.useRealTimers();\n   });\n \n+  it('should update loading state correctly when using ref', async () => {",
        "comment_created_at": "2025-05-13T12:44:37+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u6d4b\u8bd5\u540d\u5b57\u4e0d\u5bf9\uff0c\u4e0d\u8981\u628a\u5b9e\u73b0\u4f5c\u4e3a\u6d4b\u8bd5\u540d\u3002\u800c\u662f\u56e0\u4e3a\u662f\u8981\u6d4b\u8bd5\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6d4b\u8bd5\u7684\u5e94\u8be5\u662f\u5feb\u901f\u70b9\u51fb\u4e0d\u5e94\u8be5\u89e6\u53d1\u591a\u6b21 click \u4e8b\u4ef6",
        "pr_file_module": null
      },
      {
        "comment_id": "2086735768",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53805,
        "pr_file": "components/button/__tests__/index.test.tsx",
        "discussion_id": "2086733147",
        "commented_code": "@@ -194,6 +194,24 @@ describe('Button', () => {\n     jest.useRealTimers();\n   });\n \n+  it('should update loading state correctly when using ref', async () => {",
        "comment_created_at": "2025-05-13T12:45:54+00:00",
        "comment_author": "zombieJ",
        "comment_body": "\u7136\u540e\u6d4b\u8bd5\u884c\u4e3a\u662f Button \u975e loading \u7136\u540e\u70b9\u51fb\u591a\u6b21\uff0c\u68c0\u6d4b onClick \u662f\u5426\u89e6\u53d1",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2184788246",
    "pr_number": 54296,
    "pr_file": "components/tag/__tests__/index.test.tsx",
    "created_at": "2025-07-04T09:00:59+00:00",
    "commented_code": "expect(onChange).toHaveBeenCalledWith(true);\n     });\n   });\n+\n+  describe('CheckableTag with icon', () => {\n+    it('should render icon', () => {\n+      const { container } = render(<Tag.CheckableTag icon={<LinkedinOutlined />} checked={true} />);\n+      expect(container.querySelector('.anticon')).toBeInTheDocument();\n+    });\n+  });",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2184788246",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54296,
        "pr_file": "components/tag/__tests__/index.test.tsx",
        "discussion_id": "2184788246",
        "commented_code": "@@ -147,4 +148,27 @@ describe('Tag', () => {\n       expect(onChange).toHaveBeenCalledWith(true);\n     });\n   });\n+\n+  describe('CheckableTag with icon', () => {\n+    it('should render icon', () => {\n+      const { container } = render(<Tag.CheckableTag icon={<LinkedinOutlined />} checked={true} />);\n+      expect(container.querySelector('.anticon')).toBeInTheDocument();\n+    });\n+  });",
        "comment_created_at": "2025-07-04T09:00:59+00:00",
        "comment_author": "afc163",
        "comment_body": "\u4e0d\u8981\u4e00\u4e2a describe \u53ea\u5305\u4e00\u4e2a it\n\n\u7559\u4e00\u4e2a `describe('CheckableTag', () => { ... });` \u5c31\u597d\uff0c\u6240\u6709\u76f8\u5173 it \u90fd\u53ef\u4ee5\u653e\u8fdb\u6765\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2184793956",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54296,
        "pr_file": "components/tag/__tests__/index.test.tsx",
        "discussion_id": "2184788246",
        "commented_code": "@@ -147,4 +148,27 @@ describe('Tag', () => {\n       expect(onChange).toHaveBeenCalledWith(true);\n     });\n   });\n+\n+  describe('CheckableTag with icon', () => {\n+    it('should render icon', () => {\n+      const { container } = render(<Tag.CheckableTag icon={<LinkedinOutlined />} checked={true} />);\n+      expect(container.querySelector('.anticon')).toBeInTheDocument();\n+    });\n+  });",
        "comment_created_at": "2025-07-04T09:04:02+00:00",
        "comment_author": "QdabuliuQ",
        "comment_body": "\u597d\u561e",
        "pr_file_module": null
      },
      {
        "comment_id": "2184797283",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 54296,
        "pr_file": "components/tag/__tests__/index.test.tsx",
        "discussion_id": "2184788246",
        "commented_code": "@@ -147,4 +148,27 @@ describe('Tag', () => {\n       expect(onChange).toHaveBeenCalledWith(true);\n     });\n   });\n+\n+  describe('CheckableTag with icon', () => {\n+    it('should render icon', () => {\n+      const { container } = render(<Tag.CheckableTag icon={<LinkedinOutlined />} checked={true} />);\n+      expect(container.querySelector('.anticon')).toBeInTheDocument();\n+    });\n+  });",
        "comment_created_at": "2025-07-04T09:05:56+00:00",
        "comment_author": "QdabuliuQ",
        "comment_body": "\u5df2\u8c03\u6574 \u270c\ufe0f",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2117045018",
    "pr_number": 53958,
    "pr_file": "components/input/__tests__/Search.test.tsx",
    "created_at": "2025-05-31T02:10:54+00:00",
    "commented_code": "fireEvent.keyDown(container.querySelector('input')!, { key: 'Enter', keyCode: 13 });\n     expect(onPressEnter).toHaveBeenCalledTimes(1);\n   });\n+\n+  it('should support classNames and styles', () => {\n+    const { container, getByText } = render(\n+      <Search\n+        showCount\n+        prefix=\"prefix\"\n+        suffix=\"suffix\"\n+        enterButton=\"button text\"\n+        loading\n+        classNames={{\n+          root: 'custom-root',\n+          input: 'custom-input',\n+          prefix: 'custom-prefix',\n+          suffix: 'custom-suffix',\n+          count: 'custom-count',\n+          button: { root: 'custom-button', icon: 'custom-icon', content: 'custom-content' },\n+        }}\n+        styles={{\n+          root: { color: 'red' },\n+          input: { color: 'blue' },\n+          prefix: { color: 'green' },\n+          suffix: { color: 'yellow' },\n+          count: { color: 'green' },\n+          button: {\n+            root: { color: 'purple' },\n+            icon: { color: 'orange' },\n+            content: { color: 'pink' },\n+          },\n+        }}\n+      />,\n+    );\n+    const root = container.querySelector('.ant-input-search');\n+    const input = container.querySelector('.ant-input');\n+    const prefix = container.querySelector('.ant-input-prefix');\n+    const suffix = container.querySelector('.ant-input-suffix');\n+    const button = container.querySelector('.ant-btn');\n+    const buttonIcon = container.querySelector('.ant-btn-icon');\n+    const buttonContent = getByText('button text');\n+    const count = container.querySelector('.ant-input-show-count-suffix');\n+    expect(root).toHaveClass('custom-root');\n+    expect(root).toHaveStyle({ color: 'red' });\n+    expect(input).toHaveClass('custom-input');\n+    expect(input).toHaveStyle({ color: 'blue' });\n+    expect(prefix).toHaveClass('custom-prefix');",
    "repo_full_name": "ant-design/ant-design",
    "discussion_comments": [
      {
        "comment_id": "2117045018",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53958,
        "pr_file": "components/input/__tests__/Search.test.tsx",
        "discussion_id": "2117045018",
        "commented_code": "@@ -227,4 +227,60 @@ describe('Input.Search', () => {\n     fireEvent.keyDown(container.querySelector('input')!, { key: 'Enter', keyCode: 13 });\n     expect(onPressEnter).toHaveBeenCalledTimes(1);\n   });\n+\n+  it('should support classNames and styles', () => {\n+    const { container, getByText } = render(\n+      <Search\n+        showCount\n+        prefix=\"prefix\"\n+        suffix=\"suffix\"\n+        enterButton=\"button text\"\n+        loading\n+        classNames={{\n+          root: 'custom-root',\n+          input: 'custom-input',\n+          prefix: 'custom-prefix',\n+          suffix: 'custom-suffix',\n+          count: 'custom-count',\n+          button: { root: 'custom-button', icon: 'custom-icon', content: 'custom-content' },\n+        }}\n+        styles={{\n+          root: { color: 'red' },\n+          input: { color: 'blue' },\n+          prefix: { color: 'green' },\n+          suffix: { color: 'yellow' },\n+          count: { color: 'green' },\n+          button: {\n+            root: { color: 'purple' },\n+            icon: { color: 'orange' },\n+            content: { color: 'pink' },\n+          },\n+        }}\n+      />,\n+    );\n+    const root = container.querySelector('.ant-input-search');\n+    const input = container.querySelector('.ant-input');\n+    const prefix = container.querySelector('.ant-input-prefix');\n+    const suffix = container.querySelector('.ant-input-suffix');\n+    const button = container.querySelector('.ant-btn');\n+    const buttonIcon = container.querySelector('.ant-btn-icon');\n+    const buttonContent = getByText('button text');\n+    const count = container.querySelector('.ant-input-show-count-suffix');\n+    expect(root).toHaveClass('custom-root');\n+    expect(root).toHaveStyle({ color: 'red' });\n+    expect(input).toHaveClass('custom-input');\n+    expect(input).toHaveStyle({ color: 'blue' });\n+    expect(prefix).toHaveClass('custom-prefix');",
        "comment_created_at": "2025-05-31T02:10:54+00:00",
        "comment_author": "thinkasany",
        "comment_body": "\u5176\u5b9e\u6211\u611f\u89c9\u8fd9\u79cd\u5355\u6d4b\u770b\u8d77\u6765\u4f1a\u7d2f\u4e00\u70b9\uff0c\u5982\u679c\u76f4\u63a5\u7528\u7684 customStyles.prefix \u8fd9\u6837\u5b50\u611f\u89c9\u770b\u8d77\u6765\u8f7b\u677e\u4e00\u70b9\u3002\r\n- \u4e0d\u7528\u5173\u5fc3\u5177\u4f53\u7684style \u548c classname\uff0c\u53ea\u9700\u8981\u68c0\u67e5\u662f\u5426\u548c\u5f53\u524d\u68c0\u67e5\u7684dom\u8282\u70b9\u540d\u79f0\u4e00\u81f4\u5373\u53ef\r\n-  \u4fee\u6539\u5177\u4f53\u5355\u6d4b\u5185\u5bb9\uff0c\u4e5f\u53ea\u9700\u8981\u8c03\u6574 customstyles \u8fd9\u4e00\u4e2a\u5bf9\u8c61\u914d\u7f6e\u3002",
        "pr_file_module": null
      },
      {
        "comment_id": "2117896754",
        "repo_full_name": "ant-design/ant-design",
        "pr_number": 53958,
        "pr_file": "components/input/__tests__/Search.test.tsx",
        "discussion_id": "2117045018",
        "commented_code": "@@ -227,4 +227,60 @@ describe('Input.Search', () => {\n     fireEvent.keyDown(container.querySelector('input')!, { key: 'Enter', keyCode: 13 });\n     expect(onPressEnter).toHaveBeenCalledTimes(1);\n   });\n+\n+  it('should support classNames and styles', () => {\n+    const { container, getByText } = render(\n+      <Search\n+        showCount\n+        prefix=\"prefix\"\n+        suffix=\"suffix\"\n+        enterButton=\"button text\"\n+        loading\n+        classNames={{\n+          root: 'custom-root',\n+          input: 'custom-input',\n+          prefix: 'custom-prefix',\n+          suffix: 'custom-suffix',\n+          count: 'custom-count',\n+          button: { root: 'custom-button', icon: 'custom-icon', content: 'custom-content' },\n+        }}\n+        styles={{\n+          root: { color: 'red' },\n+          input: { color: 'blue' },\n+          prefix: { color: 'green' },\n+          suffix: { color: 'yellow' },\n+          count: { color: 'green' },\n+          button: {\n+            root: { color: 'purple' },\n+            icon: { color: 'orange' },\n+            content: { color: 'pink' },\n+          },\n+        }}\n+      />,\n+    );\n+    const root = container.querySelector('.ant-input-search');\n+    const input = container.querySelector('.ant-input');\n+    const prefix = container.querySelector('.ant-input-prefix');\n+    const suffix = container.querySelector('.ant-input-suffix');\n+    const button = container.querySelector('.ant-btn');\n+    const buttonIcon = container.querySelector('.ant-btn-icon');\n+    const buttonContent = getByText('button text');\n+    const count = container.querySelector('.ant-input-show-count-suffix');\n+    expect(root).toHaveClass('custom-root');\n+    expect(root).toHaveStyle({ color: 'red' });\n+    expect(input).toHaveClass('custom-input');\n+    expect(input).toHaveStyle({ color: 'blue' });\n+    expect(prefix).toHaveClass('custom-prefix');",
        "comment_created_at": "2025-05-31T14:21:07+00:00",
        "comment_author": "thinkasany",
        "comment_body": "\u987a\u4fbf\u5355\u72ec\u62bd\u51fa\u4e00\u4e2a semantic.test.tsx \u5427\uff0c\u6211\u4e4b\u524d\u53d1\u73b0\u9047\u5230\u627e\u5355\u6d4b\u4f1a\u6bd4\u8f83\u7d2f\u3002 \u8fd9\u91cc\u5c31\u4e0d\u7528\u62c6\u5728\u8fd9\u4e48\u591a\u7ec4\u4ef6\u4e86\uff0c\u987a\u4fbf\u6536\u62fe\u4e00\u4e0b\u4e0a\u9762\u63d0\u5230\u7684\u5427\u3002\r\n<img width=\"295\" alt=\"image\" src=\"https://github.com/user-attachments/assets/fc514b26-b836-4f96-af4d-c027ea465c1c\" />\r\n",
        "pr_file_module": null
      }
    ]
  }
]