[
  {
    "discussion_id": "2094519283",
    "pr_number": 9649,
    "pr_file": ".github/workflows/benchmark.yml",
    "created_at": "2025-05-18T13:06:34+00:00",
    "commented_code": "+name: Benchmark\n+concurrency:\n+  group: '${{ github.workflow }}-${{ github.ref }}'\n+  cancel-in-progress: true\n+env:\n+  IMAGE: appwrite-dev\n+  CACHE_KEY: 'appwrite-dev-${{ github.event.pull_request.head.sha }}'\n+'on':\n+  - pull_request\n+jobs:\n+  setup:\n+    name: Setup & Build Appwrite Image\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+        with:\n+          submodules: recursive\n+      - name: Set up Docker Buildx\n+        uses: docker/setup-buildx-action@v3\n+      - name: Build Appwrite\n+        uses: docker/build-push-action@v6\n+        with:\n+          context: .\n+          push: false\n+          tags: '${{ env.IMAGE }}'\n+          load: true\n+          cache-from: type=gha\n+          cache-to: 'type=gha,mode=max'\n+          outputs: 'type=docker,dest=/tmp/${{ env.IMAGE }}.tar'\n+          build-args: |\n+            DEBUG=false\n+            TESTING=true\n+            VERSION=dev\n+      - name: Cache Docker Image\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+  benchmarking:\n+    name: Benchmark\n+    runs-on: ubuntu-latest\n+    needs: setup\n+    permissions:\n+      pull-requests: write\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+      - name: Load Cache\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+          fail-on-cache-miss: true\n+      - name: Load and Start Appwrite\n+        run: |\n+          sed -i 's/traefik/localhost/g' .env\n+          docker load --input /tmp/${{ env.IMAGE }}.tar\n+          docker compose up -d\n+          sleep 10\n+      - name: Install Oha",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094519283",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9649,
        "pr_file": ".github/workflows/benchmark.yml",
        "discussion_id": "2094519283",
        "commented_code": "@@ -0,0 +1,120 @@\n+name: Benchmark\n+concurrency:\n+  group: '${{ github.workflow }}-${{ github.ref }}'\n+  cancel-in-progress: true\n+env:\n+  IMAGE: appwrite-dev\n+  CACHE_KEY: 'appwrite-dev-${{ github.event.pull_request.head.sha }}'\n+'on':\n+  - pull_request\n+jobs:\n+  setup:\n+    name: Setup & Build Appwrite Image\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+        with:\n+          submodules: recursive\n+      - name: Set up Docker Buildx\n+        uses: docker/setup-buildx-action@v3\n+      - name: Build Appwrite\n+        uses: docker/build-push-action@v6\n+        with:\n+          context: .\n+          push: false\n+          tags: '${{ env.IMAGE }}'\n+          load: true\n+          cache-from: type=gha\n+          cache-to: 'type=gha,mode=max'\n+          outputs: 'type=docker,dest=/tmp/${{ env.IMAGE }}.tar'\n+          build-args: |\n+            DEBUG=false\n+            TESTING=true\n+            VERSION=dev\n+      - name: Cache Docker Image\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+  benchmarking:\n+    name: Benchmark\n+    runs-on: ubuntu-latest\n+    needs: setup\n+    permissions:\n+      pull-requests: write\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+      - name: Load Cache\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+          fail-on-cache-miss: true\n+      - name: Load and Start Appwrite\n+        run: |\n+          sed -i 's/traefik/localhost/g' .env\n+          docker load --input /tmp/${{ env.IMAGE }}.tar\n+          docker compose up -d\n+          sleep 10\n+      - name: Install Oha",
        "comment_created_at": "2025-05-18T13:06:34+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**`sleep 10` is fragile \u2013 actively poll the health endpoint instead**  \nBoot-time for the stack varies (image download, DB migrations, etc.).  \nA hard-coded 10\u2009s delay may produce intermittent false negatives, especially on busy runners.\n\n```diff\n-          docker compose up -d\n-          sleep 10\n+# Start stack and wait (max 90 s) for the health endpoint.\n+          docker compose up -d\n+          for i in {1..18}; do               # 18 \u00d7 5 s = 90 s\n+            if curl -fs http://localhost/v1/health/version >/dev/null; then\n+              break\n+            fi\n+            echo \"\ud83d\udd52 Waiting for Appwrite to become healthy\u2026 ($i)\"\n+            sleep 5\n+          done\n+          curl -fs http://localhost/v1/health/version >/dev/null || {\n+            echo \"\u274c Appwrite did not become healthy in time\" >&2\n+            exit 1\n+          }\n```\nThis keeps the workflow fast when the service is quick to boot but resilient when it needs longer.\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n      - name: Load and Start Appwrite\n        run: |\n          sed -i 's/traefik/localhost/g' .env\n          docker load --input /tmp/${{ env.IMAGE }}.tar\n          # Start stack and wait (max 90 s) for the health endpoint.\n          docker compose up -d\n          for i in {1..18}; do               # 18 \u00d7 5 s = 90 s\n            if curl -fs http://localhost/v1/health/version >/dev/null; then\n              break\n            fi\n            echo \"\ud83d\udd52 Waiting for Appwrite to become healthy\u2026 ($i)\"\n            sleep 5\n          done\n          curl -fs http://localhost/v1/health/version >/dev/null || {\n            echo \"\u274c Appwrite did not become healthy in time\" >&2\n            exit 1\n          }\n      - name: Install Oha\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn .github/workflows/benchmark.yml around lines 55 to 61, replace the fixed\n'sleep 10' delay with a loop that actively polls the health endpoint of the\nAppwrite service until it responds successfully or a timeout is reached. This\nensures the workflow waits precisely for the service to be ready, improving\nreliability and avoiding unnecessary delays or premature failures.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2186332733",
    "pr_number": 8775,
    "pr_file": ".github/workflows/benchmark.yml",
    "created_at": "2025-07-05T01:23:44+00:00",
    "commented_code": "+name: Benchmark\n+concurrency:\n+  group: '${{ github.workflow }}-${{ github.ref }}'\n+  cancel-in-progress: true\n+env:\n+  IMAGE: appwrite-dev\n+  CACHE_KEY: 'appwrite-dev-${{ github.event.pull_request.head.sha }}'\n+'on':\n+  - pull_request\n+jobs:\n+  setup:\n+    name: Setup & Build Appwrite Image\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+        with:\n+          submodules: recursive\n+      - name: Set up Docker Buildx\n+        uses: docker/setup-buildx-action@v3\n+      - name: Build Appwrite\n+        uses: docker/build-push-action@v6\n+        with:\n+          context: .\n+          push: false\n+          tags: '${{ env.IMAGE }}'\n+          load: true\n+          cache-from: type=gha\n+          cache-to: 'type=gha,mode=max'\n+          outputs: 'type=docker,dest=/tmp/${{ env.IMAGE }}.tar'\n+          build-args: |\n+            DEBUG=false\n+            TESTING=true\n+            VERSION=dev\n+      - name: Cache Docker Image\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+  benchmarking:\n+    name: Benchmark\n+    runs-on: ubuntu-latest\n+    needs: setup\n+    permissions:\n+      pull-requests: write\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+      - name: Load Cache\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+          fail-on-cache-miss: true\n+      - name: Load and Start Appwrite\n+        run: |\n+          sed -i 's/traefik/localhost/g' .env\n+          docker load --input /tmp/${{ env.IMAGE }}.tar\n+          docker compose up -d\n+          sleep 10\n+      - name: Install Oha\n+        run: |\n+          echo \"deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/azlux.list\n+          sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg https://azlux.fr/repo.gpg\n+          sudo apt update\n+          sudo apt install oha\n+      - name: Benchmark PR\n+        run: 'oha -z 180s  http://localhost/v1/health/version -j > benchmark.json'",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2186332733",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 8775,
        "pr_file": ".github/workflows/benchmark.yml",
        "discussion_id": "2186332733",
        "commented_code": "@@ -0,0 +1,120 @@\n+name: Benchmark\n+concurrency:\n+  group: '${{ github.workflow }}-${{ github.ref }}'\n+  cancel-in-progress: true\n+env:\n+  IMAGE: appwrite-dev\n+  CACHE_KEY: 'appwrite-dev-${{ github.event.pull_request.head.sha }}'\n+'on':\n+  - pull_request\n+jobs:\n+  setup:\n+    name: Setup & Build Appwrite Image\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+        with:\n+          submodules: recursive\n+      - name: Set up Docker Buildx\n+        uses: docker/setup-buildx-action@v3\n+      - name: Build Appwrite\n+        uses: docker/build-push-action@v6\n+        with:\n+          context: .\n+          push: false\n+          tags: '${{ env.IMAGE }}'\n+          load: true\n+          cache-from: type=gha\n+          cache-to: 'type=gha,mode=max'\n+          outputs: 'type=docker,dest=/tmp/${{ env.IMAGE }}.tar'\n+          build-args: |\n+            DEBUG=false\n+            TESTING=true\n+            VERSION=dev\n+      - name: Cache Docker Image\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+  benchmarking:\n+    name: Benchmark\n+    runs-on: ubuntu-latest\n+    needs: setup\n+    permissions:\n+      pull-requests: write\n+    steps:\n+      - name: Checkout repository\n+        uses: actions/checkout@v4\n+      - name: Load Cache\n+        uses: actions/cache@v4\n+        with:\n+          key: '${{ env.CACHE_KEY }}'\n+          path: '/tmp/${{ env.IMAGE }}.tar'\n+          fail-on-cache-miss: true\n+      - name: Load and Start Appwrite\n+        run: |\n+          sed -i 's/traefik/localhost/g' .env\n+          docker load --input /tmp/${{ env.IMAGE }}.tar\n+          docker compose up -d\n+          sleep 10\n+      - name: Install Oha\n+        run: |\n+          echo \"deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/azlux.list\n+          sudo wget -O /usr/share/keyrings/azlux-archive-keyring.gpg https://azlux.fr/repo.gpg\n+          sudo apt update\n+          sudo apt install oha\n+      - name: Benchmark PR\n+        run: 'oha -z 180s  http://localhost/v1/health/version -j > benchmark.json'",
        "comment_created_at": "2025-07-05T01:23:44+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Consider adding error handling for benchmark commands.**\n\nThe benchmark commands don't check for failures. If the health endpoint is not responding, the benchmark will fail silently.\n\n```diff\n-        run: 'oha -z 180s  http://localhost/v1/health/version -j > benchmark.json'\n+        run: |\n+          if ! oha -z 180s http://localhost/v1/health/version -j > benchmark.json; then\n+            echo \"::error::Benchmark failed\"\n+            exit 1\n+          fi\n```\n\n\nAlso applies to: 81-81\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn .github/workflows/benchmark.yml at lines 68 and 81, the benchmark commands\nrun without error handling, so failures like an unresponsive health endpoint go\nunnoticed. Modify the run commands to check the exit status of the benchmark\ntool and fail the workflow if the command does not succeed. This can be done by\nadding shell error handling such as using 'set -e' or explicitly checking the\ncommand's exit code and exiting with an error if it fails.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:medusa:lion -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106241563",
    "pr_number": 9647,
    "pr_file": ".github/workflows/tests.yml",
    "created_at": "2025-05-25T16:00:43+00:00",
    "commented_code": "docker load --input /tmp/${{ env.IMAGE }}.tar\n           docker compose up -d\n           sleep 10\n+          \n+      - name: Wait for Open Runtimes\n+        timeout-minutes: 3\n+        run: |\n+          while ! docker compose logs openruntimes-executor | grep -q \"Executor is ready.\"; do\n+            echo \"Waiting for Executor to come online\"\n+            sleep 1\n+          done",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2106241563",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9647,
        "pr_file": ".github/workflows/tests.yml",
        "discussion_id": "2106241563",
        "commented_code": "@@ -119,6 +122,14 @@\n           docker load --input /tmp/${{ env.IMAGE }}.tar\n           docker compose up -d\n           sleep 10\n+          \n+      - name: Wait for Open Runtimes\n+        timeout-minutes: 3\n+        run: |\n+          while ! docker compose logs openruntimes-executor | grep -q \"Executor is ready.\"; do\n+            echo \"Waiting for Executor to come online\"\n+            sleep 1\n+          done",
        "comment_created_at": "2025-05-25T16:00:43+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Fix trailing spaces and improve robustness.**\n\nThe wait logic for executor readiness is good, but there are formatting issues and potential improvements.\n\n\n```diff\n-          sleep 10\n-          \n+          sleep 10\n+\n -      - name: Wait for Open Runtimes\n         timeout-minutes: 3\n         run: |\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\uddf0 Tools</summary>\n\n<details>\n<summary>\ud83e\ude9b YAMLlint (1.37.1)</summary>\n\n[error] 125-125: trailing spaces\n\n(trailing-spaces)\n\n</details>\n\n</details>\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn .github/workflows/tests.yml around lines 125 to 132, remove any trailing\nspaces in the script to clean up formatting. Additionally, improve robustness by\nensuring the wait loop handles potential errors gracefully, such as adding a\ntimeout or checking if the docker compose command fails, to avoid infinite loops\nor silent failures.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]