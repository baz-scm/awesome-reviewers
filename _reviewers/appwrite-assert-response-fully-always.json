[
  {
    "discussion_id": "2217628590",
    "pr_number": 10168,
    "pr_file": "tests/unit/Migration/MigrationVersionCheckDirectTest.php",
    "created_at": "2025-07-20T06:32:16+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\Unit\\Migration;\n+\n+use PHPUnit\\Framework\\TestCase;\n+\n+class MigrationVersionCheckDirectTest extends TestCase\n+{\n+    public function testVersionCheckLogicDirectly()\n+    {\n+        // Test the exact same logic from Migrations.php lines 261-263\n+        $getMajor = fn($v) => (int)explode('.', $v)[0];\n+        \n+        // Test case 1: Should NOT throw (1 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '2.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertFalse($shouldThrow, \"1.0.0 -> 2.0.0 should be allowed\");\n+        \n+        // Test case 2: SHOULD throw (2 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '3.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertTrue($shouldThrow, \"1.0.0 -> 3.0.0 should be blocked\");\n+        \n+        // Test case 3: SHOULD throw (3 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '4.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertTrue($shouldThrow, \"1.0.0 -> 4.0.0 should be blocked\");\n+        \n+        // Test case 4: Should NOT throw (same major version)\n+        $currentVersion = '2.5.1';\n+        $targetVersion = '2.8.3';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertFalse($shouldThrow, \"2.5.1 -> 2.8.3 should be allowed\");\n+        \n+        // Test the actual exception throwing\n+        try {\n+            $currentVersion = '1.0.0';\n+            $targetVersion = '3.0.0';\n+            \n+            if (abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1) {\n+                throw new \\Exception(\"You cannot upgrade more than one major version at a time. Please upgrade to the next major version first. (Current: $currentVersion, Target: $targetVersion)\");\n+            }\n+            \n+            $this->fail(\"Expected exception was not thrown\");\n+        } catch (\\Exception $e) {\n+            $this->assertStringContainsString(\"You cannot upgrade more than one major version at a time\", $e->getMessage());\n+            $this->assertStringContainsString(\"Current: 1.0.0\", $e->getMessage());\n+            $this->assertStringContainsString(\"Target: 3.0.0\", $e->getMessage());\n+        }\n+    }\n+}",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2217628590",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10168,
        "pr_file": "tests/unit/Migration/MigrationVersionCheckDirectTest.php",
        "discussion_id": "2217628590",
        "commented_code": "@@ -0,0 +1,58 @@\n+<?php\n+\n+namespace Tests\\Unit\\Migration;\n+\n+use PHPUnit\\Framework\\TestCase;\n+\n+class MigrationVersionCheckDirectTest extends TestCase\n+{\n+    public function testVersionCheckLogicDirectly()\n+    {\n+        // Test the exact same logic from Migrations.php lines 261-263\n+        $getMajor = fn($v) => (int)explode('.', $v)[0];\n+        \n+        // Test case 1: Should NOT throw (1 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '2.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertFalse($shouldThrow, \"1.0.0 -> 2.0.0 should be allowed\");\n+        \n+        // Test case 2: SHOULD throw (2 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '3.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertTrue($shouldThrow, \"1.0.0 -> 3.0.0 should be blocked\");\n+        \n+        // Test case 3: SHOULD throw (3 major version diff)\n+        $currentVersion = '1.0.0';\n+        $targetVersion = '4.0.0';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertTrue($shouldThrow, \"1.0.0 -> 4.0.0 should be blocked\");\n+        \n+        // Test case 4: Should NOT throw (same major version)\n+        $currentVersion = '2.5.1';\n+        $targetVersion = '2.8.3';\n+        \n+        $shouldThrow = abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1;\n+        $this->assertFalse($shouldThrow, \"2.5.1 -> 2.8.3 should be allowed\");\n+        \n+        // Test the actual exception throwing\n+        try {\n+            $currentVersion = '1.0.0';\n+            $targetVersion = '3.0.0';\n+            \n+            if (abs($getMajor($targetVersion) - $getMajor($currentVersion)) > 1) {\n+                throw new \\Exception(\"You cannot upgrade more than one major version at a time. Please upgrade to the next major version first. (Current: $currentVersion, Target: $targetVersion)\");\n+            }\n+            \n+            $this->fail(\"Expected exception was not thrown\");\n+        } catch (\\Exception $e) {\n+            $this->assertStringContainsString(\"You cannot upgrade more than one major version at a time\", $e->getMessage());\n+            $this->assertStringContainsString(\"Current: 1.0.0\", $e->getMessage());\n+            $this->assertStringContainsString(\"Target: 3.0.0\", $e->getMessage());\n+        }\n+    }\n+}",
        "comment_created_at": "2025-07-20T06:32:16+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Comprehensive test coverage with room for improvement.**\n\nThe test method covers the core scenarios well, but there are several areas for enhancement:\n\n1. **Good coverage**: Tests valid upgrades (1.0.0\u21922.0.0, 2.5.1\u21922.8.3) and invalid upgrades (1.0.0\u21923.0.0, 1.0.0\u21924.0.0)\n2. **Missing edge cases**: No tests for downgrades, invalid version formats, or same version scenarios\n3. **Code duplication**: The test duplicates logic from the main implementation rather than testing the actual method\n\n\n\nConsider these improvements:\n\n```diff\n+    /**\n+     * @dataProvider versionComparisonProvider\n+     */\n+    public function testVersionComparison($current, $target, $shouldThrow, $description)\n+    {\n+        $getMajor = fn($v) => (int)explode('.', $v)[0];\n+        $actualResult = abs($getMajor($target) - $getMajor($current)) > 1;\n+        \n+        $this->assertEquals($shouldThrow, $actualResult, $description);\n+    }\n+    \n+    public function versionComparisonProvider()\n+    {\n+        return [\n+            ['1.0.0', '2.0.0', false, 'One major version upgrade should be allowed'],\n+            ['1.0.0', '3.0.0', true, 'Two major version upgrade should be blocked'],\n+            ['1.0.0', '4.0.0', true, 'Three major version upgrade should be blocked'],\n+            ['2.5.1', '2.8.3', false, 'Same major version should be allowed'],\n+            ['2.0.0', '1.0.0', true, 'Downgrade should be blocked'],\n+            ['1.0.0', '1.0.0', false, 'Same version should be allowed'],\n+            ['0.9.0', '1.0.0', false, 'Pre-1.0 to 1.0 should be allowed'],\n+        ];\n+    }\n+    \n+    public function testInvalidVersionFormats()\n+    {\n+        $getMajor = fn($v) => (int)explode('.', $v)[0];\n+        \n+        // Test edge cases\n+        $this->assertEquals(1, $getMajor('1'));\n+        $this->assertEquals(1, $getMajor('1.0'));\n+        $this->assertEquals(0, $getMajor('0.1.0'));\n+    }\n```\n\n\n\nConsider testing the actual `processMigration` method with mocked dependencies instead of duplicating the logic:\n\n```php\npublic function testProcessMigrationVersionCheck()\n{\n    // Mock the necessary dependencies and test the actual method\n    // This would provide better integration testing\n}\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn tests/unit/Migration/MigrationVersionCheckDirectTest.php around lines 9 to\n58, the current test duplicates version check logic instead of testing the\nactual migration method and lacks coverage for downgrades, invalid version\nformats, and same version cases. Refactor by removing duplicated logic and\ninstead mock dependencies to call and test the real processMigration method,\nadding test cases for downgrade attempts, invalid version strings, and no\nversion change scenarios to improve coverage and integration fidelity.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:poseidon:panther -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146927723",
    "pr_number": 10010,
    "pr_file": "tests/e2e/Services/Projects/ProjectsConsoleClientTest.php",
    "created_at": "2025-06-14T12:42:56+00:00",
    "commented_code": "return ['projectId' => $projectId];\n     }\n \n+    /** @depends testCreateProject */\n+    public function testUpdateProjectOnPasswordChange($data): array\n+    {\n+        $id = $data['projectId'];\n+\n+        // Check defaults\n+        $response = $this->client->call(Client::METHOD_GET, '/projects/' . $id, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => 'console',\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertFalse($response['body']['onPasswordChange']);\n+\n+        $response = $this->client->call(Client::METHOD_PATCH, '/projects/' . $id . '/auth/password-change', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'onPasswordChange' => true,\n+        ]);\n+        $this->assertTrue($response['body']['onPasswordChange']);\n+",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2146927723",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10010,
        "pr_file": "tests/e2e/Services/Projects/ProjectsConsoleClientTest.php",
        "discussion_id": "2146927723",
        "commented_code": "@@ -951,6 +951,31 @@ public function testUpdateProjectAuthDuration($data): array\n         return ['projectId' => $projectId];\n     }\n \n+    /** @depends testCreateProject */\n+    public function testUpdateProjectOnPasswordChange($data): array\n+    {\n+        $id = $data['projectId'];\n+\n+        // Check defaults\n+        $response = $this->client->call(Client::METHOD_GET, '/projects/' . $id, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => 'console',\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertFalse($response['body']['onPasswordChange']);\n+\n+        $response = $this->client->call(Client::METHOD_PATCH, '/projects/' . $id . '/auth/password-change', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'onPasswordChange' => true,\n+        ]);\n+        $this->assertTrue($response['body']['onPasswordChange']);\n+",
        "comment_created_at": "2025-06-14T12:42:56+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add explicit status-code assertion for the PATCH request**\n\nEvery request in this test-suite verifies the HTTP status code, except the newly-added PATCH call.  \nNot asserting the status could let a silent 4xx/5xx slip through while `onPasswordChange` happens to be truthy in the body.\n\n```diff\n         $response = $this->client->call(Client::METHOD_PATCH, '/projects/' . $id . '/auth/password-change', array_merge([\n             'content-type' => 'application/json',\n             'x-appwrite-project' => $this->getProject()['$id'],\n         ], $this->getHeaders()), [\n             'onPasswordChange' => true,\n         ]);\n+        $this->assertEquals(200, $response['headers']['status-code']);\n         $this->assertTrue($response['body']['onPasswordChange']);\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        $response = $this->client->call(Client::METHOD_PATCH, '/projects/' . $id . '/auth/password-change', array_merge([\n            'content-type' => 'application/json',\n            'x-appwrite-project' => $this->getProject()['$id'],\n        ], $this->getHeaders()), [\n            'onPasswordChange' => true,\n        ]);\n        $this->assertEquals(200, $response['headers']['status-code']);\n        $this->assertTrue($response['body']['onPasswordChange']);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn tests/e2e/Services/Projects/ProjectsConsoleClientTest.php around lines 968 to\n975, the PATCH request to change the password lacks an explicit assertion for\nthe HTTP status code. Add an assertion to verify that the response status code\nis the expected success code (e.g., 200 or 204) immediately after the call to\nensure that any error status codes do not go unnoticed even if the response body\ncontains a truthy onPasswordChange value.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2104800220",
    "pr_number": 9878,
    "pr_file": "tests/e2e/Services/Databases/DatabasesCustomServerTest.php",
    "created_at": "2025-05-23T15:09:11+00:00",
    "commented_code": "'size' => 256,\n             'required' => true,\n         ]);\n+        // checking size test\n+        $lastName = $this->client->call(Client::METHOD_POST, $attributesPath . '/string', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+            'x-appwrite-key' => $this->getProject()['apiKey']\n+        ]), [\n+            'key' => 'lastName',\n+            'size' => 149,\n+            'required' => true,\n+            'encrypt' => true\n+        ]);\n+        $this->assertEquals('Size too small. Encrypted strings require a minimum size of 150 characters.', $lastName['body']['message']);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2104800220",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9878,
        "pr_file": "tests/e2e/Services/Databases/DatabasesCustomServerTest.php",
        "discussion_id": "2104800220",
        "commented_code": "@@ -686,6 +686,18 @@ public function testCreateEncryptedAttribute(array $data): void\n             'size' => 256,\n             'required' => true,\n         ]);\n+        // checking size test\n+        $lastName = $this->client->call(Client::METHOD_POST, $attributesPath . '/string', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+            'x-appwrite-key' => $this->getProject()['apiKey']\n+        ]), [\n+            'key' => 'lastName',\n+            'size' => 149,\n+            'required' => true,\n+            'encrypt' => true\n+        ]);\n+        $this->assertEquals('Size too small. Encrypted strings require a minimum size of 150 characters.', $lastName['body']['message']);",
        "comment_created_at": "2025-05-23T15:09:11+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add HTTP status code validation to improve test robustness.**\n\nThe test correctly verifies the error message for encrypted string attributes with insufficient size, but it should also validate the HTTP status code to ensure the API properly rejects the request.\n\n\n\n```diff\n // checking size test\n $lastName = $this->client->call(Client::METHOD_POST, $attributesPath . '/string', array_merge([\n     'content-type' => 'application/json',\n     'x-appwrite-project' => $this->getProject()['$id'],\n     'x-appwrite-key' => $this->getProject()['apiKey']\n ]), [\n     'key' => 'lastName',\n     'size' => 149,\n     'required' => true,\n     'encrypt' => true\n ]);\n+$this->assertEquals(400, $lastName['headers']['status-code']);\n $this->assertEquals('Size too small. Encrypted strings require a minimum size of 150 characters.', $lastName['body']['message']);\n```\n\nThis ensures the test validates both the HTTP response status and the error message, making it more comprehensive and following the testing patterns used elsewhere in the file.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn tests/e2e/Services/Databases/DatabasesCustomServerTest.php around lines 689\nto 700, the test checks the error message for encrypted string attributes with\ninsufficient size but lacks validation of the HTTP status code. Add an assertion\nto verify that the HTTP response status code indicates an error (e.g., 400 or\n422) alongside the existing message check to ensure the API properly rejects the\nrequest and improve test robustness.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091238848",
    "pr_number": 9768,
    "pr_file": "tests/e2e/Services/Tokens/TokensConsoleClientTest.php",
    "created_at": "2025-05-15T13:56:12+00:00",
    "commented_code": "namespace Tests\\E2E\\Services\\Tokens;\n \n+use CURLFile;\n+use Tests\\E2E\\Client;\n use Tests\\E2E\\Scopes\\ProjectCustom;\n use Tests\\E2E\\Scopes\\Scope;\n-use Tests\\E2E\\Scopes\\SideConsole;\n+use Tests\\E2E\\Scopes\\SideServer;\n+use Utopia\\Database\\DateTime;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n \n class TokensConsoleClientTest extends Scope\n {\n-    use SideConsole;\n     use TokensBase;\n     use ProjectCustom;\n+    use SideServer;\n+\n+    public function testCreateToken(): array\n+    {\n+\n+        $bucket = $this->client->call(Client::METHOD_POST, '/storage/buckets', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'bucketId' => ID::unique(),\n+            'name' => 'Test Bucket',\n+            'fileSecurity' => true,\n+            'maximumFileSize' => 2000000, //2MB\n+            'allowedFileExtensions' => ['jpg', 'png', 'jfif'],\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $bucket['headers']['status-code']);\n+        $this->assertNotEmpty($bucket['body']['$id']);\n+\n+        $bucketId = $bucket['body']['$id'];\n+\n+        $file = $this->client->call(Client::METHOD_POST, '/storage/buckets/' . $bucketId . '/files', array_merge([\n+            'content-type' => 'multipart/form-data',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'fileId' => ID::unique(),\n+            'file' => new CURLFile(realpath(__DIR__ . '/../../../resources/logo.png'), 'image/png', 'logo.png'),\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $file['headers']['status-code']);\n+        $this->assertNotEmpty($file['body']['$id']);\n+\n+        $fileId = $file['body']['$id'];\n+\n+        $token = $this->client->call(Client::METHOD_POST, '/tokens/buckets/' . $bucketId . '/files/' . $fileId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(201, $token['headers']['status-code']);\n+        $this->assertEquals('files', $token['body']['resourceType']);\n+\n+        return [\n+            'fileId' => $fileId,\n+            'bucketId' => $bucketId,\n+            'tokenId' => $token['body']['$id'],\n+        ];\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testUpdateToken(array $data): array\n+    {\n+        $tokenId = $data['tokenId'];\n+\n+        // Finite expiry\n+        $expiry = DateTime::addSeconds(new \\DateTime(), 3600);\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => $expiry,\n+        ]);\n+\n+        $dateValidator = new DatetimeValidator();\n+        $this->assertTrue($dateValidator->isValid($token['body']['expire']));\n+\n+        // Infinite expiry\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => null,\n+        ]);\n+\n+        $this->assertEmpty($token['body']['expire']);\n+\n+        return $data;\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testListTokens(array $data): array\n+    {\n+        $res = $this->client->call(\n+            Client::METHOD_GET,\n+            '/tokens/buckets/' . $data['bucketId'] . '/files/' . $data['fileId'],\n+            array_merge([\n+                'content-type' => 'application/json',\n+                'x-appwrite-project' => $this->getProject()['$id']\n+            ], $this->getHeaders())\n+        );\n+\n+        $this->assertIsArray($res['body']);\n+        $this->assertEquals(200, $res['headers']['status-code']);\n+        return $data;",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2091238848",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9768,
        "pr_file": "tests/e2e/Services/Tokens/TokensConsoleClientTest.php",
        "discussion_id": "2091238848",
        "commented_code": "@@ -2,13 +2,143 @@\n \n namespace Tests\\E2E\\Services\\Tokens;\n \n+use CURLFile;\n+use Tests\\E2E\\Client;\n use Tests\\E2E\\Scopes\\ProjectCustom;\n use Tests\\E2E\\Scopes\\Scope;\n-use Tests\\E2E\\Scopes\\SideConsole;\n+use Tests\\E2E\\Scopes\\SideServer;\n+use Utopia\\Database\\DateTime;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n \n class TokensConsoleClientTest extends Scope\n {\n-    use SideConsole;\n     use TokensBase;\n     use ProjectCustom;\n+    use SideServer;\n+\n+    public function testCreateToken(): array\n+    {\n+\n+        $bucket = $this->client->call(Client::METHOD_POST, '/storage/buckets', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'bucketId' => ID::unique(),\n+            'name' => 'Test Bucket',\n+            'fileSecurity' => true,\n+            'maximumFileSize' => 2000000, //2MB\n+            'allowedFileExtensions' => ['jpg', 'png', 'jfif'],\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $bucket['headers']['status-code']);\n+        $this->assertNotEmpty($bucket['body']['$id']);\n+\n+        $bucketId = $bucket['body']['$id'];\n+\n+        $file = $this->client->call(Client::METHOD_POST, '/storage/buckets/' . $bucketId . '/files', array_merge([\n+            'content-type' => 'multipart/form-data',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'fileId' => ID::unique(),\n+            'file' => new CURLFile(realpath(__DIR__ . '/../../../resources/logo.png'), 'image/png', 'logo.png'),\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $file['headers']['status-code']);\n+        $this->assertNotEmpty($file['body']['$id']);\n+\n+        $fileId = $file['body']['$id'];\n+\n+        $token = $this->client->call(Client::METHOD_POST, '/tokens/buckets/' . $bucketId . '/files/' . $fileId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(201, $token['headers']['status-code']);\n+        $this->assertEquals('files', $token['body']['resourceType']);\n+\n+        return [\n+            'fileId' => $fileId,\n+            'bucketId' => $bucketId,\n+            'tokenId' => $token['body']['$id'],\n+        ];\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testUpdateToken(array $data): array\n+    {\n+        $tokenId = $data['tokenId'];\n+\n+        // Finite expiry\n+        $expiry = DateTime::addSeconds(new \\DateTime(), 3600);\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => $expiry,\n+        ]);\n+\n+        $dateValidator = new DatetimeValidator();\n+        $this->assertTrue($dateValidator->isValid($token['body']['expire']));\n+\n+        // Infinite expiry\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => null,\n+        ]);\n+\n+        $this->assertEmpty($token['body']['expire']);\n+\n+        return $data;\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testListTokens(array $data): array\n+    {\n+        $res = $this->client->call(\n+            Client::METHOD_GET,\n+            '/tokens/buckets/' . $data['bucketId'] . '/files/' . $data['fileId'],\n+            array_merge([\n+                'content-type' => 'application/json',\n+                'x-appwrite-project' => $this->getProject()['$id']\n+            ], $this->getHeaders())\n+        );\n+\n+        $this->assertIsArray($res['body']);\n+        $this->assertEquals(200, $res['headers']['status-code']);\n+        return $data;",
        "comment_created_at": "2025-05-15T13:56:12+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Strengthen list assertion to ensure the freshly-created token is present**\n\nThe test currently only validates that the body is an array and that the request succeeded.  \nA rogue implementation could legitimately return an empty list and the test would still pass. Consider asserting that:\n\n1. `total > 0` (or `count(documents) > 0`)\n2. The list contains the `tokenId` produced in `testCreateToken`.\n\n```diff\n $this->assertIsArray($res['body']);\n $this->assertEquals(200, $res['headers']['status-code']);\n+$this->assertGreaterThan(\n+    0,\n+    $res['body']['total'] ?? count($res['body']['documents'] ?? []),\n+    'Expected at least one token in the list'\n+);\n+\n+// Check that our token is part of the collection\n+$ids = array_column($res['body']['documents'] ?? [], '$id');\n+$this->assertContains($data['tokenId'], $ids);\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        $res = $this->client->call(\n            Client::METHOD_GET,\n            '/tokens/buckets/' . $data['bucketId'] . '/files/' . $data['fileId'],\n            array_merge([\n                'content-type' => 'application/json',\n                'x-appwrite-project' => $this->getProject()['$id']\n            ], $this->getHeaders())\n        );\n\n        $this->assertIsArray($res['body']);\n        $this->assertEquals(200, $res['headers']['status-code']);\n        $this->assertGreaterThan(\n            0,\n            $res['body']['total'] ?? count($res['body']['documents'] ?? []),\n            'Expected at least one token in the list'\n        );\n\n        // Check that our token is part of the collection\n        $ids = array_column($res['body']['documents'] ?? [], '$id');\n        $this->assertContains($data['tokenId'], $ids);\n\n        return $data;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn tests/e2e/Services/Tokens/TokensConsoleClientTest.php around lines 115 to\n126, the test only checks if the response body is an array and the status code\nis 200, which allows empty results to pass. Enhance the assertions by verifying\nthat the response contains a non-empty list, such as checking that 'total' is\ngreater than 0 or that the 'documents' array has items. Additionally, assert\nthat the list includes the specific 'tokenId' created in the testCreateToken\nmethod to confirm the token is present.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091238859",
    "pr_number": 9768,
    "pr_file": "tests/e2e/Services/Tokens/TokensConsoleClientTest.php",
    "created_at": "2025-05-15T13:56:12+00:00",
    "commented_code": "namespace Tests\\E2E\\Services\\Tokens;\n \n+use CURLFile;\n+use Tests\\E2E\\Client;\n use Tests\\E2E\\Scopes\\ProjectCustom;\n use Tests\\E2E\\Scopes\\Scope;\n-use Tests\\E2E\\Scopes\\SideConsole;\n+use Tests\\E2E\\Scopes\\SideServer;\n+use Utopia\\Database\\DateTime;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n \n class TokensConsoleClientTest extends Scope\n {\n-    use SideConsole;\n     use TokensBase;\n     use ProjectCustom;\n+    use SideServer;\n+\n+    public function testCreateToken(): array\n+    {\n+\n+        $bucket = $this->client->call(Client::METHOD_POST, '/storage/buckets', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'bucketId' => ID::unique(),\n+            'name' => 'Test Bucket',\n+            'fileSecurity' => true,\n+            'maximumFileSize' => 2000000, //2MB\n+            'allowedFileExtensions' => ['jpg', 'png', 'jfif'],\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $bucket['headers']['status-code']);\n+        $this->assertNotEmpty($bucket['body']['$id']);\n+\n+        $bucketId = $bucket['body']['$id'];\n+\n+        $file = $this->client->call(Client::METHOD_POST, '/storage/buckets/' . $bucketId . '/files', array_merge([\n+            'content-type' => 'multipart/form-data',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'fileId' => ID::unique(),\n+            'file' => new CURLFile(realpath(__DIR__ . '/../../../resources/logo.png'), 'image/png', 'logo.png'),\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $file['headers']['status-code']);\n+        $this->assertNotEmpty($file['body']['$id']);\n+\n+        $fileId = $file['body']['$id'];\n+\n+        $token = $this->client->call(Client::METHOD_POST, '/tokens/buckets/' . $bucketId . '/files/' . $fileId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(201, $token['headers']['status-code']);\n+        $this->assertEquals('files', $token['body']['resourceType']);\n+\n+        return [\n+            'fileId' => $fileId,\n+            'bucketId' => $bucketId,\n+            'tokenId' => $token['body']['$id'],\n+        ];\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testUpdateToken(array $data): array\n+    {\n+        $tokenId = $data['tokenId'];\n+\n+        // Finite expiry\n+        $expiry = DateTime::addSeconds(new \\DateTime(), 3600);\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => $expiry,\n+        ]);\n+\n+        $dateValidator = new DatetimeValidator();\n+        $this->assertTrue($dateValidator->isValid($token['body']['expire']));\n+\n+        // Infinite expiry\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => null,\n+        ]);\n+\n+        $this->assertEmpty($token['body']['expire']);\n+",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2091238859",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9768,
        "pr_file": "tests/e2e/Services/Tokens/TokensConsoleClientTest.php",
        "discussion_id": "2091238859",
        "commented_code": "@@ -2,13 +2,143 @@\n \n namespace Tests\\E2E\\Services\\Tokens;\n \n+use CURLFile;\n+use Tests\\E2E\\Client;\n use Tests\\E2E\\Scopes\\ProjectCustom;\n use Tests\\E2E\\Scopes\\Scope;\n-use Tests\\E2E\\Scopes\\SideConsole;\n+use Tests\\E2E\\Scopes\\SideServer;\n+use Utopia\\Database\\DateTime;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n \n class TokensConsoleClientTest extends Scope\n {\n-    use SideConsole;\n     use TokensBase;\n     use ProjectCustom;\n+    use SideServer;\n+\n+    public function testCreateToken(): array\n+    {\n+\n+        $bucket = $this->client->call(Client::METHOD_POST, '/storage/buckets', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'bucketId' => ID::unique(),\n+            'name' => 'Test Bucket',\n+            'fileSecurity' => true,\n+            'maximumFileSize' => 2000000, //2MB\n+            'allowedFileExtensions' => ['jpg', 'png', 'jfif'],\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $bucket['headers']['status-code']);\n+        $this->assertNotEmpty($bucket['body']['$id']);\n+\n+        $bucketId = $bucket['body']['$id'];\n+\n+        $file = $this->client->call(Client::METHOD_POST, '/storage/buckets/' . $bucketId . '/files', array_merge([\n+            'content-type' => 'multipart/form-data',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'fileId' => ID::unique(),\n+            'file' => new CURLFile(realpath(__DIR__ . '/../../../resources/logo.png'), 'image/png', 'logo.png'),\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+        ]);\n+        $this->assertEquals(201, $file['headers']['status-code']);\n+        $this->assertNotEmpty($file['body']['$id']);\n+\n+        $fileId = $file['body']['$id'];\n+\n+        $token = $this->client->call(Client::METHOD_POST, '/tokens/buckets/' . $bucketId . '/files/' . $fileId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(201, $token['headers']['status-code']);\n+        $this->assertEquals('files', $token['body']['resourceType']);\n+\n+        return [\n+            'fileId' => $fileId,\n+            'bucketId' => $bucketId,\n+            'tokenId' => $token['body']['$id'],\n+        ];\n+    }\n+\n+    /**\n+     * @depends testCreateToken\n+     */\n+    public function testUpdateToken(array $data): array\n+    {\n+        $tokenId = $data['tokenId'];\n+\n+        // Finite expiry\n+        $expiry = DateTime::addSeconds(new \\DateTime(), 3600);\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => $expiry,\n+        ]);\n+\n+        $dateValidator = new DatetimeValidator();\n+        $this->assertTrue($dateValidator->isValid($token['body']['expire']));\n+\n+        // Infinite expiry\n+        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'expire' => null,\n+        ]);\n+\n+        $this->assertEmpty($token['body']['expire']);\n+",
        "comment_created_at": "2025-05-15T13:56:12+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Missing HTTP-status assertion for both PATCH calls**\n\n`testUpdateToken()` checks the response body but never confirms that the server actually replied with `200 OK`.  \nIf the route suddenly starts returning `202`, `400`, or any other code the test would silently pass.\n\n```diff\n-$token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n+$token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n     'content-type' => 'application/json',\n     'x-appwrite-project' => $this->getProject()['$id']\n ], $this->getHeaders()), [\n     'expire' => $expiry,\n ]);\n+$this->assertEquals(200, $token['headers']['status-code']);\n ...\n $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n@@\n     'expire' => null,\n ]);\n+$this->assertEquals(200, $token['headers']['status-code']);\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        // Finite expiry\n        $expiry = DateTime::addSeconds(new \\DateTime(), 3600);\n        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n            'content-type' => 'application/json',\n            'x-appwrite-project' => $this->getProject()['$id']\n        ], $this->getHeaders()), [\n            'expire' => $expiry,\n        ]);\n        $this->assertEquals(200, $token['headers']['status-code']);\n\n        $dateValidator = new DatetimeValidator();\n        $this->assertTrue($dateValidator->isValid($token['body']['expire']));\n\n        // Infinite expiry\n        $token = $this->client->call(Client::METHOD_PATCH, '/tokens/' . $tokenId, array_merge([\n            'content-type' => 'application/json',\n            'x-appwrite-project' => $this->getProject()['$id']\n        ], $this->getHeaders()), [\n            'expire' => null,\n        ]);\n        $this->assertEquals(200, $token['headers']['status-code']);\n\n        $this->assertEmpty($token['body']['expire']);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn tests/e2e/Services/Tokens/TokensConsoleClientTest.php around lines 85 to 106,\nthe testUpdateToken() method makes two PATCH calls but does not assert the HTTP\nstatus code of the responses. Add assertions after each client call to verify\nthat the HTTP status code is 200 OK to ensure the server responded successfully\nand the test fails if an unexpected status code is returned.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]