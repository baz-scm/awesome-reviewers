[
  {
    "discussion_id": "2072814587",
    "pr_number": 9693,
    "pr_file": "app/config/scopes.php",
    "created_at": "2025-05-05T03:45:44+00:00",
    "commented_code": "<?php\n \n+// TODO: @itznotabug, @jake - do we change the scopes as well with the terminology changes?",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814587",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "app/config/scopes.php",
        "discussion_id": "2072814587",
        "commented_code": "@@ -1,5 +1,6 @@\n <?php\n \n+// TODO: @itznotabug, @jake - do we change the scopes as well with the terminology changes?",
        "comment_created_at": "2025-05-05T03:45:44+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Address the TODO about scope naming**\n\nThis TODO raises an important consideration about whether scope names should also be updated to reflect the terminology changes (collections \u2192 tables, attributes \u2192 columns, documents \u2192 rows). This is critical for consistency across the API and documentation.\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Check if any code outside this file still references the old scope names\necho \"Checking references to old scope names in the codebase...\"\nrg -t php \"collections\\.(read|write)\" --glob=\"!app/config/scopes.php\" -A 3 -B 3\nrg -t php \"attributes\\.(read|write)\" --glob=\"!app/config/scopes.php\" -A 3 -B 3  \nrg -t php \"documents\\.(read|write)\" --glob=\"!app/config/scopes.php\" -A 3 -B 3\n```\n\nLength of output: 61509\n\n---\n\n\n\n</details>\n\n**Action Required: Rename all scope definitions to use \u201ctables\u201d, \u201ccolumns\u201d, and \u201crows\u201d**\n\nThe TODO in app/config/scopes.php should be replaced by actual scope entries using the new terminology\u2014and every remaining reference to the old scopes must be updated for consistency:\n\n\u2022 app/config/scopes.php  \n  \u2013 Replace keys and values under \u201ccollections\u201d, \u201cattributes\u201d, \u201cdocuments\u201d with \u201ctables\u201d, \u201ccolumns\u201d, \u201crows\u201d (read/write).\n\n\u2022 app/config/roles.php  \n  \u2013 Update any `'collections.*'`, `'attributes.*'`, `'documents.*'` entries to the corresponding new scopes.\n\n\u2022 app/config/templates/function.php  \n  \u2013 Adjust the hard-coded scope arrays to use `tables.read/write`, `columns.write`, `rows.read/write`.\n\n\u2022 src/Appwrite/Platform/Modules/Databases/Http  \n  \u2013 In every controller under Http/Tables (formerly collections), Http/Columns (formerly attributes), and Http/Rows (formerly documents), change  \n    ->label('scope', 'collections.read') \u2192 'tables.read' (and similarly for write).  \n  \u2013 Update SDK namespace declarations if they still use the old paths.\n\n\u2022 src/Appwrite/Migration/Version/V15.php  \n  \u2013 Rename any stats metrics referencing `collections.*` \u2192 `tables.*`, `documents.*` \u2192 `rows.*`.\n\n\u2022 Tests (unit and e2e)  \n  \u2013 In tests/unit/Auth/KeyTest.php and tests/e2e (ProjectsConsoleClientTest, Scopes/ProjectCustom, etc.), replace all occurrences of `collections.*`, `attributes.*`, `documents.*` with the new scopes.\n\nAfter completing these changes, remove the original TODO comment.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814592",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Boolean/Update.php",
    "created_at": "2025-05-05T03:45:44+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Boolean;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateBooleanColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setHttpMethod(Action::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/boolean/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/boolean/:key')\n+            ->desc('Update boolean column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814592",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Boolean/Update.php",
        "discussion_id": "2072814592",
        "commented_code": "@@ -0,0 +1,86 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Boolean;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateBooleanColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setHttpMethod(Action::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/boolean/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/boolean/:key')\n+            ->desc('Update boolean column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')",
        "comment_created_at": "2025-05-05T03:45:44+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Scope label still references legacy term `collections.write`**\n\nAll other identifiers in this PR moved to the new \u201ctables / columns\u201d terminology.  Keeping the old scope here will make the RBAC rules inconsistent and could accidentally block the endpoint once the new scopes are enforced.\n\n```diff\n-            ->label('scope', 'collections.write')\n+            ->label('scope', 'tables.write')\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n            ->label('scope', 'tables.write')\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814664",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/XList.php",
    "created_at": "2025-05-05T03:45:49+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Collections;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Text;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listTables';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('List tables')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814664",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/XList.php",
        "discussion_id": "2072814664",
        "commented_code": "@@ -0,0 +1,117 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Collections;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Text;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listTables';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('List tables')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)",
        "comment_created_at": "2025-05-05T03:45:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Scope label uses deprecated noun**\n\n`collections.read` should be renamed:\n\n```diff\n-    ->label('scope', 'collections.read')\n+    ->label('scope', 'tables.read')\n```\n\nSynchronise with IAM policy docs.\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n            ->label('scope', 'tables.read')\n            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814681",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Workers/Databases.php",
    "created_at": "2025-05-05T03:45:50+00:00",
    "commented_code": "* @throws \\Exception\n      * @throws \\Throwable\n      **/\n-    private function deleteAttribute(Document $database, Document $collection, Document $attribute, Document $project, Database $dbForPlatform, Database $dbForProject, Realtime $queueForRealtime): void\n+    private function deleteColumn(Document $database, Document $table, Document $column, Document $project, Database $dbForPlatform, Database $dbForProject, Realtime $queueForRealtime): void\n     {\n-        if ($collection->isEmpty()) {\n+        if ($table->isEmpty()) {\n             throw new Exception('Missing collection');\n         }\n-        if ($attribute->isEmpty()) {\n+        if ($column->isEmpty()) {\n             throw new Exception('Missing attribute');\n         }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814681",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Workers/Databases.php",
        "discussion_id": "2072814681",
        "commented_code": "@@ -228,24 +228,24 @@ private function createAttribute(\n      * @throws \\Exception\n      * @throws \\Throwable\n      **/\n-    private function deleteAttribute(Document $database, Document $collection, Document $attribute, Document $project, Database $dbForPlatform, Database $dbForProject, Realtime $queueForRealtime): void\n+    private function deleteColumn(Document $database, Document $table, Document $column, Document $project, Database $dbForPlatform, Database $dbForProject, Realtime $queueForRealtime): void\n     {\n-        if ($collection->isEmpty()) {\n+        if ($table->isEmpty()) {\n             throw new Exception('Missing collection');\n         }\n-        if ($attribute->isEmpty()) {\n+        if ($column->isEmpty()) {\n             throw new Exception('Missing attribute');\n         }",
        "comment_created_at": "2025-05-05T03:45:50+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Error messages still reference \u201ccollection / attribute\u201d**\n\nThe early-return guards now protect `$table` and `$column`, yet the exception text wasn\u2019t updated:\n\n```php\nif ($table->isEmpty()) {\n    throw new Exception('Missing collection');   // <- collection \u279c table\n}\nif ($column->isEmpty()) {\n    throw new Exception('Missing attribute');    // <- attribute  \u279c column\n}\n```\n\nPlease adjust to the new nomenclature to avoid misleading logs and 3rd-party monitoring alerts.\n\n```diff\n-throw new Exception('Missing collection');\n+throw new Exception('Missing table');\n\n-throw new Exception('Missing attribute');\n+throw new Exception('Missing column');\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077067099",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Usage/Get.php",
    "created_at": "2025-05-07T08:14:59+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables\\Usage;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Config\\Config;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\WhiteList;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getTableUsage';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/usage')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/usage')\n+            ->desc('Get table usage stats')\n+            ->groups(['api', 'database', 'usage'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: null,\n+                name: 'getTableUsage',\n+                description: '/docs/references/databases/get-collection-usage.md',\n+                auth: [AuthType::ADMIN],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_USAGE_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON,\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('range', '30d', new WhiteList(['24h', '30d', '90d'], true), 'Date range.', true)\n+            ->param('tableId', '', new UID(), 'Collection ID.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $range, string $tableId, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        $tableDocument = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        $table = $dbForProject->getCollection('database_' . $database->getInternalId() . '_collection_' . $tableDocument->getInternalId());",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077067099",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Usage/Get.php",
        "discussion_id": "2077067099",
        "commented_code": "@@ -0,0 +1,131 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables\\Usage;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Config\\Config;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\WhiteList;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getTableUsage';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/usage')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/usage')\n+            ->desc('Get table usage stats')\n+            ->groups(['api', 'database', 'usage'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: null,\n+                name: 'getTableUsage',\n+                description: '/docs/references/databases/get-collection-usage.md',\n+                auth: [AuthType::ADMIN],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_USAGE_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON,\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('range', '30d', new WhiteList(['24h', '30d', '90d'], true), 'Date range.', true)\n+            ->param('tableId', '', new UID(), 'Collection ID.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $range, string $tableId, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        $tableDocument = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        $table = $dbForProject->getCollection('database_' . $database->getInternalId() . '_collection_' . $tableDocument->getInternalId());",
        "comment_created_at": "2025-05-07T08:14:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Legacy collection terminology in database query.**\n\nThe code still uses `_collection_` in the database query path, which mixes terminology with the new table-based approach.\n\n```diff\n-        $table = $dbForProject->getCollection('database_' . $database->getInternalId() . '_collection_' . $tableDocument->getInternalId());\n+        $table = $dbForProject->getCollection('database_' . $database->getInternalId() . '_table_' . $tableDocument->getInternalId());\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n        $table = $dbForProject->getCollection(\n            'database_' .\n            $database->getInternalId() .\n            '_table_' .\n            $tableDocument->getInternalId()\n        );\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits f2f23be to 0f94b80",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077067134",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Delete.php",
    "created_at": "2025-05-07T08:15:00+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'deleteTable';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId')\n+            ->desc('Delete table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].delete')\n+            ->label('audits.event', 'table.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'deleteTable',\n+                description: '/docs/references/databases/delete-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        if ($table->isEmpty()) {\n+            throw new Exception(Exception::TABLE_NOT_FOUND);\n+        }\n+\n+        if (!$dbForProject->deleteDocument('database_' . $database->getInternalId(), $tableId)) {\n+            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Failed to remove collection from DB');\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077067134",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Delete.php",
        "discussion_id": "2077067134",
        "commented_code": "@@ -0,0 +1,96 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'deleteTable';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId')\n+            ->desc('Delete table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].delete')\n+            ->label('audits.event', 'table.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'deleteTable',\n+                description: '/docs/references/databases/delete-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        if ($table->isEmpty()) {\n+            throw new Exception(Exception::TABLE_NOT_FOUND);\n+        }\n+\n+        if (!$dbForProject->deleteDocument('database_' . $database->getInternalId(), $tableId)) {\n+            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Failed to remove collection from DB');\n+        }",
        "comment_created_at": "2025-05-07T08:15:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Error message inconsistent with new terminology.**\n\nThe error message still refers to \"collection\" rather than \"table\", which is inconsistent with the terminology change.\n\n\n```diff\nif (!$dbForProject->deleteDocument('database_' . $database->getInternalId(), $tableId)) {\n-    throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Failed to remove collection from DB');\n+    throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Failed to remove table from DB');\n}\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n        if (!$dbForProject->deleteDocument('database_' . $database->getInternalId(), $tableId)) {\n            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Failed to remove table from DB');\n        }\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077067160",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
    "created_at": "2025-05-07T08:15:00+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Columns;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077067160",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
        "discussion_id": "2077067160",
        "commented_code": "@@ -0,0 +1,125 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Columns;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')",
        "comment_created_at": "2025-05-07T08:15:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Scope label still uses deprecated terminology**\n\nThe scope label is still using the old terminology \"collections.read\" which is inconsistent with the new table/column naming scheme.\n\n```diff\n-    ->label('scope', 'collections.read')\n+    ->label('scope', 'tables.read')\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n            ->label('scope', 'tables.read')\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077067170",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Indexes/XList.php",
    "created_at": "2025-05-07T08:15:01+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Indexes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Indexes;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listIndexes';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/indexes')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/indexes')\n+            ->desc('List indexes')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077067170",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Indexes/XList.php",
        "discussion_id": "2077067170",
        "commented_code": "@@ -0,0 +1,129 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Indexes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Indexes;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listIndexes';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/indexes')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/indexes')\n+            ->desc('List indexes')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')",
        "comment_created_at": "2025-05-07T08:15:01+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Scope label still uses deprecated terminology**\n\nThe scope label is still using the old terminology \"collections.read\" which is inconsistent with the new table/column naming scheme.\n\n```diff\n-    ->label('scope', 'collections.read')\n+    ->label('scope', 'tables.read')\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n            ->label('scope', 'tables.read')\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842743",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842743",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842743",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method uses \"Collection\" terminology but tests table operations.\n\n```diff\n- public function testUpdateCollection(array $data)\n+ public function testUpdateTable(array $data)\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n    public function testUpdateTable(array $data)\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842744",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842744",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842744",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method uses \"Collection\" terminology but tests table operations.\n\n```diff\n- public function testDeleteCollection(array $data)\n+ public function testDeleteTable(array $data)\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n    public function testDeleteTable(array $data)\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842745",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842745",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842745",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method uses \"Collection\" terminology but tests table operations.\n\n```diff\n- public function testGetCollection(array $data)\n+ public function testGetTable(array $data)\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits 45370f9 to b0d9215",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842747",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $tvShowsId = $data['tvShowsId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call delete collection\n+         */\n+        $response = $this->client->call(Client::METHOD_DELETE, '/databases/' . $databaseId . '/tables/' . $tvShowsId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(204, $response['headers']['status-code']);\n+        $this->assertEquals($response['body'], \"\");\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetDatabaseUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(15, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsNumeric($response['body']['tablesTotal']);\n+        $this->assertIsArray($response['body']['tables']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetCollectionUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $data['moviesId'] . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/randomCollectionId/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+        $this->assertEquals(404, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $data['moviesId'] . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(3, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @throws \\Utopia\\Database\\Exception\\Query\n+     */\n+    public function testGetCollectionLogs(array $data)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842747",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842747",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $tvShowsId = $data['tvShowsId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call delete collection\n+         */\n+        $response = $this->client->call(Client::METHOD_DELETE, '/databases/' . $databaseId . '/tables/' . $tvShowsId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(204, $response['headers']['status-code']);\n+        $this->assertEquals($response['body'], \"\");\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetDatabaseUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(15, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsNumeric($response['body']['tablesTotal']);\n+        $this->assertIsArray($response['body']['tables']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetCollectionUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $data['moviesId'] . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/randomCollectionId/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+        $this->assertEquals(404, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $data['moviesId'] . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(3, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @throws \\Utopia\\Database\\Exception\\Query\n+     */\n+    public function testGetCollectionLogs(array $data)",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method uses \"Collection\" terminology but tests table operations.\n\n```diff\n- public function testGetCollectionLogs(array $data)\n+ public function testGetTableLogs(array $data)\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842748",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $tvShowsId = $data['tvShowsId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call delete collection\n+         */\n+        $response = $this->client->call(Client::METHOD_DELETE, '/databases/' . $databaseId . '/tables/' . $tvShowsId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(204, $response['headers']['status-code']);\n+        $this->assertEquals($response['body'], \"\");\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetDatabaseUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(15, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsNumeric($response['body']['tablesTotal']);\n+        $this->assertIsArray($response['body']['tables']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetCollectionUsage(array $data)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842748",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842748",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array\n+    {\n+        $database = $this->client->call(Client::METHOD_POST, '/databases', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'databaseId' => ID::unique(),\n+            'name' => 'invalidDocumentDatabase',\n+        ]);\n+        $this->assertEquals(201, $database['headers']['status-code']);\n+        $this->assertEquals('invalidDocumentDatabase', $database['body']['name']);\n+        $this->assertTrue($database['body']['enabled']);\n+\n+        $databaseId = $database['body']['$id'];\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+        $movies = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'Movies',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        $this->assertEquals(201, $movies['headers']['status-code']);\n+        $this->assertEquals($movies['body']['name'], 'Movies');\n+\n+        /**\n+         * Test when database is disabled but can still create collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'invalidDocumentDatabase Updated',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertFalse($database['body']['enabled']);\n+\n+        $tvShows = $this->client->call(Client::METHOD_POST, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'tableId' => ID::unique(),\n+            'name' => 'TvShows',\n+            'permissions' => [\n+                Permission::read(Role::any()),\n+                Permission::create(Role::any()),\n+                Permission::update(Role::any()),\n+                Permission::delete(Role::any()),\n+            ],\n+            'rowSecurity' => true,\n+        ]);\n+\n+        /**\n+         * Test when collection is disabled but can still modify collections\n+         */\n+        $database = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $movies['body']['$id'], array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies',\n+            'enabled' => false,\n+        ]);\n+\n+        $this->assertEquals(201, $tvShows['headers']['status-code']);\n+        $this->assertEquals($tvShows['body']['name'], 'TvShows');\n+\n+        return ['moviesId' => $movies['body']['$id'], 'databaseId' => $databaseId, 'tvShowsId' => $tvShows['body']['$id']];\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testListCollection(array $data)\n+    {\n+        /**\n+         * Test when database is disabled but can still call list collections\n+         */\n+        $databaseId = $data['databaseId'];\n+\n+        $tables = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $tables['headers']['status-code']);\n+        $this->assertEquals(2, $tables['body']['total']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     */\n+    public function testGetCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call get collection\n+         */\n+        $table = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testUpdateCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $moviesCollectionId = $data['moviesId'];\n+\n+        /**\n+         * Test When database and collection are disabled but can still call update collection\n+         */\n+        $table = $this->client->call(Client::METHOD_PUT, '/databases/' . $databaseId . '/tables/' . $moviesCollectionId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()), [\n+            'name' => 'Movies Updated',\n+            'enabled' => false\n+        ]);\n+\n+        $this->assertEquals(200, $table['headers']['status-code']);\n+        $this->assertEquals('Movies Updated', $table['body']['name']);\n+        $this->assertEquals($moviesCollectionId, $table['body']['$id']);\n+        $this->assertFalse($table['body']['enabled']);\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     * @param array $data\n+     * @throws \\Exception\n+     * @throws \\Exception\n+     */\n+    public function testDeleteCollection(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        $tvShowsId = $data['tvShowsId'];\n+\n+        /**\n+         * Test when database and collection are disabled but can still call delete collection\n+         */\n+        $response = $this->client->call(Client::METHOD_DELETE, '/databases/' . $databaseId . '/tables/' . $tvShowsId, array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id'],\n+        ], $this->getHeaders()));\n+\n+        $this->assertEquals(204, $response['headers']['status-code']);\n+        $this->assertEquals($response['body'], \"\");\n+    }\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetDatabaseUsage(array $data)\n+    {\n+        $databaseId = $data['databaseId'];\n+        /**\n+         * Test for FAILURE\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '32h'\n+        ]);\n+\n+        $this->assertEquals(400, $response['headers']['status-code']);\n+\n+        /**\n+         * Test for SUCCESS\n+         */\n+\n+        $response = $this->client->call(Client::METHOD_GET, '/databases/' . $databaseId . '/usage', array_merge([\n+            'content-type' => 'application/json',\n+            'x-appwrite-project' => $this->getProject()['$id']\n+        ], $this->getHeaders()), [\n+            'range' => '24h'\n+        ]);\n+\n+\n+\n+        $this->assertEquals(200, $response['headers']['status-code']);\n+        $this->assertEquals(15, count($response['body']));\n+        $this->assertEquals('24h', $response['body']['range']);\n+        $this->assertIsNumeric($response['body']['rowsTotal']);\n+        $this->assertIsNumeric($response['body']['tablesTotal']);\n+        $this->assertIsArray($response['body']['tables']);\n+        $this->assertIsArray($response['body']['rows']);\n+    }\n+\n+\n+    /**\n+     * @depends testCreateCollection\n+     */\n+    public function testGetCollectionUsage(array $data)",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method uses \"Collection\" terminology but tests table operations.\n\n```diff\n- public function testGetCollectionUsage(array $data)\n+ public function testGetTableUsage(array $data)\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n    public function testGetTableUsage(array $data)\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082842749",
    "pr_number": 9693,
    "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
    "created_at": "2025-05-10T05:13:04+00:00",
    "commented_code": "+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2082842749",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "tests/e2e/Services/Databases/Tables/DatabasesConsoleClientTest.php",
        "discussion_id": "2082842749",
        "commented_code": "@@ -0,0 +1,336 @@\n+<?php\n+\n+namespace Tests\\E2E\\Services\\Databases\\Tables;\n+\n+use Tests\\E2E\\Client;\n+use Tests\\E2E\\Scopes\\ProjectCustom;\n+use Tests\\E2E\\Scopes\\Scope;\n+use Tests\\E2E\\Scopes\\SideConsole;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Helpers\\Role;\n+use Utopia\\Database\\Query;\n+\n+class DatabasesConsoleClientTest extends Scope\n+{\n+    use ProjectCustom;\n+    use SideConsole;\n+\n+    public function testCreateCollection(): array",
        "comment_created_at": "2025-05-10T05:13:04+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Method name inconsistent with Tables API terminology.**\n\nThis method name uses \"Collection\" terminology but tests table operations with the new Tables API.\n\nRename the method to align with the Tables API terminology:\n\n```diff\n- public function testCreateCollection(): array\n+ public function testCreateTable(): array\n```\n\nThis will require updating all `@depends` annotations that reference this method in other test methods.\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156530432",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
    "created_at": "2025-06-19T09:10:41+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('name', null, new Text(128), 'Collection name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156530432",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
        "discussion_id": "2156530432",
        "commented_code": "@@ -0,0 +1,66 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('name', null, new Text(128), 'Collection name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)",
        "comment_created_at": "2025-06-19T09:10:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Update parameter descriptions to use table terminology.**\n\nParameter descriptions should use table and row terminology instead of collection and document terminology.\n\n\n```diff\n-            ->param('name', null, new Text(128), 'Collection name. Max length: 128 chars.')\n+            ->param('name', null, new Text(128), 'Table name. Max length: 128 chars.')\n-            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a row. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            ->param('name', null, new Text(128), 'Table name. Max length: 128 chars.')\n            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a row. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php\naround lines 57 to 59, update the parameter descriptions to replace \"collection\"\nwith \"table\" and \"document\" with \"row\" to align with table terminology. Modify\nthe 'name' parameter description to say \"Table name\" instead of \"Collection\nname\" and adjust the 'rowSecurity' parameter description to refer to \"rows\"\ninstead of \"documents\" for consistency.\n```\n\n</details>\n\n<!-- This is an auto-generated reply by CodeRabbit -->",
        "pr_file_module": null
      },
      {
        "comment_id": "2156547067",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
        "discussion_id": "2156530432",
        "commented_code": "@@ -0,0 +1,66 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('name', null, new Text(128), 'Collection name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)",
        "comment_created_at": "2025-06-19T09:19:37+00:00",
        "comment_author": "ItzNotABug",
        "comment_body": "Fixed, thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2156549743",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
        "discussion_id": "2156530432",
        "commented_code": "@@ -0,0 +1,66 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_TABLE,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('name', null, new Text(128), 'Collection name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permission strings. By default, the current permissions are inherited. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('rowSecurity', false, new Boolean(true), 'Enables configuring permissions for individual rows. A user needs one of row or table level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)",
        "comment_created_at": "2025-06-19T09:21:07+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "@ItzNotABug Great, thanks for updating the terminology!\n\n\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: ItzNotABug\nPR: appwrite/appwrite#9693\nFile: src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php:57-59\nTimestamp: 2025-06-19T09:20:03.279Z\nLearning: In table-related endpoints (such as `src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php`), parameter descriptions should use \"table\" and \"row\" terminology instead of \"collection\" and \"document\" for clarity and consistency.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n---\n\n<!-- This is an auto-generated comment: tweet message by coderabbit.ai -->\n\nIf you found this review helpful, would you consider giving us a shout-out on [X](https://twitter.com/intent/tweet?related=CodeRabbitAI&text=Refine%20your%20code%20docs%20by%20using%20precise%20table%20%26%20row%20terms%20instead%20of%20collection%20%26%20document.%20Clearer%2C%20consistent%20descriptions%20boost%20understanding%20%26%20maintainability!%20Try%20%40coderabbitai%20%F0%9F%9B%A0%EF%B8%8F%E2%9C%A8&url=https%3A%2F%2Fgithub.com%2Fappwrite%2Fappwrite%2Fpull%2F9693%23discussion_r2156530432)?\n\nThank you for using CodeRabbit!\n\n<!-- end of auto-generated comment: tweet message by coderabbit.ai -->\n\n\n<!-- <agentComponentType>chat-answer</agentComponentType> -->\n\n<!-- <rawResChunk><answer>@ItzNotABug Great, thanks for updating the terminology!\n\n\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: ItzNotABug\nPR: appwrite/appwrite#9693\nFile: src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php:57-59\nTimestamp: 2025-06-19T09:20:03.279Z\nLearning: In table-related endpoints (such as `src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php`), parameter descriptions should use \"table\" and \"row\" terminology instead of \"collection\" and \"document\" for clarity and consistency.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n---\n\n&lt;!-- This is an auto-generated comment: tweet message by coderabbit.ai --&gt;\n\nIf you found this review helpful, would you consider giving us a shout-out on [X](https://twitter.com/intent/tweet?related=CodeRabbitAI&text=Refine%20your%20code%20docs%20by%20using%20precise%20table%20%26%20row%20terms%20instead%20of%20collection%20%26%20document.%20Clearer%2C%20consistent%20descriptions%20boost%20understanding%20%26%20maintainability!%20Try%20%40coderabbitai%20%F0%9F%9B%A0%EF%B8%8F%E2%9C%A8&url=https%3A%2F%2Fgithub.com%2Fappwrite%2Fappwrite%2Fpull%2F9693%23discussion_r2156530432)?\n\nThank you for using CodeRabbit!\n\n&lt;!-- end of auto-generated comment: tweet message by coderabbit.ai --&gt;\n\n</answer></rawResChunk> -->\n\n<!-- This is an auto-generated reply by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]