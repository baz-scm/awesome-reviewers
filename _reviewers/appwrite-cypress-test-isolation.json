[
  {
    "discussion_id": "2123823379",
    "pr_number": 9963,
    "pr_file": "cypress/e2e/2-advanced-examples/waiting.cy.js",
    "created_at": "2025-06-03T13:29:49+00:00",
    "commented_code": "+/// <reference types=\"cypress\" />\n+context('Waiting', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/waiting')\n+  })\n+  // BE CAREFUL of adding unnecessary wait times.\n+  // https://on.cypress.io/best-practices#Unnecessary-Waiting\n+\n+  // https://on.cypress.io/wait\n+  it('cy.wait() - wait for a specific amount of time', () => {\n+    cy.get('.wait-input1').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+    cy.get('.wait-input2').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+    cy.get('.wait-input3').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+  })",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823379",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress/e2e/2-advanced-examples/waiting.cy.js",
        "discussion_id": "2123823379",
        "commented_code": "@@ -0,0 +1,30 @@\n+/// <reference types=\"cypress\" />\n+context('Waiting', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/waiting')\n+  })\n+  // BE CAREFUL of adding unnecessary wait times.\n+  // https://on.cypress.io/best-practices#Unnecessary-Waiting\n+\n+  // https://on.cypress.io/wait\n+  it('cy.wait() - wait for a specific amount of time', () => {\n+    cy.get('.wait-input1').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+    cy.get('.wait-input2').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+    cy.get('.wait-input3').type('Wait 1000ms after typing')\n+    cy.wait(1000)\n+  })",
        "comment_created_at": "2025-06-03T13:29:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Contradicts best practices warning - remove fixed waits.**\n\nThis test directly contradicts the warning comments above (lines 6-7) about avoiding unnecessary waiting. Using `cy.wait(1000)` is an anti-pattern that makes tests slower and potentially flaky.\n\n\n\n```diff\n-  it('cy.wait() - wait for a specific amount of time', () => {\n-    cy.get('.wait-input1').type('Wait 1000ms after typing')\n-    cy.wait(1000)\n-    cy.get('.wait-input2').type('Wait 1000ms after typing')\n-    cy.wait(1000)\n-    cy.get('.wait-input3').type('Wait 1000ms after typing')\n-    cy.wait(1000)\n-  })\n+  // Remove this anti-pattern test or replace with proper waiting strategies\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  // Remove this anti-pattern test or replace with proper waiting strategies\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress/e2e/2-advanced-examples/waiting.cy.js around lines 10 to 17, the test\nuses fixed waits with cy.wait(1000), which contradicts best practices and can\ncause slower, flaky tests. Remove all cy.wait(1000) calls and instead rely on\nCypress commands that automatically wait for elements to be actionable or use\nappropriate assertions to ensure the app is ready before proceeding.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123823601",
    "pr_number": 9963,
    "pr_file": "cypress/e2e/databases.cy.js",
    "created_at": "2025-06-03T13:29:52+00:00",
    "commented_code": "+\n+describe('Pruebas de base de datos en Appwrite', () => {\n+    const baseUrl = 'http://localhost:80';\n+    const email = 'admin@example.com';\n+    const password = 'password123';\n+\n+\n+\n+    it('Debe iniciar sesi\u00f3n en Appwrite Console', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+        cy.wait(2000);\n+\n+\n+    });\n+\n+\n+    it('Debe crear un nuevo proyecto', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Proyecto Cypress').should('exist');\n+    });\n+\n+    it('Debe crear una base de datos', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+    });\n+\n+\n+    it('Debe crear una colecci\u00f3n en la base de datos', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+\n+\n+    });\n+\n+\n+    it('Debe agregar atributos a la colecci\u00f3n', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+        cy.contains('Create attribute').click();\n+\n+        cy.contains('String').click();\n+        cy.get('input[name=\"key\"]').type('testString');\n+        cy.get('input[name=\"size\"]').type('100');\n+        cy.get('button[type=\"submit\"]').last().click();\n+\n+\n+\n+\n+\n+    });\n+\n+\n+    it('Debe editar un atributo de la colecci\u00f3n', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+        cy.contains('Create attribute').click();\n+\n+        cy.contains('String').click();\n+        cy.get('input[name=\"key\"]').type('testString');\n+        cy.get('input[name=\"size\"]').type('100');\n+        cy.get('button[type=\"submit\"]').last().click();\n+        cy.wait(1000);\n+        cy.get('button[aria-label=\"more options\"]').click();\n+        cy.contains('Update').click();\n+        cy.get('input[name=\"key\"]').clear().type('testStringUpdated');\n+        cy.get('button[type=\"submit\"]').last().click();\n+\n+    });\n+",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823601",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress/e2e/databases.cy.js",
        "discussion_id": "2123823601",
        "commented_code": "@@ -0,0 +1,214 @@\n+\n+describe('Pruebas de base de datos en Appwrite', () => {\n+    const baseUrl = 'http://localhost:80';\n+    const email = 'admin@example.com';\n+    const password = 'password123';\n+\n+\n+\n+    it('Debe iniciar sesi\u00f3n en Appwrite Console', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+        cy.wait(2000);\n+\n+\n+    });\n+\n+\n+    it('Debe crear un nuevo proyecto', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Proyecto Cypress').should('exist');\n+    });\n+\n+    it('Debe crear una base de datos', () => {\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+    });\n+\n+\n+    it('Debe crear una colecci\u00f3n en la base de datos', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+\n+\n+    });\n+\n+\n+    it('Debe agregar atributos a la colecci\u00f3n', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+        cy.contains('Create attribute').click();\n+\n+        cy.contains('String').click();\n+        cy.get('input[name=\"key\"]').type('testString');\n+        cy.get('input[name=\"size\"]').type('100');\n+        cy.get('button[type=\"submit\"]').last().click();\n+\n+\n+\n+\n+\n+    });\n+\n+\n+    it('Debe editar un atributo de la colecci\u00f3n', () => {\n+\n+        cy.visit('/console/login');\n+\n+        cy.get('#email').type('admin@example.com');\n+        cy.get('#password').type('password123');\n+        cy.get('button').contains('Sign in').click();\n+\n+        cy.contains('Create project').click();\n+        cy.get('input[name=\"name\"]').clear().type('Proyecto Cypress');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Proyecto Cypress').should('exist');\n+\n+\n+        cy.get('button.sideNavToggle').click();\n+\n+        cy.wait(2000);\n+\n+        cy.contains('Databases').click();\n+        cy.wait(2000);\n+\n+\n+        cy.contains('Create database').click();\n+\n+        cy.get('input[name=\"name\"]').type('Test Database');\n+\n+        cy.get('button[type=\"submit\"]').click();\n+\n+        cy.contains('Test Database').should('exist');\n+        cy.url().should('include', '/databases/');\n+\n+        cy.wait(1000);\n+\n+        cy.contains('Create collection').click();\n+        cy.get('input[name=\"name\"]').clear().type('Test Collection');\n+        cy.get('button[type=\"submit\"]').click();\n+        cy.contains('Test Collection').should('exist');\n+        cy.contains('Create attribute').click();\n+\n+        cy.contains('String').click();\n+        cy.get('input[name=\"key\"]').type('testString');\n+        cy.get('input[name=\"size\"]').type('100');\n+        cy.get('button[type=\"submit\"]').last().click();\n+        cy.wait(1000);\n+        cy.get('button[aria-label=\"more options\"]').click();\n+        cy.contains('Update').click();\n+        cy.get('input[name=\"key\"]').clear().type('testStringUpdated');\n+        cy.get('button[type=\"submit\"]').last().click();\n+\n+    });\n+",
        "comment_created_at": "2025-06-03T13:29:52+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Eliminate massive code duplication and improve test reliability.**\n\nThis test suite has significant maintainability issues:\n\n1. **Code Duplication**: Each test repeats the entire login \u2192 create project \u2192 create database \u2192 create collection flow\n2. **Brittle Waits**: Fixed `cy.wait(2000)` calls make tests slow and unreliable\n3. **Poor Test Isolation**: Tests don't clean up after themselves\n\n\n\nExtract common operations into custom commands or use `beforeEach`:\n\n```diff\n+ beforeEach(() => {\n+   cy.login(email, password);\n+   cy.createProject('Proyecto Cypress');\n+   cy.createDatabase('Test Database');\n+ });\n\n- it('Debe crear una base de datos', () => {\n-   cy.visit('/console/login');\n-   cy.get('#email').type('admin@example.com');\n-   // ... repeated setup code\n+ it('Debe crear una base de datos', () => {\n+   // Database already created in beforeEach\n+   cy.contains('Test Database').should('exist');\n+ });\n```\n\nReplace fixed waits with proper assertions:\n```diff\n- cy.wait(2000);\n+ cy.get('[data-testid=\"sidebar\"]').should('be.visible');\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress/e2e/databases.cy.js from lines 9 to 213, there is excessive\nduplication of login, project creation, database creation, and collection\ncreation steps across tests, along with brittle fixed waits that reduce\nreliability. Refactor by extracting these repeated flows into Cypress custom\ncommands or setup functions like beforeEach to improve maintainability and test\nisolation. Replace all fixed cy.wait calls with dynamic assertions that wait for\nspecific UI elements or conditions to ensure tests proceed only when the app is\nready.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123823642",
    "pr_number": 9963,
    "pr_file": "cypress/e2e/2-advanced-examples/files.cy.js",
    "created_at": "2025-06-03T13:29:53+00:00",
    "commented_code": "+/// <reference types=\"cypress\" />\n+\n+/// JSON fixture file can be loaded directly using\n+// the built-in JavaScript bundler\n+const requiredExample = require('../../fixtures/example')\n+\n+context('Files', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/files')\n+\n+    // load example.json fixture file and store\n+    // in the test context object\n+    cy.fixture('example.json').as('example')\n+  })\n+\n+  it('cy.fixture() - load a fixture', () => {\n+    // https://on.cypress.io/fixture\n+\n+    // Instead of writing a response inline you can\n+    // use a fixture file's content.\n+\n+    // when application makes an Ajax request matching \"GET **/comments/*\"\n+    // Cypress will intercept it and reply with the object in `example.json` fixture\n+    cy.intercept('GET', '**/comments/*', { fixture: 'example.json' }).as('getComment')\n+\n+    // we have code that gets a comment when\n+    // the button is clicked in scripts.js\n+    cy.get('.fixture-btn').click()\n+\n+    cy.wait('@getComment').its('response.body')\n+      .should('have.property', 'name')\n+      .and('include', 'Using fixtures to represent data')\n+  })\n+\n+  it('cy.fixture() or require - load a fixture', function () {\n+    // we are inside the \"function () { ... }\"\n+    // callback and can use test context object \"this\"\n+    // \"this.example\" was loaded in \"beforeEach\" function callback\n+    expect(this.example, 'fixture in the test context')\n+      .to.deep.equal(requiredExample)\n+\n+    // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\n+    cy.wrap(this.example)\n+      .should('deep.equal', requiredExample)\n+  })\n+\n+  it('cy.readFile() - read file contents', () => {\n+    // https://on.cypress.io/readfile\n+\n+    // You can read a file and yield its contents\n+    // The filePath is relative to your project's root.\n+    cy.readFile(Cypress.config('configFile')).then((config) => {\n+      expect(config).to.be.an('string')\n+    })\n+  })\n+\n+  it('cy.writeFile() - write to a file', () => {\n+    // https://on.cypress.io/writefile\n+\n+    // You can write to a file\n+\n+    // Use a response from a request to automatically\n+    // generate a fixture file for use later\n+    cy.request('https://jsonplaceholder.cypress.io/users')\n+      .then((response) => {\n+        cy.writeFile('cypress/fixtures/users.json', response.body)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823642",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress/e2e/2-advanced-examples/files.cy.js",
        "discussion_id": "2123823642",
        "commented_code": "@@ -0,0 +1,85 @@\n+/// <reference types=\"cypress\" />\n+\n+/// JSON fixture file can be loaded directly using\n+// the built-in JavaScript bundler\n+const requiredExample = require('../../fixtures/example')\n+\n+context('Files', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/files')\n+\n+    // load example.json fixture file and store\n+    // in the test context object\n+    cy.fixture('example.json').as('example')\n+  })\n+\n+  it('cy.fixture() - load a fixture', () => {\n+    // https://on.cypress.io/fixture\n+\n+    // Instead of writing a response inline you can\n+    // use a fixture file's content.\n+\n+    // when application makes an Ajax request matching \"GET **/comments/*\"\n+    // Cypress will intercept it and reply with the object in `example.json` fixture\n+    cy.intercept('GET', '**/comments/*', { fixture: 'example.json' }).as('getComment')\n+\n+    // we have code that gets a comment when\n+    // the button is clicked in scripts.js\n+    cy.get('.fixture-btn').click()\n+\n+    cy.wait('@getComment').its('response.body')\n+      .should('have.property', 'name')\n+      .and('include', 'Using fixtures to represent data')\n+  })\n+\n+  it('cy.fixture() or require - load a fixture', function () {\n+    // we are inside the \"function () { ... }\"\n+    // callback and can use test context object \"this\"\n+    // \"this.example\" was loaded in \"beforeEach\" function callback\n+    expect(this.example, 'fixture in the test context')\n+      .to.deep.equal(requiredExample)\n+\n+    // or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\n+    cy.wrap(this.example)\n+      .should('deep.equal', requiredExample)\n+  })\n+\n+  it('cy.readFile() - read file contents', () => {\n+    // https://on.cypress.io/readfile\n+\n+    // You can read a file and yield its contents\n+    // The filePath is relative to your project's root.\n+    cy.readFile(Cypress.config('configFile')).then((config) => {\n+      expect(config).to.be.an('string')\n+    })\n+  })\n+\n+  it('cy.writeFile() - write to a file', () => {\n+    // https://on.cypress.io/writefile\n+\n+    // You can write to a file\n+\n+    // Use a response from a request to automatically\n+    // generate a fixture file for use later\n+    cy.request('https://jsonplaceholder.cypress.io/users')\n+      .then((response) => {\n+        cy.writeFile('cypress/fixtures/users.json', response.body)",
        "comment_created_at": "2025-06-03T13:29:53+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**File persistence between test runs needs consideration.**\n\nThe tests create files (`users.json`, `profile.json`) that will persist between test runs, potentially causing issues with test isolation.\n\n\n\nConsider cleaning up created files in an `after()` or `afterEach()` hook:\n\n```diff\n+  after(() => {\n+    // Clean up test-created files\n+    cy.task('deleteFile', 'cypress/fixtures/users.json')\n+    cy.task('deleteFile', 'cypress/fixtures/profile.json')\n+  })\n```\n\nOr use temporary file names with timestamps to avoid conflicts.\n\n\nAlso applies to: 75-79\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress/e2e/2-advanced-examples/files.cy.js around lines 66 and 75-79, the\ntests write files like users.json and profile.json that persist between test\nruns, risking test isolation issues. To fix this, add cleanup code in an after()\nor afterEach() hook to delete these files after tests complete, or modify the\ntest to write files with unique temporary names using timestamps to avoid\nconflicts across runs.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123823662",
    "pr_number": 9963,
    "pr_file": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
    "created_at": "2025-06-03T13:29:53+00:00",
    "commented_code": "+/// <reference types=\"cypress\" />\n+\n+context('Cypress APIs', () => {\n+\n+  context('Cypress.Commands', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    // https://on.cypress.io/custom-commands\n+\n+    it('.add() - create a custom command', () => {\n+      Cypress.Commands.add('console', {\n+        prevSubject: true,\n+      }, (subject, method) => {\n+      // the previous subject is automatically received\n+      // and the commands arguments are shifted\n+\n+        // allow us to change the console method used\n+        method = method || 'log'\n+\n+        // log the subject to the console\n+        console[method]('The subject is', subject)\n+\n+        // whatever we return becomes the new subject\n+        // we don't want to change the subject so\n+        // we return whatever was passed in\n+        return subject\n+      })\n+\n+      cy.get('button').console('info').then(($button) => {\n+      // subject is still $button\n+      })\n+    })\n+  })\n+\n+  context('Cypress.Cookies', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    // https://on.cypress.io/cookies\n+    it('.debug() - enable or disable debugging', () => {\n+      Cypress.Cookies.debug(true)\n+\n+      // Cypress will now log in the console when\n+      // cookies are set or cleared\n+      cy.setCookie('fakeCookie', '123ABC')\n+      cy.clearCookie('fakeCookie')\n+      cy.setCookie('fakeCookie', '123ABC')\n+      cy.clearCookie('fakeCookie')\n+      cy.setCookie('fakeCookie', '123ABC')\n+    })\n+  })\n+\n+  context('Cypress.arch', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    it('Get CPU architecture name of underlying OS', () => {\n+    // https://on.cypress.io/arch\n+      expect(Cypress.arch).to.exist\n+    })\n+  })\n+\n+  context('Cypress.config()', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    it('Get and set configuration options', () => {\n+    // https://on.cypress.io/config\n+      let myConfig = Cypress.config()\n+\n+      expect(myConfig).to.have.property('animationDistanceThreshold', 5)\n+      expect(myConfig).to.have.property('baseUrl', null)\n+      expect(myConfig).to.have.property('defaultCommandTimeout', 4000)\n+      expect(myConfig).to.have.property('requestTimeout', 5000)\n+      expect(myConfig).to.have.property('responseTimeout', 30000)\n+      expect(myConfig).to.have.property('viewportHeight', 660)\n+      expect(myConfig).to.have.property('viewportWidth', 1000)\n+      expect(myConfig).to.have.property('pageLoadTimeout', 60000)\n+      expect(myConfig).to.have.property('waitForAnimations', true)\n+\n+      expect(Cypress.config('pageLoadTimeout')).to.eq(60000)\n+\n+      // this will change the config for the rest of your tests!\n+      Cypress.config('pageLoadTimeout', 20000)\n+\n+      expect(Cypress.config('pageLoadTimeout')).to.eq(20000)\n+\n+      Cypress.config('pageLoadTimeout', 60000)\n+    })",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823662",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
        "discussion_id": "2123823662",
        "commented_code": "@@ -0,0 +1,185 @@\n+/// <reference types=\"cypress\" />\n+\n+context('Cypress APIs', () => {\n+\n+  context('Cypress.Commands', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    // https://on.cypress.io/custom-commands\n+\n+    it('.add() - create a custom command', () => {\n+      Cypress.Commands.add('console', {\n+        prevSubject: true,\n+      }, (subject, method) => {\n+      // the previous subject is automatically received\n+      // and the commands arguments are shifted\n+\n+        // allow us to change the console method used\n+        method = method || 'log'\n+\n+        // log the subject to the console\n+        console[method]('The subject is', subject)\n+\n+        // whatever we return becomes the new subject\n+        // we don't want to change the subject so\n+        // we return whatever was passed in\n+        return subject\n+      })\n+\n+      cy.get('button').console('info').then(($button) => {\n+      // subject is still $button\n+      })\n+    })\n+  })\n+\n+  context('Cypress.Cookies', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    // https://on.cypress.io/cookies\n+    it('.debug() - enable or disable debugging', () => {\n+      Cypress.Cookies.debug(true)\n+\n+      // Cypress will now log in the console when\n+      // cookies are set or cleared\n+      cy.setCookie('fakeCookie', '123ABC')\n+      cy.clearCookie('fakeCookie')\n+      cy.setCookie('fakeCookie', '123ABC')\n+      cy.clearCookie('fakeCookie')\n+      cy.setCookie('fakeCookie', '123ABC')\n+    })\n+  })\n+\n+  context('Cypress.arch', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    it('Get CPU architecture name of underlying OS', () => {\n+    // https://on.cypress.io/arch\n+      expect(Cypress.arch).to.exist\n+    })\n+  })\n+\n+  context('Cypress.config()', () => {\n+    beforeEach(() => {\n+      cy.visit('https://example.cypress.io/cypress-api')\n+    })\n+\n+    it('Get and set configuration options', () => {\n+    // https://on.cypress.io/config\n+      let myConfig = Cypress.config()\n+\n+      expect(myConfig).to.have.property('animationDistanceThreshold', 5)\n+      expect(myConfig).to.have.property('baseUrl', null)\n+      expect(myConfig).to.have.property('defaultCommandTimeout', 4000)\n+      expect(myConfig).to.have.property('requestTimeout', 5000)\n+      expect(myConfig).to.have.property('responseTimeout', 30000)\n+      expect(myConfig).to.have.property('viewportHeight', 660)\n+      expect(myConfig).to.have.property('viewportWidth', 1000)\n+      expect(myConfig).to.have.property('pageLoadTimeout', 60000)\n+      expect(myConfig).to.have.property('waitForAnimations', true)\n+\n+      expect(Cypress.config('pageLoadTimeout')).to.eq(60000)\n+\n+      // this will change the config for the rest of your tests!\n+      Cypress.config('pageLoadTimeout', 20000)\n+\n+      expect(Cypress.config('pageLoadTimeout')).to.eq(20000)\n+\n+      Cypress.config('pageLoadTimeout', 60000)\n+    })",
        "comment_created_at": "2025-06-03T13:29:53+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Consider test isolation concerns with global configuration changes.**\n\nModifying global Cypress configuration during tests can affect other tests running in the same session.\n\n\n\nEnsure configuration is restored after the test:\n\n```diff\n // this will change the config for the rest of your tests!\n+const originalTimeout = Cypress.config('pageLoadTimeout')\n Cypress.config('pageLoadTimeout', 20000)\n\n expect(Cypress.config('pageLoadTimeout')).to.eq(20000)\n\n-Cypress.config('pageLoadTimeout', 60000)\n+// Restore original configuration\n+Cypress.config('pageLoadTimeout', originalTimeout)\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n      // this will change the config for the rest of your tests!\n      const originalTimeout = Cypress.config('pageLoadTimeout')\n      Cypress.config('pageLoadTimeout', 20000)\n\n      expect(Cypress.config('pageLoadTimeout')).to.eq(20000)\n\n      // Restore original configuration\n      Cypress.config('pageLoadTimeout', originalTimeout)\n    })\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress/e2e/2-advanced-examples/cypress_api.cy.js around lines 88 to 94, the\ntest changes the global Cypress configuration for pageLoadTimeout without\nrestoring it, which can affect other tests. To fix this, save the original\npageLoadTimeout value before changing it, then restore the original value after\nthe test completes to maintain test isolation and prevent side effects on other\ntests.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]