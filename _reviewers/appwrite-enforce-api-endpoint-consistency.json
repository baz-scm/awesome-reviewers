[
  {
    "discussion_id": "2142942243",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Rows/Update.php",
    "created_at": "2025-06-12T14:34:36+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Rows;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Context;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Update as DocumentUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\JSON;\n+\n+class Update extends DocumentUpdate\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateRow';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_ROW;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setContext(Context::DATABASE_ROWS);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/rows/:rowId')\n+            ->desc('Update row')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142942243",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Rows/Update.php",
        "discussion_id": "2142942243",
        "commented_code": "@@ -0,0 +1,76 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Rows;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Context;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Update as DocumentUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\JSON;\n+\n+class Update extends DocumentUpdate\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateRow';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_ROW;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setContext(Context::DATABASE_ROWS);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/rows/:rowId')\n+            ->desc('Update row')",
        "comment_created_at": "2025-06-12T14:34:36+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Potential runtime breakage: `DocumentUpdate::action()` may still expect `collectionId`, not `tableId`**  \n`DocumentUpdate` was originally designed for the Collections API, so its `action()` usually reads the request param names `collectionId` / `documentId`.  \nHere you only rename the segment to `tables/:tableId/rows/:rowId`, but you delegate the callback to the unchanged parent implementation:\n\n```php\n->callback($this->action(...));\n```\n\nIf the parent still tries `$request->getParam('collectionId')`, the call will fail with \u201cArgument x passed must be of type string, null given\u201d or a \u201ccollection not found\u201d error.\n\n\nProposed quick-fix (keeping the callback intact):\n\n```diff\n+// Map new param names to the ones expected by the parent action\n+$this->inject('request')\n+     ->callback(function (...$args) {\n+         $request = $this->getInjected('request');\n+         // Back-compat shim\n+         $request->setParam('collectionId', $request->getParam('tableId'));\n+         $request->setParam('documentId',   $request->getParam('rowId'));\n+         return $this->action(...$args);\n+     });\n-\n-    ->callback($this->action(...));\n```\n\nAlternatively, override `action()` completely in this subclass so it consumes `tableId/rowId` directly.  \nPlease verify which option is less invasive for your routing layer.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Rows/Update.php\naround lines 37 to 40, the route parameters were renamed from\ncollectionId/documentId to tableId/rowId, but the inherited action() method\nstill expects collectionId/documentId, causing runtime errors. To fix this,\neither override the action() method in this subclass to use tableId and rowId\nparameters directly, or adapt the callback to map tableId to collectionId before\ncalling the parent action(). Choose the approach that best fits the routing\nlogic to ensure parameter names align with what action() expects.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136864298",
    "pr_number": 9986,
    "pr_file": "app/controllers/api/databases.php",
    "created_at": "2025-06-10T03:59:41+00:00",
    "commented_code": "$response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')\n+    ->param('value', 1, new Numeric(), 'Value to increment the attribute by. The value must be a number.', true)\n+    ->param('max', null, new Numeric(), 'Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.', true)\n+    ->inject('response')\n+    ->inject('dbForProject')\n+    ->inject('queueForEvents')\n+    ->inject('queueForStatsUsage')\n+    ->action(function (string $databaseId, string $collectionId, string $documentId, string $attribute, int|float $value, int|float|null $max, Response $response, Database $dbForProject, Event $queueForEvents, StatsUsage $queueForStatsUsage) {\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        try {\n+            $document = $dbForProject->increaseDocumentAttribute(\n+                collection: 'database_' . $database->getSequence() . '_collection_' . $collection->getSequence(),\n+                id: $documentId,\n+                attribute: $attribute,\n+                value: $value,\n+                max: $max\n+            );\n+        } catch (ConflictException) {\n+            throw new Exception(Exception::DOCUMENT_UPDATE_CONFLICT);\n+        } catch (NotFoundException) {\n+            throw new Exception(Exception::ATTRIBUTE_NOT_FOUND);\n+        } catch (LimitException) {\n+            throw new Exception(Exception::ATTRIBUTE_LIMIT_EXCEEDED, 'Attribute `' . $attribute . '` has reached the maximum value of ' . $max);\n+        } catch (TypeException) {\n+            throw new Exception(Exception::ATTRIBUTE_TYPE_INVALID, 'Attribute `' . $attribute . '` is not a number');\n+        }\n+\n+        $queueForStatsUsage\n+            ->addMetric(METRIC_DATABASES_OPERATIONS_WRITES, 1)\n+            ->addMetric(str_replace('{databaseInternalId}', $database->getSequence(), METRIC_DATABASE_ID_OPERATIONS_WRITES), 1);\n+\n+        $queueForEvents\n+            ->setParam('databaseId', $databaseId)\n+            ->setParam('collectionId', $collectionId)\n+            ->setContext('collection', $collection)\n+            ->setContext('database', $database);\n+\n+        $response->dynamic($document, Response::MODEL_DOCUMENT);\n+    });\n+\n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/decrement')\n+    ->desc('Decrement document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].decrement')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.decrement')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'decrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_NOCONTENT,\n+                model: Response::MODEL_NONE,\n+            )\n+        ],",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2136864298",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9986,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "2136864298",
        "commented_code": "@@ -4462,6 +4464,160 @@ function updateAttribute(\n         $response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')\n+    ->param('value', 1, new Numeric(), 'Value to increment the attribute by. The value must be a number.', true)\n+    ->param('max', null, new Numeric(), 'Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.', true)\n+    ->inject('response')\n+    ->inject('dbForProject')\n+    ->inject('queueForEvents')\n+    ->inject('queueForStatsUsage')\n+    ->action(function (string $databaseId, string $collectionId, string $documentId, string $attribute, int|float $value, int|float|null $max, Response $response, Database $dbForProject, Event $queueForEvents, StatsUsage $queueForStatsUsage) {\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        try {\n+            $document = $dbForProject->increaseDocumentAttribute(\n+                collection: 'database_' . $database->getSequence() . '_collection_' . $collection->getSequence(),\n+                id: $documentId,\n+                attribute: $attribute,\n+                value: $value,\n+                max: $max\n+            );\n+        } catch (ConflictException) {\n+            throw new Exception(Exception::DOCUMENT_UPDATE_CONFLICT);\n+        } catch (NotFoundException) {\n+            throw new Exception(Exception::ATTRIBUTE_NOT_FOUND);\n+        } catch (LimitException) {\n+            throw new Exception(Exception::ATTRIBUTE_LIMIT_EXCEEDED, 'Attribute `' . $attribute . '` has reached the maximum value of ' . $max);\n+        } catch (TypeException) {\n+            throw new Exception(Exception::ATTRIBUTE_TYPE_INVALID, 'Attribute `' . $attribute . '` is not a number');\n+        }\n+\n+        $queueForStatsUsage\n+            ->addMetric(METRIC_DATABASES_OPERATIONS_WRITES, 1)\n+            ->addMetric(str_replace('{databaseInternalId}', $database->getSequence(), METRIC_DATABASE_ID_OPERATIONS_WRITES), 1);\n+\n+        $queueForEvents\n+            ->setParam('databaseId', $databaseId)\n+            ->setParam('collectionId', $collectionId)\n+            ->setContext('collection', $collection)\n+            ->setContext('database', $database);\n+\n+        $response->dynamic($document, Response::MODEL_DOCUMENT);\n+    });\n+\n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/decrement')\n+    ->desc('Decrement document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].decrement')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.decrement')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'decrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_NOCONTENT,\n+                model: Response::MODEL_NONE,\n+            )\n+        ],",
        "comment_created_at": "2025-06-10T03:59:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Consider response consistency between increment and decrement endpoints.**\n\nThe increment endpoint returns the updated document (200 OK) while the decrement endpoint returns no content (204 NO_CONTENT). For better API consistency, both endpoints should return the same response type.\n\nConsider changing the decrement endpoint to return the updated document like the increment endpoint:\n\n```diff\n-            new SDKResponse(\n-                code: Response::STATUS_CODE_NOCONTENT,\n-                model: Response::MODEL_NONE,\n-            )\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n```\n\nAlso remove the duplicate `->dynamic($document, Response::MODEL_DOCUMENT);` call if you choose NO_CONTENT, or remove `$response->noContent();` if you choose to return the document.\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            new SDKResponse(\n                code: Response::STATUS_CODE_OK,\n                model: Response::MODEL_DOCUMENT,\n            )\n        ],\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/databases.php around lines 4563 to 4566, the decrement\nendpoint returns a 204 NO_CONTENT response while the increment endpoint returns\nthe updated document with a 200 OK status, causing inconsistency. To fix this,\nmodify the decrement endpoint to return the updated document with a 200 OK\nstatus like the increment endpoint by removing the noContent() call and ensuring\nthe response includes the updated document data. Also, remove any duplicate\ndynamic() calls to avoid redundancy.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156530424",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Indexes/Create.php",
    "created_at": "2025-06-19T09:10:41+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Indexes;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Indexes\\Create as IndexCreate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Integer;\n+use Utopia\\Validator\\Nullable;\n+use Utopia\\Validator\\WhiteList;\n+\n+class Create extends IndexCreate\n+{\n+    public static function getName(): string\n+    {\n+        return 'createColumnIndex';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_INDEX;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/indexes')\n+            ->desc('Create index')\n+            ->groups(['api', 'database'])\n+            ->label('event', 'databases.[databaseId].tables.[tableId].indexes.[indexId].create')\n+            ->label('scope', 'collections.write')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156530424",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Indexes/Create.php",
        "discussion_id": "2156530424",
        "commented_code": "@@ -0,0 +1,71 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Indexes;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Indexes\\Create as IndexCreate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Integer;\n+use Utopia\\Validator\\Nullable;\n+use Utopia\\Validator\\WhiteList;\n+\n+class Create extends IndexCreate\n+{\n+    public static function getName(): string\n+    {\n+        return 'createColumnIndex';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_INDEX;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/indexes')\n+            ->desc('Create index')\n+            ->groups(['api', 'database'])\n+            ->label('event', 'databases.[databaseId].tables.[tableId].indexes.[indexId].create')\n+            ->label('scope', 'collections.write')",
        "comment_created_at": "2025-06-19T09:10:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Update scope to align with Tables API.**\n\nThe scope should be `tables.write` instead of `collections.write` to maintain consistency with the new Tables API terminology.\n\n\n```diff\n-            ->label('scope', 'collections.write')\n+            ->label('scope', 'tables.write')\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            ->label('scope', 'tables.write')\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Indexes/Create.php\nat line 40, update the scope label from 'collections.write' to 'tables.write' to\nalign with the new Tables API terminology and maintain consistency.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077802502",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Attributes/Get.php",
    "created_at": "2025-05-07T14:42:45+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setResponseModel([\n+            UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN,\n+            UtopiaResponse::MODEL_ATTRIBUTE_INTEGER,\n+            UtopiaResponse::MODEL_ATTRIBUTE_FLOAT,\n+            UtopiaResponse::MODEL_ATTRIBUTE_EMAIL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+            UtopiaResponse::MODEL_ATTRIBUTE_URL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_IP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+            UtopiaResponse::MODEL_ATTRIBUTE_RELATIONSHIP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_STRING,\n+        ]);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Get column')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077802502",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Attributes/Get.php",
        "discussion_id": "2077802502",
        "commented_code": "@@ -0,0 +1,101 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setResponseModel([\n+            UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN,\n+            UtopiaResponse::MODEL_ATTRIBUTE_INTEGER,\n+            UtopiaResponse::MODEL_ATTRIBUTE_FLOAT,\n+            UtopiaResponse::MODEL_ATTRIBUTE_EMAIL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+            UtopiaResponse::MODEL_ATTRIBUTE_URL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_IP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+            UtopiaResponse::MODEL_ATTRIBUTE_RELATIONSHIP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_STRING,\n+        ]);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Get column')",
        "comment_created_at": "2025-05-07T14:42:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Route <--> parameter name mismatch breaks request parsing**  \nThe path expects `:collectionId`, but the declared parameter is `tableId`.  \n`Utopia\\Route` binds by *placeholder name*, so `tableId` will remain `null`, causing the subsequent DB lookup to fail with `DATABASE_NOT_FOUND`.\n\n```diff\n-            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n...\n-            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n```\n\nAlso update the action signature to `string $collectionId`.  \n\n\n\nAlso applies to: 61-63\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814661",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/XList.php",
    "created_at": "2025-05-05T03:45:49+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Collections;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Text;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listTables';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('List tables')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'listTables',\n+                description: '/docs/references/databases/list-collections.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_COLLECTION_LIST,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('queries', [], new Collections(), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long. You may filter on the following attributes: ' . implode(', ', Collections::ALLOWED_ATTRIBUTES), true)\n+            ->param('search', '', new Text(256), 'Search term to filter your list results. Max length: 256 chars.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, array $queries, string $search, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $queries = Query::parseQueries($queries);\n+\n+        if (!empty($search)) {\n+            $queries[] = Query::search('search', $search);\n+        }\n+\n+        /**\n+         * Get cursor document if there was a cursor query, we use array_filter and reset for reference $cursor to $queries\n+         */\n+        $cursor = \\array_filter($queries, function ($query) {\n+            return \\in_array($query->getMethod(), [Query::TYPE_CURSOR_AFTER, Query::TYPE_CURSOR_BEFORE]);\n+        });\n+        $cursor = reset($cursor);\n+\n+        if ($cursor) {\n+            $validator = new Cursor();\n+            if (!$validator->isValid($cursor)) {\n+                throw new Exception(Exception::GENERAL_QUERY_INVALID, $validator->getDescription());\n+            }\n+\n+            $tableId = $cursor->getValue();\n+            $cursorDocument = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+\n+            if ($cursorDocument->isEmpty()) {\n+                throw new Exception(Exception::GENERAL_CURSOR_NOT_FOUND, \"Table '{$tableId}' for the 'cursor' value not found.\");\n+            }\n+\n+            $cursor->setValue($cursorDocument);\n+        }\n+\n+        $filterQueries = Query::groupByType($queries)['filters'];\n+\n+        try {\n+            $tables = $dbForProject->find('database_' . $database->getInternalId(), $queries);\n+            $total = $dbForProject->count('database_' . $database->getInternalId(), $filterQueries, APP_LIMIT_COUNT);\n+        } catch (OrderException $e) {\n+            throw new Exception(Exception::DATABASE_QUERY_ORDER_NULL, \"The order column '{$e->getAttribute()}' had a null value. Cursor pagination requires all rows order column values are non-null.\");\n+        }\n+\n+        $response->dynamic(new Document([\n+            'collections' => $tables, // TODO: consider renaming to 'tables'\n+            'total' => $total,\n+        ]), UtopiaResponse::MODEL_COLLECTION_LIST);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814661",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/XList.php",
        "discussion_id": "2072814661",
        "commented_code": "@@ -0,0 +1,117 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Collections;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Text;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listTables';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('List tables')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'listTables',\n+                description: '/docs/references/databases/list-collections.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_COLLECTION_LIST,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('queries', [], new Collections(), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long. You may filter on the following attributes: ' . implode(', ', Collections::ALLOWED_ATTRIBUTES), true)\n+            ->param('search', '', new Text(256), 'Search term to filter your list results. Max length: 256 chars.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, array $queries, string $search, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $queries = Query::parseQueries($queries);\n+\n+        if (!empty($search)) {\n+            $queries[] = Query::search('search', $search);\n+        }\n+\n+        /**\n+         * Get cursor document if there was a cursor query, we use array_filter and reset for reference $cursor to $queries\n+         */\n+        $cursor = \\array_filter($queries, function ($query) {\n+            return \\in_array($query->getMethod(), [Query::TYPE_CURSOR_AFTER, Query::TYPE_CURSOR_BEFORE]);\n+        });\n+        $cursor = reset($cursor);\n+\n+        if ($cursor) {\n+            $validator = new Cursor();\n+            if (!$validator->isValid($cursor)) {\n+                throw new Exception(Exception::GENERAL_QUERY_INVALID, $validator->getDescription());\n+            }\n+\n+            $tableId = $cursor->getValue();\n+            $cursorDocument = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+\n+            if ($cursorDocument->isEmpty()) {\n+                throw new Exception(Exception::GENERAL_CURSOR_NOT_FOUND, \"Table '{$tableId}' for the 'cursor' value not found.\");\n+            }\n+\n+            $cursor->setValue($cursorDocument);\n+        }\n+\n+        $filterQueries = Query::groupByType($queries)['filters'];\n+\n+        try {\n+            $tables = $dbForProject->find('database_' . $database->getInternalId(), $queries);\n+            $total = $dbForProject->count('database_' . $database->getInternalId(), $filterQueries, APP_LIMIT_COUNT);\n+        } catch (OrderException $e) {\n+            throw new Exception(Exception::DATABASE_QUERY_ORDER_NULL, \"The order column '{$e->getAttribute()}' had a null value. Cursor pagination requires all rows order column values are non-null.\");\n+        }\n+\n+        $response->dynamic(new Document([\n+            'collections' => $tables, // TODO: consider renaming to 'tables'\n+            'total' => $total,\n+        ]), UtopiaResponse::MODEL_COLLECTION_LIST);",
        "comment_created_at": "2025-05-05T03:45:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Response body key still named `collections` (TODO left)**\n\nLeaving the TODO unresolved will leak the old term in client responses, obligating a future breaking change.\n\n```diff\n-    'collections' => $tables,\n+    'tables' => $tables,\n```\n\nProvide a deprecation alias only if absolutely necessary:\n\n```php\n'tables' => $tables,\n'collections' => $tables, // @deprecated remove in 1.6\n```\n\n\u2026and update `MODEL_COLLECTION_LIST` or introduce `MODEL_TABLE_LIST`.\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits 8504fbc to 04386ee",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814665",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
    "created_at": "2025-05-05T03:45:49+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Attributes;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'listColumns',\n+                description: '/docs/references/databases/list-attributes.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_LIST\n+                    )\n+                ]\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('queries', [], new Attributes(), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long. You may filter on the following attributes: ' . implode(', ', Attributes::ALLOWED_ATTRIBUTES), true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, array $queries, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        if ($table->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        $queries = Query::parseQueries($queries);\n+\n+        \\array_push(\n+            $queries,\n+            Query::equal('databaseInternalId', [$database->getInternalId()]),\n+            Query::equal('collectionInternalId', [$table->getInternalId()])\n+        );\n+\n+        $cursor = \\array_filter(\n+            $queries,\n+            fn ($query) => \\in_array($query->getMethod(), [Query::TYPE_CURSOR_AFTER, Query::TYPE_CURSOR_BEFORE])\n+        );\n+        $cursor = \\reset($cursor);\n+\n+        if ($cursor) {\n+            $validator = new Cursor();\n+            if (!$validator->isValid($cursor)) {\n+                throw new Exception(Exception::GENERAL_QUERY_INVALID, $validator->getDescription());\n+            }\n+\n+            $columnId = $cursor->getValue();\n+            $cursorDocument = Authorization::skip(\n+                fn () => $dbForProject->find('attributes', [\n+                    Query::equal('databaseInternalId', [$database->getInternalId()]),\n+                    Query::equal('collectionInternalId', [$table->getInternalId()]),\n+                    Query::equal('key', [$columnId]),\n+                    Query::limit(1),\n+                ])\n+            );\n+\n+            if (empty($cursorDocument) || $cursorDocument[0]->isEmpty()) {\n+                throw new Exception(Exception::GENERAL_CURSOR_NOT_FOUND, \"Column '{$columnId}' for the 'cursor' value not found.\");\n+            }\n+\n+            $cursor->setValue($cursorDocument[0]);\n+        }\n+\n+        $filters = Query::groupByType($queries)['filters'];\n+\n+        try {\n+            $columns = $dbForProject->find('attributes', $queries);\n+            $total = $dbForProject->count('attributes', $filters, APP_LIMIT_COUNT);\n+        } catch (OrderException $e) {\n+            throw new Exception(Exception::DATABASE_QUERY_ORDER_NULL, \"The order column '{$e->getAttribute()}' had a null value. Cursor pagination requires all rows order column values are non-null.\");\n+        }\n+\n+        $response->dynamic(new Document([\n+            'attributes' => $columns,\n+            'total' => $total,\n+        ]), UtopiaResponse::MODEL_ATTRIBUTE_LIST);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814665",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
        "discussion_id": "2072814665",
        "commented_code": "@@ -0,0 +1,125 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Attributes;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'listColumns',\n+                description: '/docs/references/databases/list-attributes.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_LIST\n+                    )\n+                ]\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID.')\n+            ->param('queries', [], new Attributes(), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long. You may filter on the following attributes: ' . implode(', ', Attributes::ALLOWED_ATTRIBUTES), true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, array $queries, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId);\n+        if ($table->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        $queries = Query::parseQueries($queries);\n+\n+        \\array_push(\n+            $queries,\n+            Query::equal('databaseInternalId', [$database->getInternalId()]),\n+            Query::equal('collectionInternalId', [$table->getInternalId()])\n+        );\n+\n+        $cursor = \\array_filter(\n+            $queries,\n+            fn ($query) => \\in_array($query->getMethod(), [Query::TYPE_CURSOR_AFTER, Query::TYPE_CURSOR_BEFORE])\n+        );\n+        $cursor = \\reset($cursor);\n+\n+        if ($cursor) {\n+            $validator = new Cursor();\n+            if (!$validator->isValid($cursor)) {\n+                throw new Exception(Exception::GENERAL_QUERY_INVALID, $validator->getDescription());\n+            }\n+\n+            $columnId = $cursor->getValue();\n+            $cursorDocument = Authorization::skip(\n+                fn () => $dbForProject->find('attributes', [\n+                    Query::equal('databaseInternalId', [$database->getInternalId()]),\n+                    Query::equal('collectionInternalId', [$table->getInternalId()]),\n+                    Query::equal('key', [$columnId]),\n+                    Query::limit(1),\n+                ])\n+            );\n+\n+            if (empty($cursorDocument) || $cursorDocument[0]->isEmpty()) {\n+                throw new Exception(Exception::GENERAL_CURSOR_NOT_FOUND, \"Column '{$columnId}' for the 'cursor' value not found.\");\n+            }\n+\n+            $cursor->setValue($cursorDocument[0]);\n+        }\n+\n+        $filters = Query::groupByType($queries)['filters'];\n+\n+        try {\n+            $columns = $dbForProject->find('attributes', $queries);\n+            $total = $dbForProject->count('attributes', $filters, APP_LIMIT_COUNT);\n+        } catch (OrderException $e) {\n+            throw new Exception(Exception::DATABASE_QUERY_ORDER_NULL, \"The order column '{$e->getAttribute()}' had a null value. Cursor pagination requires all rows order column values are non-null.\");\n+        }\n+\n+        $response->dynamic(new Document([\n+            'attributes' => $columns,\n+            'total' => $total,\n+        ]), UtopiaResponse::MODEL_ATTRIBUTE_LIST);",
        "comment_created_at": "2025-05-05T03:45:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Response payload key is still called \u201cattributes\u201d**\n\nClients calling `/tables/:tableId/columns` will intuitively expect:\n\n```json\n{\n  \"columns\": [...],\n  \"total\": 123\n}\n```\n\nToday the key is `\"attributes\"`.  Unless you intend to keep both for backward-compatibility, please rename (or duplicate) the field.\n\n\n```diff\n-            'attributes' => $columns,\n+            'columns' => $columns,\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits 8504fbc to 04386ee",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814657",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Get.php",
    "created_at": "2025-05-05T03:45:49+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/:key')\n+            ->desc('Get column')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814657",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Get.php",
        "discussion_id": "2072814657",
        "commented_code": "@@ -0,0 +1,112 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/:key')\n+            ->desc('Get column')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)",
        "comment_created_at": "2025-05-05T03:45:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Scope label drift**\n\nThe endpoint is now \u201ccolumns\u201d/\u201ctables\u201d centric but still exports `collections.read`.\n\n```diff\n-    ->label('scope', 'collections.read')\n+    ->label('scope', 'tables.read')\n```\n\nAligning scopes early prevents a breaking change later.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142300565",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Integer/Update.php",
    "created_at": "2025-06-12T10:28:59+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Columns\\Integer;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Context;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes\\Integer\\Update as IntegerUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Integer;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends IntegerUpdate\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateIntegerColumn';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_INTEGER;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setContext(Context::DATABASE_COLUMNS);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/integer/:key')\n+            ->desc('Update integer column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].update')\n+            ->label('audits.event', 'column.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142300565",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Integer/Update.php",
        "discussion_id": "2142300565",
        "commented_code": "@@ -0,0 +1,75 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Columns\\Integer;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Context;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes\\Integer\\Update as IntegerUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Integer;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends IntegerUpdate\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateIntegerColumn';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_INTEGER;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setContext(Context::DATABASE_COLUMNS);\n+\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/integer/:key')\n+            ->desc('Update integer column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].update')\n+            ->label('audits.event', 'column.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')",
        "comment_created_at": "2025-06-12T10:28:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Scope and placeholder values are still \u201ccollections\u201d, should be \u201ctables/columns\u201d.**\n\nThe new endpoint is table\u2013centric yet it still re-uses:\n- `label('scope', 'collections.write')`\n- Event placeholder `columns.[columnId]`\n\nThis will (1) leak the \u201ccollections\u201d RBAC scope into the new API and (2) try to resolve a non-existent `columnId` parameter (the incoming name is `key`).  \nBoth break backward compat and audit/event integrity.\n\n```diff\n-            ->label('scope', 'collections.write')\n-            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].update')\n+            ->label('scope', 'tables.write')\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[key].update')\n```\n\nConsider also updating the audit resource to include the column key if you need fine-grained trails, e.g. `.../column/{request.key}`.  \n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/integer/:key')\n            ->desc('Update integer column')\n            ->groups(['api', 'database', 'schema'])\n            ->label('scope', 'tables.write')\n            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[key].update')\n            ->label('audits.event', 'column.update')\n            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Integer/Update.php\naround lines 40 to 47, update the label for scope from 'collections.write' to a\nmore accurate 'tables.columns.write' to reflect the table-centric endpoint.\nChange the event placeholder from 'columns.[columnId]' to use the correct\nparameter 'columns.[key]' to match the incoming request parameter. Also, modify\nthe audits.resource label to include the column key as\n'database/{request.databaseId}/table/{request.tableId}/column/{request.key}' for\nprecise audit trails. These changes will prevent RBAC scope leakage and ensure\nevent and audit integrity.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077802489",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Attributes/Boolean/Create.php",
    "created_at": "2025-05-07T14:42:45+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes\\Boolean;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes\\Action;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+\n+class Create extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createBooleanColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setResponseModel(UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN);\n+\n+        $this->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/boolean')\n+            ->desc('Create boolean attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].collections.[attributeId].create')\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'attribute.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077802489",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Attributes/Boolean/Create.php",
        "discussion_id": "2077802489",
        "commented_code": "@@ -0,0 +1,94 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes\\Boolean;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Attributes\\Action;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+\n+class Create extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createBooleanColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this->setResponseModel(UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN);\n+\n+        $this->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/boolean')\n+            ->desc('Create boolean attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].collections.[attributeId].create')\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'attribute.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')",
        "comment_created_at": "2025-05-07T14:42:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Event label has a duplicated `collections` segment**  \n`databases.[databaseId].collections.[collectionId].collections.[attributeId].create` should be `\u2026collections.[collectionId].attributes.[attributeId].create`.  \nWorkers and realtime consumers that rely on the label will silently miss these events.\n\n```diff\n-            ->label('event', 'databases.[databaseId].collections.[collectionId].collections.[attributeId].create')\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].attributes.[attributeId].create')\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156530436",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Datetime/Create.php",
    "created_at": "2025-06-19T09:10:41+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Columns\\Datetime;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes\\Datetime\\Create as DatetimeCreate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+\n+class Create extends DatetimeCreate\n+{\n+    public static function getName(): string\n+    {\n+        return 'createDatetimeColumn';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_DATETIME;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/datetime')\n+            ->desc('Create datetime column')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].create')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156530436",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Datetime/Create.php",
        "discussion_id": "2156530436",
        "commented_code": "@@ -0,0 +1,66 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables\\Columns\\Datetime;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes\\Datetime\\Create as DatetimeCreate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+\n+class Create extends DatetimeCreate\n+{\n+    public static function getName(): string\n+    {\n+        return 'createDatetimeColumn';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_COLUMN_DATETIME;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/datetime')\n+            ->desc('Create datetime column')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].create')",
        "comment_created_at": "2025-06-19T09:10:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Update scope and event placeholder for Tables API consistency.**\n\nThe scope should be `tables.write` and the event placeholder should be consistent with the Tables API pattern.\n\n\n```diff\n-            ->label('scope', 'collections.write')\n-            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].create')\n+            ->label('scope', 'tables.write')\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[key].create')\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            ->label('scope', 'tables.write')\n            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[key].create')\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Columns/Datetime/Create.php\naround lines 36 to 38, update the scope label from 'collections.write' to\n'tables.write' and modify the event label placeholder to follow the Tables API\npattern consistently, ensuring it correctly references tables instead of\ncollections.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]