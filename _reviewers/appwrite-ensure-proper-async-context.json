[
  {
    "discussion_id": "2094515989",
    "pr_number": 9796,
    "pr_file": "docs/examples/1.6.x/server-nodejs/examples/databases/delete-documents.md",
    "created_at": "2025-05-18T12:52:59+00:00",
    "commented_code": "+const sdk = require('node-appwrite');\n+\n+const client = new sdk.Client()\n+    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint\n+    .setProject('<YOUR_PROJECT_ID>') // Your project ID\n+    .setKey('<YOUR_API_KEY>'); // Your secret API key\n+\n+const databases = new sdk.Databases(client);\n+\n+const result = await databases.deleteDocuments(\n+    '<DATABASE_ID>', // databaseId\n+    '<COLLECTION_ID>', // collectionId\n+    [] // queries (optional)\n+);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094515989",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9796,
        "pr_file": "docs/examples/1.6.x/server-nodejs/examples/databases/delete-documents.md",
        "discussion_id": "2094515989",
        "commented_code": "@@ -0,0 +1,14 @@\n+const sdk = require('node-appwrite');\n+\n+const client = new sdk.Client()\n+    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint\n+    .setProject('<YOUR_PROJECT_ID>') // Your project ID\n+    .setKey('<YOUR_API_KEY>'); // Your secret API key\n+\n+const databases = new sdk.Databases(client);\n+\n+const result = await databases.deleteDocuments(\n+    '<DATABASE_ID>', // databaseId\n+    '<COLLECTION_ID>', // collectionId\n+    [] // queries (optional)\n+);",
        "comment_created_at": "2025-05-18T12:52:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Wrap top-level await in an async function for Node.js**\n\n`require()` calls in CommonJS modules do not support top-level `await`. Either switch to an ES module (`import`) or wrap the delete call in an async IIFE:\n\n```diff\n+ (async () => {\n+   const result = await databases.deleteDocuments(\n+       '<DATABASE_ID>',\n+       '<COLLECTION_ID>',\n+       []\n+   );\n+   console.log(result);\n+ })();\n```\n\nThis will ensure the snippet runs as intended in Node.js. \n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn docs/examples/1.6.x/server-nodejs/examples/databases/delete-documents.md\naround lines 10 to 14, the code uses top-level await which is not supported in\nCommonJS modules with require(). To fix this, wrap the deleteDocuments call\ninside an async function or an immediately invoked async function expression\n(IIFE) so the await is inside an async context, ensuring the snippet runs\ncorrectly in Node.js.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094516000",
    "pr_number": 9796,
    "pr_file": "docs/examples/1.6.x/server-nodejs/examples/databases/create-documents.md",
    "created_at": "2025-05-18T12:53:00+00:00",
    "commented_code": "+const sdk = require('node-appwrite');\n+\n+const client = new sdk.Client()\n+    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint\n+    .setProject('<YOUR_PROJECT_ID>') // Your project ID\n+    .setSession(''); // The user session to authenticate with\n+\n+const databases = new sdk.Databases(client);\n+\n+const result = await databases.createDocuments(\n+    '<DATABASE_ID>', // databaseId\n+    '<COLLECTION_ID>', // collectionId\n+    [] // documents\n+);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094516000",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9796,
        "pr_file": "docs/examples/1.6.x/server-nodejs/examples/databases/create-documents.md",
        "discussion_id": "2094516000",
        "commented_code": "@@ -0,0 +1,14 @@\n+const sdk = require('node-appwrite');\n+\n+const client = new sdk.Client()\n+    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint\n+    .setProject('<YOUR_PROJECT_ID>') // Your project ID\n+    .setSession(''); // The user session to authenticate with\n+\n+const databases = new sdk.Databases(client);\n+\n+const result = await databases.createDocuments(\n+    '<DATABASE_ID>', // databaseId\n+    '<COLLECTION_ID>', // collectionId\n+    [] // documents\n+);",
        "comment_created_at": "2025-05-18T12:53:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Wrap `await` in an async function for compatibility.**  \nTop-level `await` is not supported in CommonJS modules. Encapsulate the call in an async IIFE and handle errors and result display:\n```diff\n- const result = await databases.createDocuments(\n-     '<DATABASE_ID>',\n-     '<COLLECTION_ID>',\n-     []\n- );\n+ (async () => {\n+   try {\n+     const result = await databases.createDocuments(\n+       '<DATABASE_ID>',\n+       '<COLLECTION_ID>',\n+       []\n+     );\n+     console.log(result);\n+   } catch (error) {\n+     console.error(error);\n+   }\n+ })();\n```\nThis ensures the snippet runs without syntax errors.\n\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n(async () => {\n  try {\n    const result = await databases.createDocuments(\n      '<DATABASE_ID>',\n      '<COLLECTION_ID>',\n      []\n    );\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn docs/examples/1.6.x/server-nodejs/examples/databases/create-documents.md\naround lines 10 to 14, the use of top-level await is not compatible with\nCommonJS modules. To fix this, wrap the await call inside an async immediately\ninvoked function expression (IIFE), and include error handling and result output\nwithin that function to ensure the snippet runs without syntax errors.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094516004",
    "pr_number": 9796,
    "pr_file": "docs/examples/1.6.x/server-swift/examples/databases/upsert-documents.md",
    "created_at": "2025-05-18T12:53:00+00:00",
    "commented_code": "+import Appwrite\n+\n+let client = Client()\n+    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n+    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n+    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n+\n+let databases = Databases(client)\n+\n+let documentList = try await databases.upsertDocuments(\n+    databaseId: \"<DATABASE_ID>\",\n+    collectionId: \"<COLLECTION_ID>\",\n+    documents: [] // optional\n+)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094516004",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9796,
        "pr_file": "docs/examples/1.6.x/server-swift/examples/databases/upsert-documents.md",
        "discussion_id": "2094516004",
        "commented_code": "@@ -0,0 +1,15 @@\n+import Appwrite\n+\n+let client = Client()\n+    .setEndpoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n+    .setProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n+    .setKey(\"<YOUR_API_KEY>\") // Your secret API key\n+\n+let databases = Databases(client)\n+\n+let documentList = try await databases.upsertDocuments(\n+    databaseId: \"<DATABASE_ID>\",\n+    collectionId: \"<COLLECTION_ID>\",\n+    documents: [] // optional\n+)",
        "comment_created_at": "2025-05-18T12:53:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Wrap `try await` in an async context with error handling**  \nIn Swift, `try await` must run inside an async context and handle errors. For example:\n\n```swift\nTask {\n    do {\n        let documentList = try await databases.upsertDocuments(\n            databaseId: \"<DATABASE_ID>\",\n            collectionId: \"<COLLECTION_ID>\",\n            documents: []\n        )\n        print(documentList)\n    } catch {\n        print(\"Error upserting documents:\", error)\n    }\n}\n```\n\n<details>\n<summary>\ud83e\uddf0 Tools</summary>\n\n<details>\n<summary>\ud83e\ude9b LanguageTool</summary>\n\n[grammar] ~10-~10: Did you mean \u201cto await\u201d?\nContext: ...tabases(client)  let documentList = try await databases.upsertDocuments(     database...\n\n(MISSING_TO_BEFORE_A_VERB)\n\n</details>\n\n</details>\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn docs/examples/1.6.x/server-swift/examples/databases/upsert-documents.md\naround lines 10 to 14, the usage of `try await` is not wrapped inside an async\ncontext and lacks error handling. To fix this, wrap the `try await` call within\na Swift `Task` block and add a `do-catch` statement to handle potential errors\nproperly. This ensures the asynchronous call is executed correctly and errors\nare caught and logged.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094516011",
    "pr_number": 9796,
    "pr_file": "docs/examples/1.6.x/server-dotnet/examples/databases/create-documents.md",
    "created_at": "2025-05-18T12:53:00+00:00",
    "commented_code": "+using Appwrite;\n+using Appwrite.Models;\n+using Appwrite.Services;\n+\n+Client client = new Client()\n+    .SetEndPoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n+    .SetProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n+    .SetSession(\"\"); // The user session to authenticate with\n+\n+Databases databases = new Databases(client);\n+\n+DocumentList result = await databases.CreateDocuments(\n+    databaseId: \"<DATABASE_ID>\",\n+    collectionId: \"<COLLECTION_ID>\",\n+    documents: new List<object>()\n+);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094516011",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9796,
        "pr_file": "docs/examples/1.6.x/server-dotnet/examples/databases/create-documents.md",
        "discussion_id": "2094516011",
        "commented_code": "@@ -0,0 +1,16 @@\n+using Appwrite;\n+using Appwrite.Models;\n+using Appwrite.Services;\n+\n+Client client = new Client()\n+    .SetEndPoint(\"https://<REGION>.cloud.appwrite.io/v1\") // Your API Endpoint\n+    .SetProject(\"<YOUR_PROJECT_ID>\") // Your project ID\n+    .SetSession(\"\"); // The user session to authenticate with\n+\n+Databases databases = new Databases(client);\n+\n+DocumentList result = await databases.CreateDocuments(\n+    databaseId: \"<DATABASE_ID>\",\n+    collectionId: \"<COLLECTION_ID>\",\n+    documents: new List<object>()\n+);",
        "comment_created_at": "2025-05-18T12:53:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Wrap the `await` call in an `async` method.**\n\nC# requires `await` to be inside an `async` method (e.g., `Main` or another async entry point). Update the example to include an `async Task Main`:\n\n```csharp\n+using System;\n+using System.Threading.Tasks;\n+\n+class Program\n+{\n+    public static async Task Main(string[] args)\n+    {\n+        var client = new Client()\n+            .SetEndPoint(\"https://<REGION>.cloud.appwrite.io/v1\")\n+            .SetProject(\"<YOUR_PROJECT_ID>\")\n+            .SetSession(\"\");\n+\n+        var databases = new Databases(client);\n+        DocumentList result = await databases.CreateDocuments(\n+            databaseId: \"<DATABASE_ID>\",\n+            collectionId: \"<COLLECTION_ID>\",\n+            documents: new List<object>()\n+        );\n+        Console.WriteLine(result);\n+    }\n+}\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn docs/examples/1.6.x/server-dotnet/examples/databases/create-documents.md\naround lines 12 to 16, the await call is used outside of an async method, which\nis invalid in C#. Wrap the await call inside an async method such as an async\nTask Main method within a Program class. Define the Main method as public static\nasync Task Main(string[] args), place the client and database initialization\ninside it, and then perform the await call there to ensure proper asynchronous\nexecution.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]