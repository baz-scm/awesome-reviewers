[
  {
    "discussion_id": "2123823311",
    "pr_number": 9963,
    "pr_file": "cypress.config.js",
    "created_at": "2025-06-03T13:29:48+00:00",
    "commented_code": "+const { defineConfig } = require(\"cypress\");\n+\n+module.exports = defineConfig({\n+  e2e: {\n+    baseUrl: 'http://localhost', // Ajusta el puerto si Appwrite est\u00e1 en otro (ej: http://localhost:80 o :8080)",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823311",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress.config.js",
        "discussion_id": "2123823311",
        "commented_code": "@@ -0,0 +1,15 @@\n+const { defineConfig } = require(\"cypress\");\n+\n+module.exports = defineConfig({\n+  e2e: {\n+    baseUrl: 'http://localhost', // Ajusta el puerto si Appwrite est\u00e1 en otro (ej: http://localhost:80 o :8080)",
        "comment_created_at": "2025-06-03T13:29:48+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Specify a complete base URL with port number.**\n\nThe base URL lacks a port specification, which may cause connection issues. Appwrite typically runs on specific ports.\n\n\n\nApply this diff to provide a more specific configuration:\n\n```diff\n-    baseUrl: 'http://localhost', // Ajusta el puerto si Appwrite est\u00e1 en otro (ej: http://localhost:80 o :8080)\n+    baseUrl: 'http://localhost:80', // Adjust port based on your Appwrite configuration\n```\n\nConsider making this configurable via environment variables:\n\n```diff\n-    baseUrl: 'http://localhost:80',\n+    baseUrl: process.env.CYPRESS_BASE_URL || 'http://localhost:80',\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n    baseUrl: process.env.CYPRESS_BASE_URL || 'http://localhost:80', // Adjust port based on your Appwrite configuration\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress.config.js at line 5, the baseUrl is set without a port number, which\ncan cause connection issues since Appwrite usually runs on a specific port.\nUpdate the baseUrl to include the appropriate port (e.g., http://localhost:80 or\nhttp://localhost:8080). Additionally, refactor the configuration to read the\nbaseUrl from an environment variable to allow flexibility across different\nenvironments.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123823402",
    "pr_number": 9963,
    "pr_file": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
    "created_at": "2025-06-03T13:29:50+00:00",
    "commented_code": "+/// <reference types=\"cypress\" />\n+\n+context('Aliasing', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/aliasing')\n+  })\n+\n+  it('.as() - alias a DOM element for later use', () => {\n+    // https://on.cypress.io/as\n+\n+    // Alias a DOM element for use later\n+    // We don't have to traverse to the element\n+    // later in our code, we reference it with @\n+\n+    cy.get('.as-table').find('tbody>tr')\n+      .first().find('td').first()\n+      .find('button').as('firstBtn')\n+\n+    // when we reference the alias, we place an\n+    // @ in front of its name\n+    cy.get('@firstBtn').click()\n+\n+    cy.get('@firstBtn')\n+      .should('have.class', 'btn-success')\n+      .and('contain', 'Changed')\n+  })\n+\n+  it('.as() - alias a route for later use', () => {\n+    // Alias the route to wait for its response\n+    cy.intercept('GET', '**/comments/*').as('getComment')\n+\n+    // we have code that gets a comment when\n+    // the button is clicked in scripts.js\n+    cy.get('.network-btn').click()\n+\n+    // https://on.cypress.io/wait\n+    cy.wait('@getComment').its('response.statusCode').should('eq', 200)\n+  })",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2123823402",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9963,
        "pr_file": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
        "discussion_id": "2123823402",
        "commented_code": "@@ -0,0 +1,39 @@\n+/// <reference types=\"cypress\" />\n+\n+context('Aliasing', () => {\n+  beforeEach(() => {\n+    cy.visit('https://example.cypress.io/commands/aliasing')\n+  })\n+\n+  it('.as() - alias a DOM element for later use', () => {\n+    // https://on.cypress.io/as\n+\n+    // Alias a DOM element for use later\n+    // We don't have to traverse to the element\n+    // later in our code, we reference it with @\n+\n+    cy.get('.as-table').find('tbody>tr')\n+      .first().find('td').first()\n+      .find('button').as('firstBtn')\n+\n+    // when we reference the alias, we place an\n+    // @ in front of its name\n+    cy.get('@firstBtn').click()\n+\n+    cy.get('@firstBtn')\n+      .should('have.class', 'btn-success')\n+      .and('contain', 'Changed')\n+  })\n+\n+  it('.as() - alias a route for later use', () => {\n+    // Alias the route to wait for its response\n+    cy.intercept('GET', '**/comments/*').as('getComment')\n+\n+    // we have code that gets a comment when\n+    // the button is clicked in scripts.js\n+    cy.get('.network-btn').click()\n+\n+    // https://on.cypress.io/wait\n+    cy.wait('@getComment').its('response.statusCode').should('eq', 200)\n+  })",
        "comment_created_at": "2025-06-03T13:29:50+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Strict status code assertion may be too rigid.**\n\nThe assertion expects exactly status code 200, but the similar test in `waiting.cy.js` allows for both 200 and 304. This inconsistency could cause flaky tests.\n\n\n\nMake the assertion consistent with other tests:\n\n```diff\n-    cy.wait('@getComment').its('response.statusCode').should('eq', 200)\n+    cy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304])\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  it('.as() - alias a route for later use', () => {\n    // Alias the route to wait for its response\n    cy.intercept('GET', '**/comments/*').as('getComment')\n\n    // we have code that gets a comment when\n    // the button is clicked in scripts.js\n    cy.get('.network-btn').click()\n\n    // https://on.cypress.io/wait\n-   cy.wait('@getComment').its('response.statusCode').should('eq', 200)\n+   cy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304])\n  })\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn cypress/e2e/2-advanced-examples/aliasing.cy.js between lines 28 and 38, the\ntest asserts that the response status code is exactly 200, which is too strict\nand inconsistent with similar tests that allow 200 or 304. Modify the assertion\nto accept either 200 or 304 status codes to align with the other tests and\nreduce flakiness.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]