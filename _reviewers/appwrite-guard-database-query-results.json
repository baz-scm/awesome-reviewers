[
  {
    "discussion_id": "2094519289",
    "pr_number": 9649,
    "pr_file": "app/controllers/shared/api.php",
    "created_at": "2025-05-18T13:06:35+00:00",
    "commented_code": "$enabled                // Abuse is enabled\n                 && !$isAppUser          // User is not API key\n                 && !$isPrivilegedUser   // User is not an admin\n+                && $devKey->isEmpty()  // request doesn't not contain development key\n                 && $abuse->check()      // Route is rate-limited",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094519289",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9649,
        "pr_file": "app/controllers/shared/api.php",
        "discussion_id": "2094519289",
        "commented_code": "@@ -460,6 +487,7 @@\n                 $enabled                // Abuse is enabled\n                 && !$isAppUser          // User is not API key\n                 && !$isPrivilegedUser   // User is not an admin\n+                && $devKey->isEmpty()  // request doesn't not contain development key\n                 && $abuse->check()      // Route is rate-limited",
        "comment_created_at": "2025-05-18T13:06:35+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**`devKey` bypass check relies on non-null Document**\n\n`$devKey->isEmpty()` assumes `$devKey` is always an injected `Document`.  \nIf the service container ever provides `null`, this will throw. Ensure the DI always instantiates an empty `Document` when no dev key is present (mirroring the `$resourceToken` pattern) or add a null-coalesce check:\n\n```diff\n-&& $devKey->isEmpty()  // request doesn't not contain development key\n+&& (is_null($devKey) || $devKey->isEmpty())\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/shared/api.php around lines 490 to 491, the code calls\n$devKey->isEmpty() assuming $devKey is always a Document instance, but if\n$devKey is null, this will cause an error. Fix this by ensuring the dependency\ninjection always provides an empty Document instance when no dev key is present,\nsimilar to the $resourceToken pattern, or add a null-coalescing check before\ncalling isEmpty() to safely handle null values.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094437037",
    "pr_number": 9787,
    "pr_file": "src/Appwrite/Migration/Version/V22.php",
    "created_at": "2025-05-18T08:45:32+00:00",
    "commented_code": "*/\n     private function migrateCollections(): void\n     {\n-        $internalProjectId = $this->project->getInternalId();\n-        $collectionType = match ($internalProjectId) {\n+        $projectInternalId = $this->project->getInternalId();\n+\n+        if (empty($projectInternalId)) {\n+            throw new Exception('Project ID is null');\n+        }\n+\n+        $collectionType = match ($projectInternalId) {\n             'console' => 'console',\n             default => 'projects',\n         };\n \n         $collections = $this->collections[$collectionType];\n+\n         foreach ($collections as $collection) {\n             $id = $collection['$id'];\n \n-            Console::log(\"Migrating Collection \\\"{$id}\\\"\");\n+            if (empty($id)) {\n+                continue;\n+            }\n \n-            $this->dbForProject->setNamespace(\"_$internalProjectId\");\n+            Console::log(\"Migrating collection \\\"{$id}\\\"\");\n \n             switch ($id) {\n-                case 'installations':\n-                    // Create personalAccessToken attribute\n+                case '_metadata':\n+                    $this->createCollection('sites');\n+                    $this->createCollection('resourceTokens');\n+                    if ($projectInternalId === 'console') {\n+                        $this->createCollection('devKeys');\n+                    }\n+                    break;\n+                case 'identities':\n+                    $attributes = [\n+                        'scopes',\n+                        'expire',\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'projects':\n+                    try {\n+                        $attributes = [\n+                            'devKeys',\n+                        ];\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'rules':\n+                    $attributes = [\n+                        'type',\n+                        'trigger',\n+                        'redirectUrl',\n+                        'redirectStatusCode',\n+                        'deploymentResourceType',\n+                        'deploymentId',\n+                        'deploymentInternalId',\n+                        'deploymentResourceId',\n+                        'deploymentResourceInternalId',\n+                        'deploymentVcsProviderBranch',\n+                        'search'\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $indexes = [\n+                        '_key_search',\n+                        '_key_type',\n+                        '_key_trigger',\n+                        '_key_deploymentResourceType',\n+                        '_key_deploymentResourceId',\n+                        '_key_deploymentResourceInternalId',\n+                        '_key_deploymentId',\n+                        '_key_deploymentInternalId',\n+                        '_key_deploymentVcsProviderBranch',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'memberships':\n+                    $indexes = [\n+                        '_key_roles',\n+                    ];\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'migrations':\n+                    $attributes = [\n+                        'options',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $indexes = [\n+                        '_key_resource_id',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'functions':\n+                    $attributes = [\n+                        'deploymentId',\n+                        'deploymentCreatedAt',\n+                        'latestDeploymentId',\n+                        'latestDeploymentInternalId',\n+                        'latestDeploymentCreatedAt',\n+                        'latestDeploymentStatus',\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalAccessToken');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalAccessToken' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n \n-                    // Create personalAccessTokenExpiry attribute\n+                    $indexes = [\n+                        '_key_deploymentId',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'deployments':\n+                    $attributes = [\n+                        'buildCommands',\n+                        'sourcePath',\n+                        'buildOutput',\n+                        'adapter',\n+                        'fallbackFile',\n+                        'sourceSize',\n+                        'sourceMetadata',\n+                        'sourceChunksTotal',\n+                        'sourceChunksUploaded',\n+                        'screenshotLight',\n+                        'screenshotDark',\n+                        'buildStartedAt',\n+                        'buildEndedAt',\n+                        'buildDuration',\n+                        'buildSize',\n+                        'status',\n+                        'buildPath',\n+                        'buildLogs',\n+                        'totalSize',\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalAccessTokenExpiry');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalAccessTokenExpiry' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n \n-                    // Create personalRefreshToken attribute\n+                    $indexes = [\n+                        '_key_sourceSize',\n+                        '_key_buildSize',\n+                        '_key_totalSize',\n+                        '_key_buildDuration',\n+                        '_key_type',\n+                        '_key_status',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'executions':\n+                    $attributes = [\n+                        'resourceInternalId',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalRefreshToken');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalRefreshToken' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n+\n+                    $indexes = [\n+                        '_key_resource',\n+                    ];\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'variables':\n+                    $attributes = [\n+                        'secret',\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                default:\n                     break;\n             }\n+        }\n+    }\n+\n+    /**\n+     * Fix run on each document\n+     *\n+     * @param Document $document\n+     * @return Document\n+     * @throws Conflict\n+     * @throws Structure\n+     * @throws Timeout\n+     * @throws \\Utopia\\Database\\Exception\n+     * @throws \\Utopia\\Database\\Exception\\Authorization\n+     * @throws \\Utopia\\Database\\Exception\\Query\n+     */\n+    private function migrateDocument(Document $document): Document\n+    {\n+        switch ($document->getCollection()) {\n+            case 'rules':\n+                /*\n+                1. Convert \"resourceType\" to \"type\". Convert \"function\" to \"deployment\"\n+                2. Convert \"resourceId\" to \"deploymentResourceId\"\n+                3. Convert \"resourceInternalId\" to \"deploymentResourceInternalId\"\n+                4. Fill \"trigger\" with \"manual\"\n+                5. Fill \"deploymentResourceType\". If \"resourceType\" is \"function\", set \"deploymentResourceType\" to \"function\"\n+                6. Fill \"search\" with \"{$id} {domain}\"\n+                7. Fill \"deploymentId\" and \"deploymentInternalId\". If \"deploymentResourceType\" is \"function\", get project DB, and find function with ID \"resourceId\". Then fill rule's \"deploymentId\" with function's \"deployment\", and \"deploymentId\" as backup\n+                */\n+\n+                $deploymentResourceType = null;\n \n-            usleep(50000);\n+                $type = $document->getAttribute('resourceType', $document->getAttribute('type', ''));\n+                if ($type === 'function') {\n+                    $type = 'deployment';\n+                    $deploymentResourceType = 'function';\n+                }\n+\n+                $resourceId = $document->getAttribute('resourceId', $document->getAttribute('deploymentResourceId'));\n+                $resourceInternalId = $document->getAttribute('resourceInternalId', $document->getAttribute('deploymentResourceInternalId'));\n+\n+                $document\n+                    ->setAttribute('type', $type)\n+                    ->setAttribute('trigger', 'manual')\n+                    ->setAttribute('deploymentResourceId', $resourceId)\n+                    ->setAttribute('deploymentResourceInternalId', $resourceInternalId)\n+                    ->setAttribute('deploymentResourceType', $document->getAttribute('deploymentResourceType', $deploymentResourceType))\n+                    ->setAttribute('search', \\implode(' ', [$document->getId(), $document->getAttribute('domain', '')]));\n+\n+                if ($deploymentResourceType === 'function') {\n+                    $project = $this->dbForProject->getDocument('projects', $document->getAttribute('projectId'));\n+                    $dbForOwnerProject = ($this->getProjectDB)($project);\n+                    $function = $dbForOwnerProject->getDocument('functions', $resourceId);\n+                    $deploymentId = $function->getAttribute('deployment', $function->getAttribute('deploymentId', $document->getAttribute('deploymentId')));\n+                    $deploymentInternalId = $function->getAttribute('deploymentInternalId', $document->getAttribute('deploymentInternalId', ''));\n+\n+                    $document\n+                        ->setAttribute('deploymentId', $deploymentId)\n+                        ->setAttribute('deploymentInternalId', $deploymentInternalId);\n+                }\n+                break;\n+            case 'variables':\n+                /*\n+                1. Fill \"secret\" with \"false\"\n+                */\n+                $document->setAttribute('secret', $document->getAttribute('secret', false));\n+                break;\n+            case 'executions':\n+                /*\n+                1. Convert \"functionInternalId\" to \"resourceInternalId\"\n+                2. Convert \"functionId\" to \"resourceId\"\n+                3. Fill \"resourceType\" with \"functions\"\n+                */\n+                $document\n+                    ->setAttribute('resourceInternalId', $document->getAttribute('functionInternalId', $document->getAttribute('resourceInternalId')))\n+                    ->setAttribute('resourceId', $document->getAttribute('functionId', $document->getAttribute('resourceId', '')))\n+                    ->setAttribute('resourceType', $document->getAttribute('resourceType', 'functions'));\n+                break;\n+            case 'functions':\n+                /*\n+                1. Convert \"deployment\" to \"deploymentId\"\n+                --- Fetch activeDeployment from \"deploymentId\"\n+                2. Fill \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                --- Fetch latestDeployment using find()\n+                3. Fill latestDeploymentId with latestDeployment's \"$id\"\n+                4. Fill latestDeploymentInternalId with latestDeployment's \"$internalId\"\n+                5. Fill latestDeploymentCreatedAt with latestDeployment's \"$createdAt\"\n+                6. Fill latestDeploymentStatus with latestDeployment's build's \"status\"\n+                */\n+                if ($document->getAttribute('deployment')) {\n+                    $document->setAttribute('deploymentId', $document->getAttribute('deployment', $document->getAttribute('deploymentId', '')));\n+                }\n+\n+                $deploymentId = $document->getAttribute('deploymentId');\n+                $deployment = $this->dbForProject->getDocument('deployments', $deploymentId);\n+                $document->setAttribute('deploymentCreatedAt', $deployment->getCreatedAt());\n+\n+                $latestDeployment = $this->dbForProject->findOne('deployments', [\n+                    Query::orderDesc(),\n+                    Query::equal('resourceId', [$document->getId()]),\n+                    Query::equal('resourceType', ['functions']),\n+                ]);\n+\n+                $latestBuild = $this->dbForProject->getDocument('builds', $latestDeployment->getAttribute('buildId', ''));\n+\n+                $document",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094437037",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9787,
        "pr_file": "src/Appwrite/Migration/Version/V22.php",
        "discussion_id": "2094437037",
        "commented_code": "@@ -38,46 +49,559 @@ public function execute(): void\n      */\n     private function migrateCollections(): void\n     {\n-        $internalProjectId = $this->project->getInternalId();\n-        $collectionType = match ($internalProjectId) {\n+        $projectInternalId = $this->project->getInternalId();\n+\n+        if (empty($projectInternalId)) {\n+            throw new Exception('Project ID is null');\n+        }\n+\n+        $collectionType = match ($projectInternalId) {\n             'console' => 'console',\n             default => 'projects',\n         };\n \n         $collections = $this->collections[$collectionType];\n+\n         foreach ($collections as $collection) {\n             $id = $collection['$id'];\n \n-            Console::log(\"Migrating Collection \\\"{$id}\\\"\");\n+            if (empty($id)) {\n+                continue;\n+            }\n \n-            $this->dbForProject->setNamespace(\"_$internalProjectId\");\n+            Console::log(\"Migrating collection \\\"{$id}\\\"\");\n \n             switch ($id) {\n-                case 'installations':\n-                    // Create personalAccessToken attribute\n+                case '_metadata':\n+                    $this->createCollection('sites');\n+                    $this->createCollection('resourceTokens');\n+                    if ($projectInternalId === 'console') {\n+                        $this->createCollection('devKeys');\n+                    }\n+                    break;\n+                case 'identities':\n+                    $attributes = [\n+                        'scopes',\n+                        'expire',\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'projects':\n+                    try {\n+                        $attributes = [\n+                            'devKeys',\n+                        ];\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'rules':\n+                    $attributes = [\n+                        'type',\n+                        'trigger',\n+                        'redirectUrl',\n+                        'redirectStatusCode',\n+                        'deploymentResourceType',\n+                        'deploymentId',\n+                        'deploymentInternalId',\n+                        'deploymentResourceId',\n+                        'deploymentResourceInternalId',\n+                        'deploymentVcsProviderBranch',\n+                        'search'\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $indexes = [\n+                        '_key_search',\n+                        '_key_type',\n+                        '_key_trigger',\n+                        '_key_deploymentResourceType',\n+                        '_key_deploymentResourceId',\n+                        '_key_deploymentResourceInternalId',\n+                        '_key_deploymentId',\n+                        '_key_deploymentInternalId',\n+                        '_key_deploymentVcsProviderBranch',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'memberships':\n+                    $indexes = [\n+                        '_key_roles',\n+                    ];\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'migrations':\n+                    $attributes = [\n+                        'options',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $indexes = [\n+                        '_key_resource_id',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'functions':\n+                    $attributes = [\n+                        'deploymentId',\n+                        'deploymentCreatedAt',\n+                        'latestDeploymentId',\n+                        'latestDeploymentInternalId',\n+                        'latestDeploymentCreatedAt',\n+                        'latestDeploymentStatus',\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalAccessToken');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalAccessToken' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n \n-                    // Create personalAccessTokenExpiry attribute\n+                    $indexes = [\n+                        '_key_deploymentId',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'deployments':\n+                    $attributes = [\n+                        'buildCommands',\n+                        'sourcePath',\n+                        'buildOutput',\n+                        'adapter',\n+                        'fallbackFile',\n+                        'sourceSize',\n+                        'sourceMetadata',\n+                        'sourceChunksTotal',\n+                        'sourceChunksUploaded',\n+                        'screenshotLight',\n+                        'screenshotDark',\n+                        'buildStartedAt',\n+                        'buildEndedAt',\n+                        'buildDuration',\n+                        'buildSize',\n+                        'status',\n+                        'buildPath',\n+                        'buildLogs',\n+                        'totalSize',\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalAccessTokenExpiry');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalAccessTokenExpiry' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n \n-                    // Create personalRefreshToken attribute\n+                    $indexes = [\n+                        '_key_sourceSize',\n+                        '_key_buildSize',\n+                        '_key_totalSize',\n+                        '_key_buildDuration',\n+                        '_key_type',\n+                        '_key_status',\n+                    ];\n+\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'executions':\n+                    $attributes = [\n+                        'resourceInternalId',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n                     try {\n-                        $this->createAttributeFromCollection($this->dbForProject, $id, 'personalRefreshToken');\n-                    } catch (Throwable $th) {\n-                        Console::warning(\"'personalRefreshToken' from {$id}: {$th->getMessage()}\");\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n                     }\n+\n+                    $indexes = [\n+                        '_key_resource',\n+                    ];\n+                    foreach ($indexes as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->dbForProject, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"Failed to create index \\\"$index\\\" from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                case 'variables':\n+                    $attributes = [\n+                        'secret',\n+                    ];\n+                    try {\n+                        $this->createAttributesFromCollection($this->dbForProject, $id, $attributes);\n+                    } catch (\\Throwable $th) {\n+                        Console::warning('Failed to create attributes \"' . \\implode(', ', $attributes) . \"\\\" in collection {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->dbForProject->purgeCachedCollection($id);\n+                    break;\n+                default:\n                     break;\n             }\n+        }\n+    }\n+\n+    /**\n+     * Fix run on each document\n+     *\n+     * @param Document $document\n+     * @return Document\n+     * @throws Conflict\n+     * @throws Structure\n+     * @throws Timeout\n+     * @throws \\Utopia\\Database\\Exception\n+     * @throws \\Utopia\\Database\\Exception\\Authorization\n+     * @throws \\Utopia\\Database\\Exception\\Query\n+     */\n+    private function migrateDocument(Document $document): Document\n+    {\n+        switch ($document->getCollection()) {\n+            case 'rules':\n+                /*\n+                1. Convert \"resourceType\" to \"type\". Convert \"function\" to \"deployment\"\n+                2. Convert \"resourceId\" to \"deploymentResourceId\"\n+                3. Convert \"resourceInternalId\" to \"deploymentResourceInternalId\"\n+                4. Fill \"trigger\" with \"manual\"\n+                5. Fill \"deploymentResourceType\". If \"resourceType\" is \"function\", set \"deploymentResourceType\" to \"function\"\n+                6. Fill \"search\" with \"{$id} {domain}\"\n+                7. Fill \"deploymentId\" and \"deploymentInternalId\". If \"deploymentResourceType\" is \"function\", get project DB, and find function with ID \"resourceId\". Then fill rule's \"deploymentId\" with function's \"deployment\", and \"deploymentId\" as backup\n+                */\n+\n+                $deploymentResourceType = null;\n \n-            usleep(50000);\n+                $type = $document->getAttribute('resourceType', $document->getAttribute('type', ''));\n+                if ($type === 'function') {\n+                    $type = 'deployment';\n+                    $deploymentResourceType = 'function';\n+                }\n+\n+                $resourceId = $document->getAttribute('resourceId', $document->getAttribute('deploymentResourceId'));\n+                $resourceInternalId = $document->getAttribute('resourceInternalId', $document->getAttribute('deploymentResourceInternalId'));\n+\n+                $document\n+                    ->setAttribute('type', $type)\n+                    ->setAttribute('trigger', 'manual')\n+                    ->setAttribute('deploymentResourceId', $resourceId)\n+                    ->setAttribute('deploymentResourceInternalId', $resourceInternalId)\n+                    ->setAttribute('deploymentResourceType', $document->getAttribute('deploymentResourceType', $deploymentResourceType))\n+                    ->setAttribute('search', \\implode(' ', [$document->getId(), $document->getAttribute('domain', '')]));\n+\n+                if ($deploymentResourceType === 'function') {\n+                    $project = $this->dbForProject->getDocument('projects', $document->getAttribute('projectId'));\n+                    $dbForOwnerProject = ($this->getProjectDB)($project);\n+                    $function = $dbForOwnerProject->getDocument('functions', $resourceId);\n+                    $deploymentId = $function->getAttribute('deployment', $function->getAttribute('deploymentId', $document->getAttribute('deploymentId')));\n+                    $deploymentInternalId = $function->getAttribute('deploymentInternalId', $document->getAttribute('deploymentInternalId', ''));\n+\n+                    $document\n+                        ->setAttribute('deploymentId', $deploymentId)\n+                        ->setAttribute('deploymentInternalId', $deploymentInternalId);\n+                }\n+                break;\n+            case 'variables':\n+                /*\n+                1. Fill \"secret\" with \"false\"\n+                */\n+                $document->setAttribute('secret', $document->getAttribute('secret', false));\n+                break;\n+            case 'executions':\n+                /*\n+                1. Convert \"functionInternalId\" to \"resourceInternalId\"\n+                2. Convert \"functionId\" to \"resourceId\"\n+                3. Fill \"resourceType\" with \"functions\"\n+                */\n+                $document\n+                    ->setAttribute('resourceInternalId', $document->getAttribute('functionInternalId', $document->getAttribute('resourceInternalId')))\n+                    ->setAttribute('resourceId', $document->getAttribute('functionId', $document->getAttribute('resourceId', '')))\n+                    ->setAttribute('resourceType', $document->getAttribute('resourceType', 'functions'));\n+                break;\n+            case 'functions':\n+                /*\n+                1. Convert \"deployment\" to \"deploymentId\"\n+                --- Fetch activeDeployment from \"deploymentId\"\n+                2. Fill \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                --- Fetch latestDeployment using find()\n+                3. Fill latestDeploymentId with latestDeployment's \"$id\"\n+                4. Fill latestDeploymentInternalId with latestDeployment's \"$internalId\"\n+                5. Fill latestDeploymentCreatedAt with latestDeployment's \"$createdAt\"\n+                6. Fill latestDeploymentStatus with latestDeployment's build's \"status\"\n+                */\n+                if ($document->getAttribute('deployment')) {\n+                    $document->setAttribute('deploymentId', $document->getAttribute('deployment', $document->getAttribute('deploymentId', '')));\n+                }\n+\n+                $deploymentId = $document->getAttribute('deploymentId');\n+                $deployment = $this->dbForProject->getDocument('deployments', $deploymentId);\n+                $document->setAttribute('deploymentCreatedAt', $deployment->getCreatedAt());\n+\n+                $latestDeployment = $this->dbForProject->findOne('deployments', [\n+                    Query::orderDesc(),\n+                    Query::equal('resourceId', [$document->getId()]),\n+                    Query::equal('resourceType', ['functions']),\n+                ]);\n+\n+                $latestBuild = $this->dbForProject->getDocument('builds', $latestDeployment->getAttribute('buildId', ''));\n+\n+                $document",
        "comment_created_at": "2025-05-18T08:45:32+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Dereferencing a possibly null `$latestDeployment` causes a crash**\n\n`findOne()` may return `null`.  \nImmediately accessing `$latestDeployment->getAttribute('buildId', '')` will then throw a fatal error.\n\n```diff\n- $latestDeployment = $this->dbForProject->findOne('deployments', [ \u2026 ]);\n- $latestBuild = $this->dbForProject->getDocument('builds', $latestDeployment->getAttribute('buildId', ''));\n+ $latestDeployment = $this->dbForProject->findOne('deployments', [ \u2026 ]);\n+ if ($latestDeployment) {\n+     $latestBuild = $this->dbForProject->findOne('builds', [\n+         Query::equal('$id', [$latestDeployment->getAttribute('buildId', '')])\n+     ]) ?? new Document();\n+ } else {\n+     Console::warning(\"No deployment found for function {$document->getId()}\");\n+     $latestBuild = new Document();\n+ }\n```\n\nRepeat the null-check pattern wherever `findOne()` or `getDocument()` is used on non-guaranteed data.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Migration/Version/V22.php around lines 393 to 405, the code\ndereferences $latestDeployment without checking if it is null, which can cause a\nfatal error since findOne() may return null. Add a null check after retrieving\n$latestDeployment to ensure it is not null before calling getAttribute on it.\nApply similar null checks after calls to findOne() or getDocument() where the\nreturned data is not guaranteed to exist, to prevent crashes from dereferencing\nnull values.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2081556959",
    "pr_number": 9738,
    "pr_file": "src/Appwrite/Migration/Version/V23.php",
    "created_at": "2025-05-09T12:21:59+00:00",
    "commented_code": "Console::warning(\"'_key_roles' from {$id}: {$th->getMessage()}\");\n                     }\n                     break;\n+                case 'migrations':\n+                    $attributesToCreate = [\n+                        'options',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_resource_id');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_resource_id' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'functions':\n+                    $attributesToCreate = [\n+                        'deploymentId',\n+                        'deploymentCreatedAt',\n+                        'latestDeploymentId',\n+                        'latestDeploymentInternalId',\n+                        'latestDeploymentCreatedAt',\n+                        'latestDeploymentStatus',\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_deploymentId');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_deploymentId' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'deployments':\n+                    $attributesToCreate = [\n+                        'buildCommands',\n+                        'sourcePath',\n+                        'buildOutput',\n+                        'adapter',\n+                        'fallbackFile',\n+                        'sourceSize',\n+                        'sourceMetadata',\n+                        'sourceChunksTotal',\n+                        'sourceChunksUploaded',\n+                        'screenshotLight',\n+                        'screenshotDark',\n+                        'buildStartAt',\n+                        'buildEndAt',\n+                        'buildDuration',\n+                        'buildSize',\n+                        'status',\n+                        'buildPath',\n+                        'buildLogs',\n+                        'totalSize',\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $indexesToCreate = [\n+                        '_key_sourceSize',\n+                        '_key_buildSize',\n+                        '_key_totalSize',\n+                        '_key_buildDuration',\n+                        '_key_type',\n+                        '_key_status',\n+                    ];\n+                    foreach ($indexesToCreate as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->projectDB, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"'$index' from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'executions':\n+                    $attributesToCreate = [\n+                        'resourceInternalId',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_resource');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_resource' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'variables':\n+                    try {\n+                        $this->createAttributeFromCollection($this->projectDB, $id, 'secret');\n+                    } catch (\\Throwable $th) {\n+                        Console::warning(\"'secret' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+\n+                    break;\n+                default:\n+                    break;\n             }\n \n             usleep(50000);\n         }\n     }\n+\n+    /**\n+     * Fix run on each document\n+     *\n+     * @param Document $document\n+     * @return Document\n+     */\n+    protected function fixDocument(Document $document): Document\n+    {\n+        switch ($document->getCollection()) {\n+            case 'functions':\n+                /*\n+                    1. Convert \"deployment\" to \"deploymentId\"\n+                    --- Fetch activeDeployment from \"deploymentId\"\n+                    2. Fill \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    --- Fetch latestDeployment using find()\n+                    3. Fill latestDeploymentId with latestDeployment's \"$id\"\n+                    4. Fill latestDeploymentInternalId with latestDeployment's \"$internalId\"\n+                    5. Fill latestDeploymentCreatedAt with latestDeployment's \"$createdAt\"\n+                    6. Fill latestDeploymentStatus with latestDeployment's build's \"status\"\n+\n+                    (some deployment attributes needs dual writing from deployment's write action too)\n+                */\n+\n+                $document->setAttribute('deploymentId', $document->getAttribute('deployment'));\n+\n+                $deploymentId = $document->getAttribute('deploymentId');\n+                $deployment = Authorization::skip(fn () => $this->projectDB->getDocument('deployments', $deploymentId));\n+                $document->setAttribute('deploymentCreatedAt', $deployment->getCreatedAt());\n+\n+                $latestDeployments = Authorization::skip(fn () => $this->projectDB->find('deployments', [\n+                    Query::orderDesc(),\n+                    Query::limit(1),\n+                ]));\n+                $latestDeployment = $latestDeployments[0] ?? new Document();\n+                $latestBuild = Authorization::skip(fn () => $this->projectDB->getDocument('builds', $latestDeployment->getAttribute('buildId', '')));\n+                $document\n+                    ->setAttribute('latestDeploymentId', $latestDeployment->getId())\n+                    ->setAttribute('latestDeploymentInternalId', $latestDeployment->getInternalId())\n+                    ->setAttribute('latestDeploymentCreatedAt', $latestDeployment->getCreatedAt())\n+                    ->setAttribute('latestDeploymentStatus', $latestBuild->getAttribute('status'));\n+                break;\n+            case 'deployments':\n+                /*\n+                    --- Support for functions dual writing, if function's deploymentId is current deployment\n+                    1. Fill function's \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    --- Support for functions dual writing, if this is most recent deployment\n+                    2. Fill function's \"latestDeploymentId\" with deployment's \"$id\"\n+                    3. Fill function's \"latestDeploymentInternalId\" with deployment's \"$internalId\"\n+                    4. Fill function's \"latestDeploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    5. Fill function's \"latestDeploymentStatus\" with deployment's \"$status\"\n+                    --- Actual deployment dual write\n+                    6. Convert \"commands\" to \"buildCommands\"\n+                    7. Convert \"path\" to \"sourcePath\"\n+                    8. Convert \"size\" to \"sourceSize\"\n+                    9. Convert \"metadata\" to \"sourceMetadata\"\n+                    10. Convert \"chunksTotal\" to \"sourceChunksTotal\"\n+                    11. Convert \"chunksUploaded\" to \"sourceChunksUploaded\"\n+                    12. Convert build's \"startTime\" to \"buildStartAt\"\n+                    13. Convert build's \"endTime\" to \"buildEndAt\"\n+                    14. Convert build's \"duration\" to \"buildDuration\"\n+                    15. Convert build's \"size\" to \"buildSize\"\n+                    16. Convert build's \"status\" to \"status\"\n+                    17. Convert build's \"path\" to \"buildPath\"\n+                    18. Convert build's \"logs\" to \"buildLogs\"\n+                    19. Fill \"totalSize\" with \"buildSize\" plus \"sourceSize\"\n+                */\n+\n+                $function = Authorization::skip(fn () => $this->projectDB->getDocument('functions', $document->getAttribute('resourceId')));\n+                if (!$function->isEmpty()) {\n+                    $activeDeploymentId = $function->getAttribute('deployment', $function->getAttribute('deploymentId', ''));\n+                    if ($activeDeploymentId === $document->getId()) {\n+                        $function->setAttribute('deploymentCreatedAt', $document->getCreatedAt());\n+                        $function = Authorization::skip(fn () => $this->projectDB->updateDocument('functions', $function->getId(), $function));\n+                    } else {\n+                        $latestDeployments = Authorization::skip(fn () => $this->projectDB->find('deployments', [\n+                            Query::limit(1),\n+                            Query::equal('resourceType', ['functions']),\n+                            Query::equal('resourceId', [$function->getId()]),\n+                            Query::orderDesc()\n+                        ]));\n+                        $latestDeployment = $latestDeployments[0] ? $latestDeployments[0] : new Document();\n+",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2081556959",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9738,
        "pr_file": "src/Appwrite/Migration/Version/V23.php",
        "discussion_id": "2081556959",
        "commented_code": "@@ -61,9 +75,398 @@ private function migrateCollections(): void\n                         Console::warning(\"'_key_roles' from {$id}: {$th->getMessage()}\");\n                     }\n                     break;\n+                case 'migrations':\n+                    $attributesToCreate = [\n+                        'options',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_resource_id');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_resource_id' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'functions':\n+                    $attributesToCreate = [\n+                        'deploymentId',\n+                        'deploymentCreatedAt',\n+                        'latestDeploymentId',\n+                        'latestDeploymentInternalId',\n+                        'latestDeploymentCreatedAt',\n+                        'latestDeploymentStatus',\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_deploymentId');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_deploymentId' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'deployments':\n+                    $attributesToCreate = [\n+                        'buildCommands',\n+                        'sourcePath',\n+                        'buildOutput',\n+                        'adapter',\n+                        'fallbackFile',\n+                        'sourceSize',\n+                        'sourceMetadata',\n+                        'sourceChunksTotal',\n+                        'sourceChunksUploaded',\n+                        'screenshotLight',\n+                        'screenshotDark',\n+                        'buildStartAt',\n+                        'buildEndAt',\n+                        'buildDuration',\n+                        'buildSize',\n+                        'status',\n+                        'buildPath',\n+                        'buildLogs',\n+                        'totalSize',\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $indexesToCreate = [\n+                        '_key_sourceSize',\n+                        '_key_buildSize',\n+                        '_key_totalSize',\n+                        '_key_buildDuration',\n+                        '_key_type',\n+                        '_key_status',\n+                    ];\n+                    foreach ($indexesToCreate as $index) {\n+                        try {\n+                            $this->createIndexFromCollection($this->projectDB, $id, $index);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"'$index' from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'executions':\n+                    $attributesToCreate = [\n+                        'resourceInternalId',\n+                        'resourceId',\n+                        'resourceType'\n+                    ];\n+                    foreach ($attributesToCreate as $attribute) {\n+                        try {\n+                            $this->createAttributeFromCollection($this->projectDB, $id, $attribute);\n+                        } catch (\\Throwable $th) {\n+                            Console::warning(\"$attribute from {$id}: {$th->getMessage()}\");\n+                        }\n+                    }\n+\n+                    try {\n+                        $this->createIndexFromCollection($this->projectDB, $id, '_key_resource');\n+                    } catch (Throwable $th) {\n+                        Console::warning(\"'_key_resource' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+                    break;\n+                case 'variables':\n+                    try {\n+                        $this->createAttributeFromCollection($this->projectDB, $id, 'secret');\n+                    } catch (\\Throwable $th) {\n+                        Console::warning(\"'secret' from {$id}: {$th->getMessage()}\");\n+                    }\n+\n+                    $this->projectDB->purgeCachedCollection($id);\n+\n+                    break;\n+                default:\n+                    break;\n             }\n \n             usleep(50000);\n         }\n     }\n+\n+    /**\n+     * Fix run on each document\n+     *\n+     * @param Document $document\n+     * @return Document\n+     */\n+    protected function fixDocument(Document $document): Document\n+    {\n+        switch ($document->getCollection()) {\n+            case 'functions':\n+                /*\n+                    1. Convert \"deployment\" to \"deploymentId\"\n+                    --- Fetch activeDeployment from \"deploymentId\"\n+                    2. Fill \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    --- Fetch latestDeployment using find()\n+                    3. Fill latestDeploymentId with latestDeployment's \"$id\"\n+                    4. Fill latestDeploymentInternalId with latestDeployment's \"$internalId\"\n+                    5. Fill latestDeploymentCreatedAt with latestDeployment's \"$createdAt\"\n+                    6. Fill latestDeploymentStatus with latestDeployment's build's \"status\"\n+\n+                    (some deployment attributes needs dual writing from deployment's write action too)\n+                */\n+\n+                $document->setAttribute('deploymentId', $document->getAttribute('deployment'));\n+\n+                $deploymentId = $document->getAttribute('deploymentId');\n+                $deployment = Authorization::skip(fn () => $this->projectDB->getDocument('deployments', $deploymentId));\n+                $document->setAttribute('deploymentCreatedAt', $deployment->getCreatedAt());\n+\n+                $latestDeployments = Authorization::skip(fn () => $this->projectDB->find('deployments', [\n+                    Query::orderDesc(),\n+                    Query::limit(1),\n+                ]));\n+                $latestDeployment = $latestDeployments[0] ?? new Document();\n+                $latestBuild = Authorization::skip(fn () => $this->projectDB->getDocument('builds', $latestDeployment->getAttribute('buildId', '')));\n+                $document\n+                    ->setAttribute('latestDeploymentId', $latestDeployment->getId())\n+                    ->setAttribute('latestDeploymentInternalId', $latestDeployment->getInternalId())\n+                    ->setAttribute('latestDeploymentCreatedAt', $latestDeployment->getCreatedAt())\n+                    ->setAttribute('latestDeploymentStatus', $latestBuild->getAttribute('status'));\n+                break;\n+            case 'deployments':\n+                /*\n+                    --- Support for functions dual writing, if function's deploymentId is current deployment\n+                    1. Fill function's \"deploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    --- Support for functions dual writing, if this is most recent deployment\n+                    2. Fill function's \"latestDeploymentId\" with deployment's \"$id\"\n+                    3. Fill function's \"latestDeploymentInternalId\" with deployment's \"$internalId\"\n+                    4. Fill function's \"latestDeploymentCreatedAt\" with deployment's \"$createdAt\"\n+                    5. Fill function's \"latestDeploymentStatus\" with deployment's \"$status\"\n+                    --- Actual deployment dual write\n+                    6. Convert \"commands\" to \"buildCommands\"\n+                    7. Convert \"path\" to \"sourcePath\"\n+                    8. Convert \"size\" to \"sourceSize\"\n+                    9. Convert \"metadata\" to \"sourceMetadata\"\n+                    10. Convert \"chunksTotal\" to \"sourceChunksTotal\"\n+                    11. Convert \"chunksUploaded\" to \"sourceChunksUploaded\"\n+                    12. Convert build's \"startTime\" to \"buildStartAt\"\n+                    13. Convert build's \"endTime\" to \"buildEndAt\"\n+                    14. Convert build's \"duration\" to \"buildDuration\"\n+                    15. Convert build's \"size\" to \"buildSize\"\n+                    16. Convert build's \"status\" to \"status\"\n+                    17. Convert build's \"path\" to \"buildPath\"\n+                    18. Convert build's \"logs\" to \"buildLogs\"\n+                    19. Fill \"totalSize\" with \"buildSize\" plus \"sourceSize\"\n+                */\n+\n+                $function = Authorization::skip(fn () => $this->projectDB->getDocument('functions', $document->getAttribute('resourceId')));\n+                if (!$function->isEmpty()) {\n+                    $activeDeploymentId = $function->getAttribute('deployment', $function->getAttribute('deploymentId', ''));\n+                    if ($activeDeploymentId === $document->getId()) {\n+                        $function->setAttribute('deploymentCreatedAt', $document->getCreatedAt());\n+                        $function = Authorization::skip(fn () => $this->projectDB->updateDocument('functions', $function->getId(), $function));\n+                    } else {\n+                        $latestDeployments = Authorization::skip(fn () => $this->projectDB->find('deployments', [\n+                            Query::limit(1),\n+                            Query::equal('resourceType', ['functions']),\n+                            Query::equal('resourceId', [$function->getId()]),\n+                            Query::orderDesc()\n+                        ]));\n+                        $latestDeployment = $latestDeployments[0] ? $latestDeployments[0] : new Document();\n+",
        "comment_created_at": "2025-05-09T12:21:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Undefined-offset risk when fetching latest deployment**\n\n`$latestDeployments[0]` is accessed without verifying the array isn\u2019t empty.  \nAlthough this only emits a notice in PHP, it still pollutes logs and, under stricter error modes, can turn into an exception.\n\n```diff\n-$latestDeployment = $latestDeployments[0] ? $latestDeployments[0] : new Document();\n+/** @var Document|null $latestDeployment */\n+$latestDeployment = \\count($latestDeployments) ? $latestDeployments[0] : null;\n```\n\nFollow up with a null check before dereferencing to keep the code robust.\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits f91ec23 to a3cb7c8",
        "pr_file_module": null
      }
    ]
  }
]