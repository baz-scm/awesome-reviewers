[
  {
    "discussion_id": "2072814600",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Datetime/Update.php",
    "created_at": "2025-05-05T03:45:45+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Datetime;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateDatetimeColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(Action::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/datetime/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/datetime/:key')\n+            ->desc('Update dateTime column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].update')\n+            ->label('audits.event', 'column.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'updateDatetimeColumn',\n+                description: '/docs/references/databases/update-datetime-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814600",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Datetime/Update.php",
        "discussion_id": "2072814600",
        "commented_code": "@@ -0,0 +1,97 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Datetime;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Datetime as DatetimeValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Nullable;\n+\n+class Update extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'updateDatetimeColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(Action::HTTP_REQUEST_METHOD_PATCH)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/datetime/:key')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/datetime/:key')\n+            ->desc('Update dateTime column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].update')\n+            ->label('audits.event', 'column.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'updateDatetimeColumn',\n+                description: '/docs/references/databases/update-datetime-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))",
        "comment_created_at": "2025-05-05T03:45:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**SDK method documentation reference needs updating.**\n\nThe SDK method description still references the old terminology in the documentation path:\n`'/docs/references/databases/update-datetime-attribute.md'`\n\n\n```diff\n-                description: '/docs/references/databases/update-datetime-attribute.md',\n+                description: '/docs/references/databases/update-datetime-column.md',\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n            ->label('sdk', new Method(\n                namespace: 'databases',\n                group: 'columns',\n                name: 'updateDatetimeColumn',\n-               description: '/docs/references/databases/update-datetime-attribute.md',\n+               description: '/docs/references/databases/update-datetime-column.md',\n                auth: [AuthType::KEY],\n                responses: [\n                    new SDKResponse(\n                        code: SwooleResponse::STATUS_CODE_OK,\n                        model: UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n                    )\n                ],\n                contentType: ContentType::JSON\n            ))\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814606",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Enum/Create.php",
    "created_at": "2025-05-05T03:45:45+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Enum;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Create extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createEnumColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(Action::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/enum')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/enum')\n+            ->desc('Create enum column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].create')\n+            ->label('audits.event', 'column.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'createEnumColumn',\n+                description: '/docs/references/databases/create-attribute-enum.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_ACCEPTED,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+                    )\n+                ]",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814606",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/Enum/Create.php",
        "discussion_id": "2072814606",
        "commented_code": "@@ -0,0 +1,113 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Enum;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Columns\\Action as ColumnAction;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Create extends ColumnAction\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createEnumColumn';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(Action::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns/enum')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes/enum')\n+            ->desc('Create enum column')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].columns.[columnId].create')\n+            ->label('audits.event', 'column.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'createEnumColumn',\n+                description: '/docs/references/databases/create-attribute-enum.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_ACCEPTED,\n+                        model: UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+                    )\n+                ]",
        "comment_created_at": "2025-05-05T03:45:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**SDK method documentation reference needs updating.**\n\nThe SDK method description still references the old terminology in the documentation path:\n`'/docs/references/databases/create-attribute-enum.md'`\n\n\n```diff\n-                description: '/docs/references/databases/create-attribute-enum.md',\n+                description: '/docs/references/databases/create-column-enum.md',\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n                namespace: 'databases',\n                group: 'columns',\n                name: 'createEnumColumn',\n                description: '/docs/references/databases/create-column-enum.md',\n                auth: [AuthType::KEY],\n                responses: [\n                    new SDKResponse(\n                        code: SwooleResponse::STATUS_CODE_ACCEPTED,\n                        model: UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n                    )\n                ]\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077067156",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
    "created_at": "2025-05-07T08:15:00+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Columns;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'listColumns',\n+                description: '/docs/references/databases/list-attributes.md',\n+                auth: [AuthType::KEY],",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2077067156",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Columns/XList.php",
        "discussion_id": "2077067156",
        "commented_code": "@@ -0,0 +1,125 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Columns;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\Queries\\Columns;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Order as OrderException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Query\\Cursor;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class XList extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'listColumns';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/columns')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/attributes')\n+            ->desc('List columns')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'columns',\n+                name: 'listColumns',\n+                description: '/docs/references/databases/list-attributes.md',\n+                auth: [AuthType::KEY],",
        "comment_created_at": "2025-05-07T08:15:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Documentation URL still references attributes**\n\nThe SDK method description URL still points to the attributes documentation.\n\n```diff\n-                description: '/docs/references/databases/list-attributes.md',\n+                description: '/docs/references/databases/list-columns.md',\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n                description: '/docs/references/databases/list-columns.md',\n                auth: [AuthType::KEY],\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2144524218",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Documents/Bulk/Upsert.php",
    "created_at": "2025-06-13T08:50:19+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Bulk;\n+\n+use Appwrite\\Event\\StatsUsage;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Action;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Conflict as ConflictException;\n+use Utopia\\Database\\Exception\\Duplicate as DuplicateException;\n+use Utopia\\Database\\Exception\\Relationship as RelationshipException;\n+use Utopia\\Database\\Exception\\Structure as StructureException;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\JSON;\n+\n+class Upsert extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'upsertDocuments';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_DOCUMENT_LIST;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/documents')\n+            ->desc('Create or update documents')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'documents.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'document.create')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2144524218",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Documents/Bulk/Upsert.php",
        "discussion_id": "2144524218",
        "commented_code": "@@ -0,0 +1,140 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Bulk;\n+\n+use Appwrite\\Event\\StatsUsage;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Documents\\Action;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Conflict as ConflictException;\n+use Utopia\\Database\\Exception\\Duplicate as DuplicateException;\n+use Utopia\\Database\\Exception\\Relationship as RelationshipException;\n+use Utopia\\Database\\Exception\\Structure as StructureException;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\JSON;\n+\n+class Upsert extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'upsertDocuments';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_DOCUMENT_LIST;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/documents')\n+            ->desc('Create or update documents')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'documents.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'document.create')",
        "comment_created_at": "2025-06-13T08:50:19+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Audit label mis-represents the action**\n\n`audits.event` is hard-coded to `document.create`, but this endpoint both creates _and_ updates documents.  Consider emitting a composite label (`document.upsert`) or two separate events so audit logs stay semantically correct.\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Locate the Bulk Upsert endpoint implementation\nfile=$(fd Bulk/Upsert.php)\necho \"Found Upsert file: $file\"\n\n# Print the beginning of the file to inspect the docblock, method signature, and labels\nsed -n '1,200p' \"$file\"\n```\n\nLength of output: 141\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Search for all occurrences of the audits.event label in the src directory\nrg \"->label\\('audits\\.event'\" -n src\n```\n\nLength of output: 449\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# 1. Locate any Upsert.php files in the repo\nfd -e php Upsert\\.php\n\n# 2. Search for all occurrences of the audits.event label in PHP source files\nrg \"audits\\.event\" -n src\n```\n\nLength of output: 15307\n\n---\n\n```bash\n#!/bin/bash\n# Display the content around the label in the Bulk Upsert handler for documents\nsed -n '1,200p' src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Documents/Bulk/Upsert.php\n```\n\n---\n\n\n\n</details>\n\n**Update Bulk Documents Upsert Audit Label**  \n\nThe bulk\u2010upsert endpoint is currently labeled as a create event, but it handles both creations and updates. To stay consistent with single\u2010document upsert (`document.upsert`) and other bulk operations (e.g., `documents.update`, `documents.delete`), change the label to a composite plural form:\n\n\u2022 File: src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Documents/Bulk/Upsert.php  \n  Line: 48  \n\nDiff:\n```diff\n-   ->label('audits.event', 'document.create')\n+   ->label('audits.event', 'documents.upsert')\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n            ->label('audits.event', 'documents.upsert')\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Documents/Bulk/Upsert.php\nat line 48, the audit label is incorrectly hard-coded as 'document.create'\ndespite the endpoint handling both document creation and updates. Update the\nlabel to 'documents.upsert' to accurately reflect the composite action and\nmaintain consistency with other bulk operation labels.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156530427",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
    "created_at": "2025-06-19T09:10:41+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156530427",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php",
        "discussion_id": "2156530427",
        "commented_code": "@@ -0,0 +1,66 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Tables;\n+\n+use Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Update as CollectionUpdate;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Update extends CollectionUpdate\n+{\n+    public static function getName(): string\n+    {\n+        return 'updateTable';\n+    }\n+\n+    protected function getResponseModel(): string\n+    {\n+        return UtopiaResponse::MODEL_TABLE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_PUT)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId')\n+            ->desc('Update table')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].tables.[tableId].update')\n+            ->label('audits.event', 'table.update')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{request.tableId}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/update-collection.md',",
        "comment_created_at": "2025-06-19T09:10:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Update documentation reference for Tables API.**\n\nThe documentation reference should point to table-specific documentation instead of collection documentation.\n\n\n```diff\n-                description: '/docs/references/databases/update-collection.md',\n+                description: '/docs/references/databases/update-table.md',\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n                description: '/docs/references/databases/update-table.md',\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Databases/Http/Databases/Tables/Update.php at\nline 45, the documentation reference currently points to the collections update\ndocumentation. Update the 'description' field to reference the correct tables\nupdate documentation URL to ensure it matches the Tables API context.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136864289",
    "pr_number": 9986,
    "pr_file": "app/controllers/api/databases.php",
    "created_at": "2025-06-10T03:59:41+00:00",
    "commented_code": "$response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2136864289",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9986,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "2136864289",
        "commented_code": "@@ -4462,6 +4464,160 @@ function updateAttribute(\n         $response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')",
        "comment_created_at": "2025-06-10T03:59:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Correct parameter description.**\n\nThe parameter description incorrectly says 'Document ID.' when it should describe the attribute key.\n\nApply this diff:\n\n```diff\n-    ->param('attribute', '', new Key(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Attribute key.')\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n    ->param('attribute', '', new Key(), 'Attribute key.')\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/databases.php at line 4495, the parameter description for\n'attribute' is incorrect as it says 'Document ID.' Update the description to\naccurately reflect that this parameter represents the attribute key by changing\nthe description text accordingly.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136864296",
    "pr_number": 9986,
    "pr_file": "app/controllers/api/databases.php",
    "created_at": "2025-06-10T03:59:41+00:00",
    "commented_code": "$response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')\n+    ->param('value', 1, new Numeric(), 'Value to increment the attribute by. The value must be a number.', true)\n+    ->param('max', null, new Numeric(), 'Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.', true)\n+    ->inject('response')\n+    ->inject('dbForProject')\n+    ->inject('queueForEvents')\n+    ->inject('queueForStatsUsage')\n+    ->action(function (string $databaseId, string $collectionId, string $documentId, string $attribute, int|float $value, int|float|null $max, Response $response, Database $dbForProject, Event $queueForEvents, StatsUsage $queueForStatsUsage) {\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        try {\n+            $document = $dbForProject->increaseDocumentAttribute(\n+                collection: 'database_' . $database->getSequence() . '_collection_' . $collection->getSequence(),\n+                id: $documentId,\n+                attribute: $attribute,\n+                value: $value,\n+                max: $max\n+            );\n+        } catch (ConflictException) {\n+            throw new Exception(Exception::DOCUMENT_UPDATE_CONFLICT);\n+        } catch (NotFoundException) {\n+            throw new Exception(Exception::ATTRIBUTE_NOT_FOUND);\n+        } catch (LimitException) {\n+            throw new Exception(Exception::ATTRIBUTE_LIMIT_EXCEEDED, 'Attribute `' . $attribute . '` has reached the maximum value of ' . $max);\n+        } catch (TypeException) {\n+            throw new Exception(Exception::ATTRIBUTE_TYPE_INVALID, 'Attribute `' . $attribute . '` is not a number');\n+        }\n+\n+        $queueForStatsUsage\n+            ->addMetric(METRIC_DATABASES_OPERATIONS_WRITES, 1)\n+            ->addMetric(str_replace('{databaseInternalId}', $database->getSequence(), METRIC_DATABASE_ID_OPERATIONS_WRITES), 1);\n+\n+        $queueForEvents\n+            ->setParam('databaseId', $databaseId)\n+            ->setParam('collectionId', $collectionId)\n+            ->setContext('collection', $collection)\n+            ->setContext('database', $database);\n+\n+        $response->dynamic($document, Response::MODEL_DOCUMENT);\n+    });\n+\n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/decrement')\n+    ->desc('Decrement document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].decrement')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.decrement')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'decrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2136864296",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9986,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "2136864296",
        "commented_code": "@@ -4462,6 +4464,160 @@ function updateAttribute(\n         $response->dynamic($document, Response::MODEL_DOCUMENT);\n     });\n \n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/increment')\n+    ->desc('Increment document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].upsert')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.increment')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'incrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',\n+        auth: [AuthType::KEY, AuthType::SESSION, AuthType::JWT],\n+        responses: [\n+            new SDKResponse(\n+                code: Response::STATUS_CODE_OK,\n+                model: Response::MODEL_DOCUMENT,\n+            )\n+        ],\n+        contentType: ContentType::JSON\n+    ))\n+    ->param('databaseId', '', new UID(), 'Database ID.')\n+    ->param('collectionId', '', new UID(), 'Collection ID.')\n+    ->param('documentId', '', new UID(), 'Document ID.')\n+    ->param('attribute', '', new Key(), 'Document ID.')\n+    ->param('value', 1, new Numeric(), 'Value to increment the attribute by. The value must be a number.', true)\n+    ->param('max', null, new Numeric(), 'Maximum value for the attribute. If the current value is greater than this value, an error will be thrown.', true)\n+    ->inject('response')\n+    ->inject('dbForProject')\n+    ->inject('queueForEvents')\n+    ->inject('queueForStatsUsage')\n+    ->action(function (string $databaseId, string $collectionId, string $documentId, string $attribute, int|float $value, int|float|null $max, Response $response, Database $dbForProject, Event $queueForEvents, StatsUsage $queueForStatsUsage) {\n+        $database = $dbForProject->getDocument('databases', $databaseId);\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }\n+\n+        try {\n+            $document = $dbForProject->increaseDocumentAttribute(\n+                collection: 'database_' . $database->getSequence() . '_collection_' . $collection->getSequence(),\n+                id: $documentId,\n+                attribute: $attribute,\n+                value: $value,\n+                max: $max\n+            );\n+        } catch (ConflictException) {\n+            throw new Exception(Exception::DOCUMENT_UPDATE_CONFLICT);\n+        } catch (NotFoundException) {\n+            throw new Exception(Exception::ATTRIBUTE_NOT_FOUND);\n+        } catch (LimitException) {\n+            throw new Exception(Exception::ATTRIBUTE_LIMIT_EXCEEDED, 'Attribute `' . $attribute . '` has reached the maximum value of ' . $max);\n+        } catch (TypeException) {\n+            throw new Exception(Exception::ATTRIBUTE_TYPE_INVALID, 'Attribute `' . $attribute . '` is not a number');\n+        }\n+\n+        $queueForStatsUsage\n+            ->addMetric(METRIC_DATABASES_OPERATIONS_WRITES, 1)\n+            ->addMetric(str_replace('{databaseInternalId}', $database->getSequence(), METRIC_DATABASE_ID_OPERATIONS_WRITES), 1);\n+\n+        $queueForEvents\n+            ->setParam('databaseId', $databaseId)\n+            ->setParam('collectionId', $collectionId)\n+            ->setContext('collection', $collection)\n+            ->setContext('database', $database);\n+\n+        $response->dynamic($document, Response::MODEL_DOCUMENT);\n+    });\n+\n+App::patch('/v1/databases/:databaseId/collections/:collectionId/documents/:documentId/:key/decrement')\n+    ->desc('Decrement document attribute')\n+    ->groups(['api', 'database'])\n+    ->label('event', 'databases.[databaseId].collections.[collectionId].documents.[documentId].decrement')\n+    ->label('scope', 'documents.write')\n+    ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+    ->label('audits.event', 'documents.decrement')\n+    ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+    ->label('abuse-key', 'ip:{ip},method:{method},url:{url},userId:{userId}')\n+    ->label('abuse-limit', APP_LIMIT_WRITE_RATE_DEFAULT * 2)\n+    ->label('abuse-time', APP_LIMIT_WRITE_RATE_PERIOD_DEFAULT)\n+    ->label('sdk', new Method(\n+        namespace: 'databases',\n+        group: 'documents',\n+        name: 'decrementDocumentAttribute',\n+        description: '/docs/references/databases/increment-document-attribute.md',",
        "comment_created_at": "2025-06-10T03:59:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Update documentation path for decrement endpoint.**\n\nThe documentation path appears to reference increment instead of decrement functionality.\n\nApply this diff:\n\n```diff\n-        description: '/docs/references/databases/increment-document-attribute.md',\n+        description: '/docs/references/databases/decrement-document-attribute.md',\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        description: '/docs/references/databases/decrement-document-attribute.md',\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/databases.php at line 4559, the documentation path\ncurrently points to the increment-document-attribute.md file, which is incorrect\nfor the decrement endpoint. Update the description path to reference the correct\ndocumentation file for the decrement functionality, such as\ndecrement-document-attribute.md, to ensure accurate documentation linkage.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]