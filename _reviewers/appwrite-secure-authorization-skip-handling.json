[
  {
    "discussion_id": "2072814609",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Create.php",
    "created_at": "2025-05-05T03:45:45+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\CustomId;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Duplicate as DuplicateException;\n+use Utopia\\Database\\Exception\\Limit as LimitException;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Create extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createTable';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('Create table')\n+            ->groups(['api', 'database'])\n+            ->label('event', 'databases.[databaseId].tables.[tableId].create')\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'table.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{response.$id}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'createTable',\n+                description: '/docs/references/databases/create-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_CREATED,\n+                        model: UtopiaResponse::MODEL_COLLECTION,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new CustomId(), 'Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars.')\n+            ->param('name', '', new Text(128), 'Table name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('documentSecurity', false, new Boolean(true), 'Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('enabled', true, new Boolean(), 'Is collection enabled? When set to \\'disabled\\', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForEvents')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, string $name, ?array $permissions, bool $documentSecurity, bool $enabled, UtopiaResponse $response, Database $dbForProject, Event $queueForEvents): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $tableId = $tableId === 'unique()' ? ID::unique() : $tableId;",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814609",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Tables/Create.php",
        "discussion_id": "2072814609",
        "commented_code": "@@ -0,0 +1,116 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Tables;\n+\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Database\\Validator\\CustomId;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Duplicate as DuplicateException;\n+use Utopia\\Database\\Exception\\Limit as LimitException;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\Database\\Helpers\\Permission;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Permissions;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\Boolean;\n+use Utopia\\Validator\\Text;\n+\n+class Create extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'createTable';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_POST)\n+            ->setHttpPath('/v1/databases/:databaseId/tables')\n+            ->httpAlias('/v1/databases/:databaseId/collections')\n+            ->desc('Create table')\n+            ->groups(['api', 'database'])\n+            ->label('event', 'databases.[databaseId].tables.[tableId].create')\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('audits.event', 'table.create')\n+            ->label('audits.resource', 'database/{request.databaseId}/table/{response.$id}')\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'tables',\n+                name: 'createTable',\n+                description: '/docs/references/databases/create-collection.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_CREATED,\n+                        model: UtopiaResponse::MODEL_COLLECTION,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new CustomId(), 'Unique Id. Choose a custom ID or generate a random ID with `ID.unique()`. Valid chars are a-z, A-Z, 0-9, period, hyphen, and underscore. Can\\'t start with a special char. Max length is 36 chars.')\n+            ->param('name', '', new Text(128), 'Table name. Max length: 128 chars.')\n+            ->param('permissions', null, new Permissions(APP_LIMIT_ARRAY_PARAMS_SIZE), 'An array of permissions strings. By default, no user is granted with any permissions. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('documentSecurity', false, new Boolean(true), 'Enables configuring permissions for individual documents. A user needs one of document or collection level permissions to access a document. [Learn more about permissions](https://appwrite.io/docs/permissions).', true)\n+            ->param('enabled', true, new Boolean(), 'Is collection enabled? When set to \\'disabled\\', users cannot access the collection but Server SDKs with and API key can still read and write to the collection. No data is lost when this is toggled.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForEvents')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, string $name, ?array $permissions, bool $documentSecurity, bool $enabled, UtopiaResponse $response, Database $dbForProject, Event $queueForEvents): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $tableId = $tableId === 'unique()' ? ID::unique() : $tableId;",
        "comment_created_at": "2025-05-05T03:45:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Do not bypass authorization when verifying the parent database**  \nCalling `Authorization::skip()` lets any caller confirm the existence of a database even when they have no read-permission, which is an information-disclosure vulnerability.  \nRetrieve the database inside the normal authorisation context and rely on the DB layer to raise `AuthorizationException`; convert that to `USER_UNAUTHORIZED` (or a similar public error) if you need to hide the precise reason.\n\n```diff\n-        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        $database = $dbForProject->getDocument('databases', $databaseId); // honours ACLs\n+\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072814611",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Rows/Get.php",
    "created_at": "2025-05-05T03:45:46+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Rows;\n+\n+use Appwrite\\Auth\\Auth;\n+use Appwrite\\Event\\StatsUsage;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Authorization as AuthorizationException;\n+use Utopia\\Database\\Exception\\Query as QueryException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Text;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getRow';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/rows/:rowId')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/documents/:rowId')\n+            ->desc('Get row')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'documents.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'rows',\n+                name: 'getRow',\n+                description: '/docs/references/databases/get-document.md',\n+                auth: [AuthType::SESSION, AuthType::KEY, AuthType::JWT],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_DOCUMENT,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).')\n+            ->param('rowId', '', new UID(), 'Row ID.')\n+            ->param('queries', [], new ArrayList(new Text(APP_LIMIT_ARRAY_ELEMENT_SIZE), APP_LIMIT_ARRAY_PARAMS_SIZE), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForStatsUsage')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, string $rowId, array $queries, UtopiaResponse $response, Database $dbForProject, StatsUsage $queueForStatsUsage): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        $isAPIKey = Auth::isAppUser(Authorization::getRoles());\n+        $isPrivilegedUser = Auth::isPrivilegedUser(Authorization::getRoles());\n+\n+        if ($database->isEmpty() || (!$database->getAttribute('enabled', false) && !$isAPIKey && !$isPrivilegedUser)) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = Authorization::skip(fn () => $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId));\n+\n+        if ($table->isEmpty() || (!$table->getAttribute('enabled', false) && !$isAPIKey && !$isPrivilegedUser)) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2072814611",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Rows/Get.php",
        "discussion_id": "2072814611",
        "commented_code": "@@ -0,0 +1,154 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Rows;\n+\n+use Appwrite\\Auth\\Auth;\n+use Appwrite\\Event\\StatsUsage;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Document;\n+use Utopia\\Database\\Exception\\Authorization as AuthorizationException;\n+use Utopia\\Database\\Exception\\Query as QueryException;\n+use Utopia\\Database\\Query;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Action;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+use Utopia\\Validator\\ArrayList;\n+use Utopia\\Validator\\Text;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getRow';\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/tables/:tableId/rows/:rowId')\n+            ->httpAlias('/v1/databases/:databaseId/collections/:tableId/documents/:rowId')\n+            ->desc('Get row')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'documents.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: 'databases',\n+                group: 'rows',\n+                name: 'getRow',\n+                description: '/docs/references/databases/get-document.md',\n+                auth: [AuthType::SESSION, AuthType::KEY, AuthType::JWT],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: UtopiaResponse::MODEL_DOCUMENT,\n+                    )\n+                ],\n+                contentType: ContentType::JSON\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('tableId', '', new UID(), 'Table ID. You can create a new table using the Database service [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection).')\n+            ->param('rowId', '', new UID(), 'Row ID.')\n+            ->param('queries', [], new ArrayList(new Text(APP_LIMIT_ARRAY_ELEMENT_SIZE), APP_LIMIT_ARRAY_PARAMS_SIZE), 'Array of query strings generated using the Query class provided by the SDK. [Learn more about queries](https://appwrite.io/docs/queries). Maximum of ' . APP_LIMIT_ARRAY_PARAMS_SIZE . ' queries are allowed, each ' . APP_LIMIT_ARRAY_ELEMENT_SIZE . ' characters long.', true)\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForStatsUsage')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $tableId, string $rowId, array $queries, UtopiaResponse $response, Database $dbForProject, StatsUsage $queueForStatsUsage): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        $isAPIKey = Auth::isAppUser(Authorization::getRoles());\n+        $isPrivilegedUser = Auth::isPrivilegedUser(Authorization::getRoles());\n+\n+        if ($database->isEmpty() || (!$database->getAttribute('enabled', false) && !$isAPIKey && !$isPrivilegedUser)) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $table = Authorization::skip(fn () => $dbForProject->getDocument('database_' . $database->getInternalId(), $tableId));\n+\n+        if ($table->isEmpty() || (!$table->getAttribute('enabled', false) && !$isAPIKey && !$isPrivilegedUser)) {\n+            throw new Exception(Exception::COLLECTION_NOT_FOUND);\n+        }",
        "comment_created_at": "2025-05-05T03:45:46+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Potential enumeration via `Authorization::skip()`**  \nBy bypassing ACLs when fetching the database and table metadata, an attacker can probe whether a DB/table exists even without permission.  \nFetch these documents under normal ACL checks and return `USER_UNAUTHORIZED` (403) rather than 404 when access is denied.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2079877336",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Get.php",
    "created_at": "2025-05-08T14:50:55+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return [\n+            UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN,\n+            UtopiaResponse::MODEL_ATTRIBUTE_INTEGER,\n+            UtopiaResponse::MODEL_ATTRIBUTE_FLOAT,\n+            UtopiaResponse::MODEL_ATTRIBUTE_EMAIL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+            UtopiaResponse::MODEL_ATTRIBUTE_URL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_IP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+            UtopiaResponse::MODEL_ATTRIBUTE_RELATIONSHIP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_STRING,\n+        ];\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Get attribute')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/get-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: $this->getResponseModel()\n+                    )\n+                ]\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getInternalId(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }\n+\n+        $attribute = $dbForProject->getDocument('attributes', $database->getInternalId() . '_' . $collection->getInternalId() . '_' . $key);\n+        if ($attribute->isEmpty()) {\n+            throw new Exception($this->getNotFoundException());\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2079877336",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Get.php",
        "discussion_id": "2079877336",
        "commented_code": "@@ -0,0 +1,99 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Platform\\Scope\\HTTP;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Get extends Action\n+{\n+    use HTTP;\n+\n+    public static function getName(): string\n+    {\n+        return 'getAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return [\n+            UtopiaResponse::MODEL_ATTRIBUTE_BOOLEAN,\n+            UtopiaResponse::MODEL_ATTRIBUTE_INTEGER,\n+            UtopiaResponse::MODEL_ATTRIBUTE_FLOAT,\n+            UtopiaResponse::MODEL_ATTRIBUTE_EMAIL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_ENUM,\n+            UtopiaResponse::MODEL_ATTRIBUTE_URL,\n+            UtopiaResponse::MODEL_ATTRIBUTE_IP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_DATETIME,\n+            UtopiaResponse::MODEL_ATTRIBUTE_RELATIONSHIP,\n+            UtopiaResponse::MODEL_ATTRIBUTE_STRING,\n+        ];\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_GET)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Get attribute')\n+            ->groups(['api', 'database'])\n+            ->label('scope', 'collections.read')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/get-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_OK,\n+                        model: $this->getResponseModel()\n+                    )\n+                ]\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->callback([$this, 'action']);\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject): void\n+    {\n+        $database = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($database->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $database->getInternalId(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }\n+\n+        $attribute = $dbForProject->getDocument('attributes', $database->getInternalId() . '_' . $collection->getInternalId() . '_' . $key);\n+        if ($attribute->isEmpty()) {\n+            throw new Exception($this->getNotFoundException());\n+        }",
        "comment_created_at": "2025-05-08T14:50:55+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Missing `Authorization::skip()` will break attribute retrieval for every non-privileged caller**\n\n`attributes` is an internal collection with no read permissions for end-users.  \nFetching the document without wrapping it in `Authorization::skip()` will cause the call to silently fail with an empty `Document`, which is then converted to *\u201cattribute not found\u201d* \u2013 even though the attribute exists and the caller has permission on the parent collection.\n\n```diff\n-        $attribute = $dbForProject->getDocument('attributes', $database->getInternalId() . '_' . $collection->getInternalId() . '_' . $key);\n+        $attribute = Authorization::skip(\n+            fn () => $dbForProject\n+                ->getDocument(\n+                    'attributes',\n+                    $database->getInternalId() . '_' . $collection->getInternalId() . '_' . $key\n+                )\n+        );\n```\n\nWithout this change every request to `GET /attributes/:key` will return `404`.  \nPlease wrap the call (and any future internal reads) in `Authorization::skip()`.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156565403",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php",
    "created_at": "2025-06-19T09:28:05+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\IndexDependency as IndexDependencyValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    public static function getName(): string\n+    {\n+        return 'deleteAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_NONE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Delete attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].attributes.[attributeId].update')\n+            ->label('audits.event', 'attribute.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/delete-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback($this->action(...));\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $db = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($db->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $db->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156565403",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php",
        "discussion_id": "2156565403",
        "commented_code": "@@ -0,0 +1,154 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\IndexDependency as IndexDependencyValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    public static function getName(): string\n+    {\n+        return 'deleteAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_NONE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Delete attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].attributes.[attributeId].update')\n+            ->label('audits.event', 'attribute.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/delete-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback($this->action(...));\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $db = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($db->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $db->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }",
        "comment_created_at": "2025-06-19T09:28:05+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Wrap collection fetch in `Authorization::skip()`**\n\n`database_<sequence>` is an internal store; end-users lack read ACLs. Without `Authorization::skip()` the query will silently fail for non-privileged callers, returning 404.\n\n\n```diff\n-        $collection = $dbForProject->getDocument('database_' . $db->getSequence(), $collectionId);\n+        $collection = Authorization::skip(\n+            fn () => $dbForProject->getDocument(\n+                'database_' . $db->getSequence(),\n+                $collectionId\n+            )\n+        );\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        $collection = Authorization::skip(\n            fn () => $dbForProject->getDocument(\n                'database_' . $db->getSequence(),\n                $collectionId\n            )\n        );\n        if ($collection->isEmpty()) {\n            throw new Exception($this->getParentNotFoundException());\n        }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php\naround lines 75 to 78, the collection fetch is done without bypassing\nauthorization, causing silent failures for users without read ACLs. Wrap the\ncall to getDocument inside Authorization::skip() to bypass ACL checks for this\ninternal database access, ensuring the collection fetch does not fail silently\nfor non-privileged callers.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156565411",
    "pr_number": 9693,
    "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php",
    "created_at": "2025-06-19T09:28:05+00:00",
    "commented_code": "+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\IndexDependency as IndexDependencyValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    public static function getName(): string\n+    {\n+        return 'deleteAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_NONE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Delete attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].attributes.[attributeId].update')\n+            ->label('audits.event', 'attribute.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/delete-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback($this->action(...));\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $db = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($db->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $db->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }\n+\n+        $attribute = $dbForProject->getDocument('attributes', $db->getSequence() . '_' . $collection->getSequence() . '_' . $key);\n+        if ($attribute->isEmpty()) {\n+            throw new Exception($this->getNotFoundException());\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2156565411",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9693,
        "pr_file": "src/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php",
        "discussion_id": "2156565411",
        "commented_code": "@@ -0,0 +1,154 @@\n+<?php\n+\n+namespace Appwrite\\Platform\\Modules\\Databases\\Http\\Databases\\Collections\\Attributes;\n+\n+use Appwrite\\Event\\Database as EventDatabase;\n+use Appwrite\\Event\\Event;\n+use Appwrite\\Extend\\Exception;\n+use Appwrite\\SDK\\AuthType;\n+use Appwrite\\SDK\\ContentType;\n+use Appwrite\\SDK\\Method;\n+use Appwrite\\SDK\\Response as SDKResponse;\n+use Appwrite\\Utopia\\Response as UtopiaResponse;\n+use Utopia\\Database\\Database;\n+use Utopia\\Database\\Validator\\Authorization;\n+use Utopia\\Database\\Validator\\IndexDependency as IndexDependencyValidator;\n+use Utopia\\Database\\Validator\\Key;\n+use Utopia\\Database\\Validator\\UID;\n+use Utopia\\Swoole\\Response as SwooleResponse;\n+\n+class Delete extends Action\n+{\n+    public static function getName(): string\n+    {\n+        return 'deleteAttribute';\n+    }\n+\n+    protected function getResponseModel(): string|array\n+    {\n+        return UtopiaResponse::MODEL_NONE;\n+    }\n+\n+    public function __construct()\n+    {\n+        $this\n+            ->setHttpMethod(self::HTTP_REQUEST_METHOD_DELETE)\n+            ->setHttpPath('/v1/databases/:databaseId/collections/:collectionId/attributes/:key')\n+            ->desc('Delete attribute')\n+            ->groups(['api', 'database', 'schema'])\n+            ->label('scope', 'collections.write')\n+            ->label('resourceType', RESOURCE_TYPE_DATABASES)\n+            ->label('event', 'databases.[databaseId].collections.[collectionId].attributes.[attributeId].update')\n+            ->label('audits.event', 'attribute.delete')\n+            ->label('audits.resource', 'database/{request.databaseId}/collection/{request.collectionId}')\n+            ->label('sdk', new Method(\n+                namespace: $this->getSdkNamespace(),\n+                group: $this->getSdkGroup(),\n+                name: self::getName(),\n+                description: '/docs/references/databases/delete-attribute.md',\n+                auth: [AuthType::KEY],\n+                responses: [\n+                    new SDKResponse(\n+                        code: SwooleResponse::STATUS_CODE_NOCONTENT,\n+                        model: UtopiaResponse::MODEL_NONE,\n+                    )\n+                ],\n+                contentType: ContentType::NONE\n+            ))\n+            ->param('databaseId', '', new UID(), 'Database ID.')\n+            ->param('collectionId', '', new UID(), 'Collection ID.')\n+            ->param('key', '', new Key(), 'Attribute Key.')\n+            ->inject('response')\n+            ->inject('dbForProject')\n+            ->inject('queueForDatabase')\n+            ->inject('queueForEvents')\n+            ->callback($this->action(...));\n+    }\n+\n+    public function action(string $databaseId, string $collectionId, string $key, UtopiaResponse $response, Database $dbForProject, EventDatabase $queueForDatabase, Event $queueForEvents): void\n+    {\n+        $db = Authorization::skip(fn () => $dbForProject->getDocument('databases', $databaseId));\n+        if ($db->isEmpty()) {\n+            throw new Exception(Exception::DATABASE_NOT_FOUND);\n+        }\n+\n+        $collection = $dbForProject->getDocument('database_' . $db->getSequence(), $collectionId);\n+        if ($collection->isEmpty()) {\n+            throw new Exception($this->getParentNotFoundException());\n+        }\n+\n+        $attribute = $dbForProject->getDocument('attributes', $db->getSequence() . '_' . $collection->getSequence() . '_' . $key);\n+        if ($attribute->isEmpty()) {\n+            throw new Exception($this->getNotFoundException());\n+        }",
        "comment_created_at": "2025-06-19T09:28:05+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Missing `Authorization::skip()` will break attribute retrieval for every non-privileged caller**\n\n`attributes` is an internal collection with no read permissions for end-users. Without this wrapper, the deletion endpoint will return 404 even when the attribute exists and the caller has proper permissions.\n\n\n```diff\n-        $attribute = $dbForProject->getDocument('attributes', $db->getSequence() . '_' . $collection->getSequence() . '_' . $key);\n+        $attribute = Authorization::skip(\n+            fn () => $dbForProject\n+                ->getDocument(\n+                    'attributes',\n+                    $db->getSequence() . '_' . $collection->getSequence() . '_' . $key\n+                )\n+        );\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        $attribute = Authorization::skip(\n            fn () => $dbForProject\n                ->getDocument(\n                    'attributes',\n                    $db->getSequence() . '_' . $collection->getSequence() . '_' . $key\n                )\n        );\n        if ($attribute->isEmpty()) {\n            throw new Exception($this->getNotFoundException());\n        }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\nsrc/Appwrite/Platform/Modules/Databases/Http/Databases/Collections/Attributes/Delete.php\naround lines 80 to 83, the code retrieves an attribute from an internal\ncollection without skipping authorization checks, causing 404 errors for\nnon-privileged users. To fix this, wrap the attribute retrieval call with\nAuthorization::skip() to bypass permission checks for this internal collection,\nensuring the attribute can be accessed correctly when it exists.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094519288",
    "pr_number": 9649,
    "pr_file": "app/controllers/shared/api.php",
    "created_at": "2025-05-18T13:06:35+00:00",
    "commented_code": "$bucketId = $parts[1] ?? null;\n                     $bucket = Authorization::skip(fn () => $dbForProject->getDocument('buckets', $bucketId));\n \n+                    $isToken = !$resourceToken->isEmpty() && $resourceToken->getAttribute('bucketInternalId') === $bucket->getInternalId();\n+                    $isAPIKey = Auth::isAppUser(Authorization::getRoles());\n+                    $isPrivilegedUser = Auth::isPrivilegedUser(Authorization::getRoles());\n+\n                     if ($bucket->isEmpty() || (!$bucket->getAttribute('enabled') && !$isAppUser && !$isPrivilegedUser)) {\n                         throw new Exception(Exception::STORAGE_BUCKET_NOT_FOUND);\n                     }\n \n                     $fileSecurity = $bucket->getAttribute('fileSecurity', false);\n                     $validator = new Authorization(Database::PERMISSION_READ);\n                     $valid = $validator->isValid($bucket->getRead());\n-\n-                    if (!$fileSecurity && !$valid) {\n+                    if (!$fileSecurity && !$valid && !$isToken) {\n                         throw new Exception(Exception::USER_UNAUTHORIZED);\n                     }\n \n                     $parts = explode('/', $cacheLog->getAttribute('resource'));\n                     $fileId = $parts[1] ?? null;\n \n-                    if ($fileSecurity && !$valid) {\n+                    if ($fileSecurity && !$valid && !$isToken) {\n                         $file = $dbForProject->getDocument('bucket_' . $bucket->getInternalId(), $fileId);\n                     } else {\n                         $file = Authorization::skip(fn () => $dbForProject->getDocument('bucket_' . $bucket->getInternalId(), $fileId));\n                     }\n \n+                    if (!$resourceToken->isEmpty() && $resourceToken->getAttribute('fileInternalId') !== $file->getInternalId()) {\n+                        throw new Exception(Exception::USER_UNAUTHORIZED);\n+                    }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094519288",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9649,
        "pr_file": "app/controllers/shared/api.php",
        "discussion_id": "2094519288",
        "commented_code": "@@ -543,27 +574,34 @@\n                     $bucketId = $parts[1] ?? null;\n                     $bucket = Authorization::skip(fn () => $dbForProject->getDocument('buckets', $bucketId));\n \n+                    $isToken = !$resourceToken->isEmpty() && $resourceToken->getAttribute('bucketInternalId') === $bucket->getInternalId();\n+                    $isAPIKey = Auth::isAppUser(Authorization::getRoles());\n+                    $isPrivilegedUser = Auth::isPrivilegedUser(Authorization::getRoles());\n+\n                     if ($bucket->isEmpty() || (!$bucket->getAttribute('enabled') && !$isAppUser && !$isPrivilegedUser)) {\n                         throw new Exception(Exception::STORAGE_BUCKET_NOT_FOUND);\n                     }\n \n                     $fileSecurity = $bucket->getAttribute('fileSecurity', false);\n                     $validator = new Authorization(Database::PERMISSION_READ);\n                     $valid = $validator->isValid($bucket->getRead());\n-\n-                    if (!$fileSecurity && !$valid) {\n+                    if (!$fileSecurity && !$valid && !$isToken) {\n                         throw new Exception(Exception::USER_UNAUTHORIZED);\n                     }\n \n                     $parts = explode('/', $cacheLog->getAttribute('resource'));\n                     $fileId = $parts[1] ?? null;\n \n-                    if ($fileSecurity && !$valid) {\n+                    if ($fileSecurity && !$valid && !$isToken) {\n                         $file = $dbForProject->getDocument('bucket_' . $bucket->getInternalId(), $fileId);\n                     } else {\n                         $file = Authorization::skip(fn () => $dbForProject->getDocument('bucket_' . $bucket->getInternalId(), $fileId));\n                     }\n \n+                    if (!$resourceToken->isEmpty() && $resourceToken->getAttribute('fileInternalId') !== $file->getInternalId()) {\n+                        throw new Exception(Exception::USER_UNAUTHORIZED);\n+                    }",
        "comment_created_at": "2025-05-18T13:06:35+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Bucket-level resource tokens accidentally blocked**\n\nWhen a bucket-level `resourceToken` is supplied it has no `fileInternalId`.  \nThe new guard:\n\n```php\nif (!$resourceToken->isEmpty() && $resourceToken->getAttribute('fileInternalId') !== $file->getInternalId()) {\n    throw new Exception(Exception::USER_UNAUTHORIZED);\n}\n```\n\nrejects the request because `null !== <fileId>`.  \nUpdate the condition to allow bucket-scoped tokens:\n\n```diff\n-if (!$resourceToken->isEmpty() && $resourceToken->getAttribute('fileInternalId') !== $file->getInternalId()) {\n+if (\n+    !$resourceToken->isEmpty() &&\n+    ($resourceToken->getAttribute('fileInternalId') ?? $file->getInternalId()) !== $file->getInternalId()\n+) {\n     throw new Exception(Exception::USER_UNAUTHORIZED);\n }\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/shared/api.php around lines 577 to 603, the condition that\nchecks if the resourceToken's fileInternalId matches the file's internalId\nincorrectly blocks bucket-level tokens because these tokens lack a\nfileInternalId attribute. Modify the condition to only perform the\nfileInternalId check if the resourceToken's fileInternalId attribute is set; if\nit is null or not present (indicating a bucket-level token), allow the request\nto proceed without throwing an exception.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]