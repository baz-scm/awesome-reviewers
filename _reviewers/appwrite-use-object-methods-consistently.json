[
  {
    "discussion_id": "2217777381",
    "pr_number": 10170,
    "pr_file": "app/controllers/api/account.php",
    "created_at": "2025-07-20T11:45:20+00:00",
    "commented_code": "->setSmtpSenderName($senderName);\n     }\n \n+    // making sure that the session alerts always have a client name!\n+    if (isset($session['clientName']) && empty($session['clientName'])) {\n+        // fallback to the user agent and then unknown!\n+        $session['clientName'] = !empty($session['userAgent']) ? $session['userAgent'] : 'UNKNOWN';\n+    }\n+",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2217782223",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10170,
        "pr_file": "app/controllers/api/account.php",
        "discussion_id": "2217777381",
        "commented_code": "@@ -132,6 +132,12 @@ function sendSessionAlert(Locale $locale, Document $user, Document $project, Doc\n             ->setSmtpSenderName($senderName);\n     }\n \n+    // making sure that the session alerts always have a client name!\n+    if (isset($session['clientName']) && empty($session['clientName'])) {\n+        // fallback to the user agent and then unknown!\n+        $session['clientName'] = !empty($session['userAgent']) ? $session['userAgent'] : 'UNKNOWN';\n+    }\n+",
        "comment_created_at": "2025-07-20T12:00:47+00:00",
        "comment_author": "ItzNotABug",
        "comment_body": "Noice catch! Fixed it in the latest commit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1115254114",
    "pr_number": 4972,
    "pr_file": "app/controllers/api/databases.php",
    "created_at": "2023-02-23T05:26:09+00:00",
    "commented_code": "return $attribute;\n }\n \n+\n+App::init()\n+    ->groups(['timeout'])\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->action(function (Request $request, Database $dbForProject) {\n+        $key = md5(json_encode([\n+            $request->getMethod(),\n+            $request->getURI(), // Contains databaseId & collectionId\n+            $request->getParam('queries')\n+        ]));\n+        /* @var $document Document */\n+        $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+        if ($document->getAttribute('blocked') === true) {\n+            throw new Exception(Exception::TIMEOUT_BLOCKED);\n+        }\n+    });\n+\n+App::error()\n+    ->groups(['timeout'])\n+    ->inject('error')\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->inject('utopia')\n+    ->action(function (throwable $error, Request $request, Database $dbForProject, App $utopia) {\n+        try {\n+            if ($error instanceof Timeout) {\n+                $route = $utopia->match($request);\n+                $collectionId = $route->getParamValue('collectionId');\n+                $databaseId = $route->getParamValue('databaseId');\n+                $queries = $request->getParam('queries');\n+\n+                $queriesValidator = new ArrayList(new Text(APP_LIMIT_ARRAY_ELEMENT_SIZE), APP_LIMIT_ARRAY_PARAMS_SIZE);\n+                if (!$queriesValidator->isValid($queries)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $uidValidator = new UID();\n+                if (!$uidValidator->isValid($databaseId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                if (!$uidValidator->isValid($collectionId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $key = md5(json_encode([\n+                    $request->getMethod(),\n+                    $request->getURI(), // Contains databaseId & collectionId\n+                    $request->getParam('queries')\n+                ]));\n+\n+                /* @var $document Document */\n+                $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+                if ($document->isEmpty()) {\n+                    $document = Authorization::skip(fn()=>$dbForProject->createDocument('slowQueries', new Document([\n+                    '$id' => $key,\n+                    'blocked' => false,\n+                    'count' => 1,\n+                    'queries' => $queries,\n+                    'databaseId' => $databaseId,\n+                    'collectionId' => $collectionId,\n+                    'path' => $request->getURI(),\n+                ])));\n+                } else {\n+                    $document['count']++;\n+                    $max = intval(App::getEnv('_APP_SLOW_QUERIES_MAX_HITS', 9999));\n+                    if ($document['count'] >= $max) {\n+                        $document['blocked'] = true;\n+                    }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "1115254114",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 4972,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "1115254114",
        "commented_code": "@@ -147,6 +150,93 @@ function createAttribute(string $databaseId, string $collectionId, Document $att\n     return $attribute;\n }\n \n+\n+App::init()\n+    ->groups(['timeout'])\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->action(function (Request $request, Database $dbForProject) {\n+        $key = md5(json_encode([\n+            $request->getMethod(),\n+            $request->getURI(), // Contains databaseId & collectionId\n+            $request->getParam('queries')\n+        ]));\n+        /* @var $document Document */\n+        $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+        if ($document->getAttribute('blocked') === true) {\n+            throw new Exception(Exception::TIMEOUT_BLOCKED);\n+        }\n+    });\n+\n+App::error()\n+    ->groups(['timeout'])\n+    ->inject('error')\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->inject('utopia')\n+    ->action(function (throwable $error, Request $request, Database $dbForProject, App $utopia) {\n+        try {\n+            if ($error instanceof Timeout) {\n+                $route = $utopia->match($request);\n+                $collectionId = $route->getParamValue('collectionId');\n+                $databaseId = $route->getParamValue('databaseId');\n+                $queries = $request->getParam('queries');\n+\n+                $queriesValidator = new ArrayList(new Text(APP_LIMIT_ARRAY_ELEMENT_SIZE), APP_LIMIT_ARRAY_PARAMS_SIZE);\n+                if (!$queriesValidator->isValid($queries)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $uidValidator = new UID();\n+                if (!$uidValidator->isValid($databaseId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                if (!$uidValidator->isValid($collectionId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $key = md5(json_encode([\n+                    $request->getMethod(),\n+                    $request->getURI(), // Contains databaseId & collectionId\n+                    $request->getParam('queries')\n+                ]));\n+\n+                /* @var $document Document */\n+                $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+                if ($document->isEmpty()) {\n+                    $document = Authorization::skip(fn()=>$dbForProject->createDocument('slowQueries', new Document([\n+                    '$id' => $key,\n+                    'blocked' => false,\n+                    'count' => 1,\n+                    'queries' => $queries,\n+                    'databaseId' => $databaseId,\n+                    'collectionId' => $collectionId,\n+                    'path' => $request->getURI(),\n+                ])));\n+                } else {\n+                    $document['count']++;\n+                    $max = intval(App::getEnv('_APP_SLOW_QUERIES_MAX_HITS', 9999));\n+                    if ($document['count'] >= $max) {\n+                        $document['blocked'] = true;\n+                    }",
        "comment_created_at": "2023-02-23T05:26:09+00:00",
        "comment_author": "abnegate",
        "comment_body": "Let's use the document `getAttribute` and `setAttribute` methods instead of array indexing",
        "pr_file_module": null
      },
      {
        "comment_id": "1120408125",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 4972,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "1115254114",
        "commented_code": "@@ -147,6 +150,93 @@ function createAttribute(string $databaseId, string $collectionId, Document $att\n     return $attribute;\n }\n \n+\n+App::init()\n+    ->groups(['timeout'])\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->action(function (Request $request, Database $dbForProject) {\n+        $key = md5(json_encode([\n+            $request->getMethod(),\n+            $request->getURI(), // Contains databaseId & collectionId\n+            $request->getParam('queries')\n+        ]));\n+        /* @var $document Document */\n+        $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+        if ($document->getAttribute('blocked') === true) {\n+            throw new Exception(Exception::TIMEOUT_BLOCKED);\n+        }\n+    });\n+\n+App::error()\n+    ->groups(['timeout'])\n+    ->inject('error')\n+    ->inject('request')\n+    ->inject('dbForProject')\n+    ->inject('utopia')\n+    ->action(function (throwable $error, Request $request, Database $dbForProject, App $utopia) {\n+        try {\n+            if ($error instanceof Timeout) {\n+                $route = $utopia->match($request);\n+                $collectionId = $route->getParamValue('collectionId');\n+                $databaseId = $route->getParamValue('databaseId');\n+                $queries = $request->getParam('queries');\n+\n+                $queriesValidator = new ArrayList(new Text(APP_LIMIT_ARRAY_ELEMENT_SIZE), APP_LIMIT_ARRAY_PARAMS_SIZE);\n+                if (!$queriesValidator->isValid($queries)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $uidValidator = new UID();\n+                if (!$uidValidator->isValid($databaseId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                if (!$uidValidator->isValid($collectionId)) {\n+                    throw new Exception(Exception::GENERAL_SERVER_ERROR);\n+                }\n+\n+                $key = md5(json_encode([\n+                    $request->getMethod(),\n+                    $request->getURI(), // Contains databaseId & collectionId\n+                    $request->getParam('queries')\n+                ]));\n+\n+                /* @var $document Document */\n+                $document = Authorization::skip(fn() => $dbForProject->getDocument('slowQueries', $key));\n+                if ($document->isEmpty()) {\n+                    $document = Authorization::skip(fn()=>$dbForProject->createDocument('slowQueries', new Document([\n+                    '$id' => $key,\n+                    'blocked' => false,\n+                    'count' => 1,\n+                    'queries' => $queries,\n+                    'databaseId' => $databaseId,\n+                    'collectionId' => $collectionId,\n+                    'path' => $request->getURI(),\n+                ])));\n+                } else {\n+                    $document['count']++;\n+                    $max = intval(App::getEnv('_APP_SLOW_QUERIES_MAX_HITS', 9999));\n+                    if ($document['count'] >= $max) {\n+                        $document['blocked'] = true;\n+                    }",
        "comment_created_at": "2023-02-28T16:50:24+00:00",
        "comment_author": "fogelito",
        "comment_body": "Done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2103917275",
    "pr_number": 9868,
    "pr_file": "app/controllers/api/databases.php",
    "created_at": "2025-05-23T06:45:21+00:00",
    "commented_code": "'array' => $array,\n             'filters' => $filters,\n         ]), $response, $dbForProject, $queueForDatabase, $queueForEvents);\n-\n+        $stringAttribute = $attribute->getArrayCopy();\n+        $stringAttribute['encrypt'] = $encrypt;\n+        $stringAttribute = new Document($stringAttribute);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2103917275",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9868,
        "pr_file": "app/controllers/api/databases.php",
        "discussion_id": "2103917275",
        "commented_code": "@@ -1372,10 +1372,12 @@ function updateAttribute(\n             'array' => $array,\n             'filters' => $filters,\n         ]), $response, $dbForProject, $queueForDatabase, $queueForEvents);\n-\n+        $stringAttribute = $attribute->getArrayCopy();\n+        $stringAttribute['encrypt'] = $encrypt;\n+        $stringAttribute = new Document($stringAttribute);",
        "comment_created_at": "2025-05-23T06:45:21+00:00",
        "comment_author": "ItzNotABug",
        "comment_body": "could simply just be - `$attribute->setAttribute('encrypt', $encrypt);` since its a document already.",
        "pr_file_module": null
      }
    ]
  }
]