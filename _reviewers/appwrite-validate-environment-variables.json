[
  {
    "discussion_id": "2218411285",
    "pr_number": 9897,
    "pr_file": "app/config/templates/site.php",
    "created_at": "2025-07-21T07:33:41+00:00",
    "commented_code": "* List of Appwrite Sites templates\n  */\n \n-$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') == 'disabled' ? 'http' : 'https';\n-$hostname = System::getEnv('_APP_DOMAIN');\n-\n-// TODO: Development override\n-if (System::getEnv('_APP_ENV') === 'development') {\n-    $hostname = 'localhost';\n-}\n+$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') === 'disabled' ? 'http' : 'https';\n+$hostname = System::getEnv('_APP_DOMAIN', '');",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2218411285",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9897,
        "pr_file": "app/config/templates/site.php",
        "discussion_id": "2218411285",
        "commented_code": "@@ -6,13 +6,8 @@\n  * List of Appwrite Sites templates\n  */\n \n-$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') == 'disabled' ? 'http' : 'https';\n-$hostname = System::getEnv('_APP_DOMAIN');\n-\n-// TODO: Development override\n-if (System::getEnv('_APP_ENV') === 'development') {\n-    $hostname = 'localhost';\n-}\n+$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') === 'disabled' ? 'http' : 'https';\n+$hostname = System::getEnv('_APP_DOMAIN', '');",
        "comment_created_at": "2025-07-21T07:33:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\u2753 Verification inconclusive</summary>\n\n**Guard against empty `_APP_DOMAIN` after removing the localhost fallback**\n\nIf `_APP_DOMAIN` isn\u2019t set, `$hostname` becomes an empty string, producing URLs like `https:///\u2026`.  \nEither fail fast (`\\RuntimeException`) or fall back to `_APP_CONSOLE_DOMAIN` / `'localhost'` for dev environments to avoid broken asset links.\n\n---\n\n\n\n</details>\n\n**Enforce mandatory `_APP_DOMAIN` to avoid malformed URLs**\n\nAllowing an empty hostname leads to URLs like `https:///\u2026` when `_APP_DOMAIN` is unset. Since `_APP_DOMAIN` is required, we should fail fast or explicitly handle missing values.\n\n\u2022 File: `app/config/templates/site.php` (around lines 9\u201310)  \n\u2022 Replace the permissive default with a required check\n\nSuggested patch:\n```diff\n- $hostname = System::getEnv('_APP_DOMAIN', '');\n+ $hostname = System::getEnv('_APP_DOMAIN');\n+ if (empty($hostname)) {\n+     throw new \\RuntimeException('Required environment variable _APP_DOMAIN is not set');\n+ }\n```\n\nThis ensures misconfigurations are caught early.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') === 'disabled' ? 'http' : 'https';\n$hostname = System::getEnv('_APP_DOMAIN');\nif (empty($hostname)) {\n    throw new \\RuntimeException('Required environment variable _APP_DOMAIN is not set');\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/config/templates/site.php around lines 9 to 10, the code assigns an empty\nstring as the default for _APP_DOMAIN, which can cause malformed URLs if the\nenvironment variable is missing. To fix this, remove the default empty string\nand add a check that throws an error or halts execution if _APP_DOMAIN is not\nset, ensuring the hostname is always defined and preventing invalid URLs.\n```\n\n</details>\n\n<!-- fingerprinting:phantom:poseidon:cougar -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191271047",
    "pr_number": 10119,
    "pr_file": "app/controllers/api/account.php",
    "created_at": "2025-07-08T01:04:23+00:00",
    "commented_code": "throw new Exception(Exception::PROJECT_PROVIDER_UNSUPPORTED);\n         }\n \n+        $host = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n+        $redirectBase = $protocol . '://' . $host;\n+        if ($protocol === 'https' && $port !== '443') {\n+            $redirectBase .= ':' . $port;\n+        } elseif ($protocol === 'http' && $port !== '80') {\n+            $redirectBase .= ':' . $port;\n+        }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2191271047",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10119,
        "pr_file": "app/controllers/api/account.php",
        "discussion_id": "2191271047",
        "commented_code": "@@ -1216,12 +1223,20 @@ function sendSessionAlert(Locale $locale, Document $user, Document $project, Doc\n             throw new Exception(Exception::PROJECT_PROVIDER_UNSUPPORTED);\n         }\n \n+        $host = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n+        $redirectBase = $protocol . '://' . $host;\n+        if ($protocol === 'https' && $port !== '443') {\n+            $redirectBase .= ':' . $port;\n+        } elseif ($protocol === 'http' && $port !== '80') {\n+            $redirectBase .= ':' . $port;\n+        }",
        "comment_created_at": "2025-07-08T01:04:23+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Empty `$host` can yield an invalid URL**\n\n`$host = System::getEnv('_APP_CONSOLE_DOMAIN', \u2026)` falls back to an empty string when both env vars are unset, producing `https://` with no hostname.  \nFallback to `$request->getHostname()` (as done for `$callbackBase`) or fail fast with a clear exception.\n\n\n\n\nAlso applies to: 1855-1862, 2011-2015\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/account.php around lines 1226 to 1232, the variable $host\ncan be an empty string if both environment variables '_APP_CONSOLE_DOMAIN' and\n'_APP_DOMAIN' are unset, resulting in an invalid URL. To fix this, modify the\ncode to fallback to $request->getHostname() when these env vars are not set or\nempty, ensuring $host always has a valid hostname. Alternatively, throw a clear\nexception if no valid hostname can be determined. Apply the same fix to the code\nsections at lines 1855-1862 and 2011-2015.\n```\n\n</details>\n\n<!-- This is an auto-generated reply by CodeRabbit -->\n\n<!-- fingerprinting:phantom:poseidon:cougar -->\n\n\u2705 Addressed in commits 7a465dc to 100aea3\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      },
      {
        "comment_id": "2191285208",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10119,
        "pr_file": "app/controllers/api/account.php",
        "discussion_id": "2191271047",
        "commented_code": "@@ -1216,12 +1223,20 @@ function sendSessionAlert(Locale $locale, Document $user, Document $project, Doc\n             throw new Exception(Exception::PROJECT_PROVIDER_UNSUPPORTED);\n         }\n \n+        $host = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n+        $redirectBase = $protocol . '://' . $host;\n+        if ($protocol === 'https' && $port !== '443') {\n+            $redirectBase .= ':' . $port;\n+        } elseif ($protocol === 'http' && $port !== '80') {\n+            $redirectBase .= ':' . $port;\n+        }",
        "comment_created_at": "2025-07-08T01:19:40+00:00",
        "comment_author": "stnguyen90",
        "comment_body": "`_APP_DOMAIN` is required",
        "pr_file_module": null
      },
      {
        "comment_id": "2191286071",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 10119,
        "pr_file": "app/controllers/api/account.php",
        "discussion_id": "2191271047",
        "commented_code": "@@ -1216,12 +1223,20 @@ function sendSessionAlert(Locale $locale, Document $user, Document $project, Doc\n             throw new Exception(Exception::PROJECT_PROVIDER_UNSUPPORTED);\n         }\n \n+        $host = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n+        $redirectBase = $protocol . '://' . $host;\n+        if ($protocol === 'https' && $port !== '443') {\n+            $redirectBase .= ':' . $port;\n+        } elseif ($protocol === 'http' && $port !== '80') {\n+            $redirectBase .= ':' . $port;\n+        }",
        "comment_created_at": "2025-07-08T01:20:15+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "@stnguyen90 Thank you for the clarification! That makes perfect sense. If `_APP_DOMAIN` is a required environment variable for Appwrite, then my concern about the fallback chain potentially resulting in an empty hostname isn't a realistic scenario. The system would presumably fail earlier during startup if this required configuration is missing.\n\nI appreciate you pointing this out - it helps me better understand Appwrite's configuration requirements.\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: stnguyen90\nPR: appwrite/appwrite#10119\nFile: app/controllers/api/account.php:1226-1232\nTimestamp: 2025-07-08T01:20:14.340Z\nLearning: In Appwrite, `_APP_DOMAIN` is a required environment variable that must always be set for the system to function properly.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n\n<!-- <agentComponentType>chat-answer</agentComponentType> -->\n\n<!-- <rawResChunk><answer>@stnguyen90 Thank you for the clarification! That makes perfect sense. If `_APP_DOMAIN` is a required environment variable for Appwrite, then my concern about the fallback chain potentially resulting in an empty hostname isn't a realistic scenario. The system would presumably fail earlier during startup if this required configuration is missing.\n\nI appreciate you pointing this out - it helps me better understand Appwrite's configuration requirements.\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: stnguyen90\nPR: appwrite/appwrite#10119\nFile: app/controllers/api/account.php:1226-1232\nTimestamp: 2025-07-08T01:20:14.340Z\nLearning: In Appwrite, `_APP_DOMAIN` is a required environment variable that must always be set for the system to function properly.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n</answer></rawResChunk> -->\n\n<!-- This is an auto-generated reply by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142556085",
    "pr_number": 9999,
    "pr_file": "app/config/templates/site.php",
    "created_at": "2025-06-12T12:01:23+00:00",
    "commented_code": "*/\n \n $protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') == 'disabled' ? 'http' : 'https';\n-$hostname = System::getEnv('_APP_DOMAIN');\n+$hostname = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142556085",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9999,
        "pr_file": "app/config/templates/site.php",
        "discussion_id": "2142556085",
        "commented_code": "@@ -7,7 +7,7 @@\n  */\n \n $protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') == 'disabled' ? 'http' : 'https';\n-$hostname = System::getEnv('_APP_DOMAIN');\n+$hostname = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n ",
        "comment_created_at": "2025-06-12T12:01:23+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Fallback breaks when `_APP_CONSOLE_DOMAIN` is defined but empty**\n\n`System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''))` returns the empty string when the variable exists but is set to `\"\"`, short-circuiting the fallback to `_APP_DOMAIN`.  \nThat corner-case actually happens in several staging setups where the variable is exported but intentionally left blank.\n\nTweak the fallback so that we only honor `_APP_CONSOLE_DOMAIN` when it is truthy (non-empty):\n\n```diff\n-$hostname = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n+$hostname = System::getEnv('_APP_CONSOLE_DOMAIN', null);\n+if (empty($hostname)) {\n+    $hostname = System::getEnv('_APP_DOMAIN', '');\n+}\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n$protocol = System::getEnv('_APP_OPTIONS_FORCE_HTTPS') == 'disabled' ? 'http' : 'https';\n$hostname = System::getEnv('_APP_CONSOLE_DOMAIN', null);\nif (empty($hostname)) {\n    $hostname = System::getEnv('_APP_DOMAIN', '');\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/config/templates/site.php around lines 9 to 11, the fallback logic for\n$hostname uses System::getEnv('_APP_CONSOLE_DOMAIN',\nSystem::getEnv('_APP_DOMAIN', '')), which returns an empty string if\n_APP_CONSOLE_DOMAIN is defined but empty, preventing fallback to _APP_DOMAIN.\nModify the code to first retrieve _APP_CONSOLE_DOMAIN, check if it is non-empty\n(truthy), and only use it if so; otherwise, fallback to _APP_DOMAIN. This\nensures that an empty _APP_CONSOLE_DOMAIN does not short-circuit the fallback.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142556094",
    "pr_number": 9999,
    "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Site/Create.php",
    "created_at": "2025-06-12T12:01:24+00:00",
    "commented_code": "APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142556094",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9999,
        "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Site/Create.php",
        "discussion_id": "2142556094",
        "commented_code": "@@ -81,7 +81,7 @@ public function action(string $domain, string $siteId, string $branch, Response\n             APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;\n ",
        "comment_created_at": "2025-06-12T12:01:24+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Empty `_APP_CONSOLE_DOMAIN` still blocks the fallback**\n\nSame reasoning as above \u2013 an explicitly empty console domain will incorrectly pass validation and then be added to `$deniedDomains`, rejecting otherwise valid user domains. Apply the guarded fallback pattern here (and in the other rule files for consistency).\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Proxy/Http/Rules/Site/Create.php around lines\n84 to 86, the code assigns $mainDomain using\nSystem::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', '')) but\ndoes not check if _APP_CONSOLE_DOMAIN is empty before falling back. To fix this,\nimplement a guarded fallback pattern that only uses _APP_CONSOLE_DOMAIN if it is\nset and non-empty; otherwise, fallback to _APP_DOMAIN. This prevents empty\n_APP_CONSOLE_DOMAIN values from blocking valid domains by being added to\n$deniedDomains. Apply this pattern consistently in this and other similar rule\nfiles.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142556097",
    "pr_number": 9999,
    "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Redirect/Create.php",
    "created_at": "2025-06-12T12:01:24+00:00",
    "commented_code": "APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142556097",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9999,
        "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Redirect/Create.php",
        "discussion_id": "2142556097",
        "commented_code": "@@ -84,7 +84,7 @@ public function action(string $domain, string $url, int $statusCode, string $res\n             APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;\n ",
        "comment_created_at": "2025-06-12T12:01:24+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Guard against blank `_APP_CONSOLE_DOMAIN`**\n\nReplicate the non-empty check to make sure `$mainDomain` is populated with `_APP_DOMAIN` when the console domain is unset or blank.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Proxy/Http/Rules/Redirect/Create.php around\nlines 87 to 89, the assignment to $mainDomain does not check if\n_APP_CONSOLE_DOMAIN is blank before falling back to _APP_DOMAIN. Modify the code\nto first check if _APP_CONSOLE_DOMAIN is set and non-empty; if it is empty or\nunset, then assign $mainDomain to _APP_DOMAIN. This ensures $mainDomain is never\nblank by replicating the non-empty check used elsewhere.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142556099",
    "pr_number": 9999,
    "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Function/Create.php",
    "created_at": "2025-06-12T12:01:24+00:00",
    "commented_code": "APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2142556099",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9999,
        "pr_file": "src/Appwrite/Platform/Modules/Proxy/Http/Rules/Function/Create.php",
        "discussion_id": "2142556099",
        "commented_code": "@@ -81,7 +81,7 @@ public function action(string $domain, string $functionId, string $branch, Respo\n             APP_HOSTNAME_INTERNAL\n         ];\n \n-        $mainDomain = System::getEnv('_APP_DOMAIN', '');\n+        $mainDomain = System::getEnv('_APP_CONSOLE_DOMAIN', System::getEnv('_APP_DOMAIN', ''));\n         $deniedDomains[] = $mainDomain;\n ",
        "comment_created_at": "2025-06-12T12:01:24+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Consistency: use truthy check before falling back**\n\nFor the function rule too, rely on `_APP_DOMAIN` when `_APP_CONSOLE_DOMAIN` is not set or empty to avoid accidental denial of domains.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn src/Appwrite/Platform/Modules/Proxy/Http/Rules/Function/Create.php around\nlines 84 to 86, update the assignment of $mainDomain to use a truthy check for\n_APP_CONSOLE_DOMAIN before falling back to _APP_DOMAIN. This means first\nretrieving _APP_CONSOLE_DOMAIN, and if it is not set or is empty, then use\n_APP_DOMAIN as the fallback value. This ensures consistent behavior and avoids\naccidentally denying domains when _APP_CONSOLE_DOMAIN is empty.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106241539",
    "pr_number": 9647,
    "pr_file": "app/config/templates/function.php",
    "created_at": "2025-05-25T16:00:41+00:00",
    "commented_code": "<?php\n \n-const TEMPLATE_RUNTIMES = [\n-    'NODE' => [\n-        'name' => 'node',\n-        'versions' => ['22', '21.0', '20.0', '19.0', '18.0', '16.0', '14.5']\n-    ],\n-    'PYTHON' => [\n-        'name' => 'python',\n-        'versions' => ['3.12', '3.11', '3.10', '3.9', '3.8']\n-    ],\n-    'DART' => [\n-        'name' => 'dart',\n-        'versions' => ['3.5', '3.3', '3.1', '3.0', '2.19', '2.18', '2.17', '2.16']\n-    ],\n-    'GO' => [\n-        'name' => 'go',\n-        'versions' => ['1.23']\n-    ],\n-    'PHP' => [\n-        'name' => 'php',\n-        'versions' => ['8.3', '8.2', '8.1', '8.0']\n-    ],\n-    'DENO' => [\n-        'name' => 'deno',\n-        'versions' => ['2.0', '1.46', '1.40', '1.35', '1.24', '1.21']\n-    ],\n-    'BUN' => [\n-        'name' => 'bun',\n-        'versions' => ['1.1', '1.0']\n-    ],\n-    'RUBY' => [\n-        'name' => 'ruby',\n-        'versions' => ['3.3', '3.2', '3.1', '3.0']\n-    ],\n-];\n+use Utopia\\Config\\Config;\n+\n+$templateRuntimes = Config::getParam('template-runtimes');",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2106241539",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9647,
        "pr_file": "app/config/templates/function.php",
        "discussion_id": "2106241539",
        "commented_code": "@@ -1,39 +1,8 @@\n <?php\n \n-const TEMPLATE_RUNTIMES = [\n-    'NODE' => [\n-        'name' => 'node',\n-        'versions' => ['22', '21.0', '20.0', '19.0', '18.0', '16.0', '14.5']\n-    ],\n-    'PYTHON' => [\n-        'name' => 'python',\n-        'versions' => ['3.12', '3.11', '3.10', '3.9', '3.8']\n-    ],\n-    'DART' => [\n-        'name' => 'dart',\n-        'versions' => ['3.5', '3.3', '3.1', '3.0', '2.19', '2.18', '2.17', '2.16']\n-    ],\n-    'GO' => [\n-        'name' => 'go',\n-        'versions' => ['1.23']\n-    ],\n-    'PHP' => [\n-        'name' => 'php',\n-        'versions' => ['8.3', '8.2', '8.1', '8.0']\n-    ],\n-    'DENO' => [\n-        'name' => 'deno',\n-        'versions' => ['2.0', '1.46', '1.40', '1.35', '1.24', '1.21']\n-    ],\n-    'BUN' => [\n-        'name' => 'bun',\n-        'versions' => ['1.1', '1.0']\n-    ],\n-    'RUBY' => [\n-        'name' => 'ruby',\n-        'versions' => ['3.3', '3.2', '3.1', '3.0']\n-    ],\n-];\n+use Utopia\\Config\\Config;\n+\n+$templateRuntimes = Config::getParam('template-runtimes');",
        "comment_created_at": "2025-05-25T16:00:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Add error handling for dynamic runtime configuration.**\n\nThe dynamic retrieval of template runtimes lacks error handling and validation. If `Config::getParam('template-runtimes')` returns `null` or malformed data, subsequent array access operations (e.g., `$templateRuntimes['NODE']`) will cause fatal errors.\n\n\n\nConsider adding validation:\n\n```diff\n+use Utopia\\Config\\Config;\n\n+$templateRuntimes = Config::getParam('template-runtimes');\n+if (!is_array($templateRuntimes)) {\n+    throw new \\Exception('template-runtimes configuration is missing or invalid');\n+}\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/config/templates/function.php around lines 3 to 5, the code retrieves\ntemplate runtimes dynamically without checking if the result is null or\nmalformed, which can cause fatal errors when accessing array keys. Add\nvalidation after fetching the configuration to ensure $templateRuntimes is an\narray and contains the expected keys before using it. If validation fails,\nhandle the error gracefully, such as by setting default values or logging an\nerror, to prevent runtime exceptions.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106241545",
    "pr_number": 9647,
    "pr_file": "app/controllers/api/console.php",
    "created_at": "2025-05-25T16:00:41+00:00",
    "commented_code": "$isAssistantEnabled = !empty(System::getEnv('_APP_ASSISTANT_OPENAI_API_KEY', ''));\n \n         $variables = new Document([\n-            '_APP_DOMAIN_TARGET' => System::getEnv('_APP_DOMAIN_TARGET'),\n+            '_APP_DOMAIN_TARGET_CNAME' => System::getEnv('_APP_DOMAIN_TARGET_CNAME'),\n+            '_APP_DOMAIN_TARGET_AAAA' => System::getEnv('_APP_DOMAIN_TARGET_AAAA'),\n+            '_APP_DOMAIN_TARGET_A' => System::getEnv('_APP_DOMAIN_TARGET_A'),\n             '_APP_STORAGE_LIMIT' => +System::getEnv('_APP_STORAGE_LIMIT'),\n-            '_APP_FUNCTIONS_SIZE_LIMIT' => +System::getEnv('_APP_FUNCTIONS_SIZE_LIMIT'),\n+            '_APP_COMPUTE_SIZE_LIMIT' => +System::getEnv('_APP_COMPUTE_SIZE_LIMIT'),\n             '_APP_USAGE_STATS' => System::getEnv('_APP_USAGE_STATS'),\n             '_APP_VCS_ENABLED' => $isVcsEnabled,\n             '_APP_DOMAIN_ENABLED' => $isDomainEnabled,\n-            '_APP_ASSISTANT_ENABLED' => $isAssistantEnabled\n+            '_APP_ASSISTANT_ENABLED' => $isAssistantEnabled,\n+            '_APP_DOMAIN_SITES' => System::getEnv('_APP_DOMAIN_SITES'),\n+            '_APP_DOMAIN_FUNCTIONS' => System::getEnv('_APP_DOMAIN_FUNCTIONS'),\n+            '_APP_OPTIONS_FORCE_HTTPS' => System::getEnv('_APP_OPTIONS_FORCE_HTTPS'),\n+            '_APP_DOMAINS_NAMESERVERS' => System::getEnv('_APP_DOMAINS_NAMESERVERS'),\n         ]);",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2106241545",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9647,
        "pr_file": "app/controllers/api/console.php",
        "discussion_id": "2106241545",
        "commented_code": "@@ -55,13 +68,19 @@\n         $isAssistantEnabled = !empty(System::getEnv('_APP_ASSISTANT_OPENAI_API_KEY', ''));\n \n         $variables = new Document([\n-            '_APP_DOMAIN_TARGET' => System::getEnv('_APP_DOMAIN_TARGET'),\n+            '_APP_DOMAIN_TARGET_CNAME' => System::getEnv('_APP_DOMAIN_TARGET_CNAME'),\n+            '_APP_DOMAIN_TARGET_AAAA' => System::getEnv('_APP_DOMAIN_TARGET_AAAA'),\n+            '_APP_DOMAIN_TARGET_A' => System::getEnv('_APP_DOMAIN_TARGET_A'),\n             '_APP_STORAGE_LIMIT' => +System::getEnv('_APP_STORAGE_LIMIT'),\n-            '_APP_FUNCTIONS_SIZE_LIMIT' => +System::getEnv('_APP_FUNCTIONS_SIZE_LIMIT'),\n+            '_APP_COMPUTE_SIZE_LIMIT' => +System::getEnv('_APP_COMPUTE_SIZE_LIMIT'),\n             '_APP_USAGE_STATS' => System::getEnv('_APP_USAGE_STATS'),\n             '_APP_VCS_ENABLED' => $isVcsEnabled,\n             '_APP_DOMAIN_ENABLED' => $isDomainEnabled,\n-            '_APP_ASSISTANT_ENABLED' => $isAssistantEnabled\n+            '_APP_ASSISTANT_ENABLED' => $isAssistantEnabled,\n+            '_APP_DOMAIN_SITES' => System::getEnv('_APP_DOMAIN_SITES'),\n+            '_APP_DOMAIN_FUNCTIONS' => System::getEnv('_APP_DOMAIN_FUNCTIONS'),\n+            '_APP_OPTIONS_FORCE_HTTPS' => System::getEnv('_APP_OPTIONS_FORCE_HTTPS'),\n+            '_APP_DOMAINS_NAMESERVERS' => System::getEnv('_APP_DOMAINS_NAMESERVERS'),\n         ]);",
        "comment_created_at": "2025-05-25T16:00:41+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Verify environment variable consistency across the codebase.**\n\nThe environment variables have been updated to reflect the new system structure, including:\n- Split domain targets into specific types (CNAME, A, AAAA)\n- Renamed `_APP_FUNCTIONS_SIZE_LIMIT` to `_APP_COMPUTE_SIZE_LIMIT`\n- Added new domain and HTTPS configuration variables\n\nEnsure these changes are consistent across configuration files and documentation.\n\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Description: Verify that the new environment variables are defined and documented\n# Expected: Should find these variables in configuration files\n\necho \"Checking for new environment variables in configuration files:\"\nrg \"_APP_DOMAIN_TARGET_CNAME|_APP_DOMAIN_TARGET_AAAA|_APP_DOMAIN_TARGET_A|_APP_COMPUTE_SIZE_LIMIT|_APP_DOMAIN_SITES|_APP_DOMAIN_FUNCTIONS|_APP_OPTIONS_FORCE_HTTPS|_APP_DOMAINS_NAMESERVERS\" --type php app/config/\n```\n\nLength of output: 1563\n\n---\n\n\n\n</details>\n\n**Environment variable consistency check \u2013 updates required**\n\nVerified that all newly introduced variables are declared and used:\n\n- Defined in app/config/variables.php:  \n  \u2022 _APP_DOMAIN_TARGET_CNAME, _APP_DOMAIN_TARGET_AAAA, _APP_DOMAIN_TARGET_A  \n  \u2022 _APP_COMPUTE_SIZE_LIMIT, _APP_DOMAIN_SITES, _APP_DOMAIN_FUNCTIONS  \n  \u2022 _APP_OPTIONS_FORCE_HTTPS, _APP_DOMAINS_NAMESERVERS  \n- Referenced in templates (app/config/templates/site.php) and configuration.\n\nHowever, app/config/errors.php still refers to the old, generic variables:\n\n\u2022 The description:  \n  `_APP_DOMAIN, _APP_DOMAIN_TARGET, and _APP_DOMAIN_FUNCTIONS environment variables have not been configured\u2026`\n\nPlease update it to mention the new split variables. For example:\n\n```diff\n- 'description' => '_APP_DOMAIN, _APP_DOMAIN_TARGET, and _APP_DOMAIN_FUNCTIONS environment variables have not been configured. \u2026',\n+ 'description' => '_APP_DOMAIN_SITES, _APP_DOMAIN_FUNCTIONS, _APP_DOMAIN_TARGET_CNAME, _APP_DOMAIN_TARGET_A, and _APP_DOMAIN_TARGET_AAAA environment variables have not been configured. \u2026',\n```\n\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/console.php lines 71 to 84, the environment variables\nhave been updated to new specific names and structures. Ensure that these new\nvariables (_APP_DOMAIN_TARGET_CNAME, _APP_DOMAIN_TARGET_AAAA,\n_APP_DOMAIN_TARGET_A, _APP_COMPUTE_SIZE_LIMIT, etc.) are consistently referenced\nthroughout the codebase, including configuration files and documentation.\nSpecifically, update any old variable references such as _APP_DOMAIN_TARGET and\n_APP_FUNCTIONS_SIZE_LIMIT in files like app/config/errors.php to reflect the new\nvariable names and structure to maintain consistency and avoid confusion.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094519281",
    "pr_number": 9649,
    "pr_file": "app/controllers/api/proxy.php",
    "created_at": "2025-05-18T13:06:34+00:00",
    "commented_code": "throw new Exception(Exception::RULE_NOT_FOUND);\n         }\n \n-        $target = new Domain(System::getEnv('_APP_DOMAIN_TARGET', ''));\n+        $validators = [];\n+        $targetCNAME = new Domain(System::getEnv('_APP_DOMAIN_TARGET_CNAME', ''));\n+        if (!$targetCNAME->isKnown() || $targetCNAME->isTest()) {\n+            $validators[] = new DNS($targetCNAME->get(), DNS::RECORD_CNAME);\n+        }\n+        if ((new IP(IP::V4))->isValid(System::getEnv('_APP_DOMAIN_TARGET_A', ''))) {\n+            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_A', ''), DNS::RECORD_A);\n+        }\n+        if ((new IP(IP::V6))->isValid(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''))) {\n+            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''), DNS::RECORD_AAAA);\n+        }\n \n-        if (!$target->isKnown() || $target->isTest()) {\n-            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Domain target must be configured as environment variable.');\n+        if (empty($validators)) {\n+            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'At least one of domain targets environment variable must be configured.');\n         }",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2094519281",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9649,
        "pr_file": "app/controllers/api/proxy.php",
        "discussion_id": "2094519281",
        "commented_code": "@@ -368,25 +214,42 @@\n             throw new Exception(Exception::RULE_NOT_FOUND);\n         }\n \n-        $target = new Domain(System::getEnv('_APP_DOMAIN_TARGET', ''));\n+        $validators = [];\n+        $targetCNAME = new Domain(System::getEnv('_APP_DOMAIN_TARGET_CNAME', ''));\n+        if (!$targetCNAME->isKnown() || $targetCNAME->isTest()) {\n+            $validators[] = new DNS($targetCNAME->get(), DNS::RECORD_CNAME);\n+        }\n+        if ((new IP(IP::V4))->isValid(System::getEnv('_APP_DOMAIN_TARGET_A', ''))) {\n+            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_A', ''), DNS::RECORD_A);\n+        }\n+        if ((new IP(IP::V6))->isValid(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''))) {\n+            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''), DNS::RECORD_AAAA);\n+        }\n \n-        if (!$target->isKnown() || $target->isTest()) {\n-            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'Domain target must be configured as environment variable.');\n+        if (empty($validators)) {\n+            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'At least one of domain targets environment variable must be configured.');\n         }",
        "comment_created_at": "2025-05-18T13:06:34+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Potential mis-validation when `_APP_DOMAIN_TARGET_CNAME` is empty**\n\n`$targetCNAME` is always instantiated \u2013 even when the env-var is an empty string.  \nBecause an empty string is neither *known* nor *test*, the `if` condition becomes true and a `DNS` validator gets created with an empty host name.  \nThis will fail every verification attempt and may even hide the real reason from the caller.\n\n```diff\n- $targetCNAME = new Domain(System::getEnv('_APP_DOMAIN_TARGET_CNAME', ''));\n- if (!$targetCNAME->isKnown() || $targetCNAME->isTest()) {\n-     $validators[] = new DNS($targetCNAME->get(), DNS::RECORD_CNAME);\n- }\n+ $targetCNAMEEnv = System::getEnv('_APP_DOMAIN_TARGET_CNAME', '');\n+ if (!empty($targetCNAMEEnv)) {\n+     $targetCNAME = new Domain($targetCNAMEEnv);\n+     // Skip validation for local/test domains, but validate all real domains.\n+     if (!$targetCNAME->isTest()) {\n+         $validators[] = new DNS($targetCNAME->get(), DNS::RECORD_CNAME);\n+     }\n+ }\n```\n\nSide effects:\n1. Prevents unnecessary look-ups when the variable is not configured.\n2. Keeps the \u201cat least one validator\u201d logic intact while avoiding false negatives.\n\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n        $validators = [];\n\n        $targetCNAMEEnv = System::getEnv('_APP_DOMAIN_TARGET_CNAME', '');\n        if (!empty($targetCNAMEEnv)) {\n            $targetCNAME = new Domain($targetCNAMEEnv);\n            // Skip validation for local/test domains, but validate all real domains.\n            if (!$targetCNAME->isTest()) {\n                $validators[] = new DNS($targetCNAME->get(), DNS::RECORD_CNAME);\n            }\n        }\n\n        if ((new IP(IP::V4))->isValid(System::getEnv('_APP_DOMAIN_TARGET_A', ''))) {\n            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_A', ''), DNS::RECORD_A);\n        }\n        if ((new IP(IP::V6))->isValid(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''))) {\n            $validators[] = new DNS(System::getEnv('_APP_DOMAIN_TARGET_AAAA', ''), DNS::RECORD_AAAA);\n        }\n\n        if (empty($validators)) {\n            throw new Exception(Exception::GENERAL_SERVER_ERROR, 'At least one of domain targets environment variable must be configured.');\n        }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn app/controllers/api/proxy.php around lines 217 to 231, the code creates a\nDomain object from the _APP_DOMAIN_TARGET_CNAME environment variable without\nchecking if it is empty, causing a DNS validator with an empty hostname to be\nadded and leading to false validation failures. To fix this, add a condition to\ncheck that _APP_DOMAIN_TARGET_CNAME is not empty before instantiating the Domain\nobject and adding the DNS validator. This prevents unnecessary lookups and\nmaintains the logic that at least one validator must be configured.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2087814245",
    "pr_number": 9755,
    "pr_file": "app/config/console.php",
    "created_at": "2025-05-14T00:14:33+00:00",
    "commented_code": "+<?php\n+\n+/**\n+ * Initializes console project document.\n+ */\n+\n+use Appwrite\\Auth\\Auth;\n+use Appwrite\\Network\\Validator\\Origin;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\System\\System;\n+\n+$console = [\n+    '$id' => ID::custom('console'),\n+    '$internalId' => ID::custom('console'),\n+    'name' => 'Appwrite',\n+    '$collection' => ID::custom('projects'),\n+    'description' => 'Appwrite core engine',\n+    'logo' => '',\n+    'teamId' => null,\n+    'webhooks' => [],\n+    'keys' => [],\n+    'platforms' => [\n+        [\n+            '$collection' => ID::custom('platforms'),\n+            'name' => 'Localhost',\n+            'type' => Origin::CLIENT_TYPE_WEB,\n+            'hostname' => 'localhost',\n+        ], // Current host is added on app init\n+    ],\n+    'region' => 'fra',\n+    'legalName' => '',\n+    'legalCountry' => '',\n+    'legalState' => '',\n+    'legalCity' => '',\n+    'legalAddress' => '',\n+    'legalTaxId' => '',\n+    'auths' => [\n+        'mockNumbers' => [],\n+        'invites' => System::getEnv('_APP_CONSOLE_INVITES', 'enabled') === 'enabled',\n+        'limit' => (System::getEnv('_APP_CONSOLE_WHITELIST_ROOT', 'enabled') === 'enabled') ? 1 : 0, // limit signup to 1 user\n+        'duration' => Auth::TOKEN_EXPIRATION_LOGIN_LONG, // 1 Year in seconds\n+        'sessionAlerts' => System::getEnv('_APP_CONSOLE_SESSION_ALERTS', 'disabled') === 'enabled'\n+    ],\n+    'authWhitelistEmails' => (!empty(System::getEnv('_APP_CONSOLE_WHITELIST_EMAILS', null))) ? \\explode(',', System::getEnv('_APP_CONSOLE_WHITELIST_EMAILS', null)) : [],\n+    'authWhitelistIPs' => (!empty(System::getEnv('_APP_CONSOLE_WHITELIST_IPS', null))) ? \\explode(',', System::getEnv('_APP_CONSOLE_WHITELIST_IPS', null)) : [],\n+    'oAuthProviders' => [\n+        'githubEnabled' => true,\n+        'githubSecret' => System::getEnv('_APP_CONSOLE_GITHUB_SECRET', ''),\n+        'githubAppid' => System::getEnv('_APP_CONSOLE_GITHUB_APP_ID', '')\n+    ],",
    "repo_full_name": "appwrite/appwrite",
    "discussion_comments": [
      {
        "comment_id": "2087814245",
        "repo_full_name": "appwrite/appwrite",
        "pr_number": 9755,
        "pr_file": "app/config/console.php",
        "discussion_id": "2087814245",
        "commented_code": "@@ -0,0 +1,53 @@\n+<?php\n+\n+/**\n+ * Initializes console project document.\n+ */\n+\n+use Appwrite\\Auth\\Auth;\n+use Appwrite\\Network\\Validator\\Origin;\n+use Utopia\\Database\\Helpers\\ID;\n+use Utopia\\System\\System;\n+\n+$console = [\n+    '$id' => ID::custom('console'),\n+    '$internalId' => ID::custom('console'),\n+    'name' => 'Appwrite',\n+    '$collection' => ID::custom('projects'),\n+    'description' => 'Appwrite core engine',\n+    'logo' => '',\n+    'teamId' => null,\n+    'webhooks' => [],\n+    'keys' => [],\n+    'platforms' => [\n+        [\n+            '$collection' => ID::custom('platforms'),\n+            'name' => 'Localhost',\n+            'type' => Origin::CLIENT_TYPE_WEB,\n+            'hostname' => 'localhost',\n+        ], // Current host is added on app init\n+    ],\n+    'region' => 'fra',\n+    'legalName' => '',\n+    'legalCountry' => '',\n+    'legalState' => '',\n+    'legalCity' => '',\n+    'legalAddress' => '',\n+    'legalTaxId' => '',\n+    'auths' => [\n+        'mockNumbers' => [],\n+        'invites' => System::getEnv('_APP_CONSOLE_INVITES', 'enabled') === 'enabled',\n+        'limit' => (System::getEnv('_APP_CONSOLE_WHITELIST_ROOT', 'enabled') === 'enabled') ? 1 : 0, // limit signup to 1 user\n+        'duration' => Auth::TOKEN_EXPIRATION_LOGIN_LONG, // 1 Year in seconds\n+        'sessionAlerts' => System::getEnv('_APP_CONSOLE_SESSION_ALERTS', 'disabled') === 'enabled'\n+    ],\n+    'authWhitelistEmails' => (!empty(System::getEnv('_APP_CONSOLE_WHITELIST_EMAILS', null))) ? \\explode(',', System::getEnv('_APP_CONSOLE_WHITELIST_EMAILS', null)) : [],\n+    'authWhitelistIPs' => (!empty(System::getEnv('_APP_CONSOLE_WHITELIST_IPS', null))) ? \\explode(',', System::getEnv('_APP_CONSOLE_WHITELIST_IPS', null)) : [],\n+    'oAuthProviders' => [\n+        'githubEnabled' => true,\n+        'githubSecret' => System::getEnv('_APP_CONSOLE_GITHUB_SECRET', ''),\n+        'githubAppid' => System::getEnv('_APP_CONSOLE_GITHUB_APP_ID', '')\n+    ],",
        "comment_created_at": "2025-05-14T00:14:33+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Critical: Referenced environment variables are missing**  \nThe console config uses `System::getEnv('_APP_CONSOLE_INVITES', \u2026)` and expects `_APP_CONSOLE_GITHUB_SECRET` and `_APP_CONSOLE_GITHUB_APP_ID`, but these are not defined in `.env`. Please add corresponding entries to `.env` (or provide sensible defaults) to prevent undefined\u2010index errors at runtime.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]