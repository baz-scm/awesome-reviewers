[
  {
    "discussion_id": "2049499498",
    "pr_number": 20097,
    "pr_file": "ui/src/app/applications/components/utils.tsx",
    "created_at": "2025-04-17T19:03:01+00:00",
    "commented_code": "};\n \n export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                console.log('title:', title);\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined\n+                            };\n+                        },\n+\n+                        submit: async (vals, _, close) => {\n                             try {\n-                                const confirmed = await apis.popup.confirm(`Execute '${action.name}' action?`, `Are you sure you want to execute '${action.name}' action?`);\n-                                if (confirmed) {\n-                                    await services.applications.runResourceAction(metadata.name, metadata.namespace, resource, action.name);\n-                                }\n+                                const resourceActionParameters = action.hasParameters ? [{name: action.name, value: vals.inputParameter}] : [];",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049499498",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20097,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "2049499498",
        "commented_code": "@@ -522,32 +522,59 @@ export const deletePopup = async (\n };\n \n export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                console.log('title:', title);\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined\n+                            };\n+                        },\n+\n+                        submit: async (vals, _, close) => {\n                             try {\n-                                const confirmed = await apis.popup.confirm(`Execute '${action.name}' action?`, `Are you sure you want to execute '${action.name}' action?`);\n-                                if (confirmed) {\n-                                    await services.applications.runResourceAction(metadata.name, metadata.namespace, resource, action.name);\n-                                }\n+                                const resourceActionParameters = action.hasParameters ? [{name: action.name, value: vals.inputParameter}] : [];",
        "comment_created_at": "2025-04-17T19:03:01+00:00",
        "comment_author": "murmur76",
        "comment_body": "Currently, you limited ui to get only one parameter per action.\r\nI think it is better to extend to get multiple parameters by declaring it in the `discovery.lua` script since `ResourceAction` type already has the `params` spec for that.\r\n\r\nex. discovery.lua\r\n```lua\r\nactions[\"scale\"] = {\r\n  [\"defaultValue\"] = tostring(obj.spec.replicas), -- then you can remove this from the spec.\r\n  [\"params\"] = { -- use this spec\r\n    {\r\n      [\"name\"] = \"scale\",\r\n      [\"value\"] = \"\",\r\n      [\"type\"] = \"^[0-9]*$\", -- not sure if it is a correct usage.\r\n      [\"default\"] = tostring(obj.spec.replicas)\r\n    }\r\n  },\r\n  [\"hasParameters\"] = true, -- then you can remove this from the spec.\r\n  [\"errorMessage\"] = \"Enter any valid number\",\r\n  [\"regexp\"] = \"^[0-9]*$\", -- then you can remove this from the spec.\r\n}\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051169250",
    "pr_number": 20097,
    "pr_file": "ui/src/app/applications/components/utils.tsx",
    "created_at": "2025-04-18T21:59:36+00:00",
    "commented_code": ");\n };\n \n-export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+export async function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined\n+                            };\n+                        },\n+\n+                        submit: async (vals, _, close) => {\n                             try {\n-                                const confirmed = await apis.popup.confirm(`Execute '${action.name}' action?`, `Are you sure you want to execute '${action.name}' action?`);\n-                                if (confirmed) {\n-                                    await services.applications.runResourceAction(metadata.name, metadata.namespace, resource, action.name);\n-                                }\n+                                const resourceActionParameters = action.hasParameters",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2051169250",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20097,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "2051169250",
        "commented_code": "@@ -521,33 +521,61 @@ export const deletePopup = async (\n     );\n };\n \n-export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+export async function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined\n+                            };\n+                        },\n+\n+                        submit: async (vals, _, close) => {\n                             try {\n-                                const confirmed = await apis.popup.confirm(`Execute '${action.name}' action?`, `Are you sure you want to execute '${action.name}' action?`);\n-                                if (confirmed) {\n-                                    await services.applications.runResourceAction(metadata.name, metadata.namespace, resource, action.name);\n-                                }\n+                                const resourceActionParameters = action.hasParameters",
        "comment_created_at": "2025-04-18T21:59:36+00:00",
        "comment_author": "murmur76",
        "comment_body": "you can also iterate vals(key-value map) to get request action params.\r\nex.\r\n```ts\r\nconst resourceActionParmeters = action.params\r\n    ? action.params.map(param => (\r\n           {\r\n               name: param.name,\r\n               value: vals[param.name] || param.default,\r\n               type: param.type,\r\n               default: param.default\r\n           }\r\n       ))\r\n    : [];\r\n```",
        "pr_file_module": null
      }
    ]
  }
]