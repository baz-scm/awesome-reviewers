[
  {
    "discussion_id": "2185616759",
    "pr_number": 23487,
    "pr_file": "docs/faq.md",
    "created_at": "2025-07-04T15:12:06+00:00",
    "commented_code": "The Redis password is stored in Kubernetes secret `argocd-redis` with key `auth` in the namespace where Argo CD is installed.\n You can config your secret provider to generate Kubernetes secret accordingly.\n \n+## How do I provide Redis credentials using a file mount?\n+\n+Redis credentials can be mounted as files in a specified directory, rather than being set directly as environment variables from a secret.\n+\n+**Set the Environment Variable**\n+\n+Set the `REDIS_CREDS_FILE_PATH` environment variable to the directory where your credential files are mounted.\n+\n+| Variable Name           | Description                                   |\n+|-------------------------|-----------------------------------------------|\n+| `REDIS_CREDS_FILE_PATH` | Path to the directory containing credential files |",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2185616759",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23487,
        "pr_file": "docs/faq.md",
        "discussion_id": "2185616759",
        "commented_code": "@@ -316,6 +316,34 @@ If for some reason authenticated Redis does not work for you and you want to use\n The Redis password is stored in Kubernetes secret `argocd-redis` with key `auth` in the namespace where Argo CD is installed.\n You can config your secret provider to generate Kubernetes secret accordingly.\n \n+## How do I provide Redis credentials using a file mount?\n+\n+Redis credentials can be mounted as files in a specified directory, rather than being set directly as environment variables from a secret.\n+\n+**Set the Environment Variable**\n+\n+Set the `REDIS_CREDS_FILE_PATH` environment variable to the directory where your credential files are mounted.\n+\n+| Variable Name           | Description                                   |\n+|-------------------------|-----------------------------------------------|\n+| `REDIS_CREDS_FILE_PATH` | Path to the directory containing credential files |",
        "comment_created_at": "2025-07-04T15:12:06+00:00",
        "comment_author": "agaudreault",
        "comment_body": "This PR should update the default kustomize manifests in `manifests/` to use that variable and mount the argocd-redis secret",
        "pr_file_module": null
      },
      {
        "comment_id": "2207660084",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23487,
        "pr_file": "docs/faq.md",
        "discussion_id": "2185616759",
        "commented_code": "@@ -316,6 +316,34 @@ If for some reason authenticated Redis does not work for you and you want to use\n The Redis password is stored in Kubernetes secret `argocd-redis` with key `auth` in the namespace where Argo CD is installed.\n You can config your secret provider to generate Kubernetes secret accordingly.\n \n+## How do I provide Redis credentials using a file mount?\n+\n+Redis credentials can be mounted as files in a specified directory, rather than being set directly as environment variables from a secret.\n+\n+**Set the Environment Variable**\n+\n+Set the `REDIS_CREDS_FILE_PATH` environment variable to the directory where your credential files are mounted.\n+\n+| Variable Name           | Description                                   |\n+|-------------------------|-----------------------------------------------|\n+| `REDIS_CREDS_FILE_PATH` | Path to the directory containing credential files |",
        "comment_created_at": "2025-07-15T14:23:19+00:00",
        "comment_author": "Mangaal",
        "comment_body": "I have updated the default kustomize manifests as well as the ha.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2194738532",
    "pr_number": 23669,
    "pr_file": "docs/developer-guide/debugging-locally.md",
    "created_at": "2025-07-09T11:09:43+00:00",
    "commented_code": "+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Profile` is used by Goreman when running Argo CD locally with the local toolchain. It has all the needed component run configuration, and you will need to copy parts of this configuration to your IDE.\n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```\n+This configuration example will be used as the basis for the next steps.\n+\n+### Configure component env variables\n+The component that you will run in your IDE for debugging (`api-server` in our case) will need env variables. Copy the env variables from `Procfile`, located in the `argo-cd` root folder of your development branch. The env variables are located before the `$COMMAND` section in the `sh -c` section of the component run command.\n+You can keep them in `.env` file and then have the IDE launch configuration point to that file. Obviously, you can adjust the env variables to your needs when debugging a specific configuration.\n+\n+Example for an `api-server.env` file:\n+``` bash\n+ARGOCD_BINARY_NAME=argocd-server\n+ARGOCD_FAKE_IN_CLUSTER=true\n+ARGOCD_GNUPGHOME=/tmp/argocd-local/gpg/keys\n+ARGOCD_GPG_DATA_PATH=/tmp/argocd-local/gpg/source\n+ARGOCD_GPG_ENABLED=false\n+ARGOCD_LOG_FORMAT_ENABLE_FULL_TIMESTAMP=1\n+ARGOCD_SSH_DATA_PATH=/tmp/argocd-local/ssh\n+ARGOCD_TLS_DATA_PATH=/tmp/argocd-local/tls\n+ARGOCD_TRACING_ENABLED=1\n+FORCE_LOG_COLORS=1\n+KUBECONFIG=~/.kube/config",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2194738532",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2194738532",
        "commented_code": "@@ -0,0 +1,134 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Profile` is used by Goreman when running Argo CD locally with the local toolchain. It has all the needed component run configuration, and you will need to copy parts of this configuration to your IDE.\n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```\n+This configuration example will be used as the basis for the next steps.\n+\n+### Configure component env variables\n+The component that you will run in your IDE for debugging (`api-server` in our case) will need env variables. Copy the env variables from `Procfile`, located in the `argo-cd` root folder of your development branch. The env variables are located before the `$COMMAND` section in the `sh -c` section of the component run command.\n+You can keep them in `.env` file and then have the IDE launch configuration point to that file. Obviously, you can adjust the env variables to your needs when debugging a specific configuration.\n+\n+Example for an `api-server.env` file:\n+``` bash\n+ARGOCD_BINARY_NAME=argocd-server\n+ARGOCD_FAKE_IN_CLUSTER=true\n+ARGOCD_GNUPGHOME=/tmp/argocd-local/gpg/keys\n+ARGOCD_GPG_DATA_PATH=/tmp/argocd-local/gpg/source\n+ARGOCD_GPG_ENABLED=false\n+ARGOCD_LOG_FORMAT_ENABLE_FULL_TIMESTAMP=1\n+ARGOCD_SSH_DATA_PATH=/tmp/argocd-local/ssh\n+ARGOCD_TLS_DATA_PATH=/tmp/argocd-local/tls\n+ARGOCD_TRACING_ENABLED=1\n+FORCE_LOG_COLORS=1\n+KUBECONFIG=~/.kube/config",
        "comment_created_at": "2025-07-09T11:09:43+00:00",
        "comment_author": "nitishfy",
        "comment_body": "are these all the env vars that are required? If no, we can just add at last something like `....so on`. For example, in order to test app-in-any-namespace feature, you'd typically require to set the env-var only that time otherwise won't. Hence, mentioning this minute detail can be a good thing in docs.",
        "pr_file_module": null
      },
      {
        "comment_id": "2194990176",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2194738532",
        "commented_code": "@@ -0,0 +1,134 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Profile` is used by Goreman when running Argo CD locally with the local toolchain. It has all the needed component run configuration, and you will need to copy parts of this configuration to your IDE.\n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```\n+This configuration example will be used as the basis for the next steps.\n+\n+### Configure component env variables\n+The component that you will run in your IDE for debugging (`api-server` in our case) will need env variables. Copy the env variables from `Procfile`, located in the `argo-cd` root folder of your development branch. The env variables are located before the `$COMMAND` section in the `sh -c` section of the component run command.\n+You can keep them in `.env` file and then have the IDE launch configuration point to that file. Obviously, you can adjust the env variables to your needs when debugging a specific configuration.\n+\n+Example for an `api-server.env` file:\n+``` bash\n+ARGOCD_BINARY_NAME=argocd-server\n+ARGOCD_FAKE_IN_CLUSTER=true\n+ARGOCD_GNUPGHOME=/tmp/argocd-local/gpg/keys\n+ARGOCD_GPG_DATA_PATH=/tmp/argocd-local/gpg/source\n+ARGOCD_GPG_ENABLED=false\n+ARGOCD_LOG_FORMAT_ENABLE_FULL_TIMESTAMP=1\n+ARGOCD_SSH_DATA_PATH=/tmp/argocd-local/ssh\n+ARGOCD_TLS_DATA_PATH=/tmp/argocd-local/tls\n+ARGOCD_TRACING_ENABLED=1\n+FORCE_LOG_COLORS=1\n+KUBECONFIG=~/.kube/config",
        "comment_created_at": "2025-07-09T13:06:21+00:00",
        "comment_author": "reggie-k",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2204254607",
    "pr_number": 23669,
    "pr_file": "docs/developer-guide/debugging-locally.md",
    "created_at": "2025-07-14T08:48:58+00:00",
    "commented_code": "+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Procfile` is used by Goreman when running Argo CD locally with the local toolchain. The file is located in the top-level directory in your cloned Argo CD repo folder, you can view it's latest version [here](https://github.com/argoproj/argo-cd/blob/master/Procfile). It contains all the needed component run configuration, and you will need to copy parts of this configuration to your IDE. \n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```\n+This configuration example will be used as the basis for the next steps.\n+\n+### Configure component env variables\n+The component that you will run in your IDE for debugging (`api-server` in our case) will need env variables. Copy the env variables from `Procfile`, located in the `argo-cd` root folder of your development branch. The env variables are located before the `$COMMAND` section in the `sh -c` section of the component run command.\n+You can keep them in `.env` file and then have the IDE launch configuration point to that file. Obviously, you can adjust the env variables to your needs when debugging a specific configuration.\n+\n+Example for an `api-server.env` file:\n+``` bash\n+ARGOCD_BINARY_NAME=argocd-server\n+ARGOCD_FAKE_IN_CLUSTER=true\n+ARGOCD_GNUPGHOME=/tmp/argocd-local/gpg/keys\n+ARGOCD_GPG_DATA_PATH=/tmp/argocd-local/gpg/source\n+ARGOCD_GPG_ENABLED=false\n+ARGOCD_LOG_FORMAT_ENABLE_FULL_TIMESTAMP=1\n+ARGOCD_SSH_DATA_PATH=/tmp/argocd-local/ssh\n+ARGOCD_TLS_DATA_PATH=/tmp/argocd-local/tls\n+ARGOCD_TRACING_ENABLED=1\n+FORCE_LOG_COLORS=1\n+KUBECONFIG=~/.kube/config",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2204254607",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2204254607",
        "commented_code": "@@ -0,0 +1,138 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Procfile` is used by Goreman when running Argo CD locally with the local toolchain. The file is located in the top-level directory in your cloned Argo CD repo folder, you can view it's latest version [here](https://github.com/argoproj/argo-cd/blob/master/Procfile). It contains all the needed component run configuration, and you will need to copy parts of this configuration to your IDE. \n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```\n+This configuration example will be used as the basis for the next steps.\n+\n+### Configure component env variables\n+The component that you will run in your IDE for debugging (`api-server` in our case) will need env variables. Copy the env variables from `Procfile`, located in the `argo-cd` root folder of your development branch. The env variables are located before the `$COMMAND` section in the `sh -c` section of the component run command.\n+You can keep them in `.env` file and then have the IDE launch configuration point to that file. Obviously, you can adjust the env variables to your needs when debugging a specific configuration.\n+\n+Example for an `api-server.env` file:\n+``` bash\n+ARGOCD_BINARY_NAME=argocd-server\n+ARGOCD_FAKE_IN_CLUSTER=true\n+ARGOCD_GNUPGHOME=/tmp/argocd-local/gpg/keys\n+ARGOCD_GPG_DATA_PATH=/tmp/argocd-local/gpg/source\n+ARGOCD_GPG_ENABLED=false\n+ARGOCD_LOG_FORMAT_ENABLE_FULL_TIMESTAMP=1\n+ARGOCD_SSH_DATA_PATH=/tmp/argocd-local/ssh\n+ARGOCD_TLS_DATA_PATH=/tmp/argocd-local/tls\n+ARGOCD_TRACING_ENABLED=1\n+FORCE_LOG_COLORS=1\n+KUBECONFIG=~/.kube/config",
        "comment_created_at": "2025-07-14T08:48:58+00:00",
        "comment_author": "ppapapetrou76",
        "comment_body": "In my local env I had to setup this env var to `/Users/pat/.kube/config.yml` in order to work otherwise I'm getting this error \r\n\r\n```\r\ninvalid configuration: no configuration has been provided, try setting KUBERNETES_MASTER environment variable\r\n```\r\n\r\nmaybe we should add a comment or recommend to use the relative path ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218968055",
    "pr_number": 23669,
    "pr_file": "docs/developer-guide/debugging-locally.md",
    "created_at": "2025-07-21T11:50:05+00:00",
    "commented_code": "+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Procfile` is used by Goreman when running Argo CD locally with the local toolchain. The file is located in the top-level directory in your cloned Argo CD repo folder, you can view it's latest version [here](https://github.com/argoproj/argo-cd/blob/master/Procfile). It contains all the needed component run configuration, and you will need to copy parts of this configuration to your IDE. \n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2218968055",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2218968055",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Procfile` is used by Goreman when running Argo CD locally with the local toolchain. The file is located in the top-level directory in your cloned Argo CD repo folder, you can view it's latest version [here](https://github.com/argoproj/argo-cd/blob/master/Procfile). It contains all the needed component run configuration, and you will need to copy parts of this configuration to your IDE. \n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```",
        "comment_created_at": "2025-07-21T11:50:05+00:00",
        "comment_author": "nitishfy",
        "comment_body": "```suggestion\r\n```\r\n!!! note\r\nThe Procfile for a component can get changed with time. Please go through the Procfile and make sure you use the latest configuration for debugging\r\n!!!\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2218969297",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2218968055",
        "commented_code": "@@ -0,0 +1,143 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.\n+\n+For the next steps, we will use Argo CD `api-server` as an example of running a component in an IDE.\n+\n+## Configure your IDE\n+\n+### Locate your component configuration in `Procfile`\n+The `Procfile` is used by Goreman when running Argo CD locally with the local toolchain. The file is located in the top-level directory in your cloned Argo CD repo folder, you can view it's latest version [here](https://github.com/argoproj/argo-cd/blob/master/Procfile). It contains all the needed component run configuration, and you will need to copy parts of this configuration to your IDE. \n+\n+Example for `api-server` configuration in `Procfile`:\n+``` text\n+api-server: [ \"$BIN_MODE\" = 'true' ] && COMMAND=./dist/argocd || COMMAND='go run ./cmd/main.go' && sh -c \"GOCOVERDIR=${ARGOCD_COVERAGE_DIR:-/tmp/coverage/api-server} FORCE_LOG_COLORS=1 ARGOCD_FAKE_IN_CLUSTER=true ARGOCD_TLS_DATA_PATH=${ARGOCD_TLS_DATA_PATH:-/tmp/argocd-local/tls} ARGOCD_SSH_DATA_PATH=${ARGOCD_SSH_DATA_PATH:-/tmp/argocd-local/ssh} ARGOCD_BINARY_NAME=argocd-server $COMMAND --loglevel debug --redis localhost:${ARGOCD_E2E_REDIS_PORT:-6379} --disable-auth=${ARGOCD_E2E_DISABLE_AUTH:-'true'} --insecure --dex-server http://localhost:${ARGOCD_E2E_DEX_PORT:-5556} --repo-server localhost:${ARGOCD_E2E_REPOSERVER_PORT:-8081} --port ${ARGOCD_E2E_APISERVER_PORT:-8080} --otlp-address=${ARGOCD_OTLP_ADDRESS} --application-namespaces=${ARGOCD_APPLICATION_NAMESPACES:-''} --hydrator-enabled=${ARGOCD_HYDRATOR_ENABLED:='false'}\"\n+```",
        "comment_created_at": "2025-07-21T11:50:44+00:00",
        "comment_author": "nitishfy",
        "comment_body": "Let's add a note here for user to instruct them to use the latest content from the Procfile.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185855594",
    "pr_number": 23660,
    "pr_file": "docs/developer-guide/debugging-remote-environment.md",
    "created_at": "2025-07-04T17:47:05+00:00",
    "commented_code": "}\n         }\n ```\n+### GoLand\n+In GoLand use the following launch configuration to run argocd-server:\n+\n+1. Open **Run `>` Edit configurations...**\n+2. Click **+ icon** and select **Go build**\n+3. Add the following configuration:\n+```text\n+        Name: Run argocd-server\n+        Run kind: File\n+        File: cmd/argocd-server/main.go\n+        Working directory: `path to your Argo CD repo root`\n+```\n+4. Set the environment variables:\n+```text\n+        ARGOCD_BINARY_NAME: argocd-server\n+        CGO_ENABLED: 0\n+        KUBECONFIG: (path to your .kubeconfig)",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2185855594",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23660,
        "pr_file": "docs/developer-guide/debugging-remote-environment.md",
        "discussion_id": "2185855594",
        "commented_code": "@@ -84,4 +84,25 @@ In VSCode use the following launch configuration to run argocd-server:\n             }\n         }\n ```\n+### GoLand\n+In GoLand use the following launch configuration to run argocd-server:\n+\n+1. Open **Run `>` Edit configurations...**\n+2. Click **+ icon** and select **Go build**\n+3. Add the following configuration:\n+```text\n+        Name: Run argocd-server\n+        Run kind: File\n+        File: cmd/argocd-server/main.go\n+        Working directory: `path to your Argo CD repo root`\n+```\n+4. Set the environment variables:\n+```text\n+        ARGOCD_BINARY_NAME: argocd-server\n+        CGO_ENABLED: 0\n+        KUBECONFIG: (path to your .kubeconfig)",
        "comment_created_at": "2025-07-04T17:47:05+00:00",
        "comment_author": "rumstead",
        "comment_body": "Is kubeconfig required? Doesn\u2019t it use the current context by default?",
        "pr_file_module": null
      },
      {
        "comment_id": "2186502986",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23660,
        "pr_file": "docs/developer-guide/debugging-remote-environment.md",
        "discussion_id": "2185855594",
        "commented_code": "@@ -84,4 +84,25 @@ In VSCode use the following launch configuration to run argocd-server:\n             }\n         }\n ```\n+### GoLand\n+In GoLand use the following launch configuration to run argocd-server:\n+\n+1. Open **Run `>` Edit configurations...**\n+2. Click **+ icon** and select **Go build**\n+3. Add the following configuration:\n+```text\n+        Name: Run argocd-server\n+        Run kind: File\n+        File: cmd/argocd-server/main.go\n+        Working directory: `path to your Argo CD repo root`\n+```\n+4. Set the environment variables:\n+```text\n+        ARGOCD_BINARY_NAME: argocd-server\n+        CGO_ENABLED: 0\n+        KUBECONFIG: (path to your .kubeconfig)",
        "comment_created_at": "2025-07-05T03:49:11+00:00",
        "comment_author": "ishansaini194",
        "comment_body": "Yes, it's set by default but sometimes it's not, like when switching btw clusters and also Telepresence changes it in some case. So I thought better to mention it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2186904184",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23660,
        "pr_file": "docs/developer-guide/debugging-remote-environment.md",
        "discussion_id": "2185855594",
        "commented_code": "@@ -84,4 +84,25 @@ In VSCode use the following launch configuration to run argocd-server:\n             }\n         }\n ```\n+### GoLand\n+In GoLand use the following launch configuration to run argocd-server:\n+\n+1. Open **Run `>` Edit configurations...**\n+2. Click **+ icon** and select **Go build**\n+3. Add the following configuration:\n+```text\n+        Name: Run argocd-server\n+        Run kind: File\n+        File: cmd/argocd-server/main.go\n+        Working directory: `path to your Argo CD repo root`\n+```\n+4. Set the environment variables:\n+```text\n+        ARGOCD_BINARY_NAME: argocd-server\n+        CGO_ENABLED: 0\n+        KUBECONFIG: (path to your .kubeconfig)",
        "comment_created_at": "2025-07-05T07:22:42+00:00",
        "comment_author": "nitishfy",
        "comment_body": "This is an incomplete list of env variables that are required. Same comment as above, please see the [Procfile](https://github.com/argoproj/argo-cd/blob/master/Procfile#L2) as those env vars are the one that are typically required to run components in debug mode.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2052649525",
    "pr_number": 22706,
    "pr_file": "docs/operator-manual/notifications/services/email.md",
    "created_at": "2025-04-21T15:57:47+00:00",
    "commented_code": "* `host` - the SMTP server host name\n * `port` - the SMTP server port\n-* `username` - username\n-* `password` - password\n-* `from` - from email address\n+* `username` - user email address \n+* `password` - user app password  // To create your app password, follow this link https://myaccount.google.com/apppasswords",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2052649525",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22706,
        "pr_file": "docs/operator-manual/notifications/services/email.md",
        "discussion_id": "2052649525",
        "commented_code": "@@ -6,9 +6,9 @@ The Email notification service sends email notifications using SMTP protocol and\n \n * `host` - the SMTP server host name\n * `port` - the SMTP server port\n-* `username` - username\n-* `password` - password\n-* `from` - from email address\n+* `username` - user email address \n+* `password` - user app password  // To create your app password, follow this link https://myaccount.google.com/apppasswords",
        "comment_created_at": "2025-04-21T15:57:47+00:00",
        "comment_author": "todaywasawesome",
        "comment_body": "These are \"gmail\" specific and should be moved to their own section. \r\n\r\nAfter the parameters section, I suggested adding \"Using Gmail\" and specify the username needs to be an email address and the app password should be created using this link. \r\n\r\nNot all SMTP configurations require using email address for example. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2053611164",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22706,
        "pr_file": "docs/operator-manual/notifications/services/email.md",
        "discussion_id": "2052649525",
        "commented_code": "@@ -6,9 +6,9 @@ The Email notification service sends email notifications using SMTP protocol and\n \n * `host` - the SMTP server host name\n * `port` - the SMTP server port\n-* `username` - username\n-* `password` - password\n-* `from` - from email address\n+* `username` - user email address \n+* `password` - user app password  // To create your app password, follow this link https://myaccount.google.com/apppasswords",
        "comment_created_at": "2025-04-22T08:29:24+00:00",
        "comment_author": "blakepettersson",
        "comment_body": "I agree 100% with @todaywasawesome . This should also state that this is specific when using private (non Google Workspace) GMail accounts (IIRC the process is slightly different for those cases)",
        "pr_file_module": null
      },
      {
        "comment_id": "2053622621",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22706,
        "pr_file": "docs/operator-manual/notifications/services/email.md",
        "discussion_id": "2052649525",
        "commented_code": "@@ -6,9 +6,9 @@ The Email notification service sends email notifications using SMTP protocol and\n \n * `host` - the SMTP server host name\n * `port` - the SMTP server port\n-* `username` - username\n-* `password` - password\n-* `from` - from email address\n+* `username` - user email address \n+* `password` - user app password  // To create your app password, follow this link https://myaccount.google.com/apppasswords",
        "comment_created_at": "2025-04-22T08:35:36+00:00",
        "comment_author": "afzal442",
        "comment_body": "sure thing!",
        "pr_file_module": null
      }
    ]
  }
]