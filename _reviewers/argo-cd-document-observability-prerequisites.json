[
  {
    "discussion_id": "2190931524",
    "pr_number": 23669,
    "pr_file": "docs/developer-guide/debugging-locally.md",
    "created_at": "2025-07-07T20:08:53+00:00",
    "commented_code": "+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2190931524",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2190931524",
        "commented_code": "@@ -0,0 +1,131 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.",
        "comment_created_at": "2025-07-07T20:08:53+00:00",
        "comment_author": "dudinea",
        "comment_body": "One does not always need to run separately in the IDE the component being debugged. One can attach with debuggers to already running processes, which were started in a regular way outside of IDE, even including ones running in containers.\r\n\r\nIt does not work well, however, with processes that run from Procfile, because it uses \"go run\" (which does not load debug symbols) instead of building the binary and running it normally.",
        "pr_file_module": null
      },
      {
        "comment_id": "2192547538",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/debugging-locally.md",
        "discussion_id": "2190931524",
        "commented_code": "@@ -0,0 +1,131 @@\n+# Debugging a local Argo CD instance\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+3. [Development Cycle](development-cycle.md)\n+4. [Running Locally](running-locally.md)\n+\n+## Preface\n+Please make sure you are familiar with running Argo CD locally using the [local toolchain](running-locally.md#start-local-services-local-toolchain).\n+\n+When running Argo CD locally for manual tests, the quickest way to do so is to run all the Argo CD components together, as described in [Running Locally](running-locally.md), \n+\n+However, when you need to debug a single Argo CD component (for example, api-server, repo-server, etc), you will need to run this component separately in your IDE, using your IDE launch and debug configuration, while the other components will be running as described previously, using the local toolchain.",
        "comment_created_at": "2025-07-08T13:32:01+00:00",
        "comment_author": "reggie-k",
        "comment_body": "Good catch! We will add debugging an existing process outside of the IDE as a follow-up PR.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151014598",
    "pr_number": 22864,
    "pr_file": "docs/operator-manual/metrics.md",
    "created_at": "2025-06-16T22:42:08+00:00",
    "commented_code": "| `argocd_kubectl_request_retries_total`            |  counter  | Number of kubectl request retries.                                                                                                                                                          |\n | `argocd_kubectl_transport_cache_entries`          |   gauge   | Number of kubectl transport cache entries.                                                                                                                                                  |\n | `argocd_kubectl_transport_create_calls_total`     |  counter  | Number of kubectl transport create calls.                                                                                                                                                   |\n+| `argocd_github_api_requests_total`     |  counter  | Number of Github API calls. It contains labels for the name and namespace of an applicationset.|",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2151014598",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22864,
        "pr_file": "docs/operator-manual/metrics.md",
        "discussion_id": "2151014598",
        "commented_code": "@@ -147,6 +147,13 @@ The Application Set controller exposes the following metrics for application set\n | `argocd_kubectl_request_retries_total`            |  counter  | Number of kubectl request retries.                                                                                                                                                          |\n | `argocd_kubectl_transport_cache_entries`          |   gauge   | Number of kubectl transport cache entries.                                                                                                                                                  |\n | `argocd_kubectl_transport_create_calls_total`     |  counter  | Number of kubectl transport create calls.                                                                                                                                                   |\n+| `argocd_github_api_requests_total`     |  counter  | Number of Github API calls. It contains labels for the name and namespace of an applicationset.|",
        "comment_created_at": "2025-06-16T22:42:08+00:00",
        "comment_author": "agaudreault",
        "comment_body": "Format table + add info block that all `argocd_github_api` commands will only be enabled when the flag is configured.",
        "pr_file_module": null
      }
    ]
  }
]