[
  {
    "discussion_id": "1707273431",
    "pr_number": 18646,
    "pr_file": "pkg/apis/application/v1alpha1/repository_types.go",
    "created_at": "2024-08-07T15:31:21+00:00",
    "commented_code": "}\n }\n \n+// GetOciCreds returns the credentials from a repository configuration used to authenticate an OCI repository\n+func (repo *Repository) GetOciCreds() oci.Creds {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1707273431",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "pkg/apis/application/v1alpha1/repository_types.go",
        "discussion_id": "1707273431",
        "commented_code": "@@ -219,6 +223,19 @@ func (repo *Repository) GetHelmCreds() helm.Creds {\n \t}\n }\n \n+// GetOciCreds returns the credentials from a repository configuration used to authenticate an OCI repository\n+func (repo *Repository) GetOciCreds() oci.Creds {",
        "comment_created_at": "2024-08-07T15:31:21+00:00",
        "comment_author": "shizhMSFT",
        "comment_body": "nit: it is better to have `OCI` in capital letters per effective go.\r\n```suggestion\r\nfunc (repo *Repository) GetOCICreds() oci.Creds {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1707275854",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "pkg/apis/application/v1alpha1/repository_types.go",
        "discussion_id": "1707273431",
        "commented_code": "@@ -219,6 +223,19 @@ func (repo *Repository) GetHelmCreds() helm.Creds {\n \t}\n }\n \n+// GetOciCreds returns the credentials from a repository configuration used to authenticate an OCI repository\n+func (repo *Repository) GetOciCreds() oci.Creds {",
        "comment_created_at": "2024-08-07T15:32:18+00:00",
        "comment_author": "shizhMSFT",
        "comment_body": "This comment also applies to other parts of the code.",
        "pr_file_module": null
      },
      {
        "comment_id": "1726899862",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "pkg/apis/application/v1alpha1/repository_types.go",
        "discussion_id": "1707273431",
        "commented_code": "@@ -219,6 +223,19 @@ func (repo *Repository) GetHelmCreds() helm.Creds {\n \t}\n }\n \n+// GetOciCreds returns the credentials from a repository configuration used to authenticate an OCI repository\n+func (repo *Repository) GetOciCreds() oci.Creds {",
        "comment_created_at": "2024-08-22T11:44:02+00:00",
        "comment_author": "blakepettersson",
        "comment_body": "Done, thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1977697025",
    "pr_number": 22111,
    "pr_file": "pkg/apis/application/v1alpha1/types.go",
    "created_at": "2025-03-03T15:14:54+00:00",
    "commented_code": "})\n }\n \n+// ParamEntry represents an entry in the application's parameters\n+type ParamEntry struct {\n+\t// Name is the name of the variable, usually expressed in uppercase\n+\tName string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`\n+\t// StringValue is the string of the variable\n+\tStringValue *string `json:\"string\" protobuf:\"bytes,2,opt,name=string\"`",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1977697025",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22111,
        "pr_file": "pkg/apis/application/v1alpha1/types.go",
        "discussion_id": "1977697025",
        "commented_code": "@@ -174,6 +174,61 @@ func (e Env) Envsubst(s string) string {\n \t})\n }\n \n+// ParamEntry represents an entry in the application's parameters\n+type ParamEntry struct {\n+\t// Name is the name of the variable, usually expressed in uppercase\n+\tName string `json:\"name\" protobuf:\"bytes,1,opt,name=name\"`\n+\t// StringValue is the string of the variable\n+\tStringValue *string `json:\"string\" protobuf:\"bytes,2,opt,name=string\"`",
        "comment_created_at": "2025-03-03T15:14:54+00:00",
        "comment_author": "kingbj940429",
        "comment_body": "a golangci-lint guides to do not use underscores in go names\r\n![image](https://github.com/user-attachments/assets/dc4b0d37-64a6-45c0-9e26-2eec6db0d4f0)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835230475",
    "pr_number": 20653,
    "pr_file": "applicationset/generators/git.go",
    "created_at": "2024-11-09T02:49:37+00:00",
    "commented_code": "}\n \t\t}\n \n-\t\terr := appendTemplatedValues(values, params, useGoTemplate, goTemplateOptions)\n+\t\terr := appendTemplatedValues(git.Values, params, useGoTemplate, goTemplateOptions)\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"failed to append templated values: %w\", err)\n \t\t}\n \n+\t\t// Get the common parameters from files, removing duplicates\n+\t\t// We need to resolve them for each git file, as they could depend on parameters inside\n+\t\terr = g.appendExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n \t\tres = append(res, params)\n \t}\n \n \treturn res, nil\n }\n \n+func (g *GitGenerator) appendExtraParams(git *argoprojiov1alpha1.GitGenerator, goTemplateOptions []string, useGoTemplate bool, noRevisionCache bool, verifyCommit bool, params map[string]interface{}) error {\n+\textraParams, err := g.getExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to append extra parameters from files: %w\", err)\n+\t}\n+\tif len(extraParams) == 0 {\n+\t\treturn nil\n+\t}\n+\tif useGoTemplate {\n+\t\tparams[\"extraParams\"] = extraParams\n+\t} else {\n+\t\tflat, err := flatten.Flatten(extraParams, \"\", flatten.DotStyle)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error flattening extra params: %w\", err)\n+\t\t}\n+\t\tfor k, v := range flat {\n+\t\t\tparams[\"extraParams.\"+fmt.Sprintf(\"%v\", k)] = fmt.Sprintf(\"%v\", v)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func unMarshalYamlFile(fileContent []byte) ([]map[string]interface{}, error) {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1835230475",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20653,
        "pr_file": "applicationset/generators/git.go",
        "discussion_id": "1835230475",
        "commented_code": "@@ -222,17 +212,108 @@ func (g *GitGenerator) generateParamsFromGitFile(filePath string, fileContent []\n \t\t\t}\n \t\t}\n \n-\t\terr := appendTemplatedValues(values, params, useGoTemplate, goTemplateOptions)\n+\t\terr := appendTemplatedValues(git.Values, params, useGoTemplate, goTemplateOptions)\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"failed to append templated values: %w\", err)\n \t\t}\n \n+\t\t// Get the common parameters from files, removing duplicates\n+\t\t// We need to resolve them for each git file, as they could depend on parameters inside\n+\t\terr = g.appendExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n \t\tres = append(res, params)\n \t}\n \n \treturn res, nil\n }\n \n+func (g *GitGenerator) appendExtraParams(git *argoprojiov1alpha1.GitGenerator, goTemplateOptions []string, useGoTemplate bool, noRevisionCache bool, verifyCommit bool, params map[string]interface{}) error {\n+\textraParams, err := g.getExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to append extra parameters from files: %w\", err)\n+\t}\n+\tif len(extraParams) == 0 {\n+\t\treturn nil\n+\t}\n+\tif useGoTemplate {\n+\t\tparams[\"extraParams\"] = extraParams\n+\t} else {\n+\t\tflat, err := flatten.Flatten(extraParams, \"\", flatten.DotStyle)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error flattening extra params: %w\", err)\n+\t\t}\n+\t\tfor k, v := range flat {\n+\t\t\tparams[\"extraParams.\"+fmt.Sprintf(\"%v\", k)] = fmt.Sprintf(\"%v\", v)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func unMarshalYamlFile(fileContent []byte) ([]map[string]interface{}, error) {",
        "comment_created_at": "2024-11-09T02:49:37+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "I'd not capitalize M, since other libs don't do that, e.g. have the name `Unmarshal`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1837630815",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20653,
        "pr_file": "applicationset/generators/git.go",
        "discussion_id": "1835230475",
        "commented_code": "@@ -222,17 +212,108 @@ func (g *GitGenerator) generateParamsFromGitFile(filePath string, fileContent []\n \t\t\t}\n \t\t}\n \n-\t\terr := appendTemplatedValues(values, params, useGoTemplate, goTemplateOptions)\n+\t\terr := appendTemplatedValues(git.Values, params, useGoTemplate, goTemplateOptions)\n \t\tif err != nil {\n \t\t\treturn nil, fmt.Errorf(\"failed to append templated values: %w\", err)\n \t\t}\n \n+\t\t// Get the common parameters from files, removing duplicates\n+\t\t// We need to resolve them for each git file, as they could depend on parameters inside\n+\t\terr = g.appendExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n \t\tres = append(res, params)\n \t}\n \n \treturn res, nil\n }\n \n+func (g *GitGenerator) appendExtraParams(git *argoprojiov1alpha1.GitGenerator, goTemplateOptions []string, useGoTemplate bool, noRevisionCache bool, verifyCommit bool, params map[string]interface{}) error {\n+\textraParams, err := g.getExtraParams(git, goTemplateOptions, useGoTemplate, noRevisionCache, verifyCommit, params)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to append extra parameters from files: %w\", err)\n+\t}\n+\tif len(extraParams) == 0 {\n+\t\treturn nil\n+\t}\n+\tif useGoTemplate {\n+\t\tparams[\"extraParams\"] = extraParams\n+\t} else {\n+\t\tflat, err := flatten.Flatten(extraParams, \"\", flatten.DotStyle)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"error flattening extra params: %w\", err)\n+\t\t}\n+\t\tfor k, v := range flat {\n+\t\t\tparams[\"extraParams.\"+fmt.Sprintf(\"%v\", k)] = fmt.Sprintf(\"%v\", v)\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+func unMarshalYamlFile(fileContent []byte) ([]map[string]interface{}, error) {",
        "comment_created_at": "2024-11-12T07:57:00+00:00",
        "comment_author": "OpenGuidou",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864230716",
    "pr_number": 19830,
    "pr_file": "cmd/argocd/commands/app.go",
    "created_at": "2024-11-30T11:52:23+00:00",
    "commented_code": "}\n \n // printAppResources prints the resources of an application in a tabwriter table\n-func printAppResources(w io.Writer, app *argoappv1.Application) {\n+func printAppResources(w io.Writer, app *argoappv1.Application, discoveryClient discovery.DiscoveryInterface) {\n \t_, _ = fmt.Fprintf(w, \"GROUP\\tKIND\\tNAMESPACE\\tNAME\\tSTATUS\\tHEALTH\\tHOOK\\tMESSAGE\n\")\n-\tfor _, res := range getResourceStates(app, nil) {\n+\tversionedResourceStates := getVersionedResourceStates(app, nil)\n+\tfor _, res := range mergeDuplicateClusterLevelResources(versionedResourceStates, discoveryClient) {\n \t\t_, _ = fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\n\", res.Group, res.Kind, res.Namespace, res.Name, res.Status, res.Health, res.Hook, res.Message)\n \t}\n }\n \n+func mergeDuplicateClusterLevelResources(resourceStates []*versionedResourceState, discoveryClient discovery.DiscoveryInterface) []*versionedResourceState {\n+\tresourcesByKey := make(map[kube.ResourceKey]*versionedResourceState)\n+\tfor _, resource := range resourceStates {\n+\t\tgroupVersion := \"\"\n+\t\tif resource.Group != \"\" {\n+\t\t\tgroupVersion += (resource.Group + \"/\")\n+\t\t}\n+\t\tgroupVersion += resource.Version",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1864230716",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 19830,
        "pr_file": "cmd/argocd/commands/app.go",
        "discussion_id": "1864230716",
        "commented_code": "@@ -1893,13 +1915,53 @@ func NewApplicationWaitCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n }\n \n // printAppResources prints the resources of an application in a tabwriter table\n-func printAppResources(w io.Writer, app *argoappv1.Application) {\n+func printAppResources(w io.Writer, app *argoappv1.Application, discoveryClient discovery.DiscoveryInterface) {\n \t_, _ = fmt.Fprintf(w, \"GROUP\\tKIND\\tNAMESPACE\\tNAME\\tSTATUS\\tHEALTH\\tHOOK\\tMESSAGE\\n\")\n-\tfor _, res := range getResourceStates(app, nil) {\n+\tversionedResourceStates := getVersionedResourceStates(app, nil)\n+\tfor _, res := range mergeDuplicateClusterLevelResources(versionedResourceStates, discoveryClient) {\n \t\t_, _ = fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", res.Group, res.Kind, res.Namespace, res.Name, res.Status, res.Health, res.Hook, res.Message)\n \t}\n }\n \n+func mergeDuplicateClusterLevelResources(resourceStates []*versionedResourceState, discoveryClient discovery.DiscoveryInterface) []*versionedResourceState {\n+\tresourcesByKey := make(map[kube.ResourceKey]*versionedResourceState)\n+\tfor _, resource := range resourceStates {\n+\t\tgroupVersion := \"\"\n+\t\tif resource.Group != \"\" {\n+\t\t\tgroupVersion += (resource.Group + \"/\")\n+\t\t}\n+\t\tgroupVersion += resource.Version",
        "comment_created_at": "2024-11-30T11:52:23+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "groupVersion is the same as APIVersion used on the backend. Let's use the later name for consistency.",
        "pr_file_module": null
      },
      {
        "comment_id": "1864894713",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 19830,
        "pr_file": "cmd/argocd/commands/app.go",
        "discussion_id": "1864230716",
        "commented_code": "@@ -1893,13 +1915,53 @@ func NewApplicationWaitCommand(clientOpts *argocdclient.ClientOptions) *cobra.Co\n }\n \n // printAppResources prints the resources of an application in a tabwriter table\n-func printAppResources(w io.Writer, app *argoappv1.Application) {\n+func printAppResources(w io.Writer, app *argoappv1.Application, discoveryClient discovery.DiscoveryInterface) {\n \t_, _ = fmt.Fprintf(w, \"GROUP\\tKIND\\tNAMESPACE\\tNAME\\tSTATUS\\tHEALTH\\tHOOK\\tMESSAGE\\n\")\n-\tfor _, res := range getResourceStates(app, nil) {\n+\tversionedResourceStates := getVersionedResourceStates(app, nil)\n+\tfor _, res := range mergeDuplicateClusterLevelResources(versionedResourceStates, discoveryClient) {\n \t\t_, _ = fmt.Fprintf(w, \"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", res.Group, res.Kind, res.Namespace, res.Name, res.Status, res.Health, res.Hook, res.Message)\n \t}\n }\n \n+func mergeDuplicateClusterLevelResources(resourceStates []*versionedResourceState, discoveryClient discovery.DiscoveryInterface) []*versionedResourceState {\n+\tresourcesByKey := make(map[kube.ResourceKey]*versionedResourceState)\n+\tfor _, resource := range resourceStates {\n+\t\tgroupVersion := \"\"\n+\t\tif resource.Group != \"\" {\n+\t\t\tgroupVersion += (resource.Group + \"/\")\n+\t\t}\n+\t\tgroupVersion += resource.Version",
        "comment_created_at": "2024-12-01T13:30:24+00:00",
        "comment_author": "thecooldrop",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2144032160",
    "pr_number": 22864,
    "pr_file": "applicationset/services/github_metrics.go",
    "created_at": "2025-06-13T01:33:00+00:00",
    "commented_code": "+package services\n+\n+import (\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"time\"\n+\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/metrics\"\n+)\n+\n+// Doc for the GitHub API rate limit headers:\n+// https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#checking-the-status-of-your-rate-limit\n+\n+// Metric names as constants\n+const (\n+\tgithubAPIRequestTotalPerAppSetMetricName       = \"argocd_github_api_requests_total_per_appset\"\n+\tgithubAPIRequestDurationPerAppSetMetricName    = \"argocd_github_api_request_duration_seconds_per_appset\"\n+\tgithubAPIRateLimitRemainingPerAppSetMetricName = \"argocd_github_api_rate_limit_remaining_per_appset\"\n+\tgithubAPIRateLimitLimitPerAppSetMetricName     = \"argocd_github_api_rate_limit_limit_per_appset\"\n+\tgithubAPIRateLimitResetPerAppSetMetricName     = \"argocd_github_api_rate_limit_reset_per_appset\"",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2144032160",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22864,
        "pr_file": "applicationset/services/github_metrics.go",
        "discussion_id": "2144032160",
        "commented_code": "@@ -0,0 +1,257 @@\n+package services\n+\n+import (\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"time\"\n+\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"sigs.k8s.io/controller-runtime/pkg/metrics\"\n+)\n+\n+// Doc for the GitHub API rate limit headers:\n+// https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#checking-the-status-of-your-rate-limit\n+\n+// Metric names as constants\n+const (\n+\tgithubAPIRequestTotalPerAppSetMetricName       = \"argocd_github_api_requests_total_per_appset\"\n+\tgithubAPIRequestDurationPerAppSetMetricName    = \"argocd_github_api_request_duration_seconds_per_appset\"\n+\tgithubAPIRateLimitRemainingPerAppSetMetricName = \"argocd_github_api_rate_limit_remaining_per_appset\"\n+\tgithubAPIRateLimitLimitPerAppSetMetricName     = \"argocd_github_api_rate_limit_limit_per_appset\"\n+\tgithubAPIRateLimitResetPerAppSetMetricName     = \"argocd_github_api_rate_limit_reset_per_appset\"",
        "comment_created_at": "2025-06-13T01:33:00+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "I think convention is to add a `_seconds` suffix to timestamp gauges.",
        "pr_file_module": null
      }
    ]
  }
]