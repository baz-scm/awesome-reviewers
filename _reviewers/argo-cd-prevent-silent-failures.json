[
  {
    "discussion_id": "2051166649",
    "pr_number": 20097,
    "pr_file": "ui/src/app/applications/components/utils.tsx",
    "created_at": "2025-04-18T21:56:24+00:00",
    "commented_code": "};\n \n export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                console.log('title:', title);\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2051166649",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20097,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "2051166649",
        "commented_code": "@@ -522,32 +522,59 @@ export const deletePopup = async (\n };\n \n export function getResourceActionsMenuItems(resource: ResourceTreeNode, metadata: models.ObjectMeta, apis: ContextApis): Promise<ActionMenuItem[]> {\n-    return services.applications\n-        .getResourceActions(metadata.name, metadata.namespace, resource)\n-        .then(actions => {\n-            return actions.map(\n-                action =>\n-                    ({\n-                        title: action.displayName ?? action.name,\n-                        disabled: !!action.disabled,\n-                        iconClassName: action.iconClass,\n-                        action: async () => {\n+    return services.applications.getResourceActions(metadata.name, metadata.namespace, resource).then(actions => {\n+        return actions.map(action => ({\n+            title: action.displayName ?? action.name,\n+            disabled: !!action.disabled,\n+            iconClassName: action.iconClass,\n+            action: async () => {\n+                const confirmed = false;\n+                const title = action.hasParameters ? `Enter input parameters for action: ${action.name}` : `Perform ${action.name} action?`;\n+                console.log('title:', title);\n+                await apis.popup.prompt(\n+                    title,\n+                    api => (\n+                        <div>\n+                            {!action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <div> Are you sure you want to perform {action.name} action?</div>\n+                                </div>\n+                            )}\n+                            {action.hasParameters && (\n+                                <div className='argo-form-row'>\n+                                    <FormField formApi={api} field='inputParameter' component={Text} componentProps={{showErrors: true}} />\n+                                </div>\n+                            )}\n+                        </div>\n+                    ),\n+                    {\n+                        validate: vals => {\n+                            return {\n+                                inputParameter: vals.inputParameter && action.regexp && !vals.inputParameter.match(action.regexp) ? action.errorMessage : undefined",
        "comment_created_at": "2025-04-18T21:56:24+00:00",
        "comment_author": "murmur76",
        "comment_body": "you can also iterate vals(key-value map) to return validation object.\r\nex.\r\n```ts\r\nreturn (action.params || []).reduce((acc, param) => {\r\n    acc[param.name] = vals[param.name] && vals[param.name].match(param.type) ?\r\n        undefined : `required format: ${param.type}`;\r\n    return acc;\r\n}, {});\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091527490",
    "pr_number": 12165,
    "pr_file": "ui/src/app/applications/components/application-details/application-details.tsx",
    "created_at": "2025-05-15T16:02:20+00:00",
    "commented_code": "this.appChanged.next(app);\n                     }\n                 }\n+            },\n+            {\n+                iconClassName: classNames('fa fa-redo', {'status-icon--spin': !!refreshing}),\n+                title: <ActionMenuItem actionLabel='Invalidate Cache' />,\n+                action: () => {\n+                    if (!refreshing) {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2091527490",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 12165,
        "pr_file": "ui/src/app/applications/components/application-details/application-details.tsx",
        "discussion_id": "2091527490",
        "commented_code": "@@ -1045,6 +1032,17 @@ export class ApplicationDetails extends React.Component<RouteComponentProps<{app\n                         this.appChanged.next(app);\n                     }\n                 }\n+            },\n+            {\n+                iconClassName: classNames('fa fa-redo', {'status-icon--spin': !!refreshing}),\n+                title: <ActionMenuItem actionLabel='Invalidate Cache' />,\n+                action: () => {\n+                    if (!refreshing) {",
        "comment_created_at": "2025-05-15T16:02:20+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "Should we disable the button if there's an ongoing refresh? Otherwise looks like the click gets silently ignored.",
        "pr_file_module": null
      }
    ]
  }
]