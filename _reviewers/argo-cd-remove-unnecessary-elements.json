[
  {
    "discussion_id": "2188474042",
    "pr_number": 23669,
    "pr_file": "docs/developer-guide/development-cycle.md",
    "created_at": "2025-07-06T17:05:52+00:00",
    "commented_code": "+# The Development Cycle\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+\n+## Preface \n+When you have developed and possibly manually tested the code you want to contribute, you should ensure that everything will build correctly. Commit your changes to the local copy of your Git branch and perform the following steps, for each step the commands for both local and virtualized toolchain are available. \n+\n+### Docker priviliges for virtualized chain users\n+[These instructions](toolchain-guide.md#docker-privileges) are relevant for most of the steps below \n+\n+### Using Podman for virtualized chain users\n+[These instructions](toolchain-guide.md#using-podman) are relevant for most of the steps below \n+\n+## Development cycle steps\n+### Set kubectl context to argocd namespace\n+\n+Set kubectl config to argocd namespace is required for all the following steps to succeed.\n+All following commands in this guide assume the namespace is already set.\n+\n+```shell\n+kubectl config set-context --current --namespace=argocd\n+```\n+\n+### Pull in all build dependencies\n+\n+As build dependencies change over time, you have to synchronize your development environment with the current specification. In order to pull in all required dependencies, issue:\n+\n+* `make dep-ui` or `make dep-ui-local`\n+\n+Argo CD recently migrated to Go modules. Usually, dependencies will be downloaded on build time, but the Makefile provides two targets to download and vendor all dependencies:\n+\n+* `make mod-download` or `make mod-download-local` will download all required Go modules and\n+* `make mod-vendor` or `make mod-vendor-local` will vendor those dependencies into the Argo CD source tree\n+\n+### Generate API glue code and other assets\n+\n+Argo CD relies on Google's [Protocol Buffers](https://developers.google.com/protocol-buffers) for its API, and this makes heavy use of auto-generated glue code and stubs. Whenever you touched parts of the API code, you must re-generate the auto generated code.\n+\n+* Run `make codegen` or `make codegen-local`, this might take a while\n+* Check if something has changed by running `git status` or `git diff`\n+* Commit any possible changes to your local Git branch, an appropriate commit message would be `Changes from codegen`, for example.\n+\n+!!!note\n+    There are a few non-obvious assets that are auto-generated. You should not change the autogenerated assets, as they will be overwritten by a subsequent run of `make codegen`. Instead, change their source files. Prominent examples of non-obvious auto-generated code are `swagger.json` or the installation manifest YAMLs.\n+\n+### Build your code and run unit tests\n+\n+After the code glue has been generated, your code should build and the unit tests should run without any errors. Execute the following statements:\n+\n+* `make build` or `make build-local`\n+* `make test` or `make test-local`\n+\n+These steps are non-modifying, so there's no need to check for changes afterward.\n+\n+### Lint your code base\n+\n+In order to keep a consistent code style in our source tree, your code must be well-formed in accordance to some widely accepted rules, which are applied by a Linter.\n+\n+The Linter might make some automatic changes to your code, such as indentation fixes. Some other errors reported by the Linter have to be fixed manually.\n+\n+* Run `make lint` or `make lint-local` and observe any errors reported by the Linter\n+* Fix any of the errors reported and commit to your local branch\n+* Finally, after the Linter reports no errors anymore, run `git status` or `git diff` to check for any changes made automatically by Lint",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2188474042",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23669,
        "pr_file": "docs/developer-guide/development-cycle.md",
        "discussion_id": "2188474042",
        "commented_code": "@@ -0,0 +1,118 @@\n+# The Development Cycle\n+\n+## Prerequisites\n+1. [Development Environment](development-environment.md)   \n+2. [Toolchain Guide](toolchain-guide.md)\n+\n+## Preface \n+When you have developed and possibly manually tested the code you want to contribute, you should ensure that everything will build correctly. Commit your changes to the local copy of your Git branch and perform the following steps, for each step the commands for both local and virtualized toolchain are available. \n+\n+### Docker priviliges for virtualized chain users\n+[These instructions](toolchain-guide.md#docker-privileges) are relevant for most of the steps below \n+\n+### Using Podman for virtualized chain users\n+[These instructions](toolchain-guide.md#using-podman) are relevant for most of the steps below \n+\n+## Development cycle steps\n+### Set kubectl context to argocd namespace\n+\n+Set kubectl config to argocd namespace is required for all the following steps to succeed.\n+All following commands in this guide assume the namespace is already set.\n+\n+```shell\n+kubectl config set-context --current --namespace=argocd\n+```\n+\n+### Pull in all build dependencies\n+\n+As build dependencies change over time, you have to synchronize your development environment with the current specification. In order to pull in all required dependencies, issue:\n+\n+* `make dep-ui` or `make dep-ui-local`\n+\n+Argo CD recently migrated to Go modules. Usually, dependencies will be downloaded on build time, but the Makefile provides two targets to download and vendor all dependencies:\n+\n+* `make mod-download` or `make mod-download-local` will download all required Go modules and\n+* `make mod-vendor` or `make mod-vendor-local` will vendor those dependencies into the Argo CD source tree\n+\n+### Generate API glue code and other assets\n+\n+Argo CD relies on Google's [Protocol Buffers](https://developers.google.com/protocol-buffers) for its API, and this makes heavy use of auto-generated glue code and stubs. Whenever you touched parts of the API code, you must re-generate the auto generated code.\n+\n+* Run `make codegen` or `make codegen-local`, this might take a while\n+* Check if something has changed by running `git status` or `git diff`\n+* Commit any possible changes to your local Git branch, an appropriate commit message would be `Changes from codegen`, for example.\n+\n+!!!note\n+    There are a few non-obvious assets that are auto-generated. You should not change the autogenerated assets, as they will be overwritten by a subsequent run of `make codegen`. Instead, change their source files. Prominent examples of non-obvious auto-generated code are `swagger.json` or the installation manifest YAMLs.\n+\n+### Build your code and run unit tests\n+\n+After the code glue has been generated, your code should build and the unit tests should run without any errors. Execute the following statements:\n+\n+* `make build` or `make build-local`\n+* `make test` or `make test-local`\n+\n+These steps are non-modifying, so there's no need to check for changes afterward.\n+\n+### Lint your code base\n+\n+In order to keep a consistent code style in our source tree, your code must be well-formed in accordance to some widely accepted rules, which are applied by a Linter.\n+\n+The Linter might make some automatic changes to your code, such as indentation fixes. Some other errors reported by the Linter have to be fixed manually.\n+\n+* Run `make lint` or `make lint-local` and observe any errors reported by the Linter\n+* Fix any of the errors reported and commit to your local branch\n+* Finally, after the Linter reports no errors anymore, run `git status` or `git diff` to check for any changes made automatically by Lint",
        "comment_created_at": "2025-07-06T17:05:52+00:00",
        "comment_author": "todaywasawesome",
        "comment_body": "```suggestion\n* Finally, after the Linter reports no errors, run `git status` or `git diff` to check for any changes made automatically by Lint\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152643731",
    "pr_number": 22969,
    "pr_file": "docs/operator-manual/declarative-setup.md",
    "created_at": "2025-06-17T16:03:21+00:00",
    "commented_code": "labels:\n     argocd.argoproj.io/secret-type: repository\n stringData:\n-  type: git\n-  url: https://github.com/argoproj/private-repo\n-  password: my-password\n-  username: my-username\n-  project: my-project\n+  type: \"git\"",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2152643731",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22969,
        "pr_file": "docs/operator-manual/declarative-setup.md",
        "discussion_id": "2152643731",
        "commented_code": "@@ -193,14 +210,18 @@ metadata:\n   labels:\n     argocd.argoproj.io/secret-type: repository\n stringData:\n-  type: git\n-  url: https://github.com/argoproj/private-repo\n-  password: my-password\n-  username: my-username\n-  project: my-project\n+  type: \"git\"",
        "comment_created_at": "2025-06-17T16:03:21+00:00",
        "comment_author": "agaudreault",
        "comment_body": "don't unnecessarily quote yaml. If quoting is necessary, use single quote.",
        "pr_file_module": null
      },
      {
        "comment_id": "2164159222",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22969,
        "pr_file": "docs/operator-manual/declarative-setup.md",
        "discussion_id": "2152643731",
        "commented_code": "@@ -193,14 +210,18 @@ metadata:\n   labels:\n     argocd.argoproj.io/secret-type: repository\n stringData:\n-  type: git\n-  url: https://github.com/argoproj/private-repo\n-  password: my-password\n-  username: my-username\n-  project: my-project\n+  type: \"git\"",
        "comment_created_at": "2025-06-24T14:19:04+00:00",
        "comment_author": "baer95",
        "comment_body": "corrected!",
        "pr_file_module": null
      }
    ]
  }
]