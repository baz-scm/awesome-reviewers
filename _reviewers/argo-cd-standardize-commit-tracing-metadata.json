[
  {
    "discussion_id": "2141132638",
    "pr_number": 23361,
    "pr_file": "docs/user-guide/source-hydrator.md",
    "created_at": "2025-06-11T21:15:42+00:00",
    "commented_code": "changes to the `syncSource` branch. You will need to use your own tooling to move the changes from the `hydrateTo` \n branch to the `syncSource` branch.\n \n+## Commit Tracing\n+\n+It's common for CI or other tooling to push DRY manifest changes after a code change. It's important for users to be\n+able to trace the hydrated commits back to the original code change that caused the hydration.\n+\n+Source Hydrator makes use of some custom git commit trailers to facilitate this tracing. A CI job that builds an image\n+and pushes an image bump to DRY manifests can use the following commit trailers to link the hydrated commit to the\n+code commit.\n+\n+```shell\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-related-commit-author: Author Name <author-email>\" \\\n+  --trailer \"Argocd-related-commit-sha: <code-commit-sha>\" \\\n+  --trailer \"Argocd-related-commit-subject: Commit message of the code commit\" \\\n+  --trailer \"Argocd-related-commit-repourl: https://git.example.com/owner/repo\" \\\n+  --trailer \"Argocd-related-commit-date: 2025-06-09T13:50:18-04:00\" # The date must by in ISO 8601 format\n+```\n+\n+So the full CI script might look something like this:\n+\n+```shell\n+# Clone code repo\n+git clone https://git.example.com/owner/repo.git\n+cd repo\n+\n+# Build the image and get the new image tag\n+# <cusom build logic here>\n+\n+# Get the commit information\n+author=$(git show -s --format='%an <%ae>')\n+sha=$(git rev-parse HEAD)\n+message=$(git show -s --format='%s')\n+repourl=$(git remote get-url origin)\n+date=$(git show -s --format='%aI')\n+\n+# Clone the dry source repo\n+git clone https://git.example.com/owner/deployment-repo.git\n+cd deployment-repo\n+\n+# Bump the image in the dry manifests\n+# <custom bump logic here, e.g. `kustomize edit`>\n+\n+# Commit the changes with the commit trailers\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-related-commit-author: $author\" \\\n+  --trailer \"Argocd-related-commit-sha: $sha\" \\\n+  --trailer \"Argocd-related-commit-subject: $message\" \\\n+  --trailer \"Argocd-related-commit-repourl: $repourl\" \\\n+  --trailer \"Argocd-related-commit-date: $date\"\n+```\n+\n+The commit metadata will appear in the hydrated commit's root hydrator.metadata file:\n+\n+```json\n+{\n+  \"relatedCommits\": [\n+    {\n+      \"author\": \"Author Name <author-email>\",\n+      \"sha\": \"<code-commit-sha>\",\n+      \"message\": \"Commit message of the code commit\",\n+      \"repoURL\": \"https://git.example.com/owner/repo\",\n+      \"date\": \"2025-06-09T13:50:18-04:00\"\n+    }\n+  ]\n+}",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2141132638",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23361,
        "pr_file": "docs/user-guide/source-hydrator.md",
        "discussion_id": "2141132638",
        "commented_code": "@@ -147,6 +147,75 @@ Argo CD will only push changes to the `hydrateTo` branch, it will not create a P\n changes to the `syncSource` branch. You will need to use your own tooling to move the changes from the `hydrateTo` \n branch to the `syncSource` branch.\n \n+## Commit Tracing\n+\n+It's common for CI or other tooling to push DRY manifest changes after a code change. It's important for users to be\n+able to trace the hydrated commits back to the original code change that caused the hydration.\n+\n+Source Hydrator makes use of some custom git commit trailers to facilitate this tracing. A CI job that builds an image\n+and pushes an image bump to DRY manifests can use the following commit trailers to link the hydrated commit to the\n+code commit.\n+\n+```shell\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-related-commit-author: Author Name <author-email>\" \\\n+  --trailer \"Argocd-related-commit-sha: <code-commit-sha>\" \\\n+  --trailer \"Argocd-related-commit-subject: Commit message of the code commit\" \\\n+  --trailer \"Argocd-related-commit-repourl: https://git.example.com/owner/repo\" \\\n+  --trailer \"Argocd-related-commit-date: 2025-06-09T13:50:18-04:00\" # The date must by in ISO 8601 format\n+```\n+\n+So the full CI script might look something like this:\n+\n+```shell\n+# Clone code repo\n+git clone https://git.example.com/owner/repo.git\n+cd repo\n+\n+# Build the image and get the new image tag\n+# <cusom build logic here>\n+\n+# Get the commit information\n+author=$(git show -s --format='%an <%ae>')\n+sha=$(git rev-parse HEAD)\n+message=$(git show -s --format='%s')\n+repourl=$(git remote get-url origin)\n+date=$(git show -s --format='%aI')\n+\n+# Clone the dry source repo\n+git clone https://git.example.com/owner/deployment-repo.git\n+cd deployment-repo\n+\n+# Bump the image in the dry manifests\n+# <custom bump logic here, e.g. `kustomize edit`>\n+\n+# Commit the changes with the commit trailers\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-related-commit-author: $author\" \\\n+  --trailer \"Argocd-related-commit-sha: $sha\" \\\n+  --trailer \"Argocd-related-commit-subject: $message\" \\\n+  --trailer \"Argocd-related-commit-repourl: $repourl\" \\\n+  --trailer \"Argocd-related-commit-date: $date\"\n+```\n+\n+The commit metadata will appear in the hydrated commit's root hydrator.metadata file:\n+\n+```json\n+{\n+  \"relatedCommits\": [\n+    {\n+      \"author\": \"Author Name <author-email>\",\n+      \"sha\": \"<code-commit-sha>\",\n+      \"message\": \"Commit message of the code commit\",\n+      \"repoURL\": \"https://git.example.com/owner/repo\",\n+      \"date\": \"2025-06-09T13:50:18-04:00\"\n+    }\n+  ]\n+}",
        "comment_created_at": "2025-06-11T21:15:42+00:00",
        "comment_author": "agaudreault",
        "comment_body": "By default, support (or not) Argocd-related-commit-type as a header. If it is not specifid, hydrator can decide to always assume git\r\n\r\n```suggestion\r\n{\r\n  \"references\": [\r\n    {\r\n      \"type\": \"commit\"\r\n      \"author\": \"Author Name <author-email>\",\r\n      \"sha\": \"<code-commit-sha>\",\r\n      \"message\": \"Commit message of the code commit\",\r\n      \"repoURL\": \"https://git.example.com/owner/repo\",\r\n      \"date\": \"2025-06-09T13:50:18-04:00\"\r\n    }\r\n  ]\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143713777",
    "pr_number": 23361,
    "pr_file": "docs/user-guide/source-hydrator.md",
    "created_at": "2025-06-12T21:44:44+00:00",
    "commented_code": "changes to the `syncSource` branch. You will need to use your own tooling to move the changes from the `hydrateTo` \n branch to the `syncSource` branch.\n \n+## Commit Tracing\n+\n+It's common for CI or other tooling to push DRY manifest changes after a code change. It's important for users to be\n+able to trace the hydrated commits back to the original code change that caused the hydration.\n+\n+Source Hydrator makes use of some custom git commit trailers to facilitate this tracing. A CI job that builds an image\n+and pushes an image bump to DRY manifests can use the following commit trailers to link the hydrated commit to the\n+code commit.\n+\n+```shell\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-reference-commit-author-name: Author Name\" \\\n+  --trailer \"Argocd-reference-commit-author-email: author@example.com\" \\\n+  --trailer \"Argocd-reference-commit-sha: <code-commit-sha>\" \\\n+  --trailer \"Argocd-reference-commit-subject: Commit message of the code commit\" \\",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2143713777",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23361,
        "pr_file": "docs/user-guide/source-hydrator.md",
        "discussion_id": "2143713777",
        "commented_code": "@@ -147,6 +147,89 @@ Argo CD will only push changes to the `hydrateTo` branch, it will not create a P\n changes to the `syncSource` branch. You will need to use your own tooling to move the changes from the `hydrateTo` \n branch to the `syncSource` branch.\n \n+## Commit Tracing\n+\n+It's common for CI or other tooling to push DRY manifest changes after a code change. It's important for users to be\n+able to trace the hydrated commits back to the original code change that caused the hydration.\n+\n+Source Hydrator makes use of some custom git commit trailers to facilitate this tracing. A CI job that builds an image\n+and pushes an image bump to DRY manifests can use the following commit trailers to link the hydrated commit to the\n+code commit.\n+\n+```shell\n+git commit -m \"Bump image to v1.2.3\" \\\n+  --trailer \"Argocd-reference-commit-author-name: Author Name\" \\\n+  --trailer \"Argocd-reference-commit-author-email: author@example.com\" \\\n+  --trailer \"Argocd-reference-commit-sha: <code-commit-sha>\" \\\n+  --trailer \"Argocd-reference-commit-subject: Commit message of the code commit\" \\",
        "comment_created_at": "2025-06-12T21:44:44+00:00",
        "comment_author": "agaudreault",
        "comment_body": "```suggestion\r\n  --trailer \"Argocd-reference-commit-message: Commit message of the code commit\" \\\r\n```",
        "pr_file_module": null
      }
    ]
  }
]