[
  {
    "discussion_id": "2048518512",
    "pr_number": 22679,
    "pr_file": "controller/sync.go",
    "created_at": "2025-04-17T08:46:05+00:00",
    "commented_code": "sync.WithServerSideApply(syncOp.SyncOptions.HasOption(common.SyncOptionServerSideApply)),\n \t\tsync.WithServerSideApplyManager(cdcommon.ArgoCDSSAManager),\n \t\tsync.WithPruneConfirmed(app.IsDeletionConfirmed(state.StartedAt.Time)),\n+\t\tsync.WithSkipDryRunOnMissingResource(syncOp.SyncOptions.HasOption(\"SkipDryRunOnMissingResource=true\")),",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2048518512",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22679,
        "pr_file": "controller/sync.go",
        "discussion_id": "2048518512",
        "commented_code": "@@ -371,6 +371,7 @@ func (m *appStateManager) SyncAppState(app *v1alpha1.Application, state *v1alpha\n \t\tsync.WithServerSideApply(syncOp.SyncOptions.HasOption(common.SyncOptionServerSideApply)),\n \t\tsync.WithServerSideApplyManager(cdcommon.ArgoCDSSAManager),\n \t\tsync.WithPruneConfirmed(app.IsDeletionConfirmed(state.StartedAt.Time)),\n+\t\tsync.WithSkipDryRunOnMissingResource(syncOp.SyncOptions.HasOption(\"SkipDryRunOnMissingResource=true\")),",
        "comment_created_at": "2025-04-17T08:46:05+00:00",
        "comment_author": "reggie-k",
        "comment_body": "```suggestion\r\n\t\tsync.WithSkipDryRunOnMissingResource(syncOp.SyncOptions.HasOption(common.SyncOptionSkipDryRunOnMissingResource)),\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2048519219",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22679,
        "pr_file": "controller/sync.go",
        "discussion_id": "2048518512",
        "commented_code": "@@ -371,6 +371,7 @@ func (m *appStateManager) SyncAppState(app *v1alpha1.Application, state *v1alpha\n \t\tsync.WithServerSideApply(syncOp.SyncOptions.HasOption(common.SyncOptionServerSideApply)),\n \t\tsync.WithServerSideApplyManager(cdcommon.ArgoCDSSAManager),\n \t\tsync.WithPruneConfirmed(app.IsDeletionConfirmed(state.StartedAt.Time)),\n+\t\tsync.WithSkipDryRunOnMissingResource(syncOp.SyncOptions.HasOption(\"SkipDryRunOnMissingResource=true\")),",
        "comment_created_at": "2025-04-17T08:46:33+00:00",
        "comment_author": "reggie-k",
        "comment_body": "Can we use `common` here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2051101251",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22679,
        "pr_file": "controller/sync.go",
        "discussion_id": "2048518512",
        "commented_code": "@@ -371,6 +371,7 @@ func (m *appStateManager) SyncAppState(app *v1alpha1.Application, state *v1alpha\n \t\tsync.WithServerSideApply(syncOp.SyncOptions.HasOption(common.SyncOptionServerSideApply)),\n \t\tsync.WithServerSideApplyManager(cdcommon.ArgoCDSSAManager),\n \t\tsync.WithPruneConfirmed(app.IsDeletionConfirmed(state.StartedAt.Time)),\n+\t\tsync.WithSkipDryRunOnMissingResource(syncOp.SyncOptions.HasOption(\"SkipDryRunOnMissingResource=true\")),",
        "comment_created_at": "2025-04-18T20:46:06+00:00",
        "comment_author": "pasha-codefresh",
        "comment_body": "Yep, makes sense",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1309554526",
    "pr_number": 14189,
    "pr_file": "applicationset/generators/matrix.go",
    "created_at": "2023-08-30T02:37:49+00:00",
    "commented_code": "return nil, EmptyAppSetGeneratorError\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) < 2 {\n+\tnumGens := len(appSetGenerator.Matrix.Generators)\n+\tif numGens < 2 {\n \t\treturn nil, ErrLessThanTwoGenerators\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) > 2 {\n-\t\treturn nil, ErrMoreThanTwoGenerators\n+\tif m.maxChildren > 1 && numGens > m.maxChildren {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1309554526",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 14189,
        "pr_file": "applicationset/generators/matrix.go",
        "discussion_id": "1309554526",
        "commented_code": "@@ -38,44 +40,49 @@ func (m *MatrixGenerator) GenerateParams(appSetGenerator *argoprojiov1alpha1.App\n \t\treturn nil, EmptyAppSetGeneratorError\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) < 2 {\n+\tnumGens := len(appSetGenerator.Matrix.Generators)\n+\tif numGens < 2 {\n \t\treturn nil, ErrLessThanTwoGenerators\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) > 2 {\n-\t\treturn nil, ErrMoreThanTwoGenerators\n+\tif m.maxChildren > 1 && numGens > m.maxChildren {",
        "comment_created_at": "2023-08-30T02:37:49+00:00",
        "comment_author": "ishitasequeira",
        "comment_body": "It might be useful to log a separate configuration error if value of maxChildren is 1 or less.",
        "pr_file_module": null
      },
      {
        "comment_id": "1428709281",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 14189,
        "pr_file": "applicationset/generators/matrix.go",
        "discussion_id": "1309554526",
        "commented_code": "@@ -38,44 +40,49 @@ func (m *MatrixGenerator) GenerateParams(appSetGenerator *argoprojiov1alpha1.App\n \t\treturn nil, EmptyAppSetGeneratorError\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) < 2 {\n+\tnumGens := len(appSetGenerator.Matrix.Generators)\n+\tif numGens < 2 {\n \t\treturn nil, ErrLessThanTwoGenerators\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) > 2 {\n-\t\treturn nil, ErrMoreThanTwoGenerators\n+\tif m.maxChildren > 1 && numGens > m.maxChildren {",
        "comment_created_at": "2023-12-16T06:17:08+00:00",
        "comment_author": "huynhsontung",
        "comment_body": "When maxChildren is 1 or less, it's considered no limit. The default value for maxChildren is 2.",
        "pr_file_module": null
      },
      {
        "comment_id": "1627508756",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 14189,
        "pr_file": "applicationset/generators/matrix.go",
        "discussion_id": "1309554526",
        "commented_code": "@@ -38,44 +40,49 @@ func (m *MatrixGenerator) GenerateParams(appSetGenerator *argoprojiov1alpha1.App\n \t\treturn nil, EmptyAppSetGeneratorError\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) < 2 {\n+\tnumGens := len(appSetGenerator.Matrix.Generators)\n+\tif numGens < 2 {\n \t\treturn nil, ErrLessThanTwoGenerators\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) > 2 {\n-\t\treturn nil, ErrMoreThanTwoGenerators\n+\tif m.maxChildren > 1 && numGens > m.maxChildren {",
        "comment_created_at": "2024-06-05T10:53:40+00:00",
        "comment_author": "blakepettersson",
        "comment_body": "Not a showstopper but that sounds un-intuitive IMO - could we not say that no limit only applies if maxChildren < 0?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1628130680",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 14189,
        "pr_file": "applicationset/generators/matrix.go",
        "discussion_id": "1309554526",
        "commented_code": "@@ -38,44 +40,49 @@ func (m *MatrixGenerator) GenerateParams(appSetGenerator *argoprojiov1alpha1.App\n \t\treturn nil, EmptyAppSetGeneratorError\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) < 2 {\n+\tnumGens := len(appSetGenerator.Matrix.Generators)\n+\tif numGens < 2 {\n \t\treturn nil, ErrLessThanTwoGenerators\n \t}\n \n-\tif len(appSetGenerator.Matrix.Generators) > 2 {\n-\t\treturn nil, ErrMoreThanTwoGenerators\n+\tif m.maxChildren > 1 && numGens > m.maxChildren {",
        "comment_created_at": "2024-06-05T17:05:42+00:00",
        "comment_author": "huynhsontung",
        "comment_body": "I would prefer to have maxChildren < 1 to avoid using negative values. The param `reposerver.git.lsremote.parallelism.limit` has the same logic where any values less than 1 mean unlimited.\r\n\r\n*plus we don't have to update the docs and tests this way*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2197563102",
    "pr_number": 23721,
    "pr_file": "cmd/argocd-applicationset-controller/commands/applicationset_controller.go",
    "created_at": "2025-07-10T12:16:32+00:00",
    "commented_code": "command.Flags().BoolVar(&repoServerPlaintext, \"repo-server-plaintext\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT\", false), \"Disable TLS on connections to repo server\")\n \tcommand.Flags().BoolVar(&repoServerStrictTLS, \"repo-server-strict-tls\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS\", false), \"Whether to use strict validation of the TLS cert presented by the repo server\")\n \tcommand.Flags().IntVar(&repoServerTimeoutSeconds, \"repo-server-timeout-seconds\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\", 60, 0, math.MaxInt64), \"Repo server RPC call timeout seconds.\")\n-\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, 100), \"Max concurrent reconciliations limit for the controller\")\n+\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, math.MaxInt), \"Max concurrent reconciliations limit for the controller\")",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2197563102",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23721,
        "pr_file": "cmd/argocd-applicationset-controller/commands/applicationset_controller.go",
        "discussion_id": "2197563102",
        "commented_code": "@@ -268,7 +268,7 @@ func NewCommand() *cobra.Command {\n \tcommand.Flags().BoolVar(&repoServerPlaintext, \"repo-server-plaintext\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT\", false), \"Disable TLS on connections to repo server\")\n \tcommand.Flags().BoolVar(&repoServerStrictTLS, \"repo-server-strict-tls\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS\", false), \"Whether to use strict validation of the TLS cert presented by the repo server\")\n \tcommand.Flags().IntVar(&repoServerTimeoutSeconds, \"repo-server-timeout-seconds\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\", 60, 0, math.MaxInt64), \"Repo server RPC call timeout seconds.\")\n-\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, 100), \"Max concurrent reconciliations limit for the controller\")\n+\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, math.MaxInt), \"Max concurrent reconciliations limit for the controller\")",
        "comment_created_at": "2025-07-10T12:16:32+00:00",
        "comment_author": "andrii-korotkov",
        "comment_body": "MaxInt is too big :) Maybe like 1M?",
        "pr_file_module": null
      },
      {
        "comment_id": "2197605078",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23721,
        "pr_file": "cmd/argocd-applicationset-controller/commands/applicationset_controller.go",
        "discussion_id": "2197563102",
        "commented_code": "@@ -268,7 +268,7 @@ func NewCommand() *cobra.Command {\n \tcommand.Flags().BoolVar(&repoServerPlaintext, \"repo-server-plaintext\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_PLAINTEXT\", false), \"Disable TLS on connections to repo server\")\n \tcommand.Flags().BoolVar(&repoServerStrictTLS, \"repo-server-strict-tls\", env.ParseBoolFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_STRICT_TLS\", false), \"Whether to use strict validation of the TLS cert presented by the repo server\")\n \tcommand.Flags().IntVar(&repoServerTimeoutSeconds, \"repo-server-timeout-seconds\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS\", 60, 0, math.MaxInt64), \"Repo server RPC call timeout seconds.\")\n-\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, 100), \"Max concurrent reconciliations limit for the controller\")\n+\tcommand.Flags().IntVar(&maxConcurrentReconciliations, \"concurrent-reconciliations\", env.ParseNumFromEnv(\"ARGOCD_APPLICATIONSET_CONTROLLER_CONCURRENT_RECONCILIATIONS\", 10, 1, math.MaxInt), \"Max concurrent reconciliations limit for the controller\")",
        "comment_created_at": "2025-07-10T12:32:41+00:00",
        "comment_author": "rumstead",
        "comment_body": "The controller sdk doesn’t seem to restrict and allows for any int but I agree max int in practice is unrealistic ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1664167929",
    "pr_number": 18876,
    "pr_file": "controller/cache/cache.go",
    "created_at": "2024-07-03T13:09:58+00:00",
    "commented_code": "clusterCacheRetryUseBackoff bool = false\n )\n \n+// Constants for EndpointSlices\n+const (\n+\tserviceDiscoveryGroup             = \"discovery.k8s.io\"\n+\tserviceDiscoveryEndpointSliceKind = \"EndpointSlice\"",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1664167929",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18876,
        "pr_file": "controller/cache/cache.go",
        "discussion_id": "1664167929",
        "commented_code": "@@ -102,6 +102,12 @@ var (\n \tclusterCacheRetryUseBackoff bool = false\n )\n \n+// Constants for EndpointSlices\n+const (\n+\tserviceDiscoveryGroup             = \"discovery.k8s.io\"\n+\tserviceDiscoveryEndpointSliceKind = \"EndpointSlice\"",
        "comment_created_at": "2024-07-03T13:09:58+00:00",
        "comment_author": "agaudreault",
        "comment_body": "It is already possible to configure which resources update to ignore with customizations. https://argo-cd.readthedocs.io/en/stable/operator-manual/reconcile/ . Have you tried to use this feature?\r\n\r\nAdditionally, if you do not manage EndpointSlice manually, you can fully omit them from the watched resources. https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#resource-exclusioninclusion",
        "pr_file_module": null
      },
      {
        "comment_id": "1664364687",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18876,
        "pr_file": "controller/cache/cache.go",
        "discussion_id": "1664167929",
        "commented_code": "@@ -102,6 +102,12 @@ var (\n \tclusterCacheRetryUseBackoff bool = false\n )\n \n+// Constants for EndpointSlices\n+const (\n+\tserviceDiscoveryGroup             = \"discovery.k8s.io\"\n+\tserviceDiscoveryEndpointSliceKind = \"EndpointSlice\"",
        "comment_created_at": "2024-07-03T15:12:47+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "I did that exclusion via resource updates rule. However, I think it's something everyone should do, thus having them hard-coded seems beneficial.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844166328",
    "pr_number": 15004,
    "pr_file": "cmd/argocd/commands/logout.go",
    "created_at": "2024-11-15T16:48:11+00:00",
    "commented_code": "log.Fatalf(\"Nothing to logout from\")\n \t\t\t}\n \n+\t\t\ttoken := localCfg.GetToken(context)\n+\t\t\tif token == \"\" {\n+\t\t\t\tlog.Fatalf(\"Error in getting token from context\")\n+\t\t\t}\n+\n+\t\t\tclient := &http.Client{}\n+\n+\t\t\tdialTime := 30 * time.Second",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1844166328",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 15004,
        "pr_file": "cmd/argocd/commands/logout.go",
        "discussion_id": "1844166328",
        "commented_code": "@@ -35,6 +42,55 @@ $ argocd logout\n \t\t\t\tlog.Fatalf(\"Nothing to logout from\")\n \t\t\t}\n \n+\t\t\ttoken := localCfg.GetToken(context)\n+\t\t\tif token == \"\" {\n+\t\t\t\tlog.Fatalf(\"Error in getting token from context\")\n+\t\t\t}\n+\n+\t\t\tclient := &http.Client{}\n+\n+\t\t\tdialTime := 30 * time.Second",
        "comment_created_at": "2024-11-15T16:48:11+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "Make this a constant and maybe configurable.",
        "pr_file_module": null
      },
      {
        "comment_id": "2077642727",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 15004,
        "pr_file": "cmd/argocd/commands/logout.go",
        "discussion_id": "1844166328",
        "commented_code": "@@ -35,6 +42,55 @@ $ argocd logout\n \t\t\t\tlog.Fatalf(\"Nothing to logout from\")\n \t\t\t}\n \n+\t\t\ttoken := localCfg.GetToken(context)\n+\t\t\tif token == \"\" {\n+\t\t\t\tlog.Fatalf(\"Error in getting token from context\")\n+\t\t\t}\n+\n+\t\t\tclient := &http.Client{}\n+\n+\t\t\tdialTime := 30 * time.Second",
        "comment_created_at": "2025-05-07T13:30:50+00:00",
        "comment_author": "GeorgiYosifov",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]