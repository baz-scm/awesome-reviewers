[
  {
    "discussion_id": "1833202958",
    "pr_number": 20637,
    "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
    "created_at": "2024-11-07T18:56:28+00:00",
    "commented_code": "return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1833202958",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-07T18:56:28+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "Let's use constants for these.",
        "pr_file_module": null
      },
      {
        "comment_id": "1835348094",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T11:59:49+00:00",
        "comment_author": "surajyadav1108",
        "comment_body": "done",
        "pr_file_module": null
      },
      {
        "comment_id": "1835376686",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T13:44:05+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "This seems like it wasn't committed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1835432457",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T15:25:47+00:00",
        "comment_author": "surajyadav1108",
        "comment_body": "\ud83e\udd14 weren't you referring about  the totalvalue variables? or maybe  I misunderstood it.\r\nhave changed this to these const\r\n\r\n```\r\nlet totalCpuMillicores\r\nlet totalMemrory\r\n```\r\n\r\n```\r\nconst resources = {\r\n        cpu: 0,\r\n        memory: 0\r\n    };\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1835435379",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T15:33:09+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "I mean string constants like 'Requests (MEM)', it'd be great to have them defined as constants somewhere since they are re-used in many places.",
        "pr_file_module": null
      },
      {
        "comment_id": "1835439969",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T15:51:18+00:00",
        "comment_author": "surajyadav1108",
        "comment_body": "oh ok gottacha, then how about declaring it in utlis as const, and then just importing it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1835441234",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 20637,
        "pr_file": "ui/src/app/applications/components/application-pod-view/pod-view.tsx",
        "discussion_id": "1833202958",
        "commented_code": "@@ -388,6 +410,29 @@ function formatMetric(name: ResourceName, val: number) {\n     return (val || '0') + 'm';\n }\n \n+function claculatePodGrouprResquests(pods: Pod[]) {\n+    let totalCpuMillicores = 0;\n+    let totalMemory = 0;\n+\n+    pods.forEach(pod => {\n+        pod.info?.forEach(info => {\n+            if (info.name === 'Requests (CPU)') {\n+                const numericValue = parseInt(info.value, 10); //convert the string value to number\n+                totalCpuMillicores += numericValue;\n+            }\n+            if (info.name === 'Requests (MEM)') {",
        "comment_created_at": "2024-11-09T16:00:48+00:00",
        "comment_author": "surajyadav1108",
        "comment_body": "commited it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1869997963",
    "pr_number": 18646,
    "pr_file": "ui/src/app/applications/components/utils.tsx",
    "created_at": "2024-12-04T17:31:32+00:00",
    "commented_code": "if (source.chart) {\n             message += ' (' + revision + ')';\n         } else if (revision.length >= 7 && !revision.startsWith(source.targetRevision)) {\n-            message += ' (' + revision.substr(0, 7) + ')';\n+            if (source.repoURL.startsWith('oci://')) {\n+                message += ' (' + revision.substring(0, 14) + ')';",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1869997963",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "1869997963",
        "commented_code": "@@ -747,7 +747,11 @@ export function syncStatusMessage(app: appModels.Application) {\n         if (source.chart) {\n             message += ' (' + revision + ')';\n         } else if (revision.length >= 7 && !revision.startsWith(source.targetRevision)) {\n-            message += ' (' + revision.substr(0, 7) + ')';\n+            if (source.repoURL.startsWith('oci://')) {\n+                message += ' (' + revision.substring(0, 14) + ')';",
        "comment_created_at": "2024-12-04T17:31:32+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "Why 14?",
        "pr_file_module": null
      },
      {
        "comment_id": "1882560723",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "1869997963",
        "commented_code": "@@ -747,7 +747,11 @@ export function syncStatusMessage(app: appModels.Application) {\n         if (source.chart) {\n             message += ' (' + revision + ')';\n         } else if (revision.length >= 7 && !revision.startsWith(source.targetRevision)) {\n-            message += ' (' + revision.substr(0, 7) + ')';\n+            if (source.repoURL.startsWith('oci://')) {\n+                message += ' (' + revision.substring(0, 14) + ')';",
        "comment_created_at": "2024-12-12T17:10:37+00:00",
        "comment_author": "blakepettersson",
        "comment_body": "This is because ORAS returns a digest prefixed with `sha256:`, so I display that along with the first 7 actual charaters of the digest. I don't have any better way of displaying this atm, suggestions welcome \ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1995753972",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "ui/src/app/applications/components/utils.tsx",
        "discussion_id": "1869997963",
        "commented_code": "@@ -747,7 +747,11 @@ export function syncStatusMessage(app: appModels.Application) {\n         if (source.chart) {\n             message += ' (' + revision + ')';\n         } else if (revision.length >= 7 && !revision.startsWith(source.targetRevision)) {\n-            message += ' (' + revision.substr(0, 7) + ')';\n+            if (source.repoURL.startsWith('oci://')) {\n+                message += ' (' + revision.substring(0, 14) + ')';",
        "comment_created_at": "2025-03-14T15:10:06+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "```suggestion\r\n                // Show \"sha256: \" plus the first 7 actual characters of the digest.\r\n                message += ' (' + revision.substring(0, 14) + ')';\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185929901",
    "pr_number": 23059,
    "pr_file": "ui/src/app/settings/components/project-details/resource-lists-panel.tsx",
    "created_at": "2025-07-04T18:46:16+00:00",
    "commented_code": "<React.Fragment>\n                     <div className='row white-box__details-row'>\n                         <div className='columns small-4'>Server</div>\n-                        <div className='columns small-8'>Namespace</div>\n-                        <div className='columns small-12'>DefaultServiceAccount</div>\n+                        <div className='columns small-3'>Namespace</div>\n+                        <div className='columns small-5'>DefaultServiceAccount</div>",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2185929901",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23059,
        "pr_file": "ui/src/app/settings/components/project-details/resource-lists-panel.tsx",
        "discussion_id": "2185929901",
        "commented_code": "@@ -183,14 +183,14 @@ function viewDestinationServiceAccountsInfoList(type: field, proj: Project) {\n                 <React.Fragment>\n                     <div className='row white-box__details-row'>\n                         <div className='columns small-4'>Server</div>\n-                        <div className='columns small-8'>Namespace</div>\n-                        <div className='columns small-12'>DefaultServiceAccount</div>\n+                        <div className='columns small-3'>Namespace</div>\n+                        <div className='columns small-5'>DefaultServiceAccount</div>",
        "comment_created_at": "2025-07-04T18:46:16+00:00",
        "comment_author": "agaudreault",
        "comment_body": "Maybe unrelated to this feature, but I think the usage of \"Default\" here is confusing now that inheritance happens. It is not the \"Default Service Account\", it is the \"Service Account\" to use for that destination as far as I understand.\r\n```suggestion\r\n                        <div className='columns small-5'>ServiceAccount</div>\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835292725",
    "pr_number": 19718,
    "pr_file": "ui/src/app/applications/components/applications-terminate-sync-panel/applications-terminate-sync-panel.tsx",
    "created_at": "2024-11-09T06:49:18+00:00",
    "commented_code": "+import {ErrorNotification, NotificationType, SlidingPanel} from 'argo-ui';\n+import * as React from 'react';\n+import {Form, FormApi} from 'react-form';\n+import {ProgressPopup, Spinner} from '../../../shared/components';\n+import {Consumer, ContextApis} from '../../../shared/context';\n+import * as models from '../../../shared/models';\n+import {services} from '../../../shared/services';\n+import {ApplicationSelector} from '../../../shared/components';\n+import {confirmSyncingAppOfApps} from '../utils';\n+\n+interface Progress {\n+    percentage: number;\n+    title: string;\n+}\n+\n+export const ApplicationsTerminateSyncPanel = ({show, apps, hide}: {show: boolean; apps: models.Application[]; hide: () => void}) => {\n+    const [form, setForm] = React.useState<FormApi>(null);\n+    const [progress, setProgress] = React.useState<Progress>(null);\n+    const getSelectedApps = (params: any) => apps.filter((_, i) => params['app/' + i]);\n+    const [isPending, setPending] = React.useState(false);\n+    const syncHandler = (currentForm: FormApi, ctx: ContextApis, applications: models.Application[]) => {\n+        const formValues = currentForm.getFormState().values;\n+        const replaceChecked = formValues.syncOptions?.includes('Replace=true');\n+        const selectedApps = [];\n+        const selectedAppOfApps: models.Application[] = [];\n+        let containAppOfApps = false;\n+\n+        for (const key in formValues) {\n+            if (key.startsWith('app/') && formValues[key]) {\n+                selectedApps.push(applications[parseInt(key.slice(key.lastIndexOf('/') + 1), 10)]);\n+            }\n+        }\n+\n+        selectedApps.forEach(app => {\n+            if (app.isAppOfAppsPattern) {\n+                containAppOfApps = true;\n+                selectedAppOfApps.push(app);\n+            }\n+        });\n+\n+        if (replaceChecked && containAppOfApps) {\n+            confirmSyncingAppOfApps(selectedAppOfApps, ctx, currentForm).then(confirmed => {",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1835292725",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 19718,
        "pr_file": "ui/src/app/applications/components/applications-terminate-sync-panel/applications-terminate-sync-panel.tsx",
        "discussion_id": "1835292725",
        "commented_code": "@@ -0,0 +1,118 @@\n+import {ErrorNotification, NotificationType, SlidingPanel} from 'argo-ui';\n+import * as React from 'react';\n+import {Form, FormApi} from 'react-form';\n+import {ProgressPopup, Spinner} from '../../../shared/components';\n+import {Consumer, ContextApis} from '../../../shared/context';\n+import * as models from '../../../shared/models';\n+import {services} from '../../../shared/services';\n+import {ApplicationSelector} from '../../../shared/components';\n+import {confirmSyncingAppOfApps} from '../utils';\n+\n+interface Progress {\n+    percentage: number;\n+    title: string;\n+}\n+\n+export const ApplicationsTerminateSyncPanel = ({show, apps, hide}: {show: boolean; apps: models.Application[]; hide: () => void}) => {\n+    const [form, setForm] = React.useState<FormApi>(null);\n+    const [progress, setProgress] = React.useState<Progress>(null);\n+    const getSelectedApps = (params: any) => apps.filter((_, i) => params['app/' + i]);\n+    const [isPending, setPending] = React.useState(false);\n+    const syncHandler = (currentForm: FormApi, ctx: ContextApis, applications: models.Application[]) => {\n+        const formValues = currentForm.getFormState().values;\n+        const replaceChecked = formValues.syncOptions?.includes('Replace=true');\n+        const selectedApps = [];\n+        const selectedAppOfApps: models.Application[] = [];\n+        let containAppOfApps = false;\n+\n+        for (const key in formValues) {\n+            if (key.startsWith('app/') && formValues[key]) {\n+                selectedApps.push(applications[parseInt(key.slice(key.lastIndexOf('/') + 1), 10)]);\n+            }\n+        }\n+\n+        selectedApps.forEach(app => {\n+            if (app.isAppOfAppsPattern) {\n+                containAppOfApps = true;\n+                selectedAppOfApps.push(app);\n+            }\n+        });\n+\n+        if (replaceChecked && containAppOfApps) {\n+            confirmSyncingAppOfApps(selectedAppOfApps, ctx, currentForm).then(confirmed => {",
        "comment_created_at": "2024-11-09T06:49:18+00:00",
        "comment_author": "andrii-korotkov-verkada",
        "comment_body": "The naming is a bit confusing. `ApplicationsTerminateSyncPanel` suggests it's only for termination of sync, so why do we confirm sync and check replace option? If we need to, shall we check prune as well?",
        "pr_file_module": null
      },
      {
        "comment_id": "1861402736",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 19718,
        "pr_file": "ui/src/app/applications/components/applications-terminate-sync-panel/applications-terminate-sync-panel.tsx",
        "discussion_id": "1835292725",
        "commented_code": "@@ -0,0 +1,118 @@\n+import {ErrorNotification, NotificationType, SlidingPanel} from 'argo-ui';\n+import * as React from 'react';\n+import {Form, FormApi} from 'react-form';\n+import {ProgressPopup, Spinner} from '../../../shared/components';\n+import {Consumer, ContextApis} from '../../../shared/context';\n+import * as models from '../../../shared/models';\n+import {services} from '../../../shared/services';\n+import {ApplicationSelector} from '../../../shared/components';\n+import {confirmSyncingAppOfApps} from '../utils';\n+\n+interface Progress {\n+    percentage: number;\n+    title: string;\n+}\n+\n+export const ApplicationsTerminateSyncPanel = ({show, apps, hide}: {show: boolean; apps: models.Application[]; hide: () => void}) => {\n+    const [form, setForm] = React.useState<FormApi>(null);\n+    const [progress, setProgress] = React.useState<Progress>(null);\n+    const getSelectedApps = (params: any) => apps.filter((_, i) => params['app/' + i]);\n+    const [isPending, setPending] = React.useState(false);\n+    const syncHandler = (currentForm: FormApi, ctx: ContextApis, applications: models.Application[]) => {\n+        const formValues = currentForm.getFormState().values;\n+        const replaceChecked = formValues.syncOptions?.includes('Replace=true');\n+        const selectedApps = [];\n+        const selectedAppOfApps: models.Application[] = [];\n+        let containAppOfApps = false;\n+\n+        for (const key in formValues) {\n+            if (key.startsWith('app/') && formValues[key]) {\n+                selectedApps.push(applications[parseInt(key.slice(key.lastIndexOf('/') + 1), 10)]);\n+            }\n+        }\n+\n+        selectedApps.forEach(app => {\n+            if (app.isAppOfAppsPattern) {\n+                containAppOfApps = true;\n+                selectedAppOfApps.push(app);\n+            }\n+        });\n+\n+        if (replaceChecked && containAppOfApps) {\n+            confirmSyncingAppOfApps(selectedAppOfApps, ctx, currentForm).then(confirmed => {",
        "comment_created_at": "2024-11-28T01:33:12+00:00",
        "comment_author": "linghaoSu",
        "comment_body": "fixed, extract common logic and remove sync related code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152252949",
    "pr_number": 22410,
    "pr_file": "ui/src/app/shared/components/revision.tsx",
    "created_at": "2025-06-17T13:16:48+00:00",
    "commented_code": "if (url !== null && hasPath) {\n         url += '/' + path;\n     }\n-    const content = children || (isSHA(revision) ? revision.substr(0, 7) : revision);\n+    const content = children || (isSHA(revision) ? (revision.startsWith('sha256:') ? revision.substr(0, 14) : revision.substr(0, 7)) : revision);",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2152252949",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22410,
        "pr_file": "ui/src/app/shared/components/revision.tsx",
        "discussion_id": "2152252949",
        "commented_code": "@@ -12,7 +12,7 @@ export const Revision = ({repoUrl, revision, path, isForPath, children}: {repoUr\n     if (url !== null && hasPath) {\n         url += '/' + path;\n     }\n-    const content = children || (isSHA(revision) ? revision.substr(0, 7) : revision);\n+    const content = children || (isSHA(revision) ? (revision.startsWith('sha256:') ? revision.substr(0, 14) : revision.substr(0, 7)) : revision);",
        "comment_created_at": "2025-06-17T13:16:48+00:00",
        "comment_author": "olivergondza",
        "comment_body": "Similarly, as above:\r\n\r\n```tsx\r\nconst content = children || (isSHA(revision) ? (revision.substr(0, revision.startsWith('sha256:') ? 14 : 7 ) : revision);\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]