[
  {
    "discussion_id": "1995741317",
    "pr_number": 18646,
    "pr_file": "reposerver/repository/repository.go",
    "created_at": "2025-03-14T15:01:54+00:00",
    "commented_code": "return metadata, nil\n }\n \n+func (s *Service) GetOCIMetadata(ctx context.Context, q *apiclient.RepoServerRevisionChartDetailsRequest) (*v1alpha1.OCIMetadata, error) {\n+\tclient, err := s.newOCIClient(q.Repo.Repo, q.Repo.GetOCICreds(), q.Repo.Proxy, q.Repo.NoProxy, s.initConstants.OCIMediaTypes, oci.WithIndexCache(s.cache), oci.WithImagePaths(s.ociPaths), oci.WithManifestMaxExtractedSize(s.initConstants.OCIManifestMaxExtractedSize), oci.WithDisableManifestMaxExtractedSize(s.initConstants.DisableOCIManifestMaxExtractedSize))\n+\tif err != nil {\n+\t\treturn nil, err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1995741317",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "reposerver/repository/repository.go",
        "discussion_id": "1995741317",
        "commented_code": "@@ -2337,6 +2410,30 @@ func (s *Service) GetRevisionMetadata(_ context.Context, q *apiclient.RepoServer\n \treturn metadata, nil\n }\n \n+func (s *Service) GetOCIMetadata(ctx context.Context, q *apiclient.RepoServerRevisionChartDetailsRequest) (*v1alpha1.OCIMetadata, error) {\n+\tclient, err := s.newOCIClient(q.Repo.Repo, q.Repo.GetOCICreds(), q.Repo.Proxy, q.Repo.NoProxy, s.initConstants.OCIMediaTypes, oci.WithIndexCache(s.cache), oci.WithImagePaths(s.ociPaths), oci.WithManifestMaxExtractedSize(s.initConstants.OCIManifestMaxExtractedSize), oci.WithDisableManifestMaxExtractedSize(s.initConstants.DisableOCIManifestMaxExtractedSize))\n+\tif err != nil {\n+\t\treturn nil, err",
        "comment_created_at": "2025-03-14T15:01:54+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "```suggestion\r\n\t\treturn nil, fmt.Errorf(\"failed to initialize oci client: %w\", err)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1995743140",
    "pr_number": 18646,
    "pr_file": "reposerver/repository/repository.go",
    "created_at": "2025-03-14T15:03:03+00:00",
    "commented_code": "return gitClient, commitSHA, nil\n }\n \n+func (s *Service) newOCIClientResolveRevision(ctx context.Context, repo *v1alpha1.Repository, revision string, noRevisionCache bool) (oci.Client, string, error) {\n+\tociClient, err := s.newOCIClient(repo.Repo, repo.GetOCICreds(), repo.Proxy, repo.NoProxy, s.initConstants.OCIMediaTypes, oci.WithIndexCache(s.cache), oci.WithImagePaths(s.ociPaths), oci.WithManifestMaxExtractedSize(s.initConstants.OCIManifestMaxExtractedSize), oci.WithDisableManifestMaxExtractedSize(s.initConstants.DisableOCIManifestMaxExtractedSize))\n+\tif err != nil {\n+\t\treturn nil, \"\", err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "1995743140",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 18646,
        "pr_file": "reposerver/repository/repository.go",
        "discussion_id": "1995743140",
        "commented_code": "@@ -2410,6 +2507,20 @@ func (s *Service) newClientResolveRevision(repo *v1alpha1.Repository, revision s\n \treturn gitClient, commitSHA, nil\n }\n \n+func (s *Service) newOCIClientResolveRevision(ctx context.Context, repo *v1alpha1.Repository, revision string, noRevisionCache bool) (oci.Client, string, error) {\n+\tociClient, err := s.newOCIClient(repo.Repo, repo.GetOCICreds(), repo.Proxy, repo.NoProxy, s.initConstants.OCIMediaTypes, oci.WithIndexCache(s.cache), oci.WithImagePaths(s.ociPaths), oci.WithManifestMaxExtractedSize(s.initConstants.OCIManifestMaxExtractedSize), oci.WithDisableManifestMaxExtractedSize(s.initConstants.DisableOCIManifestMaxExtractedSize))\n+\tif err != nil {\n+\t\treturn nil, \"\", err",
        "comment_created_at": "2025-03-14T15:03:03+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "```suggestion\r\n\t\treturn nil, \"\", fmt.Errorf(\"failed to initialize oci client: %w\", err)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049216038",
    "pr_number": 22288,
    "pr_file": "controller/appcontroller.go",
    "created_at": "2025-04-17T15:36:57+00:00",
    "commented_code": "if err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049216038",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216038",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T15:36:57+00:00",
        "comment_author": "leoluz",
        "comment_body": "Please return the context alongside with errors. \r\nExample:\r\n```golang\r\nreturn fmt.Errorf(\"error getting permitted app live objects: %w\", err)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2049417251",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216038",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T17:51:57+00:00",
        "comment_author": "pedro-cs-ribeiro",
        "comment_body": "Updated the code to return the context now with the error: [`6a864c8` (#22288)](https://github.com/argoproj/argo-cd/pull/22288/commits/6a864c813c8b03259070fd0128debfc2e0291de8)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049216501",
    "pr_number": 22288,
    "pr_file": "controller/appcontroller.go",
    "created_at": "2025-04-17T15:37:07+00:00",
    "commented_code": "if err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049216501",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216501",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T15:37:07+00:00",
        "comment_author": "leoluz",
        "comment_body": "Please return the context alongside with errors. \r\nExample:\r\n```golang\r\nreturn fmt.Errorf(\"error getting permitted app live objects: %w\", err)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2049417359",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216501",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T17:52:04+00:00",
        "comment_author": "pedro-cs-ribeiro",
        "comment_body": "Updated the code to return the context now with the error: [`6a864c8` (#22288)](https://github.com/argoproj/argo-cd/pull/22288/commits/6a864c813c8b03259070fd0128debfc2e0291de8)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049216700",
    "pr_number": 22288,
    "pr_file": "controller/appcontroller.go",
    "created_at": "2025-04-17T15:37:12+00:00",
    "commented_code": "if err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif !done {\n+\t\t\t// PreDelete hooks are still running - wait for them to complete\n+\t\t\treturn nil\n+\t\t}\n+\t\t// PreDelete hooks are done - remove the finalizer so we can continue with deletion\n+\t\tapp.UnSetPreDeleteFinalizer()\n+\t\tif err := ctrl.updateFinalizers(app); err != nil {\n+\t\t\treturn err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049216700",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216700",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif !done {\n+\t\t\t// PreDelete hooks are still running - wait for them to complete\n+\t\t\treturn nil\n+\t\t}\n+\t\t// PreDelete hooks are done - remove the finalizer so we can continue with deletion\n+\t\tapp.UnSetPreDeleteFinalizer()\n+\t\tif err := ctrl.updateFinalizers(app); err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T15:37:12+00:00",
        "comment_author": "leoluz",
        "comment_body": "Please return the context alongside with errors. \r\nExample:\r\n```golang\r\nreturn fmt.Errorf(\"error getting permitted app live objects: %w\", err)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2049417447",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216700",
        "commented_code": "@@ -1193,26 +1193,51 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\t// Get destination cluster\n \tdestCluster, err := argo.GetDestinationCluster(context.Background(), app.Spec.Destination, ctrl.db)\n \tif err != nil {\n \t\tlogCtx.Warnf(\"Unable to get destination cluster: %v\", err)\n \t\tapp.UnSetCascadedDeletion()\n \t\tapp.UnSetPostDeleteFinalizer()\n+\t\tapp.UnSetPreDeleteFinalizer()\n \t\tif err := ctrl.updateFinalizers(app); err != nil {\n \t\t\treturn err\n \t\t}\n \t\tlogCtx.Infof(\"Resource entries removed from undefined cluster\")\n \t\treturn nil\n \t}\n+\n \tclusterRESTConfig, err := destCluster.RESTConfig()\n \tif err != nil {\n \t\treturn err\n \t}\n \tconfig := metrics.AddMetricsTransportWrapper(ctrl.metricsServer, app, clusterRESTConfig)\n \n+\t// Handle PreDelete hooks - run them before any deletion occurs\n+\tif app.HasPreDeleteFinalizer() {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.executePreDeleteHooks(app, proj, objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\tif !done {\n+\t\t\t// PreDelete hooks are still running - wait for them to complete\n+\t\t\treturn nil\n+\t\t}\n+\t\t// PreDelete hooks are done - remove the finalizer so we can continue with deletion\n+\t\tapp.UnSetPreDeleteFinalizer()\n+\t\tif err := ctrl.updateFinalizers(app); err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T17:52:09+00:00",
        "comment_author": "pedro-cs-ribeiro",
        "comment_body": "Updated the code to return the context now with the error: [`6a864c8` (#22288)](https://github.com/argoproj/argo-cd/pull/22288/commits/6a864c813c8b03259070fd0128debfc2e0291de8)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049216878",
    "pr_number": 22288,
    "pr_file": "controller/appcontroller.go",
    "created_at": "2025-04-17T15:37:17+00:00",
    "commented_code": "return ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049216878",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216878",
        "commented_code": "@@ -1289,6 +1314,23 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \t\treturn ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T15:37:17+00:00",
        "comment_author": "leoluz",
        "comment_body": "Please return the context alongside with errors. \r\nExample:\r\n```golang\r\nreturn fmt.Errorf(\"error getting permitted app live objects: %w\", err)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2049417538",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049216878",
        "commented_code": "@@ -1289,6 +1314,23 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \t\treturn ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T17:52:14+00:00",
        "comment_author": "pedro-cs-ribeiro",
        "comment_body": "Updated the code to return the context now with the error: [`6a864c8` (#22288)](https://github.com/argoproj/argo-cd/pull/22288/commits/6a864c813c8b03259070fd0128debfc2e0291de8)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049217050",
    "pr_number": 22288,
    "pr_file": "controller/appcontroller.go",
    "created_at": "2025-04-17T15:37:22+00:00",
    "commented_code": "return ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.cleanupPreDeleteHooks(objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2049217050",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049217050",
        "commented_code": "@@ -1289,6 +1314,23 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \t\treturn ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.cleanupPreDeleteHooks(objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T15:37:22+00:00",
        "comment_author": "leoluz",
        "comment_body": "Please return the context alongside with errors. \r\nExample:\r\n```golang\r\nreturn fmt.Errorf(\"error getting permitted app live objects: %w\", err)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2049417664",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 22288,
        "pr_file": "controller/appcontroller.go",
        "discussion_id": "2049217050",
        "commented_code": "@@ -1289,6 +1314,23 @@ func (ctrl *ApplicationController) finalizeApplicationDeletion(app *appv1.Applic\n \t\treturn ctrl.updateFinalizers(app)\n \t}\n \n+\tif app.HasPreDeleteFinalizer(\"cleanup\") {\n+\t\tobjsMap, err := ctrl.getPermittedAppLiveObjects(destCluster, app, proj, projectClusters)\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\n+\t\tdone, err := ctrl.cleanupPreDeleteHooks(objsMap, config, logCtx)\n+\t\tif err != nil {\n+\t\t\treturn err",
        "comment_created_at": "2025-04-17T17:52:20+00:00",
        "comment_author": "pedro-cs-ribeiro",
        "comment_body": "Updated the code to return the context now with the error: [`6a864c8` (#22288)](https://github.com/argoproj/argo-cd/pull/22288/commits/6a864c813c8b03259070fd0128debfc2e0291de8)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2104899442",
    "pr_number": 23131,
    "pr_file": "server/application/application.go",
    "created_at": "2025-05-23T15:59:26+00:00",
    "commented_code": "}\n \n func (s *Server) updateApp(ctx context.Context, app *v1alpha1.Application, newApp *v1alpha1.Application, merge bool) (*v1alpha1.Application, error) {\n+\tapplicationPatch, err := diffBetweenApplicationSpecs(&app.Spec, &newApp.Spec)\n+\tif err != nil {\n+\t\treturn nil, err",
    "repo_full_name": "argoproj/argo-cd",
    "discussion_comments": [
      {
        "comment_id": "2104899442",
        "repo_full_name": "argoproj/argo-cd",
        "pr_number": 23131,
        "pr_file": "server/application/application.go",
        "discussion_id": "2104899442",
        "commented_code": "@@ -956,6 +956,10 @@ func (s *Server) waitSync(app *v1alpha1.Application) {\n }\n \n func (s *Server) updateApp(ctx context.Context, app *v1alpha1.Application, newApp *v1alpha1.Application, merge bool) (*v1alpha1.Application, error) {\n+\tapplicationPatch, err := diffBetweenApplicationSpecs(&app.Spec, &newApp.Spec)\n+\tif err != nil {\n+\t\treturn nil, err",
        "comment_created_at": "2025-05-23T15:59:26+00:00",
        "comment_author": "crenshaw-dev",
        "comment_body": "Let's wrap this error for easier debugging.",
        "pr_file_module": null
      }
    ]
  }
]