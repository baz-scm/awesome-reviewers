[
  {
    "discussion_id": "33891462",
    "pr_number": 484,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2015-07-05T02:31:23+00:00",
    "commented_code": "## Quality standard\n \n-To stay on the list, package repositories should adhere to these quality standards:\n+To be on the list, project repositories should adhere to these quality standards:\n \n-- Generally useful to the community\n-- Functional\n-- Actively maintained (even if that just means acknowledging open issues when they arise)\n-- Stable, or progressing toward stable\n-- Documented (preferably godoc.org)\n-- Tests are preferred (when possible)\n+- Code is functional\n+- Generally useful to the wider community of Go programmers\n+- Actively maintained\n+  - Regular, recent commits\n+  - Or, for finished projects, issues and pull requests are responded to\n+- Stable or progressing toward stable\n+- Thoroughly documented (README, godoc comments, etc.)\n+- Tests, where practical",
    "repo_full_name": "avelino/awesome-go",
    "discussion_comments": [
      {
        "comment_id": "33891462",
        "repo_full_name": "avelino/awesome-go",
        "pr_number": 484,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "33891462",
        "commented_code": "@@ -20,16 +20,18 @@ Please contribute links to packages/projects you have used or are familiar with.\n \n ## Quality standard\n \n-To stay on the list, package repositories should adhere to these quality standards:\n+To be on the list, project repositories should adhere to these quality standards:\n \n-- Generally useful to the community\n-- Functional\n-- Actively maintained (even if that just means acknowledging open issues when they arise)\n-- Stable, or progressing toward stable\n-- Documented (preferably godoc.org)\n-- Tests are preferred (when possible)\n+- Code is functional\n+- Generally useful to the wider community of Go programmers\n+- Actively maintained\n+  - Regular, recent commits\n+  - Or, for finished projects, issues and pull requests are responded to\n+- Stable or progressing toward stable\n+- Thoroughly documented (README, godoc comments, etc.)\n+- Tests, where practical",
        "comment_created_at": "2015-07-05T02:31:23+00:00",
        "comment_author": "dmitshur",
        "comment_body": "Suggestion. I think we should enforce it to follow [recommended Go style](https://github.com/golang/go/wiki/CodeReviewComments) (not necessarily perfectly, but to a large degree) and therefore have no or little `golint` issues.\n\nThe only exceptions should be existing packages that are extremely useful, popular and well known (but those tend to follow recommended Go style anyway).\n\nI think high quality Go packages tend to already do this anyway, and requiring this extra effort will filter out many unhelpful packages where authors did not put in a lot of time and effort or care into making the Go package as nice as it can be.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "33891962",
    "pr_number": 484,
    "pr_file": "CONTRIBUTING.md",
    "created_at": "2015-07-05T05:05:39+00:00",
    "commented_code": "## Quality standard\n \n-To stay on the list, package repositories should adhere to these quality standards:\n+To be on the list, project repositories should adhere to these quality standards:\n \n-- Generally useful to the community\n-- Functional\n-- Actively maintained (even if that just means acknowledging open issues when they arise)\n-- Stable, or progressing toward stable\n-- Documented (preferably godoc.org)\n-- Tests are preferred (when possible)\n+- Code is functional\n+- Generally useful to the wider community of Go programmers\n+- Actively maintained\n+  - Regular, recent commits\n+  - Or, for finished projects, issues and pull requests are responded to\n+- Stable or progressing toward stable\n+- Thoroughly documented (README, godoc comments, etc.)\n+- Tests, where practical",
    "repo_full_name": "avelino/awesome-go",
    "discussion_comments": [
      {
        "comment_id": "33891962",
        "repo_full_name": "avelino/awesome-go",
        "pr_number": 484,
        "pr_file": "CONTRIBUTING.md",
        "discussion_id": "33891962",
        "commented_code": "@@ -20,16 +20,18 @@ Please contribute links to packages/projects you have used or are familiar with.\n \n ## Quality standard\n \n-To stay on the list, package repositories should adhere to these quality standards:\n+To be on the list, project repositories should adhere to these quality standards:\n \n-- Generally useful to the community\n-- Functional\n-- Actively maintained (even if that just means acknowledging open issues when they arise)\n-- Stable, or progressing toward stable\n-- Documented (preferably godoc.org)\n-- Tests are preferred (when possible)\n+- Code is functional\n+- Generally useful to the wider community of Go programmers\n+- Actively maintained\n+  - Regular, recent commits\n+  - Or, for finished projects, issues and pull requests are responded to\n+- Stable or progressing toward stable\n+- Thoroughly documented (README, godoc comments, etc.)\n+- Tests, where practical",
        "comment_created_at": "2015-07-05T05:05:39+00:00",
        "comment_author": "mholt",
        "comment_body": "I like that idea, although I do have some reservations about golint. It's a great tool but the output is mainly suggestions... for example, I disagree with it on several points of style.\n\nWhat about [goreportcard.com](http://goreportcard.com) - it does use golint but it also incorporates other factors into the grade... certainly not perfect but easier than combing through it manually. (We'd still need to check docs, readme, maintenance, etc.)\n",
        "pr_file_module": null
      }
    ]
  }
]