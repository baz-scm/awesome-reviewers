[
  {
    "discussion_id": "70883152",
    "pr_number": 1054,
    "pr_file": "lib/signers/v4.js",
    "created_at": "2016-07-14T21:02:02+00:00",
    "commented_code": "return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');\n      }\n\n      cachedSecret[this.serviceName] = {\n      cachedSecret[cacheIdentifier] = {\n        region: this.request.region, date: date,\n        key: kCredentials, akid: credentials.accessKeyId\n      };",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "70883152",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1054,
        "pr_file": "lib/signers/v4.js",
        "discussion_id": "70883152",
        "commented_code": "@@ -117,13 +118,13 @@ AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {\n         return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');\n       }\n \n-      cachedSecret[this.serviceName] = {\n+      cachedSecret[cacheIdentifier] = {\n         region: this.request.region, date: date,\n         key: kCredentials, akid: credentials.accessKeyId\n       };",
        "comment_created_at": "2016-07-14T21:02:02+00:00",
        "comment_author": "LiuJoyceC",
        "comment_body": "We should put a maximum size constraint on `cachedSecret`. Before, there was only one cache per service (and only the last signature key for that service is kept), so the cache was necessarily bounded by the number of services. There is no upper bound on the number of service clients generated. Some applications could be generating a new service client for every request. The service client objects get garbage-collected eventually, but the cache doesn't and could grow to millions of objects fairly quickly and hog a lot of memory. Perhaps we could have a `cacheIdentifierQueue` of some sort so that when it's length reaches a certain number, we can get the oldest `cacheIdentifier` and delete it from `cachedSecret`.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "101653214",
    "pr_number": 1350,
    "pr_file": "lib/signers/v4_credentials.js",
    "created_at": "2017-02-16T23:25:57+00:00",
    "commented_code": "var AWS = require('../core');\n\n/**\n * @api private\n */\nvar cachedSecret = {};\n\n/**\n * @api private\n */\nvar cacheQueue = [];\n\n/**\n * @api private\n */\nvar maxCacheEntries = 50;\n\n/**\n * @api private\n */\nvar v4Identifier = 'aws4_request';\n\nAWS.Signers.v4_credentials = {\n  /**\n   * @api private\n   *\n   * @param date [String]\n   * @param region [String]\n   * @param serviceName [String]\n   * @returns {string}\n   */\n  createScope: function createScope(date, region, serviceName) {\n    return [\n      date.substr(0, 8),\n      region,\n      serviceName,\n      v4Identifier\n    ].join('/');\n  },\n\n  /**\n   * @api private\n   *\n   * @param credentials [Credentials]\n   * @param date [String]\n   * @param region [String]\n   * @param service [String]\n   * @param shouldCache [Boolean]\n   * @returns {String}\n   */\n  getSigningKey: function getSigningKey(\n    credentials,\n    date,\n    region,\n    service,\n    shouldCache\n  ) {\n    var cacheKey = [credentials.accessKeyId, date, region, service].join('_');",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "101653214",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1350,
        "pr_file": "lib/signers/v4_credentials.js",
        "discussion_id": "101653214",
        "commented_code": "@@ -0,0 +1,95 @@\n+var AWS = require('../core');\n+\n+/**\n+ * @api private\n+ */\n+var cachedSecret = {};\n+\n+/**\n+ * @api private\n+ */\n+var cacheQueue = [];\n+\n+/**\n+ * @api private\n+ */\n+var maxCacheEntries = 50;\n+\n+/**\n+ * @api private\n+ */\n+var v4Identifier = 'aws4_request';\n+\n+AWS.Signers.v4_credentials = {\n+  /**\n+   * @api private\n+   *\n+   * @param date [String]\n+   * @param region [String]\n+   * @param serviceName [String]\n+   * @returns {string}\n+   */\n+  createScope: function createScope(date, region, serviceName) {\n+    return [\n+      date.substr(0, 8),\n+      region,\n+      serviceName,\n+      v4Identifier\n+    ].join('/');\n+  },\n+\n+  /**\n+   * @api private\n+   *\n+   * @param credentials [Credentials]\n+   * @param date [String]\n+   * @param region [String]\n+   * @param service [String]\n+   * @param shouldCache [Boolean]\n+   * @returns {String}\n+   */\n+  getSigningKey: function getSigningKey(\n+    credentials,\n+    date,\n+    region,\n+    service,\n+    shouldCache\n+  ) {\n+    var cacheKey = [credentials.accessKeyId, date, region, service].join('_');",
        "comment_created_at": "2017-02-16T23:25:57+00:00",
        "comment_author": "chrisradek",
        "comment_body": "We had 2 issues reported because this cache key wasn't unique enough:\r\nhttps://github.com/aws/aws-sdk-js/pull/1054\r\n\r\nYou may need to pass the serviceClientId as well.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "101667655",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1350,
        "pr_file": "lib/signers/v4_credentials.js",
        "discussion_id": "101653214",
        "commented_code": "@@ -0,0 +1,95 @@\n+var AWS = require('../core');\n+\n+/**\n+ * @api private\n+ */\n+var cachedSecret = {};\n+\n+/**\n+ * @api private\n+ */\n+var cacheQueue = [];\n+\n+/**\n+ * @api private\n+ */\n+var maxCacheEntries = 50;\n+\n+/**\n+ * @api private\n+ */\n+var v4Identifier = 'aws4_request';\n+\n+AWS.Signers.v4_credentials = {\n+  /**\n+   * @api private\n+   *\n+   * @param date [String]\n+   * @param region [String]\n+   * @param serviceName [String]\n+   * @returns {string}\n+   */\n+  createScope: function createScope(date, region, serviceName) {\n+    return [\n+      date.substr(0, 8),\n+      region,\n+      serviceName,\n+      v4Identifier\n+    ].join('/');\n+  },\n+\n+  /**\n+   * @api private\n+   *\n+   * @param credentials [Credentials]\n+   * @param date [String]\n+   * @param region [String]\n+   * @param service [String]\n+   * @param shouldCache [Boolean]\n+   * @returns {String}\n+   */\n+  getSigningKey: function getSigningKey(\n+    credentials,\n+    date,\n+    region,\n+    service,\n+    shouldCache\n+  ) {\n+    var cacheKey = [credentials.accessKeyId, date, region, service].join('_');",
        "comment_created_at": "2017-02-17T01:16:05+00:00",
        "comment_author": "jeskew",
        "comment_body": "The serviceClientId is orthogonal to the uniqueness of this cache key, but I see your point. I'll use an HMAC of the AKID and secret key.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "229471764",
    "pr_number": 2253,
    "pr_file": "lib/discover_endpoint.js",
    "created_at": "2018-10-30T20:23:49+00:00",
    "commented_code": "var AWS = require('./core');\nvar util = require('./util');\nvar ENDPOINT_OPERATION_MAX_RETRIES = 60;\nvar endpointDiscoveryEnabledEnv = 'AWS_ENABLE_ENDPOINT_DISCOVERY';\n\n/**\n * Generate key to index the endpoints in the cache\n * @return [map<String,String>] object with keys to index endpoints.\n * @api private\n */\nfunction getCacheKey(request) {\n  var service = request.service;\n  var api = service.api || {};\n  var operations = api.operations;\n  var identifiers = {};\n  if (operations[request.operation] && operations[request.operation].name) {",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "229471764",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 2253,
        "pr_file": "lib/discover_endpoint.js",
        "discussion_id": "229471764",
        "commented_code": "@@ -0,0 +1,340 @@\n+var AWS = require('./core');\n+var util = require('./util');\n+var ENDPOINT_OPERATION_MAX_RETRIES = 60;\n+var endpointDiscoveryEnabledEnv = 'AWS_ENABLE_ENDPOINT_DISCOVERY';\n+\n+/**\n+ * Generate key to index the endpoints in the cache\n+ * @return [map<String,String>] object with keys to index endpoints.\n+ * @api private\n+ */\n+function getCacheKey(request) {\n+  var service = request.service;\n+  var api = service.api || {};\n+  var operations = api.operations;\n+  var identifiers = {};\n+  if (operations[request.operation] && operations[request.operation].name) {",
        "comment_created_at": "2018-10-30T20:23:49+00:00",
        "comment_author": "chrisradek",
        "comment_body": "I think operation is only required if custom identifiers are defined for an operation. Is that not the case? Might help to keep the size of your cache down if we omitted operation if it isn't needed.",
        "pr_file_module": null
      }
    ]
  }
]