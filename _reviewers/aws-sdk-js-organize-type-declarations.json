[
  {
    "discussion_id": "84805047",
    "pr_number": 1189,
    "pr_file": "clients/acm.d.ts",
    "created_at": "2016-10-24T23:28:51+00:00",
    "commented_code": "import {Request} from '../lib/request';\nimport {Response} from '../lib/response';\nimport {AWSError} from '../lib/error';\nimport {Service} from '../lib/service';\ndeclare class ACM extends Service {\n  /**\n   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n   */\n  addTagsToCertificate(params: ACM.AddTagsToCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n   */\n  addTagsToCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n   */\n  deleteCertificate(params: ACM.DeleteCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n   */\n  deleteCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n   */\n  describeCertificate(params: ACM.DescribeCertificateRequest, callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n  /**\n   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n   */\n  describeCertificate(callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n  /**\n   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n   */\n  getCertificate(params: ACM.GetCertificateRequest, callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n  /**\n   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n   */\n  getCertificate(callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n  /**\n   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n   */\n  listCertificates(params: ACM.ListCertificatesRequest, callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n  /**\n   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n   */\n  listCertificates(callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n  /**\n   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n   */\n  listTagsForCertificate(params: ACM.ListTagsForCertificateRequest, callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n  /**\n   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n   */\n  listTagsForCertificate(callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n  /**\n   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n   */\n  removeTagsFromCertificate(params: ACM.RemoveTagsFromCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n   */\n  removeTagsFromCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n   */\n  requestCertificate(params: ACM.RequestCertificateRequest, callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n  /**\n   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n   */\n  requestCertificate(callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n  /**\n   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n   */\n  resendValidationEmail(params: ACM.ResendValidationEmailRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n  /**\n   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n   */\n  resendValidationEmail(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n}\ndeclare namespace ACM {",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "84805047",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1189,
        "pr_file": "clients/acm.d.ts",
        "discussion_id": "84805047",
        "commented_code": "@@ -0,0 +1,350 @@\n+import {Request} from '../lib/request';\n+import {Response} from '../lib/response';\n+import {AWSError} from '../lib/error';\n+import {Service} from '../lib/service';\n+declare class ACM extends Service {\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(params: ACM.AddTagsToCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(params: ACM.DeleteCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(params: ACM.DescribeCertificateRequest, callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(params: ACM.GetCertificateRequest, callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(params: ACM.ListCertificatesRequest, callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(params: ACM.ListTagsForCertificateRequest, callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(params: ACM.RemoveTagsFromCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(params: ACM.RequestCertificateRequest, callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(params: ACM.ResendValidationEmailRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+}\n+declare namespace ACM {",
        "comment_created_at": "2016-10-24T23:28:51+00:00",
        "comment_author": "LiuJoyceC",
        "comment_body": "Is there a reason the service model's shapes need to be on this namespace? When I type `AWS.ACM.`, I don't think my code completion tool should try to complete `AddTagsToCertificateRequest` or `CertificateBody`, since these aren't actually valid properties on `AWS.ACM`. Instead, this namespace should contain `apiVersions`, `serviceIdentifier`, and `services` (unless these are private, in which case just don't have an `ACM` namespace). The shapes can live in a separate namespace that isn't exported, and you just have to change the references above. I've tested this by changing this namespace name to be `Shapes` (and changing references above), and I still get the correct code completion suggestions when I'm creating my `params` in a request, and I no longer get shape name suggestions when I type `AWS.ACM.`.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "84809757",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1189,
        "pr_file": "clients/acm.d.ts",
        "discussion_id": "84805047",
        "commented_code": "@@ -0,0 +1,350 @@\n+import {Request} from '../lib/request';\n+import {Response} from '../lib/response';\n+import {AWSError} from '../lib/error';\n+import {Service} from '../lib/service';\n+declare class ACM extends Service {\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(params: ACM.AddTagsToCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(params: ACM.DeleteCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(params: ACM.DescribeCertificateRequest, callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(params: ACM.GetCertificateRequest, callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(params: ACM.ListCertificatesRequest, callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(params: ACM.ListTagsForCertificateRequest, callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(params: ACM.RemoveTagsFromCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(params: ACM.RequestCertificateRequest, callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(params: ACM.ResendValidationEmailRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+}\n+declare namespace ACM {",
        "comment_created_at": "2016-10-25T00:12:02+00:00",
        "comment_author": "chrisradek",
        "comment_body": "I wanted to export all the interfaces so that users could cast a result if they needed to, but I'm not sure if that's necessary. I'll have to take a look at some other TypeScript libraries to see if that's common practice.\n\nYou should only see these interfaces when looking at the service client constructors, but not on the service client instances.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "84816531",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1189,
        "pr_file": "clients/acm.d.ts",
        "discussion_id": "84805047",
        "commented_code": "@@ -0,0 +1,350 @@\n+import {Request} from '../lib/request';\n+import {Response} from '../lib/response';\n+import {AWSError} from '../lib/error';\n+import {Service} from '../lib/service';\n+declare class ACM extends Service {\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(params: ACM.AddTagsToCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(params: ACM.DeleteCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(params: ACM.DescribeCertificateRequest, callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(params: ACM.GetCertificateRequest, callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(params: ACM.ListCertificatesRequest, callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(params: ACM.ListTagsForCertificateRequest, callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(params: ACM.RemoveTagsFromCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(params: ACM.RequestCertificateRequest, callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(params: ACM.ResendValidationEmailRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+}\n+declare namespace ACM {",
        "comment_created_at": "2016-10-25T01:27:43+00:00",
        "comment_author": "LiuJoyceC",
        "comment_body": "Right, it would only be on the constructor, but there are valid reasons a customer may want to look at the properties of the constructor such as looking up what `apiVersions` are available for a service, or for the case of S3 and DynamoDB, they want to access the `ManagedUpload` or `DocumentClient`. When they try to access these, the constructors will autocomplete with a large number of properties that aren't real and make it difficult to find the actual property they are trying to access.\n",
        "pr_file_module": null
      },
      {
        "comment_id": "85429596",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1189,
        "pr_file": "clients/acm.d.ts",
        "discussion_id": "84805047",
        "commented_code": "@@ -0,0 +1,350 @@\n+import {Request} from '../lib/request';\n+import {Response} from '../lib/response';\n+import {AWSError} from '../lib/error';\n+import {Service} from '../lib/service';\n+declare class ACM extends Service {\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(params: ACM.AddTagsToCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Adds one or more tags to an ACM Certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM Certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see Tagging ACM Certificates. To remove one or more tags, use the RemoveTagsFromCertificate action. To view all of the tags that have been applied to the certificate, use the ListTagsForCertificate action.\n+   */\n+  addTagsToCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(params: ACM.DeleteCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Deletes an ACM Certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list of ACM Certificates that can be displayed by calling the ListCertificates action or be retrieved by calling the GetCertificate action. The certificate will not be available for use by other AWS services.  You cannot delete an ACM Certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed. \n+   */\n+  deleteCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(params: ACM.DescribeCertificateRequest, callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Returns a list of the fields contained in the specified ACM Certificate. For example, this action returns the certificate status, a flag that indicates whether the certificate is associated with any other AWS service, and the date at which the certificate request was created. You specify the ACM Certificate on input by its Amazon Resource Name (ARN).\n+   */\n+  describeCertificate(callback?: (err: AWSError, data: ACM.DescribeCertificateResponse) => void): Request<ACM.DescribeCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(params: ACM.GetCertificateRequest, callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves an ACM Certificate and certificate chain for the certificate specified by an ARN. The chain is an ordered list of certificates that contains the root certificate, intermediate certificates of subordinate CAs, and the ACM Certificate. The certificate and certificate chain are base64 encoded. If you want to decode the certificate chain to see the individual certificate fields, you can use OpenSSL.  Currently, ACM Certificates can be used only with Elastic Load Balancing and Amazon CloudFront. \n+   */\n+  getCertificate(callback?: (err: AWSError, data: ACM.GetCertificateResponse) => void): Request<ACM.GetCertificateResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(params: ACM.ListCertificatesRequest, callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Retrieves a list of ACM Certificates and the domain name for each. You can optionally filter the list to return only the certificates that match the specified status.\n+   */\n+  listCertificates(callback?: (err: AWSError, data: ACM.ListCertificatesResponse) => void): Request<ACM.ListCertificatesResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(params: ACM.ListTagsForCertificateRequest, callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Lists the tags that have been applied to the ACM Certificate. Use the certificate ARN to specify the certificate. To add a tag to an ACM Certificate, use the AddTagsToCertificate action. To delete a tag, use the RemoveTagsFromCertificate action.\n+   */\n+  listTagsForCertificate(callback?: (err: AWSError, data: ACM.ListTagsForCertificateResponse) => void): Request<ACM.ListTagsForCertificateResponse, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(params: ACM.RemoveTagsFromCertificateRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Remove one or more tags from an ACM Certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a certificate, use the AddTagsToCertificate action. To view all of the tags that have been applied to a specific ACM Certificate, use the ListTagsForCertificate action.\n+   */\n+  removeTagsFromCertificate(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(params: ACM.RequestCertificateRequest, callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Requests an ACM Certificate for use with other AWS services. To request an ACM Certificate, you must specify the fully qualified domain name (FQDN) for your site. You can also specify additional FQDNs if users can reach your site by using other names. For each domain name you specify, email is sent to the domain owner to request approval to issue the certificate. After receiving approval from the domain owner, the ACM Certificate is issued. For more information, see the AWS Certificate Manager User Guide .\n+   */\n+  requestCertificate(callback?: (err: AWSError, data: ACM.RequestCertificateResponse) => void): Request<ACM.RequestCertificateResponse, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(params: ACM.ResendValidationEmailRequest, callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+  /**\n+   * Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM Certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking I Approve. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM Certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate.\n+   */\n+  resendValidationEmail(callback?: (err: AWSError, data: {}) => void): Request<{}, AWSError>;\n+}\n+declare namespace ACM {",
        "comment_created_at": "2016-10-27T21:17:07+00:00",
        "comment_author": "chrisradek",
        "comment_body": "So, I tried a few different things. Ultimately, I went with putting the exported types in a sub-namespace:\n`declare namespace SERVICE.Types {`\nWhen I put them on their own namespace, I had to explicitly import them into my app, otherwise the typescript compiler would complain:\nhttps://github.com/Microsoft/TypeScript/issues/9944\n\nI also wanted them to be exported so user's can specify a type for cases when the typescript compiler can't quite infer what a type should be. That might not be necessary once https://github.com/Microsoft/TypeScript/issues/6606 is addressed.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "85630294",
    "pr_number": 1189,
    "pr_file": "lib/config.d.ts",
    "created_at": "2016-10-29T01:03:41+00:00",
    "commented_code": "/// <reference types=\"node\" />\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport {AWSError} from './error';\nimport {Credentials} from './credentials';\nexport class Config {\n    /**\n     * Creates a new configuration object.\n     * This is the object that passes option data along to service requests, including credentials, security, region information, and some service specific settings.\n     */\n    constructor(options?: ConfigurationOptions);\n    /**\n     * Loads credentials from the configuration object.\n     */\n    getCredentials(callback: (err: AWSError) => void): void;\n    /**\n     * Loads configuration data from a JSON file into this config object.\n     * Loading configuration willr eset all existing configuration on the object.\n     * This feature is not supported in the browser environment of the SDK.\n     * \n     * @param {string} path - the path relative to your process's current working directory to load configuration from.\n     */\n    loadFromPath(path: string): Config;\n    /**\n     * Updates the current configuration object with new options.\n     * \n     * @param {ConfigurationOptions} options - a map of option keys and values.\n     * @param {boolean} allowUnknownKeys - Defaults to false. Whether unknown keys can be set on the configuration object.\n     */\n    update(options: ConfigurationOptions, allowUnknownKeys?: boolean): void;\n    /**\n     * Sets the promise dependency the SDK will use wherever Promises are returned.\n     * @param {function} dep - a reference to a Promise constructor\n     */\n    setPromisesDependency(dep: any): void;\n\n    /**\n     * Whether to compute checksums for payload bodies when the service accepts it.\n     * Currently supported in S3 only.\n     */\n    computeChecksums?: boolean\n    /**\n     * Whether types are converted when parsing response data.\n     */\n    convertResponseTypes?: boolean\n    /**\n     * Whether to apply a clock skew correction and retry requests that fail because of an skewed client clock.\n     */\n    correctClockSkew?: boolean\n    /**\n     * The AWS credentials to sign requests with.\n     */\n    credentials: Credentials\n    /**\n     * A set of options to pass to the low-level HTTP request.\n     */\n    httpOptions?: HTTPOptions\n    /**\n     * An object that responds to .write() (like a stream) or .log() (like the console object) in order to log information about requests.\n     */\n    logger?: Logger\n    /**\n     * The maximum amount of redirects to follow for a service request.\n     */\n    maxRedirects?: number\n    /**\n     * The maximum amount of retries to perform for a service request.\n     */\n    maxRetries?: number\n    /**\n     * Returns whether input parameters should be validated against the operation description before sending the request. \n     * Defaults to true. \n     * Pass a map to enable any of the following specific validation features: min|max|pattern|enum\n     */\n    paramValidation?: ParamValidation | boolean\n    /**\n     * The region to send service requests to.\n     */\n    region?: string\n    /**\n     * Returns A set of options to configure the retry delay on retryable errors.\n     */\n    retryDelayOptions?: RetryDelayOptions\n    /**\n     * Whether the provided endpoint addresses an individual bucket.\n     * false if it addresses the root API endpoint.\n     */\n    s3BucketEndpoint?: boolean\n    /**\n     * Whether to disable S3 body signing when using signature version v4.\n     */\n    s3DisableBodySigning?: boolean\n    /**\n     * Whether to force path style URLs for S3 objects.\n     */\n    s3ForcePathStyle?: boolean\n    /**\n     * Whether the signature to sign requests with (overriding the API configuration) is cached.\n     */\n    signatureCache?: boolean\n    /**\n     * The signature version to sign requests with (overriding the API configuration).\n     * Possible values: 'v2'|'v3'|'v4'\n     */\n    signatureVersion?: \"v2\"|\"v3\"|\"v4\"|string\n    /**\n     * Whether SSL is enabled for requests.\n     */\n    sslEnabled?: boolean\n    /**\n     * An offset value in milliseconds to apply to all signing times.\n     */\n    systemClockOffset?: number\n    /**\n     * Whether to use the Accelerate endpoint with the S3 service.\n     */\n    useAccelerateEndpoint?: boolean\n}\n\ninterface HTTPOptions {\n    /**\n     * the URL to proxy requests through.\n     */\n    proxy?: string\n    /**\n     * the Agent object to perform HTTP requests with.\n     * Used for connection pooling.\n     * Defaults to the global agent (http.globalAgent) for non-SSL connections.\n     */\n    agent?: http.Agent | https.Agent\n    /**\n     * The number of milliseconds to wait before giving up on a connection attempt.\n     * Defaults to two minutes (120000).\n     */\n    timeout?: number\n    /**\n     * Whether the SDK will send asynchronous HTTP requests.\n     * Used in the browser environment only.\n     * Set to false to send requests synchronously.\n     * Defaults to true (async on).\n     */\n    xhrAsync?: boolean\n    /**\n     * Sets the 'withCredentials' property of an XMLHttpRequest object.\n     * Used in the browser environment only.\n     * Defaults to false.\n     */\n    xhrWithCredentials?: boolean\n}\ninterface Logger {\n    write?: (chunk: any, encoding?: string, callback?: () => void) => void\n    log?: (...messages: any[]) => void;\n}\ninterface ParamValidation {\n    /**\n     * Validates that a value meets the min constraint. \n     * This is enabled by default when paramValidation is set to true.\n     */\n    min?: boolean\n    /**\n     * Validates that a value meets the max constraint.\n     */\n    max?: boolean\n    /**\n     * Validates that a string value matches a regular expression.\n     */\n    pattern?: boolean\n    /**\n     * Validates that a string value matches one of the allowable enum values.\n     */\n    enum?: boolean\n}\ninterface RetryDelayOptions {\n    /**\n     * The base number of milliseconds to use in the exponential backoff for operation retries. \n     * Defaults to 100 ms.\n     */\n    base?: number\n    /**\n     * A custom function that accepts a retry count and returns the amount of time to delay in milliseconds. \n     * The base option will be ignored if this option is supplied.\n     */\n    customBackoff?: (retryCount: number) => number\n}\ninterface ConfigurationOptions {",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "85630294",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1189,
        "pr_file": "lib/config.d.ts",
        "discussion_id": "85630294",
        "commented_code": "@@ -0,0 +1,268 @@\n+/// <reference types=\"node\" />\n+\n+import * as http from 'http';\n+import * as https from 'https';\n+import {AWSError} from './error';\n+import {Credentials} from './credentials';\n+export class Config {\n+    /**\n+     * Creates a new configuration object.\n+     * This is the object that passes option data along to service requests, including credentials, security, region information, and some service specific settings.\n+     */\n+    constructor(options?: ConfigurationOptions);\n+    /**\n+     * Loads credentials from the configuration object.\n+     */\n+    getCredentials(callback: (err: AWSError) => void): void;\n+    /**\n+     * Loads configuration data from a JSON file into this config object.\n+     * Loading configuration willr eset all existing configuration on the object.\n+     * This feature is not supported in the browser environment of the SDK.\n+     * \n+     * @param {string} path - the path relative to your process's current working directory to load configuration from.\n+     */\n+    loadFromPath(path: string): Config;\n+    /**\n+     * Updates the current configuration object with new options.\n+     * \n+     * @param {ConfigurationOptions} options - a map of option keys and values.\n+     * @param {boolean} allowUnknownKeys - Defaults to false. Whether unknown keys can be set on the configuration object.\n+     */\n+    update(options: ConfigurationOptions, allowUnknownKeys?: boolean): void;\n+    /**\n+     * Sets the promise dependency the SDK will use wherever Promises are returned.\n+     * @param {function} dep - a reference to a Promise constructor\n+     */\n+    setPromisesDependency(dep: any): void;\n+\n+    /**\n+     * Whether to compute checksums for payload bodies when the service accepts it.\n+     * Currently supported in S3 only.\n+     */\n+    computeChecksums?: boolean\n+    /**\n+     * Whether types are converted when parsing response data.\n+     */\n+    convertResponseTypes?: boolean\n+    /**\n+     * Whether to apply a clock skew correction and retry requests that fail because of an skewed client clock.\n+     */\n+    correctClockSkew?: boolean\n+    /**\n+     * The AWS credentials to sign requests with.\n+     */\n+    credentials: Credentials\n+    /**\n+     * A set of options to pass to the low-level HTTP request.\n+     */\n+    httpOptions?: HTTPOptions\n+    /**\n+     * An object that responds to .write() (like a stream) or .log() (like the console object) in order to log information about requests.\n+     */\n+    logger?: Logger\n+    /**\n+     * The maximum amount of redirects to follow for a service request.\n+     */\n+    maxRedirects?: number\n+    /**\n+     * The maximum amount of retries to perform for a service request.\n+     */\n+    maxRetries?: number\n+    /**\n+     * Returns whether input parameters should be validated against the operation description before sending the request. \n+     * Defaults to true. \n+     * Pass a map to enable any of the following specific validation features: min|max|pattern|enum\n+     */\n+    paramValidation?: ParamValidation | boolean\n+    /**\n+     * The region to send service requests to.\n+     */\n+    region?: string\n+    /**\n+     * Returns A set of options to configure the retry delay on retryable errors.\n+     */\n+    retryDelayOptions?: RetryDelayOptions\n+    /**\n+     * Whether the provided endpoint addresses an individual bucket.\n+     * false if it addresses the root API endpoint.\n+     */\n+    s3BucketEndpoint?: boolean\n+    /**\n+     * Whether to disable S3 body signing when using signature version v4.\n+     */\n+    s3DisableBodySigning?: boolean\n+    /**\n+     * Whether to force path style URLs for S3 objects.\n+     */\n+    s3ForcePathStyle?: boolean\n+    /**\n+     * Whether the signature to sign requests with (overriding the API configuration) is cached.\n+     */\n+    signatureCache?: boolean\n+    /**\n+     * The signature version to sign requests with (overriding the API configuration).\n+     * Possible values: 'v2'|'v3'|'v4'\n+     */\n+    signatureVersion?: \"v2\"|\"v3\"|\"v4\"|string\n+    /**\n+     * Whether SSL is enabled for requests.\n+     */\n+    sslEnabled?: boolean\n+    /**\n+     * An offset value in milliseconds to apply to all signing times.\n+     */\n+    systemClockOffset?: number\n+    /**\n+     * Whether to use the Accelerate endpoint with the S3 service.\n+     */\n+    useAccelerateEndpoint?: boolean\n+}\n+\n+interface HTTPOptions {\n+    /**\n+     * the URL to proxy requests through.\n+     */\n+    proxy?: string\n+    /**\n+     * the Agent object to perform HTTP requests with.\n+     * Used for connection pooling.\n+     * Defaults to the global agent (http.globalAgent) for non-SSL connections.\n+     */\n+    agent?: http.Agent | https.Agent\n+    /**\n+     * The number of milliseconds to wait before giving up on a connection attempt.\n+     * Defaults to two minutes (120000).\n+     */\n+    timeout?: number\n+    /**\n+     * Whether the SDK will send asynchronous HTTP requests.\n+     * Used in the browser environment only.\n+     * Set to false to send requests synchronously.\n+     * Defaults to true (async on).\n+     */\n+    xhrAsync?: boolean\n+    /**\n+     * Sets the 'withCredentials' property of an XMLHttpRequest object.\n+     * Used in the browser environment only.\n+     * Defaults to false.\n+     */\n+    xhrWithCredentials?: boolean\n+}\n+interface Logger {\n+    write?: (chunk: any, encoding?: string, callback?: () => void) => void\n+    log?: (...messages: any[]) => void;\n+}\n+interface ParamValidation {\n+    /**\n+     * Validates that a value meets the min constraint. \n+     * This is enabled by default when paramValidation is set to true.\n+     */\n+    min?: boolean\n+    /**\n+     * Validates that a value meets the max constraint.\n+     */\n+    max?: boolean\n+    /**\n+     * Validates that a string value matches a regular expression.\n+     */\n+    pattern?: boolean\n+    /**\n+     * Validates that a string value matches one of the allowable enum values.\n+     */\n+    enum?: boolean\n+}\n+interface RetryDelayOptions {\n+    /**\n+     * The base number of milliseconds to use in the exponential backoff for operation retries. \n+     * Defaults to 100 ms.\n+     */\n+    base?: number\n+    /**\n+     * A custom function that accepts a retry count and returns the amount of time to delay in milliseconds. \n+     * The base option will be ignored if this option is supplied.\n+     */\n+    customBackoff?: (retryCount: number) => number\n+}\n+interface ConfigurationOptions {",
        "comment_created_at": "2016-10-29T01:03:41+00:00",
        "comment_author": "LiuJoyceC",
        "comment_body": "Instead of maintaining two separate but identical lists of these config options plus comments (here and above in the `Config` class), perhaps we could define this as an abstract class rather than an interface, and then the `Config` class could extend this abstract class.\nAnother solution could be to generate this file (which may be a good idea anyway since we need to include all of the service identifiers in the `Config` class as mentioned above). However, we would then need to maintain the comments for each of these configuration options in another file, since I noticed these comments aren't exactly identical to the documentation in the `config.js` file.\n",
        "pr_file_module": null
      }
    ]
  }
]