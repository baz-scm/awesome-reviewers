[
  {
    "discussion_id": "107227865",
    "pr_number": 1418,
    "pr_file": "test/config.spec.coffee",
    "created_at": "2017-03-21T17:51:13+00:00",
    "commented_code": "expect(configure(maxRetries: 2).maxRetries).to.equal(2)\n\n  describe 'retryDelayOptions', ->\n    it 'defaults to \"base: 100\"', ->",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "107227865",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1418,
        "pr_file": "test/config.spec.coffee",
        "discussion_id": "107227865",
        "commented_code": "@@ -60,8 +60,6 @@ describe 'AWS.Config', ->\n       expect(configure(maxRetries: 2).maxRetries).to.equal(2)\n \n   describe 'retryDelayOptions', ->\n-    it 'defaults to \"base: 100\"', ->",
        "comment_created_at": "2017-03-21T17:51:13+00:00",
        "comment_author": "jeskew",
        "comment_body": "Optional: you might want to add a test to service.spec.coffee verifying that a normal client still gets a retry base of 100 set.",
        "pr_file_module": null
      },
      {
        "comment_id": "107261089",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1418,
        "pr_file": "test/config.spec.coffee",
        "discussion_id": "107227865",
        "commented_code": "@@ -60,8 +60,6 @@ describe 'AWS.Config', ->\n       expect(configure(maxRetries: 2).maxRetries).to.equal(2)\n \n   describe 'retryDelayOptions', ->\n-    it 'defaults to \"base: 100\"', ->",
        "comment_created_at": "2017-03-21T20:06:21+00:00",
        "comment_author": "chrisradek",
        "comment_body": "There is a separate test that implicitly tests this, but happy to add an explicit test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "111287813",
    "pr_number": 1391,
    "pr_file": "test/credentials.spec.coffee",
    "created_at": "2017-04-13T00:13:45+00:00",
    "commented_code": "validateCredentials(creds)\n        expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]credentials/)\n\n      it 'loads credentials from path defined in AWS_SHARED_CREDENTIALS_FILE if AWS_SDK_LOAD_CONFIG is set', ->\n        process.env.AWS_SDK_LOAD_CONFIG = '1'\n        process.env.AWS_SHARED_CREDENTIALS_FILE = '/path/to/aws/credentials'\n        mock = '''\n        [default]\n        aws_access_key_id = akid\n        aws_secret_access_key = secret\n        aws_session_token = session\n        '''\n        helpers.spyOn(AWS.util, 'readFileSync').andReturn(mock)\n\n        creds = new AWS.SharedIniFileCredentials()\n        creds.get();\n        validateCredentials(creds)\n        expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]config/)\n        expect(AWS.util.readFileSync.calls[1].arguments[0]).to.equal(process.env.AWS_SHARED_CREDENTIALS_FILE)\n\n      it 'loads credentials from ~/.aws/config if AWS_SDK_LOAD_CONFIG is set', ->",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "111287813",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1391,
        "pr_file": "test/credentials.spec.coffee",
        "discussion_id": "111287813",
        "commented_code": "@@ -209,6 +233,53 @@ if AWS.util.isNode()\n         validateCredentials(creds)\n         expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]credentials/)\n \n+      it 'loads credentials from path defined in AWS_SHARED_CREDENTIALS_FILE if AWS_SDK_LOAD_CONFIG is set', ->\n+        process.env.AWS_SDK_LOAD_CONFIG = '1'\n+        process.env.AWS_SHARED_CREDENTIALS_FILE = '/path/to/aws/credentials'\n+        mock = '''\n+        [default]\n+        aws_access_key_id = akid\n+        aws_secret_access_key = secret\n+        aws_session_token = session\n+        '''\n+        helpers.spyOn(AWS.util, 'readFileSync').andReturn(mock)\n+\n+        creds = new AWS.SharedIniFileCredentials()\n+        creds.get();\n+        validateCredentials(creds)\n+        expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]config/)\n+        expect(AWS.util.readFileSync.calls[1].arguments[0]).to.equal(process.env.AWS_SHARED_CREDENTIALS_FILE)\n+\n+      it 'loads credentials from ~/.aws/config if AWS_SDK_LOAD_CONFIG is set', ->",
        "comment_created_at": "2017-04-13T00:13:45+00:00",
        "comment_author": "chrisradek",
        "comment_body": "Can we add a test to make sure the credentials from `~/.aws/credentials` is used preferentially over the credentials in `~/.aws/config` if the same profile exists in both files?",
        "pr_file_module": null
      },
      {
        "comment_id": "111301175",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1391,
        "pr_file": "test/credentials.spec.coffee",
        "discussion_id": "111287813",
        "commented_code": "@@ -209,6 +233,53 @@ if AWS.util.isNode()\n         validateCredentials(creds)\n         expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]credentials/)\n \n+      it 'loads credentials from path defined in AWS_SHARED_CREDENTIALS_FILE if AWS_SDK_LOAD_CONFIG is set', ->\n+        process.env.AWS_SDK_LOAD_CONFIG = '1'\n+        process.env.AWS_SHARED_CREDENTIALS_FILE = '/path/to/aws/credentials'\n+        mock = '''\n+        [default]\n+        aws_access_key_id = akid\n+        aws_secret_access_key = secret\n+        aws_session_token = session\n+        '''\n+        helpers.spyOn(AWS.util, 'readFileSync').andReturn(mock)\n+\n+        creds = new AWS.SharedIniFileCredentials()\n+        creds.get();\n+        validateCredentials(creds)\n+        expect(AWS.util.readFileSync.calls[0].arguments[0]).to.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]config/)\n+        expect(AWS.util.readFileSync.calls[1].arguments[0]).to.equal(process.env.AWS_SHARED_CREDENTIALS_FILE)\n+\n+      it 'loads credentials from ~/.aws/config if AWS_SDK_LOAD_CONFIG is set', ->",
        "comment_created_at": "2017-04-13T02:38:43+00:00",
        "comment_author": "jeskew",
        "comment_body": "I'll add a test for that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "111434683",
    "pr_number": 1391,
    "pr_file": "test/credentials.spec.coffee",
    "created_at": "2017-04-13T16:46:30+00:00",
    "commented_code": "expect(creds.expireTime).to.eql(new Date(0))\n        done()\n\n    it 'will assume a role from the credentials file whose source profile is defined in the config file', (done) ->\n      process.env.AWS_SDK_LOAD_CONFIG = '1'\n      helpers.spyOn(AWS.util, 'readFileSync').andCallFake (path) ->\n        if (path.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]credentials/))\n          '''\n          [default]\n          aws_access_key_id = akid\n          aws_secret_access_key = secret\n          role_arn = arn\n          source_profile = foo\n          '''\n        else\n          '''\n          [profile foo]\n          aws_access_key_id = akid2\n          aws_secret_access_key = secret2\n          '''\n      helpers.mockHttpResponse 200, {}, '''",
    "repo_full_name": "aws/aws-sdk-js",
    "discussion_comments": [
      {
        "comment_id": "111434683",
        "repo_full_name": "aws/aws-sdk-js",
        "pr_number": 1391,
        "pr_file": "test/credentials.spec.coffee",
        "discussion_id": "111434683",
        "commented_code": "@@ -370,6 +491,84 @@ if AWS.util.isNode()\n         expect(creds.expireTime).to.eql(new Date(0))\n         done()\n \n+    it 'will assume a role from the credentials file whose source profile is defined in the config file', (done) ->\n+      process.env.AWS_SDK_LOAD_CONFIG = '1'\n+      helpers.spyOn(AWS.util, 'readFileSync').andCallFake (path) ->\n+        if (path.match(/[\\/\\\\]home[\\/\\\\]user[\\/\\\\].aws[\\/\\\\]credentials/))\n+          '''\n+          [default]\n+          aws_access_key_id = akid\n+          aws_secret_access_key = secret\n+          role_arn = arn\n+          source_profile = foo\n+          '''\n+        else\n+          '''\n+          [profile foo]\n+          aws_access_key_id = akid2\n+          aws_secret_access_key = secret2\n+          '''\n+      helpers.mockHttpResponse 200, {}, '''",
        "comment_created_at": "2017-04-13T16:46:30+00:00",
        "comment_author": "chrisradek",
        "comment_body": "I'm not sure this test is actually ensuring that the creds from `profile foo` are used instead of `default`.\r\n\r\nWhat do you think about spying on `AWS.STS` or `AWS.Credentials` to get the accessKeyId that was used as the source?",
        "pr_file_module": null
      }
    ]
  }
]