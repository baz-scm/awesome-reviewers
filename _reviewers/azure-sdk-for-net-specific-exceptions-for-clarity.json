[
  {
    "discussion_id": "2058868488",
    "pr_number": 49293,
    "pr_file": "sdk/ai/Azure.AI.Projects/src/Custom/Agent/ToolCallsResolver.cs",
    "created_at": "2025-04-24T16:53:55+00:00",
    "commented_code": "﻿// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Text.Json;\nusing System.Xml.Linq;\n\nnamespace Azure.AI.Projects.Custom.Agent\n{\n    /// <summary>\n    /// ToolCallsResolver is used to resolve tool calls in the streaming API.\n    /// </summary>\n    public class ToolCallsResolver\n    {\n        private readonly Dictionary<string, Delegate> _delegates = new();\n\n        internal ToolCallsResolver(Dictionary<string, Delegate> delegates)\n        {\n            _delegates = delegates;\n        }\n\n        /// <summary>\n        /// Indicates whether auto tool calls are enabled.\n        /// </summary>\n        internal bool EnableAutoToolCalls => _delegates.Count > 0;\n\n        /// <summary>\n        /// Resolves the tool call by invoking the delegate associated with the function name.\n        /// It casts the function arguments to the appropriate types based on the delegate's parameters.\n        /// without knowing the answer.\n        /// </summary>\n        internal ToolOutput GetResolvedToolOutput(string functionName, string toolCallId, string functionArguments)\n        {\n            if (!_delegates.TryGetValue(functionName, out var func))\n            {\n                string error = $\"Function {functionName} not found.\";\n                throw new MissingMethodException(error);",
    "repo_full_name": "Azure/azure-sdk-for-net",
    "discussion_comments": [
      {
        "comment_id": "2058868488",
        "repo_full_name": "Azure/azure-sdk-for-net",
        "pr_number": 49293,
        "pr_file": "sdk/ai/Azure.AI.Projects/src/Custom/Agent/ToolCallsResolver.cs",
        "discussion_id": "2058868488",
        "commented_code": "@@ -0,0 +1,214 @@\n+﻿// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.Reflection;\n+using System.Text.Json;\n+using System.Xml.Linq;\n+\n+namespace Azure.AI.Projects.Custom.Agent\n+{\n+    /// <summary>\n+    /// ToolCallsResolver is used to resolve tool calls in the streaming API.\n+    /// </summary>\n+    public class ToolCallsResolver\n+    {\n+        private readonly Dictionary<string, Delegate> _delegates = new();\n+\n+        internal ToolCallsResolver(Dictionary<string, Delegate> delegates)\n+        {\n+            _delegates = delegates;\n+        }\n+\n+        /// <summary>\n+        /// Indicates whether auto tool calls are enabled.\n+        /// </summary>\n+        internal bool EnableAutoToolCalls => _delegates.Count > 0;\n+\n+        /// <summary>\n+        /// Resolves the tool call by invoking the delegate associated with the function name.\n+        /// It casts the function arguments to the appropriate types based on the delegate's parameters.\n+        /// without knowing the answer.\n+        /// </summary>\n+        internal ToolOutput GetResolvedToolOutput(string functionName, string toolCallId, string functionArguments)\n+        {\n+            if (!_delegates.TryGetValue(functionName, out var func))\n+            {\n+                string error = $\"Function {functionName} not found.\";\n+                throw new MissingMethodException(error);",
        "comment_created_at": "2025-04-24T16:53:55+00:00",
        "comment_author": "KrzysztofCwalina",
        "comment_body": "will it be retried?",
        "pr_file_module": null
      },
      {
        "comment_id": "2058998727",
        "repo_full_name": "Azure/azure-sdk-for-net",
        "pr_number": 49293,
        "pr_file": "sdk/ai/Azure.AI.Projects/src/Custom/Agent/ToolCallsResolver.cs",
        "discussion_id": "2058868488",
        "commented_code": "@@ -0,0 +1,214 @@\n+﻿// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.Reflection;\n+using System.Text.Json;\n+using System.Xml.Linq;\n+\n+namespace Azure.AI.Projects.Custom.Agent\n+{\n+    /// <summary>\n+    /// ToolCallsResolver is used to resolve tool calls in the streaming API.\n+    /// </summary>\n+    public class ToolCallsResolver\n+    {\n+        private readonly Dictionary<string, Delegate> _delegates = new();\n+\n+        internal ToolCallsResolver(Dictionary<string, Delegate> delegates)\n+        {\n+            _delegates = delegates;\n+        }\n+\n+        /// <summary>\n+        /// Indicates whether auto tool calls are enabled.\n+        /// </summary>\n+        internal bool EnableAutoToolCalls => _delegates.Count > 0;\n+\n+        /// <summary>\n+        /// Resolves the tool call by invoking the delegate associated with the function name.\n+        /// It casts the function arguments to the appropriate types based on the delegate's parameters.\n+        /// without knowing the answer.\n+        /// </summary>\n+        internal ToolOutput GetResolvedToolOutput(string functionName, string toolCallId, string functionArguments)\n+        {\n+            if (!_delegates.TryGetValue(functionName, out var func))\n+            {\n+                string error = $\"Function {functionName} not found.\";\n+                throw new MissingMethodException(error);",
        "comment_created_at": "2025-04-24T18:18:40+00:00",
        "comment_author": "howieleung",
        "comment_body": "Yes.   I did lot of experiments.   Depends on the question, if we submit this error to the model, the model might try to figure out the answer with its knowledge or memory.   It might raise the same function call again.   Or it might give up and say it doesn't have the information.",
        "pr_file_module": null
      },
      {
        "comment_id": "2059171479",
        "repo_full_name": "Azure/azure-sdk-for-net",
        "pr_number": 49293,
        "pr_file": "sdk/ai/Azure.AI.Projects/src/Custom/Agent/ToolCallsResolver.cs",
        "discussion_id": "2058868488",
        "commented_code": "@@ -0,0 +1,214 @@\n+﻿// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.Reflection;\n+using System.Text.Json;\n+using System.Xml.Linq;\n+\n+namespace Azure.AI.Projects.Custom.Agent\n+{\n+    /// <summary>\n+    /// ToolCallsResolver is used to resolve tool calls in the streaming API.\n+    /// </summary>\n+    public class ToolCallsResolver\n+    {\n+        private readonly Dictionary<string, Delegate> _delegates = new();\n+\n+        internal ToolCallsResolver(Dictionary<string, Delegate> delegates)\n+        {\n+            _delegates = delegates;\n+        }\n+\n+        /// <summary>\n+        /// Indicates whether auto tool calls are enabled.\n+        /// </summary>\n+        internal bool EnableAutoToolCalls => _delegates.Count > 0;\n+\n+        /// <summary>\n+        /// Resolves the tool call by invoking the delegate associated with the function name.\n+        /// It casts the function arguments to the appropriate types based on the delegate's parameters.\n+        /// without knowing the answer.\n+        /// </summary>\n+        internal ToolOutput GetResolvedToolOutput(string functionName, string toolCallId, string functionArguments)\n+        {\n+            if (!_delegates.TryGetValue(functionName, out var func))\n+            {\n+                string error = $\"Function {functionName} not found.\";\n+                throw new MissingMethodException(error);",
        "comment_created_at": "2025-04-24T20:24:59+00:00",
        "comment_author": "KrzysztofCwalina",
        "comment_body": "Don't we need two exceptions for this to work well. If the model passes a wrong argument, it might indeed retry successfully. But why would the modle give us a wrong function name? We gave it an explicit list of functions that we support",
        "pr_file_module": null
      },
      {
        "comment_id": "2060960574",
        "repo_full_name": "Azure/azure-sdk-for-net",
        "pr_number": 49293,
        "pr_file": "sdk/ai/Azure.AI.Projects/src/Custom/Agent/ToolCallsResolver.cs",
        "discussion_id": "2058868488",
        "commented_code": "@@ -0,0 +1,214 @@\n+﻿// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.Reflection;\n+using System.Text.Json;\n+using System.Xml.Linq;\n+\n+namespace Azure.AI.Projects.Custom.Agent\n+{\n+    /// <summary>\n+    /// ToolCallsResolver is used to resolve tool calls in the streaming API.\n+    /// </summary>\n+    public class ToolCallsResolver\n+    {\n+        private readonly Dictionary<string, Delegate> _delegates = new();\n+\n+        internal ToolCallsResolver(Dictionary<string, Delegate> delegates)\n+        {\n+            _delegates = delegates;\n+        }\n+\n+        /// <summary>\n+        /// Indicates whether auto tool calls are enabled.\n+        /// </summary>\n+        internal bool EnableAutoToolCalls => _delegates.Count > 0;\n+\n+        /// <summary>\n+        /// Resolves the tool call by invoking the delegate associated with the function name.\n+        /// It casts the function arguments to the appropriate types based on the delegate's parameters.\n+        /// without knowing the answer.\n+        /// </summary>\n+        internal ToolOutput GetResolvedToolOutput(string functionName, string toolCallId, string functionArguments)\n+        {\n+            if (!_delegates.TryGetValue(functionName, out var func))\n+            {\n+                string error = $\"Function {functionName} not found.\";\n+                throw new MissingMethodException(error);",
        "comment_created_at": "2025-04-25T22:23:57+00:00",
        "comment_author": "howieleung",
        "comment_body": "It is possible that the agent is created by Foundary UI or other application.   In their C# app, they call getAgent and attempt to stream.   If this agent has a function tool that isn't in the list of delegate, we want to raise exception.",
        "pr_file_module": null
      }
    ]
  }
]