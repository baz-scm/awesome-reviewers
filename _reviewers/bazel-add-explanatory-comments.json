[
  {
    "discussion_id": "2202836946",
    "pr_number": 24265,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyRegistry.java",
    "created_at": "2025-07-12T17:26:00+00:00",
    "commented_code": "}\n   }\n \n+  private static class StrategyPlatformFilter {\n+    private final StrategyMapper strategyMapper;\n+    private final ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies;\n+\n+    private StrategyPlatformFilter(\n+      StrategyMapper strategyMapper,\n+      ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies) {\n+      this.strategyMapper = strategyMapper;\n+      this.platformToStrategies = platformToStrategies;\n+    }\n+\n+    public <T extends SpawnStrategy> List<T> getStrategies(",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2202836946",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24265,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyRegistry.java",
        "discussion_id": "2202836946",
        "commented_code": "@@ -595,6 +631,51 @@ public String toString() {\n     }\n   }\n \n+  private static class StrategyPlatformFilter {\n+    private final StrategyMapper strategyMapper;\n+    private final ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies;\n+\n+    private StrategyPlatformFilter(\n+      StrategyMapper strategyMapper,\n+      ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies) {\n+      this.strategyMapper = strategyMapper;\n+      this.platformToStrategies = platformToStrategies;\n+    }\n+\n+    public <T extends SpawnStrategy> List<T> getStrategies(",
        "comment_created_at": "2025-07-12T17:26:00+00:00",
        "comment_author": "katre",
        "comment_body": "This logic is now complicated enough: add a comment explaining how the data from the different flags is combined (similar to the docs for the new flag), to help future readers understand the intent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2217523777",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24265,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyRegistry.java",
        "discussion_id": "2202836946",
        "commented_code": "@@ -595,6 +631,51 @@ public String toString() {\n     }\n   }\n \n+  private static class StrategyPlatformFilter {\n+    private final StrategyMapper strategyMapper;\n+    private final ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies;\n+\n+    private StrategyPlatformFilter(\n+      StrategyMapper strategyMapper,\n+      ImmutableListMultimap<Label, SpawnStrategy> platformToStrategies) {\n+      this.strategyMapper = strategyMapper;\n+      this.platformToStrategies = platformToStrategies;\n+    }\n+\n+    public <T extends SpawnStrategy> List<T> getStrategies(",
        "comment_created_at": "2025-07-20T01:17:52+00:00",
        "comment_author": "Silic0nS0ldier",
        "comment_body": "Docs added.\r\n\r\nWhile doing so I noticed a missed code branch in `getDynamicSpawnActionContexts` for `if (mnemonicToDynamicStrategies.containsKey(\"\")) {` which is now properly handled.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185332760",
    "pr_number": 26300,
    "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/config/FragmentOptions.java",
    "created_at": "2025-07-04T13:06:58+00:00",
    "commented_code": "List<Map.Entry<String, String>> entries) {\n     LinkedHashMap<String, String> normalizedEntries = new LinkedHashMap<>();\n     for (Map.Entry<String, String> entry : entries) {\n-      normalizedEntries.put(entry.getKey(), entry.getValue());\n+      if (entry.getKey() == null) {\n+        normalizedEntries.remove(entry.getValue());",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2185332760",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26300,
        "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/config/FragmentOptions.java",
        "discussion_id": "2185332760",
        "commented_code": "@@ -100,7 +100,11 @@ protected static List<Map.Entry<String, String>> normalizeEntries(\n       List<Map.Entry<String, String>> entries) {\n     LinkedHashMap<String, String> normalizedEntries = new LinkedHashMap<>();\n     for (Map.Entry<String, String> entry : entries) {\n-      normalizedEntries.put(entry.getKey(), entry.getValue());\n+      if (entry.getKey() == null) {\n+        normalizedEntries.remove(entry.getValue());",
        "comment_created_at": "2025-07-04T13:06:58+00:00",
        "comment_author": "meisterT",
        "comment_body": "I think all of these places deserve a short one line comment to indicate what's happening (otherwise the fact that you are using the value as the key to remove is not obvious).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091604290",
    "pr_number": 26061,
    "pr_file": "src/main/java/com/google/devtools/build/lib/shell/SubprocessBuilder.java",
    "created_at": "2025-05-15T16:47:42+00:00",
    "commented_code": "}\n \n   private final SubprocessFactory factory;\n+  private final ImmutableMap<String, String> clientEnv;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2091604290",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26061,
        "pr_file": "src/main/java/com/google/devtools/build/lib/shell/SubprocessBuilder.java",
        "discussion_id": "2091604290",
        "commented_code": "@@ -46,6 +42,7 @@ public enum StreamAction {\n   }\n \n   private final SubprocessFactory factory;\n+  private final ImmutableMap<String, String> clientEnv;",
        "comment_created_at": "2025-05-15T16:47:42+00:00",
        "comment_author": "tjgq",
        "comment_body": "Please amend the docstring for the `setEnv` method and add one for the constructor describing the role of `clientEnv`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "923874487",
    "pr_number": 14878,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/RunfilesTreeUpdater.java",
    "created_at": "2022-07-18T21:27:44+00:00",
    "commented_code": "SymlinkTreeHelper helper =\n         new SymlinkTreeHelper(inputManifest, runfilesDirPath, /* filesetTree= */ false);\n-    helper.createSymlinks(execRoot, outErr, binTools, env, enableRunfiles);\n+    if (enableRunfiles && outputService != null && outputService.canCreateSymlinkTree()) {\n+      SpawnInputExpander spawnInputExpander = new SpawnInputExpander(execRoot, false);",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "923874487",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 14878,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/RunfilesTreeUpdater.java",
        "discussion_id": "923874487",
        "commented_code": "@@ -99,7 +111,32 @@ private static void updateRunfilesTree(\n \n     SymlinkTreeHelper helper =\n         new SymlinkTreeHelper(inputManifest, runfilesDirPath, /* filesetTree= */ false);\n-    helper.createSymlinks(execRoot, outErr, binTools, env, enableRunfiles);\n+    if (enableRunfiles && outputService != null && outputService.canCreateSymlinkTree()) {\n+      SpawnInputExpander spawnInputExpander = new SpawnInputExpander(execRoot, false);",
        "comment_created_at": "2022-07-18T21:27:44+00:00",
        "comment_author": "alexjski",
        "comment_body": "nit: please add a comment on what that false is for",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1214628055",
    "pr_number": 18484,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkBaseExternalContext.java",
    "created_at": "2023-06-02T17:18:02+00:00",
    "commented_code": "canonicalId,\n               Optional.<String>absent(),\n               outputPath.getPath(),\n-              env.getListener(),\n+              allowFail ? NullEventHandler.INSTANCE : env.getListener(),",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1214628055",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 18484,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkBaseExternalContext.java",
        "discussion_id": "1214628055",
        "commented_code": "@@ -488,7 +490,7 @@ public StructImpl download(\n               canonicalId,\n               Optional.<String>absent(),\n               outputPath.getPath(),\n-              env.getListener(),\n+              allowFail ? NullEventHandler.INSTANCE : env.getListener(),",
        "comment_created_at": "2023-06-02T17:18:02+00:00",
        "comment_author": "Wyverald",
        "comment_body": "1. could you make the same change for `download_and_extract`?\r\n2. could you add a short note in the documentation of `allow_fail` explaining that it silences the warnings as well?",
        "pr_file_module": null
      },
      {
        "comment_id": "1264197631",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 18484,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkBaseExternalContext.java",
        "discussion_id": "1214628055",
        "commented_code": "@@ -488,7 +490,7 @@ public StructImpl download(\n               canonicalId,\n               Optional.<String>absent(),\n               outputPath.getPath(),\n-              env.getListener(),\n+              allowFail ? NullEventHandler.INSTANCE : env.getListener(),",
        "comment_created_at": "2023-07-14T21:46:45+00:00",
        "comment_author": "jmmv",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839741312",
    "pr_number": 15023,
    "pr_file": "src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/TestSuiteModel.java",
    "created_at": "2022-03-31T15:24:02+00:00",
    "commented_code": "test.testFailure(throwable, now());\n       }\n     }\n+    else {\n+      final Optional<Description> matchingSuite = testsMap.keySet().stream()",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "839741312",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15023,
        "pr_file": "src/java_tools/junitrunner/java/com/google/testing/junit/runner/model/TestSuiteModel.java",
        "discussion_id": "839741312",
        "commented_code": "@@ -183,6 +184,18 @@ public void testFailure(Description description, Throwable throwable) {\n         test.testFailure(throwable, now());\n       }\n     }\n+    else {\n+      final Optional<Description> matchingSuite = testsMap.keySet().stream()",
        "comment_created_at": "2022-03-31T15:24:02+00:00",
        "comment_author": "c-mita",
        "comment_body": "I think it's worth adding a comment indicating how this scenario occurs and what the motivation for the code is.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1956660957",
    "pr_number": 24417,
    "pr_file": "src/main/java/com/google/devtools/build/lib/packages/semantics/BuildLanguageOptions.java",
    "created_at": "2025-02-14T20:03:54+00:00",
    "commented_code": "+ \" number of files is not 1.\")\n   public boolean incompatibleLocationsPrefersExecutable;\n \n+  @Option(\n+      name = \"internal_starlark_utf_8_byte_strings\",\n+      defaultValue = \"true\",\n+      documentationCategory = OptionDocumentationCategory.UNDOCUMENTED,",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1956660957",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24417,
        "pr_file": "src/main/java/com/google/devtools/build/lib/packages/semantics/BuildLanguageOptions.java",
        "discussion_id": "1956660957",
        "commented_code": "@@ -770,6 +770,14 @@ public final class BuildLanguageOptions extends OptionsBase {\n               + \" number of files is not 1.\")\n   public boolean incompatibleLocationsPrefersExecutable;\n \n+  @Option(\n+      name = \"internal_starlark_utf_8_byte_strings\",\n+      defaultValue = \"true\",\n+      documentationCategory = OptionDocumentationCategory.UNDOCUMENTED,",
        "comment_created_at": "2025-02-14T20:03:54+00:00",
        "comment_author": "brandjon",
        "comment_body": "Fine to leave undocumented for users, but please add a docstring for our own benefit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1956685162",
    "pr_number": 24417,
    "pr_file": "src/main/java/net/starlark/java/eval/StringModule.java",
    "created_at": "2025-02-14T20:29:21+00:00",
    "commented_code": "\"\\u0009\" + \"\n\" + \"\\u000B\" + \"\\u000C\" + \"\\r\" + \"\\u001C\" + \"\\u001D\" + \"\\u001E\" + \"\\u001F \"\n               + \"\\u0085\" + \"\\u00A0\");\n \n+  private static final CharMatcher ASCII_WHITESPACE =",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1956685162",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24417,
        "pr_file": "src/main/java/net/starlark/java/eval/StringModule.java",
        "discussion_id": "1956685162",
        "commented_code": "@@ -191,6 +191,11 @@ public String upper(String self) {\n           \"\\u0009\" + \"\\n\" + \"\\u000B\" + \"\\u000C\" + \"\\r\" + \"\\u001C\" + \"\\u001D\" + \"\\u001E\" + \"\\u001F \"\n               + \"\\u0085\" + \"\\u00A0\");\n \n+  private static final CharMatcher ASCII_WHITESPACE =",
        "comment_created_at": "2025-02-14T20:29:21+00:00",
        "comment_author": "brandjon",
        "comment_body": "Add javadoc indicating that we use this when using the latin-1 hack in order to avoid triggering on utf-8 code units above 0x7f.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1951381494",
    "pr_number": 25203,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/StandaloneTestStrategy.java",
    "created_at": "2025-02-11T18:37:28+00:00",
    "commented_code": "BuildEventStreamProtos.TestResult.ExecutionInfo.Builder executionInfo =\n         BuildEventStreamProtos.TestResult.ExecutionInfo.newBuilder();\n \n+    executionInfo.setExitCode(spawnResult.exitCode());",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1951381494",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25203,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/StandaloneTestStrategy.java",
        "discussion_id": "1951381494",
        "commented_code": "@@ -366,6 +366,8 @@ private static BuildEventStreamProtos.TestResult.ExecutionInfo extractExecutionI\n     BuildEventStreamProtos.TestResult.ExecutionInfo.Builder executionInfo =\n         BuildEventStreamProtos.TestResult.ExecutionInfo.newBuilder();\n \n+    executionInfo.setExitCode(spawnResult.exitCode());",
        "comment_created_at": "2025-02-11T18:37:28+00:00",
        "comment_author": "michaeledgar",
        "comment_body": "The comment under `SpawnResult#exitCode()` notes that this value is only actually meaningful in certain circumstances. *But*, the new code is called only after a block that throws if `!spawnResult.setupSuccess()`. So this is actually correctly placed.\r\n\r\nCan you just add a comment like `// spawnResult.exitCode() is always meaningful because this code only runs if spawnResult.setupSuccess()`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "693631622",
    "pr_number": 13852,
    "pr_file": "src/main/java/com/google/devtools/build/lib/remote/common/RemoteCacheClient.java",
    "created_at": "2021-08-23T03:40:42+00:00",
    "commented_code": "}\n   }\n \n+  @AutoValue\n+  abstract class CachedActionResult {\n+    public static CachedActionResult create(ActionResult actionResult, String cacheName) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, cacheName);\n+    }\n+\n+    public static CachedActionResult remote(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"remote\");\n+    }\n+\n+    public static CachedActionResult disk(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"disk\");\n+    }\n+\n+    @Nullable\n+    public abstract ActionResult actionResult();\n+    public abstract String cacheName();",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "693631622",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 13852,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/common/RemoteCacheClient.java",
        "discussion_id": "693631622",
        "commented_code": "@@ -63,6 +65,26 @@ public int hashCode() {\n     }\n   }\n \n+  @AutoValue\n+  abstract class CachedActionResult {\n+    public static CachedActionResult create(ActionResult actionResult, String cacheName) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, cacheName);\n+    }\n+\n+    public static CachedActionResult remote(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"remote\");\n+    }\n+\n+    public static CachedActionResult disk(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"disk\");\n+    }\n+\n+    @Nullable\n+    public abstract ActionResult actionResult();\n+    public abstract String cacheName();",
        "comment_created_at": "2021-08-23T03:40:42+00:00",
        "comment_author": "coeuvre",
        "comment_body": "Please add java doc to list the possible values and the meanings.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1804344729",
    "pr_number": 24020,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkRepositoryContext.java",
    "created_at": "2024-10-17T08:33:01+00:00",
    "commented_code": "}\n   }\n \n+  @StarlarkMethod(\n+      name = \"rename\",\n+      doc = \"Renames the file or directory from `src` to `dst`.\",\n+      useStarlarkThread = true,\n+      parameters = {\n+        @Param(\n+            name = \"src\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The path of the existing file or directory to rename.\"),\n+        @Param(\n+            name = \"dst\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The new name of the file or directory.\"),",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1804344729",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24020,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkRepositoryContext.java",
        "discussion_id": "1804344729",
        "commented_code": "@@ -392,6 +392,61 @@ public boolean delete(Object pathObject, StarlarkThread thread)\n     }\n   }\n \n+  @StarlarkMethod(\n+      name = \"rename\",\n+      doc = \"Renames the file or directory from `src` to `dst`.\",\n+      useStarlarkThread = true,\n+      parameters = {\n+        @Param(\n+            name = \"src\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The path of the existing file or directory to rename.\"),\n+        @Param(\n+            name = \"dst\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The new name of the file or directory.\"),",
        "comment_created_at": "2024-10-17T08:33:01+00:00",
        "comment_author": "fmeum",
        "comment_body": "Could you add that parent directories are created as needed? Please also document what happens if the target already exists.",
        "pr_file_module": null
      },
      {
        "comment_id": "1804604017",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24020,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/starlark/StarlarkRepositoryContext.java",
        "discussion_id": "1804344729",
        "commented_code": "@@ -392,6 +392,61 @@ public boolean delete(Object pathObject, StarlarkThread thread)\n     }\n   }\n \n+  @StarlarkMethod(\n+      name = \"rename\",\n+      doc = \"Renames the file or directory from `src` to `dst`.\",\n+      useStarlarkThread = true,\n+      parameters = {\n+        @Param(\n+            name = \"src\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The path of the existing file or directory to rename.\"),\n+        @Param(\n+            name = \"dst\",\n+            allowedTypes = {\n+              @ParamType(type = String.class),\n+              @ParamType(type = Label.class),\n+              @ParamType(type = StarlarkPath.class)\n+            },\n+            doc = \"The new name of the file or directory.\"),",
        "comment_created_at": "2024-10-17T11:35:19+00:00",
        "comment_author": "jmillikin",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  }
]