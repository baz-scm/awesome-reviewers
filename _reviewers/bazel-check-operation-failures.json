[
  {
    "discussion_id": "2243757653",
    "pr_number": 26667,
    "pr_file": "src/tools/launcher/java_launcher.cc",
    "created_at": "2025-07-30T20:13:48+00:00",
    "commented_code": "wstring jar_bin = this->Rlocation(this->GetLaunchInfoByKey(JAR_BIN_PATH));\n   vector<wstring> arguments;\n   arguments.push_back(L\"cvfm\");\n-  arguments.push_back(manifest_jar_path);\n-  arguments.push_back(jar_manifest_file_path);\n+  arguments.push_back(bazel::windows::WindowsEscapeArg(manifest_jar_path));",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2243757653",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26667,
        "pr_file": "src/tools/launcher/java_launcher.cc",
        "discussion_id": "2243757653",
        "commented_code": "@@ -280,8 +280,8 @@ wstring JavaBinaryLauncher::CreateClasspathJar(const wstring& classpath) {\n   wstring jar_bin = this->Rlocation(this->GetLaunchInfoByKey(JAR_BIN_PATH));\n   vector<wstring> arguments;\n   arguments.push_back(L\"cvfm\");\n-  arguments.push_back(manifest_jar_path);\n-  arguments.push_back(jar_manifest_file_path);\n+  arguments.push_back(bazel::windows::WindowsEscapeArg(manifest_jar_path));",
        "comment_created_at": "2025-07-30T20:13:48+00:00",
        "comment_author": "fmeum",
        "comment_body": "What do you think of moving the escaping logic to https://cs.opensource.google/bazel/bazel/+/4196862e32ec1591cc2815a2a13fe7c2867dc2b4:src/tools/launcher/launcher.cc;l=218? These arguments aren't special, other arguments in launchers for other languages may equally be affected by this issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "2243802133",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26667,
        "pr_file": "src/tools/launcher/java_launcher.cc",
        "discussion_id": "2243757653",
        "commented_code": "@@ -280,8 +280,8 @@ wstring JavaBinaryLauncher::CreateClasspathJar(const wstring& classpath) {\n   wstring jar_bin = this->Rlocation(this->GetLaunchInfoByKey(JAR_BIN_PATH));\n   vector<wstring> arguments;\n   arguments.push_back(L\"cvfm\");\n-  arguments.push_back(manifest_jar_path);\n-  arguments.push_back(jar_manifest_file_path);\n+  arguments.push_back(bazel::windows::WindowsEscapeArg(manifest_jar_path));",
        "comment_created_at": "2025-07-30T20:33:14+00:00",
        "comment_author": "valco1994",
        "comment_body": "I thought about it, but `bash_launcher` uses `BashEscapeArg`, so it's not an option to simply apply `bazel::windows::WindowsEscapeArg` to arguments in `BinaryLauncherBase::CreateCommandLine`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2243821838",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26667,
        "pr_file": "src/tools/launcher/java_launcher.cc",
        "discussion_id": "2243757653",
        "commented_code": "@@ -280,8 +280,8 @@ wstring JavaBinaryLauncher::CreateClasspathJar(const wstring& classpath) {\n   wstring jar_bin = this->Rlocation(this->GetLaunchInfoByKey(JAR_BIN_PATH));\n   vector<wstring> arguments;\n   arguments.push_back(L\"cvfm\");\n-  arguments.push_back(manifest_jar_path);\n-  arguments.push_back(jar_manifest_file_path);\n+  arguments.push_back(bazel::windows::WindowsEscapeArg(manifest_jar_path));",
        "comment_created_at": "2025-07-30T20:44:56+00:00",
        "comment_author": "valco1994",
        "comment_body": "However, we could introduce the virtual method `std::wstring EscapeArg(std::wstring const &s))` in `BinaryLauncherBase`, implement it in `BinaryLauncherBase` to apply `bazel::windows::WindowsEscapeArg` and override it in `BashBinaryLauncher` to apply `bazel::launcher::BashEscapeArg`.\r\n\r\nThis approach would provide valid escaping by default, while also enabling customization in specific cases.\r\n\r\nI'm ready to do this if you are agree.",
        "pr_file_module": null
      },
      {
        "comment_id": "2243898535",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26667,
        "pr_file": "src/tools/launcher/java_launcher.cc",
        "discussion_id": "2243757653",
        "commented_code": "@@ -280,8 +280,8 @@ wstring JavaBinaryLauncher::CreateClasspathJar(const wstring& classpath) {\n   wstring jar_bin = this->Rlocation(this->GetLaunchInfoByKey(JAR_BIN_PATH));\n   vector<wstring> arguments;\n   arguments.push_back(L\"cvfm\");\n-  arguments.push_back(manifest_jar_path);\n-  arguments.push_back(jar_manifest_file_path);\n+  arguments.push_back(bazel::windows::WindowsEscapeArg(manifest_jar_path));",
        "comment_created_at": "2025-07-30T21:28:09+00:00",
        "comment_author": "fmeum",
        "comment_body": "Good catch. I like the idea of introducing this virtual method. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2010449288",
    "pr_number": 23540,
    "pr_file": "src/main/tools/daemonize.cc",
    "created_at": "2025-03-24T15:47:47+00:00",
    "commented_code": "strcmp(fs_vfstype, \"cgroup2\") == 0) {\n       char* procs_path;\n       asprintf(&procs_path, \"%s%s/cgroup.procs\", fs_file, cgroup_path);\n-      WriteFile(procs_path, \"%d\", pid);\n+      FILE* procs = fopen(procs_path, \"w\");\n+      if (procs != NULL) {\n+        fprintf(procs, \"%d\", pid);",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2010449288",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23540,
        "pr_file": "src/main/tools/daemonize.cc",
        "discussion_id": "2010449288",
        "commented_code": "@@ -324,7 +327,13 @@ static void MoveToCgroup(pid_t pid, const char* cgroup_path) {\n         strcmp(fs_vfstype, \"cgroup2\") == 0) {\n       char* procs_path;\n       asprintf(&procs_path, \"%s%s/cgroup.procs\", fs_file, cgroup_path);\n-      WriteFile(procs_path, \"%d\", pid);\n+      FILE* procs = fopen(procs_path, \"w\");\n+      if (procs != NULL) {\n+        fprintf(procs, \"%d\", pid);",
        "comment_created_at": "2025-03-24T15:47:47+00:00",
        "comment_author": "zhengwei143",
        "comment_body": "Could you add checks and additional logging to `fprintf` and `fclose` similar to lines 94 & 97 to indicate that we failed to start the server in the specified cgroup? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1873063131",
    "pr_number": 24579,
    "pr_file": "src/main/cpp/option_processor.cc",
    "created_at": "2024-12-06T10:59:37+00:00",
    "commented_code": "std::move(path_to_binary), std::move(startup_args), \"\", {}));\n   }\n   string& command = args[i];\n+  // Distinguish an empty command from the case of no command above.\n+  if (command.empty()) {\n+    blaze_util::StringPrintf(error, \"Command cannot be the empty string (try 'help')\");\n+    return nullptr;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1873063131",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24579,
        "pr_file": "src/main/cpp/option_processor.cc",
        "discussion_id": "1873063131",
        "commented_code": "@@ -151,6 +151,11 @@ std::unique_ptr<CommandLine> OptionProcessor::SplitCommandLine(\n         std::move(path_to_binary), std::move(startup_args), \"\", {}));\n   }\n   string& command = args[i];\n+  // Distinguish an empty command from the case of no command above.\n+  if (command.empty()) {\n+    blaze_util::StringPrintf(error, \"Command cannot be the empty string (try 'help')\");\n+    return nullptr;",
        "comment_created_at": "2024-12-06T10:59:37+00:00",
        "comment_author": "lberki",
        "comment_body": "WDYT about making the exit code non-zero (say, 2, for command line error) in these two cases? Arguably, both are errors.",
        "pr_file_module": null
      },
      {
        "comment_id": "1873395595",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24579,
        "pr_file": "src/main/cpp/option_processor.cc",
        "discussion_id": "1873063131",
        "commented_code": "@@ -151,6 +151,11 @@ std::unique_ptr<CommandLine> OptionProcessor::SplitCommandLine(\n         std::move(path_to_binary), std::move(startup_args), \"\", {}));\n   }\n   string& command = args[i];\n+  // Distinguish an empty command from the case of no command above.\n+  if (command.empty()) {\n+    blaze_util::StringPrintf(error, \"Command cannot be the empty string (try 'help')\");\n+    return nullptr;",
        "comment_created_at": "2024-12-06T14:09:05+00:00",
        "comment_author": "fmeum",
        "comment_body": "It already is in the case of `bazel ''`, as demonstrated by the test. Which other case are you referring to? Just `bazel` probably shouldn't fail as users may rely on it as a simple \"does Bazel work\" check.",
        "pr_file_module": null
      },
      {
        "comment_id": "1875496012",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24579,
        "pr_file": "src/main/cpp/option_processor.cc",
        "discussion_id": "1873063131",
        "commented_code": "@@ -151,6 +151,11 @@ std::unique_ptr<CommandLine> OptionProcessor::SplitCommandLine(\n         std::move(path_to_binary), std::move(startup_args), \"\", {}));\n   }\n   string& command = args[i];\n+  // Distinguish an empty command from the case of no command above.\n+  if (command.empty()) {\n+    blaze_util::StringPrintf(error, \"Command cannot be the empty string (try 'help')\");\n+    return nullptr;",
        "comment_created_at": "2024-12-09T07:29:32+00:00",
        "comment_author": "lberki",
        "comment_body": "Nevermind, some wires got crossed in my brain.",
        "pr_file_module": null
      }
    ]
  }
]