[
  {
    "discussion_id": "2218946268",
    "pr_number": 26594,
    "pr_file": "tools/test/windows/tw.cc",
    "created_at": "2025-07-21T11:41:20+00:00",
    "commented_code": "}\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2218946268",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-21T11:41:20+00:00",
        "comment_author": "fmeum",
        "comment_body": "This fallback shouldn't be necessary - could you share the error you see if you don't add it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2219133896",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-21T12:54:20+00:00",
        "comment_author": "KrishnaM256",
        "comment_body": "You can refer to issues [#18839](https://github.com/bazelbuild/bazel/issues/18839) and [#15835](https://github.com/bazelbuild/bazel/issues/15835) for more details\u2014I encounter the exact same error: The system cannot find the file specified. Let me know if you need any additional context!",
        "pr_file_module": null
      },
      {
        "comment_id": "2219208103",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-21T13:24:27+00:00",
        "comment_author": "fmeum",
        "comment_body": "If you address the other comments and add an integration test that runs on Windows (you could also just drop the `no-windows` tag on the existing coverage tests), I can look into the root cause of the failure without this fallback. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2219231662",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-21T13:33:02+00:00",
        "comment_author": "KrishnaM256",
        "comment_body": "Thank you for the guidance! I\u2019ll address the other comments and update the PR to include an integration test that runs on Windows. Once that\u2019s done, I\u2019ll let you know so you can investigate the root cause of the failure without the fallback.",
        "pr_file_module": null
      },
      {
        "comment_id": "2222292579",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-22T11:57:20+00:00",
        "comment_author": "KrishnaM256",
        "comment_body": "Hello @fmeum, I\u2019ve removed the fallback, could you please review the changes and let me know if there are any other modifications needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "2222607020",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-22T13:50:03+00:00",
        "comment_author": "fmeum",
        "comment_body": "I started a parallel PR that adds support for multiple files in `collect_coverage`. There's still one issue left that I need to debug, but once that's done, you should be able to base your PR on it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2222619265",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-22T13:54:10+00:00",
        "comment_author": "fmeum",
        "comment_body": "https://github.com/bazelbuild/bazel/pull/26603",
        "pr_file_module": null
      },
      {
        "comment_id": "2222654992",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-22T14:05:50+00:00",
        "comment_author": "KrishnaM256",
        "comment_body": "Oh nice, that\u2019s great!",
        "pr_file_module": null
      },
      {
        "comment_id": "2225929629",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-23T15:18:27+00:00",
        "comment_author": "fmeum",
        "comment_body": "The PR now passes CI and includes an updated integration test that you can use as the basis for getting the others to pass. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2225967896",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26594,
        "pr_file": "tools/test/windows/tw.cc",
        "discussion_id": "2218946268",
        "commented_code": "@@ -1202,6 +1203,22 @@ bool FindTestBinary(const Path& argv0, const Path& cwd, std::wstring test_path,\n   }\n \n   (void)result->Absolutize(cwd);\n+  if (!IsReadableFile(*result)) {",
        "comment_created_at": "2025-07-23T15:30:50+00:00",
        "comment_author": "KrishnaM256",
        "comment_body": "Thanks! Great to hear the PR passes CI. I\u2019ll use the updated integration test as a reference to get the remaining tests passing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963558021",
    "pr_number": 24417,
    "pr_file": "src/test/java/net/starlark/java/eval/testdata/json.star",
    "created_at": "2025-02-20T13:23:08+00:00",
    "commented_code": null,
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1963558021",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24417,
        "pr_file": "src/test/java/net/starlark/java/eval/testdata/json.star",
        "discussion_id": "1963558021",
        "commented_code": null,
        "comment_created_at": "2025-02-20T13:23:08+00:00",
        "comment_author": "tjgq",
        "comment_body": "Can you add tests for:\r\n\r\n* `json.encode`ing a UTF-16 string with a non-ASCII BMP character\r\n* `json.encode`ing a UTF-16 string with a surrogate pair\r\n* `json.encode`ing a Latin1-hack string containing (the UTF-8 encoding of) a non-ASCII character\r\n* `json.encode`ing a Latin1-hack string containing invalid UTF-8 (I think it's worth capturing the current behavior in a test even if we intend to change it in the future)\r\n\r\n* `json.decode`ing `\\uXXXX`-encoded surrogates (paired high+low, paired low+high, unpaired followed by non-surrogate, unpaired in final position)",
        "pr_file_module": null
      },
      {
        "comment_id": "1964129323",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24417,
        "pr_file": "src/test/java/net/starlark/java/eval/testdata/json.star",
        "discussion_id": "1963558021",
        "commented_code": null,
        "comment_created_at": "2025-02-20T18:20:40+00:00",
        "comment_author": "fmeum",
        "comment_body": "This was both a nightmare (see the comments I added) and super helpful as the previous implementation had a number of bugs, including for the existing UTF-16 string case. PTAL.",
        "pr_file_module": null
      },
      {
        "comment_id": "1965755154",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24417,
        "pr_file": "src/test/java/net/starlark/java/eval/testdata/json.star",
        "discussion_id": "1963558021",
        "commented_code": null,
        "comment_created_at": "2025-02-21T16:03:10+00:00",
        "comment_author": "tjgq",
        "comment_body": "Thanks - I think using a `CharsetEncoder` is indeed a more maintainable option. It's a little unfortunate that we have to go through all of `StringBuilder` -> `CharBuffer` -> `ByteBuffer` -> `byte[]` -> `String`, but I also couldn't find a shorter path given the available APIs.",
        "pr_file_module": null
      }
    ]
  }
]