[
  {
    "discussion_id": "885452560",
    "pr_number": 15594,
    "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/CommonCommandOptions.java",
    "created_at": "2022-05-31T10:06:40+00:00",
    "commented_code": "help = \"Writes into the specified file a pprof profile of CPU usage by all Starlark threads.\")\n   public String starlarkCpuProfile;\n \n+  @Option(\n+      name = \"starlark_coverage_report\",\n+      defaultValue = \"\",\n+      documentationCategory = OptionDocumentationCategory.LOGGING,\n+      effectTags = {OptionEffectTag.BAZEL_MONITORING},\n+      help = \"Writes into the specified file an lcov coverage report for all Starlark files.\")",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "885452560",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15594,
        "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/CommonCommandOptions.java",
        "discussion_id": "885452560",
        "commented_code": "@@ -293,6 +293,14 @@ public String getTypeDescription() {\n       help = \"Writes into the specified file a pprof profile of CPU usage by all Starlark threads.\")\n   public String starlarkCpuProfile;\n \n+  @Option(\n+      name = \"starlark_coverage_report\",\n+      defaultValue = \"\",\n+      documentationCategory = OptionDocumentationCategory.LOGGING,\n+      effectTags = {OptionEffectTag.BAZEL_MONITORING},\n+      help = \"Writes into the specified file an lcov coverage report for all Starlark files.\")",
        "comment_created_at": "2022-05-31T10:06:40+00:00",
        "comment_author": "sluongng",
        "comment_body": "From a discussion on Slack: It's not immediately clear to end-users that we are using this flag to report coverage of starlark during execution of a bazel command, similar to `--starlark_cpu_profile`.\r\n\r\nMy initial impression was that this, similar to other coverage flags, are used with `bazel coverage` when testing starlark rules with Skylib's `unittest.bzl`. This is NOT the case.\r\n\r\nMight worth being a bit more specific in this description so that Bazel's end users are clear on intended usages.",
        "pr_file_module": null
      },
      {
        "comment_id": "885468694",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15594,
        "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/CommonCommandOptions.java",
        "discussion_id": "885452560",
        "commented_code": "@@ -293,6 +293,14 @@ public String getTypeDescription() {\n       help = \"Writes into the specified file a pprof profile of CPU usage by all Starlark threads.\")\n   public String starlarkCpuProfile;\n \n+  @Option(\n+      name = \"starlark_coverage_report\",\n+      defaultValue = \"\",\n+      documentationCategory = OptionDocumentationCategory.LOGGING,\n+      effectTags = {OptionEffectTag.BAZEL_MONITORING},\n+      help = \"Writes into the specified file an lcov coverage report for all Starlark files.\")",
        "comment_created_at": "2022-05-31T10:25:06+00:00",
        "comment_author": "fmeum",
        "comment_body": "I reworded this a little to hopefully clarify the scope. I would be interested in integrating a less low-level version of this with `bazel coverage`, but don't really know how to accomplish this yet.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092605572",
    "pr_number": 26080,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
    "created_at": "2025-05-16T08:39:06+00:00",
    "commented_code": "\"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected.\n+          \"\"\")",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2092605572",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26080,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
        "discussion_id": "2092605572",
        "commented_code": "@@ -64,6 +66,32 @@ public class RepositoryOptions extends OptionsBase {\n           \"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected.\n+          \"\"\")",
        "comment_created_at": "2025-05-16T08:39:06+00:00",
        "comment_author": "tjgq",
        "comment_body": "Should we make it so that `0` disables the GC? (This is the convention for the other GC flags)",
        "pr_file_module": null
      },
      {
        "comment_id": "2093540220",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26080,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
        "discussion_id": "2092605572",
        "commented_code": "@@ -64,6 +66,32 @@ public class RepositoryOptions extends OptionsBase {\n           \"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected.\n+          \"\"\")",
        "comment_created_at": "2025-05-16T18:55:47+00:00",
        "comment_author": "Wyverald",
        "comment_body": "Done for both flags. I originally felt whoever wanted to disable GC could just use `9999d` for the delay / maxAge, but on the flip side those wanting really short delays/maxAges could just use `1ms`, so I changed it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2098660937",
    "pr_number": 26080,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
    "created_at": "2025-05-20T18:53:39+00:00",
    "commented_code": "\"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected. If set to zero, garbage collection is disabled.\n+          \"\"\")\n+  public Duration repoContentsCacheGcMaxAge;\n+\n+  @Option(\n+      name = \"repo_contents_cache_gc_idle_delay\",\n+      defaultValue = \"5m\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time the server must remain idle before garbage collection happens\n+          to the repo contents cache. If set to zero, garbage collection is disabled.",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2098660937",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26080,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
        "discussion_id": "2098660937",
        "commented_code": "@@ -64,6 +66,32 @@ public class RepositoryOptions extends OptionsBase {\n           \"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected. If set to zero, garbage collection is disabled.\n+          \"\"\")\n+  public Duration repoContentsCacheGcMaxAge;\n+\n+  @Option(\n+      name = \"repo_contents_cache_gc_idle_delay\",\n+      defaultValue = \"5m\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time the server must remain idle before garbage collection happens\n+          to the repo contents cache. If set to zero, garbage collection is disabled.",
        "comment_created_at": "2025-05-20T18:53:39+00:00",
        "comment_author": "tjgq",
        "comment_body": "For the similarly named options, `0` actually means run immediately (while still respecting the other flag wrt enabled/disabled). Consider doing the same here to reduce confusion?",
        "pr_file_module": null
      },
      {
        "comment_id": "2098682109",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26080,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/repository/RepositoryOptions.java",
        "discussion_id": "2098660937",
        "commented_code": "@@ -64,6 +66,32 @@ public class RepositoryOptions extends OptionsBase {\n           \"\"\")\n   public PathFragment repoContentsCache;\n \n+  @Option(\n+      name = \"repo_contents_cache_gc_max_age\",\n+      defaultValue = \"14d\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time an entry in the repo contents cache can stay unused before \\\n+          it's garbage collected. If set to zero, garbage collection is disabled.\n+          \"\"\")\n+  public Duration repoContentsCacheGcMaxAge;\n+\n+  @Option(\n+      name = \"repo_contents_cache_gc_idle_delay\",\n+      defaultValue = \"5m\",\n+      documentationCategory = OptionDocumentationCategory.BAZEL_CLIENT_OPTIONS,\n+      effectTags = {OptionEffectTag.BAZEL_INTERNAL_CONFIGURATION},\n+      converter = DurationConverter.class,\n+      help =\n+          \"\"\"\n+          Specifies the amount of time the server must remain idle before garbage collection happens\n+          to the repo contents cache. If set to zero, garbage collection is disabled.",
        "comment_created_at": "2025-05-20T19:08:34+00:00",
        "comment_author": "Wyverald",
        "comment_body": "addressed during import",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1936139167",
    "pr_number": 23961,
    "pr_file": "src/main/java/com/google/devtools/build/lib/actions/ExecutionRequirements.java",
    "created_at": "2025-01-30T19:01:10+00:00",
    "commented_code": "}\n \n   /** If specified, the timeout of this action in seconds. Must be decimal integer. */\n-  public static final String TIMEOUT = \"timeout\";\n+  public static final ParseableRequirement TIMEOUT =\n+      ParseableRequirement.create(\n+          \"timeout:<int>\",",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1936139167",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23961,
        "pr_file": "src/main/java/com/google/devtools/build/lib/actions/ExecutionRequirements.java",
        "discussion_id": "1936139167",
        "commented_code": "@@ -118,7 +118,31 @@ public String parseIfMatches(String tag) throws ValidationException {\n   }\n \n   /** If specified, the timeout of this action in seconds. Must be decimal integer. */\n-  public static final String TIMEOUT = \"timeout\";\n+  public static final ParseableRequirement TIMEOUT =\n+      ParseableRequirement.create(\n+          \"timeout:<int>\",",
        "comment_created_at": "2025-01-30T19:01:10+00:00",
        "comment_author": "tjgq",
        "comment_body": "Can we use a syntax that includes a time unit, e.g. `30s` or `5m` or `1h`, for added clarity? (See `DURATION_REGEX` in src/main/java/com/google/devtools/common/options/Converters.java for inspiration.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1691249139",
    "pr_number": 23106,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/BazelRepositoryModule.java",
    "created_at": "2024-07-25T10:52:59+00:00",
    "commented_code": "}\n       httpDownloader.setMaxAttempts(repoOptions.httpConnectorAttempts);\n       httpDownloader.setMaxRetryTimeout(repoOptions.httpConnectorRetryMaxTimeout);\n+      if (repoOptions.httpMaxParallelDownloads > 0) {\n+        httpDownloader.setMaxParallelDownloads(repoOptions.httpMaxParallelDownloads);\n+      } else {\n+        env.getReporter()",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1691249139",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23106,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/BazelRepositoryModule.java",
        "discussion_id": "1691249139",
        "commented_code": "@@ -462,6 +462,16 @@ public void beforeCommand(CommandEnvironment env) throws AbruptExitException {\n       }\n       httpDownloader.setMaxAttempts(repoOptions.httpConnectorAttempts);\n       httpDownloader.setMaxRetryTimeout(repoOptions.httpConnectorRetryMaxTimeout);\n+      if (repoOptions.httpMaxParallelDownloads > 0) {\n+        httpDownloader.setMaxParallelDownloads(repoOptions.httpMaxParallelDownloads);\n+      } else {\n+        env.getReporter()",
        "comment_created_at": "2024-07-25T10:52:59+00:00",
        "comment_author": "fmeum",
        "comment_body": "Failures are usually preferred over warnings, both to reduce the amount of \"warning spam\" and also because it makes it easier to change the behavior later in a compatible way (for example, we could introduce new logic that chooses a reasonable default based on host machine info if this is set to 0).\r\n\r\nSee https://github.com/bazelbuild/bazel/blob/0e220f03f154cbb5e52190e1085b01173f301c02/src/main/java/com/google/devtools/build/lib/bazel/BazelRepositoryModule.java#L396-L404 for an example.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1713461045",
    "pr_number": 23079,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/ExecutionOptions.java",
    "created_at": "2024-08-12T09:54:26+00:00",
    "commented_code": "effectTags = {OptionEffectTag.UNKNOWN},\n       metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n       help =\n-          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache evicts\"\n-              + \" blobs during the build.\")\n+          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache\"\n+          + \"errors, like cache evictions cause the build to fail.\")\n   public boolean useNewExitCodeForLostInputs;\n \n   @Option(\n+      // TODO: when this flag is moved to non-experimental, rename it to a more general name\n+      // to reflect the new logic - it's not only about cache evictions.\n       name = \"experimental_remote_cache_eviction_retries\",\n       defaultValue = \"0\",\n       documentationCategory = OptionDocumentationCategory.REMOTE,\n       effectTags = {OptionEffectTag.EXECUTION},\n       help =\n-          \"The maximum number of attempts to retry if the build encountered remote cache eviction\"\n-              + \" error. A non-zero value will implicitly set\"\n+          \"The maximum number of attempts to retry if the build encountered a remote cache\"\n+              + \" error that would otherwise fail the build. Applies for example when artifacts\"\n+              + \" are evicted from the remote cache, or in certain cache failure conditions\"\n+              + \" when using --remote_download_minimal.\"\n+              + \" A non-zero value will implicitly set\"\n               + \" --incompatible_remote_use_new_exit_code_for_lost_inputs to true. A new invocation\"\n               + \" id will be generated for each attempt. If you generate invocation id and provide\"\n               + \" it to Bazel with --invocation_id, you should not use this flag. Instead, set flag\"\n               + \" --incompatible_remote_use_new_exit_code_for_lost_inputs and check for the exit\"\n               + \" code 39.\")\n-  public int remoteRetryOnCacheEviction;\n+  public int remoteRetryOnCacheError;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1713461045",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23079,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/ExecutionOptions.java",
        "discussion_id": "1713461045",
        "commented_code": "@@ -534,24 +534,29 @@ public boolean usingLocalTestJobs() {\n       effectTags = {OptionEffectTag.UNKNOWN},\n       metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n       help =\n-          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache evicts\"\n-              + \" blobs during the build.\")\n+          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache\"\n+          + \"errors, like cache evictions cause the build to fail.\")\n   public boolean useNewExitCodeForLostInputs;\n \n   @Option(\n+      // TODO: when this flag is moved to non-experimental, rename it to a more general name\n+      // to reflect the new logic - it's not only about cache evictions.\n       name = \"experimental_remote_cache_eviction_retries\",\n       defaultValue = \"0\",\n       documentationCategory = OptionDocumentationCategory.REMOTE,\n       effectTags = {OptionEffectTag.EXECUTION},\n       help =\n-          \"The maximum number of attempts to retry if the build encountered remote cache eviction\"\n-              + \" error. A non-zero value will implicitly set\"\n+          \"The maximum number of attempts to retry if the build encountered a remote cache\"\n+              + \" error that would otherwise fail the build. Applies for example when artifacts\"\n+              + \" are evicted from the remote cache, or in certain cache failure conditions\"\n+              + \" when using --remote_download_minimal.\"\n+              + \" A non-zero value will implicitly set\"\n               + \" --incompatible_remote_use_new_exit_code_for_lost_inputs to true. A new invocation\"\n               + \" id will be generated for each attempt. If you generate invocation id and provide\"\n               + \" it to Bazel with --invocation_id, you should not use this flag. Instead, set flag\"\n               + \" --incompatible_remote_use_new_exit_code_for_lost_inputs and check for the exit\"\n               + \" code 39.\")\n-  public int remoteRetryOnCacheEviction;\n+  public int remoteRetryOnCacheError;",
        "comment_created_at": "2024-08-12T09:54:26+00:00",
        "comment_author": "coeuvre",
        "comment_body": "Maybe rename to `remoteRetryOnTransientCacheError`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1713469732",
    "pr_number": 23079,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/ExecutionOptions.java",
    "created_at": "2024-08-12T10:01:31+00:00",
    "commented_code": "effectTags = {OptionEffectTag.UNKNOWN},\n       metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n       help =\n-          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache evicts\"\n-              + \" blobs during the build.\")\n+          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache\"\n+          + \"errors, like cache evictions cause the build to fail.\")\n   public boolean useNewExitCodeForLostInputs;\n \n   @Option(\n+      // TODO: when this flag is moved to non-experimental, rename it to a more general name\n+      // to reflect the new logic - it's not only about cache evictions.\n       name = \"experimental_remote_cache_eviction_retries\",\n       defaultValue = \"0\",\n       documentationCategory = OptionDocumentationCategory.REMOTE,\n       effectTags = {OptionEffectTag.EXECUTION},\n       help =\n-          \"The maximum number of attempts to retry if the build encountered remote cache eviction\"\n-              + \" error. A non-zero value will implicitly set\"\n+          \"The maximum number of attempts to retry if the build encountered a remote cache\"",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1713469732",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23079,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/ExecutionOptions.java",
        "discussion_id": "1713469732",
        "commented_code": "@@ -534,24 +534,29 @@ public boolean usingLocalTestJobs() {\n       effectTags = {OptionEffectTag.UNKNOWN},\n       metadataTags = {OptionMetadataTag.INCOMPATIBLE_CHANGE},\n       help =\n-          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache evicts\"\n-              + \" blobs during the build.\")\n+          \"If set to true, Bazel will use new exit code 39 instead of 34 if remote cache\"\n+          + \"errors, like cache evictions cause the build to fail.\")\n   public boolean useNewExitCodeForLostInputs;\n \n   @Option(\n+      // TODO: when this flag is moved to non-experimental, rename it to a more general name\n+      // to reflect the new logic - it's not only about cache evictions.\n       name = \"experimental_remote_cache_eviction_retries\",\n       defaultValue = \"0\",\n       documentationCategory = OptionDocumentationCategory.REMOTE,\n       effectTags = {OptionEffectTag.EXECUTION},\n       help =\n-          \"The maximum number of attempts to retry if the build encountered remote cache eviction\"\n-              + \" error. A non-zero value will implicitly set\"\n+          \"The maximum number of attempts to retry if the build encountered a remote cache\"",
        "comment_created_at": "2024-08-12T10:01:31+00:00",
        "comment_author": "coeuvre",
        "comment_body": "I would rephrase to:\r\n\r\n> The maximum number of attempts to retry if the build encountered a transient remote cache error that would otherwise fail the build. Applies for example when artifacts are evicted from the remote cache, or in certain cache failure conditions. A non-zero value ...\r\n\r\n- Emphasize `transient` remote cache error.\r\n- Do not mention `--remote_download_minimal` because they are orthogonal.",
        "pr_file_module": null
      }
    ]
  }
]