[
  {
    "discussion_id": "1608072802",
    "pr_number": 19940,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
    "created_at": "2024-05-21T10:39:40+00:00",
    "commented_code": "</p>\n \"\"\",\n     ),\n+    \"module_interfaces\": attr.label_list(\n+        allow_files = True,\n+        flags = [\"DIRECT_COMPILE_TIME_INPUT\"],\n+        doc = \"\"\"\n+The list of files are regarded as C++20 Modules Interface.\n+\n+<p>\n+C++ Standard has no restriction about module interface file extension\n+<ul>\n+<li>Clang use cppm </li>\n+<li>GCC can use any source file extension </li>\n+<li>MSVC use ixx </li>",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1608072802",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 19940,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
        "discussion_id": "1608072802",
        "commented_code": "@@ -84,6 +84,22 @@ using the C/C++ compiler.\n </p>\n \"\"\",\n     ),\n+    \"module_interfaces\": attr.label_list(\n+        allow_files = True,\n+        flags = [\"DIRECT_COMPILE_TIME_INPUT\"],\n+        doc = \"\"\"\n+The list of files are regarded as C++20 Modules Interface.\n+\n+<p>\n+C++ Standard has no restriction about module interface file extension\n+<ul>\n+<li>Clang use cppm </li>\n+<li>GCC can use any source file extension </li>\n+<li>MSVC use ixx </li>",
        "comment_created_at": "2024-05-21T10:39:40+00:00",
        "comment_author": "mathstuf",
        "comment_body": "All three can use any extension with the right flags (e.g., `-x c++-module` or `-interface`/`-interfacePartition`). These are the *preferred* extensions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1843967500",
    "pr_number": 22581,
    "pr_file": "src/tools/singlejar/log4j2_plugin_dat_combiner.cc",
    "created_at": "2024-11-15T15:07:03+00:00",
    "commented_code": "+#include \"src/tools/singlejar/log4j2_plugin_dat_combiner.h\"\n+\n+#include <sstream>\n+#include <string>\n+#include <vector>\n+\n+template<typename T>\n+inline static T swapByteOrder(const T& val) {\n+  int totalBytes = sizeof(val);\n+  T swapped = (T) 0;\n+  for (int i = 0; i < totalBytes; ++i) {\n+    swapped |= (val >> (8*(totalBytes-i-1)) & 0xFF) << (8*i);\n+  }\n+  return swapped;\n+}\n+\n+bool readBool(std::istringstream &stream) {\n+  bool value;\n+  stream.read(reinterpret_cast<char *>(&value), sizeof(value));\n+  return value;\n+}\n+\n+uint32_t readInt(std::istringstream &stream) {\n+  uint32_t values;\n+  stream.read(reinterpret_cast<char *>(&values), sizeof(values));\n+  return swapByteOrder(values);\n+}\n+\n+std::string readUTFString(std::istringstream &stream) {\n+  uint16_t length;\n+  stream.read(reinterpret_cast<char *>(&length), sizeof(length));\n+  length = swapByteOrder(length); // Convert to host byte order",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1843967500",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22581,
        "pr_file": "src/tools/singlejar/log4j2_plugin_dat_combiner.cc",
        "discussion_id": "1843967500",
        "commented_code": "@@ -0,0 +1,154 @@\n+#include \"src/tools/singlejar/log4j2_plugin_dat_combiner.h\"\n+\n+#include <sstream>\n+#include <string>\n+#include <vector>\n+\n+template<typename T>\n+inline static T swapByteOrder(const T& val) {\n+  int totalBytes = sizeof(val);\n+  T swapped = (T) 0;\n+  for (int i = 0; i < totalBytes; ++i) {\n+    swapped |= (val >> (8*(totalBytes-i-1)) & 0xFF) << (8*i);\n+  }\n+  return swapped;\n+}\n+\n+bool readBool(std::istringstream &stream) {\n+  bool value;\n+  stream.read(reinterpret_cast<char *>(&value), sizeof(value));\n+  return value;\n+}\n+\n+uint32_t readInt(std::istringstream &stream) {\n+  uint32_t values;\n+  stream.read(reinterpret_cast<char *>(&values), sizeof(values));\n+  return swapByteOrder(values);\n+}\n+\n+std::string readUTFString(std::istringstream &stream) {\n+  uint16_t length;\n+  stream.read(reinterpret_cast<char *>(&length), sizeof(length));\n+  length = swapByteOrder(length); // Convert to host byte order",
        "comment_created_at": "2024-11-15T15:07:03+00:00",
        "comment_author": "pzembrod",
        "comment_body": "Since I totally lack context here - and a future code maintainer may do so, too: Could you add a sentence or two more as to why the byte order needs to be swapped? And maybe the best place for that comment would be at the swapByteOrder() function itself?\r\nI'm guessing it is because JVM class files are big-endian, and x86 and most ARMs are little-endian?\r\nI guess there is not much big-endian hardware around these days, but I may be wrong, it's a long time since last I encountered endianness as a topic.",
        "pr_file_module": null
      },
      {
        "comment_id": "1850140414",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22581,
        "pr_file": "src/tools/singlejar/log4j2_plugin_dat_combiner.cc",
        "discussion_id": "1843967500",
        "commented_code": "@@ -0,0 +1,154 @@\n+#include \"src/tools/singlejar/log4j2_plugin_dat_combiner.h\"\n+\n+#include <sstream>\n+#include <string>\n+#include <vector>\n+\n+template<typename T>\n+inline static T swapByteOrder(const T& val) {\n+  int totalBytes = sizeof(val);\n+  T swapped = (T) 0;\n+  for (int i = 0; i < totalBytes; ++i) {\n+    swapped |= (val >> (8*(totalBytes-i-1)) & 0xFF) << (8*i);\n+  }\n+  return swapped;\n+}\n+\n+bool readBool(std::istringstream &stream) {\n+  bool value;\n+  stream.read(reinterpret_cast<char *>(&value), sizeof(value));\n+  return value;\n+}\n+\n+uint32_t readInt(std::istringstream &stream) {\n+  uint32_t values;\n+  stream.read(reinterpret_cast<char *>(&values), sizeof(values));\n+  return swapByteOrder(values);\n+}\n+\n+std::string readUTFString(std::istringstream &stream) {\n+  uint16_t length;\n+  stream.read(reinterpret_cast<char *>(&length), sizeof(length));\n+  length = swapByteOrder(length); // Convert to host byte order",
        "comment_created_at": "2024-11-20T11:22:32+00:00",
        "comment_author": "stevebarrau",
        "comment_body": "I added a comment to that effect in https://github.com/bazelbuild/bazel/pull/22581/commits/c80889e8e7cc2bb9e640b56b0803a814103fa9ec.",
        "pr_file_module": null
      }
    ]
  }
]