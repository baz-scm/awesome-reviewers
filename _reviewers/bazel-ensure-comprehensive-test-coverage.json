[
  {
    "discussion_id": "932675288",
    "pr_number": 15774,
    "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalValue.java",
    "created_at": "2022-07-28T21:13:58+00:00",
    "commented_code": "*/\n     final boolean skipTestingForSubpackage;\n \n-    /** Information to be attached to any error messages that may be reported. */\n-    @Nullable final String errorInfo;\n+    /**\n+     * Whether to create nodes for directories, including empty ones.\n+     */\n+    final boolean emitDirectoryNodes;\n+\n+    /**\n+     * Information to be attached to any error messages that may be reported.\n+     */\n+    @Nullable\n+    final String errorInfo;\n \n     private TraversalRequest(\n         DirectTraversalRoot root,\n         boolean isRootGenerated,\n         PackageBoundaryMode crossPkgBoundaries,\n         boolean strictOutputFiles,\n         boolean skipTestingForSubpackage,\n+        boolean emitDirectoryNodes,",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "932675288",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15774,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalValue.java",
        "discussion_id": "932675288",
        "commented_code": "@@ -277,21 +277,31 @@ public static final class TraversalRequest implements SkyKey {\n      */\n     final boolean skipTestingForSubpackage;\n \n-    /** Information to be attached to any error messages that may be reported. */\n-    @Nullable final String errorInfo;\n+    /**\n+     * Whether to create nodes for directories, including empty ones.\n+     */\n+    final boolean emitDirectoryNodes;\n+\n+    /**\n+     * Information to be attached to any error messages that may be reported.\n+     */\n+    @Nullable\n+    final String errorInfo;\n \n     private TraversalRequest(\n         DirectTraversalRoot root,\n         boolean isRootGenerated,\n         PackageBoundaryMode crossPkgBoundaries,\n         boolean strictOutputFiles,\n         boolean skipTestingForSubpackage,\n+        boolean emitDirectoryNodes,",
        "comment_created_at": "2022-07-28T21:13:58+00:00",
        "comment_author": "alexjski",
        "comment_body": "I think this may call for a test in `src/test/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalFunctionTest.java`.",
        "pr_file_module": null
      },
      {
        "comment_id": "932995516",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15774,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalValue.java",
        "discussion_id": "932675288",
        "commented_code": "@@ -277,21 +277,31 @@ public static final class TraversalRequest implements SkyKey {\n      */\n     final boolean skipTestingForSubpackage;\n \n-    /** Information to be attached to any error messages that may be reported. */\n-    @Nullable final String errorInfo;\n+    /**\n+     * Whether to create nodes for directories, including empty ones.\n+     */\n+    final boolean emitDirectoryNodes;\n+\n+    /**\n+     * Information to be attached to any error messages that may be reported.\n+     */\n+    @Nullable\n+    final String errorInfo;\n \n     private TraversalRequest(\n         DirectTraversalRoot root,\n         boolean isRootGenerated,\n         PackageBoundaryMode crossPkgBoundaries,\n         boolean strictOutputFiles,\n         boolean skipTestingForSubpackage,\n+        boolean emitDirectoryNodes,",
        "comment_created_at": "2022-07-29T08:28:07+00:00",
        "comment_author": "fmeum",
        "comment_body": "The recent refactorings made wiring this up much simpler - the change only affects `DirectoryArtifactTraversalRequest` now. Do you still think I should add a test there?",
        "pr_file_module": null
      },
      {
        "comment_id": "938295024",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15774,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/RecursiveFilesystemTraversalValue.java",
        "discussion_id": "932675288",
        "commented_code": "@@ -277,21 +277,31 @@ public static final class TraversalRequest implements SkyKey {\n      */\n     final boolean skipTestingForSubpackage;\n \n-    /** Information to be attached to any error messages that may be reported. */\n-    @Nullable final String errorInfo;\n+    /**\n+     * Whether to create nodes for directories, including empty ones.\n+     */\n+    final boolean emitDirectoryNodes;\n+\n+    /**\n+     * Information to be attached to any error messages that may be reported.\n+     */\n+    @Nullable\n+    final String errorInfo;\n \n     private TraversalRequest(\n         DirectTraversalRoot root,\n         boolean isRootGenerated,\n         PackageBoundaryMode crossPkgBoundaries,\n         boolean strictOutputFiles,\n         boolean skipTestingForSubpackage,\n+        boolean emitDirectoryNodes,",
        "comment_created_at": "2022-08-04T22:30:44+00:00",
        "comment_author": "alexjski",
        "comment_body": "The change affects the logic in `RecursiveFileSystemTraversalFunction`, I would still recommend adding a test case for that in `RecursiveFileSystemTraversalFunctionTest`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2088822710",
    "pr_number": 26056,
    "pr_file": "src/test/java/com/google/devtools/build/lib/util/RegexUtilTest.java",
    "created_at": "2025-05-14T12:28:07+00:00",
    "commented_code": "+package com.google.devtools.build.lib.util;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.testing.junit.testparameterinjector.TestParameter;\n+import com.google.testing.junit.testparameterinjector.TestParameterInjector;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/** Tests for {@link RegexUtil}. */\n+@RunWith(TestParameterInjector.class)\n+public class RegexUtilTest {\n+\n+  @Test\n+  public void optimizedMatchingPredicate(\n+      @TestParameter({\n+            \"\",\n+            \"a\",\n+            \"foo\",\n+            \"foofoo\",\n+            \"/coverage.dat\",\n+            \"/coverage.data\",\n+            \"/coverage1dat\",\n+            \"/coverage1data\",\n+            \"foo/coverage.dat\",\n+            \"foo/coverage.data\",\n+            \"foo/coverage1dat\",\n+            \"foo/coverage1data\",\n+            \"foo/test/a/coverage.dat\",\n+            \"foo/test/.*/coverage.dat\",\n+            \"]]\n\",\n+          })\n+          String haystack,\n+      @TestParameter({\n+            \".*\",\n+            \".*?foo\",\n+            \".*+foo\",\n+            \"^foo$\",\n+            \".*/coverage.dat\",\n+            \".*/coverage\\\\.dat\",\n+            \".*/test/.*/coverage\\\\.dat\",\n+            \"$|\",\n+            \"^\",\n+            \".]\",\n+            \".*]\",\n+            \".*^?^\\\\Q\",",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2088822710",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26056,
        "pr_file": "src/test/java/com/google/devtools/build/lib/util/RegexUtilTest.java",
        "discussion_id": "2088822710",
        "commented_code": "@@ -0,0 +1,56 @@\n+package com.google.devtools.build.lib.util;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.testing.junit.testparameterinjector.TestParameter;\n+import com.google.testing.junit.testparameterinjector.TestParameterInjector;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/** Tests for {@link RegexUtil}. */\n+@RunWith(TestParameterInjector.class)\n+public class RegexUtilTest {\n+\n+  @Test\n+  public void optimizedMatchingPredicate(\n+      @TestParameter({\n+            \"\",\n+            \"a\",\n+            \"foo\",\n+            \"foofoo\",\n+            \"/coverage.dat\",\n+            \"/coverage.data\",\n+            \"/coverage1dat\",\n+            \"/coverage1data\",\n+            \"foo/coverage.dat\",\n+            \"foo/coverage.data\",\n+            \"foo/coverage1dat\",\n+            \"foo/coverage1data\",\n+            \"foo/test/a/coverage.dat\",\n+            \"foo/test/.*/coverage.dat\",\n+            \"]]\\n\",\n+          })\n+          String haystack,\n+      @TestParameter({\n+            \".*\",\n+            \".*?foo\",\n+            \".*+foo\",\n+            \"^foo$\",\n+            \".*/coverage.dat\",\n+            \".*/coverage\\\\.dat\",\n+            \".*/test/.*/coverage\\\\.dat\",\n+            \"$|\",\n+            \"^\",\n+            \".]\",\n+            \".*]\",\n+            \".*^?^\\\\Q\",",
        "comment_created_at": "2025-05-14T12:28:07+00:00",
        "comment_author": "tjgq",
        "comment_body": "Some more ideas for test cases:\r\n\r\n- A regex with an alternation matching two different test strings\r\n- A regex with at least one metacharacter following a `\\Q`, with that character matching one of the test strings literally\r\n- Test strings containing metacharacters not already covered above\r\n\r\nFuzzing is a great way to obtain additional confidence that the implementation is correct, but since it won't be triggered by CI, I'd still want some more test coverage.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962216704",
    "pr_number": 24921,
    "pr_file": "src/test/java/com/google/devtools/build/lib/exec/EagerFileWriteStrategyTest.java",
    "created_at": "2025-02-19T18:57:36+00:00",
    "commented_code": null,
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1962216704",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24921,
        "pr_file": "src/test/java/com/google/devtools/build/lib/exec/EagerFileWriteStrategyTest.java",
        "discussion_id": "1962216704",
        "commented_code": null,
        "comment_created_at": "2025-02-19T18:57:36+00:00",
        "comment_author": "tjgq",
        "comment_body": "Let's also add unit tests for LazyFileWriteStrategy (it's fine to use a mock `ActionOutputMetadataStore` if constructing a real one is too laborious).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962249183",
    "pr_number": 24921,
    "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/FilesystemValueChecker.java",
    "created_at": "2025-02-19T19:24:01+00:00",
    "commented_code": null,
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1962249183",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24921,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/FilesystemValueChecker.java",
        "discussion_id": "1962249183",
        "commented_code": null,
        "comment_created_at": "2025-02-19T19:24:01+00:00",
        "comment_author": "tjgq",
        "comment_body": "Mind adding tests in `FilesystemValueChecker` (you can take the existing tests for remote metadata as inspiration)?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962253838",
    "pr_number": 24921,
    "pr_file": "src/test/java/com/google/devtools/build/lib/remote/BuildWithoutTheBytesIntegrationTestBase.java",
    "created_at": "2025-02-19T19:27:39+00:00",
    "commented_code": "assertSymlink(\"foo-link\", PathFragment.create(\"/some/path\"));\n   }\n \n+  @Test\n+  public void downloadMinimal_fileWrite(",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1962253838",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24921,
        "pr_file": "src/test/java/com/google/devtools/build/lib/remote/BuildWithoutTheBytesIntegrationTestBase.java",
        "discussion_id": "1962253838",
        "commented_code": "@@ -1055,6 +1097,83 @@ public void downloadToplevel_unresolvedSymlink() throws Exception {\n     assertSymlink(\"foo-link\", PathFragment.create(\"/some/path\"));\n   }\n \n+  @Test\n+  public void downloadMinimal_fileWrite(",
        "comment_created_at": "2025-02-19T19:27:39+00:00",
        "comment_author": "tjgq",
        "comment_body": "Can you also parameterize these tests for `ctx.actions.write_file` and `ctx.actions.expand_template`? (It's fine to use a dummy template with no substitutions, I'm only concerned about covering the separate code path in `LocalTemplateExpansionStrategy`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1936137465",
    "pr_number": 23961,
    "pr_file": "src/test/java/com/google/devtools/build/lib/starlark/StarlarkRuleImplementationFunctionsTest.java",
    "created_at": "2025-01-30T18:59:43+00:00",
    "commented_code": "Iterables.getOnlyElement(\n                 ruleContext.getRuleContext().getAnalysisEnvironment().getRegisteredActions());\n     assertThat(action.getIncompleteEnvironmentForTesting()).containsExactly(\"a\", \"b\");\n-    // We expect \"timeout\" to be filtered by TargetUtils.\n     assertThat(action.getExecutionInfo()).containsExactly(\"block-network\", \"foo\");\n   }\n \n+  @Test\n+  public void testCreateSpawnActionEnvAndExecInfo_withTimeout() throws Exception {\n+    StarlarkRuleContext ruleContext = createRuleContext(\"//foo:foo\");\n+    setRuleContext(ruleContext);\n+    ev.exec(\n+        \"ruleContext.actions.run_shell(\",\n+        \"  inputs = ruleContext.files.srcs,\",\n+        \"  outputs = ruleContext.files.srcs,\",\n+        \"  execution_requirements = {\",\n+        \"    'timeout': '42',\",",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1936137465",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23961,
        "pr_file": "src/test/java/com/google/devtools/build/lib/starlark/StarlarkRuleImplementationFunctionsTest.java",
        "discussion_id": "1936137465",
        "commented_code": "@@ -425,10 +425,31 @@ public void testCreateSpawnActionEnvAndExecInfo() throws Exception {\n             Iterables.getOnlyElement(\n                 ruleContext.getRuleContext().getAnalysisEnvironment().getRegisteredActions());\n     assertThat(action.getIncompleteEnvironmentForTesting()).containsExactly(\"a\", \"b\");\n-    // We expect \"timeout\" to be filtered by TargetUtils.\n     assertThat(action.getExecutionInfo()).containsExactly(\"block-network\", \"foo\");\n   }\n \n+  @Test\n+  public void testCreateSpawnActionEnvAndExecInfo_withTimeout() throws Exception {\n+    StarlarkRuleContext ruleContext = createRuleContext(\"//foo:foo\");\n+    setRuleContext(ruleContext);\n+    ev.exec(\n+        \"ruleContext.actions.run_shell(\",\n+        \"  inputs = ruleContext.files.srcs,\",\n+        \"  outputs = ruleContext.files.srcs,\",\n+        \"  execution_requirements = {\",\n+        \"    'timeout': '42',\",",
        "comment_created_at": "2025-01-30T18:59:43+00:00",
        "comment_author": "tjgq",
        "comment_body": "If I understand it correctly, the implementation also recognizes `{\"timeout:42\": \"\"}` in `execution_requirements`. Can you parameterize the test to cover both cases?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1952627255",
    "pr_number": 23961,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/StandaloneTestStrategy.java",
    "created_at": "2025-02-12T13:17:16+00:00",
    "commented_code": "// for this.\n       executionInfo.put(ExecutionRequirements.NO_CACHE, \"\");\n     }\n-    executionInfo.put(ExecutionRequirements.TIMEOUT, \"\" + getTimeout(action).toSeconds());\n+    executionInfo.put(\"timeout\", \"\" + getTimeout(action).toSeconds());",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1952627255",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23961,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/StandaloneTestStrategy.java",
        "discussion_id": "1952627255",
        "commented_code": "@@ -119,7 +119,7 @@ public TestRunnerSpawn createTestRunnerSpawn(\n       // for this.\n       executionInfo.put(ExecutionRequirements.NO_CACHE, \"\");\n     }\n-    executionInfo.put(ExecutionRequirements.TIMEOUT, \"\" + getTimeout(action).toSeconds());\n+    executionInfo.put(\"timeout\", \"\" + getTimeout(action).toSeconds());",
        "comment_created_at": "2025-02-12T13:17:16+00:00",
        "comment_author": "tjgq",
        "comment_body": "Why change this to a string literal?\r\n\r\nAlso, it's unclear to me how `tags` interacts with the `timeout` attribute for test targets (or the `--test_timeout` flag, which overrides it). Can you add integration tests to clarify the behavior?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "918718713",
    "pr_number": 15861,
    "pr_file": "src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper/CredentialHelperTest.java",
    "created_at": "2022-07-12T08:52:48+00:00",
    "commented_code": "+// Copyright 2022 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.authandtls.credentialhelper;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertThrows;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.eventbus.EventBus;\n+import com.google.devtools.build.lib.events.Reporter;\n+import com.google.devtools.build.lib.vfs.DigestHashFunction;\n+import com.google.devtools.build.lib.vfs.FileSystem;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.lib.vfs.inmemoryfs.InMemoryFileSystem;\n+import com.google.devtools.build.runfiles.Runfiles;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CredentialHelperTest {\n+  private static final PathFragment TEST_CREDENTIAL_HELPER_DIR =\n+      PathFragment.create(\n+          \"io_bazel/src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper\");\n+\n+  private static final Runfiles runfiles;\n+\n+  static {\n+    try {\n+      runfiles = Runfiles.create();\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  private static boolean isWindows() {\n+    return File.separatorChar == '\\\\';\n+  }\n+\n+  private static final Reporter reporter = new Reporter(new EventBus());\n+\n+  private GetCredentialsResponse getCredentialsFromHelper(String uri) throws Exception {\n+    Preconditions.checkNotNull(uri);\n+\n+    FileSystem filesystem = new InMemoryFileSystem(DigestHashFunction.SHA256);\n+    PathFragment credentialHelperPath =\n+        TEST_CREDENTIAL_HELPER_DIR.getChild(\n+            isWindows() ? \"test_credential_helper.exe\" : \"test_credential_helper\");\n+    CredentialHelper credentialHelper =\n+        new CredentialHelper(\n+            filesystem.getPath(runfiles.rlocation(credentialHelperPath.getSafePathString())));\n+    return credentialHelper.getCredentials(\n+        CredentialHelperEnvironment.newBuilder()\n+            .setEventReporter(reporter)\n+            .setWorkspacePath(filesystem.getPath(System.getenv(\"TEST_TMPDIR\")))\n+            .setClientEnvironment(ImmutableMap.of())\n+            .build(),\n+        URI.create(uri));\n+  }\n+\n+  @Test\n+  public void knownUriWithSingleHeader() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://singleheader.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void knownUriWithMultipleHeaders() throws Exception {\n+    GetCredentialsResponse response =\n+        getCredentialsFromHelper(\"https://multipleheaders.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .put(\"header2\", ImmutableList.of(\"value1\", \"value2\"))\n+                .put(\"header3\", ImmutableList.of(\"value1\", \"value2\", \"value3\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void unknownUri() {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://unknown.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"Unknown uri 'https://unknown.example.com'\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsNothing() throws Exception {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://printnothing.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"exited without output\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsExtraFields() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://extrafields.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+}",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "918718713",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15861,
        "pr_file": "src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper/CredentialHelperTest.java",
        "discussion_id": "918718713",
        "commented_code": "@@ -0,0 +1,127 @@\n+// Copyright 2022 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.authandtls.credentialhelper;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertThrows;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.eventbus.EventBus;\n+import com.google.devtools.build.lib.events.Reporter;\n+import com.google.devtools.build.lib.vfs.DigestHashFunction;\n+import com.google.devtools.build.lib.vfs.FileSystem;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.lib.vfs.inmemoryfs.InMemoryFileSystem;\n+import com.google.devtools.build.runfiles.Runfiles;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CredentialHelperTest {\n+  private static final PathFragment TEST_CREDENTIAL_HELPER_DIR =\n+      PathFragment.create(\n+          \"io_bazel/src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper\");\n+\n+  private static final Runfiles runfiles;\n+\n+  static {\n+    try {\n+      runfiles = Runfiles.create();\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  private static boolean isWindows() {\n+    return File.separatorChar == '\\\\';\n+  }\n+\n+  private static final Reporter reporter = new Reporter(new EventBus());\n+\n+  private GetCredentialsResponse getCredentialsFromHelper(String uri) throws Exception {\n+    Preconditions.checkNotNull(uri);\n+\n+    FileSystem filesystem = new InMemoryFileSystem(DigestHashFunction.SHA256);\n+    PathFragment credentialHelperPath =\n+        TEST_CREDENTIAL_HELPER_DIR.getChild(\n+            isWindows() ? \"test_credential_helper.exe\" : \"test_credential_helper\");\n+    CredentialHelper credentialHelper =\n+        new CredentialHelper(\n+            filesystem.getPath(runfiles.rlocation(credentialHelperPath.getSafePathString())));\n+    return credentialHelper.getCredentials(\n+        CredentialHelperEnvironment.newBuilder()\n+            .setEventReporter(reporter)\n+            .setWorkspacePath(filesystem.getPath(System.getenv(\"TEST_TMPDIR\")))\n+            .setClientEnvironment(ImmutableMap.of())\n+            .build(),\n+        URI.create(uri));\n+  }\n+\n+  @Test\n+  public void knownUriWithSingleHeader() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://singleheader.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void knownUriWithMultipleHeaders() throws Exception {\n+    GetCredentialsResponse response =\n+        getCredentialsFromHelper(\"https://multipleheaders.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .put(\"header2\", ImmutableList.of(\"value1\", \"value2\"))\n+                .put(\"header3\", ImmutableList.of(\"value1\", \"value2\", \"value3\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void unknownUri() {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://unknown.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"Unknown uri 'https://unknown.example.com'\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsNothing() throws Exception {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://printnothing.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"exited without output\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsExtraFields() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://extrafields.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+}",
        "comment_created_at": "2022-07-12T08:52:48+00:00",
        "comment_author": "tjgq",
        "comment_body": "IMO there's a couple more things we should test:\r\n\r\n- helper returns empty object (\"no headers required for this URL\")\r\n- environment variables (i.e., pass an env var to the helper and embed it in the response to verify that it was passed in correctly)",
        "pr_file_module": null
      },
      {
        "comment_id": "921156524",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15861,
        "pr_file": "src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper/CredentialHelperTest.java",
        "discussion_id": "918718713",
        "commented_code": "@@ -0,0 +1,127 @@\n+// Copyright 2022 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.authandtls.credentialhelper;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertThrows;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.eventbus.EventBus;\n+import com.google.devtools.build.lib.events.Reporter;\n+import com.google.devtools.build.lib.vfs.DigestHashFunction;\n+import com.google.devtools.build.lib.vfs.FileSystem;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.lib.vfs.inmemoryfs.InMemoryFileSystem;\n+import com.google.devtools.build.runfiles.Runfiles;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URI;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class CredentialHelperTest {\n+  private static final PathFragment TEST_CREDENTIAL_HELPER_DIR =\n+      PathFragment.create(\n+          \"io_bazel/src/test/java/com/google/devtools/build/lib/authandtls/credentialhelper\");\n+\n+  private static final Runfiles runfiles;\n+\n+  static {\n+    try {\n+      runfiles = Runfiles.create();\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  private static boolean isWindows() {\n+    return File.separatorChar == '\\\\';\n+  }\n+\n+  private static final Reporter reporter = new Reporter(new EventBus());\n+\n+  private GetCredentialsResponse getCredentialsFromHelper(String uri) throws Exception {\n+    Preconditions.checkNotNull(uri);\n+\n+    FileSystem filesystem = new InMemoryFileSystem(DigestHashFunction.SHA256);\n+    PathFragment credentialHelperPath =\n+        TEST_CREDENTIAL_HELPER_DIR.getChild(\n+            isWindows() ? \"test_credential_helper.exe\" : \"test_credential_helper\");\n+    CredentialHelper credentialHelper =\n+        new CredentialHelper(\n+            filesystem.getPath(runfiles.rlocation(credentialHelperPath.getSafePathString())));\n+    return credentialHelper.getCredentials(\n+        CredentialHelperEnvironment.newBuilder()\n+            .setEventReporter(reporter)\n+            .setWorkspacePath(filesystem.getPath(System.getenv(\"TEST_TMPDIR\")))\n+            .setClientEnvironment(ImmutableMap.of())\n+            .build(),\n+        URI.create(uri));\n+  }\n+\n+  @Test\n+  public void knownUriWithSingleHeader() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://singleheader.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void knownUriWithMultipleHeaders() throws Exception {\n+    GetCredentialsResponse response =\n+        getCredentialsFromHelper(\"https://multipleheaders.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .put(\"header2\", ImmutableList.of(\"value1\", \"value2\"))\n+                .put(\"header3\", ImmutableList.of(\"value1\", \"value2\", \"value3\"))\n+                .build());\n+  }\n+\n+  @Test\n+  public void unknownUri() {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://unknown.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"Unknown uri 'https://unknown.example.com'\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsNothing() throws Exception {\n+    IOException ioException =\n+        assertThrows(\n+            IOException.class, () -> getCredentialsFromHelper(\"https://printnothing.example.com\"));\n+    assertThat(ioException).hasMessageThat().contains(\"exited without output\");\n+  }\n+\n+  @Test\n+  public void credentialHelperOutputsExtraFields() throws Exception {\n+    GetCredentialsResponse response = getCredentialsFromHelper(\"https://extrafields.example.com\");\n+    assertThat(response.getHeaders())\n+        .containsExactlyEntriesIn(\n+            ImmutableMap.<String, ImmutableList<String>>builder()\n+                .put(\"header1\", ImmutableList.of(\"value1\"))\n+                .build());\n+  }\n+}",
        "comment_created_at": "2022-07-14T13:29:24+00:00",
        "comment_author": "Yannic",
        "comment_body": "Added a test for env vars and the CWD of the helper. I don't think we need to test parsing many responses since we have many tests for parsing `GetCredentialsResponse` from JSON",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1819331813",
    "pr_number": 24010,
    "pr_file": "src/test/java/com/google/devtools/build/lib/util/StringEncodingTest.java",
    "created_at": "2024-10-28T15:59:28+00:00",
    "commented_code": null,
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1819331813",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24010,
        "pr_file": "src/test/java/com/google/devtools/build/lib/util/StringEncodingTest.java",
        "discussion_id": "1819331813",
        "commented_code": null,
        "comment_created_at": "2024-10-28T15:59:28+00:00",
        "comment_author": "tjgq",
        "comment_body": "I'd prefer to see some tests here that explicitly check the byte contents of the string before and after conversion, because the two halves of the round-trip can both be wrong.",
        "pr_file_module": null
      }
    ]
  }
]