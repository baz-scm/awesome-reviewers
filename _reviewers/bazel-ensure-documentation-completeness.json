[
  {
    "discussion_id": "2209699303",
    "pr_number": 25071,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/action_names.bzl",
    "created_at": "2025-07-16T08:45:59+00:00",
    "commented_code": "PREPROCESS_ASSEMBLE_ACTION_NAME = \"preprocess-assemble\"\n \n LLVM_COV = \"llvm-cov\"\n+DWP = \"dwp\"",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2209699303",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25071,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/action_names.bzl",
        "discussion_id": "2209699303",
        "commented_code": "@@ -52,6 +52,7 @@ ASSEMBLE_ACTION_NAME = \"assemble\"\n PREPROCESS_ASSEMBLE_ACTION_NAME = \"preprocess-assemble\"\n \n LLVM_COV = \"llvm-cov\"\n+DWP = \"dwp\"",
        "comment_created_at": "2025-07-16T08:45:59+00:00",
        "comment_author": "pzembrod",
        "comment_body": "Could you add a comment to the DWP line, and while you are at it, also add one for LLVM_COV? I think it can be just \"Name of the coverage action\".",
        "pr_file_module": null
      },
      {
        "comment_id": "2212296810",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25071,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/action_names.bzl",
        "discussion_id": "2209699303",
        "commented_code": "@@ -52,6 +52,7 @@ ASSEMBLE_ACTION_NAME = \"assemble\"\n PREPROCESS_ASSEMBLE_ACTION_NAME = \"preprocess-assemble\"\n \n LLVM_COV = \"llvm-cov\"\n+DWP = \"dwp\"",
        "comment_created_at": "2025-07-17T05:25:16+00:00",
        "comment_author": "AustinSchuh",
        "comment_body": "Of course!  Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055695595",
    "pr_number": 23238,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
    "created_at": "2025-04-23T09:55:43+00:00",
    "commented_code": "and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n-<pre><code class=\"lang-starlark\">\n-  const std::string path = devtools_build::GetDataDependencyFilepath(\n-      \"my/test/data/file\");\n-</code></pre>\n+<p>The functionality of locating data files (runfiles) at runtime in Bazel-built \n+C++ binaries is provided by <a href=\"https://github.com/bazelbuild/rules_cc/blob/main/cc/runfiles/runfiles.h\">runfiles.h.</a>.\n+The functionality are documented inside the header file.",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2055695595",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23238,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
        "discussion_id": "2055695595",
        "commented_code": "@@ -119,11 +119,10 @@ most build rules</a>.\n    and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n-<pre><code class=\"lang-starlark\">\n-  const std::string path = devtools_build::GetDataDependencyFilepath(\n-      \"my/test/data/file\");\n-</code></pre>\n+<p>The functionality of locating data files (runfiles) at runtime in Bazel-built \n+C++ binaries is provided by <a href=\"https://github.com/bazelbuild/rules_cc/blob/main/cc/runfiles/runfiles.h\">runfiles.h.</a>.\n+The functionality are documented inside the header file.",
        "comment_created_at": "2025-04-23T09:55:43+00:00",
        "comment_author": "fmeum",
        "comment_body": "```suggestion\nThe functionality is documented inside the header file.\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2055868009",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23238,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
        "discussion_id": "2055695595",
        "commented_code": "@@ -119,11 +119,10 @@ most build rules</a>.\n    and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n-<pre><code class=\"lang-starlark\">\n-  const std::string path = devtools_build::GetDataDependencyFilepath(\n-      \"my/test/data/file\");\n-</code></pre>\n+<p>The functionality of locating data files (runfiles) at runtime in Bazel-built \n+C++ binaries is provided by <a href=\"https://github.com/bazelbuild/rules_cc/blob/main/cc/runfiles/runfiles.h\">runfiles.h.</a>.\n+The functionality are documented inside the header file.",
        "comment_created_at": "2025-04-23T11:44:11+00:00",
        "comment_author": "pat-jpnk",
        "comment_body": "Thanks, fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1184046809",
    "pr_number": 17887,
    "pr_file": "tools/cpp/runfiles/runfiles_src.h",
    "created_at": "2023-05-03T17:50:34+00:00",
    "commented_code": "public:\n   virtual ~Runfiles() {}\n \n+#if defined(__has_builtin)\n+#if __has_builtin(__builtin_FILE)\n+#define BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE\n+#endif\n+#endif\n+#if defined(_MSC_VER)\n+#if _MSC_VER >= 1926\n+#define BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE\n+#endif\n+#endif\n+#if defined(BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE) || \\\n+    defined(BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE)\n+#define BAZEL_TOOLS_CPP_RUNFILES_HAS_BUILTIN_FILE\n+#endif\n+#undef BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE\n+#undef BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE\n+\n+#if defined(BAZEL_TOOLS_CPP_RUNFILES_HAS_BUILTIN_FILE)\n+  // Returns the repository name.\n+  //\n+  // Use this from within `cc_test` rules.\n+  //\n+  // Returns nullptr on error. If `error` is provided, the method prints an\n+  // error message into it.\n+  //\n+  // This method looks at the RUNFILES_MANIFEST_FILE and TEST_SRCDIR\n+  // environment variables.\n+  //\n+  // If source_repository is not provided, it defaults to the main repository\n+  // (also known as the workspace).\n+  static std::string CurrentRepository(const std::string& file = __builtin_FILE());\n+ private:\n+  static std::string GetPrefixHint() {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1184046809",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 17887,
        "pr_file": "tools/cpp/runfiles/runfiles_src.h",
        "discussion_id": "1184046809",
        "commented_code": "@@ -93,6 +98,51 @@ class Runfiles {\n  public:\n   virtual ~Runfiles() {}\n \n+#if defined(__has_builtin)\n+#if __has_builtin(__builtin_FILE)\n+#define BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE\n+#endif\n+#endif\n+#if defined(_MSC_VER)\n+#if _MSC_VER >= 1926\n+#define BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE\n+#endif\n+#endif\n+#if defined(BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE) || \\\n+    defined(BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE)\n+#define BAZEL_TOOLS_CPP_RUNFILES_HAS_BUILTIN_FILE\n+#endif\n+#undef BAZEL_TOOLS_CPP_RUNFILES_GENERIC_HAS_BUILTIN_FILE\n+#undef BAZEL_TOOLS_CPP_RUNFILES_MSVC_HAS_BUILTIN_FILE\n+\n+#if defined(BAZEL_TOOLS_CPP_RUNFILES_HAS_BUILTIN_FILE)\n+  // Returns the repository name.\n+  //\n+  // Use this from within `cc_test` rules.\n+  //\n+  // Returns nullptr on error. If `error` is provided, the method prints an\n+  // error message into it.\n+  //\n+  // This method looks at the RUNFILES_MANIFEST_FILE and TEST_SRCDIR\n+  // environment variables.\n+  //\n+  // If source_repository is not provided, it defaults to the main repository\n+  // (also known as the workspace).\n+  static std::string CurrentRepository(const std::string& file = __builtin_FILE());\n+ private:\n+  static std::string GetPrefixHint() {",
        "comment_created_at": "2023-05-03T17:50:34+00:00",
        "comment_author": "fmeum",
        "comment_body": "Could you add a comment here explaining the purpose of this function? Doesn't have to be user-facing as it is private, but dev-facing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1184054209",
    "pr_number": 17887,
    "pr_file": "tools/cpp/runfiles/runfiles_src.h",
    "created_at": "2023-05-03T17:51:40+00:00",
    "commented_code": "//       using bazel::tools::cpp::runfiles::Runfiles;\n //\n // 3.  Create a Runfiles object and use rlocation to look up runfile paths:\n+//     Note that if Runfiles::CurrentRepository() is not supported for the cc",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1184054209",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 17887,
        "pr_file": "tools/cpp/runfiles/runfiles_src.h",
        "discussion_id": "1184054209",
        "commented_code": "@@ -30,15 +30,20 @@\n //       using bazel::tools::cpp::runfiles::Runfiles;\n //\n // 3.  Create a Runfiles object and use rlocation to look up runfile paths:\n+//     Note that if Runfiles::CurrentRepository() is not supported for the cc",
        "comment_created_at": "2023-05-03T17:51:40+00:00",
        "comment_author": "fmeum",
        "comment_body": "It could make sense to mention that C++20 is a requirement (if that's actually true) to give users an idea when they should expect this to be available.",
        "pr_file_module": null
      }
    ]
  }
]