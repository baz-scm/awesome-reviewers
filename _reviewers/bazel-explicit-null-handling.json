[
  {
    "discussion_id": "2179663193",
    "pr_number": 26287,
    "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/actions/FileWriteAction.java",
    "created_at": "2025-07-02T10:07:05+00:00",
    "commented_code": "private static final int COMPRESS_CHARS_THRESHOLD = 256;\n \n   private final boolean makeExecutable;\n+  @Nullable\n+  private final String mnemonic;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2179663193",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26287,
        "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/actions/FileWriteAction.java",
        "discussion_id": "2179663193",
        "commented_code": "@@ -70,6 +70,8 @@ public abstract class FileWriteAction extends AbstractFileWriteAction\n   private static final int COMPRESS_CHARS_THRESHOLD = 256;\n \n   private final boolean makeExecutable;\n+  @Nullable\n+  private final String mnemonic;",
        "comment_created_at": "2025-07-02T10:07:05+00:00",
        "comment_author": "comius",
        "comment_body": "nit: with strings I'd probably rather go with a default value, either \"\" or \"FileWrite\" than Nullable. That should be easier to handle.\r\n\r\nPS AbstractFileWriteAction.getMnemonic already defaults to \"FileWrite\". So I believe this is the best choice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "905051580",
    "pr_number": 15664,
    "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/test/ExecutionInfo.java",
    "created_at": "2022-06-23T13:53:06+00:00",
    "commented_code": "new BuiltinProvider<ExecutionInfo>(\"ExecutionInfo\", ExecutionInfo.class) {};\n \n   private final ImmutableMap<String, String> executionInfo;\n+  private final String execGroup;\n \n-  public ExecutionInfo(Map<String, String> requirements) {\n+  public ExecutionInfo(Map<String, String> requirements, String execGroup) {\n     this.executionInfo = ImmutableMap.copyOf(requirements);\n+    this.execGroup = execGroup;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "905051580",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 15664,
        "pr_file": "src/main/java/com/google/devtools/build/lib/analysis/test/ExecutionInfo.java",
        "discussion_id": "905051580",
        "commented_code": "@@ -32,9 +32,11 @@ public final class ExecutionInfo extends NativeInfo implements ExecutionInfoApi\n       new BuiltinProvider<ExecutionInfo>(\"ExecutionInfo\", ExecutionInfo.class) {};\n \n   private final ImmutableMap<String, String> executionInfo;\n+  private final String execGroup;\n \n-  public ExecutionInfo(Map<String, String> requirements) {\n+  public ExecutionInfo(Map<String, String> requirements, String execGroup) {\n     this.executionInfo = ImmutableMap.copyOf(requirements);\n+    this.execGroup = execGroup;",
        "comment_created_at": "2022-06-23T13:53:06+00:00",
        "comment_author": "katre",
        "comment_body": "Please use Preconditions.checkNotNull to guard the `execGroup` parameter.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1991446403",
    "pr_number": 25534,
    "pr_file": "src/main/java/com/google/devtools/build/lib/remote/AbstractActionInputPrefetcher.java",
    "created_at": "2025-03-12T12:56:23+00:00",
    "commented_code": "PathFragment execPath = input.getExecPath();\n \n-      FileArtifactValue metadata = metadataSupplier.getMetadata(input);\n-      if (metadata == null || !canDownloadFile(execRoot.getRelative(execPath), metadata)) {\n+      // input is known to be a non-source artifact and thus must have metadata.\n+      FileArtifactValue metadata = checkNotNull(metadataSupplier.getMetadata(input));",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1991446403",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25534,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/AbstractActionInputPrefetcher.java",
        "discussion_id": "1991446403",
        "commented_code": "@@ -376,8 +376,9 @@ private ListenableFuture<Void> prefetchFile(\n \n       PathFragment execPath = input.getExecPath();\n \n-      FileArtifactValue metadata = metadataSupplier.getMetadata(input);\n-      if (metadata == null || !canDownloadFile(execRoot.getRelative(execPath), metadata)) {\n+      // input is known to be a non-source artifact and thus must have metadata.\n+      FileArtifactValue metadata = checkNotNull(metadataSupplier.getMetadata(input));",
        "comment_created_at": "2025-03-12T12:56:23+00:00",
        "comment_author": "tjgq",
        "comment_body": "Pass `input` to `checkNotNull` so that a stack trace will indicate which input failed the precondition.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1923896658",
    "pr_number": 24987,
    "pr_file": "src/main/java/com/google/devtools/build/lib/actions/ActionExecutionContext.java",
    "created_at": "2025-01-21T15:07:46+00:00",
    "commented_code": "* Report a subcommand event to this Executor's Reporter and, if action\n    * logging is enabled, post it on its EventBus.\n    */\n-  public void maybeReportSubcommand(Spawn spawn) {\n+  public void maybeReportSubcommand(Spawn spawn, String spawnRunner) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1923896658",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24987,
        "pr_file": "src/main/java/com/google/devtools/build/lib/actions/ActionExecutionContext.java",
        "discussion_id": "1923896658",
        "commented_code": "@@ -455,7 +455,7 @@ public <T extends ActionContext> T getContext(Class<T> type) {\n    * Report a subcommand event to this Executor's Reporter and, if action\n    * logging is enabled, post it on its EventBus.\n    */\n-  public void maybeReportSubcommand(Spawn spawn) {\n+  public void maybeReportSubcommand(Spawn spawn, String spawnRunner) {",
        "comment_created_at": "2025-01-21T15:07:46+00:00",
        "comment_author": "katre",
        "comment_body": "Mark `spawnRunner` as `@Nullable` (since the method it passes to is), or add an explicit non-null check (if that is important semantically).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "693629609",
    "pr_number": 13852,
    "pr_file": "src/main/java/com/google/devtools/build/lib/remote/common/RemoteCacheClient.java",
    "created_at": "2021-08-23T03:33:18+00:00",
    "commented_code": "}\n   }\n \n+  @AutoValue\n+  abstract class CachedActionResult {\n+    public static CachedActionResult create(ActionResult actionResult, String cacheName) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, cacheName);\n+    }\n+\n+    public static CachedActionResult remote(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"remote\");\n+    }\n+\n+    public static CachedActionResult disk(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"disk\");\n+    }\n+\n+    @Nullable\n+    public abstract ActionResult actionResult();",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "693629609",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 13852,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/common/RemoteCacheClient.java",
        "discussion_id": "693629609",
        "commented_code": "@@ -63,6 +65,26 @@ public int hashCode() {\n     }\n   }\n \n+  @AutoValue\n+  abstract class CachedActionResult {\n+    public static CachedActionResult create(ActionResult actionResult, String cacheName) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, cacheName);\n+    }\n+\n+    public static CachedActionResult remote(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"remote\");\n+    }\n+\n+    public static CachedActionResult disk(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"disk\");\n+    }\n+\n+    @Nullable\n+    public abstract ActionResult actionResult();",
        "comment_created_at": "2021-08-23T03:33:18+00:00",
        "comment_author": "coeuvre",
        "comment_body": "Please add java doc to describe in which case the value will be `null`.",
        "pr_file_module": null
      },
      {
        "comment_id": "694290327",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 13852,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/common/RemoteCacheClient.java",
        "discussion_id": "693629609",
        "commented_code": "@@ -63,6 +65,26 @@ public int hashCode() {\n     }\n   }\n \n+  @AutoValue\n+  abstract class CachedActionResult {\n+    public static CachedActionResult create(ActionResult actionResult, String cacheName) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, cacheName);\n+    }\n+\n+    public static CachedActionResult remote(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"remote\");\n+    }\n+\n+    public static CachedActionResult disk(ActionResult actionResult) {\n+      return new AutoValue_RemoteCacheClient_CachedActionResult(actionResult, \"disk\");\n+    }\n+\n+    @Nullable\n+    public abstract ActionResult actionResult();",
        "comment_created_at": "2021-08-23T20:36:00+00:00",
        "comment_author": "ron-stripe",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1815544553",
    "pr_number": 24047,
    "pr_file": "src/main/java/com/google/devtools/build/lib/windows/WindowsFileSystem.java",
    "created_at": "2024-10-24T18:38:58+00:00",
    "commented_code": "throw new FileNotFoundException(path + ERR_NO_SUCH_FILE_OR_DIR);\n     }\n \n-    final boolean isSymbolicLink = !followSymlinks && fileIsSymbolicLink(file);\n-    final long lastChangeTime =\n-        WindowsFileOperations.getLastChangeTime(getNioPath(path).toString(), followSymlinks);\n     FileStatus status =\n         new FileStatus() {\n+          volatile Boolean isSymbolicLink;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1815544553",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24047,
        "pr_file": "src/main/java/com/google/devtools/build/lib/windows/WindowsFileSystem.java",
        "discussion_id": "1815544553",
        "commented_code": "@@ -148,31 +148,32 @@ protected FileStatus stat(PathFragment path, boolean followSymlinks) throws IOEx\n       throw new FileNotFoundException(path + ERR_NO_SUCH_FILE_OR_DIR);\n     }\n \n-    final boolean isSymbolicLink = !followSymlinks && fileIsSymbolicLink(file);\n-    final long lastChangeTime =\n-        WindowsFileOperations.getLastChangeTime(getNioPath(path).toString(), followSymlinks);\n     FileStatus status =\n         new FileStatus() {\n+          volatile Boolean isSymbolicLink;",
        "comment_created_at": "2024-10-24T18:38:58+00:00",
        "comment_author": "tjgq",
        "comment_body": "Let's mark this `@Nullable` and append a comment `// null if not yet known` to make the convention clear.",
        "pr_file_module": null
      }
    ]
  }
]