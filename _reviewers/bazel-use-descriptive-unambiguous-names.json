[
  {
    "discussion_id": "2303428925",
    "pr_number": 26828,
    "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/FileSystem.java",
    "created_at": "2025-08-27T09:44:45+00:00",
    "commented_code": "* structured/parsed representation, it will not cause any IO. (e.g., it will not resolve symbolic\n    * links if it's a Unix file system.\n    */\n-  public Path getPath(String path) {\n+  public final Path getPath(String path) {\n     return Path.create(path, this);\n   }\n \n   /** Returns an absolute path instance, given an absolute path fragment. */\n-  public Path getPath(PathFragment pathFragment) {\n+  public final Path getPath(PathFragment pathFragment) {\n     return Path.create(pathFragment, this);\n   }\n \n   final Root getAbsoluteRoot() {\n     return absoluteRoot;\n   }\n \n+  /**\n+   * Returns the underlying file system if the current file system is a partial overlay of another\n+   * file system. Otherwise, returns this.\n+   *\n+   * <p>Note that the returned file system may still be an in-memory file system (in tests, for\n+   * example), but should be treated as the \"native\" file system for the host machine.\n+   */\n+  public FileSystem getUnderlyingFileSystem() {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2303428925",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26828,
        "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/FileSystem.java",
        "discussion_id": "2303428925",
        "commented_code": "@@ -74,19 +74,30 @@ public NotASymlinkException(PathFragment path, Throwable cause) {\n    * structured/parsed representation, it will not cause any IO. (e.g., it will not resolve symbolic\n    * links if it's a Unix file system.\n    */\n-  public Path getPath(String path) {\n+  public final Path getPath(String path) {\n     return Path.create(path, this);\n   }\n \n   /** Returns an absolute path instance, given an absolute path fragment. */\n-  public Path getPath(PathFragment pathFragment) {\n+  public final Path getPath(PathFragment pathFragment) {\n     return Path.create(pathFragment, this);\n   }\n \n   final Root getAbsoluteRoot() {\n     return absoluteRoot;\n   }\n \n+  /**\n+   * Returns the underlying file system if the current file system is a partial overlay of another\n+   * file system. Otherwise, returns this.\n+   *\n+   * <p>Note that the returned file system may still be an in-memory file system (in tests, for\n+   * example), but should be treated as the \"native\" file system for the host machine.\n+   */\n+  public FileSystem getUnderlyingFileSystem() {",
        "comment_created_at": "2025-08-27T09:44:45+00:00",
        "comment_author": "tjgq",
        "comment_body": "Is \"underlying\" the best descriptor we can use? For RemoteActionFileSystem I think this can get confusing, because it's not a overlay but more like a union of two filesystems (that could both be said to \"underlie\" it).\r\n\r\nIf we can't come up with a better term, let's at least include a paragraph along these lines in the Javadoc: \"for an action filesystem, this should return the on-disk component (or its underlying filesystem, if it is itself an overlay).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208026122",
    "pr_number": 26525,
    "pr_file": "src/main/java/com/google/devtools/build/lib/packages/TargetUtils.java",
    "created_at": "2025-07-15T16:52:06+00:00",
    "commented_code": "return name.equals(\"test_suite\");\n   }\n \n+  public static boolean isExecutableRule(Target target) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2208026122",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26525,
        "pr_file": "src/main/java/com/google/devtools/build/lib/packages/TargetUtils.java",
        "discussion_id": "2208026122",
        "commented_code": "@@ -72,6 +72,10 @@ public static boolean isTestSuiteRuleName(String name) {\n     return name.equals(\"test_suite\");\n   }\n \n+  public static boolean isExecutableRule(Target target) {",
        "comment_created_at": "2025-07-15T16:52:06+00:00",
        "comment_author": "fmeum",
        "comment_body": "Consider calling this `isExecutableNonTestRule` since that's what folks will wonder about at the call site.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2269665056",
    "pr_number": 26746,
    "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeExecutor.java",
    "created_at": "2025-08-12T12:22:17+00:00",
    "commented_code": "}\n \n   /**\n-   * Before running the {@link FilesystemValueChecker} ensure that all values marked for\n-   * invalidation have actually been invalidated (recall that invalidation happens at the beginning\n-   * of the next evaluate() call), because checking those is a waste of time.\n+   * Actually invalidates values marked for invalidation by a previous evaluation.\n+   *\n+   * <p>Invalidation is delayed because:\n+   *\n+   * <ul>\n+   *   <li>there may never be a next evaluation, so the work to clean up values may be wasted;\n+   *   <li>invalidated values may be resurrected due to change pruning.\n+   * </ul>\n    */\n-  protected final void invalidateValuesMarkedForInvalidation(ExtendedEventHandler eventHandler)\n+  public final void performDeferredInvalidation(ExtendedEventHandler eventHandler)",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2269665056",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26746,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeExecutor.java",
        "discussion_id": "2269665056",
        "commented_code": "@@ -3901,19 +3900,26 @@ protected void handleDiffsWithMissingDiffInformation(\n   }\n \n   /**\n-   * Before running the {@link FilesystemValueChecker} ensure that all values marked for\n-   * invalidation have actually been invalidated (recall that invalidation happens at the beginning\n-   * of the next evaluate() call), because checking those is a waste of time.\n+   * Actually invalidates values marked for invalidation by a previous evaluation.\n+   *\n+   * <p>Invalidation is delayed because:\n+   *\n+   * <ul>\n+   *   <li>there may never be a next evaluation, so the work to clean up values may be wasted;\n+   *   <li>invalidated values may be resurrected due to change pruning.\n+   * </ul>\n    */\n-  protected final void invalidateValuesMarkedForInvalidation(ExtendedEventHandler eventHandler)\n+  public final void performDeferredInvalidation(ExtendedEventHandler eventHandler)",
        "comment_created_at": "2025-08-12T12:22:17+00:00",
        "comment_author": "justinhorvitz",
        "comment_body": "The name isn't perfect because it can be interpreted as performing invalidation in a deferred manner, rather than applying something that was previously deferred. How about `applyInvalidation`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2260329097",
    "pr_number": 26714,
    "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/PathFragment.java",
    "created_at": "2025-08-07T13:23:05+00:00",
    "commented_code": "public static final PathFragment EMPTY_FRAGMENT = new RelativePathFragment(\"\");\n \n   public static final char SEPARATOR_CHAR = '/';\n+\n+  /**\n+   * Compares two path fragments lexicographically as sequences of case-sensitive path segments. The\n+   * relative ordering of relative and absolute paths is unspecified.\n+   *\n+   * <p>The ordering imposed by this comparator differs from that of {@link\n+   * #compareTo(PathFragment)} as it sorts {@code foo/bar-baz/quz} after {@code foo/bar/quz} - it\n+   * has the property that the children of a path are sorted directly after their parent.\n+   *\n+   * <p>Note that the ordering imposed by this comparator is <em>not</em> consistent with equals if\n+   * applied to paths that differ only in case on Windows. Paths of artifacts in a single build are\n+   * known to not be affected by this as Bazel ensures that there is only a single artifact per\n+   * equivalence class of {@link PathFragment}.\n+   */\n+  // TODO(bazel-team): Consider making this the default comparator for PathFragment and revisit the\n+  //  choice to assume case sensitivity based on the host OS. Windows case sensitivity is\n+  //  configurable on a per-directory basis:\n+  //  https://learn.microsoft.com/en-us/windows/wsl/case-sensitivity\n+  public static final Comparator<PathFragment> CASE_SENSITIVE_SEGMENTS_COMPARATOR =",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2260329097",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26714,
        "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/PathFragment.java",
        "discussion_id": "2260329097",
        "commented_code": "@@ -59,6 +62,56 @@ public abstract sealed class PathFragment\n   public static final PathFragment EMPTY_FRAGMENT = new RelativePathFragment(\"\");\n \n   public static final char SEPARATOR_CHAR = '/';\n+\n+  /**\n+   * Compares two path fragments lexicographically as sequences of case-sensitive path segments. The\n+   * relative ordering of relative and absolute paths is unspecified.\n+   *\n+   * <p>The ordering imposed by this comparator differs from that of {@link\n+   * #compareTo(PathFragment)} as it sorts {@code foo/bar-baz/quz} after {@code foo/bar/quz} - it\n+   * has the property that the children of a path are sorted directly after their parent.\n+   *\n+   * <p>Note that the ordering imposed by this comparator is <em>not</em> consistent with equals if\n+   * applied to paths that differ only in case on Windows. Paths of artifacts in a single build are\n+   * known to not be affected by this as Bazel ensures that there is only a single artifact per\n+   * equivalence class of {@link PathFragment}.\n+   */\n+  // TODO(bazel-team): Consider making this the default comparator for PathFragment and revisit the\n+  //  choice to assume case sensitivity based on the host OS. Windows case sensitivity is\n+  //  configurable on a per-directory basis:\n+  //  https://learn.microsoft.com/en-us/windows/wsl/case-sensitivity\n+  public static final Comparator<PathFragment> CASE_SENSITIVE_SEGMENTS_COMPARATOR =",
        "comment_created_at": "2025-08-07T13:23:05+00:00",
        "comment_author": "tjgq",
        "comment_body": "Nit: this is a bit of a mouthful. I asked the friendly neighborhood LLM to suggest a single word to describe this, and it proposed \"hierarchical\". WDYT about just `HIERARCHICAL_COMPARATOR`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989988343",
    "pr_number": 25430,
    "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyResolver.java",
    "created_at": "2025-03-11T19:23:14+00:00",
    "commented_code": "if (fallbackStrategies.isEmpty()) {\n         String message =\n             String.format(\n-                \"%s spawn cannot be executed with any of the available strategies: %s. Your\"\n+                \"%s spawn%s cannot be executed with any of the available strategies: %s. Your\"\n                     + \" --spawn_strategy, --genrule_strategy and/or --strategy flags are probably\"\n                     + \" too strict. Visit https://github.com/bazelbuild/bazel/issues/7480 for\"\n                     + \" advice\",\n-                spawn.getMnemonic(), strategies);\n+                spawn.getMnemonic(),\n+                Spawns.requiresSandboxing(spawn) ? \", which requires sandboxing,\" : \"\",",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1989988343",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25430,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyResolver.java",
        "discussion_id": "1989988343",
        "commented_code": "@@ -86,11 +87,13 @@ public List<? extends SpawnStrategy> resolve(\n       if (fallbackStrategies.isEmpty()) {\n         String message =\n             String.format(\n-                \"%s spawn cannot be executed with any of the available strategies: %s. Your\"\n+                \"%s spawn%s cannot be executed with any of the available strategies: %s. Your\"\n                     + \" --spawn_strategy, --genrule_strategy and/or --strategy flags are probably\"\n                     + \" too strict. Visit https://github.com/bazelbuild/bazel/issues/7480 for\"\n                     + \" advice\",\n-                spawn.getMnemonic(), strategies);\n+                spawn.getMnemonic(),\n+                Spawns.requiresSandboxing(spawn) ? \", which requires sandboxing,\" : \"\",",
        "comment_created_at": "2025-03-11T19:23:14+00:00",
        "comment_author": "tjgq",
        "comment_body": "For your consideration: would it be better to write \"which requires sandboxing due to path mapping\" here, thus making the reason absolutely clear? (But then we should also rename `requiresSandboxing` to `requiresPathMapping`.)",
        "pr_file_module": null
      },
      {
        "comment_id": "1992990858",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25430,
        "pr_file": "src/main/java/com/google/devtools/build/lib/exec/SpawnStrategyResolver.java",
        "discussion_id": "1989988343",
        "commented_code": "@@ -86,11 +87,13 @@ public List<? extends SpawnStrategy> resolve(\n       if (fallbackStrategies.isEmpty()) {\n         String message =\n             String.format(\n-                \"%s spawn cannot be executed with any of the available strategies: %s. Your\"\n+                \"%s spawn%s cannot be executed with any of the available strategies: %s. Your\"\n                     + \" --spawn_strategy, --genrule_strategy and/or --strategy flags are probably\"\n                     + \" too strict. Visit https://github.com/bazelbuild/bazel/issues/7480 for\"\n                     + \" advice\",\n-                spawn.getMnemonic(), strategies);\n+                spawn.getMnemonic(),\n+                Spawns.requiresSandboxing(spawn) ? \", which requires sandboxing,\" : \"\",",
        "comment_created_at": "2025-03-13T08:15:42+00:00",
        "comment_author": "fmeum",
        "comment_body": "I agree that's better at this point, it can always be generalized later.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1690862456",
    "pr_number": 22218,
    "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/OsPathPolicy.java",
    "created_at": "2024-07-25T06:04:01+00:00",
    "commented_code": "boolean isCaseSensitive();\n \n-  // We *should* use a case-insensitive policy for OS.DARWIN, but we currently don't handle this.\n-  OsPathPolicy HOST_POLICY =\n-      OS.getCurrent() == OS.WINDOWS ? WindowsOsPathPolicy.INSTANCE : UnixOsPathPolicy.INSTANCE;\n+  OsPathPolicy HOST_POLICY = getFilePathOs(OS.getCurrent());",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1690862456",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22218,
        "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/OsPathPolicy.java",
        "discussion_id": "1690862456",
        "commented_code": "@@ -86,14 +86,23 @@ public interface OsPathPolicy {\n \n   boolean isCaseSensitive();\n \n-  // We *should* use a case-insensitive policy for OS.DARWIN, but we currently don't handle this.\n-  OsPathPolicy HOST_POLICY =\n-      OS.getCurrent() == OS.WINDOWS ? WindowsOsPathPolicy.INSTANCE : UnixOsPathPolicy.INSTANCE;\n+  OsPathPolicy HOST_POLICY = getFilePathOs(OS.getCurrent());",
        "comment_created_at": "2024-07-25T06:04:01+00:00",
        "comment_author": "lberki",
        "comment_body": "nit: `SERVER_POLICY`? (\"host\" is ambiguous, because it's also the old name for \"exec\")\r\n\r\nFor this reason, a comment would also be welcome.",
        "pr_file_module": null
      },
      {
        "comment_id": "1754414590",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22218,
        "pr_file": "src/main/java/com/google/devtools/build/lib/vfs/OsPathPolicy.java",
        "discussion_id": "1690862456",
        "commented_code": "@@ -86,14 +86,23 @@ public interface OsPathPolicy {\n \n   boolean isCaseSensitive();\n \n-  // We *should* use a case-insensitive policy for OS.DARWIN, but we currently don't handle this.\n-  OsPathPolicy HOST_POLICY =\n-      OS.getCurrent() == OS.WINDOWS ? WindowsOsPathPolicy.INSTANCE : UnixOsPathPolicy.INSTANCE;\n+  OsPathPolicy HOST_POLICY = getFilePathOs(OS.getCurrent());",
        "comment_created_at": "2024-09-11T12:52:13+00:00",
        "comment_author": "tjgq",
        "comment_body": "My understanding (per https://bazel.build/extending/platforms) is that we've retroactively redefined \"host\" to mean \"the platform Bazel runs on\" and introduced \"exec\" to mean \"the platform where an action executes\". The only reason it's ambiguous is that we haven't followed through in replacing \"host\" with \"exec\" everywhere it matters (notably, `--host_*` flags which should really be called `--exec_*`).\r\n\r\nA comment would be welcome, yes, but IMO we should stick to \"host\" or \"exec\" instead of introducing yet another term.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176309716",
    "pr_number": 26332,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/Registry.java",
    "created_at": "2025-07-01T02:51:22+00:00",
    "commented_code": "* by {@code key} should be materialized as a repo.\n    */\n   RepoSpec getRepoSpec(\n-      ModuleKey key, ExtendedEventHandler eventHandler, DownloadManager downloadManager)\n+      ModuleKey key,\n+      ImmutableMap<String, Optional<Checksum>> moduleFileRegistryHashes,",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2176309716",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26332,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/Registry.java",
        "discussion_id": "2176309716",
        "commented_code": "@@ -50,7 +51,10 @@ ModuleFile getModuleFile(\n    * by {@code key} should be materialized as a repo.\n    */\n   RepoSpec getRepoSpec(\n-      ModuleKey key, ExtendedEventHandler eventHandler, DownloadManager downloadManager)\n+      ModuleKey key,\n+      ImmutableMap<String, Optional<Checksum>> moduleFileRegistryHashes,",
        "comment_created_at": "2025-07-01T02:51:22+00:00",
        "comment_author": "Wyverald",
        "comment_body": "super-nit: `moduleFileHashes`? The current name suggests to me that the hashes are of registries, somehow.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2145297913",
    "pr_number": 26290,
    "pr_file": "src/test/java/com/google/devtools/build/lib/packages/NativeExistingRulesTest.java",
    "created_at": "2025-06-13T15:06:11+00:00",
    "commented_code": "// Parse the BUILD file, to make sure select() makes it out of native.existing_rule().\n     assertThat(getConfiguredTarget(\"//test/getrule:x\")).isNotNull();\n \n-    // We have to compare by stringification because SelectorValue has reference equality semantics.\n-    assertThat(getSaved(\"dep\").toString())\n-        .isEqualTo(\"select({\\\":config\\\": None, \\\"//conditions:default\\\": None})\");\n+    assertThat(getSaved(\"dep\"))",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2145297913",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26290,
        "pr_file": "src/test/java/com/google/devtools/build/lib/packages/NativeExistingRulesTest.java",
        "discussion_id": "2145297913",
        "commented_code": "@@ -143,9 +146,16 @@ def _impl(ctx):\n     // Parse the BUILD file, to make sure select() makes it out of native.existing_rule().\n     assertThat(getConfiguredTarget(\"//test/getrule:x\")).isNotNull();\n \n-    // We have to compare by stringification because SelectorValue has reference equality semantics.\n-    assertThat(getSaved(\"dep\").toString())\n-        .isEqualTo(\"select({\\\":config\\\": None, \\\"//conditions:default\\\": None})\");\n+    assertThat(getSaved(\"dep\"))",
        "comment_created_at": "2025-06-13T15:06:11+00:00",
        "comment_author": "fmeum",
        "comment_body": "@tetromino Note that the string representation of `Label` is currently misleading since it uses canonical and not unambiguous canonical labels. @Wyverald is working on a CL that fixes this, but in the meantime, I converted this to match on Java objects.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962806701",
    "pr_number": 24757,
    "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/BazelLockFileValue.java",
    "created_at": "2025-02-20T03:29:05+00:00",
    "commented_code": "import java.util.Optional;\n \n /**\n- * The result of reading the lockfile. Contains the lockfile version, module hash, definitions of\n- * module repositories, post-resolution dependency graph and module extensions data (ID, hash,\n- * definition, usages)\n+ * The result of reading a lockfile. Contains the lockfile version as well as registry and module\n+ * extensions data (ID, usages hash, generated repos, ...).\n+ *\n+ * <p>Bazel maintains two separate lockfiles:\n+ *\n+ * <ul>\n+ *   <li>the (regular) lockfile stored as MODULE.bazel.lock under the workspace directory;\n+ *   <li>the persistent lockfile stored as MODULE.bazel.lock under the output base.",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1962806701",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24757,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/BazelLockFileValue.java",
        "discussion_id": "1962806701",
        "commented_code": "@@ -26,9 +26,17 @@\n import java.util.Optional;\n \n /**\n- * The result of reading the lockfile. Contains the lockfile version, module hash, definitions of\n- * module repositories, post-resolution dependency graph and module extensions data (ID, hash,\n- * definition, usages)\n+ * The result of reading a lockfile. Contains the lockfile version as well as registry and module\n+ * extensions data (ID, usages hash, generated repos, ...).\n+ *\n+ * <p>Bazel maintains two separate lockfiles:\n+ *\n+ * <ul>\n+ *   <li>the (regular) lockfile stored as MODULE.bazel.lock under the workspace directory;\n+ *   <li>the persistent lockfile stored as MODULE.bazel.lock under the output base.",
        "comment_created_at": "2025-02-20T03:29:05+00:00",
        "comment_author": "Wyverald",
        "comment_body": "I find it a bit weird to call this one the \"persistent\" lockfile. If anything, it's usually _less_ \"persistent\" than the lockfile in the workspace, since it's not checked into VCS, and easily wiped by `bazel clean`.\r\n\r\nThis lockfile is generated only for reproducible extensions, right? Maybe \"reproducible lockfile\" (ok that's bad). Or, part of the whole point is that it's not user-visible. Maybe \"hidden lockfile\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "1964410861",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24757,
        "pr_file": "src/main/java/com/google/devtools/build/lib/bazel/bzlmod/BazelLockFileValue.java",
        "discussion_id": "1962806701",
        "commented_code": "@@ -26,9 +26,17 @@\n import java.util.Optional;\n \n /**\n- * The result of reading the lockfile. Contains the lockfile version, module hash, definitions of\n- * module repositories, post-resolution dependency graph and module extensions data (ID, hash,\n- * definition, usages)\n+ * The result of reading a lockfile. Contains the lockfile version as well as registry and module\n+ * extensions data (ID, usages hash, generated repos, ...).\n+ *\n+ * <p>Bazel maintains two separate lockfiles:\n+ *\n+ * <ul>\n+ *   <li>the (regular) lockfile stored as MODULE.bazel.lock under the workspace directory;\n+ *   <li>the persistent lockfile stored as MODULE.bazel.lock under the output base.",
        "comment_created_at": "2025-02-20T22:12:54+00:00",
        "comment_author": "fmeum",
        "comment_body": "It's only wiped out by a `bazel clean --expunge`, just like the persistent action cache (which I named this after). But I like \"hidden\" better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077486938",
    "pr_number": 25976,
    "pr_file": "src/main/java/com/google/devtools/build/lib/remote/RemoteOutputChecker.java",
    "created_at": "2025-05-07T12:12:32+00:00",
    "commented_code": "checkState(\n         !(output instanceof Artifact && ((Artifact) output).isTreeArtifact()),\n         \"shouldDownloadOutput should not be called on a tree artifact\");\n-    return metadata.isRemote() && shouldDownloadOutput(output.getExecPath());\n+    return metadata.isRemote()\n+        && shouldDownloadOutput(\n+            output.getExecPath(),\n+            output instanceof Artifact artifact && artifact.hasParent()\n+                ? artifact.getParent().getExecPath()\n+                : null);\n   }\n \n   /** Returns whether a remote {@link ActionInput} with the given path should be downloaded. */\n-  public boolean shouldDownloadOutput(PathFragment execPath) {\n+  public boolean shouldDownloadOutput(\n+      PathFragment execPath, @Nullable PathFragment parentExecPath) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2077486938",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25976,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/RemoteOutputChecker.java",
        "discussion_id": "2077486938",
        "commented_code": "@@ -281,14 +281,21 @@ public boolean shouldDownloadOutput(ActionInput output, FileArtifactValue metada\n     checkState(\n         !(output instanceof Artifact && ((Artifact) output).isTreeArtifact()),\n         \"shouldDownloadOutput should not be called on a tree artifact\");\n-    return metadata.isRemote() && shouldDownloadOutput(output.getExecPath());\n+    return metadata.isRemote()\n+        && shouldDownloadOutput(\n+            output.getExecPath(),\n+            output instanceof Artifact artifact && artifact.hasParent()\n+                ? artifact.getParent().getExecPath()\n+                : null);\n   }\n \n   /** Returns whether a remote {@link ActionInput} with the given path should be downloaded. */\n-  public boolean shouldDownloadOutput(PathFragment execPath) {\n+  public boolean shouldDownloadOutput(\n+      PathFragment execPath, @Nullable PathFragment parentExecPath) {",
        "comment_created_at": "2025-05-07T12:12:32+00:00",
        "comment_author": "tjgq",
        "comment_body": "Can you rebase and document the `parentExecPath` in the `OutputChecker` interface (added after you sent this PR)?\r\n\r\nYou might also want to call it `treeRootExecPath` - I know `Artifact.getParent()` is prior art, but the name is a bit misleading, as the tree artifact root isn't necessarily the immediate parent directory.",
        "pr_file_module": null
      },
      {
        "comment_id": "2078024170",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 25976,
        "pr_file": "src/main/java/com/google/devtools/build/lib/remote/RemoteOutputChecker.java",
        "discussion_id": "2077486938",
        "commented_code": "@@ -281,14 +281,21 @@ public boolean shouldDownloadOutput(ActionInput output, FileArtifactValue metada\n     checkState(\n         !(output instanceof Artifact && ((Artifact) output).isTreeArtifact()),\n         \"shouldDownloadOutput should not be called on a tree artifact\");\n-    return metadata.isRemote() && shouldDownloadOutput(output.getExecPath());\n+    return metadata.isRemote()\n+        && shouldDownloadOutput(\n+            output.getExecPath(),\n+            output instanceof Artifact artifact && artifact.hasParent()\n+                ? artifact.getParent().getExecPath()\n+                : null);\n   }\n \n   /** Returns whether a remote {@link ActionInput} with the given path should be downloaded. */\n-  public boolean shouldDownloadOutput(PathFragment execPath) {\n+  public boolean shouldDownloadOutput(\n+      PathFragment execPath, @Nullable PathFragment parentExecPath) {",
        "comment_created_at": "2025-05-07T16:22:18+00:00",
        "comment_author": "fmeum",
        "comment_body": "The parameter doesn't exist on the interface, but I added docs to `RemoteOutputChecker`. Let me know if that's not what you meant.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "846086705",
    "pr_number": 14470,
    "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/BuildSummaryStatsModule.java",
    "created_at": "2022-04-08T12:59:23+00:00",
    "commented_code": "private long executionEndMillis;\n   private SpawnStats spawnStats;\n   private Path profilePath;\n+  private static final long UNKNOWN = -1;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "846086705",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 14470,
        "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/BuildSummaryStatsModule.java",
        "discussion_id": "846086705",
        "commented_code": "@@ -60,6 +63,10 @@\n   private long executionEndMillis;\n   private SpawnStats spawnStats;\n   private Path profilePath;\n+  private static final long UNKNOWN = -1;",
        "comment_created_at": "2022-04-08T12:59:23+00:00",
        "comment_author": "larsrc-google",
        "comment_body": "Could you rename this to \"UNKNOWN_CPU_TIME\" to be a bit clearer?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "846092779",
    "pr_number": 14470,
    "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/BuildSummaryStatsModule.java",
    "created_at": "2022-04-08T13:06:46+00:00",
    "commented_code": "criticalPathComputer = null;\n       }\n       profilePath = null;\n+      cpuUserTimeForActions = 0;\n+      cpuSystemTimeForActions = 0;\n+      cpuTimeForBazelJvm = UNKNOWN;\n+    }\n+  }\n+\n+  private static String formatCpuTime(long milliseconds) {\n+    if (milliseconds == UNKNOWN) {\n+      return \"???s\";\n+    } else {\n+      return String.format(\"%.2fs\", milliseconds / 1000.0);\n+    }\n+  }\n+\n+  private static long sumCpuTimes(long a, long b, long c) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "846092779",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 14470,
        "pr_file": "src/main/java/com/google/devtools/build/lib/runtime/BuildSummaryStatsModule.java",
        "discussion_id": "846092779",
        "commented_code": "@@ -206,6 +237,25 @@ public void buildComplete(BuildCompleteEvent event) {\n         criticalPathComputer = null;\n       }\n       profilePath = null;\n+      cpuUserTimeForActions = 0;\n+      cpuSystemTimeForActions = 0;\n+      cpuTimeForBazelJvm = UNKNOWN;\n+    }\n+  }\n+\n+  private static String formatCpuTime(long milliseconds) {\n+    if (milliseconds == UNKNOWN) {\n+      return \"???s\";\n+    } else {\n+      return String.format(\"%.2fs\", milliseconds / 1000.0);\n+    }\n+  }\n+\n+  private static long sumCpuTimes(long a, long b, long c) {",
        "comment_created_at": "2022-04-08T13:06:46+00:00",
        "comment_author": "larsrc-google",
        "comment_body": "Since you're hardcoding this to three parameters, you might as well name them with what kinds of CPU times they are.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1926030252",
    "pr_number": 24944,
    "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeUtil.java",
    "created_at": "2025-01-22T21:54:41+00:00",
    "commented_code": null,
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1926030252",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24944,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/SkyframeUtil.java",
        "discussion_id": "1926030252",
        "commented_code": null,
        "comment_created_at": "2025-01-22T21:54:41+00:00",
        "comment_author": "tetromino",
        "comment_body": "Nit: rename to StarlarkUtil or similar (the name SkyframeUtil suggests that it's the one and only location for skyframe's helper functions, but there are already many other *Util and *Utils classes in build/lib/skyframe).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1819151609",
    "pr_number": 24010,
    "pr_file": "src/main/java/com/google/devtools/build/lib/query2/aquery/ActionGraphTextOutputFormatterCallback.java",
    "created_at": "2024-10-28T14:15:51+00:00",
    "commented_code": "return maybeUtf8;\n     }\n \n-    final String decoded = reencodeInternalToExternal(maybeUtf8);\n+    final String decoded = internalToUnicode(maybeUtf8);",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1819151609",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24010,
        "pr_file": "src/main/java/com/google/devtools/build/lib/query2/aquery/ActionGraphTextOutputFormatterCallback.java",
        "discussion_id": "1819151609",
        "commented_code": "@@ -366,7 +366,7 @@ public static String escapeBytestringUtf8(String maybeUtf8) {\n       return maybeUtf8;\n     }\n \n-    final String decoded = reencodeInternalToExternal(maybeUtf8);\n+    final String decoded = internalToUnicode(maybeUtf8);",
        "comment_created_at": "2024-10-28T14:15:51+00:00",
        "comment_author": "tjgq",
        "comment_body": "Let's make the docstring and the variable name less vague: with the benefit of now-established terminology, instead of \"maybe UTF-8\" we can simply write \"internal\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823389206",
    "pr_number": 24032,
    "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/PackageArgsFunction.java",
    "created_at": "2024-10-30T21:03:11+00:00",
    "commented_code": "+// Copyright 2024 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.skyframe;\n+\n+import com.google.devtools.build.lib.cmdline.PackageIdentifier;\n+import com.google.devtools.build.lib.cmdline.RepositoryName;\n+import com.google.devtools.build.lib.events.Event;\n+import com.google.devtools.build.lib.packages.LabelConverter;\n+import com.google.devtools.build.lib.packages.PackageArgs;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.BadRepoFileException;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.RepoFileFunctionException;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.skyframe.AbstractSkyKey;\n+import com.google.devtools.build.skyframe.SkyFunction;\n+import com.google.devtools.build.skyframe.SkyFunctionException;\n+import com.google.devtools.build.skyframe.SkyFunctionName;\n+import com.google.devtools.build.skyframe.SkyKey;\n+import com.google.devtools.build.skyframe.SkyValue;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import net.starlark.java.eval.EvalException;\n+\n+/** A @{link SkyFunction} that returns the {@link PackageArgs} for a given repository. */\n+public class PackageArgsFunction implements SkyFunction {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1823389206",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24032,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/PackageArgsFunction.java",
        "discussion_id": "1823389206",
        "commented_code": "@@ -0,0 +1,124 @@\n+// Copyright 2024 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.skyframe;\n+\n+import com.google.devtools.build.lib.cmdline.PackageIdentifier;\n+import com.google.devtools.build.lib.cmdline.RepositoryName;\n+import com.google.devtools.build.lib.events.Event;\n+import com.google.devtools.build.lib.packages.LabelConverter;\n+import com.google.devtools.build.lib.packages.PackageArgs;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.BadRepoFileException;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.RepoFileFunctionException;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.skyframe.AbstractSkyKey;\n+import com.google.devtools.build.skyframe.SkyFunction;\n+import com.google.devtools.build.skyframe.SkyFunctionException;\n+import com.google.devtools.build.skyframe.SkyFunctionName;\n+import com.google.devtools.build.skyframe.SkyKey;\n+import com.google.devtools.build.skyframe.SkyValue;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import net.starlark.java.eval.EvalException;\n+\n+/** A @{link SkyFunction} that returns the {@link PackageArgs} for a given repository. */\n+public class PackageArgsFunction implements SkyFunction {",
        "comment_created_at": "2024-10-30T21:03:11+00:00",
        "comment_author": "Wyverald",
        "comment_body": "This should probably be `RepoPackageArgsFunction`. `PackageArgs` is just the arguments to a `package()` or `repo()` call.",
        "pr_file_module": null
      },
      {
        "comment_id": "1823906556",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24032,
        "pr_file": "src/main/java/com/google/devtools/build/lib/skyframe/PackageArgsFunction.java",
        "discussion_id": "1823389206",
        "commented_code": "@@ -0,0 +1,124 @@\n+// Copyright 2024 The Bazel Authors. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.devtools.build.lib.skyframe;\n+\n+import com.google.devtools.build.lib.cmdline.PackageIdentifier;\n+import com.google.devtools.build.lib.cmdline.RepositoryName;\n+import com.google.devtools.build.lib.events.Event;\n+import com.google.devtools.build.lib.packages.LabelConverter;\n+import com.google.devtools.build.lib.packages.PackageArgs;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.BadRepoFileException;\n+import com.google.devtools.build.lib.skyframe.RepoFileFunction.RepoFileFunctionException;\n+import com.google.devtools.build.lib.vfs.PathFragment;\n+import com.google.devtools.build.skyframe.AbstractSkyKey;\n+import com.google.devtools.build.skyframe.SkyFunction;\n+import com.google.devtools.build.skyframe.SkyFunctionException;\n+import com.google.devtools.build.skyframe.SkyFunctionName;\n+import com.google.devtools.build.skyframe.SkyKey;\n+import com.google.devtools.build.skyframe.SkyValue;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import net.starlark.java.eval.EvalException;\n+\n+/** A @{link SkyFunction} that returns the {@link PackageArgs} for a given repository. */\n+public class PackageArgsFunction implements SkyFunction {",
        "comment_created_at": "2024-10-31T07:15:21+00:00",
        "comment_author": "lberki",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  }
]