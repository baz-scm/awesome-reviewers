[
  {
    "discussion_id": "1198162141",
    "pr_number": 18437,
    "pr_file": "third_party/googleapis/google/devtools/build/v1/publish_build_event.proto",
    "created_at": "2023-05-18T18:32:51+00:00",
    "commented_code": "// request. BES only performs this check for events with sequence_number 1\n   // i.e. the first event in the stream.\n   bool check_preceding_lifecycle_events_present = 7;\n+\n+  // The number of retry attempts has been made to publish the unique event.\n+  // Starts from 0.\n+  int32 retry_attempt = 8;",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1198162141",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 18437,
        "pr_file": "third_party/googleapis/google/devtools/build/v1/publish_build_event.proto",
        "discussion_id": "1198162141",
        "commented_code": "@@ -184,4 +184,8 @@ message PublishBuildToolEventStreamRequest {\n   // request. BES only performs this check for events with sequence_number 1\n   // i.e. the first event in the stream.\n   bool check_preceding_lifecycle_events_present = 7;\n+\n+  // The number of retry attempts has been made to publish the unique event.\n+  // Starts from 0.\n+  int32 retry_attempt = 8;",
        "comment_created_at": "2023-05-18T18:32:51+00:00",
        "comment_author": "bduffany",
        "comment_body": "I think this should be `attempt_number` and start from 1 so that the server can distinguish between \"this is the first attempt\" and \"this is an old version of bazel that doesn't support this field\", which are currently both represented as 0.",
        "pr_file_module": null
      },
      {
        "comment_id": "1200940836",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 18437,
        "pr_file": "third_party/googleapis/google/devtools/build/v1/publish_build_event.proto",
        "discussion_id": "1198162141",
        "commented_code": "@@ -184,4 +184,8 @@ message PublishBuildToolEventStreamRequest {\n   // request. BES only performs this check for events with sequence_number 1\n   // i.e. the first event in the stream.\n   bool check_preceding_lifecycle_events_present = 7;\n+\n+  // The number of retry attempts has been made to publish the unique event.\n+  // Starts from 0.\n+  int32 retry_attempt = 8;",
        "comment_created_at": "2023-05-22T19:19:23+00:00",
        "comment_author": "michaeledgar",
        "comment_body": "I agree with starting the value at 1. For naming, I'd go a bit further and name the field `stream_attempt_number` to match the description I suggest above.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1627580853",
    "pr_number": 22591,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
    "created_at": "2024-06-05T11:33:56+00:00",
    "commented_code": "CLIF_INPUT_PROTO = [\".ipb\"]\n CLIF_OUTPUT_PROTO = [\".opb\"]\n CC_HEADER = [\".h\", \".hh\", \".hpp\", \".ipp\", \".hxx\", \".h++\", \".inc\", \".inl\", \".tlh\", \".tli\", \".H\", \".tcc\"]\n-ASSESMBLER_WITH_C_PREPROCESSOR = [\".S\"]\n+ASSEMBLER_WITH_C_PREPROCESSOR = [\".S\"]",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1627580853",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22591,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
        "discussion_id": "1627580853",
        "commented_code": "@@ -346,7 +346,7 @@ OBJCPP_SOURCE = [\".mm\"]\n CLIF_INPUT_PROTO = [\".ipb\"]\n CLIF_OUTPUT_PROTO = [\".opb\"]\n CC_HEADER = [\".h\", \".hh\", \".hpp\", \".ipp\", \".hxx\", \".h++\", \".inc\", \".inl\", \".tlh\", \".tli\", \".H\", \".tcc\"]\n-ASSESMBLER_WITH_C_PREPROCESSOR = [\".S\"]\n+ASSEMBLER_WITH_C_PREPROCESSOR = [\".S\"]",
        "comment_created_at": "2024-06-05T11:33:56+00:00",
        "comment_author": "pzembrod",
        "comment_body": "There's a Google-internal reference to this symbol in Piper that needs to be updated after the next blaze release.\r\nCould you please keep the old name as a duplicate here, along with the new name, and add this comment for me to track the cleanup?\r\nTODO(b/345158656): Remove ASSESMBLER_WITH_C_PREPROCESSOR after next blaze release",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844530985",
    "pr_number": 24344,
    "pr_file": "src/main/cpp/blaze.cc",
    "created_at": "2024-11-15T21:32:26+00:00",
    "commented_code": "// The time in ms a command had to wait on a busy Blaze server process.\n   // This is part of startup_time.\n-  if (command_wait_duration_ms.IsUnknown()) {\n+  if (!command_wait_duration_ms.IsUnknown()) {",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1844530985",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24344,
        "pr_file": "src/main/cpp/blaze.cc",
        "discussion_id": "1844530985",
        "commented_code": "@@ -557,14 +557,14 @@ static void AddLoggingArgs(const LoggingInfo &logging_info,\n \n   // The time in ms a command had to wait on a busy Blaze server process.\n   // This is part of startup_time.\n-  if (command_wait_duration_ms.IsUnknown()) {\n+  if (!command_wait_duration_ms.IsUnknown()) {",
        "comment_created_at": "2024-11-15T21:32:26+00:00",
        "comment_author": "tjgq",
        "comment_body": "In the spirit of avoiding double negatives (which I suspect might have contributed to the bug) can we call the method `IsKnown()` instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "1844541806",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 24344,
        "pr_file": "src/main/cpp/blaze.cc",
        "discussion_id": "1844530985",
        "commented_code": "@@ -557,14 +557,14 @@ static void AddLoggingArgs(const LoggingInfo &logging_info,\n \n   // The time in ms a command had to wait on a busy Blaze server process.\n   // This is part of startup_time.\n-  if (command_wait_duration_ms.IsUnknown()) {\n+  if (!command_wait_duration_ms.IsUnknown()) {",
        "comment_created_at": "2024-11-15T21:40:25+00:00",
        "comment_author": "tjgq",
        "comment_body": "Thinking some more about it: if the only consequence of `IsUnknown()` is that we don't set a `--command_wait_time` flag, why not set it to 0 in that case? The flags library can't distinguish between 0 and unset anyway.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1710268209",
    "pr_number": 23238,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
    "created_at": "2024-08-08T20:40:16+00:00",
    "commented_code": "and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n+<p>Using the functionality defined by the <code>runfiles_src.h</code> located under \n+   <code>tools/cpp/runfiles/runfiles_src.h</code> Your C++ code can access these data files,",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1710268209",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23238,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
        "discussion_id": "1710268209",
        "commented_code": "@@ -119,10 +119,36 @@ most build rules</a>.\n    and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n+<p>Using the functionality defined by the <code>runfiles_src.h</code> located under \n+   <code>tools/cpp/runfiles/runfiles_src.h</code> Your C++ code can access these data files,",
        "comment_created_at": "2024-08-08T20:40:16+00:00",
        "comment_author": "fmeum",
        "comment_body": "Drop `_src`, that suffix is only there before packaging.\n\nPlease also mention the target under `@bazel_tools` that provides this header.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741158221",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 23238,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/attrs.bzl",
        "discussion_id": "1710268209",
        "commented_code": "@@ -119,10 +119,36 @@ most build rules</a>.\n    and that rule's <code>outs</code> are automatically added to\n    this <code>cc_library</code>'s data files.\n </p>\n-<p>Your C++ code can access these data files like so:</p>\n+<p>Using the functionality defined by the <code>runfiles_src.h</code> located under \n+   <code>tools/cpp/runfiles/runfiles_src.h</code> Your C++ code can access these data files,",
        "comment_created_at": "2024-09-02T17:58:35+00:00",
        "comment_author": "pat-jpnk",
        "comment_body": "Added changes, are they correct?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1088825858",
    "pr_number": 16100,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
    "created_at": "2023-01-27T10:54:35+00:00",
    "commented_code": "return True\n     return False\n \n+def _is_versioned_shared_library_extension_valid(shared_library_name):",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1088825858",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 16100,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
        "discussion_id": "1088825858",
        "commented_code": "@@ -532,6 +532,9 @@ def _is_versioned_shared_library_extension_valid(shared_library_name):\n             return True\n     return False\n \n+def _is_versioned_shared_library_extension_valid(shared_library_name):",
        "comment_created_at": "2023-01-27T10:54:35+00:00",
        "comment_author": "buildbreaker2021",
        "comment_body": "Instead of adding this, could we rename _is_versioned_shared_library_extension_valid to _is_versioned_library_extension_valid and do a minor refactoring in cc_helper.bzl? _is_versioned_shared_library_extension_valid is private and not exported so it should just touch one file.",
        "pr_file_module": null
      }
    ]
  }
]