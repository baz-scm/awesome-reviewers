[
  {
    "discussion_id": "2279125040",
    "pr_number": 22553,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/compile.bzl",
    "created_at": "2025-08-15T14:45:56+00:00",
    "commented_code": "if not generate_pic_action and not generate_no_pic_action:\n         fail(\"Either PIC or no PIC actions have to be created.\")\n \n+    if len(module_interfaces) > 0 and not feature_configuration.is_enabled(\"cpp_modules\"):",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2279125040",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22553,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/compile.bzl",
        "discussion_id": "2279125040",
        "commented_code": "@@ -211,6 +212,9 @@ def compile(\n     if not generate_pic_action and not generate_no_pic_action:\n         fail(\"Either PIC or no PIC actions have to be created.\")\n \n+    if len(module_interfaces) > 0 and not feature_configuration.is_enabled(\"cpp_modules\"):",
        "comment_created_at": "2025-08-15T14:45:56+00:00",
        "comment_author": "fmeum",
        "comment_body": "```suggestion\r\n    if module_interfaces and not feature_configuration.is_enabled(\"cpp_modules\"):\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2281974192",
    "pr_number": 22553,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/compile.bzl",
    "created_at": "2025-08-18T10:21:00+00:00",
    "commented_code": "native_cc_semantics = cc_common_internal.get_cpp_semantics(language = language)\n \n+    # If C++20 modules are enabled and module interface sources are provided, delegate\n+    # to the module-aware implementation and return early.\n+    if module_interfaces_sources and feature_configuration.is_enabled(\"cpp_modules\"):\n+        _create_cc_compile_actions_with_cpp20_module(\n+            actions = actions,\n+            action_construction_context = action_construction_context,\n+            additional_compilation_inputs = additional_compilation_inputs,\n+            additional_include_scanning_roots = additional_include_scanning_roots,\n+            cc_compilation_context = cc_compilation_context,\n+            cc_toolchain = cc_toolchain,\n+            compilation_unit_sources = compilation_unit_sources,\n+            module_interfaces_sources = module_interfaces_sources,\n+            configuration = configuration,\n+            conlyopts = conlyopts,\n+            copts = copts,\n+            copts_filter = copts_filter,\n+            cpp_configuration = cpp_configuration,\n+            cxxopts = cxxopts,\n+            fdo_context = fdo_context,\n+            feature_configuration = feature_configuration,\n+            generate_no_pic_action = generate_no_pic_action,\n+            generate_pic_action = generate_pic_action,\n+            is_code_coverage_enabled = is_code_coverage_enabled,\n+            label = label,\n+            private_headers = private_headers,\n+            public_headers = public_headers,\n+            purpose = purpose,\n+            language = language,\n+            outputs = outputs,\n+            common_compile_build_variables = common_compile_build_variables,\n+            auxiliary_fdo_inputs = auxiliary_fdo_inputs,\n+            fdo_build_variables = fdo_build_variables,\n+        )\n+        return\n+\n     if _should_provide_header_modules(feature_configuration, private_headers, public_headers):",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2281974192",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22553,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/compile.bzl",
        "discussion_id": "2281974192",
        "commented_code": "@@ -477,6 +1076,41 @@ def _create_cc_compile_actions(\n \n     native_cc_semantics = cc_common_internal.get_cpp_semantics(language = language)\n \n+    # If C++20 modules are enabled and module interface sources are provided, delegate\n+    # to the module-aware implementation and return early.\n+    if module_interfaces_sources and feature_configuration.is_enabled(\"cpp_modules\"):\n+        _create_cc_compile_actions_with_cpp20_module(\n+            actions = actions,\n+            action_construction_context = action_construction_context,\n+            additional_compilation_inputs = additional_compilation_inputs,\n+            additional_include_scanning_roots = additional_include_scanning_roots,\n+            cc_compilation_context = cc_compilation_context,\n+            cc_toolchain = cc_toolchain,\n+            compilation_unit_sources = compilation_unit_sources,\n+            module_interfaces_sources = module_interfaces_sources,\n+            configuration = configuration,\n+            conlyopts = conlyopts,\n+            copts = copts,\n+            copts_filter = copts_filter,\n+            cpp_configuration = cpp_configuration,\n+            cxxopts = cxxopts,\n+            fdo_context = fdo_context,\n+            feature_configuration = feature_configuration,\n+            generate_no_pic_action = generate_no_pic_action,\n+            generate_pic_action = generate_pic_action,\n+            is_code_coverage_enabled = is_code_coverage_enabled,\n+            label = label,\n+            private_headers = private_headers,\n+            public_headers = public_headers,\n+            purpose = purpose,\n+            language = language,\n+            outputs = outputs,\n+            common_compile_build_variables = common_compile_build_variables,\n+            auxiliary_fdo_inputs = auxiliary_fdo_inputs,\n+            fdo_build_variables = fdo_build_variables,\n+        )\n+        return\n+\n     if _should_provide_header_modules(feature_configuration, private_headers, public_headers):",
        "comment_created_at": "2025-08-18T10:21:00+00:00",
        "comment_author": "fmeum",
        "comment_body": "I guess this won't be supported when combined with C++ 20 modules? Could you add an appropriate `fail` to the `if` above so that users don't end up mixing both types of modules?",
        "pr_file_module": null
      },
      {
        "comment_id": "2282183410",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 22553,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/compile.bzl",
        "discussion_id": "2281974192",
        "commented_code": "@@ -477,6 +1076,41 @@ def _create_cc_compile_actions(\n \n     native_cc_semantics = cc_common_internal.get_cpp_semantics(language = language)\n \n+    # If C++20 modules are enabled and module interface sources are provided, delegate\n+    # to the module-aware implementation and return early.\n+    if module_interfaces_sources and feature_configuration.is_enabled(\"cpp_modules\"):\n+        _create_cc_compile_actions_with_cpp20_module(\n+            actions = actions,\n+            action_construction_context = action_construction_context,\n+            additional_compilation_inputs = additional_compilation_inputs,\n+            additional_include_scanning_roots = additional_include_scanning_roots,\n+            cc_compilation_context = cc_compilation_context,\n+            cc_toolchain = cc_toolchain,\n+            compilation_unit_sources = compilation_unit_sources,\n+            module_interfaces_sources = module_interfaces_sources,\n+            configuration = configuration,\n+            conlyopts = conlyopts,\n+            copts = copts,\n+            copts_filter = copts_filter,\n+            cpp_configuration = cpp_configuration,\n+            cxxopts = cxxopts,\n+            fdo_context = fdo_context,\n+            feature_configuration = feature_configuration,\n+            generate_no_pic_action = generate_no_pic_action,\n+            generate_pic_action = generate_pic_action,\n+            is_code_coverage_enabled = is_code_coverage_enabled,\n+            label = label,\n+            private_headers = private_headers,\n+            public_headers = public_headers,\n+            purpose = purpose,\n+            language = language,\n+            outputs = outputs,\n+            common_compile_build_variables = common_compile_build_variables,\n+            auxiliary_fdo_inputs = auxiliary_fdo_inputs,\n+            fdo_build_variables = fdo_build_variables,\n+        )\n+        return\n+\n     if _should_provide_header_modules(feature_configuration, private_headers, public_headers):",
        "comment_created_at": "2025-08-18T11:53:54+00:00",
        "comment_author": "PikachuHyA",
        "comment_body": "If C++20 modules are enabled, the code should always invoke `_create_cc_compile_actions_with_cpp20_module`. The original condition was incorrect: it required `module_interfaces_sources` to be truthy, so when that list was empty the modules path was skipped even though the feature was enabled.\r\n\r\nthe old code\r\n```\r\nif module_interfaces_sources and feature_configuration.is_enabled(\"cpp_modules\"):\r\n  _create_cc_compile_actions_with_cpp20_module(...)\r\n  return\r\n```\r\n\r\nthe new code\r\n```\r\nif feature_configuration.is_enabled(\"cpp_modules\"):\r\n   _create_cc_compile_actions_with_cpp20_module(...)\r\n   return\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073915024",
    "pr_number": 26005,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
    "created_at": "2025-05-05T17:57:23+00:00",
    "commented_code": "cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "2073915024",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26005,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
        "discussion_id": "2073915024",
        "commented_code": "@@ -21,7 +21,7 @@ load(\":common/paths.bzl\", \"paths\")\n \n cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
        "comment_created_at": "2025-05-05T17:57:23+00:00",
        "comment_author": "trybka",
        "comment_body": "ISTM the important piece is hashing the potentially long set of path fragments that could accumulate.\r\n\r\nSaving 11 chars on the constant piece is hopefully less relevant?\r\n\r\n`inc` is clear enough, I suppose... maybe this could be `\"_virtual_inc\"` for everything, and then use a feature to control the hashing of path fragments, optionally? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2074030621",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26005,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
        "discussion_id": "2073915024",
        "commented_code": "@@ -21,7 +21,7 @@ load(\":common/paths.bzl\", \"paths\")\n \n cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
        "comment_created_at": "2025-05-05T19:10:54+00:00",
        "comment_author": "fmeum",
        "comment_body": "I only rarely work on Windows builds, but even I got into situations where every single character counts. What do you think of also gating this abbreviation behind the new feature and giving it a more generic name that doesn't promise a particular scheme, say `shorten_virtual_includes`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2074042255",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26005,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
        "discussion_id": "2073915024",
        "commented_code": "@@ -21,7 +21,7 @@ load(\":common/paths.bzl\", \"paths\")\n \n cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
        "comment_created_at": "2025-05-05T19:19:01+00:00",
        "comment_author": "trybka",
        "comment_body": "I'll defer to folks who have more MSVC experience than I do. I mostly work with `clang-cl` for windows builds.\r\n\r\nI would certainly prefer to keep the more descriptive root when path length is not an issue (i.e. gate it behind a common feature as you suggest)",
        "pr_file_module": null
      },
      {
        "comment_id": "2075131714",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26005,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
        "discussion_id": "2073915024",
        "commented_code": "@@ -21,7 +21,7 @@ load(\":common/paths.bzl\", \"paths\")\n \n cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
        "comment_created_at": "2025-05-06T09:56:40+00:00",
        "comment_author": "meteorcloudy",
        "comment_body": "> Saving 11 chars on the constant piece is hopefully less relevant?\r\n\r\nThe path length limit for MSVC is 260, 11 chars is almost 4% of that, I would say every char is precious on windows unfortunately.\r\n\r\nI really like the `shorten_virtual_includes` idea, will give it a try.",
        "pr_file_module": null
      },
      {
        "comment_id": "2200680359",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 26005,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/compile/cc_compilation_helper.bzl",
        "discussion_id": "2073915024",
        "commented_code": "@@ -21,7 +21,7 @@ load(\":common/paths.bzl\", \"paths\")\n \n cc_internal = _builtins.internal.cc_internal\n \n-_VIRTUAL_INCLUDES_DIR = \"_virtual_includes\"\n+_VIRTUAL_INCLUDES_DIR = \"_v_inc\"",
        "comment_created_at": "2025-07-11T13:04:03+00:00",
        "comment_author": "meteorcloudy",
        "comment_body": "Re-implementing this with cc feature in https://github.com/bazelbuild/bazel/pull/26528",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1608096645",
    "pr_number": 19940,
    "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
    "created_at": "2024-05-21T10:44:29+00:00",
    "commented_code": "cc_common.is_enabled(feature_configuration = feature_configuration, feature_name = \"prefer_pic_for_opt_binaries\")\n         )\n     )\n+def _check_cpp20_module(ctx, feature_configuration):\n+    if len(ctx.files.module_interfaces) > 0 and not cc_common.is_enabled(\n+        feature_configuration = feature_configuration,\n+        feature_name = \"cpp20_module\",\n+    ):\n+        fail(\"to use C++20 Modules, the feature cpp20_module must be enabled\")",
    "repo_full_name": "bazelbuild/bazel",
    "discussion_comments": [
      {
        "comment_id": "1608096645",
        "repo_full_name": "bazelbuild/bazel",
        "pr_number": 19940,
        "pr_file": "src/main/starlark/builtins_bzl/common/cc/cc_helper.bzl",
        "discussion_id": "1608096645",
        "commented_code": "@@ -1175,6 +1205,12 @@ def _should_use_pic(ctx, cc_toolchain, feature_configuration):\n             cc_common.is_enabled(feature_configuration = feature_configuration, feature_name = \"prefer_pic_for_opt_binaries\")\n         )\n     )\n+def _check_cpp20_module(ctx, feature_configuration):\n+    if len(ctx.files.module_interfaces) > 0 and not cc_common.is_enabled(\n+        feature_configuration = feature_configuration,\n+        feature_name = \"cpp20_module\",\n+    ):\n+        fail(\"to use C++20 Modules, the feature cpp20_module must be enabled\")",
        "comment_created_at": "2024-05-21T10:44:29+00:00",
        "comment_author": "mathstuf",
        "comment_body": "If it is enabled, I recommend warning that an experimental feature is enabled (assuming it is not done through existing `features` infrastructure).",
        "pr_file_module": null
      }
    ]
  }
]