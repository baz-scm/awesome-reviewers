[
  {
    "discussion_id": "2302785478",
    "pr_number": 4123,
    "pr_file": "packages/better-auth/src/test-utils/test-instance.ts",
    "created_at": "2025-08-27T04:08:43+00:00",
    "commented_code": "const client = createAuthClient({\n \t\t...(config?.clientOptions as C extends undefined ? {} : C),\n+\t\tplugins: [\n+\t\t\tbearerClient(),",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2302785478",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 4123,
        "pr_file": "packages/better-auth/src/test-utils/test-instance.ts",
        "discussion_id": "2302785478",
        "commented_code": "@@ -247,6 +248,10 @@ export async function getTestInstance<\n \n \tconst client = createAuthClient({\n \t\t...(config?.clientOptions as C extends undefined ? {} : C),\n+\t\tplugins: [\n+\t\t\tbearerClient(),",
        "comment_created_at": "2025-08-27T04:08:43+00:00",
        "comment_author": "himself65",
        "comment_body": "Don't put this into the top level. And you changed the top-level property, but no new test was added. Which means this plugin didn't affect anything. Could you add some tests for the bearer token?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2302444352",
    "pr_number": 4237,
    "pr_file": "packages/better-auth/src/adapters/create-adapter/test/create-adapter.test.ts",
    "created_at": "2025-08-27T00:07:08+00:00",
    "commented_code": "expect(createFALSEParameters.data.emailVerified).toBe(0);\n \t\t\t});\n \n+\t\t\ttest(\"Should modify string[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to string[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"string[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [\"medium\", \"large\"] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\n+\t\t\t\t\t'[\\\"medium\\\",\\\"large\\\"]',\n+\t\t\t\t);\n+\t\t\t});\n+\n+\t\t\ttest(\"Should modify number[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to number[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"number[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [6, 7] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\"[6,7]\");",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2302444352",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 4237,
        "pr_file": "packages/better-auth/src/adapters/create-adapter/test/create-adapter.test.ts",
        "discussion_id": "2302444352",
        "commented_code": "@@ -379,6 +379,82 @@ describe(\"Create Adapter Helper\", async () => {\n \t\t\t\texpect(createFALSEParameters.data.emailVerified).toBe(0);\n \t\t\t});\n \n+\t\t\ttest(\"Should modify string[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to string[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"string[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [\"medium\", \"large\"] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\n+\t\t\t\t\t'[\\\"medium\\\",\\\"large\\\"]',\n+\t\t\t\t);\n+\t\t\t});\n+\n+\t\t\ttest(\"Should modify number[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to number[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"number[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [6, 7] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\"[6,7]\");",
        "comment_created_at": "2025-08-27T00:07:08+00:00",
        "comment_author": "Bekacru",
        "comment_body": "can we have tests for retrieving the data through the plugin to check if it's being parsed properly",
        "pr_file_module": null
      },
      {
        "comment_id": "2302450675",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 4237,
        "pr_file": "packages/better-auth/src/adapters/create-adapter/test/create-adapter.test.ts",
        "discussion_id": "2302444352",
        "commented_code": "@@ -379,6 +379,82 @@ describe(\"Create Adapter Helper\", async () => {\n \t\t\t\texpect(createFALSEParameters.data.emailVerified).toBe(0);\n \t\t\t});\n \n+\t\t\ttest(\"Should modify string[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to string[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"string[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [\"medium\", \"large\"] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\n+\t\t\t\t\t'[\\\"medium\\\",\\\"large\\\"]',\n+\t\t\t\t);\n+\t\t\t});\n+\n+\t\t\ttest(\"Should modify number[] type to TEXT if the DB doesn't support it. And expect the result to be transformed back to number[]\", async () => {\n+\t\t\t\tconst createJSONParameters: { data: { preferences: string } } =\n+\t\t\t\t\tawait new Promise(async (r) => {\n+\t\t\t\t\t\tconst adapter = await createTestAdapter({\n+\t\t\t\t\t\t\tconfig: {\n+\t\t\t\t\t\t\t\tsupportsJSON: false,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\toptions: {\n+\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\tadditionalFields: {\n+\t\t\t\t\t\t\t\t\t\tpreferences: {\n+\t\t\t\t\t\t\t\t\t\t\ttype: \"number[]\",\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\tadapter(args_0) {\n+\t\t\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\t\t\tasync create(data) {\n+\t\t\t\t\t\t\t\t\t\tr(data as any);\n+\t\t\t\t\t\t\t\t\t\treturn data.data;\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\tconst obj = { preferences: [6, 7] };\n+\t\t\t\t\t\tconst res = await adapter.create({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\tdata: obj,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\texpect(res).toHaveProperty(\"preferences\");\n+\t\t\t\t\t\texpect(res.preferences).toEqual(obj.preferences);\n+\t\t\t\t\t});\n+\t\t\t\texpect(createJSONParameters.data).toHaveProperty(\"preferences\");\n+\t\t\t\texpect(createJSONParameters.data.preferences).toEqual(\"[6,7]\");",
        "comment_created_at": "2025-08-27T00:11:05+00:00",
        "comment_author": "dvanmali",
        "comment_body": "Line 452 tests the output\r\n\r\n```ts\r\nexpect(res.preferences).toEqual(obj.preferences);\r\n```\r\n\r\nLine 455 tests the stored\r\n```ts\r\nexpect(createJSONParameters.data.preferences).toEqual(\"[6,7]\");\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258689782",
    "pr_number": 3845,
    "pr_file": "packages/better-auth/src/plugins/oidc-provider/oidc.test.ts",
    "created_at": "2025-08-07T01:56:49+00:00",
    "commented_code": "newHeaders.append(\"Cookie\", headers.get(\"Cookie\") || \"\");\n \t\t\t},\n \t\t});\n-\t\texpect(redirectURI).toContain(\"/oauth2/authorize?client_id=\");\n+\t\texpect(redirectURI).toContain(\"/oauth2/authorize?consent_code=\");",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2258689782",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3845,
        "pr_file": "packages/better-auth/src/plugins/oidc-provider/oidc.test.ts",
        "discussion_id": "2258689782",
        "commented_code": "@@ -233,7 +233,7 @@ describe(\"oidc\", async () => {\n \t\t\t\tnewHeaders.append(\"Cookie\", headers.get(\"Cookie\") || \"\");\n \t\t\t},\n \t\t});\n-\t\texpect(redirectURI).toContain(\"/oauth2/authorize?client_id=\");\n+\t\texpect(redirectURI).toContain(\"/oauth2/authorize?consent_code=\");",
        "comment_created_at": "2025-08-07T01:56:49+00:00",
        "comment_author": "himself65",
        "comment_body": "Can we make these two separate test cases, covering both `client_id` and `consent_code`?",
        "pr_file_module": null
      }
    ]
  }
]