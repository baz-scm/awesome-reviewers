[
  {
    "discussion_id": "2306096100",
    "pr_number": 3087,
    "pr_file": "packages/better-auth/src/oauth2/create-authorization-url.ts",
    "created_at": "2025-08-28T03:52:37+00:00",
    "commented_code": "scopeJoiner?: string;\n }) {\n \tconst url = new URL(authorizationEndpoint);\n+\tconst clientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2306096100",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3087,
        "pr_file": "packages/better-auth/src/oauth2/create-authorization-url.ts",
        "discussion_id": "2306096100",
        "commented_code": "@@ -41,8 +41,9 @@ export async function createAuthorizationURL({\n \tscopeJoiner?: string;\n }) {\n \tconst url = new URL(authorizationEndpoint);\n+\tconst clientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;",
        "comment_created_at": "2025-08-28T03:52:37+00:00",
        "comment_author": "himself65",
        "comment_body": "what's the reason to only use the clientId[0]?",
        "pr_file_module": null
      },
      {
        "comment_id": "2306142556",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3087,
        "pr_file": "packages/better-auth/src/oauth2/create-authorization-url.ts",
        "discussion_id": "2306096100",
        "commented_code": "@@ -41,8 +41,9 @@ export async function createAuthorizationURL({\n \tscopeJoiner?: string;\n }) {\n \tconst url = new URL(authorizationEndpoint);\n+\tconst clientId = Array.isArray(options.clientId) ? options.clientId[0] : options.clientId;",
        "comment_created_at": "2025-08-28T04:34:14+00:00",
        "comment_author": "FireLord",
        "comment_body": "Hello!\r\n\r\nI'm using clientId[0] so the existing setup stays unchanged, most projects already have a single web client ID with a secret, and this keeps that flow working without breaking anything. \r\n\r\nThe login flow works fine for the mobile client, but since it uses a different ID and doesn\u2019t have a secret, things like idToken and refreshToken aren\u2019t generated for it. I still need to add proper handling for the mobile client.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2227871806",
    "pr_number": 3572,
    "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
    "created_at": "2025-07-24T08:47:15+00:00",
    "commented_code": "options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2227871806",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T08:47:15+00:00",
        "comment_author": "LightTab2",
        "comment_body": "If options are defined and payload has different parameters, I'm not sure which one should take precedence or even if a mismatch is a case for an error throw. Chosen behaviour should be stated in function's description I think",
        "pr_file_module": null
      },
      {
        "comment_id": "2227878223",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T08:50:04+00:00",
        "comment_author": "LightTab2",
        "comment_body": "Also include in description that `options?.jwt?.definePayload` is ignored",
        "pr_file_module": null
      },
      {
        "comment_id": "2228889250",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T15:41:46+00:00",
        "comment_author": "dvanmali",
        "comment_body": "JWT structure is `${protectedHeader}.${jwtPayload}.${signature}`. Typically the payload should never have `alg` defined as this is entirely determined by the config.\r\n\r\nIf you put `alg` then technically the output would be in a payload claim not a header claim. In which verification from packages like `jose` aren't designed to verify. Plus it'll be redundant if defined in both header and payload.",
        "pr_file_module": null
      },
      {
        "comment_id": "2228891840",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T15:42:53+00:00",
        "comment_author": "dvanmali",
        "comment_body": "Adding the `definePayload` description.",
        "pr_file_module": null
      },
      {
        "comment_id": "2229498514",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T20:21:57+00:00",
        "comment_author": "LightTab2",
        "comment_body": "There are 2 missing possible fields:\r\n```js\r\n\tif (payload.nbf) jwt.setNotBefore(payload.nbf);\r\n\tif (payload.jti) jwt.setJti(payload.jti);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2229642509",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2227871806",
        "commented_code": "@@ -53,23 +60,101 @@ export async function getJwtToken(\n \t\toptions?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t);\n \n-\tconst payload = !options?.jwt?.definePayload\n-\t\t? ctx.context.session!.user\n-\t\t: await options?.jwt.definePayload(ctx.context.session!);\n-\n-\tconst jwt = await new SignJWT(payload)\n+\tconst jwt = new SignJWT(payload)\n \t\t.setProtectedHeader({\n \t\t\talg: options?.jwks?.keyPairConfig?.alg ?? \"EdDSA\",\n \t\t\tkid: key.id,\n+\t\t\ttyp: \"JWT\",\n \t\t})\n-\t\t.setIssuedAt()\n-\t\t.setIssuer(options?.jwt?.issuer ?? ctx.context.options.baseURL!)\n-\t\t.setAudience(options?.jwt?.audience ?? ctx.context.options.baseURL!)\n-\t\t.setExpirationTime(options?.jwt?.expirationTime ?? \"15m\")\n-\t\t.setSubject(\n-\t\t\t(await options?.jwt?.getSubject?.(ctx.context.session!)) ??\n-\t\t\t\tctx.context.session!.user.id,\n+\t\t.setIssuedAt(payload.iat)",
        "comment_created_at": "2025-07-24T21:41:41+00:00",
        "comment_author": "dvanmali",
        "comment_body": "For these, if they are defined inside payload, it'll work in the same way as setting them individually.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274141478",
    "pr_number": 3572,
    "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
    "created_at": "2025-08-13T17:17:09+00:00",
    "commented_code": "},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2274141478",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
        "discussion_id": "2274141478",
        "commented_code": "@@ -321,23 +180,59 @@ export const jwt = (options?: JwtOptions) => {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {",
        "comment_created_at": "2025-08-13T17:17:09+00:00",
        "comment_author": "Bekacru",
        "comment_body": "I'm not sure if see the point of using this flag. The goal seems to be only to disable the token endpoint or am I missing something? If that's the case, they can already do that in other ways, including with the `disabledPaths` option.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2274168698",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
        "discussion_id": "2274141478",
        "commented_code": "@@ -321,23 +180,59 @@ export const jwt = (options?: JwtOptions) => {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {",
        "comment_created_at": "2025-08-13T17:29:52+00:00",
        "comment_author": "dvanmali",
        "comment_body": "That is correct, `usesOAuthProvider` disables the `/token` endpoint because an oAuth provider should use their implemented version of `/token` instead. This endpoint would return a token without the proper checks required by oAuth and MUST be disabled. I'll look into a way to perform this through `disabledPaths` instead of creating the additional flag and move the check into OIDC instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277568105",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
        "discussion_id": "2274141478",
        "commented_code": "@@ -321,23 +180,59 @@ export const jwt = (options?: JwtOptions) => {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {",
        "comment_created_at": "2025-08-14T19:43:07+00:00",
        "comment_author": "dvanmali",
        "comment_body": "Was able to remove `usesOAuthProvider` by adding a `safeguards` parameter instead of going through options.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274145608",
    "pr_number": 3572,
    "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
    "created_at": "2025-08-13T17:19:10+00:00",
    "commented_code": "},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {\n+\t\t\t\t\t\tthrow new APIError(\"NOT_FOUND\");\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert context into user payload\n+\t\t\t\t\tlet payload: Record<string, any>;\n+\t\t\t\t\tif (options?.jwt?.definePayload) {\n+\t\t\t\t\t\tpayload = await options?.jwt.definePayload(ctx.context.session!);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tpayload = {\n+\t\t\t\t\t\t\t...(ctx.context.session?.user ?? {}),\n+\t\t\t\t\t\t\tid: undefined, // id becomes sub in Sign Function\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert into JWT token\n+\t\t\t\t\tconst token = await signJwtPayload(ctx, payload, options);\n \t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\ttoken: jwt,\n+\t\t\t\t\t\ttoken,\n \t\t\t\t\t});\n \t\t\t\t},\n \t\t\t),\n \t\t},\n \t\thooks: {\n \t\t\tafter: [\n \t\t\t\t{\n-\t\t\t\t\tmatcher(context) {\n+\t\t\t\t\tmatcher(context: HookEndpointContext) {\n \t\t\t\t\t\treturn context.path === \"/get-session\";\n \t\t\t\t\t},\n \t\t\t\t\thandler: createAuthMiddleware(async (ctx) => {\n+\t\t\t\t\t\t// Disables middleware if using oAuth provider\n+\t\t\t\t\t\tif (options?.usesOAuthProvider) {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2274145608",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
        "discussion_id": "2274145608",
        "commented_code": "@@ -321,23 +180,59 @@ export const jwt = (options?: JwtOptions) => {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {\n+\t\t\t\t\t\tthrow new APIError(\"NOT_FOUND\");\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert context into user payload\n+\t\t\t\t\tlet payload: Record<string, any>;\n+\t\t\t\t\tif (options?.jwt?.definePayload) {\n+\t\t\t\t\t\tpayload = await options?.jwt.definePayload(ctx.context.session!);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tpayload = {\n+\t\t\t\t\t\t\t...(ctx.context.session?.user ?? {}),\n+\t\t\t\t\t\t\tid: undefined, // id becomes sub in Sign Function\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert into JWT token\n+\t\t\t\t\tconst token = await signJwtPayload(ctx, payload, options);\n \t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\ttoken: jwt,\n+\t\t\t\t\t\ttoken,\n \t\t\t\t\t});\n \t\t\t\t},\n \t\t\t),\n \t\t},\n \t\thooks: {\n \t\t\tafter: [\n \t\t\t\t{\n-\t\t\t\t\tmatcher(context) {\n+\t\t\t\t\tmatcher(context: HookEndpointContext) {\n \t\t\t\t\t\treturn context.path === \"/get-session\";\n \t\t\t\t\t},\n \t\t\t\t\thandler: createAuthMiddleware(async (ctx) => {\n+\t\t\t\t\t\t// Disables middleware if using oAuth provider\n+\t\t\t\t\t\tif (options?.usesOAuthProvider) {",
        "comment_created_at": "2025-08-13T17:19:10+00:00",
        "comment_author": "Bekacru",
        "comment_body": "here it might make sense to use this flag but I think another flag to specifically disable setting the jwt token on a hook is better like `disableSettingJWTHeader`",
        "pr_file_module": null
      },
      {
        "comment_id": "2274174749",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/index.ts",
        "discussion_id": "2274145608",
        "commented_code": "@@ -321,23 +180,59 @@ export const jwt = (options?: JwtOptions) => {\n \t\t\t\t\t},\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n-\t\t\t\t\tconst jwt = await getJwtToken(ctx, options);\n+\t\t\t\t\t// Disables endpoint if using oAuth provider\n+\t\t\t\t\tif (options?.usesOAuthProvider) {\n+\t\t\t\t\t\tthrow new APIError(\"NOT_FOUND\");\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert context into user payload\n+\t\t\t\t\tlet payload: Record<string, any>;\n+\t\t\t\t\tif (options?.jwt?.definePayload) {\n+\t\t\t\t\t\tpayload = await options?.jwt.definePayload(ctx.context.session!);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tpayload = {\n+\t\t\t\t\t\t\t...(ctx.context.session?.user ?? {}),\n+\t\t\t\t\t\t\tid: undefined, // id becomes sub in Sign Function\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Convert into JWT token\n+\t\t\t\t\tconst token = await signJwtPayload(ctx, payload, options);\n \t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\ttoken: jwt,\n+\t\t\t\t\t\ttoken,\n \t\t\t\t\t});\n \t\t\t\t},\n \t\t\t),\n \t\t},\n \t\thooks: {\n \t\t\tafter: [\n \t\t\t\t{\n-\t\t\t\t\tmatcher(context) {\n+\t\t\t\t\tmatcher(context: HookEndpointContext) {\n \t\t\t\t\t\treturn context.path === \"/get-session\";\n \t\t\t\t\t},\n \t\t\t\t\thandler: createAuthMiddleware(async (ctx) => {\n+\t\t\t\t\t\t// Disables middleware if using oAuth provider\n+\t\t\t\t\t\tif (options?.usesOAuthProvider) {",
        "comment_created_at": "2025-08-13T17:32:29+00:00",
        "comment_author": "dvanmali",
        "comment_body": "Valid, will implement",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258690363",
    "pr_number": 3845,
    "pr_file": "packages/better-auth/src/plugins/oidc-provider/authorize.ts",
    "created_at": "2025-08-07T01:57:28+00:00",
    "commented_code": "}\n \n \tif (options?.consentPage) {\n+\t\t// Set cookie to support cookie-based consent flows\n \t\tawait ctx.setSignedCookie(\"oidc_consent_prompt\", code, ctx.context.secret, {\n \t\t\tmaxAge: 600,\n \t\t\tpath: \"/\",\n \t\t\tsameSite: \"lax\",\n \t\t});\n-\t\tconst consentURI = `${options.consentPage}?client_id=${\n-\t\t\tclient.clientId\n-\t\t}&scope=${requestScope.join(\" \")}`;\n+\n+\t\t// Pass the consent code as a URL parameter to support URL-based consent flows\n+\t\t// This enables both cookie-based and URL parameter-based implementations\n+\t\tconst consentURI = `${options.consentPage}?consent_code=${encodeURIComponent(code)}&client_id=${encodeURIComponent(client.clientId)}&scope=${encodeURIComponent(requestScope.join(\" \"))}`;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2258690363",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3845,
        "pr_file": "packages/better-auth/src/plugins/oidc-provider/authorize.ts",
        "discussion_id": "2258690363",
        "commented_code": "@@ -263,14 +263,16 @@ export async function authorize(\n \t}\n \n \tif (options?.consentPage) {\n+\t\t// Set cookie to support cookie-based consent flows\n \t\tawait ctx.setSignedCookie(\"oidc_consent_prompt\", code, ctx.context.secret, {\n \t\t\tmaxAge: 600,\n \t\t\tpath: \"/\",\n \t\t\tsameSite: \"lax\",\n \t\t});\n-\t\tconst consentURI = `${options.consentPage}?client_id=${\n-\t\t\tclient.clientId\n-\t\t}&scope=${requestScope.join(\" \")}`;\n+\n+\t\t// Pass the consent code as a URL parameter to support URL-based consent flows\n+\t\t// This enables both cookie-based and URL parameter-based implementations\n+\t\tconst consentURI = `${options.consentPage}?consent_code=${encodeURIComponent(code)}&client_id=${encodeURIComponent(client.clientId)}&scope=${encodeURIComponent(requestScope.join(\" \"))}`;",
        "comment_created_at": "2025-08-07T01:57:28+00:00",
        "comment_author": "himself65",
        "comment_body": "Should we use URLSearchParams here?\r\n\r\nRefs: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2249304939",
    "pr_number": 3755,
    "pr_file": "packages/better-auth/src/social-providers/slack.ts",
    "created_at": "2025-08-02T16:15:45+00:00",
    "commented_code": "\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2249304939",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-02T16:15:45+00:00",
        "comment_author": "Bekacru",
        "comment_body": "is this supposed to be a static value?",
        "pr_file_module": null
      },
      {
        "comment_id": "2249309264",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-02T16:24:27+00:00",
        "comment_author": "Kinfe123",
        "comment_body": "Yeah. it can be like passing this parameter ensures the user will auth against that workspace. you can check the docs link i attached on the pr.",
        "pr_file_module": null
      },
      {
        "comment_id": "2249321410",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-02T16:55:34+00:00",
        "comment_author": "Bekacru",
        "comment_body": "But shouldn't that be provided as a query param or something, so it's dynamic? I'm not sure how passing the team as a plugin option makes sense, since you'd probably want different users to choose different team or workspace IDs",
        "pr_file_module": null
      },
      {
        "comment_id": "2250750927",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-04T08:13:54+00:00",
        "comment_author": "Kinfe123",
        "comment_body": "Yeah. also the team option is useful when you want to restrict Slack OAuth to a specific workspace which is ideal for internal tools or to avoid showing the workspace picker during login. you can see how their are constructing their team on their docs.",
        "pr_file_module": null
      },
      {
        "comment_id": "2252307857",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-04T18:41:08+00:00",
        "comment_author": "Bekacru",
        "comment_body": "I think make it `string | (ctx)=>string` type. So if they want to change the team based on something from the request they can easily do that",
        "pr_file_module": null
      },
      {
        "comment_id": "2253651914",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-05T09:08:11+00:00",
        "comment_author": "Kinfe123",
        "comment_body": "hmm..make sense.",
        "pr_file_module": null
      },
      {
        "comment_id": "2253672431",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-05T09:15:34+00:00",
        "comment_author": "Kinfe123",
        "comment_body": "but i dont think we can pass them the ctx object from the slack itself. may be let them pass a function that returns string",
        "pr_file_module": null
      },
      {
        "comment_id": "2255832300",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3755,
        "pr_file": "packages/better-auth/src/social-providers/slack.ts",
        "discussion_id": "2249304939",
        "commented_code": "@@ -33,7 +33,12 @@ export interface SlackProfile extends Record<string, any> {\n \t\"https://slack.com/team_image_default\": boolean;\n }\n \n-export interface SlackOptions extends ProviderOptions<SlackProfile> {}\n+export interface SlackOptions extends ProviderOptions<SlackProfile> {\n+\t/**\n+\t * Optional Slack workspace ID to restrict sign in to a specific workspace\n+\t */\n+\tteam?: string;",
        "comment_created_at": "2025-08-06T04:28:21+00:00",
        "comment_author": "Bekacru",
        "comment_body": "The function needs some kind of input, like a request object or ctx. I know createAuthorizationURL doesn\u2019t accept context right now, but maybe we should make it accept one so we can pass it to the callback. Otherwise, the function is useless",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2201251071",
    "pr_number": 3343,
    "pr_file": "packages/sso/src/index.ts",
    "created_at": "2025-07-11T16:40:42+00:00",
    "commented_code": "let session: Session =\n \t\t\t\t\t\tawait ctx.context.internalAdapter.createSession(user.id, ctx);\n \t\t\t\t\tawait setSessionCookie(ctx, { session, user });\n-\t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\tredirect: true,\n-\t\t\t\t\t\turl: RelayState || `${parsedSamlConfig.issuer}/dashboard`,\n-\t\t\t\t\t});\n+\t\t\t\t\tthrow ctx.redirect(\n+\t\t\t\t\t\tRelayState || `${parsedSamlConfig.issuer}/dashboard`,",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2201251071",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3343,
        "pr_file": "packages/sso/src/index.ts",
        "discussion_id": "2201251071",
        "commented_code": "@@ -1328,10 +1328,9 @@ export const sso = (options?: SSOOptions) => {\n \t\t\t\t\tlet session: Session =\n \t\t\t\t\t\tawait ctx.context.internalAdapter.createSession(user.id, ctx);\n \t\t\t\t\tawait setSessionCookie(ctx, { session, user });\n-\t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\tredirect: true,\n-\t\t\t\t\t\turl: RelayState || `${parsedSamlConfig.issuer}/dashboard`,\n-\t\t\t\t\t});\n+\t\t\t\t\tthrow ctx.redirect(\n+\t\t\t\t\t\tRelayState || `${parsedSamlConfig.issuer}/dashboard`,",
        "comment_created_at": "2025-07-11T16:40:42+00:00",
        "comment_author": "Bekacru",
        "comment_body": "why do we do `/dashboard`? also shouldn't we use the `callbackURL` that was provided on signIn",
        "pr_file_module": null
      },
      {
        "comment_id": "2201286990",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3343,
        "pr_file": "packages/sso/src/index.ts",
        "discussion_id": "2201251071",
        "commented_code": "@@ -1328,10 +1328,9 @@ export const sso = (options?: SSOOptions) => {\n \t\t\t\t\tlet session: Session =\n \t\t\t\t\t\tawait ctx.context.internalAdapter.createSession(user.id, ctx);\n \t\t\t\t\tawait setSessionCookie(ctx, { session, user });\n-\t\t\t\t\treturn ctx.json({\n-\t\t\t\t\t\tredirect: true,\n-\t\t\t\t\t\turl: RelayState || `${parsedSamlConfig.issuer}/dashboard`,\n-\t\t\t\t\t});\n+\t\t\t\t\tthrow ctx.redirect(\n+\t\t\t\t\t\tRelayState || `${parsedSamlConfig.issuer}/dashboard`,",
        "comment_created_at": "2025-07-11T16:50:38+00:00",
        "comment_author": "Kinfe123",
        "comment_body": "The /dashboard was for testing. This was supposed to be a draft PR. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202403226",
    "pr_number": 3343,
    "pr_file": "packages/sso/src/saml.test.ts",
    "created_at": "2025-07-12T07:10:11+00:00",
    "commented_code": "callbackURL: \"http://localhost:3000/dashboard\",\n \t\t\t},\n \t\t});\n+\n \t\texpect(signInResponse).toEqual({\n \t\t\turl: expect.stringContaining(\"http://localhost:8081\"),\n \t\t\tredirect: true,\n \t\t});\n-\t\tconst loginResponse = await fetch(signInResponse?.url as string);\n-\t\tconst resultValue = await loginResponse.json();\n-\t\tconst result = await auth.api.callbackSSOSAML({\n-\t\t\tbody: {\n-\t\t\t\tSAMLResponse: resultValue.samlResponse,\n-\t\t\t\tRelayState: \"http://localhost:3001/dashboard\",\n-\t\t\t},\n-\t\t\tparams: {\n-\t\t\t\tproviderId: provider.providerId,\n+\t\tlet samlResponse: any;\n+\t\tawait betterFetch(signInResponse?.url as string, {\n+\t\t\tonSuccess: async (context) => {\n+\t\t\t\tsamlResponse = await context.data;\n \t\t\t},\n \t\t});\n-\n-\t\texpect(result).toEqual({\n-\t\t\tredirect: true,\n-\t\t\turl: \"http://localhost:3001/dashboard\",\n+\t\tlet redirectLocation = \"\";\n+\t\tawait betterFetch(\"http://localhost:8081/api/sso/saml2/callback\", {\n+\t\t\tmethod: \"POST\",\n+\t\t\tredirect: \"manual\",\n+\t\t\theaders: {\n+\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n+\t\t\t},\n+\t\t\tbody: new URLSearchParams({\n+\t\t\t\tSAMLResponse: samlResponse.samlResponse,\n+\t\t\t\tRelayState: \"http://localhost:3000\",",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2202403226",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3343,
        "pr_file": "packages/sso/src/saml.test.ts",
        "discussion_id": "2202403226",
        "commented_code": "@@ -709,25 +752,33 @@ describe(\"SAML SSO\", async () => {\n \t\t\t\tcallbackURL: \"http://localhost:3000/dashboard\",\n \t\t\t},\n \t\t});\n+\n \t\texpect(signInResponse).toEqual({\n \t\t\turl: expect.stringContaining(\"http://localhost:8081\"),\n \t\t\tredirect: true,\n \t\t});\n-\t\tconst loginResponse = await fetch(signInResponse?.url as string);\n-\t\tconst resultValue = await loginResponse.json();\n-\t\tconst result = await auth.api.callbackSSOSAML({\n-\t\t\tbody: {\n-\t\t\t\tSAMLResponse: resultValue.samlResponse,\n-\t\t\t\tRelayState: \"http://localhost:3001/dashboard\",\n-\t\t\t},\n-\t\t\tparams: {\n-\t\t\t\tproviderId: provider.providerId,\n+\t\tlet samlResponse: any;\n+\t\tawait betterFetch(signInResponse?.url as string, {\n+\t\t\tonSuccess: async (context) => {\n+\t\t\t\tsamlResponse = await context.data;\n \t\t\t},\n \t\t});\n-\n-\t\texpect(result).toEqual({\n-\t\t\tredirect: true,\n-\t\t\turl: \"http://localhost:3001/dashboard\",\n+\t\tlet redirectLocation = \"\";\n+\t\tawait betterFetch(\"http://localhost:8081/api/sso/saml2/callback\", {\n+\t\t\tmethod: \"POST\",\n+\t\t\tredirect: \"manual\",\n+\t\t\theaders: {\n+\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\n+\t\t\t},\n+\t\t\tbody: new URLSearchParams({\n+\t\t\t\tSAMLResponse: samlResponse.samlResponse,\n+\t\t\t\tRelayState: \"http://localhost:3000\",",
        "comment_created_at": "2025-07-12T07:10:11+00:00",
        "comment_author": "Bekacru",
        "comment_body": "we don't want to hardcode relay state here, if im understanding this correctly. We need to redirect to localhost:3000/dashboard since that's what's provided in the callback url on signIn.sso",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2188124033",
    "pr_number": 3277,
    "pr_file": "packages/better-auth/src/plugins/sso/index.ts",
    "created_at": "2025-07-06T09:04:16+00:00",
    "commented_code": "throw ctx.redirect(toRedirectTo);\n \t\t\t\t},\n \t\t\t),\n+\t\t\tlistUsers: createAuthEndpoint(\n+\t\t\t\t\"/scim/v2/Users\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tsummary: \"List SCIM users\",\n+\t\t\t\t\t\t\tdescription:\n+\t\t\t\t\t\t\t\t\"Returns all users provisioned via SCIM for the linked organization.\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t\"200\": {\n+\t\t\t\t\t\t\t\t\tdescription: \"SCIM user list\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\ttotalResults: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\titemsPerPage: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\tstartIndex: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\tResources: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"array\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserName: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tactive: { type: \"boolean\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tschemas: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"array\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst authHeader = ctx.headers?.get(\"Authorization\");\n+\t\t\t\t\tconst token = authHeader?.replace(/^Bearer\\s+/i, \"\");\n+\n+\t\t\t\t\tif (!token) {\n+\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\tmessage: \"SCIM token is required\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tconst provider = await ctx.context.adapter.findOne<SSOProvider>({\n+\t\t\t\t\t\tmodel: \"ssoProvider\",\n+\t\t\t\t\t\twhere: [{ field: \"scimToken\", value: token }],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!provider || !provider.organizationId) {\n+\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\tmessage: \"Invalid SCIM token\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tconst users = await ctx.context.adapter.findMany<User>({\n+\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{ field: \"organizationId\", value: provider.organizationId },\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\tschemas: [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n+\t\t\t\t\t\ttotalResults: users.length,\n+\t\t\t\t\t\tstartIndex: 1,\n+\t\t\t\t\t\titemsPerPage: users.length,\n+\t\t\t\t\t\tResources: users.map((user) => ({\n+\t\t\t\t\t\t\tid: user.id,\n+\t\t\t\t\t\t\tuserName: user.email,\n+\t\t\t\t\t\t\tactive: true,\n+\t\t\t\t\t\t\tschemas: [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n+\t\t\t\t\t\t})),",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2188124033",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3277,
        "pr_file": "packages/better-auth/src/plugins/sso/index.ts",
        "discussion_id": "2188124033",
        "commented_code": "@@ -938,6 +980,380 @@ export const sso = (options?: SSOOptions) => {\n \t\t\t\t\tthrow ctx.redirect(toRedirectTo);\n \t\t\t\t},\n \t\t\t),\n+\t\t\tlistUsers: createAuthEndpoint(\n+\t\t\t\t\"/scim/v2/Users\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tsummary: \"List SCIM users\",\n+\t\t\t\t\t\t\tdescription:\n+\t\t\t\t\t\t\t\t\"Returns all users provisioned via SCIM for the linked organization.\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t\"200\": {\n+\t\t\t\t\t\t\t\t\tdescription: \"SCIM user list\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\ttotalResults: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\titemsPerPage: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\tstartIndex: { type: \"number\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\tResources: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"array\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuserName: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tactive: { type: \"boolean\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tschemas: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"array\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: { type: \"string\" },\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst authHeader = ctx.headers?.get(\"Authorization\");\n+\t\t\t\t\tconst token = authHeader?.replace(/^Bearer\\s+/i, \"\");\n+\n+\t\t\t\t\tif (!token) {\n+\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\tmessage: \"SCIM token is required\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tconst provider = await ctx.context.adapter.findOne<SSOProvider>({\n+\t\t\t\t\t\tmodel: \"ssoProvider\",\n+\t\t\t\t\t\twhere: [{ field: \"scimToken\", value: token }],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!provider || !provider.organizationId) {\n+\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\tmessage: \"Invalid SCIM token\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tconst users = await ctx.context.adapter.findMany<User>({\n+\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{ field: \"organizationId\", value: provider.organizationId },\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\tschemas: [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"],\n+\t\t\t\t\t\ttotalResults: users.length,\n+\t\t\t\t\t\tstartIndex: 1,\n+\t\t\t\t\t\titemsPerPage: users.length,\n+\t\t\t\t\t\tResources: users.map((user) => ({\n+\t\t\t\t\t\t\tid: user.id,\n+\t\t\t\t\t\t\tuserName: user.email,\n+\t\t\t\t\t\t\tactive: true,\n+\t\t\t\t\t\t\tschemas: [\"urn:ietf:params:scim:schemas:core:2.0:User\"],\n+\t\t\t\t\t\t})),",
        "comment_created_at": "2025-07-06T09:04:16+00:00",
        "comment_author": "ping-maxwell",
        "comment_body": "Maybe we can have a config option to configure what to return in the `Resources`?\r\nFor example some users may have the `username` plugin, so they could add a `displayName` here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1931727003",
    "pr_number": 1289,
    "pr_file": "packages/better-auth/src/social-providers/twitter.ts",
    "created_at": "2025-01-28T08:31:14+00:00",
    "commented_code": "code,\n \t\t\t\tcodeVerifier,\n \t\t\t\tauthentication: \"basic\",\n-\t\t\t\tredirectURI: options.redirectURI || redirectURI,",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "1931727003",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 1289,
        "pr_file": "packages/better-auth/src/social-providers/twitter.ts",
        "discussion_id": "1931727003",
        "commented_code": "@@ -119,7 +119,7 @@ export const twitter = (options: TwitterOption) => {\n \t\t\t\tcode,\n \t\t\t\tcodeVerifier,\n \t\t\t\tauthentication: \"basic\",\n-\t\t\t\tredirectURI: options.redirectURI || redirectURI,",
        "comment_created_at": "2025-01-28T08:31:14+00:00",
        "comment_author": "Bekacru",
        "comment_body": "I'm not sure why we're removing `options.redirectURI`. If the user manually provides the redirect URI, it should overwrite the default redirect URI passed when the function is called.",
        "pr_file_module": null
      },
      {
        "comment_id": "1933584216",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 1289,
        "pr_file": "packages/better-auth/src/social-providers/twitter.ts",
        "discussion_id": "1931727003",
        "commented_code": "@@ -119,7 +119,7 @@ export const twitter = (options: TwitterOption) => {\n \t\t\t\tcode,\n \t\t\t\tcodeVerifier,\n \t\t\t\tauthentication: \"basic\",\n-\t\t\t\tredirectURI: options.redirectURI || redirectURI,",
        "comment_created_at": "2025-01-29T10:01:35+00:00",
        "comment_author": "arlyon",
        "comment_body": "`options.redirectURI` is not being removed. It is passed in in the `options` setting already, and that is handled now uniformly by `validateAuthorizationCode` by checking the options you pass in, rather than having to remember to do that at the call site in 10 different places.",
        "pr_file_module": null
      }
    ]
  }
]