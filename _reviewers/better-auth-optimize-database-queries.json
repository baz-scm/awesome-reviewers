[
  {
    "discussion_id": "1843248546",
    "pr_number": 504,
    "pr_file": "packages/better-auth/src/plugins/access-control/index.ts",
    "created_at": "2024-11-15T06:29:22+00:00",
    "commented_code": "+import { z } from \"zod\";\n+import {\n+\tAPIError,\n+\tcreateAuthEndpoint,\n+\tgetSessionFromCtx,\n+\tsessionMiddleware,\n+} from \"../../api\";\n+import type {\n+\tBetterAuthPlugin,\n+\tGenericEndpointContext,\n+\tUser,\n+} from \"../../types\";\n+\n+interface AccessControlOptions {\n+\t/**\n+\t * The global scope is the default scope that is used when no scope is provided.\n+\t * It's a scope that is applicable throughout the application.\n+\t *\n+\t * @default \"global\"\n+\t */\n+\tglobalScope?: string;\n+}\n+\n+interface StoredRole {\n+\tid: string;\n+\tpermissions: string;\n+\tname?: string;\n+\tscope: string;\n+}\n+\n+interface Role {\n+\tid: string;\n+\tpermissions: string[];\n+\tname?: string;\n+\tscope: string;\n+}\n+\n+interface UserRole {\n+\tid: string;\n+\tuserId: string;\n+\troleId: string;\n+}\n+\n+const superPermission = \"*\";\n+\n+async function checkPermission(\n+\tctx: GenericEndpointContext,\n+\tpermission: string,\n+) {\n+\tconst { user } = await getSessionFromCtx(ctx);\n+\tconst userRole = await ctx.context.adapter.findOne<UserRole>({\n+\t\tmodel: \"userRole\",\n+\t\twhere: [\n+\t\t\t{\n+\t\t\t\tfield: \"userId\",\n+\t\t\t\tvalue: user.id,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tfield: \"scope\",\n+\t\t\t\tvalue: ctx.body.scope,\n+\t\t\t},\n+\t\t],\n+\t});\n+\tif (!userRole) {\n+\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\tmessage: \"You do not have permission required to perform this action.\",\n+\t\t});\n+\t}\n+\tconst role = await ctx.context.adapter.findOne<Role>({\n+\t\tmodel: \"role\",\n+\t\twhere: [\n+\t\t\t{\n+\t\t\t\tfield: \"id\",\n+\t\t\t\tvalue: userRole.roleId,\n+\t\t\t},\n+\t\t],\n+\t});\n+\tif (!role || !role.permissions.includes(permission || superPermission)) {\n+\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\tmessage: \"You do not have permission required to perform this action.\",\n+\t\t});\n+\t}\n+\treturn {\n+\t\tuserRole,\n+\t\tuser,\n+\t};\n+}\n+\n+export const accessControl = (options: AccessControlOptions) => {\n+\tconst opts = {\n+\t\tglobalScope: \"global\",\n+\t\t...options,\n+\t};\n+\treturn {\n+\t\tid: \"access-control\",\n+\t\tendpoints: {\n+\t\t\tgetPermissions: createAuthEndpoint(\n+\t\t\t\t\"/ac/get-permissions\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tquery: z.object({\n+\t\t\t\t\t\tscope: z.string(),\n+\t\t\t\t\t\tuserId: z.string().optional(),\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tlet user: User | null = null;\n+\t\t\t\t\tif (ctx.request) {\n+\t\t\t\t\t\tconst session = await getSessionFromCtx(ctx);\n+\t\t\t\t\t\tuser = session.user;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (!ctx.query.userId) {\n+\t\t\t\t\t\t\tthrow new APIError(\"BAD_REQUEST\", {\n+\t\t\t\t\t\t\t\tmessage: \"userId is required\",\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tuser = await ctx.context.internalAdapter.findUserById(\n+\t\t\t\t\t\t\tctx.query.userId,\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\t\t\t\t\tmessage:\n+\t\t\t\t\t\t\t\t\"You do not have permission required to perform this action.\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t\tconst userRoles = await ctx.context.adapter.findMany<UserRole>({\n+\t\t\t\t\t\tmodel: \"userRole\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"userId\",\n+\t\t\t\t\t\t\t\tvalue: user.id,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\t\t\t\t\tif (!userRoles.length) {\n+\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\tpermissions: [],\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\t\t\t\t\tconst rolePromises = userRoles.map(async (userRole) => {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "1843248546",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 504,
        "pr_file": "packages/better-auth/src/plugins/access-control/index.ts",
        "discussion_id": "1843248546",
        "commented_code": "@@ -0,0 +1,489 @@\n+import { z } from \"zod\";\n+import {\n+\tAPIError,\n+\tcreateAuthEndpoint,\n+\tgetSessionFromCtx,\n+\tsessionMiddleware,\n+} from \"../../api\";\n+import type {\n+\tBetterAuthPlugin,\n+\tGenericEndpointContext,\n+\tUser,\n+} from \"../../types\";\n+\n+interface AccessControlOptions {\n+\t/**\n+\t * The global scope is the default scope that is used when no scope is provided.\n+\t * It's a scope that is applicable throughout the application.\n+\t *\n+\t * @default \"global\"\n+\t */\n+\tglobalScope?: string;\n+}\n+\n+interface StoredRole {\n+\tid: string;\n+\tpermissions: string;\n+\tname?: string;\n+\tscope: string;\n+}\n+\n+interface Role {\n+\tid: string;\n+\tpermissions: string[];\n+\tname?: string;\n+\tscope: string;\n+}\n+\n+interface UserRole {\n+\tid: string;\n+\tuserId: string;\n+\troleId: string;\n+}\n+\n+const superPermission = \"*\";\n+\n+async function checkPermission(\n+\tctx: GenericEndpointContext,\n+\tpermission: string,\n+) {\n+\tconst { user } = await getSessionFromCtx(ctx);\n+\tconst userRole = await ctx.context.adapter.findOne<UserRole>({\n+\t\tmodel: \"userRole\",\n+\t\twhere: [\n+\t\t\t{\n+\t\t\t\tfield: \"userId\",\n+\t\t\t\tvalue: user.id,\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tfield: \"scope\",\n+\t\t\t\tvalue: ctx.body.scope,\n+\t\t\t},\n+\t\t],\n+\t});\n+\tif (!userRole) {\n+\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\tmessage: \"You do not have permission required to perform this action.\",\n+\t\t});\n+\t}\n+\tconst role = await ctx.context.adapter.findOne<Role>({\n+\t\tmodel: \"role\",\n+\t\twhere: [\n+\t\t\t{\n+\t\t\t\tfield: \"id\",\n+\t\t\t\tvalue: userRole.roleId,\n+\t\t\t},\n+\t\t],\n+\t});\n+\tif (!role || !role.permissions.includes(permission || superPermission)) {\n+\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\tmessage: \"You do not have permission required to perform this action.\",\n+\t\t});\n+\t}\n+\treturn {\n+\t\tuserRole,\n+\t\tuser,\n+\t};\n+}\n+\n+export const accessControl = (options: AccessControlOptions) => {\n+\tconst opts = {\n+\t\tglobalScope: \"global\",\n+\t\t...options,\n+\t};\n+\treturn {\n+\t\tid: \"access-control\",\n+\t\tendpoints: {\n+\t\t\tgetPermissions: createAuthEndpoint(\n+\t\t\t\t\"/ac/get-permissions\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tquery: z.object({\n+\t\t\t\t\t\tscope: z.string(),\n+\t\t\t\t\t\tuserId: z.string().optional(),\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tlet user: User | null = null;\n+\t\t\t\t\tif (ctx.request) {\n+\t\t\t\t\t\tconst session = await getSessionFromCtx(ctx);\n+\t\t\t\t\t\tuser = session.user;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tif (!ctx.query.userId) {\n+\t\t\t\t\t\t\tthrow new APIError(\"BAD_REQUEST\", {\n+\t\t\t\t\t\t\t\tmessage: \"userId is required\",\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tuser = await ctx.context.internalAdapter.findUserById(\n+\t\t\t\t\t\t\tctx.query.userId,\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\tthrow new APIError(\"FORBIDDEN\", {\n+\t\t\t\t\t\t\tmessage:\n+\t\t\t\t\t\t\t\t\"You do not have permission required to perform this action.\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t\tconst userRoles = await ctx.context.adapter.findMany<UserRole>({\n+\t\t\t\t\t\tmodel: \"userRole\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"userId\",\n+\t\t\t\t\t\t\t\tvalue: user.id,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\t\t\t\t\tif (!userRoles.length) {\n+\t\t\t\t\t\treturn {\n+\t\t\t\t\t\t\tpermissions: [],\n+\t\t\t\t\t\t};\n+\t\t\t\t\t}\n+\t\t\t\t\tconst rolePromises = userRoles.map(async (userRole) => {",
        "comment_created_at": "2024-11-15T06:29:22+00:00",
        "comment_author": "emroot",
        "comment_body": "Can prob run a single findMany query here and use `in: roleIds`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1930348137",
    "pr_number": 1258,
    "pr_file": "packages/better-auth/src/adapters/drizzle-adapter/drizzle-adapter.ts",
    "created_at": "2025-01-27T11:04:50+00:00",
    "commented_code": "const res = (await builder.where(...clause)) as any[];\n \t\t\t\treturn res.map((r) => transformOutput(r, model));\n \t\t\t},\n+\t\t\tasync count(data) {\n+\t\t\t\tconst { model, where } = data;\n+\t\t\t\tconst schemaModel = getSchema(model);\n+\t\t\t\tconst clause = where ? convertWhereClause(where, model) : [];\n+\t\t\t\tconst res = await db",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "1930348137",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 1258,
        "pr_file": "packages/better-auth/src/adapters/drizzle-adapter/drizzle-adapter.ts",
        "discussion_id": "1930348137",
        "commented_code": "@@ -285,6 +285,16 @@ export const drizzleAdapter =\n \t\t\t\tconst res = (await builder.where(...clause)) as any[];\n \t\t\t\treturn res.map((r) => transformOutput(r, model));\n \t\t\t},\n+\t\t\tasync count(data) {\n+\t\t\t\tconst { model, where } = data;\n+\t\t\t\tconst schemaModel = getSchema(model);\n+\t\t\t\tconst clause = where ? convertWhereClause(where, model) : [];\n+\t\t\t\tconst res = await db",
        "comment_created_at": "2025-01-27T11:04:50+00:00",
        "comment_author": "Bekacru",
        "comment_body": "we should use `count` instead of getting all user data here",
        "pr_file_module": null
      }
    ]
  }
]