[
  {
    "discussion_id": "2302783675",
    "pr_number": 4123,
    "pr_file": "packages/better-auth/src/plugins/bearer/index.ts",
    "created_at": "2025-08-27T04:07:24+00:00",
    "commented_code": "* @default false\n \t */\n \trequireSignature?: boolean;\n+\t/**\n+\t * Custom cookie name for the temporary bearer token confirmation cookie.\n+\t *\n+\t * @default \"bearer-token-confirmation\"\n+\t */\n+\tcookieName?: string;\n }\n \n /**\n  * Converts bearer token to session cookie\n  */\n export const bearer = (options?: BearerOptions) => {\n+\tconst bearerConfirmationCookieName =\n+\t\toptions?.cookieName || \"bearer-token-confirmation\";\n \treturn {\n \t\tid: \"bearer\",\n+\t\tendpoints: {\n+\t\t\tgetBearerToken: createAuthEndpoint(\n+\t\t\t\t\"/get-bearer-token\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\tclient: false,\n+\t\t\t\t\t},\n+\t\t\t\t\trequireHeaders: true,\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst cookieString = ctx.headers.get(\"cookie\");\n+\t\t\t\t\tif (!cookieString) {\n+\t\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\t\tsuccess: false,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t\tconst cookies = cookieString\n+\t\t\t\t\t\t.split(\";\")\n+\t\t\t\t\t\t.map((cookie) => cookie.trim());",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2302783675",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 4123,
        "pr_file": "packages/better-auth/src/plugins/bearer/index.ts",
        "discussion_id": "2302783675",
        "commented_code": "@@ -13,14 +13,76 @@ interface BearerOptions {\n \t * @default false\n \t */\n \trequireSignature?: boolean;\n+\t/**\n+\t * Custom cookie name for the temporary bearer token confirmation cookie.\n+\t *\n+\t * @default \"bearer-token-confirmation\"\n+\t */\n+\tcookieName?: string;\n }\n \n /**\n  * Converts bearer token to session cookie\n  */\n export const bearer = (options?: BearerOptions) => {\n+\tconst bearerConfirmationCookieName =\n+\t\toptions?.cookieName || \"bearer-token-confirmation\";\n \treturn {\n \t\tid: \"bearer\",\n+\t\tendpoints: {\n+\t\t\tgetBearerToken: createAuthEndpoint(\n+\t\t\t\t\"/get-bearer-token\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\tclient: false,\n+\t\t\t\t\t},\n+\t\t\t\t\trequireHeaders: true,\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst cookieString = ctx.headers.get(\"cookie\");\n+\t\t\t\t\tif (!cookieString) {\n+\t\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\t\tsuccess: false,\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t\tconst cookies = cookieString\n+\t\t\t\t\t\t.split(\";\")\n+\t\t\t\t\t\t.map((cookie) => cookie.trim());",
        "comment_created_at": "2025-08-27T04:07:24+00:00",
        "comment_author": "himself65",
        "comment_body": "here you manually parse the cookie, but I guess there's `ctx.getCookie` utility to use",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2255652610",
    "pr_number": 3770,
    "pr_file": "packages/better-auth/src/plugins/magic-link/magic-link.test.ts",
    "created_at": "2025-08-06T01:25:09+00:00",
    "commented_code": "fetchOptions: {\n \t\t\tcustomFetchImpl,\n \t\t},\n-\t\tbaseURL: \"http://localhost:3000/api/auth\",\n+\t\tbaseURL: \"http://localhost:3000\",\n+\t\tbasePath: \"/api/auth\",\n \t});\n \n \tit(\"should send magic link\", async () => {\n \t\tawait client.signIn.magicLink({\n \t\t\temail: testUser.email,\n \t\t});\n+\t\tconsole.log(verificationEmail);",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2255652610",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3770,
        "pr_file": "packages/better-auth/src/plugins/magic-link/magic-link.test.ts",
        "discussion_id": "2255652610",
        "commented_code": "@@ -32,13 +32,15 @@ describe(\"magic link\", async () => {\n \t\tfetchOptions: {\n \t\t\tcustomFetchImpl,\n \t\t},\n-\t\tbaseURL: \"http://localhost:3000/api/auth\",\n+\t\tbaseURL: \"http://localhost:3000\",\n+\t\tbasePath: \"/api/auth\",\n \t});\n \n \tit(\"should send magic link\", async () => {\n \t\tawait client.signIn.magicLink({\n \t\t\temail: testUser.email,\n \t\t});\n+\t\tconsole.log(verificationEmail);",
        "comment_created_at": "2025-08-06T01:25:09+00:00",
        "comment_author": "himself65",
        "comment_body": "no console.log?",
        "pr_file_module": null
      },
      {
        "comment_id": "2255653856",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3770,
        "pr_file": "packages/better-auth/src/plugins/magic-link/magic-link.test.ts",
        "discussion_id": "2255652610",
        "commented_code": "@@ -32,13 +32,15 @@ describe(\"magic link\", async () => {\n \t\tfetchOptions: {\n \t\t\tcustomFetchImpl,\n \t\t},\n-\t\tbaseURL: \"http://localhost:3000/api/auth\",\n+\t\tbaseURL: \"http://localhost:3000\",\n+\t\tbasePath: \"/api/auth\",\n \t});\n \n \tit(\"should send magic link\", async () => {\n \t\tawait client.signIn.magicLink({\n \t\t\temail: testUser.email,\n \t\t});\n+\t\tconsole.log(verificationEmail);",
        "comment_created_at": "2025-08-06T01:26:33+00:00",
        "comment_author": "Bekacru",
        "comment_body": "yeah. we probably should have linting rule for this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2257681353",
    "pr_number": 3824,
    "pr_file": "packages/better-auth/src/oauth2/validate-authorization-code.ts",
    "created_at": "2025-08-06T16:17:12+00:00",
    "commented_code": "// Fixes compatibility with providers like Notion, Twitter, etc.\n \tif (authentication === \"basic\") {\n \t\tconst encodedCredentials = base64.encode(\n-\t\t\t`${options.clientId}:${options.clientSecret}`,\n+\t\t\t`${options.clientId}:${options.clientSecret ?? \"\"}`,\n \t\t);\n \t\trequestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n-\t} else {\n+\t} else if (options.clientSecret !== undefined) {\n \t\tbody.set(\"client_secret\", options.clientSecret);\n \t}",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2257681353",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3824,
        "pr_file": "packages/better-auth/src/oauth2/validate-authorization-code.ts",
        "discussion_id": "2257681353",
        "commented_code": "@@ -44,10 +44,10 @@ export async function validateAuthorizationCode({\n \t// Fixes compatibility with providers like Notion, Twitter, etc.\n \tif (authentication === \"basic\") {\n \t\tconst encodedCredentials = base64.encode(\n-\t\t\t`${options.clientId}:${options.clientSecret}`,\n+\t\t\t`${options.clientId}:${options.clientSecret ?? \"\"}`,\n \t\t);\n \t\trequestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n-\t} else {\n+\t} else if (options.clientSecret !== undefined) {\n \t\tbody.set(\"client_secret\", options.clientSecret);\n \t}",
        "comment_created_at": "2025-08-06T16:17:12+00:00",
        "comment_author": "Bekacru",
        "comment_body": "let's avoid else if...\r\n```suggestion\r\n\t}\r\n\tif(authentication !== \"basic\" && options.clientSecret){\r\n\t    body.set(\"client_secret\", options.clientSecret);\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243869406",
    "pr_number": 3706,
    "pr_file": "packages/better-auth/src/config/index.ts",
    "created_at": "2025-07-30T21:13:49+00:00",
    "commented_code": "+import fs from \"node:fs/promises\";\n+import path from \"node:path\";\n+\n+import { loadConfig } from \"./load-config\";\n+import { getConfigDir } from \"./config-dir\";\n+\n+interface GlobalConfigOptions {\n+\tname?: string;\n+}\n+type RealizedGlobalConfigOptions = Required<GlobalConfigOptions>;\n+\n+export class GlobalConfig {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2243869406",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3706,
        "pr_file": "packages/better-auth/src/config/index.ts",
        "discussion_id": "2243869406",
        "commented_code": "@@ -0,0 +1,80 @@\n+import fs from \"node:fs/promises\";\n+import path from \"node:path\";\n+\n+import { loadConfig } from \"./load-config\";\n+import { getConfigDir } from \"./config-dir\";\n+\n+interface GlobalConfigOptions {\n+\tname?: string;\n+}\n+type RealizedGlobalConfigOptions = Required<GlobalConfigOptions>;\n+\n+export class GlobalConfig {",
        "comment_created_at": "2025-07-30T21:13:49+00:00",
        "comment_author": "Bekacru",
        "comment_body": "lets avoid using class unless it's very necessary ",
        "pr_file_module": null
      },
      {
        "comment_id": "2244660083",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3706,
        "pr_file": "packages/better-auth/src/config/index.ts",
        "discussion_id": "2243869406",
        "commented_code": "@@ -0,0 +1,80 @@\n+import fs from \"node:fs/promises\";\n+import path from \"node:path\";\n+\n+import { loadConfig } from \"./load-config\";\n+import { getConfigDir } from \"./config-dir\";\n+\n+interface GlobalConfigOptions {\n+\tname?: string;\n+}\n+type RealizedGlobalConfigOptions = Required<GlobalConfigOptions>;\n+\n+export class GlobalConfig {",
        "comment_created_at": "2025-07-31T08:04:19+00:00",
        "comment_author": "frectonz",
        "comment_body": "I have updated to use a `createConfig` function instead now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083568208",
    "pr_number": 2514,
    "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
    "created_at": "2025-05-11T16:35:17+00:00",
    "commented_code": "? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2083568208",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
        "discussion_id": "2083568208",
        "commented_code": "@@ -165,21 +167,15 @@ export const apiKey = (options?: ApiKeyOptions) => {\n \t\t\t\t\t\t\t? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
        "comment_created_at": "2025-05-11T16:35:17+00:00",
        "comment_author": "rxri",
        "comment_body": "just use `await deleteAllExpiredApiKeys(ctx.context)`. I don't see a reason for duplicating the function in this case tbh\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2084121806",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
        "discussion_id": "2083568208",
        "commented_code": "@@ -165,21 +167,15 @@ export const apiKey = (options?: ApiKeyOptions) => {\n \t\t\t\t\t\t\t? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
        "comment_created_at": "2025-05-12T08:29:02+00:00",
        "comment_author": "ntgussoni",
        "comment_body": "@rxri the endpoint and the middleware take a different context, that's why i made them separate. Also, I think it's better to keep them isolated, because I don't need the whole route, just the method which is shared all across.\r\n<img width=\"1894\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0db96c66-7857-4f7d-a363-e33d98cc5922\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2084597703",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
        "discussion_id": "2083568208",
        "commented_code": "@@ -165,21 +167,15 @@ export const apiKey = (options?: ApiKeyOptions) => {\n \t\t\t\t\t\t\t? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
        "comment_created_at": "2025-05-12T12:46:20+00:00",
        "comment_author": "rxri",
        "comment_body": "I see, but wouldn't it be better to just move it off from `createApiKeyRoutes` and then export the function and import it when you need it...? That's just my opinion in the end",
        "pr_file_module": null
      },
      {
        "comment_id": "2084638906",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
        "discussion_id": "2083568208",
        "commented_code": "@@ -165,21 +167,15 @@ export const apiKey = (options?: ApiKeyOptions) => {\n \t\t\t\t\t\t\t? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
        "comment_created_at": "2025-05-12T13:08:31+00:00",
        "comment_author": "ntgussoni",
        "comment_body": "I was gonna say that the method needs to be in the closure, together with lastUsed but it's the same if its at the module level.\r\n\r\nI've moved it out, removed the alias _ i created and reused the same function.  Let me know what you think",
        "pr_file_module": null
      },
      {
        "comment_id": "2087143802",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/index.ts",
        "discussion_id": "2083568208",
        "commented_code": "@@ -165,21 +167,15 @@ export const apiKey = (options?: ApiKeyOptions) => {\n \t\t\t\t\t\t\t? key\n \t\t\t\t\t\t\t: await defaultKeyHasher(key);\n \n-\t\t\t\t\t\tconst apiKey = await ctx.context.adapter.findOne<ApiKey>({\n-\t\t\t\t\t\t\tmodel: API_KEY_TABLE_NAME,\n-\t\t\t\t\t\t\twhere: [\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tfield: \"key\",\n-\t\t\t\t\t\t\t\t\tvalue: hashed,\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t],\n+\t\t\t\t\t\tconst apiKey = await validateApiKey({\n+\t\t\t\t\t\t\thashedKey: hashed,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t\topts,\n+\t\t\t\t\t\t\tschema,\n \t\t\t\t\t\t});\n \n-\t\t\t\t\t\tif (!apiKey) {\n-\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\t\t\t\t\t\tmessage: ERROR_CODES.INVALID_API_KEY,\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tawait routes._deleteAllExpiredApiKeys(ctx.context);",
        "comment_created_at": "2025-05-13T15:45:36+00:00",
        "comment_author": "rxri",
        "comment_body": "yea that's fine for sure ^^",
        "pr_file_module": null
      }
    ]
  }
]