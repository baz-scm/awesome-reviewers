[
  {
    "discussion_id": "2255835739",
    "pr_number": 3811,
    "pr_file": "packages/better-auth/src/plugins/device-authorization/index.ts",
    "created_at": "2025-08-06T04:31:40+00:00",
    "commented_code": "+import * as z from \"zod/v4\";\n+import { createAuthEndpoint } from \"../../api/call\";\n+import type { BetterAuthPlugin } from \"../../types/plugins\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { generateRandomString } from \"../../crypto\";\n+import type { AuthPluginSchema } from \"../../types/plugins\";\n+import type { FieldAttribute } from \"../../db/field\";\n+import { getSessionFromCtx } from \"../../api/routes/session\";\n+\n+interface DeviceAuthorizationOptions {\n+\t/**\n+\t * Time in seconds until the device code expires.\n+\t * @default 1800 (30 minutes)\n+\t */\n+\texpiresIn?: number;\n+\t/**\n+\t * Time in seconds between polling attempts.\n+\t * @default 5\n+\t */\n+\tinterval?: number;\n+\t/**\n+\t * Length of the device code.\n+\t * @default 8\n+\t */\n+\tdeviceCodeLength?: number;\n+\t/**\n+\t * Length of the user code.\n+\t * @default 6\n+\t */\n+\tuserCodeLength?: number;\n+\t/**\n+\t * Character set for user code generation.\n+\t * @default \"A-Z0-9\" (excluding similar looking characters)\n+\t */\n+\tuserCodeCharset?: string;\n+\t/**\n+\t * Verification URI for the user to visit.\n+\t */\n+\tverificationUri?: string;\n+\t/**\n+\t * Function to generate a device code.\n+\t */\n+\tgenerateDeviceCode?: () => Promise<string> | string;\n+\t/**\n+\t * Function to generate a user code.\n+\t */\n+\tgenerateUserCode?: () => Promise<string> | string;\n+\t/**\n+\t * Whether to format user codes with hyphens for readability.\n+\t * @default true\n+\t */\n+\tformatUserCode?: boolean;\n+\t/**\n+\t * Enable rate limiting for token polling.\n+\t * @default true\n+\t */\n+\tenableRateLimiting?: boolean;\n+}\n+\n+const deviceCodeSchema: AuthPluginSchema = {\n+\tdeviceCode: {\n+\t\tfields: {\n+\t\t\tdeviceCode: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tuserCode: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tuserId: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\texpiresAt: {\n+\t\t\t\ttype: \"date\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tstatus: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t\tdefaultValue: \"pending\",\n+\t\t\t},\n+\t\t\tlastPolledAt: {\n+\t\t\t\ttype: \"date\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tpollingInterval: {\n+\t\t\t\ttype: \"number\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tclientId: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tscope: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t} satisfies Record<string, FieldAttribute>,\n+\t},\n+};\n+\n+export { deviceAuthorizationClient } from \"./client\";\n+\n+export const deviceAuthorization = (\n+\toptions: DeviceAuthorizationOptions = {},\n+) => {\n+\tconst opts = {\n+\t\texpiresIn: 1800,\n+\t\tinterval: 5,\n+\t\tdeviceCodeLength: 40,\n+\t\tuserCodeLength: 8,\n+\t\tuserCodeCharset: \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\", // Excluding similar looking characters\n+\t\tformatUserCode: true,\n+\t\tenableRateLimiting: true,\n+\t\t...options,\n+\t};\n+\n+\tconst generateDeviceCode = async () => {\n+\t\tif (opts.generateDeviceCode) {\n+\t\t\treturn opts.generateDeviceCode();\n+\t\t}\n+\t\treturn generateRandomString(opts.deviceCodeLength, \"a-z\", \"A-Z\", \"0-9\");\n+\t};\n+\n+\tconst generateUserCode = async () => {\n+\t\tif (opts.generateUserCode) {\n+\t\t\treturn opts.generateUserCode();\n+\t\t}\n+\t\tconst chars = opts.userCodeCharset;\n+\t\tlet code = \"\";\n+\t\tfor (let i = 0; i < opts.userCodeLength; i++) {\n+\t\t\tcode += chars[Math.floor(Math.random() * chars.length)];\n+\t\t}\n+\t\treturn code;\n+\t};\n+\n+\tconst formatUserCode = (code: string) => {\n+\t\t// Format with hyphen for readability if enabled (e.g., \"WDJB-MJHT\")\n+\t\tif (opts.formatUserCode && code.length === 8) {\n+\t\t\treturn `${code.slice(0, 4)}-${code.slice(4)}`;\n+\t\t}\n+\t\treturn code;\n+\t};\n+\n+\treturn {\n+\t\tid: \"device-authorization\",\n+\t\tschema: deviceCodeSchema,\n+\t\tendpoints: {\n+\t\t\tdeviceCode: createAuthEndpoint(\n+\t\t\t\t\"/device/code\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tclient_id: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The client ID of the application\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tscope: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.meta({\n+\t\t\t\t\t\t\t\tdescription: \"Space-separated list of scopes\",\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t\t.optional(),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Request a device and user code\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Success\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tdevice_code: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The device verification code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tuser_code: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The user code to display\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tverification_uri: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The URL for user verification\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tverification_uri_complete: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The complete URL with user code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\texpires_in: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"number\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription:\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Lifetime in seconds of the device code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tinterval: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"number\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"Minimum polling interval in seconds\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst deviceCode = await generateDeviceCode();\n+\t\t\t\t\tconst userCode = await generateUserCode();\n+\t\t\t\t\tconst expiresAt = new Date(Date.now() + opts.expiresIn * 1000);\n+\n+\t\t\t\t\tawait ctx.context.adapter.create({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\tdata: {\n+\t\t\t\t\t\t\tdeviceCode,\n+\t\t\t\t\t\t\tuserCode,\n+\t\t\t\t\t\t\texpiresAt,\n+\t\t\t\t\t\t\tstatus: \"pending\",\n+\t\t\t\t\t\t\tpollingInterval: opts.interval,\n+\t\t\t\t\t\t\tclientId: ctx.body.client_id,\n+\t\t\t\t\t\t\tscope: ctx.body.scope,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tconst baseURL = new URL(ctx.context.baseURL);\n+\t\t\t\t\tconst verification_uri =\n+\t\t\t\t\t\topts.verificationUri || new URL(\"/device\", baseURL).toString();\n+\t\t\t\t\tconst formattedUserCode = formatUserCode(userCode);\n+\t\t\t\t\tconst verification_uri_complete = `${verification_uri}?user_code=${formattedUserCode}`;\n+\n+\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\tdevice_code: deviceCode,\n+\t\t\t\t\t\tuser_code: formattedUserCode,\n+\t\t\t\t\t\tverification_uri,\n+\t\t\t\t\t\tverification_uri_complete,\n+\t\t\t\t\t\texpires_in: opts.expiresIn,\n+\t\t\t\t\t\tinterval: opts.interval,\n+\t\t\t\t\t});\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\tdeviceToken: createAuthEndpoint(\n+\t\t\t\t\"/device/token\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tgrant_type: z\n+\t\t\t\t\t\t\t.literal(\"urn:ietf:params:oauth:grant-type:device_code\")\n+\t\t\t\t\t\t\t.meta({\n+\t\t\t\t\t\t\t\tdescription: \"The grant type for device flow\",\n+\t\t\t\t\t\t\t}),\n+\t\t\t\t\t\tdevice_code: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The device verification code\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tclient_id: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The client ID of the application\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Exchange device code for access token\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Success\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tsession: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"#/components/schemas/Session\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"#/components/schemas/User\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t400: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Error response\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\terror: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tenum: [\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"authorization_pending\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"slow_down\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expired_token\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"access_denied\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\terrorDescription: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { device_code } = ctx.body;\n+\n+\t\t\t\t\tconst deviceCodeRecord = await ctx.context.adapter.findOne<{\n+\t\t\t\t\t\tid: string;\n+\t\t\t\t\t\tdeviceCode: string;\n+\t\t\t\t\t\tuserCode: string;\n+\t\t\t\t\t\tuserId?: string;\n+\t\t\t\t\t\texpiresAt: Date;\n+\t\t\t\t\t\tstatus: string;\n+\t\t\t\t\t\tlastPolledAt?: Date;\n+\t\t\t\t\t\tpollingInterval?: number;\n+\t\t\t\t\t\tclientId?: string;\n+\t\t\t\t\t\tscope?: string;\n+\t\t\t\t\t}>({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"deviceCode\",\n+\t\t\t\t\t\t\t\tvalue: device_code,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!deviceCodeRecord) {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"invalid_grant\",\n+\t\t\t\t\t\t\t\terror_description: \"Invalid device code\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Check rate limiting\n+\t\t\t\t\tif (opts.enableRateLimiting && deviceCodeRecord.lastPolledAt) {\n+\t\t\t\t\t\tconst timeSinceLastPoll =\n+\t\t\t\t\t\t\tDate.now() - deviceCodeRecord.lastPolledAt.getTime();\n+\t\t\t\t\t\tconst minInterval =\n+\t\t\t\t\t\t\t(deviceCodeRecord.pollingInterval || opts.interval) * 1000;\n+\n+\t\t\t\t\t\tif (timeSinceLastPoll < minInterval) {\n+\t\t\t\t\t\t\t// Increase polling interval if polling too frequently\n+\t\t\t\t\t\t\tconst newInterval = Math.min(\n+\t\t\t\t\t\t\t\t(deviceCodeRecord.pollingInterval || opts.interval) + 5,\n+\t\t\t\t\t\t\t\t600,\n+\t\t\t\t\t\t\t); // Max 10 minutes\n+\t\t\t\t\t\t\tawait ctx.context.adapter.update({\n+\t\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\tupdate: {\n+\t\t\t\t\t\t\t\t\tpollingInterval: newInterval,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"slow_down\",\n+\t\t\t\t\t\t\t\t\terror_description: \"Polling too frequently\",\n+\t\t\t\t\t\t\t\t\tinterval: newInterval,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Update last polled time\n+\t\t\t\t\tawait ctx.context.adapter.update({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\tupdate: {\n+\t\t\t\t\t\t\tlastPolledAt: new Date(),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (deviceCodeRecord.expiresAt < new Date()) {\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"expired_token\",\n+\t\t\t\t\t\t\t\terror_description: \"Device code has expired\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (deviceCodeRecord.status === \"pending\") {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"authorization_pending\",\n+\t\t\t\t\t\t\t\terror_description: \"Authorization pending\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (deviceCodeRecord.status === \"denied\") {\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"access_denied\",\n+\t\t\t\t\t\t\t\terror_description: \"Access denied\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (\n+\t\t\t\t\t\tdeviceCodeRecord.status === \"approved\" &&\n+\t\t\t\t\t\tdeviceCodeRecord.userId\n+\t\t\t\t\t) {\n+\t\t\t\t\t\t// Delete the device code after successful authorization\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\tconst user = await ctx.context.internalAdapter.findUserById(\n+\t\t\t\t\t\t\tdeviceCodeRecord.userId,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\t\t\terror_description: \"User not found\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tconst session = await ctx.context.internalAdapter.createSession(\n+\t\t\t\t\t\t\tuser.id,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!session) {\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\t\t\terror_description: \"Failed to create session\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t// Return OAuth 2.0 compliant token response\n+\t\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\t\taccess_token: session.token,\n+\t\t\t\t\t\t\ttoken_type: \"Bearer\",\n+\t\t\t\t\t\t\texpires_in: Math.floor(\n+\t\t\t\t\t\t\t\t(new Date(session.expiresAt).getTime() - Date.now()) / 1000,\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\tscope: deviceCodeRecord.scope || \"\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\terror_description: \"Invalid device code status\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t);\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\tdeviceVerify: createAuthEndpoint(\n+\t\t\t\t\"/device\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tquery: z.object({\n+\t\t\t\t\t\tuser_code: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The user code to verify\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Display device verification page\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Verification page HTML\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"text/html\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\t// This endpoint would typically serve an HTML page for user verification\n+\t\t\t\t\t// For now, we'll return a simple JSON response\n+\t\t\t\t\tconst { user_code } = ctx.query;\n+\t\t\t\t\tconst cleanUserCode = user_code.replace(/-/g, \"\");\n+\n+\t\t\t\t\tconst deviceCodeRecord = await ctx.context.adapter.findOne<{\n+\t\t\t\t\t\tid: string;\n+\t\t\t\t\t\tdeviceCode: string;\n+\t\t\t\t\t\tuserCode: string;\n+\t\t\t\t\t\tuserId?: string;\n+\t\t\t\t\t\texpiresAt: Date;\n+\t\t\t\t\t\tstatus: string;\n+\t\t\t\t\t\tlastPolledAt?: Date;\n+\t\t\t\t\t\tpollingInterval?: number;\n+\t\t\t\t\t\tclientId?: string;\n+\t\t\t\t\t\tscope?: string;\n+\t\t\t\t\t}>({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"userCode\",\n+\t\t\t\t\t\t\t\tvalue: cleanUserCode,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!deviceCodeRecord) {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2255835739",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3811,
        "pr_file": "packages/better-auth/src/plugins/device-authorization/index.ts",
        "discussion_id": "2255835739",
        "commented_code": "@@ -0,0 +1,858 @@\n+import * as z from \"zod/v4\";\n+import { createAuthEndpoint } from \"../../api/call\";\n+import type { BetterAuthPlugin } from \"../../types/plugins\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { generateRandomString } from \"../../crypto\";\n+import type { AuthPluginSchema } from \"../../types/plugins\";\n+import type { FieldAttribute } from \"../../db/field\";\n+import { getSessionFromCtx } from \"../../api/routes/session\";\n+\n+interface DeviceAuthorizationOptions {\n+\t/**\n+\t * Time in seconds until the device code expires.\n+\t * @default 1800 (30 minutes)\n+\t */\n+\texpiresIn?: number;\n+\t/**\n+\t * Time in seconds between polling attempts.\n+\t * @default 5\n+\t */\n+\tinterval?: number;\n+\t/**\n+\t * Length of the device code.\n+\t * @default 8\n+\t */\n+\tdeviceCodeLength?: number;\n+\t/**\n+\t * Length of the user code.\n+\t * @default 6\n+\t */\n+\tuserCodeLength?: number;\n+\t/**\n+\t * Character set for user code generation.\n+\t * @default \"A-Z0-9\" (excluding similar looking characters)\n+\t */\n+\tuserCodeCharset?: string;\n+\t/**\n+\t * Verification URI for the user to visit.\n+\t */\n+\tverificationUri?: string;\n+\t/**\n+\t * Function to generate a device code.\n+\t */\n+\tgenerateDeviceCode?: () => Promise<string> | string;\n+\t/**\n+\t * Function to generate a user code.\n+\t */\n+\tgenerateUserCode?: () => Promise<string> | string;\n+\t/**\n+\t * Whether to format user codes with hyphens for readability.\n+\t * @default true\n+\t */\n+\tformatUserCode?: boolean;\n+\t/**\n+\t * Enable rate limiting for token polling.\n+\t * @default true\n+\t */\n+\tenableRateLimiting?: boolean;\n+}\n+\n+const deviceCodeSchema: AuthPluginSchema = {\n+\tdeviceCode: {\n+\t\tfields: {\n+\t\t\tdeviceCode: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tuserCode: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tuserId: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\texpiresAt: {\n+\t\t\t\ttype: \"date\",\n+\t\t\t\trequired: true,\n+\t\t\t},\n+\t\t\tstatus: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: true,\n+\t\t\t\tdefaultValue: \"pending\",\n+\t\t\t},\n+\t\t\tlastPolledAt: {\n+\t\t\t\ttype: \"date\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tpollingInterval: {\n+\t\t\t\ttype: \"number\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tclientId: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t\tscope: {\n+\t\t\t\ttype: \"string\",\n+\t\t\t\trequired: false,\n+\t\t\t},\n+\t\t} satisfies Record<string, FieldAttribute>,\n+\t},\n+};\n+\n+export { deviceAuthorizationClient } from \"./client\";\n+\n+export const deviceAuthorization = (\n+\toptions: DeviceAuthorizationOptions = {},\n+) => {\n+\tconst opts = {\n+\t\texpiresIn: 1800,\n+\t\tinterval: 5,\n+\t\tdeviceCodeLength: 40,\n+\t\tuserCodeLength: 8,\n+\t\tuserCodeCharset: \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\", // Excluding similar looking characters\n+\t\tformatUserCode: true,\n+\t\tenableRateLimiting: true,\n+\t\t...options,\n+\t};\n+\n+\tconst generateDeviceCode = async () => {\n+\t\tif (opts.generateDeviceCode) {\n+\t\t\treturn opts.generateDeviceCode();\n+\t\t}\n+\t\treturn generateRandomString(opts.deviceCodeLength, \"a-z\", \"A-Z\", \"0-9\");\n+\t};\n+\n+\tconst generateUserCode = async () => {\n+\t\tif (opts.generateUserCode) {\n+\t\t\treturn opts.generateUserCode();\n+\t\t}\n+\t\tconst chars = opts.userCodeCharset;\n+\t\tlet code = \"\";\n+\t\tfor (let i = 0; i < opts.userCodeLength; i++) {\n+\t\t\tcode += chars[Math.floor(Math.random() * chars.length)];\n+\t\t}\n+\t\treturn code;\n+\t};\n+\n+\tconst formatUserCode = (code: string) => {\n+\t\t// Format with hyphen for readability if enabled (e.g., \"WDJB-MJHT\")\n+\t\tif (opts.formatUserCode && code.length === 8) {\n+\t\t\treturn `${code.slice(0, 4)}-${code.slice(4)}`;\n+\t\t}\n+\t\treturn code;\n+\t};\n+\n+\treturn {\n+\t\tid: \"device-authorization\",\n+\t\tschema: deviceCodeSchema,\n+\t\tendpoints: {\n+\t\t\tdeviceCode: createAuthEndpoint(\n+\t\t\t\t\"/device/code\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tclient_id: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The client ID of the application\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tscope: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.meta({\n+\t\t\t\t\t\t\t\tdescription: \"Space-separated list of scopes\",\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t\t.optional(),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Request a device and user code\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Success\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tdevice_code: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The device verification code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tuser_code: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The user code to display\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tverification_uri: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The URL for user verification\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tverification_uri_complete: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"The complete URL with user code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\texpires_in: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"number\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription:\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Lifetime in seconds of the device code\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tinterval: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"number\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tdescription: \"Minimum polling interval in seconds\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst deviceCode = await generateDeviceCode();\n+\t\t\t\t\tconst userCode = await generateUserCode();\n+\t\t\t\t\tconst expiresAt = new Date(Date.now() + opts.expiresIn * 1000);\n+\n+\t\t\t\t\tawait ctx.context.adapter.create({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\tdata: {\n+\t\t\t\t\t\t\tdeviceCode,\n+\t\t\t\t\t\t\tuserCode,\n+\t\t\t\t\t\t\texpiresAt,\n+\t\t\t\t\t\t\tstatus: \"pending\",\n+\t\t\t\t\t\t\tpollingInterval: opts.interval,\n+\t\t\t\t\t\t\tclientId: ctx.body.client_id,\n+\t\t\t\t\t\t\tscope: ctx.body.scope,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tconst baseURL = new URL(ctx.context.baseURL);\n+\t\t\t\t\tconst verification_uri =\n+\t\t\t\t\t\topts.verificationUri || new URL(\"/device\", baseURL).toString();\n+\t\t\t\t\tconst formattedUserCode = formatUserCode(userCode);\n+\t\t\t\t\tconst verification_uri_complete = `${verification_uri}?user_code=${formattedUserCode}`;\n+\n+\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\tdevice_code: deviceCode,\n+\t\t\t\t\t\tuser_code: formattedUserCode,\n+\t\t\t\t\t\tverification_uri,\n+\t\t\t\t\t\tverification_uri_complete,\n+\t\t\t\t\t\texpires_in: opts.expiresIn,\n+\t\t\t\t\t\tinterval: opts.interval,\n+\t\t\t\t\t});\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\tdeviceToken: createAuthEndpoint(\n+\t\t\t\t\"/device/token\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tgrant_type: z\n+\t\t\t\t\t\t\t.literal(\"urn:ietf:params:oauth:grant-type:device_code\")\n+\t\t\t\t\t\t\t.meta({\n+\t\t\t\t\t\t\t\tdescription: \"The grant type for device flow\",\n+\t\t\t\t\t\t\t}),\n+\t\t\t\t\t\tdevice_code: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The device verification code\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t\tclient_id: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The client ID of the application\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Exchange device code for access token\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Success\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\tsession: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"#/components/schemas/Session\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\tuser: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ref: \"#/components/schemas/User\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t400: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Error response\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"application/json\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"object\",\n+\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\terror: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\tenum: [\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"authorization_pending\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"slow_down\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expired_token\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"access_denied\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t\terrorDescription: {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { device_code } = ctx.body;\n+\n+\t\t\t\t\tconst deviceCodeRecord = await ctx.context.adapter.findOne<{\n+\t\t\t\t\t\tid: string;\n+\t\t\t\t\t\tdeviceCode: string;\n+\t\t\t\t\t\tuserCode: string;\n+\t\t\t\t\t\tuserId?: string;\n+\t\t\t\t\t\texpiresAt: Date;\n+\t\t\t\t\t\tstatus: string;\n+\t\t\t\t\t\tlastPolledAt?: Date;\n+\t\t\t\t\t\tpollingInterval?: number;\n+\t\t\t\t\t\tclientId?: string;\n+\t\t\t\t\t\tscope?: string;\n+\t\t\t\t\t}>({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"deviceCode\",\n+\t\t\t\t\t\t\t\tvalue: device_code,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!deviceCodeRecord) {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"invalid_grant\",\n+\t\t\t\t\t\t\t\terror_description: \"Invalid device code\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Check rate limiting\n+\t\t\t\t\tif (opts.enableRateLimiting && deviceCodeRecord.lastPolledAt) {\n+\t\t\t\t\t\tconst timeSinceLastPoll =\n+\t\t\t\t\t\t\tDate.now() - deviceCodeRecord.lastPolledAt.getTime();\n+\t\t\t\t\t\tconst minInterval =\n+\t\t\t\t\t\t\t(deviceCodeRecord.pollingInterval || opts.interval) * 1000;\n+\n+\t\t\t\t\t\tif (timeSinceLastPoll < minInterval) {\n+\t\t\t\t\t\t\t// Increase polling interval if polling too frequently\n+\t\t\t\t\t\t\tconst newInterval = Math.min(\n+\t\t\t\t\t\t\t\t(deviceCodeRecord.pollingInterval || opts.interval) + 5,\n+\t\t\t\t\t\t\t\t600,\n+\t\t\t\t\t\t\t); // Max 10 minutes\n+\t\t\t\t\t\t\tawait ctx.context.adapter.update({\n+\t\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\tupdate: {\n+\t\t\t\t\t\t\t\t\tpollingInterval: newInterval,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"slow_down\",\n+\t\t\t\t\t\t\t\t\terror_description: \"Polling too frequently\",\n+\t\t\t\t\t\t\t\t\tinterval: newInterval,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Update last polled time\n+\t\t\t\t\tawait ctx.context.adapter.update({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\tupdate: {\n+\t\t\t\t\t\t\tlastPolledAt: new Date(),\n+\t\t\t\t\t\t},\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (deviceCodeRecord.expiresAt < new Date()) {\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"expired_token\",\n+\t\t\t\t\t\t\t\terror_description: \"Device code has expired\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (deviceCodeRecord.status === \"pending\") {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"authorization_pending\",\n+\t\t\t\t\t\t\t\terror_description: \"Authorization pending\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (deviceCodeRecord.status === \"denied\") {\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\terror: \"access_denied\",\n+\t\t\t\t\t\t\t\terror_description: \"Access denied\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tstatus: 400,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (\n+\t\t\t\t\t\tdeviceCodeRecord.status === \"approved\" &&\n+\t\t\t\t\t\tdeviceCodeRecord.userId\n+\t\t\t\t\t) {\n+\t\t\t\t\t\t// Delete the device code after successful authorization\n+\t\t\t\t\t\tawait ctx.context.adapter.delete({\n+\t\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"id\",\n+\t\t\t\t\t\t\t\t\tvalue: deviceCodeRecord.id,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\tconst user = await ctx.context.internalAdapter.findUserById(\n+\t\t\t\t\t\t\tdeviceCodeRecord.userId,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\t\t\terror_description: \"User not found\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tconst session = await ctx.context.internalAdapter.createSession(\n+\t\t\t\t\t\t\tuser.id,\n+\t\t\t\t\t\t\tctx,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!session) {\n+\t\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\t\t\terror_description: \"Failed to create session\",\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t// Return OAuth 2.0 compliant token response\n+\t\t\t\t\t\treturn ctx.json({\n+\t\t\t\t\t\t\taccess_token: session.token,\n+\t\t\t\t\t\t\ttoken_type: \"Bearer\",\n+\t\t\t\t\t\t\texpires_in: Math.floor(\n+\t\t\t\t\t\t\t\t(new Date(session.expiresAt).getTime() - Date.now()) / 1000,\n+\t\t\t\t\t\t\t),\n+\t\t\t\t\t\t\tscope: deviceCodeRecord.scope || \"\",\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\n+\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\terror: \"server_error\",\n+\t\t\t\t\t\t\terror_description: \"Invalid device code status\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tstatus: 500,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t);\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\tdeviceVerify: createAuthEndpoint(\n+\t\t\t\t\"/device\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"GET\",\n+\t\t\t\t\tquery: z.object({\n+\t\t\t\t\t\tuser_code: z.string().meta({\n+\t\t\t\t\t\t\tdescription: \"The user code to verify\",\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t}),\n+\t\t\t\t\tmetadata: {\n+\t\t\t\t\t\topenapi: {\n+\t\t\t\t\t\t\tdescription: \"Display device verification page\",\n+\t\t\t\t\t\t\tresponses: {\n+\t\t\t\t\t\t\t\t200: {\n+\t\t\t\t\t\t\t\t\tdescription: \"Verification page HTML\",\n+\t\t\t\t\t\t\t\t\tcontent: {\n+\t\t\t\t\t\t\t\t\t\t\"text/html\": {\n+\t\t\t\t\t\t\t\t\t\t\tschema: {\n+\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\t// This endpoint would typically serve an HTML page for user verification\n+\t\t\t\t\t// For now, we'll return a simple JSON response\n+\t\t\t\t\tconst { user_code } = ctx.query;\n+\t\t\t\t\tconst cleanUserCode = user_code.replace(/-/g, \"\");\n+\n+\t\t\t\t\tconst deviceCodeRecord = await ctx.context.adapter.findOne<{\n+\t\t\t\t\t\tid: string;\n+\t\t\t\t\t\tdeviceCode: string;\n+\t\t\t\t\t\tuserCode: string;\n+\t\t\t\t\t\tuserId?: string;\n+\t\t\t\t\t\texpiresAt: Date;\n+\t\t\t\t\t\tstatus: string;\n+\t\t\t\t\t\tlastPolledAt?: Date;\n+\t\t\t\t\t\tpollingInterval?: number;\n+\t\t\t\t\t\tclientId?: string;\n+\t\t\t\t\t\tscope?: string;\n+\t\t\t\t\t}>({\n+\t\t\t\t\t\tmodel: \"deviceCode\",\n+\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tfield: \"userCode\",\n+\t\t\t\t\t\t\t\tvalue: cleanUserCode,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t],\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (!deviceCodeRecord) {\n+\t\t\t\t\t\treturn ctx.json(\n+\t\t\t\t\t\t\t{",
        "comment_created_at": "2025-08-06T04:31:40+00:00",
        "comment_author": "Bekacru",
        "comment_body": "I think here you might want to use `throw ctx.error` or `throw new APIError` so the return type isn\u2019t inferred. This should be done for all error returns",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2231118655",
    "pr_number": 3572,
    "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
    "created_at": "2025-07-25T13:40:55+00:00",
    "commented_code": "-import { importJWK, SignJWT } from \"jose\";\n+import {\n+\timportJWK,\n+\texportJWK,\n+\tgenerateKeyPair,\n+\tSignJWT,\n+\ttype JWTPayload,\n+} from \"jose\";\n import type { GenericEndpointContext } from \"../../types\";\n import { BetterAuthError } from \"../../error\";\n import { symmetricDecrypt, symmetricEncrypt } from \"../../crypto\";\n-import { generateExportedKeyPair, type JwtOptions } from \".\";\n+import { getJwtPlugin, toExpJWT } from \"./utils\";\n import type { Jwk } from \"./schema\";\n import { getJwksAdapter } from \"./adapter\";\n+import type { JwtPluginOptions } from \"./types\";\n \n-export async function getJwtToken(\n+/**\n+ * Signs a payload in jwt format.\n+ *\n+ * @internal - SCOPED TO PLUGIN. Use signJwt for usage in other plugins.\n+ *\n+ * @param ctx - endpoint context\n+ * @param payload - payload to sign\n+ */\n+export async function signJwtPayload(\n \tctx: GenericEndpointContext,\n-\toptions?: JwtOptions,\n+\tpayload: JWTPayload,\n+\toptions?: JwtPluginOptions,\n ) {\n+\tconst disallowFutureIatTime = !(options?.jwt?.allowFutureIatTime ?? false);\n+\tconst disallowLargerExpTime = !(options?.jwt?.allowLongerExpTime ?? false);\n+\tconst disallowIssuerMismatch = !(options?.jwt?.allowIssuerMismatch ?? false);\n+\tconst disallowAudienceMismatch = !(\n+\t\toptions?.jwt?.allowAudienceMismatch ?? false\n+\t);\n+\n+\t// Iat safety check\n+\tlet iat = payload.iat;\n+\tif (disallowFutureIatTime && iat && iat > Date.now() / 1000) {\n+\t\tthrow new Error(\"unable to set a future iat time\");",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2231118655",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3572,
        "pr_file": "packages/better-auth/src/plugins/jwt/sign.ts",
        "discussion_id": "2231118655",
        "commented_code": "@@ -1,42 +1,95 @@\n-import { importJWK, SignJWT } from \"jose\";\n+import {\n+\timportJWK,\n+\texportJWK,\n+\tgenerateKeyPair,\n+\tSignJWT,\n+\ttype JWTPayload,\n+} from \"jose\";\n import type { GenericEndpointContext } from \"../../types\";\n import { BetterAuthError } from \"../../error\";\n import { symmetricDecrypt, symmetricEncrypt } from \"../../crypto\";\n-import { generateExportedKeyPair, type JwtOptions } from \".\";\n+import { getJwtPlugin, toExpJWT } from \"./utils\";\n import type { Jwk } from \"./schema\";\n import { getJwksAdapter } from \"./adapter\";\n+import type { JwtPluginOptions } from \"./types\";\n \n-export async function getJwtToken(\n+/**\n+ * Signs a payload in jwt format.\n+ *\n+ * @internal - SCOPED TO PLUGIN. Use signJwt for usage in other plugins.\n+ *\n+ * @param ctx - endpoint context\n+ * @param payload - payload to sign\n+ */\n+export async function signJwtPayload(\n \tctx: GenericEndpointContext,\n-\toptions?: JwtOptions,\n+\tpayload: JWTPayload,\n+\toptions?: JwtPluginOptions,\n ) {\n+\tconst disallowFutureIatTime = !(options?.jwt?.allowFutureIatTime ?? false);\n+\tconst disallowLargerExpTime = !(options?.jwt?.allowLongerExpTime ?? false);\n+\tconst disallowIssuerMismatch = !(options?.jwt?.allowIssuerMismatch ?? false);\n+\tconst disallowAudienceMismatch = !(\n+\t\toptions?.jwt?.allowAudienceMismatch ?? false\n+\t);\n+\n+\t// Iat safety check\n+\tlet iat = payload.iat;\n+\tif (disallowFutureIatTime && iat && iat > Date.now() / 1000) {\n+\t\tthrow new Error(\"unable to set a future iat time\");",
        "comment_created_at": "2025-07-25T13:40:55+00:00",
        "comment_author": "LightTab2",
        "comment_body": "Prefer `BetterAuthError` in place of `Error`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2283993896",
    "pr_number": 4074,
    "pr_file": "packages/better-auth/src/plugins/jwt/jwt.test.ts",
    "created_at": "2025-08-19T03:53:22+00:00",
    "commented_code": "});\n });\n \n+describe(\"jwt - remote signing\", async (it) => {\n+\tit(\"should fail if sign is defined and remoteUrl is not\", async () => {\n+\t\texpect(() =>\n+\t\t\tgetTestInstance({\n+\t\t\t\tplugins: [\n+\t\t\t\t\tjwt({\n+\t\t\t\t\t\tjwt: {\n+\t\t\t\t\t\t\tsign: () => {\n+\t\t\t\t\t\t\t\treturn \"123\";\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}),\n+\t\t\t\t],\n+\t\t\t\tlogger: {\n+\t\t\t\t\tlevel: \"error\",\n+\t\t\t\t},\n+\t\t\t}),\n+\t\t).toThrow();",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2283993896",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 4074,
        "pr_file": "packages/better-auth/src/plugins/jwt/jwt.test.ts",
        "discussion_id": "2283993896",
        "commented_code": "@@ -426,6 +426,27 @@ describe(\"signJWT\", async (it) => {\n \t});\n });\n \n+describe(\"jwt - remote signing\", async (it) => {\n+\tit(\"should fail if sign is defined and remoteUrl is not\", async () => {\n+\t\texpect(() =>\n+\t\t\tgetTestInstance({\n+\t\t\t\tplugins: [\n+\t\t\t\t\tjwt({\n+\t\t\t\t\t\tjwt: {\n+\t\t\t\t\t\t\tsign: () => {\n+\t\t\t\t\t\t\t\treturn \"123\";\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}),\n+\t\t\t\t],\n+\t\t\t\tlogger: {\n+\t\t\t\t\tlevel: \"error\",\n+\t\t\t\t},\n+\t\t\t}),\n+\t\t).toThrow();",
        "comment_created_at": "2025-08-19T03:53:22+00:00",
        "comment_author": "himself65",
        "comment_body": "use `toThrowError` with proper error detail",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2073721833",
    "pr_number": 2514,
    "pr_file": "packages/better-auth/src/plugins/api-key/routes/verify-api-key.ts",
    "created_at": "2025-05-05T15:58:51+00:00",
    "commented_code": "});\n \n \tif (!newApiKey) {\n-\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\tmessage: ERROR_CODES.USAGE_EXCEEDED,\n-\t\t\tcode: \"USAGE_EXCEEDED\" as const,\n+\t\tthrow new APIError(\"INTERNAL_SERVER_ERROR\", {\n+\t\t\tmessage: \"Failed to update API key\",",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2073721833",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/routes/verify-api-key.ts",
        "discussion_id": "2073721833",
        "commented_code": "@@ -167,9 +167,9 @@ export async function validateApiKey({\n \t});\n \n \tif (!newApiKey) {\n-\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\tmessage: ERROR_CODES.USAGE_EXCEEDED,\n-\t\t\tcode: \"USAGE_EXCEEDED\" as const,\n+\t\tthrow new APIError(\"INTERNAL_SERVER_ERROR\", {\n+\t\t\tmessage: \"Failed to update API key\",",
        "comment_created_at": "2025-05-05T15:58:51+00:00",
        "comment_author": "Bekacru",
        "comment_body": "let's put this under ERROR_CODES",
        "pr_file_module": null
      },
      {
        "comment_id": "2076158286",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2514,
        "pr_file": "packages/better-auth/src/plugins/api-key/routes/verify-api-key.ts",
        "discussion_id": "2073721833",
        "commented_code": "@@ -167,9 +167,9 @@ export async function validateApiKey({\n \t});\n \n \tif (!newApiKey) {\n-\t\tthrow new APIError(\"UNAUTHORIZED\", {\n-\t\t\tmessage: ERROR_CODES.USAGE_EXCEEDED,\n-\t\t\tcode: \"USAGE_EXCEEDED\" as const,\n+\t\tthrow new APIError(\"INTERNAL_SERVER_ERROR\", {\n+\t\t\tmessage: \"Failed to update API key\",",
        "comment_created_at": "2025-05-06T19:56:04+00:00",
        "comment_author": "ntgussoni",
        "comment_body": "done @Bekacru ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2041125261",
    "pr_number": 2255,
    "pr_file": "packages/better-auth/src/plugins/haveibeenpwned/index.ts",
    "created_at": "2025-04-13T13:25:38+00:00",
    "commented_code": "import { createAuthMiddleware } from \"../../api\";\n \n const ERROR_CODES = {\n-\tPASSWORD_COMPROMISED:\n-\t\t\"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\n+\tPASSWORD_COMPROMISED: \"PASSWORD_COMPROMISED\"",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2041125261",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2255,
        "pr_file": "packages/better-auth/src/plugins/haveibeenpwned/index.ts",
        "discussion_id": "2041125261",
        "commented_code": "@@ -5,8 +5,7 @@ import type { BetterAuthPlugin } from \"../../types\";\n import { createAuthMiddleware } from \"../../api\";\n \n const ERROR_CODES = {\n-\tPASSWORD_COMPROMISED:\n-\t\t\"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\n+\tPASSWORD_COMPROMISED: \"PASSWORD_COMPROMISED\"",
        "comment_created_at": "2025-04-13T13:25:38+00:00",
        "comment_author": "Bekacru",
        "comment_body": "this is meant to be `code:message`",
        "pr_file_module": null
      },
      {
        "comment_id": "2041126847",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2255,
        "pr_file": "packages/better-auth/src/plugins/haveibeenpwned/index.ts",
        "discussion_id": "2041125261",
        "commented_code": "@@ -5,8 +5,7 @@ import type { BetterAuthPlugin } from \"../../types\";\n import { createAuthMiddleware } from \"../../api\";\n \n const ERROR_CODES = {\n-\tPASSWORD_COMPROMISED:\n-\t\t\"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\n+\tPASSWORD_COMPROMISED: \"PASSWORD_COMPROMISED\"",
        "comment_created_at": "2025-04-13T13:34:36+00:00",
        "comment_author": "JE4GLE",
        "comment_body": "Then we need to change something else, because I get the following:\r\n```json\r\n{\r\n    code: \"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\r\n    message: \"My custom message\",\r\n    status: 400,\r\n    statusText: \"Bad Request\"\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2041127387",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2255,
        "pr_file": "packages/better-auth/src/plugins/haveibeenpwned/index.ts",
        "discussion_id": "2041125261",
        "commented_code": "@@ -5,8 +5,7 @@ import type { BetterAuthPlugin } from \"../../types\";\n import { createAuthMiddleware } from \"../../api\";\n \n const ERROR_CODES = {\n-\tPASSWORD_COMPROMISED:\n-\t\t\"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\n+\tPASSWORD_COMPROMISED: \"PASSWORD_COMPROMISED\"",
        "comment_created_at": "2025-04-13T13:37:30+00:00",
        "comment_author": "JE4GLE",
        "comment_body": "See [the test run](https://github.com/better-auth/better-auth/actions/runs/14429918450/job/40463461079) on your commit",
        "pr_file_module": null
      },
      {
        "comment_id": "2041127860",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2255,
        "pr_file": "packages/better-auth/src/plugins/haveibeenpwned/index.ts",
        "discussion_id": "2041125261",
        "commented_code": "@@ -5,8 +5,7 @@ import type { BetterAuthPlugin } from \"../../types\";\n import { createAuthMiddleware } from \"../../api\";\n \n const ERROR_CODES = {\n-\tPASSWORD_COMPROMISED:\n-\t\t\"THE_PASSWORD_YOU_ENTERED_HAS_BEEN_COMPROMISED_PLEASE_CHOOSE_A_DIFFERENT_PASSWORD\",\n+\tPASSWORD_COMPROMISED: \"PASSWORD_COMPROMISED\"",
        "comment_created_at": "2025-04-13T13:40:11+00:00",
        "comment_author": "Bekacru",
        "comment_body": "if you don't provide a code when you throw an error, it just defaults to merging the error message with `_` and all capital. Need to explicitly pass the error code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1829007467",
    "pr_number": 408,
    "pr_file": "packages/better-auth/src/plugins/magic-link/index.ts",
    "created_at": "2024-11-05T09:23:30+00:00",
    "commented_code": "},\n \t\t\t\tasync (ctx) => {\n \t\t\t\t\tconst { email } = ctx.body;\n+\n+\t\t\t\t\tif (options.disableSignUp) {\n+\t\t\t\t\t\tconst user = await ctx.context.internalAdapter.findUserByEmail(email);\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\tthrow new APIError(\"USER_NOT_FOUND\", {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "1829007467",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 408,
        "pr_file": "packages/better-auth/src/plugins/magic-link/index.ts",
        "discussion_id": "1829007467",
        "commented_code": "@@ -55,6 +55,17 @@ export const magicLink = (options: MagicLinkOptions) => {\n \t\t\t\t},\n \t\t\t\tasync (ctx) => {\n \t\t\t\t\tconst { email } = ctx.body;\n+\n+\t\t\t\t\tif (options.disableSignUp) {\n+\t\t\t\t\t\tconst user = await ctx.context.internalAdapter.findUserByEmail(email);\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\tthrow new APIError(\"USER_NOT_FOUND\", {",
        "comment_created_at": "2024-11-05T09:23:30+00:00",
        "comment_author": "Bekacru",
        "comment_body": "change `USER_NOT_FOUND` to `BAD_REQUEST`",
        "pr_file_module": null
      }
    ]
  }
]