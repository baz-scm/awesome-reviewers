[
  {
    "discussion_id": "2263643846",
    "pr_number": 3822,
    "pr_file": "packages/better-auth/src/telemetry/endpoint.ts",
    "created_at": "2025-08-08T17:31:12+00:00",
    "commented_code": "+import type { AuthContext } from \"../types\";\n+import type { TelemetryEvent } from \"./types\";\n+import { betterFetch } from \"@better-fetch/fetch\";\n+\n+export type TelemetryEndpoint = (event: TelemetryEvent) => Promise<void>;\n+\n+type Logger = AuthContext[\"logger\"];\n+\n+export const debugEndpoint =\n+\t(logger: Logger): TelemetryEndpoint =>\n+\tasync (event) => {\n+\t\tlogger.info(\"telemetry event\", JSON.stringify(event, null, 2));\n+\t};\n+\n+const TELEMETRY_ENDPOINT = \"https://telemetry.better-auth.com/v1/track\";\n+export const realEndpoint: TelemetryEndpoint = async (event) => {",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2263643846",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3822,
        "pr_file": "packages/better-auth/src/telemetry/endpoint.ts",
        "discussion_id": "2263643846",
        "commented_code": "@@ -0,0 +1,25 @@\n+import type { AuthContext } from \"../types\";\n+import type { TelemetryEvent } from \"./types\";\n+import { betterFetch } from \"@better-fetch/fetch\";\n+\n+export type TelemetryEndpoint = (event: TelemetryEvent) => Promise<void>;\n+\n+type Logger = AuthContext[\"logger\"];\n+\n+export const debugEndpoint =\n+\t(logger: Logger): TelemetryEndpoint =>\n+\tasync (event) => {\n+\t\tlogger.info(\"telemetry event\", JSON.stringify(event, null, 2));\n+\t};\n+\n+const TELEMETRY_ENDPOINT = \"https://telemetry.better-auth.com/v1/track\";\n+export const realEndpoint: TelemetryEndpoint = async (event) => {",
        "comment_created_at": "2025-08-08T17:31:12+00:00",
        "comment_author": "Bekacru",
        "comment_body": "this should be called `sendEvent` or something and the endpoint for debug and the real one should be passed as a parameter to the function instead",
        "pr_file_module": null
      },
      {
        "comment_id": "2263646156",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3822,
        "pr_file": "packages/better-auth/src/telemetry/endpoint.ts",
        "discussion_id": "2263643846",
        "commented_code": "@@ -0,0 +1,25 @@\n+import type { AuthContext } from \"../types\";\n+import type { TelemetryEvent } from \"./types\";\n+import { betterFetch } from \"@better-fetch/fetch\";\n+\n+export type TelemetryEndpoint = (event: TelemetryEvent) => Promise<void>;\n+\n+type Logger = AuthContext[\"logger\"];\n+\n+export const debugEndpoint =\n+\t(logger: Logger): TelemetryEndpoint =>\n+\tasync (event) => {\n+\t\tlogger.info(\"telemetry event\", JSON.stringify(event, null, 2));\n+\t};\n+\n+const TELEMETRY_ENDPOINT = \"https://telemetry.better-auth.com/v1/track\";\n+export const realEndpoint: TelemetryEndpoint = async (event) => {",
        "comment_created_at": "2025-08-08T17:32:22+00:00",
        "comment_author": "Bekacru",
        "comment_body": "or even just move this inside create telemetry inside publish or something",
        "pr_file_module": null
      },
      {
        "comment_id": "2263782413",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3822,
        "pr_file": "packages/better-auth/src/telemetry/endpoint.ts",
        "discussion_id": "2263643846",
        "commented_code": "@@ -0,0 +1,25 @@\n+import type { AuthContext } from \"../types\";\n+import type { TelemetryEvent } from \"./types\";\n+import { betterFetch } from \"@better-fetch/fetch\";\n+\n+export type TelemetryEndpoint = (event: TelemetryEvent) => Promise<void>;\n+\n+type Logger = AuthContext[\"logger\"];\n+\n+export const debugEndpoint =\n+\t(logger: Logger): TelemetryEndpoint =>\n+\tasync (event) => {\n+\t\tlogger.info(\"telemetry event\", JSON.stringify(event, null, 2));\n+\t};\n+\n+const TELEMETRY_ENDPOINT = \"https://telemetry.better-auth.com/v1/track\";\n+export const realEndpoint: TelemetryEndpoint = async (event) => {",
        "comment_created_at": "2025-08-08T18:51:13+00:00",
        "comment_author": "frectonz",
        "comment_body": "I have remove the endpoint file and moved everything into `createTelemetry`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138507725",
    "pr_number": 2579,
    "pr_file": "packages/better-auth/src/plugins/siwe/index.ts",
    "created_at": "2025-06-10T18:09:46+00:00",
    "commented_code": "+import { APIError, createAuthEndpoint } from \"../../api\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { z } from \"zod\";\n+import type { BetterAuthPlugin } from \"../../types\";\n+import type { ENSLookupArgs, ENSLookupResult, SIWEVerifyMessageArgs, WalletAddress } from \"./types\";\n+import type { User } from \"../../types\";\n+import { schema } from \"./schema\";\n+import { getOrigin } from \"../../utils/url\";\n+import { toChecksumAddress } from \"../../utils/hashing\";\n+\n+export interface SIWEPluginOptions {\n+\tdomain: string;\n+\temailDomainName?: string;\n+\tanonymous?: boolean;\n+\tgetNonce: () => Promise<string>;\n+\tverifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>;\n+\tensLookup?: (args: ENSLookupArgs) => Promise<ENSLookupResult>;\n+}\n+\n+export const siwe = (options: SIWEPluginOptions) =>\n+\t({\n+\t\tid: \"siwe\",\n+\t\tschema,\n+\t\tendpoints: {\n+\t\t\t// Generate nonce endpoint\n+\t\t\tnonce: createAuthEndpoint(\n+\t\t\t\t\"/siwe/nonce\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\twalletAddress: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.regex(/^0[xX][a-fA-F0-9]{40}$/i)\n+\t\t\t\t\t\t\t.length(42),\n+\t\t\t\t\t\tchainId: z.number().int().positive().max(2147483647).optional().default(1), // Default to Ethereum mainnet\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { walletAddress: rawWalletAddress, chainId } = ctx.body;\n+\t\t\t\t\tconst walletAddress = toChecksumAddress(rawWalletAddress);\n+\t\t\t\t\tconst nonce = await options.getNonce();\n+\t\t\t\t\t\n+\t\t\t\t\t// Store nonce with wallet address and chain ID context\n+\t\t\t\t\tawait ctx.context.internalAdapter.createVerificationValue({\n+\t\t\t\t\t\tidentifier: `siwe:${walletAddress}:${chainId}`,\n+\t\t\t\t\t\tvalue: nonce,\n+\t\t\t\t\t\texpiresAt: new Date(Date.now() + 15 * 60 * 1000),\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn { nonce };\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\t// Verify siwe payload\n+\t\t\tverify: createAuthEndpoint(",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2138507725",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2579,
        "pr_file": "packages/better-auth/src/plugins/siwe/index.ts",
        "discussion_id": "2138507725",
        "commented_code": "@@ -0,0 +1,250 @@\n+import { APIError, createAuthEndpoint } from \"../../api\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { z } from \"zod\";\n+import type { BetterAuthPlugin } from \"../../types\";\n+import type { ENSLookupArgs, ENSLookupResult, SIWEVerifyMessageArgs, WalletAddress } from \"./types\";\n+import type { User } from \"../../types\";\n+import { schema } from \"./schema\";\n+import { getOrigin } from \"../../utils/url\";\n+import { toChecksumAddress } from \"../../utils/hashing\";\n+\n+export interface SIWEPluginOptions {\n+\tdomain: string;\n+\temailDomainName?: string;\n+\tanonymous?: boolean;\n+\tgetNonce: () => Promise<string>;\n+\tverifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>;\n+\tensLookup?: (args: ENSLookupArgs) => Promise<ENSLookupResult>;\n+}\n+\n+export const siwe = (options: SIWEPluginOptions) =>\n+\t({\n+\t\tid: \"siwe\",\n+\t\tschema,\n+\t\tendpoints: {\n+\t\t\t// Generate nonce endpoint\n+\t\t\tnonce: createAuthEndpoint(\n+\t\t\t\t\"/siwe/nonce\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\twalletAddress: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.regex(/^0[xX][a-fA-F0-9]{40}$/i)\n+\t\t\t\t\t\t\t.length(42),\n+\t\t\t\t\t\tchainId: z.number().int().positive().max(2147483647).optional().default(1), // Default to Ethereum mainnet\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { walletAddress: rawWalletAddress, chainId } = ctx.body;\n+\t\t\t\t\tconst walletAddress = toChecksumAddress(rawWalletAddress);\n+\t\t\t\t\tconst nonce = await options.getNonce();\n+\t\t\t\t\t\n+\t\t\t\t\t// Store nonce with wallet address and chain ID context\n+\t\t\t\t\tawait ctx.context.internalAdapter.createVerificationValue({\n+\t\t\t\t\t\tidentifier: `siwe:${walletAddress}:${chainId}`,\n+\t\t\t\t\t\tvalue: nonce,\n+\t\t\t\t\t\texpiresAt: new Date(Date.now() + 15 * 60 * 1000),\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn { nonce };\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\t// Verify siwe payload\n+\t\t\tverify: createAuthEndpoint(",
        "comment_created_at": "2025-06-10T18:09:46+00:00",
        "comment_author": "ping-maxwell",
        "comment_body": "Try to use more *specific* naming, instead of `verify`.\r\nThis is because everything will be combined into one auth.api, thus `auth.api.verify` wouldn't be very descriptive.",
        "pr_file_module": null
      },
      {
        "comment_id": "2141966877",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2579,
        "pr_file": "packages/better-auth/src/plugins/siwe/index.ts",
        "discussion_id": "2138507725",
        "commented_code": "@@ -0,0 +1,250 @@\n+import { APIError, createAuthEndpoint } from \"../../api\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { z } from \"zod\";\n+import type { BetterAuthPlugin } from \"../../types\";\n+import type { ENSLookupArgs, ENSLookupResult, SIWEVerifyMessageArgs, WalletAddress } from \"./types\";\n+import type { User } from \"../../types\";\n+import { schema } from \"./schema\";\n+import { getOrigin } from \"../../utils/url\";\n+import { toChecksumAddress } from \"../../utils/hashing\";\n+\n+export interface SIWEPluginOptions {\n+\tdomain: string;\n+\temailDomainName?: string;\n+\tanonymous?: boolean;\n+\tgetNonce: () => Promise<string>;\n+\tverifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>;\n+\tensLookup?: (args: ENSLookupArgs) => Promise<ENSLookupResult>;\n+}\n+\n+export const siwe = (options: SIWEPluginOptions) =>\n+\t({\n+\t\tid: \"siwe\",\n+\t\tschema,\n+\t\tendpoints: {\n+\t\t\t// Generate nonce endpoint\n+\t\t\tnonce: createAuthEndpoint(\n+\t\t\t\t\"/siwe/nonce\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\twalletAddress: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.regex(/^0[xX][a-fA-F0-9]{40}$/i)\n+\t\t\t\t\t\t\t.length(42),\n+\t\t\t\t\t\tchainId: z.number().int().positive().max(2147483647).optional().default(1), // Default to Ethereum mainnet\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { walletAddress: rawWalletAddress, chainId } = ctx.body;\n+\t\t\t\t\tconst walletAddress = toChecksumAddress(rawWalletAddress);\n+\t\t\t\t\tconst nonce = await options.getNonce();\n+\t\t\t\t\t\n+\t\t\t\t\t// Store nonce with wallet address and chain ID context\n+\t\t\t\t\tawait ctx.context.internalAdapter.createVerificationValue({\n+\t\t\t\t\t\tidentifier: `siwe:${walletAddress}:${chainId}`,\n+\t\t\t\t\t\tvalue: nonce,\n+\t\t\t\t\t\texpiresAt: new Date(Date.now() + 15 * 60 * 1000),\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn { nonce };\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\t// Verify siwe payload\n+\t\t\tverify: createAuthEndpoint(",
        "comment_created_at": "2025-06-12T07:49:05+00:00",
        "comment_author": "rokitgg",
        "comment_body": "Agree! I thought this would end up looking something the likes of auth.api.siwe.verify that's why but thank you for the review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127482343",
    "pr_number": 2878,
    "pr_file": "packages/better-auth/src/plugins/oidc-provider/types.ts",
    "created_at": "2025-06-04T21:37:52+00:00",
    "commented_code": "* Whether the client is disabled or not.\n \t */\n \tdisabled: boolean;\n+\t/**\n+\t * Whether to skip the consent screen for this client.\n+\t * Only applies to trusted clients.\n+\t */\n+\tskipConsent?: boolean;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2127482343",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2878,
        "pr_file": "packages/better-auth/src/plugins/oidc-provider/types.ts",
        "discussion_id": "2127482343",
        "commented_code": "@@ -284,6 +289,11 @@ export interface Client {\n \t * Whether the client is disabled or not.\n \t */\n \tdisabled: boolean;\n+\t/**\n+\t * Whether to skip the consent screen for this client.\n+\t * Only applies to trusted clients.\n+\t */\n+\tskipConsent?: boolean;",
        "comment_created_at": "2025-06-04T21:37:52+00:00",
        "comment_author": "NormalGaussian",
        "comment_body": "```suggestion\r\n\tskipConsentForTrustedClients?: boolean;\r\n```\r\n\r\nSuggestion: use a more explicit name to make it both a less concerning option, and more obvious.",
        "pr_file_module": null
      },
      {
        "comment_id": "2127547588",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2878,
        "pr_file": "packages/better-auth/src/plugins/oidc-provider/types.ts",
        "discussion_id": "2127482343",
        "commented_code": "@@ -284,6 +289,11 @@ export interface Client {\n \t * Whether the client is disabled or not.\n \t */\n \tdisabled: boolean;\n+\t/**\n+\t * Whether to skip the consent screen for this client.\n+\t * Only applies to trusted clients.\n+\t */\n+\tskipConsent?: boolean;",
        "comment_created_at": "2025-06-04T22:33:59+00:00",
        "comment_author": "BadPirate",
        "comment_body": "This is a field on interface Client, not an overall toggle.",
        "pr_file_module": null
      },
      {
        "comment_id": "2129159288",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2878,
        "pr_file": "packages/better-auth/src/plugins/oidc-provider/types.ts",
        "discussion_id": "2127482343",
        "commented_code": "@@ -284,6 +289,11 @@ export interface Client {\n \t * Whether the client is disabled or not.\n \t */\n \tdisabled: boolean;\n+\t/**\n+\t * Whether to skip the consent screen for this client.\n+\t * Only applies to trusted clients.\n+\t */\n+\tskipConsent?: boolean;",
        "comment_created_at": "2025-06-05T15:44:41+00:00",
        "comment_author": "BadPirate",
        "comment_body": "Though it's important to teach proper consent :)",
        "pr_file_module": null
      }
    ]
  }
]