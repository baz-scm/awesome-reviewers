[
  {
    "discussion_id": "2258486688",
    "pr_number": 3839,
    "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
    "created_at": "2025-08-06T23:03:11+00:00",
    "commented_code": "}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2258486688",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-06T23:03:11+00:00",
        "comment_author": "himself65",
        "comment_body": "We should have a stronger type in the codebase, I would prefer to add ts-expect-error here instead of `as any`",
        "pr_file_module": null
      },
      {
        "comment_id": "2258550251",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-06T23:48:07+00:00",
        "comment_author": "Bekacru",
        "comment_body": "why is there a mismatch?",
        "pr_file_module": null
      },
      {
        "comment_id": "2258595253",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:31:08+00:00",
        "comment_author": "himself65",
        "comment_body": "```\r\nTypes of property email are incompatible.\r\nType string | null | undefined is not assignable to type string\r\nType undefined is not assignable to type string\r\n\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2258600626",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:37:56+00:00",
        "comment_author": "Bekacru",
        "comment_body": "we should probably make sure email isn't null or undefined before passing it to the the handler",
        "pr_file_module": null
      },
      {
        "comment_id": "2258603987",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:42:08+00:00",
        "comment_author": "himself65",
        "comment_body": "yeah let me see how to make that",
        "pr_file_module": null
      },
      {
        "comment_id": "2258606174",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:44:52+00:00",
        "comment_author": "himself65",
        "comment_body": "It's not possible right now, `getUserInfo` is OAuthUserInfo, where only `id` is required. This makes sense because some social providers may not require email.\r\n\r\nThen `mapProfileToUser` is an optional function\r\n\r\nSo the email here could be undefined. How do you think",
        "pr_file_module": null
      },
      {
        "comment_id": "2258606993",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:45:46+00:00",
        "comment_author": "himself65",
        "comment_body": "Oh sorry you are correct, it's there\r\n\r\nhttps://github.com/better-auth/better-auth/blob/99b111835f580d2649b16857c537a616aac57a16/packages/better-auth/src/plugins/generic-oauth/index.ts#L662",
        "pr_file_module": null
      },
      {
        "comment_id": "2258615131",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3839,
        "pr_file": "packages/better-auth/src/plugins/generic-oauth/index.ts",
        "discussion_id": "2258486688",
        "commented_code": "@@ -736,13 +727,15 @@ export const genericOAuth = (options: GenericOAuthOptions) => {\n \t\t\t\t\t}\n \n \t\t\t\t\tconst result = await handleOAuthUserInfo(ctx, {\n+\t\t\t\t\t\t// @ts-expect-error userInfo and mapUser type mismatch to User",
        "comment_created_at": "2025-08-07T00:54:42+00:00",
        "comment_author": "himself65",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2246567033",
    "pr_number": 3712,
    "pr_file": "packages/better-auth/src/db/internal-adapter.ts",
    "created_at": "2025-07-31T23:29:26+00:00",
    "commented_code": "const account = await adapter",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2246567033",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3712,
        "pr_file": "packages/better-auth/src/db/internal-adapter.ts",
        "discussion_id": "2246567033",
        "commented_code": "@@ -536,15 +536,19 @@ export const createInternalAdapter = (\n \t\t\tconst account = await adapter",
        "comment_created_at": "2025-07-31T23:29:26+00:00",
        "comment_author": "Bekacru",
        "comment_body": "If the account ID isn't defined, we should probably just return an error. For providers that don't return an ID, we might need to fall back to the user ID or another consistent, unique identifier",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2247005506",
    "pr_number": 3708,
    "pr_file": "packages/better-auth/src/plugins/organization/routes/crud-org.ts",
    "created_at": "2025-08-01T05:57:10+00:00",
    "commented_code": "});\n \t\t\t\treturn ctx.json(null);\n \t\t\t}\n+\n+\t\t\tlet organizationId = ctx.body.organizationId || ctx.body.organizationSlug;\n \t\t\tif (!organizationId) {\n \t\t\t\tconst sessionOrgId = session.session.activeOrganizationId;\n \t\t\t\tif (!sessionOrgId) {\n \t\t\t\t\treturn ctx.json(null);\n \t\t\t\t}\n \t\t\t\torganizationId = sessionOrgId;\n \t\t\t}\n+\n+\t\t\tlet organization: InferOrganization<O> | null = null;\n+\t\t\tif (ctx.body.organizationId) {\n+\t\t\t\torganization = await adapter.findOrganizationById(\n+\t\t\t\t\tctx.body.organizationId,\n+\t\t\t\t);\n+\t\t\t} else if (ctx.body.organizationSlug) {\n+\t\t\t\torganization = await adapter.findOrganizationBySlug(\n+\t\t\t\t\tctx.body.organizationSlug,\n+\t\t\t\t);\n+\t\t\t} else {\n+\t\t\t\torganization = await adapter.findOrganizationById(organizationId);\n+\t\t\t}\n+\n+\t\t\tif (!organization) {\n+\t\t\t\tthrow new APIError(\"BAD_REQUEST\", {\n+\t\t\t\t\tmessage: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND,\n+\t\t\t\t});\n+\t\t\t}\n+\n \t\t\tconst isMember = await adapter.checkMembership({\n \t\t\t\tuserId: session.user.id,\n-\t\t\t\torganizationId,\n+\t\t\t\torganizationId: organization.id,",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2247005506",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3708,
        "pr_file": "packages/better-auth/src/plugins/organization/routes/crud-org.ts",
        "discussion_id": "2247005506",
        "commented_code": "@@ -703,35 +706,47 @@ export const setActiveOrganization = <O extends OrganizationOptions>(\n \t\t\t\t});\n \t\t\t\treturn ctx.json(null);\n \t\t\t}\n+\n+\t\t\tlet organizationId = ctx.body.organizationId || ctx.body.organizationSlug;\n \t\t\tif (!organizationId) {\n \t\t\t\tconst sessionOrgId = session.session.activeOrganizationId;\n \t\t\t\tif (!sessionOrgId) {\n \t\t\t\t\treturn ctx.json(null);\n \t\t\t\t}\n \t\t\t\torganizationId = sessionOrgId;\n \t\t\t}\n+\n+\t\t\tlet organization: InferOrganization<O> | null = null;\n+\t\t\tif (ctx.body.organizationId) {\n+\t\t\t\torganization = await adapter.findOrganizationById(\n+\t\t\t\t\tctx.body.organizationId,\n+\t\t\t\t);\n+\t\t\t} else if (ctx.body.organizationSlug) {\n+\t\t\t\torganization = await adapter.findOrganizationBySlug(\n+\t\t\t\t\tctx.body.organizationSlug,\n+\t\t\t\t);\n+\t\t\t} else {\n+\t\t\t\torganization = await adapter.findOrganizationById(organizationId);\n+\t\t\t}\n+\n+\t\t\tif (!organization) {\n+\t\t\t\tthrow new APIError(\"BAD_REQUEST\", {\n+\t\t\t\t\tmessage: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND,\n+\t\t\t\t});\n+\t\t\t}\n+\n \t\t\tconst isMember = await adapter.checkMembership({\n \t\t\t\tuserId: session.user.id,\n-\t\t\t\torganizationId,\n+\t\t\t\torganizationId: organization.id,",
        "comment_created_at": "2025-08-01T05:57:10+00:00",
        "comment_author": "Bekacru",
        "comment_body": "assuming this could be null when organizationSlug is only provided, we should probably update how checkMembersShip works instead so it can check for both slug and id",
        "pr_file_module": null
      },
      {
        "comment_id": "2247008698",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 3708,
        "pr_file": "packages/better-auth/src/plugins/organization/routes/crud-org.ts",
        "discussion_id": "2247005506",
        "commented_code": "@@ -703,35 +706,47 @@ export const setActiveOrganization = <O extends OrganizationOptions>(\n \t\t\t\t});\n \t\t\t\treturn ctx.json(null);\n \t\t\t}\n+\n+\t\t\tlet organizationId = ctx.body.organizationId || ctx.body.organizationSlug;\n \t\t\tif (!organizationId) {\n \t\t\t\tconst sessionOrgId = session.session.activeOrganizationId;\n \t\t\t\tif (!sessionOrgId) {\n \t\t\t\t\treturn ctx.json(null);\n \t\t\t\t}\n \t\t\t\torganizationId = sessionOrgId;\n \t\t\t}\n+\n+\t\t\tlet organization: InferOrganization<O> | null = null;\n+\t\t\tif (ctx.body.organizationId) {\n+\t\t\t\torganization = await adapter.findOrganizationById(\n+\t\t\t\t\tctx.body.organizationId,\n+\t\t\t\t);\n+\t\t\t} else if (ctx.body.organizationSlug) {\n+\t\t\t\torganization = await adapter.findOrganizationBySlug(\n+\t\t\t\t\tctx.body.organizationSlug,\n+\t\t\t\t);\n+\t\t\t} else {\n+\t\t\t\torganization = await adapter.findOrganizationById(organizationId);\n+\t\t\t}\n+\n+\t\t\tif (!organization) {\n+\t\t\t\tthrow new APIError(\"BAD_REQUEST\", {\n+\t\t\t\t\tmessage: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND,\n+\t\t\t\t});\n+\t\t\t}\n+\n \t\t\tconst isMember = await adapter.checkMembership({\n \t\t\t\tuserId: session.user.id,\n-\t\t\t\torganizationId,\n+\t\t\t\torganizationId: organization.id,",
        "comment_created_at": "2025-08-01T05:58:34+00:00",
        "comment_author": "Bekacru",
        "comment_body": "also in the spirit of improving our test, make sure to have a test for both with slug and id and test all the possible cases under `crud-org.test.ts`  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2079536062",
    "pr_number": 2579,
    "pr_file": "packages/better-auth/src/plugins/siwe/index.ts",
    "created_at": "2025-05-08T11:30:23+00:00",
    "commented_code": "+import { APIError, createAuthEndpoint } from \"../../api\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { SiweMessage, generateNonce } from \"siwe\";\n+import { z } from \"zod\";\n+import type { BetterAuthPlugin } from \"../../types\";\n+import type { SiweUser } from \"./types\";\n+\n+export interface SIWEPluginOptions {\n+\tdomain: string;\n+\tsuppressSiweExceptions?: boolean;\n+}\n+\n+export const siwe = (options: SIWEPluginOptions) =>\n+\t({\n+\t\tid: \"siwe\",\n+\t\tschema: {\n+\t\t\tuser: {\n+\t\t\t\tfields: {\n+\t\t\t\t\tpublicKey: {\n+\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\tunique: true,\n+\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\tendpoints: {\n+\t\t\t// Generate nonce endpoint\n+\t\t\tnonce: createAuthEndpoint(\n+\t\t\t\t\"/siwe/nonce\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tpublicKey: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.regex(/^0x[a-fA-F0-9]{40}$/)\n+\t\t\t\t\t\t\t.transform((value) => value.toLowerCase()),\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst nonce = generateNonce();\n+\t\t\t\t\t// Store nonce with 15-minute expiration\n+\t\t\t\t\tawait ctx.context.internalAdapter.createVerificationValue({\n+\t\t\t\t\t\tidentifier: `siwe:${ctx.body.publicKey.toLowerCase()}`,\n+\t\t\t\t\t\tvalue: nonce,\n+\t\t\t\t\t\texpiresAt: new Date(Date.now() + 15 * 60 * 1000),\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn { nonce };\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\t// Verify siwe payload\n+\t\t\tverify: createAuthEndpoint(\n+\t\t\t\t\"/siwe/verify\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tmessage: z.string(),\n+\t\t\t\t\t\tsignature: z.string(),\n+\t\t\t\t\t\tpublicKey: z.string(),\n+\t\t\t\t\t}),\n+\t\t\t\t\trequireRequest: true,\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { message, signature } = ctx.body;\n+\t\t\t\t\t// Parse and validate SIWE message\n+\n+\t\t\t\t\tconst siweMessage = new SiweMessage(message);\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t// Find stored nonce to check it's validity\n+\t\t\t\t\t\tconst verification =\n+\t\t\t\t\t\t\tawait ctx.context.internalAdapter.findVerificationValue(\n+\t\t\t\t\t\t\t\t`siwe:${ctx.body.publicKey.toLowerCase()}`,\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t// Ensure nonce is valid and not expired\n+\t\t\t\t\t\tif (!verification || new Date() > verification.expiresAt) {\n+\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\t\tmessage: \"Unauthorized: Invalid or expired nonce\",\n+\t\t\t\t\t\t\t\tstatus: 401,\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// Verify SIWE message\n+\t\t\t\t\t\tconst verified = await siweMessage.verify(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsignature,\n+\t\t\t\t\t\t\t\tnonce: verification.value,\n+\t\t\t\t\t\t\t\tdomain: options.domain,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuppressExceptions: options.suppressSiweExceptions,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!verified.success) {\n+\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\t\tmessage: \"Unauthorized: Invalid SIWE signature\",\n+\t\t\t\t\t\t\t\tstatus: 401,\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tawait ctx.context.internalAdapter.deleteVerificationValue(\n+\t\t\t\t\t\t\tverification.id,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tlet user: SiweUser | null = await ctx.context.adapter.findOne({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"publicKey\",\n+\t\t\t\t\t\t\t\t\toperator: \"eq\",\n+\t\t\t\t\t\t\t\t\tvalue: ctx.body.publicKey,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\tconst tempEmail = `${ctx.body.publicKey}@${process.env.NEXT_PUBLIC_BASE_URL}`;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2079536062",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 2579,
        "pr_file": "packages/better-auth/src/plugins/siwe/index.ts",
        "discussion_id": "2079536062",
        "commented_code": "@@ -0,0 +1,156 @@\n+import { APIError, createAuthEndpoint } from \"../../api\";\n+import { setSessionCookie } from \"../../cookies\";\n+import { SiweMessage, generateNonce } from \"siwe\";\n+import { z } from \"zod\";\n+import type { BetterAuthPlugin } from \"../../types\";\n+import type { SiweUser } from \"./types\";\n+\n+export interface SIWEPluginOptions {\n+\tdomain: string;\n+\tsuppressSiweExceptions?: boolean;\n+}\n+\n+export const siwe = (options: SIWEPluginOptions) =>\n+\t({\n+\t\tid: \"siwe\",\n+\t\tschema: {\n+\t\t\tuser: {\n+\t\t\t\tfields: {\n+\t\t\t\t\tpublicKey: {\n+\t\t\t\t\t\ttype: \"string\",\n+\t\t\t\t\t\tunique: true,\n+\t\t\t\t\t\trequired: false,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\tendpoints: {\n+\t\t\t// Generate nonce endpoint\n+\t\t\tnonce: createAuthEndpoint(\n+\t\t\t\t\"/siwe/nonce\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tpublicKey: z\n+\t\t\t\t\t\t\t.string()\n+\t\t\t\t\t\t\t.regex(/^0x[a-fA-F0-9]{40}$/)\n+\t\t\t\t\t\t\t.transform((value) => value.toLowerCase()),\n+\t\t\t\t\t}),\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst nonce = generateNonce();\n+\t\t\t\t\t// Store nonce with 15-minute expiration\n+\t\t\t\t\tawait ctx.context.internalAdapter.createVerificationValue({\n+\t\t\t\t\t\tidentifier: `siwe:${ctx.body.publicKey.toLowerCase()}`,\n+\t\t\t\t\t\tvalue: nonce,\n+\t\t\t\t\t\texpiresAt: new Date(Date.now() + 15 * 60 * 1000),\n+\t\t\t\t\t});\n+\n+\t\t\t\t\treturn { nonce };\n+\t\t\t\t},\n+\t\t\t),\n+\t\t\t// Verify siwe payload\n+\t\t\tverify: createAuthEndpoint(\n+\t\t\t\t\"/siwe/verify\",\n+\t\t\t\t{\n+\t\t\t\t\tmethod: \"POST\",\n+\t\t\t\t\tbody: z.object({\n+\t\t\t\t\t\tmessage: z.string(),\n+\t\t\t\t\t\tsignature: z.string(),\n+\t\t\t\t\t\tpublicKey: z.string(),\n+\t\t\t\t\t}),\n+\t\t\t\t\trequireRequest: true,\n+\t\t\t\t},\n+\t\t\t\tasync (ctx) => {\n+\t\t\t\t\tconst { message, signature } = ctx.body;\n+\t\t\t\t\t// Parse and validate SIWE message\n+\n+\t\t\t\t\tconst siweMessage = new SiweMessage(message);\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t// Find stored nonce to check it's validity\n+\t\t\t\t\t\tconst verification =\n+\t\t\t\t\t\t\tawait ctx.context.internalAdapter.findVerificationValue(\n+\t\t\t\t\t\t\t\t`siwe:${ctx.body.publicKey.toLowerCase()}`,\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t// Ensure nonce is valid and not expired\n+\t\t\t\t\t\tif (!verification || new Date() > verification.expiresAt) {\n+\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\t\tmessage: \"Unauthorized: Invalid or expired nonce\",\n+\t\t\t\t\t\t\t\tstatus: 401,\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t// Verify SIWE message\n+\t\t\t\t\t\tconst verified = await siweMessage.verify(\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsignature,\n+\t\t\t\t\t\t\t\tnonce: verification.value,\n+\t\t\t\t\t\t\t\tdomain: options.domain,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tsuppressExceptions: options.suppressSiweExceptions,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tif (!verified.success) {\n+\t\t\t\t\t\t\tthrow new APIError(\"UNAUTHORIZED\", {\n+\t\t\t\t\t\t\t\tmessage: \"Unauthorized: Invalid SIWE signature\",\n+\t\t\t\t\t\t\t\tstatus: 401,\n+\t\t\t\t\t\t\t});\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tawait ctx.context.internalAdapter.deleteVerificationValue(\n+\t\t\t\t\t\t\tverification.id,\n+\t\t\t\t\t\t);\n+\n+\t\t\t\t\t\tlet user: SiweUser | null = await ctx.context.adapter.findOne({\n+\t\t\t\t\t\t\tmodel: \"user\",\n+\t\t\t\t\t\t\twhere: [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tfield: \"publicKey\",\n+\t\t\t\t\t\t\t\t\toperator: \"eq\",\n+\t\t\t\t\t\t\t\t\tvalue: ctx.body.publicKey,\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t});\n+\n+\t\t\t\t\t\tif (!user) {\n+\t\t\t\t\t\t\tconst tempEmail = `${ctx.body.publicKey}@${process.env.NEXT_PUBLIC_BASE_URL}`;",
        "comment_created_at": "2025-05-08T11:30:23+00:00",
        "comment_author": "b-bot",
        "comment_body": "Use \r\n```\r\nconst { emailDomainName = getOrigin(ctx.context.baseURL) } = options || {};`\r\nconst email = `${publicKey}@${emailDomainName}`;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009167001",
    "pr_number": 1959,
    "pr_file": "packages/better-auth/src/api/rate-limiter/index.ts",
    "created_at": "2025-03-23T17:01:29+00:00",
    "commented_code": ");\n \tlet window = ctx.rateLimit.window;\n \tlet max = ctx.rateLimit.max;\n-\tconst key = getIp(req, ctx.options) + path;\n+\tconst ip = getIp(req, ctx.options);\n+\tif (!ip) {\n+\t\treturn;",
    "repo_full_name": "better-auth/better-auth",
    "discussion_comments": [
      {
        "comment_id": "2009167001",
        "repo_full_name": "better-auth/better-auth",
        "pr_number": 1959,
        "pr_file": "packages/better-auth/src/api/rate-limiter/index.ts",
        "discussion_id": "2009167001",
        "commented_code": "@@ -119,7 +119,11 @@ export async function onRequestRateLimit(req: Request, ctx: AuthContext) {\n \t);\n \tlet window = ctx.rateLimit.window;\n \tlet max = ctx.rateLimit.max;\n-\tconst key = getIp(req, ctx.options) + path;\n+\tconst ip = getIp(req, ctx.options);\n+\tif (!ip) {\n+\t\treturn;",
        "comment_created_at": "2025-03-23T17:01:29+00:00",
        "comment_author": "drakmail",
        "comment_body": "shouldn\u2019t this completely skip rate limits checks if an ip can\u2019t be determined?",
        "pr_file_module": null
      }
    ]
  }
]