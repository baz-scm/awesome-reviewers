[
  {
    "discussion_id": "1838615735",
    "pr_number": 4337,
    "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
    "created_at": "2024-11-12T18:56:42+00:00",
    "commented_code": "# Create bucket\n         try:\n-            if region is None:\n-                s3_client = boto3.client('s3')\n-                s3_client.create_bucket(Bucket=bucket_name)\n-            else:\n-                s3_client = boto3.client('s3', region_name=region)\n-                location = {'LocationConstraint': region}\n-                s3_client.create_bucket(Bucket=bucket_name,\n-                                        CreateBucketConfiguration=location)\n+            s3_client = boto3.client('s3', region_name=region)\n+            location = {'LocationConstraint': region} if region != 'us-east-1' else {}",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1838615735",
        "repo_full_name": "boto/boto3",
        "pr_number": 4337,
        "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
        "discussion_id": "1838615735",
        "commented_code": "@@ -47,20 +55,16 @@ or to address regulatory requirements.\n \n         # Create bucket\n         try:\n-            if region is None:\n-                s3_client = boto3.client('s3')\n-                s3_client.create_bucket(Bucket=bucket_name)\n-            else:\n-                s3_client = boto3.client('s3', region_name=region)\n-                location = {'LocationConstraint': region}\n-                s3_client.create_bucket(Bucket=bucket_name,\n-                                        CreateBucketConfiguration=location)\n+            s3_client = boto3.client('s3', region_name=region)\n+            location = {'LocationConstraint': region} if region != 'us-east-1' else {}",
        "comment_created_at": "2024-11-12T18:56:42+00:00",
        "comment_author": "jonathan343",
        "comment_body": "Did you manually test the default case? I'm currently seeing `MalformedXML` errors from S3. We'll need to update the example something more like:\r\n\r\n```python\r\nbucket_config = {}\r\nif region != \"us-east-1\":\r\n    bucket_config[\"CreateBucketConfiguration\"] = {\"LocationConstraint\": region}\r\n\r\ns3_client.create_bucket(Bucket=bucket_name, **bucket_config)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1180601063",
    "pr_number": 3686,
    "pr_file": "docs/source/guide/events.rst",
    "created_at": "2023-04-28T16:22:22+00:00",
    "commented_code": "response = s3.list_objects()\n \n+\n+`before-parameter-build`\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+:Full Event Name:\n+  ``'before-parameter-build.service-name.operation-name'``\n+\n+  .. note::\n+\n+    ``service-name`` refers to the value used to instantiate a client i.e.\n+    ``boto3.client('service-name')``. ``operation-name`` refers to the\n+    underlying API operation of the corresponding client method. To access\n+    the operation API name, retrieve the value from the\n+    ``client.meta.method_to_api_mapping`` dictionary using the name of the\n+    desired client method as the key.\n+\n+\n+:Description:\n+  This event is emitted before the API request parameters are built.\n+  Use this event to inject or modify parameters after they're validated\n+  and built into a request that is sent over the wire.\n+\n+:Keyword Arguments Emitted:\n+\n+  :type params: dict\n+  :param params: A dictionary where the keys are the names of the\n+    parameters passed through the client method and the values are the values\n+    of those parameters.\n+\n+  :type model: ``botocore.model.OperationModel``\n+  :param model: A model representing the underlying API operation of the\n+    client method.\n+\n+:Expected Return Value: Do not return anything.\n+\n+:Example:\n+  Here is an example of how to inject a parameter using the event::\n+\n+    import boto3\n+\n+    s3 = boto3.client('s3')\n+\n+    # Access the event system on the S3 client\n+    event_system = s3.meta.events\n+\n+    # Create a function\n+    def add_my_bucket(params, **kwargs):\n+        # Add the name of the bucket you want to default to.\n+        if 'Bucket' not in params:\n+            params['Bucket'] = 'mybucket'\n+\n+    # Register the function to an event\n+    event_system.register('before-parameter-build.s3.ListObjects', add_my_bucket)",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1180601063",
        "repo_full_name": "boto/boto3",
        "pr_number": 3686,
        "pr_file": "docs/source/guide/events.rst",
        "discussion_id": "1180601063",
        "commented_code": "@@ -422,3 +459,423 @@ Here is the list of events that users of Boto3 can register handlers to:\n \n     response = s3.list_objects()\n \n+\n+`before-parameter-build`\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+:Full Event Name:\n+  ``'before-parameter-build.service-name.operation-name'``\n+\n+  .. note::\n+\n+    ``service-name`` refers to the value used to instantiate a client i.e.\n+    ``boto3.client('service-name')``. ``operation-name`` refers to the\n+    underlying API operation of the corresponding client method. To access\n+    the operation API name, retrieve the value from the\n+    ``client.meta.method_to_api_mapping`` dictionary using the name of the\n+    desired client method as the key.\n+\n+\n+:Description:\n+  This event is emitted before the API request parameters are built.\n+  Use this event to inject or modify parameters after they're validated\n+  and built into a request that is sent over the wire.\n+\n+:Keyword Arguments Emitted:\n+\n+  :type params: dict\n+  :param params: A dictionary where the keys are the names of the\n+    parameters passed through the client method and the values are the values\n+    of those parameters.\n+\n+  :type model: ``botocore.model.OperationModel``\n+  :param model: A model representing the underlying API operation of the\n+    client method.\n+\n+:Expected Return Value: Do not return anything.\n+\n+:Example:\n+  Here is an example of how to inject a parameter using the event::\n+\n+    import boto3\n+\n+    s3 = boto3.client('s3')\n+\n+    # Access the event system on the S3 client\n+    event_system = s3.meta.events\n+\n+    # Create a function\n+    def add_my_bucket(params, **kwargs):\n+        # Add the name of the bucket you want to default to.\n+        if 'Bucket' not in params:\n+            params['Bucket'] = 'mybucket'\n+\n+    # Register the function to an event\n+    event_system.register('before-parameter-build.s3.ListObjects', add_my_bucket)",
        "comment_created_at": "2023-04-28T16:22:22+00:00",
        "comment_author": "dlm6693",
        "comment_body": "Given that it is recommended to use `ListObjectsV2`, let's update the example to use that operation instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "109719110",
    "pr_number": 1050,
    "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
    "created_at": "2017-04-04T16:57:34+00:00",
    "commented_code": "+.. Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+\n+   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n+   International License (the \"License\"). You may not use this file except in compliance with the\n+   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.\n+\n+   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+   either express or implied. See the License for the specific language governing permissions and\n+   limitations under the License.\n+   \n+.. _aws-boto3-s3-creating-buckets:   \n+\n+####################################\n+Creating and Using Amazon S3 Buckets\n+####################################\n+\n+This Python example shows you how to:\n+\n+* Obtain and display a list of Amazon S3 buckets in your account.\n+\n+* Create an Amazon S3 bucket.\n+\n+* Upload an object to a specified bucket.\n+\n+The Scenario\n+============\n+\n+In this example, Python code is used to obtain a list of existing Amazon S3 buckets, create a bucket, \n+and upload a file to a specified bucket. The code uses the AWS SDK for Python to get information from \n+and upload files to an Amazon S3 bucket using these methods of the Amazon S3 client class:\n+\n+* `list_buckets <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.list_buckets>`_\n+\n+* `create_bucket <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.create_bucket>`_\n+\n+* `upload_file <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.upload_file>`_\n+\n+All the example code for the Amazon Web Services (AWS) SDK for Python is available `here on GitHub <https://github.com/awsdocs/aws-doc-sdk-examples/tree/master/python/example_code>`_.\n+\n+Prerequisite Tasks\n+==================\n+\n+To set up and run this example, you must first complete this task:\n+\n+* Configure your AWS credentials, as described in :doc:`quickstart`.\n+\n+Display a List of Amazon S3 Buckets\n+===================================\n+\n+List all the buckets owned by the authenticated sender of the request.\n+\n+The example below shows how to:\n+ \n+* List buckets using \n+  `list_buckets <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.list_buckets>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    # Create an S3 client\n+    s3 = boto3.client('s3')\n+\n+    # Call S3 to list current buckets\n+    response = s3.list_buckets()\n+\n+    # Get a list of all bucket names from the response\n+    buckets = [bucket['Name'] for bucket in response['Buckets']]\n+\n+    # Print out the bucket list\n+    print(\"Bucket List: %s\" % buckets)\n+\n+Create an Amazon S3 Bucket\n+==========================\n+\n+The example below shows how to:\n+ \n+* Create a new bucket using \n+  `create_bucket <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.create_bucket>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    s3 = boto3.client('s3')\n+    s3.create_bucket(Bucket='my-bucket')\n+    Uploading a File to an Amazon S3 Bucket\n+\n+Upload a File to an Amazon S3 Bucket\n+====================================\n+\n+The example below shows how to:\n+ \n+* Upload a file to a bucket using \n+  `upload_file <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.upload_file>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    # Create an S3 client\n+    s3 = boto3.client('s3')\n+\n+    filename = 'C:\\file.txt'\n+    bucket_name = 'my-bucket'\n+\n+    # Uploads the given file using a managed uploader, which will split up large\n+    # files automatically and upload parts in parallel.\n+    s3.upload_file(Bucket=bucket_name, Filename=filename)",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "109719110",
        "repo_full_name": "boto/boto3",
        "pr_number": 1050,
        "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
        "discussion_id": "109719110",
        "commented_code": "@@ -0,0 +1,122 @@\n+.. Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+\n+   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n+   International License (the \"License\"). You may not use this file except in compliance with the\n+   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.\n+\n+   This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+   either express or implied. See the License for the specific language governing permissions and\n+   limitations under the License.\n+   \n+.. _aws-boto3-s3-creating-buckets:   \n+\n+####################################\n+Creating and Using Amazon S3 Buckets\n+####################################\n+\n+This Python example shows you how to:\n+\n+* Obtain and display a list of Amazon S3 buckets in your account.\n+\n+* Create an Amazon S3 bucket.\n+\n+* Upload an object to a specified bucket.\n+\n+The Scenario\n+============\n+\n+In this example, Python code is used to obtain a list of existing Amazon S3 buckets, create a bucket, \n+and upload a file to a specified bucket. The code uses the AWS SDK for Python to get information from \n+and upload files to an Amazon S3 bucket using these methods of the Amazon S3 client class:\n+\n+* `list_buckets <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.list_buckets>`_\n+\n+* `create_bucket <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.create_bucket>`_\n+\n+* `upload_file <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.upload_file>`_\n+\n+All the example code for the Amazon Web Services (AWS) SDK for Python is available `here on GitHub <https://github.com/awsdocs/aws-doc-sdk-examples/tree/master/python/example_code>`_.\n+\n+Prerequisite Tasks\n+==================\n+\n+To set up and run this example, you must first complete this task:\n+\n+* Configure your AWS credentials, as described in :doc:`quickstart`.\n+\n+Display a List of Amazon S3 Buckets\n+===================================\n+\n+List all the buckets owned by the authenticated sender of the request.\n+\n+The example below shows how to:\n+ \n+* List buckets using \n+  `list_buckets <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.list_buckets>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    # Create an S3 client\n+    s3 = boto3.client('s3')\n+\n+    # Call S3 to list current buckets\n+    response = s3.list_buckets()\n+\n+    # Get a list of all bucket names from the response\n+    buckets = [bucket['Name'] for bucket in response['Buckets']]\n+\n+    # Print out the bucket list\n+    print(\"Bucket List: %s\" % buckets)\n+\n+Create an Amazon S3 Bucket\n+==========================\n+\n+The example below shows how to:\n+ \n+* Create a new bucket using \n+  `create_bucket <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.create_bucket>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    s3 = boto3.client('s3')\n+    s3.create_bucket(Bucket='my-bucket')\n+    Uploading a File to an Amazon S3 Bucket\n+\n+Upload a File to an Amazon S3 Bucket\n+====================================\n+\n+The example below shows how to:\n+ \n+* Upload a file to a bucket using \n+  `upload_file <https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.upload_file>`_.\n+ \n+\n+Example\n+-------\n+\n+.. code-block:: python\n+\n+    import boto3\n+\n+    # Create an S3 client\n+    s3 = boto3.client('s3')\n+\n+    filename = 'C:\\file.txt'\n+    bucket_name = 'my-bucket'\n+\n+    # Uploads the given file using a managed uploader, which will split up large\n+    # files automatically and upload parts in parallel.\n+    s3.upload_file(Bucket=bucket_name, Filename=filename)",
        "comment_created_at": "2017-04-04T16:57:34+00:00",
        "comment_author": "stealthycoin",
        "comment_body": "The `s3.upload_file()` method does not take keyword arguments `Bucket` and `Filename`. You can see [here](https://boto3.readthedocs.io/en/latest/reference/services/s3.html#S3.Client.upload_file) it takes three positional arguments, `filename`, `bucket`, `key` in that order. So this line should be:\r\n```\r\ns3.upload_file(filename, bucket_name, filename)\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]