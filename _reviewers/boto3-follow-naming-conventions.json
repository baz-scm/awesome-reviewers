[
  {
    "discussion_id": "1109990402",
    "pr_number": 3597,
    "pr_file": "boto3/docs/base.py",
    "created_at": "2023-02-17T15:37:41+00:00",
    "commented_code": "def __init__(self, resource, root_docs_path):\n         super().__init__(resource)\n         self._root_docs_path = root_docs_path\n-        self._resource_sub_path = self._resource_name\n+        self._resource_sub_path = self._resource_name.lower()\n         if self._resource_name == self._service_name:\n-            self._resource_sub_path = 'ServiceResource'\n+            self._resource_sub_path = 'service-resource'",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1109990402",
        "repo_full_name": "boto/boto3",
        "pr_number": 3597,
        "pr_file": "boto3/docs/base.py",
        "discussion_id": "1109990402",
        "commented_code": "@@ -36,6 +36,6 @@ class NestedDocumenter(BaseDocumenter):\n     def __init__(self, resource, root_docs_path):\n         super().__init__(resource)\n         self._root_docs_path = root_docs_path\n-        self._resource_sub_path = self._resource_name\n+        self._resource_sub_path = self._resource_name.lower()\n         if self._resource_name == self._service_name:\n-            self._resource_sub_path = 'ServiceResource'\n+            self._resource_sub_path = 'service-resource'",
        "comment_created_at": "2023-02-17T15:37:41+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "What prompted the name changes here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1110324141",
        "repo_full_name": "boto/boto3",
        "pr_number": 3597,
        "pr_file": "boto3/docs/base.py",
        "discussion_id": "1109990402",
        "commented_code": "@@ -36,6 +36,6 @@ class NestedDocumenter(BaseDocumenter):\n     def __init__(self, resource, root_docs_path):\n         super().__init__(resource)\n         self._root_docs_path = root_docs_path\n-        self._resource_sub_path = self._resource_name\n+        self._resource_sub_path = self._resource_name.lower()\n         if self._resource_name == self._service_name:\n-            self._resource_sub_path = 'ServiceResource'\n+            self._resource_sub_path = 'service-resource'",
        "comment_created_at": "2023-02-17T20:26:47+00:00",
        "comment_author": "jonathan343",
        "comment_body": "For the reasons in my [previous response](https://github.com/boto/boto3/pull/3597#discussion_r1110317266), this had to be 'serviceresource' or 'service-resource'. I thought the latter looked better and also correlated with how the Service Resource section fragment looks `#service-resource`. Either one can be supported. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1109999240",
    "pr_number": 3597,
    "pr_file": "tests/functional/docs/test_s3.py",
    "created_at": "2023-02-17T15:45:40+00:00",
    "commented_code": "self.generated_contents = self.generated_contents.decode('utf-8')\n \n     def test_file_transfer_methods_are_documented(self):\n+        self.assert_contains_lines_in_order(\n+            [\n+                '=========',\n+                'Resources',\n+                '=========',\n+                'The available resources are:',\n+                '  s3/service-resource/index',\n+            ],\n+            self.generated_contents,\n+        )\n         self.assert_contains_lines_in_order(\n             [\n                 '.. py:class:: S3.Client',\n-                '  s3/Client/download_file',",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1109999240",
        "repo_full_name": "boto/boto3",
        "pr_number": 3597,
        "pr_file": "tests/functional/docs/test_s3.py",
        "discussion_id": "1109999240",
        "commented_code": "@@ -27,11 +27,21 @@ def setUp(self):\n         self.generated_contents = self.generated_contents.decode('utf-8')\n \n     def test_file_transfer_methods_are_documented(self):\n+        self.assert_contains_lines_in_order(\n+            [\n+                '=========',\n+                'Resources',\n+                '=========',\n+                'The available resources are:',\n+                '  s3/service-resource/index',\n+            ],\n+            self.generated_contents,\n+        )\n         self.assert_contains_lines_in_order(\n             [\n                 '.. py:class:: S3.Client',\n-                '  s3/Client/download_file',",
        "comment_created_at": "2023-02-17T15:45:40+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "Some of the naming changes are losing the casing that distinguishes classes from methods. Was that change prompted by a technical requirement or just to enforce path consistency?",
        "pr_file_module": null
      },
      {
        "comment_id": "1110317266",
        "repo_full_name": "boto/boto3",
        "pr_number": 3597,
        "pr_file": "tests/functional/docs/test_s3.py",
        "discussion_id": "1109999240",
        "commented_code": "@@ -27,11 +27,21 @@ def setUp(self):\n         self.generated_contents = self.generated_contents.decode('utf-8')\n \n     def test_file_transfer_methods_are_documented(self):\n+        self.assert_contains_lines_in_order(\n+            [\n+                '=========',\n+                'Resources',\n+                '=========',\n+                'The available resources are:',\n+                '  s3/service-resource/index',\n+            ],\n+            self.generated_contents,\n+        )\n         self.assert_contains_lines_in_order(\n             [\n                 '.. py:class:: S3.Client',\n-                '  s3/Client/download_file',",
        "comment_created_at": "2023-02-17T20:19:07+00:00",
        "comment_author": "jonathan343",
        "comment_body": "The lowercasing of sub-paths was prompted by the fact that resources are now in their own sub-pages, the fragments of section headers are lowercased, and CloudFront path patterns are case-sensitive. If a user was previously linking to the following resource section headers `.../s3.html#service-resource` or `.../s3.html#bucketlifecycleconfiguration`, we would (without the lowercasing) want to reroute to `.../s3/ServiceResource/index.html` which is mappable but we'd have to do the same for `.../s3/BucketLifeCycleConfiguration/index.html` and all other resources (93 across 10 services). However, we can redirect to `.../s3/bucketlifecycleconfiguration/index.html` without a mapping.\r\n\r\nThese are the options I see:\r\n1. Leave as is and sacrifice casing.\r\n2. Create a huge mapping of lowercased resource names to correctly cased names.\r\n3. Don't support service resource section header redirections. Note: Resource class/method links will still be rerouted as normal since their fragments provide the correct casing. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1113450732",
        "repo_full_name": "boto/boto3",
        "pr_number": 3597,
        "pr_file": "tests/functional/docs/test_s3.py",
        "discussion_id": "1109999240",
        "commented_code": "@@ -27,11 +27,21 @@ def setUp(self):\n         self.generated_contents = self.generated_contents.decode('utf-8')\n \n     def test_file_transfer_methods_are_documented(self):\n+        self.assert_contains_lines_in_order(\n+            [\n+                '=========',\n+                'Resources',\n+                '=========',\n+                'The available resources are:',\n+                '  s3/service-resource/index',\n+            ],\n+            self.generated_contents,\n+        )\n         self.assert_contains_lines_in_order(\n             [\n                 '.. py:class:: S3.Client',\n-                '  s3/Client/download_file',",
        "comment_created_at": "2023-02-21T18:49:36+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "I think that's probably ok, as long as you'll reach the same location with the old link, I don't think casing is the end of the world.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "563946343",
    "pr_number": 2719,
    "pr_file": "tests/functional/test_iam.py",
    "created_at": "2021-01-25T18:26:08+00:00",
    "commented_code": "+# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+from tests import unittest\n+\n+import botocore\n+from botocore.stub import Stubber\n+\n+import boto3.session\n+\n+class TestiamAccessKey(unittest.TestCase):",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "563946343",
        "repo_full_name": "boto/boto3",
        "pr_number": 2719,
        "pr_file": "tests/functional/test_iam.py",
        "discussion_id": "563946343",
        "commented_code": "@@ -0,0 +1,45 @@\n+# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+from tests import unittest\n+\n+import botocore\n+from botocore.stub import Stubber\n+\n+import boto3.session\n+\n+class TestiamAccessKey(unittest.TestCase):",
        "comment_created_at": "2021-01-25T18:26:08+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "We should probably capitalize IAM to be consistent with other usages.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "45151227",
    "pr_number": 370,
    "pr_file": "tests/__init__.py",
    "created_at": "2015-11-18T02:04:50+00:00",
    "commented_code": "loader.data_path = ''\n         self.loader = loader\n \n+        # We also need to patch the global default session.\n+        # Otherwise it could be a cached real session came from previous\n+        # \"functional\" or \"integration\" tests.\n+        _patch_global_session = mock.patch('boto3.DEFAULT_SESSION')",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "45151227",
        "repo_full_name": "boto/boto3",
        "pr_number": 370,
        "pr_file": "tests/__init__.py",
        "discussion_id": "45151227",
        "commented_code": "@@ -66,5 +66,12 @@ def setUp(self):\n         loader.data_path = ''\n         self.loader = loader\n \n+        # We also need to patch the global default session.\n+        # Otherwise it could be a cached real session came from previous\n+        # \"functional\" or \"integration\" tests.\n+        _patch_global_session = mock.patch('boto3.DEFAULT_SESSION')",
        "comment_created_at": "2015-11-18T02:04:50+00:00",
        "comment_author": "jamesls",
        "comment_body": "These don't need the leading `_` prefix because they're only visible within this method anyways.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "31547945",
    "pr_number": 118,
    "pr_file": "tests/unit/dynamodb/test_batch_write.py",
    "created_at": "2015-06-02T17:27:46+00:00",
    "commented_code": "+# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "31547945",
        "repo_full_name": "boto/boto3",
        "pr_number": 118,
        "pr_file": "tests/unit/dynamodb/test_batch_write.py",
        "discussion_id": "31547945",
        "commented_code": "@@ -0,0 +1,226 @@\n+# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
        "comment_created_at": "2015-06-02T17:27:46+00:00",
        "comment_author": "kyleknap",
        "comment_body": "Sort of inconsistent to call the file `test_batch_write.py` since the usual naming convention for these libraries is `test_(module_name).py` so `test_table.py` is what I would look for.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "25192441",
    "pr_number": 67,
    "pr_file": "tests/unit/resources/test_model.py",
    "created_at": "2015-02-23T19:20:19+00:00",
    "commented_code": "self.assertEqual(len(model.references), 1)\n \n         ref = model.references[0]\n-        self.assertEqual(ref.name, 'Frob')\n+        self.assertEqual(ref.name, 'frob')",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "25192441",
        "repo_full_name": "boto/boto3",
        "pr_number": 67,
        "pr_file": "tests/unit/resources/test_model.py",
        "discussion_id": "25192441",
        "commented_code": "@@ -182,7 +182,7 @@ def test_resource_references(self):\n         self.assertEqual(len(model.references), 1)\n \n         ref = model.references[0]\n-        self.assertEqual(ref.name, 'Frob')\n+        self.assertEqual(ref.name, 'frob')",
        "comment_created_at": "2015-02-23T19:20:19+00:00",
        "comment_author": "danielgtaylor",
        "comment_body": "This was actually a bug. This is a **reference**, and as such should have a snake-cased name.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "19972226",
    "pr_number": 13,
    "pr_file": "boto3/docs.py",
    "created_at": "2014-11-06T20:23:50+00:00",
    "commented_code": "+# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+\n+\"\"\"\n+This module is used to generate both high and low-level reference\n+documentation for services. Currently, it does this by inspecting\n+the service and resource models, as well as instantiating dummy\n+clients to introspect some values. It is likely to change\n+significantly in the future!\n+\n+Currently this is not used for docstrings, just for the Sphinx\n+documentation. RST is generated which Sphinx turns into HTML.\n+\n+The generated output can be found here:\n+\n+    http://boto3.readthedocs.org/en/latest/\n+\n+\"\"\"\n+\n+import json\n+import os\n+\n+import botocore.session\n+\n+from botocore import xform_name\n+from bcdoc.restdoc import ReSTDocument\n+\n+import boto3\n+\n+from .resources.model import ResourceModel\n+\n+\n+def py_type_name(type_name):\n+    \"\"\"\n+    Get the Python type name for a given model type.\n+\n+        >>> py_type_name('list')\n+        'list'\n+        >>> py_type_name('structure')\n+        'dict'\n+\n+    :rtype: string\n+    \"\"\"\n+    return {\n+        'map': 'dict',\n+        'structure': 'dict',\n+        'timestamp': 'datetime',\n+    }.get(type_name, type_name)",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "19972226",
        "repo_full_name": "boto/boto3",
        "pr_number": 13,
        "pr_file": "boto3/docs.py",
        "discussion_id": "19972226",
        "commented_code": "@@ -0,0 +1,358 @@\n+# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+\n+\"\"\"\n+This module is used to generate both high and low-level reference\n+documentation for services. Currently, it does this by inspecting\n+the service and resource models, as well as instantiating dummy\n+clients to introspect some values. It is likely to change\n+significantly in the future!\n+\n+Currently this is not used for docstrings, just for the Sphinx\n+documentation. RST is generated which Sphinx turns into HTML.\n+\n+The generated output can be found here:\n+\n+    http://boto3.readthedocs.org/en/latest/\n+\n+\"\"\"\n+\n+import json\n+import os\n+\n+import botocore.session\n+\n+from botocore import xform_name\n+from bcdoc.restdoc import ReSTDocument\n+\n+import boto3\n+\n+from .resources.model import ResourceModel\n+\n+\n+def py_type_name(type_name):\n+    \"\"\"\n+    Get the Python type name for a given model type.\n+\n+        >>> py_type_name('list')\n+        'list'\n+        >>> py_type_name('structure')\n+        'dict'\n+\n+    :rtype: string\n+    \"\"\"\n+    return {\n+        'map': 'dict',\n+        'structure': 'dict',\n+        'timestamp': 'datetime',\n+    }.get(type_name, type_name)",
        "comment_created_at": "2014-11-06T20:23:50+00:00",
        "comment_author": "jamesls",
        "comment_body": "There's a couple of other types that I think we can use more common python types:\n\ndouble -> float\ncharacter -> string\nlong -> integer\n",
        "pr_file_module": null
      }
    ]
  }
]