[
  {
    "discussion_id": "555993678",
    "pr_number": 2719,
    "pr_file": "boto3/iam/inject.py",
    "created_at": "2021-01-12T18:41:50+00:00",
    "commented_code": "+# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+\n+from boto3 import utils\n+\n+def inject_access_key_methods(class_attributes, **kwargs):\n+    utils.inject_attribute(class_attributes, 'load', access_key_load)\n+\n+def access_key_load(self, *args, **kwargs):\n+    \"\"\"\n+    Call s3.client.list_access_keys to get the status\n+    \"\"\"\n+    response = self.meta.client.list_access_keys(UserName= self.user_name)\n+    for access_key in response['AccessKeyMetadata']:\n+        if access_key['AccessKeyId'] == self.id:\n+            response = access_key",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "555993678",
        "repo_full_name": "boto/boto3",
        "pr_number": 2719,
        "pr_file": "boto3/iam/inject.py",
        "discussion_id": "555993678",
        "commented_code": "@@ -0,0 +1,27 @@\n+# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+\n+from boto3 import utils\n+\n+def inject_access_key_methods(class_attributes, **kwargs):\n+    utils.inject_attribute(class_attributes, 'load', access_key_load)\n+\n+def access_key_load(self, *args, **kwargs):\n+    \"\"\"\n+    Call s3.client.list_access_keys to get the status\n+    \"\"\"\n+    response = self.meta.client.list_access_keys(UserName= self.user_name)\n+    for access_key in response['AccessKeyMetadata']:\n+        if access_key['AccessKeyId'] == self.id:\n+            response = access_key",
        "comment_created_at": "2021-01-12T18:41:50+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "Is it a safe assumption that we'll only ever have one access key in the response? Otherwise, this always returns the last one. It will also break iteration because it mutates response while we're in the loop. We should be storing the final result in something else.",
        "pr_file_module": null
      },
      {
        "comment_id": "556966289",
        "repo_full_name": "boto/boto3",
        "pr_number": 2719,
        "pr_file": "boto3/iam/inject.py",
        "discussion_id": "555993678",
        "commented_code": "@@ -0,0 +1,27 @@\n+# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n+# may not use this file except in compliance with the License. A copy of\n+# the License is located at\n+#\n+# http://aws.amazon.com/apache2.0/\n+#\n+# or in the \"license\" file accompanying this file. This file is\n+# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n+# ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+\n+from boto3 import utils\n+\n+def inject_access_key_methods(class_attributes, **kwargs):\n+    utils.inject_attribute(class_attributes, 'load', access_key_load)\n+\n+def access_key_load(self, *args, **kwargs):\n+    \"\"\"\n+    Call s3.client.list_access_keys to get the status\n+    \"\"\"\n+    response = self.meta.client.list_access_keys(UserName= self.user_name)\n+    for access_key in response['AccessKeyMetadata']:\n+        if access_key['AccessKeyId'] == self.id:\n+            response = access_key",
        "comment_created_at": "2021-01-14T00:30:06+00:00",
        "comment_author": "swetashre",
        "comment_body": "There could be more than one access key in the response. That's why i am using if statement to get only the response of the key id we want. But every response inside ```AccessKeyMetadata``` would have different key id. \r\n\r\nAdded functional test to make sure the code also works with multiple access keys. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "27616763",
    "pr_number": 80,
    "pr_file": "boto3/s3/transfer.py",
    "created_at": "2015-04-01T22:05:33+00:00",
    "commented_code": "+\"\"\"Abstractions over S3's upload/download operations.\n+\n+This module provides high level abstractions for efficient\n+uploads/downloads.  It handles several things for the user:\n+\n+* Automatically switching to multipart transfers when\n+  a file is over a specific size threshold\n+* Uploading/downloading a file in parallel\n+* Throttling based on max bandwidth\n+* Progress callbacks to monitor transfers\n+* Retries.  While botocore handles retries for streaming uploads,\n+  it is not possible for it to handle retries for streaming\n+  downloads.  This module handles retries for both cases so\n+  you don't need to implement any retry logic yourself.\n+\n+This module has a reasonable set of defaults.  It also allows you\n+to configure many aspects of the transfer process including:\n+\n+* Multipart threshold size\n+* Max parallel downloads\n+* Max bandwidth\n+* Socket timeouts\n+* Retry amounts\n+\n+There is no support for s3->s3 multipart copies at this\n+time.\n+\n+\n+Usage\n+=====\n+\n+The simplest way to use this module is:\n+\n+.. code-block:: python\n+\n+    client = boto3.client('s3', 'us-west-2')\n+    transfer = S3Transfer(client)\n+    # Upload /tmp/myfile to s3://bucket/key\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key')\n+\n+    # Download s3://bucket/key to /tmp/myfile\n+    transfer.download_file('bucket', 'key', '/tmp/myfile')\n+\n+The ``upload_file`` and ``download_file`` methods also accept\n+``**kwargs``, which will be forwarded through to the corresponding\n+client operation.  Here are a few examples using ``upload_file``::\n+\n+    # Making the object public\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key',\n+                         extra_args={'ACL': 'public-read'})\n+\n+    # Setting metadata\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key',\n+                         extra_args={'Metadata': {'a': 'b', 'c': 'd'}})\n+\n+    # Setting content type\n+    transfer.upload_file('/tmp/myfile.json', 'bucket', 'key',\n+                         extra_args={'ContentType': \"application/json\"})\n+\n+\n+The ``S3Transfer`` clas also supports progress callbacks so you can\n+provide transfer progress to users.  Both the ``upload_file`` and\n+``download_file`` methods take an optional ``callback`` parameter.\n+Here's an example of how to print a simple progress percentage\n+to the user:\n+\n+.. code-block:: python\n+\n+    class ProgressPercentage(object):\n+        def __init__(self, filename):\n+            self._filename = filename\n+            self._size = float(os.path.getsize(filename))\n+            self._seen_so_far = 0\n+            self._lock = threading.Lock()\n+\n+        def __call__(self, filename, bytes_amount):\n+            # To simplify we'll assume this is hooked up\n+            # to a single filename.\n+            with self._lock:\n+                self._seen_so_far += bytes_amount\n+                percentage = (self._seen_so_far / self._size) * 100",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "27616763",
        "repo_full_name": "boto/boto3",
        "pr_number": 80,
        "pr_file": "boto3/s3/transfer.py",
        "discussion_id": "27616763",
        "commented_code": "@@ -0,0 +1,448 @@\n+\"\"\"Abstractions over S3's upload/download operations.\n+\n+This module provides high level abstractions for efficient\n+uploads/downloads.  It handles several things for the user:\n+\n+* Automatically switching to multipart transfers when\n+  a file is over a specific size threshold\n+* Uploading/downloading a file in parallel\n+* Throttling based on max bandwidth\n+* Progress callbacks to monitor transfers\n+* Retries.  While botocore handles retries for streaming uploads,\n+  it is not possible for it to handle retries for streaming\n+  downloads.  This module handles retries for both cases so\n+  you don't need to implement any retry logic yourself.\n+\n+This module has a reasonable set of defaults.  It also allows you\n+to configure many aspects of the transfer process including:\n+\n+* Multipart threshold size\n+* Max parallel downloads\n+* Max bandwidth\n+* Socket timeouts\n+* Retry amounts\n+\n+There is no support for s3->s3 multipart copies at this\n+time.\n+\n+\n+Usage\n+=====\n+\n+The simplest way to use this module is:\n+\n+.. code-block:: python\n+\n+    client = boto3.client('s3', 'us-west-2')\n+    transfer = S3Transfer(client)\n+    # Upload /tmp/myfile to s3://bucket/key\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key')\n+\n+    # Download s3://bucket/key to /tmp/myfile\n+    transfer.download_file('bucket', 'key', '/tmp/myfile')\n+\n+The ``upload_file`` and ``download_file`` methods also accept\n+``**kwargs``, which will be forwarded through to the corresponding\n+client operation.  Here are a few examples using ``upload_file``::\n+\n+    # Making the object public\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key',\n+                         extra_args={'ACL': 'public-read'})\n+\n+    # Setting metadata\n+    transfer.upload_file('/tmp/myfile', 'bucket', 'key',\n+                         extra_args={'Metadata': {'a': 'b', 'c': 'd'}})\n+\n+    # Setting content type\n+    transfer.upload_file('/tmp/myfile.json', 'bucket', 'key',\n+                         extra_args={'ContentType': \"application/json\"})\n+\n+\n+The ``S3Transfer`` clas also supports progress callbacks so you can\n+provide transfer progress to users.  Both the ``upload_file`` and\n+``download_file`` methods take an optional ``callback`` parameter.\n+Here's an example of how to print a simple progress percentage\n+to the user:\n+\n+.. code-block:: python\n+\n+    class ProgressPercentage(object):\n+        def __init__(self, filename):\n+            self._filename = filename\n+            self._size = float(os.path.getsize(filename))\n+            self._seen_so_far = 0\n+            self._lock = threading.Lock()\n+\n+        def __call__(self, filename, bytes_amount):\n+            # To simplify we'll assume this is hooked up\n+            # to a single filename.\n+            with self._lock:\n+                self._seen_so_far += bytes_amount\n+                percentage = (self._seen_so_far / self._size) * 100",
        "comment_created_at": "2015-04-01T22:05:33+00:00",
        "comment_author": "danielgtaylor",
        "comment_body": "These are all `int`s - don't you need to cast to a float somewhere?\n\n``` python\n>>> 123 / 1024 * 100\n0\n>>> float(123) / 1024 * 100\n12.01171875\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "27072858",
    "pr_number": 74,
    "pr_file": "boto3/resources/factory.py",
    "created_at": "2015-03-24T21:03:40+00:00",
    "commented_code": "# References are essentially an action with no request\n         # or response, so we can re-use the response handlers to\n         # build up resources from identifiers and data members.\n-        handler = ResourceHandler('', factory_self, resource_defs,\n-                                  service_model, reference.resource)\n+        handler = ResourceHandler(reference.resource.path, factory_self,\n+                                  resource_defs, service_model,\n+                                  reference.resource)\n+\n+        # Are there any identifiers that need access to data members?\n+        # This is important when building the resource below since\n+        # it requires the data to be loaded.\n+        needs_data = False\n+        if [i for i in reference.resource.identifiers if i.source == 'data']:\n+            needs_data = True",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "27072858",
        "repo_full_name": "boto/boto3",
        "pr_number": 74,
        "pr_file": "boto3/resources/factory.py",
        "discussion_id": "27072858",
        "commented_code": "@@ -246,16 +246,28 @@ def _create_reference(factory_self, name, reference, service_name,\n         # References are essentially an action with no request\n         # or response, so we can re-use the response handlers to\n         # build up resources from identifiers and data members.\n-        handler = ResourceHandler('', factory_self, resource_defs,\n-                                  service_model, reference.resource)\n+        handler = ResourceHandler(reference.resource.path, factory_self,\n+                                  resource_defs, service_model,\n+                                  reference.resource)\n+\n+        # Are there any identifiers that need access to data members?\n+        # This is important when building the resource below since\n+        # it requires the data to be loaded.\n+        needs_data = False\n+        if [i for i in reference.resource.identifiers if i.source == 'data']:\n+            needs_data = True",
        "comment_created_at": "2015-03-24T21:03:40+00:00",
        "comment_author": "jamesls",
        "comment_body": "Isn't this just `needs_data = any(i.source == 'data' for i in reference.resource.identifiers)`\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "35929935",
    "pr_number": 198,
    "pr_file": "boto3/docs/utils.py",
    "created_at": "2015-07-30T22:43:52+00:00",
    "commented_code": "# ANY KIND, either express or implied. See the License for the specific\n # language governing permissions and limitations under the License.\n import inspect\n+import re\n from botocore.compat import six\n \n+TARGET_COMPONENT_RE = re.compile(r'[^.\\[\\]]+(?![^\\[]*\\])')\n+\n \n def get_resource_ignore_params(params):",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "35929935",
        "repo_full_name": "boto/boto3",
        "pr_number": 198,
        "pr_file": "boto3/docs/utils.py",
        "discussion_id": "35929935",
        "commented_code": "@@ -11,11 +11,23 @@\n # ANY KIND, either express or implied. See the License for the specific\n # language governing permissions and limitations under the License.\n import inspect\n+import re\n from botocore.compat import six\n \n+TARGET_COMPONENT_RE = re.compile(r'[^.\\[\\]]+(?![^\\[]*\\])')\n+\n \n def get_resource_ignore_params(params):",
        "comment_created_at": "2015-07-30T22:43:52+00:00",
        "comment_author": "jamesls",
        "comment_body": "`\"foo[]bar\"[].baz`.  Basically this is assuming that these characters in the regex cannot appear anywhere except in the places we want to ignore them (i.e `foo[]`).  This is likely ok for most, if not all the cases we'll ever need to consider but is not 100% correct.\n\nThis function is basically trying to parse a JMESPath expression and select out the first field name using a regex.  Rather than use this regex based approach which has edge cases and isn't 100% correct, why not use the existing JMESPath parser and not have any edge cases?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "35930651",
    "pr_number": 198,
    "pr_file": "boto3/docs/utils.py",
    "created_at": "2015-07-30T22:52:18+00:00",
    "commented_code": "# ANY KIND, either express or implied. See the License for the specific\n # language governing permissions and limitations under the License.\n import inspect\n+import re\n from botocore.compat import six\n \n+TARGET_COMPONENT_RE = re.compile(r'[^.\\[\\]]+(?![^\\[]*\\])')\n+\n \n def get_resource_ignore_params(params):",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "35930651",
        "repo_full_name": "boto/boto3",
        "pr_number": 198,
        "pr_file": "boto3/docs/utils.py",
        "discussion_id": "35930651",
        "commented_code": "@@ -11,11 +11,23 @@\n # ANY KIND, either express or implied. See the License for the specific\n # language governing permissions and limitations under the License.\n import inspect\n+import re\n from botocore.compat import six\n \n+TARGET_COMPONENT_RE = re.compile(r'[^.\\[\\]]+(?![^\\[]*\\])')\n+\n \n def get_resource_ignore_params(params):",
        "comment_created_at": "2015-07-30T22:52:18+00:00",
        "comment_author": "jamesls",
        "comment_body": "FWIW, you just need to grab the left most leaf node in the AST which will be the first field name.  Something like this (probably want some error checking to make sure that node is a `field` type):\n\n```\n>>> result = jmespath.compile('foo[].bar[].baz.*.qux')\n>>> current = result.parsed\n>>> while current['children']:\n...   current = current['children'][0]\n...\n>>> current['value']\n'foo'\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1409751707",
    "pr_number": 3957,
    "pr_file": "tests/functional/test_crt.py",
    "created_at": "2023-11-29T19:09:15+00:00",
    "commented_code": "config = TransferConfig()\n         transfer_manager = create_transfer_manager(client, config)\n         assert isinstance(transfer_manager, CRTTransferManager)\n+\n+    @requires_crt()\n+    def test_minimum_crt_version(self):\n+        assert has_minimum_crt_version((0, 16, 12)) is True\n+\n+    @requires_crt()\n+    def test_minimum_crt_version_bad_crt_version(self):",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1409751707",
        "repo_full_name": "boto/boto3",
        "pr_number": 3957,
        "pr_file": "tests/functional/test_crt.py",
        "discussion_id": "1409751707",
        "commented_code": "@@ -62,3 +66,14 @@ def test_create_transfer_manager_on_optimized_instance(self):\n         config = TransferConfig()\n         transfer_manager = create_transfer_manager(client, config)\n         assert isinstance(transfer_manager, CRTTransferManager)\n+\n+    @requires_crt()\n+    def test_minimum_crt_version(self):\n+        assert has_minimum_crt_version((0, 16, 12)) is True\n+\n+    @requires_crt()\n+    def test_minimum_crt_version_bad_crt_version(self):",
        "comment_created_at": "2023-11-29T19:09:15+00:00",
        "comment_author": "kyleknap",
        "comment_body": "It might be worth parameterizing this to test out other edge cases that could cause issues. Off the top of my head, we could add cases when `__version__`:\r\n* Is a value that can't be converted to an `int()`. Like if there are are beta or alpha identifiers.\r\n* The value does not follow the pattern of `x.y.z` (e.g. `0.20`)",
        "pr_file_module": null
      },
      {
        "comment_id": "1409760712",
        "repo_full_name": "boto/boto3",
        "pr_number": 3957,
        "pr_file": "tests/functional/test_crt.py",
        "discussion_id": "1409751707",
        "commented_code": "@@ -62,3 +66,14 @@ def test_create_transfer_manager_on_optimized_instance(self):\n         config = TransferConfig()\n         transfer_manager = create_transfer_manager(client, config)\n         assert isinstance(transfer_manager, CRTTransferManager)\n+\n+    @requires_crt()\n+    def test_minimum_crt_version(self):\n+        assert has_minimum_crt_version((0, 16, 12)) is True\n+\n+    @requires_crt()\n+    def test_minimum_crt_version_bad_crt_version(self):",
        "comment_created_at": "2023-11-29T19:17:13+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "`0.20` should actually still work with tuple comparison. I can add a `0.0.0-dev` or something though for the first case.",
        "pr_file_module": null
      },
      {
        "comment_id": "1409763256",
        "repo_full_name": "boto/boto3",
        "pr_number": 3957,
        "pr_file": "tests/functional/test_crt.py",
        "discussion_id": "1409751707",
        "commented_code": "@@ -62,3 +66,14 @@ def test_create_transfer_manager_on_optimized_instance(self):\n         config = TransferConfig()\n         transfer_manager = create_transfer_manager(client, config)\n         assert isinstance(transfer_manager, CRTTransferManager)\n+\n+    @requires_crt()\n+    def test_minimum_crt_version(self):\n+        assert has_minimum_crt_version((0, 16, 12)) is True\n+\n+    @requires_crt()\n+    def test_minimum_crt_version_bad_crt_version(self):",
        "comment_created_at": "2023-11-29T19:19:40+00:00",
        "comment_author": "kyleknap",
        "comment_body": "We can also fast follow on making these test updates. Does not need to block getting this released",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "19831363",
    "pr_number": 11,
    "pr_file": "boto3/resources/base.py",
    "created_at": "2014-11-04T20:04:55+00:00",
    "commented_code": "self.__class__.__name__,\n             ', '.join(identifiers),\n         )\n+\n+    def __eq__(self, other):\n+        # Should be instances of the same resource class\n+        if other.__class__.__name__ != self.__class__.__name__:",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "19831363",
        "repo_full_name": "boto/boto3",
        "pr_number": 11,
        "pr_file": "boto3/resources/base.py",
        "discussion_id": "19831363",
        "commented_code": "@@ -63,3 +63,16 @@ def __repr__(self):\n             self.__class__.__name__,\n             ', '.join(identifiers),\n         )\n+\n+    def __eq__(self, other):\n+        # Should be instances of the same resource class\n+        if other.__class__.__name__ != self.__class__.__name__:",
        "comment_created_at": "2014-11-04T20:04:55+00:00",
        "comment_author": "jamesls",
        "comment_body": "shouldn't this be the actual class and not the class name?  It seems possible to have two resources from separate services having the same name.  Just seems like less risk or a false positive.\n",
        "pr_file_module": null
      }
    ]
  }
]