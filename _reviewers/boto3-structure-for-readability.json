[
  {
    "discussion_id": "1968016913",
    "pr_number": 4444,
    "pr_file": "boto3/session.py",
    "created_at": "2025-02-24T16:38:11+00:00",
    "commented_code": "event_emitter=self.events,\n             ),\n         )\n+\n+    def _account_id_set_without_credentials(\n+        self, account_id, access_key, secret_key\n+    ):\n+        if account_id and access_key is None and secret_key is None:",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1968016913",
        "repo_full_name": "boto/boto3",
        "pr_number": 4444,
        "pr_file": "boto3/session.py",
        "discussion_id": "1968016913",
        "commented_code": "@@ -527,3 +553,10 @@ def _register_default_handlers(self):\n                 event_emitter=self.events,\n             ),\n         )\n+\n+    def _account_id_set_without_credentials(\n+        self, account_id, access_key, secret_key\n+    ):\n+        if account_id and access_key is None and secret_key is None:",
        "comment_created_at": "2025-02-24T16:38:11+00:00",
        "comment_author": "SamRemis",
        "comment_body": "[nit, non-blocking]: This logic could be structured a bit different for readability.  Maybe:\r\n```\r\nif account_id is None:\r\n   return False\r\nelif access_key is None or secret_key is None:\r\n   return True\r\nreturn False\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1968024715",
        "repo_full_name": "boto/boto3",
        "pr_number": 4444,
        "pr_file": "boto3/session.py",
        "discussion_id": "1968016913",
        "commented_code": "@@ -527,3 +553,10 @@ def _register_default_handlers(self):\n                 event_emitter=self.events,\n             ),\n         )\n+\n+    def _account_id_set_without_credentials(\n+        self, account_id, access_key, secret_key\n+    ):\n+        if account_id and access_key is None and secret_key is None:",
        "comment_created_at": "2025-02-24T16:43:06+00:00",
        "comment_author": "alexgromero",
        "comment_body": "I agree, that is better. Pushed in new revision.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "47421974",
    "pr_number": 402,
    "pr_file": "boto3/docs/service.py",
    "created_at": "2015-12-12T00:36:41+00:00",
    "commented_code": "ResourceDocumenter(\n                 resource, self._botocore_session).document_resource(\n                     section.add_new_section(resource.meta.resource_model.name))\n+\n+    def _get_example_file(self):\n+        return os.path.realpath(\n+            os.sep.join([self.EXAMPLE_PATH,\n+                         self._service_name + '.rst']))",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "47421974",
        "repo_full_name": "boto/boto3",
        "pr_number": 402,
        "pr_file": "boto3/docs/service.py",
        "discussion_id": "47421974",
        "commented_code": "@@ -120,3 +128,16 @@ def _document_resources(self, section):\n             ResourceDocumenter(\n                 resource, self._botocore_session).document_resource(\n                     section.add_new_section(resource.meta.resource_model.name))\n+\n+    def _get_example_file(self):\n+        return os.path.realpath(\n+            os.sep.join([self.EXAMPLE_PATH,\n+                         self._service_name + '.rst']))",
        "comment_created_at": "2015-12-12T00:36:41+00:00",
        "comment_author": "rayluo",
        "comment_body": "FWIW, I would prefer to use os.path.join(..., ..., ...) in favor of os.sep.join([..., ..., ...]), because it is conceptually a high level API.\n\nThis is NOT a must-fix. I will still give out a \"ship-it\" for this PR based on its current implementation.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "22129493",
    "pr_number": 45,
    "pr_file": "boto3/resources/base.py",
    "created_at": "2014-12-19T21:18:41+00:00",
    "commented_code": "import boto3\n \n \n+class ResourceMeta(object):\n+    \"\"\"\n+    An object containing metadata about a resource.\n+    \"\"\"\n+    def __init__(self, service_name, identifiers=None, client=None,\n+                 data=None):\n+        #: (``string``) The service name, e.g. 's3'\n+        self.service_name = service_name\n+        #: (``list``) List of identifier names\n+        self.identifiers = identifiers or []",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "22129493",
        "repo_full_name": "boto/boto3",
        "pr_number": 45,
        "pr_file": "boto3/resources/base.py",
        "discussion_id": "22129493",
        "commented_code": "@@ -14,6 +14,36 @@\n import boto3\n \n \n+class ResourceMeta(object):\n+    \"\"\"\n+    An object containing metadata about a resource.\n+    \"\"\"\n+    def __init__(self, service_name, identifiers=None, client=None,\n+                 data=None):\n+        #: (``string``) The service name, e.g. 's3'\n+        self.service_name = service_name\n+        #: (``list``) List of identifier names\n+        self.identifiers = identifiers or []",
        "comment_created_at": "2014-12-19T21:18:41+00:00",
        "comment_author": "jamesls",
        "comment_body": "I think stylistically we should always be using \"is not None\" if we are comparing against None, which in this scenario we are.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "19361984",
    "pr_number": 8,
    "pr_file": "tests/unit/resources/test_model.py",
    "created_at": "2014-10-24T20:21:52+00:00",
    "commented_code": "resource = model.sub_resources.resources[0]\n         self.assertEqual(resource.name, 'Frob')\n \n+    def test_resource_references(self):\n+        model = ResourceModel('test', {\n+            'hasOne': {\n+                'Frob': {\n+                    'resource': {\n+                        'type': 'Frob',\n+                        'identifiers': [\n+                            {'target':'Id', 'sourceType':'dataMember',\n+                             'source':'FrobId'}\n+                        ]\n+                    },\n+                }\n+            },\n+            'hasSome': {\n+                'Frobs': {\n+                    'resource': {\n+                        'type': 'Frob'\n+                    }\n+                }\n+            }\n+        }, {",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "19361984",
        "repo_full_name": "boto/boto3",
        "pr_number": 8,
        "pr_file": "tests/unit/resources/test_model.py",
        "discussion_id": "19361984",
        "commented_code": "@@ -120,6 +120,46 @@ def test_sub_resources(self):\n         resource = model.sub_resources.resources[0]\n         self.assertEqual(resource.name, 'Frob')\n \n+    def test_resource_references(self):\n+        model = ResourceModel('test', {\n+            'hasOne': {\n+                'Frob': {\n+                    'resource': {\n+                        'type': 'Frob',\n+                        'identifiers': [\n+                            {'target':'Id', 'sourceType':'dataMember',\n+                             'source':'FrobId'}\n+                        ]\n+                    },\n+                }\n+            },\n+            'hasSome': {\n+                'Frobs': {\n+                    'resource': {\n+                        'type': 'Frob'\n+                    }\n+                }\n+            }\n+        }, {",
        "comment_created_at": "2014-10-24T20:21:52+00:00",
        "comment_author": "kyleknap",
        "comment_body": "Can you explicitly state the argument that you are passing in instead of doing positional arguments? It is hard to follow especially since the arguments deal with large python dictionaries. Or breaking it up like you did in previous tests such that you are only passing the variable to the constructor as opposed to the specific complex value.\n",
        "pr_file_module": null
      }
    ]
  }
]