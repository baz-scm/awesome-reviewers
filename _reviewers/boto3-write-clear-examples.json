[
  {
    "discussion_id": "1838620874",
    "pr_number": 4337,
    "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
    "created_at": "2024-11-12T19:01:06+00:00",
    "commented_code": "platform. The bucket can be located in a specific region to minimize latency\n or to address regulatory requirements.\n \n+.. note::\n+    The `LocationConstraint` value is used to specify the region where a bucket\n+    will be created. S3 requires `LocationConstraint` to be specified when creating\n+    buckets using a client in regions other than `us-east-1`. When no region is\n+    specified, `us-east-1` is used by default. The example below ensures the S3\n+    client is created in the same region as the bucket to avoid a\n+    `IllegalLocationConstraintException` error.",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1838620874",
        "repo_full_name": "boto/boto3",
        "pr_number": 4337,
        "pr_file": "docs/source/guide/s3-example-creating-buckets.rst",
        "discussion_id": "1838620874",
        "commented_code": "@@ -27,14 +27,22 @@ The name of an Amazon S3 bucket must be unique across all regions of the AWS\n platform. The bucket can be located in a specific region to minimize latency\n or to address regulatory requirements.\n \n+.. note::\n+    The `LocationConstraint` value is used to specify the region where a bucket\n+    will be created. S3 requires `LocationConstraint` to be specified when creating\n+    buckets using a client in regions other than `us-east-1`. When no region is\n+    specified, `us-east-1` is used by default. The example below ensures the S3\n+    client is created in the same region as the bucket to avoid a\n+    `IllegalLocationConstraintException` error.",
        "comment_created_at": "2024-11-12T19:01:06+00:00",
        "comment_author": "jonathan343",
        "comment_body": "In-line code in reStructuredText uses double backticks (` `` `).\r\nSource: https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#inline-markup\r\n\r\nWhen making changes to documentation, we should always generate the docs to make sure they're rendered correctly.\r\n\r\n```suggestion\r\n    The ``LocationConstraint`` value is used to specify the region where a bucket\r\n    will be created. S3 requires ``LocationConstraint`` to be specified when creating\r\n    buckets using a client in regions other than ``us-east-1``. When no region is\r\n    specified, ``us-east-1`` is used by default. The example below ensures the S3\r\n    client is created in the same region as the bucket to avoid a\r\n    ``IllegalLocationConstraintException`` error.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1628327242",
    "pr_number": 4157,
    "pr_file": "docs/source/guide/clients.rst",
    "created_at": "2024-06-05T19:22:26+00:00",
    "commented_code": "need to use these interfaces, but those that do should no longer\n consider their clients thread-safe without careful review.\n \n+.. note::\n+    `boto3.client('<client_name>')` is an alias for creating a client with a",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "1628327242",
        "repo_full_name": "boto/boto3",
        "pr_number": 4157,
        "pr_file": "docs/source/guide/clients.rst",
        "discussion_id": "1628327242",
        "commented_code": "@@ -132,6 +132,12 @@ which may interact with boto3\u2019s client. The majority of users will not\n need to use these interfaces, but those that do should no longer\n consider their clients thread-safe without careful review.\n \n+.. note::\n+    `boto3.client('<client_name>')` is an alias for creating a client with a",
        "comment_created_at": "2024-06-05T19:22:26+00:00",
        "comment_author": "jonathan343",
        "comment_body": "Using a single backtick will result in italicized text instead of inline-code. Also I think this should be `service_name` and not `client_name`.\r\n\r\n```suggestion\r\n    ``boto3.client('<service_name>')`` is an alias for creating a client with a\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "686427549",
    "pr_number": 2955,
    "pr_file": "docs/source/guide/clients.rst",
    "created_at": "2021-08-11T01:31:36+00:00",
    "commented_code": "Creating clients\n ----------------\n-Clients are created in a similar fashion to resources::\n+Clients are created in a similar fashion to resources:\n+\n+.. code-block:: python",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "686427549",
        "repo_full_name": "boto/boto3",
        "pr_number": 2955,
        "pr_file": "docs/source/guide/clients.rst",
        "discussion_id": "686427549",
        "commented_code": "@@ -8,15 +8,19 @@ are generated from a JSON service definition file.\n \n Creating clients\n ----------------\n-Clients are created in a similar fashion to resources::\n+Clients are created in a similar fashion to resources:\n+\n+.. code-block:: python",
        "comment_created_at": "2021-08-11T01:31:36+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "It appears a lot of the changes here are around adding Python code blocks, but I'm not sure they're necessary.\r\n\r\nSphinx is setup with Pygments for syntax highlighting, and provides a configuration with [`highlight_language`](https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-highlight_language). This allows the use of the [literal block](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#literal-blocks) (`::`) as shorthand for the \"primary\" language in the documentation. In our case, we're using the default, Python 3. You can see both old and new blocks are wrapped with the `highlight-python` class in the generated HTML.\r\n\r\nWhen using a different language, such as the `sh`/`ini` cases, this makes a bit more sense. We don't currently utilize them with our theme, so it's a no-op for now, but may be useful later.",
        "pr_file_module": null
      },
      {
        "comment_id": "695088173",
        "repo_full_name": "boto/boto3",
        "pr_number": 2955,
        "pr_file": "docs/source/guide/clients.rst",
        "discussion_id": "686427549",
        "commented_code": "@@ -8,15 +8,19 @@ are generated from a JSON service definition file.\n \n Creating clients\n ----------------\n-Clients are created in a similar fashion to resources::\n+Clients are created in a similar fashion to resources:\n+\n+.. code-block:: python",
        "comment_created_at": "2021-08-24T18:12:17+00:00",
        "comment_author": "shepazon",
        "comment_body": "The literal block syntax generates warnings that that syntax is not recommended and to use `code-block` instead when I build, so I've been working to eradicate it over time. I get so many warnings during builds that I have had builds fail due to overflowing `stderr` buffers. :)",
        "pr_file_module": null
      },
      {
        "comment_id": "695185293",
        "repo_full_name": "boto/boto3",
        "pr_number": 2955,
        "pr_file": "docs/source/guide/clients.rst",
        "discussion_id": "686427549",
        "commented_code": "@@ -8,15 +8,19 @@ are generated from a JSON service definition file.\n \n Creating clients\n ----------------\n-Clients are created in a similar fashion to resources::\n+Clients are created in a similar fashion to resources:\n+\n+.. code-block:: python",
        "comment_created_at": "2021-08-24T20:38:32+00:00",
        "comment_author": "nateprewitt",
        "comment_body": "I reran the build locally to check out the issue. It looks like there are a number of errors for the _reference_ documentation (separate from these guides) that are warning. This appears to be due to our Request/Response example serializers missing a newline at the end of their generation. That's something we can fix, but unrelated to the proposed changes in this PR.\r\n\r\nLet me know if you're seeing something else. This is the only error I was able to find regarding literal blocks:\r\n```\r\nWARNING: Literal block ends without a blank line; unexpected unindent.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "49509146",
    "pr_number": 425,
    "pr_file": "docs/source/guide/s3.rst",
    "created_at": "2016-01-12T20:32:52+00:00",
    "commented_code": "+.. _s3_guide:\n+\n+S3\n+==\n+\n+By following this guide, you will learn how to use features of S3 client that\n+are unique to the SDK, specifically the generation and use of pre-signed URLs\n+and pre-signed POSTs. To learn how to use the transfer manager, please see\n+the `transfer manager reference`_.\n+\n+Generating Presigned URLs\n+-------------------------\n+\n+Pre-signed URLs allow you to give your users access to a specific object in your\n+bucket without requiring them to have AWS security credentials or permissions.\n+To generate a pre-signed URL, use the :py:meth:\n+`S3.Client.generate_presigned_url`. method::\n+\n+    import boto3\n+    import requests\n+\n+    # Get the service client.\n+    s3 = boto3.client('s3')\n+\n+    # Generate the URL to get 'key-name' from 'bucket-name'\n+    url = s3.generate_presigned_url(\n+        ClientMethod='get_object',\n+        Params={\n+            'Bucket': 'bucket-name',\n+            'Key': 'key-name'\n+        }\n+    )\n+\n+    # Use the URL to perform the GET operation. You can use any method you like\n+    # to send the GET, but we will use requests here to keep things simple.\n+    response = requests.get(url)\n+\n+Generating Presigned POSTs\n+--------------------------\n+\n+Much like pre-signed URLs, pre-signed POSTs allow you to give write access to a\n+user without giving them AWS credentials. The information you need to make the\n+POST is returned by the :py:meth: `S3.Client.generate_presigned_post` method::\n+\n+    import boto3\n+    import requests\n+\n+    # Get the service client\n+    s3 = boto3.client('s3')\n+\n+    # Generate the POST attributes\n+    post = s3.generate_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+    # Use the returned values to POST an object. Note that you need to use ALL\n+    # of the returned fields in your post. You can use any method you like to\n+    # send the POST, but we will use requests here to keep things simple.\n+    files = {\"file\": \"file_content\"}\n+    response = requests.post(post[\"url\"], data=post[\"fields\"], files=files)\n+\n+When generating these POSTs, you may wish to auto fill certain fields or\n+constrain what your users submit. You can do this by providing those fields and\n+conditions when you generate the POST data.::\n+\n+    import boto3\n+\n+    # Get the service client\n+    s3 = boto3.client('s3')\n+\n+    # Make sure everything posted is publicly readable\n+    fields = {\"acl\": \"public-read\"}\n+\n+    # Ensure that the ACL isn't changed and restrict the user to a length\n+    # between 10 and 100.\n+    conditions = [\n+        {\"acl\": \"public-read\"},\n+        [\"content-length-range\", 10, 100]\n+    ]\n+\n+    # Generate the POST attributes\n+    post = s3.generage_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+If your bucket requires the use of signature version 4, you can elect to use it\n+to sign your POST. This does not fundamentally change how you use generator,\n+you only need to make sure that the client used has signature version 4\n+configured.::\n+\n+    import boto3\n+    import requests\n+    from botocore.client import Config\n+\n+    # Get the service client with sigv4 configured\n+    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))\n+\n+    # Generate the POST attributes. There are no special fields or conidtions\n+    # you need to pass in to make sigv4 work.\n+    post = s3.generate_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+    # Use the returned values to POST an object. Note that you need to use ALL\n+    # of the returned fields in your post.\n+    files = {\"file\": \"file_content\"}\n+    response = requests.post(post[\"url\"], data=post[\"fields\"], files=files)\n+\n+.. _transfer manager reference: http://boto3.readthedocs.org/en/latest/reference/customizations/s3.html#module-boto3.s3.transfer",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "49509146",
        "repo_full_name": "boto/boto3",
        "pr_number": 425,
        "pr_file": "docs/source/guide/s3.rst",
        "discussion_id": "49509146",
        "commented_code": "@@ -0,0 +1,112 @@\n+.. _s3_guide:\n+\n+S3\n+==\n+\n+By following this guide, you will learn how to use features of S3 client that\n+are unique to the SDK, specifically the generation and use of pre-signed URLs\n+and pre-signed POSTs. To learn how to use the transfer manager, please see\n+the `transfer manager reference`_.\n+\n+Generating Presigned URLs\n+-------------------------\n+\n+Pre-signed URLs allow you to give your users access to a specific object in your\n+bucket without requiring them to have AWS security credentials or permissions.\n+To generate a pre-signed URL, use the :py:meth:\n+`S3.Client.generate_presigned_url`. method::\n+\n+    import boto3\n+    import requests\n+\n+    # Get the service client.\n+    s3 = boto3.client('s3')\n+\n+    # Generate the URL to get 'key-name' from 'bucket-name'\n+    url = s3.generate_presigned_url(\n+        ClientMethod='get_object',\n+        Params={\n+            'Bucket': 'bucket-name',\n+            'Key': 'key-name'\n+        }\n+    )\n+\n+    # Use the URL to perform the GET operation. You can use any method you like\n+    # to send the GET, but we will use requests here to keep things simple.\n+    response = requests.get(url)\n+\n+Generating Presigned POSTs\n+--------------------------\n+\n+Much like pre-signed URLs, pre-signed POSTs allow you to give write access to a\n+user without giving them AWS credentials. The information you need to make the\n+POST is returned by the :py:meth: `S3.Client.generate_presigned_post` method::\n+\n+    import boto3\n+    import requests\n+\n+    # Get the service client\n+    s3 = boto3.client('s3')\n+\n+    # Generate the POST attributes\n+    post = s3.generate_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+    # Use the returned values to POST an object. Note that you need to use ALL\n+    # of the returned fields in your post. You can use any method you like to\n+    # send the POST, but we will use requests here to keep things simple.\n+    files = {\"file\": \"file_content\"}\n+    response = requests.post(post[\"url\"], data=post[\"fields\"], files=files)\n+\n+When generating these POSTs, you may wish to auto fill certain fields or\n+constrain what your users submit. You can do this by providing those fields and\n+conditions when you generate the POST data.::\n+\n+    import boto3\n+\n+    # Get the service client\n+    s3 = boto3.client('s3')\n+\n+    # Make sure everything posted is publicly readable\n+    fields = {\"acl\": \"public-read\"}\n+\n+    # Ensure that the ACL isn't changed and restrict the user to a length\n+    # between 10 and 100.\n+    conditions = [\n+        {\"acl\": \"public-read\"},\n+        [\"content-length-range\", 10, 100]\n+    ]\n+\n+    # Generate the POST attributes\n+    post = s3.generage_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+If your bucket requires the use of signature version 4, you can elect to use it\n+to sign your POST. This does not fundamentally change how you use generator,\n+you only need to make sure that the client used has signature version 4\n+configured.::\n+\n+    import boto3\n+    import requests\n+    from botocore.client import Config\n+\n+    # Get the service client with sigv4 configured\n+    s3 = boto3.client('s3', config=Config(signature_version='s3v4'))\n+\n+    # Generate the POST attributes. There are no special fields or conidtions\n+    # you need to pass in to make sigv4 work.\n+    post = s3.generate_presigned_post(\n+        Bucket='bucket-name',\n+        Key='key-name'\n+    )\n+\n+    # Use the returned values to POST an object. Note that you need to use ALL\n+    # of the returned fields in your post.\n+    files = {\"file\": \"file_content\"}\n+    response = requests.post(post[\"url\"], data=post[\"fields\"], files=files)\n+\n+.. _transfer manager reference: http://boto3.readthedocs.org/en/latest/reference/customizations/s3.html#module-boto3.s3.transfer",
        "comment_created_at": "2016-01-12T20:32:52+00:00",
        "comment_author": "jamesls",
        "comment_body": "Can we at least add a small snippet about how to use upload/download file?\n\nOne of the issues I keep seeing is that be linking to these docs directly, people are manually creating `S3Transfer` objects, unaware of the fact that these are available directly on a client.\n\nIf you don't have bandwidth, I can add this, but I feel like uploading/downloading a file makes sense in the s3 user guide, and it is something we customize in the SDK.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "20106331",
    "pr_number": 16,
    "pr_file": "docs/source/guide/configuration.rst",
    "created_at": "2014-11-10T19:34:25+00:00",
    "commented_code": "Configuration\n =============\n-TODO\n+Boto can be configured in multiple ways. Regardless of the source or sources\n+that you choose, you **must** have AWS credentials and a region set in\n+order to make requests.\n+\n+Interactive Configuration\n+-------------------------\n+If you have the `AWS CLI <http://aws.amazon.com/cli/>`_, then you can use\n+its interactive ``configure`` command to set up your credentials and\n+default region::\n+\n+    aws configure\n+\n+Follow the prompts and it will generate configuration files in the\n+correct locations for you.\n \n Configuration Sources\n ---------------------\n-TODO\n+There are multiple sources from which configuration data can be loaded.\n+The general order in which they are checked is as follows:\n \n-* Environment variables\n-* Configuration files\n-* Instance metadata\n+1. Environment variables\n+2. Configuration files\n+3. EC2 Instance metadata\n+4. Method Parameters\n \n Available Options\n -----------------\n-TODO\n+The available options for various configuration sources are listed below.\n \n Environment Variables\n ~~~~~~~~~~~~~~~~~~~~~\n \n-* ``AWS_ACCESS_KEY_ID``\n-* ``AWS_SECRET_ACCESS_KEY``\n-* ``BOTO_DEFAULT_REGION``\n-* ``BOTO_DEFAULT_PROFILE``\n-* ``BOTO_DATA_PATH``\n+``AWS_ACCESS_KEY_ID``\n+    The access key for your AWS account.\n+\n+``AWS_SECRET_ACCESS_KEY``\n+    The secret key for your AWS account.\n+\n+``BOTO_DEFAULT_REGION``\n+    The default region to use, e.g. `us-east-1`.\n+\n+``BOTO_DEFAULT_PROFILE``\n+    The default credential and configuration profile to use, if any.\n+\n+``BOTO_DATA_PATH``\n+    The data path from which to load service and resource JSON files.\n+\n+Configuration Files\n+~~~~~~~~~~~~~~~~~~~\n+There are two configuration files that Boto checks. The first is the\n+shared credential file, which holds only credentials and is shared between\n+various SDKs and tools like Boto and the AWS CLI. By default, this\n+file is located at ``~/.aws/credentials``::\n+\n+    [default]\n+    # The access key for your AWS account\n+    aws_access_key_id=<YOUR ACCESS KEY ID>\n+\n+    # The secret key for your AWS account\n+    aws_secret_access_key=<YOUR SECRET KEY>\n+\n+Credentials can also be set for individual profiles::\n+\n+    [dev-profile]\n+    # The access key for your dev-profile account\n+    aws_access_key_id=<YOUR ACCESS KEY ID>\n+\n+    # The secret key for your dev-profile account\n+    aws_secret_access_key=<YOUR SECRET KEY>\n+\n+The second configuration file stores all settings which are not\n+credentials. Its default location is ``~/.aws/config``::\n+\n+    [default]\n+    # The default region when making requests\n+    region=<REGION NAME>\n+\n+It also supports profiles, but these are prefixed with the word\n+``profile`` because this file supports sections other than profiles::\n+\n+    [profile dev-profile]\n+    # The default region when using the dev-profile account\n+    region=<REGION NAME>\n+\n+\n+Method Parameters\n+~~~~~~~~~~~~~~~~~\n+When creating a session, client, or resource you can pass in credential\n+and configuration options::\n+\n+    from boto3.session import Session\n+\n+    session = Session(aws_access_key_id='<YOUR ACCESS KEY ID>',\n+                      aws_secret_access_key='<YOUR SECRET KEY>',\n+                      region_name='<REGION NAME>')\n+\n+    ec2 = session.resource('ec2')\n+    ec2_us_west_2 = session.resource('ec2', region_name='us-west-2')\n+\n+    print('Default region:')",
    "repo_full_name": "boto/boto3",
    "discussion_comments": [
      {
        "comment_id": "20106331",
        "repo_full_name": "boto/boto3",
        "pr_number": 16,
        "pr_file": "docs/source/guide/configuration.rst",
        "discussion_id": "20106331",
        "commented_code": "@@ -2,25 +2,112 @@\n \n Configuration\n =============\n-TODO\n+Boto can be configured in multiple ways. Regardless of the source or sources\n+that you choose, you **must** have AWS credentials and a region set in\n+order to make requests.\n+\n+Interactive Configuration\n+-------------------------\n+If you have the `AWS CLI <http://aws.amazon.com/cli/>`_, then you can use\n+its interactive ``configure`` command to set up your credentials and\n+default region::\n+\n+    aws configure\n+\n+Follow the prompts and it will generate configuration files in the\n+correct locations for you.\n \n Configuration Sources\n ---------------------\n-TODO\n+There are multiple sources from which configuration data can be loaded.\n+The general order in which they are checked is as follows:\n \n-* Environment variables\n-* Configuration files\n-* Instance metadata\n+1. Environment variables\n+2. Configuration files\n+3. EC2 Instance metadata\n+4. Method Parameters\n \n Available Options\n -----------------\n-TODO\n+The available options for various configuration sources are listed below.\n \n Environment Variables\n ~~~~~~~~~~~~~~~~~~~~~\n \n-* ``AWS_ACCESS_KEY_ID``\n-* ``AWS_SECRET_ACCESS_KEY``\n-* ``BOTO_DEFAULT_REGION``\n-* ``BOTO_DEFAULT_PROFILE``\n-* ``BOTO_DATA_PATH``\n+``AWS_ACCESS_KEY_ID``\n+    The access key for your AWS account.\n+\n+``AWS_SECRET_ACCESS_KEY``\n+    The secret key for your AWS account.\n+\n+``BOTO_DEFAULT_REGION``\n+    The default region to use, e.g. `us-east-1`.\n+\n+``BOTO_DEFAULT_PROFILE``\n+    The default credential and configuration profile to use, if any.\n+\n+``BOTO_DATA_PATH``\n+    The data path from which to load service and resource JSON files.\n+\n+Configuration Files\n+~~~~~~~~~~~~~~~~~~~\n+There are two configuration files that Boto checks. The first is the\n+shared credential file, which holds only credentials and is shared between\n+various SDKs and tools like Boto and the AWS CLI. By default, this\n+file is located at ``~/.aws/credentials``::\n+\n+    [default]\n+    # The access key for your AWS account\n+    aws_access_key_id=<YOUR ACCESS KEY ID>\n+\n+    # The secret key for your AWS account\n+    aws_secret_access_key=<YOUR SECRET KEY>\n+\n+Credentials can also be set for individual profiles::\n+\n+    [dev-profile]\n+    # The access key for your dev-profile account\n+    aws_access_key_id=<YOUR ACCESS KEY ID>\n+\n+    # The secret key for your dev-profile account\n+    aws_secret_access_key=<YOUR SECRET KEY>\n+\n+The second configuration file stores all settings which are not\n+credentials. Its default location is ``~/.aws/config``::\n+\n+    [default]\n+    # The default region when making requests\n+    region=<REGION NAME>\n+\n+It also supports profiles, but these are prefixed with the word\n+``profile`` because this file supports sections other than profiles::\n+\n+    [profile dev-profile]\n+    # The default region when using the dev-profile account\n+    region=<REGION NAME>\n+\n+\n+Method Parameters\n+~~~~~~~~~~~~~~~~~\n+When creating a session, client, or resource you can pass in credential\n+and configuration options::\n+\n+    from boto3.session import Session\n+\n+    session = Session(aws_access_key_id='<YOUR ACCESS KEY ID>',\n+                      aws_secret_access_key='<YOUR SECRET KEY>',\n+                      region_name='<REGION NAME>')\n+\n+    ec2 = session.resource('ec2')\n+    ec2_us_west_2 = session.resource('ec2', region_name='us-west-2')\n+\n+    print('Default region:')",
        "comment_created_at": "2014-11-10T19:34:25+00:00",
        "comment_author": "kyleknap",
        "comment_body": "Explicitly saying what is going on in a comment would be nice. For example, you could comment with:\n\nList all of my ec2 instances in my default region.\n\nList all of my ec2 instances in us-west-2.\n",
        "pr_file_module": null
      }
    ]
  }
]