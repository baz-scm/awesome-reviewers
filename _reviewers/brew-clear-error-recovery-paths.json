[
  {
    "discussion_id": "2072424793",
    "pr_number": 19889,
    "pr_file": "Library/Homebrew/utils/shared_audits.rb",
    "created_at": "2025-05-03T16:28:40+00:00",
    "commented_code": "def self.eol_data(product, cycle)\n     @eol_data ||= T.let({}, T.nilable(T::Hash[String, T.untyped]))\n     @eol_data[\"#{product}/#{cycle}\"] ||= begin\n-      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/#{product}/#{cycle}.json\")\n-      json = JSON.parse(result.stdout) if result.status.success?\n-      json = nil if json&.dig(\"message\")&.include?(\"Product not found\")\n-      json\n+      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/v1/products/#{product}/releases/#{cycle}\")\n+\n+      if result.status.success?\n+        begin\n+          JSON.parse(result.stdout)\n+        rescue JSON::ParserError\n+          nil\n+        end\n+      end",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2072424793",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19889,
        "pr_file": "Library/Homebrew/utils/shared_audits.rb",
        "discussion_id": "2072424793",
        "commented_code": "@@ -12,10 +12,15 @@ module SharedAudits\n   def self.eol_data(product, cycle)\n     @eol_data ||= T.let({}, T.nilable(T::Hash[String, T.untyped]))\n     @eol_data[\"#{product}/#{cycle}\"] ||= begin\n-      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/#{product}/#{cycle}.json\")\n-      json = JSON.parse(result.stdout) if result.status.success?\n-      json = nil if json&.dig(\"message\")&.include?(\"Product not found\")\n-      json\n+      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/v1/products/#{product}/releases/#{cycle}\")\n+\n+      if result.status.success?\n+        begin\n+          JSON.parse(result.stdout)\n+        rescue JSON::ParserError\n+          nil\n+        end\n+      end",
        "comment_created_at": "2025-05-03T16:28:40+00:00",
        "comment_author": "SMillerDev",
        "comment_body": "This might be easier to read \n```suggestion\n      return unless result.status.success?\n\n      json = begin\n        JSON.parse(result.stdout)\n      rescue JSON::ParserError\n        nil\n      end\n```\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2072430826",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19889,
        "pr_file": "Library/Homebrew/utils/shared_audits.rb",
        "discussion_id": "2072424793",
        "commented_code": "@@ -12,10 +12,15 @@ module SharedAudits\n   def self.eol_data(product, cycle)\n     @eol_data ||= T.let({}, T.nilable(T::Hash[String, T.untyped]))\n     @eol_data[\"#{product}/#{cycle}\"] ||= begin\n-      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/#{product}/#{cycle}.json\")\n-      json = JSON.parse(result.stdout) if result.status.success?\n-      json = nil if json&.dig(\"message\")&.include?(\"Product not found\")\n-      json\n+      result = Utils::Curl.curl_output(\"--location\", \"https://endoflife.date/api/v1/products/#{product}/releases/#{cycle}\")\n+\n+      if result.status.success?\n+        begin\n+          JSON.parse(result.stdout)\n+        rescue JSON::ParserError\n+          nil\n+        end\n+      end",
        "comment_created_at": "2025-05-03T17:06:47+00:00",
        "comment_author": "samford",
        "comment_body": "That's what I had originally but unfortunately it doesn't pass `brew style` because RuboCop doesn't allow `return` in a `begin` block.\r\n\r\nEdit: I refactored `eol_data` and reduced the `begin` block to the `JSON.parse` call, so I was able to add this early return.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "810422311",
    "pr_number": 12898,
    "pr_file": "Library/Homebrew/tap.rb",
    "created_at": "2022-02-19T01:10:50+00:00",
    "commented_code": "return unless remote\n \n-    @remote_repo ||= remote.delete_prefix(\"https://github.com/\")\n-                           .delete_prefix(\"git@github.com:\")\n-                           .delete_suffix(\".git\")\n+    path_base = nil\n+    begin\n+      path_base = URI.parse(remote).path.delete_prefix(\"/\")\n+    rescue URI::InvalidURIError\n+      # probably SSH\n+      # consider using vendoring uri-ssh_git\n+      # path_base = URI::SshGit.parse(remote).path\n+      path_base = remote.split(\":\", 2).last\n+    end\n+\n+    unless path_base\n+      opoo \"Cannot determine the remote repo based on the remote URL\"\n+      return\n+    end",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "810422311",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 12898,
        "pr_file": "Library/Homebrew/tap.rb",
        "discussion_id": "810422311",
        "commented_code": "@@ -146,9 +146,22 @@ def remote_repo\n \n     return unless remote\n \n-    @remote_repo ||= remote.delete_prefix(\"https://github.com/\")\n-                           .delete_prefix(\"git@github.com:\")\n-                           .delete_suffix(\".git\")\n+    path_base = nil\n+    begin\n+      path_base = URI.parse(remote).path.delete_prefix(\"/\")\n+    rescue URI::InvalidURIError\n+      # probably SSH\n+      # consider using vendoring uri-ssh_git\n+      # path_base = URI::SshGit.parse(remote).path\n+      path_base = remote.split(\":\", 2).last\n+    end\n+\n+    unless path_base\n+      opoo \"Cannot determine the remote repo based on the remote URL\"\n+      return\n+    end",
        "comment_created_at": "2022-02-19T01:10:50+00:00",
        "comment_author": "colindean",
        "comment_body": "I'd had this here:\r\n\r\n```suggestion\r\n    return unless path_base\r\n```\r\n\r\nbut decided I liked a nice warning message better. Later on, I speculated that this method is kinda designed to fail silently for non-git taps so this warning might be too noisyâ€¦",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1206191342",
    "pr_number": 15485,
    "pr_file": "Library/Homebrew/utils/github/api.rb",
    "created_at": "2023-05-26T02:54:48+00:00",
    "commented_code": "def initialize(github_message)\n         @github_message = github_message\n         message = +\"GitHub API Error: #{github_message}\n\"\n-        message << if Homebrew::EnvConfig.github_api_token\n+        message << case GitHub::API.credentials_type\n+        when :github_cli_token\n           <<~EOS\n-            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n-              #{Formatter.url(\"https://github.com/settings/tokens\")}\n+            Your GitHub CLI login session may be invalid.\n+            Refresh it with:\n+              gh auth login -h github.com\n           EOS\n-        else\n+        when :keychain_username_password\n           <<~EOS\n             The GitHub credentials in the macOS keychain may be invalid.\n             Clear them with:\n               printf \"protocol=https\\\nhost=github.com\\\n\" | git credential-osxkeychain erase\n+          EOS\n+        else\n+          <<~EOS\n+            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n+              #{Formatter.url(\"https://github.com/settings/tokens\")}\n             #{GitHub.pat_blurb}",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1206191342",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 15485,
        "pr_file": "Library/Homebrew/utils/github/api.rb",
        "discussion_id": "1206191342",
        "commented_code": "@@ -65,16 +65,23 @@ class AuthenticationFailedError < Error\n       def initialize(github_message)\n         @github_message = github_message\n         message = +\"GitHub API Error: #{github_message}\\n\"\n-        message << if Homebrew::EnvConfig.github_api_token\n+        message << case GitHub::API.credentials_type\n+        when :github_cli_token\n           <<~EOS\n-            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n-              #{Formatter.url(\"https://github.com/settings/tokens\")}\n+            Your GitHub CLI login session may be invalid.\n+            Refresh it with:\n+              gh auth login -h github.com\n           EOS\n-        else\n+        when :keychain_username_password\n           <<~EOS\n             The GitHub credentials in the macOS keychain may be invalid.\n             Clear them with:\n               printf \"protocol=https\\\\nhost=github.com\\\\n\" | git credential-osxkeychain erase\n+          EOS\n+        else\n+          <<~EOS\n+            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n+              #{Formatter.url(\"https://github.com/settings/tokens\")}\n             #{GitHub.pat_blurb}",
        "comment_created_at": "2023-05-26T02:54:48+00:00",
        "comment_author": "neersighted",
        "comment_body": "I moved the `pat_blurb` here as I don't think it really makes sense with `keychain_username_password` -- instructions on creating a PAT and assiging it to `HOMEBREW_GITHUB_API_TOKEN` make more sense in the context of that token.\r\n\r\nIf a user has an invalid set of creds in the keychain, they will first be prompted to erase them. Then, if they still need credentials (e.g. for a private repo), they'll get clear instructions on how to create the token. This way the keychain functionality remains largely in the background.",
        "pr_file_module": null
      },
      {
        "comment_id": "1206325028",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 15485,
        "pr_file": "Library/Homebrew/utils/github/api.rb",
        "discussion_id": "1206191342",
        "commented_code": "@@ -65,16 +65,23 @@ class AuthenticationFailedError < Error\n       def initialize(github_message)\n         @github_message = github_message\n         message = +\"GitHub API Error: #{github_message}\\n\"\n-        message << if Homebrew::EnvConfig.github_api_token\n+        message << case GitHub::API.credentials_type\n+        when :github_cli_token\n           <<~EOS\n-            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n-              #{Formatter.url(\"https://github.com/settings/tokens\")}\n+            Your GitHub CLI login session may be invalid.\n+            Refresh it with:\n+              gh auth login -h github.com\n           EOS\n-        else\n+        when :keychain_username_password\n           <<~EOS\n             The GitHub credentials in the macOS keychain may be invalid.\n             Clear them with:\n               printf \"protocol=https\\\\nhost=github.com\\\\n\" | git credential-osxkeychain erase\n+          EOS\n+        else\n+          <<~EOS\n+            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n+              #{Formatter.url(\"https://github.com/settings/tokens\")}\n             #{GitHub.pat_blurb}",
        "comment_created_at": "2023-05-26T07:10:45+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "Will this not now be output even if `Homebrew::EnvConfig.github_api_token` is unset? If so, that's undesirable.",
        "pr_file_module": null
      },
      {
        "comment_id": "1206363114",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 15485,
        "pr_file": "Library/Homebrew/utils/github/api.rb",
        "discussion_id": "1206191342",
        "commented_code": "@@ -65,16 +65,23 @@ class AuthenticationFailedError < Error\n       def initialize(github_message)\n         @github_message = github_message\n         message = +\"GitHub API Error: #{github_message}\\n\"\n-        message << if Homebrew::EnvConfig.github_api_token\n+        message << case GitHub::API.credentials_type\n+        when :github_cli_token\n           <<~EOS\n-            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n-              #{Formatter.url(\"https://github.com/settings/tokens\")}\n+            Your GitHub CLI login session may be invalid.\n+            Refresh it with:\n+              gh auth login -h github.com\n           EOS\n-        else\n+        when :keychain_username_password\n           <<~EOS\n             The GitHub credentials in the macOS keychain may be invalid.\n             Clear them with:\n               printf \"protocol=https\\\\nhost=github.com\\\\n\" | git credential-osxkeychain erase\n+          EOS\n+        else\n+          <<~EOS\n+            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n+              #{Formatter.url(\"https://github.com/settings/tokens\")}\n             #{GitHub.pat_blurb}",
        "comment_created_at": "2023-05-26T07:47:42+00:00",
        "comment_author": "neersighted",
        "comment_body": "The prior behavior was to complain of invalid credentials in the keychain and suggest creating a PAT and storing it in `HOMEBREW_GITHUB_API_TOKEN`; the fact that the keychain was referred to at all is unexpected for most users I think. Is this not a bit more consistent?",
        "pr_file_module": null
      },
      {
        "comment_id": "1206425367",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 15485,
        "pr_file": "Library/Homebrew/utils/github/api.rb",
        "discussion_id": "1206191342",
        "commented_code": "@@ -65,16 +65,23 @@ class AuthenticationFailedError < Error\n       def initialize(github_message)\n         @github_message = github_message\n         message = +\"GitHub API Error: #{github_message}\\n\"\n-        message << if Homebrew::EnvConfig.github_api_token\n+        message << case GitHub::API.credentials_type\n+        when :github_cli_token\n           <<~EOS\n-            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n-              #{Formatter.url(\"https://github.com/settings/tokens\")}\n+            Your GitHub CLI login session may be invalid.\n+            Refresh it with:\n+              gh auth login -h github.com\n           EOS\n-        else\n+        when :keychain_username_password\n           <<~EOS\n             The GitHub credentials in the macOS keychain may be invalid.\n             Clear them with:\n               printf \"protocol=https\\\\nhost=github.com\\\\n\" | git credential-osxkeychain erase\n+          EOS\n+        else\n+          <<~EOS\n+            HOMEBREW_GITHUB_API_TOKEN may be invalid or expired; check:\n+              #{Formatter.url(\"https://github.com/settings/tokens\")}\n             #{GitHub.pat_blurb}",
        "comment_created_at": "2023-05-26T08:32:42+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "I think an extra case checking if `if Homebrew::EnvConfig.github_api_token.present?` and saying `HOMEBREW_GITHUB_API_TOKEN is unset` or similar would improve this, thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1798451073",
    "pr_number": 18548,
    "pr_file": "Library/Homebrew/unpack_strategy.rb",
    "created_at": "2024-10-13T16:41:49+00:00",
    "commented_code": "Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1798451073",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T16:41:49+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "Should better handle here where there's no group name. because `Failed setting group \"\"` doesn't seem great.",
        "pr_file_module": null
      },
      {
        "comment_id": "1798456882",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T16:52:26+00:00",
        "comment_author": "cho-m",
        "comment_body": "In theory this should never happen. Could switch to `T.must` like other code or add `|| group_id` but code is unreachable on a normal system.\r\n\r\n`Etc.getgrgid` will throw an exception on non-existent id (which also shouldn't happen? maybe could intentionally cause a race condition by timing a group deletion in-between but at least in normal operation doesn't seem possible).",
        "pr_file_module": null
      },
      {
        "comment_id": "1798463648",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T17:04:36+00:00",
        "comment_author": "Bo98",
        "comment_body": "The only scenario that `Etc.getgrgid` returns nil is if you compile Ruby on a system without `getgrent` function.\r\n\r\nSo I guess Windows maybe? Though `chown` is no-op there so `Errno::EPERM` wouldn't even throw.",
        "pr_file_module": null
      },
      {
        "comment_id": "1798464245",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T17:08:54+00:00",
        "comment_author": "Bo98",
        "comment_body": "Also note what I did here: https://github.com/Homebrew/brew/blob/d1e539cb8424d578e4b633f26c3cd31f9851c63e/Library/Homebrew/utils/github/api.rb#L139-L145.\r\n\r\nI guess the misconfigured NSS could apply here too?",
        "pr_file_module": null
      },
      {
        "comment_id": "1798467520",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T17:30:14+00:00",
        "comment_author": "cho-m",
        "comment_body": "How about:\r\n```suggestion\r\n        group_name = begin\r\n          Etc.getgrgid(group_id)&.name\r\n        rescue ArgumentError\r\n          # Cover for misconfigured NSS setups\r\n          nil\r\n        end\r\n        opoo \"Failed setting group \\\"#{group_name || group_id}\\\" on #{tmp_unpack_dir}\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1798467927",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18548,
        "pr_file": "Library/Homebrew/unpack_strategy.rb",
        "discussion_id": "1798451073",
        "commented_code": "@@ -160,6 +160,21 @@ def extract_nestedly(to: nil, basename: nil, verbose: false, prioritize_extensio\n     Dir.mktmpdir(\"homebrew-unpack\", HOMEBREW_TEMP) do |tmp_unpack_dir|\n       tmp_unpack_dir = Pathname(tmp_unpack_dir)\n \n+      # Make sure files inside the temporary directory have the same group as the brew instance.\n+      #\n+      # @see https://github.com/Homebrew/brew/blob/4.4.0/Library/Homebrew/mktemp.rb#L57-L72\n+      group_id = if HOMEBREW_BREW_FILE.grpowned?\n+        HOMEBREW_BREW_FILE.stat.gid\n+      else\n+        Process.gid\n+      end\n+      begin\n+        tmp_unpack_dir.chown(nil, group_id)\n+      rescue Errno::EPERM\n+        require \"etc\"\n+        opoo \"Failed setting group \\\"#{Etc.getgrgid(group_id)&.name}\\\" on #{tmp_unpack_dir}\"",
        "comment_created_at": "2024-10-13T17:32:30+00:00",
        "comment_author": "Bo98",
        "comment_body": "LGTM",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1787286074",
    "pr_number": 18485,
    "pr_file": "Library/Homebrew/attestation.rb",
    "created_at": "2024-10-04T07:31:50+00:00",
    "commented_code": "end\n \n       backfill_attestation\n+    rescue InvalidAttestationError\n+      @attestation_retry_count ||= T.let(Hash.new(0), T.nilable(T::Hash[Bottle, Integer]))\n+      raise if @attestation_retry_count[bottle] >= ATTESTATION_MAX_RETRIES\n+\n+      sleep_time = 3 ** @attestation_retry_count[bottle]",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1787286074",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18485,
        "pr_file": "Library/Homebrew/attestation.rb",
        "discussion_id": "1787286074",
        "commented_code": "@@ -246,6 +248,15 @@ def self.check_core_attestation(bottle)\n       end\n \n       backfill_attestation\n+    rescue InvalidAttestationError\n+      @attestation_retry_count ||= T.let(Hash.new(0), T.nilable(T::Hash[Bottle, Integer]))\n+      raise if @attestation_retry_count[bottle] >= ATTESTATION_MAX_RETRIES\n+\n+      sleep_time = 3 ** @attestation_retry_count[bottle]",
        "comment_created_at": "2024-10-04T07:31:50+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n      sleep_time = 2 ** @attestation_retry_count[bottle]\r\n```\r\nwould be fine with me if you want this to take smaller jumps/be quicker to fail",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1787286401",
    "pr_number": 18485,
    "pr_file": "Library/Homebrew/attestation.rb",
    "created_at": "2024-10-04T07:32:09+00:00",
    "commented_code": "attestation\n     end\n \n+    ATTESTATION_MAX_RETRIES = 5",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1787286401",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18485,
        "pr_file": "Library/Homebrew/attestation.rb",
        "discussion_id": "1787286401",
        "commented_code": "@@ -179,6 +179,8 @@ def self.check_attestation(bottle, signing_repo, signing_workflow = nil, subject\n       attestation\n     end\n \n+    ATTESTATION_MAX_RETRIES = 5",
        "comment_created_at": "2024-10-04T07:32:09+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n    ATTESTATION_MAX_RETRIES = 2\r\n```\r\nor \r\n```suggestion\r\n    ATTESTATION_MAX_RETRIES = 3\r\n```\r\nwould be fine with me if you want to fail earlier",
        "pr_file_module": null
      }
    ]
  }
]