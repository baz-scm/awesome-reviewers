[
  {
    "discussion_id": "632540334",
    "pr_number": 11376,
    "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
    "created_at": "2021-05-14T13:48:32+00:00",
    "commented_code": "+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing, choose the \"comment\" type for reviews when the PR isn't quite ready to be merged.\n+Use the \"approve\" type when you feel that the PR is in a good state to be merged, even if there are\n+non-blocking changes you'd like to be made. Use the \"request changes\" type if you feel strongly\n+that the PR is likely to cause a problem for users or have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches)\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up)\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This controls whether the PR has been open for long enough or not.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the venered gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "632540334",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
        "discussion_id": "632540334",
        "commented_code": "@@ -0,0 +1,98 @@\n+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing, choose the \"comment\" type for reviews when the PR isn't quite ready to be merged.\n+Use the \"approve\" type when you feel that the PR is in a good state to be merged, even if there are\n+non-blocking changes you'd like to be made. Use the \"request changes\" type if you feel strongly\n+that the PR is likely to cause a problem for users or have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches)\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up)\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This controls whether the PR has been open for long enough or not.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the venered gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.",
        "comment_created_at": "2021-05-14T13:48:32+00:00",
        "comment_author": "EricFromCanada",
        "comment_body": "If this runs first, it should be listed before the descriptions of jobs that run after it.",
        "pr_file_module": null
      },
      {
        "comment_id": "632606568",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
        "discussion_id": "632540334",
        "commented_code": "@@ -0,0 +1,98 @@\n+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing, choose the \"comment\" type for reviews when the PR isn't quite ready to be merged.\n+Use the \"approve\" type when you feel that the PR is in a good state to be merged, even if there are\n+non-blocking changes you'd like to be made. Use the \"request changes\" type if you feel strongly\n+that the PR is likely to cause a problem for users or have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches)\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up)\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This controls whether the PR has been open for long enough or not.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the venered gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.",
        "comment_created_at": "2021-05-14T15:22:54+00:00",
        "comment_author": "Rylan12",
        "comment_body": "It does. The only jobs that are dependent on this are `CI / tap syntax (Linux)`, `CI / docker`, `CI / test everything (macOS)`, and the `CI / tests` matrix.  The other CI jobs (`CI / vendored gems (Linux)` and `CI / test default formula (Linux)`) will run regardless. I've put these at the bottom so there's (hopefully) no ambiguity about  which ones are dependent on `CI / syntax`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "633516965",
    "pr_number": 11376,
    "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
    "created_at": "2021-05-17T13:12:04+00:00",
    "commented_code": "+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing a PR, use \"comment\", \"approve\", or \"request changes\" when submitting based on the following guidelines:\n+\n+- Comment: if the PR isn't quite ready to be merged\n+- Approve: if you feel that the PR is in a good state to be merged, even if there are\n+  non-blocking changes you'd like to be made\n+- Request changes: if you feel strongly that the PR is likely to cause a problem for users or\n+  have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Have passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches).\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up).\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This verifies that the PR has been open for long enough.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov.\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the vendored gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` on Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.\n+- `CI / tap syntax (Linux)`: This runs `brew style` and `brew audit` on all official taps\n+  (note that although this has Linux in its name, it does check `Homebrew/homebrew-core`,\n+  `Homebrew/linuxbrew-core` and all cask repos).\n+- `CI / docker`: This builds and deploys a new Homebrew docker image.\n+- `CI / test everything (macOS)`: This runs `brew tests` on macOS.",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "633516965",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
        "discussion_id": "633516965",
        "commented_code": "@@ -0,0 +1,102 @@\n+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing a PR, use \"comment\", \"approve\", or \"request changes\" when submitting based on the following guidelines:\n+\n+- Comment: if the PR isn't quite ready to be merged\n+- Approve: if you feel that the PR is in a good state to be merged, even if there are\n+  non-blocking changes you'd like to be made\n+- Request changes: if you feel strongly that the PR is likely to cause a problem for users or\n+  have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Have passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches).\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up).\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This verifies that the PR has been open for long enough.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov.\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the vendored gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` on Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.\n+- `CI / tap syntax (Linux)`: This runs `brew style` and `brew audit` on all official taps\n+  (note that although this has Linux in its name, it does check `Homebrew/homebrew-core`,\n+  `Homebrew/linuxbrew-core` and all cask repos).\n+- `CI / docker`: This builds and deploys a new Homebrew docker image.\n+- `CI / test everything (macOS)`: This runs `brew tests` on macOS.",
        "comment_created_at": "2021-05-17T13:12:04+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "It does a few more things, too?",
        "pr_file_module": null
      },
      {
        "comment_id": "633613326",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
        "discussion_id": "633516965",
        "commented_code": "@@ -0,0 +1,102 @@\n+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing a PR, use \"comment\", \"approve\", or \"request changes\" when submitting based on the following guidelines:\n+\n+- Comment: if the PR isn't quite ready to be merged\n+- Approve: if you feel that the PR is in a good state to be merged, even if there are\n+  non-blocking changes you'd like to be made\n+- Request changes: if you feel strongly that the PR is likely to cause a problem for users or\n+  have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Have passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches).\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up).\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This verifies that the PR has been open for long enough.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov.\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the vendored gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` on Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.\n+- `CI / tap syntax (Linux)`: This runs `brew style` and `brew audit` on all official taps\n+  (note that although this has Linux in its name, it does check `Homebrew/homebrew-core`,\n+  `Homebrew/linuxbrew-core` and all cask repos).\n+- `CI / docker`: This builds and deploys a new Homebrew docker image.\n+- `CI / test everything (macOS)`: This runs `brew tests` on macOS.",
        "comment_created_at": "2021-05-17T15:04:58+00:00",
        "comment_author": "Rylan12",
        "comment_body": "I don't think it does _much_ more (in terms of actual tests being run). It does run `brew update-tests` which is a separate command so I could add that. What else were you thinking should be added?",
        "pr_file_module": null
      },
      {
        "comment_id": "633642638",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-brew-Maintainer-Guide.md",
        "discussion_id": "633516965",
        "commented_code": "@@ -0,0 +1,102 @@\n+# Homebrew/brew Maintainer Guide\n+\n+This document describes a few components of the `Homebrew/brew` repository that are useful for maintainers to\n+be aware of, but don't necessarily need to appear in documentation for most users and contributors.\n+\n+## Reviewing PRs\n+\n+Using `gh pr checkout NUMBER` is a super easy way to check out a PR branch using the GitHub CLI.\n+\n+When reviewing a PR, use \"comment\", \"approve\", or \"request changes\" when submitting based on the following guidelines:\n+\n+- Comment: if the PR isn't quite ready to be merged\n+- Approve: if you feel that the PR is in a good state to be merged, even if there are\n+  non-blocking changes you'd like to be made\n+- Request changes: if you feel strongly that the PR is likely to cause a problem for users or\n+  have a genuine reason to oppose the PR.\n+\n+## Merging PRs\n+\n+Merging should be done using the standard Merge button in the `Homebrew/brew` repository to preserve history and GPG commit signing. The Squash and Merge and Rebase and Merge buttons are disabled.\n+\n+PRs must meet the following conditions to be merged:\n+\n+- Have at least one maintainer (or `BrewTestBot`) approval. See [below](#automatic-approvals)\n+  for more details about how `BrewTestBot` approves PRs.\n+- Have passing CI. This is a _mandatory_ step. PRs with failing CI should _never_ be merged.\n+  See [below](#ci) for more information about `Homebrew/brew` CI.\n+\n+If possible, PRs should also have:\n+\n+- Linear commit history (i.e. no merge commits in PR branches).\n+- GPG-signed commits (see the private `ops` repository for instructions on setting this up).\n+\n+## Automatic approvals\n+\n+To ensure that each PR has the opportunity to be seen and reviewed by any other maintainers who wish\n+to take a look, all PRs require an approval before they can be merged. However, not every PR is\n+reviewed by another maintainer, and some PRs are urgent enough that they need to be merged without\n+an approval by another maintainer.\n+\n+As a compromise between always needing a review and allowing maintainers to merge PRs they deem ready,\n+the `Triage` CI job will ensure that PRs cannot be merged until they've been open for 24 hours\n+(only counting hours that occur during the business week). After the triage period has expired, the\n+CI job will show up as \"passed\" and `BrewTestBot` will approve the PR, allowing it to be merged.\n+This gives all maintainers a reasonable opportunity to review every PR, but won't block any PR for lack\n+of reviews.\n+\n+If the PR is urgent enough that it is necessary to bypass that 24 hour window, the `critical` label\n+can be applied to the PR. When this label is applied, the `Triage` CI job will immediately be\n+successful and `BrewTestBot` will approve the PR.\n+\n+## CI\n+\n+Every PR in `Homebrew/brew` runs a series of CI tests to try to prevent bugs from being introduced.\n+**A PR _must_ have passing CI before it can be merged**.\n+\n+There are many checks that run on every PR. The following is a quick list of the various checks and what they represent:\n+\n+- `Vendor Gems / vendor-gems`: This is skipped except for dependabot PRs. It updates the RBI files to match\n+  any new/changed dependencies. See [Type Checking With Sorbet](Typechecking.md) for more information about RBI files\n+  and typechecking.\n+- `Triage / review`: This verifies that the PR has been open for long enough.\n+  See [above](#automatic-approvals) for more information about automatic approvals.\n+- `codecov/patch` and `codecov/project`: These show the Codecov report for the PR.\n+  See [below](#brew-tests-and-codecov) for more info about Codecov.\n+- `CI / vendored gems (Linux)`: This checks whether there was a change to the vendored gems on Linux that needs to be\n+  committed to the PR branch.\n+- `CI / test default formula (Linux)`: This runs `brew test-bot` on Linux to ensure it still works as expected.\n+- `CI / syntax`: This is run first to check whether the PR passes `brew style` and `brew typecheck`. If this job fails the\n+  following jobs will not run.\n+- `CI / tap syntax (Linux)`: This runs `brew style` and `brew audit` on all official taps\n+  (note that although this has Linux in its name, it does check `Homebrew/homebrew-core`,\n+  `Homebrew/linuxbrew-core` and all cask repos).\n+- `CI / docker`: This builds and deploys a new Homebrew docker image.\n+- `CI / test everything (macOS)`: This runs `brew tests` on macOS.",
        "comment_created_at": "2021-05-17T15:38:10+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "@Rylan12 `brew readall`, `brew test-bot --only-formulae --test-default-formula`, `brew doctor` seem like the important bits.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "634985296",
    "pr_number": 11376,
    "pr_file": "docs/Homebrew-homebrew-core-Merge-Checklist.md",
    "created_at": "2021-05-19T07:35:25+00:00",
    "commented_code": "-# Homebrew/homebrew-core Merge Checklist\n+# Homebrew/homebrew-core Maintainer Guide\n \n-The following checklist is intended to help maintainers decide on\n-whether to merge, request changes or close a PR. It also brings more\n-transparency for contributors in addition to\n-[Acceptable Formulae](Acceptable-Formulae.md) requirements.\n+## Quick merge checklist\n+\n+A detailed checklist can be found [below](#detailed-merge-checklist). This is all that really matters:\n+\n+- Ensure the name seems reasonable.\n+- Add aliases.\n+- Ensure it uses `keg_only :provided_by_macos` if it already comes with macOS.\n+- Ensure it is not a library that can be installed with\n+  [gem](https://en.wikipedia.org/wiki/RubyGems),\n+  [cpan](https://en.wikipedia.org/wiki/Cpan) or\n+  [pip](https://pip.pypa.io/en/stable/).\n+- Ensure that any dependencies are accurate and minimal. We don't need to\n+  support every possible optional feature for the software.\n+- When bottles aren't required or affected, use the GitHub squash & merge workflow for a single-formula PR or rebase & merge workflow for a multiple-formulae PR. See the [\"How to merge without bottles\" section below](#how-to-merge-without-bottles)\n+for more details.\n+- Use `brew pr-publish` or `brew pr-pull` otherwise, which adds messages to auto-close pull requests and pull bottles built by the Brew Test Bot.\n+- Thank people for contributing.\n+\n+Checking dependencies is important, because they will probably stick around\n+forever. Nobody really checks if they are necessary or not.\n+\n+Depend on as little stuff as possible. Disable X11 functionality if possible.\n+For example, we build Wireshark, but not the heavy GUI.\n+\n+Homebrew is about Unix software. Stuff that builds to an `.app` should\n+be in Homebrew Cask instead.\n+\n+## Merging, rebasing, cherry-picking\n+\n+In most cases, you can simply approve a PR and an automatic merge (with bottles)\n+will be performed by [@BrewTestBot](https://github.com/BrewTestBot).\n+See [Brew Test Bot For Core Contributors](Brew-Test-Bot-For-Core-Contributors.md) for more information.\n+\n+PRs modifying formulae that don't need bottles or making changes that don't\n+require new bottles to be pulled should use GitHub's squash & merge or rebase & merge workflows.\n+See the [table below](#how-to-merge-without-bottles) for more details.\n+\n+Otherwise, you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "634985296",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-homebrew-core-Merge-Checklist.md",
        "discussion_id": "634985296",
        "commented_code": "@@ -1,22 +1,135 @@\n-# Homebrew/homebrew-core Merge Checklist\n+# Homebrew/homebrew-core Maintainer Guide\n \n-The following checklist is intended to help maintainers decide on\n-whether to merge, request changes or close a PR. It also brings more\n-transparency for contributors in addition to\n-[Acceptable Formulae](Acceptable-Formulae.md) requirements.\n+## Quick merge checklist\n+\n+A detailed checklist can be found [below](#detailed-merge-checklist). This is all that really matters:\n+\n+- Ensure the name seems reasonable.\n+- Add aliases.\n+- Ensure it uses `keg_only :provided_by_macos` if it already comes with macOS.\n+- Ensure it is not a library that can be installed with\n+  [gem](https://en.wikipedia.org/wiki/RubyGems),\n+  [cpan](https://en.wikipedia.org/wiki/Cpan) or\n+  [pip](https://pip.pypa.io/en/stable/).\n+- Ensure that any dependencies are accurate and minimal. We don't need to\n+  support every possible optional feature for the software.\n+- When bottles aren't required or affected, use the GitHub squash & merge workflow for a single-formula PR or rebase & merge workflow for a multiple-formulae PR. See the [\"How to merge without bottles\" section below](#how-to-merge-without-bottles)\n+for more details.\n+- Use `brew pr-publish` or `brew pr-pull` otherwise, which adds messages to auto-close pull requests and pull bottles built by the Brew Test Bot.\n+- Thank people for contributing.\n+\n+Checking dependencies is important, because they will probably stick around\n+forever. Nobody really checks if they are necessary or not.\n+\n+Depend on as little stuff as possible. Disable X11 functionality if possible.\n+For example, we build Wireshark, but not the heavy GUI.\n+\n+Homebrew is about Unix software. Stuff that builds to an `.app` should\n+be in Homebrew Cask instead.\n+\n+## Merging, rebasing, cherry-picking\n+\n+In most cases, you can simply approve a PR and an automatic merge (with bottles)\n+will be performed by [@BrewTestBot](https://github.com/BrewTestBot).\n+See [Brew Test Bot For Core Contributors](Brew-Test-Bot-For-Core-Contributors.md) for more information.\n+\n+PRs modifying formulae that don't need bottles or making changes that don't\n+require new bottles to be pulled should use GitHub's squash & merge or rebase & merge workflows.\n+See the [table below](#how-to-merge-without-bottles) for more details.\n+\n+Otherwise, you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).",
        "comment_created_at": "2021-05-19T07:35:25+00:00",
        "comment_author": "SMillerDev",
        "comment_body": "```suggestion\r\nOtherwise, for example for new formulae, you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "635393244",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-homebrew-core-Merge-Checklist.md",
        "discussion_id": "634985296",
        "commented_code": "@@ -1,22 +1,135 @@\n-# Homebrew/homebrew-core Merge Checklist\n+# Homebrew/homebrew-core Maintainer Guide\n \n-The following checklist is intended to help maintainers decide on\n-whether to merge, request changes or close a PR. It also brings more\n-transparency for contributors in addition to\n-[Acceptable Formulae](Acceptable-Formulae.md) requirements.\n+## Quick merge checklist\n+\n+A detailed checklist can be found [below](#detailed-merge-checklist). This is all that really matters:\n+\n+- Ensure the name seems reasonable.\n+- Add aliases.\n+- Ensure it uses `keg_only :provided_by_macos` if it already comes with macOS.\n+- Ensure it is not a library that can be installed with\n+  [gem](https://en.wikipedia.org/wiki/RubyGems),\n+  [cpan](https://en.wikipedia.org/wiki/Cpan) or\n+  [pip](https://pip.pypa.io/en/stable/).\n+- Ensure that any dependencies are accurate and minimal. We don't need to\n+  support every possible optional feature for the software.\n+- When bottles aren't required or affected, use the GitHub squash & merge workflow for a single-formula PR or rebase & merge workflow for a multiple-formulae PR. See the [\"How to merge without bottles\" section below](#how-to-merge-without-bottles)\n+for more details.\n+- Use `brew pr-publish` or `brew pr-pull` otherwise, which adds messages to auto-close pull requests and pull bottles built by the Brew Test Bot.\n+- Thank people for contributing.\n+\n+Checking dependencies is important, because they will probably stick around\n+forever. Nobody really checks if they are necessary or not.\n+\n+Depend on as little stuff as possible. Disable X11 functionality if possible.\n+For example, we build Wireshark, but not the heavy GUI.\n+\n+Homebrew is about Unix software. Stuff that builds to an `.app` should\n+be in Homebrew Cask instead.\n+\n+## Merging, rebasing, cherry-picking\n+\n+In most cases, you can simply approve a PR and an automatic merge (with bottles)\n+will be performed by [@BrewTestBot](https://github.com/BrewTestBot).\n+See [Brew Test Bot For Core Contributors](Brew-Test-Bot-For-Core-Contributors.md) for more information.\n+\n+PRs modifying formulae that don't need bottles or making changes that don't\n+require new bottles to be pulled should use GitHub's squash & merge or rebase & merge workflows.\n+See the [table below](#how-to-merge-without-bottles) for more details.\n+\n+Otherwise, you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).",
        "comment_created_at": "2021-05-19T16:15:05+00:00",
        "comment_author": "Rylan12",
        "comment_body": "Is this okay?\r\n\r\n```suggestion\r\nOtherwise (e.g. for PRs adding new formula), you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "635393768",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 11376,
        "pr_file": "docs/Homebrew-homebrew-core-Merge-Checklist.md",
        "discussion_id": "634985296",
        "commented_code": "@@ -1,22 +1,135 @@\n-# Homebrew/homebrew-core Merge Checklist\n+# Homebrew/homebrew-core Maintainer Guide\n \n-The following checklist is intended to help maintainers decide on\n-whether to merge, request changes or close a PR. It also brings more\n-transparency for contributors in addition to\n-[Acceptable Formulae](Acceptable-Formulae.md) requirements.\n+## Quick merge checklist\n+\n+A detailed checklist can be found [below](#detailed-merge-checklist). This is all that really matters:\n+\n+- Ensure the name seems reasonable.\n+- Add aliases.\n+- Ensure it uses `keg_only :provided_by_macos` if it already comes with macOS.\n+- Ensure it is not a library that can be installed with\n+  [gem](https://en.wikipedia.org/wiki/RubyGems),\n+  [cpan](https://en.wikipedia.org/wiki/Cpan) or\n+  [pip](https://pip.pypa.io/en/stable/).\n+- Ensure that any dependencies are accurate and minimal. We don't need to\n+  support every possible optional feature for the software.\n+- When bottles aren't required or affected, use the GitHub squash & merge workflow for a single-formula PR or rebase & merge workflow for a multiple-formulae PR. See the [\"How to merge without bottles\" section below](#how-to-merge-without-bottles)\n+for more details.\n+- Use `brew pr-publish` or `brew pr-pull` otherwise, which adds messages to auto-close pull requests and pull bottles built by the Brew Test Bot.\n+- Thank people for contributing.\n+\n+Checking dependencies is important, because they will probably stick around\n+forever. Nobody really checks if they are necessary or not.\n+\n+Depend on as little stuff as possible. Disable X11 functionality if possible.\n+For example, we build Wireshark, but not the heavy GUI.\n+\n+Homebrew is about Unix software. Stuff that builds to an `.app` should\n+be in Homebrew Cask instead.\n+\n+## Merging, rebasing, cherry-picking\n+\n+In most cases, you can simply approve a PR and an automatic merge (with bottles)\n+will be performed by [@BrewTestBot](https://github.com/BrewTestBot).\n+See [Brew Test Bot For Core Contributors](Brew-Test-Bot-For-Core-Contributors.md) for more information.\n+\n+PRs modifying formulae that don't need bottles or making changes that don't\n+require new bottles to be pulled should use GitHub's squash & merge or rebase & merge workflows.\n+See the [table below](#how-to-merge-without-bottles) for more details.\n+\n+Otherwise, you should use `brew pr-pull` (or `rebase`/`cherry-pick` contributions).",
        "comment_created_at": "2021-05-19T16:15:47+00:00",
        "comment_author": "Rylan12",
        "comment_body": "Actually, this should probably mention `brew pr-publish` before `brew pr-pull`, right?",
        "pr_file_module": null
      }
    ]
  }
]