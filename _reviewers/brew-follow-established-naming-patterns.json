[
  {
    "discussion_id": "2186099917",
    "pr_number": 20209,
    "pr_file": "Library/Homebrew/cmd/bundle.rb",
    "created_at": "2025-07-04T20:45:07+00:00",
    "commented_code": "env:         [:bundle_install_cleanup, \"--global\"]\n         switch \"--all\",\n                description: \"`list` all dependencies.\"\n-        switch \"--formula\", \"--brews\",\n+        switch \"--formula\", \"--formulae\",",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2186099917",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20209,
        "pr_file": "Library/Homebrew/cmd/bundle.rb",
        "discussion_id": "2186099917",
        "commented_code": "@@ -97,7 +97,7 @@ class Bundle < AbstractCommand\n                env:         [:bundle_install_cleanup, \"--global\"]\n         switch \"--all\",\n                description: \"`list` all dependencies.\"\n-        switch \"--formula\", \"--brews\",\n+        switch \"--formula\", \"--formulae\",",
        "comment_created_at": "2025-07-04T20:45:07+00:00",
        "comment_author": "Bo98",
        "comment_body": "The old flag needs to remain as an alias for backwards compatibility",
        "pr_file_module": null
      },
      {
        "comment_id": "2186108520",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20209,
        "pr_file": "Library/Homebrew/cmd/bundle.rb",
        "discussion_id": "2186099917",
        "commented_code": "@@ -97,7 +97,7 @@ class Bundle < AbstractCommand\n                env:         [:bundle_install_cleanup, \"--global\"]\n         switch \"--all\",\n                description: \"`list` all dependencies.\"\n-        switch \"--formula\", \"--brews\",\n+        switch \"--formula\", \"--formulae\",",
        "comment_created_at": "2025-07-04T20:58:50+00:00",
        "comment_author": "issyl0",
        "comment_body": "Whoops, thanks, I'll fix that up now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121461044",
    "pr_number": 20025,
    "pr_file": "Library/Homebrew/formula_creator.rb",
    "created_at": "2025-06-02T15:11:40+00:00",
    "commented_code": "@name = FormulaCreator.name_from_url(@url) if @name.blank?\n       odebug \"name_from_url: #{@name}\"\n       @version = Version.detect(@url) if @version.nil?\n+      odebug \"Version.detect: #{@version}\"\n \n-      case @url\n-      when %r{github\\.com/(\\S+)/(\\S+)\\.git}\n-        @head = true\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n-      when %r{github\\.com/(\\S+)/(\\S+)/(archive|releases)/}\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n+      m = @url.match %r{github\\.com/(?<user>\\S+)/(?<repo>\\S+)(?<tail>.*)}",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2121461044",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20025,
        "pr_file": "Library/Homebrew/formula_creator.rb",
        "discussion_id": "2121461044",
        "commented_code": "@@ -51,18 +52,32 @@ def parse_url\n       @name = FormulaCreator.name_from_url(@url) if @name.blank?\n       odebug \"name_from_url: #{@name}\"\n       @version = Version.detect(@url) if @version.nil?\n+      odebug \"Version.detect: #{@version}\"\n \n-      case @url\n-      when %r{github\\.com/(\\S+)/(\\S+)\\.git}\n-        @head = true\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n-      when %r{github\\.com/(\\S+)/(\\S+)/(archive|releases)/}\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n+      m = @url.match %r{github\\.com/(?<user>\\S+)/(?<repo>\\S+)(?<tail>.*)}",
        "comment_created_at": "2025-06-02T15:11:40+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "- This is a behaviour change as it'll no longer look for `archive|releases` like it did before\r\n- `m` is a poor variable name here, please use a better, longer one\r\n- I think it's worth continuing to set `user` and `repo` without `fetch`",
        "pr_file_module": null
      },
      {
        "comment_id": "2121897083",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20025,
        "pr_file": "Library/Homebrew/formula_creator.rb",
        "discussion_id": "2121461044",
        "commented_code": "@@ -51,18 +52,32 @@ def parse_url\n       @name = FormulaCreator.name_from_url(@url) if @name.blank?\n       odebug \"name_from_url: #{@name}\"\n       @version = Version.detect(@url) if @version.nil?\n+      odebug \"Version.detect: #{@version}\"\n \n-      case @url\n-      when %r{github\\.com/(\\S+)/(\\S+)\\.git}\n-        @head = true\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n-      when %r{github\\.com/(\\S+)/(\\S+)/(archive|releases)/}\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n+      m = @url.match %r{github\\.com/(?<user>\\S+)/(?<repo>\\S+)(?<tail>.*)}",
        "comment_created_at": "2025-06-02T18:35:40+00:00",
        "comment_author": "abitrolly",
        "comment_body": "> This is a behaviour change as it'll no longer look for `archive|releases` like it did before\r\n\r\nFor these URLs, the `version.null?` block will not trigger, so the processing will be as before.\r\n\r\n> `m` is a poor variable name here, please use a better, longer one\r\n\r\n`match_github` sounds good?\r\n\r\n> I think it's worth continuing to set `user` and `repo` without `fetch`\r\n\r\nThese local variables were discarded at the end of the method.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2121935269",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20025,
        "pr_file": "Library/Homebrew/formula_creator.rb",
        "discussion_id": "2121461044",
        "commented_code": "@@ -51,18 +52,32 @@ def parse_url\n       @name = FormulaCreator.name_from_url(@url) if @name.blank?\n       odebug \"name_from_url: #{@name}\"\n       @version = Version.detect(@url) if @version.nil?\n+      odebug \"Version.detect: #{@version}\"\n \n-      case @url\n-      when %r{github\\.com/(\\S+)/(\\S+)\\.git}\n-        @head = true\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n-      when %r{github\\.com/(\\S+)/(\\S+)/(archive|releases)/}\n-        user = Regexp.last_match(1)\n-        repo = Regexp.last_match(2)\n-        @github = GitHub.repository(user, repo) if @fetch\n+      m = @url.match %r{github\\.com/(?<user>\\S+)/(?<repo>\\S+)(?<tail>.*)}",
        "comment_created_at": "2025-06-02T18:57:49+00:00",
        "comment_author": "abitrolly",
        "comment_body": "@MikeMcQuaid fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100576020",
    "pr_number": 19959,
    "pr_file": "Library/Homebrew/uninstall.rb",
    "created_at": "2025-05-21T15:23:56+00:00",
    "commented_code": "end\n \n               unversioned_name = f.name.gsub(/@.+$/, \"\")\n-              maybe_paths = Dir.glob(\"#{f.etc}/*#{unversioned_name}*\")\n+              maybe_paths = Dir.glob(\"#{f.etc}/#{unversioned_name}*\")\n+              excluded_names = Homebrew::API::Formula.all_formulae.keys\n+              maybe_paths = maybe_paths.reject do |path|\n+                # Remove extension only if a file\n+                # (f.e. directory with name \"openssl@1.1\" will be trimmed to \"openssl@1\")\n+                filename = if File.directory?(path)\n+                  File.basename(path)\n+                 else\n+                   File.basename(path, \".*\")\n+                 end\n+                excluded_names.include?(filename)",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2100576020",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19959,
        "pr_file": "Library/Homebrew/uninstall.rb",
        "discussion_id": "2100576020",
        "commented_code": "@@ -67,7 +67,18 @@ def self.uninstall_kegs(kegs_by_rack, casks: [], force: false, ignore_dependenci\n               end\n \n               unversioned_name = f.name.gsub(/@.+$/, \"\")\n-              maybe_paths = Dir.glob(\"#{f.etc}/*#{unversioned_name}*\")\n+              maybe_paths = Dir.glob(\"#{f.etc}/#{unversioned_name}*\")\n+              excluded_names = Homebrew::API::Formula.all_formulae.keys\n+              maybe_paths = maybe_paths.reject do |path|\n+                # Remove extension only if a file\n+                # (f.e. directory with name \"openssl@1.1\" will be trimmed to \"openssl@1\")\n+                filename = if File.directory?(path)\n+                  File.basename(path)\n+                 else\n+                   File.basename(path, \".*\")\n+                 end\n+                excluded_names.include?(filename)",
        "comment_created_at": "2025-05-21T15:23:56+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n                basename = if File.directory?(path)\r\n                  File.basename(path)\r\n                 else\r\n                   File.basename(path, \".*\")\r\n                 end\r\n                excluded_names.include?(basename)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921570613",
    "pr_number": 19116,
    "pr_file": "Library/Homebrew/utils/linkage.rb",
    "created_at": "2025-01-19T14:44:11+00:00",
    "commented_code": "+# typed: strict\n+# frozen_string_literal: true\n+\n+module Utils\n+  sig {\n+    params(binary: T.any(String, Pathname), library: T.any(String, Pathname),\n+           prefix: T.any(String, Pathname)).returns(T::Boolean)\n+  }\n+  def self.check_binary_linkage(binary, library, prefix = HOMEBREW_PREFIX)",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1921570613",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19116,
        "pr_file": "Library/Homebrew/utils/linkage.rb",
        "discussion_id": "1921570613",
        "commented_code": "@@ -0,0 +1,16 @@\n+# typed: strict\n+# frozen_string_literal: true\n+\n+module Utils\n+  sig {\n+    params(binary: T.any(String, Pathname), library: T.any(String, Pathname),\n+           prefix: T.any(String, Pathname)).returns(T::Boolean)\n+  }\n+  def self.check_binary_linkage(binary, library, prefix = HOMEBREW_PREFIX)",
        "comment_created_at": "2025-01-19T14:44:11+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n  def self.binary_linked_to_library?(binary, library, prefix = HOMEBREW_PREFIX)\r\n```\r\ngiven it returns a `T::Boolean`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1901994864",
    "pr_number": 18984,
    "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
    "created_at": "2025-01-03T17:13:47+00:00",
    "commented_code": "end\n         end\n \n+        if skip_autobump?\n+          autobump_files = {}",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1901994864",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18984,
        "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
        "discussion_id": "1901994864",
        "commented_code": "@@ -90,6 +92,31 @@ def run\n           end\n         end\n \n+        if skip_autobump?\n+          autobump_files = {}",
        "comment_created_at": "2025-01-03T17:13:47+00:00",
        "comment_author": "samford",
        "comment_body": "A small nit but `autobump_files` maybe suggests to me that these are either `File` objects or the unparsed contents of the files. Since these are arrays of package names, something like `autobump_lists` or `autobump_packages` may be more in line. It could just be me, though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1861713507",
    "pr_number": 18839,
    "pr_file": "Library/Homebrew/cask/audit.rb",
    "created_at": "2024-11-28T08:22:00+00:00",
    "commented_code": "sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1861713507",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18839,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "1861713507",
        "commented_code": "@@ -277,7 +277,7 @@ def audit_sha256_invalid\n     sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
        "comment_created_at": "2024-11-28T08:22:00+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "How about:\r\n```suggestion\r\n      return unless cask.livecheck?\r\n```\r\nWould that naming work?",
        "pr_file_module": null
      },
      {
        "comment_id": "1862186546",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18839,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "1861713507",
        "commented_code": "@@ -277,7 +277,7 @@ def audit_sha256_invalid\n     sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
        "comment_created_at": "2024-11-28T13:19:22+00:00",
        "comment_author": "samford",
        "comment_body": "It makes sense to me, as `#livecheck` returns a [`Livecheck` object](https://github.com/Homebrew/brew/blob/84823d80f71a01eba4febbbdf4259a687219885b/Library/Homebrew/livecheck.rb) (the DSL values), so `#livecheck?` would align with that. As long as it's understandable to folks who aren't familiar with livecheck (but at least know it's an optional block in packages/resources), that works for me.\r\n\r\nIf we go that route, we would need to use a different name than `@livecheck` for the related instance variable, as that's already used for the `Livecheck` object. I'm using `has_livecheck_block` for this in some places, as I wasn't sure if `has_livecheck` is equally clear. If you think that folks will understand that `has_livecheck` means \"has a `livecheck` block\", then reducing the verbosity would be nice.\r\n\r\nI'm currently using \"livecheck block?:\" as the label for the value in the `brew livecheck` debug output but we could use \"Has livecheck?:\" if we want to avoid \"block\" language everywhere. That would also align with a `has_livecheck` variable name (if used). For what it's worth, I don't think that using \"livecheck?:\" in that context would be as clear as the aforementioned options but that's just me.",
        "pr_file_module": null
      },
      {
        "comment_id": "1863133011",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18839,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "1861713507",
        "commented_code": "@@ -277,7 +277,7 @@ def audit_sha256_invalid\n     sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
        "comment_created_at": "2024-11-29T08:27:58+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "> It makes sense to me, as `#livecheck` returns a [`Livecheck` object](https://github.com/Homebrew/brew/blob/84823d80f71a01eba4febbbdf4259a687219885b/Library/Homebrew/livecheck.rb) (the DSL values), so `#livecheck?` would align with that.\r\n\r\nAnother option would be `bottle_defined?` which is the equivalent for the `bottle` block.",
        "pr_file_module": null
      },
      {
        "comment_id": "1865185252",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18839,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "1861713507",
        "commented_code": "@@ -277,7 +277,7 @@ def audit_sha256_invalid\n     sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
        "comment_created_at": "2024-12-02T03:43:34+00:00",
        "comment_author": "samford",
        "comment_body": "Looks like we also have `post_install_defined?` and `resource_defined?`, so it may be nice to follow the existing pattern. I can update this to `livecheck_defined?` if that makes sense to you.\r\n\r\nIf we do that, we can also use a similar `livecheck_defined` name in place of `has_livecheck_block`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1865370492",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18839,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "1861713507",
        "commented_code": "@@ -277,7 +277,7 @@ def audit_sha256_invalid\n     sig { void }\n     def audit_latest_with_livecheck\n       return unless cask.version&.latest?\n-      return unless cask.livecheckable?\n+      return unless cask.livecheck_block?",
        "comment_created_at": "2024-12-02T07:50:40+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "Yup, sounds good thanks!",
        "pr_file_module": null
      }
    ]
  }
]