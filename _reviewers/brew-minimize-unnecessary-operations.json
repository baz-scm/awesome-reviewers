[
  {
    "discussion_id": "2024079393",
    "pr_number": 19682,
    "pr_file": "Library/Homebrew/cask/audit.rb",
    "created_at": "2025-04-02T05:09:46+00:00",
    "commented_code": "primary_container = UnpackStrategy.detect(downloaded_path, type: @cask.container&.type, merge_xattrs: true)\n       return if primary_container.nil?\n \n+      # If the container has any dependencies we need to install them or unpacking will fail.\n+      if primary_container.dependencies.any?\n+\n+        install_options = {\n+          show_header:             true,\n+          installed_as_dependency: true,\n+          installed_on_request:    false,\n+          verbose:                 false,\n+        }.compact\n+\n+        primary_container.dependencies.each do |dep|\n+          Homebrew::Install.perform_preinstall_checks_once",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2024079393",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19682,
        "pr_file": "Library/Homebrew/cask/audit.rb",
        "discussion_id": "2024079393",
        "commented_code": "@@ -564,6 +564,29 @@ def extract_artifacts\n       primary_container = UnpackStrategy.detect(downloaded_path, type: @cask.container&.type, merge_xattrs: true)\n       return if primary_container.nil?\n \n+      # If the container has any dependencies we need to install them or unpacking will fail.\n+      if primary_container.dependencies.any?\n+\n+        install_options = {\n+          show_header:             true,\n+          installed_as_dependency: true,\n+          installed_on_request:    false,\n+          verbose:                 false,\n+        }.compact\n+\n+        primary_container.dependencies.each do |dep|\n+          Homebrew::Install.perform_preinstall_checks_once",
        "comment_created_at": "2025-04-02T05:09:46+00:00",
        "comment_author": "Copilot",
        "comment_body": "Consider moving the call to 'Homebrew::Install.perform_preinstall_checks_once' outside the dependencies loop to avoid redundant invocations.\n```suggestion\n\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894861477",
    "pr_number": 18984,
    "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
    "created_at": "2024-12-22T09:36:38+00:00",
    "commented_code": "end\n         end\n \n+        # Skip formulae that are autobumped by BrewTestBot.\n+        formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\n+          next false if formula_or_cask.respond_to?(:token) # Only formulae are autobumped.\n+\n+          autobump_file = formula_or_cask.tap.path/\".github/autobump.txt\"\n+          next false unless File.exist?(autobump_file)\n+\n+          if File.read(autobump_file).include?(formula_or_cask.name)\n+            odebug \"Skipping #{formula_or_cask.name} as it is autobumped.\"\n+            true\n+          end",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1894861477",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18984,
        "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
        "discussion_id": "1894861477",
        "commented_code": "@@ -90,6 +90,19 @@ def run\n           end\n         end\n \n+        # Skip formulae that are autobumped by BrewTestBot.\n+        formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\n+          next false if formula_or_cask.respond_to?(:token) # Only formulae are autobumped.\n+\n+          autobump_file = formula_or_cask.tap.path/\".github/autobump.txt\"\n+          next false unless File.exist?(autobump_file)\n+\n+          if File.read(autobump_file).include?(formula_or_cask.name)\n+            odebug \"Skipping #{formula_or_cask.name} as it is autobumped.\"\n+            true\n+          end",
        "comment_created_at": "2024-12-22T09:36:38+00:00",
        "comment_author": "ZhongRuoyu",
        "comment_body": "It would be better if the file could be read outside the loop so that we don't read it over and over again.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1894955605",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18984,
        "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
        "discussion_id": "1894861477",
        "commented_code": "@@ -90,6 +90,19 @@ def run\n           end\n         end\n \n+        # Skip formulae that are autobumped by BrewTestBot.\n+        formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\n+          next false if formula_or_cask.respond_to?(:token) # Only formulae are autobumped.\n+\n+          autobump_file = formula_or_cask.tap.path/\".github/autobump.txt\"\n+          next false unless File.exist?(autobump_file)\n+\n+          if File.read(autobump_file).include?(formula_or_cask.name)\n+            odebug \"Skipping #{formula_or_cask.name} as it is autobumped.\"\n+            true\n+          end",
        "comment_created_at": "2024-12-22T14:42:04+00:00",
        "comment_author": "issyl0",
        "comment_body": "\ud83d\ude33 Thanks for picking this up!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902010437",
    "pr_number": 18984,
    "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
    "created_at": "2025-01-03T17:32:22+00:00",
    "commented_code": "end\n         end\n \n+        if skip_autobump?\n+          autobump_files = {}\n+\n+          formulae_and_casks_to_check.each do |formula_or_cask|\n+            tap = formula_or_cask.tap\n+            next if tap.nil?\n+\n+            autobump_files[tap] ||= begin\n+              autobump_path = tap.path/\".github/autobump.txt\"\n+              autobump_path.exist? ? File.read(autobump_path).lines.map(&:strip) : []\n+            end\n+          end\n+\n+          formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\n+            tap = formula_or_cask.tap\n+            next false if tap.nil?\n+\n+            name = formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n+            if autobump_files[tap].include?(name)\n+              odebug \"Skipping #{name} as it is autobumped in #{tap}.\"\n+              true\n+            end\n+          end",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1902010437",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18984,
        "pr_file": "Library/Homebrew/dev-cmd/livecheck.rb",
        "discussion_id": "1902010437",
        "commented_code": "@@ -90,6 +92,31 @@ def run\n           end\n         end\n \n+        if skip_autobump?\n+          autobump_files = {}\n+\n+          formulae_and_casks_to_check.each do |formula_or_cask|\n+            tap = formula_or_cask.tap\n+            next if tap.nil?\n+\n+            autobump_files[tap] ||= begin\n+              autobump_path = tap.path/\".github/autobump.txt\"\n+              autobump_path.exist? ? File.read(autobump_path).lines.map(&:strip) : []\n+            end\n+          end\n+\n+          formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\n+            tap = formula_or_cask.tap\n+            next false if tap.nil?\n+\n+            name = formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n+            if autobump_files[tap].include?(name)\n+              odebug \"Skipping #{name} as it is autobumped in #{tap}.\"\n+              true\n+            end\n+          end",
        "comment_created_at": "2025-01-03T17:32:22+00:00",
        "comment_author": "samford",
        "comment_body": "```suggestion\r\n          autobump_files = {}\r\n          formulae_and_casks_to_check = formulae_and_casks_to_check.reject do |formula_or_cask|\r\n            tap = formula_or_cask.tap\r\n            next false if tap.nil?\r\n\r\n            autobump_files[tap] ||= begin\r\n              autobump_path = tap.path/\".github/autobump.txt\"\r\n              autobump_path.exist? ? File.read(autobump_path).lines.map(&:strip) : []\r\n            end\r\n\r\n            name = formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\r\n            if autobump_files[tap].include?(name)\r\n              odebug \"Skipping #{name} as it is autobumped in #{tap}.\"\r\n              true\r\n            end\r\n          end\r\n```\r\n\r\nUnless I'm overlooking something, it seems like we could combine both these steps, so we don't have to iterate over `formulae_and_casks_to_check` twice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1768430659",
    "pr_number": 18363,
    "pr_file": "Library/Homebrew/github_runner_matrix.rb",
    "created_at": "2024-09-20T11:19:45+00:00",
    "commented_code": "ephemeral_suffix << \"-long\" if runner_timeout == GITHUB_ACTIONS_LONG_TIMEOUT\n     ephemeral_suffix.freeze\n \n+    # `#deploy_new_x86_64_runner?` is expensive, so:\n+    #  - avoid calling it if we don't have to\n+    #  - cache the result to a variable to avoid calling it multiple times\n+    deploy_new_x86_64_runner = @all_supported || deploy_new_x86_64_runner?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1768430659",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18363,
        "pr_file": "Library/Homebrew/github_runner_matrix.rb",
        "discussion_id": "1768430659",
        "commented_code": "@@ -158,6 +175,10 @@ def generate_runners!\n     ephemeral_suffix << \"-long\" if runner_timeout == GITHUB_ACTIONS_LONG_TIMEOUT\n     ephemeral_suffix.freeze\n \n+    # `#deploy_new_x86_64_runner?` is expensive, so:\n+    #  - avoid calling it if we don't have to\n+    #  - cache the result to a variable to avoid calling it multiple times\n+    deploy_new_x86_64_runner = @all_supported || deploy_new_x86_64_runner?",
        "comment_created_at": "2024-09-20T11:19:45+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "If it's slow: be worth putting this in the loop lazily evaluated as late as possible and memoized so that we can avoid more cases where it might not need to be called at all e.g. for the last possible `next`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1768817243",
    "pr_number": 18363,
    "pr_file": "Library/Homebrew/github_runner_matrix.rb",
    "created_at": "2024-09-20T15:27:11+00:00",
    "commented_code": "macos_version <= NEWEST_HOMEBREW_CORE_MACOS_RUNNER && macos_version >= OLDEST_HOMEBREW_CORE_MACOS_RUNNER\n   end\n \n+  NEW_INTEL_MACOS_MUST_BUILD_FORMULAE = %w[pkg-config pkgconf].freeze\n+\n+  sig { returns(T::Boolean) }\n+  def deploy_new_x86_64_runner?\n+    return true if @testing_formulae.any? { |f| NEW_INTEL_MACOS_MUST_BUILD_FORMULAE.include?(f.name) }\n+    return true if @testing_formulae.any? { |f| f.formula.class.pour_bottle_only_if == :clt_installed }\n+\n+    Formula.all.any? do |formula|\n+      non_test_dependencies = Dependency.expand(formula, cache_key: \"determine-test-runners\") do |_, dependency|\n+        Dependency.prune if dependency.test?\n+      end\n+      next false if non_test_dependencies.none? { |dep| @testing_formulae.map(&:name).include?(dep.name) }\n+\n+      formula.class.pour_bottle_only_if == :clt_installed",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1768817243",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18363,
        "pr_file": "Library/Homebrew/github_runner_matrix.rb",
        "discussion_id": "1768817243",
        "commented_code": "@@ -129,6 +129,23 @@ def runner_enabled?(macos_version)\n     macos_version <= NEWEST_HOMEBREW_CORE_MACOS_RUNNER && macos_version >= OLDEST_HOMEBREW_CORE_MACOS_RUNNER\n   end\n \n+  NEW_INTEL_MACOS_MUST_BUILD_FORMULAE = %w[pkg-config pkgconf].freeze\n+\n+  sig { returns(T::Boolean) }\n+  def deploy_new_x86_64_runner?\n+    return true if @testing_formulae.any? { |f| NEW_INTEL_MACOS_MUST_BUILD_FORMULAE.include?(f.name) }\n+    return true if @testing_formulae.any? { |f| f.formula.class.pour_bottle_only_if == :clt_installed }\n+\n+    Formula.all.any? do |formula|\n+      non_test_dependencies = Dependency.expand(formula, cache_key: \"determine-test-runners\") do |_, dependency|\n+        Dependency.prune if dependency.test?\n+      end\n+      next false if non_test_dependencies.none? { |dep| @testing_formulae.map(&:name).include?(dep.name) }\n+\n+      formula.class.pour_bottle_only_if == :clt_installed",
        "comment_created_at": "2024-09-20T15:27:11+00:00",
        "comment_author": "Bo98",
        "comment_body": "I'd move this before the dependency check (`return false if formula.class.pour_bottle_only_if != :clt_installed`). This should make it significantly faster.",
        "pr_file_module": null
      },
      {
        "comment_id": "1768830047",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18363,
        "pr_file": "Library/Homebrew/github_runner_matrix.rb",
        "discussion_id": "1768817243",
        "commented_code": "@@ -129,6 +129,23 @@ def runner_enabled?(macos_version)\n     macos_version <= NEWEST_HOMEBREW_CORE_MACOS_RUNNER && macos_version >= OLDEST_HOMEBREW_CORE_MACOS_RUNNER\n   end\n \n+  NEW_INTEL_MACOS_MUST_BUILD_FORMULAE = %w[pkg-config pkgconf].freeze\n+\n+  sig { returns(T::Boolean) }\n+  def deploy_new_x86_64_runner?\n+    return true if @testing_formulae.any? { |f| NEW_INTEL_MACOS_MUST_BUILD_FORMULAE.include?(f.name) }\n+    return true if @testing_formulae.any? { |f| f.formula.class.pour_bottle_only_if == :clt_installed }\n+\n+    Formula.all.any? do |formula|\n+      non_test_dependencies = Dependency.expand(formula, cache_key: \"determine-test-runners\") do |_, dependency|\n+        Dependency.prune if dependency.test?\n+      end\n+      next false if non_test_dependencies.none? { |dep| @testing_formulae.map(&:name).include?(dep.name) }\n+\n+      formula.class.pour_bottle_only_if == :clt_installed",
        "comment_created_at": "2024-09-20T15:38:06+00:00",
        "comment_author": "carlocab",
        "comment_body": "Are you referring to\r\n\r\nhttps://github.com/Homebrew/brew/blob/41c5f7243f6813b17d8f05c2f862c5869049d04d/Library/Homebrew/github_runner_matrix.rb#L137\r\n\r\n? Or am I misunderstanding you?",
        "pr_file_module": null
      },
      {
        "comment_id": "1768833232",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18363,
        "pr_file": "Library/Homebrew/github_runner_matrix.rb",
        "discussion_id": "1768817243",
        "commented_code": "@@ -129,6 +129,23 @@ def runner_enabled?(macos_version)\n     macos_version <= NEWEST_HOMEBREW_CORE_MACOS_RUNNER && macos_version >= OLDEST_HOMEBREW_CORE_MACOS_RUNNER\n   end\n \n+  NEW_INTEL_MACOS_MUST_BUILD_FORMULAE = %w[pkg-config pkgconf].freeze\n+\n+  sig { returns(T::Boolean) }\n+  def deploy_new_x86_64_runner?\n+    return true if @testing_formulae.any? { |f| NEW_INTEL_MACOS_MUST_BUILD_FORMULAE.include?(f.name) }\n+    return true if @testing_formulae.any? { |f| f.formula.class.pour_bottle_only_if == :clt_installed }\n+\n+    Formula.all.any? do |formula|\n+      non_test_dependencies = Dependency.expand(formula, cache_key: \"determine-test-runners\") do |_, dependency|\n+        Dependency.prune if dependency.test?\n+      end\n+      next false if non_test_dependencies.none? { |dep| @testing_formulae.map(&:name).include?(dep.name) }\n+\n+      formula.class.pour_bottle_only_if == :clt_installed",
        "comment_created_at": "2024-09-20T15:40:42+00:00",
        "comment_author": "Bo98",
        "comment_body": "No, within the `Formula.all?` block. We don't need to construct the dependency tree for every formula if we're going to reject everything that doesn't match `formula.class.pour_bottle_only_if == :clt_installed` anyway.",
        "pr_file_module": null
      },
      {
        "comment_id": "1768842572",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18363,
        "pr_file": "Library/Homebrew/github_runner_matrix.rb",
        "discussion_id": "1768817243",
        "commented_code": "@@ -129,6 +129,23 @@ def runner_enabled?(macos_version)\n     macos_version <= NEWEST_HOMEBREW_CORE_MACOS_RUNNER && macos_version >= OLDEST_HOMEBREW_CORE_MACOS_RUNNER\n   end\n \n+  NEW_INTEL_MACOS_MUST_BUILD_FORMULAE = %w[pkg-config pkgconf].freeze\n+\n+  sig { returns(T::Boolean) }\n+  def deploy_new_x86_64_runner?\n+    return true if @testing_formulae.any? { |f| NEW_INTEL_MACOS_MUST_BUILD_FORMULAE.include?(f.name) }\n+    return true if @testing_formulae.any? { |f| f.formula.class.pour_bottle_only_if == :clt_installed }\n+\n+    Formula.all.any? do |formula|\n+      non_test_dependencies = Dependency.expand(formula, cache_key: \"determine-test-runners\") do |_, dependency|\n+        Dependency.prune if dependency.test?\n+      end\n+      next false if non_test_dependencies.none? { |dep| @testing_formulae.map(&:name).include?(dep.name) }\n+\n+      formula.class.pour_bottle_only_if == :clt_installed",
        "comment_created_at": "2024-09-20T15:44:41+00:00",
        "comment_author": "Bo98",
        "comment_body": "Added a suggestion diff though might be hard to read because of how GitHub formats non-trivial suggestions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1776873493",
    "pr_number": 18420,
    "pr_file": "Library/Homebrew/cask/artifact/moved.rb",
    "created_at": "2024-09-26T11:27:23+00:00",
    "commented_code": ").success?\n               end\n \n+              same = true if auto_updates",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1776873493",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18420,
        "pr_file": "Library/Homebrew/cask/artifact/moved.rb",
        "discussion_id": "1776873493",
        "commented_code": "@@ -79,6 +79,8 @@ def move(adopt: false, force: false, verbose: false, predecessor: nil, reinstall\n                 ).success?\n               end\n \n+              same = true if auto_updates",
        "comment_created_at": "2024-09-26T11:27:23+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "Would be nicer to put this in `if adopt` above so it avoids reading the `source_plist` etc. unnecessarily.",
        "pr_file_module": null
      },
      {
        "comment_id": "1776914942",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18420,
        "pr_file": "Library/Homebrew/cask/artifact/moved.rb",
        "discussion_id": "1776873493",
        "commented_code": "@@ -79,6 +79,8 @@ def move(adopt: false, force: false, verbose: false, predecessor: nil, reinstall\n                 ).success?\n               end\n \n+              same = true if auto_updates",
        "comment_created_at": "2024-09-26T11:59:14+00:00",
        "comment_author": "ctaintor",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  }
]