[
  {
    "discussion_id": "2177470241",
    "pr_number": 20195,
    "pr_file": "Library/Homebrew/upgrade.rb",
    "created_at": "2025-07-01T12:22:27+00:00",
    "commented_code": "puts formulae_upgrades.join(\", \")\n       end\n \n+      upgradeable = upgradeable.reject { |f| FormulaInstaller.installed.to_a.include?(f) }",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2177470241",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20195,
        "pr_file": "Library/Homebrew/upgrade.rb",
        "discussion_id": "2177470241",
        "commented_code": "@@ -375,6 +375,10 @@ def self.upgrade_dependents(deps, formulae,\n         puts formulae_upgrades.join(\", \")\n       end\n \n+      upgradeable = upgradeable.reject { |f| FormulaInstaller.installed.to_a.include?(f) }",
        "comment_created_at": "2025-07-01T12:22:27+00:00",
        "comment_author": "carlocab",
        "comment_body": "```suggestion\r\n      upgradeable.reject! { |f| FormulaInstaller.installed.include?(f) }\r\n```\r\nIsn't this equivalent? `FormulaInstaller.installed` is a `Set`, so it should already support `#include?`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2166050078",
    "pr_number": 20168,
    "pr_file": "Library/Homebrew/cask/migrator.rb",
    "created_at": "2025-06-25T07:53:27+00:00",
    "commented_code": "when \".json\"\n         json = JSON.parse(path.read)\n         json[\"token\"] = new_token\n+        json[\"old_tokens\"] = (json[\"old_tokens\"] << old_token).uniq",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2166050078",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20168,
        "pr_file": "Library/Homebrew/cask/migrator.rb",
        "discussion_id": "2166050078",
        "commented_code": "@@ -80,6 +80,7 @@ def self.replace_caskfile_token(path, old_token, new_token)\n       when \".json\"\n         json = JSON.parse(path.read)\n         json[\"token\"] = new_token\n+        json[\"old_tokens\"] = (json[\"old_tokens\"] << old_token).uniq",
        "comment_created_at": "2025-06-25T07:53:27+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n        json[\"old_tokens\"] = [old_token, *json[\"old_tokens\"]].compact.uniq\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2025045280",
    "pr_number": 19685,
    "pr_file": "Library/Homebrew/dev-cmd/bump.rb",
    "created_at": "2025-04-02T15:08:13+00:00",
    "commented_code": "formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n           end\n \n+          formulae_and_casks.delete_if { |f_or_c| excluded_autobump.include?(f_or_c) }",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2025045280",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19685,
        "pr_file": "Library/Homebrew/dev-cmd/bump.rb",
        "discussion_id": "2025045280",
        "commented_code": "@@ -119,6 +132,8 @@ def run\n             formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n           end\n \n+          formulae_and_casks.delete_if { |f_or_c| excluded_autobump.include?(f_or_c) }",
        "comment_created_at": "2025-04-02T15:08:13+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n          formulae_and_casks &= excluded_autobump\r\n```\r\nor \r\n```suggestion\r\n          formulae_and_casks |= excluded_autobump\r\n```\r\nI can't remember which \ud83d\ude05 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2025067701",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19685,
        "pr_file": "Library/Homebrew/dev-cmd/bump.rb",
        "discussion_id": "2025045280",
        "commented_code": "@@ -119,6 +132,8 @@ def run\n             formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n           end\n \n+          formulae_and_casks.delete_if { |f_or_c| excluded_autobump.include?(f_or_c) }",
        "comment_created_at": "2025-04-02T15:19:45+00:00",
        "comment_author": "botantony",
        "comment_body": "What do you think about using `-=`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2025148894",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19685,
        "pr_file": "Library/Homebrew/dev-cmd/bump.rb",
        "discussion_id": "2025045280",
        "commented_code": "@@ -119,6 +132,8 @@ def run\n             formula_or_cask.respond_to?(:token) ? formula_or_cask.token : formula_or_cask.name\n           end\n \n+          formulae_and_casks.delete_if { |f_or_c| excluded_autobump.include?(f_or_c) }",
        "comment_created_at": "2025-04-02T15:58:33+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "That works for me also! anything that avoids a loop.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1984983701",
    "pr_number": 19254,
    "pr_file": "Library/Homebrew/install.rb",
    "created_at": "2025-03-07T12:34:14+00:00",
    "commented_code": "Upgrade.install_formula(formula_installer, upgrade:)\n       end\n+\n+      def ask_input\n+        ohai \"Do you want to proceed with the installation? [Y/y/yes/N/n]\"\n+        accepted_inputs = %w[y yes]\n+        declined_inputs = %w[n no]\n+        loop do\n+          result = $stdin.gets\n+          return unless result\n+\n+          result = result.chomp.strip.downcase\n+          if accepted_inputs.include?(result)\n+            break\n+          elsif declined_inputs.include?(result)\n+            exit 1\n+          else\n+            puts \"Invalid input. Please enter 'Y', 'y', or 'yes' to proceed, or 'N' to abort.\"\n+          end\n+        end\n+      end\n+\n+      # Build a unique list of formulae to size by including:\n+      # 1. The original formulae to install.\n+      # 2. Their outdated dependents (subject to pruning criteria).\n+      # 3. Optionally, any installed formula that depends on one of these and is outdated.\n+      def compute_sized_formulae(formulae, args:)\n+        sized_formulae = formulae.flat_map do |formula|\n+          # Always include the formula itself.\n+          formula_list = [formula]\n+\n+          deps = args.build_from_source? ? formula.deps.build : formula.deps.required\n+          # If there are dependencies, try to gather outdated, bottled ones.\n+          if deps.any?\n+            outdated_dependents = deps.map(&:to_formula).reject(&:pinned?).select do |dep|\n+              dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+            end\n+            deps.map(&:to_formula).each do |f|\n+              outdated_dependents.concat(f.recursive_dependencies.map(&:to_formula).reject(&:pinned?).select do |dep|\n+                dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+              end)\n+            end\n+            formula_list.concat(outdated_dependents)\n+          end\n+\n+          formula_list\n+        end\n+\n+        # Add any installed formula that depends on one of the sized formulae and is outdated.\n+        unless Homebrew::EnvConfig.no_installed_dependents_check?\n+          sized_formulae.concat(Formula.installed.select do |installed_formula|\n+            installed_formula.bottled? && installed_formula.outdated? &&\n+              installed_formula.deps.required.any? { |dep| sized_formulae.include?(dep.to_formula) }",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1984983701",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19254,
        "pr_file": "Library/Homebrew/install.rb",
        "discussion_id": "1984983701",
        "commented_code": "@@ -363,6 +380,89 @@ def install_formula(formula_installer)\n \n         Upgrade.install_formula(formula_installer, upgrade:)\n       end\n+\n+      def ask_input\n+        ohai \"Do you want to proceed with the installation? [Y/y/yes/N/n]\"\n+        accepted_inputs = %w[y yes]\n+        declined_inputs = %w[n no]\n+        loop do\n+          result = $stdin.gets\n+          return unless result\n+\n+          result = result.chomp.strip.downcase\n+          if accepted_inputs.include?(result)\n+            break\n+          elsif declined_inputs.include?(result)\n+            exit 1\n+          else\n+            puts \"Invalid input. Please enter 'Y', 'y', or 'yes' to proceed, or 'N' to abort.\"\n+          end\n+        end\n+      end\n+\n+      # Build a unique list of formulae to size by including:\n+      # 1. The original formulae to install.\n+      # 2. Their outdated dependents (subject to pruning criteria).\n+      # 3. Optionally, any installed formula that depends on one of these and is outdated.\n+      def compute_sized_formulae(formulae, args:)\n+        sized_formulae = formulae.flat_map do |formula|\n+          # Always include the formula itself.\n+          formula_list = [formula]\n+\n+          deps = args.build_from_source? ? formula.deps.build : formula.deps.required\n+          # If there are dependencies, try to gather outdated, bottled ones.\n+          if deps.any?\n+            outdated_dependents = deps.map(&:to_formula).reject(&:pinned?).select do |dep|\n+              dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+            end\n+            deps.map(&:to_formula).each do |f|\n+              outdated_dependents.concat(f.recursive_dependencies.map(&:to_formula).reject(&:pinned?).select do |dep|\n+                dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+              end)\n+            end\n+            formula_list.concat(outdated_dependents)\n+          end\n+\n+          formula_list\n+        end\n+\n+        # Add any installed formula that depends on one of the sized formulae and is outdated.\n+        unless Homebrew::EnvConfig.no_installed_dependents_check?\n+          sized_formulae.concat(Formula.installed.select do |installed_formula|\n+            installed_formula.bottled? && installed_formula.outdated? &&\n+              installed_formula.deps.required.any? { |dep| sized_formulae.include?(dep.to_formula) }",
        "comment_created_at": "2025-03-07T12:34:14+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n              installed_formula.deps.required.map(&:to_formula).any? { |dep| sized_formulae.include?(dep) }\r\n```\r\nany may be able to simplify this further still with `intersect?`",
        "pr_file_module": null
      },
      {
        "comment_id": "1985367110",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19254,
        "pr_file": "Library/Homebrew/install.rb",
        "discussion_id": "1984983701",
        "commented_code": "@@ -363,6 +380,89 @@ def install_formula(formula_installer)\n \n         Upgrade.install_formula(formula_installer, upgrade:)\n       end\n+\n+      def ask_input\n+        ohai \"Do you want to proceed with the installation? [Y/y/yes/N/n]\"\n+        accepted_inputs = %w[y yes]\n+        declined_inputs = %w[n no]\n+        loop do\n+          result = $stdin.gets\n+          return unless result\n+\n+          result = result.chomp.strip.downcase\n+          if accepted_inputs.include?(result)\n+            break\n+          elsif declined_inputs.include?(result)\n+            exit 1\n+          else\n+            puts \"Invalid input. Please enter 'Y', 'y', or 'yes' to proceed, or 'N' to abort.\"\n+          end\n+        end\n+      end\n+\n+      # Build a unique list of formulae to size by including:\n+      # 1. The original formulae to install.\n+      # 2. Their outdated dependents (subject to pruning criteria).\n+      # 3. Optionally, any installed formula that depends on one of these and is outdated.\n+      def compute_sized_formulae(formulae, args:)\n+        sized_formulae = formulae.flat_map do |formula|\n+          # Always include the formula itself.\n+          formula_list = [formula]\n+\n+          deps = args.build_from_source? ? formula.deps.build : formula.deps.required\n+          # If there are dependencies, try to gather outdated, bottled ones.\n+          if deps.any?\n+            outdated_dependents = deps.map(&:to_formula).reject(&:pinned?).select do |dep|\n+              dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+            end\n+            deps.map(&:to_formula).each do |f|\n+              outdated_dependents.concat(f.recursive_dependencies.map(&:to_formula).reject(&:pinned?).select do |dep|\n+                dep.installed_kegs.empty? || (dep.bottled? && dep.outdated?)\n+              end)\n+            end\n+            formula_list.concat(outdated_dependents)\n+          end\n+\n+          formula_list\n+        end\n+\n+        # Add any installed formula that depends on one of the sized formulae and is outdated.\n+        unless Homebrew::EnvConfig.no_installed_dependents_check?\n+          sized_formulae.concat(Formula.installed.select do |installed_formula|\n+            installed_formula.bottled? && installed_formula.outdated? &&\n+              installed_formula.deps.required.any? { |dep| sized_formulae.include?(dep.to_formula) }",
        "comment_created_at": "2025-03-07T16:33:59+00:00",
        "comment_author": "tyuwags",
        "comment_body": "I forgot this builtin function, thanks !",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963738498",
    "pr_number": 19340,
    "pr_file": "Library/Homebrew/diagnostic.rb",
    "created_at": "2025-02-20T15:00:50+00:00",
    "commented_code": "shadowed_formula_full_names = non_core_taps.flat_map do |tap|\n           tap_formula_names = tap.formula_names.map { |s| s.delete_prefix(\"#{tap.name}/\") }\n           (core_formula_names & tap_formula_names).map { |f| \"#{tap.name}/#{f}\" }\n-        end.compact\n+        end.compact.sort\n         return if shadowed_formula_full_names.empty?\n \n+        installed_formula_tap_names = Formula.installed.map { |f| f.tap.name }\n+                                             .reject { |name| name == \"homebrew/core\" }.uniq",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1963738498",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19340,
        "pr_file": "Library/Homebrew/diagnostic.rb",
        "discussion_id": "1963738498",
        "commented_code": "@@ -1051,13 +1051,24 @@ def check_for_duplicate_formulae\n         shadowed_formula_full_names = non_core_taps.flat_map do |tap|\n           tap_formula_names = tap.formula_names.map { |s| s.delete_prefix(\"#{tap.name}/\") }\n           (core_formula_names & tap_formula_names).map { |f| \"#{tap.name}/#{f}\" }\n-        end.compact\n+        end.compact.sort\n         return if shadowed_formula_full_names.empty?\n \n+        installed_formula_tap_names = Formula.installed.map { |f| f.tap.name }\n+                                             .reject { |name| name == \"homebrew/core\" }.uniq",
        "comment_created_at": "2025-02-20T15:00:50+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n        installed_formula_tap_names = Formula.installed.filter_map(&:tap).uniq.reject(&:official?)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1963741775",
    "pr_number": 19340,
    "pr_file": "Library/Homebrew/diagnostic.rb",
    "created_at": "2025-02-20T15:02:33+00:00",
    "commented_code": "shadowed_cask_full_names = non_core_taps.flat_map do |tap|\n           tap_cask_names = tap.cask_tokens.map { |s| s.delete_prefix(\"#{tap.name}/\") }\n           (core_cask_names & tap_cask_names).map { |f| \"#{tap.name}/#{f}\" }\n-        end.compact\n+        end.compact.sort\n         return if shadowed_cask_full_names.empty?\n \n+        installed_cask_tap_names = Cask::Caskroom.casks.map { |f| f.tap.name }\n+                                                 .reject { |name| name == \"homebrew/cask\" }.uniq",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1963741775",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19340,
        "pr_file": "Library/Homebrew/diagnostic.rb",
        "discussion_id": "1963741775",
        "commented_code": "@@ -1068,13 +1079,24 @@ def check_for_duplicate_casks\n         shadowed_cask_full_names = non_core_taps.flat_map do |tap|\n           tap_cask_names = tap.cask_tokens.map { |s| s.delete_prefix(\"#{tap.name}/\") }\n           (core_cask_names & tap_cask_names).map { |f| \"#{tap.name}/#{f}\" }\n-        end.compact\n+        end.compact.sort\n         return if shadowed_cask_full_names.empty?\n \n+        installed_cask_tap_names = Cask::Caskroom.casks.map { |f| f.tap.name }\n+                                                 .reject { |name| name == \"homebrew/cask\" }.uniq",
        "comment_created_at": "2025-02-20T15:02:33+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n        installed_cask_tap_names = Cask::Caskroom.casks.filter_map(&:tap).uniq.reject(&:official?)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959711662",
    "pr_number": 19326,
    "pr_file": "Library/Homebrew/diagnostic.rb",
    "created_at": "2025-02-18T13:06:26+00:00",
    "commented_code": "end\n       end\n \n+      def non_core_taps\n+        Tap.installed.reject(&:core_tap?).reject(&:core_cask_tap?)",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1959711662",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19326,
        "pr_file": "Library/Homebrew/diagnostic.rb",
        "discussion_id": "1959711662",
        "commented_code": "@@ -1040,6 +1040,44 @@ def check_cask_quarantine_support\n         end\n       end\n \n+      def non_core_taps\n+        Tap.installed.reject(&:core_tap?).reject(&:core_cask_tap?)",
        "comment_created_at": "2025-02-18T13:06:26+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n        @non_core_taps ||= Tap.installed.reject(&:core_tap?).reject(&:core_cask_tap?)\r\n```",
        "pr_file_module": null
      }
    ]
  }
]