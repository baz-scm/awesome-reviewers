[
  {
    "discussion_id": "2150139954",
    "pr_number": 20116,
    "pr_file": "Library/Homebrew/formula_creator.rb",
    "created_at": "2025-06-16T14:20:55+00:00",
    "commented_code": "# Class for generating a formula from a template.\n   class FormulaCreator\n     attr_accessor :name\n+    attr_reader :version\n \n     sig {\n-      params(name: T.nilable(String), version: T.nilable(String), tap: T.nilable(String), url: String,\n+      params(url: String, name: T.nilable(String), version: T.nilable(String), tap: T.nilable(String),\n              mode: T.nilable(Symbol), license: T.nilable(String), fetch: T::Boolean, head: T::Boolean).void\n     }\n-    def initialize(name, version, tap:, url:, mode:, license:, fetch:, head:)\n+    def initialize(url:, name: nil, version: nil, tap: nil, mode: nil, license: nil, fetch: false, head: false)\n       @name = name\n       @version = Version.new(version) if version",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2150139954",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20116,
        "pr_file": "Library/Homebrew/formula_creator.rb",
        "discussion_id": "2150139954",
        "commented_code": "@@ -8,12 +8,13 @@ module Homebrew\n   # Class for generating a formula from a template.\n   class FormulaCreator\n     attr_accessor :name\n+    attr_reader :version\n \n     sig {\n-      params(name: T.nilable(String), version: T.nilable(String), tap: T.nilable(String), url: String,\n+      params(url: String, name: T.nilable(String), version: T.nilable(String), tap: T.nilable(String),\n              mode: T.nilable(Symbol), license: T.nilable(String), fetch: T::Boolean, head: T::Boolean).void\n     }\n-    def initialize(name, version, tap:, url:, mode:, license:, fetch:, head:)\n+    def initialize(url:, name: nil, version: nil, tap: nil, mode: nil, license: nil, fetch: false, head: false)\n       @name = name\n       @version = Version.new(version) if version",
        "comment_created_at": "2025-06-16T14:20:55+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n      @name = name.presence\r\n      @version = Version.new(version) if version.present?\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151980103",
    "pr_number": 20116,
    "pr_file": "Library/Homebrew/dev-cmd/create.rb",
    "created_at": "2025-06-17T11:04:35+00:00",
    "commented_code": ":zig\n         end\n \n-        fc = FormulaCreator.new(\n-          args.set_name,\n-          args.set_version,\n-          tap:     args.tap,\n+        formula_creator = FormulaCreator.new(\n           url:     args.named.fetch(0),\n+          name:    args.set_name,\n+          version: args.set_version,\n+          tap:     args.tap,\n           mode:,\n           license: args.set_license,\n           fetch:   !args.no_fetch?,\n           head:    args.HEAD?,\n         )\n-        fc.parse_url\n+\n         # ask for confirmation if name wasn't passed explicitly\n         if args.set_name.blank?\n-          print \"Formula name [#{fc.name}]: \"\n-          fc.name = __gets || fc.name\n+          print \"Formula name [#{formula_creator.name}]: \"\n+          confirmed_name = __gets.presence\n+          formula_creator.name = confirmed_name if confirmed_name.present?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "2151980103",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20116,
        "pr_file": "Library/Homebrew/dev-cmd/create.rb",
        "discussion_id": "2151980103",
        "commented_code": "@@ -183,61 +183,62 @@ def create_formula\n           :zig\n         end\n \n-        fc = FormulaCreator.new(\n-          args.set_name,\n-          args.set_version,\n-          tap:     args.tap,\n+        formula_creator = FormulaCreator.new(\n           url:     args.named.fetch(0),\n+          name:    args.set_name,\n+          version: args.set_version,\n+          tap:     args.tap,\n           mode:,\n           license: args.set_license,\n           fetch:   !args.no_fetch?,\n           head:    args.HEAD?,\n         )\n-        fc.parse_url\n+\n         # ask for confirmation if name wasn't passed explicitly\n         if args.set_name.blank?\n-          print \"Formula name [#{fc.name}]: \"\n-          fc.name = __gets || fc.name\n+          print \"Formula name [#{formula_creator.name}]: \"\n+          confirmed_name = __gets.presence\n+          formula_creator.name = confirmed_name if confirmed_name.present?",
        "comment_created_at": "2025-06-17T11:04:35+00:00",
        "comment_author": "abitrolly",
        "comment_body": "```suggestion\r\n          confirmed_name = __gets\r\n          formula_creator.name = confirmed_name if confirmed_name.present?\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2152257584",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20116,
        "pr_file": "Library/Homebrew/dev-cmd/create.rb",
        "discussion_id": "2151980103",
        "commented_code": "@@ -183,61 +183,62 @@ def create_formula\n           :zig\n         end\n \n-        fc = FormulaCreator.new(\n-          args.set_name,\n-          args.set_version,\n-          tap:     args.tap,\n+        formula_creator = FormulaCreator.new(\n           url:     args.named.fetch(0),\n+          name:    args.set_name,\n+          version: args.set_version,\n+          tap:     args.tap,\n           mode:,\n           license: args.set_license,\n           fetch:   !args.no_fetch?,\n           head:    args.HEAD?,\n         )\n-        fc.parse_url\n+\n         # ask for confirmation if name wasn't passed explicitly\n         if args.set_name.blank?\n-          print \"Formula name [#{fc.name}]: \"\n-          fc.name = __gets || fc.name\n+          print \"Formula name [#{formula_creator.name}]: \"\n+          confirmed_name = __gets.presence\n+          formula_creator.name = confirmed_name if confirmed_name.present?",
        "comment_created_at": "2025-06-17T13:18:45+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "@abitrolly Why does it make sense to accept a blank name from the user here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2152310877",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20116,
        "pr_file": "Library/Homebrew/dev-cmd/create.rb",
        "discussion_id": "2151980103",
        "commented_code": "@@ -183,61 +183,62 @@ def create_formula\n           :zig\n         end\n \n-        fc = FormulaCreator.new(\n-          args.set_name,\n-          args.set_version,\n-          tap:     args.tap,\n+        formula_creator = FormulaCreator.new(\n           url:     args.named.fetch(0),\n+          name:    args.set_name,\n+          version: args.set_version,\n+          tap:     args.tap,\n           mode:,\n           license: args.set_license,\n           fetch:   !args.no_fetch?,\n           head:    args.HEAD?,\n         )\n-        fc.parse_url\n+\n         # ask for confirmation if name wasn't passed explicitly\n         if args.set_name.blank?\n-          print \"Formula name [#{fc.name}]: \"\n-          fc.name = __gets || fc.name\n+          print \"Formula name [#{formula_creator.name}]: \"\n+          confirmed_name = __gets.presence\n+          formula_creator.name = confirmed_name if confirmed_name.present?",
        "comment_created_at": "2025-06-17T13:40:45+00:00",
        "comment_author": "abitrolly",
        "comment_body": "@MikeMcQuaid according to [this blog](https://blog.appsignal.com/2018/09/11/differences-between-nil-empty-blank-and-present.html#present), `#present?` is `false` on `nil` and empty strings.\r\n\r\n```\r\n\"\".present?\r\n=> false\r\n \r\nnil.present?\r\n=> false\r\n```\r\n\r\nSo no need to check that `confirmed_name` is blank twice.",
        "pr_file_module": null
      },
      {
        "comment_id": "2152320743",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 20116,
        "pr_file": "Library/Homebrew/dev-cmd/create.rb",
        "discussion_id": "2151980103",
        "commented_code": "@@ -183,61 +183,62 @@ def create_formula\n           :zig\n         end\n \n-        fc = FormulaCreator.new(\n-          args.set_name,\n-          args.set_version,\n-          tap:     args.tap,\n+        formula_creator = FormulaCreator.new(\n           url:     args.named.fetch(0),\n+          name:    args.set_name,\n+          version: args.set_version,\n+          tap:     args.tap,\n           mode:,\n           license: args.set_license,\n           fetch:   !args.no_fetch?,\n           head:    args.HEAD?,\n         )\n-        fc.parse_url\n+\n         # ask for confirmation if name wasn't passed explicitly\n         if args.set_name.blank?\n-          print \"Formula name [#{fc.name}]: \"\n-          fc.name = __gets || fc.name\n+          print \"Formula name [#{formula_creator.name}]: \"\n+          confirmed_name = __gets.presence\n+          formula_creator.name = confirmed_name if confirmed_name.present?",
        "comment_created_at": "2025-06-17T13:44:35+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "Ok, I understand now, thanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916614322",
    "pr_number": 19094,
    "pr_file": "Library/Homebrew/utils/pypi.rb",
    "created_at": "2025-01-15T13:01:29+00:00",
    "commented_code": "sig { returns(String) }\n     def to_s\n       if valid_pypi_package?\n-        out = name\n-        out += \"[#{extras.join(\",\")}]\" if extras.present?\n+        out = T.must(name)\n+        out += \"[#{extras&.join(\",\")}]\" if extras.present?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1916614322",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 19094,
        "pr_file": "Library/Homebrew/utils/pypi.rb",
        "discussion_id": "1916614322",
        "commented_code": "@@ -97,8 +97,8 @@ def pypi_info(new_version: nil)\n     sig { returns(String) }\n     def to_s\n       if valid_pypi_package?\n-        out = name\n-        out += \"[#{extras.join(\",\")}]\" if extras.present?\n+        out = T.must(name)\n+        out += \"[#{extras&.join(\",\")}]\" if extras.present?",
        "comment_created_at": "2025-01-15T13:01:29+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n        if (pypi_extras = extras.presence)\r\n          out += \"[#{pypi_extras.join(\",\")}]\" \r\n        end\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1485183838",
    "pr_number": 16586,
    "pr_file": "Library/Homebrew/extend/ENV/shared.rb",
    "created_at": "2024-02-10T16:07:36+00:00",
    "commented_code": "sig { returns(T::Hash[String, String]) }\n   def remove_cc_etc\n     keys = %w[CC CXX OBJC OBJCXX LD CPP CFLAGS CXXFLAGS OBJCFLAGS OBJCXXFLAGS LDFLAGS CPPFLAGS]\n-    keys.to_h { |key| [key, delete(key)] }\n+    keys.to_h { |key| [key, T.must(delete(key))] }",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1485183838",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 16586,
        "pr_file": "Library/Homebrew/extend/ENV/shared.rb",
        "discussion_id": "1485183838",
        "commented_code": "@@ -63,7 +63,7 @@ def reset\n   sig { returns(T::Hash[String, String]) }\n   def remove_cc_etc\n     keys = %w[CC CXX OBJC OBJCXX LD CPP CFLAGS CXXFLAGS OBJCFLAGS OBJCXXFLAGS LDFLAGS CPPFLAGS]\n-    keys.to_h { |key| [key, delete(key)] }\n+    keys.to_h { |key| [key, T.must(delete(key))] }",
        "comment_created_at": "2024-02-10T16:07:36+00:00",
        "comment_author": "reitermarkus",
        "comment_body": "Is this correct? I think this should either return `T::Hash[String, T.nilable(String)]` or we need to call `Hash#compact` before returning it.\r\n\r\nThe only use where the return value is used is when passing it to `ENV.update`, so I assume it should be the former so that the variables are cleared which weren't set before.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1816616755",
    "pr_number": 18622,
    "pr_file": "Library/Homebrew/livecheck/livecheck.rb",
    "created_at": "2024-10-25T12:44:17+00:00",
    "commented_code": "referenced_package = referenced_formula_or_cask || formula_or_cask\n \n       livecheck_url_string = livecheck_url_to_string(livecheck_url, referenced_package) if livecheck_url\n+      if livecheck_url.is_a?(Symbol) && !livecheck_url_string\n+        raise ArgumentError, \"`url #{livecheck_url.inspect}` does not reference a checkable URL\"",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1816616755",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18622,
        "pr_file": "Library/Homebrew/livecheck/livecheck.rb",
        "discussion_id": "1816616755",
        "commented_code": "@@ -612,6 +612,9 @@ def self.latest_version(\n       referenced_package = referenced_formula_or_cask || formula_or_cask\n \n       livecheck_url_string = livecheck_url_to_string(livecheck_url, referenced_package) if livecheck_url\n+      if livecheck_url.is_a?(Symbol) && !livecheck_url_string\n+        raise ArgumentError, \"`url #{livecheck_url.inspect}` does not reference a checkable URL\"",
        "comment_created_at": "2024-10-25T12:44:17+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "This feels like it would be nicer to:\r\n- move this logic to an `else` in `livecheck_url_to_string`\r\n- make `livecheck_url_to_string` always return a `String` rather than a `T.nilable(String)`\r\n\r\nAs a general rule/concept: whenever you can remove `T.nilable` usage and `raise` instead: it's nicer to do so when using Sorbet.",
        "pr_file_module": null
      },
      {
        "comment_id": "1816780448",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18622,
        "pr_file": "Library/Homebrew/livecheck/livecheck.rb",
        "discussion_id": "1816616755",
        "commented_code": "@@ -612,6 +612,9 @@ def self.latest_version(\n       referenced_package = referenced_formula_or_cask || formula_or_cask\n \n       livecheck_url_string = livecheck_url_to_string(livecheck_url, referenced_package) if livecheck_url\n+      if livecheck_url.is_a?(Symbol) && !livecheck_url_string\n+        raise ArgumentError, \"`url #{livecheck_url.inspect}` does not reference a checkable URL\"",
        "comment_created_at": "2024-10-25T14:21:15+00:00",
        "comment_author": "samford",
        "comment_body": "Makes sense to me and I agree that's a nicer approach. Thanks for the feedback.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1715409362",
    "pr_number": 18031,
    "pr_file": "Library/Homebrew/attestation.rb",
    "created_at": "2024-08-13T14:33:39+00:00",
    "commented_code": "return false if ENV.fetch(\"CI\", false)\n       return false if OS.unsupported_configuration?\n \n+      gh_version = Formula[\"gh\"].any_installed_version.to_s\n+      return false if gh_version.nil? || gh_version < \"2.49\"",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1715409362",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18031,
        "pr_file": "Library/Homebrew/attestation.rb",
        "discussion_id": "1715409362",
        "commented_code": "@@ -62,6 +62,9 @@ def self.enabled?\n       return false if ENV.fetch(\"CI\", false)\n       return false if OS.unsupported_configuration?\n \n+      gh_version = Formula[\"gh\"].any_installed_version.to_s\n+      return false if gh_version.nil? || gh_version < \"2.49\"",
        "comment_created_at": "2024-08-13T14:33:39+00:00",
        "comment_author": "woodruffw",
        "comment_body": "Per https://github.com/Homebrew/brew/pull/18030#discussion_r1714297330, I think this should be:\r\n\r\n```suggestion\r\n      gh_version = Formula[\"gh\"].any_installed_version\r\n      return false if gh_version.nil? || gh_version.version < \"2.49\"\r\n```\r\n\r\n(The current version will crash if `any_installed_version.nil?`, and might be wrong if version counting diverges from lexicographic order \ud83d\ude42)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1741062430",
    "pr_number": 18172,
    "pr_file": "Library/Homebrew/resource.rb",
    "created_at": "2024-09-02T15:21:40+00:00",
    "commented_code": "end\n \n     def tab\n+      tab = manifest_annotations[\"sh.brew.tab\"]\n+      raise Error, \"Couldn't find tab from manifest.\" if tab.blank?\n+\n+      begin\n+        JSON.parse(tab)\n+      rescue JSON::ParserError\n+        raise Error, \"Couldn't parse tab JSON.\"\n+      end\n+    end\n+\n+    def bottle_size\n+      manifest_annotations[\"sh.brew.bottle.size\"].to_i",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1741062430",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18172,
        "pr_file": "Library/Homebrew/resource.rb",
        "discussion_id": "1741062430",
        "commented_code": "@@ -286,6 +286,27 @@ def verify_download_integrity(_filename)\n     end\n \n     def tab\n+      tab = manifest_annotations[\"sh.brew.tab\"]\n+      raise Error, \"Couldn't find tab from manifest.\" if tab.blank?\n+\n+      begin\n+        JSON.parse(tab)\n+      rescue JSON::ParserError\n+        raise Error, \"Couldn't parse tab JSON.\"\n+      end\n+    end\n+\n+    def bottle_size\n+      manifest_annotations[\"sh.brew.bottle.size\"].to_i",
        "comment_created_at": "2024-09-02T15:21:40+00:00",
        "comment_author": "reitermarkus",
        "comment_body": "```suggestion\r\n      manifest_annotations.fetch(\"sh.brew.bottle.size\").to_i\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n      manifest_annotations[\"sh.brew.bottle.size\"]&.to_i\r\n```\r\n\r\ndepending on whether `manifest_annotations` is supposed to always have that key.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1774728475",
    "pr_number": 18172,
    "pr_file": "Library/Homebrew/cmd/info.rb",
    "created_at": "2024-09-25T07:54:26+00:00",
    "commented_code": "]\n         if kegs.empty?\n           puts \"Not installed\"\n+          unless (bottle = formula.bottle).nil?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1774728475",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18172,
        "pr_file": "Library/Homebrew/cmd/info.rb",
        "discussion_id": "1774728475",
        "commented_code": "@@ -303,6 +307,17 @@ def info_formula(formula)\n         ]\n         if kegs.empty?\n           puts \"Not installed\"\n+          unless (bottle = formula.bottle).nil?",
        "comment_created_at": "2024-09-25T07:54:26+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n          if (bottle = formula.bottle)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1774729888",
    "pr_number": 18172,
    "pr_file": "Library/Homebrew/software_spec.rb",
    "created_at": "2024-09-25T07:54:59+00:00",
    "commented_code": "{}\n   end\n \n+  sig { returns(T.nilable(Integer)) }\n+  def bottle_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1774729888",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18172,
        "pr_file": "Library/Homebrew/software_spec.rb",
        "discussion_id": "1774729888",
        "commented_code": "@@ -436,6 +436,20 @@ def tab_attributes\n     {}\n   end\n \n+  sig { returns(T.nilable(Integer)) }\n+  def bottle_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?",
        "comment_created_at": "2024-09-25T07:54:59+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n    resource = github_packages_manifest_resource\r\n    return unless resource&.downloaded?\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1774730333",
    "pr_number": 18172,
    "pr_file": "Library/Homebrew/software_spec.rb",
    "created_at": "2024-09-25T07:55:17+00:00",
    "commented_code": "{}\n   end\n \n+  sig { returns(T.nilable(Integer)) }\n+  def bottle_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?\n+\n+    resource.bottle_size\n+  end\n+\n+  sig { returns(T.nilable(Integer)) }\n+  def installed_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?",
    "repo_full_name": "Homebrew/brew",
    "discussion_comments": [
      {
        "comment_id": "1774730333",
        "repo_full_name": "Homebrew/brew",
        "pr_number": 18172,
        "pr_file": "Library/Homebrew/software_spec.rb",
        "discussion_id": "1774730333",
        "commented_code": "@@ -436,6 +436,20 @@ def tab_attributes\n     {}\n   end\n \n+  sig { returns(T.nilable(Integer)) }\n+  def bottle_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?\n+\n+    resource.bottle_size\n+  end\n+\n+  sig { returns(T.nilable(Integer)) }\n+  def installed_size\n+    return unless (resource = github_packages_manifest_resource)&.downloaded?",
        "comment_created_at": "2024-09-25T07:55:17+00:00",
        "comment_author": "MikeMcQuaid",
        "comment_body": "```suggestion\r\n    resource = github_packages_manifest_resource\r\n    return unless resource&.downloaded?\r\n```",
        "pr_file_module": null
      }
    ]
  }
]