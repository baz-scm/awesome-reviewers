[
  {
    "discussion_id": "2076546504",
    "pr_number": 1598,
    "pr_file": "tests/browser/patchright.py",
    "created_at": "2025-05-06T23:40:23+00:00",
    "commented_code": "+import asyncio\n+\n+from patchright.async_api import async_playwright\n+\n+\n+async def test_patchright_launch_and_close():\n+\tasync with async_playwright() as p:\n+\t\tbrowser = await p.chromium.launch(headless=True)\n+\t\tcontext = await browser.new_context()\n+\t\tpage = await context.new_page()\n+\n+\t\tawait page.goto('https://example.com')",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2076546504",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1598,
        "pr_file": "tests/browser/patchright.py",
        "discussion_id": "2076546504",
        "commented_code": "@@ -0,0 +1,20 @@\n+import asyncio\n+\n+from patchright.async_api import async_playwright\n+\n+\n+async def test_patchright_launch_and_close():\n+\tasync with async_playwright() as p:\n+\t\tbrowser = await p.chromium.launch(headless=True)\n+\t\tcontext = await browser.new_context()\n+\t\tpage = await context.new_page()\n+\n+\t\tawait page.goto('https://example.com')",
        "comment_created_at": "2025-05-06T23:40:23+00:00",
        "comment_author": "pirate",
        "comment_body": "dont use live URLs in tests, use pytest-httpserver like in `test_controller.py` or just visit `chrome://version` or `about:blank`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076547421",
    "pr_number": 1598,
    "pr_file": "tests/browser/remote_cdp.py",
    "created_at": "2025-05-06T23:41:26+00:00",
    "commented_code": "+import asyncio\n+\n+from playwright.async_api import async_playwright\n+\n+\n+async def test_remote_cdp_connection():\n+\t# Remote debugging URL - replace with actual if needed in local/dev\n+\tcdp_url = 'http://localhost:9222'  # This port must be open in CI if testing real CDP\n+\n+\tasync with async_playwright() as p:\n+\t\t# Connect to a remote Chrome instance via CDP\n+\t\tbrowser = await p.chromium.connect_over_cdp(cdp_url)\n+\t\tcontexts = browser.contexts\n+\t\tif not contexts:\n+\t\t\tcontext = await browser.new_context()\n+\t\telse:\n+\t\t\tcontext = contexts[0]\n+\n+\t\tpage = await context.new_page()\n+\t\tawait page.goto('https://example.com')",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2076547421",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1598,
        "pr_file": "tests/browser/remote_cdp.py",
        "discussion_id": "2076547421",
        "commented_code": "@@ -0,0 +1,28 @@\n+import asyncio\n+\n+from playwright.async_api import async_playwright\n+\n+\n+async def test_remote_cdp_connection():\n+\t# Remote debugging URL - replace with actual if needed in local/dev\n+\tcdp_url = 'http://localhost:9222'  # This port must be open in CI if testing real CDP\n+\n+\tasync with async_playwright() as p:\n+\t\t# Connect to a remote Chrome instance via CDP\n+\t\tbrowser = await p.chromium.connect_over_cdp(cdp_url)\n+\t\tcontexts = browser.contexts\n+\t\tif not contexts:\n+\t\t\tcontext = await browser.new_context()\n+\t\telse:\n+\t\t\tcontext = contexts[0]\n+\n+\t\tpage = await context.new_page()\n+\t\tawait page.goto('https://example.com')",
        "comment_created_at": "2025-05-06T23:41:26+00:00",
        "comment_author": "pirate",
        "comment_body": "same here, no live URLs in tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146309655",
    "pr_number": 1789,
    "pr_file": "tests/test_svg_buttons.py",
    "created_at": "2025-06-14T00:16:35+00:00",
    "commented_code": "+\"\"\"\n+Simple try of the agent.\n+\n+@dev You need to add OPENAI_API_KEY to your environment variables.\n+\"\"\"\n+\n+import os\n+import sys\n+import time\n+\n+import pytest\n+\n+from browser_use.browser import BrowserProfile, BrowserSession\n+from browser_use.dom.service import DomService\n+\n+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+import asyncio\n+\n+from langchain_openai import ChatOpenAI\n+\n+from browser_use import Agent\n+\n+llm = ChatOpenAI(model='gpt-4o')\n+\n+\n+@pytest.mark.skip(reason='this is for local testing only')\n+async def test_svg_button():\n+\tbrowser_session = BrowserSession(\n+\t\tbrowser_profile=BrowserProfile(\n+\t\t\theadless=False,\n+\t\t\tdisable_security=True,\n+\t\t\tkeep_alive=True,\n+\t\t)\n+\t)\n+\n+\tawait browser_session.start()\n+\n+\tagent = Agent(\n+\t\ttask=('click the edit icon for the short bio section on the profile page'),\n+\t\tllm=llm,\n+\t\tbrowser_session=browser_session,\n+\t\tvalidate_output=False,\n+\t\tmax_failures=1,\n+\t)\n+\n+\tpage = await agent.browser_context.new_page()\n+\tawait page.goto(f'https://tarasyarema.com/random-pages/button.html?seed={int(time.time())}')",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2146309655",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1789,
        "pr_file": "tests/test_svg_buttons.py",
        "discussion_id": "2146309655",
        "commented_code": "@@ -0,0 +1,68 @@\n+\"\"\"\n+Simple try of the agent.\n+\n+@dev You need to add OPENAI_API_KEY to your environment variables.\n+\"\"\"\n+\n+import os\n+import sys\n+import time\n+\n+import pytest\n+\n+from browser_use.browser import BrowserProfile, BrowserSession\n+from browser_use.dom.service import DomService\n+\n+sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+import asyncio\n+\n+from langchain_openai import ChatOpenAI\n+\n+from browser_use import Agent\n+\n+llm = ChatOpenAI(model='gpt-4o')\n+\n+\n+@pytest.mark.skip(reason='this is for local testing only')\n+async def test_svg_button():\n+\tbrowser_session = BrowserSession(\n+\t\tbrowser_profile=BrowserProfile(\n+\t\t\theadless=False,\n+\t\t\tdisable_security=True,\n+\t\t\tkeep_alive=True,\n+\t\t)\n+\t)\n+\n+\tawait browser_session.start()\n+\n+\tagent = Agent(\n+\t\ttask=('click the edit icon for the short bio section on the profile page'),\n+\t\tllm=llm,\n+\t\tbrowser_session=browser_session,\n+\t\tvalidate_output=False,\n+\t\tmax_failures=1,\n+\t)\n+\n+\tpage = await agent.browser_context.new_page()\n+\tawait page.goto(f'https://tarasyarema.com/random-pages/button.html?seed={int(time.time())}')",
        "comment_created_at": "2025-06-14T00:16:35+00:00",
        "comment_author": "pirate",
        "comment_body": "should use pytest-httpserver (see `tests/ci/test_controller.py`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051425113",
    "pr_number": 1425,
    "pr_file": "tests/test_anti_fingerprint.py",
    "created_at": "2025-04-19T09:31:01+00:00",
    "commented_code": "+import asyncio\n+import re\n+import json\n+\n+from browser_use.browser.browser import Browser, BrowserConfig\n+from browser_use.browser.context import BrowserContext, BrowserContextConfig\n+\n+\n+async def test_anti_fingerprint():\n+    \"\"\"Test that anti-fingerprinting measures are applied correctly.\"\"\"\n+    # Create a browser with anti-fingerprinting enabled\n+    browser_config = BrowserConfig()\n+    browser_config.anti_fingerprint = True\n+    browser = Browser(config=browser_config)\n+\n+    # Create a context with anti-fingerprinting enabled\n+    context_config = BrowserContextConfig()\n+    context_config.anti_fingerprint = True\n+    context = BrowserContext(browser=browser, config=context_config)\n+\n+    # Print the anti-fingerprint settings\n+    print(f\"Browser anti_fingerprint: {browser.config.anti_fingerprint}\")\n+    print(f\"Context anti_fingerprint: {context.config.anti_fingerprint}\")\n+\n+    # Initialize the browser context\n+    await context._initialize_session()\n+\n+    # Print the anti-fingerprint setting\n+    print(f\"Browser anti_fingerprint: {browser.config.anti_fingerprint}\")\n+    print(f\"Context anti_fingerprint: {context.config.anti_fingerprint}\")\n+\n+    # Create a page and navigate to a test site\n+    page = await context.get_current_page()\n+\n+    # Add a script to check if anti-fingerprinting is enabled\n+    await page.add_init_script(\"\"\"\n+    // Add a global variable to check if anti-fingerprinting is enabled\n+    window.checkAntiFingerprinting = function() {\n+        return {\n+            isWebdriverUndefined: navigator.webdriver === undefined,\n+            hasPlugins: navigator.plugins.length > 0,\n+            platform: navigator.platform,\n+            vendor: navigator.vendor\n+        };\n+    };\n+    \"\"\")\n+\n+    await page.goto('https://browserleaks.com/javascript')",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2051440058",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1425,
        "pr_file": "tests/test_anti_fingerprint.py",
        "discussion_id": "2051425113",
        "commented_code": "@@ -0,0 +1,199 @@\n+import asyncio\n+import re\n+import json\n+\n+from browser_use.browser.browser import Browser, BrowserConfig\n+from browser_use.browser.context import BrowserContext, BrowserContextConfig\n+\n+\n+async def test_anti_fingerprint():\n+    \"\"\"Test that anti-fingerprinting measures are applied correctly.\"\"\"\n+    # Create a browser with anti-fingerprinting enabled\n+    browser_config = BrowserConfig()\n+    browser_config.anti_fingerprint = True\n+    browser = Browser(config=browser_config)\n+\n+    # Create a context with anti-fingerprinting enabled\n+    context_config = BrowserContextConfig()\n+    context_config.anti_fingerprint = True\n+    context = BrowserContext(browser=browser, config=context_config)\n+\n+    # Print the anti-fingerprint settings\n+    print(f\"Browser anti_fingerprint: {browser.config.anti_fingerprint}\")\n+    print(f\"Context anti_fingerprint: {context.config.anti_fingerprint}\")\n+\n+    # Initialize the browser context\n+    await context._initialize_session()\n+\n+    # Print the anti-fingerprint setting\n+    print(f\"Browser anti_fingerprint: {browser.config.anti_fingerprint}\")\n+    print(f\"Context anti_fingerprint: {context.config.anti_fingerprint}\")\n+\n+    # Create a page and navigate to a test site\n+    page = await context.get_current_page()\n+\n+    # Add a script to check if anti-fingerprinting is enabled\n+    await page.add_init_script(\"\"\"\n+    // Add a global variable to check if anti-fingerprinting is enabled\n+    window.checkAntiFingerprinting = function() {\n+        return {\n+            isWebdriverUndefined: navigator.webdriver === undefined,\n+            hasPlugins: navigator.plugins.length > 0,\n+            platform: navigator.platform,\n+            vendor: navigator.vendor\n+        };\n+    };\n+    \"\"\")\n+\n+    await page.goto('https://browserleaks.com/javascript')",
        "comment_created_at": "2025-04-19T09:31:01+00:00",
        "comment_author": "Kunal-Darekar",
        "comment_body": "Fixed in the latest commit. I've replaced the dependency on external websites with a local test page that implements its own fingerprinting tests. This makes the tests more reliable by eliminating external dependencies and ensures consistent test results regardless of internet connectivity.",
        "pr_file_module": null
      }
    ]
  }
]