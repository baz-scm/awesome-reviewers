[
  {
    "discussion_id": "2114981984",
    "pr_number": 1857,
    "pr_file": "browser_use/browser/session.py",
    "created_at": "2025-05-30T01:20:59+00:00",
    "commented_code": "# we could automatically relaunch the browser process with that arg added here, but they may have tabs open they dont want to lose\n \t\tself.cdp_url = self.cdp_url or f'http://localhost:{debug_port}/'\n \t\tlogger.info(f'\ud83c\udf0e Connecting to existing local browser process: browser_pid={self.browser_pid} on {self.cdp_url}')\n-\t\tself.browser = self.browser or await self.playwright.chromium.connect_over_cdp(\n-\t\t\tself.cdp_url,\n-\t\t\t**self.browser_profile.kwargs_for_connect().model_dump(),\n-\t\t)\n+\t\tassert self.driver is not None, 'Driver object is not set'",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2114981984",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1857,
        "pr_file": "browser_use/browser/session.py",
        "discussion_id": "2114981984",
        "commented_code": "@@ -390,10 +394,8 @@ async def setup_browser_via_browser_pid(self) -> None:\n \t\t# we could automatically relaunch the browser process with that arg added here, but they may have tabs open they dont want to lose\n \t\tself.cdp_url = self.cdp_url or f'http://localhost:{debug_port}/'\n \t\tlogger.info(f'\ud83c\udf0e Connecting to existing local browser process: browser_pid={self.browser_pid} on {self.cdp_url}')\n-\t\tself.browser = self.browser or await self.playwright.chromium.connect_over_cdp(\n-\t\t\tself.cdp_url,\n-\t\t\t**self.browser_profile.kwargs_for_connect().model_dump(),\n-\t\t)\n+\t\tassert self.driver is not None, 'Driver object is not set'",
        "comment_created_at": "2025-05-30T01:20:59+00:00",
        "comment_author": "pirate",
        "comment_body": "same here lets keep it named `playwright` everywhere for now.\r\n\r\nI don't want to use the word driver at all in this code because we plan on introducing some new concepts to browser-use eventually related to \"drivers\" and I want to keep that terminology separate. I think it's fine to call it playwright even if it's another driver because it has to be 100% playwright-API-compatible anyways.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2017606925",
    "pr_number": 1028,
    "pr_file": "browser_use/agent/service.py",
    "created_at": "2025-03-27T21:11:09+00:00",
    "commented_code": "# @observe(name='agent.run', ignore_output=True)\n \t@time_execution_async('--run (agent)')\n-\tasync def run(self, max_steps: int = 100) -> AgentHistoryList:\n+\tasync def run(\n+\t\tself,\n+\t\tmax_steps: int = 100,\n+\t\tbefore_step_func: Callable | None = None,\n+\t\tafter_step_func: Callable | None = None",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2017606925",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1028,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2017606925",
        "commented_code": "@@ -591,7 +591,12 @@ async def take_step(self) -> tuple[bool, bool]:\n \n \t# @observe(name='agent.run', ignore_output=True)\n \t@time_execution_async('--run (agent)')\n-\tasync def run(self, max_steps: int = 100) -> AgentHistoryList:\n+\tasync def run(\n+\t\tself,\n+\t\tmax_steps: int = 100,\n+\t\tbefore_step_func: Callable | None = None,\n+\t\tafter_step_func: Callable | None = None",
        "comment_created_at": "2025-03-27T21:11:09+00:00",
        "comment_author": "pirate",
        "comment_body": "```python\r\n# add the type signature somewhere above in the file\r\nAgentHookFunc = Callable[['Agent'], None]\r\n```\r\n\r\nCan you rename these and add the type ^\r\n```suggestion\r\n\t\ton_step_start: AgentHookFunc | None = None,\r\n\t\ton_step_end: AgentHookFunc | None = None\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908619761",
    "pr_number": 190,
    "pr_file": "browser_use/controller/views.py",
    "created_at": "2025-01-09T11:33:29+00:00",
    "commented_code": "class SendKeysAction(BaseModel):\n \tkeys: str\n+\n+class ExtractElementHtmlAction(BaseModel):\n+\tindex: int\n+\tformat: Literal['text', 'markdown', 'html'] = 'html'\n+\txpath: Optional[str] = None",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "1908619761",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 190,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "1908619761",
        "commented_code": "@@ -45,3 +45,8 @@ class ScrollAction(BaseModel):\n \n class SendKeysAction(BaseModel):\n \tkeys: str\n+\n+class ExtractElementHtmlAction(BaseModel):\n+\tindex: int\n+\tformat: Literal['text', 'markdown', 'html'] = 'html'\n+\txpath: Optional[str] = None",
        "comment_created_at": "2025-01-09T11:33:29+00:00",
        "comment_author": "shyam-king",
        "comment_body": "why `xpath` though? I don't see it being used anywhere either.",
        "pr_file_module": null
      },
      {
        "comment_id": "1908708783",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 190,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "1908619761",
        "commented_code": "@@ -45,3 +45,8 @@ class ScrollAction(BaseModel):\n \n class SendKeysAction(BaseModel):\n \tkeys: str\n+\n+class ExtractElementHtmlAction(BaseModel):\n+\tindex: int\n+\tformat: Literal['text', 'markdown', 'html'] = 'html'\n+\txpath: Optional[str] = None",
        "comment_created_at": "2025-01-09T12:30:11+00:00",
        "comment_author": "franperezlopez",
        "comment_body": "you're right ... this model is a mixture of `ClickElementAction` and `ExtractPageContentAction` models, so I kept the same philosophy. I noticed that the service methods using those models, only use the `xpath` for logging (`logger.debug(f'Element xpath: {element_node.xpath}')`), so I'm fine about removing the `xpath`",
        "pr_file_module": null
      }
    ]
  }
]