[
  {
    "discussion_id": "2136627988",
    "pr_number": 1843,
    "pr_file": "browser_use/agent/service.py",
    "created_at": "2025-06-09T22:57:10+00:00",
    "commented_code": "enable_memory: bool = True,\n \t\tmemory_config: MemoryConfig | None = None,\n \t\tsource: str | None = None,\n+\t\tsearch_engine: str = 'google',  # Moved to end to avoid breaking existing positional arguments\n \t):\n \t\tif page_extraction_llm is None:\n \t\t\tpage_extraction_llm = llm\n \n \t\t# Core components\n \t\tself.task = task\n \t\tself.llm = llm\n-\t\tself.controller = controller\n+\t\tself.controller = controller or Controller(search_engine=search_engine)",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2136627988",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1843,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2136627988",
        "commented_code": "@@ -163,14 +163,15 @@ def __init__(\n \t\tenable_memory: bool = True,\n \t\tmemory_config: MemoryConfig | None = None,\n \t\tsource: str | None = None,\n+\t\tsearch_engine: str = 'google',  # Moved to end to avoid breaking existing positional arguments\n \t):\n \t\tif page_extraction_llm is None:\n \t\t\tpage_extraction_llm = llm\n \n \t\t# Core components\n \t\tself.task = task\n \t\tself.llm = llm\n-\t\tself.controller = controller\n+\t\tself.controller = controller or Controller(search_engine=search_engine)",
        "comment_created_at": "2025-06-09T22:57:10+00:00",
        "comment_author": "pirate",
        "comment_body": "I don't want the Controller to manage action-specific configuration at the moment.\r\n\r\nWe haven't decided how we want to design configuration for actions yet. Could you change it to use an environment variable instead for now? then we could merge it faster.\r\n\r\ne.g. in side your action just check for a `search_engine = os.getenv('BROWSERUSE_SEARCH_ENGINE', 'google').lower().strip().split('.')[0]` and `assert search_engine in search_engines`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2061917132",
    "pr_number": 1482,
    "pr_file": "browser_use/browser/browser.py",
    "created_at": "2025-04-27T01:35:39+00:00",
    "commented_code": "try:\n \t\t\t# Check if browser is already running\n \t\t\tasync with httpx.AsyncClient() as client:\n-\t\t\t\tresponse = await client.get('http://localhost:9222/json/version', timeout=2)\n+\t\t\t\tresponse = await client.get(\n+\t\t\t\t\tf'http://localhost:{self.config.chrome_remote_debugging_port}/json/version', timeout=2\n+\t\t\t\t)\n \t\t\t\tif response.status_code == 200:\n-\t\t\t\t\tlogger.info('\ud83d\udd0c  Reusing existing browser found running on http://localhost:9222')\n+\t\t\t\t\tlogger.info(\n+\t\t\t\t\t\tf'\ud83d\udd0c  Reusing existing browser found running on http://localhost:{self.config.chrome_remote_debugging_port}'\n+\t\t\t\t\t)\n \t\t\t\t\tbrowser_class = getattr(playwright, self.config.browser_class)\n \t\t\t\t\tbrowser = await browser_class.connect_over_cdp(\n-\t\t\t\t\t\tendpoint_url='http://localhost:9222',\n+\t\t\t\t\t\tendpoint_url=f'http://localhost:{self.config.chrome_remote_debugging_port}',\n \t\t\t\t\t\ttimeout=20000,  # 20 second timeout for connection\n \t\t\t\t\t)\n \t\t\t\t\treturn browser\n \t\texcept httpx.RequestError:\n \t\t\tlogger.debug('\ud83c\udf0e  No existing Chrome instance found, starting a new one')\n \n \t\t# Start a new Chrome instance\n-\t\tchrome_launch_cmd = [\n-\t\t\tself.config.browser_binary_path,\n+\t\tchrome_launch_args = [\n \t\t\t*{  # remove duplicates (usually preserves the order, but not guaranteed)\n+\t\t\t\tCHROME_DEBUGGING_ARG % {'chrome_remote_debugging_port': self.config.chrome_remote_debugging_port},",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2061917132",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1482,
        "pr_file": "browser_use/browser/browser.py",
        "discussion_id": "2061917132",
        "commented_code": "@@ -189,22 +198,26 @@ async def _setup_user_provided_browser(self, playwright: Playwright) -> Playwrig\n \t\ttry:\n \t\t\t# Check if browser is already running\n \t\t\tasync with httpx.AsyncClient() as client:\n-\t\t\t\tresponse = await client.get('http://localhost:9222/json/version', timeout=2)\n+\t\t\t\tresponse = await client.get(\n+\t\t\t\t\tf'http://localhost:{self.config.chrome_remote_debugging_port}/json/version', timeout=2\n+\t\t\t\t)\n \t\t\t\tif response.status_code == 200:\n-\t\t\t\t\tlogger.info('\ud83d\udd0c  Reusing existing browser found running on http://localhost:9222')\n+\t\t\t\t\tlogger.info(\n+\t\t\t\t\t\tf'\ud83d\udd0c  Reusing existing browser found running on http://localhost:{self.config.chrome_remote_debugging_port}'\n+\t\t\t\t\t)\n \t\t\t\t\tbrowser_class = getattr(playwright, self.config.browser_class)\n \t\t\t\t\tbrowser = await browser_class.connect_over_cdp(\n-\t\t\t\t\t\tendpoint_url='http://localhost:9222',\n+\t\t\t\t\t\tendpoint_url=f'http://localhost:{self.config.chrome_remote_debugging_port}',\n \t\t\t\t\t\ttimeout=20000,  # 20 second timeout for connection\n \t\t\t\t\t)\n \t\t\t\t\treturn browser\n \t\texcept httpx.RequestError:\n \t\t\tlogger.debug('\ud83c\udf0e  No existing Chrome instance found, starting a new one')\n \n \t\t# Start a new Chrome instance\n-\t\tchrome_launch_cmd = [\n-\t\t\tself.config.browser_binary_path,\n+\t\tchrome_launch_args = [\n \t\t\t*{  # remove duplicates (usually preserves the order, but not guaranteed)\n+\t\t\t\tCHROME_DEBUGGING_ARG % {'chrome_remote_debugging_port': self.config.chrome_remote_debugging_port},",
        "comment_created_at": "2025-04-27T01:35:39+00:00",
        "comment_author": "pirate",
        "comment_body": "```suggestion\r\n\t\t\t\tf'--remote-debugging-port={self.config.chrome_remote_debugging_port}',\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2061888060",
    "pr_number": 1470,
    "pr_file": "browser_use/agent/memory/service.py",
    "created_at": "2025-04-27T00:45:31+00:00",
    "commented_code": "# Check for required packages\n \t\ttry:\n+\t\t\t# Optionally disable mem0 telemetry:\n+\t\t\t# https://github.com/mem0ai/mem0/blob/64c3d34deb056aff01126b855f1f0b655fd86ad1/mem0/memory/telemetry.py#L11-L12\n+\t\t\tif os.getenv('ANONYMIZED_TELEMETRY', 'true').lower() in 'fn0':",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2061888060",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1470,
        "pr_file": "browser_use/agent/memory/service.py",
        "discussion_id": "2061888060",
        "commented_code": "@@ -62,6 +63,10 @@ def __init__(\n \n \t\t# Check for required packages\n \t\ttry:\n+\t\t\t# Optionally disable mem0 telemetry:\n+\t\t\t# https://github.com/mem0ai/mem0/blob/64c3d34deb056aff01126b855f1f0b655fd86ad1/mem0/memory/telemetry.py#L11-L12\n+\t\t\tif os.getenv('ANONYMIZED_TELEMETRY', 'true').lower() in 'fn0':",
        "comment_created_at": "2025-04-27T00:45:31+00:00",
        "comment_author": "pirate",
        "comment_body": "```suggestion\r\n\t\t\tif os.getenv('ANONYMIZED_TELEMETRY', 'true').lower()[0] in 'fn0':\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009024107",
    "pr_number": 805,
    "pr_file": "browser_use/browser/browser.py",
    "created_at": "2025-03-23T06:21:13+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n+CAMOUFOX = True\n+",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2009024107",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 805,
        "pr_file": "browser_use/browser/browser.py",
        "discussion_id": "2009024107",
        "commented_code": "@@ -18,6 +18,8 @@\n \n logger = logging.getLogger(__name__)\n \n+CAMOUFOX = True\n+",
        "comment_created_at": "2025-03-23T06:21:13+00:00",
        "comment_author": "pirate",
        "comment_body": "```suggestion\r\nCAMOUFOX = True\r\n\r\n```\r\n\r\nthis should definbitely be an env var instead of hardcoded.\r\nSwitching the entire to project to Firefox instead of chromium is a massive change to just force everyone into.",
        "pr_file_module": null
      },
      {
        "comment_id": "2011153516",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 805,
        "pr_file": "browser_use/browser/browser.py",
        "discussion_id": "2009024107",
        "commented_code": "@@ -18,6 +18,8 @@\n \n logger = logging.getLogger(__name__)\n \n+CAMOUFOX = True\n+",
        "comment_created_at": "2025-03-25T01:42:26+00:00",
        "comment_author": "iloveitaly",
        "comment_body": "yeah, totally, i just threw this up quickly to show others where the entrypoints were\r\n\r\nif there's interest in merging this in for real i will put more effort into it",
        "pr_file_module": null
      },
      {
        "comment_id": "2011183741",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 805,
        "pr_file": "browser_use/browser/browser.py",
        "discussion_id": "2009024107",
        "commented_code": "@@ -18,6 +18,8 @@\n \n logger = logging.getLogger(__name__)\n \n+CAMOUFOX = True\n+",
        "comment_created_at": "2025-03-25T02:22:37+00:00",
        "comment_author": "pirate",
        "comment_body": "ah ok no worries. Support for non-chromium browsers did just get merged recently https://github.com/browser-use/browser-use/pull/950, so there may be some interest in this again. just needs to be added here `browser/browser.py:_setup_standard_browser`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013591088",
    "pr_number": 1146,
    "pr_file": "browser_use/agent/service.py",
    "created_at": "2025-03-26T08:13:03+00:00",
    "commented_code": "self.settings.message_context = f'Available actions: {self.available_actions}'\n \t\treturn self.settings.message_context\n \n+\tdef _check_env_variables(self) -> bool:",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2013591088",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1146,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2013591088",
        "commented_code": "@@ -238,6 +245,20 @@ def _set_message_context(self) -> str | None:\n \t\t\t\tself.settings.message_context = f'Available actions: {self.available_actions}'\n \t\treturn self.settings.message_context\n \n+\tdef _check_env_variables(self) -> bool:",
        "comment_created_at": "2025-03-26T08:13:03+00:00",
        "comment_author": "pirate",
        "comment_body": "```suggestion\r\ndef check_env_variables(keys: list[str], any_or_all=all) -> bool:\r\n    \"\"\"top-level helper function to check env var values\"\"\"\r\n    return any_or_all(os.getenv(key).strip() for key in keys)\r\n```\r\n\r\n- can be a pure util function so we can import it elsewhere too (e.g. from the examples)\r\n- then at startup we can call and check for the keys needed for that run based on config e.g. `check_env_variables(['OPENAI_API_KEY', 'CHROME_USER_DATA_DIR'])`",
        "pr_file_module": null
      },
      {
        "comment_id": "2015032821",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1146,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2013591088",
        "commented_code": "@@ -238,6 +245,20 @@ def _set_message_context(self) -> str | None:\n \t\t\t\tself.settings.message_context = f'Available actions: {self.available_actions}'\n \t\treturn self.settings.message_context\n \n+\tdef _check_env_variables(self) -> bool:",
        "comment_created_at": "2025-03-26T21:37:59+00:00",
        "comment_author": "ml5ah",
        "comment_body": "Makes sense. @pirate I would prefer having this in the utils.py file compared to here tho. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2015046359",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1146,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2013591088",
        "commented_code": "@@ -238,6 +245,20 @@ def _set_message_context(self) -> str | None:\n \t\t\t\tself.settings.message_context = f'Available actions: {self.available_actions}'\n \t\treturn self.settings.message_context\n \n+\tdef _check_env_variables(self) -> bool:",
        "comment_created_at": "2025-03-26T21:49:51+00:00",
        "comment_author": "pirate",
        "comment_body": "yes, moving it to `utils.py` is what I had in mind \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  }
]