[
  {
    "discussion_id": "1925992151",
    "pr_number": 185,
    "pr_file": "browser_use/agent/service.py",
    "created_at": "2025-01-22T21:29:11+00:00",
    "commented_code": "margin = 140\n \t\tmax_width = image.width - (2 * margin)\n \t\twrapped_text = self._wrap_text(task, regular_font, max_width)\n+\t\tlarger_font = ImageFont.truetype(regular_font.path, regular_font.size + 16)  # Increase font size more",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "1925992151",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 185,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "1925992151",
        "commented_code": "@@ -740,6 +740,7 @@ def _create_task_frame(\n \t\tmargin = 140\n \t\tmax_width = image.width - (2 * margin)\n \t\twrapped_text = self._wrap_text(task, regular_font, max_width)\n+\t\tlarger_font = ImageFont.truetype(regular_font.path, regular_font.size + 16)  # Increase font size more",
        "comment_created_at": "2025-01-22T21:29:11+00:00",
        "comment_author": "gentooboontoo",
        "comment_body": "You cannot reuse `regular_font.path` as is if `regular_font` has been loaded as fallback font when expected font files are missing.\r\n\r\nIn case of missing fonts, `regular_font` is loaded from a `BytesIO` stream (kept into `.path` attribute) and not from a real file. If you want to reuse it to create the larger font, you have to reset the stream to the beginning with `seek(0)`. Otherwise it fails with the error reported in the issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "1932683677",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 185,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "1925992151",
        "commented_code": "@@ -740,6 +740,7 @@ def _create_task_frame(\n \t\tmargin = 140\n \t\tmax_width = image.width - (2 * margin)\n \t\twrapped_text = self._wrap_text(task, regular_font, max_width)\n+\t\tlarger_font = ImageFont.truetype(regular_font.path, regular_font.size + 16)  # Increase font size more",
        "comment_created_at": "2025-01-28T18:40:02+00:00",
        "comment_author": "Cfomodz",
        "comment_body": "I see. So would it be best practice to try except the larger_font or to seek(0) the stream after creating regular_font (if loaded as fallback when the file is missing)?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051425100",
    "pr_number": 1425,
    "pr_file": "browser_use/dom/service.py",
    "created_at": "2025-04-19T09:03:19+00:00",
    "commented_code": "self.page = page\n \t\tself.xpath_cache = {}\n \n+\t\t# Load the DOM tree building JavaScript code\n \t\tself.js_code = resources.files('browser_use.dom').joinpath('buildDomTree.js').read_text()\n \n+\t\t# Check if the page's browser context has anti-fingerprinting enabled\n+\t\tself.anti_fingerprint = False\n+\t\tif hasattr(page, 'context') and hasattr(page.context, '_browser_context_config'):",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2051436153",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1425,
        "pr_file": "browser_use/dom/service.py",
        "discussion_id": "2051425100",
        "commented_code": "@@ -31,8 +31,15 @@ def __init__(self, page: 'Page'):\n \t\tself.page = page\n \t\tself.xpath_cache = {}\n \n+\t\t# Load the DOM tree building JavaScript code\n \t\tself.js_code = resources.files('browser_use.dom').joinpath('buildDomTree.js').read_text()\n \n+\t\t# Check if the page's browser context has anti-fingerprinting enabled\n+\t\tself.anti_fingerprint = False\n+\t\tif hasattr(page, 'context') and hasattr(page.context, '_browser_context_config'):",
        "comment_created_at": "2025-04-19T09:03:19+00:00",
        "comment_author": "Kunal-Darekar",
        "comment_body": "Fixed in the latest commit. I've replaced the direct access to the private attribute `_browser_context_config` with a public accessor method `get_config()`. The updated code now uses:\r\n\r\n```python\r\n# Check if the page's browser context has anti-fingerprinting enabled\r\nself.anti_fingerprint = False\r\nif hasattr(page, 'context') and hasattr(page.context, 'get_config'):\r\n    config = page.context.get_config()\r\n    if config is not None and hasattr(config, 'anti_fingerprint'):\r\n        self.anti_fingerprint = config.anti_fingerprint\r\n\r\n'''\r\nThis approach properly respects encapsulation, reduces coupling, and adds a null check to prevent potential AttributeError.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051425102",
    "pr_number": 1425,
    "pr_file": "browser_use/dom/service.py",
    "created_at": "2025-04-19T09:05:56+00:00",
    "commented_code": "self.page = page\n \t\tself.xpath_cache = {}\n \n+\t\t# Load the DOM tree building JavaScript code\n \t\tself.js_code = resources.files('browser_use.dom').joinpath('buildDomTree.js').read_text()\n \n+\t\t# Check if the page's browser context has anti-fingerprinting enabled\n+\t\tself.anti_fingerprint = False\n+\t\tif hasattr(page, 'context') and hasattr(page.context, '_browser_context_config'):\n+\t\t\tif hasattr(page.context._browser_context_config, 'anti_fingerprint'):",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2051436449",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1425,
        "pr_file": "browser_use/dom/service.py",
        "discussion_id": "2051425102",
        "commented_code": "@@ -31,8 +31,15 @@ def __init__(self, page: 'Page'):\n \t\tself.page = page\n \t\tself.xpath_cache = {}\n \n+\t\t# Load the DOM tree building JavaScript code\n \t\tself.js_code = resources.files('browser_use.dom').joinpath('buildDomTree.js').read_text()\n \n+\t\t# Check if the page's browser context has anti-fingerprinting enabled\n+\t\tself.anti_fingerprint = False\n+\t\tif hasattr(page, 'context') and hasattr(page.context, '_browser_context_config'):\n+\t\t\tif hasattr(page.context._browser_context_config, 'anti_fingerprint'):",
        "comment_created_at": "2025-04-19T09:05:56+00:00",
        "comment_author": "Kunal-Darekar",
        "comment_body": "Fixed in the latest commit. I've added a null check when accessing the configuration to prevent potential AttributeError. The updated code now uses a public accessor method get_config() instead of directly accessing the private attribute, and properly checks if the returned config is None:\r\n\r\n\r\n# Check if the page's browser context has anti-fingerprinting enabled;\r\n\r\n```\r\nself.anti_fingerprint = False\r\nif hasattr(page, 'context') and hasattr(page.context, 'get_config'):\r\n    config = page.context.get_config()\r\n    if config is not None and hasattr(config, 'anti_fingerprint'):\r\n        self.anti_fingerprint = config.anti_fingerprint\r\n\r\n```\r\n\r\nThis approach is more robust against null references and follows better encapsulation practices.",
        "pr_file_module": null
      }
    ]
  }
]