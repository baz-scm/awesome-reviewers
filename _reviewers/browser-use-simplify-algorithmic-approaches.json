[
  {
    "discussion_id": "2085428678",
    "pr_number": 1643,
    "pr_file": "browser_use/agent/service.py",
    "created_at": "2025-05-12T20:38:35+00:00",
    "commented_code": "# Update done action model too\n \t\tself.DoneActionModel = self.controller.registry.create_action_model(include_actions=['done'], page=page)\n \t\tself.DoneAgentOutput = AgentOutput.type_with_custom_actions(self.DoneActionModel)\n+\n+\tdef update_available_file_paths(self, file_paths: list[str]) -> None:\n+\t\t\"\"\"\n+\t\tUpdate the available file paths that the agent can access.\n+\n+\t\tArgs:\n+\t\t\tfile_paths: List of file paths that the agent can access\n+\t\t\"\"\"\n+\t\tself.settings.available_file_paths = file_paths\n+\t\tself._message_manager.settings.available_file_paths = file_paths",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2085428678",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1643,
        "pr_file": "browser_use/agent/service.py",
        "discussion_id": "2085428678",
        "commented_code": "@@ -1456,3 +1467,14 @@ async def _update_action_models_for_page(self, page) -> None:\n \t\t# Update done action model too\n \t\tself.DoneActionModel = self.controller.registry.create_action_model(include_actions=['done'], page=page)\n \t\tself.DoneAgentOutput = AgentOutput.type_with_custom_actions(self.DoneActionModel)\n+\n+\tdef update_available_file_paths(self, file_paths: list[str]) -> None:\n+\t\t\"\"\"\n+\t\tUpdate the available file paths that the agent can access.\n+\n+\t\tArgs:\n+\t\t\tfile_paths: List of file paths that the agent can access\n+\t\t\"\"\"\n+\t\tself.settings.available_file_paths = file_paths\n+\t\tself._message_manager.settings.available_file_paths = file_paths",
        "comment_created_at": "2025-05-12T20:38:35+00:00",
        "comment_author": "pirate",
        "comment_body": "this overwrites both of these, are you sure you dont want to set-append?\r\n```suggestion\r\n\t\tself.settings.available_file_paths = list({*self.settings.available_file_paths, *file_paths})\r\n\t\tself._message_manager.settings.available_file_paths = list({*self._message_manager.settings.available_file_paths, *file_paths})\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190717635",
    "pr_number": 2338,
    "pr_file": "browser_use/controller/service.py",
    "created_at": "2025-07-07T17:47:06+00:00",
    "commented_code": "dy_result = await retry_async_function(\n \t\t\t\tlambda: page.evaluate('() => window.innerHeight'), 'Scroll failed due to an error.'\n \t\t\t)\n+\t\t\twindow_height = dy_result or 0\n+\n+\t\t\t# Determine scroll amount based on num_pages\n+\t\t\tif params.num_pages is not None:\n+\t\t\t\tscroll_amount = int(window_height * params.num_pages)\n+\t\t\t\tpages_scrolled = params.num_pages\n+\t\t\telse:\n+\t\t\t\t# Default to one page\n+\t\t\t\tscroll_amount = window_height\n+\t\t\t\tpages_scrolled = 1.0",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2190717635",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 2338,
        "pr_file": "browser_use/controller/service.py",
        "discussion_id": "2190717635",
        "commented_code": "@@ -508,9 +508,19 @@ async def scroll(params: ScrollAction, browser_session: BrowserSession):\n \t\t\tdy_result = await retry_async_function(\n \t\t\t\tlambda: page.evaluate('() => window.innerHeight'), 'Scroll failed due to an error.'\n \t\t\t)\n+\t\t\twindow_height = dy_result or 0\n+\n+\t\t\t# Determine scroll amount based on num_pages\n+\t\t\tif params.num_pages is not None:\n+\t\t\t\tscroll_amount = int(window_height * params.num_pages)\n+\t\t\t\tpages_scrolled = params.num_pages\n+\t\t\telse:\n+\t\t\t\t# Default to one page\n+\t\t\t\tscroll_amount = window_height\n+\t\t\t\tpages_scrolled = 1.0",
        "comment_created_at": "2025-07-07T17:47:06+00:00",
        "comment_author": "mertunsall",
        "comment_body": "Similarly, this can be simplified to (once we force)\r\n```suggestion\r\n\t\t\tscroll_amount = int(window_height * params.num_pages)\r\n\t\t\tpages_scrolled = params.num_pages\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2190891589",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 2338,
        "pr_file": "browser_use/controller/service.py",
        "discussion_id": "2190717635",
        "commented_code": "@@ -508,9 +508,19 @@ async def scroll(params: ScrollAction, browser_session: BrowserSession):\n \t\t\tdy_result = await retry_async_function(\n \t\t\t\tlambda: page.evaluate('() => window.innerHeight'), 'Scroll failed due to an error.'\n \t\t\t)\n+\t\t\twindow_height = dy_result or 0\n+\n+\t\t\t# Determine scroll amount based on num_pages\n+\t\t\tif params.num_pages is not None:\n+\t\t\t\tscroll_amount = int(window_height * params.num_pages)\n+\t\t\t\tpages_scrolled = params.num_pages\n+\t\t\telse:\n+\t\t\t\t# Default to one page\n+\t\t\t\tscroll_amount = window_height\n+\t\t\t\tpages_scrolled = 1.0",
        "comment_created_at": "2025-07-07T19:42:44+00:00",
        "comment_author": "DanielTea",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029550449",
    "pr_number": 1257,
    "pr_file": "browser_use/agent/message_manager/utils.py",
    "created_at": "2025-04-04T23:35:19+00:00",
    "commented_code": "logger = logging.getLogger(__name__)\n \n+\"\"\"\n+List of model names that do not support tool/function calling capabilities.\n+Each entry can be either:\n+- A string representing the exact model name\n+- A list of strings where all parts must be present in the model name\n+\"\"\"\n+MODELS_WITHOUT_TOOL_SUPPORT = [\n+\t\"deepseek-reasoner\",\n+\t[\"deepseek-r1\"],\n+\t[\"gemma\", \"-it\"],\n+]",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2029550449",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1257,
        "pr_file": "browser_use/agent/message_manager/utils.py",
        "discussion_id": "2029550449",
        "commented_code": "@@ -15,6 +15,29 @@\n \n logger = logging.getLogger(__name__)\n \n+\"\"\"\n+List of model names that do not support tool/function calling capabilities.\n+Each entry can be either:\n+- A string representing the exact model name\n+- A list of strings where all parts must be present in the model name\n+\"\"\"\n+MODELS_WITHOUT_TOOL_SUPPORT = [\n+\t\"deepseek-reasoner\",\n+\t[\"deepseek-r1\"],\n+\t[\"gemma\", \"-it\"],\n+]",
        "comment_created_at": "2025-04-04T23:35:19+00:00",
        "comment_author": "pirate",
        "comment_body": "sorry to nit but I think this would be clearer/simpler as a list of regexes. Makes your function a bit simpler too as you can just check `re.match` for each pattern.\r\n\r\n```suggestion\r\nMODELS_WITHOUT_TOOL_SUPPORT = [\r\n\t\"deepseek-reasoner\",\r\n\t\"deepseek-r1\",\r\n\t\"gemma.*-it\",\r\n]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2029827586",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1257,
        "pr_file": "browser_use/agent/message_manager/utils.py",
        "discussion_id": "2029550449",
        "commented_code": "@@ -15,6 +15,29 @@\n \n logger = logging.getLogger(__name__)\n \n+\"\"\"\n+List of model names that do not support tool/function calling capabilities.\n+Each entry can be either:\n+- A string representing the exact model name\n+- A list of strings where all parts must be present in the model name\n+\"\"\"\n+MODELS_WITHOUT_TOOL_SUPPORT = [\n+\t\"deepseek-reasoner\",\n+\t[\"deepseek-r1\"],\n+\t[\"gemma\", \"-it\"],\n+]",
        "comment_created_at": "2025-04-05T09:50:52+00:00",
        "comment_author": "KamilU01",
        "comment_body": "You're right. This is a much better sollution. I've pushed a fix",
        "pr_file_module": null
      }
    ]
  }
]