[
  {
    "discussion_id": "2114981022",
    "pr_number": 1857,
    "pr_file": "browser_use/browser/session.py",
    "created_at": "2025-05-30T01:19:45+00:00",
    "commented_code": "\"\"\"Override to customize the set up of the connection to an existing browser\"\"\"\n \n \t\t# 1. check for a passed Page object, if present, it always takes priority, set browser_context = page.context\n-\t\tself.browser_context = (self.agent_current_page and self.agent_current_page.context) or self.browser_context or None\n+\t\tif self.agent_current_page:\n+\t\t\tself.browser_context = self.agent_current_page.context\n \n \t\t# 2. Check if the current browser connection is valid, if not clear the invalid objects\n-\t\tif self.browser_context:\n-\t\t\ttry:\n-\t\t\t\t# Try to access a property that would fail if the context is closed\n-\t\t\t\t_ = self.browser_context.pages\n-\t\t\t\t# Additional check: verify the browser is still connected\n-\t\t\t\tif self.browser_context.browser and not self.browser_context.browser.is_connected():\n-\t\t\t\t\tself.browser_context = None\n-\t\t\texcept Exception:\n-\t\t\t\t# Context is closed, clear it\n-\t\t\t\tself.browser_context = None\n-\n-\t\t# 3. if we have a browser object but it's disconnected, clear it and the context because we cant use either\n-\t\tif self.browser and not self.browser.is_connected():\n-\t\t\tif self.browser_context and (self.browser_context.browser is self.browser):\n-\t\t\t\tself.browser_context = None",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2114981022",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1857,
        "pr_file": "browser_use/browser/session.py",
        "discussion_id": "2114981022",
        "commented_code": "@@ -343,24 +350,21 @@ async def setup_browser_via_passed_objects(self) -> None:\n \t\t\"\"\"Override to customize the set up of the connection to an existing browser\"\"\"\n \n \t\t# 1. check for a passed Page object, if present, it always takes priority, set browser_context = page.context\n-\t\tself.browser_context = (self.agent_current_page and self.agent_current_page.context) or self.browser_context or None\n+\t\tif self.agent_current_page:\n+\t\t\tself.browser_context = self.agent_current_page.context\n \n \t\t# 2. Check if the current browser connection is valid, if not clear the invalid objects\n-\t\tif self.browser_context:\n-\t\t\ttry:\n-\t\t\t\t# Try to access a property that would fail if the context is closed\n-\t\t\t\t_ = self.browser_context.pages\n-\t\t\t\t# Additional check: verify the browser is still connected\n-\t\t\t\tif self.browser_context.browser and not self.browser_context.browser.is_connected():\n-\t\t\t\t\tself.browser_context = None\n-\t\t\texcept Exception:\n-\t\t\t\t# Context is closed, clear it\n-\t\t\t\tself.browser_context = None\n-\n-\t\t# 3. if we have a browser object but it's disconnected, clear it and the context because we cant use either\n-\t\tif self.browser and not self.browser.is_connected():\n-\t\t\tif self.browser_context and (self.browser_context.browser is self.browser):\n-\t\t\t\tself.browser_context = None",
        "comment_created_at": "2025-05-30T01:19:45+00:00",
        "comment_author": "pirate",
        "comment_body": "this is still needed, there are cases where we get a zombie `browser_context` that looks connected that only `browser.is_connected()` can rule out (when we're lucky enough to have a `browser` object at all)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2087687329",
    "pr_number": 1293,
    "pr_file": "browser_use/controller/service.py",
    "created_at": "2025-05-13T21:52:48+00:00",
    "commented_code": "@self.registry.action('Navigate to URL in the current tab', param_model=GoToUrlAction)\n \t\tasync def go_to_url(params: GoToUrlAction, browser: BrowserContext):\n \t\t\tpage = await browser.get_current_page()\n-\t\t\tawait page.goto(params.url)\n+\t\t\tawait page.goto(params.url, timeout=params.timeout)",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2087687329",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1293,
        "pr_file": "browser_use/controller/service.py",
        "discussion_id": "2087687329",
        "commented_code": "@@ -98,7 +98,7 @@ async def search_google(params: SearchGoogleAction, browser: BrowserContext):\n \t\t@self.registry.action('Navigate to URL in the current tab', param_model=GoToUrlAction)\n \t\tasync def go_to_url(params: GoToUrlAction, browser: BrowserContext):\n \t\t\tpage = await browser.get_current_page()\n-\t\t\tawait page.goto(params.url)\n+\t\t\tawait page.goto(params.url, timeout=params.timeout)",
        "comment_created_at": "2025-05-13T21:52:48+00:00",
        "comment_author": "pirate",
        "comment_body": "```suggestion\r\n\t\t\tawait page.goto(params.url, timeout=int((params.timeout or 30)*1000))\r\n```",
        "pr_file_module": null
      }
    ]
  }
]