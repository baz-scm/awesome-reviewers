[
  {
    "discussion_id": "2114024078",
    "pr_number": 1851,
    "pr_file": "browser_use/filesystem/service.py",
    "created_at": "2025-05-29T19:28:50+00:00",
    "commented_code": "+import shutil\n+from pathlib import Path\n+\n+\n+class FileSystem:\n+\tdef __init__(self, dir_path: str):\n+\t\tself.dir = Path(dir_path)\n+\t\tself.dir.mkdir(parents=True, exist_ok=True)\n+\t\tself.results_file = self.dir / 'results.txt'\n+\t\tself.results_file.touch(exist_ok=True)\n+\n+\tdef read_file(self, file_name: str) -> str:\n+\t\tpath = self.dir / file_name",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2114614997",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1851,
        "pr_file": "browser_use/filesystem/service.py",
        "discussion_id": "2114024078",
        "commented_code": "@@ -0,0 +1,39 @@\n+import shutil\n+from pathlib import Path\n+\n+\n+class FileSystem:\n+\tdef __init__(self, dir_path: str):\n+\t\tself.dir = Path(dir_path)\n+\t\tself.dir.mkdir(parents=True, exist_ok=True)\n+\t\tself.results_file = self.dir / 'results.txt'\n+\t\tself.results_file.touch(exist_ok=True)\n+\n+\tdef read_file(self, file_name: str) -> str:\n+\t\tpath = self.dir / file_name",
        "comment_created_at": "2025-05-29T19:28:50+00:00",
        "comment_author": "pirate",
        "comment_body": "yeah this is critical, this needs a bunch more validation to be safe:\r\n\r\n- only allow certain file extensions (probably just `.txt` right?)\r\n- don't allow `'..'`, `/`, or `\\` in filenames\r\n- strip all non-`[a-Z0-9 _-]` characters from filenames entirely, replace with `_`\r\n- only allow filenames less than 64 chars long\r\n- don't allow files to start with `#!` to prevent LLM writing scripts that could be executed + check for `+x` permission bits after writing and raise a hard error + erase the file if they are present (SMB, NFS, etc. filesystems can force permissions that would make the file dangerously executable)\r\n\r\nI would even consider `chroot`ing it somewhow. Giving an LLM direct filesystem access to save web content requires a ton of security hardening to do safely.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114628211",
    "pr_number": 1851,
    "pr_file": "browser_use/filesystem/service.py",
    "created_at": "2025-05-29T19:38:09+00:00",
    "commented_code": "+import shutil\n+from pathlib import Path\n+\n+\n+class FileSystem:\n+\tdef __init__(self, dir_path: str):\n+\t\tself.dir = Path(dir_path)",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2114628211",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1851,
        "pr_file": "browser_use/filesystem/service.py",
        "discussion_id": "2114628211",
        "commented_code": "@@ -0,0 +1,39 @@\n+import shutil\n+from pathlib import Path\n+\n+\n+class FileSystem:\n+\tdef __init__(self, dir_path: str):\n+\t\tself.dir = Path(dir_path)",
        "comment_created_at": "2025-05-29T19:38:09+00:00",
        "comment_author": "pirate",
        "comment_body": "at a minimum you should check that the passed `dir_path` is not any of these:\r\n\r\n- `/`\r\n- `~`\r\n- `~/Desktop`\r\n- `~/Documents`\r\n\r\netc. basically require that this be a dedicated directory that can be safely handed to an LLM with no oversight. Otherwise someone will for-sure call `.delete_folder()` and nuke their home folder or accidentally upload their tax return.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2008839323",
    "pr_number": 1095,
    "pr_file": "browser_use/controller/views.py",
    "created_at": "2025-03-22T19:07:23+00:00",
    "commented_code": "value: str\n \n \n+class SavePDFAction(BaseModel):\n+\tfile_path: str\n+\tprint_background: bool = False",
    "repo_full_name": "browser-use/browser-use",
    "discussion_comments": [
      {
        "comment_id": "2008839323",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1095,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "2008839323",
        "commented_code": "@@ -48,6 +48,11 @@ class ExtractPageContentAction(BaseModel):\n \tvalue: str\n \n \n+class SavePDFAction(BaseModel):\n+\tfile_path: str\n+\tprint_background: bool = False",
        "comment_created_at": "2025-03-22T19:07:23+00:00",
        "comment_author": "pirate",
        "comment_body": "Personally, I think we can remove params entirely to not give the LLM decision fatigue and also avoid potential security issues of allowing it to come up with arbitrary (possibly conflicting/invalid/undescriptive) filenames.\r\n\r\nThere are improvements to download saving coming soon in this branch: https://github.com/browser-use/browser-use/tree/gregor/lib-48-better-file-uploads\r\nso this will be revisited and improved soon anyway",
        "pr_file_module": null
      },
      {
        "comment_id": "2008840546",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1095,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "2008839323",
        "commented_code": "@@ -48,6 +48,11 @@ class ExtractPageContentAction(BaseModel):\n \tvalue: str\n \n \n+class SavePDFAction(BaseModel):\n+\tfile_path: str\n+\tprint_background: bool = False",
        "comment_created_at": "2025-03-22T19:16:09+00:00",
        "comment_author": "ml5ah",
        "comment_body": "My only concern is, If the user wants to save to a specific folder, by saying \"go to apple.com and save the homepage as a PDF to /Users/abc/xyz\", we would lose this capability. What are your thoughts? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2008861218",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1095,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "2008839323",
        "commented_code": "@@ -48,6 +48,11 @@ class ExtractPageContentAction(BaseModel):\n \tvalue: str\n \n \n+class SavePDFAction(BaseModel):\n+\tfile_path: str\n+\tprint_background: bool = False",
        "comment_created_at": "2025-03-22T19:49:58+00:00",
        "comment_author": "pirate",
        "comment_body": "yes that is intentional. the LLM should not be able to write to arbitrary paths on the filesystem for security reasons, we should definitely restrict it to the current working directory or a dedicated temp directory + sanitize & truncate filenames to prevent `OSError`s. Otherwise you could convince an LLM to overwrite/write to `~/.bashrc`, `/etc/password`, `~/Downloads/invoice_to_be_paid.pdf` etc. by hiding some malicious jailbreak prompt in the page.",
        "pr_file_module": null
      },
      {
        "comment_id": "2008919984",
        "repo_full_name": "browser-use/browser-use",
        "pr_number": 1095,
        "pr_file": "browser_use/controller/views.py",
        "discussion_id": "2008839323",
        "commented_code": "@@ -48,6 +48,11 @@ class ExtractPageContentAction(BaseModel):\n \tvalue: str\n \n \n+class SavePDFAction(BaseModel):\n+\tfile_path: str\n+\tprint_background: bool = False",
        "comment_created_at": "2025-03-22T21:05:57+00:00",
        "comment_author": "ml5ah",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]