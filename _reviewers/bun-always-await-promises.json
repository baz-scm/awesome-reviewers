[
  {
    "discussion_id": "2176307635",
    "pr_number": 20745,
    "pr_file": "src/js/builtins/Bake.ts",
    "created_at": "2025-07-01T02:48:25+00:00",
    "commented_code": "});\n         if (paramGetter[Symbol.asyncIterator] != undefined) {\n           for await (const params of paramGetter) {\n-            callRouteGenerator(type, i, layouts, pageModule, params);\n+            await callRouteGenerator(type, i, layouts, pageModule, params);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2176307635",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20745,
        "pr_file": "src/js/builtins/Bake.ts",
        "discussion_id": "2176307635",
        "commented_code": "@@ -130,11 +130,11 @@ export function renderRoutesForProdStatic(\n         });\n         if (paramGetter[Symbol.asyncIterator] != undefined) {\n           for await (const params of paramGetter) {\n-            callRouteGenerator(type, i, layouts, pageModule, params);\n+            await callRouteGenerator(type, i, layouts, pageModule, params);",
        "comment_created_at": "2025-07-01T02:48:25+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "This should check if it returned a Promise and if that Promise is not resolved, and only then use await.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2156093394",
    "pr_number": 20481,
    "pr_file": "src/js/builtins/ReadableStreamInternals.ts",
    "created_at": "2025-06-19T04:38:19+00:00",
    "commented_code": "return $readStreamIntoSink(stream, sink, true);\n }\n \n+$linkTimeConstant;\n+export function assignStreamIntoResumableSink(stream, sink) {\n+  const highWaterMark = $getByIdDirectPrivate(stream, \"highWaterMark\") || 0;\n+  let error: Error | null = null;\n+  let closed = false;\n+  try {\n+    // always call start even if reader throws\n+\n+    sink.start({ highWaterMark });\n+\n+    var reader = stream.getReader();\n+    async function drainReaderIntoSink() {\n+      if (error || closed) return;\n+\n+      try {\n+        while (true) {\n+          var { value, done } = await reader.read();\n+          if (closed) break;\n+\n+          if (done) {\n+            closed = true;\n+            // lets cover just in case we have a value when done is true\n+            // this shouldn't happen but just in case\n+            if (value) {\n+              sink.write(value);\n+            }\n+            // clean end\n+            return sink.end();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2156093394",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20481,
        "pr_file": "src/js/builtins/ReadableStreamInternals.ts",
        "discussion_id": "2156093394",
        "commented_code": "@@ -758,6 +758,74 @@ export function assignToStream(stream, sink) {\n   return $readStreamIntoSink(stream, sink, true);\n }\n \n+$linkTimeConstant;\n+export function assignStreamIntoResumableSink(stream, sink) {\n+  const highWaterMark = $getByIdDirectPrivate(stream, \"highWaterMark\") || 0;\n+  let error: Error | null = null;\n+  let closed = false;\n+  try {\n+    // always call start even if reader throws\n+\n+    sink.start({ highWaterMark });\n+\n+    var reader = stream.getReader();\n+    async function drainReaderIntoSink() {\n+      if (error || closed) return;\n+\n+      try {\n+        while (true) {\n+          var { value, done } = await reader.read();\n+          if (closed) break;\n+\n+          if (done) {\n+            closed = true;\n+            // lets cover just in case we have a value when done is true\n+            // this shouldn't happen but just in case\n+            if (value) {\n+              sink.write(value);\n+            }\n+            // clean end\n+            return sink.end();",
        "comment_created_at": "2025-06-19T04:38:19+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "sink.end can return a promise, so we should await it.",
        "pr_file_module": null
      }
    ]
  }
]