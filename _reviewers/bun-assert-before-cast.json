[
  {
    "discussion_id": "2162555479",
    "pr_number": 20552,
    "pr_file": "src/bun.js/bindings/napi.cpp",
    "created_at": "2025-06-23T21:22:41+00:00",
    "commented_code": "JSValue newTarget;\n \n     if constexpr (ConstructCall) {\n-        NapiPrototype* prototype = JSC::jsDynamicCast<NapiPrototype*>(napi->getIfPropertyExists(globalObject, vm.propertyNames->prototype));\n+        // Use ::get instead of ::getIfPropertyExists here so that DontEnum is ignored.\n+        auto prototypeValue = napi->get(globalObject, vm.propertyNames->prototype);\n         RETURN_IF_EXCEPTION(scope, {});\n+        // Calling jsDynamicCast on a JSValue that is zero is undefined behavior. If the property doesn't exist, it returns a JSValue of zero.\n+        NapiPrototype* prototype = prototypeValue ? JSC::jsDynamicCast<NapiPrototype*>(prototypeValue) : nullptr;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2162555479",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20552,
        "pr_file": "src/bun.js/bindings/napi.cpp",
        "discussion_id": "2162555479",
        "commented_code": "@@ -1717,21 +1718,36 @@ JSC_HOST_CALL_ATTRIBUTES JSC::EncodedJSValue NapiClass_ConstructorFunction(JSC::\n     JSValue newTarget;\n \n     if constexpr (ConstructCall) {\n-        NapiPrototype* prototype = JSC::jsDynamicCast<NapiPrototype*>(napi->getIfPropertyExists(globalObject, vm.propertyNames->prototype));\n+        // Use ::get instead of ::getIfPropertyExists here so that DontEnum is ignored.\n+        auto prototypeValue = napi->get(globalObject, vm.propertyNames->prototype);\n         RETURN_IF_EXCEPTION(scope, {});\n+        // Calling jsDynamicCast on a JSValue that is zero is undefined behavior. If the property doesn't exist, it returns a JSValue of zero.\n+        NapiPrototype* prototype = prototypeValue ? JSC::jsDynamicCast<NapiPrototype*>(prototypeValue) : nullptr;",
        "comment_created_at": "2025-06-23T21:22:41+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "\n```suggestion\n        NapiPrototype* prototype = JSC::jsDynamicCast<NapiPrototype*>(prototypeValue);\n```\nget returns undefined for exceptions and properties it doesn't have",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162587177",
    "pr_number": 20552,
    "pr_file": "src/bun.js/bindings/napi.cpp",
    "created_at": "2025-06-23T21:50:37+00:00",
    "commented_code": "Zig::GlobalObject* globalObject = toJS(env);\n     JSObject* js_object = toJS(value).getObject();\n     NAPI_RETURN_EARLY_IF_FALSE(env, js_object, napi_object_expected);\n+    JSValue napiTypeTagValue = globalObject->napiTypeTags()->get(js_object);\n \n-    auto* existing_tag = jsDynamicCast<Bun::NapiTypeTag*>(globalObject->napiTypeTags()->get(js_object));\n+    auto* existing_tag = napiTypeTagValue ? jsDynamicCast<Bun::NapiTypeTag*>(napiTypeTagValue) : nullptr;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2162587177",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20552,
        "pr_file": "src/bun.js/bindings/napi.cpp",
        "discussion_id": "2162587177",
        "commented_code": "@@ -2784,8 +2803,9 @@ extern \"C\" napi_status napi_type_tag_object(napi_env env, napi_value value, cons\n     Zig::GlobalObject* globalObject = toJS(env);\n     JSObject* js_object = toJS(value).getObject();\n     NAPI_RETURN_EARLY_IF_FALSE(env, js_object, napi_object_expected);\n+    JSValue napiTypeTagValue = globalObject->napiTypeTags()->get(js_object);\n \n-    auto* existing_tag = jsDynamicCast<Bun::NapiTypeTag*>(globalObject->napiTypeTags()->get(js_object));\n+    auto* existing_tag = napiTypeTagValue ? jsDynamicCast<Bun::NapiTypeTag*>(napiTypeTagValue) : nullptr;",
        "comment_created_at": "2025-06-23T21:50:37+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "\n```suggestion\n    JSValue napiTypeTagValue = globalObject->napiTypeTags()->get(js_object);\n\n    auto* existing_tag = jsDynamicCast<Bun::NapiTypeTag*>(napiTypeTagValue);\n```\n\nlooks like weakmap->get returns undefined instead of empty if the object isn't found",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152884390",
    "pr_number": 20437,
    "pr_file": "src/bun.js/bindings/Strong.cpp",
    "created_at": "2025-06-17T18:15:28+00:00",
    "commented_code": "#include \"root.h\"\n+#include <JavaScriptCore/Strong.h>\n #include <JavaScriptCore/StrongInlines.h>\n #include \"BunClientData.h\"\n #include \"wtf/DebugHeap.h\"\n-#include \"Strong.h\"\n-namespace Bun {\n+#include \"ZigGlobalObject.h\"\n \n-#if ENABLE(MALLOC_BREAKDOWN)\n-DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StrongRef);\n-#endif\n-\n-}\n-\n-extern \"C\" void Bun__StrongRef__delete(Bun::StrongRef* strongRef)\n+extern \"C\" void Bun__StrongRef__delete(JSC::JSValue* handleSlot)\n {\n-    delete strongRef;\n+    if (handleSlot) {\n+        // deallocate() will correctly remove the handle from the strong list if it's currently on it.\n+        JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\n+    }",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2152884390",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20437,
        "pr_file": "src/bun.js/bindings/Strong.cpp",
        "discussion_id": "2152884390",
        "commented_code": "@@ -1,37 +1,58 @@\n #include \"root.h\"\n+#include <JavaScriptCore/Strong.h>\n #include <JavaScriptCore/StrongInlines.h>\n #include \"BunClientData.h\"\n #include \"wtf/DebugHeap.h\"\n-#include \"Strong.h\"\n-namespace Bun {\n+#include \"ZigGlobalObject.h\"\n \n-#if ENABLE(MALLOC_BREAKDOWN)\n-DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StrongRef);\n-#endif\n-\n-}\n-\n-extern \"C\" void Bun__StrongRef__delete(Bun::StrongRef* strongRef)\n+extern \"C\" void Bun__StrongRef__delete(JSC::JSValue* handleSlot)\n {\n-    delete strongRef;\n+    if (handleSlot) {\n+        // deallocate() will correctly remove the handle from the strong list if it's currently on it.\n+        JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\n+    }",
        "comment_created_at": "2025-06-17T18:15:28+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "```suggestion\r\n    ASSERT(handleSlot);\r\n    // deallocate() will correctly remove the handle from the strong list if it's currently on it.\r\n    JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\r\n```\r\n\r\nLooks like this would be a bug if it was null",
        "pr_file_module": null
      },
      {
        "comment_id": "2152886634",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20437,
        "pr_file": "src/bun.js/bindings/Strong.cpp",
        "discussion_id": "2152884390",
        "commented_code": "@@ -1,37 +1,58 @@\n #include \"root.h\"\n+#include <JavaScriptCore/Strong.h>\n #include <JavaScriptCore/StrongInlines.h>\n #include \"BunClientData.h\"\n #include \"wtf/DebugHeap.h\"\n-#include \"Strong.h\"\n-namespace Bun {\n+#include \"ZigGlobalObject.h\"\n \n-#if ENABLE(MALLOC_BREAKDOWN)\n-DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StrongRef);\n-#endif\n-\n-}\n-\n-extern \"C\" void Bun__StrongRef__delete(Bun::StrongRef* strongRef)\n+extern \"C\" void Bun__StrongRef__delete(JSC::JSValue* handleSlot)\n {\n-    delete strongRef;\n+    if (handleSlot) {\n+        // deallocate() will correctly remove the handle from the strong list if it's currently on it.\n+        JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\n+    }",
        "comment_created_at": "2025-06-17T18:16:53+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "Same with the other Bun__StrongRef__ functions. I think instead they should `ASSERT(handleSlot)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152892028",
    "pr_number": 20437,
    "pr_file": "src/bun.js/bindings/Strong.cpp",
    "created_at": "2025-06-17T18:18:25+00:00",
    "commented_code": "#include \"root.h\"\n+#include <JavaScriptCore/Strong.h>\n #include <JavaScriptCore/StrongInlines.h>\n #include \"BunClientData.h\"\n #include \"wtf/DebugHeap.h\"\n-#include \"Strong.h\"\n-namespace Bun {\n+#include \"ZigGlobalObject.h\"\n \n-#if ENABLE(MALLOC_BREAKDOWN)\n-DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StrongRef);\n-#endif\n-\n-}\n-\n-extern \"C\" void Bun__StrongRef__delete(Bun::StrongRef* strongRef)\n+extern \"C\" void Bun__StrongRef__delete(JSC::JSValue* handleSlot)\n {\n-    delete strongRef;\n+    if (handleSlot) {\n+        // deallocate() will correctly remove the handle from the strong list if it's currently on it.\n+        JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\n+    }\n }\n \n-extern \"C\" Bun::StrongRef* Bun__StrongRef__new(JSC::JSGlobalObject* globalObject, JSC::EncodedJSValue encodedValue)\n+extern \"C\" JSC::JSValue* Bun__StrongRef__new(JSC::JSGlobalObject* globalObject, JSC::EncodedJSValue encodedValue)\n {\n-    return new Bun::StrongRef(globalObject->vm(), JSC::JSValue::decode(encodedValue));\n+    auto& vm = globalObject->vm();\n+    JSC::HandleSet* handleSet = vm.heap.handleSet();\n+    JSC::HandleSlot handleSlot = handleSet->allocate();\n+    JSC::JSValue value = JSC::JSValue::decode(encodedValue);\n+\n+    // The write barrier must be called to add the handle to the strong\n+    // list if the new value is a cell. We must use <false> because the value\n+    // might be a primitive.\n+    handleSet->writeBarrier<false>(handleSlot, value);\n+    *handleSlot = value;\n+    return handleSlot;\n }\n \n-extern \"C\" JSC::EncodedJSValue Bun__StrongRef__get(Bun::StrongRef* strongRef)\n+extern \"C\" JSC::EncodedJSValue Bun__StrongRef__get(JSC::JSValue* handleSlot)\n {\n-    return JSC::JSValue::encode(strongRef->m_cell.get());\n+    // If handleSlot is null, return an empty JSValue. Otherwise, return the value it points to.\n+    return handleSlot ? JSC::JSValue::encode(*handleSlot) : JSC::JSValue::encode(JSC::JSValue());",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2152892028",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20437,
        "pr_file": "src/bun.js/bindings/Strong.cpp",
        "discussion_id": "2152892028",
        "commented_code": "@@ -1,37 +1,58 @@\n #include \"root.h\"\n+#include <JavaScriptCore/Strong.h>\n #include <JavaScriptCore/StrongInlines.h>\n #include \"BunClientData.h\"\n #include \"wtf/DebugHeap.h\"\n-#include \"Strong.h\"\n-namespace Bun {\n+#include \"ZigGlobalObject.h\"\n \n-#if ENABLE(MALLOC_BREAKDOWN)\n-DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StrongRef);\n-#endif\n-\n-}\n-\n-extern \"C\" void Bun__StrongRef__delete(Bun::StrongRef* strongRef)\n+extern \"C\" void Bun__StrongRef__delete(JSC::JSValue* handleSlot)\n {\n-    delete strongRef;\n+    if (handleSlot) {\n+        // deallocate() will correctly remove the handle from the strong list if it's currently on it.\n+        JSC::HandleSet::heapFor(handleSlot)->deallocate(handleSlot);\n+    }\n }\n \n-extern \"C\" Bun::StrongRef* Bun__StrongRef__new(JSC::JSGlobalObject* globalObject, JSC::EncodedJSValue encodedValue)\n+extern \"C\" JSC::JSValue* Bun__StrongRef__new(JSC::JSGlobalObject* globalObject, JSC::EncodedJSValue encodedValue)\n {\n-    return new Bun::StrongRef(globalObject->vm(), JSC::JSValue::decode(encodedValue));\n+    auto& vm = globalObject->vm();\n+    JSC::HandleSet* handleSet = vm.heap.handleSet();\n+    JSC::HandleSlot handleSlot = handleSet->allocate();\n+    JSC::JSValue value = JSC::JSValue::decode(encodedValue);\n+\n+    // The write barrier must be called to add the handle to the strong\n+    // list if the new value is a cell. We must use <false> because the value\n+    // might be a primitive.\n+    handleSet->writeBarrier<false>(handleSlot, value);\n+    *handleSlot = value;\n+    return handleSlot;\n }\n \n-extern \"C\" JSC::EncodedJSValue Bun__StrongRef__get(Bun::StrongRef* strongRef)\n+extern \"C\" JSC::EncodedJSValue Bun__StrongRef__get(JSC::JSValue* handleSlot)\n {\n-    return JSC::JSValue::encode(strongRef->m_cell.get());\n+    // If handleSlot is null, return an empty JSValue. Otherwise, return the value it points to.\n+    return handleSlot ? JSC::JSValue::encode(*handleSlot) : JSC::JSValue::encode(JSC::JSValue());",
        "comment_created_at": "2025-06-17T18:18:25+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "\n```suggestion\n    ASSERT(handleSlot);\n    return JSC::JSValue::encode(*handleSlot);\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056668818",
    "pr_number": 17966,
    "pr_file": "src/bun.js/bindings/webcore/JSReadableStream.cpp",
    "created_at": "2025-04-23T18:28:54+00:00",
    "commented_code": "return JSValue::encode(jsBoolean(thisObject->disturbed()));\n }\n \n+// keep this in sync with src/codegen/replacements.ts\n+static const ASCIILiteral stateNames[] = { \"\"_s, \"closed\"_s, \"closing\"_s, \"errored\"_s, \"readable\"_s, \"waiting\"_s, \"writable\"_s };\n+\n+JSC_DEFINE_HOST_FUNCTION(JSReadableStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSReadableStream* thisObject = jsDynamicCast<JSReadableStream*>(callFrame->thisValue());\n+    if (!thisObject) return JSValue::encode(jsUndefined());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto locked = thisObject->get(lexicalGlobalObject, Identifier::fromString(vm, \"locked\"_s)).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto state = stateNames[thisObject->getDirect(vm, builtinNames.statePrivateName()).toInt32(lexicalGlobalObject)];\n+    auto supportsBYOB = thisObject->getDirect(vm, builtinNames.readableStreamControllerPrivateName()).inherits<JSReadableByteStreamController>() ? \"true\"_s : \"false\"_s;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2056668818",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17966,
        "pr_file": "src/bun.js/bindings/webcore/JSReadableStream.cpp",
        "discussion_id": "2056668818",
        "commented_code": "@@ -168,6 +169,23 @@ static JSC_DEFINE_CUSTOM_GETTER(JSReadableStreamPrototype__disturbedGetterWrap,\n     return JSValue::encode(jsBoolean(thisObject->disturbed()));\n }\n \n+// keep this in sync with src/codegen/replacements.ts\n+static const ASCIILiteral stateNames[] = { \"\"_s, \"closed\"_s, \"closing\"_s, \"errored\"_s, \"readable\"_s, \"waiting\"_s, \"writable\"_s };\n+\n+JSC_DEFINE_HOST_FUNCTION(JSReadableStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSReadableStream* thisObject = jsDynamicCast<JSReadableStream*>(callFrame->thisValue());\n+    if (!thisObject) return JSValue::encode(jsUndefined());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto locked = thisObject->get(lexicalGlobalObject, Identifier::fromString(vm, \"locked\"_s)).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto state = stateNames[thisObject->getDirect(vm, builtinNames.statePrivateName()).toInt32(lexicalGlobalObject)];\n+    auto supportsBYOB = thisObject->getDirect(vm, builtinNames.readableStreamControllerPrivateName()).inherits<JSReadableByteStreamController>() ? \"true\"_s : \"false\"_s;",
        "comment_created_at": "2025-04-23T18:28:54+00:00",
        "comment_author": "190n",
        "comment_body": "- Assert the index into `stateNames` is not out of bounds (you could declare `stateNames` with `std::to_array` so that it is easy to find the length).\r\n- Assert `getDirect` doesn't return null\r\n- Call `assertNoExceptionExceptTermination`after `toInt32`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056676263",
    "pr_number": 17966,
    "pr_file": "src/bun.js/bindings/webcore/JSTextDecoderStream.cpp",
    "created_at": "2025-04-23T18:34:06+00:00",
    "commented_code": "return JSValue::encode(JSTextDecoderStream::getConstructor(vm, prototype->globalObject()));\n }\n \n+JSC_DEFINE_HOST_FUNCTION(JSTextDecoderStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSTextDecoderStream* thisObject = jsDynamicCast<JSTextDecoderStream*>(callFrame->thisValue());\n+    if (!thisObject) return Bun::throwInvalidThisError(lexicalGlobalObject, scope, \"TextDecoderStream\", callFrame->thisValue());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto encoding = thisObject->getDirect(vm, builtinNames.encodingPrivateName()).toWTFString(lexicalGlobalObject);\n+    auto fatal = thisObject->getDirect(vm, builtinNames.fatalPrivateName()).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto ignoreBOM = thisObject->getDirect(vm, builtinNames.ignoreBOMPrivateName()).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto transform = thisObject->getDirect(vm, builtinNames.textDecoderStreamTransformPrivateName());\n+    auto readable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.readablePrivateName())).transferToWTFString();\n+    auto writable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.writablePrivateName())).transferToWTFString();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2056676263",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17966,
        "pr_file": "src/bun.js/bindings/webcore/JSTextDecoderStream.cpp",
        "discussion_id": "2056676263",
        "commented_code": "@@ -162,6 +167,23 @@ JSC_DEFINE_CUSTOM_GETTER(jsTextDecoderStreamConstructor, (JSGlobalObject * lexic\n     return JSValue::encode(JSTextDecoderStream::getConstructor(vm, prototype->globalObject()));\n }\n \n+JSC_DEFINE_HOST_FUNCTION(JSTextDecoderStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSTextDecoderStream* thisObject = jsDynamicCast<JSTextDecoderStream*>(callFrame->thisValue());\n+    if (!thisObject) return Bun::throwInvalidThisError(lexicalGlobalObject, scope, \"TextDecoderStream\", callFrame->thisValue());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto encoding = thisObject->getDirect(vm, builtinNames.encodingPrivateName()).toWTFString(lexicalGlobalObject);\n+    auto fatal = thisObject->getDirect(vm, builtinNames.fatalPrivateName()).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto ignoreBOM = thisObject->getDirect(vm, builtinNames.ignoreBOMPrivateName()).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;\n+    auto transform = thisObject->getDirect(vm, builtinNames.textDecoderStreamTransformPrivateName());\n+    auto readable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.readablePrivateName())).transferToWTFString();\n+    auto writable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.writablePrivateName())).transferToWTFString();",
        "comment_created_at": "2025-04-23T18:34:06+00:00",
        "comment_author": "190n",
        "comment_body": "Assert every `getDirect` is non-null\r\nAssert no exception except termination after all the `toXYZ()` calls\r\nMake `transform` a `JSObject*`, calling `getObject()` only once, and assert it's non-null (i.e. the value was really an object)\r\nCheck for exceptions after each `Bun__inspect` call`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056764963",
    "pr_number": 17966,
    "pr_file": "src/bun.js/bindings/webcore/JSTextEncoderStream.cpp",
    "created_at": "2025-04-23T19:36:25+00:00",
    "commented_code": "return JSValue::encode(JSTextEncoderStream::getConstructor(vm, prototype->globalObject()));\n }\n \n+JSC_DEFINE_HOST_FUNCTION(JSTextEncoderStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSTextEncoderStream* thisObject = jsDynamicCast<JSTextEncoderStream*>(callFrame->thisValue());\n+    if (!thisObject) return Bun::throwInvalidThisError(lexicalGlobalObject, scope, \"TextEncoderStream\", callFrame->thisValue());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto encoding = \"utf-8\"_s;\n+    auto transform = thisObject->getDirect(vm, builtinNames.textEncoderStreamTransformPrivateName());\n+    auto readable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.readablePrivateName())).transferToWTFString();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2056764963",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17966,
        "pr_file": "src/bun.js/bindings/webcore/JSTextEncoderStream.cpp",
        "discussion_id": "2056764963",
        "commented_code": "@@ -160,6 +165,21 @@ JSC_DEFINE_CUSTOM_GETTER(jsTextEncoderStreamConstructor, (JSGlobalObject * lexic\n     return JSValue::encode(JSTextEncoderStream::getConstructor(vm, prototype->globalObject()));\n }\n \n+JSC_DEFINE_HOST_FUNCTION(JSTextEncoderStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSTextEncoderStream* thisObject = jsDynamicCast<JSTextEncoderStream*>(callFrame->thisValue());\n+    if (!thisObject) return Bun::throwInvalidThisError(lexicalGlobalObject, scope, \"TextEncoderStream\", callFrame->thisValue());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto encoding = \"utf-8\"_s;\n+    auto transform = thisObject->getDirect(vm, builtinNames.textEncoderStreamTransformPrivateName());\n+    auto readable = Bun__inspect(lexicalGlobalObject, transform.getObject()->getDirect(vm, builtinNames.readablePrivateName())).transferToWTFString();",
        "comment_created_at": "2025-04-23T19:36:25+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "unlikely but `Bun__inspect` returns `.empty` for allocation failure. An empty check is needed here",
        "pr_file_module": null
      }
    ]
  }
]