[
  {
    "discussion_id": "2157778902",
    "pr_number": 20494,
    "pr_file": "src/bun.js/bindings/NodeVM.cpp",
    "created_at": "2025-06-19T23:30:51+00:00",
    "commented_code": "return false;\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, false);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2157778902",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/NodeVM.cpp",
        "discussion_id": "2157778902",
        "commented_code": "@@ -1308,6 +1310,7 @@ bool BaseVMOptions::fromJS(JSC::JSGlobalObject* globalObject, JSC::VM& vm, JSC::\n                 return false;\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, false);",
        "comment_created_at": "2025-06-19T23:30:51+00:00",
        "comment_author": "pfgithub",
        "comment_body": "if this is for the if, it's missing in the true branch of the if. should be\r\n```\r\nJSValue columnOffsetOpt = options->getIfPropertyExists(globalObject, Identifier::fromString(vm, \"columnOffset\"_s))\r\nRETURN_IF_EXCEPTION(scope, false);\r\nif (columnOffsetOpt) {\r\n    ...\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2157815657",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/NodeVM.cpp",
        "discussion_id": "2157778902",
        "commented_code": "@@ -1308,6 +1310,7 @@ bool BaseVMOptions::fromJS(JSC::JSGlobalObject* globalObject, JSC::VM& vm, JSC::\n                 return false;\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, false);",
        "comment_created_at": "2025-06-20T00:22:54+00:00",
        "comment_author": "nektro",
        "comment_body": "same as above",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157781399",
    "pr_number": 20494,
    "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
    "created_at": "2025-06-19T23:35:24+00:00",
    "commented_code": "sb.append(\"Error\"_s);\n         }\n     } else {\n+        RETURN_IF_EXCEPTION(scope, {});",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2157781399",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
        "discussion_id": "2157781399",
        "commented_code": "@@ -350,6 +350,7 @@ static JSValue formatStackTraceToJSValue(JSC::VM& vm, Zig::GlobalObject* globalO\n             sb.append(\"Error\"_s);\n         }\n     } else {\n+        RETURN_IF_EXCEPTION(scope, {});",
        "comment_created_at": "2025-06-19T23:35:24+00:00",
        "comment_author": "pfgithub",
        "comment_body": "ideally it would be\r\n```\r\nJSC::JSValue errorMessage = errorObject->getIfPropertyExists(lexicalGlobalObject, vm.propertyNames->message;\r\nRETURN_IF_EXCEPTION(scope, {});\r\nif (errorMessage) { ... }\r\n```\r\ninstead of having RETURN_IF_EXCEPTION in both branches",
        "pr_file_module": null
      },
      {
        "comment_id": "2157816291",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
        "discussion_id": "2157781399",
        "commented_code": "@@ -350,6 +350,7 @@ static JSValue formatStackTraceToJSValue(JSC::VM& vm, Zig::GlobalObject* globalO\n             sb.append(\"Error\"_s);\n         }\n     } else {\n+        RETURN_IF_EXCEPTION(scope, {});",
        "comment_created_at": "2025-06-20T00:24:15+00:00",
        "comment_author": "nektro",
        "comment_body": "there are indeed some redundant ones, i didnt delete them everywhere when i was going through",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157783174",
    "pr_number": 20494,
    "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
    "created_at": "2025-06-19T23:39:49+00:00",
    "commented_code": "parameters = JSC::JSScriptFetchParameters::create(vm, ScriptFetchParameters::create(typeString));\n                     }\n                 }\n+                RETURN_IF_EXCEPTION(scope, {});\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, {});",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2157783174",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
        "discussion_id": "2157783174",
        "commented_code": "@@ -4191,8 +4195,10 @@ JSC::JSInternalPromise* GlobalObject::moduleLoaderImportModule(JSGlobalObject* j\n                         parameters = JSC::JSScriptFetchParameters::create(vm, ScriptFetchParameters::create(typeString));\n                     }\n                 }\n+                RETURN_IF_EXCEPTION(scope, {});\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, {});",
        "comment_created_at": "2025-06-19T23:39:49+00:00",
        "comment_author": "pfgithub",
        "comment_body": "missing in the true branch, should probably have the variable pulled out of the if",
        "pr_file_module": null
      },
      {
        "comment_id": "2157816691",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
        "discussion_id": "2157783174",
        "commented_code": "@@ -4191,8 +4195,10 @@ JSC::JSInternalPromise* GlobalObject::moduleLoaderImportModule(JSGlobalObject* j\n                         parameters = JSC::JSScriptFetchParameters::create(vm, ScriptFetchParameters::create(typeString));\n                     }\n                 }\n+                RETURN_IF_EXCEPTION(scope, {});\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, {});",
        "comment_created_at": "2025-06-20T00:25:00+00:00",
        "comment_author": "nektro",
        "comment_body": "same as above",
        "pr_file_module": null
      },
      {
        "comment_id": "2157821791",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20494,
        "pr_file": "src/bun.js/bindings/ZigGlobalObject.cpp",
        "discussion_id": "2157783174",
        "commented_code": "@@ -4191,8 +4195,10 @@ JSC::JSInternalPromise* GlobalObject::moduleLoaderImportModule(JSGlobalObject* j\n                         parameters = JSC::JSScriptFetchParameters::create(vm, ScriptFetchParameters::create(typeString));\n                     }\n                 }\n+                RETURN_IF_EXCEPTION(scope, {});\n             }\n         }\n+        RETURN_IF_EXCEPTION(scope, {});",
        "comment_created_at": "2025-06-20T00:33:49+00:00",
        "comment_author": "pfgithub",
        "comment_body": "no, this one is missing the RETURN_IF_EXCEPTION in the true branch and it will cause an exception check error if the true branch is taken",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056650782",
    "pr_number": 17966,
    "pr_file": "src/bun.js/bindings/webcore/JSReadableStream.cpp",
    "created_at": "2025-04-23T18:17:24+00:00",
    "commented_code": "return JSValue::encode(jsBoolean(thisObject->disturbed()));\n }\n \n+// keep this in sync with src/codegen/replacements.ts\n+static const ASCIILiteral stateNames[] = { \"\"_s, \"closed\"_s, \"closing\"_s, \"errored\"_s, \"readable\"_s, \"waiting\"_s, \"writable\"_s };\n+\n+JSC_DEFINE_HOST_FUNCTION(JSReadableStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSReadableStream* thisObject = jsDynamicCast<JSReadableStream*>(callFrame->thisValue());\n+    if (!thisObject) return JSValue::encode(jsUndefined());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto locked = thisObject->get(lexicalGlobalObject, Identifier::fromString(vm, \"locked\"_s)).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2056650782",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17966,
        "pr_file": "src/bun.js/bindings/webcore/JSReadableStream.cpp",
        "discussion_id": "2056650782",
        "commented_code": "@@ -168,6 +169,23 @@ static JSC_DEFINE_CUSTOM_GETTER(JSReadableStreamPrototype__disturbedGetterWrap,\n     return JSValue::encode(jsBoolean(thisObject->disturbed()));\n }\n \n+// keep this in sync with src/codegen/replacements.ts\n+static const ASCIILiteral stateNames[] = { \"\"_s, \"closed\"_s, \"closing\"_s, \"errored\"_s, \"readable\"_s, \"waiting\"_s, \"writable\"_s };\n+\n+JSC_DEFINE_HOST_FUNCTION(JSReadableStreamPrototype__customInspect, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    JSReadableStream* thisObject = jsDynamicCast<JSReadableStream*>(callFrame->thisValue());\n+    if (!thisObject) return JSValue::encode(jsUndefined());\n+    auto& builtinNames = WebCore::builtinNames(vm);\n+\n+    auto locked = thisObject->get(lexicalGlobalObject, Identifier::fromString(vm, \"locked\"_s)).toBoolean(lexicalGlobalObject) ? \"true\"_s : \"false\"_s;",
        "comment_created_at": "2025-04-23T18:17:24+00:00",
        "comment_author": "190n",
        "comment_body": "Check for exceptions after `get` and after `toBoolean`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100943635",
    "pr_number": 19813,
    "pr_file": "src/bun.js/bindings/JSBunRequest.cpp",
    "created_at": "2025-05-21T18:43:39+00:00",
    "commented_code": "return nullptr;\n }\n \n+extern \"C\" void* Request__clone(void* internalZigRequestPointer, JSGlobalObject* globalObject);\n+\n+JSBunRequest* JSBunRequest::clone(JSC::VM& vm, JSGlobalObject* globalObject)\n+{\n+    auto* structure = createJSBunRequestStructure(vm, defaultGlobalObject(globalObject));\n+    auto* clone = this->create(vm, structure, Request__clone(this->wrapped(), globalObject), nullptr);\n+\n+    // Cookies and params are deep copied as they can be changed between the clone and original\n+    if (auto* params = this->params()) {\n+        auto* prototype = defaultGlobalObject(globalObject)->m_JSBunRequestParamsPrototype.get(globalObject);\n+        auto* paramsClone = JSC::constructEmptyObject(globalObject, prototype);\n+\n+        auto propertyNames = PropertyNameArray(vm, JSC::PropertyNameMode::Strings, JSC::PrivateSymbolMode::Exclude);\n+        JSObject::getOwnPropertyNames(params, globalObject, propertyNames, JSC::DontEnumPropertiesMode::Exclude);\n+\n+        for (auto& property : propertyNames) {\n+            auto value = params->get(globalObject, property);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2100943635",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19813,
        "pr_file": "src/bun.js/bindings/JSBunRequest.cpp",
        "discussion_id": "2100943635",
        "commented_code": "@@ -66,6 +70,39 @@ JSObject* JSBunRequest::cookies() const\n     return nullptr;\n }\n \n+extern \"C\" void* Request__clone(void* internalZigRequestPointer, JSGlobalObject* globalObject);\n+\n+JSBunRequest* JSBunRequest::clone(JSC::VM& vm, JSGlobalObject* globalObject)\n+{\n+    auto* structure = createJSBunRequestStructure(vm, defaultGlobalObject(globalObject));\n+    auto* clone = this->create(vm, structure, Request__clone(this->wrapped(), globalObject), nullptr);\n+\n+    // Cookies and params are deep copied as they can be changed between the clone and original\n+    if (auto* params = this->params()) {\n+        auto* prototype = defaultGlobalObject(globalObject)->m_JSBunRequestParamsPrototype.get(globalObject);\n+        auto* paramsClone = JSC::constructEmptyObject(globalObject, prototype);\n+\n+        auto propertyNames = PropertyNameArray(vm, JSC::PropertyNameMode::Strings, JSC::PrivateSymbolMode::Exclude);\n+        JSObject::getOwnPropertyNames(params, globalObject, propertyNames, JSC::DontEnumPropertiesMode::Exclude);\n+\n+        for (auto& property : propertyNames) {\n+            auto value = params->get(globalObject, property);",
        "comment_created_at": "2025-05-21T18:43:39+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "This would crash on exception\r\n```suggestion\r\n            auto value = params->get(globalObject, property);\r\n            RETURN_IF_EXCEPTION(scope, nullptr);\r\n```",
        "pr_file_module": null
      }
    ]
  }
]