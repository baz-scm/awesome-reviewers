[
  {
    "discussion_id": "2056641910",
    "pr_number": 17966,
    "pr_file": "src/codegen/replacements.ts",
    "created_at": "2025-04-23T18:11:01+00:00",
    "commented_code": "\"process.env.NODE_ENV\": JSON.stringify(debug ? \"development\" : \"production\"),\n   \"IS_BUN_DEVELOPMENT\": String(debug),\n \n+  // keep this in sync with src/bun.js/bindings/webcore/JSReadableStream.cpp customInspect\n+  // keep this in sync with src/bun.js/bindings/webcore/JSWritableStream.cpp customInspect",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2056641910",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17966,
        "pr_file": "src/codegen/replacements.ts",
        "discussion_id": "2056641910",
        "commented_code": "@@ -122,12 +122,15 @@ export const define: Record<string, string> = {\n   \"process.env.NODE_ENV\": JSON.stringify(debug ? \"development\" : \"production\"),\n   \"IS_BUN_DEVELOPMENT\": String(debug),\n \n+  // keep this in sync with src/bun.js/bindings/webcore/JSReadableStream.cpp customInspect\n+  // keep this in sync with src/bun.js/bindings/webcore/JSWritableStream.cpp customInspect",
        "comment_created_at": "2025-04-23T18:11:01+00:00",
        "comment_author": "190n",
        "comment_body": "```suggestion\r\n  // These must match the order of the stateNames arrays in JSReadableStream.cpp and JSWritableStream.cpp \r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146383803",
    "pr_number": 20386,
    "pr_file": "packages/bun-types/bun.d.ts",
    "created_at": "2025-06-14T02:33:51+00:00",
    "commented_code": "multipartBoundaryExcludingDashes?: string | NodeJS.TypedArray | ArrayBufferView,\n   ): Promise<FormData>;\n \n+  /**\n+   * Load CA certificates from the given path and add them to the global certificate store.\n+   *\n+   * This works equivalently to setting $NODE_EXTRA_CA_CERTS except at run-time.\n+   *\n+   * @param path The CA certificates.\n+   *\n+   * @example\n+   * ```ts\n+   * // without dashes",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2146383803",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20386,
        "pr_file": "packages/bun-types/bun.d.ts",
        "discussion_id": "2146383803",
        "commented_code": "@@ -899,6 +899,21 @@ declare module \"bun\" {\n     multipartBoundaryExcludingDashes?: string | NodeJS.TypedArray | ArrayBufferView,\n   ): Promise<FormData>;\n \n+  /**\n+   * Load CA certificates from the given path and add them to the global certificate store.\n+   *\n+   * This works equivalently to setting $NODE_EXTRA_CA_CERTS except at run-time.\n+   *\n+   * @param path The CA certificates.\n+   *\n+   * @example\n+   * ```ts\n+   * // without dashes",
        "comment_created_at": "2025-06-14T02:33:51+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The comment \"// without dashes\" is confusing in this context as it doesn't clearly relate to loading CA certificates. Consider removing this comment or replacing it with something more informative about certificate loading, such as a note about supported certificate formats or expected file contents. The example itself is clear without this comment.\n```suggestion\n   * // Certificate content should be in PEM format without header/footer lines\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108127862",
    "pr_number": 19410,
    "pr_file": "packages/bun-types/bun.d.ts",
    "created_at": "2025-05-27T04:20:56+00:00",
    "commented_code": "/**\n      * Remote IP address connected to the socket\n+     * @example \"192.168.1.100\" | \"2001:db8::1\"\n      */\n     readonly remoteAddress: string;\n \n+    /**\n+     * Remote port connected to the socket\n+     * @example 8080\n+     */\n     readonly remotePort: number;\n \n+    /**\n+     * Local IP address connected to the socket\n+     * @example \"192.168.1.100\" | \"2001:db8::1\"\n+     */",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2108127862",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19410,
        "pr_file": "packages/bun-types/bun.d.ts",
        "discussion_id": "2108127862",
        "commented_code": "@@ -5946,17 +6010,31 @@ declare module \"bun\" {\n \n     /**\n      * Remote IP address connected to the socket\n+     * @example \"192.168.1.100\" | \"2001:db8::1\"\n      */\n     readonly remoteAddress: string;\n \n+    /**\n+     * Remote port connected to the socket\n+     * @example 8080\n+     */\n     readonly remotePort: number;\n \n+    /**\n+     * Local IP address connected to the socket\n+     * @example \"192.168.1.100\" | \"2001:db8::1\"\n+     */",
        "comment_created_at": "2025-05-27T04:20:56+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The JSDoc comment for `localFamily` incorrectly describes it as \"Local IP address connected to the socket\" when it actually represents the IP protocol family (IPv4 or IPv6). This property indicates whether the socket is using IPv4 or IPv6 for its local endpoint, not the actual IP address (which is provided by `localAddress`). Consider updating the comment to something like:\n\n```\n/**\n * IP protocol family used for the local endpoint of the socket\n * @example \"IPv4\" | \"IPv6\"\n */\n```\n```suggestion\n    /**\n     * IP protocol family used for the local endpoint of the socket\n     * @example \"IPv4\" | \"IPv6\"\n     */\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2052670110",
    "pr_number": 19145,
    "pr_file": "packages/bun-types/deprecated.d.ts",
    "created_at": "2025-04-21T16:17:05+00:00",
    "commented_code": "* @deprecated Renamed to `ResolveMessage`\n  */\n declare var ResolveError: typeof ResolveMessage;\n+\n+declare module \"bun\" {\n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type BeforeExitListener = (code: number) => void;\n+\n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type DisconnectListener = () => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type ExitListener = (code: number) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type RejectionHandledListener = (promise: Promise<unknown>) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type WarningListener = (warning: Error) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type MessageListener = (message: unknown, sendHandle: unknown) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type SignalsListener = (signal: NodeJS.Signals) => void;\n+\n+  /**\n+   * @deprecated This type is redundant with built-in types. Consider using a more specific type like BodyInit",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2052670110",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19145,
        "pr_file": "packages/bun-types/deprecated.d.ts",
        "discussion_id": "2052670110",
        "commented_code": "@@ -72,3 +72,45 @@ declare var BuildError: typeof BuildMessage;\n  * @deprecated Renamed to `ResolveMessage`\n  */\n declare var ResolveError: typeof ResolveMessage;\n+\n+declare module \"bun\" {\n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type BeforeExitListener = (code: number) => void;\n+\n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type DisconnectListener = () => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type ExitListener = (code: number) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type RejectionHandledListener = (promise: Promise<unknown>) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type WarningListener = (warning: Error) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type MessageListener = (message: unknown, sendHandle: unknown) => void;\n+  \n+  /**\n+   * @deprecated This type is unused in Bun's types and might be removed in the near future\n+   */\n+  type SignalsListener = (signal: NodeJS.Signals) => void;\n+\n+  /**\n+   * @deprecated This type is redundant with built-in types. Consider using a more specific type like BodyInit",
        "comment_created_at": "2025-04-21T16:17:05+00:00",
        "comment_author": "alii",
        "comment_body": "```suggestion\r\n   * @deprecated This type is redundant with built-in types. Consider using a more specific type like Bun.BodyInit\r\n```",
        "pr_file_module": null
      }
    ]
  }
]