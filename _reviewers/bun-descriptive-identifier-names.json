[
  {
    "discussion_id": "2184689305",
    "pr_number": 20503,
    "pr_file": "src/bun.js/bindings/webcore/JSWasmStreamingCompiler.cpp",
    "created_at": "2025-07-04T08:07:20+00:00",
    "commented_code": "+#include \"config.h\"\n+#include \"JSWasmStreamingCompiler.h\"\n+\n+#include \"DOMClientIsoSubspaces.h\"\n+#include \"DOMIsoSubspaces.h\"\n+#include \"JSDOMBinding.h\"\n+#include \"JSDOMOperation.h\"\n+#include <JavaScriptCore/HeapAnalyzer.h>\n+\n+#include \"ErrorCode.h\"\n+\n+namespace WebCore {\n+\n+using namespace JSC;\n+\n+// Define the toWrapped template function for WasmStreamingCompiler\n+template<typename ExceptionThrower>\n+Wasm::StreamingCompiler* toWrapped(JSGlobalObject& lexicalGlobalObject, ExceptionThrower&& exceptionThrower, JSValue value)\n+{\n+    auto& vm = getVM(&lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    auto* impl = JSWasmStreamingCompiler::toWrapped(vm, value);\n+    if (!impl) [[unlikely]]\n+        exceptionThrower(lexicalGlobalObject, scope);\n+    return impl;\n+}\n+\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_addBytes);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_finalize);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_fail);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_cancel);\n+\n+class JSWasmStreamingCompilerPrototype final : public JSC::JSNonFinalObject {\n+public:\n+    using Base = JSC::JSNonFinalObject;\n+    static JSWasmStreamingCompilerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)\n+    {\n+        JSWasmStreamingCompilerPrototype* ptr = new (NotNull, JSC::allocateCell<JSWasmStreamingCompilerPrototype>(vm)) JSWasmStreamingCompilerPrototype(vm, globalObject, structure);\n+        ptr->finishCreation(vm);\n+        return ptr;\n+    }\n+\n+    DECLARE_INFO;\n+    template<typename CellType, JSC::SubspaceAccess>\n+    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)\n+    {\n+        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWasmStreamingCompilerPrototype, Base);\n+        return &vm.plainObjectSpace();\n+    }\n+    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)\n+    {\n+        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());\n+    }\n+\n+private:\n+    JSWasmStreamingCompilerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)\n+        : JSC::JSNonFinalObject(vm, structure)\n+    {\n+    }\n+\n+    void finishCreation(JSC::VM&);\n+};\n+\n+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWasmStreamingCompilerPrototype, JSWasmStreamingCompilerPrototype::Base);\n+\n+static const HashTableValue JSWasmStreamingCompilerPrototypeTableValues[] = {\n+    { \"addBytes\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_addBytes, 1 } },\n+    { \"finalize\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_finalize, 0 } },\n+    { \"fail\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_fail, 1 } },\n+    { \"cancel\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_cancel, 0 } }\n+};\n+\n+const ClassInfo JSWasmStreamingCompilerPrototype::s_info = { \"WasmStreamingCompiler\"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWasmStreamingCompilerPrototype) };\n+\n+void JSWasmStreamingCompilerPrototype::finishCreation(VM& vm)\n+{\n+    Base::finishCreation(vm);\n+    reifyStaticProperties(vm, JSWasmStreamingCompiler::info(), JSWasmStreamingCompilerPrototypeTableValues, *this);\n+    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();\n+}\n+\n+const ClassInfo JSWasmStreamingCompiler::s_info = { \"WasmStreamingCompiler\"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWasmStreamingCompiler) };\n+\n+JSWasmStreamingCompiler::JSWasmStreamingCompiler(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Wasm::StreamingCompiler>&& impl)\n+    : JSDOMWrapper<Wasm::StreamingCompiler>(structure, globalObject, WTFMove(impl))\n+{\n+}\n+\n+void JSWasmStreamingCompiler::finishCreation(VM& vm)\n+{\n+    Base::finishCreation(vm);\n+    ASSERT(inherits(info()));\n+}\n+\n+JSObject* JSWasmStreamingCompiler::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)\n+{\n+    auto* structure = JSWasmStreamingCompilerPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());\n+    structure->setMayBePrototype(true);\n+    return JSWasmStreamingCompilerPrototype::create(vm, &globalObject, structure);\n+}\n+\n+JSObject* JSWasmStreamingCompiler::prototype(VM& vm, JSDOMGlobalObject& globalObject)\n+{\n+    return getDOMPrototype<JSWasmStreamingCompiler>(vm, globalObject);\n+}\n+\n+void JSWasmStreamingCompiler::destroy(JSCell* cell)\n+{\n+    auto* thisObject = static_cast<JSWasmStreamingCompiler*>(cell);\n+    thisObject->JSWasmStreamingCompiler::~JSWasmStreamingCompiler();\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_addBytesBody(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto throwScope = DECLARE_THROW_SCOPE(vm);\n+    auto& impl = castedThis->wrapped();\n+\n+    auto chunkValue = callFrame->uncheckedArgument(0);\n+    std::span<const uint8_t> chunk;\n+\n+    // See getWasmBufferFromValue in JSC's JSWebAssemblyHelpers.h\n+    if (auto arrayBufferView = jsDynamicCast<JSArrayBufferView*>(chunkValue)) {\n+        if (isTypedArrayType(arrayBufferView->type())) {\n+            validateTypedArray(lexicalGlobalObject, arrayBufferView);\n+            RETURN_IF_EXCEPTION(throwScope, {});\n+        } else {\n+            // DataView\n+            IdempotentArrayBufferByteLengthGetter<std::memory_order_relaxed> getter;\n+            if (!jsCast<JSDataView*>(arrayBufferView)->viewByteLength(getter)) [[unlikely]] {\n+                throwTypeError(lexicalGlobalObject, throwScope, typedArrayBufferHasBeenDetachedErrorMessage);\n+                return {};\n+            }\n+        }\n+\n+        chunk = { static_cast<const uint8_t*>(arrayBufferView->vector()), arrayBufferView->byteLength() };\n+    } else if (auto arrayBuffer = jsDynamicCast<JSArrayBuffer*>(chunkValue)) {\n+        auto arrayBufferImpl = arrayBuffer->impl();\n+        if (arrayBufferImpl->isDetached()) {\n+            throwTypeError(lexicalGlobalObject, throwScope, typedArrayBufferHasBeenDetachedErrorMessage);\n+            return {};\n+        }\n+\n+        chunk = { static_cast<const uint8_t*>(arrayBufferImpl->data()), arrayBufferImpl->byteLength() };\n+    } else [[unlikely]] {\n+        // See WasmStreamingObject::Push in Node.js's node_wasm_web_api.cc\n+        return Bun::ERR::INVALID_ARG_TYPE(throwScope, lexicalGlobalObject, \"chunk must be an ArrayBufferView or an ArrayBuffer\");\n+    }\n+\n+    RETURN_IF_EXCEPTION(throwScope, {});\n+    impl.addBytes(chunk);\n+\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_addBytes, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_addBytesBody>(*lexicalGlobalObject, *callFrame, \"addBytes\");\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_finalizeBody(JSGlobalObject* lexicalGlobalObject, CallFrame*, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    castedThis->wrapped().finalize(lexicalGlobalObject);\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_finalize, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_finalizeBody>(*lexicalGlobalObject, *callFrame, \"finalize\");\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_failBody(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto throwScope = DECLARE_THROW_SCOPE(vm);\n+    auto& impl = castedThis->wrapped();\n+\n+    // This should never fail due to it being internal\n+    auto error = callFrame->uncheckedArgument(0);\n+    impl.fail(lexicalGlobalObject, error);\n+\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_fail, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_failBody>(*lexicalGlobalObject, *callFrame, \"error\");",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2184689305",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20503,
        "pr_file": "src/bun.js/bindings/webcore/JSWasmStreamingCompiler.cpp",
        "discussion_id": "2184689305",
        "commented_code": "@@ -0,0 +1,247 @@\n+#include \"config.h\"\n+#include \"JSWasmStreamingCompiler.h\"\n+\n+#include \"DOMClientIsoSubspaces.h\"\n+#include \"DOMIsoSubspaces.h\"\n+#include \"JSDOMBinding.h\"\n+#include \"JSDOMOperation.h\"\n+#include <JavaScriptCore/HeapAnalyzer.h>\n+\n+#include \"ErrorCode.h\"\n+\n+namespace WebCore {\n+\n+using namespace JSC;\n+\n+// Define the toWrapped template function for WasmStreamingCompiler\n+template<typename ExceptionThrower>\n+Wasm::StreamingCompiler* toWrapped(JSGlobalObject& lexicalGlobalObject, ExceptionThrower&& exceptionThrower, JSValue value)\n+{\n+    auto& vm = getVM(&lexicalGlobalObject);\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+    auto* impl = JSWasmStreamingCompiler::toWrapped(vm, value);\n+    if (!impl) [[unlikely]]\n+        exceptionThrower(lexicalGlobalObject, scope);\n+    return impl;\n+}\n+\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_addBytes);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_finalize);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_fail);\n+static JSC_DECLARE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_cancel);\n+\n+class JSWasmStreamingCompilerPrototype final : public JSC::JSNonFinalObject {\n+public:\n+    using Base = JSC::JSNonFinalObject;\n+    static JSWasmStreamingCompilerPrototype* create(JSC::VM& vm, JSDOMGlobalObject* globalObject, JSC::Structure* structure)\n+    {\n+        JSWasmStreamingCompilerPrototype* ptr = new (NotNull, JSC::allocateCell<JSWasmStreamingCompilerPrototype>(vm)) JSWasmStreamingCompilerPrototype(vm, globalObject, structure);\n+        ptr->finishCreation(vm);\n+        return ptr;\n+    }\n+\n+    DECLARE_INFO;\n+    template<typename CellType, JSC::SubspaceAccess>\n+    static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)\n+    {\n+        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWasmStreamingCompilerPrototype, Base);\n+        return &vm.plainObjectSpace();\n+    }\n+    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)\n+    {\n+        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());\n+    }\n+\n+private:\n+    JSWasmStreamingCompilerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)\n+        : JSC::JSNonFinalObject(vm, structure)\n+    {\n+    }\n+\n+    void finishCreation(JSC::VM&);\n+};\n+\n+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWasmStreamingCompilerPrototype, JSWasmStreamingCompilerPrototype::Base);\n+\n+static const HashTableValue JSWasmStreamingCompilerPrototypeTableValues[] = {\n+    { \"addBytes\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_addBytes, 1 } },\n+    { \"finalize\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_finalize, 0 } },\n+    { \"fail\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_fail, 1 } },\n+    { \"cancel\"_s, static_cast<unsigned>(JSC::PropertyAttribute::Function), NoIntrinsic, { HashTableValue::NativeFunctionType, jsWasmStreamingCompilerPrototypeFunction_cancel, 0 } }\n+};\n+\n+const ClassInfo JSWasmStreamingCompilerPrototype::s_info = { \"WasmStreamingCompiler\"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWasmStreamingCompilerPrototype) };\n+\n+void JSWasmStreamingCompilerPrototype::finishCreation(VM& vm)\n+{\n+    Base::finishCreation(vm);\n+    reifyStaticProperties(vm, JSWasmStreamingCompiler::info(), JSWasmStreamingCompilerPrototypeTableValues, *this);\n+    JSC_TO_STRING_TAG_WITHOUT_TRANSITION();\n+}\n+\n+const ClassInfo JSWasmStreamingCompiler::s_info = { \"WasmStreamingCompiler\"_s, &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWasmStreamingCompiler) };\n+\n+JSWasmStreamingCompiler::JSWasmStreamingCompiler(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Wasm::StreamingCompiler>&& impl)\n+    : JSDOMWrapper<Wasm::StreamingCompiler>(structure, globalObject, WTFMove(impl))\n+{\n+}\n+\n+void JSWasmStreamingCompiler::finishCreation(VM& vm)\n+{\n+    Base::finishCreation(vm);\n+    ASSERT(inherits(info()));\n+}\n+\n+JSObject* JSWasmStreamingCompiler::createPrototype(VM& vm, JSDOMGlobalObject& globalObject)\n+{\n+    auto* structure = JSWasmStreamingCompilerPrototype::createStructure(vm, &globalObject, globalObject.objectPrototype());\n+    structure->setMayBePrototype(true);\n+    return JSWasmStreamingCompilerPrototype::create(vm, &globalObject, structure);\n+}\n+\n+JSObject* JSWasmStreamingCompiler::prototype(VM& vm, JSDOMGlobalObject& globalObject)\n+{\n+    return getDOMPrototype<JSWasmStreamingCompiler>(vm, globalObject);\n+}\n+\n+void JSWasmStreamingCompiler::destroy(JSCell* cell)\n+{\n+    auto* thisObject = static_cast<JSWasmStreamingCompiler*>(cell);\n+    thisObject->JSWasmStreamingCompiler::~JSWasmStreamingCompiler();\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_addBytesBody(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto throwScope = DECLARE_THROW_SCOPE(vm);\n+    auto& impl = castedThis->wrapped();\n+\n+    auto chunkValue = callFrame->uncheckedArgument(0);\n+    std::span<const uint8_t> chunk;\n+\n+    // See getWasmBufferFromValue in JSC's JSWebAssemblyHelpers.h\n+    if (auto arrayBufferView = jsDynamicCast<JSArrayBufferView*>(chunkValue)) {\n+        if (isTypedArrayType(arrayBufferView->type())) {\n+            validateTypedArray(lexicalGlobalObject, arrayBufferView);\n+            RETURN_IF_EXCEPTION(throwScope, {});\n+        } else {\n+            // DataView\n+            IdempotentArrayBufferByteLengthGetter<std::memory_order_relaxed> getter;\n+            if (!jsCast<JSDataView*>(arrayBufferView)->viewByteLength(getter)) [[unlikely]] {\n+                throwTypeError(lexicalGlobalObject, throwScope, typedArrayBufferHasBeenDetachedErrorMessage);\n+                return {};\n+            }\n+        }\n+\n+        chunk = { static_cast<const uint8_t*>(arrayBufferView->vector()), arrayBufferView->byteLength() };\n+    } else if (auto arrayBuffer = jsDynamicCast<JSArrayBuffer*>(chunkValue)) {\n+        auto arrayBufferImpl = arrayBuffer->impl();\n+        if (arrayBufferImpl->isDetached()) {\n+            throwTypeError(lexicalGlobalObject, throwScope, typedArrayBufferHasBeenDetachedErrorMessage);\n+            return {};\n+        }\n+\n+        chunk = { static_cast<const uint8_t*>(arrayBufferImpl->data()), arrayBufferImpl->byteLength() };\n+    } else [[unlikely]] {\n+        // See WasmStreamingObject::Push in Node.js's node_wasm_web_api.cc\n+        return Bun::ERR::INVALID_ARG_TYPE(throwScope, lexicalGlobalObject, \"chunk must be an ArrayBufferView or an ArrayBuffer\");\n+    }\n+\n+    RETURN_IF_EXCEPTION(throwScope, {});\n+    impl.addBytes(chunk);\n+\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_addBytes, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_addBytesBody>(*lexicalGlobalObject, *callFrame, \"addBytes\");\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_finalizeBody(JSGlobalObject* lexicalGlobalObject, CallFrame*, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    castedThis->wrapped().finalize(lexicalGlobalObject);\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_finalize, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_finalizeBody>(*lexicalGlobalObject, *callFrame, \"finalize\");\n+}\n+\n+static inline EncodedJSValue jsWasmStreamingCompilerPrototypeFunction_failBody(JSGlobalObject* lexicalGlobalObject, CallFrame* callFrame, typename IDLOperation<JSWasmStreamingCompiler>::ClassParameter castedThis)\n+{\n+    auto& vm = JSC::getVM(lexicalGlobalObject);\n+    auto throwScope = DECLARE_THROW_SCOPE(vm);\n+    auto& impl = castedThis->wrapped();\n+\n+    // This should never fail due to it being internal\n+    auto error = callFrame->uncheckedArgument(0);\n+    impl.fail(lexicalGlobalObject, error);\n+\n+    return encodedJSUndefined();\n+}\n+\n+JSC_DEFINE_HOST_FUNCTION(jsWasmStreamingCompilerPrototypeFunction_fail, (JSGlobalObject * lexicalGlobalObject, CallFrame* callFrame))\n+{\n+    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_failBody>(*lexicalGlobalObject, *callFrame, \"error\");",
        "comment_created_at": "2025-07-04T08:07:20+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The function name passed to `IDLOperation::call` should be `\"fail\"` to match the actual function name defined in the prototype table, not `\"error\"`. This ensures consistency between the function implementation and how it's registered in the API.\n```suggestion\n    return IDLOperation<JSWasmStreamingCompiler>::call<jsWasmStreamingCompilerPrototypeFunction_failBody>(*lexicalGlobalObject, *callFrame, \"fail\");\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2131138130",
    "pr_number": 20088,
    "pr_file": "src/bun.js/bindings/NodeVM.cpp",
    "created_at": "2025-06-06T00:44:18+00:00",
    "commented_code": "return {};\n }\n \n+bool isContext(JSGlobalObject* globalObject, JSValue value)\n+{\n+    auto* zigGlobalObject = defaultGlobalObject(globalObject);\n+\n+    if (zigGlobalObject->vmModuleContextMap()->has(asObject(value))) {\n+        return true;\n+    }\n+\n+    if (value.inherits(NodeVMSpecialSandbox::info())) {\n+        return true;\n+    }\n+\n+    if (auto* proxy = jsDynamicCast<JSGlobalProxy*>(value); proxy && proxy->target()) {\n+        return proxy->target()->inherits(NodeVMGlobalObject::info());\n+    }\n+\n+    return false;\n+}\n+\n+bool getContextArg(JSGlobalObject* globalObject, JSValue& contextArg)\n+{\n+    if (contextArg.isUndefined()) {\n+        contextArg = JSC::constructEmptyObject(globalObject);\n+    } else if (contextArg.isUInt32() && contextArg.asUInt32() == 64) { // vm.constants.DONT_CONTEXTIFY\n+        contextArg = JSC::constructEmptyObject(globalObject);\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+bool isUseMainContextDefaultLoaderConstant(JSValue value)\n+{\n+    // vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n+    return value.isUInt32() && value.asUInt32() == 42;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2131138130",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20088,
        "pr_file": "src/bun.js/bindings/NodeVM.cpp",
        "discussion_id": "2131138130",
        "commented_code": "@@ -520,12 +597,89 @@ JSC::EncodedJSValue INVALID_ARG_VALUE_VM_VARIATION(JSC::ThrowScope& throwScope,\n     return {};\n }\n \n+bool isContext(JSGlobalObject* globalObject, JSValue value)\n+{\n+    auto* zigGlobalObject = defaultGlobalObject(globalObject);\n+\n+    if (zigGlobalObject->vmModuleContextMap()->has(asObject(value))) {\n+        return true;\n+    }\n+\n+    if (value.inherits(NodeVMSpecialSandbox::info())) {\n+        return true;\n+    }\n+\n+    if (auto* proxy = jsDynamicCast<JSGlobalProxy*>(value); proxy && proxy->target()) {\n+        return proxy->target()->inherits(NodeVMGlobalObject::info());\n+    }\n+\n+    return false;\n+}\n+\n+bool getContextArg(JSGlobalObject* globalObject, JSValue& contextArg)\n+{\n+    if (contextArg.isUndefined()) {\n+        contextArg = JSC::constructEmptyObject(globalObject);\n+    } else if (contextArg.isUInt32() && contextArg.asUInt32() == 64) { // vm.constants.DONT_CONTEXTIFY\n+        contextArg = JSC::constructEmptyObject(globalObject);\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+bool isUseMainContextDefaultLoaderConstant(JSValue value)\n+{\n+    // vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n+    return value.isUInt32() && value.asUInt32() == 42;",
        "comment_created_at": "2025-06-06T00:44:18+00:00",
        "comment_author": "190n",
        "comment_body": "if we don't change the constants to symbols i would at least rather have `isInt32AsAnyInt` and `asInt32AsAnyInt` so it doesn't break in case you manage to pass the double encoding instead of the int32 encoding.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175541460",
    "pr_number": 20659,
    "pr_file": "src/bun.js/bindings/napi.cpp",
    "created_at": "2025-06-30T17:09:38+00:00",
    "commented_code": "// must match src/bun.js/node/types.zig#Encoding, which matches WebCore::BufferEncodingType\n enum class NapiStringEncoding : uint8_t {\n     utf8 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf8),\n-    utf16le = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),\n+    utf16 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2175541460",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20659,
        "pr_file": "src/bun.js/bindings/napi.cpp",
        "discussion_id": "2175541460",
        "commented_code": "@@ -2042,7 +2042,7 @@ extern \"C\" napi_status napi_get_value_int64(napi_env env, napi_value value, int6\n // must match src/bun.js/node/types.zig#Encoding, which matches WebCore::BufferEncodingType\n enum class NapiStringEncoding : uint8_t {\n     utf8 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf8),\n-    utf16le = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),\n+    utf16 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),",
        "comment_created_at": "2025-06-30T17:09:38+00:00",
        "comment_author": "190n",
        "comment_body": "why this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "2176084233",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20659,
        "pr_file": "src/bun.js/bindings/napi.cpp",
        "discussion_id": "2175541460",
        "commented_code": "@@ -2042,7 +2042,7 @@ extern \"C\" napi_status napi_get_value_int64(napi_env env, napi_value value, int6\n // must match src/bun.js/node/types.zig#Encoding, which matches WebCore::BufferEncodingType\n enum class NapiStringEncoding : uint8_t {\n     utf8 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf8),\n-    utf16le = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),\n+    utf16 = static_cast<uint8_t>(WebCore::BufferEncodingType::utf16le),",
        "comment_created_at": "2025-06-30T22:34:40+00:00",
        "comment_author": "nektro",
        "comment_body": "to match the naming of\r\nhttps://nodejs.org/api/n-api.html#napi_get_value_string_utf8\r\nhttps://nodejs.org/api/n-api.html#napi_get_value_string_utf16\r\nhttps://nodejs.org/api/n-api.html#napi_get_value_string_latin1",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2122359139",
    "pr_number": 19940,
    "pr_file": "src/bun.js/bindings/ScriptExecutionContext.cpp",
    "created_at": "2025-06-03T00:03:36+00:00",
    "commented_code": "Bun__eventLoop__incrementRefConcurrently(WebCore::clientData(vm())->bunVM, -1);\n }\n \n+bool ScriptExecutionContext::canSendMessage()\n+{\n+    us_loop_t* loop = (us_loop_t*)uws_get_loop();\n+    long long currentTickNr = static_cast<long long>(us_loop_iteration_number(loop));\n+\n+    if (lastSendTickNr != currentTickNr) {\n+        messagesSentThisTick = 0;\n+        lastSendTickNr = currentTickNr;\n+    }\n+\n+    constexpr long long MAX_MESSAGES_PER_TICK = 1000;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2122359139",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19940,
        "pr_file": "src/bun.js/bindings/ScriptExecutionContext.cpp",
        "discussion_id": "2122359139",
        "commented_code": "@@ -122,6 +122,25 @@ void ScriptExecutionContext::unrefEventLoop()\n     Bun__eventLoop__incrementRefConcurrently(WebCore::clientData(vm())->bunVM, -1);\n }\n \n+bool ScriptExecutionContext::canSendMessage()\n+{\n+    us_loop_t* loop = (us_loop_t*)uws_get_loop();\n+    long long currentTickNr = static_cast<long long>(us_loop_iteration_number(loop));\n+\n+    if (lastSendTickNr != currentTickNr) {\n+        messagesSentThisTick = 0;\n+        lastSendTickNr = currentTickNr;\n+    }\n+\n+    constexpr long long MAX_MESSAGES_PER_TICK = 1000;",
        "comment_created_at": "2025-06-03T00:03:36+00:00",
        "comment_author": "heimskr",
        "comment_body": "Here too it's better to use `int64_t` instead of `long long`:\r\n```suggestion\r\n    constexpr int64_t MAX_MESSAGES_PER_TICK = 1000;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2117417321",
    "pr_number": 19878,
    "pr_file": "src/bun.js/bindings/NodeVMSyntheticModule.cpp",
    "created_at": "2025-05-31T06:40:47+00:00",
    "commented_code": "+#include \"NodeVMSourceTextModule.h\"\n+#include \"NodeVMSyntheticModule.h\"\n+\n+#include \"AsyncContextFrame.h\"\n+#include \"ErrorCode.h\"\n+#include \"JSDOMExceptionHandling.h\"\n+\n+#include \"wtf/Scope.h\"\n+\n+#include \"JavaScriptCore/JIT.h\"\n+#include \"JavaScriptCore/JSModuleEnvironment.h\"\n+#include \"JavaScriptCore/JSModuleRecord.h\"\n+#include \"JavaScriptCore/JSPromise.h\"\n+#include \"JavaScriptCore/JSSourceCode.h\"\n+#include \"JavaScriptCore/ModuleAnalyzer.h\"\n+#include \"JavaScriptCore/ModuleProgramCodeBlock.h\"\n+#include \"JavaScriptCore/Parser.h\"\n+#include \"JavaScriptCore/SourceCodeKey.h\"\n+#include \"JavaScriptCore/Watchdog.h\"\n+\n+#include \"../vm/SigintWatcher.h\"\n+\n+namespace Bun {\n+using namespace NodeVM;\n+\n+NodeVMSyntheticModule* NodeVMSyntheticModule::create(VM& vm, JSGlobalObject* globalObject, ArgList args)\n+{\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+\n+    JSValue identifierValue = args.at(0);\n+    if (!identifierValue.isString()) {\n+        throwArgumentTypeError(*globalObject, scope, 0, \"identifier\"_s, \"Module\"_s, \"Module\"_s, \"string\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue contextValue = args.at(1);\n+    if (contextValue.isUndefined()) {\n+        contextValue = globalObject;\n+    } else if (!contextValue.isObject()) {\n+        throwArgumentTypeError(*globalObject, scope, 1, \"context\"_s, \"Module\"_s, \"Module\"_s, \"object\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue exportNamesValue = args.at(2);\n+    auto* exportNamesArray = jsDynamicCast<JSArray*>(exportNamesValue);\n+    if (!exportNamesArray) {\n+        throwArgumentTypeError(*globalObject, scope, 2, \"exportNames\"_s, \"Module\"_s, \"Module\"_s, \"Array\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue syntheticEvaluationStepsValue = args.at(3);\n+    if (!syntheticEvaluationStepsValue.isUndefined()) {\n+        if (!syntheticEvaluationStepsValue.isCallable()) {\n+            throwArgumentTypeError(*globalObject, scope, 3, \"syntheticEvaluationSteps\"_s, \"Module\"_s, \"Module\"_s, \"function\"_s);\n+            return nullptr;\n+        }\n+\n+        syntheticEvaluationStepsValue = AsyncContextFrame::withAsyncContextIfNeeded(globalObject, syntheticEvaluationStepsValue);\n+    }\n+\n+    JSValue moduleWrapperValue = args.at(4);\n+    if (!moduleWrapperValue.isObject()) {\n+        throwArgumentTypeError(*globalObject, scope, 4, \"moduleWrapper\"_s, \"Module\"_s, \"Module\"_s, \"object\"_s);\n+        return nullptr;\n+    }\n+\n+    WTF::HashSet<String> exportNames;\n+    for (unsigned i = 0; i < exportNamesArray->getArrayLength(); i++) {\n+        JSValue exportNameValue = exportNamesArray->getDirectIndex(globalObject, i);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2117417321",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19878,
        "pr_file": "src/bun.js/bindings/NodeVMSyntheticModule.cpp",
        "discussion_id": "2117417321",
        "commented_code": "@@ -0,0 +1,232 @@\n+#include \"NodeVMSourceTextModule.h\"\n+#include \"NodeVMSyntheticModule.h\"\n+\n+#include \"AsyncContextFrame.h\"\n+#include \"ErrorCode.h\"\n+#include \"JSDOMExceptionHandling.h\"\n+\n+#include \"wtf/Scope.h\"\n+\n+#include \"JavaScriptCore/JIT.h\"\n+#include \"JavaScriptCore/JSModuleEnvironment.h\"\n+#include \"JavaScriptCore/JSModuleRecord.h\"\n+#include \"JavaScriptCore/JSPromise.h\"\n+#include \"JavaScriptCore/JSSourceCode.h\"\n+#include \"JavaScriptCore/ModuleAnalyzer.h\"\n+#include \"JavaScriptCore/ModuleProgramCodeBlock.h\"\n+#include \"JavaScriptCore/Parser.h\"\n+#include \"JavaScriptCore/SourceCodeKey.h\"\n+#include \"JavaScriptCore/Watchdog.h\"\n+\n+#include \"../vm/SigintWatcher.h\"\n+\n+namespace Bun {\n+using namespace NodeVM;\n+\n+NodeVMSyntheticModule* NodeVMSyntheticModule::create(VM& vm, JSGlobalObject* globalObject, ArgList args)\n+{\n+    auto scope = DECLARE_THROW_SCOPE(vm);\n+\n+    JSValue identifierValue = args.at(0);\n+    if (!identifierValue.isString()) {\n+        throwArgumentTypeError(*globalObject, scope, 0, \"identifier\"_s, \"Module\"_s, \"Module\"_s, \"string\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue contextValue = args.at(1);\n+    if (contextValue.isUndefined()) {\n+        contextValue = globalObject;\n+    } else if (!contextValue.isObject()) {\n+        throwArgumentTypeError(*globalObject, scope, 1, \"context\"_s, \"Module\"_s, \"Module\"_s, \"object\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue exportNamesValue = args.at(2);\n+    auto* exportNamesArray = jsDynamicCast<JSArray*>(exportNamesValue);\n+    if (!exportNamesArray) {\n+        throwArgumentTypeError(*globalObject, scope, 2, \"exportNames\"_s, \"Module\"_s, \"Module\"_s, \"Array\"_s);\n+        return nullptr;\n+    }\n+\n+    JSValue syntheticEvaluationStepsValue = args.at(3);\n+    if (!syntheticEvaluationStepsValue.isUndefined()) {\n+        if (!syntheticEvaluationStepsValue.isCallable()) {\n+            throwArgumentTypeError(*globalObject, scope, 3, \"syntheticEvaluationSteps\"_s, \"Module\"_s, \"Module\"_s, \"function\"_s);\n+            return nullptr;\n+        }\n+\n+        syntheticEvaluationStepsValue = AsyncContextFrame::withAsyncContextIfNeeded(globalObject, syntheticEvaluationStepsValue);\n+    }\n+\n+    JSValue moduleWrapperValue = args.at(4);\n+    if (!moduleWrapperValue.isObject()) {\n+        throwArgumentTypeError(*globalObject, scope, 4, \"moduleWrapper\"_s, \"Module\"_s, \"Module\"_s, \"object\"_s);\n+        return nullptr;\n+    }\n+\n+    WTF::HashSet<String> exportNames;\n+    for (unsigned i = 0; i < exportNamesArray->getArrayLength(); i++) {\n+        JSValue exportNameValue = exportNamesArray->getDirectIndex(globalObject, i);",
        "comment_created_at": "2025-05-31T06:40:47+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "i think we want to use `getIndex` instead of `getDirectIndex` because these could be getters",
        "pr_file_module": null
      }
    ]
  }
]