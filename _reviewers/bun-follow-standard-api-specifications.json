[
  {
    "discussion_id": "2119257867",
    "pr_number": 19941,
    "pr_file": "src/bun.js/bindings/webcore/SerializedScriptValue.cpp",
    "created_at": "2025-06-01T15:29:47+00:00",
    "commented_code": "if (auto port = JSMessagePort::toWrapped(vm, transferable.get())) {\n             if (port->isDetached())\n                 return Exception { DataCloneError, \"MessagePort in transfer list is already detached\"_s };\n+            port->dispatchCloseEvent();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2119257867",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19941,
        "pr_file": "src/bun.js/bindings/webcore/SerializedScriptValue.cpp",
        "discussion_id": "2119257867",
        "commented_code": "@@ -5779,6 +5779,7 @@ ExceptionOr<Ref<SerializedScriptValue>> SerializedScriptValue::create(JSGlobalOb\n         if (auto port = JSMessagePort::toWrapped(vm, transferable.get())) {\n             if (port->isDetached())\n                 return Exception { DataCloneError, \"MessagePort in transfer list is already detached\"_s };\n+            port->dispatchCloseEvent();",
        "comment_created_at": "2025-06-01T15:29:47+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The `dispatchCloseEvent()` call during transfer appears to be inconsistent with the MessagePort specification. According to the standard, MessagePorts should only dispatch 'close' events when explicitly closed via the `close()` method, not when transferred between contexts. Transferring a port detaches it from its original context but doesn't conceptually \"close\" it - it continues to exist in the target context. This behavior difference could cause compatibility issues with Node.js and other standard implementations.\n```suggestion\n            port->detachWithoutClosing();\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2120295563",
    "pr_number": 19941,
    "pr_file": "src/bun.js/bindings/webcore/MessagePort.cpp",
    "created_at": "2025-06-02T07:29:13+00:00",
    "commented_code": "bool MessagePort::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)\n {\n     if (eventType == eventNames().messageEvent) {\n-        if (listener->isAttribute())\n-            start();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2120295563",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19941,
        "pr_file": "src/bun.js/bindings/webcore/MessagePort.cpp",
        "discussion_id": "2120295563",
        "commented_code": "@@ -427,8 +451,7 @@ Ref<MessagePort> MessagePort::entangle(ScriptExecutionContext& context, Transfer\n bool MessagePort::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)\n {\n     if (eventType == eventNames().messageEvent) {\n-        if (listener->isAttribute())\n-            start();",
        "comment_created_at": "2025-06-02T07:29:13+00:00",
        "comment_author": "nazarhussain",
        "comment_body": "Please see my comment on actual issue. https://github.com/oven-sh/bun/issues/19863#issuecomment-2929201194\r\n\r\nI will emphasis that we should make `WebCore` implementation to align withe the JS specs and have that NodeJS compatibility layer abstracted away. \r\n\r\nAnd until then just having documentation for such points would be suffice. ",
        "pr_file_module": null
      }
    ]
  }
]