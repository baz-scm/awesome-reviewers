[
  {
    "discussion_id": "2132956136",
    "pr_number": 20088,
    "pr_file": "test/js/node/test/parallel/test-vm-context-dont-contextify.js",
    "created_at": "2025-06-06T22:01:16+00:00",
    "commented_code": "+'use strict';\n+\n+// Check vm.constants.DONT_CONTEXTIFY works.\n+\n+const common = require('../common');\n+\n+const assert = require('assert');\n+const vm = require('vm');\n+const fixtures = require('../common/fixtures');\n+\n+{\n+  // Check identity of the returned object.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  // The globalThis in the new context should be reference equal to the returned object.\n+  assert.strictEqual(vm.runInContext('globalThis', context), context);\n+  assert(vm.isContext(context));\n+  assert.strictEqual(typeof context.Array, 'function');  // Can access builtins directly.\n+  assert.deepStrictEqual(Object.keys(context), []);  // Properties on the global proxy are not enumerable\n+}\n+\n+{\n+  // Check that vm.createContext can return the original context if re-passed.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  const context2 = new vm.createContext(context);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2132956136",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20088,
        "pr_file": "test/js/node/test/parallel/test-vm-context-dont-contextify.js",
        "discussion_id": "2132956136",
        "commented_code": "@@ -0,0 +1,185 @@\n+'use strict';\n+\n+// Check vm.constants.DONT_CONTEXTIFY works.\n+\n+const common = require('../common');\n+\n+const assert = require('assert');\n+const vm = require('vm');\n+const fixtures = require('../common/fixtures');\n+\n+{\n+  // Check identity of the returned object.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  // The globalThis in the new context should be reference equal to the returned object.\n+  assert.strictEqual(vm.runInContext('globalThis', context), context);\n+  assert(vm.isContext(context));\n+  assert.strictEqual(typeof context.Array, 'function');  // Can access builtins directly.\n+  assert.deepStrictEqual(Object.keys(context), []);  // Properties on the global proxy are not enumerable\n+}\n+\n+{\n+  // Check that vm.createContext can return the original context if re-passed.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  const context2 = new vm.createContext(context);",
        "comment_created_at": "2025-06-06T22:01:16+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The `createContext` function is not a constructor and should be called without the `new` keyword. This line should be changed to:\n\n```js\nconst context2 = vm.createContext(context);\n```\n```suggestion\n  const context2 = vm.createContext(context);\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      },
      {
        "comment_id": "2132960634",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20088,
        "pr_file": "test/js/node/test/parallel/test-vm-context-dont-contextify.js",
        "discussion_id": "2132956136",
        "commented_code": "@@ -0,0 +1,185 @@\n+'use strict';\n+\n+// Check vm.constants.DONT_CONTEXTIFY works.\n+\n+const common = require('../common');\n+\n+const assert = require('assert');\n+const vm = require('vm');\n+const fixtures = require('../common/fixtures');\n+\n+{\n+  // Check identity of the returned object.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  // The globalThis in the new context should be reference equal to the returned object.\n+  assert.strictEqual(vm.runInContext('globalThis', context), context);\n+  assert(vm.isContext(context));\n+  assert.strictEqual(typeof context.Array, 'function');  // Can access builtins directly.\n+  assert.deepStrictEqual(Object.keys(context), []);  // Properties on the global proxy are not enumerable\n+}\n+\n+{\n+  // Check that vm.createContext can return the original context if re-passed.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  const context2 = new vm.createContext(context);",
        "comment_created_at": "2025-06-06T22:07:57+00:00",
        "comment_author": "heimskr",
        "comment_body": "This is a Node.js test. It's testing strange behaviors.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146112921",
    "pr_number": 20088,
    "pr_file": "test/js/node/test/parallel/test-vm-context-dont-contextify.js",
    "created_at": "2025-06-13T21:25:17+00:00",
    "commented_code": "+'use strict';\n+\n+// Check vm.constants.DONT_CONTEXTIFY works.\n+\n+const common = require('../common');\n+\n+const assert = require('assert');\n+const vm = require('vm');\n+const fixtures = require('../common/fixtures');\n+\n+{\n+  // Check identity of the returned object.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  // The globalThis in the new context should be reference equal to the returned object.\n+  assert.strictEqual(vm.runInContext('globalThis', context), context);\n+  assert(vm.isContext(context));\n+  assert.strictEqual(typeof context.Array, 'function');  // Can access builtins directly.\n+  assert.deepStrictEqual(Object.keys(context), []);  // Properties on the global proxy are not enumerable\n+}\n+\n+{\n+  // Check that vm.createContext can return the original context if re-passed.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  const context2 = new vm.createContext(context);",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2146112921",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20088,
        "pr_file": "test/js/node/test/parallel/test-vm-context-dont-contextify.js",
        "discussion_id": "2146112921",
        "commented_code": "@@ -0,0 +1,185 @@\n+'use strict';\n+\n+// Check vm.constants.DONT_CONTEXTIFY works.\n+\n+const common = require('../common');\n+\n+const assert = require('assert');\n+const vm = require('vm');\n+const fixtures = require('../common/fixtures');\n+\n+{\n+  // Check identity of the returned object.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  // The globalThis in the new context should be reference equal to the returned object.\n+  assert.strictEqual(vm.runInContext('globalThis', context), context);\n+  assert(vm.isContext(context));\n+  assert.strictEqual(typeof context.Array, 'function');  // Can access builtins directly.\n+  assert.deepStrictEqual(Object.keys(context), []);  // Properties on the global proxy are not enumerable\n+}\n+\n+{\n+  // Check that vm.createContext can return the original context if re-passed.\n+  const context = vm.createContext(vm.constants.DONT_CONTEXTIFY);\n+  const context2 = new vm.createContext(context);",
        "comment_created_at": "2025-06-13T21:25:17+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "There appears to be a constructor syntax error in this test. `createContext` is a regular function, not a constructor class, so using it with the `new` keyword is incorrect. The line should be changed from:\n\n```js\nconst context2 = new vm.createContext(context);\n```\n\nto:\n\n```js\nconst context2 = vm.createContext(context);\n```\n\nThis will properly call the function as intended rather than trying to instantiate it as a class.\n```suggestion\n  const context2 = vm.createContext(context);\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  }
]