[
  {
    "discussion_id": "2179722008",
    "pr_number": 20761,
    "pr_file": "src/napi/napi.zig",
    "created_at": "2025-07-02T10:37:57+00:00",
    "commented_code": "env.checkGC();\n     const arraybuffer = arraybuffer_.get();\n     const array_buffer = arraybuffer.asArrayBuffer(env.toJS()) orelse return env.setLastError(.arraybuffer_expected);\n+    if (array_buffer.typed_array_type != .ArrayBuffer) {\n+        return env.setLastError(.arraybuffer_expected);\n+    }",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2179722008",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20761,
        "pr_file": "src/napi/napi.zig",
        "discussion_id": "2179722008",
        "commented_code": "@@ -809,6 +809,10 @@ pub export fn napi_get_arraybuffer_info(env_: napi_env, arraybuffer_: napi_value\n     env.checkGC();\n     const arraybuffer = arraybuffer_.get();\n     const array_buffer = arraybuffer.asArrayBuffer(env.toJS()) orelse return env.setLastError(.arraybuffer_expected);\n+    if (array_buffer.typed_array_type != .ArrayBuffer) {\n+        return env.setLastError(.arraybuffer_expected);\n+    }",
        "comment_created_at": "2025-07-02T10:37:57+00:00",
        "comment_author": "nektro",
        "comment_body": "node returns .invalid_arg in this case\r\n.arraybuffer_expected is only returned in napi_detach_arraybuffer",
        "pr_file_module": null
      },
      {
        "comment_id": "2181231241",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20761,
        "pr_file": "src/napi/napi.zig",
        "discussion_id": "2179722008",
        "commented_code": "@@ -809,6 +809,10 @@ pub export fn napi_get_arraybuffer_info(env_: napi_env, arraybuffer_: napi_value\n     env.checkGC();\n     const arraybuffer = arraybuffer_.get();\n     const array_buffer = arraybuffer.asArrayBuffer(env.toJS()) orelse return env.setLastError(.arraybuffer_expected);\n+    if (array_buffer.typed_array_type != .ArrayBuffer) {\n+        return env.setLastError(.arraybuffer_expected);\n+    }",
        "comment_created_at": "2025-07-03T00:31:48+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "@claude make it return .invalid_arg\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2181231399",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20761,
        "pr_file": "src/napi/napi.zig",
        "discussion_id": "2179722008",
        "commented_code": "@@ -809,6 +809,10 @@ pub export fn napi_get_arraybuffer_info(env_: napi_env, arraybuffer_: napi_value\n     env.checkGC();\n     const arraybuffer = arraybuffer_.get();\n     const array_buffer = arraybuffer.asArrayBuffer(env.toJS()) orelse return env.setLastError(.arraybuffer_expected);\n+    if (array_buffer.typed_array_type != .ArrayBuffer) {\n+        return env.setLastError(.arraybuffer_expected);\n+    }",
        "comment_created_at": "2025-07-03T00:32:03+00:00",
        "comment_author": "claude[bot]",
        "comment_body": "**Claude finished @Jarred-Sumner's task** \u2014\u2014 [View job](https://github.com/oven-sh/bun/actions/runs/16038735623)\n\n---\n### Fix NAPI return value compatibility \u2705\n\nSuccessfully changed the return value from `.arraybuffer_expected` to `.invalid_arg` for Node.js compatibility in `napi_get_arraybuffer_info`.\n\n#### Todo List:\n- [x] Read src/napi/napi.zig to understand current implementation\n- [x] Locate the specific line that needs to be changed\n- [x] Change `.arraybuffer_expected` to `.invalid_arg`\n- [x] Commit the change to the PR branch\n\n#### Summary of Changes:\n- **File**: `src/napi/napi.zig:811-813`\n- **Change**: Updated `napi_get_arraybuffer_info` function to return `.invalid_arg` instead of `.arraybuffer_expected` in two locations\n- **Reason**: Match Node.js behavior - the `.arraybuffer_expected` error type should only be used in `napi_detach_arraybuffer`\n- **Commit**: [b978fa7](https://github.com/oven-sh/bun/commit/b978fa72523ec4081c268f3c643996ed186d40fd)\n\nThe change ensures better compatibility between Bun's NAPI implementation and Node.js behavior.\n\n---",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1940367458",
    "pr_number": 16847,
    "pr_file": "src/bun.js/webcore/blob.zig",
    "created_at": "2025-02-04T01:48:33+00:00",
    "commented_code": "return value;\n         }\n+        pub fn deleteObjects(this: *@This(), store: *Store, globalThis: *JSC.JSGlobalObject, object_keys: JSValue, extra_options: ?JSValue) bun.JSError!JSValue {\n+            if (!object_keys.isArray()) {\n+                return globalThis.throwInvalidArguments(\"S3Client.deleteObjects() needs an array of S3DeleteObjectsObjectIdentifier as it's first argument\", .{});\n+            }\n+\n+            const Wrapper = struct {\n+                promise: JSC.JSPromise.Strong,\n+                store: *Store,\n+\n+                pub usingnamespace bun.New(@This());\n+\n+                pub fn resolve(result: S3.S3DeleteObjectsResult, self: *@This()) void {\n+                    defer self.deinit();\n+                    const globalObject = self.promise.globalObject().?;\n+                    switch (result) {\n+                        .success => |_success| {\n+                            const jsResult = JSValue.createEmptyObject(globalObject, 2);\n+\n+                            if (_success.deleted) |del| {\n+                                defer del.deinit();\n+                                const array = JSValue.createEmptyArray(globalObject, del.items.len);\n+\n+                                for (del.items, 0..) |item, i| {\n+                                    const deletedObject = JSValue.createEmptyObject(globalObject, 1);\n+                                    deletedObject.put(globalObject, JSC.ZigString.static(\"Key\"), bun.String.init(item.key).toJS(globalObject));",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "1940367458",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 16847,
        "pr_file": "src/bun.js/webcore/blob.zig",
        "discussion_id": "1940367458",
        "commented_code": "@@ -3584,6 +3584,197 @@ pub const Blob = struct {\n \n             return value;\n         }\n+        pub fn deleteObjects(this: *@This(), store: *Store, globalThis: *JSC.JSGlobalObject, object_keys: JSValue, extra_options: ?JSValue) bun.JSError!JSValue {\n+            if (!object_keys.isArray()) {\n+                return globalThis.throwInvalidArguments(\"S3Client.deleteObjects() needs an array of S3DeleteObjectsObjectIdentifier as it's first argument\", .{});\n+            }\n+\n+            const Wrapper = struct {\n+                promise: JSC.JSPromise.Strong,\n+                store: *Store,\n+\n+                pub usingnamespace bun.New(@This());\n+\n+                pub fn resolve(result: S3.S3DeleteObjectsResult, self: *@This()) void {\n+                    defer self.deinit();\n+                    const globalObject = self.promise.globalObject().?;\n+                    switch (result) {\n+                        .success => |_success| {\n+                            const jsResult = JSValue.createEmptyObject(globalObject, 2);\n+\n+                            if (_success.deleted) |del| {\n+                                defer del.deinit();\n+                                const array = JSValue.createEmptyArray(globalObject, del.items.len);\n+\n+                                for (del.items, 0..) |item, i| {\n+                                    const deletedObject = JSValue.createEmptyObject(globalObject, 1);\n+                                    deletedObject.put(globalObject, JSC.ZigString.static(\"Key\"), bun.String.init(item.key).toJS(globalObject));",
        "comment_created_at": "2025-02-04T01:48:33+00:00",
        "comment_author": "cirospaciari",
        "comment_body": "properties should start with lower case\r\nbun.Sring.init(item.key).toJS will leak memory use `bun.String.createUTF8ForJS(globalObject, item.key)` in this case;",
        "pr_file_module": null
      },
      {
        "comment_id": "1941242262",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 16847,
        "pr_file": "src/bun.js/webcore/blob.zig",
        "discussion_id": "1940367458",
        "commented_code": "@@ -3584,6 +3584,197 @@ pub const Blob = struct {\n \n             return value;\n         }\n+        pub fn deleteObjects(this: *@This(), store: *Store, globalThis: *JSC.JSGlobalObject, object_keys: JSValue, extra_options: ?JSValue) bun.JSError!JSValue {\n+            if (!object_keys.isArray()) {\n+                return globalThis.throwInvalidArguments(\"S3Client.deleteObjects() needs an array of S3DeleteObjectsObjectIdentifier as it's first argument\", .{});\n+            }\n+\n+            const Wrapper = struct {\n+                promise: JSC.JSPromise.Strong,\n+                store: *Store,\n+\n+                pub usingnamespace bun.New(@This());\n+\n+                pub fn resolve(result: S3.S3DeleteObjectsResult, self: *@This()) void {\n+                    defer self.deinit();\n+                    const globalObject = self.promise.globalObject().?;\n+                    switch (result) {\n+                        .success => |_success| {\n+                            const jsResult = JSValue.createEmptyObject(globalObject, 2);\n+\n+                            if (_success.deleted) |del| {\n+                                defer del.deinit();\n+                                const array = JSValue.createEmptyArray(globalObject, del.items.len);\n+\n+                                for (del.items, 0..) |item, i| {\n+                                    const deletedObject = JSValue.createEmptyObject(globalObject, 1);\n+                                    deletedObject.put(globalObject, JSC.ZigString.static(\"Key\"), bun.String.init(item.key).toJS(globalObject));",
        "comment_created_at": "2025-02-04T14:06:38+00:00",
        "comment_author": "Inqnuam",
        "comment_body": "Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "1941244829",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 16847,
        "pr_file": "src/bun.js/webcore/blob.zig",
        "discussion_id": "1940367458",
        "commented_code": "@@ -3584,6 +3584,197 @@ pub const Blob = struct {\n \n             return value;\n         }\n+        pub fn deleteObjects(this: *@This(), store: *Store, globalThis: *JSC.JSGlobalObject, object_keys: JSValue, extra_options: ?JSValue) bun.JSError!JSValue {\n+            if (!object_keys.isArray()) {\n+                return globalThis.throwInvalidArguments(\"S3Client.deleteObjects() needs an array of S3DeleteObjectsObjectIdentifier as it's first argument\", .{});\n+            }\n+\n+            const Wrapper = struct {\n+                promise: JSC.JSPromise.Strong,\n+                store: *Store,\n+\n+                pub usingnamespace bun.New(@This());\n+\n+                pub fn resolve(result: S3.S3DeleteObjectsResult, self: *@This()) void {\n+                    defer self.deinit();\n+                    const globalObject = self.promise.globalObject().?;\n+                    switch (result) {\n+                        .success => |_success| {\n+                            const jsResult = JSValue.createEmptyObject(globalObject, 2);\n+\n+                            if (_success.deleted) |del| {\n+                                defer del.deinit();\n+                                const array = JSValue.createEmptyArray(globalObject, del.items.len);\n+\n+                                for (del.items, 0..) |item, i| {\n+                                    const deletedObject = JSValue.createEmptyObject(globalObject, 1);\n+                                    deletedObject.put(globalObject, JSC.ZigString.static(\"Key\"), bun.String.init(item.key).toJS(globalObject));",
        "comment_created_at": "2025-02-04T14:08:11+00:00",
        "comment_author": "Inqnuam",
        "comment_body": "lowercasing properties will break drop-in `@aws-sdk/s3-client` compatibility",
        "pr_file_module": null
      },
      {
        "comment_id": "1941873346",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 16847,
        "pr_file": "src/bun.js/webcore/blob.zig",
        "discussion_id": "1940367458",
        "commented_code": "@@ -3584,6 +3584,197 @@ pub const Blob = struct {\n \n             return value;\n         }\n+        pub fn deleteObjects(this: *@This(), store: *Store, globalThis: *JSC.JSGlobalObject, object_keys: JSValue, extra_options: ?JSValue) bun.JSError!JSValue {\n+            if (!object_keys.isArray()) {\n+                return globalThis.throwInvalidArguments(\"S3Client.deleteObjects() needs an array of S3DeleteObjectsObjectIdentifier as it's first argument\", .{});\n+            }\n+\n+            const Wrapper = struct {\n+                promise: JSC.JSPromise.Strong,\n+                store: *Store,\n+\n+                pub usingnamespace bun.New(@This());\n+\n+                pub fn resolve(result: S3.S3DeleteObjectsResult, self: *@This()) void {\n+                    defer self.deinit();\n+                    const globalObject = self.promise.globalObject().?;\n+                    switch (result) {\n+                        .success => |_success| {\n+                            const jsResult = JSValue.createEmptyObject(globalObject, 2);\n+\n+                            if (_success.deleted) |del| {\n+                                defer del.deinit();\n+                                const array = JSValue.createEmptyArray(globalObject, del.items.len);\n+\n+                                for (del.items, 0..) |item, i| {\n+                                    const deletedObject = JSValue.createEmptyObject(globalObject, 1);\n+                                    deletedObject.put(globalObject, JSC.ZigString.static(\"Key\"), bun.String.init(item.key).toJS(globalObject));",
        "comment_created_at": "2025-02-04T20:46:02+00:00",
        "comment_author": "cirospaciari",
        "comment_body": "Bun S3 API is not intended to be compatible with `@aws-sdk/s3-client` format but with S3 REST API",
        "pr_file_module": null
      }
    ]
  }
]