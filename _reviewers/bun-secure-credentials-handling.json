[
  {
    "discussion_id": "2184097297",
    "pr_number": 19189,
    "pr_file": "scripts/debug-coredump.ts",
    "created_at": "2025-07-04T01:25:58+00:00",
    "commented_code": "+import fs from \"node:fs\";\n+import { tmpdir } from \"node:os\";\n+import { basename, join } from \"node:path\";\n+import { parseArgs } from \"node:util\";\n+\n+// usage: bun debug-coredump.ts\n+// -p <PID of the test that crashed> (buildkite should show this)\n+// -b <URL to the bun-profile.zip artifact for the appropriate platform>\n+// -c <URL to the bun-cores.tar.gz.age artifact for the appropriate platform>\n+// -d <debugger> (default: lldb)\n+const {\n+  values: { pid: stringPid, [\"build-url\"]: buildUrl, [\"cores-url\"]: coresUrl, debugger: debuggerPath },\n+} = parseArgs({\n+  options: {\n+    pid: { type: \"string\", short: \"p\" },\n+    [\"build-url\"]: { type: \"string\", short: \"b\" },\n+    [\"cores-url\"]: { type: \"string\", short: \"c\" },\n+    debugger: { type: \"string\", short: \"d\", default: \"lldb\" },\n+  },\n+});\n+\n+if (stringPid === undefined) throw new Error(\"no PID given\");\n+const pid = parseInt(stringPid);\n+if (buildUrl === undefined) throw new Error(\"no build-url given\");\n+if (coresUrl === undefined) throw new Error(\"no cores-url given\");\n+if (!process.env.AGE_CORES_IDENTITY?.startsWith(\"AGE-SECRET-KEY-\"))\n+  throw new Error(\"no identity given in $AGE_CORES_IDENTITY\");\n+\n+const id = Bun.hash(buildUrl + coresUrl).toString(36);\n+const dir = join(tmpdir(), `debug-coredump-${id}.tmp`);\n+fs.mkdirSync(dir, { recursive: true });\n+\n+if (!fs.existsSync(join(dir, \"bun-profile\")) || !fs.existsSync(join(dir, `bun-${pid}.core`))) {\n+  console.log(\"downloading bun-profile.zip\");\n+  const zip = await (await fetch(buildUrl)).arrayBuffer();\n+  await Bun.write(join(dir, \"bun-profile.zip\"), zip);\n+  // -j: junk paths (don't create directories when extracting)\n+  // -o: overwrite without prompting\n+  // -d: extract to this directory instead of cwd\n+  await Bun.$`unzip -j -o ${join(dir, \"bun-profile.zip\")} -d ${dir}`;\n+\n+  console.log(\"downloading cores\");\n+  const cores = await (await fetch(coresUrl)).arrayBuffer();\n+  await Bun.$`bash -c ${`age -d -i <(echo \"$AGE_CORES_IDENTITY\")`} < ${cores} | tar -zxvC ${dir}`;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2184097297",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19189,
        "pr_file": "scripts/debug-coredump.ts",
        "discussion_id": "2184097297",
        "commented_code": "@@ -0,0 +1,63 @@\n+import fs from \"node:fs\";\n+import { tmpdir } from \"node:os\";\n+import { basename, join } from \"node:path\";\n+import { parseArgs } from \"node:util\";\n+\n+// usage: bun debug-coredump.ts\n+// -p <PID of the test that crashed> (buildkite should show this)\n+// -b <URL to the bun-profile.zip artifact for the appropriate platform>\n+// -c <URL to the bun-cores.tar.gz.age artifact for the appropriate platform>\n+// -d <debugger> (default: lldb)\n+const {\n+  values: { pid: stringPid, [\"build-url\"]: buildUrl, [\"cores-url\"]: coresUrl, debugger: debuggerPath },\n+} = parseArgs({\n+  options: {\n+    pid: { type: \"string\", short: \"p\" },\n+    [\"build-url\"]: { type: \"string\", short: \"b\" },\n+    [\"cores-url\"]: { type: \"string\", short: \"c\" },\n+    debugger: { type: \"string\", short: \"d\", default: \"lldb\" },\n+  },\n+});\n+\n+if (stringPid === undefined) throw new Error(\"no PID given\");\n+const pid = parseInt(stringPid);\n+if (buildUrl === undefined) throw new Error(\"no build-url given\");\n+if (coresUrl === undefined) throw new Error(\"no cores-url given\");\n+if (!process.env.AGE_CORES_IDENTITY?.startsWith(\"AGE-SECRET-KEY-\"))\n+  throw new Error(\"no identity given in $AGE_CORES_IDENTITY\");\n+\n+const id = Bun.hash(buildUrl + coresUrl).toString(36);\n+const dir = join(tmpdir(), `debug-coredump-${id}.tmp`);\n+fs.mkdirSync(dir, { recursive: true });\n+\n+if (!fs.existsSync(join(dir, \"bun-profile\")) || !fs.existsSync(join(dir, `bun-${pid}.core`))) {\n+  console.log(\"downloading bun-profile.zip\");\n+  const zip = await (await fetch(buildUrl)).arrayBuffer();\n+  await Bun.write(join(dir, \"bun-profile.zip\"), zip);\n+  // -j: junk paths (don't create directories when extracting)\n+  // -o: overwrite without prompting\n+  // -d: extract to this directory instead of cwd\n+  await Bun.$`unzip -j -o ${join(dir, \"bun-profile.zip\")} -d ${dir}`;\n+\n+  console.log(\"downloading cores\");\n+  const cores = await (await fetch(coresUrl)).arrayBuffer();\n+  await Bun.$`bash -c ${`age -d -i <(echo \"$AGE_CORES_IDENTITY\")`} < ${cores} | tar -zxvC ${dir}`;",
        "comment_created_at": "2025-07-04T01:25:58+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The process substitution syntax `<(...)` combined with template literal interpolation may not work reliably when passed to `bash -c` this way. Consider one of these more robust approaches:\n\n1. Use proper quoting with a single command string:\n```ts\nawait Bun.$`bash -c 'age -d -i <(echo \"$AGE_CORES_IDENTITY\")' < ${cores} | tar -zxvC ${dir}`;\n```\n\n2. Or write the identity to a temporary file with appropriate permissions:\n```ts\nconst identityFile = join(dir, \"identity.key\");\nawait Bun.write(identityFile, process.env.AGE_CORES_IDENTITY);\nawait Bun.chmod(identityFile, 0o600);\nawait Bun.$`age -d -i ${identityFile} < ${cores} | tar -zxvC ${dir}`;\nawait Bun.rm(identityFile);\n```\n```suggestion\n  const identityFile = join(dir, \"identity.key\");\n  await Bun.write(identityFile, process.env.AGE_CORES_IDENTITY);\n  await Bun.chmod(identityFile, 0o600);\n  await Bun.$`age -d -i ${identityFile} < ${cores} | tar -zxvC ${dir}`;\n  await Bun.rm(identityFile);\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  }
]