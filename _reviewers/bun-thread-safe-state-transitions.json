[
  {
    "discussion_id": "2111144176",
    "pr_number": 19940,
    "pr_file": "src/bun.js/bindings/webcore/Worker.cpp",
    "created_at": "2025-05-28T07:28:17+00:00",
    "commented_code": "void Worker::terminate()\n {\n+\n+    // Don't try to terminate an already terminated worker\n+    if (m_terminationFlags & TerminatedFlag) {",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2111144176",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19940,
        "pr_file": "src/bun.js/bindings/webcore/Worker.cpp",
        "discussion_id": "2111144176",
        "commented_code": "@@ -261,6 +262,12 @@ ExceptionOr<void> Worker::postMessage(JSC::JSGlobalObject& state, JSC::JSValue m\n \n void Worker::terminate()\n {\n+\n+    // Don't try to terminate an already terminated worker\n+    if (m_terminationFlags & TerminatedFlag) {",
        "comment_created_at": "2025-05-28T07:28:17+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "This isn't threadsafe. Fortunately, the `fetch_or` call returns the previous value, so you can do the check there. ANd since it's an or, it won't unset the terminated flag.",
        "pr_file_module": null
      },
      {
        "comment_id": "2111154466",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19940,
        "pr_file": "src/bun.js/bindings/webcore/Worker.cpp",
        "discussion_id": "2111144176",
        "commented_code": "@@ -261,6 +262,12 @@ ExceptionOr<void> Worker::postMessage(JSC::JSGlobalObject& state, JSC::JSValue m\n \n void Worker::terminate()\n {\n+\n+    // Don't try to terminate an already terminated worker\n+    if (m_terminationFlags & TerminatedFlag) {",
        "comment_created_at": "2025-05-28T07:33:58+00:00",
        "comment_author": "alii",
        "comment_body": "Fixed in aa0d8b3bafc60bc3ed9d47511ecf3537ccacf6a4",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2110404215",
    "pr_number": 19941,
    "pr_file": "src/bun.js/bindings/webcore/MessagePort.cpp",
    "created_at": "2025-05-27T22:27:36+00:00",
    "commented_code": "ScriptExecutionContext::postTaskTo(context->identifier(), [protectedThis = Ref { *this }, ports = WTFMove(ports), message = WTFMove(message)](ScriptExecutionContext& context) mutable {\n                 auto event = MessageEvent::create(*context.jsGlobalObject(), message.message.releaseNonNull(), {}, {}, {}, WTFMove(ports));\n                 protectedThis->dispatchEvent(event.event);\n+                protectedThis->m_messagesInFight -= 1;\n+                protectedThis->close();",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2110404215",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19941,
        "pr_file": "src/bun.js/bindings/webcore/MessagePort.cpp",
        "discussion_id": "2110404215",
        "commented_code": "@@ -287,6 +302,8 @@ void MessagePort::dispatchMessages()\n             ScriptExecutionContext::postTaskTo(context->identifier(), [protectedThis = Ref { *this }, ports = WTFMove(ports), message = WTFMove(message)](ScriptExecutionContext& context) mutable {\n                 auto event = MessageEvent::create(*context.jsGlobalObject(), message.message.releaseNonNull(), {}, {}, {}, WTFMove(ports));\n                 protectedThis->dispatchEvent(event.event);\n+                protectedThis->m_messagesInFight -= 1;\n+                protectedThis->close();",
        "comment_created_at": "2025-05-27T22:27:36+00:00",
        "comment_author": "graphite-app[bot]",
        "comment_body": "The unconditional `close()` call after processing each message may cause issues when multiple messages are being processed concurrently. Since `close()` has a guard that prevents closing when `m_messagesInFight > 0`, the port might not be properly closed when expected.\n\nConsider modifying this to only call `close()` when all messages have been processed:\n\n```cpp\nprotectedThis->m_messagesInFight -= 1;\nif (protectedThis->m_messagesInFight == 0) \n    protectedThis->close();\n```\n\nThis ensures the port is only closed after all in-flight messages have been handled.\n```suggestion\n                protectedThis->m_messagesInFlight -= 1;\n                if (protectedThis->m_messagesInFlight == 0)\n                    protectedThis->close();\n```\n  \n\n*Spotted by [Diamond](https://app.graphite.dev/diamond/?org=oven-sh&ref=ai-review-comment)*<i class='graphite__hidden'><br /><br />Is this helpful? React \ud83d\udc4d or \ud83d\udc4e to let us know.</i>",
        "pr_file_module": null
      }
    ]
  }
]