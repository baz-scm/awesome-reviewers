[
  {
    "discussion_id": "1984672441",
    "pr_number": 17967,
    "pr_file": "src/bun.js/bindings/NodeValidator.cpp",
    "created_at": "2025-03-07T08:45:45+00:00",
    "commented_code": "auto lower = callFrame->argument(2);\n     auto upper = callFrame->argument(3);\n \n+    if (LIKELY(number.isInt32())) {\n+        auto number_num = number.asInt32();\n+        ASSERT_WITH_MESSAGE(lower.isInt32(), \"lower must be an integer. Make sure constants set it to a jsNumber().\");\n+        ASSERT_WITH_MESSAGE(upper.isInt32(), \"upper must be an integer. Make sure constants set it to a jsNumber().\");\n+        auto lower_num = lower.asInt32();\n+        auto upper_num = upper.asInt32();\n+        if (number_num < lower_num || number_num > upper_num) {",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "1984672441",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17967,
        "pr_file": "src/bun.js/bindings/NodeValidator.cpp",
        "discussion_id": "1984672441",
        "commented_code": "@@ -192,6 +193,19 @@ JSC_DEFINE_HOST_FUNCTION(jsFunction_checkRangesOrGetDefault, (JSC::JSGlobalObjec\n     auto lower = callFrame->argument(2);\n     auto upper = callFrame->argument(3);\n \n+    if (LIKELY(number.isInt32())) {\n+        auto number_num = number.asInt32();\n+        ASSERT_WITH_MESSAGE(lower.isInt32(), \"lower must be an integer. Make sure constants set it to a jsNumber().\");\n+        ASSERT_WITH_MESSAGE(upper.isInt32(), \"upper must be an integer. Make sure constants set it to a jsNumber().\");\n+        auto lower_num = lower.asInt32();\n+        auto upper_num = upper.asInt32();\n+        if (number_num < lower_num || number_num > upper_num) {",
        "comment_created_at": "2025-03-07T08:45:45+00:00",
        "comment_author": "nektro",
        "comment_body": "```suggestion\r\n        if (UNLIKELY(number_num < lower_num || number_num > upper_num)) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1984679215",
    "pr_number": 17967,
    "pr_file": "src/bun.js/bindings/NodeValidator.cpp",
    "created_at": "2025-03-07T08:50:34+00:00",
    "commented_code": "}\n JSC::EncodedJSValue V::validateArray(JSC::ThrowScope& scope, JSC::JSGlobalObject* globalObject, JSValue value, JSValue name, JSValue minLength)\n {\n-    auto& vm = JSC::getVM(globalObject);\n-\n-    if (minLength.isUndefined()) minLength = jsNumber(0);\n-\n     if (!JSC::isArray(globalObject, value)) return Bun::ERR::INVALID_ARG_TYPE(scope, globalObject, name, \"Array\"_s, value);\n \n-    auto length = value.get(globalObject, Identifier::fromString(vm, \"length\"_s));\n+    auto* object = value.toObject(globalObject);\n+    auto length = object->getArrayLength();\n+    auto minLength_num = minLength.isUndefined() ? 0 : minLength.toNumber(globalObject);\n     RETURN_IF_EXCEPTION(scope, {});\n-    auto length_num = length.toNumber(globalObject);\n-    RETURN_IF_EXCEPTION(scope, {});\n-    auto minLength_num = minLength.toNumber(globalObject);\n-    RETURN_IF_EXCEPTION(scope, {});\n-    if (length_num < minLength_num) {\n+    if (length < minLength_num) {",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "1984679215",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 17967,
        "pr_file": "src/bun.js/bindings/NodeValidator.cpp",
        "discussion_id": "1984679215",
        "commented_code": "@@ -351,38 +380,25 @@ JSC_DEFINE_HOST_FUNCTION(jsFunction_validateArray, (JSC::JSGlobalObject * global\n }\n JSC::EncodedJSValue V::validateArray(JSC::ThrowScope& scope, JSC::JSGlobalObject* globalObject, JSValue value, JSValue name, JSValue minLength)\n {\n-    auto& vm = JSC::getVM(globalObject);\n-\n-    if (minLength.isUndefined()) minLength = jsNumber(0);\n-\n     if (!JSC::isArray(globalObject, value)) return Bun::ERR::INVALID_ARG_TYPE(scope, globalObject, name, \"Array\"_s, value);\n \n-    auto length = value.get(globalObject, Identifier::fromString(vm, \"length\"_s));\n+    auto* object = value.toObject(globalObject);\n+    auto length = object->getArrayLength();\n+    auto minLength_num = minLength.isUndefined() ? 0 : minLength.toNumber(globalObject);\n     RETURN_IF_EXCEPTION(scope, {});\n-    auto length_num = length.toNumber(globalObject);\n-    RETURN_IF_EXCEPTION(scope, {});\n-    auto minLength_num = minLength.toNumber(globalObject);\n-    RETURN_IF_EXCEPTION(scope, {});\n-    if (length_num < minLength_num) {\n+    if (length < minLength_num) {",
        "comment_created_at": "2025-03-07T08:50:34+00:00",
        "comment_author": "nektro",
        "comment_body": "```suggestion\r\n    if (UNLIKELY(length < minLength_num)) {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]