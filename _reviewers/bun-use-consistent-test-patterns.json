[
  {
    "discussion_id": "2202040804",
    "pr_number": 20928,
    "pr_file": "test/js/web/html/FormData.test.ts",
    "created_at": "2025-07-11T23:06:18+00:00",
    "commented_code": "}\n   });\n });\n+\n+// https://github.com/oven-sh/bun/issues/14988\n+describe(\"Content-Type header propagation\", () => {\n+  it(\"new Request({body: FormData}) (subclass) -> fetch(request)\", async () => {\n+    using server = Bun.serve({\n+      port: 0,\n+      async fetch(req, res) {\n+        if (!req.headers.get(\"content-type\").includes(\"multipart/form-data\")) {\n+          return new Response(\"Hello, world!\", { status: 400 });\n+        }\n+        const body = await req.formData();\n+        expect(body.get(\"foo\")!.size).toBe(3);\n+        return new Response(\"Hello, world!\", { status: 200 });\n+      },\n+    });",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2202040804",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20928,
        "pr_file": "test/js/web/html/FormData.test.ts",
        "discussion_id": "2202040804",
        "commented_code": "@@ -646,3 +646,113 @@ describe(\"FormData\", () => {\n     }\n   });\n });\n+\n+// https://github.com/oven-sh/bun/issues/14988\n+describe(\"Content-Type header propagation\", () => {\n+  it(\"new Request({body: FormData}) (subclass) -> fetch(request)\", async () => {\n+    using server = Bun.serve({\n+      port: 0,\n+      async fetch(req, res) {\n+        if (!req.headers.get(\"content-type\").includes(\"multipart/form-data\")) {\n+          return new Response(\"Hello, world!\", { status: 400 });\n+        }\n+        const body = await req.formData();\n+        expect(body.get(\"foo\")!.size).toBe(3);\n+        return new Response(\"Hello, world!\", { status: 200 });\n+      },\n+    });",
        "comment_created_at": "2025-07-11T23:06:18+00:00",
        "comment_author": "190n",
        "comment_body": "these tests are repetitive could we make the server in a `beforeEach` maybe?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2055047956",
    "pr_number": 19191,
    "pr_file": "test/js/web/workers/worker.test.ts",
    "created_at": "2025-04-22T23:45:44+00:00",
    "commented_code": "});\n   });\n \n-  test(\"worker terminate\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-hang.js\", import.meta.url).href, {\n-      smol: true,\n+  describe(\"terminate()\", () => {\n+    test(\"exits with code 0\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-hang.js\"), {\n+        smol: true,\n+      });\n+      const code = await worker.terminate();\n+      expect(code).toBe(0);\n     });\n-    const code = await worker.terminate();\n-    expect(code).toBe(0);\n-  });\n \n-  test(\"worker with process.exit (delay) and terminate\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-process-exit.js\", import.meta.url).href, {\n-      smol: true,\n+    test.todo(\"worker terminating forcefully properly interrupts\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-while-true.js\"), {});\n+      await new Promise<void>(done => {\n+        worker.on(\"message\", () => done());\n+      });\n+      const code = await worker.terminate();\n+      expect(code).toBe(0);\n     });\n-    await Bun.sleep(200);\n-    const code = await worker.terminate();\n-    expect(code).toBe(2);\n-  });\n \n-  test.todo(\"worker terminating forcefully properly interrupts\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-while-true.js\", import.meta.url).href, {});\n-    await new Promise<void>(done => {\n-      worker.on(\"message\", () => done());\n+    test(\"when worker exits with code 2 after delay, exit code is 2\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-process-exit.js\"), {\n+        smol: true,\n+      });\n+      await Bun.sleep(200);\n+      const code = await worker.terminate();\n+      expect(code).toBe(2);\n     });\n-    const code = await worker.terminate();\n-    expect(code).toBe(0);\n   });\n \n-  test(\"worker without argv/execArgv\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-argv.js\", import.meta.url), {});\n-    const promise = new Promise<any>(resolve => worker.on(\"message\", resolve));\n-    worker.postMessage(\"hello\");\n-    const result = await promise;\n-\n-    expect(result.argv).toHaveLength(process.argv.length);\n-    expect(result.execArgv).toHaveLength(process.execArgv.length);\n-  });\n+  describe(\"argv/execArgv\", () => {\n+    test(\"when not set, defaults to process.{argv,execArgv}\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-argv.js\", true), {});\n+      const promise = new Promise<any>(resolve => worker.on(\"message\", resolve));\n+      worker.postMessage(\"hello\");\n+      const result = await promise;\n \n-  test(\"worker with argv/execArgv\", async () => {\n-    const worker_argv = [\"--some-arg=1\", \"--some-arg=2\"];\n-    const worker_execArgv = [\"--no-warnings\", \"--no-deprecation\", \"--tls-min-v1.2\"];\n-    const original_argv = [...process.argv];\n-    const original_execArgv = [...process.execArgv];\n-    const worker = new wt.Worker(new URL(\"worker-fixture-argv.js\", import.meta.url), {\n-      argv: worker_argv,\n-      execArgv: worker_execArgv,\n+      expect(result.argv).toHaveLength(process.argv.length);\n+      expect(result.execArgv).toHaveLength(process.execArgv.length);\n     });\n-    const promise = new Promise<any>(resolve => worker.once(\"message\", resolve));\n-    worker.postMessage(\"hello\");\n-    const result = await promise;\n \n-    expect(result).toEqual({\n-      argv: [original_argv[0], original_argv[1].replace(import.meta.file, \"worker-fixture-argv.js\"), ...worker_argv],\n-      execArgv: worker_execArgv,\n-    });\n+    test(\"can be passed to the worker\", async () => {\n+      const worker_argv = [\"--some-arg=1\", \"--some-arg=2\"];\n+      const worker_execArgv = [\"--no-warnings\", \"--no-deprecation\", \"--tls-min-v1.2\"];\n+      const original_argv = [...process.argv];\n+      const original_execArgv = [...process.execArgv];\n+      const worker = new wt.Worker(new URL(\"fixtures/worker-fixture-argv.js\", import.meta.url), {",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2055047956",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19191,
        "pr_file": "test/js/web/workers/worker.test.ts",
        "discussion_id": "2055047956",
        "commented_code": "@@ -288,79 +319,88 @@ describe(\"worker_threads\", () => {\n     });\n   });\n \n-  test(\"worker terminate\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-hang.js\", import.meta.url).href, {\n-      smol: true,\n+  describe(\"terminate()\", () => {\n+    test(\"exits with code 0\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-hang.js\"), {\n+        smol: true,\n+      });\n+      const code = await worker.terminate();\n+      expect(code).toBe(0);\n     });\n-    const code = await worker.terminate();\n-    expect(code).toBe(0);\n-  });\n \n-  test(\"worker with process.exit (delay) and terminate\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-process-exit.js\", import.meta.url).href, {\n-      smol: true,\n+    test.todo(\"worker terminating forcefully properly interrupts\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-while-true.js\"), {});\n+      await new Promise<void>(done => {\n+        worker.on(\"message\", () => done());\n+      });\n+      const code = await worker.terminate();\n+      expect(code).toBe(0);\n     });\n-    await Bun.sleep(200);\n-    const code = await worker.terminate();\n-    expect(code).toBe(2);\n-  });\n \n-  test.todo(\"worker terminating forcefully properly interrupts\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-while-true.js\", import.meta.url).href, {});\n-    await new Promise<void>(done => {\n-      worker.on(\"message\", () => done());\n+    test(\"when worker exits with code 2 after delay, exit code is 2\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-process-exit.js\"), {\n+        smol: true,\n+      });\n+      await Bun.sleep(200);\n+      const code = await worker.terminate();\n+      expect(code).toBe(2);\n     });\n-    const code = await worker.terminate();\n-    expect(code).toBe(0);\n   });\n \n-  test(\"worker without argv/execArgv\", async () => {\n-    const worker = new wt.Worker(new URL(\"worker-fixture-argv.js\", import.meta.url), {});\n-    const promise = new Promise<any>(resolve => worker.on(\"message\", resolve));\n-    worker.postMessage(\"hello\");\n-    const result = await promise;\n-\n-    expect(result.argv).toHaveLength(process.argv.length);\n-    expect(result.execArgv).toHaveLength(process.execArgv.length);\n-  });\n+  describe(\"argv/execArgv\", () => {\n+    test(\"when not set, defaults to process.{argv,execArgv}\", async () => {\n+      const worker = new wt.Worker(fixtureUrl(\"worker-fixture-argv.js\", true), {});\n+      const promise = new Promise<any>(resolve => worker.on(\"message\", resolve));\n+      worker.postMessage(\"hello\");\n+      const result = await promise;\n \n-  test(\"worker with argv/execArgv\", async () => {\n-    const worker_argv = [\"--some-arg=1\", \"--some-arg=2\"];\n-    const worker_execArgv = [\"--no-warnings\", \"--no-deprecation\", \"--tls-min-v1.2\"];\n-    const original_argv = [...process.argv];\n-    const original_execArgv = [...process.execArgv];\n-    const worker = new wt.Worker(new URL(\"worker-fixture-argv.js\", import.meta.url), {\n-      argv: worker_argv,\n-      execArgv: worker_execArgv,\n+      expect(result.argv).toHaveLength(process.argv.length);\n+      expect(result.execArgv).toHaveLength(process.execArgv.length);\n     });\n-    const promise = new Promise<any>(resolve => worker.once(\"message\", resolve));\n-    worker.postMessage(\"hello\");\n-    const result = await promise;\n \n-    expect(result).toEqual({\n-      argv: [original_argv[0], original_argv[1].replace(import.meta.file, \"worker-fixture-argv.js\"), ...worker_argv],\n-      execArgv: worker_execArgv,\n-    });\n+    test(\"can be passed to the worker\", async () => {\n+      const worker_argv = [\"--some-arg=1\", \"--some-arg=2\"];\n+      const worker_execArgv = [\"--no-warnings\", \"--no-deprecation\", \"--tls-min-v1.2\"];\n+      const original_argv = [...process.argv];\n+      const original_execArgv = [...process.execArgv];\n+      const worker = new wt.Worker(new URL(\"fixtures/worker-fixture-argv.js\", import.meta.url), {",
        "comment_created_at": "2025-04-22T23:45:44+00:00",
        "comment_author": "190n",
        "comment_body": "Use `fixtureURL`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823580388",
    "pr_number": 14917,
    "pr_file": "test/bundler/dirname-inline.test.ts",
    "created_at": "2024-10-30T23:15:07+00:00",
    "commented_code": "+import { describe, expect, it, beforeAll } from \"bun:test\";",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "1823580388",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 14917,
        "pr_file": "test/bundler/dirname-inline.test.ts",
        "discussion_id": "1823580388",
        "commented_code": "@@ -0,0 +1,53 @@\n+import { describe, expect, it, beforeAll } from \"bun:test\";",
        "comment_created_at": "2024-10-30T23:15:07+00:00",
        "comment_author": "paperclover",
        "comment_body": "instead of manually testing, can you move these to using the `itBundled` function. you can use `onAfterBundle` to use `expect` on the output code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2101437520",
    "pr_number": 19817,
    "pr_file": "test/cli/run/run-function-scope.test.ts",
    "created_at": "2025-05-22T01:15:33+00:00",
    "commented_code": "+import { expect, test } from \"bun:test\";\n+import { mkdirSync } from \"fs\";\n+import { bunEnv, bunExe, tmpdirSync } from \"harness\";\n+import { join } from \"path\";\n+\n+test(\"malformed function definition doesn't crash\", async () => {\n+  const dir = tmpdirSync();\n+  mkdirSync(dir, { recursive: true });\n+  await Bun.write(join(dir, \"index1.js\"), \"function:\");\n+  await Bun.write(join(dir, \"index1.ts\"), \"function:\");\n+  await Bun.write(join(dir, \"index2.js\"), \"function a() {function:}\");\n+  await Bun.write(join(dir, \"index2.ts\"), \"function a() {function:}\");",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2101437520",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19817,
        "pr_file": "test/cli/run/run-function-scope.test.ts",
        "discussion_id": "2101437520",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { expect, test } from \"bun:test\";\n+import { mkdirSync } from \"fs\";\n+import { bunEnv, bunExe, tmpdirSync } from \"harness\";\n+import { join } from \"path\";\n+\n+test(\"malformed function definition doesn't crash\", async () => {\n+  const dir = tmpdirSync();\n+  mkdirSync(dir, { recursive: true });\n+  await Bun.write(join(dir, \"index1.js\"), \"function:\");\n+  await Bun.write(join(dir, \"index1.ts\"), \"function:\");\n+  await Bun.write(join(dir, \"index2.js\"), \"function a() {function:}\");\n+  await Bun.write(join(dir, \"index2.ts\"), \"function a() {function:}\");",
        "comment_created_at": "2025-05-22T01:15:33+00:00",
        "comment_author": "dylan-conway",
        "comment_body": "let's move these tests into `transpiler.test.js` and use `Bun.Transpiler` to parse them, probably in a new test scope. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2105008949",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19817,
        "pr_file": "test/cli/run/run-function-scope.test.ts",
        "discussion_id": "2101437520",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { expect, test } from \"bun:test\";\n+import { mkdirSync } from \"fs\";\n+import { bunEnv, bunExe, tmpdirSync } from \"harness\";\n+import { join } from \"path\";\n+\n+test(\"malformed function definition doesn't crash\", async () => {\n+  const dir = tmpdirSync();\n+  mkdirSync(dir, { recursive: true });\n+  await Bun.write(join(dir, \"index1.js\"), \"function:\");\n+  await Bun.write(join(dir, \"index1.ts\"), \"function:\");\n+  await Bun.write(join(dir, \"index2.js\"), \"function a() {function:}\");\n+  await Bun.write(join(dir, \"index2.ts\"), \"function a() {function:}\");",
        "comment_created_at": "2025-05-23T16:42:24+00:00",
        "comment_author": "wldfngrs",
        "comment_body": "This has been updated. I'd love to hear your thoughts",
        "pr_file_module": null
      }
    ]
  }
]