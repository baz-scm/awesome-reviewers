[
  {
    "discussion_id": "2178871933",
    "pr_number": 20737,
    "pr_file": "src/bun.js/bindings/v8/V8MaybeLocal.h",
    "created_at": "2025-07-02T02:41:09+00:00",
    "commented_code": "}\n \n     bool IsEmpty() const { return m_local.IsEmpty(); }\n+    \n+    // Extract the Local<T> value if not empty\n+    bool ToLocal(Local<T>* out) const {\n+        if (IsEmpty()) {\n+            return false;\n+        }\n+        *out = m_local;\n+        return true;\n+    }\n+    \n+    // Get the Local<T> value (should only be called if not empty)\n+    Local<T> ToLocalChecked() const {\n+        return m_local;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2178871933",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20737,
        "pr_file": "src/bun.js/bindings/v8/V8MaybeLocal.h",
        "discussion_id": "2178871933",
        "commented_code": "@@ -16,6 +16,20 @@ class MaybeLocal {\n     }\n \n     bool IsEmpty() const { return m_local.IsEmpty(); }\n+    \n+    // Extract the Local<T> value if not empty\n+    bool ToLocal(Local<T>* out) const {\n+        if (IsEmpty()) {\n+            return false;\n+        }\n+        *out = m_local;\n+        return true;\n+    }\n+    \n+    // Get the Local<T> value (should only be called if not empty)\n+    Local<T> ToLocalChecked() const {\n+        return m_local;",
        "comment_created_at": "2025-07-02T02:41:09+00:00",
        "comment_author": "heimskr",
        "comment_body": "[V8 crashes](https://v8.github.io/api/head/classv8_1_1MaybeLocal.html#a9b2c9d50fca5897e3a03fd4c25d12415) if ToLocalChecked is called on an empty MaybeLocal.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178873148",
    "pr_number": 20737,
    "pr_file": "src/bun.js/bindings/v8/V8MaybeLocal.h",
    "created_at": "2025-07-02T02:42:09+00:00",
    "commented_code": "}\n \n     bool IsEmpty() const { return m_local.IsEmpty(); }\n+    \n+    // Extract the Local<T> value if not empty\n+    bool ToLocal(Local<T>* out) const {\n+        if (IsEmpty()) {\n+            return false;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2178873148",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20737,
        "pr_file": "src/bun.js/bindings/v8/V8MaybeLocal.h",
        "discussion_id": "2178873148",
        "commented_code": "@@ -16,6 +16,20 @@ class MaybeLocal {\n     }\n \n     bool IsEmpty() const { return m_local.IsEmpty(); }\n+    \n+    // Extract the Local<T> value if not empty\n+    bool ToLocal(Local<T>* out) const {\n+        if (IsEmpty()) {\n+            return false;",
        "comment_created_at": "2025-07-02T02:42:09+00:00",
        "comment_author": "heimskr",
        "comment_body": "In addition to returning false, [V8 assigns nullptr to `*out`](https://v8.github.io/api/head/classv8_1_1MaybeLocal.html#a07067e4e94ba92580d52ca6ff21739d6) if the MaybeLocal is empty.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127116801",
    "pr_number": 19940,
    "pr_file": "src/bun.js/web_worker.zig",
    "created_at": "2025-06-04T17:39:14+00:00",
    "commented_code": "this.flushLogs();\n }\n \n+pub export fn WebWorkerLifecycleHandle__requestTermination(handle: *WebWorkerLifecycleHandle) void {\n+    if (@intFromPtr(handle) == 0) return;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2127116801",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19940,
        "pr_file": "src/bun.js/web_worker.zig",
        "discussion_id": "2127116801",
        "commented_code": "@@ -437,6 +447,12 @@ fn unhandledError(this: *WebWorker, _: anyerror) void {\n     this.flushLogs();\n }\n \n+pub export fn WebWorkerLifecycleHandle__requestTermination(handle: *WebWorkerLifecycleHandle) void {\n+    if (@intFromPtr(handle) == 0) return;",
        "comment_created_at": "2025-06-04T17:39:14+00:00",
        "comment_author": "190n",
        "comment_body": "zig pointers are non-null by default, so the compiler will assume `@intFromPtr(handle) == 0` is false and delete this check. make `handle` a nullable pointer:`handle: ?*WebWorkerLifecycleHandle`",
        "pr_file_module": null
      },
      {
        "comment_id": "2127117710",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 19940,
        "pr_file": "src/bun.js/web_worker.zig",
        "discussion_id": "2127116801",
        "commented_code": "@@ -437,6 +447,12 @@ fn unhandledError(this: *WebWorker, _: anyerror) void {\n     this.flushLogs();\n }\n \n+pub export fn WebWorkerLifecycleHandle__requestTermination(handle: *WebWorkerLifecycleHandle) void {\n+    if (@intFromPtr(handle) == 0) return;",
        "comment_created_at": "2025-06-04T17:39:52+00:00",
        "comment_author": "alii",
        "comment_body": "Yeah - planning to fix and remove this later. It's a bad workaround I had to get some tests passing but it's a symptom of wrong logic elsewhere",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160242544",
    "pr_number": 20531,
    "pr_file": "src/allocators/AllocationScope.zig",
    "created_at": "2025-06-22T06:58:50+00:00",
    "commented_code": "/// Returns true if the free was invalid.\n pub fn trackExternalFree(scope: *AllocationScope, ptr: []const u8, ret_addr: ?usize) bool {\n     if (!enabled) return;\n+    // Empty slice usually means invalid pointer\n+    if (ptr.len == 0) return false;",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "2160242544",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 20531,
        "pr_file": "src/allocators/AllocationScope.zig",
        "discussion_id": "2160242544",
        "commented_code": "@@ -216,6 +216,8 @@ pub fn trackExternalAllocation(scope: *AllocationScope, ptr: []const u8, ret_add\n /// Returns true if the free was invalid.\n pub fn trackExternalFree(scope: *AllocationScope, ptr: []const u8, ret_addr: ?usize) bool {\n     if (!enabled) return;\n+    // Empty slice usually means invalid pointer\n+    if (ptr.len == 0) return false;",
        "comment_created_at": "2025-06-22T06:58:50+00:00",
        "comment_author": "Jarred-Sumner",
        "comment_body": "Null-terminated slices must always be freed, and `ptr: [:0]const u8` implicitly casts to `ptr: []const u8`. So this is not correct.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1665172771",
    "pr_number": 12334,
    "pr_file": "src/bun.js/node/node_perf_hooks_histogram_binding.zig",
    "created_at": "2024-07-04T06:04:56+00:00",
    "commented_code": "+const std = @import(\"std\");\n+const bun = @import(\"root\").bun;\n+const HDRHistogram = @import(\"hdr_histogram.zig\").HDRHistogram;\n+const meta = bun.meta;\n+const JSC = bun.JSC;\n+const JSValue = JSC.JSValue;\n+\n+// Wrapper around HRD Histogram\n+pub const RecordableHistogram = struct {\n+    pub usingnamespace JSC.Codegen.JSRecordableHistogram;\n+    hdrHist: HDRHistogram = undefined,",
    "repo_full_name": "oven-sh/bun",
    "discussion_comments": [
      {
        "comment_id": "1665172771",
        "repo_full_name": "oven-sh/bun",
        "pr_number": 12334,
        "pr_file": "src/bun.js/node/node_perf_hooks_histogram_binding.zig",
        "discussion_id": "1665172771",
        "commented_code": "@@ -0,0 +1,234 @@\n+const std = @import(\"std\");\n+const bun = @import(\"root\").bun;\n+const HDRHistogram = @import(\"hdr_histogram.zig\").HDRHistogram;\n+const meta = bun.meta;\n+const JSC = bun.JSC;\n+const JSValue = JSC.JSValue;\n+\n+// Wrapper around HRD Histogram\n+pub const RecordableHistogram = struct {\n+    pub usingnamespace JSC.Codegen.JSRecordableHistogram;\n+    hdrHist: HDRHistogram = undefined,",
        "comment_created_at": "2024-07-04T06:04:56+00:00",
        "comment_author": "paperclover",
        "comment_body": "`undefined` as the default value in a field is almost always a footgun. i suggest removing the default, and then in the `bun.new` call, you can pass the histogram there.",
        "pr_file_module": null
      }
    ]
  }
]