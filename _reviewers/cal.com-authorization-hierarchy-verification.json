[
  {
    "discussion_id": "2174178851",
    "pr_number": 22136,
    "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
    "created_at": "2025-07-01T03:22:37+00:00",
    "commented_code": "});\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            id: true,\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2176332950",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2174178851",
        "commented_code": "@@ -61,6 +62,35 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            id: true,\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {",
        "comment_created_at": "2025-07-01T03:22:37+00:00",
        "comment_author": "shaun-ak",
        "comment_body": "This ensures that the user can create more schedules, moving membership check and throwing error before will prevent the user from creating other schedules.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178178884",
    "pr_number": 22136,
    "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
    "created_at": "2025-07-01T17:32:26+00:00",
    "commented_code": "});\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2178178884",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2178178884",
        "commented_code": "@@ -61,6 +62,34 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
        "comment_created_at": "2025-07-01T17:32:26+00:00",
        "comment_author": "kart1ka",
        "comment_body": "I\u2019m not sure it\u2019s a good idea to prevent the user from adding a default schedule if they don\u2019t already have one.\ncc @sean-brydon ",
        "pr_file_module": null
      },
      {
        "comment_id": "2178875598",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2178178884",
        "commented_code": "@@ -61,6 +62,34 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
        "comment_created_at": "2025-07-02T02:44:03+00:00",
        "comment_author": "shaun-ak",
        "comment_body": "I have 1 more doubt, so you can see I used `some` here. \r\n\r\nSo, if a user is a member in one team (with locked default availability) but owner/admin in another then should we allow him/her to do CRUD on default schedules or not, because `some` will take account of the team where the user is a member and has locked default availability.",
        "pr_file_module": null
      },
      {
        "comment_id": "2178936358",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2178178884",
        "commented_code": "@@ -61,6 +62,34 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
        "comment_created_at": "2025-07-02T03:45:34+00:00",
        "comment_author": "kart1ka",
        "comment_body": "will check with the team on this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2191358265",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2178178884",
        "commented_code": "@@ -61,6 +62,34 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
        "comment_created_at": "2025-07-08T02:38:20+00:00",
        "comment_author": "kart1ka",
        "comment_body": "@shaun-ak A team or org admin/owner should always be able to update their own and their team members\u2019 default availabilities. Even if they\u2019re just a member in another team, they should still be able to change their own default availability.",
        "pr_file_module": null
      },
      {
        "comment_id": "2209152113",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22136,
        "pr_file": "packages/trpc/server/routers/viewer/availability/schedule/create.handler.ts",
        "discussion_id": "2178178884",
        "commented_code": "@@ -61,6 +62,34 @@ export const createHandler = async ({ input, ctx }: CreateOptions) => {\n   });\n \n   if (!user.defaultScheduleId) {\n+    // Check if user is a member of any team with locked default availability\n+    const userTeams = await prisma.membership.findMany({\n+      where: {\n+        userId: user.id,\n+        accepted: true,\n+      },\n+      select: {\n+        team: {\n+          select: {\n+            lockDefaultAvailability: true,\n+          },\n+        },\n+        role: true,\n+      },\n+    });\n+\n+    // Check if user is a member (not admin/owner) of any team with locked default availability\n+    const hasLockedTeamMembership = userTeams.some(\n+      (membership) => membership.team.lockDefaultAvailability && membership.role === MembershipRole.MEMBER\n+    );\n+\n+    if (hasLockedTeamMembership) {\n+      throw new TRPCError({\n+        code: \"FORBIDDEN\",\n+        message: \"Cannot edit default availability when team has locked default availability setting enabled\",\n+      });\n+    }\n+",
        "comment_created_at": "2025-07-16T03:52:26+00:00",
        "comment_author": "shaun-ak",
        "comment_body": "> @shaun-ak A team or org admin/owner should always be able to update their own and their team members\u2019 default availabilities. Even if they\u2019re just a member in another team, they should still be able to change their own default availability.\r\n\r\nI have also pushed logic for this 7125a3c96418378188e7615dd5e0d850ad257a3d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2210121264",
    "pr_number": 22544,
    "pr_file": "apps/api/v1/lib/utils/isAdmin.ts",
    "created_at": "2025-07-16T11:38:13+00:00",
    "commented_code": "},\n     },\n   });\n-  if (orgOwnerOrAdminMemberships.length > 0) return { isAdmin: true, scope: ScopeOfAdmin.OrgOwnerOrAdmin };\n+\n+  if (orgOwnerOrAdminMemberships.length > 0) {\n+    const permissionCheckService = new PermissionCheckService();\n+\n+    // Check PBAC permissions for each organization\n+    // This should only ever be one membership as we only support one org currently.\n+    for (const membership of orgOwnerOrAdminMemberships) {\n+      const teamId = membership.team.id;\n+\n+      const hasAdminPermission = await permissionCheckService.checkPermission({\n+        userId,\n+        teamId,\n+        permission: \"organization.adminApi\",\n+        fallbackRoles: [MembershipRole.OWNER, MembershipRole.ADMIN],\n+      });",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2210121264",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22544,
        "pr_file": "apps/api/v1/lib/utils/isAdmin.ts",
        "discussion_id": "2210121264",
        "commented_code": "@@ -33,7 +33,27 @@ export const isAdminGuard = async (req: NextApiRequest) => {\n       },\n     },\n   });\n-  if (orgOwnerOrAdminMemberships.length > 0) return { isAdmin: true, scope: ScopeOfAdmin.OrgOwnerOrAdmin };\n+\n+  if (orgOwnerOrAdminMemberships.length > 0) {\n+    const permissionCheckService = new PermissionCheckService();\n+\n+    // Check PBAC permissions for each organization\n+    // This should only ever be one membership as we only support one org currently.\n+    for (const membership of orgOwnerOrAdminMemberships) {\n+      const teamId = membership.team.id;\n+\n+      const hasAdminPermission = await permissionCheckService.checkPermission({\n+        userId,\n+        teamId,\n+        permission: \"organization.adminApi\",\n+        fallbackRoles: [MembershipRole.OWNER, MembershipRole.ADMIN],\n+      });",
        "comment_created_at": "2025-07-16T11:38:13+00:00",
        "comment_author": "sean-brydon",
        "comment_body": "Check if this user has the org adminApi permission if PBAC is enabled. OR fall back to checking if they are a owner or admin of this team",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1773680342",
    "pr_number": 16431,
    "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
    "created_at": "2024-09-24T16:29:11+00:00",
    "commented_code": "},\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+\n+    const session = ctx?.req ? await getServerSession({ req: ctx?.req }) : null;\n+    const userId = session?.user?.id;\n+    const isUserEventOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.userId || 0)\n+    const membership = eventType?.team?.members.find((membership) => membership.userId === userId);\n+    const isUserTeamAdminOrOwner = membership?.role === MembershipRole.OWNER || membership?.role === MembershipRole.ADMIN;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1773680342",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16431,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1773680342",
        "commented_code": "@@ -424,9 +426,44 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+\n+    const session = ctx?.req ? await getServerSession({ req: ctx?.req }) : null;\n+    const userId = session?.user?.id;\n+    const isUserEventOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.userId || 0)\n+    const membership = eventType?.team?.members.find((membership) => membership.userId === userId);\n+    const isUserTeamAdminOrOwner = membership?.role === MembershipRole.OWNER || membership?.role === MembershipRole.ADMIN;",
        "comment_created_at": "2024-09-24T16:29:11+00:00",
        "comment_author": "Amit91848",
        "comment_body": "This covers the scenario for team owners but would fail if current user is org owners but they are not in the same team as event owner.",
        "pr_file_module": null
      },
      {
        "comment_id": "1773747192",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16431,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1773680342",
        "commented_code": "@@ -424,9 +426,44 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+\n+    const session = ctx?.req ? await getServerSession({ req: ctx?.req }) : null;\n+    const userId = session?.user?.id;\n+    const isUserEventOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.userId || 0)\n+    const membership = eventType?.team?.members.find((membership) => membership.userId === userId);\n+    const isUserTeamAdminOrOwner = membership?.role === MembershipRole.OWNER || membership?.role === MembershipRole.ADMIN;",
        "comment_created_at": "2024-09-24T17:19:52+00:00",
        "comment_author": "Pavan-Chaithanya",
        "comment_body": "Fixed it. We now check if the user is org admin/owner",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1738255946",
    "pr_number": 16416,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2024-08-30T09:02:29+00:00",
    "commented_code": ") {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    if (userReschedulingIsOwner) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1738255946",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1738255946",
        "commented_code": "@@ -475,6 +480,29 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    if (userReschedulingIsOwner) {",
        "comment_created_at": "2024-08-30T09:02:29+00:00",
        "comment_author": "anikdhabal",
        "comment_body": "A team owner/admin can also reschedule a team booking, whether or not they are part of it",
        "pr_file_module": null
      },
      {
        "comment_id": "1739619865",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1738255946",
        "commented_code": "@@ -475,6 +480,29 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    if (userReschedulingIsOwner) {",
        "comment_created_at": "2024-08-31T06:40:47+00:00",
        "comment_author": "kart1ka",
        "comment_body": "Fixed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740371656",
    "pr_number": 16416,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2024-09-02T06:11:50+00:00",
    "commented_code": ") {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    let isTeamOwnerOrAdmin = false;\n+    if (isTeamEventType) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1740371656",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1740371656",
        "commented_code": "@@ -475,6 +481,45 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    let isTeamOwnerOrAdmin = false;\n+    if (isTeamEventType) {",
        "comment_created_at": "2024-09-02T06:11:50+00:00",
        "comment_author": "Amit91848",
        "comment_body": "We don't want to restrict this for team events or owner user only. Any normal user should also be able to check slots available for attendee.",
        "pr_file_module": null
      },
      {
        "comment_id": "1745969545",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1740371656",
        "commented_code": "@@ -475,6 +481,45 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(userId, originalRescheduledBooking?.user?.id);\n+    let isTeamOwnerOrAdmin = false;\n+    if (isTeamEventType) {",
        "comment_created_at": "2024-09-05T18:11:37+00:00",
        "comment_author": "kart1ka",
        "comment_body": "It is not for checking slots available for attendees. It is meant to make sure that only organiser (in case of an individual event-type) or a team owner/admin (in case of a team event) is able to reschedule the bookings.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1773689757",
    "pr_number": 16416,
    "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
    "created_at": "2024-09-24T16:36:39+00:00",
    "commented_code": "},\n       select: {\n         userId: true,\n+        eventType: {\n+          select: {\n+            teamId: true,\n+          },\n+        },\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(\n+      user?.id,\n+      originalRescheduledBooking?.userId || 0\n+    );\n+    let isDynamicEventAndUserIsOwner = false;\n+    if (input.usernameList && input.usernameList.length > 1 && user) {\n+      isDynamicEventAndUserIsOwner = eventType.users.some((eventUser) => eventUser.id === user.id);\n+    }\n+    let isTeamOwnerOrAdmin = false;\n+    if (input?.isTeamEvent && originalRescheduledBooking?.eventType?.teamId) {\n+      const teamOwnerOrAdmin = await prisma.membership.findFirst({\n+        where: {\n+          teamId: originalRescheduledBooking?.eventType?.teamId,\n+          userId: user?.id,",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1773689757",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1773689757",
        "commented_code": "@@ -408,15 +409,74 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        eventType: {\n+          select: {\n+            teamId: true,\n+          },\n+        },\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(\n+      user?.id,\n+      originalRescheduledBooking?.userId || 0\n+    );\n+    let isDynamicEventAndUserIsOwner = false;\n+    if (input.usernameList && input.usernameList.length > 1 && user) {\n+      isDynamicEventAndUserIsOwner = eventType.users.some((eventUser) => eventUser.id === user.id);\n+    }\n+    let isTeamOwnerOrAdmin = false;\n+    if (input?.isTeamEvent && originalRescheduledBooking?.eventType?.teamId) {\n+      const teamOwnerOrAdmin = await prisma.membership.findFirst({\n+        where: {\n+          teamId: originalRescheduledBooking?.eventType?.teamId,\n+          userId: user?.id,",
        "comment_created_at": "2024-09-24T16:36:39+00:00",
        "comment_author": "Amit91848",
        "comment_body": "In case bookingOrganizer is in an organization and user rescheduling is org owner/admin, they should also be able to reschedule the booking.\r\n\r\nThis currently only works in case of team admin/owner. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1773986346",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1773689757",
        "commented_code": "@@ -408,15 +409,74 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        eventType: {\n+          select: {\n+            teamId: true,\n+          },\n+        },\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n       },\n     });\n-    hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const userReschedulingIsOwner = isUserReschedulingOwner(\n+      user?.id,\n+      originalRescheduledBooking?.userId || 0\n+    );\n+    let isDynamicEventAndUserIsOwner = false;\n+    if (input.usernameList && input.usernameList.length > 1 && user) {\n+      isDynamicEventAndUserIsOwner = eventType.users.some((eventUser) => eventUser.id === user.id);\n+    }\n+    let isTeamOwnerOrAdmin = false;\n+    if (input?.isTeamEvent && originalRescheduledBooking?.eventType?.teamId) {\n+      const teamOwnerOrAdmin = await prisma.membership.findFirst({\n+        where: {\n+          teamId: originalRescheduledBooking?.eventType?.teamId,\n+          userId: user?.id,",
        "comment_created_at": "2024-09-24T19:45:10+00:00",
        "comment_author": "kart1ka",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1965052485",
    "pr_number": 19118,
    "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
    "created_at": "2025-02-21T08:17:22+00:00",
    "commented_code": "+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1965052485",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-21T08:17:22+00:00",
        "comment_author": "anikdhabal",
        "comment_body": "This does not work for team events, as userId is null for them",
        "pr_file_module": null
      },
      {
        "comment_id": "1965489065",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-21T13:37:08+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "I guess then we should just pass `id`",
        "pr_file_module": null
      },
      {
        "comment_id": "1965665732",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-21T15:17:05+00:00",
        "comment_author": "anikdhabal",
        "comment_body": "For team bookings, only an admin or owner of the team can delete",
        "pr_file_module": null
      },
      {
        "comment_id": "1965667569",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-21T15:18:15+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "Makes sense !",
        "pr_file_module": null
      },
      {
        "comment_id": "1965676524",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-21T15:24:07+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "@PAVANNAIK25 can you have a look ",
        "pr_file_module": null
      },
      {
        "comment_id": "1969389242",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-02-25T09:45:08+00:00",
        "comment_author": "PAVANNAIK25",
        "comment_body": "@anikdhabal and @TusharBhatt1 Should I use membership roles to make distinction among owner, admin and member? I'm bit confused here. I'm working with seeded data which has `enterprise` owner which has membership role as OWNER and others members in the team have the role as OWNER too. If we look at the `UserPermissionRole` it is USER for all members including owner. Please guide me here. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1977091844",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-03-03T08:45:02+00:00",
        "comment_author": "PAVANNAIK25",
        "comment_body": ">@anikdhabal and @TusharBhatt1 Should I use membership roles to make distinction among owner, admin and member? I'm bit confused here. I'm working with seeded data which has enterprise owner which has membership role as OWNER and others members in the team have the role as OWNER too. If we look at the UserPermissionRole it is USER for all members including owner. Please guide me here.\r\n\r\n@anikdhabal can you please guide me here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1977361899",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-03-03T11:39:40+00:00",
        "comment_author": "PAVANNAIK25",
        "comment_body": "> This does not work for team events, as userId is null for them\r\n\r\n@anikdhabal I have also checked with team booking it is working well. In team booking, it has userId. Correct me if I'm wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "1983168455",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-03-06T11:15:04+00:00",
        "comment_author": "PAVANNAIK25",
        "comment_body": "@anikdhabal Can I please resolve this review? If no changes are required from me.",
        "pr_file_module": null
      },
      {
        "comment_id": "1997952787",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19118,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/deleteBooking.handler.ts",
        "discussion_id": "1965052485",
        "commented_code": "@@ -0,0 +1,26 @@\n+import { prisma } from \"@calcom/prisma\";\r\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\r\n+\r\n+import type { TDeleteInputSchema } from \"./deleteBooking.schema\";\r\n+\r\n+type DeleteOptions = {\r\n+  ctx: {\r\n+    user: NonNullable<TrpcSessionUser>;\r\n+  };\r\n+  input: TDeleteInputSchema;\r\n+};\r\n+\r\n+export const deleteBookingHandler = async ({ ctx, input }: DeleteOptions) => {\r\n+  const { user } = ctx;\r\n+  const { id } = input;\r\n+  await prisma.booking.delete({\r\n+    where: {\r\n+      userId: user.id,\r\n+      id,\r\n+    },\r\n+  });\r",
        "comment_created_at": "2025-03-17T05:24:04+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "@PAVANNAIK25 in this case only : `role : MembershipRole.OWNER` or `role : MembershipRole.ADMIN`  should be allowed to perform this operation",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2015680176",
    "pr_number": 19120,
    "pr_file": "packages/trpc/server/routers/viewer/bookings/delete.handler.ts",
    "created_at": "2025-03-27T05:41:28+00:00",
    "commented_code": "+import { prisma } from \"@calcom/prisma\";\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\n+\n+import type { TDeleteInputSchema } from \"./delete.schema\";\n+\n+type DeleteOptions = {\n+  ctx: {\n+    user: NonNullable<TrpcSessionUser>;\n+  };\n+  input: TDeleteInputSchema;\n+};\n+\n+export const deleteHandler = async ({ ctx, input }: DeleteOptions) => {\n+  const { id } = input;\n+  const { user } = ctx;\n+\n+  const booking = await prisma.booking.findFirst({\n+    where: {\n+      id: id,\n+      OR: [\n+        {\n+          userId: user.id,\n+        },\n+        {\n+          attendees: {\n+            some: {\n+              email: user.email,\n+            },\n+          },\n+        },\n+      ],\n+    },\n+    include: {\n+      attendees: true,\n+      references: true,\n+      payment: true,\n+      workflowReminders: true,\n+    },\n+  });\n+\n+  if (!booking) {\n+    throw new Error(\"Booking not found\");\n+  }\n+\n+  if (booking.userId !== user.id) {\n+    throw new Error(\"Unauthorized: You don't have permission to delete this booking\");\n+  }",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2015680176",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19120,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/delete.handler.ts",
        "discussion_id": "2015680176",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { prisma } from \"@calcom/prisma\";\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\n+\n+import type { TDeleteInputSchema } from \"./delete.schema\";\n+\n+type DeleteOptions = {\n+  ctx: {\n+    user: NonNullable<TrpcSessionUser>;\n+  };\n+  input: TDeleteInputSchema;\n+};\n+\n+export const deleteHandler = async ({ ctx, input }: DeleteOptions) => {\n+  const { id } = input;\n+  const { user } = ctx;\n+\n+  const booking = await prisma.booking.findFirst({\n+    where: {\n+      id: id,\n+      OR: [\n+        {\n+          userId: user.id,\n+        },\n+        {\n+          attendees: {\n+            some: {\n+              email: user.email,\n+            },\n+          },\n+        },\n+      ],\n+    },\n+    include: {\n+      attendees: true,\n+      references: true,\n+      payment: true,\n+      workflowReminders: true,\n+    },\n+  });\n+\n+  if (!booking) {\n+    throw new Error(\"Booking not found\");\n+  }\n+\n+  if (booking.userId !== user.id) {\n+    throw new Error(\"Unauthorized: You don't have permission to delete this booking\");\n+  }",
        "comment_created_at": "2025-03-27T05:41:28+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "How do we handle the case where it was a team booking where `Admin or Owner` are only allowed for this operation",
        "pr_file_module": null
      },
      {
        "comment_id": "2015706301",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19120,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/delete.handler.ts",
        "discussion_id": "2015680176",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { prisma } from \"@calcom/prisma\";\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\n+\n+import type { TDeleteInputSchema } from \"./delete.schema\";\n+\n+type DeleteOptions = {\n+  ctx: {\n+    user: NonNullable<TrpcSessionUser>;\n+  };\n+  input: TDeleteInputSchema;\n+};\n+\n+export const deleteHandler = async ({ ctx, input }: DeleteOptions) => {\n+  const { id } = input;\n+  const { user } = ctx;\n+\n+  const booking = await prisma.booking.findFirst({\n+    where: {\n+      id: id,\n+      OR: [\n+        {\n+          userId: user.id,\n+        },\n+        {\n+          attendees: {\n+            some: {\n+              email: user.email,\n+            },\n+          },\n+        },\n+      ],\n+    },\n+    include: {\n+      attendees: true,\n+      references: true,\n+      payment: true,\n+      workflowReminders: true,\n+    },\n+  });\n+\n+  if (!booking) {\n+    throw new Error(\"Booking not found\");\n+  }\n+\n+  if (booking.userId !== user.id) {\n+    throw new Error(\"Unauthorized: You don't have permission to delete this booking\");\n+  }",
        "comment_created_at": "2025-03-27T05:56:40+00:00",
        "comment_author": "hp77-creator",
        "comment_body": "What are we expecting in that case? Are we expecting that others will be able to delete it? I have just added this functionality for users who created the booking, they can delete it. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2015708722",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19120,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/delete.handler.ts",
        "discussion_id": "2015680176",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { prisma } from \"@calcom/prisma\";\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\n+\n+import type { TDeleteInputSchema } from \"./delete.schema\";\n+\n+type DeleteOptions = {\n+  ctx: {\n+    user: NonNullable<TrpcSessionUser>;\n+  };\n+  input: TDeleteInputSchema;\n+};\n+\n+export const deleteHandler = async ({ ctx, input }: DeleteOptions) => {\n+  const { id } = input;\n+  const { user } = ctx;\n+\n+  const booking = await prisma.booking.findFirst({\n+    where: {\n+      id: id,\n+      OR: [\n+        {\n+          userId: user.id,\n+        },\n+        {\n+          attendees: {\n+            some: {\n+              email: user.email,\n+            },\n+          },\n+        },\n+      ],\n+    },\n+    include: {\n+      attendees: true,\n+      references: true,\n+      payment: true,\n+      workflowReminders: true,\n+    },\n+  });\n+\n+  if (!booking) {\n+    throw new Error(\"Booking not found\");\n+  }\n+\n+  if (booking.userId !== user.id) {\n+    throw new Error(\"Unauthorized: You don't have permission to delete this booking\");\n+  }",
        "comment_created_at": "2025-03-27T05:58:39+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "For team booking only `Admin or Owner` are allowed for this operation",
        "pr_file_module": null
      },
      {
        "comment_id": "2019686032",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 19120,
        "pr_file": "packages/trpc/server/routers/viewer/bookings/delete.handler.ts",
        "discussion_id": "2015680176",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { prisma } from \"@calcom/prisma\";\n+import type { TrpcSessionUser } from \"@calcom/trpc/server/trpc\";\n+\n+import type { TDeleteInputSchema } from \"./delete.schema\";\n+\n+type DeleteOptions = {\n+  ctx: {\n+    user: NonNullable<TrpcSessionUser>;\n+  };\n+  input: TDeleteInputSchema;\n+};\n+\n+export const deleteHandler = async ({ ctx, input }: DeleteOptions) => {\n+  const { id } = input;\n+  const { user } = ctx;\n+\n+  const booking = await prisma.booking.findFirst({\n+    where: {\n+      id: id,\n+      OR: [\n+        {\n+          userId: user.id,\n+        },\n+        {\n+          attendees: {\n+            some: {\n+              email: user.email,\n+            },\n+          },\n+        },\n+      ],\n+    },\n+    include: {\n+      attendees: true,\n+      references: true,\n+      payment: true,\n+      workflowReminders: true,\n+    },\n+  });\n+\n+  if (!booking) {\n+    throw new Error(\"Booking not found\");\n+  }\n+\n+  if (booking.userId !== user.id) {\n+    throw new Error(\"Unauthorized: You don't have permission to delete this booking\");\n+  }",
        "comment_created_at": "2025-03-29T03:09:16+00:00",
        "comment_author": "hp77-creator",
        "comment_body": "Ok, I will add that check",
        "pr_file_module": null
      }
    ]
  }
]