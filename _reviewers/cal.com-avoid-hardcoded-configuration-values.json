[
  {
    "discussion_id": "2275604836",
    "pr_number": 22995,
    "pr_file": "packages/features/ee/billing/api/webhook/_checkout.session.completed.ts",
    "created_at": "2025-08-14T06:25:19+00:00",
    "commented_code": "});\n   }\n }\n+\n+async function handlePhoneNumberSubscription(session: any) {\n+  const userId = session.metadata?.userId ? parseInt(session.metadata.userId, 10) : null;\n+  const teamId = session.metadata?.teamId ? parseInt(session.metadata.teamId, 10) : null;\n+  const agentId = session.metadata?.agentId || null;\n+\n+  if (!userId || !session.subscription) {\n+    console.error(\"Missing required data for phone number subscription\", {\n+      userId,\n+      hasSubscription: !!session.subscription,\n+    });\n+    throw new HttpCode(400, \"Missing required data for phone number subscription\");\n+  }\n+\n+  if (!agentId || agentId?.trim() === \"\") {\n+    console.error(\"Missing agentId for phone number subscription\", {\n+      userId,\n+      teamId,\n+    });\n+    throw new HttpCode(400, \"Missing agentId for phone number subscription\");\n+  }\n+\n+  const agent = await PrismaAgentRepository.findByIdWithUserAccess({\n+    agentId,\n+    userId,\n+    teamId: teamId ?? undefined,\n+  });\n+\n+  if (!agent) {\n+    console.error(\"Agent not found or user does not have access\", { agentId, userId });\n+    throw new HttpCode(404, \"Agent not found or user does not have access to it\");\n+  }\n+\n+  const aiService = createDefaultAIPhoneServiceProvider();\n+\n+  const retellPhoneNumber = await aiService.createPhoneNumber({ nickname: `${userId}-${Date.now()}` });\n+\n+  if (!retellPhoneNumber?.phone_number) {\n+    console.error(\"Failed to create phone number - invalid response from Retell\");\n+    throw new HttpCode(500, \"Failed to create phone number - invalid response\");\n+  }\n+\n+  const subscriptionId =\n+    typeof session.subscription === \"string\" ? session.subscription : session.subscription?.id;\n+\n+  if (!subscriptionId) {\n+    console.error(\"Invalid subscription data\", { subscription: session.subscription });\n+    throw new HttpCode(400, \"Invalid subscription data\");\n+  }\n+\n+  const newNumber = await prisma.calAiPhoneNumber.create({\n+    data: {\n+      userId,\n+      teamId,\n+      phoneNumber: retellPhoneNumber.phone_number,\n+      provider: \"retell\",",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2275604836",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22995,
        "pr_file": "packages/features/ee/billing/api/webhook/_checkout.session.completed.ts",
        "discussion_id": "2275604836",
        "commented_code": "@@ -64,4 +74,109 @@ async function saveToCreditBalance({\n     });\n   }\n }\n+\n+async function handlePhoneNumberSubscription(session: any) {\n+  const userId = session.metadata?.userId ? parseInt(session.metadata.userId, 10) : null;\n+  const teamId = session.metadata?.teamId ? parseInt(session.metadata.teamId, 10) : null;\n+  const agentId = session.metadata?.agentId || null;\n+\n+  if (!userId || !session.subscription) {\n+    console.error(\"Missing required data for phone number subscription\", {\n+      userId,\n+      hasSubscription: !!session.subscription,\n+    });\n+    throw new HttpCode(400, \"Missing required data for phone number subscription\");\n+  }\n+\n+  if (!agentId || agentId?.trim() === \"\") {\n+    console.error(\"Missing agentId for phone number subscription\", {\n+      userId,\n+      teamId,\n+    });\n+    throw new HttpCode(400, \"Missing agentId for phone number subscription\");\n+  }\n+\n+  const agent = await PrismaAgentRepository.findByIdWithUserAccess({\n+    agentId,\n+    userId,\n+    teamId: teamId ?? undefined,\n+  });\n+\n+  if (!agent) {\n+    console.error(\"Agent not found or user does not have access\", { agentId, userId });\n+    throw new HttpCode(404, \"Agent not found or user does not have access to it\");\n+  }\n+\n+  const aiService = createDefaultAIPhoneServiceProvider();\n+\n+  const retellPhoneNumber = await aiService.createPhoneNumber({ nickname: `${userId}-${Date.now()}` });\n+\n+  if (!retellPhoneNumber?.phone_number) {\n+    console.error(\"Failed to create phone number - invalid response from Retell\");\n+    throw new HttpCode(500, \"Failed to create phone number - invalid response\");\n+  }\n+\n+  const subscriptionId =\n+    typeof session.subscription === \"string\" ? session.subscription : session.subscription?.id;\n+\n+  if (!subscriptionId) {\n+    console.error(\"Invalid subscription data\", { subscription: session.subscription });\n+    throw new HttpCode(400, \"Invalid subscription data\");\n+  }\n+\n+  const newNumber = await prisma.calAiPhoneNumber.create({\n+    data: {\n+      userId,\n+      teamId,\n+      phoneNumber: retellPhoneNumber.phone_number,\n+      provider: \"retell\",",
        "comment_created_at": "2025-08-14T06:25:19+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "Provider name should be providced by the earlier _aiService.createPhoneNumber_ call. retell shouldn't be hardcoded here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2290121001",
    "pr_number": 22995,
    "pr_file": "packages/features/ee/billing/credit-service.ts",
    "created_at": "2025-08-21T07:20:11+00:00",
    "commented_code": "const billingService = new StripeBillingService();\n \n-    const teamMonthlyPrice = await billingService.getPrice(process.env.STRIPE_TEAM_MONTHLY_PRICE_ID || \"\");\n-    const pricePerSeat = teamMonthlyPrice.unit_amount ?? 0;\n-    totalMonthlyCredits = (activeMembers * pricePerSeat) / 2;\n+    const priceId = team.isOrganization\n+      ? process.env.STRIPE_ORG_MONTHLY_PRICE_ID\n+      : process.env.STRIPE_TEAM_MONTHLY_PRICE_ID;\n+\n+    if (!priceId) {\n+      log.warn(\"Monthly price ID not configured\", { teamId, isOrganization: team.isOrganization });\n+      return 0;\n+    }\n+\n+    const monthlyPrice = await billingService.getPrice(priceId || \"\");\n+    const pricePerSeat = monthlyPrice.unit_amount ?? 0;\n+\n+    // Teams get 50% of the price as credits, organizations get 20%\n+    const creditMultiplier = team.isOrganization ? 0.2 : 0.5;\n+    totalMonthlyCredits = activeMembers * pricePerSeat * creditMultiplier;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2290121001",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22995,
        "pr_file": "packages/features/ee/billing/credit-service.ts",
        "discussion_id": "2290121001",
        "commented_code": "@@ -550,9 +572,21 @@ export class CreditService {\n \n     const billingService = new StripeBillingService();\n \n-    const teamMonthlyPrice = await billingService.getPrice(process.env.STRIPE_TEAM_MONTHLY_PRICE_ID || \"\");\n-    const pricePerSeat = teamMonthlyPrice.unit_amount ?? 0;\n-    totalMonthlyCredits = (activeMembers * pricePerSeat) / 2;\n+    const priceId = team.isOrganization\n+      ? process.env.STRIPE_ORG_MONTHLY_PRICE_ID\n+      : process.env.STRIPE_TEAM_MONTHLY_PRICE_ID;\n+\n+    if (!priceId) {\n+      log.warn(\"Monthly price ID not configured\", { teamId, isOrganization: team.isOrganization });\n+      return 0;\n+    }\n+\n+    const monthlyPrice = await billingService.getPrice(priceId || \"\");\n+    const pricePerSeat = monthlyPrice.unit_amount ?? 0;\n+\n+    // Teams get 50% of the price as credits, organizations get 20%\n+    const creditMultiplier = team.isOrganization ? 0.2 : 0.5;\n+    totalMonthlyCredits = activeMembers * pricePerSeat * creditMultiplier;",
        "comment_created_at": "2025-08-21T07:20:11+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "Why is this change needed ? \r\n\r\n\r\n\r\nIs it broken on production for SMS credits as we seem to introduce ORG_MONTHLY_PRICE_ID here.\r\n\r\ncc @CarinaWolli for review\r\n\r\nAlso till now Organizations were considered as teams and this would suddenly change their credits",
        "pr_file_module": null
      },
      {
        "comment_id": "2290138644",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22995,
        "pr_file": "packages/features/ee/billing/credit-service.ts",
        "discussion_id": "2290121001",
        "commented_code": "@@ -550,9 +572,21 @@ export class CreditService {\n \n     const billingService = new StripeBillingService();\n \n-    const teamMonthlyPrice = await billingService.getPrice(process.env.STRIPE_TEAM_MONTHLY_PRICE_ID || \"\");\n-    const pricePerSeat = teamMonthlyPrice.unit_amount ?? 0;\n-    totalMonthlyCredits = (activeMembers * pricePerSeat) / 2;\n+    const priceId = team.isOrganization\n+      ? process.env.STRIPE_ORG_MONTHLY_PRICE_ID\n+      : process.env.STRIPE_TEAM_MONTHLY_PRICE_ID;\n+\n+    if (!priceId) {\n+      log.warn(\"Monthly price ID not configured\", { teamId, isOrganization: team.isOrganization });\n+      return 0;\n+    }\n+\n+    const monthlyPrice = await billingService.getPrice(priceId || \"\");\n+    const pricePerSeat = monthlyPrice.unit_amount ?? 0;\n+\n+    // Teams get 50% of the price as credits, organizations get 20%\n+    const creditMultiplier = team.isOrganization ? 0.2 : 0.5;\n+    totalMonthlyCredits = activeMembers * pricePerSeat * creditMultiplier;",
        "comment_created_at": "2025-08-21T07:27:11+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "Also these magic numbers of 0.2 and 0.5 should either be in constants or configurable via env variable if it makes sense",
        "pr_file_module": null
      },
      {
        "comment_id": "2290181077",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22995,
        "pr_file": "packages/features/ee/billing/credit-service.ts",
        "discussion_id": "2290121001",
        "commented_code": "@@ -550,9 +572,21 @@ export class CreditService {\n \n     const billingService = new StripeBillingService();\n \n-    const teamMonthlyPrice = await billingService.getPrice(process.env.STRIPE_TEAM_MONTHLY_PRICE_ID || \"\");\n-    const pricePerSeat = teamMonthlyPrice.unit_amount ?? 0;\n-    totalMonthlyCredits = (activeMembers * pricePerSeat) / 2;\n+    const priceId = team.isOrganization\n+      ? process.env.STRIPE_ORG_MONTHLY_PRICE_ID\n+      : process.env.STRIPE_TEAM_MONTHLY_PRICE_ID;\n+\n+    if (!priceId) {\n+      log.warn(\"Monthly price ID not configured\", { teamId, isOrganization: team.isOrganization });\n+      return 0;\n+    }\n+\n+    const monthlyPrice = await billingService.getPrice(priceId || \"\");\n+    const pricePerSeat = monthlyPrice.unit_amount ?? 0;\n+\n+    // Teams get 50% of the price as credits, organizations get 20%\n+    const creditMultiplier = team.isOrganization ? 0.2 : 0.5;\n+    totalMonthlyCredits = activeMembers * pricePerSeat * creditMultiplier;",
        "comment_created_at": "2025-08-21T07:45:57+00:00",
        "comment_author": "Udit-takkar",
        "comment_body": "These changes were added by Carina here https://github.com/calcom/cal.com/pull/23077/files",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2245244272",
    "pr_number": 22766,
    "pr_file": "packages/ui/components/image-uploader/imageValidation.ts",
    "created_at": "2025-07-31T12:28:12+00:00",
    "commented_code": "+import {\n+  FILE_SIGNATURES,\n+  matchesSignature,\n+  MAX_IMAGE_FILE_SIZE,\n+} from \"../../../lib/imageValidationConstants\";\n+import { showToast } from \"../toast\";\n+\n+/**\n+ * Enhanced browser-compatible image validation with magic number checking\n+ * This function performs comprehensive validation and shows toast messages directly\n+ */\n+export const validateImageFile = async (file: File, t: (key: string) => string): Promise<boolean> => {\n+  if (file.size > MAX_IMAGE_FILE_SIZE) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2245244272",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22766,
        "pr_file": "packages/ui/components/image-uploader/imageValidation.ts",
        "discussion_id": "2245244272",
        "commented_code": "@@ -0,0 +1,78 @@\n+import {\n+  FILE_SIGNATURES,\n+  matchesSignature,\n+  MAX_IMAGE_FILE_SIZE,\n+} from \"../../../lib/imageValidationConstants\";\n+import { showToast } from \"../toast\";\n+\n+/**\n+ * Enhanced browser-compatible image validation with magic number checking\n+ * This function performs comprehensive validation and shows toast messages directly\n+ */\n+export const validateImageFile = async (file: File, t: (key: string) => string): Promise<boolean> => {\n+  if (file.size > MAX_IMAGE_FILE_SIZE) {",
        "comment_created_at": "2025-07-31T12:28:12+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Better to keep it dynamic and take file size as an input in the function",
        "pr_file_module": null
      },
      {
        "comment_id": "2246976859",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22766,
        "pr_file": "packages/ui/components/image-uploader/imageValidation.ts",
        "discussion_id": "2245244272",
        "commented_code": "@@ -0,0 +1,78 @@\n+import {\n+  FILE_SIGNATURES,\n+  matchesSignature,\n+  MAX_IMAGE_FILE_SIZE,\n+} from \"../../../lib/imageValidationConstants\";\n+import { showToast } from \"../toast\";\n+\n+/**\n+ * Enhanced browser-compatible image validation with magic number checking\n+ * This function performs comprehensive validation and shows toast messages directly\n+ */\n+export const validateImageFile = async (file: File, t: (key: string) => string): Promise<boolean> => {\n+  if (file.size > MAX_IMAGE_FILE_SIZE) {",
        "comment_created_at": "2025-08-01T05:44:26+00:00",
        "comment_author": "Devanshusharma2005",
        "comment_body": "Done. ",
        "pr_file_module": null
      }
    ]
  }
]