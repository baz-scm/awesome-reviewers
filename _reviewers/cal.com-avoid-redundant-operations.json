[
  {
    "discussion_id": "2244130500",
    "pr_number": 22708,
    "pr_file": "packages/lib/server/repository/selectedCalendar.ts",
    "created_at": "2025-07-31T00:59:36+00:00",
    "commented_code": "unwatchAttempts: 0,\n     });\n   }\n+\n+  static async getNextBatchForSqlCache(limit = 100) {\n+    // Get IDs of selected calendars that already have subscriptions\n+    const existingSubscriptionIds = await prisma.calendarSubscription.findMany({\n+      select: { selectedCalendarId: true },\n+    });\n+    const excludeIds = existingSubscriptionIds.map((sub) => sub.selectedCalendarId);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2244130500",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22708,
        "pr_file": "packages/lib/server/repository/selectedCalendar.ts",
        "discussion_id": "2244130500",
        "commented_code": "@@ -435,4 +435,39 @@ export class SelectedCalendarRepository {\n       unwatchAttempts: 0,\n     });\n   }\n+\n+  static async getNextBatchForSqlCache(limit = 100) {\n+    // Get IDs of selected calendars that already have subscriptions\n+    const existingSubscriptionIds = await prisma.calendarSubscription.findMany({\n+      select: { selectedCalendarId: true },\n+    });\n+    const excludeIds = existingSubscriptionIds.map((sub) => sub.selectedCalendarId);",
        "comment_created_at": "2025-07-31T00:59:36+00:00",
        "comment_author": "zomars",
        "comment_body": "DevinAI, this is very resource wasteful. This table is projected to have thousands of records. We care for selectedCalendars where calendarSubscriptionId is null",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1744136965",
    "pr_number": 16431,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2024-09-04T17:00:54+00:00",
    "commented_code": ") {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const availableSlots = await getAvailableSlots({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1744136965",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16431,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1744136965",
        "commented_code": "@@ -475,6 +476,24 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const availableSlots = await getAvailableSlots({",
        "comment_created_at": "2024-09-04T17:00:54+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Not sure if we should be calling getAvailableSlots here. Later on ensureAvailableUsers is also called and both use getUserAvailability internally. Can you check if there is any impact on the performance?\r\n\r\nI think you should add guests to the users that we are passing to ensureAvailableUsers.\r\n\r\ncc @CarinaWolli would love you thoughts on this as I am not completely sure \ud83d\ude4f",
        "pr_file_module": null
      },
      {
        "comment_id": "1747544829",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16431,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1744136965",
        "commented_code": "@@ -475,6 +476,24 @@ async function handler(\n     ) {\n       throw new HttpError({ statusCode: 403, message: ErrorCode.CancelledBookingsCannotBeRescheduled });\n     }\n+    const availableSlots = await getAvailableSlots({",
        "comment_created_at": "2024-09-06T18:19:39+00:00",
        "comment_author": "Pavan-Chaithanya",
        "comment_body": "I moved most of the logic to the `ensureAvailableUsers` function since they are similar.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1738857950",
    "pr_number": 16428,
    "pr_file": "packages/features/bookings/Booker/utils/event.ts",
    "created_at": "2024-08-30T14:55:53+00:00",
    "commented_code": "isTeamEvent: pathname?.indexOf(\"/team/\") !== -1 || isTeam,\n     orgSlug,\n     teamMemberEmail,\n+    bookerEmail,",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1738857950",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16428,
        "pr_file": "packages/features/bookings/Booker/utils/event.ts",
        "discussion_id": "1738857950",
        "commented_code": "@@ -108,6 +110,7 @@ export const useScheduleForEvent = ({\n     isTeamEvent: pathname?.indexOf(\"/team/\") !== -1 || isTeam,\n     orgSlug,\n     teamMemberEmail,\n+    bookerEmail,",
        "comment_created_at": "2024-08-30T14:55:53+00:00",
        "comment_author": "Amit91848",
        "comment_body": "This was recently removed because it was calling getSchedules endpoint at every key stroke unnecessarily. I am not sure if you added this intentionally or was some merge issue, please remove this.\r\n\r\n\r\nhttps://github.com/user-attachments/assets/c8cd2efc-8bd5-453f-af92-550469a8c56a\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1744757460",
    "pr_number": 16428,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2024-09-05T03:37:50+00:00",
    "commented_code": "}\n   }\n \n+  const availableSlots = await getAvailableSlots({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1744757460",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16428,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "1744757460",
        "commented_code": "@@ -477,6 +478,25 @@ async function handler(\n     }\n   }\n \n+  const availableSlots = await getAvailableSlots({",
        "comment_created_at": "2024-09-05T03:37:50+00:00",
        "comment_author": "Amit91848",
        "comment_body": "getAvailableSlots and later on ensureAvailableUsers both call getUsersAvailability internally. \nCan you confirm it does not adversely affect the performance of this endpoint? \n\nYou should also compare it with doing it by adding guests to users that are passed to ensureUsersAvailabilityo",
        "pr_file_module": null
      }
    ]
  }
]