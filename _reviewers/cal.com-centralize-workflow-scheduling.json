[
  {
    "discussion_id": "2287397167",
    "pr_number": 23068,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2025-08-20T08:28:16+00:00",
    "commented_code": "isDryRun,\n     });\n \n+    const workflowsToTriggerForPaymentInitiated = workflows.filter(\n+      (workflow) => workflow.trigger === WorkflowTriggerEvents.BOOKING_PAYMENT_INITIATED\n+    );\n+\n+    if (workflowsToTriggerForPaymentInitiated.length > 0) {\n+      try {\n+        const calendarEventForWorkflow = {\n+          ...evt,\n+          rescheduleReason,\n+          metadata,\n+          eventType: {\n+            slug: eventType.slug,\n+            schedulingType: eventType.schedulingType,\n+            hosts: eventType.hosts,\n+          },\n+          bookerUrl,\n+        };\n+\n+        if (isNormalBookingOrFirstRecurringSlot) {\n+          await scheduleWorkflowReminders({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2287397167",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "2287397167",
        "commented_code": "@@ -2210,6 +2242,42 @@ async function handler(\n       isDryRun,\n     });\n \n+    const workflowsToTriggerForPaymentInitiated = workflows.filter(\n+      (workflow) => workflow.trigger === WorkflowTriggerEvents.BOOKING_PAYMENT_INITIATED\n+    );\n+\n+    if (workflowsToTriggerForPaymentInitiated.length > 0) {\n+      try {\n+        const calendarEventForWorkflow = {\n+          ...evt,\n+          rescheduleReason,\n+          metadata,\n+          eventType: {\n+            slug: eventType.slug,\n+            schedulingType: eventType.schedulingType,\n+            hosts: eventType.hosts,\n+          },\n+          bookerUrl,\n+        };\n+\n+        if (isNormalBookingOrFirstRecurringSlot) {\n+          await scheduleWorkflowReminders({",
        "comment_created_at": "2025-08-20T08:28:16+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "I think we should only have only one `scheduleWorkflowReminders` inside the handler, we are calling this now in three different places",
        "pr_file_module": null
      },
      {
        "comment_id": "2288224416",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "2287397167",
        "commented_code": "@@ -2210,6 +2242,42 @@ async function handler(\n       isDryRun,\n     });\n \n+    const workflowsToTriggerForPaymentInitiated = workflows.filter(\n+      (workflow) => workflow.trigger === WorkflowTriggerEvents.BOOKING_PAYMENT_INITIATED\n+    );\n+\n+    if (workflowsToTriggerForPaymentInitiated.length > 0) {\n+      try {\n+        const calendarEventForWorkflow = {\n+          ...evt,\n+          rescheduleReason,\n+          metadata,\n+          eventType: {\n+            slug: eventType.slug,\n+            schedulingType: eventType.schedulingType,\n+            hosts: eventType.hosts,\n+          },\n+          bookerUrl,\n+        };\n+\n+        if (isNormalBookingOrFirstRecurringSlot) {\n+          await scheduleWorkflowReminders({",
        "comment_created_at": "2025-08-20T13:44:48+00:00",
        "comment_author": "Amit91848",
        "comment_body": "We need to have at least two because payment flow branches out and we early return from there.\r\nSo one inside payment flow, one at the very last",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2287437300",
    "pr_number": 23068,
    "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
    "created_at": "2025-08-20T08:42:23+00:00",
    "commented_code": "if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2287437300",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-20T08:42:23+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "Shouldn't `getAllWorkflowsFromEventType` already be able to return only the workflows we need? I don't understand why we need all this extra logic and filtering ",
        "pr_file_module": null
      },
      {
        "comment_id": "2287911066",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-20T11:46:51+00:00",
        "comment_author": "Amit91848",
        "comment_body": "```tsx\n  const allWorkflows = await getAllWorkflowsFromEventType(eventType, booking.userId, [\n    WorkflowTriggerEvents.NEW_EVENT,\n    WorkflowTriggerEvents.BOOKING_PAID,\n    WorkflowTriggerEvents.BEFORE_EVENT,\n    WorkflowTriggerEvents.AFTER_EVENT,\n  ]);\n```\nallWorkflows will have workflows of all these triggers, but based on certain conditions, we only want certain triggers\nLike we are fetching BOOKING_PAID and NEW_EVENT, but only want to fire those in case it is firstBooking or only if event was paid.",
        "pr_file_module": null
      },
      {
        "comment_id": "2287912738",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-20T11:47:37+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Since that logic is handled later on, it's either this or having multiple calls (1 per trigger type)",
        "pr_file_module": null
      },
      {
        "comment_id": "2288351726",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-20T14:22:43+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "But what do we need `allWorkflows` for? Can't we first figure out what triggers are relevant and then we call `getAllWorkflowsFromEventType`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2288802687",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-20T17:07:53+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Main issue here is with recurring events. We are looping over all bookings and confirming them, here we only want new_event sent once (for the first booking), any subsequent booking after this only needs the before after event.\r\n\r\nWe can handle it like we do it inside handleNewBooking (fetching workflows on every booking in loop, at least for recurring)",
        "pr_file_module": null
      },
      {
        "comment_id": "2290362004",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-21T08:49:04+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "What I don't like it is that before `scheduleWorkflowReminders` was able to handle everything. Now we have added some extra logic to handleConfirmation. And same in [handleNewBooking](https://github.com/calcom/cal.com/pull/23068/files#diff-a7c21727d9a0d4d1aaff9d24fca9293bc28468861bc8022dfa03116908b6fae7R1355)\r\n\r\nWhat about expanding our `WorkflowService` by adding sepearte functions like scheduleWorkflowsOnConfirmation and we pass all params we need (isFirstBooking, Paid, ...)\r\n\r\nSame for `handleNewBooking` we call `WorkflowService.scheduleWorkflowsOnNewBooking`",
        "pr_file_module": null
      },
      {
        "comment_id": "2297427810",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/bookings/lib/handleConfirmation.ts",
        "discussion_id": "2287437300",
        "commented_code": "@@ -353,19 +370,22 @@ export async function handleConfirmation(args: {\n       if (!eventTypeMetadata?.disableStandardEmails?.all?.attendee) {\n         await scheduleMandatoryReminder({\n           evt: evtOfBooking,\n-          workflows,\n+          workflows: allWorkflows,\n           requiresConfirmation: false,\n           hideBranding: !!updatedBookings[index].eventType?.owner?.hideBranding,\n           seatReferenceUid: evt.attendeeSeatId,\n           isPlatformNoEmail: !emailsEnabled && Boolean(platformClientParams?.platformClientId),\n         });\n       }\n \n+      const workflowsToTrigger: Workflow[] = [...beforeAfterWorkflows];",
        "comment_created_at": "2025-08-25T08:14:36+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Yeah makes sense. Will change",
        "pr_file_module": null
      }
    ]
  }
]