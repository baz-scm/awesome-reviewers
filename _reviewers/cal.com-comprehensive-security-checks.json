[
  {
    "discussion_id": "2294284972",
    "pr_number": 23205,
    "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
    "created_at": "2025-08-22T17:32:53+00:00",
    "commented_code": "const userId = session?.user?.id;\n \n-  const checkIfUserIsHost = (userId?: number | null) => {\n+  const checkIfUserIsHostOrTeamAdmin = async (userId?: number | null) => {\n     if (!userId) return false;\n \n-    return (\n-      bookingInfo?.user?.id === userId ||\n-      eventType.users.some(\n-        (user) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      ) ||\n-      eventType.hosts.some(\n-        ({ user }) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      )\n-    );\n+    if (bookingInfo?.user?.id === userId) {\n+      return true;\n+    }\n+\n+    const isHost = checkIfUserIsHost(userId, bookingInfo, eventType);\n+    if (isHost) {\n+      return true;\n+    }\n+\n+    if (eventType.teamId) {\n+      const hasTeamOrOrgPermissions = await checkTeamOrOrgPermissions(\n+        userId,\n+        eventType.teamId,\n+        eventType.team?.parent?.id\n+      );\n+      if (hasTeamOrOrgPermissions) {\n+        return true;\n+      }\n+    }",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2294284972",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23205,
        "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
        "discussion_id": "2294284972",
        "commented_code": "@@ -157,26 +159,41 @@ export async function getServerSideProps(context: GetServerSidePropsContext) {\n \n   const userId = session?.user?.id;\n \n-  const checkIfUserIsHost = (userId?: number | null) => {\n+  const checkIfUserIsHostOrTeamAdmin = async (userId?: number | null) => {\n     if (!userId) return false;\n \n-    return (\n-      bookingInfo?.user?.id === userId ||\n-      eventType.users.some(\n-        (user) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      ) ||\n-      eventType.hosts.some(\n-        ({ user }) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      )\n-    );\n+    if (bookingInfo?.user?.id === userId) {\n+      return true;\n+    }\n+\n+    const isHost = checkIfUserIsHost(userId, bookingInfo, eventType);\n+    if (isHost) {\n+      return true;\n+    }\n+\n+    if (eventType.teamId) {\n+      const hasTeamOrOrgPermissions = await checkTeamOrOrgPermissions(\n+        userId,\n+        eventType.teamId,\n+        eventType.team?.parent?.id\n+      );\n+      if (hasTeamOrOrgPermissions) {\n+        return true;\n+      }\n+    }",
        "comment_created_at": "2025-08-22T17:32:53+00:00",
        "comment_author": "kart1ka",
        "comment_body": "We should check for team/org admin or owner every time, not just on team event types.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2294285995",
    "pr_number": 23205,
    "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
    "created_at": "2025-08-22T17:33:26+00:00",
    "commented_code": "const userId = session?.user?.id;\n \n-  const checkIfUserIsHost = (userId?: number | null) => {\n+  const checkIfUserIsHostOrTeamAdmin = async (userId?: number | null) => {\n     if (!userId) return false;\n \n-    return (\n-      bookingInfo?.user?.id === userId ||\n-      eventType.users.some(\n-        (user) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      ) ||\n-      eventType.hosts.some(\n-        ({ user }) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      )\n-    );\n+    if (bookingInfo?.user?.id === userId) {\n+      return true;\n+    }\n+\n+    const isHost = checkIfUserIsHost(userId, bookingInfo, eventType);\n+    if (isHost) {\n+      return true;\n+    }\n+\n+    if (eventType.teamId) {\n+      const hasTeamOrOrgPermissions = await checkTeamOrOrgPermissions(\n+        userId,\n+        eventType.teamId,\n+        eventType.team?.parent?.id\n+      );\n+      if (hasTeamOrOrgPermissions) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n   };\n \n-  const isLoggedInUserHost = checkIfUserIsHost(userId);\n+  const isLoggedInUserHostOwnerOrTeamAdmin = await checkIfUserIsHostOrTeamAdmin(userId);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2294285995",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23205,
        "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
        "discussion_id": "2294285995",
        "commented_code": "@@ -157,26 +159,41 @@ export async function getServerSideProps(context: GetServerSidePropsContext) {\n \n   const userId = session?.user?.id;\n \n-  const checkIfUserIsHost = (userId?: number | null) => {\n+  const checkIfUserIsHostOrTeamAdmin = async (userId?: number | null) => {\n     if (!userId) return false;\n \n-    return (\n-      bookingInfo?.user?.id === userId ||\n-      eventType.users.some(\n-        (user) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      ) ||\n-      eventType.hosts.some(\n-        ({ user }) =>\n-          user.id === userId && bookingInfo.attendees.some((attendee) => attendee.email === user.email)\n-      )\n-    );\n+    if (bookingInfo?.user?.id === userId) {\n+      return true;\n+    }\n+\n+    const isHost = checkIfUserIsHost(userId, bookingInfo, eventType);\n+    if (isHost) {\n+      return true;\n+    }\n+\n+    if (eventType.teamId) {\n+      const hasTeamOrOrgPermissions = await checkTeamOrOrgPermissions(\n+        userId,\n+        eventType.teamId,\n+        eventType.team?.parent?.id\n+      );\n+      if (hasTeamOrOrgPermissions) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n   };\n \n-  const isLoggedInUserHost = checkIfUserIsHost(userId);\n+  const isLoggedInUserHostOwnerOrTeamAdmin = await checkIfUserIsHostOrTeamAdmin(userId);",
        "comment_created_at": "2025-08-22T17:33:26+00:00",
        "comment_author": "kart1ka",
        "comment_body": "```suggestion\r\n  const isLoggedInUserHostTeamAdminOrOwner = await checkIfUserIsHostOrTeamAdmin(userId);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2268689576",
    "pr_number": 23009,
    "pr_file": "apps/web/lib/d/[link]/[slug]/getServerSideProps.tsx",
    "created_at": "2025-08-12T06:07:55+00:00",
    "commented_code": "return notFound;\n     }\n \n-    if (!org) {\n-      const redirect = await getTemporaryOrgRedirect({\n-        slugs: [username],\n-        redirectType: RedirectType.User,\n-        eventTypeSlug: slug,\n-        currentQuery: context.query,\n-      });\n-\n-      if (redirect) {\n-        return redirect;\n-      }\n+    // Get just the origin and searchString from the redirect to ensure that we don't redirect to a URL that exposes the real path to book the user for any other events \\\n+    // This is important for a private booking link\n+    // e.g. http://app.cal.com/d/sgdthj8mu4nsLNTYi3fW2p/demo -> should redirect to -> http://acme.cal.com/d/sgdthj8mu4nsLNTYi3fW2p/demo and not to http://acme.cal.com/john/demo(which exposes the real path to book the user for any other events)\n+    const redirectWithOriginAndSearchString = await getRedirectWithOriginAndSearchString({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2268689576",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23009,
        "pr_file": "apps/web/lib/d/[link]/[slug]/getServerSideProps.tsx",
        "discussion_id": "2268689576",
        "commented_code": "@@ -64,17 +64,26 @@ async function getUserPageProps(context: GetServerSidePropsContext) {\n       return notFound;\n     }\n \n-    if (!org) {\n-      const redirect = await getTemporaryOrgRedirect({\n-        slugs: [username],\n-        redirectType: RedirectType.User,\n-        eventTypeSlug: slug,\n-        currentQuery: context.query,\n-      });\n-\n-      if (redirect) {\n-        return redirect;\n-      }\n+    // Get just the origin and searchString from the redirect to ensure that we don't redirect to a URL that exposes the real path to book the user for any other events \\\n+    // This is important for a private booking link\n+    // e.g. http://app.cal.com/d/sgdthj8mu4nsLNTYi3fW2p/demo -> should redirect to -> http://acme.cal.com/d/sgdthj8mu4nsLNTYi3fW2p/demo and not to http://acme.cal.com/john/demo(which exposes the real path to book the user for any other events)\n+    const redirectWithOriginAndSearchString = await getRedirectWithOriginAndSearchString({",
        "comment_created_at": "2025-08-12T06:07:55+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "It fixes an existing but different bug where the redirect of private booking link was exposing the original booking page",
        "pr_file_module": null
      }
    ]
  }
]