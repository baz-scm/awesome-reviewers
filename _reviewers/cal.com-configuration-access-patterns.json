[
  {
    "discussion_id": "2235922215",
    "pr_number": 22735,
    "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
    "created_at": "2025-07-28T11:11:42+00:00",
    "commented_code": "});\n   }\n \n-  const internalNotes = await getInternalNotePresets(eventType.team?.id ?? eventType.parent?.teamId ?? null);\n+  async function getTeamCancellationSettings(teamId: number | null) {\n+    if (!teamId) return null;\n+    return await prisma.team.findUnique({\n+      where: { id: teamId },\n+      select: {\n+        mandatoryCancellationReasonForHost: true,\n+        mandatoryCancellationReasonForAttendee: true,\n+      },\n+    });\n+  }",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2235922215",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22735,
        "pr_file": "apps/web/modules/bookings/views/bookings-single-view.getServerSideProps.tsx",
        "discussion_id": "2235922215",
        "commented_code": "@@ -218,7 +218,20 @@ export async function getServerSideProps(context: GetServerSidePropsContext) {\n     });\n   }\n \n-  const internalNotes = await getInternalNotePresets(eventType.team?.id ?? eventType.parent?.teamId ?? null);\n+  async function getTeamCancellationSettings(teamId: number | null) {\n+    if (!teamId) return null;\n+    return await prisma.team.findUnique({\n+      where: { id: teamId },\n+      select: {\n+        mandatoryCancellationReasonForHost: true,\n+        mandatoryCancellationReasonForAttendee: true,\n+      },\n+    });\n+  }",
        "comment_created_at": "2025-07-28T11:11:42+00:00",
        "comment_author": "alishaz-polymath",
        "comment_body": "We should not make direct Prisma Calls/Interactions from getServerSideProps, instead we should employ a class service with dependency injection, move direct prisma call into the relevant repository. We're strictly applying this change in codebase and especially in the new PRs while migrating old code to follow this as well.\r\nRead more about this recommendation here: https://cal.com/docs/developing/open-source-contribution/contributors-guide",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2221590700",
    "pr_number": 22359,
    "pr_file": "apps/web/modules/videos/views/videos-single-view.tsx",
    "created_at": "2025-07-22T08:02:21+00:00",
    "commented_code": "rediectAttendeeToOnExit,\n   } = props;\n   const [daily, setDaily] = useState<DailyCall | null>(null);\n-\n-  useEffect(() => {\n-    let callFrame: DailyCall | undefined;\n-    try {\n-      callFrame = DailyIframe.createFrame({\n-        theme: {\n-          colors: {\n-            accent: \"#FFF\",\n-            accentText: \"#111111\",\n-            background: \"#111111\",\n-            backgroundAccent: \"#111111\",\n-            baseText: \"#FFF\",\n-            border: \"#292929\",\n-            mainAreaBg: \"#111111\",\n-            mainAreaBgAccent: \"#1A1A1A\",\n-            mainAreaText: \"#FFF\",\n-            supportiveText: \"#FFF\",\n+  const [userNameForCall, setUserNameForCall] = useState<string | undefined>(\n+    overrideName ?? loggedInUserName ?? undefined\n+  );\n+  const [isUserNameConfirmed, setIsUserNameConfirmed] = useState<boolean>(!true);\n+  const [isCallFrameReady, setIsCallFrameReady] = useState<boolean>(false);\n+\n+  const createCallFrame = useCallback(\n+    (userName?: string) => {\n+      let callFrame: DailyCall | undefined;\n+\n+      try {\n+        const shouldShowUserNameChangeUI = !true;\n+\n+        callFrame = DailyIframe.createFrame({\n+          theme: {\n+            colors: {\n+              accent: \"#FFF\",\n+              accentText: \"#111111\",\n+              background: \"#111111\",\n+              backgroundAccent: \"#111111\",\n+              baseText: \"#FFF\",\n+              border: \"#292929\",\n+              mainAreaBg: \"#111111\",\n+              mainAreaBgAccent: \"#1A1A1A\",\n+              mainAreaText: \"#FFF\",\n+              supportiveText: \"#FFF\",\n+            },\n           },\n-        },\n-        showLeaveButton: true,\n-        iframeStyle: {\n-          position: \"fixed\",\n-          width: \"100%\",\n-          height: \"100%\",\n-        },\n-        url: meetingUrl,\n-        userName: overrideName ?? loggedInUserName ?? undefined,\n-        ...(typeof meetingPassword === \"string\" && { token: meetingPassword }),\n-        ...(hasTeamPlan && {\n-          customTrayButtons: {\n-            ...(showRecordingButton\n-              ? {\n-                  recording: {\n-                    label: \"Record\",\n-                    tooltip: \"Start or stop recording\",\n-                    iconPath: RECORDING_DEFAULT_ICON,\n-                    iconPathDarkMode: RECORDING_DEFAULT_ICON,\n-                  },\n-                }\n-              : {}),\n-            ...(showTranscriptionButton\n-              ? {\n-                  transcription: {\n-                    label: \"Cal.ai\",\n-                    tooltip: \"Transcription powered by AI\",\n-                    iconPath: TRANSCRIPTION_STOPPED_ICON,\n-                    iconPathDarkMode: TRANSCRIPTION_STOPPED_ICON,\n-                  },\n-                }\n-              : {}),\n+          showLeaveButton: true,\n+          showUserNameChangeUI: shouldShowUserNameChangeUI,\n+          iframeStyle: {\n+            position: \"fixed\",\n+            width: \"100%\",\n+            height: \"100%\",\n           },\n-        }),\n-      });\n+          url: meetingUrl,\n+          userName: userName,\n+          ...(typeof meetingPassword === \"string\" && { token: meetingPassword }),\n+          ...(hasTeamPlan && {\n+            customTrayButtons: {\n+              ...(showRecordingButton\n+                ? {\n+                    recording: {\n+                      label: \"Record\",\n+                      tooltip: \"Start or stop recording\",\n+                      iconPath: RECORDING_DEFAULT_ICON,\n+                      iconPathDarkMode: RECORDING_DEFAULT_ICON,\n+                    },\n+                  }\n+                : {}),\n+              ...(showTranscriptionButton\n+                ? {\n+                    transcription: {\n+                      label: \"Cal.ai\",\n+                      tooltip: \"Transcription powered by AI\",\n+                      iconPath: TRANSCRIPTION_STOPPED_ICON,\n+                      iconPathDarkMode: TRANSCRIPTION_STOPPED_ICON,\n+                    },\n+                  }\n+                : {}),\n+            },\n+          }),\n+        });\n+\n+        if (userName) {\n+          callFrame.setUserName(userName);\n+        }\n \n-      if (overrideName) {\n-        callFrame.setUserName(overrideName);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2221590700",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22359,
        "pr_file": "apps/web/modules/videos/views/videos-single-view.tsx",
        "discussion_id": "2221590700",
        "commented_code": "@@ -42,88 +43,149 @@ export default function JoinCall(props: PageProps) {\n     rediectAttendeeToOnExit,\n   } = props;\n   const [daily, setDaily] = useState<DailyCall | null>(null);\n-\n-  useEffect(() => {\n-    let callFrame: DailyCall | undefined;\n-    try {\n-      callFrame = DailyIframe.createFrame({\n-        theme: {\n-          colors: {\n-            accent: \"#FFF\",\n-            accentText: \"#111111\",\n-            background: \"#111111\",\n-            backgroundAccent: \"#111111\",\n-            baseText: \"#FFF\",\n-            border: \"#292929\",\n-            mainAreaBg: \"#111111\",\n-            mainAreaBgAccent: \"#1A1A1A\",\n-            mainAreaText: \"#FFF\",\n-            supportiveText: \"#FFF\",\n+  const [userNameForCall, setUserNameForCall] = useState<string | undefined>(\n+    overrideName ?? loggedInUserName ?? undefined\n+  );\n+  const [isUserNameConfirmed, setIsUserNameConfirmed] = useState<boolean>(!true);\n+  const [isCallFrameReady, setIsCallFrameReady] = useState<boolean>(false);\n+\n+  const createCallFrame = useCallback(\n+    (userName?: string) => {\n+      let callFrame: DailyCall | undefined;\n+\n+      try {\n+        const shouldShowUserNameChangeUI = !true;\n+\n+        callFrame = DailyIframe.createFrame({\n+          theme: {\n+            colors: {\n+              accent: \"#FFF\",\n+              accentText: \"#111111\",\n+              background: \"#111111\",\n+              backgroundAccent: \"#111111\",\n+              baseText: \"#FFF\",\n+              border: \"#292929\",\n+              mainAreaBg: \"#111111\",\n+              mainAreaBgAccent: \"#1A1A1A\",\n+              mainAreaText: \"#FFF\",\n+              supportiveText: \"#FFF\",\n+            },\n           },\n-        },\n-        showLeaveButton: true,\n-        iframeStyle: {\n-          position: \"fixed\",\n-          width: \"100%\",\n-          height: \"100%\",\n-        },\n-        url: meetingUrl,\n-        userName: overrideName ?? loggedInUserName ?? undefined,\n-        ...(typeof meetingPassword === \"string\" && { token: meetingPassword }),\n-        ...(hasTeamPlan && {\n-          customTrayButtons: {\n-            ...(showRecordingButton\n-              ? {\n-                  recording: {\n-                    label: \"Record\",\n-                    tooltip: \"Start or stop recording\",\n-                    iconPath: RECORDING_DEFAULT_ICON,\n-                    iconPathDarkMode: RECORDING_DEFAULT_ICON,\n-                  },\n-                }\n-              : {}),\n-            ...(showTranscriptionButton\n-              ? {\n-                  transcription: {\n-                    label: \"Cal.ai\",\n-                    tooltip: \"Transcription powered by AI\",\n-                    iconPath: TRANSCRIPTION_STOPPED_ICON,\n-                    iconPathDarkMode: TRANSCRIPTION_STOPPED_ICON,\n-                  },\n-                }\n-              : {}),\n+          showLeaveButton: true,\n+          showUserNameChangeUI: shouldShowUserNameChangeUI,\n+          iframeStyle: {\n+            position: \"fixed\",\n+            width: \"100%\",\n+            height: \"100%\",\n           },\n-        }),\n-      });\n+          url: meetingUrl,\n+          userName: userName,\n+          ...(typeof meetingPassword === \"string\" && { token: meetingPassword }),\n+          ...(hasTeamPlan && {\n+            customTrayButtons: {\n+              ...(showRecordingButton\n+                ? {\n+                    recording: {\n+                      label: \"Record\",\n+                      tooltip: \"Start or stop recording\",\n+                      iconPath: RECORDING_DEFAULT_ICON,\n+                      iconPathDarkMode: RECORDING_DEFAULT_ICON,\n+                    },\n+                  }\n+                : {}),\n+              ...(showTranscriptionButton\n+                ? {\n+                    transcription: {\n+                      label: \"Cal.ai\",\n+                      tooltip: \"Transcription powered by AI\",\n+                      iconPath: TRANSCRIPTION_STOPPED_ICON,\n+                      iconPathDarkMode: TRANSCRIPTION_STOPPED_ICON,\n+                    },\n+                  }\n+                : {}),\n+            },\n+          }),\n+        });\n+\n+        if (userName) {\n+          callFrame.setUserName(userName);\n+        }\n \n-      if (overrideName) {\n-        callFrame.setUserName(overrideName);",
        "comment_created_at": "2025-07-22T08:02:21+00:00",
        "comment_author": "Udit-takkar",
        "comment_body": "Another thing is if overrideName name is passed we don't want to display the login modal and ask for name anywhere",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864376005",
    "pr_number": 17924,
    "pr_file": "packages/features/timezone-buddy/components/AvailabilityEditSheet.tsx",
    "created_at": "2024-11-30T17:46:53+00:00",
    "commented_code": ")}\n \n           <SheetBody className=\"mt-4 flex flex-col space-y-4\">\n+            <div>\n+              <Label className=\"text-emphasis\">\n+                <>{t(\"select_availability_to_edit\")}</>\n+              </Label>\n+              <Select\n+                value={userAvailabilityOptions.find((option) => option.value === selectedSchedule)}\n+                options={userAvailabilityOptions}\n+                isDisabled={!userHasDefaultSchedule}\n+                onChange={(selected) => {\n+                  if (selected) {\n+                    const changedSchedule = data.find((schedule) => schedule.id === selected.value);\n+                    // should always be present, but added if just for type errors\n+                    if (changedSchedule) {\n+                      setSelectedSchedule(changedSchedule.id);\n+                      form.reset({\n+                        ...changedSchedule,\n+                        timeZone:\n+                          changedSchedule.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n+                        schedule: changedSchedule.availability || [],\n+                      });\n+                      setWorkingHours(changedSchedule.workingHours);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1864376005",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 17924,
        "pr_file": "packages/features/timezone-buddy/components/AvailabilityEditSheet.tsx",
        "discussion_id": "1864376005",
        "commented_code": "@@ -174,13 +183,39 @@ export function AvailabilityEditSheetForm(props: Props & { data: Data; isPending\n           )}\n \n           <SheetBody className=\"mt-4 flex flex-col space-y-4\">\n+            <div>\n+              <Label className=\"text-emphasis\">\n+                <>{t(\"select_availability_to_edit\")}</>\n+              </Label>\n+              <Select\n+                value={userAvailabilityOptions.find((option) => option.value === selectedSchedule)}\n+                options={userAvailabilityOptions}\n+                isDisabled={!userHasDefaultSchedule}\n+                onChange={(selected) => {\n+                  if (selected) {\n+                    const changedSchedule = data.find((schedule) => schedule.id === selected.value);\n+                    // should always be present, but added if just for type errors\n+                    if (changedSchedule) {\n+                      setSelectedSchedule(changedSchedule.id);\n+                      form.reset({\n+                        ...changedSchedule,\n+                        timeZone:\n+                          changedSchedule.timeZone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n+                        schedule: changedSchedule.availability || [],\n+                      });\n+                      setWorkingHours(changedSchedule.workingHours);",
        "comment_created_at": "2024-11-30T17:46:53+00:00",
        "comment_author": "Amit91848",
        "comment_body": "For simplicity sake, you can only update on schedule at a time, on changing schedules, any changes made are lost and replaced by the schedule of the newly selected option.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2235839438",
    "pr_number": 22735,
    "pr_file": "apps/web/components/booking/CancelBooking.tsx",
    "created_at": "2025-07-28T10:48:53+00:00",
    "commented_code": "const [error, setError] = useState<string | null>(booking ? null : t(\"booking_already_cancelled\"));\n   const [internalNote, setInternalNote] = useState<{ id: number; name: string } | null>(null);\n \n+  // Determine if cancellation reason is required based on team settings\n+  const isCancellationReasonRequired = () => {\n+    console.log(\"props.teamCancellationSettings\", props.teamCancellationSettings);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2235839438",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22735,
        "pr_file": "apps/web/components/booking/CancelBooking.tsx",
        "discussion_id": "2235839438",
        "commented_code": "@@ -119,6 +123,23 @@ export default function CancelBooking(props: Props) {\n   const [error, setError] = useState<string | null>(booking ? null : t(\"booking_already_cancelled\"));\n   const [internalNote, setInternalNote] = useState<{ id: number; name: string } | null>(null);\n \n+  // Determine if cancellation reason is required based on team settings\n+  const isCancellationReasonRequired = () => {\n+    console.log(\"props.teamCancellationSettings\", props.teamCancellationSettings);",
        "comment_created_at": "2025-07-28T10:48:53+00:00",
        "comment_author": "alishaz-polymath",
        "comment_body": "```suggestion\r\n```",
        "pr_file_module": null
      }
    ]
  }
]