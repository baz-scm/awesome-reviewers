[
  {
    "discussion_id": "2216437141",
    "pr_number": 21072,
    "pr_file": "packages/app-store/office365calendar/api/webhook.ts",
    "created_at": "2025-07-18T17:53:37+00:00",
    "commented_code": "+import type { NextApiRequest, NextApiResponse } from \"next\";\n+import type { z } from \"zod\";\n+\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import { HttpError } from \"@calcom/lib/http-error\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { defaultHandler } from \"@calcom/lib/server/defaultHandler\";\n+import { defaultResponder } from \"@calcom/lib/server/defaultResponder\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+\n+import { getCalendar } from \"../../_utils/getCalendar\";\n+import { webhookPayloadSchema } from \"../zod\";\n+\n+const log = logger.getSubLogger({ prefix: [\"Office365CalendarWebhook\"] });\n+\n+async function postHandler(req: NextApiRequest, res: NextApiResponse) {\n+  // Handle Microsoft Graph validation request\n+  const validationToken = req.query.validationToken;\n+  if (validationToken) {\n+    res.setHeader(\"Content-Type\", \"text/plain\");\n+    res.send(validationToken);\n+    return;\n+  }\n+\n+  // Parse and validate the webhook payload\n+  let payload: z.infer<typeof webhookPayloadSchema>;\n+  try {\n+    payload = webhookPayloadSchema.parse(req.body);\n+  } catch (error) {\n+    log.error(\"Failed to parse webhook payload\", { error: safeStringify(error) });\n+    throw new HttpError({ statusCode: 400, message: \"Invalid webhook payload\" });\n+  }\n+\n+  if (payload.value.length === 0) {\n+    log.debug(\"Received empty notification payload\");\n+    return { message: \"ok\", processed: 0, failed: 0, skipped: 0, errors: [] };\n+  }\n+\n+  log.debug(\"Processing notifications\", { count: payload.value.length });\n+\n+  // Track processing results\n+  const results = {\n+    processed: 0,\n+    failed: 0,\n+    skipped: 0,\n+    errors: [] as string[],\n+  };\n+\n+  const webhookToken = process.env.MICROSOFT_WEBHOOK_TOKEN;\n+  if (!webhookToken) {\n+    log.error(\"MICROSOFT_WEBHOOK_TOKEN is not defined\");\n+    return {\n+      message: \"ok\",\n+      processed: 0,\n+      failed: 0,\n+      skipped: payload.value.length,\n+      errors: [\"MICROSOFT_WEBHOOK_TOKEN is not defined\"],\n+    };\n+  }",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2216604182",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21072,
        "pr_file": "packages/app-store/office365calendar/api/webhook.ts",
        "discussion_id": "2216437141",
        "commented_code": "@@ -0,0 +1,148 @@\n+import type { NextApiRequest, NextApiResponse } from \"next\";\n+import type { z } from \"zod\";\n+\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import { HttpError } from \"@calcom/lib/http-error\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { defaultHandler } from \"@calcom/lib/server/defaultHandler\";\n+import { defaultResponder } from \"@calcom/lib/server/defaultResponder\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+\n+import { getCalendar } from \"../../_utils/getCalendar\";\n+import { webhookPayloadSchema } from \"../zod\";\n+\n+const log = logger.getSubLogger({ prefix: [\"Office365CalendarWebhook\"] });\n+\n+async function postHandler(req: NextApiRequest, res: NextApiResponse) {\n+  // Handle Microsoft Graph validation request\n+  const validationToken = req.query.validationToken;\n+  if (validationToken) {\n+    res.setHeader(\"Content-Type\", \"text/plain\");\n+    res.send(validationToken);\n+    return;\n+  }\n+\n+  // Parse and validate the webhook payload\n+  let payload: z.infer<typeof webhookPayloadSchema>;\n+  try {\n+    payload = webhookPayloadSchema.parse(req.body);\n+  } catch (error) {\n+    log.error(\"Failed to parse webhook payload\", { error: safeStringify(error) });\n+    throw new HttpError({ statusCode: 400, message: \"Invalid webhook payload\" });\n+  }\n+\n+  if (payload.value.length === 0) {\n+    log.debug(\"Received empty notification payload\");\n+    return { message: \"ok\", processed: 0, failed: 0, skipped: 0, errors: [] };\n+  }\n+\n+  log.debug(\"Processing notifications\", { count: payload.value.length });\n+\n+  // Track processing results\n+  const results = {\n+    processed: 0,\n+    failed: 0,\n+    skipped: 0,\n+    errors: [] as string[],\n+  };\n+\n+  const webhookToken = process.env.MICROSOFT_WEBHOOK_TOKEN;\n+  if (!webhookToken) {\n+    log.error(\"MICROSOFT_WEBHOOK_TOKEN is not defined\");\n+    return {\n+      message: \"ok\",\n+      processed: 0,\n+      failed: 0,\n+      skipped: payload.value.length,\n+      errors: [\"MICROSOFT_WEBHOOK_TOKEN is not defined\"],\n+    };\n+  }",
        "comment_created_at": "2025-07-18T17:53:37+00:00",
        "comment_author": "vijayraghav-io",
        "comment_body": "Throwing a 500 error increases visibility but could cause retries or subscription issues with Microsoft Graph.\r\nThe multiple retries can overwhelm the server until configuration is fixed.\r\n\r\nSince this misconfiguration is internal to our system, Returning a 200 OK response with an error in the results.errors array is reasonable, as it avoids retries and aligns with expected 2xx responses. \r\nThe error logs should help the monitoring systems to alert the misconfiguration.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2281113966",
    "pr_number": 23093,
    "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
    "created_at": "2025-08-18T01:17:44+00:00",
    "commented_code": "const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2281113966",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T01:17:44+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "If Twilio gives us a 500, how does that impact our downstream code from here? Ideally we don't throw a 500 as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "2281127213",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T01:38:41+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "500 will get logged to all of Vercel, Axiom and Sentry. \r\n\r\n> Ideally we don't throw a 500 as well.\r\n\r\nOh, why is that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2281130359",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T01:42:54+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "Ok, I think we should change the code to still return 200s from our POV but log the twilio errors. It's not totally correct that our server had an issue so 500 is misleading",
        "pr_file_module": null
      },
      {
        "comment_id": "2281131908",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T01:44:35+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "But then return a partial success message back to the client",
        "pr_file_module": null
      },
      {
        "comment_id": "2281132494",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T01:45:20+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "Once this processing happens in the background, we might even want to switch to a 202, which means Accepted, saying we Accepted the request. Then, if the SMS message fails in the background, we don't deal with HTTP status codes at all since it's outside of an HTTP request",
        "pr_file_module": null
      },
      {
        "comment_id": "2281153226",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T02:11:48+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "Ahh gottcha",
        "pr_file_module": null
      },
      {
        "comment_id": "2281740902",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-18T08:55:37+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "@keithwillcode I addressed your feedback. Is it an accepted practice to throw a HTTP error with 202? I see a few instances where we do this in our codebase, but just wanted to confirm.",
        "pr_file_module": null
      },
      {
        "comment_id": "2288448983",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.ts",
        "discussion_id": "2281113966",
        "commented_code": "@@ -41,6 +42,13 @@ export function getServerErrorFromUnknown(cause: unknown): HttpError {\n     const statusCode = getHTTPStatusCodeFromError(cause);\n     return new HttpError({ statusCode, message: cause.message });\n   }\n+  if (isTwilioError(cause)) {\n+    return new HttpError({",
        "comment_created_at": "2025-08-20T14:54:15+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "no. That's not expected. Ideally we return an object with a status code instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2282221140",
    "pr_number": 23093,
    "pr_file": "packages/lib/server/getServerErrorFromUnknown.test.ts",
    "created_at": "2025-08-18T12:12:07+00:00",
    "commented_code": "expect(result.name).toBe(\"HttpError\");\n   });\n \n+  test(\"should handle a Twilio error with 400 status\", () => {\n+    const message = \"The 'To' number +77123456789 is not a valid phone number.\";",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2282221140",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.test.ts",
        "discussion_id": "2282221140",
        "commented_code": "@@ -65,6 +65,44 @@ describe(\"getServerErrorFromUnknown\", () => {\n     expect(result.name).toBe(\"HttpError\");\n   });\n \n+  test(\"should handle a Twilio error with 400 status\", () => {\n+    const message = \"The 'To' number +77123456789 is not a valid phone number.\";",
        "comment_created_at": "2025-08-18T12:12:07+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "Are these errors happening because people are entering bad phone numbers on the front-end? If so, this should actually be a 400 and not 202. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2283878628",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.test.ts",
        "discussion_id": "2282221140",
        "commented_code": "@@ -65,6 +65,44 @@ describe(\"getServerErrorFromUnknown\", () => {\n     expect(result.name).toBe(\"HttpError\");\n   });\n \n+  test(\"should handle a Twilio error with 400 status\", () => {\n+    const message = \"The 'To' number +77123456789 is not a valid phone number.\";",
        "comment_created_at": "2025-08-19T02:03:27+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "I will confirm with @CarinaWolli and get back to it",
        "pr_file_module": null
      },
      {
        "comment_id": "2283885497",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23093,
        "pr_file": "packages/lib/server/getServerErrorFromUnknown.test.ts",
        "discussion_id": "2282221140",
        "commented_code": "@@ -65,6 +65,44 @@ describe(\"getServerErrorFromUnknown\", () => {\n     expect(result.name).toBe(\"HttpError\");\n   });\n \n+  test(\"should handle a Twilio error with 400 status\", () => {\n+    const message = \"The 'To' number +77123456789 is not a valid phone number.\";",
        "comment_created_at": "2025-08-19T02:11:13+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "yes I confirmed that it's that users manually remove the country code in our frontend. So it would be a 400. I will change the error code back to 400. \r\n\r\nBTW Can you check this question of mine? https://github.com/calcom/cal.com/pull/23093#discussion_r2281740902 curious",
        "pr_file_module": null
      }
    ]
  }
]