[
  {
    "discussion_id": "2244589367",
    "pr_number": 22806,
    "pr_file": "apps/api/v2/src/modules/organizations/memberships/organizations-membership.controller.e2e-spec.ts",
    "created_at": "2025-07-31T07:32:47+00:00",
    "commented_code": "});\n \n     it(\"should create the membership of the org\", async () => {\n+      // Create test user for this specific test\n+      const testUserForCreate = await userRepositoryFixture.create({\n+        email: `test-create-${randomString()}@api.com`,\n+        username: `test-create-${randomString()}`,\n+        bio,\n+        metadata,\n+      });\n+\n       return request(app.getHttpServer())\n         .post(`/v2/organizations/${org.id}/memberships`)\n         .send({\n-          userId: userToInviteViaApi.id,\n+          userId: testUserForCreate.id,\n           accepted: true,\n           role: \"MEMBER\",\n         } satisfies CreateOrgMembershipDto)\n         .expect(201)\n-        .then((response) => {\n+        .then(async (response) => {\n           const responseBody: CreateOrgMembershipOutput = response.body;\n           expect(responseBody.status).toEqual(SUCCESS_STATUS);\n-          membershipCreatedViaApi = responseBody.data;\n-          expect(membershipCreatedViaApi.teamId).toEqual(org.id);\n-          expect(membershipCreatedViaApi.role).toEqual(\"MEMBER\");\n-          expect(membershipCreatedViaApi.userId).toEqual(userToInviteViaApi.id);\n-          expect(membershipCreatedViaApi.user.bio).toEqual(bio);\n-          expect(membershipCreatedViaApi.user.metadata).toEqual(metadata);\n-          expect(membershipCreatedViaApi.user.email).toEqual(userToInviteViaApi.email);\n-          expect(membershipCreatedViaApi.user.username).toEqual(userToInviteViaApi.username);\n+          const createdMembership = responseBody.data;\n+          expect(createdMembership.teamId).toEqual(org.id);\n+          expect(createdMembership.role).toEqual(\"MEMBER\");\n+          expect(createdMembership.userId).toEqual(testUserForCreate.id);\n+          expect(createdMembership.user.bio).toEqual(bio);\n+          expect(createdMembership.user.metadata).toEqual(metadata);\n+          expect(createdMembership.user.email).toEqual(testUserForCreate.email);\n+          expect(createdMembership.user.username).toEqual(testUserForCreate.username);\n+\n+          // Clean up\n+          await membershipRepositoryFixture.delete(createdMembership.id);\n+          await userRepositoryFixture.deleteByEmail(testUserForCreate.email);\n         });\n     });\n \n     it(\"should update the membership of the org\", async () => {\n+      // Create test user and membership for this specific test\n+      const testUserForUpdate = await userRepositoryFixture.create({\n+        email: `test-update-${randomString()}@api.com`,\n+        username: `test-update-${randomString()}`,\n+      });\n+\n+      const membershipToUpdate = await membershipRepositoryFixture.create({\n+        role: \"MEMBER\",\n+        user: { connect: { id: testUserForUpdate.id } },\n+        team: { connect: { id: org.id } },\n+        accepted: true,\n+      });\n+\n       return request(app.getHttpServer())\n-        .patch(`/v2/organizations/${org.id}/memberships/${membershipCreatedViaApi.id}`)",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2244589367",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22806,
        "pr_file": "apps/api/v2/src/modules/organizations/memberships/organizations-membership.controller.e2e-spec.ts",
        "discussion_id": "2244589367",
        "commented_code": "@@ -367,58 +366,97 @@ describe(\"Organizations Memberships Endpoints\", () => {\n     });\n \n     it(\"should create the membership of the org\", async () => {\n+      // Create test user for this specific test\n+      const testUserForCreate = await userRepositoryFixture.create({\n+        email: `test-create-${randomString()}@api.com`,\n+        username: `test-create-${randomString()}`,\n+        bio,\n+        metadata,\n+      });\n+\n       return request(app.getHttpServer())\n         .post(`/v2/organizations/${org.id}/memberships`)\n         .send({\n-          userId: userToInviteViaApi.id,\n+          userId: testUserForCreate.id,\n           accepted: true,\n           role: \"MEMBER\",\n         } satisfies CreateOrgMembershipDto)\n         .expect(201)\n-        .then((response) => {\n+        .then(async (response) => {\n           const responseBody: CreateOrgMembershipOutput = response.body;\n           expect(responseBody.status).toEqual(SUCCESS_STATUS);\n-          membershipCreatedViaApi = responseBody.data;\n-          expect(membershipCreatedViaApi.teamId).toEqual(org.id);\n-          expect(membershipCreatedViaApi.role).toEqual(\"MEMBER\");\n-          expect(membershipCreatedViaApi.userId).toEqual(userToInviteViaApi.id);\n-          expect(membershipCreatedViaApi.user.bio).toEqual(bio);\n-          expect(membershipCreatedViaApi.user.metadata).toEqual(metadata);\n-          expect(membershipCreatedViaApi.user.email).toEqual(userToInviteViaApi.email);\n-          expect(membershipCreatedViaApi.user.username).toEqual(userToInviteViaApi.username);\n+          const createdMembership = responseBody.data;\n+          expect(createdMembership.teamId).toEqual(org.id);\n+          expect(createdMembership.role).toEqual(\"MEMBER\");\n+          expect(createdMembership.userId).toEqual(testUserForCreate.id);\n+          expect(createdMembership.user.bio).toEqual(bio);\n+          expect(createdMembership.user.metadata).toEqual(metadata);\n+          expect(createdMembership.user.email).toEqual(testUserForCreate.email);\n+          expect(createdMembership.user.username).toEqual(testUserForCreate.username);\n+\n+          // Clean up\n+          await membershipRepositoryFixture.delete(createdMembership.id);\n+          await userRepositoryFixture.deleteByEmail(testUserForCreate.email);\n         });\n     });\n \n     it(\"should update the membership of the org\", async () => {\n+      // Create test user and membership for this specific test\n+      const testUserForUpdate = await userRepositoryFixture.create({\n+        email: `test-update-${randomString()}@api.com`,\n+        username: `test-update-${randomString()}`,\n+      });\n+\n+      const membershipToUpdate = await membershipRepositoryFixture.create({\n+        role: \"MEMBER\",\n+        user: { connect: { id: testUserForUpdate.id } },\n+        team: { connect: { id: org.id } },\n+        accepted: true,\n+      });\n+\n       return request(app.getHttpServer())\n-        .patch(`/v2/organizations/${org.id}/memberships/${membershipCreatedViaApi.id}`)",
        "comment_created_at": "2025-07-31T07:32:47+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "Using membershipCreatedViaApi was making tests dependent on each other causing weird dependencies issue",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740433827",
    "pr_number": 16428,
    "pr_file": "apps/web/playwright/reschedule.e2e.ts",
    "created_at": "2024-09-02T07:16:33+00:00",
    "commented_code": "}\n     });\n   });\n+\n+  test.describe(\"Guest availability-awareness reschedule by host\", () => {\n+    test(\"host reschedule with full non-cal.com user guests shouldn't trigger guests availability awareness\", async ({\n+      page,\n+      users,\n+      bookings,\n+    }) => {\n+      const host = await users.create();\n+      const eventType = host.eventTypes[0];\n+      const nonCalUserAttendees = Array.from({ length: 10 }, (_, i) => ({\n+        email: `attendee-${i}@example.com`,\n+        name: `Attendee Example ${i}`,\n+        timeZone: \"Europe/London\",\n+      }));\n+      const booking = await bookings.create(host.id, host.username, eventType.id, {\n+        attendees: {\n+          createMany: {\n+            data: nonCalUserAttendees,\n+          },\n+        },\n+      });\n+\n+      await page.goto(`/reschedule/${booking.uid}`);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1740433827",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16428,
        "pr_file": "apps/web/playwright/reschedule.e2e.ts",
        "discussion_id": "1740433827",
        "commented_code": "@@ -416,6 +418,112 @@ test.describe(\"Reschedule Tests\", async () => {\n       }\n     });\n   });\n+\n+  test.describe(\"Guest availability-awareness reschedule by host\", () => {\n+    test(\"host reschedule with full non-cal.com user guests shouldn't trigger guests availability awareness\", async ({\n+      page,\n+      users,\n+      bookings,\n+    }) => {\n+      const host = await users.create();\n+      const eventType = host.eventTypes[0];\n+      const nonCalUserAttendees = Array.from({ length: 10 }, (_, i) => ({\n+        email: `attendee-${i}@example.com`,\n+        name: `Attendee Example ${i}`,\n+        timeZone: \"Europe/London\",\n+      }));\n+      const booking = await bookings.create(host.id, host.username, eventType.id, {\n+        attendees: {\n+          createMany: {\n+            data: nonCalUserAttendees,\n+          },\n+        },\n+      });\n+\n+      await page.goto(`/reschedule/${booking.uid}`);",
        "comment_created_at": "2024-09-02T07:16:33+00:00",
        "comment_author": "Amit91848",
        "comment_body": "```suggestion\r\n      await page.goto(`/reschedule/${booking.uid}`);\r\n      await page.waitForLoadState(\"networkidle\");\r\n```\r\n\r\nPlease wait for page loads to complete wherever necessary, or else it causes pages to be flaky. Might work locally but when run on ci, it tends to fail sometimes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205423540",
    "pr_number": 17576,
    "pr_file": "apps/web/playwright/organization/organization-team-page.e2e.ts",
    "created_at": "2025-07-14T17:15:20+00:00",
    "commented_code": "+import { expect } from \"@playwright/test\";\n+import { bookEventOnThisPage, doOnOrgDomain } from \"playwright/lib/testUtils\";\n+\n+import { SchedulingType } from \"@calcom/prisma/enums\";\n+\n+import { test } from \"../lib/fixtures\";\n+\n+test.afterEach(({ users }) => {\n+  users.deleteAll();\n+});\n+\n+test.describe(\"Organization Team page\", () => {\n+  test(\"Team page with org domain url\", async ({ page, users }) => {\n+    const orgMember = await users.create(undefined, {\n+      hasTeam: true,\n+      isOrg: true,\n+      hasSubteam: true,\n+      isOrgVerified: true,\n+      isDnsSetup: true,\n+      orgRequestedSlug: \"example\",\n+      schedulingType: SchedulingType.ROUND_ROBIN,\n+    });\n+    const { team: org } = await orgMember.getOrgMembership();\n+    const { team } = await orgMember.getFirstTeamMembership();\n+    const teamEvent = await orgMember.getFirstTeamEvent(team.id);\n+    await orgMember.apiLogin();\n+\n+    await test.step(\"Team page is loaded with profile and can select eventtype\", async () => {\n+      await doOnOrgDomain(\n+        {\n+          orgSlug: org.slug,\n+          page,\n+        },\n+        async ({ page, goToUrlWithErrorHandling }) => {\n+          await goToUrlWithErrorHandling(`/team/${team.slug}`);\n+          await expect(page.getByTestId(\"team-name\")).toBeVisible();\n+          await expect(page.getByTestId(\"event-type-link\")).toBeVisible();\n+          await goToUrlWithErrorHandling(`/team/${team.slug}/${teamEvent.slug}`);\n+          await expect(page.getByTestId(\"event-title\")).toBeVisible();\n+          await bookEventOnThisPage(page);\n+        }\n+      );\n+    });\n+  });\n+});",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2205423540",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 17576,
        "pr_file": "apps/web/playwright/organization/organization-team-page.e2e.ts",
        "discussion_id": "2205423540",
        "commented_code": "@@ -0,0 +1,45 @@\n+import { expect } from \"@playwright/test\";\n+import { bookEventOnThisPage, doOnOrgDomain } from \"playwright/lib/testUtils\";\n+\n+import { SchedulingType } from \"@calcom/prisma/enums\";\n+\n+import { test } from \"../lib/fixtures\";\n+\n+test.afterEach(({ users }) => {\n+  users.deleteAll();\n+});\n+\n+test.describe(\"Organization Team page\", () => {\n+  test(\"Team page with org domain url\", async ({ page, users }) => {\n+    const orgMember = await users.create(undefined, {\n+      hasTeam: true,\n+      isOrg: true,\n+      hasSubteam: true,\n+      isOrgVerified: true,\n+      isDnsSetup: true,\n+      orgRequestedSlug: \"example\",\n+      schedulingType: SchedulingType.ROUND_ROBIN,\n+    });\n+    const { team: org } = await orgMember.getOrgMembership();\n+    const { team } = await orgMember.getFirstTeamMembership();\n+    const teamEvent = await orgMember.getFirstTeamEvent(team.id);\n+    await orgMember.apiLogin();\n+\n+    await test.step(\"Team page is loaded with profile and can select eventtype\", async () => {\n+      await doOnOrgDomain(\n+        {\n+          orgSlug: org.slug,\n+          page,\n+        },\n+        async ({ page, goToUrlWithErrorHandling }) => {\n+          await goToUrlWithErrorHandling(`/team/${team.slug}`);\n+          await expect(page.getByTestId(\"team-name\")).toBeVisible();\n+          await expect(page.getByTestId(\"event-type-link\")).toBeVisible();\n+          await goToUrlWithErrorHandling(`/team/${team.slug}/${teamEvent.slug}`);\n+          await expect(page.getByTestId(\"event-title\")).toBeVisible();\n+          await bookEventOnThisPage(page);\n+        }\n+      );\n+    });\n+  });\n+});",
        "comment_created_at": "2025-07-14T17:15:20+00:00",
        "comment_author": "kart1ka",
        "comment_body": "This test seems to be flaky. Can you check?",
        "pr_file_module": null
      },
      {
        "comment_id": "2237342703",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 17576,
        "pr_file": "apps/web/playwright/organization/organization-team-page.e2e.ts",
        "discussion_id": "2205423540",
        "commented_code": "@@ -0,0 +1,45 @@\n+import { expect } from \"@playwright/test\";\n+import { bookEventOnThisPage, doOnOrgDomain } from \"playwright/lib/testUtils\";\n+\n+import { SchedulingType } from \"@calcom/prisma/enums\";\n+\n+import { test } from \"../lib/fixtures\";\n+\n+test.afterEach(({ users }) => {\n+  users.deleteAll();\n+});\n+\n+test.describe(\"Organization Team page\", () => {\n+  test(\"Team page with org domain url\", async ({ page, users }) => {\n+    const orgMember = await users.create(undefined, {\n+      hasTeam: true,\n+      isOrg: true,\n+      hasSubteam: true,\n+      isOrgVerified: true,\n+      isDnsSetup: true,\n+      orgRequestedSlug: \"example\",\n+      schedulingType: SchedulingType.ROUND_ROBIN,\n+    });\n+    const { team: org } = await orgMember.getOrgMembership();\n+    const { team } = await orgMember.getFirstTeamMembership();\n+    const teamEvent = await orgMember.getFirstTeamEvent(team.id);\n+    await orgMember.apiLogin();\n+\n+    await test.step(\"Team page is loaded with profile and can select eventtype\", async () => {\n+      await doOnOrgDomain(\n+        {\n+          orgSlug: org.slug,\n+          page,\n+        },\n+        async ({ page, goToUrlWithErrorHandling }) => {\n+          await goToUrlWithErrorHandling(`/team/${team.slug}`);\n+          await expect(page.getByTestId(\"team-name\")).toBeVisible();\n+          await expect(page.getByTestId(\"event-type-link\")).toBeVisible();\n+          await goToUrlWithErrorHandling(`/team/${team.slug}/${teamEvent.slug}`);\n+          await expect(page.getByTestId(\"event-title\")).toBeVisible();\n+          await bookEventOnThisPage(page);\n+        }\n+      );\n+    });\n+  });\n+});",
        "comment_created_at": "2025-07-28T17:18:18+00:00",
        "comment_author": "vijayraghav-io",
        "comment_body": "removed the hardcoded `orgRequestedSlug` , may be the requested slug `example` was trying to override an existing org slug and was causing flakiness. \r\nSo made the org slug dynamic (which is by default).\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1730370585",
    "pr_number": 16349,
    "pr_file": "apps/web/playwright/profile.e2e.ts",
    "created_at": "2024-08-25T14:31:27+00:00",
    "commented_code": "expect(await page.getByTestId(\"profile-form-email-1-unverified-badge\").isVisible()).toEqual(true);\n   });\n \n-  // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-  // eslint-disable-next-line playwright/no-skipped-test\n-  test.skip(\"Can verify the newly added secondary email\", async ({ page, users, prisma }) => {\n+  test(\"Can verify the newly added secondary email\", async ({ page, users, prisma }) => {\n     const { secondaryEmail } = await createSecondaryEmail({ page, users });\n+    await page.waitForLoadState(\"networkidle\");",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1730370585",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/profile.e2e.ts",
        "discussion_id": "1730370585",
        "commented_code": "@@ -311,10 +310,9 @@ test.describe(\"Update Profile\", () => {\n     expect(await page.getByTestId(\"profile-form-email-1-unverified-badge\").isVisible()).toEqual(true);\n   });\n \n-  // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-  // eslint-disable-next-line playwright/no-skipped-test\n-  test.skip(\"Can verify the newly added secondary email\", async ({ page, users, prisma }) => {\n+  test(\"Can verify the newly added secondary email\", async ({ page, users, prisma }) => {\n     const { secondaryEmail } = await createSecondaryEmail({ page, users });\n+    await page.waitForLoadState(\"networkidle\");",
        "comment_created_at": "2024-08-25T14:31:27+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Waiting for the state to be updated correctly before we expect badges",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1730378183",
    "pr_number": 16349,
    "pr_file": "apps/web/playwright/event-types.e2e.ts",
    "created_at": "2024-08-25T15:07:29+00:00",
    "commented_code": "expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1730378183",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/event-types.e2e.ts",
        "discussion_id": "1730378183",
        "commented_code": "@@ -257,19 +257,23 @@ testBothFutureAndLegacyRoutes.describe(\"Event Types tests\", () => {\n         expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
        "comment_created_at": "2024-08-25T15:07:29+00:00",
        "comment_author": "anikdhabal",
        "comment_body": "Maybe it has fixed the test failure, or maybe it hasn't. However, setting a timeout is not ideal, as we're guessing the time and don't know the actual duration. This is one reason to make a test flaky",
        "pr_file_module": null
      },
      {
        "comment_id": "1730380753",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/event-types.e2e.ts",
        "discussion_id": "1730378183",
        "commented_code": "@@ -257,19 +257,23 @@ testBothFutureAndLegacyRoutes.describe(\"Event Types tests\", () => {\n         expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
        "comment_created_at": "2024-08-25T15:22:42+00:00",
        "comment_author": "Amit91848",
        "comment_body": "I couldn't find any other workaround here. waitForTimeout is being used in some other places for the same reason of automation being too fast  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1733588691",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/event-types.e2e.ts",
        "discussion_id": "1730378183",
        "commented_code": "@@ -257,19 +257,23 @@ testBothFutureAndLegacyRoutes.describe(\"Event Types tests\", () => {\n         expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
        "comment_created_at": "2024-08-27T22:23:01+00:00",
        "comment_author": "emrysal",
        "comment_body": "Yes, but also that is contributing to flakiness. waitForTimeout is never a great solution - if there is a situation that requires an artificial delay it's probably better to fix the underlying components rather than hiding it - agree with @anikdhabal here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1734225921",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/event-types.e2e.ts",
        "discussion_id": "1730378183",
        "commented_code": "@@ -257,19 +257,23 @@ testBothFutureAndLegacyRoutes.describe(\"Event Types tests\", () => {\n         expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
        "comment_created_at": "2024-08-28T08:28:13+00:00",
        "comment_author": "Amit91848",
        "comment_body": "@emrysal I agree but both these timeouts are to let the transitions in the elements to play out, which wouldn't be a problem at human speed. Checkout https://github.com/calcom/cal.com/pull/16349#discussion_r1734142126 for more context. I tried a combination of different locators, but unfortunately this is the only thing that works. I have updated it to wait for toast to disappear, but its essentially doing the same thing without using waitForTimeout.",
        "pr_file_module": null
      },
      {
        "comment_id": "1734235070",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16349,
        "pr_file": "apps/web/playwright/event-types.e2e.ts",
        "discussion_id": "1730378183",
        "commented_code": "@@ -257,19 +257,23 @@ testBothFutureAndLegacyRoutes.describe(\"Event Types tests\", () => {\n         expect(await linkElement.getAttribute(\"href\")).toBe(testUrl);\n       });\n \n-      // TODO: This test is extremely flaky and has been failing a lot, blocking many PRs. Fix this.\n-      // eslint-disable-next-line playwright/no-skipped-test\n-      test.skip(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n+      test(\"Can remove location from multiple locations that are saved\", async ({ page }) => {\n         await gotoFirstEventType(page);\n \n         // Add Attendee Phone Number location\n         await selectAttendeePhoneNumber(page);\n \n         // Add Cal Video location\n+        // sometimes the dropdown from previous location is open at the same time, causing there to be two \"Cal Video (Gloabl)\"\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(500);\n         await addAnotherLocation(page, \"Cal Video (Global)\");\n \n         await saveEventType(page);\n         await page.waitForLoadState(\"networkidle\");\n+        // Form is not made dirty if the save button is still in loading state.\n+        // eslint-disable-next-line playwright/no-wait-for-timeout\n+        await page.waitForTimeout(1000);",
        "comment_created_at": "2024-08-28T08:32:51+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Or else I can change those elements to not have transitions when in e2e. Lmk what do you prefer.",
        "pr_file_module": null
      }
    ]
  }
]