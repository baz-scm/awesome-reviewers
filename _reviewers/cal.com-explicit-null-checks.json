[
  {
    "discussion_id": "2163522888",
    "pr_number": 21983,
    "pr_file": "packages/platform/atoms/event-types/wrappers/EventAvailabilityTabPlatformWrapper.tsx",
    "created_at": "2025-06-24T10:05:18+00:00",
    "commented_code": "isSchedulePending={isSchedulePending}\n       hostSchedulesQuery={({ userId }: { userId: number }) => hostSchedulesQuery({ userId, teamId })}\n       scheduleQueryData={{\n+        ...atomSchedule,\n         isManaged: atomSchedule.isManaged,\n         readOnly: atomSchedule.readOnly,\n         id: atomSchedule.id,\n         timeZone: atomSchedule.timeZone,\n-        schedule:\n-          atomSchedule.schedule.reduce(\n-            (acc: Availability[], avail: Availability) => [\n-              ...acc,\n-              {\n-                startTime: new Date(avail.startTime),\n-                endTime: new Date(avail.endTime),\n-                days: avail.days,\n-              },\n-            ],\n-            []\n-          ) || [],\n+        schedule: atomSchedule.schedule.map((avail: ScheduleQueryData[\"schedule\"][number]) => ({\n+          id: avail.id ?? null,\n+          startTime: new Date(avail.startTime),\n+          endTime: new Date(avail.endTime),\n+          userId: avail.userId ?? null,\n+          eventTypeId: avail.eventTypeId ?? null,\n+          scheduleId: avail.scheduleId ?? null,\n+          date: avail.date ? new Date(avail.date) : null,\n+          days: avail.days,\n+        })),",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2163522888",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21983,
        "pr_file": "packages/platform/atoms/event-types/wrappers/EventAvailabilityTabPlatformWrapper.tsx",
        "discussion_id": "2163522888",
        "commented_code": "@@ -54,22 +54,21 @@ const EventAvailabilityTabPlatformWrapper = ({\n       isSchedulePending={isSchedulePending}\n       hostSchedulesQuery={({ userId }: { userId: number }) => hostSchedulesQuery({ userId, teamId })}\n       scheduleQueryData={{\n+        ...atomSchedule,\n         isManaged: atomSchedule.isManaged,\n         readOnly: atomSchedule.readOnly,\n         id: atomSchedule.id,\n         timeZone: atomSchedule.timeZone,\n-        schedule:\n-          atomSchedule.schedule.reduce(\n-            (acc: Availability[], avail: Availability) => [\n-              ...acc,\n-              {\n-                startTime: new Date(avail.startTime),\n-                endTime: new Date(avail.endTime),\n-                days: avail.days,\n-              },\n-            ],\n-            []\n-          ) || [],\n+        schedule: atomSchedule.schedule.map((avail: ScheduleQueryData[\"schedule\"][number]) => ({\n+          id: avail.id ?? null,\n+          startTime: new Date(avail.startTime),\n+          endTime: new Date(avail.endTime),\n+          userId: avail.userId ?? null,\n+          eventTypeId: avail.eventTypeId ?? null,\n+          scheduleId: avail.scheduleId ?? null,\n+          date: avail.date ? new Date(avail.date) : null,\n+          days: avail.days,\n+        })),",
        "comment_created_at": "2025-06-24T10:05:18+00:00",
        "comment_author": "Udit-takkar",
        "comment_body": "I think it should be (atomSchedule.schedule || []).map",
        "pr_file_module": null
      },
      {
        "comment_id": "2163543486",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21983,
        "pr_file": "packages/platform/atoms/event-types/wrappers/EventAvailabilityTabPlatformWrapper.tsx",
        "discussion_id": "2163522888",
        "commented_code": "@@ -54,22 +54,21 @@ const EventAvailabilityTabPlatformWrapper = ({\n       isSchedulePending={isSchedulePending}\n       hostSchedulesQuery={({ userId }: { userId: number }) => hostSchedulesQuery({ userId, teamId })}\n       scheduleQueryData={{\n+        ...atomSchedule,\n         isManaged: atomSchedule.isManaged,\n         readOnly: atomSchedule.readOnly,\n         id: atomSchedule.id,\n         timeZone: atomSchedule.timeZone,\n-        schedule:\n-          atomSchedule.schedule.reduce(\n-            (acc: Availability[], avail: Availability) => [\n-              ...acc,\n-              {\n-                startTime: new Date(avail.startTime),\n-                endTime: new Date(avail.endTime),\n-                days: avail.days,\n-              },\n-            ],\n-            []\n-          ) || [],\n+        schedule: atomSchedule.schedule.map((avail: ScheduleQueryData[\"schedule\"][number]) => ({\n+          id: avail.id ?? null,\n+          startTime: new Date(avail.startTime),\n+          endTime: new Date(avail.endTime),\n+          userId: avail.userId ?? null,\n+          eventTypeId: avail.eventTypeId ?? null,\n+          scheduleId: avail.scheduleId ?? null,\n+          date: avail.date ? new Date(avail.date) : null,\n+          days: avail.days,\n+        })),",
        "comment_created_at": "2025-06-24T10:14:31+00:00",
        "comment_author": "apsinghdev",
        "comment_body": "Make sense! This fallback can save runtime issues. Fixed it. Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2163735924",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21983,
        "pr_file": "packages/platform/atoms/event-types/wrappers/EventAvailabilityTabPlatformWrapper.tsx",
        "discussion_id": "2163522888",
        "commented_code": "@@ -54,22 +54,21 @@ const EventAvailabilityTabPlatformWrapper = ({\n       isSchedulePending={isSchedulePending}\n       hostSchedulesQuery={({ userId }: { userId: number }) => hostSchedulesQuery({ userId, teamId })}\n       scheduleQueryData={{\n+        ...atomSchedule,\n         isManaged: atomSchedule.isManaged,\n         readOnly: atomSchedule.readOnly,\n         id: atomSchedule.id,\n         timeZone: atomSchedule.timeZone,\n-        schedule:\n-          atomSchedule.schedule.reduce(\n-            (acc: Availability[], avail: Availability) => [\n-              ...acc,\n-              {\n-                startTime: new Date(avail.startTime),\n-                endTime: new Date(avail.endTime),\n-                days: avail.days,\n-              },\n-            ],\n-            []\n-          ) || [],\n+        schedule: atomSchedule.schedule.map((avail: ScheduleQueryData[\"schedule\"][number]) => ({\n+          id: avail.id ?? null,\n+          startTime: new Date(avail.startTime),\n+          endTime: new Date(avail.endTime),\n+          userId: avail.userId ?? null,\n+          eventTypeId: avail.eventTypeId ?? null,\n+          scheduleId: avail.scheduleId ?? null,\n+          date: avail.date ? new Date(avail.date) : null,\n+          days: avail.days,\n+        })),",
        "comment_created_at": "2025-06-24T11:44:52+00:00",
        "comment_author": "Devanshusharma2005",
        "comment_body": "> I think it should be (atomSchedule.schedule || []).map\r\n\r\nahh coz atomSchedule.schedule might be undefined or null if no schedule is present.",
        "pr_file_module": null
      },
      {
        "comment_id": "2163822667",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21983,
        "pr_file": "packages/platform/atoms/event-types/wrappers/EventAvailabilityTabPlatformWrapper.tsx",
        "discussion_id": "2163522888",
        "commented_code": "@@ -54,22 +54,21 @@ const EventAvailabilityTabPlatformWrapper = ({\n       isSchedulePending={isSchedulePending}\n       hostSchedulesQuery={({ userId }: { userId: number }) => hostSchedulesQuery({ userId, teamId })}\n       scheduleQueryData={{\n+        ...atomSchedule,\n         isManaged: atomSchedule.isManaged,\n         readOnly: atomSchedule.readOnly,\n         id: atomSchedule.id,\n         timeZone: atomSchedule.timeZone,\n-        schedule:\n-          atomSchedule.schedule.reduce(\n-            (acc: Availability[], avail: Availability) => [\n-              ...acc,\n-              {\n-                startTime: new Date(avail.startTime),\n-                endTime: new Date(avail.endTime),\n-                days: avail.days,\n-              },\n-            ],\n-            []\n-          ) || [],\n+        schedule: atomSchedule.schedule.map((avail: ScheduleQueryData[\"schedule\"][number]) => ({\n+          id: avail.id ?? null,\n+          startTime: new Date(avail.startTime),\n+          endTime: new Date(avail.endTime),\n+          userId: avail.userId ?? null,\n+          eventTypeId: avail.eventTypeId ?? null,\n+          scheduleId: avail.scheduleId ?? null,\n+          date: avail.date ? new Date(avail.date) : null,\n+          days: avail.days,\n+        })),",
        "comment_created_at": "2025-06-24T12:16:14+00:00",
        "comment_author": "apsinghdev",
        "comment_body": "Exactly!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2269084341",
    "pr_number": 23028,
    "pr_file": "apps/web/lib/buildLegacyCtx.tsx",
    "created_at": "2025-08-12T08:22:06+00:00",
    "commented_code": "}\n \n     // Handle single values\n-    if (value !== undefined) {\n+    if (value !== undefined && value !== null) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2269084341",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23028,
        "pr_file": "apps/web/lib/buildLegacyCtx.tsx",
        "discussion_id": "2269084341",
        "commented_code": "@@ -35,7 +43,7 @@ export function decodeParams(params: Params): Params {\n     }\n \n     // Handle single values\n-    if (value !== undefined) {\n+    if (value !== undefined && value !== null) {",
        "comment_created_at": "2025-08-12T08:22:06+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "Looks like a safe check because decodeURIComponent doesn't accept null",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220374263",
    "pr_number": 22570,
    "pr_file": "apps/web/modules/signup-view.tsx",
    "created_at": "2025-07-21T21:32:51+00:00",
    "commented_code": "}\n   };\n \n-  const isPlatformUser = redirectUrl?.includes(\"platform\") && redirectUrl?.includes(\"new\");\n+  const isPlatformUser = redirectUrl && redirectUrl.includes(\"platform\") && redirectUrl.includes(\"new\");",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2220397963",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22570,
        "pr_file": "apps/web/modules/signup-view.tsx",
        "discussion_id": "2220374263",
        "commented_code": "@@ -228,7 +250,7 @@ export default function Signup({\n     }\n   };\n \n-  const isPlatformUser = redirectUrl?.includes(\"platform\") && redirectUrl?.includes(\"new\");\n+  const isPlatformUser = redirectUrl && redirectUrl.includes(\"platform\") && redirectUrl.includes(\"new\");",
        "comment_created_at": "2025-07-21T21:32:51+00:00",
        "comment_author": "Anshumancanrock",
        "comment_body": "I think the current code is actually safer here. Since \"redirectUrl\" can be null, using optional chaining would make \"isPlatformUser\" potentially undefined instead of a clean boolean. \r\n\r\nThe explicit && check ensures we always get true/false, which is what the downstream conditional logic expects. The current approach is intentional for this null-handling case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2052416245",
    "pr_number": 20778,
    "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
    "created_at": "2025-04-21T13:56:02+00:00",
    "commented_code": "};\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n   if (!parsed.success) {\n     notFound();\n   }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);\n+\n+  const workflowData = await workflowCaller.get({ id: workFlowId });\n+\n+  if (!workflowData) return notFound();\n+\n+  const isOrg = workflowData?.team?.isOrganization ?? false;\n+  const teamId = workflowData?.teamId ?? undefined;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2052416245",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20778,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
        "discussion_id": "2052416245",
        "commented_code": "@@ -41,33 +47,48 @@ export const generateMetadata = async ({ params }: PageProps): Promise<Metadata\n };\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n   if (!parsed.success) {\n     notFound();\n   }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);\n+\n+  const workflowData = await workflowCaller.get({ id: workFlowId });\n+\n+  if (!workflowData) return notFound();\n+\n+  const isOrg = workflowData?.team?.isOrganization ?? false;\n+  const teamId = workflowData?.teamId ?? undefined;",
        "comment_created_at": "2025-04-21T13:56:02+00:00",
        "comment_author": "hbjORbj",
        "comment_body": "Q: what happens when `teamId` is undefined? does it break anything? if so, shouldn't we show 404 page?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2052493741",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20778,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
        "discussion_id": "2052416245",
        "commented_code": "@@ -41,33 +47,48 @@ export const generateMetadata = async ({ params }: PageProps): Promise<Metadata\n };\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n   if (!parsed.success) {\n     notFound();\n   }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);\n+\n+  const workflowData = await workflowCaller.get({ id: workFlowId });\n+\n+  if (!workflowData) return notFound();\n+\n+  const isOrg = workflowData?.team?.isOrganization ?? false;\n+  const teamId = workflowData?.teamId ?? undefined;",
        "comment_created_at": "2025-04-21T14:36:13+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "In that case it returns `[] - empty array` same as what we have as fallback rn , nothing's breaking",
        "pr_file_module": null
      },
      {
        "comment_id": "2052512134",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20778,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
        "discussion_id": "2052416245",
        "commented_code": "@@ -41,33 +47,48 @@ export const generateMetadata = async ({ params }: PageProps): Promise<Metadata\n };\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n   if (!parsed.success) {\n     notFound();\n   }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);\n+\n+  const workflowData = await workflowCaller.get({ id: workFlowId });\n+\n+  if (!workflowData) return notFound();\n+\n+  const isOrg = workflowData?.team?.isOrganization ?? false;\n+  const teamId = workflowData?.teamId ?? undefined;",
        "comment_created_at": "2025-04-21T14:45:07+00:00",
        "comment_author": "TusharBhatt1",
        "comment_body": "We can improve it by skipping the verifiedNumbers call if teamId is undefined and `return [] straight away`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2266946285",
    "pr_number": 23009,
    "pr_file": "apps/web/lib/org/[orgSlug]/[user]/getServerSideProps.tsx",
    "created_at": "2025-08-11T14:25:38+00:00",
    "commented_code": "if (team) {\n     return GSSTeamPage({\n       ...ctx,\n-      query: { slug: ctx.query.user, orgRedirection: ctx.query.orgRedirection },\n+      query: {\n+        slug: ctx.query.user,\n+        ...(ctx.query.orgRedirection !== undefined && { orgRedirection: ctx.query.orgRedirection }),\n+      },\n     });\n   }\n   return GSSUserPage({\n     ...ctx,\n     query: {\n       user: ctx.query.user,\n-      redirect: ctx.query.redirect,\n-      orgRedirection: ctx.query.orgRedirection,\n+      ...(ctx.query.redirect !== undefined && { redirect: ctx.query.redirect }),\n+      ...(ctx.query.orgRedirection !== undefined && { orgRedirection: ctx.query.orgRedirection }),",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2266946285",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23009,
        "pr_file": "apps/web/lib/org/[orgSlug]/[user]/getServerSideProps.tsx",
        "discussion_id": "2266946285",
        "commented_code": "@@ -23,15 +23,18 @@ export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {\n   if (team) {\n     return GSSTeamPage({\n       ...ctx,\n-      query: { slug: ctx.query.user, orgRedirection: ctx.query.orgRedirection },\n+      query: {\n+        slug: ctx.query.user,\n+        ...(ctx.query.orgRedirection !== undefined && { orgRedirection: ctx.query.orgRedirection }),\n+      },\n     });\n   }\n   return GSSUserPage({\n     ...ctx,\n     query: {\n       user: ctx.query.user,\n-      redirect: ctx.query.redirect,\n-      orgRedirection: ctx.query.orgRedirection,\n+      ...(ctx.query.redirect !== undefined && { redirect: ctx.query.redirect }),\n+      ...(ctx.query.orgRedirection !== undefined && { orgRedirection: ctx.query.orgRedirection }),",
        "comment_created_at": "2025-08-11T14:25:38+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "This was adding params _redirect_ and _orgRedirection_ even when they were undefined causing them to appear in URL as _redirect=&orgRedirection=_",
        "pr_file_module": null
      }
    ]
  }
]