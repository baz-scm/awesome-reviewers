[
  {
    "discussion_id": "2230079583",
    "pr_number": 22708,
    "pr_file": "apps/web/app/api/cron/calendar-subscriptions-sql/route.ts",
    "created_at": "2025-07-25T03:53:24+00:00",
    "commented_code": "+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { getCalendar } from \"@calcom/app-store/_utils/getCalendar\";\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/calendar-subscription.repository\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function postHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");\n+\n+  if (![process.env.CRON_API_KEY, `Bearer ${process.env.CRON_SECRET}`].includes(`${apiKey}`)) {\n+    return NextResponse.json({ message: \"Not authenticated\" }, { status: 401 });\n+  }\n+\n+  try {\n+    const featuresRepo = new FeaturesRepository();\n+    const isSqlWriteEnabled = await featuresRepo.checkIfFeatureIsEnabledGlobally(\"calendar-cache-sql-write\");\n+\n+    if (!isSqlWriteEnabled) {\n+      log.debug(\"SQL cache write not enabled globally\");\n+      return NextResponse.json({ message: \"SQL cache write disabled\" });\n+    }\n+\n+    const subscriptionRepo = new CalendarSubscriptionRepository(prisma);\n+    const selectedCalendars = await SelectedCalendarRepository.getNextBatchForSqlCache(50);\n+\n+    let createdCount = 0;\n+    let errorCount = 0;\n+\n+    for (const selectedCalendar of selectedCalendars) {\n+      try {\n+        await subscriptionRepo.upsert({\n+          selectedCalendar: { connect: { id: selectedCalendar.id } },\n+        });\n+\n+        createdCount++;\n+      } catch (error) {\n+        log.error(\n+          `Failed to create subscription for selected calendar ${selectedCalendar.id}:`,\n+          safeStringify({ error })\n+        );\n+        errorCount++;\n+      }\n+    }\n+\n+    const subscriptionsToWatch = await subscriptionRepo.getSubscriptionsToWatch(50);\n+    let watchedCount = 0;\n+\n+    for (const subscription of subscriptionsToWatch) {\n+      try {\n+        if (!subscription.selectedCalendar?.credential) continue;\n+\n+        const credentialForCalendarCache = await getCredentialForCalendarCache({\n+          credentialId: subscription.selectedCalendar.credential.id,\n+        });\n+        const calendarService = await getCalendar(credentialForCalendarCache);\n+\n+        if (!calendarService?.watchCalendar) continue;\n+\n+        const watchResult = (await calendarService.watchCalendar({\n+          calendarId: subscription.selectedCalendar.externalId,\n+          eventTypeIds: [],\n+        })) as { id?: string | null; expiration?: string | null; token?: string | null } | undefined;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2230079583",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22708,
        "pr_file": "apps/web/app/api/cron/calendar-subscriptions-sql/route.ts",
        "discussion_id": "2230079583",
        "commented_code": "@@ -0,0 +1,105 @@\n+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { getCalendar } from \"@calcom/app-store/_utils/getCalendar\";\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/calendar-subscription.repository\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function postHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");\n+\n+  if (![process.env.CRON_API_KEY, `Bearer ${process.env.CRON_SECRET}`].includes(`${apiKey}`)) {\n+    return NextResponse.json({ message: \"Not authenticated\" }, { status: 401 });\n+  }\n+\n+  try {\n+    const featuresRepo = new FeaturesRepository();\n+    const isSqlWriteEnabled = await featuresRepo.checkIfFeatureIsEnabledGlobally(\"calendar-cache-sql-write\");\n+\n+    if (!isSqlWriteEnabled) {\n+      log.debug(\"SQL cache write not enabled globally\");\n+      return NextResponse.json({ message: \"SQL cache write disabled\" });\n+    }\n+\n+    const subscriptionRepo = new CalendarSubscriptionRepository(prisma);\n+    const selectedCalendars = await SelectedCalendarRepository.getNextBatchForSqlCache(50);\n+\n+    let createdCount = 0;\n+    let errorCount = 0;\n+\n+    for (const selectedCalendar of selectedCalendars) {\n+      try {\n+        await subscriptionRepo.upsert({\n+          selectedCalendar: { connect: { id: selectedCalendar.id } },\n+        });\n+\n+        createdCount++;\n+      } catch (error) {\n+        log.error(\n+          `Failed to create subscription for selected calendar ${selectedCalendar.id}:`,\n+          safeStringify({ error })\n+        );\n+        errorCount++;\n+      }\n+    }\n+\n+    const subscriptionsToWatch = await subscriptionRepo.getSubscriptionsToWatch(50);\n+    let watchedCount = 0;\n+\n+    for (const subscription of subscriptionsToWatch) {\n+      try {\n+        if (!subscription.selectedCalendar?.credential) continue;\n+\n+        const credentialForCalendarCache = await getCredentialForCalendarCache({\n+          credentialId: subscription.selectedCalendar.credential.id,\n+        });\n+        const calendarService = await getCalendar(credentialForCalendarCache);\n+\n+        if (!calendarService?.watchCalendar) continue;\n+\n+        const watchResult = (await calendarService.watchCalendar({\n+          calendarId: subscription.selectedCalendar.externalId,\n+          eventTypeIds: [],\n+        })) as { id?: string | null; expiration?: string | null; token?: string | null } | undefined;",
        "comment_created_at": "2025-07-25T03:53:24+00:00",
        "comment_author": "zomars",
        "comment_body": "DevinAI, you're using the old calendar service. We should create a  new CalendarSubscriptionService class that handles subscribing and unsubscribing using the new endpoints and tables, leaving the old system separated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2270201405",
    "pr_number": 22708,
    "pr_file": "apps/web/app/api/cron/calendar-subscriptions/route.ts",
    "created_at": "2025-08-12T15:05:19+00:00",
    "commented_code": "+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionRepository\";\n+import { CalendarSubscriptionService } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionService\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function getHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2270201405",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22708,
        "pr_file": "apps/web/app/api/cron/calendar-subscriptions/route.ts",
        "discussion_id": "2270201405",
        "commented_code": "@@ -0,0 +1,123 @@\n+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionRepository\";\n+import { CalendarSubscriptionService } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionService\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function getHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");",
        "comment_created_at": "2025-08-12T15:05:19+00:00",
        "comment_author": "keithwillcode",
        "comment_body": "This is a fat handler. Ideally this would just take in the NextRequest, parse out what is needed and call off to application services to handle the rest.",
        "pr_file_module": null
      },
      {
        "comment_id": "2270673828",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22708,
        "pr_file": "apps/web/app/api/cron/calendar-subscriptions/route.ts",
        "discussion_id": "2270201405",
        "commented_code": "@@ -0,0 +1,123 @@\n+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionRepository\";\n+import { CalendarSubscriptionService } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionService\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function getHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");",
        "comment_created_at": "2025-08-12T17:46:26+00:00",
        "comment_author": "zomars",
        "comment_body": "good catch",
        "pr_file_module": null
      },
      {
        "comment_id": "2271129673",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22708,
        "pr_file": "apps/web/app/api/cron/calendar-subscriptions/route.ts",
        "discussion_id": "2270201405",
        "commented_code": "@@ -0,0 +1,123 @@\n+import { defaultResponderForAppDir } from \"app/api/defaultResponderForAppDir\";\n+import type { NextRequest } from \"next/server\";\n+import { NextResponse } from \"next/server\";\n+\n+import { CalendarSubscriptionRepository } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionRepository\";\n+import { CalendarSubscriptionService } from \"@calcom/features/calendar-cache-sql/CalendarSubscriptionService\";\n+import { FeaturesRepository } from \"@calcom/features/flags/features.repository\";\n+import { getCredentialForCalendarCache } from \"@calcom/lib/delegationCredential/server\";\n+import logger from \"@calcom/lib/logger\";\n+import { safeStringify } from \"@calcom/lib/safeStringify\";\n+import { SelectedCalendarRepository } from \"@calcom/lib/server/repository/selectedCalendar\";\n+import prisma from \"@calcom/prisma\";\n+\n+const log = logger.getSubLogger({ prefix: [\"CalendarSubscriptionsSqlCron\"] });\n+\n+async function getHandler(req: NextRequest) {\n+  const apiKey = req.headers.get(\"authorization\") || req.nextUrl.searchParams.get(\"apiKey\");",
        "comment_created_at": "2025-08-12T20:24:30+00:00",
        "comment_author": "zomars",
        "comment_body": "Moved logic to CalendarSubscriptionService",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2005467149",
    "pr_number": 20179,
    "pr_file": "apps/api/v2/src/ee/bookings/2024-08-13/services/bookings.service.ts",
    "created_at": "2025-03-20T11:58:12+00:00",
    "commented_code": "});\n   }\n \n-  async reassignBooking(bookingUid: string, requestUser: UserWithProfile) {\n+  async reassignBooking(bookingUid: string, requestUser: UserWithProfile, request: Request) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2005467149",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20179,
        "pr_file": "apps/api/v2/src/ee/bookings/2024-08-13/services/bookings.service.ts",
        "discussion_id": "2005467149",
        "commented_code": "@@ -429,7 +429,7 @@ export class BookingsService_2024_08_13 {\n     });\n   }\n \n-  async reassignBooking(bookingUid: string, requestUser: UserWithProfile) {\n+  async reassignBooking(bookingUid: string, requestUser: UserWithProfile, request: Request) {",
        "comment_created_at": "2025-03-20T11:58:12+00:00",
        "comment_author": "Ryukemeister",
        "comment_body": "if we only want teamMemberEmail its better to extract it from the request query and then pass it down into this function instead of passing over the whole request",
        "pr_file_module": null
      },
      {
        "comment_id": "2010193727",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20179,
        "pr_file": "apps/api/v2/src/ee/bookings/2024-08-13/services/bookings.service.ts",
        "discussion_id": "2005467149",
        "commented_code": "@@ -429,7 +429,7 @@ export class BookingsService_2024_08_13 {\n     });\n   }\n \n-  async reassignBooking(bookingUid: string, requestUser: UserWithProfile) {\n+  async reassignBooking(bookingUid: string, requestUser: UserWithProfile, request: Request) {",
        "comment_created_at": "2025-03-24T13:34:09+00:00",
        "comment_author": "Neon-20",
        "comment_body": "added the same @Ryukemeister ",
        "pr_file_module": null
      }
    ]
  }
]