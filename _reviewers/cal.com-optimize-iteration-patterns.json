[
  {
    "discussion_id": "2287403777",
    "pr_number": 23068,
    "pr_file": "packages/features/ee/workflows/lib/getAllWorkflows.ts",
    "created_at": "2025-08-20T08:30:51+00:00",
    "commented_code": "const seen = new Set();\n \n   const workflows = allWorkflows.filter((workflow) => {\n+    // Additional check, to remove unwanted workflows that might come from eventTypeWorkflows\n+    if (triggerEvents && !triggerEvents.includes(workflow.trigger)) return false;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2287403777",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/ee/workflows/lib/getAllWorkflows.ts",
        "discussion_id": "2287403777",
        "commented_code": "@@ -112,6 +128,9 @@ export const getAllWorkflows = async (\n   const seen = new Set();\n \n   const workflows = allWorkflows.filter((workflow) => {\n+    // Additional check, to remove unwanted workflows that might come from eventTypeWorkflows\n+    if (triggerEvents && !triggerEvents.includes(workflow.trigger)) return false;",
        "comment_created_at": "2025-08-20T08:30:51+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "can't we make sure to filter `eventTypeWorkflows` already at the beginning? before we are adding all other workflows? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2288224767",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/ee/workflows/lib/getAllWorkflows.ts",
        "discussion_id": "2287403777",
        "commented_code": "@@ -112,6 +128,9 @@ export const getAllWorkflows = async (\n   const seen = new Set();\n \n   const workflows = allWorkflows.filter((workflow) => {\n+    // Additional check, to remove unwanted workflows that might come from eventTypeWorkflows\n+    if (triggerEvents && !triggerEvents.includes(workflow.trigger)) return false;",
        "comment_created_at": "2025-08-20T13:44:56+00:00",
        "comment_author": "Amit91848",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2288383174",
    "pr_number": 23068,
    "pr_file": "packages/features/ee/workflows/lib/getAllWorkflows.ts",
    "created_at": "2025-08-20T14:33:56+00:00",
    "commented_code": "userId?: number | null,\n   teamId?: number | null,\n   orgId?: number | null,\n-  workflowsLockedForUser = true\n+  workflowsLockedForUser = true,\n+  allowedTriggerEvents?: WorkflowTriggerEvents[]\n ) => {\n-  const allWorkflows = eventTypeWorkflows;\n+  const allWorkflows = eventTypeWorkflows.filter((workflow) => {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2288383174",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23068,
        "pr_file": "packages/features/ee/workflows/lib/getAllWorkflows.ts",
        "discussion_id": "2288383174",
        "commented_code": "@@ -32,15 +34,28 @@ export const getAllWorkflows = async (\n   userId?: number | null,\n   teamId?: number | null,\n   orgId?: number | null,\n-  workflowsLockedForUser = true\n+  workflowsLockedForUser = true,\n+  allowedTriggerEvents?: WorkflowTriggerEvents[]\n ) => {\n-  const allWorkflows = eventTypeWorkflows;\n+  const allWorkflows = eventTypeWorkflows.filter((workflow) => {",
        "comment_created_at": "2025-08-20T14:33:56+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "it would make most sense to filter already here: https://github.com/calcom/cal.com/pull/23068/files#diff-f6ef6880041c2afa0023a8b231030af6fc89b5c067f3920efa906890c100734fR832",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192250966",
    "pr_number": 21297,
    "pr_file": "packages/features/insights/server/routing-events.ts",
    "created_at": "2025-07-08T11:36:10+00:00",
    "commented_code": "utm_campaign: item.utm_campaign || \"\",\n         utm_term: item.utm_term || \"\",\n         utm_content: item.utm_content || \"\",\n+        ...((bookingAttendees || [])\n+          .filter(\n+            (attendee): attendee is { name: string; email: string; timeZone: string | null } =>\n+              typeof attendee.name === \"string\" && typeof attendee.email === \"string\"\n+          )\n+          .reduce((acc, attendee, index) => {\n+            acc[`Attendee ${index + 1}`] = `${attendee.name} (${attendee.email})`;\n+            return acc;\n+          }, {} as Record<string, string>) || {}),",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2192250966",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21297,
        "pr_file": "packages/features/insights/server/routing-events.ts",
        "discussion_id": "2192250966",
        "commented_code": "@@ -454,6 +177,15 @@ class RoutingEventsInsights {\n         utm_campaign: item.utm_campaign || \"\",\n         utm_term: item.utm_term || \"\",\n         utm_content: item.utm_content || \"\",\n+        ...((bookingAttendees || [])\n+          .filter(\n+            (attendee): attendee is { name: string; email: string; timeZone: string | null } =>\n+              typeof attendee.name === \"string\" && typeof attendee.email === \"string\"\n+          )\n+          .reduce((acc, attendee, index) => {\n+            acc[`Attendee ${index + 1}`] = `${attendee.name} (${attendee.email})`;\n+            return acc;\n+          }, {} as Record<string, string>) || {}),",
        "comment_created_at": "2025-07-08T11:36:10+00:00",
        "comment_author": "sean-brydon",
        "comment_body": "```suggestion\n...((bookingAttendees || [])\n  .reduce((acc, attendee, index) => {\n    if (typeof attendee.name === \"string\" && typeof attendee.email === \"string\") {\n      acc[`Attendee ${index + 1}`] = `${attendee.name} (${attendee.email})`;\n    }\n    return acc;\n  }, {} as Record<string, string>) || {})\n```\n\nLets move the filter into the reduce directly so we don't have to iterate over the array twice",
        "pr_file_module": null
      },
      {
        "comment_id": "2192399496",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 21297,
        "pr_file": "packages/features/insights/server/routing-events.ts",
        "discussion_id": "2192250966",
        "commented_code": "@@ -454,6 +177,15 @@ class RoutingEventsInsights {\n         utm_campaign: item.utm_campaign || \"\",\n         utm_term: item.utm_term || \"\",\n         utm_content: item.utm_content || \"\",\n+        ...((bookingAttendees || [])\n+          .filter(\n+            (attendee): attendee is { name: string; email: string; timeZone: string | null } =>\n+              typeof attendee.name === \"string\" && typeof attendee.email === \"string\"\n+          )\n+          .reduce((acc, attendee, index) => {\n+            acc[`Attendee ${index + 1}`] = `${attendee.name} (${attendee.email})`;\n+            return acc;\n+          }, {} as Record<string, string>) || {}),",
        "comment_created_at": "2025-07-08T12:35:33+00:00",
        "comment_author": "eunjae-lee",
        "comment_body": "yeah but actually what if\r\n\r\n```\r\n[\r\n  { name: 'blah', email: 'hi@example' },\r\n  { name: undefined, email: undefined },\r\n  { name: 'hey', email: 'hey@example.com' }\r\n]\r\n```\r\n\r\nthen we will get\r\n\r\n```\r\n{\r\n  \"Attendee 1\": \"blah (hi@example)\",\r\n  \"Attendee 3\": \"hey (hey@example.com)\"\r\n}\r\n```\r\n\r\n(We want Attendee \"2\" instead of 3)\r\n\r\nwe need to filter first, to get the correct \"index\" later.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1518249765",
    "pr_number": 13526,
    "pr_file": "packages/core/getUserAvailability.ts",
    "created_at": "2024-03-08T20:14:55+00:00",
    "commented_code": "performance.measure(`checking duration limits took $1'`, \"durationLimitsStart\", \"durationLimitsEnd\");\n   }\n \n+  const busyTimes = limitManager.getBusyTimes().sort((a, b) => (dayjs(a.start).isBefore(b.start) ? -1 : 1));\n+\n+  if (eventType.seatsPerTimeSlot) {\n+    const bookingsWithRemainingSeats = bookings.filter(\n+      (booking) =>\n+        eventType.seatsPerTimeSlot &&\n+        booking.attendeesCount &&\n+        booking.attendeesCount < eventType.seatsPerTimeSlot &&\n+        dayjs(booking.start).isBetween(dateFrom, dateTo)\n+    );\n+\n+    for (let i = 0; i < bookingsWithRemainingSeats.length; i++) {\n+      for (let j = i; j < busyTimes.length; j++) {\n+        const booking = bookingsWithRemainingSeats[i];\n+        const busyTime = busyTimes[j];\n+        if (dayjs(booking.start).add(1, \"ms\").isBetween(busyTime.start, busyTime.end)) {\n+          busyTimes.splice(\n+            j,\n+            1,\n+            {\n+              start: busyTime.start,\n+              end: dayjs(booking.start).subtract(1, \"ms\").toISOString(),\n+            },\n+            {\n+              start: dayjs.utc(booking.end).toISOString(),\n+              end: busyTime.end,\n+            }\n+          );\n+          break;\n+        }\n+      }\n+    }\n+  }",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1518249765",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 13526,
        "pr_file": "packages/core/getUserAvailability.ts",
        "discussion_id": "1518249765",
        "commented_code": "@@ -495,10 +496,44 @@ const _getBusyTimesFromLimits = async (\n     performance.measure(`checking duration limits took $1'`, \"durationLimitsStart\", \"durationLimitsEnd\");\n   }\n \n+  const busyTimes = limitManager.getBusyTimes().sort((a, b) => (dayjs(a.start).isBefore(b.start) ? -1 : 1));\n+\n+  if (eventType.seatsPerTimeSlot) {\n+    const bookingsWithRemainingSeats = bookings.filter(\n+      (booking) =>\n+        eventType.seatsPerTimeSlot &&\n+        booking.attendeesCount &&\n+        booking.attendeesCount < eventType.seatsPerTimeSlot &&\n+        dayjs(booking.start).isBetween(dateFrom, dateTo)\n+    );\n+\n+    for (let i = 0; i < bookingsWithRemainingSeats.length; i++) {\n+      for (let j = i; j < busyTimes.length; j++) {\n+        const booking = bookingsWithRemainingSeats[i];\n+        const busyTime = busyTimes[j];\n+        if (dayjs(booking.start).add(1, \"ms\").isBetween(busyTime.start, busyTime.end)) {\n+          busyTimes.splice(\n+            j,\n+            1,\n+            {\n+              start: busyTime.start,\n+              end: dayjs(booking.start).subtract(1, \"ms\").toISOString(),\n+            },\n+            {\n+              start: dayjs.utc(booking.end).toISOString(),\n+              end: busyTime.end,\n+            }\n+          );\n+          break;\n+        }\n+      }\n+    }\n+  }",
        "comment_created_at": "2024-03-08T20:14:55+00:00",
        "comment_author": "joeauyeung",
        "comment_body": "**Non-blocking**: Something about a loop inside of a loop didn't sit well with me. What if instead of iterating through `bookings` and then looping through that new array. What if we iterate through just `bookings`, see if it fits the criteria for `bookingWithRemainingSeats`, then splice `busyTimes`. If it doesn't fit the criteria continue to the next booking.",
        "pr_file_module": null
      },
      {
        "comment_id": "1575214392",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 13526,
        "pr_file": "packages/core/getUserAvailability.ts",
        "discussion_id": "1518249765",
        "commented_code": "@@ -495,10 +496,44 @@ const _getBusyTimesFromLimits = async (\n     performance.measure(`checking duration limits took $1'`, \"durationLimitsStart\", \"durationLimitsEnd\");\n   }\n \n+  const busyTimes = limitManager.getBusyTimes().sort((a, b) => (dayjs(a.start).isBefore(b.start) ? -1 : 1));\n+\n+  if (eventType.seatsPerTimeSlot) {\n+    const bookingsWithRemainingSeats = bookings.filter(\n+      (booking) =>\n+        eventType.seatsPerTimeSlot &&\n+        booking.attendeesCount &&\n+        booking.attendeesCount < eventType.seatsPerTimeSlot &&\n+        dayjs(booking.start).isBetween(dateFrom, dateTo)\n+    );\n+\n+    for (let i = 0; i < bookingsWithRemainingSeats.length; i++) {\n+      for (let j = i; j < busyTimes.length; j++) {\n+        const booking = bookingsWithRemainingSeats[i];\n+        const busyTime = busyTimes[j];\n+        if (dayjs(booking.start).add(1, \"ms\").isBetween(busyTime.start, busyTime.end)) {\n+          busyTimes.splice(\n+            j,\n+            1,\n+            {\n+              start: busyTime.start,\n+              end: dayjs(booking.start).subtract(1, \"ms\").toISOString(),\n+            },\n+            {\n+              start: dayjs.utc(booking.end).toISOString(),\n+              end: busyTime.end,\n+            }\n+          );\n+          break;\n+        }\n+      }\n+    }\n+  }",
        "comment_created_at": "2024-04-22T18:40:44+00:00",
        "comment_author": "joeauyeung",
        "comment_body": "I've gone ahead and made this change in this commit b5a43cce44ffc4628b5d947761de182a9b57cc2b",
        "pr_file_module": null
      },
      {
        "comment_id": "1518249765",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 13526,
        "pr_file": "packages/core/getUserAvailability.ts",
        "discussion_id": "1518249765",
        "commented_code": "@@ -495,10 +496,44 @@ const _getBusyTimesFromLimits = async (\n     performance.measure(`checking duration limits took $1'`, \"durationLimitsStart\", \"durationLimitsEnd\");\n   }\n \n+  const busyTimes = limitManager.getBusyTimes().sort((a, b) => (dayjs(a.start).isBefore(b.start) ? -1 : 1));\n+\n+  if (eventType.seatsPerTimeSlot) {\n+    const bookingsWithRemainingSeats = bookings.filter(\n+      (booking) =>\n+        eventType.seatsPerTimeSlot &&\n+        booking.attendeesCount &&\n+        booking.attendeesCount < eventType.seatsPerTimeSlot &&\n+        dayjs(booking.start).isBetween(dateFrom, dateTo)\n+    );\n+\n+    for (let i = 0; i < bookingsWithRemainingSeats.length; i++) {\n+      for (let j = i; j < busyTimes.length; j++) {\n+        const booking = bookingsWithRemainingSeats[i];\n+        const busyTime = busyTimes[j];\n+        if (dayjs(booking.start).add(1, \"ms\").isBetween(busyTime.start, busyTime.end)) {\n+          busyTimes.splice(\n+            j,\n+            1,\n+            {\n+              start: busyTime.start,\n+              end: dayjs(booking.start).subtract(1, \"ms\").toISOString(),\n+            },\n+            {\n+              start: dayjs.utc(booking.end).toISOString(),\n+              end: busyTime.end,\n+            }\n+          );\n+          break;\n+        }\n+      }\n+    }\n+  }",
        "comment_created_at": "2024-03-08T20:14:55+00:00",
        "comment_author": "joeauyeung",
        "comment_body": "**Non-blocking**: Something about a loop inside of a loop didn't sit well with me. What if instead of iterating through `bookings` and then looping through that new array. What if we iterate through just `bookings`, see if it fits the criteria for `bookingWithRemainingSeats`, then splice `busyTimes`. If it doesn't fit the criteria continue to the next booking.",
        "pr_file_module": null
      },
      {
        "comment_id": "1575214392",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 13526,
        "pr_file": "packages/core/getUserAvailability.ts",
        "discussion_id": "1518249765",
        "commented_code": "@@ -495,10 +496,44 @@ const _getBusyTimesFromLimits = async (\n     performance.measure(`checking duration limits took $1'`, \"durationLimitsStart\", \"durationLimitsEnd\");\n   }\n \n+  const busyTimes = limitManager.getBusyTimes().sort((a, b) => (dayjs(a.start).isBefore(b.start) ? -1 : 1));\n+\n+  if (eventType.seatsPerTimeSlot) {\n+    const bookingsWithRemainingSeats = bookings.filter(\n+      (booking) =>\n+        eventType.seatsPerTimeSlot &&\n+        booking.attendeesCount &&\n+        booking.attendeesCount < eventType.seatsPerTimeSlot &&\n+        dayjs(booking.start).isBetween(dateFrom, dateTo)\n+    );\n+\n+    for (let i = 0; i < bookingsWithRemainingSeats.length; i++) {\n+      for (let j = i; j < busyTimes.length; j++) {\n+        const booking = bookingsWithRemainingSeats[i];\n+        const busyTime = busyTimes[j];\n+        if (dayjs(booking.start).add(1, \"ms\").isBetween(busyTime.start, busyTime.end)) {\n+          busyTimes.splice(\n+            j,\n+            1,\n+            {\n+              start: busyTime.start,\n+              end: dayjs(booking.start).subtract(1, \"ms\").toISOString(),\n+            },\n+            {\n+              start: dayjs.utc(booking.end).toISOString(),\n+              end: busyTime.end,\n+            }\n+          );\n+          break;\n+        }\n+      }\n+    }\n+  }",
        "comment_created_at": "2024-04-22T18:40:44+00:00",
        "comment_author": "joeauyeung",
        "comment_body": "I've gone ahead and made this change in this commit b5a43cce44ffc4628b5d947761de182a9b57cc2b",
        "pr_file_module": null
      }
    ]
  }
]