[
  {
    "discussion_id": "2297170252",
    "pr_number": 23320,
    "pr_file": "apps/web/components/PageWrapperAppDir.tsx",
    "created_at": "2025-08-25T05:44:48+00:00",
    "commented_code": "isBookingPage?: boolean;\n }>;\n \n-function PageWrapper(props: PageWrapperProps) {\n+function usePageStatus() {\n+  const [pageStatus, setPageStatus] = useState(\"200\");\n   const pathname = usePathname();\n-  let pageStatus = \"200\";\n-\n-  if (pathname === \"/404\") {\n-    pageStatus = \"404\";\n-  } else if (pathname === \"/500\") {\n-    pageStatus = \"500\";\n-  } else if (pathname === \"/403\") {\n-    pageStatus = \"403\";\n-  }\n+\n+  useEffect(() => {\n+    const checkForErrorPage = () => {\n+      const has404Content = document.querySelector('[data-testid=\"app-router-not-found-page\"]');\n+      if (has404Content) {\n+        setPageStatus(\"404\");\n+        return;\n+      }\n+\n+      const hasErrorContent = document.querySelector('[data-testid=\"app-router-error-page\"]');\n+      if (hasErrorContent) {\n+        setPageStatus(\"500\");\n+        return;\n+      }\n+    };\n+\n+    checkForErrorPage();\n+\n+    // Check after a small delay to ensure content has rendered\n+    const timer = setTimeout(checkForErrorPage, 100);\n+    return () => clearTimeout(timer);\n+  }, [pathname]);\n+\n+  return pageStatus;\n+}\n+\n+function PageWrapper(props: PageWrapperProps) {\n+  const pageStatus = usePageStatus();",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2297170252",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23320,
        "pr_file": "apps/web/components/PageWrapperAppDir.tsx",
        "discussion_id": "2297170252",
        "commented_code": "@@ -15,17 +16,37 @@ export type PageWrapperProps = Readonly<{\n   isBookingPage?: boolean;\n }>;\n \n-function PageWrapper(props: PageWrapperProps) {\n+function usePageStatus() {\n+  const [pageStatus, setPageStatus] = useState(\"200\");\n   const pathname = usePathname();\n-  let pageStatus = \"200\";\n-\n-  if (pathname === \"/404\") {\n-    pageStatus = \"404\";\n-  } else if (pathname === \"/500\") {\n-    pageStatus = \"500\";\n-  } else if (pathname === \"/403\") {\n-    pageStatus = \"403\";\n-  }\n+\n+  useEffect(() => {\n+    const checkForErrorPage = () => {\n+      const has404Content = document.querySelector('[data-testid=\"app-router-not-found-page\"]');\n+      if (has404Content) {\n+        setPageStatus(\"404\");\n+        return;\n+      }\n+\n+      const hasErrorContent = document.querySelector('[data-testid=\"app-router-error-page\"]');\n+      if (hasErrorContent) {\n+        setPageStatus(\"500\");\n+        return;\n+      }\n+    };\n+\n+    checkForErrorPage();\n+\n+    // Check after a small delay to ensure content has rendered\n+    const timer = setTimeout(checkForErrorPage, 100);\n+    return () => clearTimeout(timer);\n+  }, [pathname]);\n+\n+  return pageStatus;\n+}\n+\n+function PageWrapper(props: PageWrapperProps) {\n+  const pageStatus = usePageStatus();",
        "comment_created_at": "2025-08-25T05:44:48+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "It looks like the Script component renders only once so CalComPageStatus seems to have value of 200 always as per my testing.\r\n\r\nMaybe we could remove that script and start setting window.CalComPageStatus in useEffect itself.\r\n\r\n\r\nAnother thing is that embed reads the value on initialization and doesn't watch this value. I might have to adjust logic there as well. I can do that later, won't consider that change as blocking considering calcomPageStatus is broken already",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1665340896",
    "pr_number": 15661,
    "pr_file": "packages/features/bookings/Booker/components/BookEventForm/BookingFields.tsx",
    "created_at": "2024-07-04T08:30:04+00:00",
    "commented_code": "isDynamicGroupBooking: boolean;\n }) => {\n   const { t } = useLocale();\n-  const { watch, setValue } = useFormContext();\n+  const { watch, setValue, getValues } = useFormContext();\n   const locationResponse = watch(\"responses.location\");\n   const currentView = rescheduleUid ? \"reschedule\" : \"\";\n   const isInstantMeeting = useBookerStore((state) => state.isInstantMeeting);\n \n+  useEffect(() => {\n+    const firstLastNameField = fields.find((field) => field.variant === \"firstAndLastName\");\n+\n+    if (!firstLastNameField) {\n+      return;\n+    }\n+\n+    const variant = firstLastNameField.variant;\n+    if (\n+      firstLastNameField &&\n+      variant &&\n+      firstLastNameField.variantsConfig?.variants[variant].fields[1].required\n+    ) {\n+      const name = getValues(\"responses.name\");\n+      if (rescheduleUid && name?.split(\" \").length !== 2) {\n+        // if the owner of the meeting has changed the lastname to required after the booking was made,\n+        // we should allow the booking user to edit the name field\n+        setValue(\"responses.name\", \"\");",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1665340896",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 15661,
        "pr_file": "packages/features/bookings/Booker/components/BookEventForm/BookingFields.tsx",
        "discussion_id": "1665340896",
        "commented_code": "@@ -25,11 +26,34 @@ export const BookingFields = ({\n   isDynamicGroupBooking: boolean;\n }) => {\n   const { t } = useLocale();\n-  const { watch, setValue } = useFormContext();\n+  const { watch, setValue, getValues } = useFormContext();\n   const locationResponse = watch(\"responses.location\");\n   const currentView = rescheduleUid ? \"reschedule\" : \"\";\n   const isInstantMeeting = useBookerStore((state) => state.isInstantMeeting);\n \n+  useEffect(() => {\n+    const firstLastNameField = fields.find((field) => field.variant === \"firstAndLastName\");\n+\n+    if (!firstLastNameField) {\n+      return;\n+    }\n+\n+    const variant = firstLastNameField.variant;\n+    if (\n+      firstLastNameField &&\n+      variant &&\n+      firstLastNameField.variantsConfig?.variants[variant].fields[1].required\n+    ) {\n+      const name = getValues(\"responses.name\");\n+      if (rescheduleUid && name?.split(\" \").length !== 2) {\n+        // if the owner of the meeting has changed the lastname to required after the booking was made,\n+        // we should allow the booking user to edit the name field\n+        setValue(\"responses.name\", \"\");",
        "comment_created_at": "2024-07-04T08:30:04+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Why empty the field? Imo this is unnecessary, let the original response be there as we are anyways letting the booker edit the field.",
        "pr_file_module": null
      },
      {
        "comment_id": "1665483503",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 15661,
        "pr_file": "packages/features/bookings/Booker/components/BookEventForm/BookingFields.tsx",
        "discussion_id": "1665340896",
        "commented_code": "@@ -25,11 +26,34 @@ export const BookingFields = ({\n   isDynamicGroupBooking: boolean;\n }) => {\n   const { t } = useLocale();\n-  const { watch, setValue } = useFormContext();\n+  const { watch, setValue, getValues } = useFormContext();\n   const locationResponse = watch(\"responses.location\");\n   const currentView = rescheduleUid ? \"reschedule\" : \"\";\n   const isInstantMeeting = useBookerStore((state) => state.isInstantMeeting);\n \n+  useEffect(() => {\n+    const firstLastNameField = fields.find((field) => field.variant === \"firstAndLastName\");\n+\n+    if (!firstLastNameField) {\n+      return;\n+    }\n+\n+    const variant = firstLastNameField.variant;\n+    if (\n+      firstLastNameField &&\n+      variant &&\n+      firstLastNameField.variantsConfig?.variants[variant].fields[1].required\n+    ) {\n+      const name = getValues(\"responses.name\");\n+      if (rescheduleUid && name?.split(\" \").length !== 2) {\n+        // if the owner of the meeting has changed the lastname to required after the booking was made,\n+        // we should allow the booking user to edit the name field\n+        setValue(\"responses.name\", \"\");",
        "comment_created_at": "2024-07-04T10:12:01+00:00",
        "comment_author": "theonly1me",
        "comment_body": "@Amit91848 It's because of how the `react-hook-form` is setup; If we retain the `firstName` and the user goes ahead and just edits the `lastName` since it was empty, the field value would be updated from `somename` to `{lastName: 'lName'}` which then errors out during validation since it expects a `string`.\r\n\r\nMaking the fields empty and letting the user fill it out **during this edge case scenario** is a cleaner implementation in my opinion. Because of how tightly coupled the validation logic is, it could lead to bugs in other workflows handled correctly. However, if you are familiar with that logic, please feel free to take a stab at it.\r\n\r\nHere's a video reference of the issue I've described above:\r\n\r\nhttps://github.com/calcom/cal.com/assets/19223383/5b37c1f0-87db-4073-95d1-9cc7cd3c1bfe\r\n\r\nTLDR; I've actually spent quite some time on this yesterday, and in the end, this felt like the cleaner solution that won't cause other issues that affect the user experience.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864375601",
    "pr_number": 17924,
    "pr_file": "packages/features/eventtypes/components/tabs/availability/EventAvailabilityTab.tsx",
    "created_at": "2024-11-30T17:45:22+00:00",
    "commented_code": "{isPending ? (\n           <Spinner className=\"mt-2 h-6 w-6\" />\n         ) : (\n-          <Controller\n-            name={`hosts.${index}.scheduleId`}\n-            render={({ field }) => {\n-              return (\n-                <Select\n-                  placeholder={t(\"select\")}\n-                  options={options}\n-                  isSearchable={false}\n-                  onChange={(selected) => {\n-                    field.onChange(selected?.value || null);\n-                  }}\n-                  className={classNames(\n-                    \"block w-full min-w-0 flex-1 rounded-sm text-sm\",\n-                    customClassNames?.select\n-                  )}\n-                  innerClassNames={customClassNames?.innerClassNames}\n-                  value={value as AvailabilityOption}\n-                  components={{ Option, SingleValue }}\n-                  isMulti={false}\n-                  isDisabled={isPending}\n-                />\n-              );\n-            }}\n-          />\n+          <>\n+            {!userHasDefaultSchedule ? (\n+              <div className=\"my-2\">\n+                <Alert severity=\"warning\" title={t(\"view_only_edit_availability_not_onboarded\")} />\n+              </div>\n+            ) : (\n+              <Controller\n+                name={`hosts.${index}.scheduleId`}\n+                render={({ field }) => {\n+                  return (\n+                    <Select\n+                      placeholder={t(\"select\")}\n+                      options={options}\n+                      isSearchable={false}\n+                      onChange={(selected) => {\n+                        field.onChange(selected?.value || null);\n+                      }}\n+                      className={classNames(\n+                        \"block w-full min-w-0 flex-1 rounded-sm text-sm\",\n+                        customClassNames?.select\n+                      )}\n+                      innerClassNames={customClassNames?.innerClassNames}\n+                      value={value as AvailabilityOption}\n+                      components={{ Option, SingleValue }}\n+                      isMulti={false}",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1864375601",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 17924,
        "pr_file": "packages/features/eventtypes/components/tabs/availability/EventAvailabilityTab.tsx",
        "discussion_id": "1864375601",
        "commented_code": "@@ -450,30 +438,38 @@ const TeamMemberSchedule = ({\n         {isPending ? (\n           <Spinner className=\"mt-2 h-6 w-6\" />\n         ) : (\n-          <Controller\n-            name={`hosts.${index}.scheduleId`}\n-            render={({ field }) => {\n-              return (\n-                <Select\n-                  placeholder={t(\"select\")}\n-                  options={options}\n-                  isSearchable={false}\n-                  onChange={(selected) => {\n-                    field.onChange(selected?.value || null);\n-                  }}\n-                  className={classNames(\n-                    \"block w-full min-w-0 flex-1 rounded-sm text-sm\",\n-                    customClassNames?.select\n-                  )}\n-                  innerClassNames={customClassNames?.innerClassNames}\n-                  value={value as AvailabilityOption}\n-                  components={{ Option, SingleValue }}\n-                  isMulti={false}\n-                  isDisabled={isPending}\n-                />\n-              );\n-            }}\n-          />\n+          <>\n+            {!userHasDefaultSchedule ? (\n+              <div className=\"my-2\">\n+                <Alert severity=\"warning\" title={t(\"view_only_edit_availability_not_onboarded\")} />\n+              </div>\n+            ) : (\n+              <Controller\n+                name={`hosts.${index}.scheduleId`}\n+                render={({ field }) => {\n+                  return (\n+                    <Select\n+                      placeholder={t(\"select\")}\n+                      options={options}\n+                      isSearchable={false}\n+                      onChange={(selected) => {\n+                        field.onChange(selected?.value || null);\n+                      }}\n+                      className={classNames(\n+                        \"block w-full min-w-0 flex-1 rounded-sm text-sm\",\n+                        customClassNames?.select\n+                      )}\n+                      innerClassNames={customClassNames?.innerClassNames}\n+                      value={value as AvailabilityOption}\n+                      components={{ Option, SingleValue }}\n+                      isMulti={false}",
        "comment_created_at": "2024-11-30T17:45:22+00:00",
        "comment_author": "Amit91848",
        "comment_body": "![Screenshot 2024-11-30 230554](https://github.com/user-attachments/assets/f482864b-4db9-42ab-a21e-b3c50d99fd7c)\r\n\r\nShow proper message instead of just disabled select. Earlier this would throw error and it was unhandled, replaced that",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1775339659",
    "pr_number": 14243,
    "pr_file": "apps/web/pages/settings/my-account/bookings.tsx",
    "created_at": "2024-09-25T14:26:57+00:00",
    "commented_code": "+import { useForm, Controller } from \"react-hook-form\";\n+\n+import { IntervalLimitsManager } from \"@calcom/features/eventtypes/components/tabs/limits/EventLimitsTab\";\n+import SectionBottomActions from \"@calcom/features/settings/SectionBottomActions\";\n+import { getLayout } from \"@calcom/features/settings/layouts/SettingsLayout\";\n+import { validateIntervalLimitOrder, parseBookingLimit, classNames } from \"@calcom/lib\";\n+import { APP_NAME } from \"@calcom/lib/constants\";\n+import { useLocale } from \"@calcom/lib/hooks/useLocale\";\n+import { trpc } from \"@calcom/trpc/react\";\n+import type { RouterOutputs } from \"@calcom/trpc/react\";\n+import type { IntervalLimit } from \"@calcom/types/Calendar\";\n+import { Button, Form, Meta, SkeletonContainer, SkeletonText, showToast, SettingsToggle } from \"@calcom/ui\";\n+\n+import PageWrapper from \"@components/PageWrapper\";\n+\n+const SkeletonLoader = ({ title, description }: { title: string; description: string }) => {\n+  return (\n+    <SkeletonContainer>\n+      <Meta title={title} description={description} borderInShellHeader={false} />\n+      <div className=\"border-subtle mt-6 flex flex-col rounded-lg border px-4 py-6 sm:px-6\">\n+        <SkeletonText className=\"h-6 w-1/4\" />\n+        <SkeletonText className=\"mt-2 h-6 w-2/5\" />\n+      </div>\n+    </SkeletonContainer>\n+  );\n+};\n+\n+const BookingsView = ({ data }: { data: RouterOutputs[\"viewer\"][\"me\"] }) => {\n+  const { t } = useLocale();\n+  const bookingsLimitFormMethods = useForm({\n+    defaultValues: {\n+      bookingLimits: data?.bookingLimits as IntervalLimit,\n+    },\n+  });\n+\n+  const utils = trpc.useContext();\n+  const updateProfileMutation = trpc.viewer.updateProfile.useMutation({\n+    onSuccess: async () => {\n+      await utils.viewer.me.invalidate();\n+      bookingsLimitFormMethods.reset(bookingsLimitFormMethods.getValues());\n+    },\n+    onError: () => {\n+      showToast(t(\"failed_to_save_global_settings\"), \"error\");\n+    },\n+  });\n+\n+  const handleSubmit = async (values: { bookingLimits: IntervalLimit }) => {\n+    const { bookingLimits } = values;\n+    const parsedBookingLimits = parseBookingLimit(bookingLimits) || {};\n+    if (bookingLimits) {\n+      const isValid = validateIntervalLimitOrder(parsedBookingLimits);\n+      if (!isValid) throw new Error(t(\"event_setup_booking_limits_error\"));\n+    }\n+    updateProfileMutation.mutate({ ...values, bookingLimits: parsedBookingLimits });\n+  };\n+\n+  const watchBookingLimits = bookingsLimitFormMethods.watch(\"bookingLimits\");\n+\n+  return (\n+    <div>\n+      <Meta\n+        title={t(\"bookings\")}\n+        description={t(\"bookings_settings_description\", { appName: APP_NAME })}\n+        borderInShellHeader={false}\n+      />\n+      <Form form={bookingsLimitFormMethods} handleSubmit={handleSubmit}>\n+        <Controller\n+          name=\"bookingLimits\"\n+          render={({ field: { value } }) => {\n+            const isChecked = Object.keys(value ?? {}).length > 0;\n+            return (\n+              <SettingsToggle\n+                toggleSwitchAtTheEnd={true}\n+                labelClassName=\"text-sm\"\n+                title={t(\"limit_booking_frequency\")}\n+                description={t(\"global_limit_booking_frequency_description\")}\n+                checked={isChecked}\n+                onCheckedChange={(active) => {\n+                  if (active) {\n+                    bookingsLimitFormMethods.setValue(\"bookingLimits\", {\n+                      PER_DAY: 1,\n+                    });\n+                  } else {\n+                    bookingsLimitFormMethods.setValue(\"bookingLimits\", {});\n+                  }\n+                  handleSubmit(bookingsLimitFormMethods.getValues());",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1775339659",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 14243,
        "pr_file": "apps/web/pages/settings/my-account/bookings.tsx",
        "discussion_id": "1775339659",
        "commented_code": "@@ -0,0 +1,133 @@\n+import { useForm, Controller } from \"react-hook-form\";\n+\n+import { IntervalLimitsManager } from \"@calcom/features/eventtypes/components/tabs/limits/EventLimitsTab\";\n+import SectionBottomActions from \"@calcom/features/settings/SectionBottomActions\";\n+import { getLayout } from \"@calcom/features/settings/layouts/SettingsLayout\";\n+import { validateIntervalLimitOrder, parseBookingLimit, classNames } from \"@calcom/lib\";\n+import { APP_NAME } from \"@calcom/lib/constants\";\n+import { useLocale } from \"@calcom/lib/hooks/useLocale\";\n+import { trpc } from \"@calcom/trpc/react\";\n+import type { RouterOutputs } from \"@calcom/trpc/react\";\n+import type { IntervalLimit } from \"@calcom/types/Calendar\";\n+import { Button, Form, Meta, SkeletonContainer, SkeletonText, showToast, SettingsToggle } from \"@calcom/ui\";\n+\n+import PageWrapper from \"@components/PageWrapper\";\n+\n+const SkeletonLoader = ({ title, description }: { title: string; description: string }) => {\n+  return (\n+    <SkeletonContainer>\n+      <Meta title={title} description={description} borderInShellHeader={false} />\n+      <div className=\"border-subtle mt-6 flex flex-col rounded-lg border px-4 py-6 sm:px-6\">\n+        <SkeletonText className=\"h-6 w-1/4\" />\n+        <SkeletonText className=\"mt-2 h-6 w-2/5\" />\n+      </div>\n+    </SkeletonContainer>\n+  );\n+};\n+\n+const BookingsView = ({ data }: { data: RouterOutputs[\"viewer\"][\"me\"] }) => {\n+  const { t } = useLocale();\n+  const bookingsLimitFormMethods = useForm({\n+    defaultValues: {\n+      bookingLimits: data?.bookingLimits as IntervalLimit,\n+    },\n+  });\n+\n+  const utils = trpc.useContext();\n+  const updateProfileMutation = trpc.viewer.updateProfile.useMutation({\n+    onSuccess: async () => {\n+      await utils.viewer.me.invalidate();\n+      bookingsLimitFormMethods.reset(bookingsLimitFormMethods.getValues());\n+    },\n+    onError: () => {\n+      showToast(t(\"failed_to_save_global_settings\"), \"error\");\n+    },\n+  });\n+\n+  const handleSubmit = async (values: { bookingLimits: IntervalLimit }) => {\n+    const { bookingLimits } = values;\n+    const parsedBookingLimits = parseBookingLimit(bookingLimits) || {};\n+    if (bookingLimits) {\n+      const isValid = validateIntervalLimitOrder(parsedBookingLimits);\n+      if (!isValid) throw new Error(t(\"event_setup_booking_limits_error\"));\n+    }\n+    updateProfileMutation.mutate({ ...values, bookingLimits: parsedBookingLimits });\n+  };\n+\n+  const watchBookingLimits = bookingsLimitFormMethods.watch(\"bookingLimits\");\n+\n+  return (\n+    <div>\n+      <Meta\n+        title={t(\"bookings\")}\n+        description={t(\"bookings_settings_description\", { appName: APP_NAME })}\n+        borderInShellHeader={false}\n+      />\n+      <Form form={bookingsLimitFormMethods} handleSubmit={handleSubmit}>\n+        <Controller\n+          name=\"bookingLimits\"\n+          render={({ field: { value } }) => {\n+            const isChecked = Object.keys(value ?? {}).length > 0;\n+            return (\n+              <SettingsToggle\n+                toggleSwitchAtTheEnd={true}\n+                labelClassName=\"text-sm\"\n+                title={t(\"limit_booking_frequency\")}\n+                description={t(\"global_limit_booking_frequency_description\")}\n+                checked={isChecked}\n+                onCheckedChange={(active) => {\n+                  if (active) {\n+                    bookingsLimitFormMethods.setValue(\"bookingLimits\", {\n+                      PER_DAY: 1,\n+                    });\n+                  } else {\n+                    bookingsLimitFormMethods.setValue(\"bookingLimits\", {});\n+                  }\n+                  handleSubmit(bookingsLimitFormMethods.getValues());",
        "comment_created_at": "2024-09-25T14:26:57+00:00",
        "comment_author": "CarinaWolli",
        "comment_body": "toast is missing when enabling/disabling toggle",
        "pr_file_module": null
      }
    ]
  }
]