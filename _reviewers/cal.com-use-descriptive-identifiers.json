[
  {
    "discussion_id": "2242311323",
    "pr_number": 22186,
    "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
    "created_at": "2025-07-30T11:19:55+00:00",
    "commented_code": "hostname,\n     forcedSlug,\n     areCalendarEventsEnabled = true,\n+    traceContext: passedTraceContext,\n   } = input;\n \n+  const traceContext = passedTraceContext\n+    ? distributedTracing.updateTrace(passedTraceContext, {\n+        eventTypeId: rawBookingData.eventTypeId,\n+        userId: userId,\n+        eventTypeSlug: rawBookingData.eventTypeSlug,\n+        userInfo: rawBookingData.user,",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2242311323",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22186,
        "pr_file": "packages/features/bookings/lib/handleNewBooking.ts",
        "discussion_id": "2242311323",
        "commented_code": "@@ -401,8 +402,33 @@ async function handler(\n     hostname,\n     forcedSlug,\n     areCalendarEventsEnabled = true,\n+    traceContext: passedTraceContext,\n   } = input;\n \n+  const traceContext = passedTraceContext\n+    ? distributedTracing.updateTrace(passedTraceContext, {\n+        eventTypeId: rawBookingData.eventTypeId,\n+        userId: userId,\n+        eventTypeSlug: rawBookingData.eventTypeSlug,\n+        userInfo: rawBookingData.user,",
        "comment_created_at": "2025-07-30T11:19:55+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "The name userInfo is too generic and smells PII. It looks like it is just the slug, which could be an array in case of dynamic group. Let's name it better bookingSlug maybe? We could keep it a string only and give it a strict type. In case of array it could be comma separated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2285288267",
    "pr_number": 23114,
    "pr_file": "packages/app-store/locations.ts",
    "created_at": "2025-08-19T13:31:08+00:00",
    "commented_code": "category: \"conferencing\",\n     messageForOrganizer: \"\",\n     linkType: \"static\",\n+    customLabel: true,",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2285288267",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 23114,
        "pr_file": "packages/app-store/locations.ts",
        "discussion_id": "2285288267",
        "commented_code": "@@ -144,18 +146,21 @@ export const defaultLocations: DefaultEventLocationType[] = [\n     category: \"conferencing\",\n     messageForOrganizer: \"\",\n     linkType: \"static\",\n+    customLabel: true,",
        "comment_created_at": "2025-08-19T13:31:08+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "This _customLabel_ boolean creates confusion with _customLabel_ string available in option object on client side.\r\n\r\nMaybe we should rename it to something like `supportsCustomLabel` or `hasCustomLabel`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2282669395",
    "pr_number": 22954,
    "pr_file": "apps/api/v2/src/modules/organizations/teams/schedules/organizations-teams-schedules.service.ts",
    "created_at": "2025-08-18T15:01:05+00:00",
    "commented_code": "+import { OutputSchedulesService_2024_06_11 } from \"@/ee/schedules/schedules_2024_06_11/services/output-schedules.service\";\n+import { OrganizationSchedulesRepository } from \"@/modules/organizations/schedules/organizations-schedules.repository\";\n+import { TeamsRepository } from \"@/modules/teams/teams/teams.repository\";\n+import { Injectable } from \"@nestjs/common\";\n+\n+import { ScheduleOutput_2024_06_11 } from \"@calcom/platform-types\";\n+\n+@Injectable()\n+export class OrganizationsTeamsSchedulesService {\n+  constructor(\n+    private readonly organizationSchedulesRepository: OrganizationSchedulesRepository,\n+    private readonly outputSchedulesService: OutputSchedulesService_2024_06_11,\n+    private readonly teamsRepository: TeamsRepository\n+  ) {}\n+\n+  async getOrganizationTeamSchedules(teamId: number, skip = 0, take = 250) {",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2282669395",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 22954,
        "pr_file": "apps/api/v2/src/modules/organizations/teams/schedules/organizations-teams-schedules.service.ts",
        "discussion_id": "2282669395",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { OutputSchedulesService_2024_06_11 } from \"@/ee/schedules/schedules_2024_06_11/services/output-schedules.service\";\n+import { OrganizationSchedulesRepository } from \"@/modules/organizations/schedules/organizations-schedules.repository\";\n+import { TeamsRepository } from \"@/modules/teams/teams/teams.repository\";\n+import { Injectable } from \"@nestjs/common\";\n+\n+import { ScheduleOutput_2024_06_11 } from \"@calcom/platform-types\";\n+\n+@Injectable()\n+export class OrganizationsTeamsSchedulesService {\n+  constructor(\n+    private readonly organizationSchedulesRepository: OrganizationSchedulesRepository,\n+    private readonly outputSchedulesService: OutputSchedulesService_2024_06_11,\n+    private readonly teamsRepository: TeamsRepository\n+  ) {}\n+\n+  async getOrganizationTeamSchedules(teamId: number, skip = 0, take = 250) {",
        "comment_created_at": "2025-08-18T15:01:05+00:00",
        "comment_author": "supalarry",
        "comment_body": "I think `OrganizationsTeamsSchedulesService` should instead be `TeamsSchedulesService` because `getOrganizationTeamSchedules` has no organization related parameters:\r\n1. Rename service to `TeamsSchedulesService` and move into `src/modules/teams/schedules\r\n2. Rename `getOrganizationTeamSchedules` to `getTeamSchedules`.\r\n3. Use this service to fetch organization team users schedules and team users schedules.\r\n\r\nThe second reason is that currently `OrganizationsTeamsSchedulesService` and `TeamsSchedulesService` have the same code when we can just reuse `TeamsSchedulesService`.\r\n\r\nDoes it make sense?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1654380577",
    "pr_number": 15295,
    "pr_file": "packages/features/ee/teams/lib/removeMember.ts",
    "created_at": "2024-06-26T08:35:12+00:00",
    "commented_code": "memberId,\n   teamId,\n   isOrg,\n+  redirectTo,\n }: {\n   memberId: number;\n   teamId: number;\n   isOrg: boolean;\n+  redirectTo?: number;",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1654380577",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 15295,
        "pr_file": "packages/features/ee/teams/lib/removeMember.ts",
        "discussion_id": "1654380577",
        "commented_code": "@@ -10,10 +12,12 @@ const removeMember = async ({\n   memberId,\n   teamId,\n   isOrg,\n+  redirectTo,\n }: {\n   memberId: number;\n   teamId: number;\n   isOrg: boolean;\n+  redirectTo?: number;",
        "comment_created_at": "2024-06-26T08:35:12+00:00",
        "comment_author": "hariombalhara",
        "comment_body": "`redirectToUserId` is more clear as `redirectTo` could be `username`, team slug etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1740406493",
    "pr_number": 16416,
    "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
    "created_at": "2024-09-02T06:50:44+00:00",
    "commented_code": "},\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n+      },\n+    });\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const attendees = originalRescheduledBooking?.attendees.map((attendee) => attendee.email);\n+    const users = await prisma.user.findMany({",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "1740406493",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1740406493",
        "commented_code": "@@ -405,15 +403,43 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n+      },\n+    });\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const attendees = originalRescheduledBooking?.attendees.map((attendee) => attendee.email);\n+    const users = await prisma.user.findMany({",
        "comment_created_at": "2024-09-02T06:50:44+00:00",
        "comment_author": "Amit91848",
        "comment_body": "```suggestion\r\n    const attendeesAvailability = await prisma.user.findMany({\r\n```\r\n\r\nOr something similar. Only naming it users doesn't give any context to what the variable stores.",
        "pr_file_module": null
      },
      {
        "comment_id": "1745962200",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 16416,
        "pr_file": "packages/trpc/server/routers/viewer/slots/util.ts",
        "discussion_id": "1740406493",
        "commented_code": "@@ -405,15 +403,43 @@ export async function getAvailableSlots({ input, ctx }: GetScheduleOptions): Pro\n       },\n       select: {\n         userId: true,\n+        attendees: {\n+          select: {\n+            email: true,\n+          },\n+        },\n+      },\n+    });\n+    if (\n+      eventType.rescheduleWithSameRoundRobinHost &&\n+      eventType.schedulingType === SchedulingType.ROUND_ROBIN\n+    ) {\n+      hosts = hosts.filter((host) => host.user.id === originalRescheduledBooking?.userId || 0);\n+    }\n+    const attendees = originalRescheduledBooking?.attendees.map((attendee) => attendee.email);\n+    const users = await prisma.user.findMany({",
        "comment_created_at": "2024-09-05T18:05:08+00:00",
        "comment_author": "kart1ka",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]