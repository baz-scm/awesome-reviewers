[
  {
    "discussion_id": "2173620412",
    "pr_number": 20773,
    "pr_file": "apps/web/app/(use-page-wrapper)/workflows/page.tsx",
    "created_at": "2025-06-29T07:08:51+00:00",
    "commented_code": "-// import { cookies, headers } from \"next/headers\";\n-// import { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n-// import { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n-// import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n-// import { WorkflowRepository } from \"@calcom/lib/server/repository/workflow\";\n+import { createRouterCaller } from \"app/_trpc/context\";\n+import type { PageProps } from \"app/_types\";\n+import { _generateMetadata } from \"app/_utils\";\n+import { getSession } from \"next-auth/react\";\n+import { cookies, headers } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+\n import LegacyPage from \"@calcom/features/ee/workflows/pages/index\";\n+import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n+import { workflowsRouter } from \"@calcom/trpc/server/routers/viewer/workflows/_router\";\n+\n+import { buildLegacyCtx } from \"@lib/buildLegacyCtx\";\n \n-const Page = async () => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n-\n-  // const filters = getTeamsFiltersFromQuery({ ...searchParams, ...params });\n-\n-  // let filteredList;\n-  // try {\n-  //   filteredList = await WorkflowRepository.getFilteredList({\n-  //     userId: user?.id,\n-  //     input: {\n-  //       filters,\n-  //     },\n-  //   });\n-  // } catch (err) {}\n-\n-  return (\n-    <LegacyPage\n-    //  filteredList={filteredList}\n-    />\n+export const generateMetadata = async () =>\n+  await _generateMetadata(\n+    (t) => t(\"workflows\"),\n+    (t) => t(\"workflows_to_automate_notifications\"),\n+    undefined,\n+    undefined,\n+    \"/workflows\"\n   );\n+\n+const Page = async ({ params, searchParams }: PageProps) => {\n+  const _searchParams = await searchParams;\n+  const context = buildLegacyCtx(await headers(), await cookies(), await params, _searchParams);\n+  const session = await getSession(context);\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n+  const filters = getTeamsFiltersFromQuery(_searchParams);\n+\n+  const hasValidLicense = session?.hasValidLicense ?? false;\n+  const caller = await createRouterCaller(workflowsRouter);\n+\n+  const initialData = await caller.filteredList({ filters });\n+",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2173620412",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20773,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/page.tsx",
        "discussion_id": "2173620412",
        "commented_code": "@@ -1,31 +1,42 @@\n-// import { cookies, headers } from \"next/headers\";\n-// import { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n-// import { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n-// import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n-// import { WorkflowRepository } from \"@calcom/lib/server/repository/workflow\";\n+import { createRouterCaller } from \"app/_trpc/context\";\n+import type { PageProps } from \"app/_types\";\n+import { _generateMetadata } from \"app/_utils\";\n+import { getSession } from \"next-auth/react\";\n+import { cookies, headers } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+\n import LegacyPage from \"@calcom/features/ee/workflows/pages/index\";\n+import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n+import { workflowsRouter } from \"@calcom/trpc/server/routers/viewer/workflows/_router\";\n+\n+import { buildLegacyCtx } from \"@lib/buildLegacyCtx\";\n \n-const Page = async () => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n-\n-  // const filters = getTeamsFiltersFromQuery({ ...searchParams, ...params });\n-\n-  // let filteredList;\n-  // try {\n-  //   filteredList = await WorkflowRepository.getFilteredList({\n-  //     userId: user?.id,\n-  //     input: {\n-  //       filters,\n-  //     },\n-  //   });\n-  // } catch (err) {}\n-\n-  return (\n-    <LegacyPage\n-    //  filteredList={filteredList}\n-    />\n+export const generateMetadata = async () =>\n+  await _generateMetadata(\n+    (t) => t(\"workflows\"),\n+    (t) => t(\"workflows_to_automate_notifications\"),\n+    undefined,\n+    undefined,\n+    \"/workflows\"\n   );\n+\n+const Page = async ({ params, searchParams }: PageProps) => {\n+  const _searchParams = await searchParams;\n+  const context = buildLegacyCtx(await headers(), await cookies(), await params, _searchParams);\n+  const session = await getSession(context);\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n+  const filters = getTeamsFiltersFromQuery(_searchParams);\n+\n+  const hasValidLicense = session?.hasValidLicense ?? false;\n+  const caller = await createRouterCaller(workflowsRouter);\n+\n+  const initialData = await caller.filteredList({ filters });\n+",
        "comment_created_at": "2025-06-29T07:08:51+00:00",
        "comment_author": "Amit91848",
        "comment_body": "We are also using unstable_cache from next/cache. You can directly call repository method in it, removing caller wherever possible \r\n```ts\r\nconst getWorkflowsFilteredListCached = unstable_cache(\r\n  async (filters) => { //filters should serializable\r\n    return await WorkflowRepository.getFilteredList(filters);\r\n  },\r\n  [\"getWorkflowsFilteredListCached\"],\r\n  {\r\n    revalidate: 3600,\r\n    tags: [\"viewer.workflows.filteredList\"]\r\n   }\r\n  )\r\n```\r\n\r\nthen you can revalidate using revalidateTags from next/cache inside crud actions",
        "pr_file_module": null
      },
      {
        "comment_id": "2173620874",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20773,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/page.tsx",
        "discussion_id": "2173620412",
        "commented_code": "@@ -1,31 +1,42 @@\n-// import { cookies, headers } from \"next/headers\";\n-// import { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n-// import { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n-// import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n-// import { WorkflowRepository } from \"@calcom/lib/server/repository/workflow\";\n+import { createRouterCaller } from \"app/_trpc/context\";\n+import type { PageProps } from \"app/_types\";\n+import { _generateMetadata } from \"app/_utils\";\n+import { getSession } from \"next-auth/react\";\n+import { cookies, headers } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+\n import LegacyPage from \"@calcom/features/ee/workflows/pages/index\";\n+import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n+import { workflowsRouter } from \"@calcom/trpc/server/routers/viewer/workflows/_router\";\n+\n+import { buildLegacyCtx } from \"@lib/buildLegacyCtx\";\n \n-const Page = async () => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n-\n-  // const filters = getTeamsFiltersFromQuery({ ...searchParams, ...params });\n-\n-  // let filteredList;\n-  // try {\n-  //   filteredList = await WorkflowRepository.getFilteredList({\n-  //     userId: user?.id,\n-  //     input: {\n-  //       filters,\n-  //     },\n-  //   });\n-  // } catch (err) {}\n-\n-  return (\n-    <LegacyPage\n-    //  filteredList={filteredList}\n-    />\n+export const generateMetadata = async () =>\n+  await _generateMetadata(\n+    (t) => t(\"workflows\"),\n+    (t) => t(\"workflows_to_automate_notifications\"),\n+    undefined,\n+    undefined,\n+    \"/workflows\"\n   );\n+\n+const Page = async ({ params, searchParams }: PageProps) => {\n+  const _searchParams = await searchParams;\n+  const context = buildLegacyCtx(await headers(), await cookies(), await params, _searchParams);\n+  const session = await getSession(context);\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n+  const filters = getTeamsFiltersFromQuery(_searchParams);\n+\n+  const hasValidLicense = session?.hasValidLicense ?? false;\n+  const caller = await createRouterCaller(workflowsRouter);\n+\n+  const initialData = await caller.filteredList({ filters });\n+",
        "comment_created_at": "2025-06-29T07:11:01+00:00",
        "comment_author": "Amit91848",
        "comment_body": "You can check implementation here \r\nhttps://github.com/calcom/cal.com/blob/f0214f90f25140f231f08f0f38a99dfadae25cad/apps/web/app/cache/travelSchedule.ts#L9-L26",
        "pr_file_module": null
      },
      {
        "comment_id": "2173623481",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20773,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/page.tsx",
        "discussion_id": "2173620412",
        "commented_code": "@@ -1,31 +1,42 @@\n-// import { cookies, headers } from \"next/headers\";\n-// import { getServerSession } from \"@calcom/features/auth/lib/getServerSession\";\n-// import { buildLegacyRequest } from \"@lib/buildLegacyCtx\";\n-// import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n-// import { WorkflowRepository } from \"@calcom/lib/server/repository/workflow\";\n+import { createRouterCaller } from \"app/_trpc/context\";\n+import type { PageProps } from \"app/_types\";\n+import { _generateMetadata } from \"app/_utils\";\n+import { getSession } from \"next-auth/react\";\n+import { cookies, headers } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+\n import LegacyPage from \"@calcom/features/ee/workflows/pages/index\";\n+import { getTeamsFiltersFromQuery } from \"@calcom/features/filters/lib/getTeamsFiltersFromQuery\";\n+import { workflowsRouter } from \"@calcom/trpc/server/routers/viewer/workflows/_router\";\n+\n+import { buildLegacyCtx } from \"@lib/buildLegacyCtx\";\n \n-const Page = async () => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n-\n-  // const filters = getTeamsFiltersFromQuery({ ...searchParams, ...params });\n-\n-  // let filteredList;\n-  // try {\n-  //   filteredList = await WorkflowRepository.getFilteredList({\n-  //     userId: user?.id,\n-  //     input: {\n-  //       filters,\n-  //     },\n-  //   });\n-  // } catch (err) {}\n-\n-  return (\n-    <LegacyPage\n-    //  filteredList={filteredList}\n-    />\n+export const generateMetadata = async () =>\n+  await _generateMetadata(\n+    (t) => t(\"workflows\"),\n+    (t) => t(\"workflows_to_automate_notifications\"),\n+    undefined,\n+    undefined,\n+    \"/workflows\"\n   );\n+\n+const Page = async ({ params, searchParams }: PageProps) => {\n+  const _searchParams = await searchParams;\n+  const context = buildLegacyCtx(await headers(), await cookies(), await params, _searchParams);\n+  const session = await getSession(context);\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n+  const filters = getTeamsFiltersFromQuery(_searchParams);\n+\n+  const hasValidLicense = session?.hasValidLicense ?? false;\n+  const caller = await createRouterCaller(workflowsRouter);\n+\n+  const initialData = await caller.filteredList({ filters });\n+",
        "comment_created_at": "2025-06-29T07:14:01+00:00",
        "comment_author": "Amit91848",
        "comment_body": "```suggestion\r\n  const filters = getTeamsFiltersFromQuery(_searchParams);\r\n\r\n  const initialData = await getWorkflowsFilteredListCached(filters);\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173629305",
    "pr_number": 20778,
    "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
    "created_at": "2025-06-29T07:21:11+00:00",
    "commented_code": "});\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n-  if (!parsed.success) throw new Error(\"Invalid workflow id\");\n-\n-  // const workflow = await WorkflowRepository.getById({ id: +parsed.data.workflow });\n-  // let verifiedEmails, verifiedNumbers;\n-  // try {\n-  //   verifiedEmails = await WorkflowRepository.getVerifiedEmails({\n-  //     userEmail: user?.email ?? null,\n-  //     userId: user?.id ?? null,\n-  //     teamId: workflow?.team?.id,\n-  //   });\n-  // } catch (err) {}\n-  // try {\n-  //   verifiedNumbers = await WorkflowRepository.getVerifiedNumbers({\n-  //     userId: user?.id ?? null,\n-  //     teamId: workflow?.team?.id,\n-  //   });\n-  // } catch (err) {}\n+      \n+  if (!parsed.success) {\n+    notFound();\n+  }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);",
    "repo_full_name": "calcom/cal.com",
    "discussion_comments": [
      {
        "comment_id": "2173629305",
        "repo_full_name": "calcom/cal.com",
        "pr_number": 20778,
        "pr_file": "apps/web/app/(use-page-wrapper)/workflows/[workflow]/page.tsx",
        "discussion_id": "2173629305",
        "commented_code": "@@ -16,31 +29,48 @@ const querySchema = z.object({\n });\n \n const Page = async ({ params }: PageProps) => {\n-  // const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n-  // const user = session?.user;\n+  const session = await getServerSession({ req: buildLegacyRequest(await headers(), await cookies()) });\n+\n+  if (!session?.user?.id) {\n+    redirect(\"/auth/login\");\n+  }\n+\n   const parsed = querySchema.safeParse(await params);\n-  if (!parsed.success) throw new Error(\"Invalid workflow id\");\n-\n-  // const workflow = await WorkflowRepository.getById({ id: +parsed.data.workflow });\n-  // let verifiedEmails, verifiedNumbers;\n-  // try {\n-  //   verifiedEmails = await WorkflowRepository.getVerifiedEmails({\n-  //     userEmail: user?.email ?? null,\n-  //     userId: user?.id ?? null,\n-  //     teamId: workflow?.team?.id,\n-  //   });\n-  // } catch (err) {}\n-  // try {\n-  //   verifiedNumbers = await WorkflowRepository.getVerifiedNumbers({\n-  //     userId: user?.id ?? null,\n-  //     teamId: workflow?.team?.id,\n-  //   });\n-  // } catch (err) {}\n+      \n+  if (!parsed.success) {\n+    notFound();\n+  }\n+  const workFlowId = parsed.data.workflow;\n+\n+  const [workflowCaller, eventCaller, userCaller] = await Promise.all([\n+    createRouterCaller(workflowsRouter),\n+    createRouterCaller(eventTypesRouter),\n+    createRouterCaller(meRouter),\n+  ]);",
        "comment_created_at": "2025-06-29T07:21:11+00:00",
        "comment_author": "Amit91848",
        "comment_body": "Can directly use Repository methods inside unstable_cache here wherever possible\r\nhttps://github.com/calcom/cal.com/pull/20773/files#r2173620412",
        "pr_file_module": null
      }
    ]
  }
]