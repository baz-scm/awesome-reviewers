[
  {
    "discussion_id": "1697031449",
    "pr_number": 6622,
    "pr_file": "tests/terraform/checks/test_multiple_skips.py",
    "created_at": "2024-07-30T14:07:07+00:00",
    "commented_code": "+import unittest\n+from pathlib import Path\n+\n+from checkov.runner_filter import RunnerFilter\n+from checkov.terraform.runner import Runner\n+\n+\n+class TestMultipleSkips(unittest.TestCase):\n+\n+    def test(self) -> None:\n+        # given\n+        test_files_dir = Path(__file__).parent / \"a example skip\"",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1697031449",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6622,
        "pr_file": "tests/terraform/checks/test_multiple_skips.py",
        "discussion_id": "1697031449",
        "commented_code": "@@ -0,0 +1,27 @@\n+import unittest\n+from pathlib import Path\n+\n+from checkov.runner_filter import RunnerFilter\n+from checkov.terraform.runner import Runner\n+\n+\n+class TestMultipleSkips(unittest.TestCase):\n+\n+    def test(self) -> None:\n+        # given\n+        test_files_dir = Path(__file__).parent / \"a example skip\"",
        "comment_created_at": "2024-07-30T14:07:07+00:00",
        "comment_author": "ChanochShayner",
        "comment_body": "```suggestion\r\n        test_files_dir = Path(__file__).parent / \"a_example_skip\"\r\n```\r\nPlease use one word in the file names.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1624193463",
    "pr_number": 6390,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-06-03T10:30:39+00:00",
    "commented_code": "self._modify_invalid_secrets_check_result_to_skipped(report)\n             return report\n \n+    @staticmethod\n+    def _prioritise_secrets(secret_records: Dict[str, SecretsRecord], secret_key: str, check_id: str) -> bool:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1624193463",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6390,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1624193463",
        "commented_code": "@@ -319,6 +319,17 @@ def run(\n                 self._modify_invalid_secrets_check_result_to_skipped(report)\n             return report\n \n+    @staticmethod\n+    def _prioritise_secrets(secret_records: Dict[str, SecretsRecord], secret_key: str, check_id: str) -> bool:",
        "comment_created_at": "2024-06-03T10:30:39+00:00",
        "comment_author": "tronxd",
        "comment_body": "```suggestion\r\n    def _should_prioritise_secrets(secret_records: Dict[str, SecretsRecord], secret_key: str, check_id: str) -> bool:\r\n```\r\neither rename or change the return type to not be a boolean",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1433918818",
    "pr_number": 5892,
    "pr_file": "checkov/sast/record.py",
    "created_at": "2023-12-21T11:01:40+00:00",
    "commented_code": "self.cwe = cwe\n         self.owasp = owasp\n         self.show_severity = show_severity\n+        self.dataflow = data_flow",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1433918818",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5892,
        "pr_file": "checkov/sast/record.py",
        "discussion_id": "1433918818",
        "commented_code": "@@ -43,6 +45,7 @@ def __init__(self,\n         self.cwe = cwe\n         self.owasp = owasp\n         self.show_severity = show_severity\n+        self.dataflow = data_flow",
        "comment_created_at": "2023-12-21T11:01:40+00:00",
        "comment_author": "arielkru",
        "comment_body": "```suggestion\r\n        self.data_flow = data_flow\r\n```\r\nno?",
        "pr_file_module": null
      },
      {
        "comment_id": "1433928260",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5892,
        "pr_file": "checkov/sast/record.py",
        "discussion_id": "1433918818",
        "commented_code": "@@ -43,6 +45,7 @@ def __init__(self,\n         self.cwe = cwe\n         self.owasp = owasp\n         self.show_severity = show_severity\n+        self.dataflow = data_flow",
        "comment_created_at": "2023-12-21T11:10:25+00:00",
        "comment_author": "arielkru",
        "comment_body": "I think its better to add a `metadata` that keeps the structure of our report, so its easier to extend or change in the future. So in this case its `metadata.taint_flow` (originaly its taint_mode but I think tait_flow is clearer)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1114996763",
    "pr_number": 4375,
    "pr_file": "checkov/terraform/checks/resource/aws/LambdaServicePermission.py",
    "created_at": "2023-02-22T21:44:14+00:00",
    "commented_code": "+from checkov.common.models.enums import CheckResult, CheckCategories\n+from checkov.terraform.checks.resource.base_resource_check import BaseResourceCheck\n+\n+\n+class LambdaServicePermission(BaseResourceCheck):\n+    def __init__(self):\n+        # This is the full description of your check\n+        description = \"Ensure that when a Lambda Function Permission is delegated to a service as principal, that the permission is scoped to either a SourceArn or a SourceAccount.\"\n+\n+        # This is the Unique ID for your check\n+        id = \"CKV_AWS_293\"\n+\n+        # These are the terraform objects supported by this check (ex: aws_iam_policy_document)\n+        supported_resources = ['aws_lambda_permission']\n+\n+        # Valid CheckCategories are defined in checkov/common/models/enums.py\n+        categories = [CheckCategories.GENERAL_SECURITY]\n+        super().__init__(name=description, id=id, categories=categories, supported_resources=supported_resources)\n+\n+    def scan_resource_conf(self, conf):\n+        # Replace this with the custom logic for your check\n+        principal = conf.get(\"principal\", [])\n+        self.evaluated_keys = [\"principal\"]\n+        principal_parts = principal[0].split('.')\n+        try:\n+            if principal_parts[1] == 'amazonaws' and principal_parts[2] == 'com':  # This confirms that the principal is set as a service principal.\n+                if 'source_arn' in conf.keys() or 'source_account' in conf.keys():  # If either of these are set, we're good and the check should pass.\n+                    self.evaluated_keys = [\"principal\", \"source_account\", \"source_arn\"]",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1114996763",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4375,
        "pr_file": "checkov/terraform/checks/resource/aws/LambdaServicePermission.py",
        "discussion_id": "1114996763",
        "commented_code": "@@ -0,0 +1,38 @@\n+from checkov.common.models.enums import CheckResult, CheckCategories\n+from checkov.terraform.checks.resource.base_resource_check import BaseResourceCheck\n+\n+\n+class LambdaServicePermission(BaseResourceCheck):\n+    def __init__(self):\n+        # This is the full description of your check\n+        description = \"Ensure that when a Lambda Function Permission is delegated to a service as principal, that the permission is scoped to either a SourceArn or a SourceAccount.\"\n+\n+        # This is the Unique ID for your check\n+        id = \"CKV_AWS_293\"\n+\n+        # These are the terraform objects supported by this check (ex: aws_iam_policy_document)\n+        supported_resources = ['aws_lambda_permission']\n+\n+        # Valid CheckCategories are defined in checkov/common/models/enums.py\n+        categories = [CheckCategories.GENERAL_SECURITY]\n+        super().__init__(name=description, id=id, categories=categories, supported_resources=supported_resources)\n+\n+    def scan_resource_conf(self, conf):\n+        # Replace this with the custom logic for your check\n+        principal = conf.get(\"principal\", [])\n+        self.evaluated_keys = [\"principal\"]\n+        principal_parts = principal[0].split('.')\n+        try:\n+            if principal_parts[1] == 'amazonaws' and principal_parts[2] == 'com':  # This confirms that the principal is set as a service principal.\n+                if 'source_arn' in conf.keys() or 'source_account' in conf.keys():  # If either of these are set, we're good and the check should pass.\n+                    self.evaluated_keys = [\"principal\", \"source_account\", \"source_arn\"]",
        "comment_created_at": "2023-02-22T21:44:14+00:00",
        "comment_author": "gruebel",
        "comment_body": "you can also use here `def get_evaluated_keys(self) -> List[str]:` instead of adding them dynamically",
        "pr_file_module": null
      },
      {
        "comment_id": "1341952529",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4375,
        "pr_file": "checkov/terraform/checks/resource/aws/LambdaServicePermission.py",
        "discussion_id": "1114996763",
        "commented_code": "@@ -0,0 +1,38 @@\n+from checkov.common.models.enums import CheckResult, CheckCategories\n+from checkov.terraform.checks.resource.base_resource_check import BaseResourceCheck\n+\n+\n+class LambdaServicePermission(BaseResourceCheck):\n+    def __init__(self):\n+        # This is the full description of your check\n+        description = \"Ensure that when a Lambda Function Permission is delegated to a service as principal, that the permission is scoped to either a SourceArn or a SourceAccount.\"\n+\n+        # This is the Unique ID for your check\n+        id = \"CKV_AWS_293\"\n+\n+        # These are the terraform objects supported by this check (ex: aws_iam_policy_document)\n+        supported_resources = ['aws_lambda_permission']\n+\n+        # Valid CheckCategories are defined in checkov/common/models/enums.py\n+        categories = [CheckCategories.GENERAL_SECURITY]\n+        super().__init__(name=description, id=id, categories=categories, supported_resources=supported_resources)\n+\n+    def scan_resource_conf(self, conf):\n+        # Replace this with the custom logic for your check\n+        principal = conf.get(\"principal\", [])\n+        self.evaluated_keys = [\"principal\"]\n+        principal_parts = principal[0].split('.')\n+        try:\n+            if principal_parts[1] == 'amazonaws' and principal_parts[2] == 'com':  # This confirms that the principal is set as a service principal.\n+                if 'source_arn' in conf.keys() or 'source_account' in conf.keys():  # If either of these are set, we're good and the check should pass.\n+                    self.evaluated_keys = [\"principal\", \"source_account\", \"source_arn\"]",
        "comment_created_at": "2023-09-30T12:14:41+00:00",
        "comment_author": "andyloughran",
        "comment_body": "@gruebel apologies for the delay - I think I've understand the function correctly if you could review my change.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1337296347",
    "pr_number": 5596,
    "pr_file": "checkov/common/bridgecrew/platform_integration.py",
    "created_at": "2023-09-26T14:21:18+00:00",
    "commented_code": "log_path = f'{self.support_repo_path}/checkov_results' if self.support_repo_path == self.repo_path else self.support_repo_path\n         persist_logs_stream(logs_stream, self.s3_client, self.support_bucket, log_path)\n \n-    def persist_graphs(self, graphs: dict[str, DiGraph | Graph], absolute_root_folder: str = '') -> None:\n+    def persist_graphs(self, graphs: dict[str, list[Tuple[DiGraph | Graph, Optional[str]]]], absolute_root_folder: str = '') -> None:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1337296347",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5596,
        "pr_file": "checkov/common/bridgecrew/platform_integration.py",
        "discussion_id": "1337296347",
        "commented_code": "@@ -558,7 +558,7 @@ def persist_logs_stream(self, logs_stream: StringIO) -> None:\n         log_path = f'{self.support_repo_path}/checkov_results' if self.support_repo_path == self.repo_path else self.support_repo_path\n         persist_logs_stream(logs_stream, self.s3_client, self.support_bucket, log_path)\n \n-    def persist_graphs(self, graphs: dict[str, DiGraph | Graph], absolute_root_folder: str = '') -> None:\n+    def persist_graphs(self, graphs: dict[str, list[Tuple[DiGraph | Graph, Optional[str]]]], absolute_root_folder: str = '') -> None:",
        "comment_created_at": "2023-09-26T14:21:18+00:00",
        "comment_author": "bo156",
        "comment_body": "use `tuple` and `str | None` instead of `Tuple` and `Optional` - the rest of the code here already uses this syntax so no need to mix",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269015816",
    "pr_number": 5350,
    "pr_file": "checkov/common/util/parser_utils.py",
    "created_at": "2023-07-20T06:58:18+00:00",
    "commented_code": "return f\"{path}{TERRAFORM_NESTED_MODULE_PATH_PREFIX}{module_dependency[:module_index]}{TERRAFORM_NESTED_MODULE_INDEX_SEPARATOR}{module_dependency_num}{module_dependency[module_index:]}{TERRAFORM_NESTED_MODULE_PATH_ENDING}\"\n \n \n-def get_module_from_full_path(file_path: TFDefinitionKeyType | None) -> Tuple[Optional[str], Optional[str]]:\n+def get_module_from_full_path(file_path: TFDefinitionKeyType | None) -> Tuple[Optional[str | TFDefinitionKeyType], Optional[str], Optional[str]]:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1269015816",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5350,
        "pr_file": "checkov/common/util/parser_utils.py",
        "discussion_id": "1269015816",
        "commented_code": "@@ -385,22 +388,29 @@ def get_tf_definition_key_from_module_dependency(\n     return f\"{path}{TERRAFORM_NESTED_MODULE_PATH_PREFIX}{module_dependency[:module_index]}{TERRAFORM_NESTED_MODULE_INDEX_SEPARATOR}{module_dependency_num}{module_dependency[module_index:]}{TERRAFORM_NESTED_MODULE_PATH_ENDING}\"\n \n \n-def get_module_from_full_path(file_path: TFDefinitionKeyType | None) -> Tuple[Optional[str], Optional[str]]:\n+def get_module_from_full_path(file_path: TFDefinitionKeyType | None) -> Tuple[Optional[str | TFDefinitionKeyType], Optional[str], Optional[str]]:",
        "comment_created_at": "2023-07-20T06:58:18+00:00",
        "comment_author": "bo156",
        "comment_body": "the typing here is inconsistent - can you use `str | None` instead of `Optional[str]`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1254498515",
    "pr_number": 5298,
    "pr_file": "checkov/common/util/env_vars_config.py",
    "created_at": "2023-07-06T14:08:14+00:00",
    "commented_code": "# need to fix usage, because the env var value is set inside the code\n         self.GITHUB_CONF_DIR_PATH = os.getenv(\"CKV_GITHUB_CONF_DIR_PATH\")\n \n+        # Allows using kustomize commands to directly edit the user's kustomization.yaml configurations\n+        self.ALLOW_KUSTOMIZE_FILE_EDITS = convert_str_to_bool(os.getenv(\"ALLOW_KUSTOMIZE_FILE_EDITS\", False))",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1254498515",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5298,
        "pr_file": "checkov/common/util/env_vars_config.py",
        "discussion_id": "1254498515",
        "commented_code": "@@ -78,5 +78,8 @@ def __init__(self) -> None:\n         # need to fix usage, because the env var value is set inside the code\n         self.GITHUB_CONF_DIR_PATH = os.getenv(\"CKV_GITHUB_CONF_DIR_PATH\")\n \n+        # Allows using kustomize commands to directly edit the user's kustomization.yaml configurations\n+        self.ALLOW_KUSTOMIZE_FILE_EDITS = convert_str_to_bool(os.getenv(\"ALLOW_KUSTOMIZE_FILE_EDITS\", False))",
        "comment_created_at": "2023-07-06T14:08:14+00:00",
        "comment_author": "gruebel",
        "comment_body": "```suggestion\r\n        self.ALLOW_KUSTOMIZE_FILE_EDITS = convert_str_to_bool(os.getenv(\"CHECKOV_ALLOW_KUSTOMIZE_FILE_EDITS\", False))\r\n```\r\nplease prefix it with `CHECKOV_` to make it clear, it is an internal env var.",
        "pr_file_module": null
      },
      {
        "comment_id": "1257442119",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5298,
        "pr_file": "checkov/common/util/env_vars_config.py",
        "discussion_id": "1254498515",
        "commented_code": "@@ -78,5 +78,8 @@ def __init__(self) -> None:\n         # need to fix usage, because the env var value is set inside the code\n         self.GITHUB_CONF_DIR_PATH = os.getenv(\"CKV_GITHUB_CONF_DIR_PATH\")\n \n+        # Allows using kustomize commands to directly edit the user's kustomization.yaml configurations\n+        self.ALLOW_KUSTOMIZE_FILE_EDITS = convert_str_to_bool(os.getenv(\"ALLOW_KUSTOMIZE_FILE_EDITS\", False))",
        "comment_created_at": "2023-07-09T08:53:29+00:00",
        "comment_author": "bo156",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1227968206",
    "pr_number": 5205,
    "pr_file": "checkov/common/util/feature_flag.py",
    "created_at": "2023-06-13T11:26:49+00:00",
    "commented_code": "+import os\n+import tempfile\n+from pathlib import Path\n+\n+from checkov.common.models.enums import CheckFailLevel\n+from checkov.common.util.consts import DEFAULT_EXTERNAL_MODULES_DIR\n+from checkov.common.util.http_utils import normalize_bc_url\n+from checkov.common.util.type_forcers import convert_str_to_bool, force_int\n+from checkov.version import version\n+\n+\n+class FeatureFlag:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1227968206",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5205,
        "pr_file": "checkov/common/util/feature_flag.py",
        "discussion_id": "1227968206",
        "commented_code": "@@ -0,0 +1,85 @@\n+import os\n+import tempfile\n+from pathlib import Path\n+\n+from checkov.common.models.enums import CheckFailLevel\n+from checkov.common.util.consts import DEFAULT_EXTERNAL_MODULES_DIR\n+from checkov.common.util.http_utils import normalize_bc_url\n+from checkov.common.util.type_forcers import convert_str_to_bool, force_int\n+from checkov.version import version\n+\n+\n+class FeatureFlag:",
        "comment_created_at": "2023-06-13T11:26:49+00:00",
        "comment_author": "Eliran-Turgeman",
        "comment_body": "IMO the naming is somewhat misleading since not all env vars are necessarily used as feature flags (BC_API_URL, BC_ROOT_DIR, CACHE_DIR for example)",
        "pr_file_module": null
      },
      {
        "comment_id": "1227970737",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5205,
        "pr_file": "checkov/common/util/feature_flag.py",
        "discussion_id": "1227968206",
        "commented_code": "@@ -0,0 +1,85 @@\n+import os\n+import tempfile\n+from pathlib import Path\n+\n+from checkov.common.models.enums import CheckFailLevel\n+from checkov.common.util.consts import DEFAULT_EXTERNAL_MODULES_DIR\n+from checkov.common.util.http_utils import normalize_bc_url\n+from checkov.common.util.type_forcers import convert_str_to_bool, force_int\n+from checkov.version import version\n+\n+\n+class FeatureFlag:",
        "comment_created_at": "2023-06-13T11:28:55+00:00",
        "comment_author": "Eliran-Turgeman",
        "comment_body": "`EnvVars` / `EnvVarsConfig` sounds more accurate ",
        "pr_file_module": null
      },
      {
        "comment_id": "1228049501",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5205,
        "pr_file": "checkov/common/util/feature_flag.py",
        "discussion_id": "1227968206",
        "commented_code": "@@ -0,0 +1,85 @@\n+import os\n+import tempfile\n+from pathlib import Path\n+\n+from checkov.common.models.enums import CheckFailLevel\n+from checkov.common.util.consts import DEFAULT_EXTERNAL_MODULES_DIR\n+from checkov.common.util.http_utils import normalize_bc_url\n+from checkov.common.util.type_forcers import convert_str_to_bool, force_int\n+from checkov.version import version\n+\n+\n+class FeatureFlag:",
        "comment_created_at": "2023-06-13T12:30:10+00:00",
        "comment_author": "gruebel",
        "comment_body": "had the same thought 😄 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1217692852",
    "pr_number": 5112,
    "pr_file": "checkov/terraform/plan_parser.py",
    "created_at": "2023-06-05T08:11:30+00:00",
    "commented_code": "\"\"\"Returns a resource address to resource changes dict\"\"\"\n \n     resource_changes_map = {}\n-\n     resource_changes = template.get(\"resource_changes\")\n+\n     if resource_changes and isinstance(resource_changes, list):\n-        resource_changes_map = {\n-            change.get(\"address\", \"\"): change\n-            for change in resource_changes\n-        }\n+        for each in resource_changes:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1217692852",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5112,
        "pr_file": "checkov/terraform/plan_parser.py",
        "discussion_id": "1217692852",
        "commented_code": "@@ -238,13 +240,24 @@ def _get_resource_changes(template: dict[str, Any]) -> dict[str, dict[str, Any]]\n     \"\"\"Returns a resource address to resource changes dict\"\"\"\n \n     resource_changes_map = {}\n-\n     resource_changes = template.get(\"resource_changes\")\n+\n     if resource_changes and isinstance(resource_changes, list):\n-        resource_changes_map = {\n-            change.get(\"address\", \"\"): change\n-            for change in resource_changes\n-        }\n+        for each in resource_changes:",
        "comment_created_at": "2023-06-05T08:11:30+00:00",
        "comment_author": "bo156",
        "comment_body": "can you rename `each` to something like `resource` or `changed_resource`?\r\nWill be more readable in python code (even though I guess it comes from terraform conventions)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1203911531",
    "pr_number": 4885,
    "pr_file": "checkov/common/util/data_structures_utils.py",
    "created_at": "2023-05-24T11:08:15+00:00",
    "commented_code": "return value\n \n \n+def deepcopy(obj: _T) -> _T:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1203911531",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4885,
        "pr_file": "checkov/common/util/data_structures_utils.py",
        "discussion_id": "1203911531",
        "commented_code": "@@ -94,6 +95,12 @@ def find_in_dict(input_dict: dict[str, Any], key_path: str) -> Any:\n     return value\n \n \n+def deepcopy(obj: _T) -> _T:",
        "comment_created_at": "2023-05-24T11:08:15+00:00",
        "comment_author": "bo156",
        "comment_body": "Maybe change the name to `pickle_deepcopy`?\r\nI just want the IDE to complete me automatically to the correct deepcopy, \r\nto avoid mistakenly importing the wrong one.\r\nAlso, it will be clearer to new developers in the future that this is something internal",
        "pr_file_module": null
      },
      {
        "comment_id": "1203943490",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4885,
        "pr_file": "checkov/common/util/data_structures_utils.py",
        "discussion_id": "1203911531",
        "commented_code": "@@ -94,6 +95,12 @@ def find_in_dict(input_dict: dict[str, Any], key_path: str) -> Any:\n     return value\n \n \n+def deepcopy(obj: _T) -> _T:",
        "comment_created_at": "2023-05-24T11:29:55+00:00",
        "comment_author": "gruebel",
        "comment_body": "yeah, sure. I just named them identical to keep the code changes minimal 😄 ",
        "pr_file_module": null
      }
    ]
  }
]