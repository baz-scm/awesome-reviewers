[
  {
    "discussion_id": "1366960727",
    "pr_number": 5569,
    "pr_file": "docs/4.Integrations/OpenAI.md",
    "created_at": "2023-10-20T13:14:29+00:00",
    "commented_code": "Passed checks: 1, Failed checks: 1, Skipped checks: 0\n ```\n \n+## OpenAI type \n+\n+With `--openai-api-type` flag, you are able to choose OpenAI source. Possible values here are `default` and `azure`. Default valuie is obvoiusly `default`, and this flag will redirect your requests to public-generally available OpenAI service. By switching this flag to `--openai-api-type azure` you can query **Azure OpenAI** resource using Azure OpenAI Key. Please see below [Azure OpenAI] section for more configuration details.\n+",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1366960727",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5569,
        "pr_file": "docs/4.Integrations/OpenAI.md",
        "discussion_id": "1366960727",
        "commented_code": "@@ -94,6 +94,10 @@ Check: CKV_AWS_16: \"Ensure all data stored in the RDS is securely encrypted at r\n Passed checks: 1, Failed checks: 1, Skipped checks: 0\n ```\n \n+## OpenAI type \n+\n+With `--openai-api-type` flag, you are able to choose OpenAI source. Possible values here are `default` and `azure`. Default valuie is obvoiusly `default`, and this flag will redirect your requests to public-generally available OpenAI service. By switching this flag to `--openai-api-type azure` you can query **Azure OpenAI** resource using Azure OpenAI Key. Please see below [Azure OpenAI] section for more configuration details.\n+",
        "comment_created_at": "2023-10-20T13:14:29+00:00",
        "comment_author": "gruebel",
        "comment_body": "move this to the `Settings` block as an env var",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1428740180",
    "pr_number": 5458,
    "pr_file": "docs/4.Integrations/pre-commit.md",
    "created_at": "2023-12-16T08:29:06+00:00",
    "commented_code": "entry: checkov -d . --skip-check CKV_AWS_123\n ```\n \n+When using the `diff` or `secrets` hooks, the last argument _must_ be `-f` due to how `checkov` and `pre-commit` interact:\n+\n+```yaml\n+      - id: checkov_secrets_container\n+        args:\n+          - '--quiet'\n+          - '-f' # required and must come last\n+```\n+\n+",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1428740180",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5458,
        "pr_file": "docs/4.Integrations/pre-commit.md",
        "discussion_id": "1428740180",
        "commented_code": "@@ -70,6 +94,16 @@ repos:\n         entry: checkov -d . --skip-check CKV_AWS_123\n ```\n \n+When using the `diff` or `secrets` hooks, the last argument _must_ be `-f` due to how `checkov` and `pre-commit` interact:\n+\n+```yaml\n+      - id: checkov_secrets_container\n+        args:\n+          - '--quiet'\n+          - '-f' # required and must come last\n+```\n+\n+",
        "comment_created_at": "2023-12-16T08:29:06+00:00",
        "comment_author": "tsmithv11",
        "comment_body": "```suggestion\r\nBy default, the container based pre-commit hooks use the `latest` tag. This can be overridden by declaring the version number in the entry field in the pre-commit config.\r\n\r\n```yaml\r\n    hooks:\r\n      - id: checkov_container\r\n        entry: bridgecrew/checkov:2.4.2 -d .\r\n```\r\n\r\nWe should mention how to override in the docks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1262478503",
    "pr_number": 5330,
    "pr_file": "docs/2.Basics/Suppressing and Skipping Policies.md",
    "created_at": "2023-07-13T12:20:02+00:00",
    "commented_code": "```\n \n-### SCA\n-CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package` to skip all CVEs for a specific package.\n+### Software Composition Analysis (SCA)\n+Suppressing SCA findings can be done a veriety of ways to fit your needs. CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package_name` to skip all CVEs for a specific package.\n \n-For inline suppressions, depending on the package manager there are different ways to suppress CVEs. You can either suppress a CVE for all packages, all CVEs for a package or specific CVE for a package. Today, only requirements.txt is supported.\n+For inline SCA suppressions, depending on the package manager, there are different ways to suppress CVEs and License violations. Adding a skip comment to any package manager file will suppress all findings for that CVE or package and License combination for that file.\n \n-#### Python - requirements.txt\n-The skip comment can be anywhere\n+#### Python (requirements.txt), .NET (Paket), Java/Kotlin (gradle.properties), Ruby (Gemfile)\n+The skip comment can be anywhere in the file.\n+\n+The example below is for requirements.txt\n \n ```requirements.txt\n-# checkov:skip=CVE-2019-19844: ignore CVE for all packages\n-# checkov:skip=jinja2: all CVEs for a package\n-# checkov:skip=django[CVE-2019-19844,CVE-2019-19844]: specific CVEs for a package\n+# checkov:skip=CVE-2019-19844: ignore CVE-2019-19844 for all packages in this file\n+# checkov:skip=jinja2[BC_LIC_1]: ignore non-OSI license violations for jinja2\n django==1.2\n jinja2==3.1.0\n ```\n \n+#### JavaScript (package.json and bower.json)\n+The skip comment can be anywhere in the metadata. Add these skip comments to the non-lock file and ensure you scan the non-lock file with any lock file scan. For example, package.json and yarn.lock must be scanned together for the suppression from the package.json to apply tot he yarn.lock violations.\n+\n+The example below is for package.json\n+\n+```package.json\n+{\n+  \"name\": \"my-package\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"A sample package.json file\",\n+  \"//\": \"checkov:skip=CVE-2023-123: ignore this CVE for this file\",\n+  \"//\": \"checkov:skip=express[BC_LIC_2]: ignore unknown license violations for express in this file\",",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1262478503",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5330,
        "pr_file": "docs/2.Basics/Suppressing and Skipping Policies.md",
        "discussion_id": "1262478503",
        "commented_code": "@@ -196,22 +196,88 @@ Check: CKV_AWS_18: \"Ensure the S3 bucket has access logging enabled\"\n \n ```\n \n-### SCA\n-CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package` to skip all CVEs for a specific package.\n+### Software Composition Analysis (SCA)\n+Suppressing SCA findings can be done a veriety of ways to fit your needs. CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package_name` to skip all CVEs for a specific package.\n \n-For inline suppressions, depending on the package manager there are different ways to suppress CVEs. You can either suppress a CVE for all packages, all CVEs for a package or specific CVE for a package. Today, only requirements.txt is supported.\n+For inline SCA suppressions, depending on the package manager, there are different ways to suppress CVEs and License violations. Adding a skip comment to any package manager file will suppress all findings for that CVE or package and License combination for that file.\n \n-#### Python - requirements.txt\n-The skip comment can be anywhere\n+#### Python (requirements.txt), .NET (Paket), Java/Kotlin (gradle.properties), Ruby (Gemfile)\n+The skip comment can be anywhere in the file.\n+\n+The example below is for requirements.txt\n \n ```requirements.txt\n-# checkov:skip=CVE-2019-19844: ignore CVE for all packages\n-# checkov:skip=jinja2: all CVEs for a package\n-# checkov:skip=django[CVE-2019-19844,CVE-2019-19844]: specific CVEs for a package\n+# checkov:skip=CVE-2019-19844: ignore CVE-2019-19844 for all packages in this file\n+# checkov:skip=jinja2[BC_LIC_1]: ignore non-OSI license violations for jinja2\n django==1.2\n jinja2==3.1.0\n ```\n \n+#### JavaScript (package.json and bower.json)\n+The skip comment can be anywhere in the metadata. Add these skip comments to the non-lock file and ensure you scan the non-lock file with any lock file scan. For example, package.json and yarn.lock must be scanned together for the suppression from the package.json to apply tot he yarn.lock violations.\n+\n+The example below is for package.json\n+\n+```package.json\n+{\n+  \"name\": \"my-package\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"A sample package.json file\",\n+  \"//\": \"checkov:skip=CVE-2023-123: ignore this CVE for this file\",\n+  \"//\": \"checkov:skip=express[BC_LIC_2]: ignore unknown license violations for express in this file\",",
        "comment_created_at": "2023-07-13T12:20:02+00:00",
        "comment_author": "NoaAzoulay",
        "comment_body": "@tsmithv11  we can't have the same key twice (\"//\")\r\nso we can have:\r\n1. only one inline suppression or comment, so it will be something like this: \r\n    \"//\": \"checkov:skip=CVE-2023-123: ignore this CVE for this file\"\r\n2. if we want several comments the value should be a list of strings:\r\n    \"//\": [\"checkov:skip=express[BC_LIC_2]: ignore unknown license violations for express in this file\",\r\n             \"checkov:skip=CVE-2023-123: ignore this CVE for this file\"]",
        "pr_file_module": null
      },
      {
        "comment_id": "1262628717",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5330,
        "pr_file": "docs/2.Basics/Suppressing and Skipping Policies.md",
        "discussion_id": "1262478503",
        "commented_code": "@@ -196,22 +196,88 @@ Check: CKV_AWS_18: \"Ensure the S3 bucket has access logging enabled\"\n \n ```\n \n-### SCA\n-CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package` to skip all CVEs for a specific package.\n+### Software Composition Analysis (SCA)\n+Suppressing SCA findings can be done a veriety of ways to fit your needs. CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package_name` to skip all CVEs for a specific package.\n \n-For inline suppressions, depending on the package manager there are different ways to suppress CVEs. You can either suppress a CVE for all packages, all CVEs for a package or specific CVE for a package. Today, only requirements.txt is supported.\n+For inline SCA suppressions, depending on the package manager, there are different ways to suppress CVEs and License violations. Adding a skip comment to any package manager file will suppress all findings for that CVE or package and License combination for that file.\n \n-#### Python - requirements.txt\n-The skip comment can be anywhere\n+#### Python (requirements.txt), .NET (Paket), Java/Kotlin (gradle.properties), Ruby (Gemfile)\n+The skip comment can be anywhere in the file.\n+\n+The example below is for requirements.txt\n \n ```requirements.txt\n-# checkov:skip=CVE-2019-19844: ignore CVE for all packages\n-# checkov:skip=jinja2: all CVEs for a package\n-# checkov:skip=django[CVE-2019-19844,CVE-2019-19844]: specific CVEs for a package\n+# checkov:skip=CVE-2019-19844: ignore CVE-2019-19844 for all packages in this file\n+# checkov:skip=jinja2[BC_LIC_1]: ignore non-OSI license violations for jinja2\n django==1.2\n jinja2==3.1.0\n ```\n \n+#### JavaScript (package.json and bower.json)\n+The skip comment can be anywhere in the metadata. Add these skip comments to the non-lock file and ensure you scan the non-lock file with any lock file scan. For example, package.json and yarn.lock must be scanned together for the suppression from the package.json to apply tot he yarn.lock violations.\n+\n+The example below is for package.json\n+\n+```package.json\n+{\n+  \"name\": \"my-package\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"A sample package.json file\",\n+  \"//\": \"checkov:skip=CVE-2023-123: ignore this CVE for this file\",\n+  \"//\": \"checkov:skip=express[BC_LIC_2]: ignore unknown license violations for express in this file\",",
        "comment_created_at": "2023-07-13T14:15:53+00:00",
        "comment_author": "gruebel",
        "comment_body": "nice catch!",
        "pr_file_module": null
      },
      {
        "comment_id": "1262972068",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5330,
        "pr_file": "docs/2.Basics/Suppressing and Skipping Policies.md",
        "discussion_id": "1262478503",
        "commented_code": "@@ -196,22 +196,88 @@ Check: CKV_AWS_18: \"Ensure the S3 bucket has access logging enabled\"\n \n ```\n \n-### SCA\n-CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package` to skip all CVEs for a specific package.\n+### Software Composition Analysis (SCA)\n+Suppressing SCA findings can be done a veriety of ways to fit your needs. CVEs can be suppressed using `--skip-check CKV_CVE_2022_1234` to suppress a specific CVE for that run or `--skip-cve-package package_name` to skip all CVEs for a specific package.\n \n-For inline suppressions, depending on the package manager there are different ways to suppress CVEs. You can either suppress a CVE for all packages, all CVEs for a package or specific CVE for a package. Today, only requirements.txt is supported.\n+For inline SCA suppressions, depending on the package manager, there are different ways to suppress CVEs and License violations. Adding a skip comment to any package manager file will suppress all findings for that CVE or package and License combination for that file.\n \n-#### Python - requirements.txt\n-The skip comment can be anywhere\n+#### Python (requirements.txt), .NET (Paket), Java/Kotlin (gradle.properties), Ruby (Gemfile)\n+The skip comment can be anywhere in the file.\n+\n+The example below is for requirements.txt\n \n ```requirements.txt\n-# checkov:skip=CVE-2019-19844: ignore CVE for all packages\n-# checkov:skip=jinja2: all CVEs for a package\n-# checkov:skip=django[CVE-2019-19844,CVE-2019-19844]: specific CVEs for a package\n+# checkov:skip=CVE-2019-19844: ignore CVE-2019-19844 for all packages in this file\n+# checkov:skip=jinja2[BC_LIC_1]: ignore non-OSI license violations for jinja2\n django==1.2\n jinja2==3.1.0\n ```\n \n+#### JavaScript (package.json and bower.json)\n+The skip comment can be anywhere in the metadata. Add these skip comments to the non-lock file and ensure you scan the non-lock file with any lock file scan. For example, package.json and yarn.lock must be scanned together for the suppression from the package.json to apply tot he yarn.lock violations.\n+\n+The example below is for package.json\n+\n+```package.json\n+{\n+  \"name\": \"my-package\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"A sample package.json file\",\n+  \"//\": \"checkov:skip=CVE-2023-123: ignore this CVE for this file\",\n+  \"//\": \"checkov:skip=express[BC_LIC_2]: ignore unknown license violations for express in this file\",",
        "comment_created_at": "2023-07-13T19:24:17+00:00",
        "comment_author": "tsmithv11",
        "comment_body": "Good catch, @NoaAzoulay. Thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1177388980",
    "pr_number": 4964,
    "pr_file": "docs/7.Scan Examples/Terraform.md",
    "created_at": "2023-04-26T06:11:31+00:00",
    "commented_code": "### Scanning Private Terraform Modules\n \n-In case third-party modules are stored in a private repository or a private Terraform Cloud registry, you can provide access tokens as environment variables for checkov to attempt to clone those modules. Private modules hosted in self-hosted registries, such as Terraform Enterprise, are not yet supported.\n+In case third-party modules are stored in a private repository or a private terraform registry (hosted on Terraform Cloud / Enterprise or a third-party provider like Gitlab), you can provide access tokens as environment variables for checkov to attempt to clone those modules.",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1177388980",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4964,
        "pr_file": "docs/7.Scan Examples/Terraform.md",
        "discussion_id": "1177388980",
        "commented_code": "@@ -46,15 +46,17 @@ checkov -d . --download-external-modules true --external-modules-download-path e\n \n ### Scanning Private Terraform Modules\n \n-In case third-party modules are stored in a private repository or a private Terraform Cloud registry, you can provide access tokens as environment variables for checkov to attempt to clone those modules. Private modules hosted in self-hosted registries, such as Terraform Enterprise, are not yet supported.\n+In case third-party modules are stored in a private repository or a private terraform registry (hosted on Terraform Cloud / Enterprise or a third-party provider like Gitlab), you can provide access tokens as environment variables for checkov to attempt to clone those modules.",
        "comment_created_at": "2023-04-26T06:11:31+00:00",
        "comment_author": "tsmithv11",
        "comment_body": "```suggestion\r\nIf you have modules stored in a private repository or a private Terraform registry (hosted on Terraform Cloud, Terraform Enterprise or a third-party provider like GitLab), you can grant Checkov access by providing access tokens as environment variables. This will enable Checkov to attempt to clone and scan those modules.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1177389913",
    "pr_number": 4964,
    "pr_file": "docs/7.Scan Examples/Terraform.md",
    "created_at": "2023-04-26T06:12:59+00:00",
    "commented_code": "### Scanning Private Terraform Modules\n \n-In case third-party modules are stored in a private repository or a private Terraform Cloud registry, you can provide access tokens as environment variables for checkov to attempt to clone those modules. Private modules hosted in self-hosted registries, such as Terraform Enterprise, are not yet supported.\n+In case third-party modules are stored in a private repository or a private terraform registry (hosted on Terraform Cloud / Enterprise or a third-party provider like Gitlab), you can provide access tokens as environment variables for checkov to attempt to clone those modules.\n \n-| Variable Name          | Description                                                                |\n-|------------------------|----------------------------------------------------------------------------|\n-| GITHUB_PAT             | Github personal access token with read access to the private repository    |\n-| BITBUCKET_TOKEN        | Bitbucket personal access token with read access to the private repository |\n-| TFC_TOKEN              | Terraform Cloud token which can access the private registry                |\n-| BITBUCKET_USERNAME     | Bitbucket username (can only be used with a BITBUCKET_APP_PASSWORD         |\n-| BITBUCKET_APP_PASSWORD | Bitbucket app password (can only be used with a BITBUCKET_USERNAME)        |\n+| Variable Name          | Description                                                                                      |\n+|------------------------|--------------------------------------------------------------------------------------------------|\n+| GITHUB_PAT             | Github personal access token with read access to the private repository                          |\n+| BITBUCKET_TOKEN        | Bitbucket personal access token with read access to the private repository                       |\n+| TF_HOST_NAME           | (defaults to app.terraform.io) Terraform Enterprise host name: example.com                       |\n+| TFC_TOKEN*             | (deprecated, use TF_REGISTRY_TOKEN) Terraform Cloud token which can access the private registry  |\n+| TF_REGISTRY_TOKEN      | Private registry access token (supports terraform cloud / enterprise and third-party registries) |",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1177389913",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 4964,
        "pr_file": "docs/7.Scan Examples/Terraform.md",
        "discussion_id": "1177389913",
        "commented_code": "@@ -46,15 +46,17 @@ checkov -d . --download-external-modules true --external-modules-download-path e\n \n ### Scanning Private Terraform Modules\n \n-In case third-party modules are stored in a private repository or a private Terraform Cloud registry, you can provide access tokens as environment variables for checkov to attempt to clone those modules. Private modules hosted in self-hosted registries, such as Terraform Enterprise, are not yet supported.\n+In case third-party modules are stored in a private repository or a private terraform registry (hosted on Terraform Cloud / Enterprise or a third-party provider like Gitlab), you can provide access tokens as environment variables for checkov to attempt to clone those modules.\n \n-| Variable Name          | Description                                                                |\n-|------------------------|----------------------------------------------------------------------------|\n-| GITHUB_PAT             | Github personal access token with read access to the private repository    |\n-| BITBUCKET_TOKEN        | Bitbucket personal access token with read access to the private repository |\n-| TFC_TOKEN              | Terraform Cloud token which can access the private registry                |\n-| BITBUCKET_USERNAME     | Bitbucket username (can only be used with a BITBUCKET_APP_PASSWORD         |\n-| BITBUCKET_APP_PASSWORD | Bitbucket app password (can only be used with a BITBUCKET_USERNAME)        |\n+| Variable Name          | Description                                                                                      |\n+|------------------------|--------------------------------------------------------------------------------------------------|\n+| GITHUB_PAT             | Github personal access token with read access to the private repository                          |\n+| BITBUCKET_TOKEN        | Bitbucket personal access token with read access to the private repository                       |\n+| TF_HOST_NAME           | (defaults to app.terraform.io) Terraform Enterprise host name: example.com                       |\n+| TFC_TOKEN*             | (deprecated, use TF_REGISTRY_TOKEN) Terraform Cloud token which can access the private registry  |\n+| TF_REGISTRY_TOKEN      | Private registry access token (supports terraform cloud / enterprise and third-party registries) |",
        "comment_created_at": "2023-04-26T06:12:59+00:00",
        "comment_author": "tsmithv11",
        "comment_body": "```suggestion\r\n| TF_REGISTRY_TOKEN      | Private registry access token (supports Terraform Cloud / Enterprise and third-party registries) |\r\n```",
        "pr_file_module": null
      }
    ]
  }
]