[
  {
    "discussion_id": "1941735832",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
    "created_at": "2025-02-04T18:54:44+00:00",
    "commented_code": "def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941735832",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
        "discussion_id": "1941735832",
        "commented_code": "@@ -60,10 +60,12 @@\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader')",
        "comment_created_at": "2025-02-04T18:54:44+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/121)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941735833",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loaders/registry_loader.py",
    "created_at": "2025-02-04T18:54:44+00:00",
    "commented_code": "return False\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n+        print(f'attempting to load module {module_params.module_source} via registry loader')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941735833",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loaders/registry_loader.py",
        "discussion_id": "1941735833",
        "commented_code": "@@ -70,6 +70,7 @@\n         return False\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n+        print(f'attempting to load module {module_params.module_source} via registry loader')",
        "comment_created_at": "2025-02-04T18:54:44+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/122)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941771934",
    "pr_number": 6992,
    "pr_file": "checkov/common/goget/github/get_git.py",
    "created_at": "2025-02-04T19:24:39+00:00",
    "commented_code": "return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        print(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941771934",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/common/goget/github/get_git.py",
        "discussion_id": "1941771934",
        "commented_code": "@@ -81,17 +81,28 @@\n         return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        print(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")",
        "comment_created_at": "2025-02-04T19:24:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/123)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941771936",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
    "created_at": "2025-02-04T19:24:39+00:00",
    "commented_code": "def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader: {module_params.__dict__}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941771936",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
        "discussion_id": "1941771936",
        "commented_code": "@@ -60,10 +60,13 @@\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader: {module_params.__dict__}')",
        "comment_created_at": "2025-02-04T19:24:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/124)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941771938",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
    "created_at": "2025-02-04T19:24:39+00:00",
    "commented_code": "def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader: {module_params.__dict__}')\n             self._process_generic_git_repo(module_params)\n             module_source = module_params.module_source.replace(\"git::\", \"\")\n+            print(f'running git getter with  {module_source} via git loader: {module_params.__dict__}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941771938",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loaders/git_loader.py",
        "discussion_id": "1941771938",
        "commented_code": "@@ -60,10 +60,13 @@\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n         try:\n+            print(f'attempting to load module {module_params.module_source} via git loader: {module_params.__dict__}')\n             self._process_generic_git_repo(module_params)\n             module_source = module_params.module_source.replace(\"git::\", \"\")\n+            print(f'running git getter with  {module_source} via git loader: {module_params.__dict__}')",
        "comment_created_at": "2025-02-04T19:24:39+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/125)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941809194",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loader.py",
    "created_at": "2025-02-04T19:56:29+00:00",
    "commented_code": "\"\"\"\n         self.discover(module_params)\n         if not self._is_matching_loader(module_params):\n+            print(f'the module params of {module_params.module_source} do not match loader {self.__class__} so returning None')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1941809194",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loader.py",
        "discussion_id": "1941809194",
        "commented_code": "@@ -55,10 +55,12 @@\n         \"\"\"\n         self.discover(module_params)\n         if not self._is_matching_loader(module_params):\n+            print(f'the module params of {module_params.module_source} do not match loader {self.__class__} so returning None')",
        "comment_created_at": "2025-02-04T19:56:29+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/126)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1942362872",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loader.py",
    "created_at": "2025-02-05T07:25:50+00:00",
    "commented_code": "\"\"\"\n         self.discover(module_params)\n         if not self._is_matching_loader(module_params):\n+            print(f'the module params of {module_params.module_source} do not match loader {self.__class__} so returning None')\n             return ModuleContent(dir=None)\n \n         module_path = self._find_module_path(module_params)\n         if os.path.exists(module_path):\n+            print(f'path {module_path} exists so no need to load')\n             return ModuleContent(dir=module_path)\n \n         self.logger.debug(f\"Using {self.__class__.__name__} attempting to get module \"\n                           f\"{module_params.module_source if '@' not in module_params.module_source else module_params.module_source.split('@')[1]} \"\n                           f\"version: {module_params.version}\")\n+        print(f'about to load {module_params.module_source} with {self.__class__}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1942362872",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loader.py",
        "discussion_id": "1942362872",
        "commented_code": "@@ -55,15 +55,18 @@\n         \"\"\"\n         self.discover(module_params)\n         if not self._is_matching_loader(module_params):\n+            print(f'the module params of {module_params.module_source} do not match loader {self.__class__} so returning None')\n             return ModuleContent(dir=None)\n \n         module_path = self._find_module_path(module_params)\n         if os.path.exists(module_path):\n+            print(f'path {module_path} exists so no need to load')\n             return ModuleContent(dir=module_path)\n \n         self.logger.debug(f\"Using {self.__class__.__name__} attempting to get module \"\n                           f\"{module_params.module_source if '@' not in module_params.module_source else module_params.module_source.split('@')[1]} \"\n                           f\"version: {module_params.version}\")\n+        print(f'about to load {module_params.module_source} with {self.__class__}')",
        "comment_created_at": "2025-02-05T07:25:50+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/127)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1942362873",
    "pr_number": 6992,
    "pr_file": "checkov/terraform/module_loading/loaders/registry_loader.py",
    "created_at": "2025-02-05T07:25:50+00:00",
    "commented_code": "return False\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n+        print(f'loading NOW {module_params.module_source} via registry loader')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1942362873",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/terraform/module_loading/loaders/registry_loader.py",
        "discussion_id": "1942362873",
        "commented_code": "@@ -70,6 +70,7 @@\n         return False\n \n     def _load_module(self, module_params: ModuleParams) -> ModuleContent:\n+        print(f'loading NOW {module_params.module_source} via registry loader')",
        "comment_created_at": "2025-02-05T07:25:50+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/128)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1942737893",
    "pr_number": 6992,
    "pr_file": "checkov/common/goget/github/get_git.py",
    "created_at": "2025-02-05T11:54:07+00:00",
    "commented_code": "return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        logging.info(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1942737893",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/common/goget/github/get_git.py",
        "discussion_id": "1942737893",
        "commented_code": "@@ -81,17 +81,26 @@\n         return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        logging.info(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")",
        "comment_created_at": "2025-02-05T11:54:07+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/130)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1942983239",
    "pr_number": 6992,
    "pr_file": "checkov/common/goget/github/get_git.py",
    "created_at": "2025-02-05T13:51:30+00:00",
    "commented_code": "return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        logging.info(f\"cloning {git_url} to {clone_dir}\")",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1942983239",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/common/goget/github/get_git.py",
        "discussion_id": "1942983239",
        "commented_code": "@@ -81,17 +80,26 @@\n         return clone_dir\n \n     def _clone(self, git_url: str, clone_dir: str) -> None:\n-        self.logger.debug(f\"cloning {self.url if '@' not in self.url else self.url.split('@')[1]} to {clone_dir}\")\n+        logging.info(f\"cloning {git_url} to {clone_dir}\")",
        "comment_created_at": "2025-02-05T13:51:30+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/131)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1943056593",
    "pr_number": 6992,
    "pr_file": "checkov/common/goget/github/get_git.py",
    "created_at": "2025-02-05T14:34:42+00:00",
    "commented_code": "url = re.sub(TAG_PATTERN, '', url)\n             return url\n \n-        logging.info(f\"Module URL has an unknown ref: {url}\")\n+        self.logger.info(f\"Module URL has an unknown ref: {url}\")",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1943056593",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6992,
        "pr_file": "checkov/common/goget/github/get_git.py",
        "discussion_id": "1943056593",
        "commented_code": "@@ -56,17 +57,15 @@\n             url = re.sub(TAG_PATTERN, '', url)\n             return url\n \n-        logging.info(f\"Module URL has an unknown ref: {url}\")\n+        self.logger.info(f\"Module URL has an unknown ref: {url}\")",
        "comment_created_at": "2025-02-05T14:34:42+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (password)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/132)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1845448567",
    "pr_number": 6848,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-11-17T12:56:23+00:00",
    "commented_code": "self._scan_files(files_to_scan, secrets, self.pbar)\n                 self.pbar.close()\n \n-            secret_records: dict[str, SecretsRecord] = {}\n-            secrets_in_uuid_form = ['CKV_SECRET_116', 'CKV_SECRET_49', 'CKV_SECRET_48', 'CKV_SECRET_40', 'CKV_SECRET_30']\n+        secret_records: dict[str, SecretsRecord] = {}\n+        secrets_in_uuid_form = ['CKV_SECRET_116', 'CKV_SECRET_49', 'CKV_SECRET_48', 'CKV_SECRET_40', 'CKV_SECRET_30']\n \n-            secret_key_by_line_to_secrets = defaultdict(list)\n-            for key, secret in secrets:\n-                secret_key_by_line = f'{key}_{secret.line_number}'\n-                secret_key_by_line_to_secrets[secret_key_by_line].append(secret)\n+        secret_key_by_line_to_secrets = defaultdict(list)\n+        for key, secret in secrets:\n+            secret_key_by_line = f'{key}_{secret.line_number}'\n+            secret_key_by_line_to_secrets[secret_key_by_line].append(secret)\n \n-            for key, secret in secrets:\n-                check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n-                if not check_id:\n-                    logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n-                    continue\n-                if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n-                    logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n-                    continue\n-                secret_key = f'{key}_{secret.line_number}_{secret.secret_hash}'\n-                # secret history\n-                added_commit_hash, removed_commit_hash, code_line, added_by, removed_date, added_date = '', '', '', '', '', ''\n-                if runner_filter.enable_git_history_secret_scan:\n-                    enriched_potential_secret = git_history_scanner.\\\n-                        history_store.get_added_and_removed_commit_hash(key, secret, root_folder)\n-                    added_commit_hash = enriched_potential_secret.get('added_commit_hash') or ''\n-                    removed_commit_hash = enriched_potential_secret.get('removed_commit_hash') or ''\n-                    code_line = enriched_potential_secret.get('code_line') or ''\n-                    added_by = enriched_potential_secret.get('added_by') or ''\n-                    removed_date = enriched_potential_secret.get('removed_date') or ''\n-                    added_date = enriched_potential_secret.get('added_date') or ''\n-                # run over secret key\n-                if isinstance(secret.secret_value, str) and secret.secret_value:\n-                    stripped = secret.secret_value.strip(',\";\\'')\n-                    if stripped != secret.secret_value:\n-                        secret_key = f'{key}_{secret.line_number}_{PotentialSecret.hash_secret(stripped)}'\n-                if secret.secret_value and is_potential_uuid(secret.secret_value) and secret.check_id not in secrets_in_uuid_form:\n-                    logging.info(\n-                        f\"Removing secret due to UUID filtering: {PotentialSecret.hash_secret(secret.secret_value)}\")\n-                    continue\n-                bc_check_id = metadata_integration.get_bc_id(check_id)\n-                if bc_check_id in secret_suppressions_ids:\n-                    logging.debug(f'Secret was filtered - check {check_id} was suppressed')\n-                    continue\n-                severity = metadata_integration.get_severity(check_id)\n-                if not runner_filter.should_run_check(check_id=check_id, bc_check_id=bc_check_id, severity=severity,\n-                                                      report_type=CheckType.SECRETS):\n-                    logging.debug(\n-                        f'Check was suppress - should_run_check. check_id {check_id}')\n-                    continue\n-                if secret_key in secret_records.keys():\n-                    is_prioritise = self._prioritise_secrets(secret_records, secret_key, check_id)\n-                    if not is_prioritise:\n-                        continue\n-                result: _CheckResult = {'result': CheckResult.FAILED}\n-                try:\n-                    if runner_filter.enable_git_history_secret_scan and code_line is not None:\n-                        line_text = code_line\n-                    else:\n-                        line_text = linecache.getline(secret.filename, secret.line_number)\n-                except SyntaxError as e:\n-                    # If encoding is a problem, this is probably not human-readable source code\n-                    # hence there's no need in flagging this secret\n-                    logging.info(f'Failed to log secret {secret.type} for file {secret.filename} because of {e}')\n-                    continue\n-                if line_text and line_text.startswith('git_commit'):\n+        for key, secret in secrets:\n+            check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+            if not check_id:\n+                logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                continue\n+            if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1845448567",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6848,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1845448567",
        "commented_code": "@@ -232,124 +269,125 @@\n                 self._scan_files(files_to_scan, secrets, self.pbar)\n                 self.pbar.close()\n \n-            secret_records: dict[str, SecretsRecord] = {}\n-            secrets_in_uuid_form = ['CKV_SECRET_116', 'CKV_SECRET_49', 'CKV_SECRET_48', 'CKV_SECRET_40', 'CKV_SECRET_30']\n+        secret_records: dict[str, SecretsRecord] = {}\n+        secrets_in_uuid_form = ['CKV_SECRET_116', 'CKV_SECRET_49', 'CKV_SECRET_48', 'CKV_SECRET_40', 'CKV_SECRET_30']\n \n-            secret_key_by_line_to_secrets = defaultdict(list)\n-            for key, secret in secrets:\n-                secret_key_by_line = f'{key}_{secret.line_number}'\n-                secret_key_by_line_to_secrets[secret_key_by_line].append(secret)\n+        secret_key_by_line_to_secrets = defaultdict(list)\n+        for key, secret in secrets:\n+            secret_key_by_line = f'{key}_{secret.line_number}'\n+            secret_key_by_line_to_secrets[secret_key_by_line].append(secret)\n \n-            for key, secret in secrets:\n-                check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n-                if not check_id:\n-                    logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n-                    continue\n-                if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n-                    logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n-                    continue\n-                secret_key = f'{key}_{secret.line_number}_{secret.secret_hash}'\n-                # secret history\n-                added_commit_hash, removed_commit_hash, code_line, added_by, removed_date, added_date = '', '', '', '', '', ''\n-                if runner_filter.enable_git_history_secret_scan:\n-                    enriched_potential_secret = git_history_scanner.\\\n-                        history_store.get_added_and_removed_commit_hash(key, secret, root_folder)\n-                    added_commit_hash = enriched_potential_secret.get('added_commit_hash') or ''\n-                    removed_commit_hash = enriched_potential_secret.get('removed_commit_hash') or ''\n-                    code_line = enriched_potential_secret.get('code_line') or ''\n-                    added_by = enriched_potential_secret.get('added_by') or ''\n-                    removed_date = enriched_potential_secret.get('removed_date') or ''\n-                    added_date = enriched_potential_secret.get('added_date') or ''\n-                # run over secret key\n-                if isinstance(secret.secret_value, str) and secret.secret_value:\n-                    stripped = secret.secret_value.strip(',\";\\'')\n-                    if stripped != secret.secret_value:\n-                        secret_key = f'{key}_{secret.line_number}_{PotentialSecret.hash_secret(stripped)}'\n-                if secret.secret_value and is_potential_uuid(secret.secret_value) and secret.check_id not in secrets_in_uuid_form:\n-                    logging.info(\n-                        f\"Removing secret due to UUID filtering: {PotentialSecret.hash_secret(secret.secret_value)}\")\n-                    continue\n-                bc_check_id = metadata_integration.get_bc_id(check_id)\n-                if bc_check_id in secret_suppressions_ids:\n-                    logging.debug(f'Secret was filtered - check {check_id} was suppressed')\n-                    continue\n-                severity = metadata_integration.get_severity(check_id)\n-                if not runner_filter.should_run_check(check_id=check_id, bc_check_id=bc_check_id, severity=severity,\n-                                                      report_type=CheckType.SECRETS):\n-                    logging.debug(\n-                        f'Check was suppress - should_run_check. check_id {check_id}')\n-                    continue\n-                if secret_key in secret_records.keys():\n-                    is_prioritise = self._prioritise_secrets(secret_records, secret_key, check_id)\n-                    if not is_prioritise:\n-                        continue\n-                result: _CheckResult = {'result': CheckResult.FAILED}\n-                try:\n-                    if runner_filter.enable_git_history_secret_scan and code_line is not None:\n-                        line_text = code_line\n-                    else:\n-                        line_text = linecache.getline(secret.filename, secret.line_number)\n-                except SyntaxError as e:\n-                    # If encoding is a problem, this is probably not human-readable source code\n-                    # hence there's no need in flagging this secret\n-                    logging.info(f'Failed to log secret {secret.type} for file {secret.filename} because of {e}')\n-                    continue\n-                if line_text and line_text.startswith('git_commit'):\n+        for key, secret in secrets:\n+            check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+            if not check_id:\n+                logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                continue\n+            if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')",
        "comment_created_at": "2024-11-17T12:56:23+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (secret)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/113)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1845448571",
    "pr_number": 6848,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-11-17T12:56:23+00:00",
    "commented_code": "logging.error(f\"Failed to remove suppressed secrets violations from failed_checks, report is corrupted.\"\n                               f\"Tried to delete entry {idx} from failed_checks of length {len(report.failed_checks)}\",\n                               exc_info=True)\n+\n+    def mask_files(self, root_folder: str | None,\n+                   files: list[str] | None = None,\n+                   runner_filter: RunnerFilter | None = None) -> None:\n+        runner_filter = runner_filter or RunnerFilter()\n+\n+        plugins_used, cleanupFn = self._get_plugins_used()\n+\n+        files_to_scan = files or []\n+        if root_folder:\n+            files_to_scan += _find_files_from_root_folder(root_folder, runner_filter)\n+\n+        self._add_custom_detectors_to_metadata_integration()\n+        secrets = SecretsCollection()\n+        with transient_settings({\n+            # Only run scans with only these plugins.\n+            'plugins_used': plugins_used\n+        }) as settings:\n+\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_indirect_reference'])\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_potential_uuid'])\n+\n+            self._scan_files(files_to_scan, secrets, self.pbar)\n+\n+        for file in files_to_scan:\n+            with open(file, \"r+\") as f:\n+                content = f.read()\n+                f.seek(0)\n+                for key, secret in secrets:\n+                    if not secret.secret_value:\n+                        continue\n+                    check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+                    if not check_id:\n+                        logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                        continue\n+                    if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                        logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n+                        continue\n+\n+                    content = content.replace(secret.secret_value, masking_value(secret.secret_value))\n+                f.write(content)",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1845448571",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6848,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1845448571",
        "commented_code": "@@ -591,3 +612,52 @@\n                 logging.error(f\"Failed to remove suppressed secrets violations from failed_checks, report is corrupted.\"\n                               f\"Tried to delete entry {idx} from failed_checks of length {len(report.failed_checks)}\",\n                               exc_info=True)\n+\n+    def mask_files(self, root_folder: str | None,\n+                   files: list[str] | None = None,\n+                   runner_filter: RunnerFilter | None = None) -> None:\n+        runner_filter = runner_filter or RunnerFilter()\n+\n+        plugins_used, cleanupFn = self._get_plugins_used()\n+\n+        files_to_scan = files or []\n+        if root_folder:\n+            files_to_scan += _find_files_from_root_folder(root_folder, runner_filter)\n+\n+        self._add_custom_detectors_to_metadata_integration()\n+        secrets = SecretsCollection()\n+        with transient_settings({\n+            # Only run scans with only these plugins.\n+            'plugins_used': plugins_used\n+        }) as settings:\n+\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_indirect_reference'])\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_potential_uuid'])\n+\n+            self._scan_files(files_to_scan, secrets, self.pbar)\n+\n+        for file in files_to_scan:\n+            with open(file, \"r+\") as f:\n+                content = f.read()\n+                f.seek(0)\n+                for key, secret in secrets:\n+                    if not secret.secret_value:\n+                        continue\n+                    check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+                    if not check_id:\n+                        logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                        continue\n+                    if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                        logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n+                        continue\n+\n+                    content = content.replace(secret.secret_value, masking_value(secret.secret_value))\n+                f.write(content)",
        "comment_created_at": "2024-11-17T12:56:23+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text storage of sensitive information\n\nThis expression stores [sensitive data (secret)](1) as clear text.\nThis expression stores [sensitive data (secret)](2) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/117)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1845466953",
    "pr_number": 6848,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-11-17T13:37:34+00:00",
    "commented_code": "logging.error(f\"Failed to remove suppressed secrets violations from failed_checks, report is corrupted.\"\n                               f\"Tried to delete entry {idx} from failed_checks of length {len(report.failed_checks)}\",\n                               exc_info=True)\n+\n+    def mask_files(self, root_folder: str | None,\n+                   files: list[str] | None = None,\n+                   runner_filter: RunnerFilter | None = None) -> None:\n+        \"\"\"\n+        get files or/and root_folder and masking and replace automatically all the secrets found there\n+        note: the changes are inplace\n+        \"\"\"\n+        runner_filter = runner_filter or RunnerFilter()\n+\n+        plugins_used, cleanupFn = self._get_plugins_used()\n+\n+        files_to_scan = files or []\n+        if root_folder:\n+            files_to_scan += _find_files_from_root_folder(root_folder, runner_filter)\n+\n+        self._add_custom_detectors_to_metadata_integration()\n+        secrets = SecretsCollection()\n+        with transient_settings({\n+            # Only run scans with only these plugins.\n+            'plugins_used': plugins_used\n+        }) as settings:\n+\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_indirect_reference'])\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_potential_uuid'])\n+\n+            self._scan_files(files_to_scan, secrets, self.pbar)\n+\n+        for file in files_to_scan:\n+            with open(file, \"r+\") as f:\n+                content = f.read()\n+                f.seek(0)\n+                for _key, secret in secrets:\n+                    if not secret.secret_value:\n+                        continue\n+                    check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+                    if not check_id:\n+                        logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                        continue\n+                    if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                        logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n+                        continue\n+\n+                    content = content.replace(secret.secret_value, masking_value(secret.secret_value))\n+                f.write(content)",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1845466953",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6848,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1845466953",
        "commented_code": "@@ -591,3 +614,56 @@\n                 logging.error(f\"Failed to remove suppressed secrets violations from failed_checks, report is corrupted.\"\n                               f\"Tried to delete entry {idx} from failed_checks of length {len(report.failed_checks)}\",\n                               exc_info=True)\n+\n+    def mask_files(self, root_folder: str | None,\n+                   files: list[str] | None = None,\n+                   runner_filter: RunnerFilter | None = None) -> None:\n+        \"\"\"\n+        get files or/and root_folder and masking and replace automatically all the secrets found there\n+        note: the changes are inplace\n+        \"\"\"\n+        runner_filter = runner_filter or RunnerFilter()\n+\n+        plugins_used, cleanupFn = self._get_plugins_used()\n+\n+        files_to_scan = files or []\n+        if root_folder:\n+            files_to_scan += _find_files_from_root_folder(root_folder, runner_filter)\n+\n+        self._add_custom_detectors_to_metadata_integration()\n+        secrets = SecretsCollection()\n+        with transient_settings({\n+            # Only run scans with only these plugins.\n+            'plugins_used': plugins_used\n+        }) as settings:\n+\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_indirect_reference'])\n+            settings.disable_filters(*['detect_secrets.filters.heuristic.is_potential_uuid'])\n+\n+            self._scan_files(files_to_scan, secrets, self.pbar)\n+\n+        for file in files_to_scan:\n+            with open(file, \"r+\") as f:\n+                content = f.read()\n+                f.seek(0)\n+                for _key, secret in secrets:\n+                    if not secret.secret_value:\n+                        continue\n+                    check_id = secret.check_id if secret.check_id else SECRET_TYPE_TO_ID.get(secret.type)\n+                    if not check_id:\n+                        logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n+                        continue\n+                    if secret.secret_value and should_filter_vault_secret(secret.secret_value, check_id):\n+                        logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')\n+                        continue\n+\n+                    content = content.replace(secret.secret_value, masking_value(secret.secret_value))\n+                f.write(content)",
        "comment_created_at": "2024-11-17T13:37:34+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text storage of sensitive information\n\nThis expression stores [sensitive data (secret)](1) as clear text.\nThis expression stores [sensitive data (secret)](2) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/118)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1750121850",
    "pr_number": 6710,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-09-09T11:55:51+00:00",
    "commented_code": "policies_list = customer_run_config.get('secretsPolicies', [])\n             suppressions = customer_run_config.get('suppressions', [])\n             if suppressions:\n-                secret_suppressions_id = [suppression['policyId']\n-                                          for suppression in suppressions if suppression['suppressionType'] == 'SecretsPolicy']\n+                secret_suppressions_ids = [\n+                    suppression['policyId'] for suppression in suppressions\n+                    if suppression['suppressionType'] == 'SecretsPolicy' or suppression['suppressionType'] == 'Policy'\n+                ]\n+                logging.info(f'The secret_suppressions_ids are: {secret_suppressions_ids}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1750121850",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6710,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1750121850",
        "commented_code": "@@ -148,8 +148,11 @@\n             policies_list = customer_run_config.get('secretsPolicies', [])\n             suppressions = customer_run_config.get('suppressions', [])\n             if suppressions:\n-                secret_suppressions_id = [suppression['policyId']\n-                                          for suppression in suppressions if suppression['suppressionType'] == 'SecretsPolicy']\n+                secret_suppressions_ids = [\n+                    suppression['policyId'] for suppression in suppressions\n+                    if suppression['suppressionType'] == 'SecretsPolicy' or suppression['suppressionType'] == 'Policy'\n+                ]\n+                logging.info(f'The secret_suppressions_ids are: {secret_suppressions_ids}')",
        "comment_created_at": "2024-09-09T11:55:51+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (secret)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/110)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1674127281",
    "pr_number": 6565,
    "pr_file": "checkov/secrets/runner.py",
    "created_at": "2024-07-11T14:36:16+00:00",
    "commented_code": "if not check_id:\n                     logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n                     continue\n+                if should_filter_vault_secret(secret.secret_value, check_id):\n+                    logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1674127281",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6565,
        "pr_file": "checkov/secrets/runner.py",
        "discussion_id": "1674127281",
        "commented_code": "@@ -229,6 +235,9 @@\n                 if not check_id:\n                     logging.debug(f'Secret was filtered - no check_id for line_number {secret.line_number}')\n                     continue\n+                if should_filter_vault_secret(secret.secret_value, check_id):\n+                    logging.debug(f'Secret was filtered - this is a vault reference: {secret.secret_value}')",
        "comment_created_at": "2024-07-11T14:36:16+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Clear-text logging of sensitive information\n\nThis expression logs [sensitive data (secret)](1) as clear text.\n\n[Show more details](https://github.com/bridgecrewio/checkov/security/code-scanning/107)",
        "pr_file_module": null
      }
    ]
  }
]