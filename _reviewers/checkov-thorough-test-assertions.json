[
  {
    "discussion_id": "1697034887",
    "pr_number": 6622,
    "pr_file": "tests/terraform/checks/test_multiple_skips.py",
    "created_at": "2024-07-30T14:09:08+00:00",
    "commented_code": "+import unittest\n+from pathlib import Path\n+\n+from checkov.runner_filter import RunnerFilter\n+from checkov.terraform.runner import Runner\n+\n+\n+class TestMultipleSkips(unittest.TestCase):\n+\n+    def test(self) -> None:\n+        # given\n+        test_files_dir = Path(__file__).parent / \"a example skip\"\n+\n+        # when\n+        report = Runner().run(root_folder=str(test_files_dir), runner_filter=RunnerFilter(checks=[]))\n+\n+        # then\n+        summary = report.get_summary()",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1697034887",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6622,
        "pr_file": "tests/terraform/checks/test_multiple_skips.py",
        "discussion_id": "1697034887",
        "commented_code": "@@ -0,0 +1,27 @@\n+import unittest\n+from pathlib import Path\n+\n+from checkov.runner_filter import RunnerFilter\n+from checkov.terraform.runner import Runner\n+\n+\n+class TestMultipleSkips(unittest.TestCase):\n+\n+    def test(self) -> None:\n+        # given\n+        test_files_dir = Path(__file__).parent / \"a example skip\"\n+\n+        # when\n+        report = Runner().run(root_folder=str(test_files_dir), runner_filter=RunnerFilter(checks=[]))\n+\n+        # then\n+        summary = report.get_summary()",
        "comment_created_at": "2024-07-30T14:09:08+00:00",
        "comment_author": "ChanochShayner",
        "comment_body": "Please assert the skipped part in the reports by resource - \r\nWe want to be sure `default` and `skip_invalid` are with one skip, and `skip_more_than_one` is with 2 skips.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1592543992",
    "pr_number": 6267,
    "pr_file": "tests/arm/checks/resource/test_AzureDefenderOnKeyVaults.py",
    "created_at": "2024-05-07T14:04:16+00:00",
    "commented_code": "+import os\n+import unittest\n+\n+from checkov.arm.checks.resource.AzureDefenderOnKeyVaults import check\n+from checkov.arm.runner import Runner\n+from checkov.runner_filter import RunnerFilter\n+\n+\n+class TestAzureDefenderOnKeyVaults(unittest.TestCase):\n+    def test_summary(self):\n+        runner = Runner()\n+        current_dir = os.path.dirname(os.path.realpath(__file__))\n+\n+        test_files_dir = current_dir + \"/example_AzureDefenderOnKeyVaults\"\n+        report = runner.run(root_folder=test_files_dir, runner_filter=RunnerFilter(checks=[check.id]))\n+        summary = report.get_summary()\n+",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1592543992",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6267,
        "pr_file": "tests/arm/checks/resource/test_AzureDefenderOnKeyVaults.py",
        "discussion_id": "1592543992",
        "commented_code": "@@ -0,0 +1,25 @@\n+import os\n+import unittest\n+\n+from checkov.arm.checks.resource.AzureDefenderOnKeyVaults import check\n+from checkov.arm.runner import Runner\n+from checkov.runner_filter import RunnerFilter\n+\n+\n+class TestAzureDefenderOnKeyVaults(unittest.TestCase):\n+    def test_summary(self):\n+        runner = Runner()\n+        current_dir = os.path.dirname(os.path.realpath(__file__))\n+\n+        test_files_dir = current_dir + \"/example_AzureDefenderOnKeyVaults\"\n+        report = runner.run(root_folder=test_files_dir, runner_filter=RunnerFilter(checks=[check.id]))\n+        summary = report.get_summary()\n+",
        "comment_created_at": "2024-05-07T14:04:16+00:00",
        "comment_author": "ChanochShayner",
        "comment_body": "Please add assertions for the names of the resources as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1593692153",
    "pr_number": 6244,
    "pr_file": "checkov/arm/checks/resource/FunctionAppHttpVersionLatest.py",
    "created_at": "2024-05-08T09:05:10+00:00",
    "commented_code": "+from checkov.arm.base_resource_value_check import BaseResourceValueCheck\n+from checkov.common.models.enums import CheckCategories\n+\n+\n+class FunctionAppHttpVersionLatest(BaseResourceValueCheck):\n+\n+    def __init__(self) -> None:\n+        name = \"Ensure that 'HTTP Version' is the latest, if used to run the Function app\"\n+        id = \"CKV_AZURE_67\"\n+        supported_resources = (\"Microsoft.Web/sites/slots\",)",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1593692153",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 6244,
        "pr_file": "checkov/arm/checks/resource/FunctionAppHttpVersionLatest.py",
        "discussion_id": "1593692153",
        "commented_code": "@@ -0,0 +1,22 @@\n+from checkov.arm.base_resource_value_check import BaseResourceValueCheck\n+from checkov.common.models.enums import CheckCategories\n+\n+\n+class FunctionAppHttpVersionLatest(BaseResourceValueCheck):\n+\n+    def __init__(self) -> None:\n+        name = \"Ensure that 'HTTP Version' is the latest, if used to run the Function app\"\n+        id = \"CKV_AZURE_67\"\n+        supported_resources = (\"Microsoft.Web/sites/slots\",)",
        "comment_created_at": "2024-05-08T09:05:10+00:00",
        "comment_author": "tsmithv11",
        "comment_body": "```suggestion\r\n        supported_resources = (\"Microsoft.Web/sites/slots\", \"Microsoft.Web/sites\")\r\n```\r\n\r\nSites can also have this set: https://learn.microsoft.com/en-us/azure/templates/microsoft.web/sites?pivots=deployment-language-arm-template#siteconfig-1\r\n\r\nCan you add a UT for this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269281946",
    "pr_number": 5362,
    "pr_file": "checkov/terraform/tf_parser.py",
    "created_at": "2023-07-20T10:44:50+00:00",
    "commented_code": "return module, tf_definitions\n \n+    '''\n+    This function is similar to parse_hcl_module, except that it creates a list of tuples instead of a single tuple.\n+    The objective is to create a collection of TF definitions based on directory, instead of a single big structure.\n+    This will allow us to boost performance by running on several smaller objects rather than one.\n+    '''\n+    def parse_multi_graph_hcl_module(\n+        self,\n+        source_dir: str,\n+        source: str,\n+        download_external_modules: bool = False,\n+        external_modules_download_path: str = DEFAULT_EXTERNAL_MODULES_DIR,\n+        parsing_errors: dict[str, Exception] | None = None,\n+        excluded_paths: list[str] | None = None,\n+        vars_files: list[str] | None = None,\n+        external_modules_content_cache: dict[str, ModuleContent | None] | None = None,\n+        create_graph: bool = True,\n+    ) -> list[tuple[Module, list[dict[TFDefinitionKey, dict[str, Any]]]]]:\n+        tf_definitions = self.parse_directory(\n+            directory=source_dir, out_evaluations_context={},\n+            out_parsing_errors=parsing_errors if parsing_errors is not None else {},\n+            download_external_modules=download_external_modules,\n+            external_modules_download_path=external_modules_download_path, excluded_paths=excluded_paths,\n+            vars_files=vars_files, external_modules_content_cache=external_modules_content_cache\n+        )\n+        tf_definitions = clean_parser_types(tf_definitions)\n+        tf_definitions = serialize_definitions(tf_definitions)\n+\n+        dirs_to_definitions = self.create_definition_by_dirs(tf_definitions)\n+\n+        modules_and_definitions_tuple: list[tuple[Module, list[dict[TFDefinitionKey, dict[str, Any]]]]] = []\n+        if create_graph:\n+            for source_path, definitions in dirs_to_definitions.items():\n+                module, parsed_tf_definitions = self.parse_hcl_module_from_multi_tf_definitions(definitions, source_path, source)\n+                modules_and_definitions_tuple.append((module, parsed_tf_definitions))\n+\n+        return modules_and_definitions_tuple\n+\n+    def create_definition_by_dirs(self, tf_definitions: dict[TFDefinitionKey, dict[str, list[dict[str, Any]]]]",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1269281946",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5362,
        "pr_file": "checkov/terraform/tf_parser.py",
        "discussion_id": "1269281946",
        "commented_code": "@@ -329,6 +330,67 @@ def parse_hcl_module(\n \n         return module, tf_definitions\n \n+    '''\n+    This function is similar to parse_hcl_module, except that it creates a list of tuples instead of a single tuple.\n+    The objective is to create a collection of TF definitions based on directory, instead of a single big structure.\n+    This will allow us to boost performance by running on several smaller objects rather than one.\n+    '''\n+    def parse_multi_graph_hcl_module(\n+        self,\n+        source_dir: str,\n+        source: str,\n+        download_external_modules: bool = False,\n+        external_modules_download_path: str = DEFAULT_EXTERNAL_MODULES_DIR,\n+        parsing_errors: dict[str, Exception] | None = None,\n+        excluded_paths: list[str] | None = None,\n+        vars_files: list[str] | None = None,\n+        external_modules_content_cache: dict[str, ModuleContent | None] | None = None,\n+        create_graph: bool = True,\n+    ) -> list[tuple[Module, list[dict[TFDefinitionKey, dict[str, Any]]]]]:\n+        tf_definitions = self.parse_directory(\n+            directory=source_dir, out_evaluations_context={},\n+            out_parsing_errors=parsing_errors if parsing_errors is not None else {},\n+            download_external_modules=download_external_modules,\n+            external_modules_download_path=external_modules_download_path, excluded_paths=excluded_paths,\n+            vars_files=vars_files, external_modules_content_cache=external_modules_content_cache\n+        )\n+        tf_definitions = clean_parser_types(tf_definitions)\n+        tf_definitions = serialize_definitions(tf_definitions)\n+\n+        dirs_to_definitions = self.create_definition_by_dirs(tf_definitions)\n+\n+        modules_and_definitions_tuple: list[tuple[Module, list[dict[TFDefinitionKey, dict[str, Any]]]]] = []\n+        if create_graph:\n+            for source_path, definitions in dirs_to_definitions.items():\n+                module, parsed_tf_definitions = self.parse_hcl_module_from_multi_tf_definitions(definitions, source_path, source)\n+                modules_and_definitions_tuple.append((module, parsed_tf_definitions))\n+\n+        return modules_and_definitions_tuple\n+\n+    def create_definition_by_dirs(self, tf_definitions: dict[TFDefinitionKey, dict[str, list[dict[str, Any]]]]",
        "comment_created_at": "2023-07-20T10:44:50+00:00",
        "comment_author": "bo156",
        "comment_body": "I would add specific unit tests to this function as well, as this is critical logic",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1269513321",
    "pr_number": 5362,
    "pr_file": "tests/terraform/graph/graph_builder/test_local_graph.py",
    "created_at": "2023-07-20T14:04:26+00:00",
    "commented_code": "else:\n                 self.assertEqual(var_value, default_val)\n \n+    def test_definition_creation_by_dirs(self):",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1269513321",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5362,
        "pr_file": "tests/terraform/graph/graph_builder/test_local_graph.py",
        "discussion_id": "1269513321",
        "commented_code": "@@ -108,6 +109,39 @@ def test_set_variables_values_from_modules(self):\n             else:\n                 self.assertEqual(var_value, default_val)\n \n+    def test_definition_creation_by_dirs(self):",
        "comment_created_at": "2023-07-20T14:04:26+00:00",
        "comment_author": "bo156",
        "comment_body": "nice test!\r\nHowever, I still think we need some more for the logic - maybe add 1 with more than 1 created module.\r\nyou can find a good example under `tests/terraform/graph/resources/modules`.\r\nThis one even utilizes different modules with a reference to other directories, so I feel it will be a very strong test.\r\n(You don't have to take the whole folder as it might be also too big, maybe just one sub directory like `stacks`)",
        "pr_file_module": null
      }
    ]
  }
]