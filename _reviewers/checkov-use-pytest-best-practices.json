[
  {
    "discussion_id": "2161559989",
    "pr_number": 7219,
    "pr_file": "tests/kubernetes/graph/test_kubernetes_utils.py",
    "created_at": "2025-06-23T12:55:49+00:00",
    "commented_code": "labels = {}\n         result = build_resource_id_from_labels(resource_type, namespace, labels, resource)\n         self.assertEqual(result, \"Pod.namespace.deployment_name.default\")\n+    \n+    def test_get_folder_definitions_ignore_hidden(self) -> None:\n+        test_root_dir = Path(TEST_DIRNAME) / RELATIVE_PATH\n+        definitions, _ = get_folder_definitions(root_folder=test_root_dir, excluded_paths=[])\n+        file_list = list(definitions.keys())\n+        \n+        self.assertNotIn(FILE_UNDER_HIDDEN_FOLDER, file_list)\n+        self.assertIn(FILE_NOT_HIDDEN, file_list)\n+    \n+    def test_get_folder_definitions_do_not_ignore_hidden(self) -> None:\n+        os.environ[\"CKV_IGNORE_HIDDEN_DIRECTORIES\"] = \"False\"",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "2161559989",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 7219,
        "pr_file": "tests/kubernetes/graph/test_kubernetes_utils.py",
        "discussion_id": "2161559989",
        "commented_code": "@@ -23,3 +27,24 @@ def test_build_resource_id_from_empty_labels(self) -> None:\n         labels = {}\n         result = build_resource_id_from_labels(resource_type, namespace, labels, resource)\n         self.assertEqual(result, \"Pod.namespace.deployment_name.default\")\n+    \n+    def test_get_folder_definitions_ignore_hidden(self) -> None:\n+        test_root_dir = Path(TEST_DIRNAME) / RELATIVE_PATH\n+        definitions, _ = get_folder_definitions(root_folder=test_root_dir, excluded_paths=[])\n+        file_list = list(definitions.keys())\n+        \n+        self.assertNotIn(FILE_UNDER_HIDDEN_FOLDER, file_list)\n+        self.assertIn(FILE_NOT_HIDDEN, file_list)\n+    \n+    def test_get_folder_definitions_do_not_ignore_hidden(self) -> None:\n+        os.environ[\"CKV_IGNORE_HIDDEN_DIRECTORIES\"] = \"False\"",
        "comment_created_at": "2025-06-23T12:55:49+00:00",
        "comment_author": "bo156",
        "comment_body": "this will set it for the rest of the process, you can use `monkeypatch` instead to set it just for the test",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161561946",
    "pr_number": 7219,
    "pr_file": "tests/kubernetes/graph/test_kubernetes_utils.py",
    "created_at": "2025-06-23T12:56:26+00:00",
    "commented_code": "labels = {}\n         result = build_resource_id_from_labels(resource_type, namespace, labels, resource)\n         self.assertEqual(result, \"Pod.namespace.deployment_name.default\")\n+    \n+    def test_get_folder_definitions_ignore_hidden(self) -> None:\n+        test_root_dir = Path(TEST_DIRNAME) / RELATIVE_PATH\n+        definitions, _ = get_folder_definitions(root_folder=test_root_dir, excluded_paths=[])\n+        file_list = list(definitions.keys())\n+        \n+        self.assertNotIn(FILE_UNDER_HIDDEN_FOLDER, file_list)\n+        self.assertIn(FILE_NOT_HIDDEN, file_list)\n+    \n+    def test_get_folder_definitions_do_not_ignore_hidden(self) -> None:\n+        os.environ[\"CKV_IGNORE_HIDDEN_DIRECTORIES\"] = \"False\"\n+        importlib.reload(k8s_utils)",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "2161561946",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 7219,
        "pr_file": "tests/kubernetes/graph/test_kubernetes_utils.py",
        "discussion_id": "2161561946",
        "commented_code": "@@ -23,3 +27,24 @@ def test_build_resource_id_from_empty_labels(self) -> None:\n         labels = {}\n         result = build_resource_id_from_labels(resource_type, namespace, labels, resource)\n         self.assertEqual(result, \"Pod.namespace.deployment_name.default\")\n+    \n+    def test_get_folder_definitions_ignore_hidden(self) -> None:\n+        test_root_dir = Path(TEST_DIRNAME) / RELATIVE_PATH\n+        definitions, _ = get_folder_definitions(root_folder=test_root_dir, excluded_paths=[])\n+        file_list = list(definitions.keys())\n+        \n+        self.assertNotIn(FILE_UNDER_HIDDEN_FOLDER, file_list)\n+        self.assertIn(FILE_NOT_HIDDEN, file_list)\n+    \n+    def test_get_folder_definitions_do_not_ignore_hidden(self) -> None:\n+        os.environ[\"CKV_IGNORE_HIDDEN_DIRECTORIES\"] = \"False\"\n+        importlib.reload(k8s_utils)",
        "comment_created_at": "2025-06-23T12:56:26+00:00",
        "comment_author": "bo156",
        "comment_body": "that's not common practice, please use mocks for the test using `monkeypatch`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1979002522",
    "pr_number": 7032,
    "pr_file": "tests/terraform/graph/checks/test_yaml_connected_nodes.py",
    "created_at": "2025-03-04T09:31:44+00:00",
    "commented_code": "assert report.passed_checks[1].connected_node['resource'] == 'aws_s3_bucket_logging.example'\n         assert report.passed_checks[1].connected_node['file_line_range'] == [14, 19]\n \n-    def get_report(self, dir_name):\n+    def test_correct_connected_node_per_check(self):\n+        failed_check_id_with_connected_node = 'CKV_AWS_144'\n+        pass_check_id_with_connected_node = 'CKV_AWS_145'\n+        pass_check_id_without_connected_node = 'CKV_AWS_20'\n+        check_ids = [failed_check_id_with_connected_node, pass_check_id_with_connected_node, pass_check_id_without_connected_node]\n+\n+        for graph_framework in [\"NETWORKX\", \"RUSTWORKX\"]:",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1979002522",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 7032,
        "pr_file": "tests/terraform/graph/checks/test_yaml_connected_nodes.py",
        "discussion_id": "1979002522",
        "commented_code": "@@ -48,17 +50,45 @@ def test_S3BucketLogging_connected_node(self):\n         assert report.passed_checks[1].connected_node['resource'] == 'aws_s3_bucket_logging.example'\n         assert report.passed_checks[1].connected_node['file_line_range'] == [14, 19]\n \n-    def get_report(self, dir_name):\n+    def test_correct_connected_node_per_check(self):\n+        failed_check_id_with_connected_node = 'CKV_AWS_144'\n+        pass_check_id_with_connected_node = 'CKV_AWS_145'\n+        pass_check_id_without_connected_node = 'CKV_AWS_20'\n+        check_ids = [failed_check_id_with_connected_node, pass_check_id_with_connected_node, pass_check_id_without_connected_node]\n+\n+        for graph_framework in [\"NETWORKX\", \"RUSTWORKX\"]:",
        "comment_created_at": "2025-03-04T09:31:44+00:00",
        "comment_author": "bo156",
        "comment_body": "we have this parametrization in other places in the code, you can also use `pytest.mark.parametrize`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1306646448",
    "pr_number": 5492,
    "pr_file": "tests/terraform/graph/checks_infra/resource_solvers/exists_solver/test_solver.py",
    "created_at": "2023-08-27T11:15:15+00:00",
    "commented_code": "+from pathlib import Path\n+\n+from parameterized import parameterized_class\n+\n+from tests.terraform.graph.checks_infra.test_base import TestBaseSolver\n+\n+TEST_DIRNAME = Path(__file__).parent\n+\n+\n+@parameterized_class([{\"graph_framework\": \"NETWORKX\"}, {\"graph_framework\": \"IGRAPH\"}])\n+class ExistsSolver(TestBaseSolver):\n+    def setUp(self):",
    "repo_full_name": "bridgecrewio/checkov",
    "discussion_comments": [
      {
        "comment_id": "1306646448",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5492,
        "pr_file": "tests/terraform/graph/checks_infra/resource_solvers/exists_solver/test_solver.py",
        "discussion_id": "1306646448",
        "commented_code": "@@ -0,0 +1,33 @@\n+from pathlib import Path\n+\n+from parameterized import parameterized_class\n+\n+from tests.terraform.graph.checks_infra.test_base import TestBaseSolver\n+\n+TEST_DIRNAME = Path(__file__).parent\n+\n+\n+@parameterized_class([{\"graph_framework\": \"NETWORKX\"}, {\"graph_framework\": \"IGRAPH\"}])\n+class ExistsSolver(TestBaseSolver):\n+    def setUp(self):",
        "comment_created_at": "2023-08-27T11:15:15+00:00",
        "comment_author": "bo156",
        "comment_body": "maybe use `pytest` instead of `unittest` for new tests? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1306663850",
        "repo_full_name": "bridgecrewio/checkov",
        "pr_number": 5492,
        "pr_file": "tests/terraform/graph/checks_infra/resource_solvers/exists_solver/test_solver.py",
        "discussion_id": "1306646448",
        "commented_code": "@@ -0,0 +1,33 @@\n+from pathlib import Path\n+\n+from parameterized import parameterized_class\n+\n+from tests.terraform.graph.checks_infra.test_base import TestBaseSolver\n+\n+TEST_DIRNAME = Path(__file__).parent\n+\n+\n+@parameterized_class([{\"graph_framework\": \"NETWORKX\"}, {\"graph_framework\": \"IGRAPH\"}])\n+class ExistsSolver(TestBaseSolver):\n+    def setUp(self):",
        "comment_created_at": "2023-08-27T13:14:13+00:00",
        "comment_author": "gruebel",
        "comment_body": "the parent calss `TestBaseSolver` comes with a couple of convenient functions, which I didn't plan to duplicate, but I will double check what's the effort ðŸ™‚ ",
        "pr_file_module": null
      }
    ]
  }
]