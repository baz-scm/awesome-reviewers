[
  {
    "discussion_id": "1763995053",
    "pr_number": 14582,
    "pr_file": "lib/chef/action_collection.rb",
    "created_at": "2024-09-17T20:44:45+00:00",
    "commented_code": "# (see EventDispatch::Base#)\n    #\n    def resource_skipped(resource, action, conditional)\n      current_record.status = :skipped\n      current_record.conditional = conditional\n      unless current_record.nil?\n        current_record.status = :skipped\n        current_record.conditional = conditional\n      end",
    "repo_full_name": "chef/chef",
    "discussion_comments": [
      {
        "comment_id": "1763995053",
        "repo_full_name": "chef/chef",
        "pr_number": 14582,
        "pr_file": "lib/chef/action_collection.rb",
        "discussion_id": "1763995053",
        "commented_code": "@@ -189,8 +189,10 @@ def resource_up_to_date(new_resource, action)\n     # (see EventDispatch::Base#)\n     #\n     def resource_skipped(resource, action, conditional)\n-      current_record.status = :skipped\n-      current_record.conditional = conditional\n+      unless current_record.nil?\n+        current_record.status = :skipped\n+        current_record.conditional = conditional\n+      end",
        "comment_created_at": "2024-09-17T20:44:45+00:00",
        "comment_author": "tpowell-progress",
        "comment_body": "```suggestion\r\n      return if current_record.nil?\r\n      \r\n      current_record.status = :skipped\r\n      current_record.conditional = conditional\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1763996558",
        "repo_full_name": "chef/chef",
        "pr_number": 14582,
        "pr_file": "lib/chef/action_collection.rb",
        "discussion_id": "1763995053",
        "commented_code": "@@ -189,8 +189,10 @@ def resource_up_to_date(new_resource, action)\n     # (see EventDispatch::Base#)\n     #\n     def resource_skipped(resource, action, conditional)\n-      current_record.status = :skipped\n-      current_record.conditional = conditional\n+      unless current_record.nil?\n+        current_record.status = :skipped\n+        current_record.conditional = conditional\n+      end",
        "comment_created_at": "2024-09-17T20:46:07+00:00",
        "comment_author": "tpowell-progress",
        "comment_body": "Use a guard instead of `unless` block.",
        "pr_file_module": null
      },
      {
        "comment_id": "1764248147",
        "repo_full_name": "chef/chef",
        "pr_number": 14582,
        "pr_file": "lib/chef/action_collection.rb",
        "discussion_id": "1763995053",
        "commented_code": "@@ -189,8 +189,10 @@ def resource_up_to_date(new_resource, action)\n     # (see EventDispatch::Base#)\n     #\n     def resource_skipped(resource, action, conditional)\n-      current_record.status = :skipped\n-      current_record.conditional = conditional\n+      unless current_record.nil?\n+        current_record.status = :skipped\n+        current_record.conditional = conditional\n+      end",
        "comment_created_at": "2024-09-18T00:46:28+00:00",
        "comment_author": "jamespdo",
        "comment_body": "updated per request, please rereview",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904548771",
    "pr_number": 14777,
    "pr_file": "knife/lib/chef/utils/licensing_handler.rb",
    "created_at": "2025-01-06T19:25:36+00:00",
    "commented_code": "class << self\n        def validate!\n          license_keys = ChefLicensing::LicenseKeyFetcher.fetch\n\n          return new(nil, nil) if license_keys.blank?\n          license_keys = begin\n                           ChefLicensing::LicenseKeyFetcher.fetch\n                         # If the env is airgapped or the local licensing service is unreachable,\n                         # the licensing gem will raise ChefLicensing::RestfulClientConnectionError.\n                         # In such cases, we are assuming the license is not available.\n                         rescue ChefLicensing::RestfulClientConnectionError\n                           []\n                         end\n\n          return new(nil, nil) if license_keys.nil? || license_keys.empty?",
    "repo_full_name": "chef/chef",
    "discussion_comments": [
      {
        "comment_id": "1904548771",
        "repo_full_name": "chef/chef",
        "pr_number": 14777,
        "pr_file": "knife/lib/chef/utils/licensing_handler.rb",
        "discussion_id": "1904548771",
        "commented_code": "@@ -30,9 +30,16 @@ def install_sh_url\n \n       class << self\n         def validate!\n-          license_keys = ChefLicensing::LicenseKeyFetcher.fetch\n-\n-          return new(nil, nil) if license_keys.blank?\n+          license_keys = begin\n+                           ChefLicensing::LicenseKeyFetcher.fetch\n+                         # If the env is airgapped or the local licensing service is unreachable,\n+                         # the licensing gem will raise ChefLicensing::RestfulClientConnectionError.\n+                         # In such cases, we are assuming the license is not available.\n+                         rescue ChefLicensing::RestfulClientConnectionError\n+                           []\n+                         end\n+\n+          return new(nil, nil) if license_keys.nil? || license_keys.empty?",
        "comment_created_at": "2025-01-06T19:25:36+00:00",
        "comment_author": "Stromweld",
        "comment_body": "This can be simplified to use safe navigation that checks for nil before trying method empty. If nil it'll return nill which is then false in the if statement.\r\n```suggestion\r\n          return new(nil, nil) if license_keys&.empty?\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1369667380",
    "pr_number": 14043,
    "pr_file": "lib/chef/resource/chocolatey_installer.rb",
    "created_at": "2023-10-24T06:10:14+00:00",
    "commented_code": "class Chef\n  class Resource\n    class ChocolateyInstaller < Chef::Resource\n      provides :chocolatey_installer\n\n      description \"Use the Chocolatey Installer resource to ensure that Choco is installed to your specification. Use the Chocolatey Feature resource to customize your install\"\n      introduced \"18.3\"\n      examples <<~DOC\n          **Install Chocolatey**\n\n          ```ruby\n          chocolatey_installer 'latest' do\n            action :install\n          end\n          ```\n\n          **Uninstall Chocolatey**\n\n          ```ruby\n          chocolatey_installer 'Some random verbiage' do\n            action :uninstall\n          end\n          ```\n\n          **Install Chocolatey with Parameters**\n\n          ```ruby\n          chocolatey_installer 'latest' do\n            action :install\n            download_url \"https://www.contoso.com/foo\"\n            chocolatey_version '2.12.24'\n          end\n          ```\n\n          **Upgrade Chocolatey with Parameters**\n\n          ```ruby\n          chocolatey_installer 'latest' do\n            action :upgrade\n            chocolatey_version '2.12.24'\n          end\n          ```\n      DOC\n\n      allowed_actions :install, :uninstall, :upgrade\n\n      property :download_url, String,\n        description: \"The URL to download Chocolatey from. This defaults to the value of $env:ChocolateyDownloadUrl, if it is set, and otherwise falls back to the official Chocolatey community repository to download the Chocolatey package. It can be used for offline installation by providing a path to a Chocolatey.nupkg.\"\n\n      property :chocolatey_version, String,\n        description: \"Specifies a target version of Chocolatey to install. By default, the latest stable version is installed. This will use the value in $env:ChocolateyVersion by default, if that environment variable is present. This parameter is ignored if download_url is set.\"\n\n      property :use_native_unzip, [TrueClass, FalseClass], default: false,\n        description: \"If set, uses built-in Windows decompression tools instead of 7zip when unpacking the downloaded nupkg. This will be set by default if use_native_unzip is set to a value other than 'false' or '0'. This parameter will be ignored in PS 5+ in favour of using the Expand-Archive built in PowerShell cmdlet directly.\"\n\n      property :ignore_proxy, [TrueClass, FalseClass], default: false,\n        description: \"If set, ignores any configured proxy. This will override any proxy environment variables or parameters. This will be set by default if ignore_proxy is set to a value other than 'false' or '0'.\"\n\n      property :proxy_url, String,\n        description: \"Specifies the proxy URL to use during the download.\"\n\n      property :proxy_user, String,\n        description: \"The username to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_password are set\"\n\n      property :proxy_password, String,\n        description: \"The password to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_user are set\"\n\n      load_current_value do\n        current_state = is_choco_installed?\n        current_value_does_not_exist! if current_state == false\n        current_state\n      end\n\n      def is_choco_installed?\n        ::File.exist?(\"#{ENV[\"ALLUSERSPROFILE\"]}\\\\chocolatey\\\\bin\\\\choco.exe\")\n      end\n\n      def get_choco_version\n        powershell_exec(\"choco --version\").result\n      end\n\n      def existing_version\n        Gem::Version.new(get_choco_version)\n      end\n\n      def define_resource_requirements\n        [ new_resource.proxy_user, new_resource.proxy_password ].each do\n          requirements.assert(:install, :upgrade).each do |a|\n            a.assertion do\n              (!new_resource.proxy_user.nil? && new_resource.proxy_password.nil?) || (new_resource.proxy_user.nil? && !new_resource.proxy_password.nil?)\n            end\n            a.failure_message(Chef::Exceptions::ValidationFailed, \"You must specify both a proxy_user and a proxy_password\")\n            a.whyrun(\"Assuming that if you have configured a 'proxy_user' you must also supply a 'proxy_password'\")\n          end\n        end\n      end\n\n      action :install, description: \"Installs Chocolatey package manager\" do\n        unless new_resource.download_url.nil?",
    "repo_full_name": "chef/chef",
    "discussion_comments": [
      {
        "comment_id": "1369667380",
        "repo_full_name": "chef/chef",
        "pr_number": 14043,
        "pr_file": "lib/chef/resource/chocolatey_installer.rb",
        "discussion_id": "1369667380",
        "commented_code": "@@ -0,0 +1,198 @@\n+class Chef\n+  class Resource\n+    class ChocolateyInstaller < Chef::Resource\n+      provides :chocolatey_installer\n+\n+      description \"Use the Chocolatey Installer resource to ensure that Choco is installed to your specification. Use the Chocolatey Feature resource to customize your install\"\n+      introduced \"18.3\"\n+      examples <<~DOC\n+          **Install Chocolatey**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :install\n+          end\n+          ```\n+\n+          **Uninstall Chocolatey**\n+\n+          ```ruby\n+          chocolatey_installer 'Some random verbiage' do\n+            action :uninstall\n+          end\n+          ```\n+\n+          **Install Chocolatey with Parameters**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :install\n+            download_url \"https://www.contoso.com/foo\"\n+            chocolatey_version '2.12.24'\n+          end\n+          ```\n+\n+          **Upgrade Chocolatey with Parameters**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :upgrade\n+            chocolatey_version '2.12.24'\n+          end\n+          ```\n+      DOC\n+\n+      allowed_actions :install, :uninstall, :upgrade\n+\n+      property :download_url, String,\n+        description: \"The URL to download Chocolatey from. This defaults to the value of $env:ChocolateyDownloadUrl, if it is set, and otherwise falls back to the official Chocolatey community repository to download the Chocolatey package. It can be used for offline installation by providing a path to a Chocolatey.nupkg.\"\n+\n+      property :chocolatey_version, String,\n+        description: \"Specifies a target version of Chocolatey to install. By default, the latest stable version is installed. This will use the value in $env:ChocolateyVersion by default, if that environment variable is present. This parameter is ignored if download_url is set.\"\n+\n+      property :use_native_unzip, [TrueClass, FalseClass], default: false,\n+        description: \"If set, uses built-in Windows decompression tools instead of 7zip when unpacking the downloaded nupkg. This will be set by default if use_native_unzip is set to a value other than 'false' or '0'. This parameter will be ignored in PS 5+ in favour of using the Expand-Archive built in PowerShell cmdlet directly.\"\n+\n+      property :ignore_proxy, [TrueClass, FalseClass], default: false,\n+        description: \"If set, ignores any configured proxy. This will override any proxy environment variables or parameters. This will be set by default if ignore_proxy is set to a value other than 'false' or '0'.\"\n+\n+      property :proxy_url, String,\n+        description: \"Specifies the proxy URL to use during the download.\"\n+\n+      property :proxy_user, String,\n+        description: \"The username to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_password are set\"\n+\n+      property :proxy_password, String,\n+        description: \"The password to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_user are set\"\n+\n+      load_current_value do\n+        current_state = is_choco_installed?\n+        current_value_does_not_exist! if current_state == false\n+        current_state\n+      end\n+\n+      def is_choco_installed?\n+        ::File.exist?(\"#{ENV[\"ALLUSERSPROFILE\"]}\\\\chocolatey\\\\bin\\\\choco.exe\")\n+      end\n+\n+      def get_choco_version\n+        powershell_exec(\"choco --version\").result\n+      end\n+\n+      def existing_version\n+        Gem::Version.new(get_choco_version)\n+      end\n+\n+      def define_resource_requirements\n+        [ new_resource.proxy_user, new_resource.proxy_password ].each do\n+          requirements.assert(:install, :upgrade).each do |a|\n+            a.assertion do\n+              (!new_resource.proxy_user.nil? && new_resource.proxy_password.nil?) || (new_resource.proxy_user.nil? && !new_resource.proxy_password.nil?)\n+            end\n+            a.failure_message(Chef::Exceptions::ValidationFailed, \"You must specify both a proxy_user and a proxy_password\")\n+            a.whyrun(\"Assuming that if you have configured a 'proxy_user' you must also supply a 'proxy_password'\")\n+          end\n+        end\n+      end\n+\n+      action :install, description: \"Installs Chocolatey package manager\" do\n+        unless new_resource.download_url.nil?",
        "comment_created_at": "2023-10-24T06:10:14+00:00",
        "comment_author": "jaymzh",
        "comment_body": "You can just do\r\n```suggestion\r\n        if new_resource.download_url\r\n```\r\n\r\nRuby treats that was defined, not nil, not false.",
        "pr_file_module": null
      },
      {
        "comment_id": "1370275715",
        "repo_full_name": "chef/chef",
        "pr_number": 14043,
        "pr_file": "lib/chef/resource/chocolatey_installer.rb",
        "discussion_id": "1369667380",
        "commented_code": "@@ -0,0 +1,198 @@\n+class Chef\n+  class Resource\n+    class ChocolateyInstaller < Chef::Resource\n+      provides :chocolatey_installer\n+\n+      description \"Use the Chocolatey Installer resource to ensure that Choco is installed to your specification. Use the Chocolatey Feature resource to customize your install\"\n+      introduced \"18.3\"\n+      examples <<~DOC\n+          **Install Chocolatey**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :install\n+          end\n+          ```\n+\n+          **Uninstall Chocolatey**\n+\n+          ```ruby\n+          chocolatey_installer 'Some random verbiage' do\n+            action :uninstall\n+          end\n+          ```\n+\n+          **Install Chocolatey with Parameters**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :install\n+            download_url \"https://www.contoso.com/foo\"\n+            chocolatey_version '2.12.24'\n+          end\n+          ```\n+\n+          **Upgrade Chocolatey with Parameters**\n+\n+          ```ruby\n+          chocolatey_installer 'latest' do\n+            action :upgrade\n+            chocolatey_version '2.12.24'\n+          end\n+          ```\n+      DOC\n+\n+      allowed_actions :install, :uninstall, :upgrade\n+\n+      property :download_url, String,\n+        description: \"The URL to download Chocolatey from. This defaults to the value of $env:ChocolateyDownloadUrl, if it is set, and otherwise falls back to the official Chocolatey community repository to download the Chocolatey package. It can be used for offline installation by providing a path to a Chocolatey.nupkg.\"\n+\n+      property :chocolatey_version, String,\n+        description: \"Specifies a target version of Chocolatey to install. By default, the latest stable version is installed. This will use the value in $env:ChocolateyVersion by default, if that environment variable is present. This parameter is ignored if download_url is set.\"\n+\n+      property :use_native_unzip, [TrueClass, FalseClass], default: false,\n+        description: \"If set, uses built-in Windows decompression tools instead of 7zip when unpacking the downloaded nupkg. This will be set by default if use_native_unzip is set to a value other than 'false' or '0'. This parameter will be ignored in PS 5+ in favour of using the Expand-Archive built in PowerShell cmdlet directly.\"\n+\n+      property :ignore_proxy, [TrueClass, FalseClass], default: false,\n+        description: \"If set, ignores any configured proxy. This will override any proxy environment variables or parameters. This will be set by default if ignore_proxy is set to a value other than 'false' or '0'.\"\n+\n+      property :proxy_url, String,\n+        description: \"Specifies the proxy URL to use during the download.\"\n+\n+      property :proxy_user, String,\n+        description: \"The username to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_password are set\"\n+\n+      property :proxy_password, String,\n+        description: \"The password to use to build a proxy credential with. Will be consumed by the proxy_credential property if both this property and proxy_user are set\"\n+\n+      load_current_value do\n+        current_state = is_choco_installed?\n+        current_value_does_not_exist! if current_state == false\n+        current_state\n+      end\n+\n+      def is_choco_installed?\n+        ::File.exist?(\"#{ENV[\"ALLUSERSPROFILE\"]}\\\\chocolatey\\\\bin\\\\choco.exe\")\n+      end\n+\n+      def get_choco_version\n+        powershell_exec(\"choco --version\").result\n+      end\n+\n+      def existing_version\n+        Gem::Version.new(get_choco_version)\n+      end\n+\n+      def define_resource_requirements\n+        [ new_resource.proxy_user, new_resource.proxy_password ].each do\n+          requirements.assert(:install, :upgrade).each do |a|\n+            a.assertion do\n+              (!new_resource.proxy_user.nil? && new_resource.proxy_password.nil?) || (new_resource.proxy_user.nil? && !new_resource.proxy_password.nil?)\n+            end\n+            a.failure_message(Chef::Exceptions::ValidationFailed, \"You must specify both a proxy_user and a proxy_password\")\n+            a.whyrun(\"Assuming that if you have configured a 'proxy_user' you must also supply a 'proxy_password'\")\n+          end\n+        end\n+      end\n+\n+      action :install, description: \"Installs Chocolatey package manager\" do\n+        unless new_resource.download_url.nil?",
        "comment_created_at": "2023-10-24T14:23:02+00:00",
        "comment_author": "johnmccrae",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "438613990",
    "pr_number": 9976,
    "pr_file": "lib/chef/provider/package/apt.rb",
    "created_at": "2020-06-11T08:07:13+00:00",
    "commented_code": "}\n        end\n\n        def check_availability(name)\n          name.map do |pkg|\n            showpkg = run_noninteractive(\"apt-cache\", \"search\", pkg).stdout\n            showpkg.empty? ? logger.warn(\"Unable to locate package  #{pkg} \") : pkg\n          end",
    "repo_full_name": "chef/chef",
    "discussion_comments": [
      {
        "comment_id": "438613990",
        "repo_full_name": "chef/chef",
        "pr_number": 9976,
        "pr_file": "lib/chef/provider/package/apt.rb",
        "discussion_id": "438613990",
        "commented_code": "@@ -229,6 +234,12 @@ def package_data_for(pkg)\n           }\n         end\n \n+        def check_availability(name)\n+          name.map do |pkg|\n+            showpkg = run_noninteractive(\"apt-cache\", \"search\", pkg).stdout\n+            showpkg.empty? ? logger.warn(\"Unable to locate package  #{pkg} \") : pkg\n+          end",
        "comment_created_at": "2020-06-11T08:07:13+00:00",
        "comment_author": "jaymzh",
        "comment_body": "do you nee to call `.compact` here so you don't return a bunch of `nil`s?",
        "pr_file_module": null
      },
      {
        "comment_id": "438754307",
        "repo_full_name": "chef/chef",
        "pr_number": 9976,
        "pr_file": "lib/chef/provider/package/apt.rb",
        "discussion_id": "438613990",
        "commented_code": "@@ -229,6 +234,12 @@ def package_data_for(pkg)\n           }\n         end\n \n+        def check_availability(name)\n+          name.map do |pkg|\n+            showpkg = run_noninteractive(\"apt-cache\", \"search\", pkg).stdout\n+            showpkg.empty? ? logger.warn(\"Unable to locate package  #{pkg} \") : pkg\n+          end",
        "comment_created_at": "2020-06-11T12:44:37+00:00",
        "comment_author": "dheerajd-msys",
        "comment_body": "Thanks @jaymzh, Updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "778370434",
    "pr_number": 12416,
    "pr_file": "lib/chef/resource/chef_client_config.rb",
    "created_at": "2022-01-04T20:33:46+00:00",
    "commented_code": "introduced: \"17.8\"\n\n      action :create, description: \"Create a client.rb config file for configuring #{ChefUtils::Dist::Infra::PRODUCT}.\" do\n        unless ::Dir.exist?(new_resource.config_directory)\n          directory new_resource.config_directory do\n        [\n          new_resource.config_directory,\n          (::File.dirname(new_resource.log_location) unless new_resource.log_location.nil?),\n          new_resource.file_backup_path,\n          new_resource.file_cache_path,\n          ::File.join(new_resource.config_directory, \"client.d\"),\n          (::File.dirname(new_resource.pid_file) unless new_resource.pid_file.nil?),\n        ].each do |dir_path|\n          next if dir_path.nil?\n          next if ::Dir.exist?(dir_path)\n\n          directory dir_path do\n            user new_resource.user unless new_resource.user.nil?\n            group new_resource.group unless new_resource.group.nil?\n            mode \"0750\"\n            recursive true\n          end\n        end\n\n        unless ::Dir.exist?(::File.join(new_resource.config_directory, \"client.d\"))\n          directory ::File.join(new_resource.config_directory, \"client.d\") do\n            user new_resource.user unless new_resource.user.nil?\n            group new_resource.group unless new_resource.group.nil?\n            mode \"0750\"\n            mode dir_path == ::File&.dirname(new_resource.log_location) ? \"0755\" : \"0750\"",
    "repo_full_name": "chef/chef",
    "discussion_comments": [
      {
        "comment_id": "778370434",
        "repo_full_name": "chef/chef",
        "pr_number": 12416,
        "pr_file": "lib/chef/resource/chef_client_config.rb",
        "discussion_id": "778370434",
        "commented_code": "@@ -250,20 +250,21 @@ def string_to_symbol(prop_val)\n         introduced: \"17.8\"\n \n       action :create, description: \"Create a client.rb config file for configuring #{ChefUtils::Dist::Infra::PRODUCT}.\" do\n-        unless ::Dir.exist?(new_resource.config_directory)\n-          directory new_resource.config_directory do\n+        [\n+          new_resource.config_directory,\n+          (::File.dirname(new_resource.log_location) unless new_resource.log_location.nil?),\n+          new_resource.file_backup_path,\n+          new_resource.file_cache_path,\n+          ::File.join(new_resource.config_directory, \"client.d\"),\n+          (::File.dirname(new_resource.pid_file) unless new_resource.pid_file.nil?),\n+        ].each do |dir_path|\n+          next if dir_path.nil?\n+          next if ::Dir.exist?(dir_path)\n+\n+          directory dir_path do\n             user new_resource.user unless new_resource.user.nil?\n             group new_resource.group unless new_resource.group.nil?\n-            mode \"0750\"\n-            recursive true\n-          end\n-        end\n-\n-        unless ::Dir.exist?(::File.join(new_resource.config_directory, \"client.d\"))\n-          directory ::File.join(new_resource.config_directory, \"client.d\") do\n-            user new_resource.user unless new_resource.user.nil?\n-            group new_resource.group unless new_resource.group.nil?\n-            mode \"0750\"\n+            mode dir_path == ::File&.dirname(new_resource.log_location) ? \"0755\" : \"0750\"",
        "comment_created_at": "2022-01-04T20:33:46+00:00",
        "comment_author": "lamont-granquist",
        "comment_body": "The `&.` here could be `.` since `::File` will never be nil",
        "pr_file_module": null
      },
      {
        "comment_id": "779101985",
        "repo_full_name": "chef/chef",
        "pr_number": 12416,
        "pr_file": "lib/chef/resource/chef_client_config.rb",
        "discussion_id": "778370434",
        "commented_code": "@@ -250,20 +250,21 @@ def string_to_symbol(prop_val)\n         introduced: \"17.8\"\n \n       action :create, description: \"Create a client.rb config file for configuring #{ChefUtils::Dist::Infra::PRODUCT}.\" do\n-        unless ::Dir.exist?(new_resource.config_directory)\n-          directory new_resource.config_directory do\n+        [\n+          new_resource.config_directory,\n+          (::File.dirname(new_resource.log_location) unless new_resource.log_location.nil?),\n+          new_resource.file_backup_path,\n+          new_resource.file_cache_path,\n+          ::File.join(new_resource.config_directory, \"client.d\"),\n+          (::File.dirname(new_resource.pid_file) unless new_resource.pid_file.nil?),\n+        ].each do |dir_path|\n+          next if dir_path.nil?\n+          next if ::Dir.exist?(dir_path)\n+\n+          directory dir_path do\n             user new_resource.user unless new_resource.user.nil?\n             group new_resource.group unless new_resource.group.nil?\n-            mode \"0750\"\n-            recursive true\n-          end\n-        end\n-\n-        unless ::Dir.exist?(::File.join(new_resource.config_directory, \"client.d\"))\n-          directory ::File.join(new_resource.config_directory, \"client.d\") do\n-            user new_resource.user unless new_resource.user.nil?\n-            group new_resource.group unless new_resource.group.nil?\n-            mode \"0750\"\n+            mode dir_path == ::File&.dirname(new_resource.log_location) ? \"0755\" : \"0750\"",
        "comment_created_at": "2022-01-05T20:02:04+00:00",
        "comment_author": "Stromweld",
        "comment_body": "removed &",
        "pr_file_module": null
      }
    ]
  }
]