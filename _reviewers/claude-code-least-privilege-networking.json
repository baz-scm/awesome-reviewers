[
  {
    "discussion_id": "1988435575",
    "pr_number": 328,
    "pr_file": ".devcontainer/init-firewall.sh",
    "created_at": "2025-03-11T05:39:10+00:00",
    "commented_code": "#!/bin/bash\n-set -euo pipefail  # Exit on error, undefined vars, and pipeline failures\n-IFS=$'\n\\t'       # Stricter word splitting\n-\n-# Flush existing rules and delete existing ipsets\n-iptables -F\n-iptables -X\n-iptables -t nat -F\n-iptables -t nat -X\n-iptables -t mangle -F\n-iptables -t mangle -X\n-ipset destroy allowed-domains 2>/dev/null || true\n-\n-# First allow DNS and localhost before any restrictions\n-# Allow outbound DNS\n-iptables -A OUTPUT -p udp --dport 53 -j ACCEPT\n-# Allow inbound DNS responses\n-iptables -A INPUT -p udp --sport 53 -j ACCEPT\n-# Allow outbound SSH\n-iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\n-# Allow inbound SSH responses\n-iptables -A INPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n-# Allow localhost\n-iptables -A INPUT -i lo -j ACCEPT\n-iptables -A OUTPUT -o lo -j ACCEPT\n-\n-# Create ipset with CIDR support\n-ipset create allowed-domains hash:net\n-\n-# Fetch GitHub meta information and aggregate + add their IP ranges\n-echo \"Fetching GitHub IP ranges...\"\n-gh_ranges=$(curl -s https://api.github.com/meta)\n-if [ -z \"$gh_ranges\" ]; then\n-    echo \"ERROR: Failed to fetch GitHub IP ranges\"\n-    exit 1\n-fi\n+set -uo pipefail\n+IFS=$'\n\\t'\n \n-if ! echo \"$gh_ranges\" | jq -e '.web and .api and .git' >/dev/null; then\n-    echo \"ERROR: GitHub API response missing required fields\"\n-    exit 1\n-fi\n+# Global variables\n+DEBUG=${DEBUG:-false}\n+ADDED_IPS_FILE=\"/tmp/claude-fw-added-ips.txt\"\n+IPV6_ENABLED=false\n+IPSET_AVAILABLE=true\n \n-echo \"Processing GitHub IPs...\"\n-while read -r cidr; do\n-    if [[ ! \"$cidr\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then\n-        echo \"ERROR: Invalid CIDR range from GitHub meta: $cidr\"\n-        exit 1\n+# Logging functions\n+log() { echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\"; }\n+error() { log \"ERROR: $1\"; }\n+warning() { log \"WARNING: $1\"; }\n+debug_log() { [ \"$DEBUG\" = true ] && log \"DEBUG: $1\"; }\n+\n+# Execute command with fallback\n+try_cmd() {\n+    debug_log \"Trying: $1\"\n+    if eval \"$1\" &>/dev/null; then return 0; fi\n+    if [ -n \"$2\" ]; then\n+        debug_log \"Trying fallback: $2\"\n+        if eval \"$2\" &>/dev/null; then return 0; fi\n     fi\n-    echo \"Adding GitHub range $cidr\"\n-    ipset add allowed-domains \"$cidr\"\n-done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' | aggregate -q)\n-\n-# Resolve and add other allowed domains\n-for domain in \\\n-    \"registry.npmjs.org\" \\\n-    \"api.anthropic.com\" \\\n-    \"sentry.io\" \\\n-    \"statsig.anthropic.com\" \\\n-    \"statsig.com\"; do\n-    echo \"Resolving $domain...\"\n-    ips=$(dig +short A \"$domain\")\n-    if [ -z \"$ips\" ]; then\n-        echo \"ERROR: Failed to resolve $domain\"\n-        exit 1\n+    warning \"Failed: ${3:-Command}\"\n+    return 1\n+}\n+\n+# Add IP to allowed list with deduplication\n+add_ip() {\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if [ \"$IPSET_AVAILABLE\" = true ] && ipset add claude-allowed-domains \"$ip\"; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    elif iptables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IP: $ip\"\n+        return 1\n+    fi\n+}\n+\n+# Add IPv6 if supported\n+add_ipv6() {\n+    [ \"$IPV6_ENABLED\" != true ] && return 0\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if ip6tables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IPv6: $ip\"\n+        return 1\n     fi\n-    \n+}\n+\n+# Resolve domain and add IPs\n+add_domain() {\n+    local domain=\"$1\"\n+    log \"Resolving $domain...\"\n+\n+    local ips=$(dig +short A \"$domain\" || echo \"\")\n+    [ -z \"$ips\" ] && warning \"Failed to resolve $domain\" && return 1\n+\n+    local count=0\n     while read -r ip; do\n-        if [[ ! \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n-            echo \"ERROR: Invalid IP from DNS for $domain: $ip\"\n-            exit 1\n-        fi\n-        echo \"Adding $ip for $domain\"\n-        ipset add allowed-domains \"$ip\"\n+        [[ -n \"$ip\" && \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]] && add_ip \"$ip\" && count=$((count+1))\n     done < <(echo \"$ips\")\n+\n+    debug_log \"Added $count IPs for $domain\"\n+    return 0\n+}\n+\n+# Add networks for interface\n+add_interface() {\n+    local iface=\"$1\"\n+    log \"Adding networks for interface $iface...\"\n+\n+    local addresses=$(ip -o addr show dev \"$iface\" | grep -w inet | awk '{print $4}')\n+    [ -z \"$addresses\" ] && debug_log \"No addresses for $iface\" && return 1\n+\n+    local count=0\n+    for addr in $addresses; do\n+        if try_cmd \"iptables -A CLAUDE_INPUT -s $addr -j ACCEPT\" \"\" \"INPUT rule for $addr\" &&\n+           try_cmd \"iptables -A CLAUDE_OUTPUT -d $addr -j ACCEPT\" \"\" \"OUTPUT rule for $addr\"; then\n+            count=$((count+1))\n+        fi\n+    done\n+\n+    log \"Added $count network rules for $iface\"\n+    return 0\n+}\n+\n+# Clean up rules\n+cleanup() {\n+    log \"Cleaning up...\"\n+    iptables -D INPUT -j CLAUDE_INPUT || true\n+    iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+    iptables -D FORWARD -j CLAUDE_FORWARD || true\n+    iptables -F CLAUDE_INPUT || true\n+    iptables -F CLAUDE_OUTPUT || true\n+    iptables -F CLAUDE_FORWARD || true\n+    iptables -X CLAUDE_INPUT || true\n+    iptables -X CLAUDE_OUTPUT || true\n+    iptables -X CLAUDE_FORWARD || true\n+    ipset destroy claude-allowed-domains || true\n+    rm -f \"$ADDED_IPS_FILE\"\n+    log \"Cleanup complete\"\n+}\n+\n+# Test connectivity\n+test_conn() {\n+    log \"Testing connectivity to $1...\"\n+    if curl --connect-timeout 5 -s \"https://$1\" >/dev/null 2>&1; then\n+        log \"\u2713 Connection to $1 successful\"\n+        return 0\n+    else\n+        warning \"Unable to reach $1\"\n+        return 1\n+    fi\n+}\n+\n+# Set up trap for cleanup\n+trap cleanup INT TERM\n+\n+# Check for command availability\n+for cmd in iptables curl; do\n+    command -v \"$cmd\" &>/dev/null || { error \"Required command '$cmd' not found\"; exit 1; }\n+done\n+\n+for cmd in ipset ip6tables; do\n+    if ! command -v \"$cmd\" &>/dev/null; then\n+        warning \"Optional command '$cmd' not found, limited functionality\"\n+        [ \"$cmd\" = \"ipset\" ] && IPSET_AVAILABLE=false\n+        [ \"$cmd\" = \"ip6tables\" ] && IPV6_ENABLED=false\n+    fi\n done\n \n-# Get host IP from default route\n-HOST_IP=$(ip route | grep default | cut -d\" \" -f3)\n-if [ -z \"$HOST_IP\" ]; then\n-    echo \"ERROR: Failed to detect host IP\"\n-    exit 1\n+# Check IPv6 support\n+if [ \"$IPV6_ENABLED\" != true ] && ip -6 addr show &>/dev/null && command -v ip6tables &>/dev/null; then\n+    if ip6tables -L INPUT &>/dev/null; then\n+        log \"IPv6 detected and enabled\"\n+        IPV6_ENABLED=true\n+    fi\n fi\n \n-HOST_NETWORK=$(echo \"$HOST_IP\" | sed \"s/\\.[0-9]*$/.0\\/24/\")\n-echo \"Host network detected as: $HOST_NETWORK\"\n+# Initialize tracking file\n+> \"$ADDED_IPS_FILE\"\n \n-# Set up remaining iptables rules\n-iptables -A INPUT -s \"$HOST_NETWORK\" -j ACCEPT\n-iptables -A OUTPUT -d \"$HOST_NETWORK\" -j ACCEPT\n+# Start configuration\n+log \"Starting Claude firewall configuration...\"\n \n-# Set default policies to DROP first\n-# Set default policies to DROP first\n-iptables -P INPUT DROP\n-iptables -P FORWARD DROP\n-iptables -P OUTPUT DROP\n+# Create custom chains\n+log \"Creating custom chains...\"\n+for chain in CLAUDE_INPUT CLAUDE_OUTPUT CLAUDE_FORWARD; do\n+    try_cmd \"iptables -N $chain\" \"iptables -F $chain\" \"Creating chain $chain\"\n+done\n \n-# First allow established connections for already approved traffic\n-iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n+# Add chain references\n+log \"Adding chain references...\"\n+iptables -D INPUT -j CLAUDE_INPUT || true\n+iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+iptables -D FORWARD -j CLAUDE_FORWARD || true\n \n-# Then allow only specific outbound traffic to allowed domains\n-iptables -A OUTPUT -m set --match-set allowed-domains dst -j ACCEPT\n+try_cmd \"iptables -I INPUT 1 -j CLAUDE_INPUT\" \"iptables -A INPUT -j CLAUDE_INPUT\" \"Jump to CLAUDE_INPUT\"\n+try_cmd \"iptables -I OUTPUT 1 -j CLAUDE_OUTPUT\" \"iptables -A OUTPUT -j CLAUDE_OUTPUT\" \"Jump to CLAUDE_OUTPUT\"\n+try_cmd \"iptables -I FORWARD 1 -j CLAUDE_FORWARD\" \"iptables -A FORWARD -j CLAUDE_FORWARD\" \"Jump to CLAUDE_FORWARD\"\n \n-echo \"Firewall configuration complete\"\n-echo \"Verifying firewall rules...\"\n-if curl --connect-timeout 5 https://example.com >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - was able to reach https://example.com\"\n-    exit 1\n-else\n-    echo \"Firewall verification passed - unable to reach https://example.com as expected\"\n+# Create ipset\n+if [ \"$IPSET_AVAILABLE\" = true ]; then\n+    log \"Creating ipset...\"\n+    ipset destroy claude-allowed-domains || true\n+    if ! ipset create claude-allowed-domains hash:net; then\n+        warning \"Failed to create ipset, using direct rules\"\n+        IPSET_AVAILABLE=false\n+    fi\n fi\n \n-# Verify GitHub API access\n-if ! curl --connect-timeout 5 https://api.github.com/zen >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - unable to reach https://api.github.com\"\n-    exit 1\n+# Basic connectivity rules\n+log \"Setting up basic connectivity...\"\n+try_cmd \"iptables -A CLAUDE_INPUT -i lo -j ACCEPT\" \"iptables -I INPUT 1 -i lo -j ACCEPT\" \"Localhost input\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -o lo -j ACCEPT\" \"iptables -I OUTPUT 1 -o lo -j ACCEPT\" \"Localhost output\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p udp --dport 53 -j ACCEPT\" \"\" \"DNS out UDP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 53 -j ACCEPT\" \"\" \"DNS out TCP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p udp --sport 53 -j ACCEPT\" \"\" \"DNS in UDP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p tcp --sport 53 -j ACCEPT\" \"\" \"DNS in TCP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 22 -j ACCEPT\" \"\" \"SSH out\"\n+try_cmd \"iptables -A CLAUDE_INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED in\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED out\"\n+\n+# Add GitHub IPs\n+log \"Adding GitHub IPs...\"\n+gh_ranges=$(curl -s --connect-timeout 5 https://api.github.com/meta)\n+if [ -n \"$gh_ranges\" ] && echo \"$gh_ranges\" | grep -q \"api\"; then\n+    while read -r cidr; do\n+        [[ -n \"$cidr\" ]] && add_ip \"$cidr\"\n+    done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' || echo \"\")\n else\n-    echo \"Firewall verification passed - able to reach https://api.github.com as expected\"\n+    # Fallback GitHub IPs\n+    for ip in \"140.82.112.0/20\" \"192.30.252.0/22\" \"185.199.108.0/22\" \"143.55.64.0/20\"; do\n+        add_ip \"$ip\"\n+    done\n+fi\n+\n+# Add important domains\n+log \"Adding important domains...\"\n+for domain in \"registry.npmjs.org\" \"api.anthropic.com\" \"sentry.io\" \"statsig.anthropic.com\" \\\n+              \"cursor.blob.core.windows.net\" \"statsig.com\" \"marketplace.visualstudio.com\" \\\n+              \"vscode.blob.core.windows.net\" \"marketplace-cdn.vsassets.io\" \"vsmarketplacebadge.apphb.com\"; do\n+    add_domain \"$domain\"\n+done\n+\n+# Add Azure IPs\n+log \"Adding Azure IPs...\"\n+for azure_ip in \"13.107.246.0/24\" \"13.107.6.0/24\" \"13.107.9.0/24\" \"20.190.128.0/18\" \\\n+                \"40.74.0.0/18\" \"40.90.0.0/16\" \"40.119.0.0/16\" \"40.126.0.0/18\" \\\n+                \"52.133.128.0/17\" \"52.245.64.0/18\" \"204.79.197.0/24\"; do\n+    add_ip \"$azure_ip\"\n+done\n+\n+# Add AWS S3 IPs (simplified)",
    "repo_full_name": "anthropics/claude-code",
    "discussion_comments": [
      {
        "comment_id": "1988435575",
        "repo_full_name": "anthropics/claude-code",
        "pr_number": 328,
        "pr_file": ".devcontainer/init-firewall.sh",
        "discussion_id": "1988435575",
        "commented_code": "@@ -1,119 +1,290 @@\n #!/bin/bash\n-set -euo pipefail  # Exit on error, undefined vars, and pipeline failures\n-IFS=$'\\n\\t'       # Stricter word splitting\n-\n-# Flush existing rules and delete existing ipsets\n-iptables -F\n-iptables -X\n-iptables -t nat -F\n-iptables -t nat -X\n-iptables -t mangle -F\n-iptables -t mangle -X\n-ipset destroy allowed-domains 2>/dev/null || true\n-\n-# First allow DNS and localhost before any restrictions\n-# Allow outbound DNS\n-iptables -A OUTPUT -p udp --dport 53 -j ACCEPT\n-# Allow inbound DNS responses\n-iptables -A INPUT -p udp --sport 53 -j ACCEPT\n-# Allow outbound SSH\n-iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\n-# Allow inbound SSH responses\n-iptables -A INPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n-# Allow localhost\n-iptables -A INPUT -i lo -j ACCEPT\n-iptables -A OUTPUT -o lo -j ACCEPT\n-\n-# Create ipset with CIDR support\n-ipset create allowed-domains hash:net\n-\n-# Fetch GitHub meta information and aggregate + add their IP ranges\n-echo \"Fetching GitHub IP ranges...\"\n-gh_ranges=$(curl -s https://api.github.com/meta)\n-if [ -z \"$gh_ranges\" ]; then\n-    echo \"ERROR: Failed to fetch GitHub IP ranges\"\n-    exit 1\n-fi\n+set -uo pipefail\n+IFS=$'\\n\\t'\n \n-if ! echo \"$gh_ranges\" | jq -e '.web and .api and .git' >/dev/null; then\n-    echo \"ERROR: GitHub API response missing required fields\"\n-    exit 1\n-fi\n+# Global variables\n+DEBUG=${DEBUG:-false}\n+ADDED_IPS_FILE=\"/tmp/claude-fw-added-ips.txt\"\n+IPV6_ENABLED=false\n+IPSET_AVAILABLE=true\n \n-echo \"Processing GitHub IPs...\"\n-while read -r cidr; do\n-    if [[ ! \"$cidr\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then\n-        echo \"ERROR: Invalid CIDR range from GitHub meta: $cidr\"\n-        exit 1\n+# Logging functions\n+log() { echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\"; }\n+error() { log \"ERROR: $1\"; }\n+warning() { log \"WARNING: $1\"; }\n+debug_log() { [ \"$DEBUG\" = true ] && log \"DEBUG: $1\"; }\n+\n+# Execute command with fallback\n+try_cmd() {\n+    debug_log \"Trying: $1\"\n+    if eval \"$1\" &>/dev/null; then return 0; fi\n+    if [ -n \"$2\" ]; then\n+        debug_log \"Trying fallback: $2\"\n+        if eval \"$2\" &>/dev/null; then return 0; fi\n     fi\n-    echo \"Adding GitHub range $cidr\"\n-    ipset add allowed-domains \"$cidr\"\n-done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' | aggregate -q)\n-\n-# Resolve and add other allowed domains\n-for domain in \\\n-    \"registry.npmjs.org\" \\\n-    \"api.anthropic.com\" \\\n-    \"sentry.io\" \\\n-    \"statsig.anthropic.com\" \\\n-    \"statsig.com\"; do\n-    echo \"Resolving $domain...\"\n-    ips=$(dig +short A \"$domain\")\n-    if [ -z \"$ips\" ]; then\n-        echo \"ERROR: Failed to resolve $domain\"\n-        exit 1\n+    warning \"Failed: ${3:-Command}\"\n+    return 1\n+}\n+\n+# Add IP to allowed list with deduplication\n+add_ip() {\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if [ \"$IPSET_AVAILABLE\" = true ] && ipset add claude-allowed-domains \"$ip\"; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    elif iptables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IP: $ip\"\n+        return 1\n+    fi\n+}\n+\n+# Add IPv6 if supported\n+add_ipv6() {\n+    [ \"$IPV6_ENABLED\" != true ] && return 0\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if ip6tables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IPv6: $ip\"\n+        return 1\n     fi\n-    \n+}\n+\n+# Resolve domain and add IPs\n+add_domain() {\n+    local domain=\"$1\"\n+    log \"Resolving $domain...\"\n+\n+    local ips=$(dig +short A \"$domain\" || echo \"\")\n+    [ -z \"$ips\" ] && warning \"Failed to resolve $domain\" && return 1\n+\n+    local count=0\n     while read -r ip; do\n-        if [[ ! \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n-            echo \"ERROR: Invalid IP from DNS for $domain: $ip\"\n-            exit 1\n-        fi\n-        echo \"Adding $ip for $domain\"\n-        ipset add allowed-domains \"$ip\"\n+        [[ -n \"$ip\" && \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]] && add_ip \"$ip\" && count=$((count+1))\n     done < <(echo \"$ips\")\n+\n+    debug_log \"Added $count IPs for $domain\"\n+    return 0\n+}\n+\n+# Add networks for interface\n+add_interface() {\n+    local iface=\"$1\"\n+    log \"Adding networks for interface $iface...\"\n+\n+    local addresses=$(ip -o addr show dev \"$iface\" | grep -w inet | awk '{print $4}')\n+    [ -z \"$addresses\" ] && debug_log \"No addresses for $iface\" && return 1\n+\n+    local count=0\n+    for addr in $addresses; do\n+        if try_cmd \"iptables -A CLAUDE_INPUT -s $addr -j ACCEPT\" \"\" \"INPUT rule for $addr\" &&\n+           try_cmd \"iptables -A CLAUDE_OUTPUT -d $addr -j ACCEPT\" \"\" \"OUTPUT rule for $addr\"; then\n+            count=$((count+1))\n+        fi\n+    done\n+\n+    log \"Added $count network rules for $iface\"\n+    return 0\n+}\n+\n+# Clean up rules\n+cleanup() {\n+    log \"Cleaning up...\"\n+    iptables -D INPUT -j CLAUDE_INPUT || true\n+    iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+    iptables -D FORWARD -j CLAUDE_FORWARD || true\n+    iptables -F CLAUDE_INPUT || true\n+    iptables -F CLAUDE_OUTPUT || true\n+    iptables -F CLAUDE_FORWARD || true\n+    iptables -X CLAUDE_INPUT || true\n+    iptables -X CLAUDE_OUTPUT || true\n+    iptables -X CLAUDE_FORWARD || true\n+    ipset destroy claude-allowed-domains || true\n+    rm -f \"$ADDED_IPS_FILE\"\n+    log \"Cleanup complete\"\n+}\n+\n+# Test connectivity\n+test_conn() {\n+    log \"Testing connectivity to $1...\"\n+    if curl --connect-timeout 5 -s \"https://$1\" >/dev/null 2>&1; then\n+        log \"\u2713 Connection to $1 successful\"\n+        return 0\n+    else\n+        warning \"Unable to reach $1\"\n+        return 1\n+    fi\n+}\n+\n+# Set up trap for cleanup\n+trap cleanup INT TERM\n+\n+# Check for command availability\n+for cmd in iptables curl; do\n+    command -v \"$cmd\" &>/dev/null || { error \"Required command '$cmd' not found\"; exit 1; }\n+done\n+\n+for cmd in ipset ip6tables; do\n+    if ! command -v \"$cmd\" &>/dev/null; then\n+        warning \"Optional command '$cmd' not found, limited functionality\"\n+        [ \"$cmd\" = \"ipset\" ] && IPSET_AVAILABLE=false\n+        [ \"$cmd\" = \"ip6tables\" ] && IPV6_ENABLED=false\n+    fi\n done\n \n-# Get host IP from default route\n-HOST_IP=$(ip route | grep default | cut -d\" \" -f3)\n-if [ -z \"$HOST_IP\" ]; then\n-    echo \"ERROR: Failed to detect host IP\"\n-    exit 1\n+# Check IPv6 support\n+if [ \"$IPV6_ENABLED\" != true ] && ip -6 addr show &>/dev/null && command -v ip6tables &>/dev/null; then\n+    if ip6tables -L INPUT &>/dev/null; then\n+        log \"IPv6 detected and enabled\"\n+        IPV6_ENABLED=true\n+    fi\n fi\n \n-HOST_NETWORK=$(echo \"$HOST_IP\" | sed \"s/\\.[0-9]*$/.0\\/24/\")\n-echo \"Host network detected as: $HOST_NETWORK\"\n+# Initialize tracking file\n+> \"$ADDED_IPS_FILE\"\n \n-# Set up remaining iptables rules\n-iptables -A INPUT -s \"$HOST_NETWORK\" -j ACCEPT\n-iptables -A OUTPUT -d \"$HOST_NETWORK\" -j ACCEPT\n+# Start configuration\n+log \"Starting Claude firewall configuration...\"\n \n-# Set default policies to DROP first\n-# Set default policies to DROP first\n-iptables -P INPUT DROP\n-iptables -P FORWARD DROP\n-iptables -P OUTPUT DROP\n+# Create custom chains\n+log \"Creating custom chains...\"\n+for chain in CLAUDE_INPUT CLAUDE_OUTPUT CLAUDE_FORWARD; do\n+    try_cmd \"iptables -N $chain\" \"iptables -F $chain\" \"Creating chain $chain\"\n+done\n \n-# First allow established connections for already approved traffic\n-iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n+# Add chain references\n+log \"Adding chain references...\"\n+iptables -D INPUT -j CLAUDE_INPUT || true\n+iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+iptables -D FORWARD -j CLAUDE_FORWARD || true\n \n-# Then allow only specific outbound traffic to allowed domains\n-iptables -A OUTPUT -m set --match-set allowed-domains dst -j ACCEPT\n+try_cmd \"iptables -I INPUT 1 -j CLAUDE_INPUT\" \"iptables -A INPUT -j CLAUDE_INPUT\" \"Jump to CLAUDE_INPUT\"\n+try_cmd \"iptables -I OUTPUT 1 -j CLAUDE_OUTPUT\" \"iptables -A OUTPUT -j CLAUDE_OUTPUT\" \"Jump to CLAUDE_OUTPUT\"\n+try_cmd \"iptables -I FORWARD 1 -j CLAUDE_FORWARD\" \"iptables -A FORWARD -j CLAUDE_FORWARD\" \"Jump to CLAUDE_FORWARD\"\n \n-echo \"Firewall configuration complete\"\n-echo \"Verifying firewall rules...\"\n-if curl --connect-timeout 5 https://example.com >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - was able to reach https://example.com\"\n-    exit 1\n-else\n-    echo \"Firewall verification passed - unable to reach https://example.com as expected\"\n+# Create ipset\n+if [ \"$IPSET_AVAILABLE\" = true ]; then\n+    log \"Creating ipset...\"\n+    ipset destroy claude-allowed-domains || true\n+    if ! ipset create claude-allowed-domains hash:net; then\n+        warning \"Failed to create ipset, using direct rules\"\n+        IPSET_AVAILABLE=false\n+    fi\n fi\n \n-# Verify GitHub API access\n-if ! curl --connect-timeout 5 https://api.github.com/zen >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - unable to reach https://api.github.com\"\n-    exit 1\n+# Basic connectivity rules\n+log \"Setting up basic connectivity...\"\n+try_cmd \"iptables -A CLAUDE_INPUT -i lo -j ACCEPT\" \"iptables -I INPUT 1 -i lo -j ACCEPT\" \"Localhost input\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -o lo -j ACCEPT\" \"iptables -I OUTPUT 1 -o lo -j ACCEPT\" \"Localhost output\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p udp --dport 53 -j ACCEPT\" \"\" \"DNS out UDP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 53 -j ACCEPT\" \"\" \"DNS out TCP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p udp --sport 53 -j ACCEPT\" \"\" \"DNS in UDP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p tcp --sport 53 -j ACCEPT\" \"\" \"DNS in TCP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 22 -j ACCEPT\" \"\" \"SSH out\"\n+try_cmd \"iptables -A CLAUDE_INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED in\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED out\"\n+\n+# Add GitHub IPs\n+log \"Adding GitHub IPs...\"\n+gh_ranges=$(curl -s --connect-timeout 5 https://api.github.com/meta)\n+if [ -n \"$gh_ranges\" ] && echo \"$gh_ranges\" | grep -q \"api\"; then\n+    while read -r cidr; do\n+        [[ -n \"$cidr\" ]] && add_ip \"$cidr\"\n+    done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' || echo \"\")\n else\n-    echo \"Firewall verification passed - able to reach https://api.github.com as expected\"\n+    # Fallback GitHub IPs\n+    for ip in \"140.82.112.0/20\" \"192.30.252.0/22\" \"185.199.108.0/22\" \"143.55.64.0/20\"; do\n+        add_ip \"$ip\"\n+    done\n+fi\n+\n+# Add important domains\n+log \"Adding important domains...\"\n+for domain in \"registry.npmjs.org\" \"api.anthropic.com\" \"sentry.io\" \"statsig.anthropic.com\" \\\n+              \"cursor.blob.core.windows.net\" \"statsig.com\" \"marketplace.visualstudio.com\" \\\n+              \"vscode.blob.core.windows.net\" \"marketplace-cdn.vsassets.io\" \"vsmarketplacebadge.apphb.com\"; do\n+    add_domain \"$domain\"\n+done\n+\n+# Add Azure IPs\n+log \"Adding Azure IPs...\"\n+for azure_ip in \"13.107.246.0/24\" \"13.107.6.0/24\" \"13.107.9.0/24\" \"20.190.128.0/18\" \\\n+                \"40.74.0.0/18\" \"40.90.0.0/16\" \"40.119.0.0/16\" \"40.126.0.0/18\" \\\n+                \"52.133.128.0/17\" \"52.245.64.0/18\" \"204.79.197.0/24\"; do\n+    add_ip \"$azure_ip\"\n+done\n+\n+# Add AWS S3 IPs (simplified)",
        "comment_created_at": "2025-03-11T05:39:10+00:00",
        "comment_author": "8enmann",
        "comment_body": "i guess s3 IPs are safe because by default the container won't have credentials, so it'll be read only access to public buckets?",
        "pr_file_module": null
      },
      {
        "comment_id": "1990475142",
        "repo_full_name": "anthropics/claude-code",
        "pr_number": 328,
        "pr_file": ".devcontainer/init-firewall.sh",
        "discussion_id": "1988435575",
        "commented_code": "@@ -1,119 +1,290 @@\n #!/bin/bash\n-set -euo pipefail  # Exit on error, undefined vars, and pipeline failures\n-IFS=$'\\n\\t'       # Stricter word splitting\n-\n-# Flush existing rules and delete existing ipsets\n-iptables -F\n-iptables -X\n-iptables -t nat -F\n-iptables -t nat -X\n-iptables -t mangle -F\n-iptables -t mangle -X\n-ipset destroy allowed-domains 2>/dev/null || true\n-\n-# First allow DNS and localhost before any restrictions\n-# Allow outbound DNS\n-iptables -A OUTPUT -p udp --dport 53 -j ACCEPT\n-# Allow inbound DNS responses\n-iptables -A INPUT -p udp --sport 53 -j ACCEPT\n-# Allow outbound SSH\n-iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\n-# Allow inbound SSH responses\n-iptables -A INPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT\n-# Allow localhost\n-iptables -A INPUT -i lo -j ACCEPT\n-iptables -A OUTPUT -o lo -j ACCEPT\n-\n-# Create ipset with CIDR support\n-ipset create allowed-domains hash:net\n-\n-# Fetch GitHub meta information and aggregate + add their IP ranges\n-echo \"Fetching GitHub IP ranges...\"\n-gh_ranges=$(curl -s https://api.github.com/meta)\n-if [ -z \"$gh_ranges\" ]; then\n-    echo \"ERROR: Failed to fetch GitHub IP ranges\"\n-    exit 1\n-fi\n+set -uo pipefail\n+IFS=$'\\n\\t'\n \n-if ! echo \"$gh_ranges\" | jq -e '.web and .api and .git' >/dev/null; then\n-    echo \"ERROR: GitHub API response missing required fields\"\n-    exit 1\n-fi\n+# Global variables\n+DEBUG=${DEBUG:-false}\n+ADDED_IPS_FILE=\"/tmp/claude-fw-added-ips.txt\"\n+IPV6_ENABLED=false\n+IPSET_AVAILABLE=true\n \n-echo \"Processing GitHub IPs...\"\n-while read -r cidr; do\n-    if [[ ! \"$cidr\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then\n-        echo \"ERROR: Invalid CIDR range from GitHub meta: $cidr\"\n-        exit 1\n+# Logging functions\n+log() { echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $1\"; }\n+error() { log \"ERROR: $1\"; }\n+warning() { log \"WARNING: $1\"; }\n+debug_log() { [ \"$DEBUG\" = true ] && log \"DEBUG: $1\"; }\n+\n+# Execute command with fallback\n+try_cmd() {\n+    debug_log \"Trying: $1\"\n+    if eval \"$1\" &>/dev/null; then return 0; fi\n+    if [ -n \"$2\" ]; then\n+        debug_log \"Trying fallback: $2\"\n+        if eval \"$2\" &>/dev/null; then return 0; fi\n     fi\n-    echo \"Adding GitHub range $cidr\"\n-    ipset add allowed-domains \"$cidr\"\n-done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' | aggregate -q)\n-\n-# Resolve and add other allowed domains\n-for domain in \\\n-    \"registry.npmjs.org\" \\\n-    \"api.anthropic.com\" \\\n-    \"sentry.io\" \\\n-    \"statsig.anthropic.com\" \\\n-    \"statsig.com\"; do\n-    echo \"Resolving $domain...\"\n-    ips=$(dig +short A \"$domain\")\n-    if [ -z \"$ips\" ]; then\n-        echo \"ERROR: Failed to resolve $domain\"\n-        exit 1\n+    warning \"Failed: ${3:-Command}\"\n+    return 1\n+}\n+\n+# Add IP to allowed list with deduplication\n+add_ip() {\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if [ \"$IPSET_AVAILABLE\" = true ] && ipset add claude-allowed-domains \"$ip\"; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    elif iptables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IP: $ip\"\n+        return 1\n+    fi\n+}\n+\n+# Add IPv6 if supported\n+add_ipv6() {\n+    [ \"$IPV6_ENABLED\" != true ] && return 0\n+    local ip=\"$1\"\n+    [ -f \"$ADDED_IPS_FILE\" ] && grep -q \"^$ip$\" \"$ADDED_IPS_FILE\" && return 0\n+\n+    if ip6tables -A CLAUDE_OUTPUT -d \"$ip\" -j ACCEPT; then\n+        echo \"$ip\" >> \"$ADDED_IPS_FILE\"\n+        return 0\n+    else\n+        debug_log \"Failed to add IPv6: $ip\"\n+        return 1\n     fi\n-    \n+}\n+\n+# Resolve domain and add IPs\n+add_domain() {\n+    local domain=\"$1\"\n+    log \"Resolving $domain...\"\n+\n+    local ips=$(dig +short A \"$domain\" || echo \"\")\n+    [ -z \"$ips\" ] && warning \"Failed to resolve $domain\" && return 1\n+\n+    local count=0\n     while read -r ip; do\n-        if [[ ! \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n-            echo \"ERROR: Invalid IP from DNS for $domain: $ip\"\n-            exit 1\n-        fi\n-        echo \"Adding $ip for $domain\"\n-        ipset add allowed-domains \"$ip\"\n+        [[ -n \"$ip\" && \"$ip\" =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]] && add_ip \"$ip\" && count=$((count+1))\n     done < <(echo \"$ips\")\n+\n+    debug_log \"Added $count IPs for $domain\"\n+    return 0\n+}\n+\n+# Add networks for interface\n+add_interface() {\n+    local iface=\"$1\"\n+    log \"Adding networks for interface $iface...\"\n+\n+    local addresses=$(ip -o addr show dev \"$iface\" | grep -w inet | awk '{print $4}')\n+    [ -z \"$addresses\" ] && debug_log \"No addresses for $iface\" && return 1\n+\n+    local count=0\n+    for addr in $addresses; do\n+        if try_cmd \"iptables -A CLAUDE_INPUT -s $addr -j ACCEPT\" \"\" \"INPUT rule for $addr\" &&\n+           try_cmd \"iptables -A CLAUDE_OUTPUT -d $addr -j ACCEPT\" \"\" \"OUTPUT rule for $addr\"; then\n+            count=$((count+1))\n+        fi\n+    done\n+\n+    log \"Added $count network rules for $iface\"\n+    return 0\n+}\n+\n+# Clean up rules\n+cleanup() {\n+    log \"Cleaning up...\"\n+    iptables -D INPUT -j CLAUDE_INPUT || true\n+    iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+    iptables -D FORWARD -j CLAUDE_FORWARD || true\n+    iptables -F CLAUDE_INPUT || true\n+    iptables -F CLAUDE_OUTPUT || true\n+    iptables -F CLAUDE_FORWARD || true\n+    iptables -X CLAUDE_INPUT || true\n+    iptables -X CLAUDE_OUTPUT || true\n+    iptables -X CLAUDE_FORWARD || true\n+    ipset destroy claude-allowed-domains || true\n+    rm -f \"$ADDED_IPS_FILE\"\n+    log \"Cleanup complete\"\n+}\n+\n+# Test connectivity\n+test_conn() {\n+    log \"Testing connectivity to $1...\"\n+    if curl --connect-timeout 5 -s \"https://$1\" >/dev/null 2>&1; then\n+        log \"\u2713 Connection to $1 successful\"\n+        return 0\n+    else\n+        warning \"Unable to reach $1\"\n+        return 1\n+    fi\n+}\n+\n+# Set up trap for cleanup\n+trap cleanup INT TERM\n+\n+# Check for command availability\n+for cmd in iptables curl; do\n+    command -v \"$cmd\" &>/dev/null || { error \"Required command '$cmd' not found\"; exit 1; }\n+done\n+\n+for cmd in ipset ip6tables; do\n+    if ! command -v \"$cmd\" &>/dev/null; then\n+        warning \"Optional command '$cmd' not found, limited functionality\"\n+        [ \"$cmd\" = \"ipset\" ] && IPSET_AVAILABLE=false\n+        [ \"$cmd\" = \"ip6tables\" ] && IPV6_ENABLED=false\n+    fi\n done\n \n-# Get host IP from default route\n-HOST_IP=$(ip route | grep default | cut -d\" \" -f3)\n-if [ -z \"$HOST_IP\" ]; then\n-    echo \"ERROR: Failed to detect host IP\"\n-    exit 1\n+# Check IPv6 support\n+if [ \"$IPV6_ENABLED\" != true ] && ip -6 addr show &>/dev/null && command -v ip6tables &>/dev/null; then\n+    if ip6tables -L INPUT &>/dev/null; then\n+        log \"IPv6 detected and enabled\"\n+        IPV6_ENABLED=true\n+    fi\n fi\n \n-HOST_NETWORK=$(echo \"$HOST_IP\" | sed \"s/\\.[0-9]*$/.0\\/24/\")\n-echo \"Host network detected as: $HOST_NETWORK\"\n+# Initialize tracking file\n+> \"$ADDED_IPS_FILE\"\n \n-# Set up remaining iptables rules\n-iptables -A INPUT -s \"$HOST_NETWORK\" -j ACCEPT\n-iptables -A OUTPUT -d \"$HOST_NETWORK\" -j ACCEPT\n+# Start configuration\n+log \"Starting Claude firewall configuration...\"\n \n-# Set default policies to DROP first\n-# Set default policies to DROP first\n-iptables -P INPUT DROP\n-iptables -P FORWARD DROP\n-iptables -P OUTPUT DROP\n+# Create custom chains\n+log \"Creating custom chains...\"\n+for chain in CLAUDE_INPUT CLAUDE_OUTPUT CLAUDE_FORWARD; do\n+    try_cmd \"iptables -N $chain\" \"iptables -F $chain\" \"Creating chain $chain\"\n+done\n \n-# First allow established connections for already approved traffic\n-iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n-iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n+# Add chain references\n+log \"Adding chain references...\"\n+iptables -D INPUT -j CLAUDE_INPUT || true\n+iptables -D OUTPUT -j CLAUDE_OUTPUT || true\n+iptables -D FORWARD -j CLAUDE_FORWARD || true\n \n-# Then allow only specific outbound traffic to allowed domains\n-iptables -A OUTPUT -m set --match-set allowed-domains dst -j ACCEPT\n+try_cmd \"iptables -I INPUT 1 -j CLAUDE_INPUT\" \"iptables -A INPUT -j CLAUDE_INPUT\" \"Jump to CLAUDE_INPUT\"\n+try_cmd \"iptables -I OUTPUT 1 -j CLAUDE_OUTPUT\" \"iptables -A OUTPUT -j CLAUDE_OUTPUT\" \"Jump to CLAUDE_OUTPUT\"\n+try_cmd \"iptables -I FORWARD 1 -j CLAUDE_FORWARD\" \"iptables -A FORWARD -j CLAUDE_FORWARD\" \"Jump to CLAUDE_FORWARD\"\n \n-echo \"Firewall configuration complete\"\n-echo \"Verifying firewall rules...\"\n-if curl --connect-timeout 5 https://example.com >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - was able to reach https://example.com\"\n-    exit 1\n-else\n-    echo \"Firewall verification passed - unable to reach https://example.com as expected\"\n+# Create ipset\n+if [ \"$IPSET_AVAILABLE\" = true ]; then\n+    log \"Creating ipset...\"\n+    ipset destroy claude-allowed-domains || true\n+    if ! ipset create claude-allowed-domains hash:net; then\n+        warning \"Failed to create ipset, using direct rules\"\n+        IPSET_AVAILABLE=false\n+    fi\n fi\n \n-# Verify GitHub API access\n-if ! curl --connect-timeout 5 https://api.github.com/zen >/dev/null 2>&1; then\n-    echo \"ERROR: Firewall verification failed - unable to reach https://api.github.com\"\n-    exit 1\n+# Basic connectivity rules\n+log \"Setting up basic connectivity...\"\n+try_cmd \"iptables -A CLAUDE_INPUT -i lo -j ACCEPT\" \"iptables -I INPUT 1 -i lo -j ACCEPT\" \"Localhost input\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -o lo -j ACCEPT\" \"iptables -I OUTPUT 1 -o lo -j ACCEPT\" \"Localhost output\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p udp --dport 53 -j ACCEPT\" \"\" \"DNS out UDP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 53 -j ACCEPT\" \"\" \"DNS out TCP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p udp --sport 53 -j ACCEPT\" \"\" \"DNS in UDP\"\n+try_cmd \"iptables -A CLAUDE_INPUT -p tcp --sport 53 -j ACCEPT\" \"\" \"DNS in TCP\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -p tcp --dport 22 -j ACCEPT\" \"\" \"SSH out\"\n+try_cmd \"iptables -A CLAUDE_INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED in\"\n+try_cmd \"iptables -A CLAUDE_OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\" \\\n+        \"iptables -A CLAUDE_OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\" \"ESTABLISHED out\"\n+\n+# Add GitHub IPs\n+log \"Adding GitHub IPs...\"\n+gh_ranges=$(curl -s --connect-timeout 5 https://api.github.com/meta)\n+if [ -n \"$gh_ranges\" ] && echo \"$gh_ranges\" | grep -q \"api\"; then\n+    while read -r cidr; do\n+        [[ -n \"$cidr\" ]] && add_ip \"$cidr\"\n+    done < <(echo \"$gh_ranges\" | jq -r '(.web + .api + .git)[]' || echo \"\")\n else\n-    echo \"Firewall verification passed - able to reach https://api.github.com as expected\"\n+    # Fallback GitHub IPs\n+    for ip in \"140.82.112.0/20\" \"192.30.252.0/22\" \"185.199.108.0/22\" \"143.55.64.0/20\"; do\n+        add_ip \"$ip\"\n+    done\n+fi\n+\n+# Add important domains\n+log \"Adding important domains...\"\n+for domain in \"registry.npmjs.org\" \"api.anthropic.com\" \"sentry.io\" \"statsig.anthropic.com\" \\\n+              \"cursor.blob.core.windows.net\" \"statsig.com\" \"marketplace.visualstudio.com\" \\\n+              \"vscode.blob.core.windows.net\" \"marketplace-cdn.vsassets.io\" \"vsmarketplacebadge.apphb.com\"; do\n+    add_domain \"$domain\"\n+done\n+\n+# Add Azure IPs\n+log \"Adding Azure IPs...\"\n+for azure_ip in \"13.107.246.0/24\" \"13.107.6.0/24\" \"13.107.9.0/24\" \"20.190.128.0/18\" \\\n+                \"40.74.0.0/18\" \"40.90.0.0/16\" \"40.119.0.0/16\" \"40.126.0.0/18\" \\\n+                \"52.133.128.0/17\" \"52.245.64.0/18\" \"204.79.197.0/24\"; do\n+    add_ip \"$azure_ip\"\n+done\n+\n+# Add AWS S3 IPs (simplified)",
        "comment_created_at": "2025-03-12T03:14:56+00:00",
        "comment_author": "aledbf",
        "comment_body": "Correct",
        "pr_file_module": null
      }
    ]
  }
]