[
  {
    "discussion_id": "1012800400",
    "pr_number": 4189,
    "pr_file": "src/lib/request/promise.ts",
    "created_at": "2022-11-03T11:50:07+00:00",
    "commented_code": "if (error) {\n         return reject(error);\n       }\n-      if (res.statusCode >= 400) {\n+      if (res.statusCode === 400) {\n         return reject({\n           code: res.statusCode,\n           body: JSON.parse(body as any),\n         });\n+      } else if (res.statusCode >= 401) {\n+        return reject({\n+          code: res.statusCode,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1012800400",
        "repo_full_name": "snyk/cli",
        "pr_number": 4189,
        "pr_file": "src/lib/request/promise.ts",
        "discussion_id": "1012800400",
        "commented_code": "@@ -35,11 +35,15 @@ export async function makeRequestRest<T>(payload: any): Promise<T> {\n       if (error) {\n         return reject(error);\n       }\n-      if (res.statusCode >= 400) {\n+      if (res.statusCode === 400) {\n         return reject({\n           code: res.statusCode,\n           body: JSON.parse(body as any),\n         });\n+      } else if (res.statusCode >= 401) {\n+        return reject({\n+          code: res.statusCode,",
        "comment_created_at": "2022-11-03T11:50:07+00:00",
        "comment_author": "Avishagp",
        "comment_body": "Why is `body` removed for any code other than 400?",
        "pr_file_module": null
      },
      {
        "comment_id": "1012862805",
        "repo_full_name": "snyk/cli",
        "pr_number": 4189,
        "pr_file": "src/lib/request/promise.ts",
        "discussion_id": "1012800400",
        "commented_code": "@@ -35,11 +35,15 @@ export async function makeRequestRest<T>(payload: any): Promise<T> {\n       if (error) {\n         return reject(error);\n       }\n-      if (res.statusCode >= 400) {\n+      if (res.statusCode === 400) {\n         return reject({\n           code: res.statusCode,\n           body: JSON.parse(body as any),\n         });\n+      } else if (res.statusCode >= 401) {\n+        return reject({\n+          code: res.statusCode,",
        "comment_created_at": "2022-11-03T12:54:52+00:00",
        "comment_author": "love-bhardwaj",
        "comment_body": "Ideally, the body of all error responses would look like this:\r\n\r\n```json\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"detail\": \"Permission denied for this resource\",\r\n      \"status\": \"403\"\r\n    }\r\n  ],\r\n  \"jsonapi\": {\r\n    \"version\": \"1.0\"\r\n  }\r\n}\r\n```\r\n\r\nWhich can be used to create a useful message for the user. But unfortunately, Cerberus's responses like 401, and 403 are not JSON but a single string (also causing JSON parsing errors). For those cases, we are not using the response anyways. As we can just map the status code to an error message directly.\r\n\r\nFor 400 bad requests, it is still relevant as we want to process the response to show the user inputs can be wrong.\r\n\r\nHope that makes sense \ud83d\ude05 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "808255247",
    "pr_number": 2702,
    "pr_file": "src/lib/polling/types.ts",
    "created_at": "2022-02-16T17:13:27+00:00",
    "commented_code": "identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "808255247",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/lib/polling/types.ts",
        "discussion_id": "808255247",
        "commented_code": "@@ -48,5 +48,5 @@ export interface ResolutionMeta {\n   identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
        "comment_created_at": "2022-02-16T17:13:27+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Could you explain the empty object being a possible value here?",
        "pr_file_module": null
      },
      {
        "comment_id": "808922208",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/lib/polling/types.ts",
        "discussion_id": "808255247",
        "commented_code": "@@ -48,5 +48,5 @@ export interface ResolutionMeta {\n   identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
        "comment_created_at": "2022-02-17T10:55:24+00:00",
        "comment_author": "YairZ101",
        "comment_body": "The `target` field is mandatory in the [ScanResult interface](https://www.notion.so/snyk/The-payload-interface-f713ed7d071a461ca9d1ae3b19505f9c#a6252d2b1a67407c91a443b45109e88a) (it's a mistake in the CLI interface that it is optional), I needed a way to represent a scan that targets a directory/file that is not part of a repo so I've used an empty project.\r\nI am open for suggestions if you think there is a better way to represent it.",
        "pr_file_module": null
      },
      {
        "comment_id": "810630990",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/lib/polling/types.ts",
        "discussion_id": "808255247",
        "commented_code": "@@ -48,5 +48,5 @@ export interface ResolutionMeta {\n   identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
        "comment_created_at": "2022-02-20T14:04:15+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Not sure which team owns this flow, but we should ensure they're aware of this in any case.\r\nThere could be additional potential risks if this property is expected but might be missing.\r\n\r\nIdeally, we'd strive toward changing the `target` field to be optional in the code, as there's really no value in passing an empty object as a target. Could you please reference where the `target` property is being read? Do you have an estimation of which parts would need to be modified for the target to actually be optional?\r\n\r\nAlternatively, In the current definition of `target`, I'd encourage adding a common `type` property for all types in this union.\r\nThis property can separate the different types of targets that can be set as values here (`GitTarget`, `ContainerTarget`, etc.)\r\nThe `type` property can be defined as a union of values such as `'git' | 'container' | 'none'`.\r\n\r\nI'm not aware of all places where the target is being used, but it goes without saying that adding this property without first consulting with the owning team could have unexpected effects.\r\n\r\nIf none of these are applicable, we can use the empty object as a temporary solution to this.",
        "pr_file_module": null
      },
      {
        "comment_id": "810636780",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/lib/polling/types.ts",
        "discussion_id": "808255247",
        "commented_code": "@@ -48,5 +48,5 @@ export interface ResolutionMeta {\n   identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
        "comment_created_at": "2022-02-20T14:46:48+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Another approach would be to wrap each of the current potential properties of `target` in a designated property, like `git`, `container`, etc., make these optional, and the main object holding these properties would be required.",
        "pr_file_module": null
      },
      {
        "comment_id": "810640211",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/lib/polling/types.ts",
        "discussion_id": "808255247",
        "commented_code": "@@ -48,5 +48,5 @@ export interface ResolutionMeta {\n   identity: {\n     type: string;\n   };\n-  target?: GitTarget | ContainerTarget;\n+  target?: GitTarget | ContainerTarget | {};",
        "comment_created_at": "2022-02-20T15:10:34+00:00",
        "comment_author": "YairZ101",
        "comment_body": "I don't think the main focus here should be how we should define the `target` field and if it should or shouldn't be mandatory, we simply need to understand how to capture the information that this scan results doesn't have a proper target.\r\nI'll contact team rhino and consult with them.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1433942161",
    "pr_number": 4970,
    "pr_file": "test/acceptance/fake-server.ts",
    "created_at": "2023-12-21T11:23:43+00:00",
    "commented_code": "},\n   );\n \n+  app.post(basePath.replace('/v1', '') + '/oauth2/token', (req, res) => {\n+    const fake_oauth_token =\n+      '{\"access_token\":\"access_token_value\",\"token_type\":\"b\",\"expiry\":\"3023-12-20T08:49:15.504539Z\"}';\n+\n+    // client credentials grant: expecting client id = a and client secret = b\n+    if (req.headers.authorization?.includes('Basic YTpi')) {\n+      res.status(200).send(fake_oauth_token);\n+    }\n+\n+    res.status(401).send({});\n+  });",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1433942161",
        "repo_full_name": "snyk/cli",
        "pr_number": 4970,
        "pr_file": "test/acceptance/fake-server.ts",
        "discussion_id": "1433942161",
        "commented_code": "@@ -577,6 +577,18 @@ export const fakeServer = (basePath: string, snykToken: string): FakeServer => {\n     },\n   );\n \n+  app.post(basePath.replace('/v1', '') + '/oauth2/token', (req, res) => {\n+    const fake_oauth_token =\n+      '{\"access_token\":\"access_token_value\",\"token_type\":\"b\",\"expiry\":\"3023-12-20T08:49:15.504539Z\"}';\n+\n+    // client credentials grant: expecting client id = a and client secret = b\n+    if (req.headers.authorization?.includes('Basic YTpi')) {\n+      res.status(200).send(fake_oauth_token);\n+    }\n+\n+    res.status(401).send({});\n+  });",
        "comment_created_at": "2023-12-21T11:23:43+00:00",
        "comment_author": "cat2608",
        "comment_body": "Could it be that without a `return` after `res.status(200).send(fake_oauth_token);` the code will keep executing and will respond also with the `401`?\r\n\r\nhttps://stackoverflow.com/a/52919846",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1155317645",
    "pr_number": 4509,
    "pr_file": "src/lib/snyk-test/iac-test-result.ts",
    "created_at": "2023-04-02T14:01:47+00:00",
    "commented_code": "export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1155317645",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:01:47+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Could you also update the type for this property to reflect that it could potentially be a string? \r\nhttps://github.com/snyk/cli/blob/45eefaa7e3adc8aa60d449080955471fe437e27e/src/lib/snyk-test/iac-test-result.ts#L23-L25",
        "pr_file_module": null
      },
      {
        "comment_id": "1155321143",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:23:46+00:00",
        "comment_author": "YairZ101",
        "comment_body": "I can definitely make this change but I want to make sure that this type is not getting used in our v2 test flow functions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155323482",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:36:46+00:00",
        "comment_author": "ofekatr",
        "comment_body": "It should be achievable, perhaps with type unions in the shared output flows. \r\nLet me know if you'd like to pair and look at it together. \r\nWorth mentioning that the type already seems to have properties that are not relevant for Integrated IaC, e.g., `resolve`",
        "pr_file_module": null
      },
      {
        "comment_id": "1155323789",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:38:36+00:00",
        "comment_author": "YairZ101",
        "comment_body": "> Worth mentioning that the type already seems to have properties that are not relevant for Integrated IaC, e.g., resolve\r\n\r\nyea you are correct but `remediation` is relevant so I don't want to change its type to an incorrect one if it is being used in the v2 functions. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1155324252",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:41:03+00:00",
        "comment_author": "YairZ101",
        "comment_body": "BTW, off-topic to this PR but if we are not populating the `resolve` field in the integrated CLI json output then we need to find a solution for `snyk-to-html` which expects this field.\r\nMost probably should be done as part of the transition project.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155324723",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T14:44:15+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Would you mind writing about it in [the feature's channel](https://snyk.slack.com/archives/C04STDUN7JR) so we can fork the conversation about it to there?",
        "pr_file_module": null
      },
      {
        "comment_id": "1155331699",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T15:27:06+00:00",
        "comment_author": "YairZ101",
        "comment_body": "Back to the original topic of this comment :)\r\nI've checked if we are using this type in our v2 functions and it looks like we do.\r\n[`formatSnykIacTestTestData`](https://github.com/snyk/cli/blob/master/src/lib/formatters/iac-output/text/formatters.ts#L89) which is being used in the [`buildTextOutput`](https://github.com/snyk/cli/blob/master/src/lib/iac/test/v2/output.ts#L126) function is returning the type [`IacTestData`](https://github.com/snyk/cli/blob/master/src/lib/formatters/iac-output/text/types.ts#L7) that is using the [`Issue`](https://github.com/snyk/cli/blob/master/src/lib/formatters/iac-output/text/types.ts#L37) type where you can find the `remediation` field.\r\n\r\nDo you have any suggestions on how to update the type without adding to the v2 functions false information?\r\nWe can potentially duplicate this type and create one which is specific for the v2 flow but I'm not sure we want to do this as part of this fix PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155332345",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T15:31:40+00:00",
        "comment_author": "YairZ101",
        "comment_body": "Double-checked the v2 json output and it does include the `resolve` field.\r\n<img width=\"908\" alt=\"image\" src=\"https://user-images.githubusercontent.com/71096571/229362896-2465c82c-f6e8-48b4-93ee-9610523d2c72.png\">\r\n\r\nI think this conversation we have just emphasizes how we need a json output contract.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155333473",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T15:39:13+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Have you considered handling issues generated by custom rules in the issue mapping function? \r\nhttps://github.com/snyk/cli/blob/45eefaa7e3adc8aa60d449080955471fe437e27e/src/lib/formatters/iac-output/text/formatters.ts#L67-L87\r\n\r\nWhenever `remediation` is a string value, you can replace it with a map that maps all Current IaC file types to the string value. \r\n\r\nThe benefits would be: \r\n- This function is only called for Current IaC\r\n- The initial input it uses is the `PolicyMetadata` type, which should only be used by Current IaC\r\n- We already have different mappers for different experiences here, so we're not splitting it any more here.\r\n- We would have a consistent shared flow in the output generation step for both experiences.",
        "pr_file_module": null
      },
      {
        "comment_id": "1155333954",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T15:41:53+00:00",
        "comment_author": "ofekatr",
        "comment_body": "> I think this conversation we have just emphasizes how we need a json output contract.\r\n\r\nWe do have contract tests for Integrated IaC. The test for the JSON output can be found here:\r\nhttps://github.com/snyk/cli/blob/08c30f1000099ed2be3532f03238e7e332f7924f/test/jest/unit/lib/iac/test/v2/json.spec.ts",
        "pr_file_module": null
      },
      {
        "comment_id": "1155335097",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T15:49:18+00:00",
        "comment_author": "YairZ101",
        "comment_body": "> We do have contract tests for Integrated IaC. \r\n\r\nI totally forgot about that :)\r\n\r\n> Have you considered handling issues generated by custom rules in the issue mapping function?\r\n\r\nNo, but that's a great suggestion, I'll look into it!\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1155338473",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T16:12:50+00:00",
        "comment_author": "YairZ101",
        "comment_body": "so the issue with this approach is the fact that we don't call this function if the user provided the `json` flag.\r\n\r\nQQ, what would it take to fix the source of the issue which is `snyk-iac-rule`? by fix I mean to change the name of the field from `remediation` to `resolve`, you think it's a change we can do in less than an hour?\r\n(asking you because you have the context and background around this area)",
        "pr_file_module": null
      },
      {
        "comment_id": "1155341024",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T16:34:15+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Making changes in `snyk-iac-rules` would be the same as breaking an API contract, as it means all existing bundles stop working. \r\nIt would require all of the customers with existing bundles to make generate their bundles again. \r\nFixing the CLI on the other hand would only require them to update their CLI version to have the bug fix. \r\nWe also have public documentation describing the string `remediation` property\r\nhttps://docs.snyk.io/scan-cloud-deployment/snyk-infrastructure-as-code/custom-rules/getting-started-with-the-sdk/writing-a-rule",
        "pr_file_module": null
      },
      {
        "comment_id": "1155341748",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-02T16:39:58+00:00",
        "comment_author": "ofekatr",
        "comment_body": "We could potentially map string `remediation` the expected `remediation` object for custom rule bundles in https://github.com/snyk/cli/blob/2942500ea215722a9e0255f87c0d84c8e3b2e848/src/cli/commands/test/iac/local-execution/file-scanner.ts",
        "pr_file_module": null
      },
      {
        "comment_id": "1155613111",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-03T08:02:31+00:00",
        "comment_author": "YairZ101",
        "comment_body": "> Making changes in snyk-iac-rules would be the same as breaking an API contract, as it means all existing bundles stop working.\r\n\r\nwhy is that? it is just a change to the metadata, new bundles will generate metadata with `resolve` and old ones with `remediation`, how will it break something?",
        "pr_file_module": null
      },
      {
        "comment_id": "1155831604",
        "repo_full_name": "snyk/cli",
        "pr_number": 4509,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1155317645",
        "commented_code": "@@ -110,6 +110,10 @@ export interface MappedAnnotatedIacIssue\n export function mapIacIssue(\n   iacIssue: AnnotatedIacIssue,\n ): MappedAnnotatedIacIssue {\n+  // custom rules will have a remediation field that is a string, so we need to map it to the resolve field.\n+  if (typeof iacIssue.remediation === 'string') {",
        "comment_created_at": "2023-04-03T11:25:04+00:00",
        "comment_author": "YairZ101",
        "comment_body": "@ofekatr and I sat down and we ended up moving the logic to the [`scanFiles`](https://github.com/snyk/cli/blob/fix/custom-rules-json-output/src/cli/commands/test/iac/local-execution/file-scanner.ts#L34-L38) function as he suggested in the comment above.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1041966132",
    "pr_number": 4201,
    "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
    "created_at": "2022-12-07T09:31:10+00:00",
    "commented_code": ": resolveAndTestFactsRegistry(ecosystem, scans, options);\n }\n \n+async function getOrgDefaultContext(): Promise<string> {\n+  return (await getSelf())?.data.attributes.default_org_context;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1041966132",
        "repo_full_name": "snyk/cli",
        "pr_number": 4201,
        "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
        "discussion_id": "1041966132",
        "commented_code": "@@ -52,6 +52,10 @@ export async function resolveAndTestFacts(\n     : resolveAndTestFactsRegistry(ecosystem, scans, options);\n }\n \n+async function getOrgDefaultContext(): Promise<string> {\n+  return (await getSelf())?.data.attributes.default_org_context;",
        "comment_created_at": "2022-12-07T09:31:10+00:00",
        "comment_author": "dekelund",
        "comment_body": "One last thing, was it intentional to add `.data.attributes`, isn't that already taken care of by `getSelf`?\r\n\r\n```suggestion\r\n  return (await getSelf())?.default_org_context;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1042251250",
        "repo_full_name": "snyk/cli",
        "pr_number": 4201,
        "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
        "discussion_id": "1041966132",
        "commented_code": "@@ -52,6 +52,10 @@ export async function resolveAndTestFacts(\n     : resolveAndTestFactsRegistry(ecosystem, scans, options);\n }\n \n+async function getOrgDefaultContext(): Promise<string> {\n+  return (await getSelf())?.data.attributes.default_org_context;",
        "comment_created_at": "2022-12-07T14:09:27+00:00",
        "comment_author": "candrews",
        "comment_body": "`getSelf()`  returns a [`SelfResponse`](https://github.com/snyk/cli/blob/7a6c44cfbd1a66b09efbd6001848179f54190420/src/lib/ecosystems/unmanaged/utils.ts#L48) which, as of commit https://github.com/snyk/cli/commit/ff897719447e12990881541b62e44e003122eda0#diff-50795afceb61f2719e051435cf21b7dc96eebb618447a6e1f8fc3df515e0d198, doesn't have a `default_org_context` property (before that commit, the `data.attributes` were moved up, but after that commit, they no longer are); that information is accessed by `.data.attributes.default_org_context`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1043481580",
        "repo_full_name": "snyk/cli",
        "pr_number": 4201,
        "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
        "discussion_id": "1041966132",
        "commented_code": "@@ -52,6 +52,10 @@ export async function resolveAndTestFacts(\n     : resolveAndTestFactsRegistry(ecosystem, scans, options);\n }\n \n+async function getOrgDefaultContext(): Promise<string> {\n+  return (await getSelf())?.data.attributes.default_org_context;",
        "comment_created_at": "2022-12-08T15:25:48+00:00",
        "comment_author": "dekelund",
        "comment_body": "You are right, I looked at the wrong branch.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "970850003",
    "pr_number": 3603,
    "pr_file": "src/lib/polling/polling-test.ts",
    "created_at": "2022-09-14T14:00:57+00:00",
    "commented_code": "import { assembleQueryString } from '../snyk-test/common';\n import { getAuthHeader } from '../api-token';\n import { ScanResult } from '../ecosystems/types';\n+import {\n+  CreateDepGraphResponse,\n+  FileHashes,\n+  GetDepGraphResponse,\n+  GetIssuesResponse,\n+  IssuesRequestAttributes,\n+} from '../ecosystems/unmanaged/types';\n \n import { ResolveAndTestFactsResponse } from './types';\n import { delayNextStep, handleProcessingStatus } from './common';\n import { TestDependenciesResult } from '../snyk-test/legacy';\n+import { sleep } from '../common';\n+\n+export async function getIssues(\n+  issuesRequestAttributes: IssuesRequestAttributes,\n+  orgId: string,\n+): Promise<GetIssuesResponse> {\n+  const payload = {\n+    method: 'POST',\n+    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/issues?version=2022-06-29~experimental`,\n+    json: true,\n+    headers: {\n+      'Content-Type': 'application/vnd.api+json',\n+      'x-is-ci': isCI(),\n+      authorization: getAuthHeader(),\n+    },\n+    body: issuesRequestAttributes,\n+  };\n+\n+  const result = await makeRequest<GetIssuesResponse>(payload);\n+  return JSON.parse(result.toString());\n+}\n+\n+export async function getDepGraph(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "970850003",
        "repo_full_name": "snyk/cli",
        "pr_number": 3603,
        "pr_file": "src/lib/polling/polling-test.ts",
        "discussion_id": "970850003",
        "commented_code": "@@ -6,10 +6,92 @@ import { Options } from '../types';\n import { assembleQueryString } from '../snyk-test/common';\n import { getAuthHeader } from '../api-token';\n import { ScanResult } from '../ecosystems/types';\n+import {\n+  CreateDepGraphResponse,\n+  FileHashes,\n+  GetDepGraphResponse,\n+  GetIssuesResponse,\n+  IssuesRequestAttributes,\n+} from '../ecosystems/unmanaged/types';\n \n import { ResolveAndTestFactsResponse } from './types';\n import { delayNextStep, handleProcessingStatus } from './common';\n import { TestDependenciesResult } from '../snyk-test/legacy';\n+import { sleep } from '../common';\n+\n+export async function getIssues(\n+  issuesRequestAttributes: IssuesRequestAttributes,\n+  orgId: string,\n+): Promise<GetIssuesResponse> {\n+  const payload = {\n+    method: 'POST',\n+    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/issues?version=2022-06-29~experimental`,\n+    json: true,\n+    headers: {\n+      'Content-Type': 'application/vnd.api+json',\n+      'x-is-ci': isCI(),\n+      authorization: getAuthHeader(),\n+    },\n+    body: issuesRequestAttributes,\n+  };\n+\n+  const result = await makeRequest<GetIssuesResponse>(payload);\n+  return JSON.parse(result.toString());\n+}\n+\n+export async function getDepGraph(",
        "comment_created_at": "2022-09-14T14:00:57+00:00",
        "comment_author": "dekelund",
        "comment_body": "Based on the comments in this function it could look something like:\r\n\r\n```ts\r\nexport async function getDepGraph(\r\n  id: string,\r\n  orgId: string,\r\n): Promise<GetDepGraphResponse> {\r\n  const payload = {\r\n    method: 'GET',\r\n    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/depgraphs/${id}?version=2022-05-23~experimental`,\r\n    json: true,\r\n    headers: {\r\n      'Content-Type': 'application/vnd.api+json',\r\n      'x-is-ci': isCI(),\r\n      authorization: getAuthHeader(),\r\n    },\r\n  };\r\n\r\n  const maxWaitingTimeMs = 30000;\r\n  const pollIntervalMs = 5000;\r\n  let waitingTimeMs = pollIntervalMs;\r\n  while (waitingTimeMs <= maxWaitingTimeMs) {\r\n    try {\r\n      await sleep(waitingTimeMs);\r\n      const result: GetDepGraphResponse = await makeRequest<GetDepGraphResponse>(payload);\r\n      return JSON.parse(result.toString());\r\n    } catch (e) {\r\n      waitingTimeMs += pollIntervalMs;\r\n    }\r\n  }\r\n\r\n  throw <something>;  // I would create my own timeout exception here\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "970850732",
        "repo_full_name": "snyk/cli",
        "pr_number": 3603,
        "pr_file": "src/lib/polling/polling-test.ts",
        "discussion_id": "970850003",
        "commented_code": "@@ -6,10 +6,92 @@ import { Options } from '../types';\n import { assembleQueryString } from '../snyk-test/common';\n import { getAuthHeader } from '../api-token';\n import { ScanResult } from '../ecosystems/types';\n+import {\n+  CreateDepGraphResponse,\n+  FileHashes,\n+  GetDepGraphResponse,\n+  GetIssuesResponse,\n+  IssuesRequestAttributes,\n+} from '../ecosystems/unmanaged/types';\n \n import { ResolveAndTestFactsResponse } from './types';\n import { delayNextStep, handleProcessingStatus } from './common';\n import { TestDependenciesResult } from '../snyk-test/legacy';\n+import { sleep } from '../common';\n+\n+export async function getIssues(\n+  issuesRequestAttributes: IssuesRequestAttributes,\n+  orgId: string,\n+): Promise<GetIssuesResponse> {\n+  const payload = {\n+    method: 'POST',\n+    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/issues?version=2022-06-29~experimental`,\n+    json: true,\n+    headers: {\n+      'Content-Type': 'application/vnd.api+json',\n+      'x-is-ci': isCI(),\n+      authorization: getAuthHeader(),\n+    },\n+    body: issuesRequestAttributes,\n+  };\n+\n+  const result = await makeRequest<GetIssuesResponse>(payload);\n+  return JSON.parse(result.toString());\n+}\n+\n+export async function getDepGraph(",
        "comment_created_at": "2022-09-14T14:01:30+00:00",
        "comment_author": "dekelund",
        "comment_body": "the problem I see though, is that JSON.parse might throw an exception. maybe we shouldn't do it as I said \ud83d\ude06 ",
        "pr_file_module": null
      },
      {
        "comment_id": "970854021",
        "repo_full_name": "snyk/cli",
        "pr_number": 3603,
        "pr_file": "src/lib/polling/polling-test.ts",
        "discussion_id": "970850003",
        "commented_code": "@@ -6,10 +6,92 @@ import { Options } from '../types';\n import { assembleQueryString } from '../snyk-test/common';\n import { getAuthHeader } from '../api-token';\n import { ScanResult } from '../ecosystems/types';\n+import {\n+  CreateDepGraphResponse,\n+  FileHashes,\n+  GetDepGraphResponse,\n+  GetIssuesResponse,\n+  IssuesRequestAttributes,\n+} from '../ecosystems/unmanaged/types';\n \n import { ResolveAndTestFactsResponse } from './types';\n import { delayNextStep, handleProcessingStatus } from './common';\n import { TestDependenciesResult } from '../snyk-test/legacy';\n+import { sleep } from '../common';\n+\n+export async function getIssues(\n+  issuesRequestAttributes: IssuesRequestAttributes,\n+  orgId: string,\n+): Promise<GetIssuesResponse> {\n+  const payload = {\n+    method: 'POST',\n+    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/issues?version=2022-06-29~experimental`,\n+    json: true,\n+    headers: {\n+      'Content-Type': 'application/vnd.api+json',\n+      'x-is-ci': isCI(),\n+      authorization: getAuthHeader(),\n+    },\n+    body: issuesRequestAttributes,\n+  };\n+\n+  const result = await makeRequest<GetIssuesResponse>(payload);\n+  return JSON.parse(result.toString());\n+}\n+\n+export async function getDepGraph(",
        "comment_created_at": "2022-09-14T14:04:08+00:00",
        "comment_author": "dekelund",
        "comment_body": "on the other hand, the result instant in current implementation is misleading since it has been cast to a GetDepGraphResponse, but in reality it's a string.",
        "pr_file_module": null
      },
      {
        "comment_id": "973027311",
        "repo_full_name": "snyk/cli",
        "pr_number": 3603,
        "pr_file": "src/lib/polling/polling-test.ts",
        "discussion_id": "970850003",
        "commented_code": "@@ -6,10 +6,92 @@ import { Options } from '../types';\n import { assembleQueryString } from '../snyk-test/common';\n import { getAuthHeader } from '../api-token';\n import { ScanResult } from '../ecosystems/types';\n+import {\n+  CreateDepGraphResponse,\n+  FileHashes,\n+  GetDepGraphResponse,\n+  GetIssuesResponse,\n+  IssuesRequestAttributes,\n+} from '../ecosystems/unmanaged/types';\n \n import { ResolveAndTestFactsResponse } from './types';\n import { delayNextStep, handleProcessingStatus } from './common';\n import { TestDependenciesResult } from '../snyk-test/legacy';\n+import { sleep } from '../common';\n+\n+export async function getIssues(\n+  issuesRequestAttributes: IssuesRequestAttributes,\n+  orgId: string,\n+): Promise<GetIssuesResponse> {\n+  const payload = {\n+    method: 'POST',\n+    url: `${config.API_REST_URL}/org/${orgId}/unmanaged_ecosystem/issues?version=2022-06-29~experimental`,\n+    json: true,\n+    headers: {\n+      'Content-Type': 'application/vnd.api+json',\n+      'x-is-ci': isCI(),\n+      authorization: getAuthHeader(),\n+    },\n+    body: issuesRequestAttributes,\n+  };\n+\n+  const result = await makeRequest<GetIssuesResponse>(payload);\n+  return JSON.parse(result.toString());\n+}\n+\n+export async function getDepGraph(",
        "comment_created_at": "2022-09-16T13:30:31+00:00",
        "comment_author": "danielroymoore",
        "comment_body": "Resolving and raising as improvement ticket",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "945524639",
    "pr_number": 3570,
    "pr_file": "src/lib/iac/test/v2/scan/results.ts",
    "created_at": "2022-08-15T08:32:57+00:00",
    "commented_code": "export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "945524639",
        "repo_full_name": "snyk/cli",
        "pr_number": 3570,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "945524639",
        "commented_code": "@@ -32,6 +32,11 @@ export interface SnykIacTestOutput {\n export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
        "comment_created_at": "2022-08-15T08:32:57+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Thought: Does the generation of the metadata depends on the existence of valid results? \r\nIf there are no results would there not be metadata? \r\nUnless there's a direct coupling between the existence of `results` and `metadata` it makes more sense to me that `metadata` would be a top-level property of `TestOutput`. \r\nIf the project name generation is conditional, would it make sense to have the `metadata` property as required, and `projectName` within it as conditional?",
        "pr_file_module": null
      },
      {
        "comment_id": "945561607",
        "repo_full_name": "snyk/cli",
        "pr_number": 3570,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "945524639",
        "commented_code": "@@ -32,6 +32,11 @@ export interface SnykIacTestOutput {\n export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
        "comment_created_at": "2022-08-15T09:26:25+00:00",
        "comment_author": "YairZ101",
        "comment_body": ">  Does the generation of the metadata depends on the existence of valid results?\r\n\r\nCurrently, it does because we are generating the metadata in the results processing stage which we enter only when there are valid results.\r\nAFAIK when we don't generate results we are only displaying an error without any information about the tests so there is no reason to generate the metadata.\r\n\r\n> If the project name generation is conditional, would it make sense to have the metadata property as required, and projectName within it as conditional?\r\n\r\nThat's an implementation detail that we can always change in the future if necessary.",
        "pr_file_module": null
      },
      {
        "comment_id": "945605795",
        "repo_full_name": "snyk/cli",
        "pr_number": 3570,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "945524639",
        "commented_code": "@@ -32,6 +32,11 @@ export interface SnykIacTestOutput {\n export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
        "comment_created_at": "2022-08-15T10:38:38+00:00",
        "comment_author": "ofekatr",
        "comment_body": "I don't think it's an implementation detail, as it actually defines the contract we have with `snyk-iac-test` in the different flows and user stories. \r\nOn the other hand, the fact that we calculate the project name as part of the results processing step is an implementation detail, as it can be generated in another scope which then allows us to return it in all the desired flows.",
        "pr_file_module": null
      },
      {
        "comment_id": "945641196",
        "repo_full_name": "snyk/cli",
        "pr_number": 3570,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "945524639",
        "commented_code": "@@ -32,6 +32,11 @@ export interface SnykIacTestOutput {\n export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
        "comment_created_at": "2022-08-15T11:33:57+00:00",
        "comment_author": "YairZ101",
        "comment_body": "> as it actually defines the contract we have with snyk-iac-test in the different flows and user stories\r\n\r\nBut the current flows and user stories do not display the project name if the test didn't produce results, this is why I think it is an implementation detail (similar to what you said in your 2nd half of the message).",
        "pr_file_module": null
      },
      {
        "comment_id": "945642659",
        "repo_full_name": "snyk/cli",
        "pr_number": 3570,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "945524639",
        "commented_code": "@@ -32,6 +32,11 @@ export interface SnykIacTestOutput {\n export interface Results {\n   resources?: Resource[];\n   vulnerabilities?: Vulnerability[];\n+  metadata?: Metadata;",
        "comment_created_at": "2022-08-15T11:35:12+00:00",
        "comment_author": "YairZ101",
        "comment_body": "In addition to that, personally, I believe we should stop displaying the project name in the test output because it is misleading because it doesn't match the platform definition of a \"project\".",
        "pr_file_module": null
      }
    ]
  }
]