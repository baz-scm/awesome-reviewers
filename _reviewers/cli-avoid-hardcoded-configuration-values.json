[
  {
    "discussion_id": "1540889592",
    "pr_number": 5139,
    "pr_file": "src/lib/config/index.ts",
    "created_at": "2024-03-27T11:00:48+00:00",
    "commented_code": "config.PUBLIC_VULN_DB_URL = 'https://security.snyk.io';\n \n+config.CODE_CLIENT_PROXY_URL = process.env.SNYK_CODE_CLIENT_PROXY_URL || '';\n+",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1540889592",
        "repo_full_name": "snyk/cli",
        "pr_number": 5139,
        "pr_file": "src/lib/config/index.ts",
        "discussion_id": "1540889592",
        "commented_code": "@@ -90,4 +90,6 @@ if (!config.ROOT) {\n \n config.PUBLIC_VULN_DB_URL = 'https://security.snyk.io';\n \n+config.CODE_CLIENT_PROXY_URL = process.env.SNYK_CODE_CLIENT_PROXY_URL || '';\n+",
        "comment_created_at": "2024-03-27T11:00:48+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "Introduce the ability to configure the CODE_CLIENT_PROXY_URL via environment variables. This is aimed at making it easier to test. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1540910527",
    "pr_number": 5139,
    "pr_file": "test/jest/acceptance/snyk-code/snyk-code.spec.ts",
    "created_at": "2024-03-27T11:12:53+00:00",
    "commented_code": "+import { createProjectFromFixture } from '../../util/createProject';\n import { runSnykCLI } from '../../util/runSnykCLI';\n+import { fakeServer } from '../../../acceptance/fake-server';\n+import { fakeDeepCodeServer } from '../../../acceptance/deepcode-fake-server';\n+import { getServerPort } from '../../util/getServerPort';\n+const stripAnsi = require('strip-ansi');\n+\n+const EXIT_CODE_SUCCESS = 0;\n+const EXIT_CODE_ACTION_NEEDED = 1;\n+const EXIT_CODE_FAIL_WITH_ERROR = 2;\n+const EXIT_CODE_NO_SUPPORTED_FILES = 3;\n \n describe('code', () => {\n+  let server: ReturnType<typeof fakeServer>;\n+  let deepCodeServer: ReturnType<typeof fakeDeepCodeServer>;\n+  let env: Record<string, string>;\n+  const port = getServerPort(process);\n+  const baseApi = '/api/v1';\n+  const initialEnvVars = {\n+    ...process.env,\n+    SNYK_API: 'http://localhost:' + port + baseApi,\n+    SNYK_HOST: 'http://localhost:' + port,\n+    SNYK_TOKEN: '123456789',\n+  };\n+\n+  beforeAll((done) => {\n+    deepCodeServer = fakeDeepCodeServer();\n+    deepCodeServer.listen(() => {});\n+    env = {\n+      ...initialEnvVars,\n+      SNYK_CODE_CLIENT_PROXY_URL: `http://localhost:${deepCodeServer.getPort()}`,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1540910527",
        "repo_full_name": "snyk/cli",
        "pr_number": 5139,
        "pr_file": "test/jest/acceptance/snyk-code/snyk-code.spec.ts",
        "discussion_id": "1540910527",
        "commented_code": "@@ -1,26 +1,129 @@\n+import { createProjectFromFixture } from '../../util/createProject';\n import { runSnykCLI } from '../../util/runSnykCLI';\n+import { fakeServer } from '../../../acceptance/fake-server';\n+import { fakeDeepCodeServer } from '../../../acceptance/deepcode-fake-server';\n+import { getServerPort } from '../../util/getServerPort';\n+const stripAnsi = require('strip-ansi');\n+\n+const EXIT_CODE_SUCCESS = 0;\n+const EXIT_CODE_ACTION_NEEDED = 1;\n+const EXIT_CODE_FAIL_WITH_ERROR = 2;\n+const EXIT_CODE_NO_SUPPORTED_FILES = 3;\n \n describe('code', () => {\n+  let server: ReturnType<typeof fakeServer>;\n+  let deepCodeServer: ReturnType<typeof fakeDeepCodeServer>;\n+  let env: Record<string, string>;\n+  const port = getServerPort(process);\n+  const baseApi = '/api/v1';\n+  const initialEnvVars = {\n+    ...process.env,\n+    SNYK_API: 'http://localhost:' + port + baseApi,\n+    SNYK_HOST: 'http://localhost:' + port,\n+    SNYK_TOKEN: '123456789',\n+  };\n+\n+  beforeAll((done) => {\n+    deepCodeServer = fakeDeepCodeServer();\n+    deepCodeServer.listen(() => {});\n+    env = {\n+      ...initialEnvVars,\n+      SNYK_CODE_CLIENT_PROXY_URL: `http://localhost:${deepCodeServer.getPort()}`,",
        "comment_created_at": "2024-03-27T11:12:53+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "Diverging from the existing pattern with fakeServer where port is passed in. Instead by kicking it off _before_ env we can default to using any available port on the machine. This will make it easier to introduce parallelisation within the same machine at a later date. Included as part of this work as a proof of concept. Refactoring existing fakerServer to default to this behaviour can be done as part of a follow up changeset. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "918882343",
    "pr_number": 3448,
    "pr_file": "src/lib/spotlight-vuln-notification.ts",
    "created_at": "2022-07-12T11:57:56+00:00",
    "commented_code": ");\n \n           for (const vulnId of foundSpotlightVulnsIds) {\n-            message += `  - ${vulnId} (See https://snyk.io/vuln/${vulnId})`;\n+            message += `  - ${vulnId} (See https://security.snyk.io/vuln/${vulnId})`;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "918882343",
        "repo_full_name": "snyk/cli",
        "pr_number": 3448,
        "pr_file": "src/lib/spotlight-vuln-notification.ts",
        "discussion_id": "918882343",
        "commented_code": "@@ -41,7 +41,7 @@ export function notificationForSpotlightVulns(\n           );\n \n           for (const vulnId of foundSpotlightVulnsIds) {\n-            message += `  - ${vulnId} (See https://snyk.io/vuln/${vulnId})`;\n+            message += `  - ${vulnId} (See https://security.snyk.io/vuln/${vulnId})`;",
        "comment_created_at": "2022-07-12T11:57:56+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "**issue(blocking):** Whilst we're in this area can we switch to using the configuration value rather than a hard coded string?\r\n\r\nFor example:\r\n\r\n```suggestion\r\n            message += `  - ${vulnId} (See ${config.PUBLIC_VULN_DB_URL}/vuln/${vulnId})`;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1092156798",
    "pr_number": 4377,
    "pr_file": "src/lib/common.ts",
    "created_at": "2023-01-31T16:11:12+00:00",
    "commented_code": "'Tip: Re-run in debug mode to see more information: DEBUG=*snyk* <COMMAND>';\n export const contactSupportMessage =\n   'If the issue persists contact support@snyk.io';\n+\n+export function testPlatformSupport() {\n+  const supportedPlatforms = [\n+    'darwin amd64',\n+    'darwin x64',\n+    'darwin arm64',\n+    'linux amd64',\n+    'linux x64',\n+    'linux arm64',\n+    'win32 amd64',\n+    'win32 x64',\n+    'win32 arm64',\n+  ];\n+\n+  const currentPlatform = os.platform() + ' ' + os.arch();\n+  if (!supportedPlatforms.includes(currentPlatform)) {\n+    const platformWarning =\n+      '------------------------------- Warning -------------------------------\n' +\n+      ' The current platform (' +\n+      currentPlatform +\n+      ') is not supported by Snyk.\n' +",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1092156798",
        "repo_full_name": "snyk/cli",
        "pr_number": 4377,
        "pr_file": "src/lib/common.ts",
        "discussion_id": "1092156798",
        "commented_code": "@@ -6,3 +9,36 @@ export const reTryMessage =\n   'Tip: Re-run in debug mode to see more information: DEBUG=*snyk* <COMMAND>';\n export const contactSupportMessage =\n   'If the issue persists contact support@snyk.io';\n+\n+export function testPlatformSupport() {\n+  const supportedPlatforms = [\n+    'darwin amd64',\n+    'darwin x64',\n+    'darwin arm64',\n+    'linux amd64',\n+    'linux x64',\n+    'linux arm64',\n+    'win32 amd64',\n+    'win32 x64',\n+    'win32 arm64',\n+  ];\n+\n+  const currentPlatform = os.platform() + ' ' + os.arch();\n+  if (!supportedPlatforms.includes(currentPlatform)) {\n+    const platformWarning =\n+      '------------------------------- Warning -------------------------------\\n' +\n+      ' The current platform (' +\n+      currentPlatform +\n+      ') is not supported by Snyk.\\n' +",
        "comment_created_at": "2023-01-31T16:11:12+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Adding \"You may want to consider if using docker is possible for using Snyk.\" could be a good helper",
        "pr_file_module": null
      }
    ]
  }
]