[
  {
    "discussion_id": "1670671333",
    "pr_number": 5272,
    "pr_file": "src/cli/commands/monitor/process-chunks.ts",
    "created_at": "2024-07-09T14:52:15+00:00",
    "commented_code": "+import * as Debug from 'debug';\n+import * as pathUtil from 'path';\n+import * as pMap from 'p-map';\n+import * as analytics from '../../../lib/analytics';\n+import { FailedToRunTestError } from '../../../lib/errors/failed-to-run-test-error';\n+import { extractPackageManager } from '../../../lib/plugins/extract-package-manager';\n+import { MultiProjectResultCustom } from '../../../lib/plugins/get-multi-plugin-result';\n+import { monitor as snykMonitor } from '../../../lib/monitor';\n+import { spinner } from '../../../lib/spinner';\n+import {\n+  Options,\n+  MonitorOptions,\n+  MonitorResult,\n+  Contributor,\n+} from '../../../lib/types';\n+import {\n+  generateMonitorMeta,\n+  getSCAProjectName,\n+  promiseOrCleanup,\n+} from './utils';\n+import { maybePrintDepGraph, maybePrintDepTree } from '../../../lib/print-deps';\n+import { legacyPlugin as pluginApi } from '@snyk/cli-interface';\n+import { PluginMetadata } from '@snyk/cli-interface/legacy/plugin';\n+import { generateProjectAttributes, generateTags } from '.';\n+import { BadResult, GoodResult } from './types';\n+import { formatMonitorOutput } from '../../../lib/formatters';\n+import { getExtraProjectCount } from '../../../lib/plugins/get-extra-project-count';\n+\n+const debug = Debug('snyk');\n+\n+export async function monitorProcessChunksCommand(\n+  path: string,\n+  inspectResult: MultiProjectResultCustom | pluginApi.MultiProjectResult,\n+  multiProjectResult: MultiProjectResultCustom,\n+  contributors: Contributor[],\n+  options: MonitorOptions & Options,\n+  targetFile?: string,\n+): Promise<Array<GoodResult | BadResult>> {\n+  const { scannedProjects } = multiProjectResult;\n+\n+  const results: Array<GoodResult | BadResult> = [];\n+  const MAX_CONCURRENCY = 5;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1670671333",
        "repo_full_name": "snyk/cli",
        "pr_number": 5272,
        "pr_file": "src/cli/commands/monitor/process-chunks.ts",
        "discussion_id": "1670671333",
        "commented_code": "@@ -0,0 +1,130 @@\n+import * as Debug from 'debug';\n+import * as pathUtil from 'path';\n+import * as pMap from 'p-map';\n+import * as analytics from '../../../lib/analytics';\n+import { FailedToRunTestError } from '../../../lib/errors/failed-to-run-test-error';\n+import { extractPackageManager } from '../../../lib/plugins/extract-package-manager';\n+import { MultiProjectResultCustom } from '../../../lib/plugins/get-multi-plugin-result';\n+import { monitor as snykMonitor } from '../../../lib/monitor';\n+import { spinner } from '../../../lib/spinner';\n+import {\n+  Options,\n+  MonitorOptions,\n+  MonitorResult,\n+  Contributor,\n+} from '../../../lib/types';\n+import {\n+  generateMonitorMeta,\n+  getSCAProjectName,\n+  promiseOrCleanup,\n+} from './utils';\n+import { maybePrintDepGraph, maybePrintDepTree } from '../../../lib/print-deps';\n+import { legacyPlugin as pluginApi } from '@snyk/cli-interface';\n+import { PluginMetadata } from '@snyk/cli-interface/legacy/plugin';\n+import { generateProjectAttributes, generateTags } from '.';\n+import { BadResult, GoodResult } from './types';\n+import { formatMonitorOutput } from '../../../lib/formatters';\n+import { getExtraProjectCount } from '../../../lib/plugins/get-extra-project-count';\n+\n+const debug = Debug('snyk');\n+\n+export async function monitorProcessChunksCommand(\n+  path: string,\n+  inspectResult: MultiProjectResultCustom | pluginApi.MultiProjectResult,\n+  multiProjectResult: MultiProjectResultCustom,\n+  contributors: Contributor[],\n+  options: MonitorOptions & Options,\n+  targetFile?: string,\n+): Promise<Array<GoodResult | BadResult>> {\n+  const { scannedProjects } = multiProjectResult;\n+\n+  const results: Array<GoodResult | BadResult> = [];\n+  const MAX_CONCURRENCY = 5;",
        "comment_created_at": "2024-07-09T14:52:15+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: Let's be a bit more pessimistic to not increase the load too much and set it to a lower value first. Let's start with 2.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "651601297",
    "pr_number": 2025,
    "pr_file": "src/lib/ecosystems/test.ts",
    "created_at": "2021-06-15T09:10:21+00:00",
    "commented_code": ");\n }\n \n+export async function resolveAndTestFacts(\n+  ecosystem: Ecosystem,\n+  scans: {\n+    [dir: string]: ScanResult[];\n+  },\n+  options: Options,\n+) {\n+  const results: any[] = [];\n+  const errors: string[] = [];\n+  for (const [path, scanResults] of Object.entries(scans)) {\n+    await spinner(`Resolving and testing signatures in ${path}`);\n+    for (const scanResult of scanResults) {\n+      try {\n+        const { token } = await pollingRequestToken(options, true, scanResult);\n+        if (!token) {\n+          throw 'Something went wrong, token n/a';\n+        }\n+        const response = await pollingWithTokenUntilDone(\n+          token,\n+          ecosystem,\n+          options,\n+          2000,\n+        );\n+        results.push(response);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "651601297",
        "repo_full_name": "snyk/cli",
        "pr_number": 2025,
        "pr_file": "src/lib/ecosystems/test.ts",
        "discussion_id": "651601297",
        "commented_code": "@@ -53,6 +87,42 @@ export async function testEcosystem(\n   );\n }\n \n+export async function resolveAndTestFacts(\n+  ecosystem: Ecosystem,\n+  scans: {\n+    [dir: string]: ScanResult[];\n+  },\n+  options: Options,\n+) {\n+  const results: any[] = [];\n+  const errors: string[] = [];\n+  for (const [path, scanResults] of Object.entries(scans)) {\n+    await spinner(`Resolving and testing signatures in ${path}`);\n+    for (const scanResult of scanResults) {\n+      try {\n+        const { token } = await pollingRequestToken(options, true, scanResult);\n+        if (!token) {\n+          throw 'Something went wrong, token n/a';\n+        }\n+        const response = await pollingWithTokenUntilDone(\n+          token,\n+          ecosystem,\n+          options,\n+          2000,\n+        );\n+        results.push(response);",
        "comment_created_at": "2021-06-15T09:10:21+00:00",
        "comment_author": "anthogez",
        "comment_body": "Keeping the current approach where we test/resolve one scanResult at the time.\r\n\r\nDepending of resolution `AVG`  time for C/C++ unmanaged, we can change it to something like:\r\n\r\n- Please generate a token (resolution process) for all the scanResults (if they are resolvable kind)\r\n   then go over that list and keep polling each token in order to see if any is available, if yes then take out of the list till all the scanResults' token are processed either successfully or not",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "351908844",
    "pr_number": 887,
    "pr_file": "src/cli/commands/monitor/index.ts",
    "created_at": "2019-11-28T19:12:27+00:00",
    "commented_code": "}\n   }\n \n-  // Part 1: every argument is a scan target; process them asynchronously\n-  const results = await Promise.all(\n-    (args as string[]).map((arg) => detectInspectMonitor(arg, options)),\n+  // Part 1: every argument is a scan target; process them sequentially\n+  let results: Array<GoodResult | BadResult> = [];\n+  const snapshots: Snapshot[] = [];\n+  for (const path of args as string[]) {\n+    try {\n+      await validateMonitorPath(path, options.docker);\n+\n+      let packageManager = detect.detectPackageManager(path, options);\n+\n+      const targetFile =\n+        options.docker && !options.file // snyk monitor --docker (without --file)\n+          ? undefined\n+          : options.file || detect.detectPackageFile(path);\n+\n+      const plugin = plugins.loadPlugin(packageManager, options);\n+\n+      const moduleInfo = ModuleInfo(plugin, options.policy);\n+\n+      const displayPath = pathUtil.relative(\n+        '.',\n+        pathUtil.join(path, targetFile || ''),\n+      );\n+\n+      const analysisType = options.docker ? 'docker' : packageManager;\n+\n+      const analyzingDepsSpinnerLabel =\n+        'Analyzing ' + analysisType + ' dependencies for ' + displayPath;\n+\n+      await spinner(analyzingDepsSpinnerLabel);\n+\n+      // Scan the project dependencies via a plugin\n+\n+      analytics.add('packageManager', packageManager);\n+      analytics.add('pluginOptions', options);\n+\n+      // TODO: the type should depend on allSubProjects flag\n+      const inspectResult: pluginApi.InspectResult = await promiseOrCleanup(\n+        moduleInfo.inspect(path, targetFile, { ...options }),\n+        spinner.clear(analyzingDepsSpinnerLabel),\n+      );\n+\n+      if (inspectResult.plugin.packageManager) {\n+        packageManager = inspectResult.plugin.packageManager;\n+      }\n+\n+      analytics.add('pluginName', inspectResult.plugin.name);\n+      await spinner.clear(analyzingDepsSpinnerLabel)(inspectResult);\n+\n+      snapshots.push({",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "351908844",
        "repo_full_name": "snyk/cli",
        "pr_number": 887,
        "pr_file": "src/cli/commands/monitor/index.ts",
        "discussion_id": "351908844",
        "commented_code": "@@ -227,12 +196,74 @@ async function monitor(...args0: MethodArgs): Promise<any> {\n     }\n   }\n \n-  // Part 1: every argument is a scan target; process them asynchronously\n-  const results = await Promise.all(\n-    (args as string[]).map((arg) => detectInspectMonitor(arg, options)),\n+  // Part 1: every argument is a scan target; process them sequentially\n+  let results: Array<GoodResult | BadResult> = [];\n+  const snapshots: Snapshot[] = [];\n+  for (const path of args as string[]) {\n+    try {\n+      await validateMonitorPath(path, options.docker);\n+\n+      let packageManager = detect.detectPackageManager(path, options);\n+\n+      const targetFile =\n+        options.docker && !options.file // snyk monitor --docker (without --file)\n+          ? undefined\n+          : options.file || detect.detectPackageFile(path);\n+\n+      const plugin = plugins.loadPlugin(packageManager, options);\n+\n+      const moduleInfo = ModuleInfo(plugin, options.policy);\n+\n+      const displayPath = pathUtil.relative(\n+        '.',\n+        pathUtil.join(path, targetFile || ''),\n+      );\n+\n+      const analysisType = options.docker ? 'docker' : packageManager;\n+\n+      const analyzingDepsSpinnerLabel =\n+        'Analyzing ' + analysisType + ' dependencies for ' + displayPath;\n+\n+      await spinner(analyzingDepsSpinnerLabel);\n+\n+      // Scan the project dependencies via a plugin\n+\n+      analytics.add('packageManager', packageManager);\n+      analytics.add('pluginOptions', options);\n+\n+      // TODO: the type should depend on allSubProjects flag\n+      const inspectResult: pluginApi.InspectResult = await promiseOrCleanup(\n+        moduleInfo.inspect(path, targetFile, { ...options }),\n+        spinner.clear(analyzingDepsSpinnerLabel),\n+      );\n+\n+      if (inspectResult.plugin.packageManager) {\n+        packageManager = inspectResult.plugin.packageManager;\n+      }\n+\n+      analytics.add('pluginName', inspectResult.plugin.name);\n+      await spinner.clear(analyzingDepsSpinnerLabel)(inspectResult);\n+\n+      snapshots.push({",
        "comment_created_at": "2019-11-28T19:12:27+00:00",
        "comment_author": "kyegupov",
        "comment_body": "Actually, you don't need to wait for all the inspects to complete to begin sending snapshots. It makes sense to call saveSnapshot here and save the resulting promise. Then, in line 262, you will just need to call Promise.all on that array.",
        "pr_file_module": null
      },
      {
        "comment_id": "351932333",
        "repo_full_name": "snyk/cli",
        "pr_number": 887,
        "pr_file": "src/cli/commands/monitor/index.ts",
        "discussion_id": "351908844",
        "commented_code": "@@ -227,12 +196,74 @@ async function monitor(...args0: MethodArgs): Promise<any> {\n     }\n   }\n \n-  // Part 1: every argument is a scan target; process them asynchronously\n-  const results = await Promise.all(\n-    (args as string[]).map((arg) => detectInspectMonitor(arg, options)),\n+  // Part 1: every argument is a scan target; process them sequentially\n+  let results: Array<GoodResult | BadResult> = [];\n+  const snapshots: Snapshot[] = [];\n+  for (const path of args as string[]) {\n+    try {\n+      await validateMonitorPath(path, options.docker);\n+\n+      let packageManager = detect.detectPackageManager(path, options);\n+\n+      const targetFile =\n+        options.docker && !options.file // snyk monitor --docker (without --file)\n+          ? undefined\n+          : options.file || detect.detectPackageFile(path);\n+\n+      const plugin = plugins.loadPlugin(packageManager, options);\n+\n+      const moduleInfo = ModuleInfo(plugin, options.policy);\n+\n+      const displayPath = pathUtil.relative(\n+        '.',\n+        pathUtil.join(path, targetFile || ''),\n+      );\n+\n+      const analysisType = options.docker ? 'docker' : packageManager;\n+\n+      const analyzingDepsSpinnerLabel =\n+        'Analyzing ' + analysisType + ' dependencies for ' + displayPath;\n+\n+      await spinner(analyzingDepsSpinnerLabel);\n+\n+      // Scan the project dependencies via a plugin\n+\n+      analytics.add('packageManager', packageManager);\n+      analytics.add('pluginOptions', options);\n+\n+      // TODO: the type should depend on allSubProjects flag\n+      const inspectResult: pluginApi.InspectResult = await promiseOrCleanup(\n+        moduleInfo.inspect(path, targetFile, { ...options }),\n+        spinner.clear(analyzingDepsSpinnerLabel),\n+      );\n+\n+      if (inspectResult.plugin.packageManager) {\n+        packageManager = inspectResult.plugin.packageManager;\n+      }\n+\n+      analytics.add('pluginName', inspectResult.plugin.name);\n+      await spinner.clear(analyzingDepsSpinnerLabel)(inspectResult);\n+\n+      snapshots.push({",
        "comment_created_at": "2019-11-28T21:50:53+00:00",
        "comment_author": "gitphill",
        "comment_body": "updated, thanks",
        "pr_file_module": null
      }
    ]
  }
]