[
  {
    "discussion_id": "1965454410",
    "pr_number": 5709,
    "pr_file": "cliv2/internal/cliv2/cliv2.go",
    "created_at": "2025-02-21T13:12:23+00:00",
    "commented_code": "}\n \n \tif len(jsonErrors) != 0 {\n+\t\tuseSTDIO := c.globalConfig.GetBool(configuration.WORKFLOW_USE_STDIO)",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1965454410",
        "repo_full_name": "snyk/cli",
        "pr_number": 5709,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1965454410",
        "commented_code": "@@ -482,9 +486,17 @@ func (c *CLI) getErrorFromFile(errFilePath string) (data error, err error) {\n \t}\n \n \tif len(jsonErrors) != 0 {\n+\t\tuseSTDIO := c.globalConfig.GetBool(configuration.WORKFLOW_USE_STDIO)",
        "comment_created_at": "2025-02-21T13:12:23+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: There is an opportunity to move this in a small function and write a test for it ;) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1930719745",
    "pr_number": 5683,
    "pr_file": "cliv2/cmd/cliv2/main_test.go",
    "created_at": "2025-01-27T15:29:12+00:00",
    "commented_code": "os.Args = []string{\"snyk\", \"--version\"}\n \tdefer func() { os.Args = oldArgs }()\n \n-\terr := MainWithErrorCode()\n+\terrCode, _ := MainWithErrorCode()\n \n-\tassert.Equal(t, 0, err)\n+\tassert.Equal(t, 0, errCode)\n+\n+\tt.Run(\"outputs an error list\", func(t *testing.T) {\n+\t\t_ = os.Setenv(\"SNYK_TOKEN\", \"invalidToken\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1930719745",
        "repo_full_name": "snyk/cli",
        "pr_number": 5683,
        "pr_file": "cliv2/cmd/cliv2/main_test.go",
        "discussion_id": "1930719745",
        "commented_code": "@@ -44,9 +44,25 @@ func Test_MainWithErrorCode(t *testing.T) {\n \tos.Args = []string{\"snyk\", \"--version\"}\n \tdefer func() { os.Args = oldArgs }()\n \n-\terr := MainWithErrorCode()\n+\terrCode, _ := MainWithErrorCode()\n \n-\tassert.Equal(t, 0, err)\n+\tassert.Equal(t, 0, errCode)\n+\n+\tt.Run(\"outputs an error list\", func(t *testing.T) {\n+\t\t_ = os.Setenv(\"SNYK_TOKEN\", \"invalidToken\")",
        "comment_created_at": "2025-01-27T15:29:12+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: Use `t.Setenv()` instead of `os.Setenv()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1725701447",
    "pr_number": 5432,
    "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
    "created_at": "2024-08-21T20:13:24+00:00",
    "commented_code": null,
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1725701447",
        "repo_full_name": "snyk/cli",
        "pr_number": 5432,
        "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
        "discussion_id": "1725701447",
        "commented_code": null,
        "comment_created_at": "2024-08-21T20:13:24+00:00",
        "comment_author": "cmars",
        "comment_body": "I'd add test coverage to these functions in isolation, also test for mutual exclusivity with goroutines.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1084274543",
    "pr_number": 4365,
    "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
    "created_at": "2023-01-23T16:27:19+00:00",
    "commented_code": "func Test_executeRunV1(t *testing.T) {\n \texpectedReturnCode := 0\n \n-\tcacheDir := \"dasda\"\n+\tcacheDir := getCacheDir()\n+\ttmpDir := utils.GetTemporaryDirectory(cacheDir, cliv2.GetFullVersion())\n \tlogger := log.New(ioutil.Discard, \"\", 0)\n \n-\tassert.NoDirExists(t, cacheDir)\n+\tassert.NoDirExists(t, tmpDir)\n \n \t// create instance under test\n \tcli, _ := cliv2.NewCLIv2(cacheDir, logger)\n \n \t// run once\n+\tassert.Nil(t, cli.Init())\n \tactualReturnCode := cliv2.DeriveExitCode(cli.Execute(getProxyInfoForTest(), []string{\"--help\"}))\n \tassert.Equal(t, expectedReturnCode, actualReturnCode)\n \tassert.FileExists(t, cli.GetBinaryLocation())\n \tfileInfo1, _ := os.Stat(cli.GetBinaryLocation())\n \n+\t// sleep shortly to ensure that everything is applied\n+\ttime.Sleep(500 * time.Millisecond)",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1084274543",
        "repo_full_name": "snyk/cli",
        "pr_number": 4365,
        "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
        "discussion_id": "1084274543",
        "commented_code": "@@ -150,21 +160,27 @@ func Test_prepareV1Command(t *testing.T) {\n func Test_executeRunV1(t *testing.T) {\n \texpectedReturnCode := 0\n \n-\tcacheDir := \"dasda\"\n+\tcacheDir := getCacheDir()\n+\ttmpDir := utils.GetTemporaryDirectory(cacheDir, cliv2.GetFullVersion())\n \tlogger := log.New(ioutil.Discard, \"\", 0)\n \n-\tassert.NoDirExists(t, cacheDir)\n+\tassert.NoDirExists(t, tmpDir)\n \n \t// create instance under test\n \tcli, _ := cliv2.NewCLIv2(cacheDir, logger)\n \n \t// run once\n+\tassert.Nil(t, cli.Init())\n \tactualReturnCode := cliv2.DeriveExitCode(cli.Execute(getProxyInfoForTest(), []string{\"--help\"}))\n \tassert.Equal(t, expectedReturnCode, actualReturnCode)\n \tassert.FileExists(t, cli.GetBinaryLocation())\n \tfileInfo1, _ := os.Stat(cli.GetBinaryLocation())\n \n+\t// sleep shortly to ensure that everything is applied\n+\ttime.Sleep(500 * time.Millisecond)",
        "comment_created_at": "2023-01-23T16:27:19+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "How about using `assert.Eventually` instead of sleeping?",
        "pr_file_module": null
      },
      {
        "comment_id": "1084339625",
        "repo_full_name": "snyk/cli",
        "pr_number": 4365,
        "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
        "discussion_id": "1084274543",
        "commented_code": "@@ -150,21 +160,27 @@ func Test_prepareV1Command(t *testing.T) {\n func Test_executeRunV1(t *testing.T) {\n \texpectedReturnCode := 0\n \n-\tcacheDir := \"dasda\"\n+\tcacheDir := getCacheDir()\n+\ttmpDir := utils.GetTemporaryDirectory(cacheDir, cliv2.GetFullVersion())\n \tlogger := log.New(ioutil.Discard, \"\", 0)\n \n-\tassert.NoDirExists(t, cacheDir)\n+\tassert.NoDirExists(t, tmpDir)\n \n \t// create instance under test\n \tcli, _ := cliv2.NewCLIv2(cacheDir, logger)\n \n \t// run once\n+\tassert.Nil(t, cli.Init())\n \tactualReturnCode := cliv2.DeriveExitCode(cli.Execute(getProxyInfoForTest(), []string{\"--help\"}))\n \tassert.Equal(t, expectedReturnCode, actualReturnCode)\n \tassert.FileExists(t, cli.GetBinaryLocation())\n \tfileInfo1, _ := os.Stat(cli.GetBinaryLocation())\n \n+\t// sleep shortly to ensure that everything is applied\n+\ttime.Sleep(500 * time.Millisecond)",
        "comment_created_at": "2023-01-23T17:24:22+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Interesting point, to be honest I'm not completely sure about the root cause of why sleep is necessary. I just had the build failing on a circle runner while working locally and on other runners. \r\nMy assumption is that the final comparison of the modification time might not be the strongest check. Looking at time resolution etc, I was assuming that the sleep helps to ensure that modification times would be definitely different.\r\nLooking at the comment it seems misleading. I'm definitely changing the comment.",
        "pr_file_module": null
      },
      {
        "comment_id": "1084360359",
        "repo_full_name": "snyk/cli",
        "pr_number": 4365,
        "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
        "discussion_id": "1084274543",
        "commented_code": "@@ -150,21 +160,27 @@ func Test_prepareV1Command(t *testing.T) {\n func Test_executeRunV1(t *testing.T) {\n \texpectedReturnCode := 0\n \n-\tcacheDir := \"dasda\"\n+\tcacheDir := getCacheDir()\n+\ttmpDir := utils.GetTemporaryDirectory(cacheDir, cliv2.GetFullVersion())\n \tlogger := log.New(ioutil.Discard, \"\", 0)\n \n-\tassert.NoDirExists(t, cacheDir)\n+\tassert.NoDirExists(t, tmpDir)\n \n \t// create instance under test\n \tcli, _ := cliv2.NewCLIv2(cacheDir, logger)\n \n \t// run once\n+\tassert.Nil(t, cli.Init())\n \tactualReturnCode := cliv2.DeriveExitCode(cli.Execute(getProxyInfoForTest(), []string{\"--help\"}))\n \tassert.Equal(t, expectedReturnCode, actualReturnCode)\n \tassert.FileExists(t, cli.GetBinaryLocation())\n \tfileInfo1, _ := os.Stat(cli.GetBinaryLocation())\n \n+\t// sleep shortly to ensure that everything is applied\n+\ttime.Sleep(500 * time.Millisecond)",
        "comment_created_at": "2023-01-23T17:43:49+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1049683231",
    "pr_number": 4247,
    "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
    "created_at": "2022-12-15T14:10:01+00:00",
    "commented_code": "os.RemoveAll(cacheDir)\n }\n+\n+func Test_clearCache(t *testing.T) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1049683231",
        "repo_full_name": "snyk/cli",
        "pr_number": 4247,
        "pr_file": "cliv2/internal/cliv2/cliv2_test.go",
        "discussion_id": "1049683231",
        "commented_code": "@@ -222,3 +223,32 @@ func Test_executeUnknownCommand(t *testing.T) {\n \n \tos.RemoveAll(cacheDir)\n }\n+\n+func Test_clearCache(t *testing.T) {",
        "comment_created_at": "2022-12-15T14:10:01+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: extend the test to cover both cases more than 5 elements in the cache and less. maybe add second test case.",
        "pr_file_module": null
      }
    ]
  }
]