[
  {
    "discussion_id": "1084151618",
    "pr_number": 3433,
    "pr_file": "src/lib/formatters/test/format-test-results.ts",
    "created_at": "2023-01-23T14:50:24+00:00",
    "commented_code": "return '';\n }\n \n-function getDockerSuggestionText(options, config, baseImageRes): string {\n+function getDockerSuggestionText(\n+  options,\n+  config,\n+  baseImageRes,\n+  appVulnsTip,\n+): string {\n   if (!options.docker || options.isDockerUser) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1084151618",
        "repo_full_name": "snyk/cli",
        "pr_number": 3433,
        "pr_file": "src/lib/formatters/test/format-test-results.ts",
        "discussion_id": "1084151618",
        "commented_code": "@@ -256,31 +258,34 @@ export function dockerUserCTA(options) {\n   return '';\n }\n \n-function getDockerSuggestionText(options, config, baseImageRes): string {\n+function getDockerSuggestionText(\n+  options,\n+  config,\n+  baseImageRes,\n+  appVulnsTip,\n+): string {\n   if (!options.docker || options.isDockerUser) {",
        "comment_created_at": "2023-01-23T14:50:24+00:00",
        "comment_author": "tommyknows",
        "comment_body": "I don't think that the changes to this function do what they should; as far as I can judge the optOutSuggestions are now always added (even if the customer disabled them)...\r\n\r\nI'll have a brief look on how to improve this...",
        "pr_file_module": null
      },
      {
        "comment_id": "1084189121",
        "repo_full_name": "snyk/cli",
        "pr_number": 3433,
        "pr_file": "src/lib/formatters/test/format-test-results.ts",
        "discussion_id": "1084151618",
        "commented_code": "@@ -256,31 +258,34 @@ export function dockerUserCTA(options) {\n   return '';\n }\n \n-function getDockerSuggestionText(options, config, baseImageRes): string {\n+function getDockerSuggestionText(\n+  options,\n+  config,\n+  baseImageRes,\n+  appVulnsTip,\n+): string {\n   if (!options.docker || options.isDockerUser) {",
        "comment_created_at": "2023-01-23T15:20:23+00:00",
        "comment_author": "tommyknows",
        "comment_body": "It's not really shorter than before, but I think it's way easier to understand at least:\r\n```ts\r\nfunction getDockerSuggestionText(\r\n  options: Options & TestOptions,\r\n  result: TestResult,\r\n): string {\r\n  if (\r\n    config?.disableSuggestions === 'true' ||\r\n    !options.docker ||\r\n    options.isDockerUser\r\n  ) {\r\n    return '';\r\n  }\r\n\r\n  const tips: string[] = [];\r\n  // exclude-base-image-vulns flag tip\r\n  if (options.file && !options['exclude-base-image-vulns']) {\r\n    tips.push(\r\n      'Pro tip: use `--exclude-base-image-vulns` to exclude from display Docker base image vulnerabilities.',\r\n    );\r\n  }\r\n\r\n  // dockerfile flag tip for base image\r\n  if (!options.file && !result?.docker?.baseImage) {\r\n    tips.push(\r\n      `Snyk wasn\u2019t able to auto detect the base image, use \\`--file\\` option to get base image remediation advice.\r\nExample: $ snyk container test ${options.path} --file=path/to/Dockerfile`,\r\n    );\r\n  }\r\n\r\n  // disable-app-vulns flag tip\r\n  if (options.docker && result.targetFile && result.uniqueCount > 0) {\r\n    tips.push(\r\n      'Snyk found some vulnerabilities in your image applications (Snyk searches for these vulnerabilities by default). See https://snyk.co/app-vulns for more information.',\r\n    );\r\n  }\r\n\r\n  return tips\r\n    // not sure why the tip to disable tips wasn't marked as white, maybe we should change that too? \r\n    .map((tip) => chalk.bold.white(tip))\r\n    .concat(\r\n      // add tip to disable tips\r\n      `To remove ${\r\n        tips.length > 1 ? 'these messages' : 'this message'\r\n      } in the future, please run \\`snyk config set disableSuggestions=true\\``,\r\n    )\r\n    .join('\\n\\n');\r\n}\r\n```\r\n\r\n(This also gets rid of the `getAppVulnsTipText` function)\r\n\r\nNote that this also needs an update on the callsite, which is now just:\r\n```ts\r\n const dockerSuggestion = getDockerSuggestionText(options, res);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1266695054",
    "pr_number": 4745,
    "pr_file": "src/lib/plugins/sast/analysis.ts",
    "created_at": "2023-07-18T12:26:22+00:00",
    "commented_code": "? severityToAnalysisSeverity(options.severityThreshold)\n     : AnalysisSeverity.info;\n \n-  const result = await analyzeFolders({\n-    connection: {\n-      baseURL,\n-      sessionToken,\n-      source,\n-      requestId,\n-      org,\n+  const connectionOptions = {\n+    baseURL,\n+    sessionToken,\n+    source,\n+    requestId,\n+    org,\n+  };\n+\n+  const analysisOptions = { severity };\n+\n+  const analysisContext = {\n+    initiator: 'CLI',\n+    flow: source,\n+    projectName: config.PROJECT_NAME,\n+    project: {\n+      name: options['project-name'] || config.PROJECT_NAME || 'unknown',\n+      publicId: options['project-id'] || 'unknown',\n+      type: 'sast',\n     },\n-    analysisOptions: { severity },\n-    fileOptions: { paths: [root] },\n-    ...(options.report && {\n+    org: {\n+      name: sastSettings.org || 'unknown',\n+      displayName: 'unknown',\n+      publicId: 'unknown',\n+      flags: {},\n+    },\n+  } as const;\n+\n+  let result: FileAnalysis | ScmAnalysis | null = null;\n+\n+  // When the \"report\" arg is provided the test results are published on the platform.\n+  const isReportFlow = options.report ?? false;\n+  // We differentiate between file-based reporting flows\n+  // and SCM-based ones by looking at the \"project-id\" arg.\n+  const isScmReportFlow = isReportFlow && options['project-id'];\n+\n+  if (isScmReportFlow) {\n+    // Run an SCM analysis test with reporting.\n+    result = await analyzeScmProject({\n+      connection: connectionOptions,\n+      analysisOptions,\n       reportOptions: {\n-        enabled: options.report ?? false,\n-        projectName: options['project-name'],\n-        targetName: options['target-name'],\n-        targetRef: options['target-reference'],\n-        remoteRepoUrl: options['remote-repo-url'],\n+        projectId: options['project-id'],\n+        commitId: options['commit-id'],\n       },\n-    }),\n-    analysisContext: {\n-      initiator: 'CLI',\n-      flow: source,\n-      projectName: config.PROJECT_NAME,\n-      org: {\n-        name: sastSettings.org || 'unknown',\n-        displayName: 'unknown',\n-        publicId: 'unknown',\n-        flags: {},\n-      },\n-    },\n-    languages: sastSettings.supportedLanguages,\n-  });\n-\n-  if (result?.fileBundle.skippedOversizedFiles?.length) {\n-    debug(\n-      '\n',\n-      chalk.yellow(\n-        `Warning!\nFiles were skipped in the analysis due to their size being greater than ${MAX_FILE_SIZE}B. Skipped files: ${[\n-          ...result.fileBundle.skippedOversizedFiles,\n-        ].join(', ')}`,\n-      ),\n-    );\n+      analysisContext,\n+    });\n+  } else {\n+    // Run a file-based test, optionally with reporting.\n+    result = await analyzeFolders({\n+      connection: connectionOptions,\n+      analysisOptions,\n+      fileOptions: { paths: [root] },\n+      ...(isReportFlow && {\n+        reportOptions: {\n+          enabled: true,\n+          projectName: options['project-name'],\n+          targetName: options['target-name'],\n+          targetRef: options['target-reference'],\n+          remoteRepoUrl: options['remote-repo-url'],\n+        },\n+      }),\n+      analysisContext,\n+      languages: sastSettings.supportedLanguages,\n+    });",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1266695054",
        "repo_full_name": "snyk/cli",
        "pr_number": 4745,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1266695054",
        "commented_code": "@@ -97,48 +100,81 @@ async function getCodeAnalysis(\n     ? severityToAnalysisSeverity(options.severityThreshold)\n     : AnalysisSeverity.info;\n \n-  const result = await analyzeFolders({\n-    connection: {\n-      baseURL,\n-      sessionToken,\n-      source,\n-      requestId,\n-      org,\n+  const connectionOptions = {\n+    baseURL,\n+    sessionToken,\n+    source,\n+    requestId,\n+    org,\n+  };\n+\n+  const analysisOptions = { severity };\n+\n+  const analysisContext = {\n+    initiator: 'CLI',\n+    flow: source,\n+    projectName: config.PROJECT_NAME,\n+    project: {\n+      name: options['project-name'] || config.PROJECT_NAME || 'unknown',\n+      publicId: options['project-id'] || 'unknown',\n+      type: 'sast',\n     },\n-    analysisOptions: { severity },\n-    fileOptions: { paths: [root] },\n-    ...(options.report && {\n+    org: {\n+      name: sastSettings.org || 'unknown',\n+      displayName: 'unknown',\n+      publicId: 'unknown',\n+      flags: {},\n+    },\n+  } as const;\n+\n+  let result: FileAnalysis | ScmAnalysis | null = null;\n+\n+  // When the \"report\" arg is provided the test results are published on the platform.\n+  const isReportFlow = options.report ?? false;\n+  // We differentiate between file-based reporting flows\n+  // and SCM-based ones by looking at the \"project-id\" arg.\n+  const isScmReportFlow = isReportFlow && options['project-id'];\n+\n+  if (isScmReportFlow) {\n+    // Run an SCM analysis test with reporting.\n+    result = await analyzeScmProject({\n+      connection: connectionOptions,\n+      analysisOptions,\n       reportOptions: {\n-        enabled: options.report ?? false,\n-        projectName: options['project-name'],\n-        targetName: options['target-name'],\n-        targetRef: options['target-reference'],\n-        remoteRepoUrl: options['remote-repo-url'],\n+        projectId: options['project-id'],\n+        commitId: options['commit-id'],\n       },\n-    }),\n-    analysisContext: {\n-      initiator: 'CLI',\n-      flow: source,\n-      projectName: config.PROJECT_NAME,\n-      org: {\n-        name: sastSettings.org || 'unknown',\n-        displayName: 'unknown',\n-        publicId: 'unknown',\n-        flags: {},\n-      },\n-    },\n-    languages: sastSettings.supportedLanguages,\n-  });\n-\n-  if (result?.fileBundle.skippedOversizedFiles?.length) {\n-    debug(\n-      '\\n',\n-      chalk.yellow(\n-        `Warning!\\nFiles were skipped in the analysis due to their size being greater than ${MAX_FILE_SIZE}B. Skipped files: ${[\n-          ...result.fileBundle.skippedOversizedFiles,\n-        ].join(', ')}`,\n-      ),\n-    );\n+      analysisContext,\n+    });\n+  } else {\n+    // Run a file-based test, optionally with reporting.\n+    result = await analyzeFolders({\n+      connection: connectionOptions,\n+      analysisOptions,\n+      fileOptions: { paths: [root] },\n+      ...(isReportFlow && {\n+        reportOptions: {\n+          enabled: true,\n+          projectName: options['project-name'],\n+          targetName: options['target-name'],\n+          targetRef: options['target-reference'],\n+          remoteRepoUrl: options['remote-repo-url'],\n+        },\n+      }),\n+      analysisContext,\n+      languages: sastSettings.supportedLanguages,\n+    });",
        "comment_created_at": "2023-07-18T12:26:22+00:00",
        "comment_author": "michelkaporin",
        "comment_body": "suggestion: extract this to a function responsible for selecting analysis strategy and running an analysis, as the current `getCodeAnalysis` function grew quite big already.",
        "pr_file_module": null
      },
      {
        "comment_id": "1266939816",
        "repo_full_name": "snyk/cli",
        "pr_number": 4745,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1266695054",
        "commented_code": "@@ -97,48 +100,81 @@ async function getCodeAnalysis(\n     ? severityToAnalysisSeverity(options.severityThreshold)\n     : AnalysisSeverity.info;\n \n-  const result = await analyzeFolders({\n-    connection: {\n-      baseURL,\n-      sessionToken,\n-      source,\n-      requestId,\n-      org,\n+  const connectionOptions = {\n+    baseURL,\n+    sessionToken,\n+    source,\n+    requestId,\n+    org,\n+  };\n+\n+  const analysisOptions = { severity };\n+\n+  const analysisContext = {\n+    initiator: 'CLI',\n+    flow: source,\n+    projectName: config.PROJECT_NAME,\n+    project: {\n+      name: options['project-name'] || config.PROJECT_NAME || 'unknown',\n+      publicId: options['project-id'] || 'unknown',\n+      type: 'sast',\n     },\n-    analysisOptions: { severity },\n-    fileOptions: { paths: [root] },\n-    ...(options.report && {\n+    org: {\n+      name: sastSettings.org || 'unknown',\n+      displayName: 'unknown',\n+      publicId: 'unknown',\n+      flags: {},\n+    },\n+  } as const;\n+\n+  let result: FileAnalysis | ScmAnalysis | null = null;\n+\n+  // When the \"report\" arg is provided the test results are published on the platform.\n+  const isReportFlow = options.report ?? false;\n+  // We differentiate between file-based reporting flows\n+  // and SCM-based ones by looking at the \"project-id\" arg.\n+  const isScmReportFlow = isReportFlow && options['project-id'];\n+\n+  if (isScmReportFlow) {\n+    // Run an SCM analysis test with reporting.\n+    result = await analyzeScmProject({\n+      connection: connectionOptions,\n+      analysisOptions,\n       reportOptions: {\n-        enabled: options.report ?? false,\n-        projectName: options['project-name'],\n-        targetName: options['target-name'],\n-        targetRef: options['target-reference'],\n-        remoteRepoUrl: options['remote-repo-url'],\n+        projectId: options['project-id'],\n+        commitId: options['commit-id'],\n       },\n-    }),\n-    analysisContext: {\n-      initiator: 'CLI',\n-      flow: source,\n-      projectName: config.PROJECT_NAME,\n-      org: {\n-        name: sastSettings.org || 'unknown',\n-        displayName: 'unknown',\n-        publicId: 'unknown',\n-        flags: {},\n-      },\n-    },\n-    languages: sastSettings.supportedLanguages,\n-  });\n-\n-  if (result?.fileBundle.skippedOversizedFiles?.length) {\n-    debug(\n-      '\\n',\n-      chalk.yellow(\n-        `Warning!\\nFiles were skipped in the analysis due to their size being greater than ${MAX_FILE_SIZE}B. Skipped files: ${[\n-          ...result.fileBundle.skippedOversizedFiles,\n-        ].join(', ')}`,\n-      ),\n-    );\n+      analysisContext,\n+    });\n+  } else {\n+    // Run a file-based test, optionally with reporting.\n+    result = await analyzeFolders({\n+      connection: connectionOptions,\n+      analysisOptions,\n+      fileOptions: { paths: [root] },\n+      ...(isReportFlow && {\n+        reportOptions: {\n+          enabled: true,\n+          projectName: options['project-name'],\n+          targetName: options['target-name'],\n+          targetRef: options['target-reference'],\n+          remoteRepoUrl: options['remote-repo-url'],\n+        },\n+      }),\n+      analysisContext,\n+      languages: sastSettings.supportedLanguages,\n+    });",
        "comment_created_at": "2023-07-18T15:23:06+00:00",
        "comment_author": "novalex",
        "comment_body": "Refactored the logic and data flow to make things cleaner and separate some concerns.\r\nThe caller is now responsible for passing in the args needed for analysis, and this method is more focused on getting analysis results based on flow.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1197705889",
    "pr_number": 4603,
    "pr_file": "src/lib/plugins/sast/index.ts",
    "created_at": "2023-05-18T11:26:20+00:00",
    "commented_code": "// cloneDeep is used so the sarif is not changed when using the testResults getting the displayed output\n       const sarifTypedResult = cloneDeep(testResults?.analysisResults?.sarif);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1197705889",
        "repo_full_name": "snyk/cli",
        "pr_number": 4603,
        "pr_file": "src/lib/plugins/sast/index.ts",
        "discussion_id": "1197705889",
        "commented_code": "@@ -49,8 +50,16 @@ export const codePlugin: EcosystemPlugin = {\n       // cloneDeep is used so the sarif is not changed when using the testResults getting the displayed output\n       const sarifTypedResult = cloneDeep(testResults?.analysisResults?.sarif);",
        "comment_created_at": "2023-05-18T11:26:20+00:00",
        "comment_author": "vasser",
        "comment_body": "nit. This is called typed, but actually has type of `any`.\r\nWanted to check the shape of sarif results, because constructions like `sarifTypedResult.runs?.[0].results` look a bit too complex for a comprehension \ud83d\ude2c ",
        "pr_file_module": null
      },
      {
        "comment_id": "1197749668",
        "repo_full_name": "snyk/cli",
        "pr_number": 4603,
        "pr_file": "src/lib/plugins/sast/index.ts",
        "discussion_id": "1197705889",
        "commented_code": "@@ -49,8 +50,16 @@ export const codePlugin: EcosystemPlugin = {\n       // cloneDeep is used so the sarif is not changed when using the testResults getting the displayed output\n       const sarifTypedResult = cloneDeep(testResults?.analysisResults?.sarif);",
        "comment_created_at": "2023-05-18T12:21:03+00:00",
        "comment_author": "novalex",
        "comment_body": "Good catch, will add the proper type \ud83d\udc4c \r\nAs for the shape, it's the basic Sarif format you can see [here](https://github.com/microsoft/sarif-tutorials/blob/main/docs/2-Basics.md#results). Not the most readable for sure \ud83d\ude05 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1197828820",
        "repo_full_name": "snyk/cli",
        "pr_number": 4603,
        "pr_file": "src/lib/plugins/sast/index.ts",
        "discussion_id": "1197705889",
        "commented_code": "@@ -49,8 +50,16 @@ export const codePlugin: EcosystemPlugin = {\n       // cloneDeep is used so the sarif is not changed when using the testResults getting the displayed output\n       const sarifTypedResult = cloneDeep(testResults?.analysisResults?.sarif);",
        "comment_created_at": "2023-05-18T13:28:28+00:00",
        "comment_author": "novalex",
        "comment_body": "Changed, types added and a new variable for the inner run results to hopefully improve readability.",
        "pr_file_module": null
      },
      {
        "comment_id": "1197837954",
        "repo_full_name": "snyk/cli",
        "pr_number": 4603,
        "pr_file": "src/lib/plugins/sast/index.ts",
        "discussion_id": "1197705889",
        "commented_code": "@@ -49,8 +50,16 @@ export const codePlugin: EcosystemPlugin = {\n       // cloneDeep is used so the sarif is not changed when using the testResults getting the displayed output\n       const sarifTypedResult = cloneDeep(testResults?.analysisResults?.sarif);",
        "comment_created_at": "2023-05-18T13:34:27+00:00",
        "comment_author": "vasser",
        "comment_body": "Looks great, just more 1 comment on moving filter function",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1024900826",
    "pr_number": 4210,
    "pr_file": "src/lib/formatters/test/format-test-results.ts",
    "created_at": "2022-11-17T08:45:29+00:00",
    "commented_code": ")\n       : [];\n \n+  const licenseBySeverityText = `${Object.keys(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1024900826",
        "repo_full_name": "snyk/cli",
        "pr_number": 4210,
        "pr_file": "src/lib/formatters/test/format-test-results.ts",
        "discussion_id": "1024900826",
        "commented_code": "@@ -221,12 +233,70 @@ export function getDisplayedOutput(\n         )\n       : [];\n \n+  const licenseBySeverityText = `${Object.keys(",
        "comment_created_at": "2022-11-17T08:45:29+00:00",
        "comment_author": "dekelund",
        "comment_body": "It feels a bit strange use of backticks here (line 236, 248 and line 254), at least it's hard to follow where strings start and end.",
        "pr_file_module": null
      },
      {
        "comment_id": "1024903085",
        "repo_full_name": "snyk/cli",
        "pr_number": 4210,
        "pr_file": "src/lib/formatters/test/format-test-results.ts",
        "discussion_id": "1024900826",
        "commented_code": "@@ -221,12 +233,70 @@ export function getDisplayedOutput(\n         )\n       : [];\n \n+  const licenseBySeverityText = `${Object.keys(",
        "comment_created_at": "2022-11-17T08:47:51+00:00",
        "comment_author": "dekelund",
        "comment_body": "ah it's also in line 250. as I said it's hard to follow",
        "pr_file_module": null
      },
      {
        "comment_id": "1024967511",
        "repo_full_name": "snyk/cli",
        "pr_number": 4210,
        "pr_file": "src/lib/formatters/test/format-test-results.ts",
        "discussion_id": "1024900826",
        "commented_code": "@@ -221,12 +233,70 @@ export function getDisplayedOutput(\n         )\n       : [];\n \n+  const licenseBySeverityText = `${Object.keys(",
        "comment_created_at": "2022-11-17T09:48:22+00:00",
        "comment_author": "dagrest",
        "comment_body": "It's ok since that it\u2019s within a ${}-expression",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "808188669",
    "pr_number": 2702,
    "pr_file": "src/cli/commands/test/index.ts",
    "created_at": "2022-02-16T16:20:52+00:00",
    "commented_code": "packageJsonPathsWithSnykDepForProtect,\n   );\n \n+  if (options.iac && options.report && !options.legacy) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "808188669",
        "repo_full_name": "snyk/cli",
        "pr_number": 2702,
        "pr_file": "src/cli/commands/test/index.ts",
        "discussion_id": "808188669",
        "commented_code": "@@ -310,6 +320,13 @@ export default async function test(\n     packageJsonPathsWithSnykDepForProtect,\n   );\n \n+  if (options.iac && options.report && !options.legacy) {",
        "comment_created_at": "2022-02-16T16:20:52+00:00",
        "comment_author": "ofekatr",
        "comment_body": "nit: it seems this condition is used more than once and consists of 3 flags.\r\nCould we please extract it to a boolean function here?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "614703484",
    "pr_number": 1820,
    "pr_file": "packages/snyk-fix/src/lib/issues/fixable-issues.ts",
    "created_at": "2021-04-16T09:36:41+00:00",
    "commented_code": "+import { DependencyPins, DependencyUpdates, TestResult } from '../../types';\n+\n+export function hasFixableIssues(\n+  results: TestResult[],\n+): {\n+  hasFixes: boolean;\n+  count: number;\n+} {\n+  let hasFixes = false;\n+  let count = 0;\n+  for (const result of Object.values(results)) {\n+    const { remediation } = result;\n+    if (remediation) {\n+      const { upgrade, pin, patch } = remediation;\n+      const upgrades = Object.keys(upgrade);\n+      const pins = Object.keys(pin);\n+      if (pins.length || upgrades.length) {\n+        hasFixes = true;\n+        // pins & upgrades are mutually exclusive\n+        count += getUpgradableIssues(pins.length ? pin : upgrade);\n+      }\n+      if (Object.keys(patch).length) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "614703484",
        "repo_full_name": "snyk/cli",
        "pr_number": 1820,
        "pr_file": "packages/snyk-fix/src/lib/issues/fixable-issues.ts",
        "discussion_id": "614703484",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { DependencyPins, DependencyUpdates, TestResult } from '../../types';\n+\n+export function hasFixableIssues(\n+  results: TestResult[],\n+): {\n+  hasFixes: boolean;\n+  count: number;\n+} {\n+  let hasFixes = false;\n+  let count = 0;\n+  for (const result of Object.values(results)) {\n+    const { remediation } = result;\n+    if (remediation) {\n+      const { upgrade, pin, patch } = remediation;\n+      const upgrades = Object.keys(upgrade);\n+      const pins = Object.keys(pin);\n+      if (pins.length || upgrades.length) {\n+        hasFixes = true;\n+        // pins & upgrades are mutually exclusive\n+        count += getUpgradableIssues(pins.length ? pin : upgrade);\n+      }\n+      if (Object.keys(patch).length) {",
        "comment_created_at": "2021-04-16T09:36:41+00:00",
        "comment_author": "aarlaud",
        "comment_body": "shouldn't we do the same as for pins and upgrades here? const patches = Object.keys(patch) etc so it's consistent?",
        "pr_file_module": null
      },
      {
        "comment_id": "614709990",
        "repo_full_name": "snyk/cli",
        "pr_number": 1820,
        "pr_file": "packages/snyk-fix/src/lib/issues/fixable-issues.ts",
        "discussion_id": "614703484",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { DependencyPins, DependencyUpdates, TestResult } from '../../types';\n+\n+export function hasFixableIssues(\n+  results: TestResult[],\n+): {\n+  hasFixes: boolean;\n+  count: number;\n+} {\n+  let hasFixes = false;\n+  let count = 0;\n+  for (const result of Object.values(results)) {\n+    const { remediation } = result;\n+    if (remediation) {\n+      const { upgrade, pin, patch } = remediation;\n+      const upgrades = Object.keys(upgrade);\n+      const pins = Object.keys(pin);\n+      if (pins.length || upgrades.length) {\n+        hasFixes = true;\n+        // pins & upgrades are mutually exclusive\n+        count += getUpgradableIssues(pins.length ? pin : upgrade);\n+      }\n+      if (Object.keys(patch).length) {",
        "comment_created_at": "2021-04-16T09:46:56+00:00",
        "comment_author": "lili2311",
        "comment_body": "good catch",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1642696150",
    "pr_number": 5172,
    "pr_file": "test/jest/acceptance/snyk-code/snyk-code.spec.ts",
    "created_at": "2024-06-17T11:55:15+00:00",
    "commented_code": "SNYK_TOKEN: '123456789',\n   };\n \n-  beforeAll((done) => {\n+  beforeAll(async () => {\n+    const cb = () => {\n+      return;\n+    };\n+\n     deepCodeServer = fakeDeepCodeServer();\n-    deepCodeServer.listen(() => {});\n+    deepCodeServer.listen(cb);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1642696150",
        "repo_full_name": "snyk/cli",
        "pr_number": 5172,
        "pr_file": "test/jest/acceptance/snyk-code/snyk-code.spec.ts",
        "discussion_id": "1642696150",
        "commented_code": "@@ -23,29 +27,37 @@ describe('code', () => {\n     SNYK_TOKEN: '123456789',\n   };\n \n-  beforeAll((done) => {\n+  beforeAll(async () => {\n+    const cb = () => {\n+      return;\n+    };\n+\n     deepCodeServer = fakeDeepCodeServer();\n-    deepCodeServer.listen(() => {});\n+    deepCodeServer.listen(cb);",
        "comment_created_at": "2024-06-17T11:55:15+00:00",
        "comment_author": "j-luong",
        "comment_body": "suggestion: I think we should undo this refactor, it is generally not recommended to mix async and callback syntax like this.\r\n\r\nIf you wanted to change `beforeAll()` to use async syntax, then it is better to wrap `deepCodeServer.listen()` in `util.promisify()` instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1688050014",
    "pr_number": 5369,
    "pr_file": "ts-binary-wrapper/src/common.ts",
    "created_at": "2024-07-23T13:18:05+00:00",
    "commented_code": "}\n \n   public getDownloadLocation(): string {\n-    const baseUrl = 'https://static.snyk.io/cli/v';\n-    return baseUrl + this.version + '/' + this.binaryName;\n+    const baseUrl = 'https://downloads.snyk.io/cli';\n+\n+    return this.buildDownloadUrl(baseUrl);\n+  }\n+\n+  public getBackupDownloadLocation(): string {\n+    const baseUrl = 'https://static.snyk.io/cli';\n+\n+    return this.buildDownloadUrl(baseUrl);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1688050014",
        "repo_full_name": "snyk/cli",
        "pr_number": 5369,
        "pr_file": "ts-binary-wrapper/src/common.ts",
        "discussion_id": "1688050014",
        "commented_code": "@@ -46,8 +50,15 @@ export class WrapperConfiguration {\n   }\n \n   public getDownloadLocation(): string {\n-    const baseUrl = 'https://static.snyk.io/cli/v';\n-    return baseUrl + this.version + '/' + this.binaryName;\n+    const baseUrl = 'https://downloads.snyk.io/cli';\n+\n+    return this.buildDownloadUrl(baseUrl);\n+  }\n+\n+  public getBackupDownloadLocation(): string {\n+    const baseUrl = 'https://static.snyk.io/cli';\n+\n+    return this.buildDownloadUrl(baseUrl);",
        "comment_created_at": "2024-07-23T13:18:05+00:00",
        "comment_author": "j-luong",
        "comment_body": "question: would\r\n```\r\npublic getDownloadLocation(baseUrl = 'https://downloads.snyk.io/cli'): string {\r\n    return baseUrl + this.version + '/' + this.binaryName;\r\n  }\r\n```\r\n\r\nbe cleaner? `getDownloadLocation()` and `getBackupDownloadLocation()` are more or less identical and we could get rid of `buildDownloadUrl()` if we just update `getDownloadLocation()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1114163789",
    "pr_number": 4423,
    "pr_file": "ts-binary-wrapper/src/index.ts",
    "created_at": "2023-02-22T10:55:25+00:00",
    "commented_code": "import { argv } from 'process';\n import * as common from './common';\n+import * as fs from 'fs';\n+import * as path from 'path';\n \n-const config = common.getCurrentConfiguration();\n-const executable = config.getLocalLocation();\n-const cliArguments = common.getCliArguments(argv);\n-const exitCode = common.runWrapper(executable, cliArguments);\n-process.exit(exitCode);\n+const errorContextMessage = 'Runtime Error';\n+const fallbackScript = path.join(__dirname, '..', 'dist', 'cli', 'index.js');\n+\n+function run(executable: string): number {\n+  let cliArguments = common.getCliArguments(argv);\n+\n+  if (executable.endsWith('.js')) {\n+    cliArguments = [executable].concat(cliArguments);\n+    executable = argv[0]; // node runtime\n+  }\n+\n+  const exitCode = common.runWrapper(executable, cliArguments);\n+  return exitCode;\n+}\n+\n+(async () => {\n+  let fallbackToLegacyCLI = argv.includes('--legacy-cli');\n+\n+  if (fallbackToLegacyCLI == false) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1114163789",
        "repo_full_name": "snyk/cli",
        "pr_number": 4423,
        "pr_file": "ts-binary-wrapper/src/index.ts",
        "discussion_id": "1114163789",
        "commented_code": "@@ -2,9 +2,65 @@\n \n import { argv } from 'process';\n import * as common from './common';\n+import * as fs from 'fs';\n+import * as path from 'path';\n \n-const config = common.getCurrentConfiguration();\n-const executable = config.getLocalLocation();\n-const cliArguments = common.getCliArguments(argv);\n-const exitCode = common.runWrapper(executable, cliArguments);\n-process.exit(exitCode);\n+const errorContextMessage = 'Runtime Error';\n+const fallbackScript = path.join(__dirname, '..', 'dist', 'cli', 'index.js');\n+\n+function run(executable: string): number {\n+  let cliArguments = common.getCliArguments(argv);\n+\n+  if (executable.endsWith('.js')) {\n+    cliArguments = [executable].concat(cliArguments);\n+    executable = argv[0]; // node runtime\n+  }\n+\n+  const exitCode = common.runWrapper(executable, cliArguments);\n+  return exitCode;\n+}\n+\n+(async () => {\n+  let fallbackToLegacyCLI = argv.includes('--legacy-cli');\n+\n+  if (fallbackToLegacyCLI == false) {",
        "comment_created_at": "2023-02-22T10:55:25+00:00",
        "comment_author": "j-luong",
        "comment_body": "todo: In JS, best practice is to use strict equality `===` for comparisons rather than standard `==` equality. \r\n\r\n`==` will try to perform type coercion so `false == 0` resolves `true` vs `false === 0` resolves `false`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "982425691",
    "pr_number": 3851,
    "pr_file": "src/lib/formatters/test/display-result.ts",
    "created_at": "2022-09-28T13:43:28+00:00",
    "commented_code": ");\n   const multiProjAdvice = multiProjectTip ? `\n\n${multiProjectTip}` : '';\n \n+  const hasUnknownVersions = res.hasUnknownVersions\n+    ? `\n\n${chalk.yellow(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "982425691",
        "repo_full_name": "snyk/cli",
        "pr_number": 3851,
        "pr_file": "src/lib/formatters/test/display-result.ts",
        "discussion_id": "982425691",
        "commented_code": "@@ -66,6 +66,12 @@ export function displayResult(\n   );\n   const multiProjAdvice = multiProjectTip ? `\\n\\n${multiProjectTip}` : '';\n \n+  const hasUnknownVersions = res.hasUnknownVersions\n+    ? `\\n\\n${chalk.yellow(",
        "comment_created_at": "2022-09-28T13:43:28+00:00",
        "comment_author": "JackuB",
        "comment_body": "I'd recommend using the theme file instead of the chalk library directly. There is already a `warn` helper https://github.com/snyk/cli/blob/2831b80c9f39ff881a35e2d30640a5fcd3dd91fc/src/lib/theme.ts#L14",
        "pr_file_module": null
      },
      {
        "comment_id": "982426271",
        "repo_full_name": "snyk/cli",
        "pr_number": 3851,
        "pr_file": "src/lib/formatters/test/display-result.ts",
        "discussion_id": "982425691",
        "commented_code": "@@ -66,6 +66,12 @@ export function displayResult(\n   );\n   const multiProjAdvice = multiProjectTip ? `\\n\\n${multiProjectTip}` : '';\n \n+  const hasUnknownVersions = res.hasUnknownVersions\n+    ? `\\n\\n${chalk.yellow(",
        "comment_created_at": "2022-09-28T13:43:55+00:00",
        "comment_author": "JackuB",
        "comment_body": "DItto for errors a file lines below in this PR",
        "pr_file_module": null
      },
      {
        "comment_id": "982432355",
        "repo_full_name": "snyk/cli",
        "pr_number": 3851,
        "pr_file": "src/lib/formatters/test/display-result.ts",
        "discussion_id": "982425691",
        "commented_code": "@@ -66,6 +66,12 @@ export function displayResult(\n   );\n   const multiProjAdvice = multiProjectTip ? `\\n\\n${multiProjectTip}` : '';\n \n+  const hasUnknownVersions = res.hasUnknownVersions\n+    ? `\\n\\n${chalk.yellow(",
        "comment_created_at": "2022-09-28T13:48:54+00:00",
        "comment_author": "gitphill",
        "comment_body": "ah yea good idea, we will do that thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "958111405",
    "pr_number": 3629,
    "pr_file": "test/jest/unit/lib/formatters/iac-output/text/issues-list/index.spec.ts",
    "created_at": "2022-08-30T07:35:42+00:00",
    "commented_code": "// Assert\n     expect(result).toContain(\n       `  ${colors.severities.low(\n-        `[Low] ${chalk.bold('Container is running without AppArmor profile')}`,\n+        `[Low] ${chalk.bold('EC2 API termination protection is not enabled')}`,\n       )}\n-  Info:    The AppArmor profile is not set correctly. AppArmor will not enforce mandatory access control, which can increase the attack vectors.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-32')}\n-  Path:    [DocId: 0] > metadata > annotations['container.apparmor.security.beta.kubernetes.io/web']\n-  File:    k8s.yaml\n-  Resolve: Add \\`container.apparmor.security.beta.kubernetes.io/<container-name>\\` annotation with value \\`runtime/default\\` or \\`localhost/<name-of-profile\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without memory limit')}`,\n-  )}\n-  Info:    Memory limit is not defined. Containers without memory limits are more likely to be terminated when the node runs out of memory\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-4')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > memory\n-  File:    k8s.yaml\n-  Resolve: Set \\`resources.limits.memory\\` value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container could be running with outdated image')}`,\n-  )}\n-  Info:    The image policy does not prevent image reuse. The container may run with outdated or unauthorized image\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-42')}\n-  Path:    [DocId: 0] > spec > template > spec > containers[web] > imagePullPolicy\n-  File:    k8s.yaml\n-  Resolve: Set \\`imagePullPolicy\\` attribute to \\`Always\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without cpu limit')}`,\n-  )}\n-  Info:    CPU limit is not defined. Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-5')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > cpu\n-  File:    k8s.yaml\n-  Resolve: Add \\`resources.limits.cpu\\` field with required CPU limit value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running with writable root filesystem')}`,\n-  )}\n-  Info:    \\`readOnlyRootFilesystem\\` attribute is not set to \\`true\\`. Compromised process could abuse writable root filesystem to elevate privileges\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-8')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > securityContext > readOnlyRootFilesystem\n-  File:    k8s.yaml\n-  Resolve: Set \\`securityContext.readOnlyRootFilesystem\\` to \\`true\\``,\n+  Info:    To prevent instance from being accidentally terminated using Amazon E",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "958111405",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "test/jest/unit/lib/formatters/iac-output/text/issues-list/index.spec.ts",
        "discussion_id": "958111405",
        "commented_code": "@@ -49,98 +60,83 @@ describe('getIacDisplayedIssues', () => {\n     // Assert\n     expect(result).toContain(\n       `  ${colors.severities.low(\n-        `[Low] ${chalk.bold('Container is running without AppArmor profile')}`,\n+        `[Low] ${chalk.bold('EC2 API termination protection is not enabled')}`,\n       )}\n-  Info:    The AppArmor profile is not set correctly. AppArmor will not enforce mandatory access control, which can increase the attack vectors.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-32')}\n-  Path:    [DocId: 0] > metadata > annotations['container.apparmor.security.beta.kubernetes.io/web']\n-  File:    k8s.yaml\n-  Resolve: Add \\`container.apparmor.security.beta.kubernetes.io/<container-name>\\` annotation with value \\`runtime/default\\` or \\`localhost/<name-of-profile\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without memory limit')}`,\n-  )}\n-  Info:    Memory limit is not defined. Containers without memory limits are more likely to be terminated when the node runs out of memory\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-4')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > memory\n-  File:    k8s.yaml\n-  Resolve: Set \\`resources.limits.memory\\` value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container could be running with outdated image')}`,\n-  )}\n-  Info:    The image policy does not prevent image reuse. The container may run with outdated or unauthorized image\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-42')}\n-  Path:    [DocId: 0] > spec > template > spec > containers[web] > imagePullPolicy\n-  File:    k8s.yaml\n-  Resolve: Set \\`imagePullPolicy\\` attribute to \\`Always\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without cpu limit')}`,\n-  )}\n-  Info:    CPU limit is not defined. Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-5')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > cpu\n-  File:    k8s.yaml\n-  Resolve: Add \\`resources.limits.cpu\\` field with required CPU limit value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running with writable root filesystem')}`,\n-  )}\n-  Info:    \\`readOnlyRootFilesystem\\` attribute is not set to \\`true\\`. Compromised process could abuse writable root filesystem to elevate privileges\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-8')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > securityContext > readOnlyRootFilesystem\n-  File:    k8s.yaml\n-  Resolve: Set \\`securityContext.readOnlyRootFilesystem\\` to \\`true\\``,\n+  Info:    To prevent instance from being accidentally terminated using Amazon E",
        "comment_created_at": "2022-08-30T07:35:42+00:00",
        "comment_author": "francescomari",
        "comment_body": "Is the output truncated at the configured or detected line width, regardless of whether the break occurs in the middle of a word? I think we should be a bit more sophisticated here. We should break the line at the word delimiters (spaces), in such a way that the line never exceeds the maximum line width.",
        "pr_file_module": null
      },
      {
        "comment_id": "958118170",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "test/jest/unit/lib/formatters/iac-output/text/issues-list/index.spec.ts",
        "discussion_id": "958111405",
        "commented_code": "@@ -49,98 +60,83 @@ describe('getIacDisplayedIssues', () => {\n     // Assert\n     expect(result).toContain(\n       `  ${colors.severities.low(\n-        `[Low] ${chalk.bold('Container is running without AppArmor profile')}`,\n+        `[Low] ${chalk.bold('EC2 API termination protection is not enabled')}`,\n       )}\n-  Info:    The AppArmor profile is not set correctly. AppArmor will not enforce mandatory access control, which can increase the attack vectors.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-32')}\n-  Path:    [DocId: 0] > metadata > annotations['container.apparmor.security.beta.kubernetes.io/web']\n-  File:    k8s.yaml\n-  Resolve: Add \\`container.apparmor.security.beta.kubernetes.io/<container-name>\\` annotation with value \\`runtime/default\\` or \\`localhost/<name-of-profile\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without memory limit')}`,\n-  )}\n-  Info:    Memory limit is not defined. Containers without memory limits are more likely to be terminated when the node runs out of memory\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-4')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > memory\n-  File:    k8s.yaml\n-  Resolve: Set \\`resources.limits.memory\\` value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container could be running with outdated image')}`,\n-  )}\n-  Info:    The image policy does not prevent image reuse. The container may run with outdated or unauthorized image\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-42')}\n-  Path:    [DocId: 0] > spec > template > spec > containers[web] > imagePullPolicy\n-  File:    k8s.yaml\n-  Resolve: Set \\`imagePullPolicy\\` attribute to \\`Always\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without cpu limit')}`,\n-  )}\n-  Info:    CPU limit is not defined. Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-5')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > cpu\n-  File:    k8s.yaml\n-  Resolve: Add \\`resources.limits.cpu\\` field with required CPU limit value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running with writable root filesystem')}`,\n-  )}\n-  Info:    \\`readOnlyRootFilesystem\\` attribute is not set to \\`true\\`. Compromised process could abuse writable root filesystem to elevate privileges\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-8')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > securityContext > readOnlyRootFilesystem\n-  File:    k8s.yaml\n-  Resolve: Set \\`securityContext.readOnlyRootFilesystem\\` to \\`true\\``,\n+  Info:    To prevent instance from being accidentally terminated using Amazon E",
        "comment_created_at": "2022-08-30T07:42:51+00:00",
        "comment_author": "ofekatr",
        "comment_body": "@francescomari good point, I'll give it a swing and add it to a new commit",
        "pr_file_module": null
      },
      {
        "comment_id": "958124609",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "test/jest/unit/lib/formatters/iac-output/text/issues-list/index.spec.ts",
        "discussion_id": "958111405",
        "commented_code": "@@ -49,98 +60,83 @@ describe('getIacDisplayedIssues', () => {\n     // Assert\n     expect(result).toContain(\n       `  ${colors.severities.low(\n-        `[Low] ${chalk.bold('Container is running without AppArmor profile')}`,\n+        `[Low] ${chalk.bold('EC2 API termination protection is not enabled')}`,\n       )}\n-  Info:    The AppArmor profile is not set correctly. AppArmor will not enforce mandatory access control, which can increase the attack vectors.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-32')}\n-  Path:    [DocId: 0] > metadata > annotations['container.apparmor.security.beta.kubernetes.io/web']\n-  File:    k8s.yaml\n-  Resolve: Add \\`container.apparmor.security.beta.kubernetes.io/<container-name>\\` annotation with value \\`runtime/default\\` or \\`localhost/<name-of-profile\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without memory limit')}`,\n-  )}\n-  Info:    Memory limit is not defined. Containers without memory limits are more likely to be terminated when the node runs out of memory\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-4')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > memory\n-  File:    k8s.yaml\n-  Resolve: Set \\`resources.limits.memory\\` value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container could be running with outdated image')}`,\n-  )}\n-  Info:    The image policy does not prevent image reuse. The container may run with outdated or unauthorized image\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-42')}\n-  Path:    [DocId: 0] > spec > template > spec > containers[web] > imagePullPolicy\n-  File:    k8s.yaml\n-  Resolve: Set \\`imagePullPolicy\\` attribute to \\`Always\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without cpu limit')}`,\n-  )}\n-  Info:    CPU limit is not defined. Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-5')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > cpu\n-  File:    k8s.yaml\n-  Resolve: Add \\`resources.limits.cpu\\` field with required CPU limit value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running with writable root filesystem')}`,\n-  )}\n-  Info:    \\`readOnlyRootFilesystem\\` attribute is not set to \\`true\\`. Compromised process could abuse writable root filesystem to elevate privileges\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-8')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > securityContext > readOnlyRootFilesystem\n-  File:    k8s.yaml\n-  Resolve: Set \\`securityContext.readOnlyRootFilesystem\\` to \\`true\\``,\n+  Info:    To prevent instance from being accidentally terminated using Amazon E",
        "comment_created_at": "2022-08-30T07:49:12+00:00",
        "comment_author": "francescomari",
        "comment_body": "@ofekatr I've just realised that the CLI has a dependency on [wrap-ansi](https://www.npmjs.com/package/wrap-ansi), which should help with this.",
        "pr_file_module": null
      },
      {
        "comment_id": "958369752",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "test/jest/unit/lib/formatters/iac-output/text/issues-list/index.spec.ts",
        "discussion_id": "958111405",
        "commented_code": "@@ -49,98 +60,83 @@ describe('getIacDisplayedIssues', () => {\n     // Assert\n     expect(result).toContain(\n       `  ${colors.severities.low(\n-        `[Low] ${chalk.bold('Container is running without AppArmor profile')}`,\n+        `[Low] ${chalk.bold('EC2 API termination protection is not enabled')}`,\n       )}\n-  Info:    The AppArmor profile is not set correctly. AppArmor will not enforce mandatory access control, which can increase the attack vectors.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-32')}\n-  Path:    [DocId: 0] > metadata > annotations['container.apparmor.security.beta.kubernetes.io/web']\n-  File:    k8s.yaml\n-  Resolve: Add \\`container.apparmor.security.beta.kubernetes.io/<container-name>\\` annotation with value \\`runtime/default\\` or \\`localhost/<name-of-profile\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without memory limit')}`,\n-  )}\n-  Info:    Memory limit is not defined. Containers without memory limits are more likely to be terminated when the node runs out of memory\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-4')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > memory\n-  File:    k8s.yaml\n-  Resolve: Set \\`resources.limits.memory\\` value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container could be running with outdated image')}`,\n-  )}\n-  Info:    The image policy does not prevent image reuse. The container may run with outdated or unauthorized image\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-42')}\n-  Path:    [DocId: 0] > spec > template > spec > containers[web] > imagePullPolicy\n-  File:    k8s.yaml\n-  Resolve: Set \\`imagePullPolicy\\` attribute to \\`Always\\`\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running without cpu limit')}`,\n-  )}\n-  Info:    CPU limit is not defined. Containers without limits can exceed the capacity of the node, and affect availability/performance of the host and other containers.\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-5')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > resources > limits > cpu\n-  File:    k8s.yaml\n-  Resolve: Add \\`resources.limits.cpu\\` field with required CPU limit value\n-\n-  ${colors.severities.low(\n-    `[Low] ${chalk.bold('Container is running with writable root filesystem')}`,\n-  )}\n-  Info:    \\`readOnlyRootFilesystem\\` attribute is not set to \\`true\\`. Compromised process could abuse writable root filesystem to elevate privileges\n-  Rule:    ${chalk.underline('https://snyk.io/security-rules/SNYK-CC-K8S-8')}\n-  Path:    [DocId: 0] > input > spec > template > spec > containers[web] > securityContext > readOnlyRootFilesystem\n-  File:    k8s.yaml\n-  Resolve: Set \\`securityContext.readOnlyRootFilesystem\\` to \\`true\\``,\n+  Info:    To prevent instance from being accidentally terminated using Amazon E",
        "comment_created_at": "2022-08-30T11:41:00+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Introduced in [`72eeab904`](https://github.com/snyk/cli/commit/72eeab9046fa0f5319d5e4ef8d0f2539093644a0)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "958128556",
    "pr_number": 3629,
    "pr_file": "src/lib/formatters/iac-output/text/utils.ts",
    "created_at": "2022-08-30T07:53:02+00:00",
    "commented_code": "};\n \n export const contentPadding = ' '.repeat(2);\n+\n+export const maxLineWidth = process.stdout.isTTY ? process.stdout.columns : 80;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "958128556",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "src/lib/formatters/iac-output/text/utils.ts",
        "discussion_id": "958128556",
        "commented_code": "@@ -29,3 +29,5 @@ export const colors: IacOutputColors = {\n };\n \n export const contentPadding = ' '.repeat(2);\n+\n+export const maxLineWidth = process.stdout.isTTY ? process.stdout.columns : 80;",
        "comment_created_at": "2022-08-30T07:53:02+00:00",
        "comment_author": "francescomari",
        "comment_body": "I would cap the maximum line width at 80 column, even if it is possible to detect. If I open the terminal on a very big screen, this would generate very long lines, which are difficult to read. Probably we would need a hint from UX here.",
        "pr_file_module": null
      },
      {
        "comment_id": "958198000",
        "repo_full_name": "snyk/cli",
        "pr_number": 3629,
        "pr_file": "src/lib/formatters/iac-output/text/utils.ts",
        "discussion_id": "958128556",
        "commented_code": "@@ -29,3 +29,5 @@ export const colors: IacOutputColors = {\n };\n \n export const contentPadding = ' '.repeat(2);\n+\n+export const maxLineWidth = process.stdout.isTTY ? process.stdout.columns : 80;",
        "comment_created_at": "2022-08-30T08:51:24+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Introduced in [`72eeab904`](https://github.com/snyk/cli/commit/72eeab9046fa0f5319d5e4ef8d0f2539093644a0)",
        "pr_file_module": null
      }
    ]
  }
]