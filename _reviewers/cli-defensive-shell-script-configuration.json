[
  {
    "discussion_id": "1102692155",
    "pr_number": 4395,
    "pr_file": "test/smoke/docker-root/entrypoint.sh",
    "created_at": "2023-02-10T12:12:32+00:00",
    "commented_code": "set -e\n \n-echo \"Install Snyk CLI with npm\"\n+echo \"> npm version\"",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1102692155",
        "repo_full_name": "snyk/cli",
        "pr_number": 4395,
        "pr_file": "test/smoke/docker-root/entrypoint.sh",
        "discussion_id": "1102692155",
        "commented_code": "@@ -2,8 +2,16 @@\n \n set -e\n \n-echo \"Install Snyk CLI with npm\"\n+echo \"> npm version\"",
        "comment_created_at": "2023-02-10T12:12:32+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "mach doch einfach ein `set -ex` wenn du die kommandos mit ausgegeben haben willst :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1517609210",
    "pr_number": 5096,
    "pr_file": "release-scripts/next-version.sh",
    "created_at": "2024-03-08T11:39:42+00:00",
    "commented_code": "RELEASE_BRANCH=\"main\"\n NEXT_VERSION=\"$(convco version --bump)\"\n CURRENT_TAG=\"$(git describe --tags `git rev-list --tags --max-count=1`)\"\n+RELEASE_CHANNEL=\"$($(dirname \"$0\")/determine-release-channel.sh)\"\n \n-if [ \"${CIRCLE_BRANCH:-}\" != \"${RELEASE_BRANCH}\" ]; then\n-    NEXT_VERSION=\"${NEXT_VERSION}-dev.$(git rev-parse HEAD)\"\n+valid_version_postfixes=(\"preview\" \"rc\")\n+postfix=\"\"\n+\n+if [ \"$RELEASE_CHANNEL\" != \"\" ]; then\n+  # Check if the input string is in the list of valid strings\n+  for valid_str in \"${valid_version_postfixes[@]}\"; do\n+    if [ \"$RELEASE_CHANNEL\" == \"$valid_str\" ]; then\n+        postfix=\"-$RELEASE_CHANNEL\"\n+        break\n+    fi\n+  done\n+fi\n+\n+if [ \"$RELEASE_CHANNEL\" == \"dev\" ]; then",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1517609210",
        "repo_full_name": "snyk/cli",
        "pr_number": 5096,
        "pr_file": "release-scripts/next-version.sh",
        "discussion_id": "1517609210",
        "commented_code": "@@ -6,11 +6,27 @@ set -euo pipefail\n RELEASE_BRANCH=\"main\"\n NEXT_VERSION=\"$(convco version --bump)\"\n CURRENT_TAG=\"$(git describe --tags `git rev-list --tags --max-count=1`)\"\n+RELEASE_CHANNEL=\"$($(dirname \"$0\")/determine-release-channel.sh)\"\n \n-if [ \"${CIRCLE_BRANCH:-}\" != \"${RELEASE_BRANCH}\" ]; then\n-    NEXT_VERSION=\"${NEXT_VERSION}-dev.$(git rev-parse HEAD)\"\n+valid_version_postfixes=(\"preview\" \"rc\")\n+postfix=\"\"\n+\n+if [ \"$RELEASE_CHANNEL\" != \"\" ]; then\n+  # Check if the input string is in the list of valid strings\n+  for valid_str in \"${valid_version_postfixes[@]}\"; do\n+    if [ \"$RELEASE_CHANNEL\" == \"$valid_str\" ]; then\n+        postfix=\"-$RELEASE_CHANNEL\"\n+        break\n+    fi\n+  done\n+fi\n+\n+if [ \"$RELEASE_CHANNEL\" == \"dev\" ]; then",
        "comment_created_at": "2024-03-08T11:39:42+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "**Question:** Do we want `postfix=\"-dev.$(git rev-parse HEAD)\"` to be default value here?\r\n\r\nThere is some coupling between the logic in `determine-release-channel.sh` and what we do in `next-version.sh` and I wonder if we could make that more safer through additional documentation or more defensive behaviour by defaulting to dev postfix and opting into stable releases **only** on an exact match. \r\n\r\nExample header comment for `determine-release-channel.sh`\r\n```bash\r\n# This script determines the appropriate release channel for a project based on \r\n# the current Git branch. The script should always return a string value that\r\n# matches one of the supported channels.\r\n# \r\n# The following release channels are supported:\r\n# - stable\r\n# - rc\r\n# - preview\r\n# - dev\r\n\r\n\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1517780063",
        "repo_full_name": "snyk/cli",
        "pr_number": 5096,
        "pr_file": "release-scripts/next-version.sh",
        "discussion_id": "1517609210",
        "commented_code": "@@ -6,11 +6,27 @@ set -euo pipefail\n RELEASE_BRANCH=\"main\"\n NEXT_VERSION=\"$(convco version --bump)\"\n CURRENT_TAG=\"$(git describe --tags `git rev-list --tags --max-count=1`)\"\n+RELEASE_CHANNEL=\"$($(dirname \"$0\")/determine-release-channel.sh)\"\n \n-if [ \"${CIRCLE_BRANCH:-}\" != \"${RELEASE_BRANCH}\" ]; then\n-    NEXT_VERSION=\"${NEXT_VERSION}-dev.$(git rev-parse HEAD)\"\n+valid_version_postfixes=(\"preview\" \"rc\")\n+postfix=\"\"\n+\n+if [ \"$RELEASE_CHANNEL\" != \"\" ]; then\n+  # Check if the input string is in the list of valid strings\n+  for valid_str in \"${valid_version_postfixes[@]}\"; do\n+    if [ \"$RELEASE_CHANNEL\" == \"$valid_str\" ]; then\n+        postfix=\"-$RELEASE_CHANNEL\"\n+        break\n+    fi\n+  done\n+fi\n+\n+if [ \"$RELEASE_CHANNEL\" == \"dev\" ]; then",
        "comment_created_at": "2024-03-08T14:22:28+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Good idea! Thank you! Please take another look!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "332565607",
    "pr_number": 808,
    "pr_file": "docker/docker-python-entrypoint.sh",
    "created_at": "2019-10-08T15:03:32+00:00",
    "commented_code": "#!/bin/bash\n+if [ -f \"${PROJECT_PATH}/requirements.txt\" ]; then\n+    virtualenv -p python snyk\n+    source snyk/bin/activate\n+    pip install -U -r \"${PROJECT_PATH}/requirements.txt\"\n+elif [ -f \"${PROJECT_PATH}/Pipfile\" ]; then\n+    cd \"${PROJECT_PATH}\"",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "332565607",
        "repo_full_name": "snyk/cli",
        "pr_number": 808,
        "pr_file": "docker/docker-python-entrypoint.sh",
        "discussion_id": "332565607",
        "commented_code": "@@ -1,6 +1,12 @@\n #!/bin/bash\n+if [ -f \"${PROJECT_PATH}/requirements.txt\" ]; then\n+    virtualenv -p python snyk\n+    source snyk/bin/activate\n+    pip install -U -r \"${PROJECT_PATH}/requirements.txt\"\n+elif [ -f \"${PROJECT_PATH}/Pipfile\" ]; then\n+    cd \"${PROJECT_PATH}\"",
        "comment_created_at": "2019-10-08T15:03:32+00:00",
        "comment_author": "adrukh",
        "comment_body": "I wonder if this command would change the state of whatever gets executed afterwards. Not sure how to test this with confidence, maybe just install at the full path without `cd`?",
        "pr_file_module": null
      },
      {
        "comment_id": "332569266",
        "repo_full_name": "snyk/cli",
        "pr_number": 808,
        "pr_file": "docker/docker-python-entrypoint.sh",
        "discussion_id": "332565607",
        "commented_code": "@@ -1,6 +1,12 @@\n #!/bin/bash\n+if [ -f \"${PROJECT_PATH}/requirements.txt\" ]; then\n+    virtualenv -p python snyk\n+    source snyk/bin/activate\n+    pip install -U -r \"${PROJECT_PATH}/requirements.txt\"\n+elif [ -f \"${PROJECT_PATH}/Pipfile\" ]; then\n+    cd \"${PROJECT_PATH}\"",
        "comment_created_at": "2019-10-08T15:09:39+00:00",
        "comment_author": "lwywoo",
        "comment_body": "Initially tried to install with full path but was getting:\r\n`\r\n\u2714 Successfully created virtual environment!\r\nVirtualenv location: /home/node/.local/share/virtualenvs/node-lHasYD0_\r\nCreating a Pipfile for this project\u2026\r\nInstalling /project/Pipfile\u2026\r\nWARNING: Invalid requirement, parse error at \"'/project'\"\r\n\u2718 Installation Failed\r\nFailed to run the process ...\r\nFailed to test pip project`\r\n\r\nWill serarch the docs to see if I can find a more efficent way to do this",
        "pr_file_module": null
      },
      {
        "comment_id": "332572494",
        "repo_full_name": "snyk/cli",
        "pr_number": 808,
        "pr_file": "docker/docker-python-entrypoint.sh",
        "discussion_id": "332565607",
        "commented_code": "@@ -1,6 +1,12 @@\n #!/bin/bash\n+if [ -f \"${PROJECT_PATH}/requirements.txt\" ]; then\n+    virtualenv -p python snyk\n+    source snyk/bin/activate\n+    pip install -U -r \"${PROJECT_PATH}/requirements.txt\"\n+elif [ -f \"${PROJECT_PATH}/Pipfile\" ]; then\n+    cd \"${PROJECT_PATH}\"",
        "comment_created_at": "2019-10-08T15:15:03+00:00",
        "comment_author": "adrukh",
        "comment_body": "Thanks! Don\u2019t think this is a \u2018no go\u2019, just worth seeing if we can keep the simplicity",
        "pr_file_module": null
      },
      {
        "comment_id": "332600684",
        "repo_full_name": "snyk/cli",
        "pr_number": 808,
        "pr_file": "docker/docker-python-entrypoint.sh",
        "discussion_id": "332565607",
        "commented_code": "@@ -1,6 +1,12 @@\n #!/bin/bash\n+if [ -f \"${PROJECT_PATH}/requirements.txt\" ]; then\n+    virtualenv -p python snyk\n+    source snyk/bin/activate\n+    pip install -U -r \"${PROJECT_PATH}/requirements.txt\"\n+elif [ -f \"${PROJECT_PATH}/Pipfile\" ]; then\n+    cd \"${PROJECT_PATH}\"",
        "comment_created_at": "2019-10-08T16:05:48+00:00",
        "comment_author": "garethr",
        "comment_body": "To enter the directory, and then return from whence you came, you could replace this with:\r\n\r\n```\r\npushd \"${PROJECT_PATH}\"\r\n```\r\n\r\nThen after running pipenv run `popd`",
        "pr_file_module": null
      }
    ]
  }
]