[
  {
    "discussion_id": "1177650554",
    "pr_number": 4569,
    "pr_file": "src/lib/plugins/sast/format/output-format.ts",
    "created_at": "2023-04-26T10:05:14+00:00",
    "commented_code": "const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,\n ): string {\n   let issues: { [index: string]: string[] } = {};\n \n   const sarif = testResults.analysisResults.sarif;\n   if (sarif.runs[0].results) {\n-    const results: Sarif.Result[] = sarif.runs[0].results;\n+    const results: Sarif.Result[] = shouldFilterIgnored",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1177650554",
        "repo_full_name": "snyk/cli",
        "pr_number": 4569,
        "pr_file": "src/lib/plugins/sast/format/output-format.ts",
        "discussion_id": "1177650554",
        "commented_code": "@@ -10,16 +10,25 @@ import { CodeTestResults } from '../types';\n \n const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,\n ): string {\n   let issues: { [index: string]: string[] } = {};\n \n   const sarif = testResults.analysisResults.sarif;\n   if (sarif.runs[0].results) {\n-    const results: Sarif.Result[] = sarif.runs[0].results;\n+    const results: Sarif.Result[] = shouldFilterIgnored",
        "comment_created_at": "2023-04-26T10:05:14+00:00",
        "comment_author": "strassl-snyk",
        "comment_body": "enh: A comment explaining that we only want to filter displayed results (and why) may be useful.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "795525473",
    "pr_number": 2640,
    "pr_file": "test/jest/unit/snyk-code/snyk-code-test.spec.ts",
    "created_at": "2022-01-31T10:19:06+00:00",
    "commented_code": ").rejects.toHaveProperty('userMessage', 'Test limit reached!');\n   });\n \n+  it('should create sarif result when `--sarif-file-output` is used', async () => {\n+    const options: ArgsOptions = {\n+      path: '',\n+      traverseNodeModules: false,\n+      showVulnPaths: 'none',\n+      code: true,\n+      _: [],\n+      _doubleDashArgs: [],\n+      'sarif-file-output': 'test',\n+    };\n+\n+    analyzeFoldersMock.mockResolvedValue(sampleAnalyzeFoldersResponse);\n+    isSastEnabledForOrgSpy.mockResolvedValueOnce({\n+      sastEnabled: true,\n+      localCodeEngine: {\n+        enabled: false,\n+      },\n+    });\n+    trackUsageSpy.mockResolvedValue({});\n+\n+    try {\n+      await snykTest('some/path', options);\n+    } catch (error) {\n+      // check if error has sarif result",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "795525473",
        "repo_full_name": "snyk/cli",
        "pr_number": 2640,
        "pr_file": "test/jest/unit/snyk-code/snyk-code-test.spec.ts",
        "discussion_id": "795525473",
        "commented_code": "@@ -258,6 +258,46 @@ describe('Test snyk code', () => {\n     ).rejects.toHaveProperty('userMessage', 'Test limit reached!');\n   });\n \n+  it('should create sarif result when `--sarif-file-output` is used', async () => {\n+    const options: ArgsOptions = {\n+      path: '',\n+      traverseNodeModules: false,\n+      showVulnPaths: 'none',\n+      code: true,\n+      _: [],\n+      _doubleDashArgs: [],\n+      'sarif-file-output': 'test',\n+    };\n+\n+    analyzeFoldersMock.mockResolvedValue(sampleAnalyzeFoldersResponse);\n+    isSastEnabledForOrgSpy.mockResolvedValueOnce({\n+      sastEnabled: true,\n+      localCodeEngine: {\n+        enabled: false,\n+      },\n+    });\n+    trackUsageSpy.mockResolvedValue({});\n+\n+    try {\n+      await snykTest('some/path', options);\n+    } catch (error) {\n+      // check if error has sarif result",
        "comment_created_at": "2022-01-31T10:19:06+00:00",
        "comment_author": "ArturSnyk",
        "comment_body": "`// check if error has sarif result` The error case, in general, is a bit misleading. it's not that we have functional use of an error. here it's more of indicating that we have found vulnerabilities that you indeed check later on (`expect(error.code).toBe('VULNS');`).\r\nI would suggest either removing the comment or updating to something that indicates that we're nearly checking that we have a stringified sarif result",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1931897380",
    "pr_number": 5676,
    "pr_file": "src/cli/main.ts",
    "created_at": "2025-01-28T10:17:27+00:00",
    "commented_code": "}\n   }\n \n-  if (args.options.debug && !args.options.json) {\n-    const output = vulnsFound ? error.message : error.stack;\n-    console.log(output);\n-  } else if (\n-    args.options.json &&\n-    !(error instanceof UnsupportedOptionCombinationError)\n-  ) {\n-    const output = vulnsFound\n-      ? error.message\n-      : stripAnsi(error.json || error.stack);\n-    if (error.jsonPayload) {\n-      new JsonStreamStringify(error.jsonPayload, undefined, 2).pipe(\n-        process.stdout,\n-      );\n-    } else {\n+  /**\n+   * Exceptions from sending errors\n+   * - json/sarif flags - this would just stringify the content as the error message; could look into outputing the Error Catalog JSON\n+   * - vulnsFound - issues are treated as errors (exit code 1), this should be some nice pretty formated output for users.\n+   */\n+  const errorSent =\n+    args.options.json || args.options.sarif || vulnsFound\n+      ? false\n+      : sendError(error);\n+  if (!errorSent) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1931897380",
        "repo_full_name": "snyk/cli",
        "pr_number": 5676,
        "pr_file": "src/cli/main.ts",
        "discussion_id": "1931897380",
        "commented_code": "@@ -135,36 +137,47 @@ async function handleError(args, error) {\n     }\n   }\n \n-  if (args.options.debug && !args.options.json) {\n-    const output = vulnsFound ? error.message : error.stack;\n-    console.log(output);\n-  } else if (\n-    args.options.json &&\n-    !(error instanceof UnsupportedOptionCombinationError)\n-  ) {\n-    const output = vulnsFound\n-      ? error.message\n-      : stripAnsi(error.json || error.stack);\n-    if (error.jsonPayload) {\n-      new JsonStreamStringify(error.jsonPayload, undefined, 2).pipe(\n-        process.stdout,\n-      );\n-    } else {\n+  /**\n+   * Exceptions from sending errors\n+   * - json/sarif flags - this would just stringify the content as the error message; could look into outputing the Error Catalog JSON\n+   * - vulnsFound - issues are treated as errors (exit code 1), this should be some nice pretty formated output for users.\n+   */\n+  const errorSent =\n+    args.options.json || args.options.sarif || vulnsFound\n+      ? false\n+      : sendError(error);\n+  if (!errorSent) {",
        "comment_created_at": "2025-01-28T10:17:27+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "**docs:** Add a comment which explicits out the following behaviour as a fall back for specific scenarios. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1521717728",
    "pr_number": 5093,
    "pr_file": "test/jest/util/runCommand.ts",
    "created_at": "2024-03-12T15:48:23+00:00",
    "commented_code": "import { SpawnOptionsWithoutStdio } from 'child_process';\n import { spawn } from 'cross-spawn';\n+// const debug = require('debug')('acceptance-test:runCommand');\n \n type RunCommandResult = {\n   code: number;\n   stdout: string;\n   stderr: string;\n+  stdoutBuffer?: Buffer;\n+  stderrBuffer?: Buffer;\n };\n \n-type RunCommandOptions = SpawnOptionsWithoutStdio;\n+type RunCommandOptions = SpawnOptionsWithoutStdio & { bufferOutput?: boolean };",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1521717728",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "test/jest/util/runCommand.ts",
        "discussion_id": "1521717728",
        "commented_code": "@@ -1,13 +1,16 @@\n import { SpawnOptionsWithoutStdio } from 'child_process';\n import { spawn } from 'cross-spawn';\n+// const debug = require('debug')('acceptance-test:runCommand');\n \n type RunCommandResult = {\n   code: number;\n   stdout: string;\n   stderr: string;\n+  stdoutBuffer?: Buffer;\n+  stderrBuffer?: Buffer;\n };\n \n-type RunCommandOptions = SpawnOptionsWithoutStdio;\n+type RunCommandOptions = SpawnOptionsWithoutStdio & { bufferOutput?: boolean };",
        "comment_created_at": "2024-03-12T15:48:23+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Nitpick: a short comment what the new flag does would be helpful for future us.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1461941863",
    "pr_number": 5014,
    "pr_file": "src/lib/formatters/open-source-sarif-output.ts",
    "created_at": "2024-01-22T14:27:58+00:00",
    "commented_code": "testResult.packageManager!,\n           ],\n           cvssv3_baseScore: vuln.cvssScore,\n+          \"security-severity\": vuln.cvssScore,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1461941863",
        "repo_full_name": "snyk/cli",
        "pr_number": 5014,
        "pr_file": "src/lib/formatters/open-source-sarif-output.ts",
        "discussion_id": "1461941863",
        "commented_code": "@@ -88,6 +88,7 @@ ${vuln.description}`.replace(/##\\s/g, '# '),\n             testResult.packageManager!,\n           ],\n           cvssv3_baseScore: vuln.cvssScore,\n+          \"security-severity\": vuln.cvssScore,",
        "comment_created_at": "2024-01-22T14:27:58+00:00",
        "comment_author": "cmars",
        "comment_body": "It might be worth commenting which vendors these fields are intended for. TIL AWS uses `cvssv3_baseScore`, Github uses `security-severity`.\r\n\r\nWould have made the intent here a lot clearer (I was wondering, why are we copying the CVSS with a different name?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1462087868",
        "repo_full_name": "snyk/cli",
        "pr_number": 5014,
        "pr_file": "src/lib/formatters/open-source-sarif-output.ts",
        "discussion_id": "1461941863",
        "commented_code": "@@ -88,6 +88,7 @@ ${vuln.description}`.replace(/##\\s/g, '# '),\n             testResult.packageManager!,\n           ],\n           cvssv3_baseScore: vuln.cvssScore,\n+          \"security-severity\": vuln.cvssScore,",
        "comment_created_at": "2024-01-22T16:10:36+00:00",
        "comment_author": "schottsfired",
        "comment_body": "Couldn't agree more, I thought of that as well after filing. Will add.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1174839235",
    "pr_number": 4565,
    "pr_file": "test/jest/acceptance/snyk-test/basic-test-all-languages.spec.ts",
    "created_at": "2023-04-24T06:30:46+00:00",
    "commented_code": "expect(code).toEqual(0);\n   });",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1174839235",
        "repo_full_name": "snyk/cli",
        "pr_number": 4565,
        "pr_file": "test/jest/acceptance/snyk-test/basic-test-all-languages.spec.ts",
        "discussion_id": "1174839235",
        "commented_code": "@@ -89,7 +89,7 @@ describe('`snyk test` of basic projects for each language/ecosystem', () => {\n     expect(code).toEqual(0);\n   });\n ",
        "comment_created_at": "2023-04-24T06:30:46+00:00",
        "comment_author": "michelkaporin",
        "comment_body": "Explicit comment why we skip here would be more helpful when browsing code in future.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "952255128",
    "pr_number": 3614,
    "pr_file": "src/lib/iac/test/v2/scan/results.ts",
    "created_at": "2022-08-23T07:36:55+00:00",
    "commented_code": "references?: string;\n   labels?: string[];\n   category?: string;\n+  documentation: string;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "952255128",
        "repo_full_name": "snyk/cli",
        "pr_number": 3614,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "952255128",
        "commented_code": "@@ -55,6 +55,7 @@ export interface Rule {\n   references?: string;\n   labels?: string[];\n   category?: string;\n+  documentation: string;",
        "comment_created_at": "2022-08-23T07:36:55+00:00",
        "comment_author": "ofekatr",
        "comment_body": "This will likely be an optional field since rules can also be generated from custom rules, which won't include a documentation link.",
        "pr_file_module": null
      },
      {
        "comment_id": "952460280",
        "repo_full_name": "snyk/cli",
        "pr_number": 3614,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "952255128",
        "commented_code": "@@ -55,6 +55,7 @@ export interface Rule {\n   references?: string;\n   labels?: string[];\n   category?: string;\n+  documentation: string;",
        "comment_created_at": "2022-08-23T10:55:19+00:00",
        "comment_author": "YairZ101",
        "comment_body": "we can change this once we'll implement custom rules",
        "pr_file_module": null
      },
      {
        "comment_id": "952563952",
        "repo_full_name": "snyk/cli",
        "pr_number": 3614,
        "pr_file": "src/lib/iac/test/v2/scan/results.ts",
        "discussion_id": "952255128",
        "commented_code": "@@ -55,6 +55,7 @@ export interface Rule {\n   references?: string;\n   labels?: string[];\n   category?: string;\n+  documentation: string;",
        "comment_created_at": "2022-08-23T12:37:32+00:00",
        "comment_author": "ofekatr",
        "comment_body": "In that case, can you please add a `TODO` comment for it?",
        "pr_file_module": null
      }
    ]
  }
]