[
  {
    "discussion_id": "1295507248",
    "pr_number": 4788,
    "pr_file": "src/lib/plugins/sast/localCodeEngine.ts",
    "created_at": "2023-08-16T07:46:17+00:00",
    "commented_code": "+import * as debugLib from 'debug';\n+import chalk from 'chalk';\n+\n+import { MissingConfigurationError } from './errors';\n+import { makeRequest } from '../../request';\n+import { Global } from '../../../cli/args';\n+import { SastSettings } from './types';\n+\n+declare const global: Global;\n+const debug = debugLib('snyk-code');\n+\n+export function isLocalCodeEngine(sastSettings: SastSettings): boolean {\n+    const { sastEnabled, localCodeEngine } = sastSettings;\n+\n+    return sastEnabled && localCodeEngine.enabled;\n+}\n+\n+export function validateLocalCodeEngineUrl(localCodeEngineUrl: string): void {\n+    if (localCodeEngineUrl.length === 0) {\n+        throw new MissingConfigurationError(\n+            'Snyk Code Local Engine. Refer to our docs on https://docs.snyk.io/products/snyk-code/deployment-options/snyk-code-local-engine/cli-and-ide to learn more',\n+        );\n+    }\n+}\n+\n+export async function logLocalCodeEngineVersion(lceUrl = \"\"): Promise<void> {\n+    const lceBaseUrl = lceUrl.replace('/api', '')\n+    const isNonSecureHttp = lceBaseUrl.match(/^http:/);\n+    let ignoreUnknownCAoriginalValue;\n+\n+    if (isNonSecureHttp) {\n+        ignoreUnknownCAoriginalValue = global.ignoreUnknownCA;\n+        // `makeRequest` function converts `http` calls to `https`. In some cases, SCLE might be running on http.\n+        // This problem is fixed by setting `options.rejectUnauthorized = true`.\n+        // Setting `global.ignoreUnknownCA` to true adds rejectUnauthorized=true as an option in `makeRequest`.\n+        global.ignoreUnknownCA = true;\n+    }\n+\n+    try {\n+        const { res: { body, statusCode } } = await makeRequest({\n+            url: `${lceBaseUrl}/status`,\n+            method: 'get'\n+        })\n+\n+        if (isNonSecureHttp) {\n+            // Resetting `global.ignoreUnknownCA` to whatever value it had before I changed it above.\n+            global.ignoreUnknownCA = ignoreUnknownCAoriginalValue;\n+        }",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1295507248",
        "repo_full_name": "snyk/cli",
        "pr_number": 4788,
        "pr_file": "src/lib/plugins/sast/localCodeEngine.ts",
        "discussion_id": "1295507248",
        "commented_code": "@@ -0,0 +1,65 @@\n+import * as debugLib from 'debug';\n+import chalk from 'chalk';\n+\n+import { MissingConfigurationError } from './errors';\n+import { makeRequest } from '../../request';\n+import { Global } from '../../../cli/args';\n+import { SastSettings } from './types';\n+\n+declare const global: Global;\n+const debug = debugLib('snyk-code');\n+\n+export function isLocalCodeEngine(sastSettings: SastSettings): boolean {\n+    const { sastEnabled, localCodeEngine } = sastSettings;\n+\n+    return sastEnabled && localCodeEngine.enabled;\n+}\n+\n+export function validateLocalCodeEngineUrl(localCodeEngineUrl: string): void {\n+    if (localCodeEngineUrl.length === 0) {\n+        throw new MissingConfigurationError(\n+            'Snyk Code Local Engine. Refer to our docs on https://docs.snyk.io/products/snyk-code/deployment-options/snyk-code-local-engine/cli-and-ide to learn more',\n+        );\n+    }\n+}\n+\n+export async function logLocalCodeEngineVersion(lceUrl = \"\"): Promise<void> {\n+    const lceBaseUrl = lceUrl.replace('/api', '')\n+    const isNonSecureHttp = lceBaseUrl.match(/^http:/);\n+    let ignoreUnknownCAoriginalValue;\n+\n+    if (isNonSecureHttp) {\n+        ignoreUnknownCAoriginalValue = global.ignoreUnknownCA;\n+        // `makeRequest` function converts `http` calls to `https`. In some cases, SCLE might be running on http.\n+        // This problem is fixed by setting `options.rejectUnauthorized = true`.\n+        // Setting `global.ignoreUnknownCA` to true adds rejectUnauthorized=true as an option in `makeRequest`.\n+        global.ignoreUnknownCA = true;\n+    }\n+\n+    try {\n+        const { res: { body, statusCode } } = await makeRequest({\n+            url: `${lceBaseUrl}/status`,\n+            method: 'get'\n+        })\n+\n+        if (isNonSecureHttp) {\n+            // Resetting `global.ignoreUnknownCA` to whatever value it had before I changed it above.\n+            global.ignoreUnknownCA = ignoreUnknownCAoriginalValue;\n+        }",
        "comment_created_at": "2023-08-16T07:46:17+00:00",
        "comment_author": "novalex",
        "comment_body": "`req`: if the `makeRequest` call throws this will never be reset.\r\n\r\nShould be moved into a \"finally\" block instead.",
        "pr_file_module": null
      },
      {
        "comment_id": "1296787904",
        "repo_full_name": "snyk/cli",
        "pr_number": 4788,
        "pr_file": "src/lib/plugins/sast/localCodeEngine.ts",
        "discussion_id": "1295507248",
        "commented_code": "@@ -0,0 +1,65 @@\n+import * as debugLib from 'debug';\n+import chalk from 'chalk';\n+\n+import { MissingConfigurationError } from './errors';\n+import { makeRequest } from '../../request';\n+import { Global } from '../../../cli/args';\n+import { SastSettings } from './types';\n+\n+declare const global: Global;\n+const debug = debugLib('snyk-code');\n+\n+export function isLocalCodeEngine(sastSettings: SastSettings): boolean {\n+    const { sastEnabled, localCodeEngine } = sastSettings;\n+\n+    return sastEnabled && localCodeEngine.enabled;\n+}\n+\n+export function validateLocalCodeEngineUrl(localCodeEngineUrl: string): void {\n+    if (localCodeEngineUrl.length === 0) {\n+        throw new MissingConfigurationError(\n+            'Snyk Code Local Engine. Refer to our docs on https://docs.snyk.io/products/snyk-code/deployment-options/snyk-code-local-engine/cli-and-ide to learn more',\n+        );\n+    }\n+}\n+\n+export async function logLocalCodeEngineVersion(lceUrl = \"\"): Promise<void> {\n+    const lceBaseUrl = lceUrl.replace('/api', '')\n+    const isNonSecureHttp = lceBaseUrl.match(/^http:/);\n+    let ignoreUnknownCAoriginalValue;\n+\n+    if (isNonSecureHttp) {\n+        ignoreUnknownCAoriginalValue = global.ignoreUnknownCA;\n+        // `makeRequest` function converts `http` calls to `https`. In some cases, SCLE might be running on http.\n+        // This problem is fixed by setting `options.rejectUnauthorized = true`.\n+        // Setting `global.ignoreUnknownCA` to true adds rejectUnauthorized=true as an option in `makeRequest`.\n+        global.ignoreUnknownCA = true;\n+    }\n+\n+    try {\n+        const { res: { body, statusCode } } = await makeRequest({\n+            url: `${lceBaseUrl}/status`,\n+            method: 'get'\n+        })\n+\n+        if (isNonSecureHttp) {\n+            // Resetting `global.ignoreUnknownCA` to whatever value it had before I changed it above.\n+            global.ignoreUnknownCA = ignoreUnknownCAoriginalValue;\n+        }",
        "comment_created_at": "2023-08-17T07:28:16+00:00",
        "comment_author": "metju90",
        "comment_body": "Yep, good catch!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1188548040",
    "pr_number": 4563,
    "pr_file": "src/lib/plugins/sast/errors/code-client-error.ts",
    "created_at": "2023-05-09T12:50:15+00:00",
    "commented_code": "+import { CustomError } from '../../../errors/custom-error';\n+\n+export class CodeClientError extends CustomError {\n+  constructor(\n+    statusCode: number,\n+    statusText: string,\n+    feature: string,\n+    additionalUserHelp = '',\n+  ) {\n+    super(statusText);\n+    this.code = statusCode;\n+\n+    this.userMessage = `There was a problem running ${feature}. ${additionalUserHelp}\nPlease retry and contact support if the problem persists.`;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1188548040",
        "repo_full_name": "snyk/cli",
        "pr_number": 4563,
        "pr_file": "src/lib/plugins/sast/errors/code-client-error.ts",
        "discussion_id": "1188548040",
        "commented_code": "@@ -0,0 +1,15 @@\n+import { CustomError } from '../../../errors/custom-error';\n+\n+export class CodeClientError extends CustomError {\n+  constructor(\n+    statusCode: number,\n+    statusText: string,\n+    feature: string,\n+    additionalUserHelp = '',\n+  ) {\n+    super(statusText);\n+    this.code = statusCode;\n+\n+    this.userMessage = `There was a problem running ${feature}. ${additionalUserHelp}\\nPlease retry and contact support if the problem persists.`;",
        "comment_created_at": "2023-05-09T12:50:15+00:00",
        "comment_author": "novalex",
        "comment_body": "1. IMO this class should be \"feature-agnostic\". Any feature-specific text we need to show the user can be passed into the `additionalUserHelp` arg, and the generic message can just say \"There was a problem running Code analysis/scan\" or similar.\r\n2. Not all errors are retry-able, e.g. the \"Sarif size limit exceeded\" one, so the \"Please retry\" message should be conditional.",
        "pr_file_module": null
      },
      {
        "comment_id": "1188608879",
        "repo_full_name": "snyk/cli",
        "pr_number": 4563,
        "pr_file": "src/lib/plugins/sast/errors/code-client-error.ts",
        "discussion_id": "1188548040",
        "commented_code": "@@ -0,0 +1,15 @@\n+import { CustomError } from '../../../errors/custom-error';\n+\n+export class CodeClientError extends CustomError {\n+  constructor(\n+    statusCode: number,\n+    statusText: string,\n+    feature: string,\n+    additionalUserHelp = '',\n+  ) {\n+    super(statusText);\n+    this.code = statusCode;\n+\n+    this.userMessage = `There was a problem running ${feature}. ${additionalUserHelp}\\nPlease retry and contact support if the problem persists.`;",
        "comment_created_at": "2023-05-09T13:33:50+00:00",
        "comment_author": "patricia-v",
        "comment_body": "Very good points.\r\n\r\nFor the second one, do you think we should just drop the \"retry\" and keep the \"contact support if the problem persist\" part? I guess most of the user-caused errors wouldn't be retryable in this case \ud83d\ude15\r\n\r\nI guess we could have this as a toggle as well, but I sincerely don't see the point in this \ud83d\ude04 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1188727289",
        "repo_full_name": "snyk/cli",
        "pr_number": 4563,
        "pr_file": "src/lib/plugins/sast/errors/code-client-error.ts",
        "discussion_id": "1188548040",
        "commented_code": "@@ -0,0 +1,15 @@\n+import { CustomError } from '../../../errors/custom-error';\n+\n+export class CodeClientError extends CustomError {\n+  constructor(\n+    statusCode: number,\n+    statusText: string,\n+    feature: string,\n+    additionalUserHelp = '',\n+  ) {\n+    super(statusText);\n+    this.code = statusCode;\n+\n+    this.userMessage = `There was a problem running ${feature}. ${additionalUserHelp}\\nPlease retry and contact support if the problem persists.`;",
        "comment_created_at": "2023-05-09T14:49:31+00:00",
        "comment_author": "novalex",
        "comment_body": "Yeah that seems sensible, we should do our best to retry any transient failures in the backend/client before showing errors to the users, so just \"Contact support if the problem persists\" could be the best message that doesn't require another arg for whether the error is retryable or not, etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "693754589",
    "pr_number": 2182,
    "pr_file": "src/cli/index.ts",
    "created_at": "2021-08-23T08:11:01+00:00",
    "commented_code": "spinner.clearAll();\n   let command = 'bad-command';\n   let exitCode = EXIT_CODES.ERROR;\n-  const noSupportedManifestsFound = error.message?.includes(\n+  const noSupportedProjectsDetectedPossibleMessage = [\n     'Could not detect supported target files in',\n+    'We found 0 supported files',\n+  ];\n+  const noSupportedProjectsDetected = noSupportedProjectsDetectedPossibleMessage.some(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "693754589",
        "repo_full_name": "snyk/cli",
        "pr_number": 2182,
        "pr_file": "src/cli/index.ts",
        "discussion_id": "693754589",
        "commented_code": "@@ -92,12 +92,16 @@ async function handleError(args, error) {\n   spinner.clearAll();\n   let command = 'bad-command';\n   let exitCode = EXIT_CODES.ERROR;\n-  const noSupportedManifestsFound = error.message?.includes(\n+  const noSupportedProjectsDetectedPossibleMessage = [\n     'Could not detect supported target files in',\n+    'We found 0 supported files',\n+  ];\n+  const noSupportedProjectsDetected = noSupportedProjectsDetectedPossibleMessage.some(",
        "comment_created_at": "2021-08-23T08:11:01+00:00",
        "comment_author": "pkey",
        "comment_body": "optional: this is quite shaky in case the message gets changed :/ maybe it's better to check based on Error type? You could create an error which inherits CustomError and then check based on that, for example.",
        "pr_file_module": null
      },
      {
        "comment_id": "693755576",
        "repo_full_name": "snyk/cli",
        "pr_number": 2182,
        "pr_file": "src/cli/index.ts",
        "discussion_id": "693754589",
        "commented_code": "@@ -92,12 +92,16 @@ async function handleError(args, error) {\n   spinner.clearAll();\n   let command = 'bad-command';\n   let exitCode = EXIT_CODES.ERROR;\n-  const noSupportedManifestsFound = error.message?.includes(\n+  const noSupportedProjectsDetectedPossibleMessage = [\n     'Could not detect supported target files in',\n+    'We found 0 supported files',\n+  ];\n+  const noSupportedProjectsDetected = noSupportedProjectsDetectedPossibleMessage.some(",
        "comment_created_at": "2021-08-23T08:12:20+00:00",
        "comment_author": "pkey",
        "comment_body": "It seems like you do have `NoSupportedSastFiles`",
        "pr_file_module": null
      },
      {
        "comment_id": "693786880",
        "repo_full_name": "snyk/cli",
        "pr_number": 2182,
        "pr_file": "src/cli/index.ts",
        "discussion_id": "693754589",
        "commented_code": "@@ -92,12 +92,16 @@ async function handleError(args, error) {\n   spinner.clearAll();\n   let command = 'bad-command';\n   let exitCode = EXIT_CODES.ERROR;\n-  const noSupportedManifestsFound = error.message?.includes(\n+  const noSupportedProjectsDetectedPossibleMessage = [\n     'Could not detect supported target files in',\n+    'We found 0 supported files',\n+  ];\n+  const noSupportedProjectsDetected = noSupportedProjectsDetectedPossibleMessage.some(",
        "comment_created_at": "2021-08-23T08:55:34+00:00",
        "comment_author": "ArturSnyk",
        "comment_body": "I agree i don't love it either. and I considered refactoring the whole error messaging part. But I stopped because it turned up to be more work then expected.\r\n\r\nI liked the point you raised, regarding the error type. I issued another commit to check by error type\r\nhttps://github.com/snyk/snyk/pull/2182/commits/bf361511e01a2e6f2b7c66a9dcef750afbe513ca",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1840735540",
    "pr_number": 5580,
    "pr_file": "src/lib/snyk-test/iac-test-result.ts",
    "created_at": "2024-11-13T16:19:04+00:00",
    "commented_code": "export function mapIacTestResult(\n   iacTest: IacTestResponse,\n ): MappedIacTestResponse | IacTestError {\n-  if (iacTest instanceof CustomError) {\n+  if (iacTest instanceof Error) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1840735540",
        "repo_full_name": "snyk/cli",
        "pr_number": 5580,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1840735540",
        "commented_code": "@@ -58,10 +61,18 @@ const IAC_ISSUES_KEY = 'infrastructureAsCodeIssues';\n export function mapIacTestResult(\n   iacTest: IacTestResponse,\n ): MappedIacTestResponse | IacTestError {\n-  if (iacTest instanceof CustomError) {\n+  if (iacTest instanceof Error) {",
        "comment_created_at": "2024-11-13T16:19:04+00:00",
        "comment_author": "sergiu-snyk",
        "comment_body": "This is the main fix. The customer log attached to the [Jira ticket](https://snyksec.atlassian.net/browse/IAC-3138) indicates that an `Error` is returned in some cases from the policy engine (it should not) and, because the check was done only for `CustomError`, any `Error` was allowed to go on the happy path being treated as an actual result and crashing with undefined on prop checking.\r\n\r\nThis is a fix for a regression introduced here: https://github.com/snyk/cli/commit/4d080861c9c83e8b3ca1e1a7720840e8d3809b46#diff-634d0df2f6eab15512d93b5a3ab1ada33e7146aecd9771844e6f4d503ef3f066L200",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1840741648",
    "pr_number": 5580,
    "pr_file": "src/lib/snyk-test/iac-test-result.ts",
    "created_at": "2024-11-13T16:21:53+00:00",
    "commented_code": "export function mapIacTestResult(\n   iacTest: IacTestResponse,\n ): MappedIacTestResponse | IacTestError {\n-  if (iacTest instanceof CustomError) {\n+  if (iacTest instanceof Error) {\n     return mapIacTestError(iacTest);\n   }\n \n+  if (!iacTest.result) {\n+    // This is an unexpected scenario, we should always have a result object,\n+    // but if we don't, we should handle it gracefully.\n+    debug(`invalid scan result: ${iacTest}`);\n+    const errorMessage = iacTest.path ? `Invalid result for ${iacTest.path}` : 'Invalid result';\n+    return mapIacTestError(new CustomError(`${errorMessage}. Please run the command again with the \\`-d\\` flag and contact support@snyk.io with the contents of the output`));\n+  }",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1840741648",
        "repo_full_name": "snyk/cli",
        "pr_number": 5580,
        "pr_file": "src/lib/snyk-test/iac-test-result.ts",
        "discussion_id": "1840741648",
        "commented_code": "@@ -58,10 +61,18 @@ const IAC_ISSUES_KEY = 'infrastructureAsCodeIssues';\n export function mapIacTestResult(\n   iacTest: IacTestResponse,\n ): MappedIacTestResponse | IacTestError {\n-  if (iacTest instanceof CustomError) {\n+  if (iacTest instanceof Error) {\n     return mapIacTestError(iacTest);\n   }\n \n+  if (!iacTest.result) {\n+    // This is an unexpected scenario, we should always have a result object,\n+    // but if we don't, we should handle it gracefully.\n+    debug(`invalid scan result: ${iacTest}`);\n+    const errorMessage = iacTest.path ? `Invalid result for ${iacTest.path}` : 'Invalid result';\n+    return mapIacTestError(new CustomError(`${errorMessage}. Please run the command again with the \\`-d\\` flag and contact support@snyk.io with the contents of the output`));\n+  }",
        "comment_created_at": "2024-11-13T16:21:53+00:00",
        "comment_author": "sergiu-snyk",
        "comment_body": "This condition, where a result is not set, should never happen anymore if all errors are caught by the fix above. But if it still does, we log a user friendly message instead of letting it crash trying to access props for an inexistent result.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1533547059",
    "pr_number": 5093,
    "pr_file": "src/lib/request/request.ts",
    "created_at": "2024-03-21T09:54:09+00:00",
    "commented_code": "if (body && !noCompression) {\n     debug('compressing request body');\n-    const json = JSON.stringify(body);\n+    const json = jsonStringifyLargeObject(body);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1533547059",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "src/lib/request/request.ts",
        "discussion_id": "1533547059",
        "commented_code": "@@ -44,9 +45,9 @@ function setupRequest(payload: Payload) {\n \n   if (body && !noCompression) {\n     debug('compressing request body');\n-    const json = JSON.stringify(body);\n+    const json = jsonStringifyLargeObject(body);",
        "comment_created_at": "2024-03-21T09:54:09+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: Let's revert this change here, since it is better to fail than send an empty string.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1534009646",
    "pr_number": 5093,
    "pr_file": "src/cli/commands/test/index.ts",
    "created_at": "2024-03-21T14:20:46+00:00",
    "commented_code": "err.json = stringifiedData;\n     err.jsonStringifiedResults = stringifiedJsonData;\n     err.sarifStringifiedResults = stringifiedSarifData;\n+    // set jsonPayload if we failed to stringify it\n+    if (stringifiedJsonData.length === 0) {\n+      err.jsonPayload = dataToSend;\n+    }",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1534009646",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "src/cli/commands/test/index.ts",
        "discussion_id": "1534009646",
        "commented_code": "@@ -252,6 +252,10 @@ export default async function test(\n     err.json = stringifiedData;\n     err.jsonStringifiedResults = stringifiedJsonData;\n     err.sarifStringifiedResults = stringifiedSarifData;\n+    // set jsonPayload if we failed to stringify it\n+    if (stringifiedJsonData.length === 0) {\n+      err.jsonPayload = dataToSend;\n+    }",
        "comment_created_at": "2024-03-21T14:20:46+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "**suggestion:** As we are introducing a new property onto an `any` object, lets consider using a more meaningful property name. Such as: `rawResponsePayload`\r\n\r\nAlso note that we have duplicated the stringifedJsonData.length check which also exists on line 210, lets unify these. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1534201175",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "src/cli/commands/test/index.ts",
        "discussion_id": "1534009646",
        "commented_code": "@@ -252,6 +252,10 @@ export default async function test(\n     err.json = stringifiedData;\n     err.jsonStringifiedResults = stringifiedJsonData;\n     err.sarifStringifiedResults = stringifiedSarifData;\n+    // set jsonPayload if we failed to stringify it\n+    if (stringifiedJsonData.length === 0) {\n+      err.jsonPayload = dataToSend;\n+    }",
        "comment_created_at": "2024-03-21T15:59:27+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "I removed the duplicated logic.\r\nI realized that `err.jsonPayload` was already there, so I'm not changing this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1466728090",
    "pr_number": 5007,
    "pr_file": "src/lib/json.ts",
    "created_at": "2024-01-25T17:45:17+00:00",
    "commented_code": "+import { Options } from './types';\n+\n const debug = require('debug')('snyk-json');\n \n /**\n  * Attempt to json-stringify an object which is potentially very large and might exceed the string limit.\n  * If it does exceed the string limit, try again without pretty-print to hopefully come out below the string limit.\n  * @param obj the object from which you want to get a JSON string\n  */\n-export function jsonStringifyLargeObject(obj: any): string {\n+export function jsonStringifyLargeObject(obj: any, options?: Options): string {\n   let res = '';\n   try {\n-    // first try pretty-print\n     res = JSON.stringify(obj, null, 2);\n     return res;\n   } catch (err) {\n-    // if that doesn't work, try non-pretty print\n-    debug('JSON.stringify failed - trying again without pretty print', err);\n-    res = JSON.stringify(obj);\n+    if (options?.json) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1466728090",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "src/lib/json.ts",
        "discussion_id": "1466728090",
        "commented_code": "@@ -1,20 +1,25 @@\n+import { Options } from './types';\n+\n const debug = require('debug')('snyk-json');\n \n /**\n  * Attempt to json-stringify an object which is potentially very large and might exceed the string limit.\n  * If it does exceed the string limit, try again without pretty-print to hopefully come out below the string limit.\n  * @param obj the object from which you want to get a JSON string\n  */\n-export function jsonStringifyLargeObject(obj: any): string {\n+export function jsonStringifyLargeObject(obj: any, options?: Options): string {\n   let res = '';\n   try {\n-    // first try pretty-print\n     res = JSON.stringify(obj, null, 2);\n     return res;\n   } catch (err) {\n-    // if that doesn't work, try non-pretty print\n-    debug('JSON.stringify failed - trying again without pretty print', err);\n-    res = JSON.stringify(obj);\n+    if (options?.json) {",
        "comment_created_at": "2024-01-25T17:45:17+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Issue: From my understanding I think we need the non-pretty-print part of the original solution as well and only if this fails as well, we should fallback on the new solution. Removing the original code will cause issues for use cases of --json, which worked due to the non-pretty-print part.",
        "pr_file_module": null
      },
      {
        "comment_id": "1466728942",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "src/lib/json.ts",
        "discussion_id": "1466728090",
        "commented_code": "@@ -1,20 +1,25 @@\n+import { Options } from './types';\n+\n const debug = require('debug')('snyk-json');\n \n /**\n  * Attempt to json-stringify an object which is potentially very large and might exceed the string limit.\n  * If it does exceed the string limit, try again without pretty-print to hopefully come out below the string limit.\n  * @param obj the object from which you want to get a JSON string\n  */\n-export function jsonStringifyLargeObject(obj: any): string {\n+export function jsonStringifyLargeObject(obj: any, options?: Options): string {\n   let res = '';\n   try {\n-    // first try pretty-print\n     res = JSON.stringify(obj, null, 2);\n     return res;\n   } catch (err) {\n-    // if that doesn't work, try non-pretty print\n-    debug('JSON.stringify failed - trying again without pretty print', err);\n-    res = JSON.stringify(obj);\n+    if (options?.json) {",
        "comment_created_at": "2024-01-25T17:46:01+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "The associated unit test needs to be fixed and an additional one needs to be created.",
        "pr_file_module": null
      },
      {
        "comment_id": "1467550689",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "src/lib/json.ts",
        "discussion_id": "1466728090",
        "commented_code": "@@ -1,20 +1,25 @@\n+import { Options } from './types';\n+\n const debug = require('debug')('snyk-json');\n \n /**\n  * Attempt to json-stringify an object which is potentially very large and might exceed the string limit.\n  * If it does exceed the string limit, try again without pretty-print to hopefully come out below the string limit.\n  * @param obj the object from which you want to get a JSON string\n  */\n-export function jsonStringifyLargeObject(obj: any): string {\n+export function jsonStringifyLargeObject(obj: any, options?: Options): string {\n   let res = '';\n   try {\n-    // first try pretty-print\n     res = JSON.stringify(obj, null, 2);\n     return res;\n   } catch (err) {\n-    // if that doesn't work, try non-pretty print\n-    debug('JSON.stringify failed - trying again without pretty print', err);\n-    res = JSON.stringify(obj);\n+    if (options?.json) {",
        "comment_created_at": "2024-01-26T11:31:13+00:00",
        "comment_author": "j-luong",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1467866017",
    "pr_number": 5007,
    "pr_file": "src/cli/main.ts",
    "created_at": "2024-01-26T16:29:08+00:00",
    "commented_code": "}\n   }\n \n-  await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n-  await saveResultsToFile(args.options, 'sarif', error.sarifStringifiedResults);\n+  if (error.jsonPayload) {\n+    // send raw jsonPayload instead of stringified payload\n+    await saveResultsToFile(args.options, 'json', '', error.jsonPayload);\n+  } else {\n+    // fallback to original behaviour\n+    await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n+    await saveResultsToFile(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1467866017",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "src/cli/main.ts",
        "discussion_id": "1467866017",
        "commented_code": "@@ -157,8 +162,18 @@ async function handleError(args, error) {\n     }\n   }\n \n-  await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n-  await saveResultsToFile(args.options, 'sarif', error.sarifStringifiedResults);\n+  if (error.jsonPayload) {\n+    // send raw jsonPayload instead of stringified payload\n+    await saveResultsToFile(args.options, 'json', '', error.jsonPayload);\n+  } else {\n+    // fallback to original behaviour\n+    await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n+    await saveResultsToFile(",
        "comment_created_at": "2024-01-26T16:29:08+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Question: Don't we need to move this out of the else case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1467874749",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "src/cli/main.ts",
        "discussion_id": "1467866017",
        "commented_code": "@@ -157,8 +162,18 @@ async function handleError(args, error) {\n     }\n   }\n \n-  await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n-  await saveResultsToFile(args.options, 'sarif', error.sarifStringifiedResults);\n+  if (error.jsonPayload) {\n+    // send raw jsonPayload instead of stringified payload\n+    await saveResultsToFile(args.options, 'json', '', error.jsonPayload);\n+  } else {\n+    // fallback to original behaviour\n+    await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);\n+    await saveResultsToFile(",
        "comment_created_at": "2024-01-26T16:37:14+00:00",
        "comment_author": "j-luong",
        "comment_body": "`await saveResultsToFile(args.options, 'json', error.jsonStringifiedResults);` maintains the original behaviour for cases when `--json || --json-file-output` works using `JSON.stringify`. \r\n\r\nWhen/if we decide to stream to writeable destinations instead of using `JSON.stringify` all the branching logic checks like we have here can go away.\r\n\r\nActually, I think you mean the second `await saveResultsToFile(args.options,'sarif',error.sarifStringifiedResults,);`, in which case, yes it should be ran regardless as it was before.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191289399",
    "pr_number": 4598,
    "pr_file": "src/lib/request/promise.ts",
    "created_at": "2023-05-11T14:44:32+00:00",
    "commented_code": "body: JSON.parse(body as any),\n         });\n       } else if (res.statusCode >= 401) {\n+        const { error } = res.body;\n+\n         return reject({\n           code: res.statusCode,\n+          error: error,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1191289399",
        "repo_full_name": "snyk/cli",
        "pr_number": 4598,
        "pr_file": "src/lib/request/promise.ts",
        "discussion_id": "1191289399",
        "commented_code": "@@ -42,8 +42,11 @@ export async function makeRequestRest<T>(payload: any): Promise<T> {\n           body: JSON.parse(body as any),\n         });\n       } else if (res.statusCode >= 401) {\n+        const { error } = res.body;\n+\n         return reject({\n           code: res.statusCode,\n+          error: error,",
        "comment_created_at": "2023-05-11T14:44:32+00:00",
        "comment_author": "aron",
        "comment_body": "I'm not sure how this rejected object is used across the codebase. If it's output directly could this change leak internal error messages externally? @snyk/hammerhead will hopefully be able to provide some guidance.\r\n\r\nOtherwise we could just pass a new error to the AuthFailedError constructor.",
        "pr_file_module": null
      },
      {
        "comment_id": "1191316063",
        "repo_full_name": "snyk/cli",
        "pr_number": 4598,
        "pr_file": "src/lib/request/promise.ts",
        "discussion_id": "1191289399",
        "commented_code": "@@ -42,8 +42,11 @@ export async function makeRequestRest<T>(payload: any): Promise<T> {\n           body: JSON.parse(body as any),\n         });\n       } else if (res.statusCode >= 401) {\n+        const { error } = res.body;\n+\n         return reject({\n           code: res.statusCode,\n+          error: error,",
        "comment_created_at": "2023-05-11T15:00:01+00:00",
        "comment_author": "Avishagp",
        "comment_body": "Agree with @aron, this change could be risky and I would refrain from making it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1191353203",
        "repo_full_name": "snyk/cli",
        "pr_number": 4598,
        "pr_file": "src/lib/request/promise.ts",
        "discussion_id": "1191289399",
        "commented_code": "@@ -42,8 +42,11 @@ export async function makeRequestRest<T>(payload: any): Promise<T> {\n           body: JSON.parse(body as any),\n         });\n       } else if (res.statusCode >= 401) {\n+        const { error } = res.body;\n+\n         return reject({\n           code: res.statusCode,\n+          error: error,",
        "comment_created_at": "2023-05-11T15:27:12+00:00",
        "comment_author": "dekelund",
        "comment_body": "It seems like it's expected from the  rest of the code base, if I don't do it it will end up with another error later. I fully understand that it might be dangerous, due to the language (in combination with the design).\r\n\r\nI will look into it tomorrow and see what I can do to eliminate the risk.",
        "pr_file_module": null
      }
    ]
  }
]