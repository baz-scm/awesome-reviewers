[
  {
    "discussion_id": "1568852525",
    "pr_number": 5168,
    "pr_file": "Makefile",
    "created_at": "2024-04-17T13:31:35+00:00",
    "commented_code": "ifndef ARGS\n \t$(error cannot run: ARGS is undefined)\n endif\n+\n+# targets responsible for local dev environment\n+# install local dependencies\n+install-deps:\n+\t@bash $(WORKING_DIR)/scripts/install-dev-dependencies.sh\n+\n+# trigger build using the local .venv for python\n+build-local: pre-build\n+\t@( \\\n+    \tsource $(WORKING_DIR)/.venv/bin/activate; \\\n+    \tcd $(EXTENSIBLE_CLI_DIR); $(MAKE) build-full install bindir=$(WORKING_DIR)/$(BINARY_OUTPUT_FOLDER) USE_LEGACY_EXECUTABLE_NAME=1; \\",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1568852525",
        "repo_full_name": "snyk/cli",
        "pr_number": 5168,
        "pr_file": "Makefile",
        "discussion_id": "1568852525",
        "commented_code": "@@ -288,3 +288,16 @@ require-args:\n ifndef ARGS\n \t$(error cannot run: ARGS is undefined)\n endif\n+\n+# targets responsible for local dev environment\n+# install local dependencies\n+install-deps:\n+\t@bash $(WORKING_DIR)/scripts/install-dev-dependencies.sh\n+\n+# trigger build using the local .venv for python\n+build-local: pre-build\n+\t@( \\\n+    \tsource $(WORKING_DIR)/.venv/bin/activate; \\\n+    \tcd $(EXTENSIBLE_CLI_DIR); $(MAKE) build-full install bindir=$(WORKING_DIR)/$(BINARY_OUTPUT_FOLDER) USE_LEGACY_EXECUTABLE_NAME=1; \\",
        "comment_created_at": "2024-04-17T13:31:35+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Question: Do we really need a differentiation between build and build-local? I'm worried that local and CI build get out of sync at some point. I would like to see everyone using the same command to build.",
        "pr_file_module": null
      },
      {
        "comment_id": "1570181322",
        "repo_full_name": "snyk/cli",
        "pr_number": 5168,
        "pr_file": "Makefile",
        "discussion_id": "1568852525",
        "commented_code": "@@ -288,3 +288,16 @@ require-args:\n ifndef ARGS\n \t$(error cannot run: ARGS is undefined)\n endif\n+\n+# targets responsible for local dev environment\n+# install local dependencies\n+install-deps:\n+\t@bash $(WORKING_DIR)/scripts/install-dev-dependencies.sh\n+\n+# trigger build using the local .venv for python\n+build-local: pre-build\n+\t@( \\\n+    \tsource $(WORKING_DIR)/.venv/bin/activate; \\\n+    \tcd $(EXTENSIBLE_CLI_DIR); $(MAKE) build-full install bindir=$(WORKING_DIR)/$(BINARY_OUTPUT_FOLDER) USE_LEGACY_EXECUTABLE_NAME=1; \\",
        "comment_created_at": "2024-04-18T07:44:27+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Just to expand the thought, I wonder if we can make the usage of the virtual environment invisible to the `make` user.",
        "pr_file_module": null
      },
      {
        "comment_id": "1570297355",
        "repo_full_name": "snyk/cli",
        "pr_number": 5168,
        "pr_file": "Makefile",
        "discussion_id": "1568852525",
        "commented_code": "@@ -288,3 +288,16 @@ require-args:\n ifndef ARGS\n \t$(error cannot run: ARGS is undefined)\n endif\n+\n+# targets responsible for local dev environment\n+# install local dependencies\n+install-deps:\n+\t@bash $(WORKING_DIR)/scripts/install-dev-dependencies.sh\n+\n+# trigger build using the local .venv for python\n+build-local: pre-build\n+\t@( \\\n+    \tsource $(WORKING_DIR)/.venv/bin/activate; \\\n+    \tcd $(EXTENSIBLE_CLI_DIR); $(MAKE) build-full install bindir=$(WORKING_DIR)/$(BINARY_OUTPUT_FOLDER) USE_LEGACY_EXECUTABLE_NAME=1; \\",
        "comment_created_at": "2024-04-18T08:51:40+00:00",
        "comment_author": "mgyorke",
        "comment_body": "We could, the initial assumption in the MakeFile is that Python dependencies are installed globally before we run Make. This is handled by CircleCI in the preparatory steps.\r\n\r\nWe could change this, to use venv in the pipelines and then the build targets are the same everywhere. I see this as the ideal approach but I hesitated to touch the pipelines without discussing possible implications first.\r\n\r\nThe other two solutions I see are more pragmatic, as the current build path remains the same: \r\n- dedicated build target for local build, proposed in this PR;\r\n- do some checks in the existing build target so that it activates the venv if it runs locally or proceed as usual when running in container;",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1277357169",
    "pr_number": 4738,
    "pr_file": "cliv2/Makefile",
    "created_at": "2023-07-28T09:59:47+00:00",
    "commented_code": "format:\n \tgofmt -w -l -e .\n \n-.PHONY: $(SIGN_SCRIPT)\n-$(SIGN_SCRIPT): \n+.PHONY: SIGN_SCRIPT\n+SIGN_SCRIPT:\n \t@echo \"$(LOG_PREFIX) Running $(SIGN_SCRIPT) ( $(BUILD_DIR) )\"\n-\t@scripts/$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n-\n-.PHONY: _cleanup_sha_v2\n-_cleanup_sha_v2:\n-\t@echo \"$(LOG_PREFIX) Removing ( $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) )\"\n-\t@rm -f $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING)\n+\t$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n \n-.PHONY: $(ISSIGNED_SCRIPT)\n-$(ISSIGNED_SCRIPT): \n-\t@scripts/$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n+.PHONY: ISSIGNED_SCRIPT\n+ISSIGNED_SCRIPT:\n+\t$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n \n \n .PHONY: sign\n-sign: _cleanup_sha_v2 $(SIGN_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) $(ISSIGNED_SCRIPT)\n+sign: SIGN_SCRIPT ISSIGNED_SCRIPT\n \n .PHONY: test-signature\n-test-signature: $(ISSIGNED_SCRIPT)\n+test-signature: ISSIGNED_SCRIPT\n \n # Typescript CLI targets\n $(V1_WORKING_DIR)/$(V1_BINARY_FOLDER)/$(V1_EXECUTABLE_NAME):\n \t@echo \"$(LOG_PREFIX) Building legacy CLI\"\n-\t@cd $(V1_WORKING_DIR) && npm ci && npm run $(V1_BUILD_TYPE)\n+\t@cd $(V1_WORKING_DIR) && npm i && npm run $(V1_BUILD_TYPE)",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1277357169",
        "repo_full_name": "snyk/cli",
        "pr_number": 4738,
        "pr_file": "cliv2/Makefile",
        "discussion_id": "1277357169",
        "commented_code": "@@ -197,31 +200,26 @@ lint:\n format:\n \tgofmt -w -l -e .\n \n-.PHONY: $(SIGN_SCRIPT)\n-$(SIGN_SCRIPT): \n+.PHONY: SIGN_SCRIPT\n+SIGN_SCRIPT:\n \t@echo \"$(LOG_PREFIX) Running $(SIGN_SCRIPT) ( $(BUILD_DIR) )\"\n-\t@scripts/$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n-\n-.PHONY: _cleanup_sha_v2\n-_cleanup_sha_v2:\n-\t@echo \"$(LOG_PREFIX) Removing ( $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) )\"\n-\t@rm -f $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING)\n+\t$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n \n-.PHONY: $(ISSIGNED_SCRIPT)\n-$(ISSIGNED_SCRIPT): \n-\t@scripts/$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n+.PHONY: ISSIGNED_SCRIPT\n+ISSIGNED_SCRIPT:\n+\t$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n \n \n .PHONY: sign\n-sign: _cleanup_sha_v2 $(SIGN_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) $(ISSIGNED_SCRIPT)\n+sign: SIGN_SCRIPT ISSIGNED_SCRIPT\n \n .PHONY: test-signature\n-test-signature: $(ISSIGNED_SCRIPT)\n+test-signature: ISSIGNED_SCRIPT\n \n # Typescript CLI targets\n $(V1_WORKING_DIR)/$(V1_BINARY_FOLDER)/$(V1_EXECUTABLE_NAME):\n \t@echo \"$(LOG_PREFIX) Building legacy CLI\"\n-\t@cd $(V1_WORKING_DIR) && npm ci && npm run $(V1_BUILD_TYPE)\n+\t@cd $(V1_WORKING_DIR) && npm i && npm run $(V1_BUILD_TYPE)",
        "comment_created_at": "2023-07-28T09:59:47+00:00",
        "comment_author": "Avishagp",
        "comment_body": "Why not `ci`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1277359265",
        "repo_full_name": "snyk/cli",
        "pr_number": 4738,
        "pr_file": "cliv2/Makefile",
        "discussion_id": "1277357169",
        "commented_code": "@@ -197,31 +200,26 @@ lint:\n format:\n \tgofmt -w -l -e .\n \n-.PHONY: $(SIGN_SCRIPT)\n-$(SIGN_SCRIPT): \n+.PHONY: SIGN_SCRIPT\n+SIGN_SCRIPT:\n \t@echo \"$(LOG_PREFIX) Running $(SIGN_SCRIPT) ( $(BUILD_DIR) )\"\n-\t@scripts/$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n-\n-.PHONY: _cleanup_sha_v2\n-_cleanup_sha_v2:\n-\t@echo \"$(LOG_PREFIX) Removing ( $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) )\"\n-\t@rm -f $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING)\n+\t$(SIGN_SCRIPT) $(BUILD_DIR) $(V2_EXECUTABLE_NAME)\n \n-.PHONY: $(ISSIGNED_SCRIPT)\n-$(ISSIGNED_SCRIPT): \n-\t@scripts/$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n+.PHONY: ISSIGNED_SCRIPT\n+ISSIGNED_SCRIPT:\n+\t$(ISSIGNED_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME)\n \n \n .PHONY: sign\n-sign: _cleanup_sha_v2 $(SIGN_SCRIPT) $(BUILD_DIR)/$(V2_EXECUTABLE_NAME).$(HASH_STRING) $(ISSIGNED_SCRIPT)\n+sign: SIGN_SCRIPT ISSIGNED_SCRIPT\n \n .PHONY: test-signature\n-test-signature: $(ISSIGNED_SCRIPT)\n+test-signature: ISSIGNED_SCRIPT\n \n # Typescript CLI targets\n $(V1_WORKING_DIR)/$(V1_BINARY_FOLDER)/$(V1_EXECUTABLE_NAME):\n \t@echo \"$(LOG_PREFIX) Building legacy CLI\"\n-\t@cd $(V1_WORKING_DIR) && npm ci && npm run $(V1_BUILD_TYPE)\n+\t@cd $(V1_WORKING_DIR) && npm i && npm run $(V1_BUILD_TYPE)",
        "comment_created_at": "2023-07-28T10:02:00+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "it is an optimization to not always use clean-install. The pipeline itself does `npm ci` at the beginning, in this stage, we just want to install what is missing if anything.",
        "pr_file_module": null
      }
    ]
  }
]