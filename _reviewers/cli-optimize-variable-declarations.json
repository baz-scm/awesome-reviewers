[
  {
    "discussion_id": "1346868731",
    "pr_number": 4892,
    "pr_file": "cliv2/cmd/cliv2/main.go",
    "created_at": "2023-10-05T06:39:18+00:00",
    "commented_code": "return name\n }\n \n+func updateConfigFromParameter(config configuration.Configuration, args []string, rawArgs []string) {\n+\t// extract everything behind --\n+\tdoubleDashArgs := []string{}\n+\tdoubleDashPosition := -1",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1346868731",
        "repo_full_name": "snyk/cli",
        "pr_number": 4892,
        "pr_file": "cliv2/cmd/cliv2/main.go",
        "discussion_id": "1346868731",
        "commented_code": "@@ -141,23 +142,44 @@ func getFullCommandString(cmd *cobra.Command) string {\n \treturn name\n }\n \n+func updateConfigFromParameter(config configuration.Configuration, args []string, rawArgs []string) {\n+\t// extract everything behind --\n+\tdoubleDashArgs := []string{}\n+\tdoubleDashPosition := -1",
        "comment_created_at": "2023-10-05T06:39:18+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "suggestion (non-blocking): this doesn't need to be a number, could just be a boolean, which would make the logic I think easier to understand. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "994344710",
    "pr_number": 4126,
    "pr_file": "cliv2/cmd/cliv2/main.go",
    "created_at": "2022-10-13T08:45:43+00:00",
    "commented_code": "wrapperProxy.SetUpstreamProxyAuthentication(envVariables.ProxyAuthenticationMechanism)\n \thttp.DefaultTransport = wrapperProxy.Transport()\n \n-\tport, err := wrapperProxy.Start()\n+\t_, err = wrapperProxy.Start()",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "994344710",
        "repo_full_name": "snyk/cli",
        "pr_number": 4126,
        "pr_file": "cliv2/cmd/cliv2/main.go",
        "discussion_id": "994344710",
        "commented_code": "@@ -140,7 +140,7 @@ func MainWithErrorCode(envVariables EnvironmentVariables, args []string) int {\n \twrapperProxy.SetUpstreamProxyAuthentication(envVariables.ProxyAuthenticationMechanism)\n \thttp.DefaultTransport = wrapperProxy.Transport()\n \n-\tport, err := wrapperProxy.Start()\n+\t_, err = wrapperProxy.Start()",
        "comment_created_at": "2022-10-13T08:45:43+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: how about removing the port here, since the information is now available via ProxyInfo.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "978898425",
    "pr_number": 3859,
    "pr_file": "cliv2/internal/analytics/analytics_test.go",
    "created_at": "2022-09-23T17:21:38+00:00",
    "commented_code": "\"io\"\n \t\"net/http\"\n \t\"os\"\n+\t\"os/user\"",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "978898425",
        "repo_full_name": "snyk/cli",
        "pr_number": 3859,
        "pr_file": "cliv2/internal/analytics/analytics_test.go",
        "discussion_id": "978898425",
        "commented_code": "@@ -6,6 +6,7 @@ import (\n \t\"io\"\n \t\"net/http\"\n \t\"os\"\n+\t\"os/user\"",
        "comment_created_at": "2022-09-23T17:21:38+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "issue: imported but not used",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "926552329",
    "pr_number": 3430,
    "pr_file": "cliv2/internal/proxy/proxy_test.go",
    "created_at": "2022-07-21T11:13:22+00:00",
    "commented_code": "wp.Close()\n }\n \n-func Test_GetProxyConnectHeader_successful01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\texpectedHeader.Add(httpauth.ProxyAuthorizationKey, \"Mock\")\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl, err = url.Parse(\"http://localhost:3128\")\n-\tassert.Nil(t, err)\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.Nil(t, err)\n-}\n-\n-func Test_GetProxyConnectHeader_failed01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl = nil // error case where url is nil\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.NotNil(t, err)\n-}\n-\n func Test_SetUpstreamProxy(t *testing.T) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "926552329",
        "repo_full_name": "snyk/cli",
        "pr_number": 3430,
        "pr_file": "cliv2/internal/proxy/proxy_test.go",
        "discussion_id": "926552329",
        "commented_code": "@@ -140,50 +139,6 @@ func Test_xSnykCliVersionHeaderIsReplaced(t *testing.T) {\n \twp.Close()\n }\n \n-func Test_GetProxyConnectHeader_successful01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\texpectedHeader.Add(httpauth.ProxyAuthorizationKey, \"Mock\")\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl, err = url.Parse(\"http://localhost:3128\")\n-\tassert.Nil(t, err)\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.Nil(t, err)\n-}\n-\n-func Test_GetProxyConnectHeader_failed01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl = nil // error case where url is nil\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.NotNil(t, err)\n-}\n-\n func Test_SetUpstreamProxy(t *testing.T) {\n ",
        "comment_created_at": "2022-07-21T11:13:22+00:00",
        "comment_author": "maxjeffos",
        "comment_body": "polish: remove this empty space",
        "pr_file_module": null
      },
      {
        "comment_id": "926556334",
        "repo_full_name": "snyk/cli",
        "pr_number": 3430,
        "pr_file": "cliv2/internal/proxy/proxy_test.go",
        "discussion_id": "926552329",
        "commented_code": "@@ -140,50 +139,6 @@ func Test_xSnykCliVersionHeaderIsReplaced(t *testing.T) {\n \twp.Close()\n }\n \n-func Test_GetProxyConnectHeader_successful01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\texpectedHeader.Add(httpauth.ProxyAuthorizationKey, \"Mock\")\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl, err = url.Parse(\"http://localhost:3128\")\n-\tassert.Nil(t, err)\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.Nil(t, err)\n-}\n-\n-func Test_GetProxyConnectHeader_failed01(t *testing.T) {\n-\tvar err error\n-\tvar objectUnderTest *proxy.WrapperProxy\n-\tvar url *url.URL\n-\tvar actualHeader http.Header\n-\n-\texpectedHeader := make(http.Header)\n-\n-\tdebugLogger := log.New(os.Stderr, \"\", log.Ldate|log.Ltime|log.Lmicroseconds|log.Lshortfile)\n-\tobjectUnderTest, err = proxy.NewWrapperProxy(false, \"\", \"\", debugLogger)\n-\tassert.Nil(t, err)\n-\n-\turl = nil // error case where url is nil\n-\n-\tobjectUnderTest.SetUpstreamProxyAuthentication(httpauth.Mock)\n-\n-\tactualHeader, err = objectUnderTest.GetProxyConnectHeader(nil, url, \"\")\n-\tassert.Equal(t, expectedHeader, actualHeader)\n-\tassert.NotNil(t, err)\n-}\n-\n func Test_SetUpstreamProxy(t *testing.T) {\n ",
        "comment_created_at": "2022-07-21T11:18:37+00:00",
        "comment_author": "maxjeffos",
        "comment_body": "nitpick: in this test and a bunch of other places you declare variables at the top and then only ever assign to them once. I know it's a personal / stylistic thing and perhaps more common in C/C++, but just as a thought experiment - do you think it might help to reduce cognitive load if we just declared the variables when/where we need them rather than taking up extra space in the code and in our brains?",
        "pr_file_module": null
      }
    ]
  }
]