[
  {
    "discussion_id": "1109573164",
    "pr_number": 4422,
    "pr_file": "test/jest/unit/snyk-code/snyk-code-test.spec.ts",
    "created_at": "2023-02-17T10:16:25+00:00",
    "commented_code": "}\n   });\n \n+  it('should create sarif result with ignored issues omitted', async () => {\n+    const sastSettings = {\n+      sastEnabled: true,\n+      localCodeEngine: { url: '', allowCloudUpload: true, enabled: false },\n+    };\n+\n+    // First get results without ignores\n+    analyzeFoldersMock.mockResolvedValue(sampleAnalyzeFoldersResponse);\n+    const resultWithoutIgnores = await getCodeTestResults(\n+      '.',\n+      {\n+        path: '',\n+        code: true,\n+      },\n+      sastSettings,\n+      'test-id',\n+    );\n+\n+    const sarifWithoutIgnores =\n+      resultWithoutIgnores?.analysisResults.sarif.runs[0].results;\n+    if (!sarifWithoutIgnores) return;",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1109573164",
        "repo_full_name": "snyk/cli",
        "pr_number": 4422,
        "pr_file": "test/jest/unit/snyk-code/snyk-code-test.spec.ts",
        "discussion_id": "1109573164",
        "commented_code": "@@ -380,6 +386,55 @@ describe('Test snyk code', () => {\n     }\n   });\n \n+  it('should create sarif result with ignored issues omitted', async () => {\n+    const sastSettings = {\n+      sastEnabled: true,\n+      localCodeEngine: { url: '', allowCloudUpload: true, enabled: false },\n+    };\n+\n+    // First get results without ignores\n+    analyzeFoldersMock.mockResolvedValue(sampleAnalyzeFoldersResponse);\n+    const resultWithoutIgnores = await getCodeTestResults(\n+      '.',\n+      {\n+        path: '',\n+        code: true,\n+      },\n+      sastSettings,\n+      'test-id',\n+    );\n+\n+    const sarifWithoutIgnores =\n+      resultWithoutIgnores?.analysisResults.sarif.runs[0].results;\n+    if (!sarifWithoutIgnores) return;",
        "comment_created_at": "2023-02-17T10:16:25+00:00",
        "comment_author": "strassl-snyk",
        "comment_body": "enh: We should really, really be failing the test if this happens. Silently early-exiting tests is a terrible practice and a good way to get silently failing tests. See also below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1876372688",
    "pr_number": 5621,
    "pr_file": "test/jest/acceptance/error-catalog.spec.ts",
    "created_at": "2024-12-09T17:13:32+00:00",
    "commented_code": "+import { runSnykCLI } from '../util/runSnykCLI';\n+import { fakeServer, getFirstIPv4Address } from '../../acceptance/fake-server';\n+import { getServerPort } from '../util/getServerPort';\n+\n+interface Workflow {\n+  type: string;\n+  cmd: string;\n+  env: { [key: string]: string | undefined };\n+}\n+\n+const integrationWorkflows: Workflow[] = [\n+  {\n+    type: 'typescript',\n+    cmd: 'test',\n+    env: {\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'false',\n+    },\n+  },\n+  {\n+    type: 'typescript',\n+    cmd: 'test code',\n+    env: {\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'false',\n+    },\n+  },\n+  {\n+    type: 'golang/native',\n+    cmd: 'code test',\n+    env: {\n+      // internal GAF feature flag for consistent ignores\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'true',\n+    },\n+  },\n+];\n+\n+describe.each(integrationWorkflows)(\n+  'outputs Error Catalog errors',\n+  ({ cmd, type, env }) => {\n+    env = {\n+      ...process.env,\n+      ...env,\n+    };\n+\n+    describe('authentication errors', () => {\n+      describe(`${type} workflow`, () => {\n+        it(`snyk ${cmd}`, async () => {\n+          await runSnykCLI('config clear');\n+          const { code, stdout } = await runSnykCLI(cmd, { env });\n+\n+          expect(code).toBe(2);\n+          expect(stdout).toContain('Authentication error (SNYK-0005)');\n+        });\n+      });\n+    });\n+\n+    describe('other network errors', () => {\n+      let server: ReturnType<typeof fakeServer>;\n+      const ipAddr = getFirstIPv4Address();\n+      const port = getServerPort(process);\n+      const baseApi = '/api/v1';\n+      beforeAll((done) => {\n+        env = {\n+          ...env,\n+          SNYK_API: 'http://' + ipAddr + ':' + port + baseApi,\n+          SNYK_HOST: 'http://' + ipAddr + ':' + port,\n+          SNYK_TOKEN: '123456789',\n+          SNYK_HTTP_PROTOCOL_UPGRADE: '0',\n+        };\n+        server = fakeServer(baseApi, 'snykToken');\n+        server.listen(port, () => {\n+          done();\n+        });\n+      });\n+      afterEach(() => {\n+        server.restore();\n+      });\n+      afterAll((done) => {\n+        server.close(() => {\n+          done();\n+        });\n+      });\n+\n+      describe('internal server errors', () => {\n+        describe(`${type} workflow`, () => {\n+          it(`snyk ${cmd}`, async () => {\n+            server.setStatusCode(500);\n+            const { code, stdout } = await runSnykCLI(`${cmd}`, { env });\n+            expect(code).toBe(2);\n+            expect(stdout).toContain(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1876372688",
        "repo_full_name": "snyk/cli",
        "pr_number": 5621,
        "pr_file": "test/jest/acceptance/error-catalog.spec.ts",
        "discussion_id": "1876372688",
        "commented_code": "@@ -0,0 +1,110 @@\n+import { runSnykCLI } from '../util/runSnykCLI';\n+import { fakeServer, getFirstIPv4Address } from '../../acceptance/fake-server';\n+import { getServerPort } from '../util/getServerPort';\n+\n+interface Workflow {\n+  type: string;\n+  cmd: string;\n+  env: { [key: string]: string | undefined };\n+}\n+\n+const integrationWorkflows: Workflow[] = [\n+  {\n+    type: 'typescript',\n+    cmd: 'test',\n+    env: {\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'false',\n+    },\n+  },\n+  {\n+    type: 'typescript',\n+    cmd: 'test code',\n+    env: {\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'false',\n+    },\n+  },\n+  {\n+    type: 'golang/native',\n+    cmd: 'code test',\n+    env: {\n+      // internal GAF feature flag for consistent ignores\n+      INTERNAL_SNYK_CODE_IGNORES_ENABLED: 'true',\n+    },\n+  },\n+];\n+\n+describe.each(integrationWorkflows)(\n+  'outputs Error Catalog errors',\n+  ({ cmd, type, env }) => {\n+    env = {\n+      ...process.env,\n+      ...env,\n+    };\n+\n+    describe('authentication errors', () => {\n+      describe(`${type} workflow`, () => {\n+        it(`snyk ${cmd}`, async () => {\n+          await runSnykCLI('config clear');\n+          const { code, stdout } = await runSnykCLI(cmd, { env });\n+\n+          expect(code).toBe(2);\n+          expect(stdout).toContain('Authentication error (SNYK-0005)');\n+        });\n+      });\n+    });\n+\n+    describe('other network errors', () => {\n+      let server: ReturnType<typeof fakeServer>;\n+      const ipAddr = getFirstIPv4Address();\n+      const port = getServerPort(process);\n+      const baseApi = '/api/v1';\n+      beforeAll((done) => {\n+        env = {\n+          ...env,\n+          SNYK_API: 'http://' + ipAddr + ':' + port + baseApi,\n+          SNYK_HOST: 'http://' + ipAddr + ':' + port,\n+          SNYK_TOKEN: '123456789',\n+          SNYK_HTTP_PROTOCOL_UPGRADE: '0',\n+        };\n+        server = fakeServer(baseApi, 'snykToken');\n+        server.listen(port, () => {\n+          done();\n+        });\n+      });\n+      afterEach(() => {\n+        server.restore();\n+      });\n+      afterAll((done) => {\n+        server.close(() => {\n+          done();\n+        });\n+      });\n+\n+      describe('internal server errors', () => {\n+        describe(`${type} workflow`, () => {\n+          it(`snyk ${cmd}`, async () => {\n+            server.setStatusCode(500);\n+            const { code, stdout } = await runSnykCLI(`${cmd}`, { env });\n+            expect(code).toBe(2);\n+            expect(stdout).toContain(",
        "comment_created_at": "2024-12-09T17:13:32+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: asserting against stdout is always a bit tricky as it is not a strong check or actually too strong as it breaks with minor rewrite of a message, which increases the maintenance. There is another way to check, which is using the instrumentation data, which would actually be a more complete check of the scenario.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1619165792",
    "pr_number": 5259,
    "pr_file": "test/jest/acceptance/snyk-test/all-projects.spec.ts",
    "created_at": "2024-05-29T16:19:53+00:00",
    "commented_code": "? 'vulnerable\\\\package-lock.json'\n         : 'vulnerable/package-lock.json';\n \n-    const backendRequests = server.popRequests(2);\n-    expect(backendRequests).toHaveLength(2);\n+    const backendRequests = server.getRequests().filter((req: any) => {\n+      if (\n+        req.method === 'POST' &&\n+        req.headers['x-snyk-cli-version'] &&\n+        req.url.includes('/api/v1/test-dep-graph')\n+      )\n+        return req;\n+    });\n+\n+    expect(backendRequests.length).toBeGreaterThan(0);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1619165792",
        "repo_full_name": "snyk/cli",
        "pr_number": 5259,
        "pr_file": "test/jest/acceptance/snyk-test/all-projects.spec.ts",
        "discussion_id": "1619165792",
        "commented_code": "@@ -169,8 +171,16 @@ describe('snyk test --all-projects (mocked server only)', () => {\n         ? 'vulnerable\\\\package-lock.json'\n         : 'vulnerable/package-lock.json';\n \n-    const backendRequests = server.popRequests(2);\n-    expect(backendRequests).toHaveLength(2);\n+    const backendRequests = server.getRequests().filter((req: any) => {\n+      if (\n+        req.method === 'POST' &&\n+        req.headers['x-snyk-cli-version'] &&\n+        req.url.includes('/api/v1/test-dep-graph')\n+      )\n+        return req;\n+    });\n+\n+    expect(backendRequests.length).toBeGreaterThan(0);",
        "comment_created_at": "2024-05-29T16:19:53+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Issue: This  changes the expectation, `> 0` is not the same as `==2`.  You should be able to filter the requests and leave the expectations unchanged.",
        "pr_file_module": null
      },
      {
        "comment_id": "1620715407",
        "repo_full_name": "snyk/cli",
        "pr_number": 5259,
        "pr_file": "test/jest/acceptance/snyk-test/all-projects.spec.ts",
        "discussion_id": "1619165792",
        "commented_code": "@@ -169,8 +171,16 @@ describe('snyk test --all-projects (mocked server only)', () => {\n         ? 'vulnerable\\\\package-lock.json'\n         : 'vulnerable/package-lock.json';\n \n-    const backendRequests = server.popRequests(2);\n-    expect(backendRequests).toHaveLength(2);\n+    const backendRequests = server.getRequests().filter((req: any) => {\n+      if (\n+        req.method === 'POST' &&\n+        req.headers['x-snyk-cli-version'] &&\n+        req.url.includes('/api/v1/test-dep-graph')\n+      )\n+        return req;\n+    });\n+\n+    expect(backendRequests.length).toBeGreaterThan(0);",
        "comment_created_at": "2024-05-30T13:25:54+00:00",
        "comment_author": "mgyorke",
        "comment_body": "My reasoning here, and in the other tests, was that the number of requests is not that important as much as having the right requests. So, that line was an exit \"trap\" for when there are no requests.\r\n\r\nBut I also see the value in checking the number, so I changed it to do an exact check for each test.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1521828370",
    "pr_number": 5093,
    "pr_file": "test/jest/acceptance/cli-json-output.spec.ts",
    "created_at": "2024-03-12T17:00:08+00:00",
    "commented_code": "expect(code).toEqual(1);\n     expect(stdout).not.toBe('');\n   });\n+\n+  it('test --json handles responses larger than 512Mb string size limit in v8', async () => {\n+    const project = await createProjectFromWorkspace('fail-on/no-fixable');\n+    const response = await project.readJSON('vulns-result.json');\n+    const remediation = response.result.remediation.unresolved[0];\n+    response.result.remediation.unresolved = new Array(420000).fill(\n+      remediation,\n+    );\n+\n+    server.setCustomResponse(response);\n+\n+    const {\n+      code,\n+      stdoutBuffer,\n+    } = await runSnykCLI(`test --json`, {\n+      cwd: project.path(),\n+      env,\n+      bufferOutput: true,\n+    });\n+\n+    expect(code).toEqual(1);\n+    expect(stdoutBuffer).toBeDefined();",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1521828370",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "test/jest/acceptance/cli-json-output.spec.ts",
        "discussion_id": "1521828370",
        "commented_code": "@@ -76,4 +76,27 @@ describe('test --json', () => {\n     expect(code).toEqual(1);\n     expect(stdout).not.toBe('');\n   });\n+\n+  it('test --json handles responses larger than 512Mb string size limit in v8', async () => {\n+    const project = await createProjectFromWorkspace('fail-on/no-fixable');\n+    const response = await project.readJSON('vulns-result.json');\n+    const remediation = response.result.remediation.unresolved[0];\n+    response.result.remediation.unresolved = new Array(420000).fill(\n+      remediation,\n+    );\n+\n+    server.setCustomResponse(response);\n+\n+    const {\n+      code,\n+      stdoutBuffer,\n+    } = await runSnykCLI(`test --json`, {\n+      cwd: project.path(),\n+      env,\n+      bufferOutput: true,\n+    });\n+\n+    expect(code).toEqual(1);\n+    expect(stdoutBuffer).toBeDefined();",
        "comment_created_at": "2024-03-12T17:00:08+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: This test should ensure that the content is a json data structure, for example by using a library like [this](https://www.npmjs.com/package/jsonparse). It should also ensure that the length of stdoutBuffer is greater 0.",
        "pr_file_module": null
      },
      {
        "comment_id": "1524933084",
        "repo_full_name": "snyk/cli",
        "pr_number": 5093,
        "pr_file": "test/jest/acceptance/cli-json-output.spec.ts",
        "discussion_id": "1521828370",
        "commented_code": "@@ -76,4 +76,27 @@ describe('test --json', () => {\n     expect(code).toEqual(1);\n     expect(stdout).not.toBe('');\n   });\n+\n+  it('test --json handles responses larger than 512Mb string size limit in v8', async () => {\n+    const project = await createProjectFromWorkspace('fail-on/no-fixable');\n+    const response = await project.readJSON('vulns-result.json');\n+    const remediation = response.result.remediation.unresolved[0];\n+    response.result.remediation.unresolved = new Array(420000).fill(\n+      remediation,\n+    );\n+\n+    server.setCustomResponse(response);\n+\n+    const {\n+      code,\n+      stdoutBuffer,\n+    } = await runSnykCLI(`test --json`, {\n+      cwd: project.path(),\n+      env,\n+      bufferOutput: true,\n+    });\n+\n+    expect(code).toEqual(1);\n+    expect(stdoutBuffer).toBeDefined();",
        "comment_created_at": "2024-03-14T13:59:35+00:00",
        "comment_author": "j-luong",
        "comment_body": "updated tests to better check this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1466717569",
    "pr_number": 5007,
    "pr_file": "test/jest/acceptance/cli-json-file-output.spec.ts",
    "created_at": "2024-01-25T17:35:01+00:00",
    "commented_code": "expect(code).toEqual(0);\n     expect(await project.read(outputPath)).toEqual(stdout);\n   });\n+\n+  it('test --json-file-ouput handles responses larger than 512Mb string size limit in v8', async () => {\n+    const project = await createProjectFromWorkspace(\n+      'extra-large-response-payload',\n+    );\n+    const outputFilename = 'json-file-output.json';\n+    const response = await project.readJSON('vulns-result.json');\n+    const reference =\n+      response.result.issuesData['SNYK-ALPINE319-OPENSSL-6148881']\n+        .references[0];\n+    response.result.issuesData[\n+      'SNYK-ALPINE319-OPENSSL-6148881'\n+    ].references = new Array(420000).fill(reference);\n+\n+    server.setCustomResponse(response);\n+\n+    const { code, stdout, stderr } = await runSnykCLI(\n+      `container test alpine:latest --json-file-output=${outputFilename}`,\n+      {\n+        cwd: project.path(),\n+        env,\n+      },\n+    );\n+\n+    console.debug({ stdout, stderr });\n+\n+    const outputPath = await project.path(outputFilename);\n+    const fileSize = fs.statSync(outputPath).size;\n+\n+    expect(code).toEqual(1);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1466717569",
        "repo_full_name": "snyk/cli",
        "pr_number": 5007,
        "pr_file": "test/jest/acceptance/cli-json-file-output.spec.ts",
        "discussion_id": "1466717569",
        "commented_code": "@@ -109,4 +110,74 @@ describe('test --json-file-output', () => {\n     expect(code).toEqual(0);\n     expect(await project.read(outputPath)).toEqual(stdout);\n   });\n+\n+  it('test --json-file-ouput handles responses larger than 512Mb string size limit in v8', async () => {\n+    const project = await createProjectFromWorkspace(\n+      'extra-large-response-payload',\n+    );\n+    const outputFilename = 'json-file-output.json';\n+    const response = await project.readJSON('vulns-result.json');\n+    const reference =\n+      response.result.issuesData['SNYK-ALPINE319-OPENSSL-6148881']\n+        .references[0];\n+    response.result.issuesData[\n+      'SNYK-ALPINE319-OPENSSL-6148881'\n+    ].references = new Array(420000).fill(reference);\n+\n+    server.setCustomResponse(response);\n+\n+    const { code, stdout, stderr } = await runSnykCLI(\n+      `container test alpine:latest --json-file-output=${outputFilename}`,\n+      {\n+        cwd: project.path(),\n+        env,\n+      },\n+    );\n+\n+    console.debug({ stdout, stderr });\n+\n+    const outputPath = await project.path(outputFilename);\n+    const fileSize = fs.statSync(outputPath).size;\n+\n+    expect(code).toEqual(1);",
        "comment_created_at": "2024-01-25T17:35:01+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: move this assert a bit up before trying to access the output file. Running the test with a non fixed CLI should fail in a planned way and not just because the file doesn't exists.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1369985533",
    "pr_number": 4906,
    "pr_file": "test/jest/unit/cli-monitor-utils.spec.ts",
    "created_at": "2023-10-24T11:04:59+00:00",
    "commented_code": "expect(res).toEqual('meta-gradle-project');\n   });\n \n+  it('getProjectName returns project name when project-name is provided via option', () => {\n+    const scannedProject: ScannedProject = {\n+      depGraph: {} as any,\n+      meta: {},",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1369985533",
        "repo_full_name": "snyk/cli",
        "pr_number": 4906,
        "pr_file": "test/jest/unit/cli-monitor-utils.spec.ts",
        "discussion_id": "1369985533",
        "commented_code": "@@ -155,6 +155,24 @@ describe('cli-monitor-utils test', () => {\n     expect(res).toEqual('meta-gradle-project');\n   });\n \n+  it('getProjectName returns project name when project-name is provided via option', () => {\n+    const scannedProject: ScannedProject = {\n+      depGraph: {} as any,\n+      meta: {},",
        "comment_created_at": "2023-10-24T11:04:59+00:00",
        "comment_author": "darscan",
        "comment_body": "You need this to actually test your change:\r\n```suggestion\r\n      meta: {\r\n        gradleProjectName: 'my-gradle-project',\r\n      },\r\n```\r\nWithout `meta.gradleProjectName` you would have fallen through to returning `meta['project-name']`. i.e. you haven't run this test without the change and seen it fail.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1119796450",
    "pr_number": 4440,
    "pr_file": "test/jest/acceptance/cli-args.spec.ts",
    "created_at": "2023-02-28T09:38:37+00:00",
    "commented_code": "});\n   });\n \n+  test('delimiting args should pass expected args to the command as expected', async () => {\n+    const { stdout } = await runSnykCLI(\n+      `-d woof --language=cat -- --hello --world`,\n+      {\n+        env,\n+      },\n+    );\n+    const doubleDashArgsStart = stdout.indexOf('_doubleDashArgs:::');\n+    const doubleDashArgsEnd = stdout.indexOf(':::_doubleDashArgs');\n+    const doubleDashArgs = stdout.slice(doubleDashArgsStart, doubleDashArgsEnd);\n+    expect(doubleDashArgs).toContain(\"[ '--hello', '--world' ]\");",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1119796450",
        "repo_full_name": "snyk/cli",
        "pr_number": 4440,
        "pr_file": "test/jest/acceptance/cli-args.spec.ts",
        "discussion_id": "1119796450",
        "commented_code": "@@ -39,6 +39,19 @@ describe('cli args', () => {\n     });\n   });\n \n+  test('delimiting args should pass expected args to the command as expected', async () => {\n+    const { stdout } = await runSnykCLI(\n+      `-d woof --language=cat -- --hello --world`,\n+      {\n+        env,\n+      },\n+    );\n+    const doubleDashArgsStart = stdout.indexOf('_doubleDashArgs:::');\n+    const doubleDashArgsEnd = stdout.indexOf(':::_doubleDashArgs');\n+    const doubleDashArgs = stdout.slice(doubleDashArgsStart, doubleDashArgsEnd);\n+    expect(doubleDashArgs).toContain(\"[ '--hello', '--world' ]\");",
        "comment_created_at": "2023-02-28T09:38:37+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Question: Shouldn't this be equal instead of contains?",
        "pr_file_module": null
      },
      {
        "comment_id": "1119804776",
        "repo_full_name": "snyk/cli",
        "pr_number": 4440,
        "pr_file": "test/jest/acceptance/cli-args.spec.ts",
        "discussion_id": "1119796450",
        "commented_code": "@@ -39,6 +39,19 @@ describe('cli args', () => {\n     });\n   });\n \n+  test('delimiting args should pass expected args to the command as expected', async () => {\n+    const { stdout } = await runSnykCLI(\n+      `-d woof --language=cat -- --hello --world`,\n+      {\n+        env,\n+      },\n+    );\n+    const doubleDashArgsStart = stdout.indexOf('_doubleDashArgs:::');\n+    const doubleDashArgsEnd = stdout.indexOf(':::_doubleDashArgs');\n+    const doubleDashArgs = stdout.slice(doubleDashArgsStart, doubleDashArgsEnd);\n+    expect(doubleDashArgs).toContain(\"[ '--hello', '--world' ]\");",
        "comment_created_at": "2023-02-28T09:44:49+00:00",
        "comment_author": "j-luong",
        "comment_body": "It can be with a bit of work, currently `doubleDashArgs`  = `_doubleDashArgs::: [ '--hello', '--world' ]`, so we can assert that for strict equality.\r\n\r\n`toContain` also works as expected if `doubleDashArgs` = `_doubleDashArgs::: [ '--hello', '--world', '--debug' ]`, i.e. the test will fail if `expect(doubleDashArgs).toContain(\"[ '--hello', '--world' ]\");`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1119810150",
        "repo_full_name": "snyk/cli",
        "pr_number": 4440,
        "pr_file": "test/jest/acceptance/cli-args.spec.ts",
        "discussion_id": "1119796450",
        "commented_code": "@@ -39,6 +39,19 @@ describe('cli args', () => {\n     });\n   });\n \n+  test('delimiting args should pass expected args to the command as expected', async () => {\n+    const { stdout } = await runSnykCLI(\n+      `-d woof --language=cat -- --hello --world`,\n+      {\n+        env,\n+      },\n+    );\n+    const doubleDashArgsStart = stdout.indexOf('_doubleDashArgs:::');\n+    const doubleDashArgsEnd = stdout.indexOf(':::_doubleDashArgs');\n+    const doubleDashArgs = stdout.slice(doubleDashArgsStart, doubleDashArgsEnd);\n+    expect(doubleDashArgs).toContain(\"[ '--hello', '--world' ]\");",
        "comment_created_at": "2023-02-28T09:49:00+00:00",
        "comment_author": "j-luong",
        "comment_body": "I've updated to strictEquality so it's more explicit \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  }
]