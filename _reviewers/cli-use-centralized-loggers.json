[
  {
    "discussion_id": "1790430389",
    "pr_number": 5521,
    "pr_file": "cliv2/pkg/basic_workflows/legacycli.go",
    "created_at": "2024-10-07T15:19:12+00:00",
    "commented_code": "// run the cli\n \tproxyInfo := wrapperProxy.ProxyInfo()\n+\n+\tfile := filepath.Join(workingDirectory, \".snyk.env\")\n+\tcontent, _ := os.ReadFile(file)\n+\tif len(content) > 0 {\n+\t\tenv := gotenv.Parse(strings.NewReader(string(content)))\n+\t\tfor k, v := range env {\n+\t\t\tcli.ReplaceEnvironmentVariable(k, v)\n+\t\t\tdebugLogger.Print(fmt.Sprintf(\"replacing env variable %s with %s=%s from config file %s\", k, k, v, file))\n+\t\t}\n+\t}\n+\n \terr = cli.Execute(proxyInfo, finalizeArguments(args, config.GetStringSlice(configuration.UNKNOWN_ARGS)))\n \n \tif !useStdIo {\n \t\toutWriter.Flush()\n \t\terrWriter.Flush()\n \n-\t\tif isDebug {\n-\t\t\tdebugLogger.Print(errBuffer.String())\n-\t\t}\n+\t\tdebugLogger.Print(errBuffer.String())",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1790430389",
        "repo_full_name": "snyk/cli",
        "pr_number": 5521,
        "pr_file": "cliv2/pkg/basic_workflows/legacycli.go",
        "discussion_id": "1790430389",
        "commented_code": "@@ -135,15 +137,24 @@ func legacycliWorkflow(\n \n \t// run the cli\n \tproxyInfo := wrapperProxy.ProxyInfo()\n+\n+\tfile := filepath.Join(workingDirectory, \".snyk.env\")\n+\tcontent, _ := os.ReadFile(file)\n+\tif len(content) > 0 {\n+\t\tenv := gotenv.Parse(strings.NewReader(string(content)))\n+\t\tfor k, v := range env {\n+\t\t\tcli.ReplaceEnvironmentVariable(k, v)\n+\t\t\tdebugLogger.Print(fmt.Sprintf(\"replacing env variable %s with %s=%s from config file %s\", k, k, v, file))\n+\t\t}\n+\t}\n+\n \terr = cli.Execute(proxyInfo, finalizeArguments(args, config.GetStringSlice(configuration.UNKNOWN_ARGS)))\n \n \tif !useStdIo {\n \t\toutWriter.Flush()\n \t\terrWriter.Flush()\n \n-\t\tif isDebug {\n-\t\t\tdebugLogger.Print(errBuffer.String())\n-\t\t}\n+\t\tdebugLogger.Print(errBuffer.String())",
        "comment_created_at": "2024-10-07T15:19:12+00:00",
        "comment_author": "ShawkyZ",
        "comment_body": "is it ok to leave this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1790654147",
        "repo_full_name": "snyk/cli",
        "pr_number": 5521,
        "pr_file": "cliv2/pkg/basic_workflows/legacycli.go",
        "discussion_id": "1790430389",
        "commented_code": "@@ -135,15 +137,24 @@ func legacycliWorkflow(\n \n \t// run the cli\n \tproxyInfo := wrapperProxy.ProxyInfo()\n+\n+\tfile := filepath.Join(workingDirectory, \".snyk.env\")\n+\tcontent, _ := os.ReadFile(file)\n+\tif len(content) > 0 {\n+\t\tenv := gotenv.Parse(strings.NewReader(string(content)))\n+\t\tfor k, v := range env {\n+\t\t\tcli.ReplaceEnvironmentVariable(k, v)\n+\t\t\tdebugLogger.Print(fmt.Sprintf(\"replacing env variable %s with %s=%s from config file %s\", k, k, v, file))\n+\t\t}\n+\t}\n+\n \terr = cli.Execute(proxyInfo, finalizeArguments(args, config.GetStringSlice(configuration.UNKNOWN_ARGS)))\n \n \tif !useStdIo {\n \t\toutWriter.Flush()\n \t\terrWriter.Flush()\n \n-\t\tif isDebug {\n-\t\t\tdebugLogger.Print(errBuffer.String())\n-\t\t}\n+\t\tdebugLogger.Print(errBuffer.String())",
        "comment_created_at": "2024-10-07T17:57:41+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "We want/need the information logged! \r\nBut rather than using the debug parameter the logger actually gets disabled centrally.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1605319254",
    "pr_number": 5244,
    "pr_file": "cliv2/internal/proxy/proxy.go",
    "created_at": "2024-05-17T16:55:59+00:00",
    "commented_code": "PROXY_USERNAME = \"snykcli\"\n )\n \n-func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *log.Logger) (*WrapperProxy, error) {\n+func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *zerolog.Logger) (*WrapperProxy, error) {\n \tvar p WrapperProxy\n-\tp.DebugLogger = debugLogger\n+\tp.DebugLogger = log.New(&gafUtils.ToZeroLogDebug{Logger: debugLogger}, \"\", 0)",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1605319254",
        "repo_full_name": "snyk/cli",
        "pr_number": 5244,
        "pr_file": "cliv2/internal/proxy/proxy.go",
        "discussion_id": "1605319254",
        "commented_code": "@@ -50,9 +53,9 @@ const (\n \tPROXY_USERNAME = \"snykcli\"\n )\n \n-func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *log.Logger) (*WrapperProxy, error) {\n+func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *zerolog.Logger) (*WrapperProxy, error) {\n \tvar p WrapperProxy\n-\tp.DebugLogger = debugLogger\n+\tp.DebugLogger = log.New(&gafUtils.ToZeroLogDebug{Logger: debugLogger}, \"\", 0)",
        "comment_created_at": "2024-05-17T16:55:59+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: try to use DebugLogger as zerolog logger, this will be possible every except of two places. For these places you could add an additional property here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1605320403",
    "pr_number": 5244,
    "pr_file": "cliv2/internal/proxy/proxy.go",
    "created_at": "2024-05-17T16:57:12+00:00",
    "commented_code": "if err != nil {\n \t\tp.DebugLogger.Printf(\"Failed to add header: %s\", err)\n \t}\n+\tzerologLogger := zerolog.New(os.Stderr).With().Timestamp().Logger()",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1605320403",
        "repo_full_name": "snyk/cli",
        "pr_number": 5244,
        "pr_file": "cliv2/internal/proxy/proxy.go",
        "discussion_id": "1605320403",
        "commented_code": "@@ -146,6 +149,9 @@ func (p *WrapperProxy) replaceVersionHandler(r *http.Request, ctx *goproxy.Proxy\n \tif err != nil {\n \t\tp.DebugLogger.Printf(\"Failed to add header: %s\", err)\n \t}\n+\tzerologLogger := zerolog.New(os.Stderr).With().Timestamp().Logger()",
        "comment_created_at": "2024-05-17T16:57:12+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Issue: you need to use the centrally supplied logger! It is not correct to create a new one here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1605323334",
    "pr_number": 5244,
    "pr_file": "cliv2/pkg/basic_workflows/legacycli.go",
    "created_at": "2024-05-17T17:00:10+00:00",
    "commented_code": "var errWriter *bufio.Writer\n \n \tconfig := invocation.GetConfiguration()\n-\tdebugLogger := invocation.GetLogger()\n+\tdebugLogger := invocation.GetEnhancedLogger()",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1605323334",
        "repo_full_name": "snyk/cli",
        "pr_number": 5244,
        "pr_file": "cliv2/pkg/basic_workflows/legacycli.go",
        "discussion_id": "1605323334",
        "commented_code": "@@ -66,7 +67,7 @@ func legacycliWorkflow(\n \tvar errWriter *bufio.Writer\n \n \tconfig := invocation.GetConfiguration()\n-\tdebugLogger := invocation.GetLogger()\n+\tdebugLogger := invocation.GetEnhancedLogger()",
        "comment_created_at": "2024-05-17T17:00:10+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: I would use both logger types from the context instead of creating a ToZeroLogDebug below. The logic is at one place and if we want to remove one day the log.Logger usage, it will be easier to find. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1608144898",
    "pr_number": 5244,
    "pr_file": "cliv2/internal/proxy/proxy.go",
    "created_at": "2024-05-21T11:15:47+00:00",
    "commented_code": "}\n \n \tif httpauth.IsSupportedMechanism(p.authMechanism) { // since Negotiate is not covered by the go http stack, we skip its proxy handling and inject a custom Handling via the DialContext\n-\t\tp.authenticator = httpauth.NewProxyAuthenticator(p.authMechanism, p.upstreamProxy, p.DebugLogger)\n+\t\tp.authenticator = httpauth.NewProxyAuthenticator(p.authMechanism, p.upstreamProxy, log.Default())",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1608144898",
        "repo_full_name": "snyk/cli",
        "pr_number": 5244,
        "pr_file": "cliv2/internal/proxy/proxy.go",
        "discussion_id": "1608144898",
        "commented_code": "@@ -242,7 +245,7 @@ func (p *WrapperProxy) SetUpstreamProxyAuthentication(mechanism httpauth.Authent\n \t}\n \n \tif httpauth.IsSupportedMechanism(p.authMechanism) { // since Negotiate is not covered by the go http stack, we skip its proxy handling and inject a custom Handling via the DialContext\n-\t\tp.authenticator = httpauth.NewProxyAuthenticator(p.authMechanism, p.upstreamProxy, p.DebugLogger)\n+\t\tp.authenticator = httpauth.NewProxyAuthenticator(p.authMechanism, p.upstreamProxy, log.Default())",
        "comment_created_at": "2024-05-21T11:15:47+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Issue: this needs to use a log.Logger that uses a writer to zerolog `ToZeroLogDebug`! Otherwise, the log.Default logger doesn't respect the debug configuration and logger configuration that is centrally done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1608146671",
    "pr_number": 5244,
    "pr_file": "cliv2/internal/proxy/proxy.go",
    "created_at": "2024-05-21T11:17:14+00:00",
    "commented_code": "PROXY_USERNAME = \"snykcli\"\n )\n \n-func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *log.Logger) (*WrapperProxy, error) {\n+func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *zerolog.Logger) (*WrapperProxy, error) {\n \tvar p WrapperProxy\n-\tp.DebugLogger = debugLogger\n \tp.cliVersion = cliVersion\n \tp.addHeaderFunc = func(request *http.Request) error { return nil }\n \n \tcacheDirectory := config.GetString(configuration.CACHE_PATH)\n \tinsecureSkipVerify := config.GetBool(configuration.INSECURE_HTTPS)\n \n \tcertName := \"snyk-embedded-proxy\"\n-\tcertPEMBlock, keyPEMBlock, err := certs.MakeSelfSignedCert(certName, []string{}, p.DebugLogger)\n+\tp.DebugLogger = debugLogger\n+\tcertPEMBlock, keyPEMBlock, err := certs.MakeSelfSignedCert(certName, []string{}, log.Default())",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1608146671",
        "repo_full_name": "snyk/cli",
        "pr_number": 5244,
        "pr_file": "cliv2/internal/proxy/proxy.go",
        "discussion_id": "1608146671",
        "commented_code": "@@ -50,17 +52,17 @@ const (\n \tPROXY_USERNAME = \"snykcli\"\n )\n \n-func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *log.Logger) (*WrapperProxy, error) {\n+func NewWrapperProxy(config configuration.Configuration, cliVersion string, debugLogger *zerolog.Logger) (*WrapperProxy, error) {\n \tvar p WrapperProxy\n-\tp.DebugLogger = debugLogger\n \tp.cliVersion = cliVersion\n \tp.addHeaderFunc = func(request *http.Request) error { return nil }\n \n \tcacheDirectory := config.GetString(configuration.CACHE_PATH)\n \tinsecureSkipVerify := config.GetBool(configuration.INSECURE_HTTPS)\n \n \tcertName := \"snyk-embedded-proxy\"\n-\tcertPEMBlock, keyPEMBlock, err := certs.MakeSelfSignedCert(certName, []string{}, p.DebugLogger)\n+\tp.DebugLogger = debugLogger\n+\tcertPEMBlock, keyPEMBlock, err := certs.MakeSelfSignedCert(certName, []string{}, log.Default())",
        "comment_created_at": "2024-05-21T11:17:14+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Issue: this needs to use a log.Logger that uses a writer to zerolog ToZeroLogDebug! Otherwise, the log.Default logger doesn't respect the debug configuration and logger configuration that is centrally done.\r\n\r\nSame as below!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1402971037",
    "pr_number": 4942,
    "pr_file": "cliv2/cmd/cliv2/main.go",
    "created_at": "2023-11-23T06:56:55+00:00",
    "commented_code": "return exitCode\n }\n+\n+func setTimeout(config configuration.Configuration) {\n+\ttimeout := config.GetInt(configuration.TIMEOUT)\n+\tif timeout == 0 {\n+\t\treturn\n+\t}\n+\tdebugLogger.Printf(\"Command timeout set for %d seconds\", timeout)\n+\tgo func() {\n+\t\t<-time.After(time.Duration(timeout) * time.Second)\n+\t\tfmt.Fprintln(os.Stderr, \"command timed out\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1402971037",
        "repo_full_name": "snyk/cli",
        "pr_number": 4942,
        "pr_file": "cliv2/cmd/cliv2/main.go",
        "discussion_id": "1402971037",
        "commented_code": "@@ -467,3 +468,16 @@ func MainWithErrorCode() int {\n \n \treturn exitCode\n }\n+\n+func setTimeout(config configuration.Configuration) {\n+\ttimeout := config.GetInt(configuration.TIMEOUT)\n+\tif timeout == 0 {\n+\t\treturn\n+\t}\n+\tdebugLogger.Printf(\"Command timeout set for %d seconds\", timeout)\n+\tgo func() {\n+\t\t<-time.After(time.Duration(timeout) * time.Second)\n+\t\tfmt.Fprintln(os.Stderr, \"command timed out\")",
        "comment_created_at": "2023-11-23T06:56:55+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "suggestion: this should use the logger :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1049720529",
    "pr_number": 4247,
    "pr_file": "cliv2/internal/cliv2/cliv2.go",
    "created_at": "2022-12-15T14:38:30+00:00",
    "commented_code": "return &cli, nil\n }\n \n+func (c *CLI) ClearCache() error {\n+\t// Get files in directory\n+    fileInfo, err := os.ReadDir(c.CacheDirectory)\n+    if err != nil {\n+        return err\n+    }\n+\n+\t// Get current version binary's path\n+\tv1BinaryPath := path.Dir(c.v1BinaryLocation)\n+\tvar maxVersionToDelete = 5\n+    for i, file := range fileInfo {\n+        currentPath := path.Join(c.CacheDirectory, file.Name())\n+\t\tif currentPath != v1BinaryPath {\n+\t\t\terr = os.RemoveAll(currentPath)\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(\"Error deleting an old version directory\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1049720529",
        "repo_full_name": "snyk/cli",
        "pr_number": 4247,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1049720529",
        "commented_code": "@@ -69,6 +72,33 @@ func NewCLIv2(cacheDirectory string, debugLogger *log.Logger) (*CLI, error) {\n \treturn &cli, nil\n }\n \n+func (c *CLI) ClearCache() error {\n+\t// Get files in directory\n+    fileInfo, err := os.ReadDir(c.CacheDirectory)\n+    if err != nil {\n+        return err\n+    }\n+\n+\t// Get current version binary's path\n+\tv1BinaryPath := path.Dir(c.v1BinaryLocation)\n+\tvar maxVersionToDelete = 5\n+    for i, file := range fileInfo {\n+        currentPath := path.Join(c.CacheDirectory, file.Name())\n+\t\tif currentPath != v1BinaryPath {\n+\t\t\terr = os.RemoveAll(currentPath)\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Println(\"Error deleting an old version directory\")",
        "comment_created_at": "2022-12-15T14:38:30+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Suggestion: replace fmt.Println() by c.DebugLogger.Println() and add the currentPath",
        "pr_file_module": null
      }
    ]
  }
]