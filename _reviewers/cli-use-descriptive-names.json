[
  {
    "discussion_id": "1286900434",
    "pr_number": 4646,
    "pr_file": "src/lib/snyk-test/common.ts",
    "created_at": "2023-08-08T10:04:25+00:00",
    "commented_code": "export const RETRY_ATTEMPTS = 3;\n export const RETRY_DELAY = 500;\n+\n+// depGraphData formats the given depGrahData with the targetName as expected by\n+// the `depgraph` CLI workflow.\n+export function depGraphData(dg: DepGraphData, targetName: string): string {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1286900434",
        "repo_full_name": "snyk/cli",
        "pr_number": 4646,
        "pr_file": "src/lib/snyk-test/common.ts",
        "discussion_id": "1286900434",
        "commented_code": "@@ -68,3 +70,13 @@ export type FailOn = 'all' | 'upgradable' | 'patchable';\n \n export const RETRY_ATTEMPTS = 3;\n export const RETRY_DELAY = 500;\n+\n+// depGraphData formats the given depGrahData with the targetName as expected by\n+// the `depgraph` CLI workflow.\n+export function depGraphData(dg: DepGraphData, targetName: string): string {",
        "comment_created_at": "2023-08-08T10:04:25+00:00",
        "comment_author": "Jdunsby",
        "comment_body": "nit:\r\nFunction name could be more descriptive of the process/output, \r\ne.g. depGraphToOutputString\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1288767227",
        "repo_full_name": "snyk/cli",
        "pr_number": 4646,
        "pr_file": "src/lib/snyk-test/common.ts",
        "discussion_id": "1286900434",
        "commented_code": "@@ -68,3 +70,13 @@ export type FailOn = 'all' | 'upgradable' | 'patchable';\n \n export const RETRY_ATTEMPTS = 3;\n export const RETRY_DELAY = 500;\n+\n+// depGraphData formats the given depGrahData with the targetName as expected by\n+// the `depgraph` CLI workflow.\n+export function depGraphData(dg: DepGraphData, targetName: string): string {",
        "comment_created_at": "2023-08-09T15:48:13+00:00",
        "comment_author": "shlomiSnyk",
        "comment_body": "Thanks @Jdunsby \ud83d\ude4f \r\nBesides that is there anything else needed to approve and merge it?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2022582064",
    "pr_number": 5730,
    "pr_file": "src/lib/iac/test/v2/analytics/iac-cloud-context.ts",
    "created_at": "2025-04-01T10:24:09+00:00",
    "commented_code": ">;\n \n export function getIacCloudContext(\n-  testConfig: TestConfig,\n+  testConfig: Partial<TestConfig>,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "2022582064",
        "repo_full_name": "snyk/cli",
        "pr_number": 5730,
        "pr_file": "src/lib/iac/test/v2/analytics/iac-cloud-context.ts",
        "discussion_id": "2022582064",
        "commented_code": "@@ -11,7 +11,7 @@ type IacCloudContext = Pick<\n >;\n \n export function getIacCloudContext(\n-  testConfig: TestConfig,\n+  testConfig: Partial<TestConfig>,",
        "comment_created_at": "2025-04-01T10:24:09+00:00",
        "comment_author": "j-luong",
        "comment_body": "question: why not use `snykCloudEnvironment?: string` here instead of a partially applied interface? Makes it much clearer what the parameters are.",
        "pr_file_module": null
      },
      {
        "comment_id": "2022739616",
        "repo_full_name": "snyk/cli",
        "pr_number": 5730,
        "pr_file": "src/lib/iac/test/v2/analytics/iac-cloud-context.ts",
        "discussion_id": "2022582064",
        "commented_code": "@@ -11,7 +11,7 @@ type IacCloudContext = Pick<\n >;\n \n export function getIacCloudContext(\n-  testConfig: TestConfig,\n+  testConfig: Partial<TestConfig>,",
        "comment_created_at": "2025-04-01T12:16:50+00:00",
        "comment_author": "sergiu-snyk",
        "comment_body": "You're right. IDK why didn't consider it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1177646482",
    "pr_number": 4569,
    "pr_file": "src/lib/plugins/sast/format/output-format.ts",
    "created_at": "2023-04-26T10:01:22+00:00",
    "commented_code": "const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1177646482",
        "repo_full_name": "snyk/cli",
        "pr_number": 4569,
        "pr_file": "src/lib/plugins/sast/format/output-format.ts",
        "discussion_id": "1177646482",
        "commented_code": "@@ -10,16 +10,25 @@ import { CodeTestResults } from '../types';\n \n const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,",
        "comment_created_at": "2023-04-26T10:01:22+00:00",
        "comment_author": "strassl-snyk",
        "comment_body": "enh: I find multiple unnamed function arguments (particularly strings and booleans) to be quite hard to read, as the call site quickly starts to look like `doTheThing(\"foo\", \"bar\", false, true, false)`. Creating an argument object could be helpful here.",
        "pr_file_module": null
      },
      {
        "comment_id": "1180107781",
        "repo_full_name": "snyk/cli",
        "pr_number": 4569,
        "pr_file": "src/lib/plugins/sast/format/output-format.ts",
        "discussion_id": "1177646482",
        "commented_code": "@@ -10,16 +10,25 @@ import { CodeTestResults } from '../types';\n \n const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,",
        "comment_created_at": "2023-04-28T08:42:28+00:00",
        "comment_author": "patricia-v",
        "comment_body": "I understand that we could send a new args object, but could we just send the `options` object as an argument and check for `options['report']` in this case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1180482386",
        "repo_full_name": "snyk/cli",
        "pr_number": 4569,
        "pr_file": "src/lib/plugins/sast/format/output-format.ts",
        "discussion_id": "1177646482",
        "commented_code": "@@ -10,16 +10,25 @@ import { CodeTestResults } from '../types';\n \n const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,",
        "comment_created_at": "2023-04-28T14:27:00+00:00",
        "comment_author": "strassl-snyk",
        "comment_body": "I was suggesting something like:\r\n\r\n```ts\r\nexport function getCodeDisplayedOutput(args: {\r\n  testResults: CodeTestResults,\r\n  meta: string,\r\n  prefix: string,\r\n  shouldFilterIgnored: boolean,\r\n})\r\n```\r\n\r\nYou could then call the function like this:\r\n```ts\r\ngetCodeDisplayedOutput({\r\n        testResults,\r\n        meta,\r\n        prefix,\r\n        shouldFilterIgnored: options['report'],\r\n})\r\n```\r\n\r\nWhich I find quite a bit easier to understand ",
        "pr_file_module": null
      },
      {
        "comment_id": "1182576671",
        "repo_full_name": "snyk/cli",
        "pr_number": 4569,
        "pr_file": "src/lib/plugins/sast/format/output-format.ts",
        "discussion_id": "1177646482",
        "commented_code": "@@ -10,16 +10,25 @@ import { CodeTestResults } from '../types';\n \n const debug = Debug('code-output');\n \n+function filterIgnoredIssues(analysisResults: Sarif.Result[]): Sarif.Result[] {\n+  return analysisResults.filter(\n+    (rule) => (rule.suppressions?.length ?? 0) === 0,\n+  );\n+}\n+\n export function getCodeDisplayedOutput(\n   testResults: CodeTestResults,\n   meta: string,\n   prefix: string,\n+  shouldFilterIgnored = false,",
        "comment_created_at": "2023-05-02T13:49:21+00:00",
        "comment_author": "patricia-v",
        "comment_body": "Sure, that's a simple enough change \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1174534655",
    "pr_number": 4563,
    "pr_file": "src/lib/plugins/sast/index.ts",
    "created_at": "2023-04-23T08:23:46+00:00",
    "commented_code": "} catch (error) {\n       let err: Error;\n       if (isCodeClientError(error)) {\n-        const isUnauthorized = isUnauthorizedError(error)\n-          ? 'Unauthorized: '\n-          : '';\n-        err = new FailedToRunTestError(\n-          `${isUnauthorized}Failed to run 'code test'`,\n-          error.statusCode,\n-        );\n+        err = throwCodeClientError(error);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1174534655",
        "repo_full_name": "snyk/cli",
        "pr_number": 4563,
        "pr_file": "src/lib/plugins/sast/index.ts",
        "discussion_id": "1174534655",
        "commented_code": "@@ -78,13 +79,7 @@ export const codePlugin: EcosystemPlugin = {\n     } catch (error) {\n       let err: Error;\n       if (isCodeClientError(error)) {\n-        const isUnauthorized = isUnauthorizedError(error)\n-          ? 'Unauthorized: '\n-          : '';\n-        err = new FailedToRunTestError(\n-          `${isUnauthorized}Failed to run 'code test'`,\n-          error.statusCode,\n-        );\n+        err = throwCodeClientError(error);",
        "comment_created_at": "2023-04-23T08:23:46+00:00",
        "comment_author": "vasser",
        "comment_body": "nit. This function does not really throw an error, the name could be improved (I know, the worst type of comments \ud83d\ude38)\r\n\r\n```suggestion\r\n        err = resolveCodeClientError(error);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1235017808",
    "pr_number": 4670,
    "pr_file": "src/lib/formatters/get-sarif-result.ts",
    "created_at": "2023-06-20T09:45:09+00:00",
    "commented_code": "{\n           physicalLocation: {\n             artifactLocation: {\n-              uri: testResult.displayTargetFile || testResult.path,\n+              uri:\n+                testResult.displayTargetFile ||\n+                getArtifactLocationUriFromPath(testResult.path),",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1235017808",
        "repo_full_name": "snyk/cli",
        "pr_number": 4670,
        "pr_file": "src/lib/formatters/get-sarif-result.ts",
        "discussion_id": "1235017808",
        "commented_code": "@@ -18,7 +18,9 @@ export function getResults(testResult): sarif.Result[] {\n         {\n           physicalLocation: {\n             artifactLocation: {\n-              uri: testResult.displayTargetFile || testResult.path,\n+              uri:\n+                testResult.displayTargetFile ||\n+                getArtifactLocationUriFromPath(testResult.path),",
        "comment_created_at": "2023-06-20T09:45:09+00:00",
        "comment_author": "tommyknows",
        "comment_body": "This `path` variable is weirdly named, I would think that an image name would rather be in `displayTargetFile` than in `path`....can we add a comment to explain that? \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1235146225",
        "repo_full_name": "snyk/cli",
        "pr_number": 4670,
        "pr_file": "src/lib/formatters/get-sarif-result.ts",
        "discussion_id": "1235017808",
        "commented_code": "@@ -18,7 +18,9 @@ export function getResults(testResult): sarif.Result[] {\n         {\n           physicalLocation: {\n             artifactLocation: {\n-              uri: testResult.displayTargetFile || testResult.path,\n+              uri:\n+                testResult.displayTargetFile ||\n+                getArtifactLocationUriFromPath(testResult.path),",
        "comment_created_at": "2023-06-20T11:45:24+00:00",
        "comment_author": "rmutuleanu",
        "comment_body": "The `displayTargetFile` is what we are passing to the `--file` flag (i.e. Dockerfile in our case)\r\n\r\nThe test result `path` seem to be the image reference used and with an optional project name appended in some cases (e.g. `alpine`, `alpine:3.18.0`, `alpine/kubernetes-monitor`, last one has the project name appended)",
        "pr_file_module": null
      },
      {
        "comment_id": "1235146834",
        "repo_full_name": "snyk/cli",
        "pr_number": 4670,
        "pr_file": "src/lib/formatters/get-sarif-result.ts",
        "discussion_id": "1235017808",
        "commented_code": "@@ -18,7 +18,9 @@ export function getResults(testResult): sarif.Result[] {\n         {\n           physicalLocation: {\n             artifactLocation: {\n-              uri: testResult.displayTargetFile || testResult.path,\n+              uri:\n+                testResult.displayTargetFile ||\n+                getArtifactLocationUriFromPath(testResult.path),",
        "comment_created_at": "2023-06-20T11:45:59+00:00",
        "comment_author": "rmutuleanu",
        "comment_body": "I can add a comment to explain this",
        "pr_file_module": null
      },
      {
        "comment_id": "1235178136",
        "repo_full_name": "snyk/cli",
        "pr_number": 4670,
        "pr_file": "src/lib/formatters/get-sarif-result.ts",
        "discussion_id": "1235017808",
        "commented_code": "@@ -18,7 +18,9 @@ export function getResults(testResult): sarif.Result[] {\n         {\n           physicalLocation: {\n             artifactLocation: {\n-              uri: testResult.displayTargetFile || testResult.path,\n+              uri:\n+                testResult.displayTargetFile ||\n+                getArtifactLocationUriFromPath(testResult.path),",
        "comment_created_at": "2023-06-20T12:14:58+00:00",
        "comment_author": "tommyknows",
        "comment_body": "Yeah I think that would be nice \ud83d\ude05 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1104352446",
    "pr_number": 4399,
    "pr_file": "src/lib/ecosystems/test.ts",
    "created_at": "2023-02-13T11:38:05+00:00",
    "commented_code": "sarifRes,\n     );\n   }\n-  const scanResultsByPath: { [dir: string]: ScanResult[] } = {};\n+  const scanResultsByPath: ScanResultsByPath = {};",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1104352446",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/test.ts",
        "discussion_id": "1104352446",
        "commented_code": "@@ -31,7 +35,7 @@ export async function testEcosystem(\n       sarifRes,\n     );\n   }\n-  const scanResultsByPath: { [dir: string]: ScanResult[] } = {};\n+  const scanResultsByPath: ScanResultsByPath = {};",
        "comment_created_at": "2023-02-13T11:38:05+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "nitpick: Naming variables the same way as data structures can be confusing. Maybe just rename the variables here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1104368599",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/test.ts",
        "discussion_id": "1104352446",
        "commented_code": "@@ -31,7 +35,7 @@ export async function testEcosystem(\n       sarifRes,\n     );\n   }\n-  const scanResultsByPath: { [dir: string]: ScanResult[] } = {};\n+  const scanResultsByPath: ScanResultsByPath = {};",
        "comment_created_at": "2023-02-13T11:53:48+00:00",
        "comment_author": "dekelund",
        "comment_body": "I would argue for \"result\" as variable name, less stuttering. At least if it's the only \"result\" in this context. Otherwise just `scanResult`",
        "pr_file_module": null
      },
      {
        "comment_id": "1104442927",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/test.ts",
        "discussion_id": "1104352446",
        "commented_code": "@@ -31,7 +35,7 @@ export async function testEcosystem(\n       sarifRes,\n     );\n   }\n-  const scanResultsByPath: { [dir: string]: ScanResult[] } = {};\n+  const scanResultsByPath: ScanResultsByPath = {};",
        "comment_created_at": "2023-02-13T13:02:19+00:00",
        "comment_author": "danlucian",
        "comment_body": "Good catch! Renamed to `results`, thank you both! \ud83d\ude4f ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1104369859",
    "pr_number": 4399,
    "pr_file": "src/lib/ecosystems/unmanaged/utils.ts",
    "created_at": "2023-02-13T11:55:07+00:00",
    "commented_code": "url: `${config.API_REST_URL}/self?version=2022-08-12~experimental`,\n   });\n }\n+\n+export async function getUnmanagedDepGraph(scans: {\n+  [dir: string]: ScanResult[];\n+}) {\n+  const results: DepGraphDataOpenAPI[] = [];\n+  const orgId = (await getSelf())?.data.attributes.default_org_context;\n+\n+  for (const [, scanResults] of Object.entries(scans)) {\n+    for (const scanResult of scanResults) {\n+      const id = await submitHashes(",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1104369859",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/unmanaged/utils.ts",
        "discussion_id": "1104369859",
        "commented_code": "@@ -71,3 +74,27 @@ export function getSelf() {\n     url: `${config.API_REST_URL}/self?version=2022-08-12~experimental`,\n   });\n }\n+\n+export async function getUnmanagedDepGraph(scans: {\n+  [dir: string]: ScanResult[];\n+}) {\n+  const results: DepGraphDataOpenAPI[] = [];\n+  const orgId = (await getSelf())?.data.attributes.default_org_context;\n+\n+  for (const [, scanResults] of Object.entries(scans)) {\n+    for (const scanResult of scanResults) {\n+      const id = await submitHashes(",
        "comment_created_at": "2023-02-13T11:55:07+00:00",
        "comment_author": "dekelund",
        "comment_body": "Maybe rename `id` to `taskId` or similar",
        "pr_file_module": null
      },
      {
        "comment_id": "1104370543",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/unmanaged/utils.ts",
        "discussion_id": "1104369859",
        "commented_code": "@@ -71,3 +74,27 @@ export function getSelf() {\n     url: `${config.API_REST_URL}/self?version=2022-08-12~experimental`,\n   });\n }\n+\n+export async function getUnmanagedDepGraph(scans: {\n+  [dir: string]: ScanResult[];\n+}) {\n+  const results: DepGraphDataOpenAPI[] = [];\n+  const orgId = (await getSelf())?.data.attributes.default_org_context;\n+\n+  for (const [, scanResults] of Object.entries(scans)) {\n+    for (const scanResult of scanResults) {\n+      const id = await submitHashes(",
        "comment_created_at": "2023-02-13T11:55:49+00:00",
        "comment_author": "dekelund",
        "comment_body": "just to differentiate between orgId and taskId",
        "pr_file_module": null
      },
      {
        "comment_id": "1104444615",
        "repo_full_name": "snyk/cli",
        "pr_number": 4399,
        "pr_file": "src/lib/ecosystems/unmanaged/utils.ts",
        "discussion_id": "1104369859",
        "commented_code": "@@ -71,3 +74,27 @@ export function getSelf() {\n     url: `${config.API_REST_URL}/self?version=2022-08-12~experimental`,\n   });\n }\n+\n+export async function getUnmanagedDepGraph(scans: {\n+  [dir: string]: ScanResult[];\n+}) {\n+  const results: DepGraphDataOpenAPI[] = [];\n+  const orgId = (await getSelf())?.data.attributes.default_org_context;\n+\n+  for (const [, scanResults] of Object.entries(scans)) {\n+    for (const scanResult of scanResults) {\n+      const id = await submitHashes(",
        "comment_created_at": "2023-02-13T13:03:59+00:00",
        "comment_author": "danlucian",
        "comment_body": "Makes sense, updated! Thank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "951690112",
    "pr_number": 3612,
    "pr_file": "src/lib/formatters/iac-output/v2/share-results.ts",
    "created_at": "2022-08-22T17:12:39+00:00",
    "commented_code": "-import { IacOutputMeta } from '../../../types';\n import config from '../../../config';\n import { EOL } from 'os';\n import { colors, contentPadding } from './utils';\n \n-export function formatShareResultsOutput(iacOutputMeta: IacOutputMeta) {\n+export function formatShareResultsOutput(orgName: string, projectName: string) {",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "951690112",
        "repo_full_name": "snyk/cli",
        "pr_number": 3612,
        "pr_file": "src/lib/formatters/iac-output/v2/share-results.ts",
        "discussion_id": "951690112",
        "commented_code": "@@ -1,20 +1,19 @@\n-import { IacOutputMeta } from '../../../types';\n import config from '../../../config';\n import { EOL } from 'os';\n import { colors, contentPadding } from './utils';\n \n-export function formatShareResultsOutput(iacOutputMeta: IacOutputMeta) {\n+export function formatShareResultsOutput(orgName: string, projectName: string) {",
        "comment_created_at": "2022-08-22T17:12:39+00:00",
        "comment_author": "ipapast",
        "comment_body": "I'm curious, do you prefer 2 parameters over one from the same object? or is it something different I'm not seeing?",
        "pr_file_module": null
      },
      {
        "comment_id": "952255257",
        "repo_full_name": "snyk/cli",
        "pr_number": 3612,
        "pr_file": "src/lib/formatters/iac-output/v2/share-results.ts",
        "discussion_id": "951690112",
        "commented_code": "@@ -1,20 +1,19 @@\n-import { IacOutputMeta } from '../../../types';\n import config from '../../../config';\n import { EOL } from 'os';\n import { colors, contentPadding } from './utils';\n \n-export function formatShareResultsOutput(iacOutputMeta: IacOutputMeta) {\n+export function formatShareResultsOutput(orgName: string, projectName: string) {",
        "comment_created_at": "2022-08-23T07:37:04+00:00",
        "comment_author": "YairZ101",
        "comment_body": "A few reasons:\r\n1. The main reason, we stopped using the type `IacOutputMeta` in the new output logic and I didn't want to create a variable of it just for this specific function so instead I split the argument of the function to 2.\r\n2. I think it makes it more clear what are the necessary arguments for this function, giving it an object makes it a bit vague in my opinion, I think going forward I'll try to stop giving functions a whole object and instead I'll try to specify the exact arguments that are needed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "930141110",
    "pr_number": 3492,
    "pr_file": "test/jest/acceptance/iac/output/json.spec.ts",
    "created_at": "2022-07-26T15:56:06+00:00",
    "commented_code": "+import * as fs from 'fs';\n+import * as pathLib from 'path';\n+import { matchers } from 'jest-json-schema';\n+\n+import { FakeServer } from '../../../../acceptance/fake-server';\n+import { startMockServer } from '../helpers';\n+\n+expect.extend(matchers);\n+\n+const jsonOutputForSingleFileSchema = JSON.parse(fs.readFileSync(pathLib.join('..', '..', '..', '..', 'fixtures', 'iac', 'test-output', 'json-result-schema.json'), 'utf-8'))\n+\n+const jsonOutputForMultipleFileSchema = {\n+  type: 'array',\n+  items: jsonOutputForSingleFileSchema,\n+};\n+\n+jest.setTimeout(1_000 * 30);\n+\n+describe('iac test json output', () => {\n+  let server: FakeServer;\n+  let run: (\n+    cmd: string,\n+    overrides?: Record<string, string>,\n+  ) => Promise<{ stdout: string; stderr: string; exitCode: number }>;\n+  let teardown: () => Promise<unknown>;\n+\n+  beforeAll(async () => {\n+    ({ server, run, teardown } = await startMockServer());\n+  });\n+\n+  afterEach(() => {\n+    server.restore();\n+  });\n+\n+  afterAll(async () => {\n+    await teardown();\n+  });\n+\n+  describe('with a single file', () => {\n+    it('should output a result in the correct schema', async () => {\n+      // Arrange\n+      const dirPath = 'iac/cloudformation/aurora-valid.yml';",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "930141110",
        "repo_full_name": "snyk/cli",
        "pr_number": 3492,
        "pr_file": "test/jest/acceptance/iac/output/json.spec.ts",
        "discussion_id": "930141110",
        "commented_code": "@@ -0,0 +1,66 @@\n+import * as fs from 'fs';\n+import * as pathLib from 'path';\n+import { matchers } from 'jest-json-schema';\n+\n+import { FakeServer } from '../../../../acceptance/fake-server';\n+import { startMockServer } from '../helpers';\n+\n+expect.extend(matchers);\n+\n+const jsonOutputForSingleFileSchema = JSON.parse(fs.readFileSync(pathLib.join('..', '..', '..', '..', 'fixtures', 'iac', 'test-output', 'json-result-schema.json'), 'utf-8'))\n+\n+const jsonOutputForMultipleFileSchema = {\n+  type: 'array',\n+  items: jsonOutputForSingleFileSchema,\n+};\n+\n+jest.setTimeout(1_000 * 30);\n+\n+describe('iac test json output', () => {\n+  let server: FakeServer;\n+  let run: (\n+    cmd: string,\n+    overrides?: Record<string, string>,\n+  ) => Promise<{ stdout: string; stderr: string; exitCode: number }>;\n+  let teardown: () => Promise<unknown>;\n+\n+  beforeAll(async () => {\n+    ({ server, run, teardown } = await startMockServer());\n+  });\n+\n+  afterEach(() => {\n+    server.restore();\n+  });\n+\n+  afterAll(async () => {\n+    await teardown();\n+  });\n+\n+  describe('with a single file', () => {\n+    it('should output a result in the correct schema', async () => {\n+      // Arrange\n+      const dirPath = 'iac/cloudformation/aurora-valid.yml';",
        "comment_created_at": "2022-07-26T15:56:06+00:00",
        "comment_author": "maxjeffos",
        "comment_body": "nitpick: `dirPath` name is sub-optimal because it isn't a directory path but rather a path to a file.",
        "pr_file_module": null
      },
      {
        "comment_id": "930144727",
        "repo_full_name": "snyk/cli",
        "pr_number": 3492,
        "pr_file": "test/jest/acceptance/iac/output/json.spec.ts",
        "discussion_id": "930141110",
        "commented_code": "@@ -0,0 +1,66 @@\n+import * as fs from 'fs';\n+import * as pathLib from 'path';\n+import { matchers } from 'jest-json-schema';\n+\n+import { FakeServer } from '../../../../acceptance/fake-server';\n+import { startMockServer } from '../helpers';\n+\n+expect.extend(matchers);\n+\n+const jsonOutputForSingleFileSchema = JSON.parse(fs.readFileSync(pathLib.join('..', '..', '..', '..', 'fixtures', 'iac', 'test-output', 'json-result-schema.json'), 'utf-8'))\n+\n+const jsonOutputForMultipleFileSchema = {\n+  type: 'array',\n+  items: jsonOutputForSingleFileSchema,\n+};\n+\n+jest.setTimeout(1_000 * 30);\n+\n+describe('iac test json output', () => {\n+  let server: FakeServer;\n+  let run: (\n+    cmd: string,\n+    overrides?: Record<string, string>,\n+  ) => Promise<{ stdout: string; stderr: string; exitCode: number }>;\n+  let teardown: () => Promise<unknown>;\n+\n+  beforeAll(async () => {\n+    ({ server, run, teardown } = await startMockServer());\n+  });\n+\n+  afterEach(() => {\n+    server.restore();\n+  });\n+\n+  afterAll(async () => {\n+    await teardown();\n+  });\n+\n+  describe('with a single file', () => {\n+    it('should output a result in the correct schema', async () => {\n+      // Arrange\n+      const dirPath = 'iac/cloudformation/aurora-valid.yml';",
        "comment_created_at": "2022-07-26T15:58:35+00:00",
        "comment_author": "ofekatr",
        "comment_body": "Right you are, this was a leftover that needed to change.\r\nThanks for catching this one!",
        "pr_file_module": null
      }
    ]
  }
]