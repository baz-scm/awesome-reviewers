[
  {
    "discussion_id": "1734047240",
    "pr_number": 5443,
    "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
    "created_at": "2024-08-28T06:08:59+00:00",
    "commented_code": "caMutex.Lock()\n \tdefer caMutex.Unlock()\n \n+\tcreateCA := false\n+\n \tif caSingleton == nil {\n+\t\tcreateCA = true\n+\t} else if _, existsError := os.Stat(caSingleton.CertFile); errors.Is(existsError, fs.ErrNotExist) { // certificate file does not exist",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1734047240",
        "repo_full_name": "snyk/cli",
        "pr_number": 5443,
        "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
        "discussion_id": "1734047240",
        "commented_code": "@@ -62,12 +64,26 @@ func GetGlobalCertAuthority(config configuration.Configuration, debugLogger *zer\n \tcaMutex.Lock()\n \tdefer caMutex.Unlock()\n \n+\tcreateCA := false\n+\n \tif caSingleton == nil {\n+\t\tcreateCA = true\n+\t} else if _, existsError := os.Stat(caSingleton.CertFile); errors.Is(existsError, fs.ErrNotExist) { // certificate file does not exist",
        "comment_created_at": "2024-08-28T06:08:59+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "I think you don't even need to check the type of error here - any error would be critical at this point and a regeneration should be done.",
        "pr_file_module": null
      },
      {
        "comment_id": "1734048636",
        "repo_full_name": "snyk/cli",
        "pr_number": 5443,
        "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
        "discussion_id": "1734047240",
        "commented_code": "@@ -62,12 +64,26 @@ func GetGlobalCertAuthority(config configuration.Configuration, debugLogger *zer\n \tcaMutex.Lock()\n \tdefer caMutex.Unlock()\n \n+\tcreateCA := false\n+\n \tif caSingleton == nil {\n+\t\tcreateCA = true\n+\t} else if _, existsError := os.Stat(caSingleton.CertFile); errors.Is(existsError, fs.ErrNotExist) { // certificate file does not exist",
        "comment_created_at": "2024-08-28T06:10:31+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "I'm wondering if setting an exclusive flock on the cert file while the process is running would be appropriate.",
        "pr_file_module": null
      },
      {
        "comment_id": "1736723190",
        "repo_full_name": "snyk/cli",
        "pr_number": 5443,
        "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
        "discussion_id": "1734047240",
        "commented_code": "@@ -62,12 +64,26 @@ func GetGlobalCertAuthority(config configuration.Configuration, debugLogger *zer\n \tcaMutex.Lock()\n \tdefer caMutex.Unlock()\n \n+\tcreateCA := false\n+\n \tif caSingleton == nil {\n+\t\tcreateCA = true\n+\t} else if _, existsError := os.Stat(caSingleton.CertFile); errors.Is(existsError, fs.ErrNotExist) { // certificate file does not exist",
        "comment_created_at": "2024-08-29T16:57:14+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "This would probably be in addition to restoring the file I assume.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741788070",
        "repo_full_name": "snyk/cli",
        "pr_number": 5443,
        "pr_file": "cliv2/pkg/basic_workflows/globalresources.go",
        "discussion_id": "1734047240",
        "commented_code": "@@ -62,12 +64,26 @@ func GetGlobalCertAuthority(config configuration.Configuration, debugLogger *zer\n \tcaMutex.Lock()\n \tdefer caMutex.Unlock()\n \n+\tcreateCA := false\n+\n \tif caSingleton == nil {\n+\t\tcreateCA = true\n+\t} else if _, existsError := os.Stat(caSingleton.CertFile); errors.Is(existsError, fs.ErrNotExist) { // certificate file does not exist",
        "comment_created_at": "2024-09-03T10:03:40+00:00",
        "comment_author": "thisislawatts",
        "comment_body": "@bastiandoetsch do we want to prevent other processes from _reading_ the file or only modifying it? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1087752434",
    "pr_number": 4373,
    "pr_file": "cliv2/internal/cliv2/cliv2.go",
    "created_at": "2023-01-26T11:54:34+00:00",
    "commented_code": "if _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1087752434",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T11:54:34+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Hm. I wonder how we can automatically solve this. The user shouldn't be bothered about the cache-directory, as they are normally not creating it at all.",
        "pr_file_module": null
      },
      {
        "comment_id": "1087753029",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T11:55:09+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Why can't we use mkdirall in conjunction with a file lock (flock library)?",
        "pr_file_module": null
      },
      {
        "comment_id": "1087760903",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T12:02:10+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "@bastiandoetsch we can use flock but we would need to place the lock file outside of the cache directory, which we are going to create. We can do this, just that we need to consider this in the docs about filesystem access etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "1087769844",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T12:09:57+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "And yes, I agree, the user shouldn't be bothered at all. Per default the CLI determines the cache directory based on OS defaults, these directories exists and we just place a subfolder inside of it, which we can create relatively safe with mkdir. so per default, the assumption is that this error would never happen.\r\n\r\nIt might happen, if a user specifies a custom path.",
        "pr_file_module": null
      },
      {
        "comment_id": "1087813850",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T12:42:52+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Maybe a lockfile in the temp dir?",
        "pr_file_module": null
      },
      {
        "comment_id": "1087973816",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T15:09:05+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Definitely Possible! ",
        "pr_file_module": null
      },
      {
        "comment_id": "1088036136",
        "repo_full_name": "snyk/cli",
        "pr_number": 4373,
        "pr_file": "cliv2/internal/cliv2/cliv2.go",
        "discussion_id": "1087752434",
        "commented_code": "@@ -75,6 +76,10 @@ func (c *CLI) Init() (err error) {\n \t\tif _, err = os.Stat(c.CacheDirectory); os.IsNotExist(err) {\n \t\t\terr = os.Mkdir(c.CacheDirectory, local_utils.CACHEDIR_PERMISSION)\n \t\t\tif err != nil {\n+\t\t\t\t// If the path given contains sub directories, ask user to create them (as using MkdirAll will result in concurrency issues)\n+\t\t\t\tif strings.Contains(c.CacheDirectory, \"/\") {\n+\t\t\t\t\terrors.Wrap(\"Cache directory path contains sub-directories. Please create all sub-directories in the path\")",
        "comment_created_at": "2023-01-26T15:56:05+00:00",
        "comment_author": "Avishagp",
        "comment_body": "After a discussion we decided that this solution should be ok for now as it handles this case, and it's something next to no users will do. We can make this better in the future by changing the location of the lock file like you said @bastiandoetsch @PeterSchafer ",
        "pr_file_module": null
      }
    ]
  }
]