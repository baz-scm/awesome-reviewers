[
  {
    "discussion_id": "1066166805",
    "pr_number": 4196,
    "pr_file": "src/lib/plugins/sast/analysis.ts",
    "created_at": "2023-01-10T18:39:07+00:00",
    "commented_code": "});\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1066166805",
        "repo_full_name": "snyk/cli",
        "pr_number": 4196,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1066166805",
        "commented_code": "@@ -76,7 +76,7 @@ async function getCodeAnalysis(\n     });\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
        "comment_created_at": "2023-01-10T18:39:07+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Question: This looks like a change of behaviour to me. Previously if a token was specified sessionToken contained the plain token value, now it contains `token <tokenvalue>`. Is this considered in the plugins that consume the sessionToken value?",
        "pr_file_module": null
      },
      {
        "comment_id": "1066173803",
        "repo_full_name": "snyk/cli",
        "pr_number": 4196,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1066166805",
        "commented_code": "@@ -76,7 +76,7 @@ async function getCodeAnalysis(\n     });\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
        "comment_created_at": "2023-01-10T18:44:48+00:00",
        "comment_author": "DarrellMozingo",
        "comment_body": "Good spot! Yes it's a change in behaviour, and also very much intended :)\r\n\r\nThat session token gets passed untouched through the code-client plugin ([see here](https://github.com/snyk/code-client/blob/3c80c42fae0cfca7e742ca6e477049e8e7d4ab0d/src/http.ts#L186)), right to deeproxy. Deeproxy passes it onto an endpoint in Registry ([see here](https://github.com/snyk/deeproxy/blob/f1fcf5bab176ae670149f409393f20238f024aa0/src/middleware/snykTokenVerification.ts#L67)).\r\n\r\nThat endpoint used to be called directly against Registry, and registry used to accept an Authorization header with just the key (old and weird quirk).\r\n\r\nWe're now calling that endpoint via the API Gateway, which will handle api key and oauth token validation for the endpoint. It supports the old method still (just passing an api key), but also this newer & correct method of `token $key` or `bearer $jwt`!",
        "pr_file_module": null
      },
      {
        "comment_id": "1066736678",
        "repo_full_name": "snyk/cli",
        "pr_number": 4196,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1066166805",
        "commented_code": "@@ -76,7 +76,7 @@ async function getCodeAnalysis(\n     });\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
        "comment_created_at": "2023-01-11T09:05:29+00:00",
        "comment_author": "PeterSchafer",
        "comment_body": "Great! Thanks for the detailed explanation! ",
        "pr_file_module": null
      },
      {
        "comment_id": "1352011143",
        "repo_full_name": "snyk/cli",
        "pr_number": 4196,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1066166805",
        "commented_code": "@@ -76,7 +76,7 @@ async function getCodeAnalysis(\n     });\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
        "comment_created_at": "2023-10-10T09:32:13+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Does it also handle the case when neither bearer nor token is given?",
        "pr_file_module": null
      },
      {
        "comment_id": "1352543461",
        "repo_full_name": "snyk/cli",
        "pr_number": 4196,
        "pr_file": "src/lib/plugins/sast/analysis.ts",
        "discussion_id": "1066166805",
        "commented_code": "@@ -76,7 +76,7 @@ async function getCodeAnalysis(\n     });\n   }\n \n-  const sessionToken = api() || '';\n+  const sessionToken = getAuthHeader();",
        "comment_created_at": "2023-10-10T13:37:01+00:00",
        "comment_author": "DarrellMozingo",
        "comment_body": "What does `it` mean there? Registry will fail if neither is given, which would fail Deeproxy, which would bubble up as a 401 to CLI.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1341191733",
    "pr_number": 4885,
    "pr_file": "src/lib/iac/test/v2/scan/index.ts",
    "created_at": "2023-09-29T10:26:43+00:00",
    "commented_code": "): Promise<TestOutput> {\n   const env = { ...process.env };\n \n+  const apiUrl = config.API_REST_URL\n+  if (apiUrl.startsWith('http://')) {\n+    console.warn(\"Using an http API URL, please specify a secure https URL with the SNYK_API environment variable\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1341191733",
        "repo_full_name": "snyk/cli",
        "pr_number": 4885,
        "pr_file": "src/lib/iac/test/v2/scan/index.ts",
        "discussion_id": "1341191733",
        "commented_code": "@@ -54,14 +54,19 @@ async function scanWithConfig(\n ): Promise<TestOutput> {\n   const env = { ...process.env };\n \n+  const apiUrl = config.API_REST_URL\n+  if (apiUrl.startsWith('http://')) {\n+    console.warn(\"Using an http API URL, please specify a secure https URL with the SNYK_API environment variable\")",
        "comment_created_at": "2023-09-29T10:26:43+00:00",
        "comment_author": "chdorner-snyk",
        "comment_body": "not super happy with this message, maybe you have a better idea @francescomari?",
        "pr_file_module": null
      },
      {
        "comment_id": "1341472269",
        "repo_full_name": "snyk/cli",
        "pr_number": 4885,
        "pr_file": "src/lib/iac/test/v2/scan/index.ts",
        "discussion_id": "1341191733",
        "commented_code": "@@ -54,14 +54,19 @@ async function scanWithConfig(\n ): Promise<TestOutput> {\n   const env = { ...process.env };\n \n+  const apiUrl = config.API_REST_URL\n+  if (apiUrl.startsWith('http://')) {\n+    console.warn(\"Using an http API URL, please specify a secure https URL with the SNYK_API environment variable\")",
        "comment_created_at": "2023-09-29T15:00:07+00:00",
        "comment_author": "francescomari",
        "comment_body": "Maybe something along the lines of \"You configured the Snyk CLI to use an API URL with an HTTP scheme. This option is insecure and might prevent the Snyk CLI from working correctly.\". Does it sound better to you?",
        "pr_file_module": null
      },
      {
        "comment_id": "1341504940",
        "repo_full_name": "snyk/cli",
        "pr_number": 4885,
        "pr_file": "src/lib/iac/test/v2/scan/index.ts",
        "discussion_id": "1341191733",
        "commented_code": "@@ -54,14 +54,19 @@ async function scanWithConfig(\n ): Promise<TestOutput> {\n   const env = { ...process.env };\n \n+  const apiUrl = config.API_REST_URL\n+  if (apiUrl.startsWith('http://')) {\n+    console.warn(\"Using an http API URL, please specify a secure https URL with the SNYK_API environment variable\")",
        "comment_created_at": "2023-09-29T15:25:40+00:00",
        "comment_author": "chdorner-snyk",
        "comment_body": "I like that, thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191375871",
    "pr_number": 4598,
    "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
    "created_at": "2023-05-11T15:43:31+00:00",
    "commented_code": "},\n   options: Options & PolicyOptions,\n ): Promise<[TestResult[], string[]]> {\n-  const unmanagedDepsOverride = process.env.USE_UNMANAGED_DEPS;\n+  try {\n+    return await resolveAndTestFactsUnmanagedDeps(scans, options);\n+  } catch (error) {\n+    const unauthorized = error.code === 401 || error.code === 403;\n \n-  const featureFlagEnabled = await hasFeatureFlag(\n-    'snykNewUnmanagedTest',\n-    options,\n-  );\n+    if (unauthorized) {\n+      throw AuthFailedError(error.error, error.code);",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1191375871",
        "repo_full_name": "snyk/cli",
        "pr_number": 4598,
        "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
        "discussion_id": "1191375871",
        "commented_code": "@@ -40,16 +40,17 @@ export async function resolveAndTestFacts(\n   },\n   options: Options & PolicyOptions,\n ): Promise<[TestResult[], string[]]> {\n-  const unmanagedDepsOverride = process.env.USE_UNMANAGED_DEPS;\n+  try {\n+    return await resolveAndTestFactsUnmanagedDeps(scans, options);\n+  } catch (error) {\n+    const unauthorized = error.code === 401 || error.code === 403;\n \n-  const featureFlagEnabled = await hasFeatureFlag(\n-    'snykNewUnmanagedTest',\n-    options,\n-  );\n+    if (unauthorized) {\n+      throw AuthFailedError(error.error, error.code);",
        "comment_created_at": "2023-05-11T15:43:31+00:00",
        "comment_author": "aron",
        "comment_body": "Based on the feedback earlier, I'd suggest just passing in a new error here to satisfy the wrapper. There's not much additional information we'd need for a 401/403 error that we don't already have from the request.\r\n\r\n```suggestion\r\n      throw AuthFailedError(new Error(\"Unauthorized request to unmanaged service\"), error.code);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1192243361",
        "repo_full_name": "snyk/cli",
        "pr_number": 4598,
        "pr_file": "src/lib/ecosystems/resolve-test-facts.ts",
        "discussion_id": "1191375871",
        "commented_code": "@@ -40,16 +40,17 @@ export async function resolveAndTestFacts(\n   },\n   options: Options & PolicyOptions,\n ): Promise<[TestResult[], string[]]> {\n-  const unmanagedDepsOverride = process.env.USE_UNMANAGED_DEPS;\n+  try {\n+    return await resolveAndTestFactsUnmanagedDeps(scans, options);\n+  } catch (error) {\n+    const unauthorized = error.code === 401 || error.code === 403;\n \n-  const featureFlagEnabled = await hasFeatureFlag(\n-    'snykNewUnmanagedTest',\n-    options,\n-  );\n+    if (unauthorized) {\n+      throw AuthFailedError(error.error, error.code);",
        "comment_created_at": "2023-05-12T11:23:36+00:00",
        "comment_author": "dekelund",
        "comment_body": "AuthFailedError requires a string, so I will use a similar approach without the `NewError` call.",
        "pr_file_module": null
      }
    ]
  }
]