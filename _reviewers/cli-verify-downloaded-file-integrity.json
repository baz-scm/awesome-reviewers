[
  {
    "discussion_id": "1289654574",
    "pr_number": 4770,
    "pr_file": "scripts/download_go.py",
    "created_at": "2023-08-10T07:05:32+00:00",
    "commented_code": "+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")\n+    except urllib.error.URLError as e:\n+        print(\"Error while downloading the file:\", e)\n+    \n+    return tmp_file\n+\n+# extract tar file\n+def extract_tar(tar_gz_file, extract_path):\n+    print(\"Extracting \" + tar_gz_file + \" to \" + extract_path)\n+    try:\n+        with tarfile.open(tar_gz_file, \"r:gz\") as tar:\n+            tar.extractall(path=extract_path)\n+            print(\"Extraction complete\")\n+    except tarfile.TarError as e:\n+        print(\"Error while extracting the tar file:\", e)\n+\n+# unzip zip file\n+def unzip_file(zip_file, extract_path):\n+    print(\"Unzipping \" + zip_file + \" to \" + extract_path)\n+    try:\n+        with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n+            zip_ref.extractall(extract_path)\n+            print(\"Unzipping complete\")\n+    except zipfile.BadZipFile as e:\n+        print(\"Error while unzipping the file:\", e)\n+\n+# setup argparse\n+def init_argparse():\n+    parser = argparse.ArgumentParser(\n+        prog=\"download_go\",\n+        description=\"Download and install a specific version of Go.\"\n+        )\n+    parser.add_argument(\"version\", help=\"Version of Go to download (e.g., 1.20)\")\n+    parser.add_argument(\"--go_os\",\n+        help=\"OS to download for (e.g., linux, windows, darwin)\",\n+        choices=[\"linux\", \"windows\", \"darwin\"],\n+        required=True)\n+    parser.add_argument(\"--go_arch\",\n+        help=\"Architecture to download for (e.g., amd64, arm64)\",\n+        choices=[\"amd64\", \"arm64\", \"armv6l\"],\n+        required=True)\n+    parser.add_argument(\"--base_url\",\n+        help=\"Base URL to download from (e.g., https://go.dev/dl/)\",\n+        choices=[\"https://go.dev/dl/\", \"https://aka.ms/golang/release/latest/\"],\n+        default=\"https://go.dev/dl/\")\n+    parser.add_argument(\"--extraction_path\",\n+        help=\"Path to download the file to (e.g., /tmp)\",\n+        default=os.getcwd())\n+\n+    return  parser.parse_args()\n+\n+if __name__ == \"__main__\":\n+    args = init_argparse()\n+\n+    # check if go is cached, before trying to download and extract it\n+    file_dir = os.path.join(os.path.abspath(args.extraction_path), \"go\")\n+    if  os.path.exists(file_dir):",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1289654574",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289654574",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")\n+    except urllib.error.URLError as e:\n+        print(\"Error while downloading the file:\", e)\n+    \n+    return tmp_file\n+\n+# extract tar file\n+def extract_tar(tar_gz_file, extract_path):\n+    print(\"Extracting \" + tar_gz_file + \" to \" + extract_path)\n+    try:\n+        with tarfile.open(tar_gz_file, \"r:gz\") as tar:\n+            tar.extractall(path=extract_path)\n+            print(\"Extraction complete\")\n+    except tarfile.TarError as e:\n+        print(\"Error while extracting the tar file:\", e)\n+\n+# unzip zip file\n+def unzip_file(zip_file, extract_path):\n+    print(\"Unzipping \" + zip_file + \" to \" + extract_path)\n+    try:\n+        with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n+            zip_ref.extractall(extract_path)\n+            print(\"Unzipping complete\")\n+    except zipfile.BadZipFile as e:\n+        print(\"Error while unzipping the file:\", e)\n+\n+# setup argparse\n+def init_argparse():\n+    parser = argparse.ArgumentParser(\n+        prog=\"download_go\",\n+        description=\"Download and install a specific version of Go.\"\n+        )\n+    parser.add_argument(\"version\", help=\"Version of Go to download (e.g., 1.20)\")\n+    parser.add_argument(\"--go_os\",\n+        help=\"OS to download for (e.g., linux, windows, darwin)\",\n+        choices=[\"linux\", \"windows\", \"darwin\"],\n+        required=True)\n+    parser.add_argument(\"--go_arch\",\n+        help=\"Architecture to download for (e.g., amd64, arm64)\",\n+        choices=[\"amd64\", \"arm64\", \"armv6l\"],\n+        required=True)\n+    parser.add_argument(\"--base_url\",\n+        help=\"Base URL to download from (e.g., https://go.dev/dl/)\",\n+        choices=[\"https://go.dev/dl/\", \"https://aka.ms/golang/release/latest/\"],\n+        default=\"https://go.dev/dl/\")\n+    parser.add_argument(\"--extraction_path\",\n+        help=\"Path to download the file to (e.g., /tmp)\",\n+        default=os.getcwd())\n+\n+    return  parser.parse_args()\n+\n+if __name__ == \"__main__\":\n+    args = init_argparse()\n+\n+    # check if go is cached, before trying to download and extract it\n+    file_dir = os.path.join(os.path.abspath(args.extraction_path), \"go\")\n+    if  os.path.exists(file_dir):",
        "comment_created_at": "2023-08-10T07:05:32+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "This should most likely check the shasum?",
        "pr_file_module": null
      },
      {
        "comment_id": "1289816839",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289654574",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")\n+    except urllib.error.URLError as e:\n+        print(\"Error while downloading the file:\", e)\n+    \n+    return tmp_file\n+\n+# extract tar file\n+def extract_tar(tar_gz_file, extract_path):\n+    print(\"Extracting \" + tar_gz_file + \" to \" + extract_path)\n+    try:\n+        with tarfile.open(tar_gz_file, \"r:gz\") as tar:\n+            tar.extractall(path=extract_path)\n+            print(\"Extraction complete\")\n+    except tarfile.TarError as e:\n+        print(\"Error while extracting the tar file:\", e)\n+\n+# unzip zip file\n+def unzip_file(zip_file, extract_path):\n+    print(\"Unzipping \" + zip_file + \" to \" + extract_path)\n+    try:\n+        with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n+            zip_ref.extractall(extract_path)\n+            print(\"Unzipping complete\")\n+    except zipfile.BadZipFile as e:\n+        print(\"Error while unzipping the file:\", e)\n+\n+# setup argparse\n+def init_argparse():\n+    parser = argparse.ArgumentParser(\n+        prog=\"download_go\",\n+        description=\"Download and install a specific version of Go.\"\n+        )\n+    parser.add_argument(\"version\", help=\"Version of Go to download (e.g., 1.20)\")\n+    parser.add_argument(\"--go_os\",\n+        help=\"OS to download for (e.g., linux, windows, darwin)\",\n+        choices=[\"linux\", \"windows\", \"darwin\"],\n+        required=True)\n+    parser.add_argument(\"--go_arch\",\n+        help=\"Architecture to download for (e.g., amd64, arm64)\",\n+        choices=[\"amd64\", \"arm64\", \"armv6l\"],\n+        required=True)\n+    parser.add_argument(\"--base_url\",\n+        help=\"Base URL to download from (e.g., https://go.dev/dl/)\",\n+        choices=[\"https://go.dev/dl/\", \"https://aka.ms/golang/release/latest/\"],\n+        default=\"https://go.dev/dl/\")\n+    parser.add_argument(\"--extraction_path\",\n+        help=\"Path to download the file to (e.g., /tmp)\",\n+        default=os.getcwd())\n+\n+    return  parser.parse_args()\n+\n+if __name__ == \"__main__\":\n+    args = init_argparse()\n+\n+    # check if go is cached, before trying to download and extract it\n+    file_dir = os.path.join(os.path.abspath(args.extraction_path), \"go\")\n+    if  os.path.exists(file_dir):",
        "comment_created_at": "2023-08-10T09:14:02+00:00",
        "comment_author": "j-luong",
        "comment_body": "Would the shasum of an extracted `.tar.gz / .zip` match the compressed file? The cached content in `file_dir` is the extracted `.tar.gz / .zip` file. Google/Microsoft provide shasums for the `.tar.gz / .zip` files only.\r\n\r\nWe could validate the shasums after downloading / before caching?",
        "pr_file_module": null
      },
      {
        "comment_id": "1290111468",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289654574",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")\n+    except urllib.error.URLError as e:\n+        print(\"Error while downloading the file:\", e)\n+    \n+    return tmp_file\n+\n+# extract tar file\n+def extract_tar(tar_gz_file, extract_path):\n+    print(\"Extracting \" + tar_gz_file + \" to \" + extract_path)\n+    try:\n+        with tarfile.open(tar_gz_file, \"r:gz\") as tar:\n+            tar.extractall(path=extract_path)\n+            print(\"Extraction complete\")\n+    except tarfile.TarError as e:\n+        print(\"Error while extracting the tar file:\", e)\n+\n+# unzip zip file\n+def unzip_file(zip_file, extract_path):\n+    print(\"Unzipping \" + zip_file + \" to \" + extract_path)\n+    try:\n+        with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n+            zip_ref.extractall(extract_path)\n+            print(\"Unzipping complete\")\n+    except zipfile.BadZipFile as e:\n+        print(\"Error while unzipping the file:\", e)\n+\n+# setup argparse\n+def init_argparse():\n+    parser = argparse.ArgumentParser(\n+        prog=\"download_go\",\n+        description=\"Download and install a specific version of Go.\"\n+        )\n+    parser.add_argument(\"version\", help=\"Version of Go to download (e.g., 1.20)\")\n+    parser.add_argument(\"--go_os\",\n+        help=\"OS to download for (e.g., linux, windows, darwin)\",\n+        choices=[\"linux\", \"windows\", \"darwin\"],\n+        required=True)\n+    parser.add_argument(\"--go_arch\",\n+        help=\"Architecture to download for (e.g., amd64, arm64)\",\n+        choices=[\"amd64\", \"arm64\", \"armv6l\"],\n+        required=True)\n+    parser.add_argument(\"--base_url\",\n+        help=\"Base URL to download from (e.g., https://go.dev/dl/)\",\n+        choices=[\"https://go.dev/dl/\", \"https://aka.ms/golang/release/latest/\"],\n+        default=\"https://go.dev/dl/\")\n+    parser.add_argument(\"--extraction_path\",\n+        help=\"Path to download the file to (e.g., /tmp)\",\n+        default=os.getcwd())\n+\n+    return  parser.parse_args()\n+\n+if __name__ == \"__main__\":\n+    args = init_argparse()\n+\n+    # check if go is cached, before trying to download and extract it\n+    file_dir = os.path.join(os.path.abspath(args.extraction_path), \"go\")\n+    if  os.path.exists(file_dir):",
        "comment_created_at": "2023-08-10T13:15:31+00:00",
        "comment_author": "j-luong",
        "comment_body": "added shasum checking of the downloaded `.tar.gz` / `.zip`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1289655094",
    "pr_number": 4770,
    "pr_file": "scripts/download_go.py",
    "created_at": "2023-08-10T07:06:05+00:00",
    "commented_code": "+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")",
    "repo_full_name": "snyk/cli",
    "discussion_comments": [
      {
        "comment_id": "1289655094",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289655094",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")",
        "comment_created_at": "2023-08-10T07:06:05+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Shasum checking would be awesome!",
        "pr_file_module": null
      },
      {
        "comment_id": "1289655806",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289655094",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")",
        "comment_created_at": "2023-08-10T07:06:51+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Also, as we're talking about FIPS functionality, do the go providers provide GPG keys to check? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1289989134",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289655094",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")",
        "comment_created_at": "2023-08-10T11:35:47+00:00",
        "comment_author": "j-luong",
        "comment_body": "Looks like it's [possible](https://github.com/golang/go/issues/14739) from big G. we can fetch the asc like so:\r\nhttps://storage.googleapis.com/golang/go1.20.linux-amd64.tar.gz.asc\r\n\r\nIt's not well documented, but the public key to verify looks like it can be fetched like so:\r\nhttps://dl.google.com/dl/linux/linux_signing_key.pub\r\n\r\nMSFT has signatures available via their download URL, e.g. https://aka.ms/golang/release/latest/go1.20.linux-amd64.tar.gz.sig\r\n\r\nAnd can be [validated](https://github.com/microsoft/go/blob/microsoft/main/eng/doc/Downloads.md) using their public key:\r\n```\r\nValidate GPG signatures using our public key:\r\n\r\nhttps://download.microsoft.com/download/f/a/2/fa2420dd-3f08-4621-82cf-5a22abcbc8f9/microsoft-managed-lang-compiler.asc\r\nShortened link for sharing: https://aka.ms/managed-lang-compiler-public-key\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1291259859",
        "repo_full_name": "snyk/cli",
        "pr_number": 4770,
        "pr_file": "scripts/download_go.py",
        "discussion_id": "1289655094",
        "commented_code": "@@ -0,0 +1,101 @@\n+import argparse\n+import hashlib\n+import os\n+import platform\n+import urllib.request\n+import tarfile\n+import zipfile\n+import tempfile\n+\n+# determine go binary to download and extract\n+def get_go_binary_name(go_os, go_arch, go_version):\n+    filename = \"go\" + go_version + \".\" + go_os + \"-\" + go_arch\n+\n+    # determine file extension\n+    if go_os == \"windows\":\n+        filename += \".zip\"\n+    else:\n+        filename += \".tar.gz\"\n+\n+    # e.g. go1.20.linux-amd64.tar.gz\n+    return filename\n+\n+# download go binary\n+def download_go_binary(filepath, filename, base_url):\n+    url = base_url + filename\n+    tmp_file = os.path.join(filepath, filename)\n+\n+    print(\"Downloading \" + url + \" to \" + tmp_file)\n+    \n+    try:\n+        urllib.request.urlretrieve(url, tmp_file)\n+        print(\"Download complete\")",
        "comment_created_at": "2023-08-11T12:04:10+00:00",
        "comment_author": "bastiandoetsch",
        "comment_body": "Lets do gpg in a follow-up PR/Story, using aharc-coded public keys in config.yaml and validate on each platform using the given key.",
        "pr_file_module": null
      }
    ]
  }
]