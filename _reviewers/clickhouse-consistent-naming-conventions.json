[
  {
    "discussion_id": "2108742574",
    "pr_number": 80857,
    "pr_file": "docs/en/operations/system-tables/unicode.md",
    "created_at": "2025-05-27T09:47:06+00:00",
    "commented_code": "+---\n+description: 'System table containing a list of Unicode characters and their properties.'\n+keywords: ['system table', 'unicode']\n+slug: /operations/system-tables/unicode\n+title: 'system.unicode'\n+---\n+# system.unicode\n+\n+The `system.unicode` table is a virtual table that provides information about Unicode characters and their properties(https://unicode-org.github.io/icu/userguide/strings/properties.html). This table is generated on-the-fly.\n+\n+Columns\n+\n+- `code_point` ([String](../../sql-reference/data-types/string.md)) \u2014 The UTF-8 representation of the code point.\n+- `code_point_value` ([Int32](../../sql-reference/data-types/int-uint.md)) \u2014 The numeric value of the code point.\n+- Binary Properties ([UInt8](../../sql-reference/data-types/int-uint.md)) - The binary properties of the code point.\n+    - `Alphabetic`, `ASCII_Hex_Digit`, `Case_Ignorable`...\n+- Enumerated Properties ([Int32](../../sql-reference/data-types/int-uint.md)) - The enumerated properties of the code point.\n+    - `Bidi_Class`, `Bidi_Paired_Bracket_Type`, `Block`...\n+- String Properties ([String](../../sql-reference/data-types/string.md)) - The string properties(ASCII String or Unicode String) of the code point\n+    - `Case_Folding`, `Decomposition_Mapping`, `Name`...\n+- `Numeric_Value` ([Float64](../../sql-reference/data-types/float.md)) - The numeric value of the code point.\n+- `Script_Extensions` ([Array(Int32)](../../sql-reference/data-types/array.md)) - The script extensions of the code point.\n+- `General_Category_Mask` ([Int32](../../sql-reference/data-types/int-uint.md)) - The general category mask of the code point.\n+\n+\n+**Example**\n+```sql\n+SELECT * FROM system.unicode WHERE code_point = 'a' LIMIT 1;\n+```\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+code_point:                      a\n+code_point_value:                97\n+Alphabetic:                      1",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2108742574",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 80857,
        "pr_file": "docs/en/operations/system-tables/unicode.md",
        "discussion_id": "2108742574",
        "commented_code": "@@ -0,0 +1,164 @@\n+---\n+description: 'System table containing a list of Unicode characters and their properties.'\n+keywords: ['system table', 'unicode']\n+slug: /operations/system-tables/unicode\n+title: 'system.unicode'\n+---\n+# system.unicode\n+\n+The `system.unicode` table is a virtual table that provides information about Unicode characters and their properties(https://unicode-org.github.io/icu/userguide/strings/properties.html). This table is generated on-the-fly.\n+\n+Columns\n+\n+- `code_point` ([String](../../sql-reference/data-types/string.md)) \u2014 The UTF-8 representation of the code point.\n+- `code_point_value` ([Int32](../../sql-reference/data-types/int-uint.md)) \u2014 The numeric value of the code point.\n+- Binary Properties ([UInt8](../../sql-reference/data-types/int-uint.md)) - The binary properties of the code point.\n+    - `Alphabetic`, `ASCII_Hex_Digit`, `Case_Ignorable`...\n+- Enumerated Properties ([Int32](../../sql-reference/data-types/int-uint.md)) - The enumerated properties of the code point.\n+    - `Bidi_Class`, `Bidi_Paired_Bracket_Type`, `Block`...\n+- String Properties ([String](../../sql-reference/data-types/string.md)) - The string properties(ASCII String or Unicode String) of the code point\n+    - `Case_Folding`, `Decomposition_Mapping`, `Name`...\n+- `Numeric_Value` ([Float64](../../sql-reference/data-types/float.md)) - The numeric value of the code point.\n+- `Script_Extensions` ([Array(Int32)](../../sql-reference/data-types/array.md)) - The script extensions of the code point.\n+- `General_Category_Mask` ([Int32](../../sql-reference/data-types/int-uint.md)) - The general category mask of the code point.\n+\n+\n+**Example**\n+```sql\n+SELECT * FROM system.unicode WHERE code_point = 'a' LIMIT 1;\n+```\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+code_point:                      a\n+code_point_value:                97\n+Alphabetic:                      1",
        "comment_created_at": "2025-05-27T09:47:06+00:00",
        "comment_author": "UnamedRus",
        "comment_body": "ClickHouse is using snake case for system table columns. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2109050057",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 80857,
        "pr_file": "docs/en/operations/system-tables/unicode.md",
        "discussion_id": "2108742574",
        "commented_code": "@@ -0,0 +1,164 @@\n+---\n+description: 'System table containing a list of Unicode characters and their properties.'\n+keywords: ['system table', 'unicode']\n+slug: /operations/system-tables/unicode\n+title: 'system.unicode'\n+---\n+# system.unicode\n+\n+The `system.unicode` table is a virtual table that provides information about Unicode characters and their properties(https://unicode-org.github.io/icu/userguide/strings/properties.html). This table is generated on-the-fly.\n+\n+Columns\n+\n+- `code_point` ([String](../../sql-reference/data-types/string.md)) \u2014 The UTF-8 representation of the code point.\n+- `code_point_value` ([Int32](../../sql-reference/data-types/int-uint.md)) \u2014 The numeric value of the code point.\n+- Binary Properties ([UInt8](../../sql-reference/data-types/int-uint.md)) - The binary properties of the code point.\n+    - `Alphabetic`, `ASCII_Hex_Digit`, `Case_Ignorable`...\n+- Enumerated Properties ([Int32](../../sql-reference/data-types/int-uint.md)) - The enumerated properties of the code point.\n+    - `Bidi_Class`, `Bidi_Paired_Bracket_Type`, `Block`...\n+- String Properties ([String](../../sql-reference/data-types/string.md)) - The string properties(ASCII String or Unicode String) of the code point\n+    - `Case_Folding`, `Decomposition_Mapping`, `Name`...\n+- `Numeric_Value` ([Float64](../../sql-reference/data-types/float.md)) - The numeric value of the code point.\n+- `Script_Extensions` ([Array(Int32)](../../sql-reference/data-types/array.md)) - The script extensions of the code point.\n+- `General_Category_Mask` ([Int32](../../sql-reference/data-types/int-uint.md)) - The general category mask of the code point.\n+\n+\n+**Example**\n+```sql\n+SELECT * FROM system.unicode WHERE code_point = 'a' LIMIT 1;\n+```\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+code_point:                      a\n+code_point_value:                97\n+Alphabetic:                      1",
        "comment_created_at": "2025-05-27T12:26:37+00:00",
        "comment_author": "wxybear",
        "comment_body": "Yes! I didn\u2019t use snake case in some columns because, in addition to code_point, code_point_value and I want to add a notation column, the other columns are property columns of unicode code points, which are defined in ICU lib and are also the information returned by the API. Of course, I can also do a tolower. If the result returned by the API is kept, one advantage is that users can query the corresponding ICU documents. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2120201329",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 80857,
        "pr_file": "docs/en/operations/system-tables/unicode.md",
        "discussion_id": "2108742574",
        "commented_code": "@@ -0,0 +1,164 @@\n+---\n+description: 'System table containing a list of Unicode characters and their properties.'\n+keywords: ['system table', 'unicode']\n+slug: /operations/system-tables/unicode\n+title: 'system.unicode'\n+---\n+# system.unicode\n+\n+The `system.unicode` table is a virtual table that provides information about Unicode characters and their properties(https://unicode-org.github.io/icu/userguide/strings/properties.html). This table is generated on-the-fly.\n+\n+Columns\n+\n+- `code_point` ([String](../../sql-reference/data-types/string.md)) \u2014 The UTF-8 representation of the code point.\n+- `code_point_value` ([Int32](../../sql-reference/data-types/int-uint.md)) \u2014 The numeric value of the code point.\n+- Binary Properties ([UInt8](../../sql-reference/data-types/int-uint.md)) - The binary properties of the code point.\n+    - `Alphabetic`, `ASCII_Hex_Digit`, `Case_Ignorable`...\n+- Enumerated Properties ([Int32](../../sql-reference/data-types/int-uint.md)) - The enumerated properties of the code point.\n+    - `Bidi_Class`, `Bidi_Paired_Bracket_Type`, `Block`...\n+- String Properties ([String](../../sql-reference/data-types/string.md)) - The string properties(ASCII String or Unicode String) of the code point\n+    - `Case_Folding`, `Decomposition_Mapping`, `Name`...\n+- `Numeric_Value` ([Float64](../../sql-reference/data-types/float.md)) - The numeric value of the code point.\n+- `Script_Extensions` ([Array(Int32)](../../sql-reference/data-types/array.md)) - The script extensions of the code point.\n+- `General_Category_Mask` ([Int32](../../sql-reference/data-types/int-uint.md)) - The general category mask of the code point.\n+\n+\n+**Example**\n+```sql\n+SELECT * FROM system.unicode WHERE code_point = 'a' LIMIT 1;\n+```\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+code_point:                      a\n+code_point_value:                97\n+Alphabetic:                      1",
        "comment_created_at": "2025-06-02T06:42:14+00:00",
        "comment_author": "UnamedRus",
        "comment_body": "I understand idea of try to match spec.\r\n\r\nOne of option is to have alias columns (lets say, snake case for original, and spec style for ALIAS columns to them or vice versa)",
        "pr_file_module": null
      },
      {
        "comment_id": "2124568899",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 80857,
        "pr_file": "docs/en/operations/system-tables/unicode.md",
        "discussion_id": "2108742574",
        "commented_code": "@@ -0,0 +1,164 @@\n+---\n+description: 'System table containing a list of Unicode characters and their properties.'\n+keywords: ['system table', 'unicode']\n+slug: /operations/system-tables/unicode\n+title: 'system.unicode'\n+---\n+# system.unicode\n+\n+The `system.unicode` table is a virtual table that provides information about Unicode characters and their properties(https://unicode-org.github.io/icu/userguide/strings/properties.html). This table is generated on-the-fly.\n+\n+Columns\n+\n+- `code_point` ([String](../../sql-reference/data-types/string.md)) \u2014 The UTF-8 representation of the code point.\n+- `code_point_value` ([Int32](../../sql-reference/data-types/int-uint.md)) \u2014 The numeric value of the code point.\n+- Binary Properties ([UInt8](../../sql-reference/data-types/int-uint.md)) - The binary properties of the code point.\n+    - `Alphabetic`, `ASCII_Hex_Digit`, `Case_Ignorable`...\n+- Enumerated Properties ([Int32](../../sql-reference/data-types/int-uint.md)) - The enumerated properties of the code point.\n+    - `Bidi_Class`, `Bidi_Paired_Bracket_Type`, `Block`...\n+- String Properties ([String](../../sql-reference/data-types/string.md)) - The string properties(ASCII String or Unicode String) of the code point\n+    - `Case_Folding`, `Decomposition_Mapping`, `Name`...\n+- `Numeric_Value` ([Float64](../../sql-reference/data-types/float.md)) - The numeric value of the code point.\n+- `Script_Extensions` ([Array(Int32)](../../sql-reference/data-types/array.md)) - The script extensions of the code point.\n+- `General_Category_Mask` ([Int32](../../sql-reference/data-types/int-uint.md)) - The general category mask of the code point.\n+\n+\n+**Example**\n+```sql\n+SELECT * FROM system.unicode WHERE code_point = 'a' LIMIT 1;\n+```\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+code_point:                      a\n+code_point_value:                97\n+Alphabetic:                      1",
        "comment_created_at": "2025-06-03T18:10:26+00:00",
        "comment_author": "alexey-milovidov",
        "comment_body": "Let's lowercase all of them, it will be alright.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2222168525",
    "pr_number": 82885,
    "pr_file": "docs/en/interfaces/formats/Protobuf/Protobuf.md",
    "created_at": "2025-07-22T10:56:53+00:00",
    "commented_code": "}\n ```\n \n+\n+If a message contains [oneof](https://protobuf.dev/programming-guides/proto3/#oneof) and `input_format_protobuf_oneof_presence` is set, ClickHouse fills column that indicates which field of oneof was found.",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2222168525",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 82885,
        "pr_file": "docs/en/interfaces/formats/Protobuf/Protobuf.md",
        "discussion_id": "2222168525",
        "commented_code": "@@ -85,6 +85,40 @@ message MessageType {\n }\n ```\n \n+\n+If a message contains [oneof](https://protobuf.dev/programming-guides/proto3/#oneof) and `input_format_protobuf_oneof_presence` is set, ClickHouse fills column that indicates which field of oneof was found.",
        "comment_created_at": "2025-07-22T10:56:53+00:00",
        "comment_author": "Avogar",
        "comment_body": "Let's clarify allowed data types for indicator column and that it should have the same name as the oneof in the schema.",
        "pr_file_module": null
      },
      {
        "comment_id": "2222175190",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 82885,
        "pr_file": "docs/en/interfaces/formats/Protobuf/Protobuf.md",
        "discussion_id": "2222168525",
        "commented_code": "@@ -85,6 +85,40 @@ message MessageType {\n }\n ```\n \n+\n+If a message contains [oneof](https://protobuf.dev/programming-guides/proto3/#oneof) and `input_format_protobuf_oneof_presence` is set, ClickHouse fills column that indicates which field of oneof was found.",
        "comment_created_at": "2025-07-22T10:59:47+00:00",
        "comment_author": "ilejn",
        "comment_body": "Sure, good point.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2270393149",
    "pr_number": 85435,
    "pr_file": "docs/en/sql-reference/aggregate-functions/reference/timeSeriesLastToGrid.md",
    "created_at": "2025-08-12T15:54:52+00:00",
    "commented_code": "+---\n+description: 'Aggregate function that calculates PromQL-like last over time series data on the specified grid.'\n+sidebar_position: 225\n+slug: /sql-reference/aggregate-functions/reference/timeSeriesLastToGrid\n+title: 'timeSeriesLastToGrid'\n+---\n+\n+Aggregate function that takes time series data as pairs of timestamps and values and calculates [PromQL-like last_over_time](https://prometheus.io/docs/prometheus/latest/querying/functions/#aggregation_over_time) from this data on a regular time grid described by start timestamp, end timestamp and step. For each point on the grid the samples for calculating `last_over_time` are considered within the specified time window.\n+\n+Parameters:\n+- `start timestamp` - specifies start of the grid\n+- `end timestamp` - specifies end of the grid\n+- `grid step` - specifies step of the grid in seconds\n+- `staleness` - specified the maximum \"staleness\" in seconds of the considered samples\n+\n+Arguments:\n+- `timestamp` - timestamp of the sample\n+- `value` - value of the time series corresponding to the `timestamp`\n+\n+Return value:\n+`last_over_time` values on the specified grid as an `Array(Nullable(Float64))`. The returned array contains one value for each time grid point. The value is NULL if there are not enough samples within the window to calculate the `last_over_time` value for a particular grid point.",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2270393149",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 85435,
        "pr_file": "docs/en/sql-reference/aggregate-functions/reference/timeSeriesLastToGrid.md",
        "discussion_id": "2270393149",
        "commented_code": "@@ -0,0 +1,69 @@\n+---\n+description: 'Aggregate function that calculates PromQL-like last over time series data on the specified grid.'\n+sidebar_position: 225\n+slug: /sql-reference/aggregate-functions/reference/timeSeriesLastToGrid\n+title: 'timeSeriesLastToGrid'\n+---\n+\n+Aggregate function that takes time series data as pairs of timestamps and values and calculates [PromQL-like last_over_time](https://prometheus.io/docs/prometheus/latest/querying/functions/#aggregation_over_time) from this data on a regular time grid described by start timestamp, end timestamp and step. For each point on the grid the samples for calculating `last_over_time` are considered within the specified time window.\n+\n+Parameters:\n+- `start timestamp` - specifies start of the grid\n+- `end timestamp` - specifies end of the grid\n+- `grid step` - specifies step of the grid in seconds\n+- `staleness` - specified the maximum \"staleness\" in seconds of the considered samples\n+\n+Arguments:\n+- `timestamp` - timestamp of the sample\n+- `value` - value of the time series corresponding to the `timestamp`\n+\n+Return value:\n+`last_over_time` values on the specified grid as an `Array(Nullable(Float64))`. The returned array contains one value for each time grid point. The value is NULL if there are not enough samples within the window to calculate the `last_over_time` value for a particular grid point.",
        "comment_created_at": "2025-08-12T15:54:52+00:00",
        "comment_author": "davenger",
        "comment_body": "Looks like https://clickhouse.com/docs/sql-reference/aggregate-functions/reference/timeSeriesResampleToGridWithStaleness is already doing this but isn't named properly\r\nLet's add an alias",
        "pr_file_module": null
      }
    ]
  }
]