[
  {
    "discussion_id": "2242739575",
    "pr_number": 84694,
    "pr_file": "src/Core/ProtocolDefines.h",
    "created_at": "2025-07-30T13:43:52+00:00",
    "commented_code": "static constexpr auto DBMS_MIN_REVISION_WITH_VERSIONED_CLUSTER_FUNCTION_PROTOCOL = 54479;\n \n+static constexpr auto DBMS_MIN_REVISION_WITH_SYSTEM_COMPLETIONS_TABLE = 54480;\n+\n /// Version of ClickHouse TCP protocol.\n ///\n /// Should be incremented manually on protocol changes.\n ///\n /// NOTE: DBMS_TCP_PROTOCOL_VERSION has nothing common with VERSION_REVISION,\n /// later is just a number for server version (one number instead of commit SHA)\n /// for simplicity (sometimes it may be more convenient in some use cases).\n-static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54479;\n+static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54480;",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2242739575",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84694,
        "pr_file": "src/Core/ProtocolDefines.h",
        "discussion_id": "2242739575",
        "commented_code": "@@ -112,12 +112,14 @@ static constexpr auto DBMS_MIN_REVISON_WITH_PARALLEL_BLOCK_MARSHALLING = 54478;\n \n static constexpr auto DBMS_MIN_REVISION_WITH_VERSIONED_CLUSTER_FUNCTION_PROTOCOL = 54479;\n \n+static constexpr auto DBMS_MIN_REVISION_WITH_SYSTEM_COMPLETIONS_TABLE = 54480;\n+\n /// Version of ClickHouse TCP protocol.\n ///\n /// Should be incremented manually on protocol changes.\n ///\n /// NOTE: DBMS_TCP_PROTOCOL_VERSION has nothing common with VERSION_REVISION,\n /// later is just a number for server version (one number instead of commit SHA)\n /// for simplicity (sometimes it may be more convenient in some use cases).\n-static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54479;\n+static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54480;",
        "comment_created_at": "2025-07-30T13:43:52+00:00",
        "comment_author": "yakov-olkhovskiy",
        "comment_body": "I don't think we need to bump protocol version for this - maybe we can check if system.completions exists, and use it if it does, and if not fallback to the old method\r\nhttps://clickhouse.com/docs/sql-reference/statements/exists",
        "pr_file_module": null
      },
      {
        "comment_id": "2242924470",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84694,
        "pr_file": "src/Core/ProtocolDefines.h",
        "discussion_id": "2242739575",
        "commented_code": "@@ -112,12 +112,14 @@ static constexpr auto DBMS_MIN_REVISON_WITH_PARALLEL_BLOCK_MARSHALLING = 54478;\n \n static constexpr auto DBMS_MIN_REVISION_WITH_VERSIONED_CLUSTER_FUNCTION_PROTOCOL = 54479;\n \n+static constexpr auto DBMS_MIN_REVISION_WITH_SYSTEM_COMPLETIONS_TABLE = 54480;\n+\n /// Version of ClickHouse TCP protocol.\n ///\n /// Should be incremented manually on protocol changes.\n ///\n /// NOTE: DBMS_TCP_PROTOCOL_VERSION has nothing common with VERSION_REVISION,\n /// later is just a number for server version (one number instead of commit SHA)\n /// for simplicity (sometimes it may be more convenient in some use cases).\n-static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54479;\n+static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54480;",
        "comment_created_at": "2025-07-30T14:36:03+00:00",
        "comment_author": "RuS2m",
        "comment_body": "Initially I thought that using protocol versions is the way to track it, since [similar approach was taken for tracking the version of sever where system.keywords table was introduced](https://github.com/ClickHouse/ClickHouse/commit/b472c07ab29514b0bd1d114708d380161e952460), however if it's not, happy to change it to simple exist statement",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218974502",
    "pr_number": 76802,
    "pr_file": "src/Storages/ObjectStorage/HDFS/Configuration.h",
    "created_at": "2025-07-21T11:53:33+00:00",
    "commented_code": "std::string getSignatures(bool with_structure = true) const { return with_structure ? signatures_with_structure : signatures_without_structure; }\n     size_t getMaxNumberOfArguments(bool with_structure = true) const { return with_structure ? max_number_of_arguments_with_structure : max_number_of_arguments_without_structure; }\n \n-    Path getPath() const override { return path; }\n-    void setPath(const Path & path_) override { path = path_; }\n+    /// Unlike s3 and azure, which are object storages,\n+    /// hdfs is a filesystem, so it cannot list files by partial prefix,\n+    /// only by directory.\n+    Path getRawPath() const override { return path; }\n+    void setRawPath(const Path & path_) override { path = {path_.path, false}; }",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2218974502",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 76802,
        "pr_file": "src/Storages/ObjectStorage/HDFS/Configuration.h",
        "discussion_id": "2218974502",
        "commented_code": "@@ -39,12 +39,22 @@ class StorageHDFSConfiguration : public StorageObjectStorageConfiguration\n     std::string getSignatures(bool with_structure = true) const { return with_structure ? signatures_with_structure : signatures_without_structure; }\n     size_t getMaxNumberOfArguments(bool with_structure = true) const { return with_structure ? max_number_of_arguments_with_structure : max_number_of_arguments_without_structure; }\n \n-    Path getPath() const override { return path; }\n-    void setPath(const Path & path_) override { path = path_; }\n+    /// Unlike s3 and azure, which are object storages,\n+    /// hdfs is a filesystem, so it cannot list files by partial prefix,\n+    /// only by directory.\n+    Path getRawPath() const override { return path; }\n+    void setRawPath(const Path & path_) override { path = {path_.path, false}; }",
        "comment_created_at": "2025-07-21T11:53:33+00:00",
        "comment_author": "kssenii",
        "comment_body": "```suggestion\r\n    void setRawPath(const Path & path_) override { path = {path_.path, /* allow_partial_prefix */false}; }\r\n```",
        "pr_file_module": null
      }
    ]
  }
]