[
  {
    "discussion_id": "2121657325",
    "pr_number": 74344,
    "pr_file": "src/Parsers/ParserCopyQuery.cpp",
    "created_at": "2025-06-02T16:35:11+00:00",
    "commented_code": "+#include <Parsers/ParserCopyQuery.h>\n+\n+#include <Parsers/ASTAsterisk.h>\n+#include <Parsers/ASTCopyQuery.h>\n+#include <Parsers/ASTExpressionList.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTIdentifier.h>\n+#include <Parsers/ASTInsertQuery.h>\n+#include <Parsers/ASTInterpolateElement.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTOrderByElement.h>\n+#include <Parsers/ASTSelectQuery.h>\n+#include <Parsers/ASTSelectWithUnionQuery.h>\n+#include <Parsers/ASTSubquery.h>\n+#include <Parsers/ASTTablesInSelectQuery.h>\n+#include <Parsers/ASTWithElement.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+#include <Parsers/ExpressionListParsers.h>\n+#include <Parsers/IAST_fwd.h>\n+#include <Parsers/IParserBase.h>\n+#include <Parsers/ParserSampleRatio.h>\n+#include <Parsers/ParserSelectQuery.h>\n+#include <Parsers/ParserSetQuery.h>\n+#include <Parsers/ParserTablesInSelectQuery.h>\n+#include <Parsers/ParserWithElement.h>\n+\n+#include <memory>\n+\n+namespace DB\n+{\n+\n+\n+bool ParserCopyQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ParserIdentifier s_ident;\n+    ParserKeyword s_copy(Keyword::COPY);\n+    ParserKeyword s_to(Keyword::TO);\n+    ParserKeyword s_from(Keyword::FROM);\n+    ParserToken open_bracket(TokenType::OpeningRoundBracket);\n+    ParserToken close_bracket(TokenType::ClosingRoundBracket);\n+\n+    ParserSubquery s_subquery;\n+\n+    auto copy_element = std::make_shared<ASTCopyQuery>();\n+    node = copy_element;\n+\n+    if (!s_copy.ignore(pos, expected))\n+        return false;\n+\n+    auto saved_pos = pos;\n+    if (!open_bracket.ignore(pos, expected))\n+    {\n+        ParserIdentifier s_table_identifier;\n+        ASTPtr table_name;\n+        if (!s_table_identifier.parse(pos, table_name, expected))\n+            return false;\n+\n+        if (open_bracket.ignore(pos, expected))\n+            while (!close_bracket.ignore(pos, expected))\n+                ++pos;\n+\n+        saved_pos = pos;\n+        copy_element->table_name = table_name->as<ASTIdentifier>()->full_name;\n+\n+        if (s_to.ignore(pos, expected))\n+        {\n+            copy_element->type = ASTCopyQuery::QueryType::COPY_TO;\n+        }\n+        else if (pos = saved_pos; s_from.ignore(pos, expected))\n+        {\n+            copy_element->type = ASTCopyQuery::QueryType::COPY_FROM;\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+\n+        while (!pos->isEnd())",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2121657325",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 74344,
        "pr_file": "src/Parsers/ParserCopyQuery.cpp",
        "discussion_id": "2121657325",
        "commented_code": "@@ -0,0 +1,108 @@\n+#include <Parsers/ParserCopyQuery.h>\n+\n+#include <Parsers/ASTAsterisk.h>\n+#include <Parsers/ASTCopyQuery.h>\n+#include <Parsers/ASTExpressionList.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTIdentifier.h>\n+#include <Parsers/ASTInsertQuery.h>\n+#include <Parsers/ASTInterpolateElement.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTOrderByElement.h>\n+#include <Parsers/ASTSelectQuery.h>\n+#include <Parsers/ASTSelectWithUnionQuery.h>\n+#include <Parsers/ASTSubquery.h>\n+#include <Parsers/ASTTablesInSelectQuery.h>\n+#include <Parsers/ASTWithElement.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+#include <Parsers/ExpressionListParsers.h>\n+#include <Parsers/IAST_fwd.h>\n+#include <Parsers/IParserBase.h>\n+#include <Parsers/ParserSampleRatio.h>\n+#include <Parsers/ParserSelectQuery.h>\n+#include <Parsers/ParserSetQuery.h>\n+#include <Parsers/ParserTablesInSelectQuery.h>\n+#include <Parsers/ParserWithElement.h>\n+\n+#include <memory>\n+\n+namespace DB\n+{\n+\n+\n+bool ParserCopyQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ParserIdentifier s_ident;\n+    ParserKeyword s_copy(Keyword::COPY);\n+    ParserKeyword s_to(Keyword::TO);\n+    ParserKeyword s_from(Keyword::FROM);\n+    ParserToken open_bracket(TokenType::OpeningRoundBracket);\n+    ParserToken close_bracket(TokenType::ClosingRoundBracket);\n+\n+    ParserSubquery s_subquery;\n+\n+    auto copy_element = std::make_shared<ASTCopyQuery>();\n+    node = copy_element;\n+\n+    if (!s_copy.ignore(pos, expected))\n+        return false;\n+\n+    auto saved_pos = pos;\n+    if (!open_bracket.ignore(pos, expected))\n+    {\n+        ParserIdentifier s_table_identifier;\n+        ASTPtr table_name;\n+        if (!s_table_identifier.parse(pos, table_name, expected))\n+            return false;\n+\n+        if (open_bracket.ignore(pos, expected))\n+            while (!close_bracket.ignore(pos, expected))\n+                ++pos;\n+\n+        saved_pos = pos;\n+        copy_element->table_name = table_name->as<ASTIdentifier>()->full_name;\n+\n+        if (s_to.ignore(pos, expected))\n+        {\n+            copy_element->type = ASTCopyQuery::QueryType::COPY_TO;\n+        }\n+        else if (pos = saved_pos; s_from.ignore(pos, expected))\n+        {\n+            copy_element->type = ASTCopyQuery::QueryType::COPY_FROM;\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+\n+        while (!pos->isEnd())",
        "comment_created_at": "2025-06-02T16:35:11+00:00",
        "comment_author": "GrigoryPervakov",
        "comment_body": "There could be other meaningful sections like `WITH {options}` or `WHERE {in data filters}`\r\nWe should not silently ignore it, it is better to parse it and throw an unsupported exception",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2244734561",
    "pr_number": 84547,
    "pr_file": "src/Processors/Sources/ShellCommandSource.cpp",
    "created_at": "2025-07-31T08:36:04+00:00",
    "commented_code": "ssize_t res = ::write(fd, working_buffer.begin() + bytes_written, offset() - bytes_written);\n \n             if ((-1 == res || 0 == res) && errno != EINTR)\n-                throw ErrnoException(ErrorCodes::CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Cannot write into pipe\");\n+                throw ErrnoException(ErrorCodes::SHELL_COMMAND_CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Shell command cannot write into pipe\");",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2244734561",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84547,
        "pr_file": "src/Processors/Sources/ShellCommandSource.cpp",
        "discussion_id": "2244734561",
        "commented_code": "@@ -275,7 +275,7 @@ class TimeoutWriteBufferFromFileDescriptor : public BufferWithOwnMemory<WriteBuf\n             ssize_t res = ::write(fd, working_buffer.begin() + bytes_written, offset() - bytes_written);\n \n             if ((-1 == res || 0 == res) && errno != EINTR)\n-                throw ErrnoException(ErrorCodes::CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Cannot write into pipe\");\n+                throw ErrnoException(ErrorCodes::SHELL_COMMAND_CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Shell command cannot write into pipe\");",
        "comment_created_at": "2025-07-31T08:36:04+00:00",
        "comment_author": "rschu1ze",
        "comment_body": "Here, we throw `SHELL_COMMAND_CANNOT_WRITE_TO_FILE_DESCRIPTOR` if `::write(fd, working_buffer.begin() + bytes_written, offset() - bytes_written);` fails.\r\n\r\nIn file \"src/IO/WriteBufferFromFileDescriptor.cpp\", we throw `CANNOT_WRITE_TO_FILE_DESCRIPTOR` if `::write(fd, working_buffer.begin() + bytes_written, offset() - bytes_written);` fails.\r\n\r\nAs per your PR, the _same_ problem now causes _different_ error codes. This seems inherently wrong but maybe I didn't understand the motivation for this PR yet (the PR doesn't link an issue).",
        "pr_file_module": null
      },
      {
        "comment_id": "2244865131",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84547,
        "pr_file": "src/Processors/Sources/ShellCommandSource.cpp",
        "discussion_id": "2244734561",
        "commented_code": "@@ -275,7 +275,7 @@ class TimeoutWriteBufferFromFileDescriptor : public BufferWithOwnMemory<WriteBuf\n             ssize_t res = ::write(fd, working_buffer.begin() + bytes_written, offset() - bytes_written);\n \n             if ((-1 == res || 0 == res) && errno != EINTR)\n-                throw ErrnoException(ErrorCodes::CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Cannot write into pipe\");\n+                throw ErrnoException(ErrorCodes::SHELL_COMMAND_CANNOT_WRITE_TO_FILE_DESCRIPTOR, \"Shell command cannot write into pipe\");",
        "comment_created_at": "2025-07-31T09:33:53+00:00",
        "comment_author": "alexey-milovidov",
        "comment_body": "The goal is to lift low-level error codes to higher-level error codes, so they reflect more of the business logic and less of the operating system behavior.\r\n\r\nBut maybe catch/throw somewhere above will be more appropriate.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142316997",
    "pr_number": 81040,
    "pr_file": "src/Storages/ObjectStorageQueue/ObjectStorageQueueOrderedFileMetadata.cpp",
    "created_at": "2025-06-12T10:37:35+00:00",
    "commented_code": "return false;\n }\n \n+bool ObjectStorageQueueOrderedFileMetadata::getMaxProcessedFilesByHive(\n+    std::unordered_map<std::string, std::string> & max_processed_files,\n+    const std::string & processed_node_path_,\n+    const zkutil::ZooKeeperPtr & zk_client)\n+{\n+    Strings hives;\n+\n+    auto code = zk_client->tryGetChildren(processed_node_path_, hives);\n+\n+    if (code != Coordination::Error::ZOK)\n+        return false;",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2142316997",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 81040,
        "pr_file": "src/Storages/ObjectStorageQueue/ObjectStorageQueueOrderedFileMetadata.cpp",
        "discussion_id": "2142316997",
        "commented_code": "@@ -181,6 +187,46 @@ bool ObjectStorageQueueOrderedFileMetadata::getMaxProcessedFile(\n     return false;\n }\n \n+bool ObjectStorageQueueOrderedFileMetadata::getMaxProcessedFilesByHive(\n+    std::unordered_map<std::string, std::string> & max_processed_files,\n+    const std::string & processed_node_path_,\n+    const zkutil::ZooKeeperPtr & zk_client)\n+{\n+    Strings hives;\n+\n+    auto code = zk_client->tryGetChildren(processed_node_path_, hives);\n+\n+    if (code != Coordination::Error::ZOK)\n+        return false;",
        "comment_created_at": "2025-06-12T10:37:35+00:00",
        "comment_author": "kssenii",
        "comment_body": "Let's explicitly check the error codes that are expected and return false, otherwise and exception. For example in case of `Coordination::isHardwareError` I think we do not want to just silently quit.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2254712536",
    "pr_number": 83094,
    "pr_file": "src/Storages/ObjectStorage/DataLakes/Iceberg/ManifestFile.cpp",
    "created_at": "2025-08-05T15:35:08+00:00",
    "commented_code": "namespace Iceberg\n {\n \n+String FileContentTypeToString(FileContentType type)\n+{\n+    switch (type)\n+    {\n+        case FileContentType::DATA:\n+            return \"data\";\n+        case FileContentType::POSITIONAL_DELETE:\n+            return \"position_deletes\";\n+        case FileContentType::EQUALITY_DELETE:\n+            return \"equality_deletes\";\n+    }",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2254712536",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 83094,
        "pr_file": "src/Storages/ObjectStorage/DataLakes/Iceberg/ManifestFile.cpp",
        "discussion_id": "2254712536",
        "commented_code": "@@ -27,6 +29,19 @@ namespace DB::ErrorCodes\n namespace Iceberg\n {\n \n+String FileContentTypeToString(FileContentType type)\n+{\n+    switch (type)\n+    {\n+        case FileContentType::DATA:\n+            return \"data\";\n+        case FileContentType::POSITIONAL_DELETE:\n+            return \"position_deletes\";\n+        case FileContentType::EQUALITY_DELETE:\n+            return \"equality_deletes\";\n+    }",
        "comment_created_at": "2025-08-05T15:35:08+00:00",
        "comment_author": "hanfei1991",
        "comment_body": "we can throw logical error if type does not match anything.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2068320006",
    "pr_number": 76802,
    "pr_file": "src/TableFunctions/TableFunctionObjectStorage.cpp",
    "created_at": "2025-04-30T09:40:41+00:00",
    "commented_code": "return storage;\n     }\n \n+    if (insert_query)\n+    {\n+        if (const auto * insert_query_class = insert_query->as<ASTInsertQuery>())\n+        {\n+            configuration->updatePartitionStrategy(insert_query_class->partition_by, columns, context);\n+        }\n+    }",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2068320006",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 76802,
        "pr_file": "src/TableFunctions/TableFunctionObjectStorage.cpp",
        "discussion_id": "2068320006",
        "commented_code": "@@ -165,9 +167,17 @@ StoragePtr TableFunctionObjectStorage<Definition, Configuration>::executeImpl(\n         return storage;\n     }\n \n+    if (insert_query)\n+    {\n+        if (const auto * insert_query_class = insert_query->as<ASTInsertQuery>())\n+        {\n+            configuration->updatePartitionStrategy(insert_query_class->partition_by, columns, context);\n+        }\n+    }",
        "comment_created_at": "2025-04-30T09:40:41+00:00",
        "comment_author": "ianton-ru",
        "comment_body": "Should be exception LOGICAL_ERROR if `insert_query` is not `ASTInsertQuery`? Or it can be legal?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192902588",
    "pr_number": 76802,
    "pr_file": "src/Storages/PartitionStrategy.cpp",
    "created_at": "2025-07-08T16:00:27+00:00",
    "commented_code": "+#include <Storages/PartitionStrategy.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Interpreters/TreeRewriter.h>\n+#include <Interpreters/ExpressionAnalyzer.h>\n+#include <Storages/PartitionedSink.h>\n+#include <Functions/generateSnowflakeID.h>\n+#include <Interpreters/Context.h>\n+#include <Storages/KeyDescription.h>\n+#include <Poco/String.h>\n+#include <Core/Settings.h>\n+#include <Storages/ColumnsDescription.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+extern const int LOGICAL_ERROR;\n+extern const int BAD_ARGUMENTS;\n+}\n+\n+namespace\n+{\n+    HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName buildExpressionHive(\n+        ASTPtr partition_by,\n+        const NamesAndTypesList & partition_columns,\n+        const Block & sample_block,\n+        ContextPtr context)\n+    {\n+        HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName actions_with_column_name;\n+        ASTs concat_args;\n+\n+        if (const auto * tuple_function = partition_by->as<ASTFunction>();\n+            tuple_function && tuple_function->name == \"tuple\")\n+        {\n+            chassert(tuple_function->arguments->children.size() == partition_columns.size());",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2192902588",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 76802,
        "pr_file": "src/Storages/PartitionStrategy.cpp",
        "discussion_id": "2192902588",
        "commented_code": "@@ -0,0 +1,370 @@\n+#include <Storages/PartitionStrategy.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Interpreters/TreeRewriter.h>\n+#include <Interpreters/ExpressionAnalyzer.h>\n+#include <Storages/PartitionedSink.h>\n+#include <Functions/generateSnowflakeID.h>\n+#include <Interpreters/Context.h>\n+#include <Storages/KeyDescription.h>\n+#include <Poco/String.h>\n+#include <Core/Settings.h>\n+#include <Storages/ColumnsDescription.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+extern const int LOGICAL_ERROR;\n+extern const int BAD_ARGUMENTS;\n+}\n+\n+namespace\n+{\n+    HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName buildExpressionHive(\n+        ASTPtr partition_by,\n+        const NamesAndTypesList & partition_columns,\n+        const Block & sample_block,\n+        ContextPtr context)\n+    {\n+        HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName actions_with_column_name;\n+        ASTs concat_args;\n+\n+        if (const auto * tuple_function = partition_by->as<ASTFunction>();\n+            tuple_function && tuple_function->name == \"tuple\")\n+        {\n+            chassert(tuple_function->arguments->children.size() == partition_columns.size());",
        "comment_created_at": "2025-07-08T16:00:27+00:00",
        "comment_author": "kssenii",
        "comment_body": "Let's make it full exception instead of assert to avoid segfault, just in case",
        "pr_file_module": null
      },
      {
        "comment_id": "2197775963",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 76802,
        "pr_file": "src/Storages/PartitionStrategy.cpp",
        "discussion_id": "2192902588",
        "commented_code": "@@ -0,0 +1,370 @@\n+#include <Storages/PartitionStrategy.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Interpreters/TreeRewriter.h>\n+#include <Interpreters/ExpressionAnalyzer.h>\n+#include <Storages/PartitionedSink.h>\n+#include <Functions/generateSnowflakeID.h>\n+#include <Interpreters/Context.h>\n+#include <Storages/KeyDescription.h>\n+#include <Poco/String.h>\n+#include <Core/Settings.h>\n+#include <Storages/ColumnsDescription.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+extern const int LOGICAL_ERROR;\n+extern const int BAD_ARGUMENTS;\n+}\n+\n+namespace\n+{\n+    HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName buildExpressionHive(\n+        ASTPtr partition_by,\n+        const NamesAndTypesList & partition_columns,\n+        const Block & sample_block,\n+        ContextPtr context)\n+    {\n+        HiveStylePartitionStrategy::PartitionExpressionActionsAndColumnName actions_with_column_name;\n+        ASTs concat_args;\n+\n+        if (const auto * tuple_function = partition_by->as<ASTFunction>();\n+            tuple_function && tuple_function->name == \"tuple\")\n+        {\n+            chassert(tuple_function->arguments->children.size() == partition_columns.size());",
        "comment_created_at": "2025-07-10T13:43:53+00:00",
        "comment_author": "arthurpassos",
        "comment_body": "I made them all LOGICAL_ERROR. Let me know if you want a different type",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2260055378",
    "pr_number": 83840,
    "pr_file": "src/Interpreters/DDLWorker.cpp",
    "created_at": "2025-08-07T11:47:36+00:00",
    "commented_code": "String DDLWorker::enqueueQuery(DDLLogEntry & entry, const ZooKeeperRetriesInfo & retries_info)\n {\n+    if (stop_flag)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Can't enqueue a query after shutdown\");",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2260055378",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 83840,
        "pr_file": "src/Interpreters/DDLWorker.cpp",
        "discussion_id": "2260055378",
        "commented_code": "@@ -1064,6 +1064,12 @@ void DDLWorker::createStatusDirs(const std::string & node_path, const ZooKeeperP\n \n String DDLWorker::enqueueQuery(DDLLogEntry & entry, const ZooKeeperRetriesInfo & retries_info)\n {\n+    if (stop_flag)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Can't enqueue a query after shutdown\");",
        "comment_created_at": "2025-08-07T11:47:36+00:00",
        "comment_author": "vitlibar",
        "comment_body": "I also added throwing this logical error to be sure that we never enqueue queries in `DDLWorker` after calling `DDLWorker::shutdown()`.",
        "pr_file_module": null
      }
    ]
  }
]