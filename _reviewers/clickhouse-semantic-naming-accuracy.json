[
  {
    "discussion_id": "2223474875",
    "pr_number": 82807,
    "pr_file": "src/Processors/QueryPlan/ReadFromMergeTree.h",
    "created_at": "2025-07-22T18:30:13+00:00",
    "commented_code": "bool isParallelReadingFromReplicas() const { return is_parallel_reading_from_replicas; }\n \n-    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and these parameters must be forwarded to the new step.\n-    void cancelParallelReading();\n-    std::optional<MergeTreeAllRangesCallback> getAllRangesCallback() { return all_ranges_callback; }\n-    std::optional<MergeTreeReadTaskCallback> getReadTaskCallback() { return read_task_callback; }\n-    std::optional<size_t> getNumberOfCurrentReplica() { return number_of_current_replica; }\n+    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and the ParallelReadingExtension must be forwarded to the new step.\n+    /// Meanwhile, the ParallelReadingExtension originally in ReadFromMergeTree might be detached.\n+    void detachParallelReadingExtension();",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2223474875",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 82807,
        "pr_file": "src/Processors/QueryPlan/ReadFromMergeTree.h",
        "discussion_id": "2223474875",
        "commented_code": "@@ -257,11 +258,10 @@ class ReadFromMergeTree final : public SourceStepWithFilter\n \n     bool isParallelReadingFromReplicas() const { return is_parallel_reading_from_replicas; }\n \n-    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and these parameters must be forwarded to the new step.\n-    void cancelParallelReading();\n-    std::optional<MergeTreeAllRangesCallback> getAllRangesCallback() { return all_ranges_callback; }\n-    std::optional<MergeTreeReadTaskCallback> getReadTaskCallback() { return read_task_callback; }\n-    std::optional<size_t> getNumberOfCurrentReplica() { return number_of_current_replica; }\n+    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and the ParallelReadingExtension must be forwarded to the new step.\n+    /// Meanwhile, the ParallelReadingExtension originally in ReadFromMergeTree might be detached.\n+    void detachParallelReadingExtension();",
        "comment_created_at": "2025-07-22T18:30:13+00:00",
        "comment_author": "nickitat",
        "comment_body": "Methods should have the following semantics:\n\n``` cpp\nx getX() {\n  return x;\n}\n```\n\n``` cpp\nvoid cancel() {\n  x.reset()/clear();\n}\n```\n\n``` cpp\nX detachX() {\n  auto ret = move(x);\n  x.reset()/clear();\n  return move(ret);\n}\n```\n\nI.e., `detach` is `get + cancel`.\n\nSo, `getParallelReadingExtension` now does what it is supposed to do. But `detachParallelReadingExtension` acts like `cancel`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2225410336",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 82807,
        "pr_file": "src/Processors/QueryPlan/ReadFromMergeTree.h",
        "discussion_id": "2223474875",
        "commented_code": "@@ -257,11 +258,10 @@ class ReadFromMergeTree final : public SourceStepWithFilter\n \n     bool isParallelReadingFromReplicas() const { return is_parallel_reading_from_replicas; }\n \n-    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and these parameters must be forwarded to the new step.\n-    void cancelParallelReading();\n-    std::optional<MergeTreeAllRangesCallback> getAllRangesCallback() { return all_ranges_callback; }\n-    std::optional<MergeTreeReadTaskCallback> getReadTaskCallback() { return read_task_callback; }\n-    std::optional<size_t> getNumberOfCurrentReplica() { return number_of_current_replica; }\n+    /// After projection optimization, ReadFromMergeTree may be replaced with a new reading step, and the ParallelReadingExtension must be forwarded to the new step.\n+    /// Meanwhile, the ParallelReadingExtension originally in ReadFromMergeTree might be detached.\n+    void detachParallelReadingExtension();",
        "comment_created_at": "2025-07-23T12:23:14+00:00",
        "comment_author": "zoomxi",
        "comment_body": "Thank you for your patient explanation of the meaning of `detach`. However, it may not fit the semantics here. \r\n\r\nThe original parent part reading step needs to pass `ParallelReadingExtension` to the projection reading step, but it doesn't necessarily require \"detach\" because the original parent part reading step may still need `ParallelReadingExtension`, and at the same time, the projection reading step may need to clear the received `ParallelReadingExtension`. \r\n\r\nTherefore, perhaps `clearParallelReadingExtension` is the most semantically appropriate here.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2282769711",
    "pr_number": 85040,
    "pr_file": "src/Storages/MergeTree/PatchParts/applyPatches.h",
    "created_at": "2025-08-18T15:37:46+00:00",
    "commented_code": "#pragma once\n #include <Storages/MergeTree/PatchParts/PatchPartInfo.h>\n-#include <Common/HashTable/Hash.h>\n+#include <Storages/MergeTree/PatchParts/PatchJoinCache.h>\n #include <Common/PODArray.h>\n #include <Core/Block.h>\n-#include <absl/container/flat_hash_map.h>\n \n namespace DB\n {\n \n+/// Represents a patch that can be applied to the result block to update the data.\n struct PatchToApply\n {\n-    PaddedPODArray<UInt64> result_indices;\n-    PaddedPODArray<UInt64> patch_indices;\n-    Block patch_block;\n+    /// Blocks with data from patch parts.\n+    std::vector<Block> patch_blocks;\n+    /// Index of row to update in the result block.\n+    PaddedPODArray<UInt64> result_row_indices;\n+    /// Index of patch block to take the updated row from.\n+    PaddedPODArray<UInt64> patch_col_indices;",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2282769711",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 85040,
        "pr_file": "src/Storages/MergeTree/PatchParts/applyPatches.h",
        "discussion_id": "2282769711",
        "commented_code": "@@ -1,67 +1,64 @@\n #pragma once\n #include <Storages/MergeTree/PatchParts/PatchPartInfo.h>\n-#include <Common/HashTable/Hash.h>\n+#include <Storages/MergeTree/PatchParts/PatchJoinCache.h>\n #include <Common/PODArray.h>\n #include <Core/Block.h>\n-#include <absl/container/flat_hash_map.h>\n \n namespace DB\n {\n \n+/// Represents a patch that can be applied to the result block to update the data.\n struct PatchToApply\n {\n-    PaddedPODArray<UInt64> result_indices;\n-    PaddedPODArray<UInt64> patch_indices;\n-    Block patch_block;\n+    /// Blocks with data from patch parts.\n+    std::vector<Block> patch_blocks;\n+    /// Index of row to update in the result block.\n+    PaddedPODArray<UInt64> result_row_indices;\n+    /// Index of patch block to take the updated row from.\n+    PaddedPODArray<UInt64> patch_col_indices;",
        "comment_created_at": "2025-08-18T15:37:46+00:00",
        "comment_author": "antaljanosbenjamin",
        "comment_body": "Why is this called `patch_col_indices`? Shouldn't this be `patch_block_indices` instead? Or am I getting something wrong? I feel like I am misunderstanding this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2282889238",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 85040,
        "pr_file": "src/Storages/MergeTree/PatchParts/applyPatches.h",
        "discussion_id": "2282769711",
        "commented_code": "@@ -1,67 +1,64 @@\n #pragma once\n #include <Storages/MergeTree/PatchParts/PatchPartInfo.h>\n-#include <Common/HashTable/Hash.h>\n+#include <Storages/MergeTree/PatchParts/PatchJoinCache.h>\n #include <Common/PODArray.h>\n #include <Core/Block.h>\n-#include <absl/container/flat_hash_map.h>\n \n namespace DB\n {\n \n+/// Represents a patch that can be applied to the result block to update the data.\n struct PatchToApply\n {\n-    PaddedPODArray<UInt64> result_indices;\n-    PaddedPODArray<UInt64> patch_indices;\n-    Block patch_block;\n+    /// Blocks with data from patch parts.\n+    std::vector<Block> patch_blocks;\n+    /// Index of row to update in the result block.\n+    PaddedPODArray<UInt64> result_row_indices;\n+    /// Index of patch block to take the updated row from.\n+    PaddedPODArray<UInt64> patch_col_indices;",
        "comment_created_at": "2025-08-18T16:27:16+00:00",
        "comment_author": "CurtizJ",
        "comment_body": "Yes, it's better to call this `patch_block_indices`. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243323017",
    "pr_number": 83408,
    "pr_file": "src/Databases/DatabaseReplicated.h",
    "created_at": "2025-07-30T16:52:58+00:00",
    "commented_code": "static constexpr auto BROKEN_TABLES_SUFFIX = \"_broken_tables\";\n     static constexpr auto BROKEN_REPLICATED_TABLES_SUFFIX = \"_broken_replicated_tables\";\n \n+    /** For the system table database replicas. */\n+    struct ReplicatedStatus",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2243323017",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 83408,
        "pr_file": "src/Databases/DatabaseReplicated.h",
        "discussion_id": "2243323017",
        "commented_code": "@@ -45,6 +47,21 @@ class DatabaseReplicated : public DatabaseAtomic\n     static constexpr auto BROKEN_TABLES_SUFFIX = \"_broken_tables\";\n     static constexpr auto BROKEN_REPLICATED_TABLES_SUFFIX = \"_broken_replicated_tables\";\n \n+    /** For the system table database replicas. */\n+    struct ReplicatedStatus",
        "comment_created_at": "2025-07-30T16:52:58+00:00",
        "comment_author": "GrigoryPervakov",
        "comment_body": "NIT: \r\nTo me, the name `ReplicatedStatus` is a bit confusing.\r\nIt sounds like a status that is being replicated.\r\nI'd better name it `ReplicatedDatabaseStatus` as was for tables before, or just `Status` or `ReplicationStatus` to avoid duplicating `Database` in access like `DatabaseReplicated::ReplicatedDatabaseStatus`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2258029483",
    "pr_number": 84435,
    "pr_file": "src/Storages/MergeTree/GinIndexStore.h",
    "created_at": "2025-08-06T19:03:34+00:00",
    "commented_code": "static const CompressionCodecPtr & zstdCodec();\n };\n \n+#if USE_FASTPFOR\n+class GinIndexPostingListDeltaPforCompression",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2258029483",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84435,
        "pr_file": "src/Storages/MergeTree/GinIndexStore.h",
        "discussion_id": "2258029483",
        "commented_code": "@@ -49,6 +50,45 @@ class GinIndexCompressionFactory\n     static const CompressionCodecPtr & zstdCodec();\n };\n \n+#if USE_FASTPFOR\n+class GinIndexPostingListDeltaPforCompression",
        "comment_created_at": "2025-08-06T19:03:34+00:00",
        "comment_author": "rschu1ze",
        "comment_body": "Can we rename the class name from `Compression` to `Serialization`? Cf. the naming in \"src/DataTypes/Serializations/ISerialization.h\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146820667",
    "pr_number": 76802,
    "pr_file": "src/Storages/ObjectStorage/StorageObjectStorage.h",
    "created_at": "2025-06-14T11:07:33+00:00",
    "commented_code": "/// buckets in S3. If object storage doesn't have any namepaces return empty string.\n     virtual std::string getNamespaceType() const { return \"namespace\"; }\n \n-    virtual Path getFullPath() const { return \"\"; }\n-    virtual Path getPath() const = 0;\n-    virtual void setPath(const Path & path) = 0;\n+    // Path provided by the user in the query\n+    virtual Path getRawPath() const = 0;\n+    // Path used for reading, it is usually a globbed path like `'table_root/**.parquet'\n+    Path getReadingPath() const;\n+    // Path used for writing, it should not be globbed and might contain a partition key\n+    Path getWritingPath(const std::string & partition_id = \"\") const;",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2146820667",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 76802,
        "pr_file": "src/Storages/ObjectStorage/StorageObjectStorage.h",
        "discussion_id": "2146820667",
        "commented_code": "@@ -193,10 +211,17 @@ class StorageObjectStorage::Configuration\n     /// buckets in S3. If object storage doesn't have any namepaces return empty string.\n     virtual std::string getNamespaceType() const { return \"namespace\"; }\n \n-    virtual Path getFullPath() const { return \"\"; }\n-    virtual Path getPath() const = 0;\n-    virtual void setPath(const Path & path) = 0;\n+    // Path provided by the user in the query\n+    virtual Path getRawPath() const = 0;\n+    // Path used for reading, it is usually a globbed path like `'table_root/**.parquet'\n+    Path getReadingPath() const;\n+    // Path used for writing, it should not be globbed and might contain a partition key\n+    Path getWritingPath(const std::string & partition_id = \"\") const;",
        "comment_created_at": "2025-06-14T11:07:33+00:00",
        "comment_author": "kssenii",
        "comment_body": "\"Reading/writing path\" is grammatically strange.\r\n```suggestion\r\n    Path getPathForRead() const;\r\n    // Path used for writing, it should not be globbed and might contain a partition key\r\n    Path getPathForWrite(const std::string & partition_id = \"\") const;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2242623877",
    "pr_number": 84710,
    "pr_file": "src/Storages/MergeTree/MergeTreeData.h",
    "created_at": "2025-07-30T13:05:48+00:00",
    "commented_code": "/// Makes sense only for ordinary MergeTree engines because for them block numbering doesn't depend on partition.\n     std::optional<Int64> getMinPartDataVersion() const;\n \n+    /// Is the disk included in the scope for searching [detached] parts\n+    ///   sometimes it is better to bypass a disk e.g. to avoid interactions with a remote storage\n+    bool lookOnDisk(DiskPtr disk) const;",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2242623877",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84710,
        "pr_file": "src/Storages/MergeTree/MergeTreeData.h",
        "discussion_id": "2242623877",
        "commented_code": "@@ -722,6 +722,10 @@ class MergeTreeData : public IStorage, public WithMutableContext\n     /// Makes sense only for ordinary MergeTree engines because for them block numbering doesn't depend on partition.\n     std::optional<Int64> getMinPartDataVersion() const;\n \n+    /// Is the disk included in the scope for searching [detached] parts\n+    ///   sometimes it is better to bypass a disk e.g. to avoid interactions with a remote storage\n+    bool lookOnDisk(DiskPtr disk) const;",
        "comment_created_at": "2025-07-30T13:05:48+00:00",
        "comment_author": "arthurpassos",
        "comment_body": "I would make the method name a bit more descriptive (e.g, `shouldSearchForPartsOnDisk`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2251134867",
    "pr_number": 84710,
    "pr_file": "src/Core/SettingsEnums.h",
    "created_at": "2025-08-04T10:57:40+00:00",
    "commented_code": "DECLARE_SETTING_ENUM(GeoToH3ArgumentOrder)\n \n+enum class SearchOrphanedPartsDrives : uint8_t",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2251134867",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84710,
        "pr_file": "src/Core/SettingsEnums.h",
        "discussion_id": "2251134867",
        "commented_code": "@@ -422,4 +422,12 @@ enum class GeoToH3ArgumentOrder : uint8_t\n \n DECLARE_SETTING_ENUM(GeoToH3ArgumentOrder)\n \n+enum class SearchOrphanedPartsDrives : uint8_t",
        "comment_created_at": "2025-08-04T10:57:40+00:00",
        "comment_author": "azat",
        "comment_body": "Let's rename **driver** with **disk** everywhere (we use disk, not drive)",
        "pr_file_module": null
      }
    ]
  }
]