[
  {
    "discussion_id": "2230739850",
    "pr_number": 84383,
    "pr_file": "tests/queries/0_stateless/00950_test_double_delta_codec_types.sql",
    "created_at": "2025-07-25T10:24:51+00:00",
    "commented_code": "+-- Tags: no-random-merge-tree-settings\n+\n+DROP TABLE IF EXISTS codecTest;\n+\n+-- Check error on FixedString with and without argument.\n+CREATE TABLE codecTest (c0 FixedString(9) CODEC(DoubleDelta)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }\n+CREATE TABLE codecTest (c0 FixedString(9) CODEC(DoubleDelta(1))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }\n+\n+-- Similarly on LowCardinality(nullable)\n+set enable_time_time64_type=1;\n+CREATE TABLE codecTest (c0 LowCardinality(Nullable(Time)) CODEC(DoubleDelta)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2230739850",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 84383,
        "pr_file": "tests/queries/0_stateless/00950_test_double_delta_codec_types.sql",
        "discussion_id": "2230739850",
        "commented_code": "@@ -0,0 +1,18 @@\n+-- Tags: no-random-merge-tree-settings\n+\n+DROP TABLE IF EXISTS codecTest;\n+\n+-- Check error on FixedString with and without argument.\n+CREATE TABLE codecTest (c0 FixedString(9) CODEC(DoubleDelta)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }\n+CREATE TABLE codecTest (c0 FixedString(9) CODEC(DoubleDelta(1))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }\n+\n+-- Similarly on LowCardinality(nullable)\n+set enable_time_time64_type=1;\n+CREATE TABLE codecTest (c0 LowCardinality(Nullable(Time)) CODEC(DoubleDelta)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }",
        "comment_created_at": "2025-07-25T10:24:51+00:00",
        "comment_author": "rschu1ze",
        "comment_body": "It is not clear for the reader if table creation is supposed to fail because the type is Time, because of LowCardinality or because of Nullable. Suggest to split this into multiple tests.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274635279",
    "pr_number": 85557,
    "pr_file": "tests/queries/0_stateless/02354_vector_search_distance_in_select_list.sql",
    "created_at": "2025-08-13T21:05:29+00:00",
    "commented_code": "+-- Tags: no-fasttest, no-ordinary-database, no-parallel-replicas\n+-- no-parallel-replicas: Because the test verifies EXPLAIN output and \n+-- confirms rescoring optimization works.\n+\n+-- Tests that the rescoring optimization works when distance function is\n+-- present explicitly in the SELECT columns list, apart from ORDER BY.\n+-- The return type of the cosineDistance/L2Distance function will vary\n+-- based on the data type of the 2 input arguments.\n+\n+SET enable_vector_similarity_index = 1;\n+SET enable_analyzer = 1;\n+SET vector_search_with_rescoring = 0;\n+\n+SELECT 'Creating tables with Array(Float32) and Array(BFloat16) column';\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab(\n+    id Int32,\n+    vec Array(Float32),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+DROP TABLE IF EXISTS tab2;\n+CREATE TABLE tab2(\n+    id Int32,\n+    vec Array(BFloat16),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+\n+INSERT INTO tab VALUES (0, [1.0, 0.0]),\n+                       (1, [1.1, 0.0]),\n+                       (2, [1.2, 0.0]),\n+                       (3, [1.3, 0.0]),\n+                       (4, [1.4, 0.0]),\n+                       (5, [0.0, 2.0]),\n+                       (6, [0.0, 2.1]),\n+                       (7, [0.0, 2.2]),\n+                       (8, [0.0, 2.3]),\n+                       (9, [0.0, 2.4]);\n+\n+INSERT INTO tab2 VALUES (0, [1.0, 0.0]),\n+                        (1, [1.1, 0.0]),\n+                        (2, [1.2, 0.0]),\n+                        (3, [1.3, 0.0]),\n+                        (4, [1.4, 0.0]),\n+                        (5, [0.0, 2.0]),\n+                        (6, [0.0, 2.1]),\n+                        (7, [0.0, 2.2]),\n+                        (8, [0.0, 2.3]),\n+                        (9, [0.0, 2.4]);\n+-- The nearest neighbours to [0.0, 0.2] are 5,6,7,8\n+-- In ClickHouse, an array like [0.0, 0.2] is of type Array(Float64)\n+\n+SELECT 'Column is Array(Float32), Search Vector is Array(Float64)';",
    "repo_full_name": "ClickHouse/ClickHouse",
    "discussion_comments": [
      {
        "comment_id": "2274635279",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 85557,
        "pr_file": "tests/queries/0_stateless/02354_vector_search_distance_in_select_list.sql",
        "discussion_id": "2274635279",
        "commented_code": "@@ -0,0 +1,168 @@\n+-- Tags: no-fasttest, no-ordinary-database, no-parallel-replicas\n+-- no-parallel-replicas: Because the test verifies EXPLAIN output and \n+-- confirms rescoring optimization works.\n+\n+-- Tests that the rescoring optimization works when distance function is\n+-- present explicitly in the SELECT columns list, apart from ORDER BY.\n+-- The return type of the cosineDistance/L2Distance function will vary\n+-- based on the data type of the 2 input arguments.\n+\n+SET enable_vector_similarity_index = 1;\n+SET enable_analyzer = 1;\n+SET vector_search_with_rescoring = 0;\n+\n+SELECT 'Creating tables with Array(Float32) and Array(BFloat16) column';\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab(\n+    id Int32,\n+    vec Array(Float32),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+DROP TABLE IF EXISTS tab2;\n+CREATE TABLE tab2(\n+    id Int32,\n+    vec Array(BFloat16),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+\n+INSERT INTO tab VALUES (0, [1.0, 0.0]),\n+                       (1, [1.1, 0.0]),\n+                       (2, [1.2, 0.0]),\n+                       (3, [1.3, 0.0]),\n+                       (4, [1.4, 0.0]),\n+                       (5, [0.0, 2.0]),\n+                       (6, [0.0, 2.1]),\n+                       (7, [0.0, 2.2]),\n+                       (8, [0.0, 2.3]),\n+                       (9, [0.0, 2.4]);\n+\n+INSERT INTO tab2 VALUES (0, [1.0, 0.0]),\n+                        (1, [1.1, 0.0]),\n+                        (2, [1.2, 0.0]),\n+                        (3, [1.3, 0.0]),\n+                        (4, [1.4, 0.0]),\n+                        (5, [0.0, 2.0]),\n+                        (6, [0.0, 2.1]),\n+                        (7, [0.0, 2.2]),\n+                        (8, [0.0, 2.3]),\n+                        (9, [0.0, 2.4]);\n+-- The nearest neighbours to [0.0, 0.2] are 5,6,7,8\n+-- In ClickHouse, an array like [0.0, 0.2] is of type Array(Float64)\n+\n+SELECT 'Column is Array(Float32), Search Vector is Array(Float64)';",
        "comment_created_at": "2025-08-13T21:05:29+00:00",
        "comment_author": "rschu1ze",
        "comment_body": "I think we can simplify this test a lot. We don't need to verify results, we just need to test systematically that queries don't crash. In other words, there is no need for `EXPLAIN PLAN`, `SELECT`s alone are fine.",
        "pr_file_module": null
      },
      {
        "comment_id": "2275102275",
        "repo_full_name": "ClickHouse/ClickHouse",
        "pr_number": 85557,
        "pr_file": "tests/queries/0_stateless/02354_vector_search_distance_in_select_list.sql",
        "discussion_id": "2274635279",
        "commented_code": "@@ -0,0 +1,168 @@\n+-- Tags: no-fasttest, no-ordinary-database, no-parallel-replicas\n+-- no-parallel-replicas: Because the test verifies EXPLAIN output and \n+-- confirms rescoring optimization works.\n+\n+-- Tests that the rescoring optimization works when distance function is\n+-- present explicitly in the SELECT columns list, apart from ORDER BY.\n+-- The return type of the cosineDistance/L2Distance function will vary\n+-- based on the data type of the 2 input arguments.\n+\n+SET enable_vector_similarity_index = 1;\n+SET enable_analyzer = 1;\n+SET vector_search_with_rescoring = 0;\n+\n+SELECT 'Creating tables with Array(Float32) and Array(BFloat16) column';\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab(\n+    id Int32,\n+    vec Array(Float32),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+DROP TABLE IF EXISTS tab2;\n+CREATE TABLE tab2(\n+    id Int32,\n+    vec Array(BFloat16),\n+    INDEX vector_index vec TYPE vector_similarity('hnsw', 'L2Distance', 2)\n+) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+\n+INSERT INTO tab VALUES (0, [1.0, 0.0]),\n+                       (1, [1.1, 0.0]),\n+                       (2, [1.2, 0.0]),\n+                       (3, [1.3, 0.0]),\n+                       (4, [1.4, 0.0]),\n+                       (5, [0.0, 2.0]),\n+                       (6, [0.0, 2.1]),\n+                       (7, [0.0, 2.2]),\n+                       (8, [0.0, 2.3]),\n+                       (9, [0.0, 2.4]);\n+\n+INSERT INTO tab2 VALUES (0, [1.0, 0.0]),\n+                        (1, [1.1, 0.0]),\n+                        (2, [1.2, 0.0]),\n+                        (3, [1.3, 0.0]),\n+                        (4, [1.4, 0.0]),\n+                        (5, [0.0, 2.0]),\n+                        (6, [0.0, 2.1]),\n+                        (7, [0.0, 2.2]),\n+                        (8, [0.0, 2.3]),\n+                        (9, [0.0, 2.4]);\n+-- The nearest neighbours to [0.0, 0.2] are 5,6,7,8\n+-- In ClickHouse, an array like [0.0, 0.2] is of type Array(Float64)\n+\n+SELECT 'Column is Array(Float32), Search Vector is Array(Float64)';",
        "comment_created_at": "2025-08-14T01:57:02+00:00",
        "comment_author": "shankar-iyer",
        "comment_body": "ack, done.",
        "pr_file_module": null
      }
    ]
  }
]