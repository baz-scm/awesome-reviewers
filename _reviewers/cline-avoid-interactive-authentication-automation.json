[
  {
    "discussion_id": "2071999942",
    "pr_number": 3250,
    "pr_file": "scripts/report-issue.js",
    "created_at": "2025-05-02T18:31:20+00:00",
    "commented_code": "+const { execSync } = require(\"child_process\")\n+const readline = require(\"readline\")\n+const os = require(\"os\")\n+\n+const rl = readline.createInterface({\n+\tinput: process.stdin,\n+\toutput: process.stdout,\n+})\n+\n+const ask = (question) => new Promise((resolve) => rl.question(`\n${question}`, resolve))\n+\n+const getClineVersion = () => {\n+\ttry {\n+\t\tconst extensions = execSync(\"code --list-extensions --show-versions\").toString()\n+\t\tconst clineMatch = extensions.match(/claude-dev@(\\d+\\.\\d+\\.\\d+)/)\n+\t\treturn clineMatch ? clineMatch[1] : \"Not installed\"\n+\t} catch (err) {\n+\t\treturn \"Error getting version\"\n+\t}\n+}\n+\n+const collectSystemInfo = () => {\n+\tlet cpuInfo = \"N/A\"\n+\tlet memoryInfo = \"N/A\"\n+\ttry {\n+\t\tif (process.platform === \"darwin\") {\n+\t\t\tcpuInfo = execSync(\"sysctl -n machdep.cpu.brand_string\").toString().trim()\n+\t\t\tmemoryInfo = execSync(\"sysctl -n hw.memsize\").toString().trim()\n+\t\t\tmemoryInfo = `${Math.round(parseInt(memoryInfo) / 1e9)} GB RAM`\n+\t\t} else {\n+\t\t\t// Linux specific commands\n+\t\t\tcpuInfo = execSync(\"lscpu\").toString().split(\"\n\").slice(0, 5).join(\"\n\")\n+\t\t\tmemoryInfo = execSync(\"free -h\").toString()\n+\t\t}\n+\t} catch (err) {\n+\t\t// Fallback for unsupported systems\n+\t\tcpuInfo = Array.from(new Set(os.cpus().map((c) => c.model))).join(\"\n\")\n+\t\tmemoryInfo = `${Math.round(os.totalmem() / 1e9)} GB RAM`\n+\t}\n+\n+\treturn {\n+\t\tcpuInfo,\n+\t\tmemoryInfo,\n+\t\tos: `${os.arch()}; ${os.version()}`,\n+\t\tnodeVersion: execSync(\"node -v\").toString().trim(),\n+\t\tnpmVersion: execSync(\"npm -v\").toString().trim(),\n+\t\tclineVersion: getClineVersion(),\n+\t}\n+}\n+\n+const checkGitHubAuth = async () => {\n+\ttry {\n+\t\texecSync(\"gh auth status\", { stdio: \"ignore\" })\n+\t\treturn true\n+\t} catch (err) {\n+\t\tconsole.log(\"\nGitHub authentication required.\")\n+\t\tconsole.log(\"\nPlease run the following command in your terminal to authenticate:\")\n+\t\tconsole.log(\"\n  gh auth login\n\")",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2071999942",
        "repo_full_name": "cline/cline",
        "pr_number": 3250,
        "pr_file": "scripts/report-issue.js",
        "discussion_id": "2071999942",
        "commented_code": "@@ -0,0 +1,137 @@\n+const { execSync } = require(\"child_process\")\n+const readline = require(\"readline\")\n+const os = require(\"os\")\n+\n+const rl = readline.createInterface({\n+\tinput: process.stdin,\n+\toutput: process.stdout,\n+})\n+\n+const ask = (question) => new Promise((resolve) => rl.question(`\\n${question}`, resolve))\n+\n+const getClineVersion = () => {\n+\ttry {\n+\t\tconst extensions = execSync(\"code --list-extensions --show-versions\").toString()\n+\t\tconst clineMatch = extensions.match(/claude-dev@(\\d+\\.\\d+\\.\\d+)/)\n+\t\treturn clineMatch ? clineMatch[1] : \"Not installed\"\n+\t} catch (err) {\n+\t\treturn \"Error getting version\"\n+\t}\n+}\n+\n+const collectSystemInfo = () => {\n+\tlet cpuInfo = \"N/A\"\n+\tlet memoryInfo = \"N/A\"\n+\ttry {\n+\t\tif (process.platform === \"darwin\") {\n+\t\t\tcpuInfo = execSync(\"sysctl -n machdep.cpu.brand_string\").toString().trim()\n+\t\t\tmemoryInfo = execSync(\"sysctl -n hw.memsize\").toString().trim()\n+\t\t\tmemoryInfo = `${Math.round(parseInt(memoryInfo) / 1e9)} GB RAM`\n+\t\t} else {\n+\t\t\t// Linux specific commands\n+\t\t\tcpuInfo = execSync(\"lscpu\").toString().split(\"\\n\").slice(0, 5).join(\"\\n\")\n+\t\t\tmemoryInfo = execSync(\"free -h\").toString()\n+\t\t}\n+\t} catch (err) {\n+\t\t// Fallback for unsupported systems\n+\t\tcpuInfo = Array.from(new Set(os.cpus().map((c) => c.model))).join(\"\\n\")\n+\t\tmemoryInfo = `${Math.round(os.totalmem() / 1e9)} GB RAM`\n+\t}\n+\n+\treturn {\n+\t\tcpuInfo,\n+\t\tmemoryInfo,\n+\t\tos: `${os.arch()}; ${os.version()}`,\n+\t\tnodeVersion: execSync(\"node -v\").toString().trim(),\n+\t\tnpmVersion: execSync(\"npm -v\").toString().trim(),\n+\t\tclineVersion: getClineVersion(),\n+\t}\n+}\n+\n+const checkGitHubAuth = async () => {\n+\ttry {\n+\t\texecSync(\"gh auth status\", { stdio: \"ignore\" })\n+\t\treturn true\n+\t} catch (err) {\n+\t\tconsole.log(\"\\nGitHub authentication required.\")\n+\t\tconsole.log(\"\\nPlease run the following command in your terminal to authenticate:\")\n+\t\tconsole.log(\"\\n  gh auth login\\n\")",
        "comment_created_at": "2025-05-02T18:31:20+00:00",
        "comment_author": "DaveFres",
        "comment_body": "I'm not using `execSync('gh auth login')` here, as it causes the user's console to freeze.\r\n\r\nI investigated a bit but couldn't find the root cause of the issue. Since login only needs to be done once, it should be fine to ask the user to log in themselves via the command prompt.",
        "pr_file_module": null
      }
    ]
  }
]