[
  {
    "discussion_id": "2220263047",
    "pr_number": 5029,
    "pr_file": "webview-ui/src/components/account/AccountView.tsx",
    "created_at": "2025-07-21T20:35:42+00:00",
    "commented_code": "const [paymentsData, setPaymentsData] = useState<PaymentTransaction[]>([])\n \tconst intervalRef = useRef<NodeJS.Timeout | null>(null)\n \n-\tconst dashboardAddCreditsURL = activeOrganization\n-\t\t? `${clineEnvConfig.appBaseUrl}/dashboard/organization?tab=credits&redirect=true`\n-\t\t: `${clineEnvConfig.appBaseUrl}/dashboard/account?tab=credits&redirect=true`\n+\tconst clineUris = useMemo(() => {\n+\t\tconst base = new URL(clineUser?.appBaseUrl || CLINE_APP_URL)\n+\t\tconst dashboard = new URL(\"dashboard\", base)\n+\t\tconst credits = new URL(activeOrganization ? \"/organization\" : \"/account\", dashboard)\n+\t\tcredits.searchParams.set(\"tab\", \"credits\")\n+\t\tcredits.searchParams.set(\"redirect\", \"true\")\n+\n+\t\treturn {\n+\t\t\tdashboard,\n+\t\t\tcredits,\n+\t\t}",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2220263047",
        "repo_full_name": "cline/cline",
        "pr_number": 5029,
        "pr_file": "webview-ui/src/components/account/AccountView.tsx",
        "discussion_id": "2220263047",
        "commented_code": "@@ -127,9 +128,18 @@ export const ClineAccountView = () => {\n \tconst [paymentsData, setPaymentsData] = useState<PaymentTransaction[]>([])\n \tconst intervalRef = useRef<NodeJS.Timeout | null>(null)\n \n-\tconst dashboardAddCreditsURL = activeOrganization\n-\t\t? `${clineEnvConfig.appBaseUrl}/dashboard/organization?tab=credits&redirect=true`\n-\t\t: `${clineEnvConfig.appBaseUrl}/dashboard/account?tab=credits&redirect=true`\n+\tconst clineUris = useMemo(() => {\n+\t\tconst base = new URL(clineUser?.appBaseUrl || CLINE_APP_URL)\n+\t\tconst dashboard = new URL(\"dashboard\", base)\n+\t\tconst credits = new URL(activeOrganization ? \"/organization\" : \"/account\", dashboard)\n+\t\tcredits.searchParams.set(\"tab\", \"credits\")\n+\t\tcredits.searchParams.set(\"redirect\", \"true\")\n+\n+\t\treturn {\n+\t\t\tdashboard,\n+\t\t\tcredits,\n+\t\t}",
        "comment_created_at": "2025-07-21T20:35:42+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Why no just make this a function?",
        "pr_file_module": null
      },
      {
        "comment_id": "2220321028",
        "repo_full_name": "cline/cline",
        "pr_number": 5029,
        "pr_file": "webview-ui/src/components/account/AccountView.tsx",
        "discussion_id": "2220263047",
        "commented_code": "@@ -127,9 +128,18 @@ export const ClineAccountView = () => {\n \tconst [paymentsData, setPaymentsData] = useState<PaymentTransaction[]>([])\n \tconst intervalRef = useRef<NodeJS.Timeout | null>(null)\n \n-\tconst dashboardAddCreditsURL = activeOrganization\n-\t\t? `${clineEnvConfig.appBaseUrl}/dashboard/organization?tab=credits&redirect=true`\n-\t\t: `${clineEnvConfig.appBaseUrl}/dashboard/account?tab=credits&redirect=true`\n+\tconst clineUris = useMemo(() => {\n+\t\tconst base = new URL(clineUser?.appBaseUrl || CLINE_APP_URL)\n+\t\tconst dashboard = new URL(\"dashboard\", base)\n+\t\tconst credits = new URL(activeOrganization ? \"/organization\" : \"/account\", dashboard)\n+\t\tcredits.searchParams.set(\"tab\", \"credits\")\n+\t\tcredits.searchParams.set(\"redirect\", \"true\")\n+\n+\t\treturn {\n+\t\t\tdashboard,\n+\t\t\tcredits,\n+\t\t}",
        "comment_created_at": "2025-07-21T20:57:20+00:00",
        "comment_author": "abeatrix",
        "comment_body": "This component get re-render frequently as we fetch the user balance periodically.  If we turn this into a function we need a useEffect to run the function to set the Uris on dependencies change since the uri needs to be reconstruct when switching between org and personal account. Using memorized prevents unnecessary URL object creation on every render unless dependencies change.",
        "pr_file_module": null
      },
      {
        "comment_id": "2220705592",
        "repo_full_name": "cline/cline",
        "pr_number": 5029,
        "pr_file": "webview-ui/src/components/account/AccountView.tsx",
        "discussion_id": "2220263047",
        "commented_code": "@@ -127,9 +128,18 @@ export const ClineAccountView = () => {\n \tconst [paymentsData, setPaymentsData] = useState<PaymentTransaction[]>([])\n \tconst intervalRef = useRef<NodeJS.Timeout | null>(null)\n \n-\tconst dashboardAddCreditsURL = activeOrganization\n-\t\t? `${clineEnvConfig.appBaseUrl}/dashboard/organization?tab=credits&redirect=true`\n-\t\t: `${clineEnvConfig.appBaseUrl}/dashboard/account?tab=credits&redirect=true`\n+\tconst clineUris = useMemo(() => {\n+\t\tconst base = new URL(clineUser?.appBaseUrl || CLINE_APP_URL)\n+\t\tconst dashboard = new URL(\"dashboard\", base)\n+\t\tconst credits = new URL(activeOrganization ? \"/organization\" : \"/account\", dashboard)\n+\t\tcredits.searchParams.set(\"tab\", \"credits\")\n+\t\tcredits.searchParams.set(\"redirect\", \"true\")\n+\n+\t\treturn {\n+\t\t\tdashboard,\n+\t\t\tcredits,\n+\t\t}",
        "comment_created_at": "2025-07-22T00:59:44+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Sure, but it's so light that it doesn't matter. I think we're overusing useMemo and useCallback in the code",
        "pr_file_module": null
      },
      {
        "comment_id": "2220706723",
        "repo_full_name": "cline/cline",
        "pr_number": 5029,
        "pr_file": "webview-ui/src/components/account/AccountView.tsx",
        "discussion_id": "2220263047",
        "commented_code": "@@ -127,9 +128,18 @@ export const ClineAccountView = () => {\n \tconst [paymentsData, setPaymentsData] = useState<PaymentTransaction[]>([])\n \tconst intervalRef = useRef<NodeJS.Timeout | null>(null)\n \n-\tconst dashboardAddCreditsURL = activeOrganization\n-\t\t? `${clineEnvConfig.appBaseUrl}/dashboard/organization?tab=credits&redirect=true`\n-\t\t: `${clineEnvConfig.appBaseUrl}/dashboard/account?tab=credits&redirect=true`\n+\tconst clineUris = useMemo(() => {\n+\t\tconst base = new URL(clineUser?.appBaseUrl || CLINE_APP_URL)\n+\t\tconst dashboard = new URL(\"dashboard\", base)\n+\t\tconst credits = new URL(activeOrganization ? \"/organization\" : \"/account\", dashboard)\n+\t\tcredits.searchParams.set(\"tab\", \"credits\")\n+\t\tcredits.searchParams.set(\"redirect\", \"true\")\n+\n+\t\treturn {\n+\t\t\tdashboard,\n+\t\t\tcredits,\n+\t\t}",
        "comment_created_at": "2025-07-22T01:00:40+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "A useEffect would only run on the dependency changes\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2023006840",
    "pr_number": 2604,
    "pr_file": "webview-ui/src/components/browser/BrowserSettingsMenu.tsx",
    "created_at": "2025-04-01T14:53:03+00:00",
    "commented_code": "maxWidth?: number\n }\n \n+// constant inline styles\n+const containerStyle: CSSProperties = { position: \"relative\", marginTop: \"-1px\" }\n+const codiconStyle: CSSProperties = { fontSize: \"14.5px\" }\n+const VSCodeCheckboxStyle: CSSProperties = { marginBottom: \"8px\", marginTop: -1 }\n+const VSCodeDropdownStyle: CSSProperties = { width: \"100%\" }\n+\n+// constant JSX.Elements\n+const DropdownOptions = Object.entries(BROWSER_VIEWPORT_PRESETS).map(([name]) => (\n+\t<VSCodeOption key={name} value={name}>\n+\t\t{name}\n+\t</VSCodeOption>\n+))\n+\n export const BrowserSettingsMenu: React.FC<BrowserSettingsMenuProps> = ({ disabled = false, maxWidth }) => {\n \tconst { browserSettings } = useExtensionState()\n \tconst [showMenu, setShowMenu] = useState(false)\n-\tconst [hasMouseEntered, setHasMouseEntered] = useState(false)\n+\tconst hasMouseEnteredRef = useRef(false)\n \tconst containerRef = useRef<HTMLDivElement>(null)\n \tconst menuRef = useRef<HTMLDivElement>(null)\n+\tconst dropdownValue = useMemo(\n+\t\t() =>\n+\t\t\tObject.entries(BROWSER_VIEWPORT_PRESETS).find(\n+\t\t\t\t([_, size]) => size.width === browserSettings.viewport.width && size.height === browserSettings.viewport.height,\n+\t\t\t)?.[0],\n+\t\t[browserSettings],",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2023028358",
        "repo_full_name": "cline/cline",
        "pr_number": 2604,
        "pr_file": "webview-ui/src/components/browser/BrowserSettingsMenu.tsx",
        "discussion_id": "2023006840",
        "commented_code": "@@ -12,28 +12,48 @@ interface BrowserSettingsMenuProps {\n \tmaxWidth?: number\n }\n \n+// constant inline styles\n+const containerStyle: CSSProperties = { position: \"relative\", marginTop: \"-1px\" }\n+const codiconStyle: CSSProperties = { fontSize: \"14.5px\" }\n+const VSCodeCheckboxStyle: CSSProperties = { marginBottom: \"8px\", marginTop: -1 }\n+const VSCodeDropdownStyle: CSSProperties = { width: \"100%\" }\n+\n+// constant JSX.Elements\n+const DropdownOptions = Object.entries(BROWSER_VIEWPORT_PRESETS).map(([name]) => (\n+\t<VSCodeOption key={name} value={name}>\n+\t\t{name}\n+\t</VSCodeOption>\n+))\n+\n export const BrowserSettingsMenu: React.FC<BrowserSettingsMenuProps> = ({ disabled = false, maxWidth }) => {\n \tconst { browserSettings } = useExtensionState()\n \tconst [showMenu, setShowMenu] = useState(false)\n-\tconst [hasMouseEntered, setHasMouseEntered] = useState(false)\n+\tconst hasMouseEnteredRef = useRef(false)\n \tconst containerRef = useRef<HTMLDivElement>(null)\n \tconst menuRef = useRef<HTMLDivElement>(null)\n+\tconst dropdownValue = useMemo(\n+\t\t() =>\n+\t\t\tObject.entries(BROWSER_VIEWPORT_PRESETS).find(\n+\t\t\t\t([_, size]) => size.width === browserSettings.viewport.width && size.height === browserSettings.viewport.height,\n+\t\t\t)?.[0],\n+\t\t[browserSettings],",
        "comment_created_at": "2025-04-01T14:53:03+00:00",
        "comment_author": "samuel871211",
        "comment_body": "The object reference of `browserSettings.viewport` is changed when viewport change, so it's okay to add `viewport` to dependency list.\r\n\r\n```ts\r\n\tconst handleViewportChange = (event: Event) => {\r\n\t\tconst target = event.target as HTMLSelectElement\r\n\t\tconst selectedSize = BROWSER_VIEWPORT_PRESETS[target.value as keyof typeof BROWSER_VIEWPORT_PRESETS]\r\n\t\tif (selectedSize) {\r\n\t\t\tvscode.postMessage({\r\n\t\t\t\ttype: \"browserSettings\",\r\n\t\t\t\tbrowserSettings: {\r\n\t\t\t\t\t...browserSettings,\r\n\t\t\t\t\tviewport: selectedSize,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n```",
        "pr_file_module": null
      }
    ]
  }
]