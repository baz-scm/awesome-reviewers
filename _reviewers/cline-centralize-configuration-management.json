[
  {
    "discussion_id": "2212079393",
    "pr_number": 4978,
    "pr_file": "src/core/controller/index.ts",
    "created_at": "2025-07-17T03:37:51+00:00",
    "commented_code": "// MCP Marketplace\n \tprivate async fetchMcpMarketplaceFromApi(silent: boolean = false): Promise<McpMarketplaceCatalog | undefined> {\n \t\ttry {\n-\t\t\tconst response = await axios.get(\"https://api.cline.bot/v1/mcp/marketplace\", {\n+\t\t\tconst response = await axios.get(`${clineEnvConfig.apiBaseUrl}/v1/mcp/marketplace`, {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2212079393",
        "repo_full_name": "cline/cline",
        "pr_number": 4978,
        "pr_file": "src/core/controller/index.ts",
        "discussion_id": "2212079393",
        "commented_code": "@@ -498,7 +499,7 @@ export class Controller {\n \t// MCP Marketplace\n \tprivate async fetchMcpMarketplaceFromApi(silent: boolean = false): Promise<McpMarketplaceCatalog | undefined> {\n \t\ttry {\n-\t\t\tconst response = await axios.get(\"https://api.cline.bot/v1/mcp/marketplace\", {\n+\t\t\tconst response = await axios.get(`${clineEnvConfig.apiBaseUrl}/v1/mcp/marketplace`, {",
        "comment_created_at": "2025-07-17T03:37:51+00:00",
        "comment_author": "frostbournesb",
        "comment_body": "Lets have a separate configuration for mcpMarketplaceBaseUrl and set them all to api.cline.bot, because mcp marketplace is not seeded on local configurations, if we do want to test mcp marketplace locally, that will allow us to change that environment's URL without disturbing anything else but will otherwise default to the hosted marketplace",
        "pr_file_module": null
      },
      {
        "comment_id": "2212157241",
        "repo_full_name": "cline/cline",
        "pr_number": 4978,
        "pr_file": "src/core/controller/index.ts",
        "discussion_id": "2212079393",
        "commented_code": "@@ -498,7 +499,7 @@ export class Controller {\n \t// MCP Marketplace\n \tprivate async fetchMcpMarketplaceFromApi(silent: boolean = false): Promise<McpMarketplaceCatalog | undefined> {\n \t\ttry {\n-\t\t\tconst response = await axios.get(\"https://api.cline.bot/v1/mcp/marketplace\", {\n+\t\t\tconst response = await axios.get(`${clineEnvConfig.apiBaseUrl}/v1/mcp/marketplace`, {",
        "comment_created_at": "2025-07-17T03:54:58+00:00",
        "comment_author": "0xToshii",
        "comment_body": "updated to use a separate `mcpBaseUrl`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071084349",
    "pr_number": 3243,
    "pr_file": "src/services/telemetry/TelemetryService.ts",
    "created_at": "2025-05-02T04:39:17+00:00",
    "commented_code": "* Initializes PostHog client with configuration\n \t */",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2071084349",
        "repo_full_name": "cline/cline",
        "pr_number": 3243,
        "pr_file": "src/services/telemetry/TelemetryService.ts",
        "discussion_id": "2071084349",
        "commented_code": "@@ -93,8 +94,8 @@ class PostHogClient {\n \t * Initializes PostHog client with configuration\n \t */",
        "comment_created_at": "2025-05-02T04:39:17+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Moved same credentials to a config file in the shared folder.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030441295",
    "pr_number": 2423,
    "pr_file": "src/services/browser/BrowserSession.ts",
    "created_at": "2025-04-07T04:38:22+00:00",
    "commented_code": "import * as vscode from \"vscode\"\n import * as fs from \"fs/promises\"\n import * as path from \"path\"\n-import { Browser, Page, ScreenshotOptions, TimeoutError, launch } from \"puppeteer-core\"\n+import { exec, spawn } from \"child_process\"\n+import { Browser, Page, ScreenshotOptions, TimeoutError, launch, connect } from \"puppeteer-core\"\n // @ts-ignore\n import PCR from \"puppeteer-chromium-resolver\"\n import pWaitFor from \"p-wait-for\"\n import { setTimeout as setTimeoutPromise } from \"node:timers/promises\"\n+import axios from \"axios\"\n import { fileExistsAtPath } from \"../../utils/fs\"\n import { BrowserActionResult } from \"../../shared/ExtensionMessage\"\n import { BrowserSettings } from \"../../shared/BrowserSettings\"\n-// import * as chromeLauncher from \"chrome-launcher\"\n+import { discoverChromeInstances, testBrowserConnection, isPortOpen } from \"./BrowserDiscovery\"\n+import * as chromeLauncher from \"chrome-launcher\"\n+import { Controller } from \"../../core/controller\"\n+import { telemetryService } from \"../../services/telemetry/TelemetryService\"\n \n interface PCRStats {\n \tpuppeteer: { launch: typeof launch }\n \texecutablePath: string\n }\n \n-// const DEBUG_PORT = 9222 // Chrome's default debugging port\n+// Define browser connection info interface\n+export interface BrowserConnectionInfo {\n+\tisConnected: boolean\n+\tisRemote: boolean\n+\thost?: string\n+}\n+\n+const DEBUG_PORT = 9222 // Chrome's default debugging port",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2030441295",
        "repo_full_name": "cline/cline",
        "pr_number": 2423,
        "pr_file": "src/services/browser/BrowserSession.ts",
        "discussion_id": "2030441295",
        "commented_code": "@@ -1,36 +1,95 @@\n import * as vscode from \"vscode\"\n import * as fs from \"fs/promises\"\n import * as path from \"path\"\n-import { Browser, Page, ScreenshotOptions, TimeoutError, launch } from \"puppeteer-core\"\n+import { exec, spawn } from \"child_process\"\n+import { Browser, Page, ScreenshotOptions, TimeoutError, launch, connect } from \"puppeteer-core\"\n // @ts-ignore\n import PCR from \"puppeteer-chromium-resolver\"\n import pWaitFor from \"p-wait-for\"\n import { setTimeout as setTimeoutPromise } from \"node:timers/promises\"\n+import axios from \"axios\"\n import { fileExistsAtPath } from \"../../utils/fs\"\n import { BrowserActionResult } from \"../../shared/ExtensionMessage\"\n import { BrowserSettings } from \"../../shared/BrowserSettings\"\n-// import * as chromeLauncher from \"chrome-launcher\"\n+import { discoverChromeInstances, testBrowserConnection, isPortOpen } from \"./BrowserDiscovery\"\n+import * as chromeLauncher from \"chrome-launcher\"\n+import { Controller } from \"../../core/controller\"\n+import { telemetryService } from \"../../services/telemetry/TelemetryService\"\n \n interface PCRStats {\n \tpuppeteer: { launch: typeof launch }\n \texecutablePath: string\n }\n \n-// const DEBUG_PORT = 9222 // Chrome's default debugging port\n+// Define browser connection info interface\n+export interface BrowserConnectionInfo {\n+\tisConnected: boolean\n+\tisRemote: boolean\n+\thost?: string\n+}\n+\n+const DEBUG_PORT = 9222 // Chrome's default debugging port",
        "comment_created_at": "2025-04-07T04:38:22+00:00",
        "comment_author": "arafatkatze",
        "comment_body": "It would be much better to have a single config object for all hard coded values like DEBUG_PORT and various timeouts everywhere. The timeout objects will tell you why something needs to time out. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2032062932",
        "repo_full_name": "cline/cline",
        "pr_number": 2423,
        "pr_file": "src/services/browser/BrowserSession.ts",
        "discussion_id": "2030441295",
        "commented_code": "@@ -1,36 +1,95 @@\n import * as vscode from \"vscode\"\n import * as fs from \"fs/promises\"\n import * as path from \"path\"\n-import { Browser, Page, ScreenshotOptions, TimeoutError, launch } from \"puppeteer-core\"\n+import { exec, spawn } from \"child_process\"\n+import { Browser, Page, ScreenshotOptions, TimeoutError, launch, connect } from \"puppeteer-core\"\n // @ts-ignore\n import PCR from \"puppeteer-chromium-resolver\"\n import pWaitFor from \"p-wait-for\"\n import { setTimeout as setTimeoutPromise } from \"node:timers/promises\"\n+import axios from \"axios\"\n import { fileExistsAtPath } from \"../../utils/fs\"\n import { BrowserActionResult } from \"../../shared/ExtensionMessage\"\n import { BrowserSettings } from \"../../shared/BrowserSettings\"\n-// import * as chromeLauncher from \"chrome-launcher\"\n+import { discoverChromeInstances, testBrowserConnection, isPortOpen } from \"./BrowserDiscovery\"\n+import * as chromeLauncher from \"chrome-launcher\"\n+import { Controller } from \"../../core/controller\"\n+import { telemetryService } from \"../../services/telemetry/TelemetryService\"\n \n interface PCRStats {\n \tpuppeteer: { launch: typeof launch }\n \texecutablePath: string\n }\n \n-// const DEBUG_PORT = 9222 // Chrome's default debugging port\n+// Define browser connection info interface\n+export interface BrowserConnectionInfo {\n+\tisConnected: boolean\n+\tisRemote: boolean\n+\thost?: string\n+}\n+\n+const DEBUG_PORT = 9222 // Chrome's default debugging port",
        "comment_created_at": "2025-04-07T21:56:03+00:00",
        "comment_author": "dcbartlett",
        "comment_body": "I agree with this.  If not a config object, then this should at least be defined in a constants file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2035907849",
    "pr_number": 2766,
    "pr_file": "src/services/error/ErrorService.ts",
    "created_at": "2025-04-09T18:29:53+00:00",
    "commented_code": "+import * as Sentry from \"@sentry/browser\"\n+\n+// Initialize sentry\n+Sentry.init({\n+\tdsn: \"https://7936780e3f0f0290fcf8d4a395c249b7@o4509028819664896.ingest.us.sentry.io/4509052955983872\",",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2035907849",
        "repo_full_name": "cline/cline",
        "pr_number": 2766,
        "pr_file": "src/services/error/ErrorService.ts",
        "discussion_id": "2035907849",
        "commented_code": "@@ -0,0 +1,18 @@\n+import * as Sentry from \"@sentry/browser\"\n+\n+// Initialize sentry\n+Sentry.init({\n+\tdsn: \"https://7936780e3f0f0290fcf8d4a395c249b7@o4509028819664896.ingest.us.sentry.io/4509052955983872\",",
        "comment_created_at": "2025-04-09T18:29:53+00:00",
        "comment_author": "trevhud",
        "comment_body": "I would use an env variable for this if we can",
        "pr_file_module": null
      },
      {
        "comment_id": "2036226932",
        "repo_full_name": "cline/cline",
        "pr_number": 2766,
        "pr_file": "src/services/error/ErrorService.ts",
        "discussion_id": "2035907849",
        "commented_code": "@@ -0,0 +1,18 @@\n+import * as Sentry from \"@sentry/browser\"\n+\n+// Initialize sentry\n+Sentry.init({\n+\tdsn: \"https://7936780e3f0f0290fcf8d4a395c249b7@o4509028819664896.ingest.us.sentry.io/4509052955983872\",",
        "comment_created_at": "2025-04-09T22:34:27+00:00",
        "comment_author": "dcbartlett",
        "comment_body": "We can so it's easier to update, but there isn't a security concern here.  We also don't have a env handling system in place today like .env.  I can do a follow up to implement that, but I don't want to block this on that right now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069474984",
    "pr_number": 3218,
    "pr_file": "src/core/storage/state.ts",
    "created_at": "2025-04-30T21:37:03+00:00",
    "commented_code": "mcpMarketplaceEnabled,\n \t\ttelemetrySetting: telemetrySetting || \"unset\",\n \t\tplanActSeparateModelsSetting,\n+\t\tshellIntegrationTimeout: shellIntegrationTimeout || 4000,\n \t}",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2069474984",
        "repo_full_name": "cline/cline",
        "pr_number": 3218,
        "pr_file": "src/core/storage/state.ts",
        "discussion_id": "2069474984",
        "commented_code": "@@ -319,6 +321,7 @@ export async function getAllExtensionState(context: vscode.ExtensionContext) {\n \t\tmcpMarketplaceEnabled,\n \t\ttelemetrySetting: telemetrySetting || \"unset\",\n \t\tplanActSeparateModelsSetting,\n+\t\tshellIntegrationTimeout: shellIntegrationTimeout || 4000,\n \t}",
        "comment_created_at": "2025-04-30T21:37:03+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "default to 4000 like before",
        "pr_file_module": null
      }
    ]
  }
]