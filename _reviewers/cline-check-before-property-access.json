[
  {
    "discussion_id": "2233028380",
    "pr_number": 4118,
    "pr_file": "webview-ui/src/utils/platformUtils.ts",
    "created_at": "2025-07-26T15:07:48+00:00",
    "commented_code": "return \"CMD\"\n \t}\n }\n+\n+const userAgent = navigator.userAgent\n+\n+export const isChrome = userAgent.indexOf(\"Chrome\") >= 0",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2233028380",
        "repo_full_name": "cline/cline",
        "pr_number": 4118,
        "pr_file": "webview-ui/src/utils/platformUtils.ts",
        "discussion_id": "2233028380",
        "commented_code": "@@ -34,3 +34,9 @@ export const detectMetaKeyChar = (platform: string) => {\n \t\treturn \"CMD\"\n \t}\n }\n+\n+const userAgent = navigator.userAgent\n+\n+export const isChrome = userAgent.indexOf(\"Chrome\") >= 0",
        "comment_created_at": "2025-07-26T15:07:48+00:00",
        "comment_author": "saoudrizwan",
        "comment_body": "This may be undefined, and can throw an error so i would want to be safer about this like `navigator && navigator.userAgent && navigator.userAgent.indexOf(\"Chrome\") >= 0`",
        "pr_file_module": null
      },
      {
        "comment_id": "2233600003",
        "repo_full_name": "cline/cline",
        "pr_number": 4118,
        "pr_file": "webview-ui/src/utils/platformUtils.ts",
        "discussion_id": "2233028380",
        "commented_code": "@@ -34,3 +34,9 @@ export const detectMetaKeyChar = (platform: string) => {\n \t\treturn \"CMD\"\n \t}\n }\n+\n+const userAgent = navigator.userAgent\n+\n+export const isChrome = userAgent.indexOf(\"Chrome\") >= 0",
        "comment_created_at": "2025-07-27T02:30:01+00:00",
        "comment_author": "li-yechao",
        "comment_body": "fixed https://github.com/cline/cline/blob/0efa31f68ee95e5a7ff8022fd4b1b696e3718580/webview-ui/src/utils/platformUtils.ts#L38",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191207915",
    "pr_number": 4702,
    "pr_file": "src/api/providers/cline.ts",
    "created_at": "2025-07-07T23:48:11+00:00",
    "commented_code": "import { Anthropic } from \"@anthropic-ai/sdk\"\n-import OpenAI from \"openai\"\n import { ApiHandler } from \"../\"\n+import { ClineAccountService } from \"@/services/account/ClineAccountService\"\n import { ApiHandlerOptions, ModelInfo, openRouterDefaultModelId, openRouterDefaultModelInfo } from \"@shared/api\"\n import { createOpenRouterStream } from \"../transform/openrouter-stream\"\n import { ApiStream, ApiStreamUsageChunk } from \"../transform/stream\"\n-import axios from \"axios\"\n+import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\"\n import { OpenRouterErrorResponse } from \"./types\"\n import { withRetry } from \"../retry\"\n+import { AuthService } from \"@/services/auth/AuthService\"\n \n export class ClineHandler implements ApiHandler {\n \tprivate options: ApiHandlerOptions\n-\tprivate client: OpenAI\n+\tprivate clineAccountService = ClineAccountService.getInstance()\n+\tprivate _authService: AuthService\n+\t// TODO: replace this with a global API Host\n+\tprivate readonly _baseUrl = \"https://core-api.staging.int.cline.bot\"\n+\t// private readonly _baseUrl = \"http://localhost:7777\"\n \tlastGenerationId?: string\n+\tprivate counter = 0\n \n \tconstructor(options: ApiHandlerOptions) {\n \t\tthis.options = options\n-\t\tthis.client = new OpenAI({\n-\t\t\tbaseURL: \"https://api.cline.bot/v1\",\n-\t\t\tapiKey: this.options.clineApiKey || \"\",\n-\t\t\tdefaultHeaders: {\n-\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n-\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n-\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n-\t\t\t},\n-\t\t})\n+\t\tthis._authService = AuthService.getInstance()\n \t}\n \n \t@withRetry()\n \tasync *createMessage(systemPrompt: string, messages: Anthropic.Messages.MessageParam[]): ApiStream {\n+\t\tconst clineAccountAuthToken = await this._authService.getAuthToken()\n+\n \t\tthis.lastGenerationId = undefined\n \n-\t\tconst stream = await createOpenRouterStream(\n-\t\t\tthis.client,\n-\t\t\tsystemPrompt,\n-\t\t\tmessages,\n-\t\t\tthis.getModel(),\n-\t\t\tthis.options.reasoningEffort,\n-\t\t\tthis.options.thinkingBudgetTokens,\n-\t\t\tthis.options.openRouterProviderSorting,\n+\t\tconst requestConfig: AxiosRequestConfig = {\n+\t\t\theaders: {\n+\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n+\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n+\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n+\t\t\t\tAuthorization: `Bearer ${clineAccountAuthToken}`,\n+\t\t\t},\n+\t\t\ttimeout: 15_000, // Set a timeout for requests to avoid hanging\n+\t\t}\n+\n+\t\tconst me = await this.clineAccountService.fetchMe()\n+\t\tconsole.log(\n+\t\t\t\"SwitchAuthToken: Active Organization\",\n+\t\t\tme?.organizations.filter((org) => org.active)[0]?.name || \"No active organization\",\n \t\t)\n \n \t\tlet didOutputUsage: boolean = false\n \n-\t\tfor await (const chunk of stream) {\n-\t\t\t// openrouter returns an error object instead of the openai sdk throwing an error\n-\t\t\tif (\"error\" in chunk) {\n-\t\t\t\tconst error = chunk.error as OpenRouterErrorResponse[\"error\"]\n-\t\t\t\tconsole.error(`Cline API Error: ${error?.code} - ${error?.message}`)\n-\t\t\t\t// Include metadata in the error message if available\n-\t\t\t\tconst metadataStr = error.metadata ? `\nMetadata: ${JSON.stringify(error.metadata, null, 2)}` : \"\"\n-\t\t\t\tthrow new Error(`Cline API Error ${error.code}: ${error.message}${metadataStr}`)\n-\t\t\t}\n+\t\tconst url = `${this._baseUrl}/api/v1/chat/completions`\n+\t\ttry {\n+\t\t\tconst response = await axios.post(\n+\t\t\t\turl,\n+\t\t\t\t{\n+\t\t\t\t\tmodel: this.getModel().id,\n+\t\t\t\t\tmessages: [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\trole: \"system\",\n+\t\t\t\t\t\t\tcontent: systemPrompt,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t...messages,\n+\t\t\t\t\t],\n+\t\t\t\t\tstream: false,\n+\t\t\t\t\t// reasoning_effort: this.options.reasoningEffort || \"low\",\n+\t\t\t\t\t// thinking_budget_tokens: this.options.thinkingBudgetTokens || 0,\n+\t\t\t\t\t// open_router_provider_sorting: this.options.openRouterProviderSorting || \"default\",\n+\t\t\t\t},\n+\t\t\t\trequestConfig,\n+\t\t\t)\n \n-\t\t\tif (!this.lastGenerationId && chunk.id) {\n-\t\t\t\tthis.lastGenerationId = chunk.id\n+\t\t\tif (!response.data || !response.data.data) {\n+\t\t\t\tthrow new Error(`Request to ${url} failed with status ${response.status}`)\n \t\t\t}\n \n-\t\t\t// Check for mid-stream error via finish_reason\n-\t\t\tconst choice = chunk.choices?.[0]\n-\t\t\t// OpenRouter may return finish_reason = \"error\" with error details\n-\t\t\tif ((choice?.finish_reason as string) === \"error\") {\n-\t\t\t\tconst choiceWithError = choice as any\n-\t\t\t\tif (choiceWithError.error) {\n-\t\t\t\t\tconst error = choiceWithError.error\n-\t\t\t\t\tconsole.error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t\tthrow new Error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new Error(\"Cline Mid-Stream Error: Stream terminated with error status but no error details provided\")\n-\t\t\t\t}\n+\t\t\tif (!response.data.data.choices || response.data.data.choices.length === 0) {\n+\t\t\t\tthrow new Error(`No choices returned from Cline API: ${JSON.stringify(response.data)}`)\n \t\t\t}\n \n-\t\t\tconst delta = choice?.delta\n-\t\t\tif (delta?.content) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"text\",\n-\t\t\t\t\ttext: delta.content,\n+\t\t\tfor (const choice of response.data.data.choices) {\n+\t\t\t\tif (choice.finish_reason === \"error\") {\n+\t\t\t\t\tconst error = choice.error || { code: \"Unknown\", message: \"No error details provided\" }\n+\t\t\t\t\tconsole.error(`Cline API Error: ${error.code} - ${error.message}`)\n+\t\t\t\t\tthrow new Error(`Cline API Error: ${error.code} - ${error.message}`)\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Reasoning tokens are returned separately from the content\n-\t\t\tif (\"reasoning\" in delta && delta.reasoning) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"reasoning\",\n-\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\treasoning: delta.reasoning,\n+\t\t\t\tif (choice.delta && choice.delta.content) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.delta.content,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!didOutputUsage && chunk.usage) {\n-\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\tlet totalCost = (chunk.usage.cost || 0) + (chunk.usage.cost_details?.upstream_inference_cost || 0)\n-\t\t\t\tconst modelId = this.getModel().id\n-\t\t\t\tconst provider = modelId.split(\"/\")[0]\n-\n-\t\t\t\t// If provider is x-ai, set totalCost to 0 (we're doing a promo)\n-\t\t\t\tif (provider === \"x-ai\") {\n-\t\t\t\t\ttotalCost = 0\n+\t\t\t\tif (choice.delta && choice.delta.reasoning) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"reasoning\",\n+\t\t\t\t\t\treasoning: choice.delta.reasoning,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\n-\t\t\t\tif (modelId.includes(\"gemini\")) {\n+\t\t\t\tif (choice.message && choice.message.content) {\n \t\t\t\t\tyield {\n-\t\t\t\t\t\ttype: \"usage\",\n-\t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: (chunk.usage.prompt_tokens || 0) - (chunk.usage.prompt_tokens_details?.cached_tokens || 0),\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\t\ttotalCost,\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.message.content,\n \t\t\t\t\t}\n-\t\t\t\t} else {\n+\t\t\t\t}\n+\t\t\t\tif (choice.usage) {\n+\t\t\t\t\tconst totalCost = choice.usage.cost || 0\n \t\t\t\t\tyield {\n \t\t\t\t\t\ttype: \"usage\",\n \t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: chunk.usage.prompt_tokens || 0,\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n+\t\t\t\t\t\tcacheReadTokens: choice.usage.cached_tokens || 0,\n+\t\t\t\t\t\tinputTokens: choice.usage.prompt_tokens || 0,\n+\t\t\t\t\t\toutputTokens: choice.usage.completion_tokens || 0,\n \t\t\t\t\t\ttotalCost,\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (response.data.data.usage) {\n \t\t\t\tdidOutputUsage = true\n+\t\t\t\tyield {\n+\t\t\t\t\ttype: \"usage\",\n+\t\t\t\t\tcacheWriteTokens: 0,\n+\t\t\t\t\tcacheReadTokens: response.data.data.usage.prompt_tokens_details.cached_tokens || 0,",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2191207915",
        "repo_full_name": "cline/cline",
        "pr_number": 4702,
        "pr_file": "src/api/providers/cline.ts",
        "discussion_id": "2191207915",
        "commented_code": "@@ -1,143 +1,233 @@\n import { Anthropic } from \"@anthropic-ai/sdk\"\n-import OpenAI from \"openai\"\n import { ApiHandler } from \"../\"\n+import { ClineAccountService } from \"@/services/account/ClineAccountService\"\n import { ApiHandlerOptions, ModelInfo, openRouterDefaultModelId, openRouterDefaultModelInfo } from \"@shared/api\"\n import { createOpenRouterStream } from \"../transform/openrouter-stream\"\n import { ApiStream, ApiStreamUsageChunk } from \"../transform/stream\"\n-import axios from \"axios\"\n+import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\"\n import { OpenRouterErrorResponse } from \"./types\"\n import { withRetry } from \"../retry\"\n+import { AuthService } from \"@/services/auth/AuthService\"\n \n export class ClineHandler implements ApiHandler {\n \tprivate options: ApiHandlerOptions\n-\tprivate client: OpenAI\n+\tprivate clineAccountService = ClineAccountService.getInstance()\n+\tprivate _authService: AuthService\n+\t// TODO: replace this with a global API Host\n+\tprivate readonly _baseUrl = \"https://core-api.staging.int.cline.bot\"\n+\t// private readonly _baseUrl = \"http://localhost:7777\"\n \tlastGenerationId?: string\n+\tprivate counter = 0\n \n \tconstructor(options: ApiHandlerOptions) {\n \t\tthis.options = options\n-\t\tthis.client = new OpenAI({\n-\t\t\tbaseURL: \"https://api.cline.bot/v1\",\n-\t\t\tapiKey: this.options.clineApiKey || \"\",\n-\t\t\tdefaultHeaders: {\n-\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n-\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n-\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n-\t\t\t},\n-\t\t})\n+\t\tthis._authService = AuthService.getInstance()\n \t}\n \n \t@withRetry()\n \tasync *createMessage(systemPrompt: string, messages: Anthropic.Messages.MessageParam[]): ApiStream {\n+\t\tconst clineAccountAuthToken = await this._authService.getAuthToken()\n+\n \t\tthis.lastGenerationId = undefined\n \n-\t\tconst stream = await createOpenRouterStream(\n-\t\t\tthis.client,\n-\t\t\tsystemPrompt,\n-\t\t\tmessages,\n-\t\t\tthis.getModel(),\n-\t\t\tthis.options.reasoningEffort,\n-\t\t\tthis.options.thinkingBudgetTokens,\n-\t\t\tthis.options.openRouterProviderSorting,\n+\t\tconst requestConfig: AxiosRequestConfig = {\n+\t\t\theaders: {\n+\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n+\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n+\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n+\t\t\t\tAuthorization: `Bearer ${clineAccountAuthToken}`,\n+\t\t\t},\n+\t\t\ttimeout: 15_000, // Set a timeout for requests to avoid hanging\n+\t\t}\n+\n+\t\tconst me = await this.clineAccountService.fetchMe()\n+\t\tconsole.log(\n+\t\t\t\"SwitchAuthToken: Active Organization\",\n+\t\t\tme?.organizations.filter((org) => org.active)[0]?.name || \"No active organization\",\n \t\t)\n \n \t\tlet didOutputUsage: boolean = false\n \n-\t\tfor await (const chunk of stream) {\n-\t\t\t// openrouter returns an error object instead of the openai sdk throwing an error\n-\t\t\tif (\"error\" in chunk) {\n-\t\t\t\tconst error = chunk.error as OpenRouterErrorResponse[\"error\"]\n-\t\t\t\tconsole.error(`Cline API Error: ${error?.code} - ${error?.message}`)\n-\t\t\t\t// Include metadata in the error message if available\n-\t\t\t\tconst metadataStr = error.metadata ? `\\nMetadata: ${JSON.stringify(error.metadata, null, 2)}` : \"\"\n-\t\t\t\tthrow new Error(`Cline API Error ${error.code}: ${error.message}${metadataStr}`)\n-\t\t\t}\n+\t\tconst url = `${this._baseUrl}/api/v1/chat/completions`\n+\t\ttry {\n+\t\t\tconst response = await axios.post(\n+\t\t\t\turl,\n+\t\t\t\t{\n+\t\t\t\t\tmodel: this.getModel().id,\n+\t\t\t\t\tmessages: [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\trole: \"system\",\n+\t\t\t\t\t\t\tcontent: systemPrompt,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t...messages,\n+\t\t\t\t\t],\n+\t\t\t\t\tstream: false,\n+\t\t\t\t\t// reasoning_effort: this.options.reasoningEffort || \"low\",\n+\t\t\t\t\t// thinking_budget_tokens: this.options.thinkingBudgetTokens || 0,\n+\t\t\t\t\t// open_router_provider_sorting: this.options.openRouterProviderSorting || \"default\",\n+\t\t\t\t},\n+\t\t\t\trequestConfig,\n+\t\t\t)\n \n-\t\t\tif (!this.lastGenerationId && chunk.id) {\n-\t\t\t\tthis.lastGenerationId = chunk.id\n+\t\t\tif (!response.data || !response.data.data) {\n+\t\t\t\tthrow new Error(`Request to ${url} failed with status ${response.status}`)\n \t\t\t}\n \n-\t\t\t// Check for mid-stream error via finish_reason\n-\t\t\tconst choice = chunk.choices?.[0]\n-\t\t\t// OpenRouter may return finish_reason = \"error\" with error details\n-\t\t\tif ((choice?.finish_reason as string) === \"error\") {\n-\t\t\t\tconst choiceWithError = choice as any\n-\t\t\t\tif (choiceWithError.error) {\n-\t\t\t\t\tconst error = choiceWithError.error\n-\t\t\t\t\tconsole.error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t\tthrow new Error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new Error(\"Cline Mid-Stream Error: Stream terminated with error status but no error details provided\")\n-\t\t\t\t}\n+\t\t\tif (!response.data.data.choices || response.data.data.choices.length === 0) {\n+\t\t\t\tthrow new Error(`No choices returned from Cline API: ${JSON.stringify(response.data)}`)\n \t\t\t}\n \n-\t\t\tconst delta = choice?.delta\n-\t\t\tif (delta?.content) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"text\",\n-\t\t\t\t\ttext: delta.content,\n+\t\t\tfor (const choice of response.data.data.choices) {\n+\t\t\t\tif (choice.finish_reason === \"error\") {\n+\t\t\t\t\tconst error = choice.error || { code: \"Unknown\", message: \"No error details provided\" }\n+\t\t\t\t\tconsole.error(`Cline API Error: ${error.code} - ${error.message}`)\n+\t\t\t\t\tthrow new Error(`Cline API Error: ${error.code} - ${error.message}`)\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Reasoning tokens are returned separately from the content\n-\t\t\tif (\"reasoning\" in delta && delta.reasoning) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"reasoning\",\n-\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\treasoning: delta.reasoning,\n+\t\t\t\tif (choice.delta && choice.delta.content) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.delta.content,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!didOutputUsage && chunk.usage) {\n-\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\tlet totalCost = (chunk.usage.cost || 0) + (chunk.usage.cost_details?.upstream_inference_cost || 0)\n-\t\t\t\tconst modelId = this.getModel().id\n-\t\t\t\tconst provider = modelId.split(\"/\")[0]\n-\n-\t\t\t\t// If provider is x-ai, set totalCost to 0 (we're doing a promo)\n-\t\t\t\tif (provider === \"x-ai\") {\n-\t\t\t\t\ttotalCost = 0\n+\t\t\t\tif (choice.delta && choice.delta.reasoning) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"reasoning\",\n+\t\t\t\t\t\treasoning: choice.delta.reasoning,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\n-\t\t\t\tif (modelId.includes(\"gemini\")) {\n+\t\t\t\tif (choice.message && choice.message.content) {\n \t\t\t\t\tyield {\n-\t\t\t\t\t\ttype: \"usage\",\n-\t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: (chunk.usage.prompt_tokens || 0) - (chunk.usage.prompt_tokens_details?.cached_tokens || 0),\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\t\ttotalCost,\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.message.content,\n \t\t\t\t\t}\n-\t\t\t\t} else {\n+\t\t\t\t}\n+\t\t\t\tif (choice.usage) {\n+\t\t\t\t\tconst totalCost = choice.usage.cost || 0\n \t\t\t\t\tyield {\n \t\t\t\t\t\ttype: \"usage\",\n \t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: chunk.usage.prompt_tokens || 0,\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n+\t\t\t\t\t\tcacheReadTokens: choice.usage.cached_tokens || 0,\n+\t\t\t\t\t\tinputTokens: choice.usage.prompt_tokens || 0,\n+\t\t\t\t\t\toutputTokens: choice.usage.completion_tokens || 0,\n \t\t\t\t\t\ttotalCost,\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (response.data.data.usage) {\n \t\t\t\tdidOutputUsage = true\n+\t\t\t\tyield {\n+\t\t\t\t\ttype: \"usage\",\n+\t\t\t\t\tcacheWriteTokens: 0,\n+\t\t\t\t\tcacheReadTokens: response.data.data.usage.prompt_tokens_details.cached_tokens || 0,",
        "comment_created_at": "2025-07-07T23:48:11+00:00",
        "comment_author": "saoudrizwan",
        "comment_body": "Is there a possibility that `prompt_tokens_details` is undefined, in which case we should use an optional `?` after? Otherwise we would get a type error trying to access `cached_tokens` on an undefined value.",
        "pr_file_module": null
      },
      {
        "comment_id": "2193476447",
        "repo_full_name": "cline/cline",
        "pr_number": 4702,
        "pr_file": "src/api/providers/cline.ts",
        "discussion_id": "2191207915",
        "commented_code": "@@ -1,143 +1,233 @@\n import { Anthropic } from \"@anthropic-ai/sdk\"\n-import OpenAI from \"openai\"\n import { ApiHandler } from \"../\"\n+import { ClineAccountService } from \"@/services/account/ClineAccountService\"\n import { ApiHandlerOptions, ModelInfo, openRouterDefaultModelId, openRouterDefaultModelInfo } from \"@shared/api\"\n import { createOpenRouterStream } from \"../transform/openrouter-stream\"\n import { ApiStream, ApiStreamUsageChunk } from \"../transform/stream\"\n-import axios from \"axios\"\n+import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\"\n import { OpenRouterErrorResponse } from \"./types\"\n import { withRetry } from \"../retry\"\n+import { AuthService } from \"@/services/auth/AuthService\"\n \n export class ClineHandler implements ApiHandler {\n \tprivate options: ApiHandlerOptions\n-\tprivate client: OpenAI\n+\tprivate clineAccountService = ClineAccountService.getInstance()\n+\tprivate _authService: AuthService\n+\t// TODO: replace this with a global API Host\n+\tprivate readonly _baseUrl = \"https://core-api.staging.int.cline.bot\"\n+\t// private readonly _baseUrl = \"http://localhost:7777\"\n \tlastGenerationId?: string\n+\tprivate counter = 0\n \n \tconstructor(options: ApiHandlerOptions) {\n \t\tthis.options = options\n-\t\tthis.client = new OpenAI({\n-\t\t\tbaseURL: \"https://api.cline.bot/v1\",\n-\t\t\tapiKey: this.options.clineApiKey || \"\",\n-\t\t\tdefaultHeaders: {\n-\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n-\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n-\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n-\t\t\t},\n-\t\t})\n+\t\tthis._authService = AuthService.getInstance()\n \t}\n \n \t@withRetry()\n \tasync *createMessage(systemPrompt: string, messages: Anthropic.Messages.MessageParam[]): ApiStream {\n+\t\tconst clineAccountAuthToken = await this._authService.getAuthToken()\n+\n \t\tthis.lastGenerationId = undefined\n \n-\t\tconst stream = await createOpenRouterStream(\n-\t\t\tthis.client,\n-\t\t\tsystemPrompt,\n-\t\t\tmessages,\n-\t\t\tthis.getModel(),\n-\t\t\tthis.options.reasoningEffort,\n-\t\t\tthis.options.thinkingBudgetTokens,\n-\t\t\tthis.options.openRouterProviderSorting,\n+\t\tconst requestConfig: AxiosRequestConfig = {\n+\t\t\theaders: {\n+\t\t\t\t\"HTTP-Referer\": \"https://cline.bot\", // Optional, for including your app on cline.bot rankings.\n+\t\t\t\t\"X-Title\": \"Cline\", // Optional. Shows in rankings on cline.bot.\n+\t\t\t\t\"X-Task-ID\": this.options.taskId || \"\", // Include the task ID in the request headers\n+\t\t\t\tAuthorization: `Bearer ${clineAccountAuthToken}`,\n+\t\t\t},\n+\t\t\ttimeout: 15_000, // Set a timeout for requests to avoid hanging\n+\t\t}\n+\n+\t\tconst me = await this.clineAccountService.fetchMe()\n+\t\tconsole.log(\n+\t\t\t\"SwitchAuthToken: Active Organization\",\n+\t\t\tme?.organizations.filter((org) => org.active)[0]?.name || \"No active organization\",\n \t\t)\n \n \t\tlet didOutputUsage: boolean = false\n \n-\t\tfor await (const chunk of stream) {\n-\t\t\t// openrouter returns an error object instead of the openai sdk throwing an error\n-\t\t\tif (\"error\" in chunk) {\n-\t\t\t\tconst error = chunk.error as OpenRouterErrorResponse[\"error\"]\n-\t\t\t\tconsole.error(`Cline API Error: ${error?.code} - ${error?.message}`)\n-\t\t\t\t// Include metadata in the error message if available\n-\t\t\t\tconst metadataStr = error.metadata ? `\\nMetadata: ${JSON.stringify(error.metadata, null, 2)}` : \"\"\n-\t\t\t\tthrow new Error(`Cline API Error ${error.code}: ${error.message}${metadataStr}`)\n-\t\t\t}\n+\t\tconst url = `${this._baseUrl}/api/v1/chat/completions`\n+\t\ttry {\n+\t\t\tconst response = await axios.post(\n+\t\t\t\turl,\n+\t\t\t\t{\n+\t\t\t\t\tmodel: this.getModel().id,\n+\t\t\t\t\tmessages: [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\trole: \"system\",\n+\t\t\t\t\t\t\tcontent: systemPrompt,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t...messages,\n+\t\t\t\t\t],\n+\t\t\t\t\tstream: false,\n+\t\t\t\t\t// reasoning_effort: this.options.reasoningEffort || \"low\",\n+\t\t\t\t\t// thinking_budget_tokens: this.options.thinkingBudgetTokens || 0,\n+\t\t\t\t\t// open_router_provider_sorting: this.options.openRouterProviderSorting || \"default\",\n+\t\t\t\t},\n+\t\t\t\trequestConfig,\n+\t\t\t)\n \n-\t\t\tif (!this.lastGenerationId && chunk.id) {\n-\t\t\t\tthis.lastGenerationId = chunk.id\n+\t\t\tif (!response.data || !response.data.data) {\n+\t\t\t\tthrow new Error(`Request to ${url} failed with status ${response.status}`)\n \t\t\t}\n \n-\t\t\t// Check for mid-stream error via finish_reason\n-\t\t\tconst choice = chunk.choices?.[0]\n-\t\t\t// OpenRouter may return finish_reason = \"error\" with error details\n-\t\t\tif ((choice?.finish_reason as string) === \"error\") {\n-\t\t\t\tconst choiceWithError = choice as any\n-\t\t\t\tif (choiceWithError.error) {\n-\t\t\t\t\tconst error = choiceWithError.error\n-\t\t\t\t\tconsole.error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t\tthrow new Error(`Cline Mid-Stream Error: ${error.code || error.type || \"Unknown\"} - ${error.message}`)\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new Error(\"Cline Mid-Stream Error: Stream terminated with error status but no error details provided\")\n-\t\t\t\t}\n+\t\t\tif (!response.data.data.choices || response.data.data.choices.length === 0) {\n+\t\t\t\tthrow new Error(`No choices returned from Cline API: ${JSON.stringify(response.data)}`)\n \t\t\t}\n \n-\t\t\tconst delta = choice?.delta\n-\t\t\tif (delta?.content) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"text\",\n-\t\t\t\t\ttext: delta.content,\n+\t\t\tfor (const choice of response.data.data.choices) {\n+\t\t\t\tif (choice.finish_reason === \"error\") {\n+\t\t\t\t\tconst error = choice.error || { code: \"Unknown\", message: \"No error details provided\" }\n+\t\t\t\t\tconsole.error(`Cline API Error: ${error.code} - ${error.message}`)\n+\t\t\t\t\tthrow new Error(`Cline API Error: ${error.code} - ${error.message}`)\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Reasoning tokens are returned separately from the content\n-\t\t\tif (\"reasoning\" in delta && delta.reasoning) {\n-\t\t\t\tyield {\n-\t\t\t\t\ttype: \"reasoning\",\n-\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\treasoning: delta.reasoning,\n+\t\t\t\tif (choice.delta && choice.delta.content) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.delta.content,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (!didOutputUsage && chunk.usage) {\n-\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\tlet totalCost = (chunk.usage.cost || 0) + (chunk.usage.cost_details?.upstream_inference_cost || 0)\n-\t\t\t\tconst modelId = this.getModel().id\n-\t\t\t\tconst provider = modelId.split(\"/\")[0]\n-\n-\t\t\t\t// If provider is x-ai, set totalCost to 0 (we're doing a promo)\n-\t\t\t\tif (provider === \"x-ai\") {\n-\t\t\t\t\ttotalCost = 0\n+\t\t\t\tif (choice.delta && choice.delta.reasoning) {\n+\t\t\t\t\tyield {\n+\t\t\t\t\t\ttype: \"reasoning\",\n+\t\t\t\t\t\treasoning: choice.delta.reasoning,\n+\t\t\t\t\t}\n \t\t\t\t}\n-\n-\t\t\t\tif (modelId.includes(\"gemini\")) {\n+\t\t\t\tif (choice.message && choice.message.content) {\n \t\t\t\t\tyield {\n-\t\t\t\t\t\ttype: \"usage\",\n-\t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: (chunk.usage.prompt_tokens || 0) - (chunk.usage.prompt_tokens_details?.cached_tokens || 0),\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n-\t\t\t\t\t\ttotalCost,\n+\t\t\t\t\t\ttype: \"text\",\n+\t\t\t\t\t\ttext: choice.message.content,\n \t\t\t\t\t}\n-\t\t\t\t} else {\n+\t\t\t\t}\n+\t\t\t\tif (choice.usage) {\n+\t\t\t\t\tconst totalCost = choice.usage.cost || 0\n \t\t\t\t\tyield {\n \t\t\t\t\t\ttype: \"usage\",\n \t\t\t\t\t\tcacheWriteTokens: 0,\n-\t\t\t\t\t\tcacheReadTokens: chunk.usage.prompt_tokens_details?.cached_tokens || 0,\n-\t\t\t\t\t\tinputTokens: chunk.usage.prompt_tokens || 0,\n-\t\t\t\t\t\toutputTokens: chunk.usage.completion_tokens || 0,\n-\t\t\t\t\t\t// @ts-ignore-next-line\n+\t\t\t\t\t\tcacheReadTokens: choice.usage.cached_tokens || 0,\n+\t\t\t\t\t\tinputTokens: choice.usage.prompt_tokens || 0,\n+\t\t\t\t\t\toutputTokens: choice.usage.completion_tokens || 0,\n \t\t\t\t\t\ttotalCost,\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (response.data.data.usage) {\n \t\t\t\tdidOutputUsage = true\n+\t\t\t\tyield {\n+\t\t\t\t\ttype: \"usage\",\n+\t\t\t\t\tcacheWriteTokens: 0,\n+\t\t\t\t\tcacheReadTokens: response.data.data.usage.prompt_tokens_details.cached_tokens || 0,",
        "comment_created_at": "2025-07-08T21:30:44+00:00",
        "comment_author": "dcbartlett",
        "comment_body": "Good Call, Updating",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2184427145",
    "pr_number": 4651,
    "pr_file": "src/hosts/vscode/window/showOpenDialogue.ts",
    "created_at": "2025-07-04T05:07:22+00:00",
    "commented_code": "+import * as vscode from \"vscode\"\n+import { ShowOpenDialogueRequest, SelectedResources } from \"@/shared/proto/host/window\"\n+\n+export async function showOpenDialogue(request: ShowOpenDialogueRequest): Promise<SelectedResources> {\n+\tconst options: vscode.OpenDialogOptions = {}\n+\n+\tif (request?.options?.canSelectMany !== undefined) {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2184427145",
        "repo_full_name": "cline/cline",
        "pr_number": 4651,
        "pr_file": "src/hosts/vscode/window/showOpenDialogue.ts",
        "discussion_id": "2184427145",
        "commented_code": "@@ -0,0 +1,33 @@\n+import * as vscode from \"vscode\"\n+import { ShowOpenDialogueRequest, SelectedResources } from \"@/shared/proto/host/window\"\n+\n+export async function showOpenDialogue(request: ShowOpenDialogueRequest): Promise<SelectedResources> {\n+\tconst options: vscode.OpenDialogOptions = {}\n+\n+\tif (request?.options?.canSelectMany !== undefined) {",
        "comment_created_at": "2025-07-04T05:07:22+00:00",
        "comment_author": "sjf",
        "comment_body": "`request?.` the request can never be null/undefined so it can just be `request.thing`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162090672",
    "pr_number": 4398,
    "pr_file": "src/api/providers/cline.ts",
    "created_at": "2025-06-23T17:13:28+00:00",
    "commented_code": "this.lastGenerationId = chunk.id\n \t\t\t}\n \n-\t\t\tconst delta = chunk.choices[0]?.delta\n+\t\t\t// Check for mid-stream error via finish_reason\n+\t\t\tconst choice = chunk.choices?.[0]",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2162090672",
        "repo_full_name": "cline/cline",
        "pr_number": 4398,
        "pr_file": "src/api/providers/cline.ts",
        "discussion_id": "2162090672",
        "commented_code": "@@ -56,7 +56,22 @@ export class ClineHandler implements ApiHandler {\n \t\t\t\tthis.lastGenerationId = chunk.id\n \t\t\t}\n \n-\t\t\tconst delta = chunk.choices[0]?.delta\n+\t\t\t// Check for mid-stream error via finish_reason\n+\t\t\tconst choice = chunk.choices?.[0]",
        "comment_created_at": "2025-06-23T17:13:28+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Have never seen an array index accessed like this. Why can we not access chunk.choices[0] as before?",
        "pr_file_module": null
      },
      {
        "comment_id": "2162976211",
        "repo_full_name": "cline/cline",
        "pr_number": 4398,
        "pr_file": "src/api/providers/cline.ts",
        "discussion_id": "2162090672",
        "commented_code": "@@ -56,7 +56,22 @@ export class ClineHandler implements ApiHandler {\n \t\t\t\tthis.lastGenerationId = chunk.id\n \t\t\t}\n \n-\t\t\tconst delta = chunk.choices[0]?.delta\n+\t\t\t// Check for mid-stream error via finish_reason\n+\t\t\tconst choice = chunk.choices?.[0]",
        "comment_created_at": "2025-06-24T05:13:21+00:00",
        "comment_author": "arafatkatze",
        "comment_body": "<img width=\"715\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e8eaf2ae-6623-4bfe-8d98-6592c6355e10\" />\r\n\r\n\r\nOther parts of the code do this too. Just being overly cautious.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056634315",
    "pr_number": 2964,
    "pr_file": "src/utils/cost.ts",
    "created_at": "2025-04-23T18:05:28+00:00",
    "commented_code": "}\n \t}\n \n-\t// Determine effective output price (based on total *input* tokens for pricing)\n-\tlet effectiveOutputPrice = modelInfo.outputPrice || 0",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2056634315",
        "repo_full_name": "cline/cline",
        "pr_number": 2964,
        "pr_file": "src/utils/cost.ts",
        "discussion_id": "2056634315",
        "commented_code": "@@ -23,10 +26,15 @@ function calculateApiCostInternal(\n \t\t}\n \t}\n \n-\t// Determine effective output price (based on total *input* tokens for pricing)\n-\tlet effectiveOutputPrice = modelInfo.outputPrice || 0",
        "comment_created_at": "2025-04-23T18:05:28+00:00",
        "comment_author": "BarreiroT",
        "comment_body": "Hey, @monotykamary! Should this default to 0? I noticed when fixing the tests that it's causing some errors in the calculations (since if the user didn't use thinking budget and the model doesn't have `outputPriceTiers` we always calculate it as 0)\r\n\r\nJust in case, I opened a [PR](https://github.com/cline/cline/pull/3079) reverting it",
        "pr_file_module": null
      },
      {
        "comment_id": "2057392053",
        "repo_full_name": "cline/cline",
        "pr_number": 2964,
        "pr_file": "src/utils/cost.ts",
        "discussion_id": "2056634315",
        "commented_code": "@@ -23,10 +26,15 @@ function calculateApiCostInternal(\n \t\t}\n \t}\n \n-\t// Determine effective output price (based on total *input* tokens for pricing)\n-\tlet effectiveOutputPrice = modelInfo.outputPrice || 0",
        "comment_created_at": "2025-04-24T03:36:05+00:00",
        "comment_author": "monotykamary",
        "comment_body": "Oh nice catch and my bad; that's right, it should default to output price. It is probably a leftover artifact from testing output prices with thinking budgets.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040484790",
    "pr_number": 2837,
    "pr_file": "src/core/storage/state.ts",
    "created_at": "2025-04-12T01:25:31+00:00",
    "commented_code": "getGlobalState(context, \"previousModeModelInfo\") as Promise<ModelInfo | undefined>,\n \t\tgetGlobalState(context, \"previousModeVsCodeLmModelSelector\") as Promise<vscode.LanguageModelChatSelector | undefined>,\n \t\tgetGlobalState(context, \"previousModeThinkingBudgetTokens\") as Promise<number | undefined>,\n+\t\t// getGlobalState(context, \"previousModeGrokMiniReasoningEffort\") as Promise<\"low\" | \"high\" | undefined>,\n \t\tgetGlobalState(context, \"qwenApiLine\") as Promise<string | undefined>,\n \t\tgetSecret(context, \"liteLlmApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"telemetrySetting\") as Promise<TelemetrySetting | undefined>,\n \t\tgetSecret(context, \"asksageApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"asksageApiUrl\") as Promise<string | undefined>,\n \t\tgetSecret(context, \"xaiApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"thinkingBudgetTokens\") as Promise<number | undefined>,\n+\t\tgetGlobalState(context, \"grokMiniReasoningEffort\") as Promise<\"low\" | \"high\" | undefined>,\n \t\tgetSecret(context, \"sambanovaApiKey\") as Promise<string | undefined>,",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2040484790",
        "repo_full_name": "cline/cline",
        "pr_number": 2837,
        "pr_file": "src/core/storage/state.ts",
        "discussion_id": "2040484790",
        "commented_code": "@@ -177,13 +179,15 @@ export async function getAllExtensionState(context: vscode.ExtensionContext) {\n \t\tgetGlobalState(context, \"previousModeModelInfo\") as Promise<ModelInfo | undefined>,\n \t\tgetGlobalState(context, \"previousModeVsCodeLmModelSelector\") as Promise<vscode.LanguageModelChatSelector | undefined>,\n \t\tgetGlobalState(context, \"previousModeThinkingBudgetTokens\") as Promise<number | undefined>,\n+\t\t// getGlobalState(context, \"previousModeGrokMiniReasoningEffort\") as Promise<\"low\" | \"high\" | undefined>,\n \t\tgetGlobalState(context, \"qwenApiLine\") as Promise<string | undefined>,\n \t\tgetSecret(context, \"liteLlmApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"telemetrySetting\") as Promise<TelemetrySetting | undefined>,\n \t\tgetSecret(context, \"asksageApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"asksageApiUrl\") as Promise<string | undefined>,\n \t\tgetSecret(context, \"xaiApiKey\") as Promise<string | undefined>,\n \t\tgetGlobalState(context, \"thinkingBudgetTokens\") as Promise<number | undefined>,\n+\t\tgetGlobalState(context, \"grokMiniReasoningEffort\") as Promise<\"low\" | \"high\" | undefined>,\n \t\tgetSecret(context, \"sambanovaApiKey\") as Promise<string | undefined>,",
        "comment_created_at": "2025-04-12T01:25:31+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "One thing I noticed is that we treat a lot of these as if they can't be undefined, but we allow it. We should enforce defaults",
        "pr_file_module": null
      }
    ]
  }
]