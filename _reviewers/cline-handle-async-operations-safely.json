[
  {
    "discussion_id": "2057064122",
    "pr_number": 3001,
    "pr_file": "webview-ui/src/components/settings/BrowserSettingsSection.tsx",
    "created_at": "2025-04-23T23:54:00+00:00",
    "commented_code": "// Request detected Chrome path on mount\n \tuseEffect(() => {\n-\t\tvscode.postMessage({\n-\t\t\ttype: \"getDetectedChromePath\",\n-\t\t})\n+\t\t// Use gRPC for getDetectedChromePath\n+\t\tBrowserServiceClient.getDetectedChromePath({})\n+\t\t\t.then((result) => {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2057064122",
        "repo_full_name": "cline/cline",
        "pr_number": 3001,
        "pr_file": "webview-ui/src/components/settings/BrowserSettingsSection.tsx",
        "discussion_id": "2057064122",
        "commented_code": "@@ -83,9 +80,15 @@ export const BrowserSettingsSection: React.FC = () => {\n \n \t// Request detected Chrome path on mount\n \tuseEffect(() => {\n-\t\tvscode.postMessage({\n-\t\t\ttype: \"getDetectedChromePath\",\n-\t\t})\n+\t\t// Use gRPC for getDetectedChromePath\n+\t\tBrowserServiceClient.getDetectedChromePath({})\n+\t\t\t.then((result) => {",
        "comment_created_at": "2025-04-23T23:54:00+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "is it okay to be setting an empty path here? In the getDetectedChromePath we're just returning empty string on error.",
        "pr_file_module": null
      },
      {
        "comment_id": "2059361538",
        "repo_full_name": "cline/cline",
        "pr_number": 3001,
        "pr_file": "webview-ui/src/components/settings/BrowserSettingsSection.tsx",
        "discussion_id": "2057064122",
        "commented_code": "@@ -83,9 +80,15 @@ export const BrowserSettingsSection: React.FC = () => {\n \n \t// Request detected Chrome path on mount\n \tuseEffect(() => {\n-\t\tvscode.postMessage({\n-\t\t\ttype: \"getDetectedChromePath\",\n-\t\t})\n+\t\t// Use gRPC for getDetectedChromePath\n+\t\tBrowserServiceClient.getDetectedChromePath({})\n+\t\t\t.then((result) => {",
        "comment_created_at": "2025-04-24T23:12:09+00:00",
        "comment_author": "Garoth",
        "comment_body": "I went and checked this manually by deleting my chrome binary -- it works fine, outputting a little message in the settings page if chrome isn't detected",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2034407809",
    "pr_number": 2758,
    "pr_file": "webview-ui/src/components/common/MermaidBlock.tsx",
    "created_at": "2025-04-11T07:14:14+00:00",
    "commented_code": "}\n \t}\n \n+\tconst handleCopyCode = () => {\n+\t\tnavigator.clipboard.writeText(code)",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2038943638",
        "repo_full_name": "cline/cline",
        "pr_number": 2758,
        "pr_file": "webview-ui/src/components/common/MermaidBlock.tsx",
        "discussion_id": "2034407809",
        "commented_code": "@@ -139,11 +140,18 @@ export default function MermaidBlock({ code }: MermaidBlockProps) {\n \t\t}\n \t}\n \n+\tconst handleCopyCode = () => {\n+\t\tnavigator.clipboard.writeText(code)",
        "comment_created_at": "2025-04-11T07:14:14+00:00",
        "comment_author": "dcbartlett",
        "comment_body": "```suggestion\r\n\ttry {\r\n\t\tawait navigator.clipboard.writeText(code)\r\n\t} catch (err) {\r\n\t\tconsole.error('Copy failed', err)\r\n\t}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2039545272",
        "repo_full_name": "cline/cline",
        "pr_number": 2758,
        "pr_file": "webview-ui/src/components/common/MermaidBlock.tsx",
        "discussion_id": "2034407809",
        "commented_code": "@@ -139,11 +140,18 @@ export default function MermaidBlock({ code }: MermaidBlockProps) {\n \t\t}\n \t}\n \n+\tconst handleCopyCode = () => {\n+\t\tnavigator.clipboard.writeText(code)",
        "comment_created_at": "2025-04-11T13:14:10+00:00",
        "comment_author": "cacosub7",
        "comment_body": "Thank you for the review feedback regarding the clipboard handling. The suggested changes were correct in principle but caused a compilation error since `await` was used in a non-async function.\r\n\r\nI've updated the code to properly handle the asynchronous clipboard operation:\r\n\r\n```typescript\r\nconst handleCopyCode = async () => {\r\n  try {\r\n    await navigator.clipboard.writeText(code)\r\n  } catch (err) {\r\n    console.error('Copy failed', err)\r\n  }\r\n}\r\n```\r\n\r\nThe code now compiles successfully and provides robust clipboard operation handling. Ready for another review.",
        "pr_file_module": null
      }
    ]
  }
]