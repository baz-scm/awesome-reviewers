[
  {
    "discussion_id": "2237876922",
    "pr_number": 5221,
    "pr_file": "proto/cline/state.proto",
    "created_at": "2025-07-28T21:13:56+00:00",
    "commented_code": "optional string cline_account_id = 303;\n }\n+\n+message UpdateTerminalConnectionTimeoutRequest {\n+  optional int32 timeout_ms = 1;\n+}\n+\n+message UpdateTerminalConnectionTimeoutResponse {\n+  optional int32 timeout_ms = 1;\n+}",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2237876922",
        "repo_full_name": "cline/cline",
        "pr_number": 5221,
        "pr_file": "proto/cline/state.proto",
        "discussion_id": "2237876922",
        "commented_code": "@@ -228,3 +228,11 @@ message ApiConfiguration {\n \n   optional string cline_account_id = 303;\n }\n+\n+message UpdateTerminalConnectionTimeoutRequest {\n+  optional int32 timeout_ms = 1;\n+}\n+\n+message UpdateTerminalConnectionTimeoutResponse {\n+  optional int32 timeout_ms = 1;\n+}",
        "comment_created_at": "2025-07-28T21:13:56+00:00",
        "comment_author": "canvrno",
        "comment_body": "Should we create a common int32Request?",
        "pr_file_module": null
      },
      {
        "comment_id": "2237880684",
        "repo_full_name": "cline/cline",
        "pr_number": 5221,
        "pr_file": "proto/cline/state.proto",
        "discussion_id": "2237876922",
        "commented_code": "@@ -228,3 +228,11 @@ message ApiConfiguration {\n \n   optional string cline_account_id = 303;\n }\n+\n+message UpdateTerminalConnectionTimeoutRequest {\n+  optional int32 timeout_ms = 1;\n+}\n+\n+message UpdateTerminalConnectionTimeoutResponse {\n+  optional int32 timeout_ms = 1;\n+}",
        "comment_created_at": "2025-07-28T21:16:34+00:00",
        "comment_author": "sjf",
        "comment_body": "No, its not best practice to have all these RPCs sharing the same request and response types. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2237894821",
        "repo_full_name": "cline/cline",
        "pr_number": 5221,
        "pr_file": "proto/cline/state.proto",
        "discussion_id": "2237876922",
        "commented_code": "@@ -228,3 +228,11 @@ message ApiConfiguration {\n \n   optional string cline_account_id = 303;\n }\n+\n+message UpdateTerminalConnectionTimeoutRequest {\n+  optional int32 timeout_ms = 1;\n+}\n+\n+message UpdateTerminalConnectionTimeoutResponse {\n+  optional int32 timeout_ms = 1;\n+}",
        "comment_created_at": "2025-07-28T21:26:36+00:00",
        "comment_author": "sjf",
        "comment_body": "https://web.archive.org/web/20250620210513/https://protobuf.dev/best-practices/api/#unique-protos",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193719816",
    "pr_number": 4745,
    "pr_file": "proto/host/window.proto",
    "created_at": "2025-07-09T01:34:49+00:00",
    "commented_code": "message SelectedResources {\n   repeated string paths = 1;\n }\n+\n+message ShowErrorMessageRequest {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2193719816",
        "repo_full_name": "cline/cline",
        "pr_number": 4745,
        "pr_file": "proto/host/window.proto",
        "discussion_id": "2193719816",
        "commented_code": "@@ -46,3 +46,33 @@ message ShowOpenDialogueFilterOption {\n message SelectedResources {\n   repeated string paths = 1;\n }\n+\n+message ShowErrorMessageRequest {",
        "comment_created_at": "2025-07-09T01:34:49+00:00",
        "comment_author": "Garoth",
        "comment_body": "You can merge these three identical request types together and reuse. Also field #1 for Requests (only) should be cline.Metadata (a placeholder for extra routing info if we need it later)",
        "pr_file_module": null
      },
      {
        "comment_id": "2196271903",
        "repo_full_name": "cline/cline",
        "pr_number": 4745,
        "pr_file": "proto/host/window.proto",
        "discussion_id": "2193719816",
        "commented_code": "@@ -46,3 +46,33 @@ message ShowOpenDialogueFilterOption {\n message SelectedResources {\n   repeated string paths = 1;\n }\n+\n+message ShowErrorMessageRequest {",
        "comment_created_at": "2025-07-10T00:54:13+00:00",
        "comment_author": "abeatrix",
        "comment_body": "Makes sense! Merged them into showMessage!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2155359296",
    "pr_number": 4274,
    "pr_file": "proto/voice.proto",
    "created_at": "2025-06-18T19:34:58+00:00",
    "commented_code": "+syntax = \"proto3\";\n+\n+import \"common.proto\";\n+\n+package cline;\n+option java_package = \"bot.cline.proto\";\n+option java_multiple_files = true;\n+\n+service VoiceService {\n+  rpc startRecording(StartRecordingRequest) returns (StartRecordingResponse);\n+  rpc stopRecording(StopRecordingRequest) returns (StopRecordingResponse);\n+  rpc getRecordingStatus(GetRecordingStatusRequest) returns (GetRecordingStatusResponse);\n+  rpc transcribeAudio(TranscribeAudioRequest) returns (TranscribeAudioResponse);",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2155359296",
        "repo_full_name": "cline/cline",
        "pr_number": 4274,
        "pr_file": "proto/voice.proto",
        "discussion_id": "2155359296",
        "commented_code": "@@ -0,0 +1,55 @@\n+syntax = \"proto3\";\n+\n+import \"common.proto\";\n+\n+package cline;\n+option java_package = \"bot.cline.proto\";\n+option java_multiple_files = true;\n+\n+service VoiceService {\n+  rpc startRecording(StartRecordingRequest) returns (StartRecordingResponse);\n+  rpc stopRecording(StopRecordingRequest) returns (StopRecordingResponse);\n+  rpc getRecordingStatus(GetRecordingStatusRequest) returns (GetRecordingStatusResponse);\n+  rpc transcribeAudio(TranscribeAudioRequest) returns (TranscribeAudioResponse);",
        "comment_created_at": "2025-06-18T19:34:58+00:00",
        "comment_author": "Garoth",
        "comment_body": "Please do not use returns that end with \"Response\" or some synonym. The idea with me saying that is that a return type from gRPC should be a \"plain type\" not a special case. I.e. it's much more useful to receive a \"RecordingStatus\" that can be re-used as a struct in the codebase, rather than a \"GetRecordingStatusResponse\" that feels special cased to the RPC\r\n\r\nAlso, `success` and `error` are anti-patterns that we should avoid & remove from any old code we have. Success / errors are handled by gRPC itself & shouldn't be put into the types\r\n\r\n`StopRecordingRequest` is just `EmptyRequest`, same with StartRecordingRequest. TranscribeAudioRequest is just common.String",
        "pr_file_module": null
      },
      {
        "comment_id": "2156172480",
        "repo_full_name": "cline/cline",
        "pr_number": 4274,
        "pr_file": "proto/voice.proto",
        "discussion_id": "2155359296",
        "commented_code": "@@ -0,0 +1,55 @@\n+syntax = \"proto3\";\n+\n+import \"common.proto\";\n+\n+package cline;\n+option java_package = \"bot.cline.proto\";\n+option java_multiple_files = true;\n+\n+service VoiceService {\n+  rpc startRecording(StartRecordingRequest) returns (StartRecordingResponse);\n+  rpc stopRecording(StopRecordingRequest) returns (StopRecordingResponse);\n+  rpc getRecordingStatus(GetRecordingStatusRequest) returns (GetRecordingStatusResponse);\n+  rpc transcribeAudio(TranscribeAudioRequest) returns (TranscribeAudioResponse);",
        "comment_created_at": "2025-06-19T05:50:26+00:00",
        "comment_author": "Garoth",
        "comment_body": "ok maybe `success` is fine sometimes, when it's not an error, but success isn't guaranteed",
        "pr_file_module": null
      },
      {
        "comment_id": "2157743141",
        "repo_full_name": "cline/cline",
        "pr_number": 4274,
        "pr_file": "proto/voice.proto",
        "discussion_id": "2155359296",
        "commented_code": "@@ -0,0 +1,55 @@\n+syntax = \"proto3\";\n+\n+import \"common.proto\";\n+\n+package cline;\n+option java_package = \"bot.cline.proto\";\n+option java_multiple_files = true;\n+\n+service VoiceService {\n+  rpc startRecording(StartRecordingRequest) returns (StartRecordingResponse);\n+  rpc stopRecording(StopRecordingRequest) returns (StopRecordingResponse);\n+  rpc getRecordingStatus(GetRecordingStatusRequest) returns (GetRecordingStatusResponse);\n+  rpc transcribeAudio(TranscribeAudioRequest) returns (TranscribeAudioResponse);",
        "comment_created_at": "2025-06-19T22:56:48+00:00",
        "comment_author": "arafatkatze",
        "comment_body": ">Please do not use returns that end with \"Response\" or some synonym. The idea with me saying that is that a return type from gRPC should be a \"plain type\" not a special case. I.e. it's much more useful to receive a \"RecordingStatus\" that can be re-used as a struct in the codebase, rather than a \"GetRecordingStatusResponse\" that feels special cased to the RPC\r\n\r\nGood pointer and I made the suggested changes. \r\n\r\n\r\n>ok maybe success is fine sometimes, when it's not an error, but success isn't guaranteed\r\n\r\nThis is exactly the case here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094393226",
    "pr_number": 3606,
    "pr_file": "proto/mcp.proto",
    "created_at": "2025-05-18T06:04:56+00:00",
    "commented_code": "string server_url = 3;\n }\n \n+message RestartMcpServerRequest {\n+  Metadata metadata = 1;\n+  string server_name = 2;\n+}",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2094393226",
        "repo_full_name": "cline/cline",
        "pr_number": 3606,
        "pr_file": "proto/mcp.proto",
        "discussion_id": "2094393226",
        "commented_code": "@@ -31,6 +32,11 @@ message AddRemoteMcpServerRequest {\n   string server_url = 3;\n }\n \n+message RestartMcpServerRequest {\n+  Metadata metadata = 1;\n+  string server_name = 2;\n+}",
        "comment_created_at": "2025-05-18T06:04:56+00:00",
        "comment_author": "canvrno",
        "comment_body": "The `StringRequest` message in `common.proto` can be used here instead of creating a bespoke message.",
        "pr_file_module": null
      },
      {
        "comment_id": "2094583741",
        "repo_full_name": "cline/cline",
        "pr_number": 3606,
        "pr_file": "proto/mcp.proto",
        "discussion_id": "2094393226",
        "commented_code": "@@ -31,6 +32,11 @@ message AddRemoteMcpServerRequest {\n   string server_url = 3;\n }\n \n+message RestartMcpServerRequest {\n+  Metadata metadata = 1;\n+  string server_name = 2;\n+}",
        "comment_created_at": "2025-05-18T17:27:31+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Is that necessary? I saw that but prefer just making it explicit.\r\n\r\nIf that's our standard then I can switch it\r\n\r\n@canvrno ",
        "pr_file_module": null
      },
      {
        "comment_id": "2094585173",
        "repo_full_name": "cline/cline",
        "pr_number": 3606,
        "pr_file": "proto/mcp.proto",
        "discussion_id": "2094393226",
        "commented_code": "@@ -31,6 +32,11 @@ message AddRemoteMcpServerRequest {\n   string server_url = 3;\n }\n \n+message RestartMcpServerRequest {\n+  Metadata metadata = 1;\n+  string server_name = 2;\n+}",
        "comment_created_at": "2025-05-18T17:35:20+00:00",
        "comment_author": "canvrno",
        "comment_body": "Yeah, where possible we try to re-use the common messages (or sometimes modify existing ones) to keep things neat. Since this one just requires a single string (and metadata), it is a good candidate for dedup.",
        "pr_file_module": null
      },
      {
        "comment_id": "2094589873",
        "repo_full_name": "cline/cline",
        "pr_number": 3606,
        "pr_file": "proto/mcp.proto",
        "discussion_id": "2094393226",
        "commented_code": "@@ -31,6 +32,11 @@ message AddRemoteMcpServerRequest {\n   string server_url = 3;\n }\n \n+message RestartMcpServerRequest {\n+  Metadata metadata = 1;\n+  string server_name = 2;\n+}",
        "comment_created_at": "2025-05-18T17:57:53+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Alright",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2060973604",
    "pr_number": 3124,
    "pr_file": "proto/file.proto",
    "created_at": "2025-04-25T22:46:59+00:00",
    "commented_code": "service FileService {\n   // Opens a file in the editor\n   rpc openFile(StringRequest) returns (Empty);\n+\n+  // Deletes a rule file from either global or workspace rules directory\n+  rpc deleteRuleFile(DeleteRuleFileRequest) returns (DeleteRuleFileResponse);\n+}\n+\n+// Request for deleting a rule file\n+message DeleteRuleFileRequest {\n+  Metadata metadata = 1;\n+  string rule_path = 2;  // Path of the rule file to delete\n+  bool is_global = 3;    // Whether the file is in global or workspace rules directory\n+}\n+\n+// Response for deleting a rule file\n+message DeleteRuleFileResponse {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2060973604",
        "repo_full_name": "cline/cline",
        "pr_number": 3124,
        "pr_file": "proto/file.proto",
        "discussion_id": "2060973604",
        "commented_code": "@@ -8,4 +8,20 @@ import \"common.proto\";\n service FileService {\n   // Opens a file in the editor\n   rpc openFile(StringRequest) returns (Empty);\n+\n+  // Deletes a rule file from either global or workspace rules directory\n+  rpc deleteRuleFile(DeleteRuleFileRequest) returns (DeleteRuleFileResponse);\n+}\n+\n+// Request for deleting a rule file\n+message DeleteRuleFileRequest {\n+  Metadata metadata = 1;\n+  string rule_path = 2;  // Path of the rule file to delete\n+  bool is_global = 3;    // Whether the file is in global or workspace rules directory\n+}\n+\n+// Response for deleting a rule file\n+message DeleteRuleFileResponse {",
        "comment_created_at": "2025-04-25T22:46:59+00:00",
        "comment_author": "Garoth",
        "comment_body": "Hmm, this is close to a pattern I was hoping to avoid, where we have dedicated Response types. I suspect that this could be moved to shared, and called something like \"SuccessString\" ?\r\n\r\nEdit: looking at https://github.com/cline/cline/pull/3122/files there is indeed another type that's just a bool & string -- \"CreateRuleFileResponse\"",
        "pr_file_module": null
      }
    ]
  }
]