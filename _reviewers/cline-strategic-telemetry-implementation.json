[
  {
    "discussion_id": "2072296483",
    "pr_number": 3263,
    "pr_file": "src/extension.ts",
    "created_at": "2025-05-03T02:54:27+00:00",
    "commented_code": "const { IS_DEV, DEV_WORKSPACE_FOLDER } = process.env\n \n // This method is called when your extension is deactivated\n-export function deactivate() {\n+export async function deactivate() {\n+\tawait telemetryService.sendCollectedEvents()",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2072296483",
        "repo_full_name": "cline/cline",
        "pr_number": 3263,
        "pr_file": "src/extension.ts",
        "discussion_id": "2072296483",
        "commented_code": "@@ -434,11 +434,12 @@ export function activate(context: vscode.ExtensionContext) {\n const { IS_DEV, DEV_WORKSPACE_FOLDER } = process.env\n \n // This method is called when your extension is deactivated\n-export function deactivate() {\n+export async function deactivate() {\n+\tawait telemetryService.sendCollectedEvents()",
        "comment_created_at": "2025-05-03T02:54:27+00:00",
        "comment_author": "arafatkatze",
        "comment_body": "```suggestion\r\n telemetryService.sendCollectedEvents()\r\n```\r\nRegarding the telemetry handling in extension.ts, the recent changes address a potential issue with sending events during the deactivate function:\r\n\r\n1. Why await in deactivate() is problematic: The deactivate function in VS Code extensions has a very short, strict time limit to execute before the extension host might be terminated. Awaiting network operations like telemetryService.sendCollectedEvents() is risky here. If the network request takes too long (which is possible, especially if many events have accumulated because the user hasn't closed VS Code in a while), the time limit could be exceeded. This would stop the deactivation process prematurely and could lead to the loss of those final telemetry events.\r\n\r\n2. The Periodic Sending (\"Cron Job\") Solution: To mitigate this, you can implement implemented periodic telemetry sending within the activate function using setInterval. This acts like a simple cron job, triggering telemetryService.sendCollectedEvents() every 30 minutes while the extension is active. This ensures that telemetry data is sent more regularly in smaller batches, reducing the amount that needs to be sent during the critical shutdown phase. The interval timer is, of course, properly cleared when the extension deactivates.\r\n```\r\n\r\n\t// Start periodic telemetry sending\r\n\tconst thirtyMinutes = 30 * 60 * 1000\r\n\ttelemetryIntervalId = setInterval(() => {\r\n\t\tLogger.log(\"Sending collected telemetry events periodically...\")\r\n\t\t// Fire-and-forget, log potential errors but don't block\r\n\t\tvoid telemetryService.sendCollectedEvents().catch((error) => {\r\n\t\t\tLogger.error(\"Error sending periodic telemetry:\", error)\r\n\t\t})\r\n\t}, thirtyMinutes)\r\n\tcontext.subscriptions.push({\r\n\t\tdispose: () => {\r\n\t\t\tif (telemetryIntervalId) {\r\n\t\t\t\tclearInterval(telemetryIntervalId)\r\n\t\t\t}\r\n\t\t},\r\n\t})\r\n```\r\n<img width=\"681\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a9e024c6-a13e-4247-ac22-c8e81320a171\" />\r\n\r\n\r\n3. Updated deactivate() Logic: Because events are now sent periodically, the final call to sendCollectedEvents() in deactivate no longer needs to be awaited. It's now a \"fire-and-forget\" call (void ... .catch(...)). This significantly reduces the risk of hitting the timeout during deactivation, making the shutdown process faster and more reliable. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029675410",
    "pr_number": 2423,
    "pr_file": "src/services/browser/BrowserSession.ts",
    "created_at": "2025-04-05T03:23:48+00:00",
    "commented_code": "}\n \n \tasync scrollUp(): Promise<BrowserActionResult> {\n+\t\t// Track this action for telemetry",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2029675410",
        "repo_full_name": "cline/cline",
        "pr_number": 2423,
        "pr_file": "src/services/browser/BrowserSession.ts",
        "discussion_id": "2029675410",
        "commented_code": "@@ -351,6 +607,9 @@ export class BrowserSession {\n \t}\n \n \tasync scrollUp(): Promise<BrowserActionResult> {\n+\t\t// Track this action for telemetry",
        "comment_created_at": "2025-04-05T03:23:48+00:00",
        "comment_author": "saoudrizwan",
        "comment_body": "1. can we pls not add unnecessary comments? \r\n2. is it necessary tracking all the various browser events? can we pls be more intentional with what we track, i.e. if the browser is used, how often it fails (to give us a baseline for improving prompts around it and reduce failure rate), etc. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2029685198",
        "repo_full_name": "cline/cline",
        "pr_number": 2423,
        "pr_file": "src/services/browser/BrowserSession.ts",
        "discussion_id": "2029675410",
        "commented_code": "@@ -351,6 +607,9 @@ export class BrowserSession {\n \t}\n \n \tasync scrollUp(): Promise<BrowserActionResult> {\n+\t\t// Track this action for telemetry",
        "comment_created_at": "2025-04-05T04:03:22+00:00",
        "comment_author": "Garoth",
        "comment_body": "1. Removed unneeded comments\r\n2. Added error telemetry: https://github.com/cline/cline/pull/2423/commits/94fb5b068e39723e6f3ee5489d1f81a42d9d90e0\r\n3. I think the list of browser actions is valuable info. We can know how many steps the average browser action took, which kinds of actions are most common. It's also helpful for knowing which step an error occurred with, such as the new telemetry above where we use it to look up where a screenshot failed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2028056140",
    "pr_number": 2661,
    "pr_file": "src/core/task/index.ts",
    "created_at": "2025-04-04T04:10:46+00:00",
    "commented_code": "})\n \t\t\t\t\t\t\t\t}\n \n+\t\t\t\t\t\t\t\t// Store the number of options for telemetry\n+\t\t\t\t\t\t\t\tconst options = parsePartialArrayString(optionsRaw || \"[]\")\n+\t\t\t\t\t\t\t\tthis.lastOptionsCount = options.length\n+\n \t\t\t\t\t\t\t\tconst { text, images } = await this.ask(\"followup\", JSON.stringify(sharedMessage), false)\n \n \t\t\t\t\t\t\t\t// Check if options contains the text response",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2028056140",
        "repo_full_name": "cline/cline",
        "pr_number": 2661,
        "pr_file": "src/core/task/index.ts",
        "discussion_id": "2028056140",
        "commented_code": "@@ -2649,6 +2675,10 @@ export class Task {\n \t\t\t\t\t\t\t\t\t})\n \t\t\t\t\t\t\t\t}\n \n+\t\t\t\t\t\t\t\t// Store the number of options for telemetry\n+\t\t\t\t\t\t\t\tconst options = parsePartialArrayString(optionsRaw || \"[]\")\n+\t\t\t\t\t\t\t\tthis.lastOptionsCount = options.length\n+\n \t\t\t\t\t\t\t\tconst { text, images } = await this.ask(\"followup\", JSON.stringify(sharedMessage), false)\n \n \t\t\t\t\t\t\t\t// Check if options contains the text response",
        "comment_created_at": "2025-04-04T04:10:46+00:00",
        "comment_author": "saoudrizwan",
        "comment_body": "we should add the capture only here, this is where we have access to the options and the user's response to it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2040434259",
    "pr_number": 2833,
    "pr_file": "src/core/task/index.ts",
    "created_at": "2025-04-11T23:50:24+00:00",
    "commented_code": "this.startTask(task, images)\n \t\t}\n \n+\t\t// Initialize telemetry\n+\t\tthis.initializeTelemetry(historyItem)\n+\t}\n+\n+\t// Get the current provider from global state to ensure we're using the latest provider\n+\tprivate async getCurrentProviderId(): Promise<string> {\n+\t\treturn (await getGlobalState(this.getContext(), \"apiProvider\")) as string\n+\t}\n+\n+\tprivate async initializeTelemetry(historyItem?: HistoryItem) {\n+\t\tconst currentProviderId = await this.getCurrentProviderId()",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2040434259",
        "repo_full_name": "cline/cline",
        "pr_number": 2833,
        "pr_file": "src/core/task/index.ts",
        "discussion_id": "2040434259",
        "commented_code": "@@ -222,12 +221,23 @@ export class Task {\n \t\t\tthis.startTask(task, images)\n \t\t}\n \n+\t\t// Initialize telemetry\n+\t\tthis.initializeTelemetry(historyItem)\n+\t}\n+\n+\t// Get the current provider from global state to ensure we're using the latest provider\n+\tprivate async getCurrentProviderId(): Promise<string> {\n+\t\treturn (await getGlobalState(this.getContext(), \"apiProvider\")) as string\n+\t}\n+\n+\tprivate async initializeTelemetry(historyItem?: HistoryItem) {\n+\t\tconst currentProviderId = await this.getCurrentProviderId()",
        "comment_created_at": "2025-04-11T23:50:24+00:00",
        "comment_author": "saoudrizwan",
        "comment_body": "since we're only ever calling this once, we should prob leave this in the constructor and use the `apiConfiguration` object being passed in so e.g. `telemetryService.captureTaskRestarted(this.taskId, apiConfiguration.apiProvider)`",
        "pr_file_module": null
      },
      {
        "comment_id": "2040438287",
        "repo_full_name": "cline/cline",
        "pr_number": 2833,
        "pr_file": "src/core/task/index.ts",
        "discussion_id": "2040434259",
        "commented_code": "@@ -222,12 +221,23 @@ export class Task {\n \t\t\tthis.startTask(task, images)\n \t\t}\n \n+\t\t// Initialize telemetry\n+\t\tthis.initializeTelemetry(historyItem)\n+\t}\n+\n+\t// Get the current provider from global state to ensure we're using the latest provider\n+\tprivate async getCurrentProviderId(): Promise<string> {\n+\t\treturn (await getGlobalState(this.getContext(), \"apiProvider\")) as string\n+\t}\n+\n+\tprivate async initializeTelemetry(historyItem?: HistoryItem) {\n+\t\tconst currentProviderId = await this.getCurrentProviderId()",
        "comment_created_at": "2025-04-12T00:01:34+00:00",
        "comment_author": "arafatkatze",
        "comment_body": "Fair Point I made those changes",
        "pr_file_module": null
      }
    ]
  }
]