[
  {
    "discussion_id": "2212203087",
    "pr_number": 4978,
    "pr_file": "src/config.ts",
    "created_at": "2025-07-17T04:04:32+00:00",
    "commented_code": "+export type Environment = \"production\" | \"staging\" | \"preview\"\n+\n+const CURRENT_ENVIRONMENT: Environment = \"production\"\n+\n+interface EnvironmentConfig {\n+\tappBaseUrl: string\n+\tapiBaseUrl: string\n+\tmcpBaseUrl: string\n+\tfirebase: {\n+\t\tapiKey: string\n+\t\tauthDomain: string\n+\t\tprojectId: string\n+\t\tstorageBucket?: string\n+\t\tmessagingSenderId?: string\n+\t\tappId?: string\n+\t}\n+}\n+\n+const configs: Record<Environment, EnvironmentConfig> = {\n+\tproduction: {\n+\t\tappBaseUrl: \"https://app.cline.bot\",\n+\t\tapiBaseUrl: \"https://api.cline.bot\",\n+\t\tmcpBaseUrl: \"https://api.cline.bot/v1/mcp\",\n+\t\tfirebase: {\n+\t\t\tapiKey: \"AIzaSyC5rx59Xt8UgwdU3PCfzUF7vCwmp9-K2vk\",\n+\t\t\tauthDomain: \"cline-prod.firebaseapp.com\",\n+\t\t\tprojectId: \"cline-prod\",\n+\t\t\tstorageBucket: \"cline-prod.firebasestorage.app\",\n+\t\t\tmessagingSenderId: \"941048379330\",\n+\t\t\tappId: \"1:941048379330:web:45058eedeefc5cdfcc485b\",\n+\t\t},\n+\t},\n+\tstaging: {\n+\t\tappBaseUrl: \"https://staging-app.cline.bot\",\n+\t\tapiBaseUrl: \"https://core-api.staging.int.cline.bot\",\n+\t\tmcpBaseUrl: \"https://api.cline.bot/v1/mcp\",\n+\t\tfirebase: {\n+\t\t\tapiKey: \"AIzaSyASSwkwX1kSO8vddjZkE5N19QU9cVQ0CIk\",\n+\t\t\tauthDomain: \"cline-staging.firebaseapp.com\",\n+\t\t\tprojectId: \"cline-staging\",\n+\t\t\tstorageBucket: \"cline-staging.firebasestorage.app\",\n+\t\t\tmessagingSenderId: \"853479478430\",\n+\t\t\tappId: \"1:853479478430:web:2de0dba1c63c3262d4578f\",\n+\t\t},\n+\t},\n+\tpreview: {",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2212203087",
        "repo_full_name": "cline/cline",
        "pr_number": 4978,
        "pr_file": "src/config.ts",
        "discussion_id": "2212203087",
        "commented_code": "@@ -0,0 +1,58 @@\n+export type Environment = \"production\" | \"staging\" | \"preview\"\n+\n+const CURRENT_ENVIRONMENT: Environment = \"production\"\n+\n+interface EnvironmentConfig {\n+\tappBaseUrl: string\n+\tapiBaseUrl: string\n+\tmcpBaseUrl: string\n+\tfirebase: {\n+\t\tapiKey: string\n+\t\tauthDomain: string\n+\t\tprojectId: string\n+\t\tstorageBucket?: string\n+\t\tmessagingSenderId?: string\n+\t\tappId?: string\n+\t}\n+}\n+\n+const configs: Record<Environment, EnvironmentConfig> = {\n+\tproduction: {\n+\t\tappBaseUrl: \"https://app.cline.bot\",\n+\t\tapiBaseUrl: \"https://api.cline.bot\",\n+\t\tmcpBaseUrl: \"https://api.cline.bot/v1/mcp\",\n+\t\tfirebase: {\n+\t\t\tapiKey: \"AIzaSyC5rx59Xt8UgwdU3PCfzUF7vCwmp9-K2vk\",\n+\t\t\tauthDomain: \"cline-prod.firebaseapp.com\",\n+\t\t\tprojectId: \"cline-prod\",\n+\t\t\tstorageBucket: \"cline-prod.firebasestorage.app\",\n+\t\t\tmessagingSenderId: \"941048379330\",\n+\t\t\tappId: \"1:941048379330:web:45058eedeefc5cdfcc485b\",\n+\t\t},\n+\t},\n+\tstaging: {\n+\t\tappBaseUrl: \"https://staging-app.cline.bot\",\n+\t\tapiBaseUrl: \"https://core-api.staging.int.cline.bot\",\n+\t\tmcpBaseUrl: \"https://api.cline.bot/v1/mcp\",\n+\t\tfirebase: {\n+\t\t\tapiKey: \"AIzaSyASSwkwX1kSO8vddjZkE5N19QU9cVQ0CIk\",\n+\t\t\tauthDomain: \"cline-staging.firebaseapp.com\",\n+\t\t\tprojectId: \"cline-staging\",\n+\t\t\tstorageBucket: \"cline-staging.firebasestorage.app\",\n+\t\t\tmessagingSenderId: \"853479478430\",\n+\t\t\tappId: \"1:853479478430:web:2de0dba1c63c3262d4578f\",\n+\t\t},\n+\t},\n+\tpreview: {",
        "comment_created_at": "2025-07-17T04:04:32+00:00",
        "comment_author": "frostbournesb",
        "comment_body": "Preview is technically its own thing, we should call this \"local\", same in the webview config",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2129895620",
    "pr_number": 3528,
    "pr_file": "src/shared/ExtensionMessage.ts",
    "created_at": "2025-06-05T19:04:24+00:00",
    "commented_code": "globalWorkflowToggles: ClineRulesToggles\n \tlocalCursorRulesToggles: ClineRulesToggles\n \tlocalWindsurfRulesToggles: ClineRulesToggles\n+\tmcpDefaultPanelState: \"collapsed\" | \"expanded\"",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2129895620",
        "repo_full_name": "cline/cline",
        "pr_number": 3528,
        "pr_file": "src/shared/ExtensionMessage.ts",
        "discussion_id": "2129895620",
        "commented_code": "@@ -126,6 +126,7 @@ export interface ExtensionState {\n \tglobalWorkflowToggles: ClineRulesToggles\n \tlocalCursorRulesToggles: ClineRulesToggles\n \tlocalWindsurfRulesToggles: ClineRulesToggles\n+\tmcpDefaultPanelState: \"collapsed\" | \"expanded\"",
        "comment_created_at": "2025-06-05T19:04:24+00:00",
        "comment_author": "pashpashpash",
        "comment_body": "This should just be a boolean. And var name should be called enableExpandedMcpPanelState or something. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2096684950",
    "pr_number": 3640,
    "pr_file": "src/extension.ts",
    "created_at": "2025-05-20T01:23:15+00:00",
    "commented_code": "vscode.languages.registerCodeActionsProvider(\n \t\t\t\"*\",\n \t\t\tnew (class implements vscode.CodeActionProvider {\n-\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix]\n+\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix, vscode.CodeActionKind.Refactor]\n \n \t\t\t\tprovideCodeActions(\n \t\t\t\t\tdocument: vscode.TextDocument,\n \t\t\t\t\trange: vscode.Range,\n \t\t\t\t\tcontext: vscode.CodeActionContext,\n \t\t\t\t): vscode.CodeAction[] {\n-\t\t\t\t\t// Expand range to include surrounding 3 lines\n-\t\t\t\t\tconst expandedRange = new vscode.Range(\n-\t\t\t\t\t\tMath.max(0, range.start.line - 3),\n-\t\t\t\t\t\t0,\n-\t\t\t\t\t\tMath.min(document.lineCount - 1, range.end.line + 3),\n-\t\t\t\t\t\tdocument.lineAt(Math.min(document.lineCount - 1, range.end.line + 3)).text.length,\n-\t\t\t\t\t)\n+\t\t\t\t\tconst actions: vscode.CodeAction[] = []\n+\t\t\t\t\tconst editor = vscode.window.activeTextEditor // Get active editor for selection check\n+\n+\t\t\t\t\t// Expand range to include surrounding 3 lines or use selection if broader\n+\t\t\t\t\tconst selection = editor?.selection\n+\t\t\t\t\tlet expandedRange = range\n+\t\t\t\t\tif (\n+\t\t\t\t\t\teditor &&\n+\t\t\t\t\t\tselection &&\n+\t\t\t\t\t\t!selection.isEmpty &&\n+\t\t\t\t\t\tselection.contains(range.start) &&\n+\t\t\t\t\t\tselection.contains(range.end)\n+\t\t\t\t\t) {\n+\t\t\t\t\t\texpandedRange = selection\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texpandedRange = new vscode.Range(\n+\t\t\t\t\t\t\tMath.max(0, range.start.line - 3),",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2096684950",
        "repo_full_name": "cline/cline",
        "pr_number": 3640,
        "pr_file": "src/extension.ts",
        "discussion_id": "2096684950",
        "commented_code": "@@ -341,45 +364,83 @@ export function activate(context: vscode.ExtensionContext) {\n \t\tvscode.languages.registerCodeActionsProvider(\n \t\t\t\"*\",\n \t\t\tnew (class implements vscode.CodeActionProvider {\n-\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix]\n+\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix, vscode.CodeActionKind.Refactor]\n \n \t\t\t\tprovideCodeActions(\n \t\t\t\t\tdocument: vscode.TextDocument,\n \t\t\t\t\trange: vscode.Range,\n \t\t\t\t\tcontext: vscode.CodeActionContext,\n \t\t\t\t): vscode.CodeAction[] {\n-\t\t\t\t\t// Expand range to include surrounding 3 lines\n-\t\t\t\t\tconst expandedRange = new vscode.Range(\n-\t\t\t\t\t\tMath.max(0, range.start.line - 3),\n-\t\t\t\t\t\t0,\n-\t\t\t\t\t\tMath.min(document.lineCount - 1, range.end.line + 3),\n-\t\t\t\t\t\tdocument.lineAt(Math.min(document.lineCount - 1, range.end.line + 3)).text.length,\n-\t\t\t\t\t)\n+\t\t\t\t\tconst actions: vscode.CodeAction[] = []\n+\t\t\t\t\tconst editor = vscode.window.activeTextEditor // Get active editor for selection check\n+\n+\t\t\t\t\t// Expand range to include surrounding 3 lines or use selection if broader\n+\t\t\t\t\tconst selection = editor?.selection\n+\t\t\t\t\tlet expandedRange = range\n+\t\t\t\t\tif (\n+\t\t\t\t\t\teditor &&\n+\t\t\t\t\t\tselection &&\n+\t\t\t\t\t\t!selection.isEmpty &&\n+\t\t\t\t\t\tselection.contains(range.start) &&\n+\t\t\t\t\t\tselection.contains(range.end)\n+\t\t\t\t\t) {\n+\t\t\t\t\t\texpandedRange = selection\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texpandedRange = new vscode.Range(\n+\t\t\t\t\t\t\tMath.max(0, range.start.line - 3),",
        "comment_created_at": "2025-05-20T01:23:15+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "Can we make this a constant so it's clear to later devs why we have random numbers here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2096736134",
        "repo_full_name": "cline/cline",
        "pr_number": 3640,
        "pr_file": "src/extension.ts",
        "discussion_id": "2096684950",
        "commented_code": "@@ -341,45 +364,83 @@ export function activate(context: vscode.ExtensionContext) {\n \t\tvscode.languages.registerCodeActionsProvider(\n \t\t\t\"*\",\n \t\t\tnew (class implements vscode.CodeActionProvider {\n-\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix]\n+\t\t\t\tpublic static readonly providedCodeActionKinds = [vscode.CodeActionKind.QuickFix, vscode.CodeActionKind.Refactor]\n \n \t\t\t\tprovideCodeActions(\n \t\t\t\t\tdocument: vscode.TextDocument,\n \t\t\t\t\trange: vscode.Range,\n \t\t\t\t\tcontext: vscode.CodeActionContext,\n \t\t\t\t): vscode.CodeAction[] {\n-\t\t\t\t\t// Expand range to include surrounding 3 lines\n-\t\t\t\t\tconst expandedRange = new vscode.Range(\n-\t\t\t\t\t\tMath.max(0, range.start.line - 3),\n-\t\t\t\t\t\t0,\n-\t\t\t\t\t\tMath.min(document.lineCount - 1, range.end.line + 3),\n-\t\t\t\t\t\tdocument.lineAt(Math.min(document.lineCount - 1, range.end.line + 3)).text.length,\n-\t\t\t\t\t)\n+\t\t\t\t\tconst actions: vscode.CodeAction[] = []\n+\t\t\t\t\tconst editor = vscode.window.activeTextEditor // Get active editor for selection check\n+\n+\t\t\t\t\t// Expand range to include surrounding 3 lines or use selection if broader\n+\t\t\t\t\tconst selection = editor?.selection\n+\t\t\t\t\tlet expandedRange = range\n+\t\t\t\t\tif (\n+\t\t\t\t\t\teditor &&\n+\t\t\t\t\t\tselection &&\n+\t\t\t\t\t\t!selection.isEmpty &&\n+\t\t\t\t\t\tselection.contains(range.start) &&\n+\t\t\t\t\t\tselection.contains(range.end)\n+\t\t\t\t\t) {\n+\t\t\t\t\t\texpandedRange = selection\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\texpandedRange = new vscode.Range(\n+\t\t\t\t\t\t\tMath.max(0, range.start.line - 3),",
        "comment_created_at": "2025-05-20T02:19:38+00:00",
        "comment_author": "arafatkatze",
        "comment_body": "Good pointer, I didn't originally write this code as its just an indent shift but I will add constants here for cleanliness. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031936057",
    "pr_number": 2697,
    "pr_file": "src/core/context-management/ContextManager.ts",
    "created_at": "2025-04-07T20:07:20+00:00",
    "commented_code": "import fs from \"fs/promises\"\n import cloneDeep from \"clone-deep\"\n \n-// array of string values allows us to cover all changes currently\n-export type MessageContent = string[]\n+enum EditType {\n+\tUNDEFINED = 0,\n+\tNO_FILE_READ = 1,\n+\tREAD_FILE_TOOL = 2,\n+\tALTER_FILE_TOOL = 3,\n+\tFILE_MENTION = 4,\n+}\n+\n+// array of string values allows us to cover all changes for message types currently supported\n+type MessageContent = string[]\n+type MessageMetadata = string[][]\n \n // Type for a single context update\n-type ContextUpdate = [number, string, MessageContent] // [timestamp, updateType, update]\n+type ContextUpdate = [number, string, MessageContent, MessageMetadata] // [timestamp, updateType, update, metadata]\n \n // Type for the serialized format of our nested maps\n type SerializedContextHistory = Array<\n \t[\n \t\tnumber, // messageIndex\n-\t\tArray<\n-\t\t\t[\n-\t\t\t\tnumber, // blockIndex\n-\t\t\t\tContextUpdate[], // updates array\n-\t\t\t]\n-\t\t>,\n+\t\t[\n+\t\t\tnumber, // EditType (message type)\n+\t\t\tArray<\n+\t\t\t\t[\n+\t\t\t\t\tnumber, // blockIndex\n+\t\t\t\t\tContextUpdate[], // updates array (now with 4 elements including metadata)\n+\t\t\t\t]\n+\t\t\t>,\n+\t\t],\n \t]\n >\n \n export class ContextManager {\n \t// mapping from the apiMessages outer index to the inner message index to a list of actual changes, ordered by timestamp\n \t// timestamp is required in order to support full checkpointing, where the changes we apply need to be able to be undone when\n \t// moving to an earlier conversation history checkpoint - this ordering intuitively allows for binary search on truncation\n+\t// there is also a number stored for each (EditType) which defines which message type it is, for custom handling\n \n-\t// format:  {outerIndex => {innerIndex => [[timestamp, updateType, update], ...]}}\n-\t// example: { 1 => { 0 => [[<timestamp>, \"text\", \"[NOTE] Some previous conversation history with the user has been removed ...\"], ...] } }\n+\t// format:  { outerIndex => [EditType, { innerIndex => [[timestamp, updateType, update], ...] }] }\n+\t// example: { 1 => { [0, 0 => [[<timestamp>, \"text\", \"[NOTE] Some previous conversation history with the user has been removed ...\"], ...] }] }\n \t// the above example would be how we update the first assistant message to indicate we truncated text\n-\tprivate contextHistoryUpdates: Map<number, Map<number, ContextUpdate[]>>\n+\tprivate contextHistoryUpdates: Map<number, [number, Map<number, ContextUpdate[]>]>",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2031936057",
        "repo_full_name": "cline/cline",
        "pr_number": 2697,
        "pr_file": "src/core/context-management/ContextManager.ts",
        "discussion_id": "2031936057",
        "commented_code": "@@ -9,57 +9,76 @@ import * as path from \"path\"\n import fs from \"fs/promises\"\n import cloneDeep from \"clone-deep\"\n \n-// array of string values allows us to cover all changes currently\n-export type MessageContent = string[]\n+enum EditType {\n+\tUNDEFINED = 0,\n+\tNO_FILE_READ = 1,\n+\tREAD_FILE_TOOL = 2,\n+\tALTER_FILE_TOOL = 3,\n+\tFILE_MENTION = 4,\n+}\n+\n+// array of string values allows us to cover all changes for message types currently supported\n+type MessageContent = string[]\n+type MessageMetadata = string[][]\n \n // Type for a single context update\n-type ContextUpdate = [number, string, MessageContent] // [timestamp, updateType, update]\n+type ContextUpdate = [number, string, MessageContent, MessageMetadata] // [timestamp, updateType, update, metadata]\n \n // Type for the serialized format of our nested maps\n type SerializedContextHistory = Array<\n \t[\n \t\tnumber, // messageIndex\n-\t\tArray<\n-\t\t\t[\n-\t\t\t\tnumber, // blockIndex\n-\t\t\t\tContextUpdate[], // updates array\n-\t\t\t]\n-\t\t>,\n+\t\t[\n+\t\t\tnumber, // EditType (message type)\n+\t\t\tArray<\n+\t\t\t\t[\n+\t\t\t\t\tnumber, // blockIndex\n+\t\t\t\t\tContextUpdate[], // updates array (now with 4 elements including metadata)\n+\t\t\t\t]\n+\t\t\t>,\n+\t\t],\n \t]\n >\n \n export class ContextManager {\n \t// mapping from the apiMessages outer index to the inner message index to a list of actual changes, ordered by timestamp\n \t// timestamp is required in order to support full checkpointing, where the changes we apply need to be able to be undone when\n \t// moving to an earlier conversation history checkpoint - this ordering intuitively allows for binary search on truncation\n+\t// there is also a number stored for each (EditType) which defines which message type it is, for custom handling\n \n-\t// format:  {outerIndex => {innerIndex => [[timestamp, updateType, update], ...]}}\n-\t// example: { 1 => { 0 => [[<timestamp>, \"text\", \"[NOTE] Some previous conversation history with the user has been removed ...\"], ...] } }\n+\t// format:  { outerIndex => [EditType, { innerIndex => [[timestamp, updateType, update], ...] }] }\n+\t// example: { 1 => { [0, 0 => [[<timestamp>, \"text\", \"[NOTE] Some previous conversation history with the user has been removed ...\"], ...] }] }\n \t// the above example would be how we update the first assistant message to indicate we truncated text\n-\tprivate contextHistoryUpdates: Map<number, Map<number, ContextUpdate[]>>\n+\tprivate contextHistoryUpdates: Map<number, [number, Map<number, ContextUpdate[]>]>",
        "comment_created_at": "2025-04-07T20:07:20+00:00",
        "comment_author": "dcbartlett",
        "comment_body": "This should be typed to the ENUM or a similar struct that allows this to be understood from the code alone.  I do not now what \"number\" represents here from the typing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2006549458",
    "pr_number": 2356,
    "pr_file": "src/core/Cline.ts",
    "created_at": "2025-03-20T22:29:55+00:00",
    "commented_code": "}\n \n \tprivate async getSavedClineMessages(): Promise<ClineMessage[]> {\n-\t\tconst filePath = path.join(await this.ensureTaskDirectoryExists(), GlobalFileNames.uiMessages)\n+\t\tconst globalStoragePath = this.providerRef.deref()?.context.globalStorageUri.fsPath\n+\t\tconst taskId = this.taskId\n+\t\tconst filePath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), GlobalFileNames.uiMessages)\n \t\tif (await fileExistsAtPath(filePath)) {\n \t\t\treturn JSON.parse(await fs.readFile(filePath, \"utf8\"))\n \t\t} else {\n \t\t\t// check old location\n-\t\t\tconst oldPath = path.join(await this.ensureTaskDirectoryExists(), \"claude_messages.json\")\n+\t\t\tconst oldPath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), \"claude_messages.json\")",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2006549458",
        "repo_full_name": "cline/cline",
        "pr_number": 2356,
        "pr_file": "src/core/Cline.ts",
        "discussion_id": "2006549458",
        "commented_code": "@@ -218,12 +219,14 @@ export class Cline {\n \t}\n \n \tprivate async getSavedClineMessages(): Promise<ClineMessage[]> {\n-\t\tconst filePath = path.join(await this.ensureTaskDirectoryExists(), GlobalFileNames.uiMessages)\n+\t\tconst globalStoragePath = this.providerRef.deref()?.context.globalStorageUri.fsPath\n+\t\tconst taskId = this.taskId\n+\t\tconst filePath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), GlobalFileNames.uiMessages)\n \t\tif (await fileExistsAtPath(filePath)) {\n \t\t\treturn JSON.parse(await fs.readFile(filePath, \"utf8\"))\n \t\t} else {\n \t\t\t// check old location\n-\t\t\tconst oldPath = path.join(await this.ensureTaskDirectoryExists(), \"claude_messages.json\")\n+\t\t\tconst oldPath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), \"claude_messages.json\")",
        "comment_created_at": "2025-03-20T22:29:55+00:00",
        "comment_author": "saito-sv",
        "comment_body": "Curious as to why we are hardcoding \"claude_message.json\" here",
        "pr_file_module": null
      },
      {
        "comment_id": "2006550175",
        "repo_full_name": "cline/cline",
        "pr_number": 2356,
        "pr_file": "src/core/Cline.ts",
        "discussion_id": "2006549458",
        "commented_code": "@@ -218,12 +219,14 @@ export class Cline {\n \t}\n \n \tprivate async getSavedClineMessages(): Promise<ClineMessage[]> {\n-\t\tconst filePath = path.join(await this.ensureTaskDirectoryExists(), GlobalFileNames.uiMessages)\n+\t\tconst globalStoragePath = this.providerRef.deref()?.context.globalStorageUri.fsPath\n+\t\tconst taskId = this.taskId\n+\t\tconst filePath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), GlobalFileNames.uiMessages)\n \t\tif (await fileExistsAtPath(filePath)) {\n \t\t\treturn JSON.parse(await fs.readFile(filePath, \"utf8\"))\n \t\t} else {\n \t\t\t// check old location\n-\t\t\tconst oldPath = path.join(await this.ensureTaskDirectoryExists(), \"claude_messages.json\")\n+\t\t\tconst oldPath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), \"claude_messages.json\")",
        "comment_created_at": "2025-03-20T22:31:04+00:00",
        "comment_author": "saito-sv",
        "comment_body": "if we already know is going to be `lobalFileNames.uiMessages` lets use it inside the function for now and remove the unnecessary param. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2006653383",
        "repo_full_name": "cline/cline",
        "pr_number": 2356,
        "pr_file": "src/core/Cline.ts",
        "discussion_id": "2006549458",
        "commented_code": "@@ -218,12 +219,14 @@ export class Cline {\n \t}\n \n \tprivate async getSavedClineMessages(): Promise<ClineMessage[]> {\n-\t\tconst filePath = path.join(await this.ensureTaskDirectoryExists(), GlobalFileNames.uiMessages)\n+\t\tconst globalStoragePath = this.providerRef.deref()?.context.globalStorageUri.fsPath\n+\t\tconst taskId = this.taskId\n+\t\tconst filePath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), GlobalFileNames.uiMessages)\n \t\tif (await fileExistsAtPath(filePath)) {\n \t\t\treturn JSON.parse(await fs.readFile(filePath, \"utf8\"))\n \t\t} else {\n \t\t\t// check old location\n-\t\t\tconst oldPath = path.join(await this.ensureTaskDirectoryExists(), \"claude_messages.json\")\n+\t\t\tconst oldPath = path.join(await ensureTaskDirectoryExists(globalStoragePath, taskId), \"claude_messages.json\")",
        "comment_created_at": "2025-03-21T00:25:32+00:00",
        "comment_author": "celestial-vault",
        "comment_body": "@saito-sv @saoudrizwan This is not one of the GlobalFileNames constants. This is apparently the old directory name that we're checking for backwards compatibility.",
        "pr_file_module": null
      }
    ]
  }
]