[
  {
    "discussion_id": "2048679603",
    "pr_number": 2836,
    "pr_file": "src/utils/path.ts",
    "created_at": "2025-04-17T10:30:54+00:00",
    "commented_code": "}\n \treturn cwdPath\n }\n+\n+export const isLocatedInWorkspace = (pathToCheck: string = \"\"): boolean => {\n+\tconst workspacePath = getWorkspacePath()\n+\n+\t// Handle long paths in Windows\n+\tif (pathToCheck.startsWith(\"\\\\\\\\?\\\\\") || workspacePath.startsWith(\"\\\\\\\\?\\\\\")) {\n+\t\treturn pathToCheck.startsWith(workspacePath)\n+\t}\n+\n+\tconst resolvedPath = path.resolve(workspacePath, pathToCheck)\n+\n+\t// Using realpathSync to resolve any symbolic links",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "2048679603",
        "repo_full_name": "cline/cline",
        "pr_number": 2836,
        "pr_file": "src/utils/path.ts",
        "discussion_id": "2048679603",
        "commented_code": "@@ -110,3 +111,24 @@ export const getWorkspacePath = (defaultCwdPath = \"\") => {\n \t}\n \treturn cwdPath\n }\n+\n+export const isLocatedInWorkspace = (pathToCheck: string = \"\"): boolean => {\n+\tconst workspacePath = getWorkspacePath()\n+\n+\t// Handle long paths in Windows\n+\tif (pathToCheck.startsWith(\"\\\\\\\\?\\\\\") || workspacePath.startsWith(\"\\\\\\\\?\\\\\")) {\n+\t\treturn pathToCheck.startsWith(workspacePath)\n+\t}\n+\n+\tconst resolvedPath = path.resolve(workspacePath, pathToCheck)\n+\n+\t// Using realpathSync to resolve any symbolic links",
        "comment_created_at": "2025-04-17T10:30:54+00:00",
        "comment_author": "sambacha",
        "comment_body": "You shouldn't resolve symbolic links like this can lead to a directory traversal attack",
        "pr_file_module": null
      },
      {
        "comment_id": "2051169282",
        "repo_full_name": "cline/cline",
        "pr_number": 2836,
        "pr_file": "src/utils/path.ts",
        "discussion_id": "2048679603",
        "commented_code": "@@ -110,3 +111,24 @@ export const getWorkspacePath = (defaultCwdPath = \"\") => {\n \t}\n \treturn cwdPath\n }\n+\n+export const isLocatedInWorkspace = (pathToCheck: string = \"\"): boolean => {\n+\tconst workspacePath = getWorkspacePath()\n+\n+\t// Handle long paths in Windows\n+\tif (pathToCheck.startsWith(\"\\\\\\\\?\\\\\") || workspacePath.startsWith(\"\\\\\\\\?\\\\\")) {\n+\t\treturn pathToCheck.startsWith(workspacePath)\n+\t}\n+\n+\tconst resolvedPath = path.resolve(workspacePath, pathToCheck)\n+\n+\t// Using realpathSync to resolve any symbolic links",
        "comment_created_at": "2025-04-18T21:59:40+00:00",
        "comment_author": "canvrno",
        "comment_body": "Thank you for pointing this out! I've submitted PR #2974 to address this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1885693954",
    "pr_number": 652,
    "pr_file": "src/core/Cline.ts",
    "created_at": "2024-12-15T12:49:38+00:00",
    "commented_code": "if (\n \t\t\t\t\t\t\t\tnewContent.includes(\"&gt;\") ||\n \t\t\t\t\t\t\t\tnewContent.includes(\"&lt;\") ||\n-\t\t\t\t\t\t\t\tnewContent.includes(\"&quot;\")\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&quot;\") ||\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&amp;\") ||\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&apos;\")",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "1885693954",
        "repo_full_name": "cline/cline",
        "pr_number": 652,
        "pr_file": "src/core/Cline.ts",
        "discussion_id": "1885693954",
        "commented_code": "@@ -1037,12 +1037,16 @@ export class Cline {\n \t\t\t\t\t\t\tif (\n \t\t\t\t\t\t\t\tnewContent.includes(\"&gt;\") ||\n \t\t\t\t\t\t\t\tnewContent.includes(\"&lt;\") ||\n-\t\t\t\t\t\t\t\tnewContent.includes(\"&quot;\")\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&quot;\") ||\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&amp;\") ||\n+\t\t\t\t\t\t\t\tnewContent.includes(\"&apos;\")",
        "comment_created_at": "2024-12-15T12:49:38+00:00",
        "comment_author": "sohaieb",
        "comment_body": "can be simplified to \r\n`newContent.match(/&\\w+;/g)` \r\nor if you want to be specific \r\n```js\r\nfunction areUnallowedHtmlEntities(content) {\r\n   const entityNamesToBeBypassed = ['gt','lt','quot','amp','apos'] // can be extended later\r\n   const unallowedEntityNamesRegExp = entityNamesToBeBypassed.map(entityName => `(${entityName})`).join('|')\r\n   const reg = new RegExp(`&${unallowedEntityNamesRegExp};`,'g')\r\n   return content.match(reg)?.length > 0\r\n}\r\n\r\n// Usage\r\nif(areUnallowedHtmlEntities(content) {\r\n...\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1885694193",
    "pr_number": 652,
    "pr_file": "src/core/Cline.ts",
    "created_at": "2024-12-15T12:50:24+00:00",
    "commented_code": "if (!didApprove) {\n \t\t\t\t\t\t\t\t\tbreak\n \t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&gt;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&lt;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&quot;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&amp;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&apos;\")",
    "repo_full_name": "cline/cline",
    "discussion_comments": [
      {
        "comment_id": "1885694193",
        "repo_full_name": "cline/cline",
        "pr_number": 652,
        "pr_file": "src/core/Cline.ts",
        "discussion_id": "1885694193",
        "commented_code": "@@ -1511,6 +1518,20 @@ export class Cline {\n \t\t\t\t\t\t\t\tif (!didApprove) {\n \t\t\t\t\t\t\t\t\tbreak\n \t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tif (\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&gt;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&lt;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&quot;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&amp;\") ||\n+\t\t\t\t\t\t\t\t\tcommand.includes(\"&apos;\")",
        "comment_created_at": "2024-12-15T12:50:24+00:00",
        "comment_author": "sohaieb",
        "comment_body": "same here, can re-use the previously suggested `areUnallowedHtmlEntities(..)` function",
        "pr_file_module": null
      }
    ]
  }
]