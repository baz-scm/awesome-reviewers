[
  {
    "discussion_id": "2222926115",
    "pr_number": 1598,
    "pr_file": "codex-rs/core/tests/cli_stream.rs",
    "created_at": "2025-07-22T15:24:13+00:00",
    "commented_code": "cmd2.env(\"CODEX_HOME\", home.path())\n         .env(\"OPENAI_API_KEY\", \"dummy\")\n         .env(\"CODEX_RS_SSE_FIXTURE\", &fixture)\n-        .env(\"OPENAI_BASE_URL\", \"http://unused.local\");\n+        .env(\"OPENAI_BASE_URL\", \"http://unused.local\")\n+        // Disable git info collection to avoid blocking message processing in tests\n+        .env(\"CODEX_DISABLE_GIT_INFO\", \"1\");",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2222926115",
        "repo_full_name": "openai/codex",
        "pr_number": 1598,
        "pr_file": "codex-rs/core/tests/cli_stream.rs",
        "discussion_id": "2222926115",
        "commented_code": "@@ -328,7 +330,9 @@ async fn integration_creates_and_checks_session_file() {\n     cmd2.env(\"CODEX_HOME\", home.path())\n         .env(\"OPENAI_API_KEY\", \"dummy\")\n         .env(\"CODEX_RS_SSE_FIXTURE\", &fixture)\n-        .env(\"OPENAI_BASE_URL\", \"http://unused.local\");\n+        .env(\"OPENAI_BASE_URL\", \"http://unused.local\")\n+        // Disable git info collection to avoid blocking message processing in tests\n+        .env(\"CODEX_DISABLE_GIT_INFO\", \"1\");",
        "comment_created_at": "2025-07-22T15:24:13+00:00",
        "comment_author": "bolinfest",
        "comment_body": "I have been trying to eliminate support for environment variables in favor of using configuration. Can we just added a config option (prefixed with \"experimental\" like `experimental_resume`) for this?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2223560664",
    "pr_number": 1653,
    "pr_file": "codex-rs/common/src/dotenv.rs",
    "created_at": "2025-07-22T18:57:57+00:00",
    "commented_code": "+/// Load env vars from ~/.codex/.env and `$(pwd)/.env`.\n+pub fn load_dotenv() {\n+    if let Ok(codex_home) = codex_core::config::find_codex_home() {\n+        dotenvy::from_path(codex_home.join(\".env\")).ok();\n+    }\n+    dotenvy::dotenv().ok();",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2223560664",
        "repo_full_name": "openai/codex",
        "pr_number": 1653,
        "pr_file": "codex-rs/common/src/dotenv.rs",
        "discussion_id": "2223560664",
        "commented_code": "@@ -0,0 +1,7 @@\n+/// Load env vars from ~/.codex/.env and `$(pwd)/.env`.\n+pub fn load_dotenv() {\n+    if let Ok(codex_home) = codex_core::config::find_codex_home() {\n+        dotenvy::from_path(codex_home.join(\".env\")).ok();\n+    }\n+    dotenvy::dotenv().ok();",
        "comment_created_at": "2025-07-22T18:57:57+00:00",
        "comment_author": "pakrym-oai",
        "comment_body": "Should this run based on config.cwd? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2223902461",
        "repo_full_name": "openai/codex",
        "pr_number": 1653,
        "pr_file": "codex-rs/common/src/dotenv.rs",
        "discussion_id": "2223560664",
        "commented_code": "@@ -0,0 +1,7 @@\n+/// Load env vars from ~/.codex/.env and `$(pwd)/.env`.\n+pub fn load_dotenv() {\n+    if let Ok(codex_home) = codex_core::config::find_codex_home() {\n+        dotenvy::from_path(codex_home.join(\".env\")).ok();\n+    }\n+    dotenvy::dotenv().ok();",
        "comment_created_at": "2025-07-22T21:54:08+00:00",
        "comment_author": "bolinfest",
        "comment_body": "I think this could be argued either way, but I think there is a technical reason to do this as early as possible (before we know what the `Config` even is), which is that setting environment variables for the current process is not thread-safe, so it should really be done before any threads have been created.\r\n\r\nI just reworked this so that `load_dotenv()` is now called before we set up the Tokio runtime.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214324589",
    "pr_number": 1601,
    "pr_file": "codex-rs/core/src/model_provider_info.rs",
    "created_at": "2025-07-17T21:13:28+00:00",
    "commented_code": ".into_iter()\n                         .collect(),\n                 ),\n+                // Use global defaults for retry/timeout unless overridden in config.toml.",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2214324589",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/src/model_provider_info.rs",
        "discussion_id": "2214324589",
        "commented_code": "@@ -205,6 +243,10 @@ pub fn built_in_model_providers() -> HashMap<String, ModelProviderInfo> {\n                         .into_iter()\n                         .collect(),\n                 ),\n+                // Use global defaults for retry/timeout unless overridden in config.toml.",
        "comment_created_at": "2025-07-17T21:13:28+00:00",
        "comment_author": "bolinfest",
        "comment_body": "I think we should only be looking at the `OPENAI_` environment variables for the built-in OpenAI provider, not all providers, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2214470195",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/src/model_provider_info.rs",
        "discussion_id": "2214324589",
        "commented_code": "@@ -205,6 +243,10 @@ pub fn built_in_model_providers() -> HashMap<String, ModelProviderInfo> {\n                         .into_iter()\n                         .collect(),\n                 ),\n+                // Use global defaults for retry/timeout unless overridden in config.toml.",
        "comment_created_at": "2025-07-17T23:11:17+00:00",
        "comment_author": "aibrahim-oai",
        "comment_body": "I think we can default to the openai values as long as they aren't overwritten.",
        "pr_file_module": null
      },
      {
        "comment_id": "2214478234",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/src/model_provider_info.rs",
        "discussion_id": "2214324589",
        "commented_code": "@@ -205,6 +243,10 @@ pub fn built_in_model_providers() -> HashMap<String, ModelProviderInfo> {\n                         .into_iter()\n                         .collect(),\n                 ),\n+                // Use global defaults for retry/timeout unless overridden in config.toml.",
        "comment_created_at": "2025-07-17T23:19:30+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Taking a step back, I'm not sure we should be honoring `OPENAI_STREAM_IDLE_TIMEOUT_MS`, `OPENAI_REQUEST_MAX_RETRIES`, or `OPENAI_STREAM_MAX_RETRIES` at all. As best I can tell, these are not \"standard\" OpenAI environment variables, but ones that we made up for Codex?\r\n\r\nI've been trying to maintain a consistency where the `Config` is the \"one true way\" to configure things, so supporting a small handful of environment variables confuses that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214332286",
    "pr_number": 1601,
    "pr_file": "codex-rs/core/tests/previous_response_id.rs",
    "created_at": "2025-07-17T21:18:12+00:00",
    "commented_code": ".mount(&server)\n         .await;\n \n-    // Environment\n-    // Update environment \u2013 `set_var` is `unsafe` starting with the 2024\n-    // edition so we group the calls into a single `unsafe { \u2026 }` block.\n-    unsafe {\n-        std::env::set_var(\"OPENAI_REQUEST_MAX_RETRIES\", \"0\");\n-        std::env::set_var(\"OPENAI_STREAM_MAX_RETRIES\", \"0\");\n-    }\n+    // Configure retry behaviour explicitly to avoid mutating process-wide",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2214332286",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/tests/previous_response_id.rs",
        "discussion_id": "2214332286",
        "commented_code": "@@ -88,13 +88,8 @@ async fn keeps_previous_response_id_between_tasks() {\n         .mount(&server)\n         .await;\n \n-    // Environment\n-    // Update environment \u2013 `set_var` is `unsafe` starting with the 2024\n-    // edition so we group the calls into a single `unsafe { \u2026 }` block.\n-    unsafe {\n-        std::env::set_var(\"OPENAI_REQUEST_MAX_RETRIES\", \"0\");\n-        std::env::set_var(\"OPENAI_STREAM_MAX_RETRIES\", \"0\");\n-    }\n+    // Configure retry behaviour explicitly to avoid mutating process-wide",
        "comment_created_at": "2025-07-17T21:18:12+00:00",
        "comment_author": "bolinfest",
        "comment_body": "```suggestion\r\n    // Configure retry behavior explicitly to avoid mutating process-wide\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214332747",
    "pr_number": 1601,
    "pr_file": "codex-rs/core/tests/stream_no_completed.rs",
    "created_at": "2025-07-17T21:18:24+00:00",
    "commented_code": ".mount(&server)\n         .await;\n \n-    // Environment\n-    //\n-    // As of Rust 2024 `std::env::set_var` has been made `unsafe` because\n-    // mutating the process environment is inherently racy when other threads\n-    // are running.  We therefore have to wrap every call in an explicit\n-    // `unsafe` block.  These are limited to the test-setup section so the\n-    // scope is very small and clearly delineated.\n-\n-    unsafe {\n-        std::env::set_var(\"OPENAI_REQUEST_MAX_RETRIES\", \"0\");\n-        std::env::set_var(\"OPENAI_STREAM_MAX_RETRIES\", \"1\");\n-        std::env::set_var(\"OPENAI_STREAM_IDLE_TIMEOUT_MS\", \"2000\");\n-    }\n+    // Configure retry behaviour explicitly to avoid mutating process-wide",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2214332747",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/tests/stream_no_completed.rs",
        "discussion_id": "2214332747",
        "commented_code": "@@ -72,19 +72,8 @@ async fn retries_on_early_close() {\n         .mount(&server)\n         .await;\n \n-    // Environment\n-    //\n-    // As of Rust 2024 `std::env::set_var` has been made `unsafe` because\n-    // mutating the process environment is inherently racy when other threads\n-    // are running.  We therefore have to wrap every call in an explicit\n-    // `unsafe` block.  These are limited to the test-setup section so the\n-    // scope is very small and clearly delineated.\n-\n-    unsafe {\n-        std::env::set_var(\"OPENAI_REQUEST_MAX_RETRIES\", \"0\");\n-        std::env::set_var(\"OPENAI_STREAM_MAX_RETRIES\", \"1\");\n-        std::env::set_var(\"OPENAI_STREAM_IDLE_TIMEOUT_MS\", \"2000\");\n-    }\n+    // Configure retry behaviour explicitly to avoid mutating process-wide",
        "comment_created_at": "2025-07-17T21:18:24+00:00",
        "comment_author": "bolinfest",
        "comment_body": "```suggestion\r\n    // Configure retry behavior explicitly to avoid mutating process-wide\r\n```",
        "pr_file_module": null
      }
    ]
  }
]