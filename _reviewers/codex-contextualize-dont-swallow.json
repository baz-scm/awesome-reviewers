[
  {
    "discussion_id": "2217131075",
    "pr_number": 1602,
    "pr_file": "codex-rs/core/src/rollout.rs",
    "created_at": "2025-07-19T03:54:30+00:00",
    "commented_code": "timestamp,\n     })\n }\n+\n+async fn rollout_writer(\n+    mut file: tokio::fs::File,\n+    mut rx: mpsc::Receiver<RolloutCmd>,\n+    meta: Option<SessionMeta>,\n+) {\n+    if let Some(meta) = meta {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2217131075",
        "repo_full_name": "openai/codex",
        "pr_number": 1602,
        "pr_file": "codex-rs/core/src/rollout.rs",
        "discussion_id": "2217131075",
        "commented_code": "@@ -185,3 +246,54 @@ fn create_log_file(config: &Config, session_id: Uuid) -> std::io::Result<LogFile\n         timestamp,\n     })\n }\n+\n+async fn rollout_writer(\n+    mut file: tokio::fs::File,\n+    mut rx: mpsc::Receiver<RolloutCmd>,\n+    meta: Option<SessionMeta>,\n+) {\n+    if let Some(meta) = meta {",
        "comment_created_at": "2025-07-19T03:54:30+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Why do we ignore all the io errors instead of returning `io::Result<()>`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082349972",
    "pr_number": 865,
    "pr_file": "codex-rs/apply-patch/src/lib.rs",
    "created_at": "2025-05-09T18:57:49+00:00",
    "commented_code": "let lang = BASH.into();\n     let mut parser = Parser::new();\n-    parser.set_language(&lang).expect(\"load bash grammar\");\n+    parser\n+        .set_language(&lang)\n+        .with_context(|| \"failed to load bash grammar\")?;",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2082349972",
        "repo_full_name": "openai/codex",
        "pr_number": 865,
        "pr_file": "codex-rs/apply-patch/src/lib.rs",
        "discussion_id": "2082349972",
        "commented_code": "@@ -212,7 +212,9 @@ fn extract_heredoc_body_from_apply_patch_command(src: &str) -> anyhow::Result<St\n \n     let lang = BASH.into();\n     let mut parser = Parser::new();\n-    parser.set_language(&lang).expect(\"load bash grammar\");\n+    parser\n+        .set_language(&lang)\n+        .with_context(|| \"failed to load bash grammar\")?;",
        "comment_created_at": "2025-05-09T18:57:49+00:00",
        "comment_author": "bolinfest",
        "comment_body": "can it just be this for a string literal?\r\n\r\n```suggestion\r\n        .context(\"failed to load bash grammar\")?;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082351973",
    "pr_number": 865,
    "pr_file": "codex-rs/cli/src/proto.rs",
    "created_at": "2025-05-09T18:59:23+00:00",
    "commented_code": "};\n             match event {\n                 Ok(event) => {\n-                    let event_str =\n-                        serde_json::to_string(&event).expect(\"JSON serialization failed\");\n+                    let event_str = match serde_json::to_string(&event) {\n+                        Ok(s) => s,\n+                        Err(e) => {\n+                            error!(\"Failed to serialise event: {e}\");\n+                            continue;",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2082351973",
        "repo_full_name": "openai/codex",
        "pr_number": 865,
        "pr_file": "codex-rs/cli/src/proto.rs",
        "discussion_id": "2082351973",
        "commented_code": "@@ -81,8 +81,13 @@ pub async fn run_main(_opts: ProtoCli) -> anyhow::Result<()> {\n             };\n             match event {\n                 Ok(event) => {\n-                    let event_str =\n-                        serde_json::to_string(&event).expect(\"JSON serialization failed\");\n+                    let event_str = match serde_json::to_string(&event) {\n+                        Ok(s) => s,\n+                        Err(e) => {\n+                            error!(\"Failed to serialise event: {e}\");\n+                            continue;",
        "comment_created_at": "2025-05-09T18:59:23+00:00",
        "comment_author": "bolinfest",
        "comment_body": "I think this is debatable whether we should proceed in this case. Certainly the program will continue to work, so I guess it's fine? On the other hand, if you are trying to test the wire protocol and you sent bad data, perhaps we should crash so you fix it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2082409675",
        "repo_full_name": "openai/codex",
        "pr_number": 865,
        "pr_file": "codex-rs/cli/src/proto.rs",
        "discussion_id": "2082351973",
        "commented_code": "@@ -81,8 +81,13 @@ pub async fn run_main(_opts: ProtoCli) -> anyhow::Result<()> {\n             };\n             match event {\n                 Ok(event) => {\n-                    let event_str =\n-                        serde_json::to_string(&event).expect(\"JSON serialization failed\");\n+                    let event_str = match serde_json::to_string(&event) {\n+                        Ok(s) => s,\n+                        Err(e) => {\n+                            error!(\"Failed to serialise event: {e}\");\n+                            continue;",
        "comment_created_at": "2025-05-09T19:51:11+00:00",
        "comment_author": "jcoens-openai",
        "comment_body": "I try and set full-on panic/crash for when the program cannot meaningfully move forward at all. Can always revisit this if a crash is better ergonomically for the general workflows",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2082371150",
    "pr_number": 865,
    "pr_file": "codex-rs/core/src/is_safe_command.rs",
    "created_at": "2025-05-09T19:16:02+00:00",
    "commented_code": "fn try_parse_bash(bash_lc_arg: &str) -> Option<Tree> {\n     let lang = BASH.into();\n     let mut parser = Parser::new();\n-    parser.set_language(&lang).expect(\"load bash grammar\");\n+\n+    // If the language fails to load we consider the input unparseable, so we",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2082371150",
        "repo_full_name": "openai/codex",
        "pr_number": 865,
        "pr_file": "codex-rs/core/src/is_safe_command.rs",
        "discussion_id": "2082371150",
        "commented_code": "@@ -75,7 +75,12 @@ fn is_safe_to_call_with_exec(command: &[String]) -> bool {\n fn try_parse_bash(bash_lc_arg: &str) -> Option<Tree> {\n     let lang = BASH.into();\n     let mut parser = Parser::new();\n-    parser.set_language(&lang).expect(\"load bash grammar\");\n+\n+    // If the language fails to load we consider the input unparseable, so we",
        "comment_created_at": "2025-05-09T19:16:02+00:00",
        "comment_author": "bolinfest",
        "comment_body": "If this is happens, this is a logical error where our treesitter dependency is not set up correctly, so we should not swallow this error.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078790736",
    "pr_number": 855,
    "pr_file": "codex-rs/apply-patch/src/lib.rs",
    "created_at": "2025-05-08T02:37:30+00:00",
    "commented_code": "loop {\n         let node = c.node();\n         if node.kind() == \"heredoc_body\" {\n-            let text = node.utf8_text(bytes).unwrap();\n+            let text = node\n+                .utf8_text(bytes)\n+                .map_err(|e| anyhow::anyhow!(\"failed to interpret heredoc body as UTF-8: {e}\"))?;",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2078790736",
        "repo_full_name": "openai/codex",
        "pr_number": 855,
        "pr_file": "codex-rs/apply-patch/src/lib.rs",
        "discussion_id": "2078790736",
        "commented_code": "@@ -223,7 +224,9 @@ fn extract_heredoc_body_from_apply_patch_command(src: &str) -> anyhow::Result<St\n     loop {\n         let node = c.node();\n         if node.kind() == \"heredoc_body\" {\n-            let text = node.utf8_text(bytes).unwrap();\n+            let text = node\n+                .utf8_text(bytes)\n+                .map_err(|e| anyhow::anyhow!(\"failed to interpret heredoc body as UTF-8: {e}\"))?;",
        "comment_created_at": "2025-05-08T02:37:30+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Would with_context from anyhow work here?",
        "pr_file_module": null
      }
    ]
  }
]