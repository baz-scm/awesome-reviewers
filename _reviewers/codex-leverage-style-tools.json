[
  {
    "discussion_id": "2070439047",
    "pr_number": 575,
    "pr_file": "codex-cli/tests/raw-exec-process-group.test.ts",
    "created_at": "2025-05-01T15:52:41+00:00",
    "commented_code": "import { describe, it, expect } from \"vitest\";\n import { exec as rawExec } from \"../src/utils/agent/sandbox/raw-exec.js\";\n+import type { AppConfig } from \"src/utils/config.js\";",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2070439047",
        "repo_full_name": "openai/codex",
        "pr_number": 575,
        "pr_file": "codex-cli/tests/raw-exec-process-group.test.ts",
        "discussion_id": "2070439047",
        "commented_code": "@@ -1,5 +1,6 @@\n import { describe, it, expect } from \"vitest\";\n import { exec as rawExec } from \"../src/utils/agent/sandbox/raw-exec.js\";\n+import type { AppConfig } from \"src/utils/config.js\";",
        "comment_created_at": "2025-05-01T15:52:41+00:00",
        "comment_author": "bolinfest",
        "comment_body": "I'm about to run CI on this PR, but seeing this makes me suspicious that you haven't run `pnpm run format` in this folder or maybe not `pnpm run lint`? If you use VS Code and have the ESLint and Prettier extensions configured correctly, you should get alerted to these issues in the Problems pane and generally don't have to run those scripts explicitly.",
        "pr_file_module": null
      },
      {
        "comment_id": "2070502203",
        "repo_full_name": "openai/codex",
        "pr_number": 575,
        "pr_file": "codex-cli/tests/raw-exec-process-group.test.ts",
        "discussion_id": "2070439047",
        "commented_code": "@@ -1,5 +1,6 @@\n import { describe, it, expect } from \"vitest\";\n import { exec as rawExec } from \"../src/utils/agent/sandbox/raw-exec.js\";\n+import type { AppConfig } from \"src/utils/config.js\";",
        "comment_created_at": "2025-05-01T16:48:41+00:00",
        "comment_author": "syllogismos",
        "comment_body": "Theres a pre commit hook, that doesn't let me commit if I'm not following the guidelines. and I do run `pnpm run lint:fix` to fix any issues. \r\n\r\nFrom the root folder, I ran `pnpm run format` and didnt see any issues.\r\nbut from the `codex_cli/tests` folder, I rand `pnpm run format` and I see the following output\r\n```\r\n\u279c  tests git:(increase-output-limits) pnpm run format\r\n\r\n> @openai/codex@0.1.2504301751 format /Volumes/ssd/c/codex/codex-cli\r\n> prettier --check src tests\r\n\r\nChecking formatting...\r\n[warn] src/cli.tsx\r\n[warn] src/components/chat/terminal-chat-input.tsx\r\n[warn] src/components/chat/terminal-chat-response-item.tsx\r\n[warn] src/components/history-overlay.tsx\r\n[warn] src/utils/agent/agent-loop.ts\r\n[warn] src/utils/agent/apply-patch.ts\r\n[warn] tests/agent-cancel-early.test.ts\r\n[warn] tests/agent-cancel-prev-response.test.ts\r\n[warn] tests/agent-cancel-race.test.ts\r\n[warn] tests/agent-cancel.test.ts\r\n[warn] tests/agent-dedupe-items.test.ts\r\n[warn] tests/agent-function-call-id.test.ts\r\n[warn] tests/agent-generic-network-error.test.ts\r\n[warn] tests/agent-interrupt-continue.test.ts\r\n[warn] tests/agent-invalid-request-error.test.ts\r\n[warn] tests/agent-max-tokens-error.test.ts\r\n[warn] tests/agent-network-errors.test.ts\r\n[warn] tests/agent-project-doc.test.ts\r\n[warn] tests/agent-rate-limit-error.test.ts\r\n[warn] tests/agent-server-retry.test.ts\r\n[warn] tests/agent-terminate.test.ts\r\n[warn] tests/agent-thinking-time.test.ts\r\n[warn] tests/invalid-command-handling.test.ts\r\n[warn] tests/token-streaming-performance.test.ts\r\n[warn] Code style issues found in 24 files. Forgot to run Prettier?\r\n\u2009ELIFECYCLE\u2009 Command failed with exit code 1.\r\n```\r\n\r\nmaybe theres some issue with prettier config or something.\r\ni dont think i changed all these files, don't know why its happening.",
        "pr_file_module": null
      },
      {
        "comment_id": "2070515307",
        "repo_full_name": "openai/codex",
        "pr_number": 575,
        "pr_file": "codex-cli/tests/raw-exec-process-group.test.ts",
        "discussion_id": "2070439047",
        "commented_code": "@@ -1,5 +1,6 @@\n import { describe, it, expect } from \"vitest\";\n import { exec as rawExec } from \"../src/utils/agent/sandbox/raw-exec.js\";\n+import type { AppConfig } from \"src/utils/config.js\";",
        "comment_created_at": "2025-05-01T16:58:18+00:00",
        "comment_author": "syllogismos",
        "comment_body": "sorry i missed these, because the precommit hook isn't setup properly I think,\r\nand I just ran `pnpm run format:fix` from `codex-cli` folder and it introduced changes in 24 files, and many of these files I didn't change.\r\n\r\nfor example one of the fix was \r\n![image](https://github.com/user-attachments/assets/41b22e1a-f1c9-4e4a-a397-f4408d89cd76)\r\n\r\nshold I just commit format changes to I already changed and leave the rest?",
        "pr_file_module": null
      },
      {
        "comment_id": "2070534293",
        "repo_full_name": "openai/codex",
        "pr_number": 575,
        "pr_file": "codex-cli/tests/raw-exec-process-group.test.ts",
        "discussion_id": "2070439047",
        "commented_code": "@@ -1,5 +1,6 @@\n import { describe, it, expect } from \"vitest\";\n import { exec as rawExec } from \"../src/utils/agent/sandbox/raw-exec.js\";\n+import type { AppConfig } from \"src/utils/config.js\";",
        "comment_created_at": "2025-05-01T17:09:43+00:00",
        "comment_author": "syllogismos",
        "comment_body": "I updated my branch with main, and ran pnpm format again, and I dont see any of these issues. they are all fixed in main now. and even my code above seems to pass the formatting check.\r\n\r\nvery confused lol",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062645312",
    "pr_number": 685,
    "pr_file": "codex-cli/src/text-buffer.ts",
    "created_at": "2025-04-27T14:37:59+00:00",
    "commented_code": "// no `key.backspace` flag set.  Treat that byte exactly like an ordinary\n     // Backspace for parity with textarea.rs and to make interactive tests\n     // feedable through the simpler `(ch, {}, vp)` path.\n+    // ------------------------------------------------------------------\n+    //  Word-wise deletions\n+    //\n+    //  macOS (and many terminals on Linux/BSD) map the physical \u201cDelete\u201d key\n+    //  to a *backspace* operation \u2013 emitting either the raw DEL (0x7f) byte\n+    //  or setting `key.backspace = true` in Ink\u2019s parsed event.  Holding the\n+    //  Option/Alt modifier therefore *also* sends backspace semantics even\n+    //  though users colloquially refer to the shortcut as \u201c\u2325+Delete\u201d.\n+    //\n+    //  Historically we treated **modifier + Delete** as a *forward* word\n+    //  deletion.  This behaviour, however, diverges from the default found\n+    //  in shells (zsh, bash, fish, etc.) and native macOS text fields where\n+    //  \u2325+Delete removes the word *to the left* of the caret.  Update the\n+    //  mapping so that both\n+    //\n+    //    \u2022 \u2325/Alt/Meta + Backspace  and\n+    //    \u2022 \u2325/Alt/Meta + Delete\n+    //\n+    //  perform a **backward** word deletion.  We keep the ability to delete\n+    //  the *next* word by requiring an additional Shift modifier \u2013 a common\n+    //  binding on full-size keyboards that expose a dedicated Forward Delete\n+    //  key.\n+    // ------------------------------------------------------------------\n     else if (\n       (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n-      (key[\"backspace\"] || input === \"\\x7f\")\n+      (key[\"backspace\"] || input === \"\\x7f\" || (key[\"delete\"] && !key[\"shift\"])) // treat un-shifted Delete like Backspace",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2062645312",
        "repo_full_name": "openai/codex",
        "pr_number": 685,
        "pr_file": "codex-cli/src/text-buffer.ts",
        "discussion_id": "2062645312",
        "commented_code": "@@ -823,12 +823,40 @@ export default class TextBuffer {\n     // no `key.backspace` flag set.  Treat that byte exactly like an ordinary\n     // Backspace for parity with textarea.rs and to make interactive tests\n     // feedable through the simpler `(ch, {}, vp)` path.\n+    // ------------------------------------------------------------------\n+    //  Word-wise deletions\n+    //\n+    //  macOS (and many terminals on Linux/BSD) map the physical \u201cDelete\u201d key\n+    //  to a *backspace* operation \u2013 emitting either the raw DEL (0x7f) byte\n+    //  or setting `key.backspace = true` in Ink\u2019s parsed event.  Holding the\n+    //  Option/Alt modifier therefore *also* sends backspace semantics even\n+    //  though users colloquially refer to the shortcut as \u201c\u2325+Delete\u201d.\n+    //\n+    //  Historically we treated **modifier + Delete** as a *forward* word\n+    //  deletion.  This behaviour, however, diverges from the default found\n+    //  in shells (zsh, bash, fish, etc.) and native macOS text fields where\n+    //  \u2325+Delete removes the word *to the left* of the caret.  Update the\n+    //  mapping so that both\n+    //\n+    //    \u2022 \u2325/Alt/Meta + Backspace  and\n+    //    \u2022 \u2325/Alt/Meta + Delete\n+    //\n+    //  perform a **backward** word deletion.  We keep the ability to delete\n+    //  the *next* word by requiring an additional Shift modifier \u2013 a common\n+    //  binding on full-size keyboards that expose a dedicated Forward Delete\n+    //  key.\n+    // ------------------------------------------------------------------\n     else if (\n       (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n-      (key[\"backspace\"] || input === \"\\x7f\")\n+      (key[\"backspace\"] || input === \"\\x7f\" || (key[\"delete\"] && !key[\"shift\"])) // treat un-shifted Delete like Backspace",
        "comment_created_at": "2025-04-27T14:37:59+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "Feels that && !key[\"shift\"] should be at top level so that this logically never triggers when shift key is pressed. \r\n\r\nmodKey && backspace && notShift",
        "pr_file_module": null
      },
      {
        "comment_id": "2069675429",
        "repo_full_name": "openai/codex",
        "pr_number": 685,
        "pr_file": "codex-cli/src/text-buffer.ts",
        "discussion_id": "2062645312",
        "commented_code": "@@ -823,12 +823,40 @@ export default class TextBuffer {\n     // no `key.backspace` flag set.  Treat that byte exactly like an ordinary\n     // Backspace for parity with textarea.rs and to make interactive tests\n     // feedable through the simpler `(ch, {}, vp)` path.\n+    // ------------------------------------------------------------------\n+    //  Word-wise deletions\n+    //\n+    //  macOS (and many terminals on Linux/BSD) map the physical \u201cDelete\u201d key\n+    //  to a *backspace* operation \u2013 emitting either the raw DEL (0x7f) byte\n+    //  or setting `key.backspace = true` in Ink\u2019s parsed event.  Holding the\n+    //  Option/Alt modifier therefore *also* sends backspace semantics even\n+    //  though users colloquially refer to the shortcut as \u201c\u2325+Delete\u201d.\n+    //\n+    //  Historically we treated **modifier + Delete** as a *forward* word\n+    //  deletion.  This behaviour, however, diverges from the default found\n+    //  in shells (zsh, bash, fish, etc.) and native macOS text fields where\n+    //  \u2325+Delete removes the word *to the left* of the caret.  Update the\n+    //  mapping so that both\n+    //\n+    //    \u2022 \u2325/Alt/Meta + Backspace  and\n+    //    \u2022 \u2325/Alt/Meta + Delete\n+    //\n+    //  perform a **backward** word deletion.  We keep the ability to delete\n+    //  the *next* word by requiring an additional Shift modifier \u2013 a common\n+    //  binding on full-size keyboards that expose a dedicated Forward Delete\n+    //  key.\n+    // ------------------------------------------------------------------\n     else if (\n       (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n-      (key[\"backspace\"] || input === \"\\x7f\")\n+      (key[\"backspace\"] || input === \"\\x7f\" || (key[\"delete\"] && !key[\"shift\"])) // treat un-shifted Delete like Backspace",
        "comment_created_at": "2025-04-30T23:52:42+00:00",
        "comment_author": "fouad-openai",
        "comment_body": "great point! thanks for review",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062645536",
    "pr_number": 685,
    "pr_file": "codex-cli/src/text-buffer.ts",
    "created_at": "2025-04-27T14:38:59+00:00",
    "commented_code": "// no `key.backspace` flag set.  Treat that byte exactly like an ordinary\n     // Backspace for parity with textarea.rs and to make interactive tests\n     // feedable through the simpler `(ch, {}, vp)` path.\n+    // ------------------------------------------------------------------\n+    //  Word-wise deletions\n+    //\n+    //  macOS (and many terminals on Linux/BSD) map the physical \u201cDelete\u201d key\n+    //  to a *backspace* operation \u2013 emitting either the raw DEL (0x7f) byte\n+    //  or setting `key.backspace = true` in Ink\u2019s parsed event.  Holding the\n+    //  Option/Alt modifier therefore *also* sends backspace semantics even\n+    //  though users colloquially refer to the shortcut as \u201c\u2325+Delete\u201d.\n+    //\n+    //  Historically we treated **modifier + Delete** as a *forward* word\n+    //  deletion.  This behaviour, however, diverges from the default found\n+    //  in shells (zsh, bash, fish, etc.) and native macOS text fields where\n+    //  \u2325+Delete removes the word *to the left* of the caret.  Update the\n+    //  mapping so that both\n+    //\n+    //    \u2022 \u2325/Alt/Meta + Backspace  and\n+    //    \u2022 \u2325/Alt/Meta + Delete\n+    //\n+    //  perform a **backward** word deletion.  We keep the ability to delete\n+    //  the *next* word by requiring an additional Shift modifier \u2013 a common\n+    //  binding on full-size keyboards that expose a dedicated Forward Delete\n+    //  key.\n+    // ------------------------------------------------------------------\n     else if (\n       (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n-      (key[\"backspace\"] || input === \"\\x7f\")\n+      (key[\"backspace\"] || input === \"\\x7f\" || (key[\"delete\"] && !key[\"shift\"])) // treat un-shifted Delete like Backspace\n     ) {\n       this.deleteWordLeft();\n-    } else if ((key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) && key[\"delete\"]) {\n+    } else if (\n+      (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n+      key[\"delete\"] &&",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2062645536",
        "repo_full_name": "openai/codex",
        "pr_number": 685,
        "pr_file": "codex-cli/src/text-buffer.ts",
        "discussion_id": "2062645536",
        "commented_code": "@@ -823,12 +823,40 @@ export default class TextBuffer {\n     // no `key.backspace` flag set.  Treat that byte exactly like an ordinary\n     // Backspace for parity with textarea.rs and to make interactive tests\n     // feedable through the simpler `(ch, {}, vp)` path.\n+    // ------------------------------------------------------------------\n+    //  Word-wise deletions\n+    //\n+    //  macOS (and many terminals on Linux/BSD) map the physical \u201cDelete\u201d key\n+    //  to a *backspace* operation \u2013 emitting either the raw DEL (0x7f) byte\n+    //  or setting `key.backspace = true` in Ink\u2019s parsed event.  Holding the\n+    //  Option/Alt modifier therefore *also* sends backspace semantics even\n+    //  though users colloquially refer to the shortcut as \u201c\u2325+Delete\u201d.\n+    //\n+    //  Historically we treated **modifier + Delete** as a *forward* word\n+    //  deletion.  This behaviour, however, diverges from the default found\n+    //  in shells (zsh, bash, fish, etc.) and native macOS text fields where\n+    //  \u2325+Delete removes the word *to the left* of the caret.  Update the\n+    //  mapping so that both\n+    //\n+    //    \u2022 \u2325/Alt/Meta + Backspace  and\n+    //    \u2022 \u2325/Alt/Meta + Delete\n+    //\n+    //  perform a **backward** word deletion.  We keep the ability to delete\n+    //  the *next* word by requiring an additional Shift modifier \u2013 a common\n+    //  binding on full-size keyboards that expose a dedicated Forward Delete\n+    //  key.\n+    // ------------------------------------------------------------------\n     else if (\n       (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n-      (key[\"backspace\"] || input === \"\\x7f\")\n+      (key[\"backspace\"] || input === \"\\x7f\" || (key[\"delete\"] && !key[\"shift\"])) // treat un-shifted Delete like Backspace\n     ) {\n       this.deleteWordLeft();\n-    } else if ((key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) && key[\"delete\"]) {\n+    } else if (\n+      (key[\"meta\"] || key[\"ctrl\"] || key[\"alt\"]) &&\n+      key[\"delete\"] &&",
        "comment_created_at": "2025-04-27T14:38:59+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "Symmetry with above suggests that this should be \r\n\r\n(key[\"backspace\"] || input === \"\\x7f\" || key[\"delete\"])\r\n\r\ninstead of just\r\n\r\nkey[\"delete\"]",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050824984",
    "pr_number": 173,
    "pr_file": "codex-cli/src/approvals.ts",
    "created_at": "2025-04-18T16:13:29+00:00",
    "commented_code": "} catch (e) {\n       // In practice, there seem to be syntactically valid shell commands that\n       // shell-quote cannot parse, so we should not reject, but ask the user.\n-      switch (policy) {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2050824984",
        "repo_full_name": "openai/codex",
        "pr_number": 173,
        "pr_file": "codex-cli/src/approvals.ts",
        "discussion_id": "2050824984",
        "commented_code": "@@ -112,23 +117,23 @@ export function canAutoApprove(\n     } catch (e) {\n       // In practice, there seem to be syntactically valid shell commands that\n       // shell-quote cannot parse, so we should not reject, but ask the user.\n-      switch (policy) {",
        "comment_created_at": "2025-04-18T16:13:29+00:00",
        "comment_author": "bolinfest",
        "comment_body": "This should have stayed a `switch` statement because we have ESLint rules set up to ensure `switch` statements are exhaustive so that if a new variant of the `ApprovalPolicy` enum is introduced we are forced to address the existing callsites.",
        "pr_file_module": null
      }
    ]
  }
]