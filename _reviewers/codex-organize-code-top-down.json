[
  {
    "discussion_id": "2223974642",
    "pr_number": 1647,
    "pr_file": "codex-rs/core/src/rollout.rs",
    "created_at": "2025-07-22T22:53:15+00:00",
    "commented_code": "info!(\"Resumed rollout successfully from {path:?}\");\n         Ok((Self { tx }, saved))\n     }\n+\n+    pub async fn shutdown(&self) -> std::io::Result<()> {\n+        let (tx_done, rx_done) = oneshot::channel();\n+        if let Err(e) = self.tx.send(RolloutCmd::Shutdown { ack: tx_done }).await {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2223974642",
        "repo_full_name": "openai/codex",
        "pr_number": 1647,
        "pr_file": "codex-rs/core/src/rollout.rs",
        "discussion_id": "2223974642",
        "commented_code": "@@ -200,6 +202,17 @@ impl RolloutRecorder {\n         info!(\"Resumed rollout successfully from {path:?}\");\n         Ok((Self { tx }, saved))\n     }\n+\n+    pub async fn shutdown(&self) -> std::io::Result<()> {\n+        let (tx_done, rx_done) = oneshot::channel();\n+        if let Err(e) = self.tx.send(RolloutCmd::Shutdown { ack: tx_done }).await {",
        "comment_created_at": "2025-07-22T22:53:15+00:00",
        "comment_author": "bolinfest",
        "comment_body": "This is admittedly a nit, but personally, I would rewrite this as a `match self.tx.send(RolloutCmd::Shutdown { ack: tx_done }).await` to avoid using the `return` keyword. I try to reserve the use of `return` when you really need an \"early return\" in a long function. But if using a single expression is an option, I find that to be cleaner because then it's more \"straight line\" code (though admittedly `match` branches...).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202826750",
    "pr_number": 1529,
    "pr_file": "codex-rs/tui/src/app.rs",
    "created_at": "2025-07-12T17:11:01+00:00",
    "commented_code": "use std::sync::mpsc::Receiver;\n use std::sync::mpsc::channel;\n \n+/// Template for compact summary continuation prompt\n+const COMPACT_SUMMARY_TEMPLATE: &str = concat!(\n+    \"This chat is a continuation of a previous conversation. \",\n+    \"After providing the summary, acknowledge that /compact command has been applied. \",\n+    \"Here is the summary of the previous conversation:\n\n{}\"\n+);\n+\n+/// Creates the initial prompt for a compacted conversation\n+fn create_compact_summary_prompt(summary_text: &str) -> String {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2202826750",
        "repo_full_name": "openai/codex",
        "pr_number": 1529,
        "pr_file": "codex-rs/tui/src/app.rs",
        "discussion_id": "2202826750",
        "commented_code": "@@ -21,6 +22,22 @@ use std::path::PathBuf;\n use std::sync::mpsc::Receiver;\n use std::sync::mpsc::channel;\n \n+/// Template for compact summary continuation prompt\n+const COMPACT_SUMMARY_TEMPLATE: &str = concat!(\n+    \"This chat is a continuation of a previous conversation. \",\n+    \"After providing the summary, acknowledge that /compact command has been applied. \",\n+    \"Here is the summary of the previous conversation:\\n\\n{}\"\n+);\n+\n+/// Creates the initial prompt for a compacted conversation\n+fn create_compact_summary_prompt(summary_text: &str) -> String {",
        "comment_created_at": "2025-07-12T17:11:01+00:00",
        "comment_author": "bolinfest",
        "comment_body": "For small helper functions, particularly ones that are private to the file, please declare them _after_ the functions that use them. I strongly prefer declaring the \"most important stuff\" at the top of the file and \"details\" (which includes functions like this) at the top of the file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202828654",
    "pr_number": 1529,
    "pr_file": "codex-rs/tui/src/app.rs",
    "created_at": "2025-07-12T17:16:52+00:00",
    "commented_code": "self.dispatch_scroll_event(scroll_delta);\n                 }\n                 AppEvent::CodexEvent(event) => {\n+                    // Check if we're waiting for a summarization response",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2202828654",
        "repo_full_name": "openai/codex",
        "pr_number": 1529,
        "pr_file": "codex-rs/tui/src/app.rs",
        "discussion_id": "2202828654",
        "commented_code": "@@ -224,6 +251,40 @@ impl<'a> App<'a> {\n                     self.dispatch_scroll_event(scroll_delta);\n                 }\n                 AppEvent::CodexEvent(event) => {\n+                    // Check if we're waiting for a summarization response",
        "comment_created_at": "2025-07-12T17:16:52+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Is there a reason this logic isn't added to `dispatch_codex_event()` instead? Much of the reason to have the `dispatch_codex_event()` helper is to keep the length of `run()` down. In a new top-level function, there will be less indenting and the code should be easier to read, as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2091738457",
    "pr_number": 942,
    "pr_file": "codex-rs/apply-patch/src/lib.rs",
    "created_at": "2025-05-15T18:17:31+00:00",
    "commented_code": "move_path,\n                         chunks,\n                     } => {\n+                        let absolute_path = cwd.join(path);",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2091738457",
        "repo_full_name": "openai/codex",
        "pr_number": 942,
        "pr_file": "codex-rs/apply-patch/src/lib.rs",
        "discussion_id": "2091738457",
        "commented_code": "@@ -159,17 +159,18 @@ pub fn maybe_parse_apply_patch_verified(argv: &[String], cwd: &Path) -> MaybeApp\n                         move_path,\n                         chunks,\n                     } => {\n+                        let absolute_path = cwd.join(path);",
        "comment_created_at": "2025-05-15T18:17:31+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Let's do this before `match hunk` since it is used in all three cases.",
        "pr_file_module": null
      }
    ]
  }
]