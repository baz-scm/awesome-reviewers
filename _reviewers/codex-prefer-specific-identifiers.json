[
  {
    "discussion_id": "2050885677",
    "pr_number": 270,
    "pr_file": "codex-cli/src/utils/mcp.ts",
    "created_at": "2025-04-18T17:12:41+00:00",
    "commented_code": "+import fs, { promises as fsPromises } from \"fs\";\n+import os from \"os\";\n+import path from \"path\";\n+\n+// Types for MCP server definitions\n+export type MCPServer = {\n+  name: string;\n+  type: \"stdio\" | \"sse\";\n+  // for stdio type\n+  cmd?: string;\n+  args?: Array<string>;\n+  // for sse type\n+  url?: string;\n+  // common\n+  env?: Record<string, string>;\n+};\n+\n+type MCPConfig = {\n+  servers: Array<MCPServer>;\n+};\n+\n+// Config file paths\n+const GLOBAL_DIR = path.join(os.homedir(), \".codex\");\n+const GLOBAL_FILE = path.join(GLOBAL_DIR, \"mcp.json\");\n+\n+// Find project root by locating .git directory\n+function findProjectRoot(startDir: string): string | null {\n+  let dir = path.resolve(startDir);\n+  while (true) {\n+    if (fs.existsSync(path.join(dir, \".git\"))) {\n+      return dir;\n+    }\n+    const parent = path.dirname(dir);\n+    if (parent === dir) {\n+      break;\n+    }\n+    dir = parent;\n+  }\n+  return null;\n+}\n+\n+function getLocalFile(): string | null {\n+  const root = findProjectRoot(process.cwd());\n+  if (!root) {\n+    return null;\n+  }\n+  const dir = path.join(root, \".codex\");\n+  return path.join(dir, \"mcp.json\");\n+}\n+\n+async function loadConfig(scope: \"global\" | \"local\"): Promise<MCPConfig> {\n+  const file = scope === \"global\" ? GLOBAL_FILE : getLocalFile();\n+  if (!file) {\n+    return { servers: [] };",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2050885677",
        "repo_full_name": "openai/codex",
        "pr_number": 270,
        "pr_file": "codex-cli/src/utils/mcp.ts",
        "discussion_id": "2050885677",
        "commented_code": "@@ -0,0 +1,120 @@\n+import fs, { promises as fsPromises } from \"fs\";\n+import os from \"os\";\n+import path from \"path\";\n+\n+// Types for MCP server definitions\n+export type MCPServer = {\n+  name: string;\n+  type: \"stdio\" | \"sse\";\n+  // for stdio type\n+  cmd?: string;\n+  args?: Array<string>;\n+  // for sse type\n+  url?: string;\n+  // common\n+  env?: Record<string, string>;\n+};\n+\n+type MCPConfig = {\n+  servers: Array<MCPServer>;\n+};\n+\n+// Config file paths\n+const GLOBAL_DIR = path.join(os.homedir(), \".codex\");\n+const GLOBAL_FILE = path.join(GLOBAL_DIR, \"mcp.json\");\n+\n+// Find project root by locating .git directory\n+function findProjectRoot(startDir: string): string | null {\n+  let dir = path.resolve(startDir);\n+  while (true) {\n+    if (fs.existsSync(path.join(dir, \".git\"))) {\n+      return dir;\n+    }\n+    const parent = path.dirname(dir);\n+    if (parent === dir) {\n+      break;\n+    }\n+    dir = parent;\n+  }\n+  return null;\n+}\n+\n+function getLocalFile(): string | null {\n+  const root = findProjectRoot(process.cwd());\n+  if (!root) {\n+    return null;\n+  }\n+  const dir = path.join(root, \".codex\");\n+  return path.join(dir, \"mcp.json\");\n+}\n+\n+async function loadConfig(scope: \"global\" | \"local\"): Promise<MCPConfig> {\n+  const file = scope === \"global\" ? GLOBAL_FILE : getLocalFile();\n+  if (!file) {\n+    return { servers: [] };",
        "comment_created_at": "2025-04-18T17:12:41+00:00",
        "comment_author": "cosmicdreams",
        "comment_body": "rename to \"mcpServers\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058999933",
    "pr_number": 569,
    "pr_file": "codex-cli/src/utils/config.ts",
    "created_at": "2025-04-24T18:19:32+00:00",
    "commented_code": "import { AutoApprovalMode } from \"./auto-approval-mode.js\";\n import { log } from \"./logger/log.js\";\n import { providers } from \"./providers.js\";\n+import { config as loadDotenv } from \"dotenv\";\n import { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs\";\n import { load as loadYaml, dump as dumpYaml } from \"js-yaml\";\n import { homedir } from \"os\";\n import { dirname, join, extname, resolve as resolvePath } from \"path\";\n \n+// ---------------------------------------------------------------------------\n+// User‑wide environment config (~/.codex.config)",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2058999933",
        "repo_full_name": "openai/codex",
        "pr_number": 569,
        "pr_file": "codex-cli/src/utils/config.ts",
        "discussion_id": "2058999933",
        "commented_code": "@@ -11,11 +11,37 @@ import type { FullAutoErrorMode } from \"./auto-approval-mode.js\";\n import { AutoApprovalMode } from \"./auto-approval-mode.js\";\n import { log } from \"./logger/log.js\";\n import { providers } from \"./providers.js\";\n+import { config as loadDotenv } from \"dotenv\";\n import { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs\";\n import { load as loadYaml, dump as dumpYaml } from \"js-yaml\";\n import { homedir } from \"os\";\n import { dirname, join, extname, resolve as resolvePath } from \"path\";\n \n+// ---------------------------------------------------------------------------\n+// User‑wide environment config (~/.codex.config)",
        "comment_created_at": "2025-04-24T18:19:32+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "Would prefer we name this .codex.env. Same everywhere below.",
        "pr_file_module": null
      },
      {
        "comment_id": "2059153190",
        "repo_full_name": "openai/codex",
        "pr_number": 569,
        "pr_file": "codex-cli/src/utils/config.ts",
        "discussion_id": "2058999933",
        "commented_code": "@@ -11,11 +11,37 @@ import type { FullAutoErrorMode } from \"./auto-approval-mode.js\";\n import { AutoApprovalMode } from \"./auto-approval-mode.js\";\n import { log } from \"./logger/log.js\";\n import { providers } from \"./providers.js\";\n+import { config as loadDotenv } from \"dotenv\";\n import { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs\";\n import { load as loadYaml, dump as dumpYaml } from \"js-yaml\";\n import { homedir } from \"os\";\n import { dirname, join, extname, resolve as resolvePath } from \"path\";\n \n+// ---------------------------------------------------------------------------\n+// User‑wide environment config (~/.codex.config)",
        "comment_created_at": "2025-04-24T20:09:29+00:00",
        "comment_author": "tomascupr",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2052729113",
    "pr_number": 481,
    "pr_file": "codex-cli/src/utils/agent/agent-loop.ts",
    "created_at": "2025-04-21T17:09:55+00:00",
    "commented_code": "config?: AppConfig;\n   instructions?: string;\n   approvalPolicy: ApprovalPolicy;\n+  /**\n+   * Whether the model responses should be stored on the server side (allows\n+   * using `previous_response_id` to provide conversational context). Defaults\n+   * to `true` to preserve the current behaviour. When set to `false` the agent\n+   * will instead send the *full* conversation context as the `input` payload\n+   * on every request and omit the `previous_response_id` parameter.\n+   */\n+  store?: boolean;",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2052729113",
        "repo_full_name": "openai/codex",
        "pr_number": 481,
        "pr_file": "codex-cli/src/utils/agent/agent-loop.ts",
        "discussion_id": "2052729113",
        "commented_code": "@@ -46,6 +46,14 @@ type AgentLoopParams = {\n   config?: AppConfig;\n   instructions?: string;\n   approvalPolicy: ApprovalPolicy;\n+  /**\n+   * Whether the model responses should be stored on the server side (allows\n+   * using `previous_response_id` to provide conversational context). Defaults\n+   * to `true` to preserve the current behaviour. When set to `false` the agent\n+   * will instead send the *full* conversation context as the `input` payload\n+   * on every request and omit the `previous_response_id` parameter.\n+   */\n+  store?: boolean;",
        "comment_created_at": "2025-04-21T17:09:55+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "suggest to name this `storeResponses` for additional clarity",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050896924",
    "pr_number": 333,
    "pr_file": "codex-cli/src/utils/check-updates.ts",
    "created_at": "2025-04-18T17:23:21+00:00",
    "commented_code": "+import { CONFIG_DIR } from \"./config\";\n+import boxen from \"boxen\";\n+import chalk from \"chalk\";\n+import * as cp from \"node:child_process\";\n+import { readFile, writeFile } from \"node:fs/promises\";\n+import { join } from \"node:path\";\n+import which from \"which\";\n+\n+interface State {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2050896924",
        "repo_full_name": "openai/codex",
        "pr_number": 333,
        "pr_file": "codex-cli/src/utils/check-updates.ts",
        "discussion_id": "2050896924",
        "commented_code": "@@ -0,0 +1,141 @@\n+import { CONFIG_DIR } from \"./config\";\n+import boxen from \"boxen\";\n+import chalk from \"chalk\";\n+import * as cp from \"node:child_process\";\n+import { readFile, writeFile } from \"node:fs/promises\";\n+import { join } from \"node:path\";\n+import which from \"which\";\n+\n+interface State {",
        "comment_created_at": "2025-04-18T17:23:21+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "Could you scope this to update state only, similar for the file name",
        "pr_file_module": null
      },
      {
        "comment_id": "2050990906",
        "repo_full_name": "openai/codex",
        "pr_number": 333,
        "pr_file": "codex-cli/src/utils/check-updates.ts",
        "discussion_id": "2050896924",
        "commented_code": "@@ -0,0 +1,141 @@\n+import { CONFIG_DIR } from \"./config\";\n+import boxen from \"boxen\";\n+import chalk from \"chalk\";\n+import * as cp from \"node:child_process\";\n+import { readFile, writeFile } from \"node:fs/promises\";\n+import { join } from \"node:path\";\n+import which from \"which\";\n+\n+interface State {",
        "comment_created_at": "2025-04-18T18:47:37+00:00",
        "comment_author": "benny123tw",
        "comment_body": "Just to double check — are you suggesting moving the state logic into a separate file, or just to keep this PR focused on state only?",
        "pr_file_module": null
      },
      {
        "comment_id": "2051014120",
        "repo_full_name": "openai/codex",
        "pr_number": 333,
        "pr_file": "codex-cli/src/utils/check-updates.ts",
        "discussion_id": "2050896924",
        "commented_code": "@@ -0,0 +1,141 @@\n+import { CONFIG_DIR } from \"./config\";\n+import boxen from \"boxen\";\n+import chalk from \"chalk\";\n+import * as cp from \"node:child_process\";\n+import { readFile, writeFile } from \"node:fs/promises\";\n+import { join } from \"node:path\";\n+import which from \"which\";\n+\n+interface State {",
        "comment_created_at": "2025-04-18T19:07:51+00:00",
        "comment_author": "tibo-openai",
        "comment_body": "Suggesting to not call this State, but UpdateState and have the file name also be named after what it is storing (update state) and not generically be about state.",
        "pr_file_module": null
      },
      {
        "comment_id": "2051026024",
        "repo_full_name": "openai/codex",
        "pr_number": 333,
        "pr_file": "codex-cli/src/utils/check-updates.ts",
        "discussion_id": "2050896924",
        "commented_code": "@@ -0,0 +1,141 @@\n+import { CONFIG_DIR } from \"./config\";\n+import boxen from \"boxen\";\n+import chalk from \"chalk\";\n+import * as cp from \"node:child_process\";\n+import { readFile, writeFile } from \"node:fs/promises\";\n+import { join } from \"node:path\";\n+import which from \"which\";\n+\n+interface State {",
        "comment_created_at": "2025-04-18T19:21:18+00:00",
        "comment_author": "benny123tw",
        "comment_body": "Thanks! I've renamed State to `UpdateState`, and updated the file name to `update-state.json` to reflect its purpose more clearly in 396691b51623e3d08a1352b3ab5ecb3f5a01e82c",
        "pr_file_module": null
      }
    ]
  }
]