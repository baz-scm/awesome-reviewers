[
  {
    "discussion_id": "2202825742",
    "pr_number": 1529,
    "pr_file": "codex-rs/tui/src/app.rs",
    "created_at": "2025-07-12T17:09:16+00:00",
    "commented_code": "use std::sync::mpsc::Receiver;\n use std::sync::mpsc::channel;\n \n+/// Template for compact summary continuation prompt\n+const COMPACT_SUMMARY_TEMPLATE: &str = concat!(\n+    \"This chat is a continuation of a previous conversation. \",\n+    \"After providing the summary, acknowledge that /compact command has been applied. \",\n+    \"Here is the summary of the previous conversation:\n\n{}\"",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2202825742",
        "repo_full_name": "openai/codex",
        "pr_number": 1529,
        "pr_file": "codex-rs/tui/src/app.rs",
        "discussion_id": "2202825742",
        "commented_code": "@@ -21,6 +22,22 @@ use std::path::PathBuf;\n use std::sync::mpsc::Receiver;\n use std::sync::mpsc::channel;\n \n+/// Template for compact summary continuation prompt\n+const COMPACT_SUMMARY_TEMPLATE: &str = concat!(\n+    \"This chat is a continuation of a previous conversation. \",\n+    \"After providing the summary, acknowledge that /compact command has been applied. \",\n+    \"Here is the summary of the previous conversation:\\n\\n{}\"",
        "comment_created_at": "2025-07-12T17:09:16+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Using `{}` as a placeholder in this way seems very confusing to me as a Rust person because it's not being used natively by `format!()`. Please use something like `SUMMARY_TEXT` instead so it's more obvious that something is meant to be replaced.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214303905",
    "pr_number": 1601,
    "pr_file": "codex-rs/core/src/model_provider_info.rs",
    "created_at": "2025-07-17T21:03:25+00:00",
    "commented_code": "/// value should be used. If the environment variable is not set, or the\n     /// value is empty, the header will not be included in the request.\n     pub env_http_headers: Option<HashMap<String, String>>,\n+\n+    /// Maximum number of times to retry a failed HTTP request to this provider.\n+    /// When `None`, falls back to the global default from `OPENAI_REQUEST_MAX_RETRIES` (currently 4).\n+    #[serde(default)]\n+    pub openai_request_max_retries: Option<u64>,",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2214303905",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/src/model_provider_info.rs",
        "discussion_id": "2214303905",
        "commented_code": "@@ -64,6 +68,21 @@ pub struct ModelProviderInfo {\n     /// value should be used. If the environment variable is not set, or the\n     /// value is empty, the header will not be included in the request.\n     pub env_http_headers: Option<HashMap<String, String>>,\n+\n+    /// Maximum number of times to retry a failed HTTP request to this provider.\n+    /// When `None`, falls back to the global default from `OPENAI_REQUEST_MAX_RETRIES` (currently 4).\n+    #[serde(default)]\n+    pub openai_request_max_retries: Option<u64>,",
        "comment_created_at": "2025-07-17T21:03:25+00:00",
        "comment_author": "bolinfest",
        "comment_body": "These should not have an `openai_` prefix, but should be generally applicable to all providers, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2214509860",
        "repo_full_name": "openai/codex",
        "pr_number": 1601,
        "pr_file": "codex-rs/core/src/model_provider_info.rs",
        "discussion_id": "2214303905",
        "commented_code": "@@ -64,6 +68,21 @@ pub struct ModelProviderInfo {\n     /// value should be used. If the environment variable is not set, or the\n     /// value is empty, the header will not be included in the request.\n     pub env_http_headers: Option<HashMap<String, String>>,\n+\n+    /// Maximum number of times to retry a failed HTTP request to this provider.\n+    /// When `None`, falls back to the global default from `OPENAI_REQUEST_MAX_RETRIES` (currently 4).\n+    #[serde(default)]\n+    pub openai_request_max_retries: Option<u64>,",
        "comment_created_at": "2025-07-17T23:49:03+00:00",
        "comment_author": "aibrahim-oai",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202841506",
    "pr_number": 1545,
    "pr_file": "codex-rs/cli/tests/integration.rs",
    "created_at": "2025-07-12T17:41:32+00:00",
    "commented_code": "+#![allow(clippy::unwrap_used)]\n+\n+use codex_core::exec::CODEX_SANDBOX_NETWORK_DISABLED_ENV_VAR;\n+use predicates::prelude::*;\n+use std::fs;\n+use std::path::Path;\n+use tempfile::TempDir;\n+use wiremock::Mock;\n+use wiremock::MockServer;\n+use wiremock::ResponseTemplate;\n+use wiremock::matchers::method;\n+use wiremock::matchers::path;\n+\n+fn write_config(dir: &Path, server: &MockServer) {",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2202841506",
        "repo_full_name": "openai/codex",
        "pr_number": 1545,
        "pr_file": "codex-rs/cli/tests/integration.rs",
        "discussion_id": "2202841506",
        "commented_code": "@@ -0,0 +1,171 @@\n+#![allow(clippy::unwrap_used)]\n+\n+use codex_core::exec::CODEX_SANDBOX_NETWORK_DISABLED_ENV_VAR;\n+use predicates::prelude::*;\n+use std::fs;\n+use std::path::Path;\n+use tempfile::TempDir;\n+use wiremock::Mock;\n+use wiremock::MockServer;\n+use wiremock::ResponseTemplate;\n+use wiremock::matchers::method;\n+use wiremock::matchers::path;\n+\n+fn write_config(dir: &Path, server: &MockServer) {",
        "comment_created_at": "2025-07-12T17:41:32+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Similar to a comment I made on another PR, please list all of these helper functions below the tests. The tests are the most important thing in this file.",
        "pr_file_module": null
      },
      {
        "comment_id": "2202848480",
        "repo_full_name": "openai/codex",
        "pr_number": 1545,
        "pr_file": "codex-rs/cli/tests/integration.rs",
        "discussion_id": "2202841506",
        "commented_code": "@@ -0,0 +1,171 @@\n+#![allow(clippy::unwrap_used)]\n+\n+use codex_core::exec::CODEX_SANDBOX_NETWORK_DISABLED_ENV_VAR;\n+use predicates::prelude::*;\n+use std::fs;\n+use std::path::Path;\n+use tempfile::TempDir;\n+use wiremock::Mock;\n+use wiremock::MockServer;\n+use wiremock::ResponseTemplate;\n+use wiremock::matchers::method;\n+use wiremock::matchers::path;\n+\n+fn write_config(dir: &Path, server: &MockServer) {",
        "comment_created_at": "2025-07-12T17:59:03+00:00",
        "comment_author": "bolinfest",
        "comment_body": "Also, I would name the variable `codex_home` rather than `dir`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167146295",
    "pr_number": 1371,
    "pr_file": "codex-rs/core/src/mcp_connection_manager.rs",
    "created_at": "2025-06-25T16:32:02+00:00",
    "commented_code": "for tool in list_result.tools {\n             // TODO(mbolin): escape tool names that contain invalid characters.\n-            let fq_name = fully_qualified_tool_name(&server_name, &tool.name);\n+            let mut fq_name = fully_qualified_tool_name(&server_name, &tool.name);",
    "repo_full_name": "openai/codex",
    "discussion_comments": [
      {
        "comment_id": "2167146295",
        "repo_full_name": "openai/codex",
        "pr_number": 1371,
        "pr_file": "codex-rs/core/src/mcp_connection_manager.rs",
        "discussion_id": "2167146295",
        "commented_code": "@@ -193,7 +198,46 @@ pub async fn list_all_tools(\n \n         for tool in list_result.tools {\n             // TODO(mbolin): escape tool names that contain invalid characters.\n-            let fq_name = fully_qualified_tool_name(&server_name, &tool.name);\n+            let mut fq_name = fully_qualified_tool_name(&server_name, &tool.name);",
        "comment_created_at": "2025-06-25T16:32:02+00:00",
        "comment_author": "bolinfest",
        "comment_body": "`fully_qualified_tool_name()` and `try_parse_fully_qualified_tool_name()` must be symmetric. It is not clear that this is the case given this implementation.\r\n\r\nSomeone told me that, empirically, the model doesn't care about the names of the functions all that much and therefore, we could SHA1 the long name or something and things would still work.\r\n\r\nAnother solution that is somewhat stateful, but more readable for users, would be to get the full list of tool names and only attempt to \"fully qualify them\" when there is a naming collision.",
        "pr_file_module": null
      }
    ]
  }
]