[
  {
    "discussion_id": "1185752329",
    "pr_number": 548,
    "pr_file": "web/extensions/core/maskeditor.js",
    "created_at": "2023-05-05T06:51:33+00:00",
    "commented_code": "+import { app } from \"/scripts/app.js\";\n+import { ComfyDialog, $el } from \"/scripts/ui.js\";\n+import { ComfyApp } from \"/scripts/app.js\";\n+import { ClipspaceDialog } from \"/extensions/core/clipspace.js\";\n+\n+// Helper function to convert a data URL to a Blob object\n+function dataURLToBlob(dataURL) {\n+\tconst parts = dataURL.split(';base64,');\n+\tconst contentType = parts[0].split(':')[1];\n+\tconst byteString = atob(parts[1]);\n+\tconst arrayBuffer = new ArrayBuffer(byteString.length);\n+\tconst uint8Array = new Uint8Array(arrayBuffer);\n+\tfor (let i = 0; i < byteString.length; i++) {\n+\t\tuint8Array[i] = byteString.charCodeAt(i);\n+\t}\n+\treturn new Blob([arrayBuffer], { type: contentType });\n+}\n+\n+function loadedImageToBlob(image) {\n+\tconst canvas = document.createElement('canvas');\n+\n+\tcanvas.width = image.width;\n+\tcanvas.height = image.height;\n+\n+\tconst ctx = canvas.getContext('2d');\n+\n+\tctx.drawImage(image, 0, 0);\n+\n+\tconst dataURL = canvas.toDataURL('image/png', 1);\n+\tconst blob = dataURLToBlob(dataURL);\n+\n+\treturn blob;\n+}\n+\n+async function uploadMask(filepath, formData) {\n+\tawait fetch('/upload/mask', {\n+\t\tmethod: 'POST',\n+\t\tbody: formData\n+\t}).then(response => {}).catch(error => {\n+\t\tconsole.error('Error:', error);\n+\t});\n+\n+\tComfyApp.clipspace.imgs[ComfyApp.clipspace['selectedIndex']] = new Image();\n+\tComfyApp.clipspace.imgs[ComfyApp.clipspace['selectedIndex']].src = `view?filename=${filepath.filename}&type=${filepath.type}`;\n+\n+\tif(ComfyApp.clipspace.images)\n+\t\tComfyApp.clipspace.images[ComfyApp.clipspace['selectedIndex']] = filepath;\n+\n+\tClipspaceDialog.invalidatePreview();\n+}\n+\n+function prepareRGB(image, backupCanvas, backupCtx) {\n+\t// paste mask data into alpha channel\n+\tbackupCtx.drawImage(image, 0, 0, backupCanvas.width, backupCanvas.height);\n+\tconst backupData = backupCtx.getImageData(0, 0, backupCanvas.width, backupCanvas.height);\n+\n+\t// refine mask image\n+\tfor (let i = 0; i < backupData.data.length; i += 4) {\n+\t\tif(backupData.data[i+3] == 255)\n+\t\t\tbackupData.data[i+3] = 0;\n+\t\telse\n+\t\t\tbackupData.data[i+3] = 255;\n+\n+\t\tbackupData.data[i] = 0;\n+\t\tbackupData.data[i+1] = 0;\n+\t\tbackupData.data[i+2] = 0;\n+\t}\n+\n+\tbackupCtx.globalCompositeOperation = 'source-over';\n+\tbackupCtx.putImageData(backupData, 0, 0);\n+}\n+\n+class MaskEditorDialog extends ComfyDialog {\n+\tstatic instance = null;\n+\tconstructor() {\n+\t\tsuper();\n+\t\tthis.element = $el(\"div.comfy-modal\", { parent: document.body }, \n+\t\t\t[ $el(\"div.comfy-modal-content\", \n+\t\t\t\t[...this.createButtons()]),\n+\t\t\t]);\n+\t\tMaskEditorDialog.instance = this;\n+\t}\n+\n+\tcreateButtons() {\n+\t\treturn [];\n+\t}\n+\n+\tclearMask(self) {\n+\t}\n+\n+\tcreateButton(name,callback) {\n+\t\tvar button = document.createElement(\"button\");\n+\t\tbutton.innerText = name;\n+\t\tbutton.style.position = \"absolute\";\n+\t\tbutton.style.top = \"5px\";\n+\t\tbutton.addEventListener(\"click\", callback);\n+\t\treturn button;\n+\t}\n+\n+\tcreateLeftButton(name,left,callback) {\n+\t\tvar button = this.createButton(name,callback);\n+\t\tbutton.style.left = left;\n+\t\treturn button;\n+\t}\n+\n+\tcreateRightButton(name,right,callback) {\n+\t\tvar button = this.createButton(name,callback);\n+\t\tbutton.style.right = right;\n+\t\treturn button;\n+\t}\n+\n+\tcreateLeftSlider(self, name,left,callback) {\n+\t\tconst divElement = document.createElement('div');\n+\t\tdivElement.style.position = \"absolute\";\n+\t\tdivElement.style.top = \"5px\";\n+\t\tdivElement.style.left = left;\n+\t\tdivElement.style.backgroundColor = 'Black';\n+\t\tdivElement.style.paddingLeft = \"10px\";\n+\t\tdivElement.style.paddingRight = \"10px\";\n+\t\tdivElement.style.borderRadius = \"10px\";\n+\n+\t\tself.brush_slider_input = document.createElement('input');\n+\t\tself.brush_slider_input.setAttribute('type', 'range');\n+\t\tself.brush_slider_input.setAttribute('min', '1');\n+\t\tself.brush_slider_input.setAttribute('max', '100');\n+\t\tself.brush_slider_input.setAttribute('value', '10');\n+\n+\t\tconst labelElement = document.createElement(\"label\");\n+\t\tlabelElement.innerHTML = `<font color='white' size='5px'>${name}</font>`;",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1185752329",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 548,
        "pr_file": "web/extensions/core/maskeditor.js",
        "discussion_id": "1185752329",
        "commented_code": "@@ -0,0 +1,571 @@\n+import { app } from \"/scripts/app.js\";\n+import { ComfyDialog, $el } from \"/scripts/ui.js\";\n+import { ComfyApp } from \"/scripts/app.js\";\n+import { ClipspaceDialog } from \"/extensions/core/clipspace.js\";\n+\n+// Helper function to convert a data URL to a Blob object\n+function dataURLToBlob(dataURL) {\n+\tconst parts = dataURL.split(';base64,');\n+\tconst contentType = parts[0].split(':')[1];\n+\tconst byteString = atob(parts[1]);\n+\tconst arrayBuffer = new ArrayBuffer(byteString.length);\n+\tconst uint8Array = new Uint8Array(arrayBuffer);\n+\tfor (let i = 0; i < byteString.length; i++) {\n+\t\tuint8Array[i] = byteString.charCodeAt(i);\n+\t}\n+\treturn new Blob([arrayBuffer], { type: contentType });\n+}\n+\n+function loadedImageToBlob(image) {\n+\tconst canvas = document.createElement('canvas');\n+\n+\tcanvas.width = image.width;\n+\tcanvas.height = image.height;\n+\n+\tconst ctx = canvas.getContext('2d');\n+\n+\tctx.drawImage(image, 0, 0);\n+\n+\tconst dataURL = canvas.toDataURL('image/png', 1);\n+\tconst blob = dataURLToBlob(dataURL);\n+\n+\treturn blob;\n+}\n+\n+async function uploadMask(filepath, formData) {\n+\tawait fetch('/upload/mask', {\n+\t\tmethod: 'POST',\n+\t\tbody: formData\n+\t}).then(response => {}).catch(error => {\n+\t\tconsole.error('Error:', error);\n+\t});\n+\n+\tComfyApp.clipspace.imgs[ComfyApp.clipspace['selectedIndex']] = new Image();\n+\tComfyApp.clipspace.imgs[ComfyApp.clipspace['selectedIndex']].src = `view?filename=${filepath.filename}&type=${filepath.type}`;\n+\n+\tif(ComfyApp.clipspace.images)\n+\t\tComfyApp.clipspace.images[ComfyApp.clipspace['selectedIndex']] = filepath;\n+\n+\tClipspaceDialog.invalidatePreview();\n+}\n+\n+function prepareRGB(image, backupCanvas, backupCtx) {\n+\t// paste mask data into alpha channel\n+\tbackupCtx.drawImage(image, 0, 0, backupCanvas.width, backupCanvas.height);\n+\tconst backupData = backupCtx.getImageData(0, 0, backupCanvas.width, backupCanvas.height);\n+\n+\t// refine mask image\n+\tfor (let i = 0; i < backupData.data.length; i += 4) {\n+\t\tif(backupData.data[i+3] == 255)\n+\t\t\tbackupData.data[i+3] = 0;\n+\t\telse\n+\t\t\tbackupData.data[i+3] = 255;\n+\n+\t\tbackupData.data[i] = 0;\n+\t\tbackupData.data[i+1] = 0;\n+\t\tbackupData.data[i+2] = 0;\n+\t}\n+\n+\tbackupCtx.globalCompositeOperation = 'source-over';\n+\tbackupCtx.putImageData(backupData, 0, 0);\n+}\n+\n+class MaskEditorDialog extends ComfyDialog {\n+\tstatic instance = null;\n+\tconstructor() {\n+\t\tsuper();\n+\t\tthis.element = $el(\"div.comfy-modal\", { parent: document.body }, \n+\t\t\t[ $el(\"div.comfy-modal-content\", \n+\t\t\t\t[...this.createButtons()]),\n+\t\t\t]);\n+\t\tMaskEditorDialog.instance = this;\n+\t}\n+\n+\tcreateButtons() {\n+\t\treturn [];\n+\t}\n+\n+\tclearMask(self) {\n+\t}\n+\n+\tcreateButton(name,callback) {\n+\t\tvar button = document.createElement(\"button\");\n+\t\tbutton.innerText = name;\n+\t\tbutton.style.position = \"absolute\";\n+\t\tbutton.style.top = \"5px\";\n+\t\tbutton.addEventListener(\"click\", callback);\n+\t\treturn button;\n+\t}\n+\n+\tcreateLeftButton(name,left,callback) {\n+\t\tvar button = this.createButton(name,callback);\n+\t\tbutton.style.left = left;\n+\t\treturn button;\n+\t}\n+\n+\tcreateRightButton(name,right,callback) {\n+\t\tvar button = this.createButton(name,callback);\n+\t\tbutton.style.right = right;\n+\t\treturn button;\n+\t}\n+\n+\tcreateLeftSlider(self, name,left,callback) {\n+\t\tconst divElement = document.createElement('div');\n+\t\tdivElement.style.position = \"absolute\";\n+\t\tdivElement.style.top = \"5px\";\n+\t\tdivElement.style.left = left;\n+\t\tdivElement.style.backgroundColor = 'Black';\n+\t\tdivElement.style.paddingLeft = \"10px\";\n+\t\tdivElement.style.paddingRight = \"10px\";\n+\t\tdivElement.style.borderRadius = \"10px\";\n+\n+\t\tself.brush_slider_input = document.createElement('input');\n+\t\tself.brush_slider_input.setAttribute('type', 'range');\n+\t\tself.brush_slider_input.setAttribute('min', '1');\n+\t\tself.brush_slider_input.setAttribute('max', '100');\n+\t\tself.brush_slider_input.setAttribute('value', '10');\n+\n+\t\tconst labelElement = document.createElement(\"label\");\n+\t\tlabelElement.innerHTML = `<font color='white' size='5px'>${name}</font>`;",
        "comment_created_at": "2023-05-05T06:51:33+00:00",
        "comment_author": "missionfloyd",
        "comment_body": "```suggestion\r\n\tcreateButton(name, callback) {\r\n\t\tvar button = document.createElement(\"button\");\r\n\t\tbutton.innerText = name;\r\n\t\tbutton.addEventListener(\"click\", callback);\r\n\t\treturn button;\r\n\t}\r\n\tcreateLeftButton(name, callback) {\r\n\t\tvar button = this.createButton(name, callback);\r\n\t\tbutton.style.cssFloat = \"left\";\r\n\t\tbutton.style.marginRight = \"4px\";\r\n\t\treturn button;\r\n\t}\r\n\tcreateRightButton(name, callback) {\r\n\t\tvar button = this.createButton(name, callback);\r\n\t\tbutton.style.cssFloat = \"right\";\r\n\t\tbutton.style.marginLeft = \"4px\";\r\n\t\treturn button;\r\n\t}\r\n\tcreateLeftSlider(self, name, callback) {\r\n\t\tconst divElement = document.createElement('div');\r\n\t\tdivElement.id = \"maskeditor-slider\";\r\n\t\tdivElement.style.cssFloat = \"left\";\r\n\t\tdivElement.style.fontFamily = \"sans-serif\";\r\n\t\tdivElement.style.marginRight = \"4px\";\r\n\t\tdivElement.style.color = \"var(--input-text)\";\r\n\t\tdivElement.style.backgroundColor = \"var(--comfy-input-bg)\";\r\n\t\tdivElement.style.borderRadius = \"8px\";\r\n\t\tdivElement.style.borderColor = \"var(--border-color)\";\r\n\t\tdivElement.style.borderStyle = \"solid\";\r\n\t\tdivElement.style.fontSize = \"20px\";\r\n\t\tdivElement.style.height = \"21px\";\r\n\t\tdivElement.style.padding = \"1px 6px\";\r\n\t\tdivElement.style.display = \"flex\";\r\n\t\tdivElement.style.position = \"relative\";\r\n\t\tdivElement.style.top = \"2px\";\r\n\t\tself.brush_slider_input = document.createElement('input');\r\n\t\tself.brush_slider_input.setAttribute('type', 'range');\r\n\t\tself.brush_slider_input.setAttribute('min', '1');\r\n\t\tself.brush_slider_input.setAttribute('max', '100');\r\n\t\tself.brush_slider_input.setAttribute('value', '10');\r\n\t\tconst labelElement = document.createElement(\"label\");\r\n\t\tlabelElement.textContent = name;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1158114372",
    "pr_number": 296,
    "pr_file": "web/scripts/widgets.js",
    "created_at": "2023-04-05T07:16:53+00:00",
    "commented_code": "return { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1158114372",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 296,
        "pr_file": "web/scripts/widgets.js",
        "discussion_id": "1158114372",
        "commented_code": "@@ -10,37 +10,167 @@ function getNumberDefaults(inputData, defaultStep) {\n \treturn { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
        "comment_created_at": "2023-04-05T07:16:53+00:00",
        "comment_author": "comfyanonymous",
        "comment_body": "Why did you hardcode the values instead of just using this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1158731632",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 296,
        "pr_file": "web/scripts/widgets.js",
        "discussion_id": "1158114372",
        "commented_code": "@@ -10,37 +10,167 @@ function getNumberDefaults(inputData, defaultStep) {\n \treturn { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
        "comment_created_at": "2023-04-05T16:09:06+00:00",
        "comment_author": "FizzleDorf",
        "comment_body": "the default values were causing unexpected behaviour for multiple values. Other set max values were simple too high (for example steps beyond 1000) and would cause render times that would be simply too long for anyone to reasonably complete. The other reason for this is I plan on replacing these values with user inputs for custom ranges. The settings I picked here complete generations within a reasonable time-frame and have enough variation for seeing the effects of different parameters. If you would like, I can remove them or just add the user inputs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1159090541",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 296,
        "pr_file": "web/scripts/widgets.js",
        "discussion_id": "1158114372",
        "commented_code": "@@ -10,37 +10,167 @@ function getNumberDefaults(inputData, defaultStep) {\n \treturn { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
        "comment_created_at": "2023-04-05T22:36:15+00:00",
        "comment_author": "comfyanonymous",
        "comment_body": "it's better from a code quality perspective to not hardcode anything and use the values from the backend because it's easier to maintain.",
        "pr_file_module": null
      },
      {
        "comment_id": "1159686493",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 296,
        "pr_file": "web/scripts/widgets.js",
        "discussion_id": "1158114372",
        "commented_code": "@@ -10,37 +10,167 @@ function getNumberDefaults(inputData, defaultStep) {\n \treturn { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
        "comment_created_at": "2023-04-06T11:41:25+00:00",
        "comment_author": "flyingshutter",
        "comment_body": "In case you don't already know, you can access a widget's native step size like this:\r\n```const step_size = targetWidget.options?.step / 10;```",
        "pr_file_module": null
      },
      {
        "comment_id": "1159953563",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 296,
        "pr_file": "web/scripts/widgets.js",
        "discussion_id": "1158114372",
        "commented_code": "@@ -10,37 +10,167 @@ function getNumberDefaults(inputData, defaultStep) {\n \treturn { val: defaultVal, config: { min, max, step: 10.0 * step } };\n }\n \n-export function addRandomizeWidget(node, targetWidget, name, defaultValue = false) {\n-\tconst randomize = node.addWidget(\"toggle\", name, defaultValue, function (v) {}, {\n-\t\ton: \"enabled\",\n-\t\toff: \"disabled\",\n+export function addValueControlWidget(node, targetWidget, defaultValue = \"randomize\", values) {\n+\tconst valueControl = node.addWidget(\"combo\", \"control_after_generate\", defaultValue, function (v) { }, {\n+\t\tvalues: [\"fixed\", \"increment\", \"decrement\", \"randomize\"],\n \t\tserialize: false, // Don't include this in prompt.\n-\t});\n+\t})\n+\tvalueControl.afterQueued = () => {\n+\n+\t\tvar v = valueControl.value;\n+\t\tvar w = targetWidget.name;\n+\n+\t\tlet min = 0.0;\n+\t\tlet max = targetWidget.options?.max;\n+\t\tlet range = Math.max(min, max);\n+\n+\n+\t\t//set the max/min values depending on the parameter\n+\t\tswitch (w) {\n+\t\t\tcase (\"seed\"):\n+\t\t\tcase (\"noise_seed\"):\n+\t\t\t\tconsole.log(\"noise_seed/seed\");\n+\t\t\t\tmax = 4294967294; // limit max to something that javascript can handle\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"cfg\"):\n+\t\t\t\tconsole.log(\"cfg\");\n+\t\t\t\tmax = 50.0;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"steps\"):\n+\t\t\t\tmax = 100;\n+\t\t\t\tmin = 1;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"start_at_step\"):\n+\t\t\t\tmax = 50000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"end_at_step\"):\n+\t\t\t\tmin = 50000;\n+\t\t\t\tmax = 100000;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"denoise\"):\n+\t\t\t\tconsole.log(\"denoise\");\n+\t\t\t\tmax = 1.0;\n+\t\t\t\tmin = 0.001;\n+\t\t\t\trange = Math.max(min, max);\n+\t\t\t\tbreak;\n+\t\t\tcase (\"height\"):\n+\t\t\tcase (\"width\"):\n+\t\t\t\tconsole.log(\"width/height\");\n+\t\t\t\tmin = 64;\n+\t\t\t\tmax = 1920;\n+\t\t\t\trange = Math.max(0, Math.floor((max - min) / 64));\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tconsole.log(\"default (Failed)\");\n+\t\t\t\tbreak;\n+\t\t}\n \n-\trandomize.afterQueued = () => {\n-\t\tif (randomize.value) {\n-\t\t\tconst min = targetWidget.options?.min;\n-\t\t\tlet max = targetWidget.options?.max;",
        "comment_created_at": "2023-04-06T15:24:40+00:00",
        "comment_author": "FizzleDorf",
        "comment_body": "I've removed setting the min/max values as requested.\r\n\r\n>const step_size = targetWidget.options?.step / 10;\r\n\r\nI could add this if you want comfy, that way something unreasonable like 4k steps. Also, consider changing the max seed as brought up in #352. Other than that it's good to go.",
        "pr_file_module": null
      }
    ]
  }
]