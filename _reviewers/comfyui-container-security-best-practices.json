[
  {
    "discussion_id": "1912457303",
    "pr_number": 1469,
    "pr_file": "Dockerfile",
    "created_at": "2025-01-12T13:54:47+00:00",
    "commented_code": "+# syntax=docker/dockerfile:1\n+\n+ARG PYTHON_VERSION=3.11\n+\n+FROM python:${PYTHON_VERSION}-slim\n+\n+ARG PYTORCH_INSTALL_ARGS=\"\"\n+ARG EXTRA_ARGS=\"\"\n+ARG USERNAME=comfyui\n+ARG USER_UID=1000\n+ARG USER_GID=${USER_UID}\n+\n+# Fail fast on errors or unset variables\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN <<EOF\n+\tgroupadd --gid ${USER_GID} ${USERNAME}\n+\tuseradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME}\n+EOF\n+\n+RUN <<EOF\n+\tapt-get update\n+\tapt-get install -y --no-install-recommends \\\n+\t\tgit \\\n+\t\tgit-lfs \\\n+\t\trsync \\\n+\t\tfonts-recommended\n+EOF\n+\n+# run instructions as user\n+USER ${USER_UID}:${USER_GID}\n+\n+WORKDIR /app\n+\n+ENV XDG_CACHE_HOME=/cache\n+ENV PIP_CACHE_DIR=/cache/pip\n+ENV VIRTUAL_ENV=/app/venv\n+ENV VIRTUAL_ENV_CUSTOM=/app/custom_venv\n+\n+# create cache directory. During build we will use a cache mount,\n+# but later this is useful for custom node installs\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tmkdir -p ${PIP_CACHE_DIR}\n+\n+# create virtual environment to manage packages\n+RUN python -m venv ${VIRTUAL_ENV}\n+\n+# run python from venv (prefer custom_venv over baked-in one)\n+ENV PATH=\"${VIRTUAL_ENV_CUSTOM}/bin:${VIRTUAL_ENV}/bin:${PATH}\"\n+\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tpip install torch torchvision torchaudio ${PYTORCH_INSTALL_ARGS}\n+\n+# copy requirements files first so packages can be cached separately\n+COPY --chown=${USER_UID}:${USER_GID} requirements.txt .\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tpip install -r requirements.txt\n+\n+COPY --chown=${USER_UID}:${USER_GID} . .\n+\n+COPY --chown=nobody:${USER_GID} .git .git\n+\n+# default environment variables\n+ENV COMFYUI_ADDRESS=0.0.0.0\n+ENV COMFYUI_PORT=8188\n+ENV COMFYUI_EXTRA_BUILD_ARGS=\"${EXTRA_ARGS}\"\n+ENV COMFYUI_EXTRA_ARGS=\"\"\n+# default start command\n+CMD \\\n+\tif [ -d \"${VIRTUAL_ENV_CUSTOM}\" ]; then \\\n+\t\trsync -aP \"${VIRTUAL_ENV}/\" \"${VIRTUAL_ENV_CUSTOM}/\" ;\\\n+\t\tsed -i \"s!${VIRTUAL_ENV}!${VIRTUAL_ENV_CUSTOM}!g\" \"${VIRTUAL_ENV_CUSTOM}/pyvenv.cfg\" ;\\\n+\tfi ;\\\n+\tpython -u main.py --listen ${COMFYUI_ADDRESS} --port ${COMFYUI_PORT} ${COMFYUI_EXTRA_BUILD_ARGS} ${COMFYUI_EXTRA_ARGS}",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1912457303",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": "Dockerfile",
        "discussion_id": "1912457303",
        "commented_code": "@@ -0,0 +1,74 @@\n+# syntax=docker/dockerfile:1\n+\n+ARG PYTHON_VERSION=3.11\n+\n+FROM python:${PYTHON_VERSION}-slim\n+\n+ARG PYTORCH_INSTALL_ARGS=\"\"\n+ARG EXTRA_ARGS=\"\"\n+ARG USERNAME=comfyui\n+ARG USER_UID=1000\n+ARG USER_GID=${USER_UID}\n+\n+# Fail fast on errors or unset variables\n+SHELL [\"/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\n+\n+RUN <<EOF\n+\tgroupadd --gid ${USER_GID} ${USERNAME}\n+\tuseradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME}\n+EOF\n+\n+RUN <<EOF\n+\tapt-get update\n+\tapt-get install -y --no-install-recommends \\\n+\t\tgit \\\n+\t\tgit-lfs \\\n+\t\trsync \\\n+\t\tfonts-recommended\n+EOF\n+\n+# run instructions as user\n+USER ${USER_UID}:${USER_GID}\n+\n+WORKDIR /app\n+\n+ENV XDG_CACHE_HOME=/cache\n+ENV PIP_CACHE_DIR=/cache/pip\n+ENV VIRTUAL_ENV=/app/venv\n+ENV VIRTUAL_ENV_CUSTOM=/app/custom_venv\n+\n+# create cache directory. During build we will use a cache mount,\n+# but later this is useful for custom node installs\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tmkdir -p ${PIP_CACHE_DIR}\n+\n+# create virtual environment to manage packages\n+RUN python -m venv ${VIRTUAL_ENV}\n+\n+# run python from venv (prefer custom_venv over baked-in one)\n+ENV PATH=\"${VIRTUAL_ENV_CUSTOM}/bin:${VIRTUAL_ENV}/bin:${PATH}\"\n+\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tpip install torch torchvision torchaudio ${PYTORCH_INSTALL_ARGS}\n+\n+# copy requirements files first so packages can be cached separately\n+COPY --chown=${USER_UID}:${USER_GID} requirements.txt .\n+RUN --mount=type=cache,target=/cache/,uid=${USER_UID},gid=${USER_GID} \\\n+\tpip install -r requirements.txt\n+\n+COPY --chown=${USER_UID}:${USER_GID} . .\n+\n+COPY --chown=nobody:${USER_GID} .git .git\n+\n+# default environment variables\n+ENV COMFYUI_ADDRESS=0.0.0.0\n+ENV COMFYUI_PORT=8188\n+ENV COMFYUI_EXTRA_BUILD_ARGS=\"${EXTRA_ARGS}\"\n+ENV COMFYUI_EXTRA_ARGS=\"\"\n+# default start command\n+CMD \\\n+\tif [ -d \"${VIRTUAL_ENV_CUSTOM}\" ]; then \\\n+\t\trsync -aP \"${VIRTUAL_ENV}/\" \"${VIRTUAL_ENV_CUSTOM}/\" ;\\\n+\t\tsed -i \"s!${VIRTUAL_ENV}!${VIRTUAL_ENV_CUSTOM}!g\" \"${VIRTUAL_ENV_CUSTOM}/pyvenv.cfg\" ;\\\n+\tfi ;\\\n+\tpython -u main.py --listen ${COMFYUI_ADDRESS} --port ${COMFYUI_PORT} ${COMFYUI_EXTRA_BUILD_ARGS} ${COMFYUI_EXTRA_ARGS}",
        "comment_created_at": "2025-01-12T13:54:47+00:00",
        "comment_author": "codingjoe",
        "comment_body": "You probably want to prevent injections here. Tho, there are latter vars do this on purpose.\r\n```suggestion\r\n\tpython -u main.py --listen \"${COMFYUI_ADDRESS}\" --port \"${COMFYUI_PORT}\" ${COMFYUI_EXTRA_BUILD_ARGS} ${COMFYUI_EXTRA_ARGS}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1966691253",
    "pr_number": 1469,
    "pr_file": "Dockerfile",
    "created_at": "2025-02-23T07:13:20+00:00",
    "commented_code": "+# syntax=docker/dockerfile:1\n+\n+ARG PYTHON_VERSION=3.12\n+\n+FROM python:${PYTHON_VERSION}-slim\n+\n+ARG PYTORCH_INSTALL_ARGS=\"\"\n+ARG EXTRA_ARGS=\"\"\n+ARG USERNAME=comfyui\n+ARG USER_UID=1000",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1966691253",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": "Dockerfile",
        "discussion_id": "1966691253",
        "commented_code": "@@ -0,0 +1,79 @@\n+# syntax=docker/dockerfile:1\n+\n+ARG PYTHON_VERSION=3.12\n+\n+FROM python:${PYTHON_VERSION}-slim\n+\n+ARG PYTORCH_INSTALL_ARGS=\"\"\n+ARG EXTRA_ARGS=\"\"\n+ARG USERNAME=comfyui\n+ARG USER_UID=1000",
        "comment_created_at": "2025-02-23T07:13:20+00:00",
        "comment_author": "polarathene",
        "comment_body": "The default used by official DB images (redis,postgres,mongo,mysql,etc) is `999` for both UID and GID.\r\n\r\nI understand the intention here is for rootful containers to default to a more convenient ownership and/or UID of processes that will run in the container so that they're write to storage with that ownership...\r\n\r\nHowever, should the user install some third-party code, or some other vulnerability be exploited to enable a container escape, this would be similar to escaping as root (_assuming the convenience is on user facing systems rather than servers, where the environment is often configured to allow running docker CLI commands without requiring credentials_).\r\n\r\nAs such I'd discourage this default choice. You also shouldn't need to depend on it for building an image.\r\n\r\n---\r\n\r\nThe official Docker DB images tend to have an entrypoint script with [this logic](https://github.com/valkey-io/valkey-container/blob/796eef76df6747fcf3c5ecb5d84ff55fbd259d87/8.0/debian/docker-entrypoint.sh#L10-L14) to correct ownership mismatch as the container root user to the non-root user that it switches to internally. That only runs when the container is provided with a `--user` (Docker CLI) / `user:` (`compose.yaml`) option to override the container user.\r\n\r\nThat referenced entrypoint script [then sets a umask](https://github.com/valkey-io/valkey-container/blob/796eef76df6747fcf3c5ecb5d84ff55fbd259d87/8.0/debian/docker-entrypoint.sh#L16-L20) since for databases, it's wiser to restrict access and this will ensure any new files or folders created at runtime are not accessible to group/other users, only the file owner.\r\n\r\nFinally the entrypoint [uses `exec`](https://github.com/valkey-io/valkey-container/blob/796eef76df6747fcf3c5ecb5d84ff55fbd259d87/8.0/debian/docker-entrypoint.sh#L22C1-L22C30) to execute a command and replace the current shell process with that (_which ensures signals are properly forwarded_). There's some other parts in the script to support custom command / `CMD` from the user when it's only options, and an ENV they have for alternatively providing those too (_like the you're already doing in the current `Dockerfile` iteration_).\r\n\r\n---\r\n\r\nIntroducing an `ENTRYPOINT` script was [suggested in my previous review feedback](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1592174317), with reluctance expressed regarding it adding friction to the review process.\r\n\r\nNot handling this sort of thing properly though may result in support requests / complaints that instead has maintainers drop official image support. So I'm proposing one with references and context to provide confidence in it. There should be little need to modify it going forward.",
        "pr_file_module": null
      },
      {
        "comment_id": "1966691260",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": "Dockerfile",
        "discussion_id": "1966691253",
        "commented_code": "@@ -0,0 +1,79 @@\n+# syntax=docker/dockerfile:1\n+\n+ARG PYTHON_VERSION=3.12\n+\n+FROM python:${PYTHON_VERSION}-slim\n+\n+ARG PYTORCH_INSTALL_ARGS=\"\"\n+ARG EXTRA_ARGS=\"\"\n+ARG USERNAME=comfyui\n+ARG USER_UID=1000",
        "comment_created_at": "2025-02-23T07:13:26+00:00",
        "comment_author": "polarathene",
        "comment_body": "## Reference\r\n\r\nFor context, here's where these were implemented/discussed in the official docker images:\r\n- `find` + `chown`: https://github.com/redis/docker-library-redis/pull/166\r\n- `setpriv`: https://github.com/redis/docker-library-redis/pull/48 (_`gosu` was used originally, Valkey's image changed to `setpriv` [due to security concerns](https://github.com/valkey-io/valkey-container/issues/22#issuecomment-2148395276), [considered as equivalent in functionality](https://github.com/tianon/gosu/issues/59), but there is a difference regarding `HOME` ENV IIRC, `setpriv` will not change that_)\r\n- `umask`: https://github.com/redis/docker-library-redis/issues/305\r\n- [`exec` is important when a container inits via a shell script](https://stackoverflow.com/questions/32255814/what-purpose-does-using-exec-in-docker-entrypoint-scripts-serve/32261019#32261019) (vs direct binary call as `ENTRYPOINT`)\r\n- [PID 1 importance with `exec` + `ENTRYPOINT` script](https://www.docker.com/blog/docker-best-practices-choosing-between-run-cmd-and-entrypoint/)\r\n\r\nIf you need anything explained about the bash syntax below, let me know. I have revised it a little with improvements that should help make it easier to grok / maintain.\r\n\r\n**NOTE:** In Debian `/bin/sh` links to `/usr/bin/dash`, not bash. In Alpine images you'd get a link to ash (_which lacks some bash features like arrays_), and other glibc base images may link to bash (Fedora I think), so be sure to use shebangs that explicitly call for bash and consider it as an explicit `SHELL` instruction in the `Dockerfile` if potentially using bash in `RUN` / `CMD` (_without an `ENTRYPOINT`_).\r\n\r\n**`./docker/entrypoint.sh`:**\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\nset -e\r\n\r\n# Optional, for convenience:\r\n# If the user provided a custom command that starts with a dash,\r\n# then treat the command as args/options to append to the default CMD:\r\nif [[ \"${1#-}\" != \"${1}\" ]]; then\r\n    set -- comfyui-start \"${@}\"\r\nfi\r\n\r\nexport XDG_DATA_HOME=\"${XDG_DATA_HOME:-/service/comfyui/data}\"\r\n# Workaround until resolved: https://github.com/comfyanonymous/ComfyUI/issues/8110\r\nif [[ ! -d \"${XDG_DATA_HOME}/custom_nodes\" ]]; then\r\n    mkdir -p \"${XDG_DATA_HOME}/custom_nodes\"\r\nfi\r\n\r\n# Optional, for security (non-root switch) + convenience (chown):\r\n# Support `docker run --user` by only running `chown` when using the default CMD + USER (root):\r\n# 1. Ensure the data directory has the expected ownership of the non-root user (`comfyui` user).\r\n# 2. Switch to the `comfyui` user + group via `setpriv` which will re-run this entrypoint script.\r\n# NOTE: `setpriv` will change the UID/GID to non-root, but will not adjust ENV like HOME.\r\n# If a service requires such, it must be set explicitly prior to starting that service.\r\nif [[ \"${1}\" == 'comfyui-start' && \"$(id -u)\" == '0' && \"${PG_UID}\" != '0' ]]; then\r\n    echo 'Switching to non-root user'\r\n    # Assign ownership to the comfyui users data directory (used as ComfyUI `--base-directory`):\r\n    find \"${XDG_DATA_HOME}\" -not -user comfyui -exec chown comfyui:comfyui '{}' +\r\n    # Assign ownership to the VENV (this is large, switching will be slow)\r\n    #find \"/app/venv\" -not -user comfyui -exec chown comfyui:comfyui '{}' +\r\n    # Update HOME env for pip to be able to write cache (required for ComfyUI-Manager)\r\n    export HOME='/home/comfyui'\r\n    # Run this entrypoint script again (with any additional args provided), but as the `comfyui` user:\r\n    exec setpriv --reuid=comfyui --regid=comfyui --clear-groups -- \"${0}\" \"${@}\"\r\nfi\r\n\r\n# Optional, for extra security:\r\n# When `umask` is the default (0022),\r\n# Ensure only the owner can access files created by the process at runtime:\r\nif [[ \"$(umask)\" == '0022' ]]; then\r\n    umask 0077\r\nfi\r\n\r\n# Run the intended command, replacing the active process (this shell) as PID 1:\r\nexec \"${@}\"\r\n```\r\n\r\n**`./docker/start.sh`:** (_could technically exist as part of the entrypoint, but separating responsibility is better_)\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\n# Support for persisting Python venv to a volume mount:\r\n# https://github.com/comfyanonymous/ComfyUI/pull/1469#issuecomment-2034975575\r\n# - Sync the containers internal venv + correct the absolute path in `pyenv.cfg`\r\n# - The PATH env gives preference to the custom location when present\r\n#\r\n# NOTE: rsync will copy over any updates from the source path overwriting the\r\n# equivalent at the destination path. Any other files at the destination that\r\n# don't exist at the source path will be left as-is.\r\nif [[ -d \"${VIRTUAL_ENV_CUSTOM}\" ]]; then\r\n    echo \"Syncing '${VIRTUAL_ENV}/' to '${VIRTUAL_ENV_CUSTOM}/'\"\r\n    rsync -a \"${VIRTUAL_ENV}/\" \"${VIRTUAL_ENV_CUSTOM}/\"\r\n    sed -i \"s!${VIRTUAL_ENV}!${VIRTUAL_ENV_CUSTOM}!g\" \"${VIRTUAL_ENV_CUSTOM}/pyvenv.cfg\"\r\nfi\r\n\r\n# Implicitly prepend `--cpu` to the args when running the CPU image variant:\r\nif [[ \"${IMAGE_VARIANT}\" == 'cpu' ]]; then\r\n    set -- '--cpu' \"${@}\"\r\nfi\r\n\r\nexec python -u /opt/comfyui/app/main.py \\\r\n    --listen \"${COMFYUI_ADDRESS}\" \\\r\n    --port \"${COMFYUI_PORT}\" \\\r\n    --base-directory \"${XDG_DATA_HOME}\" \\\r\n    ${COMFYUI_EXTRA_ARGS} ${@}\r\n```\r\n\r\n- `-P` flag removed from `rsync`, there's like 30k files in the venv at first sync, that's a considerable amount of noise to output, just go with a single line to stdout to communicate any delay instead \ud83d\ude05 \r\n- The `python -u` could drop the `-u` for `ENV PYTHONUNBUFFERED=1` in the `Dockerfile` which might be better should the container try to use `python` at any other point (_such as a running container with a user shelling in and troubleshooting or running their own python scripts, would also work with python shebangs_).\r\n- I still don't really see the point of the `--listen` + `--port` options with ENV set to the defaults ComfyUI already uses... users could just do `docker run image-name --listen 127.0.0.1 --port 80` (_or equivalent `command:` in `compose.yaml`_), if they need more flexibility via ENV they could manage that themselves, the image itself doesn't really need to support that \ud83e\udd37\u200d\u2642\ufe0f \r\n\r\n```Dockerfile\r\n# syntax=docker/dockerfile:1\r\n\r\n# Default to CPU:\r\nARG VARIANT=\"cpu\"\r\nARG PYTORCH_INSTALL_ARGS=\"--index-url https://download.pytorch.org/whl/${VARIANT}\"\r\n\r\nARG PYTHON_VERSION=3.12\r\nFROM python:${PYTHON_VERSION}-slim\r\n\r\n# Fail fast on errors or unset variables\r\nSHELL [\"/usr/bin/bash\", \"-eux\", \"-o\", \"pipefail\", \"-c\"]\r\n\r\nARG DEBIAN_FRONTEND=noninteractive\r\nRUN <<HEREDOC\r\n    # Create comfyui user + group (reserving a fixed ID before any packages install):\r\n    # NOTE: Debian specific `adduser` (more convenient than the alternative `useradd`)\r\n    # - `--system` intentionally ensures no login shell or password (system user)\r\n    # - `--home` will create the home dir (system users default to /nonexistent)\r\n    # - `--group` creates a group with the same user and ID (aborts if already taken)\r\n    adduser --system --home /home/comfyui --uid 999 --group comfyui\r\n\r\n    apt-get update\r\n    apt-get install -y --no-install-recommends \\\r\n        git \\\r\n        git-lfs \\\r\n        rsync \\\r\n        fonts-recommended\r\nHEREDOC\r\n\r\nARG XDG_CACHE_HOME=/cache\r\n# This ENV is used by Python tooling, normally it's set by activating a venv:\r\nENV VIRTUAL_ENV=/app/venv\r\n# This ENV isn't standard, but will \r\nENV VIRTUAL_ENV_CUSTOM=/app/custom_venv\r\n# Run python from venv (prefer the custom venv when available)\r\nENV PATH=\"${VIRTUAL_ENV_CUSTOM}/bin:${VIRTUAL_ENV}/bin:${PATH}\"\r\n\r\nARG PYTORCH_INSTALL_ARGS\r\n# Create a virtual environment + install base packages:\r\nRUN --mount=type=cache,target=/cache <<HEREDOC\r\n    python -m venv \"${VIRTUAL_ENV}\"\r\n    pip install torch torchvision torchaudio ${PYTORCH_INSTALL_ARGS}\r\nHEREDOC\r\n\r\n# Separate layer to not invalidate the much larger torch layer,\r\n# This layer will invalidate when requirements.txt is updated.\r\nRUN --mount=type=cache,target=/cache \\\r\n    --mount=type=bind,source=requirements.txt,target=requirements.txt \\\r\n    <<HEREDOC\r\n    pip install -r requirements.txt\r\n\r\n    # Optional: Prevents a concern with installing custom nodes,\r\n    # that introduce an incompatible cv2 dependency:\r\n    # https://github.com/comfyanonymous/ComfyUI/pull/1469#issuecomment-2571452051\r\n    pip install opencv-python-headless\r\nHEREDOC\r\n\r\n# Copy over everything from the git clone, except files matching `.dockerignore` patterns:\r\nCOPY . /opt/comfyui/app/\r\n\r\n# Workaround due to the top-level file organization of the repo:\r\n# This places the scripts in the PATH and adjusts filenames to look more like commands\r\nRUN <<HEREDOC\r\n  cd /opt/comfyui/app\r\n  mv docker/start.sh /usr/local/bin/comfyui-start\r\n  mv docker/entrypoint.sh /usr/local/bin/comfyui-entrypoint\r\n  rm -rf docker/\r\n  chmod +x /usr/local/bin/comfyui-*\r\nHEREDOC\r\n\r\nARG VARIANT\r\nENV IMAGE_VARIANT=\"${VARIANT}\"\r\n\r\n# Default environment variables used by `comfyui-start`:\r\nENV COMFYUI_ADDRESS=0.0.0.0\r\nENV COMFYUI_PORT=8188\r\nENV COMFYUI_EXTRA_ARGS=\"\"\r\n\r\nENTRYPOINT [\"/usr/local/bin/comfyui-entrypoint\"]\r\nCMD [\"comfyui-start\"]\r\n```\r\n\r\n- Removed `PIP_CACHE_DIR=/cache/pip`, `pip` will respect `XDG_CACHE_HOME`. You don't need to make the cache dir upfront either, it'll do that when it's missing.\r\n- Switched `XDG_CACHE_HOME` from `ENV` to `ARG`, it's only needed for the cache mount during build, afterwards it makes more sense to change the location. I [previously highlighted `ENV` => `ARG`](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1912221548) in prior review feedback.\r\n- Removed `WORKDIR`, no apparent need for it. It was used for avoiding more explicit/absolute paths with `COPY` and calling `main.py`.\r\n- I am inclined to drop the ENV for `COMFYUI_ADDRESS` + `COMFYUI_PORT` as [per prior review feedback](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1912095778), there's little value in it. You shouldn't be adding them to the image by default for \"potential\" specific requirements... it is far better to have feature requests for those so they're known instead of unknown and can be documented accordingly (_even if that's just via `git blame` history tying a PR to an issue_).\r\n\r\nCould additionally:\r\n- [Cache `apt` properly](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1592131528).",
        "pr_file_module": null
      }
    ]
  }
]