[
  {
    "discussion_id": "2195999578",
    "pr_number": 8833,
    "pr_file": "comfy_api/v3/io.py",
    "created_at": "2025-07-09T21:16:00+00:00",
    "commented_code": "type_clone: type[ComfyNodeV3] = type(f\"CLEAN_{c_type.__name__}\", c_type.__bases__, {})\n         # TODO: what parameters should be carried over?\n         type_clone.SCHEMA = c_type.SCHEMA\n-        type_clone.hidden = HiddenHolder.from_dict(hidden_inputs)\n+        type_clone.hidden = HiddenHolder.from_dict(hidden_inputs) if hidden_inputs is not None else None",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "2195999578",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 8833,
        "pr_file": "comfy_api/v3/io.py",
        "discussion_id": "2195999578",
        "commented_code": "@@ -1101,7 +1134,7 @@ def prepare_class_clone(cls, hidden_inputs: dict, *args, **kwargs) -> type[Comfy\n         type_clone: type[ComfyNodeV3] = type(f\"CLEAN_{c_type.__name__}\", c_type.__bases__, {})\n         # TODO: what parameters should be carried over?\n         type_clone.SCHEMA = c_type.SCHEMA\n-        type_clone.hidden = HiddenHolder.from_dict(hidden_inputs)\n+        type_clone.hidden = HiddenHolder.from_dict(hidden_inputs) if hidden_inputs is not None else None",
        "comment_created_at": "2025-07-09T21:16:00+00:00",
        "comment_author": "Kosinkadink",
        "comment_body": "In my PR last night, I made from_dict work with a None input; we still want type_clone.hidden to have a valid HiddenHolder object instead of None to prevent attribute errors. You can safely remove this and it should work!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2195792310",
    "pr_number": 8844,
    "pr_file": "server.py",
    "created_at": "2025-07-09T19:10:43+00:00",
    "commented_code": "prompt_id = request.match_info.get(\"prompt_id\", None)\n             return web.json_response(self.prompt_queue.get_history(prompt_id=prompt_id))\n \n+        @routes.get(\"/history_v2\")\n+        async def get_ordered_history(request):\n+            max_items = request.rel_url.query.get(\"max_items\", None)\n+            if max_items is not None:\n+                max_items = int(max_items)\n+\n+            offset = request.rel_url.query.get(\"offset\", None)",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "2195792310",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 8844,
        "pr_file": "server.py",
        "discussion_id": "2195792310",
        "commented_code": "@@ -617,6 +617,25 @@ async def get_history_prompt_id(request):\n             prompt_id = request.match_info.get(\"prompt_id\", None)\n             return web.json_response(self.prompt_queue.get_history(prompt_id=prompt_id))\n \n+        @routes.get(\"/history_v2\")\n+        async def get_ordered_history(request):\n+            max_items = request.rel_url.query.get(\"max_items\", None)\n+            if max_items is not None:\n+                max_items = int(max_items)\n+\n+            offset = request.rel_url.query.get(\"offset\", None)",
        "comment_created_at": "2025-07-09T19:10:43+00:00",
        "comment_author": "bigcat88",
        "comment_body": "maybe set the default as `-1` instead of comparing later to `None`? _(-2 lines of code)_",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1900978712",
    "pr_number": 6308,
    "pr_file": "comfy_extras/nodes_load_3d.py",
    "created_at": "2025-01-02T15:16:36+00:00",
    "commented_code": "CATEGORY = \"3d\"\n \n     def process(self, model_file, image, **kwargs):\n-        imagepath = folder_paths.get_annotated_filepath(image)\n+        if isinstance(image, dict):\n+            image_path = folder_paths.get_annotated_filepath(image['image'])\n+            mask_path = folder_paths.get_annotated_filepath(image['mask'])\n \n-        load_image_node = nodes.LoadImage()\n+            load_image_node = nodes.LoadImage()\n+            output_image, ignore_mask = load_image_node.load_image(image=image_path)\n+            ignore_image, output_mask = load_image_node.load_image(image=mask_path)\n \n-        output_image, output_mask = load_image_node.load_image(image=imagepath)\n-\n-        return output_image, output_mask, model_file,\n+            return output_image, output_mask, model_file,\n+        else:",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1900978712",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 6308,
        "pr_file": "comfy_extras/nodes_load_3d.py",
        "discussion_id": "1900978712",
        "commented_code": "@@ -37,13 +38,20 @@ def INPUT_TYPES(s):\n     CATEGORY = \"3d\"\n \n     def process(self, model_file, image, **kwargs):\n-        imagepath = folder_paths.get_annotated_filepath(image)\n+        if isinstance(image, dict):\n+            image_path = folder_paths.get_annotated_filepath(image['image'])\n+            mask_path = folder_paths.get_annotated_filepath(image['mask'])\n \n-        load_image_node = nodes.LoadImage()\n+            load_image_node = nodes.LoadImage()\n+            output_image, ignore_mask = load_image_node.load_image(image=image_path)\n+            ignore_image, output_mask = load_image_node.load_image(image=mask_path)\n \n-        output_image, output_mask = load_image_node.load_image(image=imagepath)\n-\n-        return output_image, output_mask, model_file,\n+            return output_image, output_mask, model_file,\n+        else:",
        "comment_created_at": "2025-01-02T15:16:36+00:00",
        "comment_author": "huchenlei",
        "comment_body": "Can we unify the format to always be dict so that we can avoid the type check? It's ok to leave like that for compatibility now, but please leave a comment here on cleaning up.",
        "pr_file_module": null
      },
      {
        "comment_id": "1900988265",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 6308,
        "pr_file": "comfy_extras/nodes_load_3d.py",
        "discussion_id": "1900978712",
        "commented_code": "@@ -37,13 +38,20 @@ def INPUT_TYPES(s):\n     CATEGORY = \"3d\"\n \n     def process(self, model_file, image, **kwargs):\n-        imagepath = folder_paths.get_annotated_filepath(image)\n+        if isinstance(image, dict):\n+            image_path = folder_paths.get_annotated_filepath(image['image'])\n+            mask_path = folder_paths.get_annotated_filepath(image['mask'])\n \n-        load_image_node = nodes.LoadImage()\n+            load_image_node = nodes.LoadImage()\n+            output_image, ignore_mask = load_image_node.load_image(image=image_path)\n+            ignore_image, output_mask = load_image_node.load_image(image=mask_path)\n \n-        output_image, output_mask = load_image_node.load_image(image=imagepath)\n-\n-        return output_image, output_mask, model_file,\n+            return output_image, output_mask, model_file,\n+        else:",
        "comment_created_at": "2025-01-02T15:26:21+00:00",
        "comment_author": "jtydhr88",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573749460",
    "pr_number": 2666,
    "pr_file": "comfy/graph.py",
    "created_at": "2024-04-21T13:15:11+00:00",
    "commented_code": "+import nodes\n+\n+from comfy.graph_utils import is_link\n+\n+class DependencyCycleError(Exception):\n+    pass\n+\n+class NodeInputError(Exception):\n+    pass\n+\n+class DynamicPrompt:\n+    def __init__(self, original_prompt):\n+        # The original prompt provided by the user\n+        self.original_prompt = original_prompt\n+        # Any extra pieces of the graph created during execution\n+        self.ephemeral_prompt = {}\n+        self.ephemeral_parents = {}\n+        self.ephemeral_display = {}\n+\n+    def get_node(self, node_id):\n+        if node_id in self.ephemeral_prompt:\n+            return self.ephemeral_prompt[node_id]\n+        if node_id in self.original_prompt:\n+            return self.original_prompt[node_id]\n+        return None",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1573749460",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 2666,
        "pr_file": "comfy/graph.py",
        "discussion_id": "1573749460",
        "commented_code": "@@ -0,0 +1,227 @@\n+import nodes\n+\n+from comfy.graph_utils import is_link\n+\n+class DependencyCycleError(Exception):\n+    pass\n+\n+class NodeInputError(Exception):\n+    pass\n+\n+class DynamicPrompt:\n+    def __init__(self, original_prompt):\n+        # The original prompt provided by the user\n+        self.original_prompt = original_prompt\n+        # Any extra pieces of the graph created during execution\n+        self.ephemeral_prompt = {}\n+        self.ephemeral_parents = {}\n+        self.ephemeral_display = {}\n+\n+    def get_node(self, node_id):\n+        if node_id in self.ephemeral_prompt:\n+            return self.ephemeral_prompt[node_id]\n+        if node_id in self.original_prompt:\n+            return self.original_prompt[node_id]\n+        return None",
        "comment_created_at": "2024-04-21T13:15:11+00:00",
        "comment_author": "kvochko",
        "comment_body": "Another small comment - could you please either make sure that in every call to this function you handle None correctly, or raise an exception here?",
        "pr_file_module": null
      }
    ]
  }
]