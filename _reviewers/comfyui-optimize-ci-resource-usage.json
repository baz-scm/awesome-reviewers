[
  {
    "discussion_id": "1912459830",
    "pr_number": 1469,
    "pr_file": ".github/workflows/docker.yml",
    "created_at": "2025-01-12T14:07:56+00:00",
    "commented_code": "+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - \"**\"\n+    tags:\n+      - \"v*.*.*\"\n+  pull_request:\n+    branches:\n+      - \"main\"\n+  workflow_run:\n+    workflows: [Rebase Upstream]\n+    types:\n+      - completed",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1912459830",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1912459830",
        "commented_code": "@@ -0,0 +1,105 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - \"**\"\n+    tags:\n+      - \"v*.*.*\"\n+  pull_request:\n+    branches:\n+      - \"main\"\n+  workflow_run:\n+    workflows: [Rebase Upstream]\n+    types:\n+      - completed",
        "comment_created_at": "2025-01-12T14:07:56+00:00",
        "comment_author": "codingjoe",
        "comment_body": "The repo uses GitHub releases, so you should probably hook tho this event.\r\n```suggestion\r\non:\r\n  release:\r\n    types: [published]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1912471760",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1912459830",
        "commented_code": "@@ -0,0 +1,105 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - \"**\"\n+    tags:\n+      - \"v*.*.*\"\n+  pull_request:\n+    branches:\n+      - \"main\"\n+  workflow_run:\n+    workflows: [Rebase Upstream]\n+    types:\n+      - completed",
        "comment_created_at": "2025-01-12T15:04:12+00:00",
        "comment_author": "oxc",
        "comment_body": "I've added it. I think it can be valuable to have docker images generated on PRs, to easily test them, but it's hard to know what is required/desired by upstream.",
        "pr_file_module": null
      },
      {
        "comment_id": "1912556814",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1912459830",
        "commented_code": "@@ -0,0 +1,105 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - \"**\"\n+    tags:\n+      - \"v*.*.*\"\n+  pull_request:\n+    branches:\n+      - \"main\"\n+  workflow_run:\n+    workflows: [Rebase Upstream]\n+    types:\n+      - completed",
        "comment_created_at": "2025-01-12T22:44:33+00:00",
        "comment_author": "polarathene",
        "comment_body": "FWIW, a project I maintain has generic/reusable workflows that other workflows call. This allows for a workflow to build the image that can be used by both our [release (publishing)](https://github.com/docker-mailserver/docker-mailserver/blob/e6d519b6f82f1d3a1fada4b24edaed6f64f5d3f0/.github/workflows/default_on_push.yml#L33-L39) and [PR (testing)](https://github.com/docker-mailserver/docker-mailserver/blob/e6d519b6f82f1d3a1fada4b24edaed6f64f5d3f0/.github/workflows/test_merge_requests.yml#L18-L28) workflows.\r\n\r\nIf you take that approach, then the maintainers can integrate with whatever workflow process suits them as they see fit :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968736465",
    "pr_number": 1469,
    "pr_file": ".github/workflows/docker.yml",
    "created_at": "2025-02-25T02:41:05+00:00",
    "commented_code": "+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1968736465",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1968736465",
        "commented_code": "@@ -0,0 +1,101 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master",
        "comment_created_at": "2025-02-25T02:41:05+00:00",
        "comment_author": "polarathene",
        "comment_body": "Is this intended for only verifying the image builds successfully?\r\n\r\nThere's no tests involved, a PR will only be contributing code to the repo. How likely is that a PR will break the image build for each matrix variant? (_You're only building for AMD64, not ARM64 right?_)\r\n\r\nYou'd only need to verify the CPU image builds successfully then, but again without any actual tests carried out most of the PR contributions won't be relevant to the success of the image building and you're just wasting CI time + cache at that point. Better to only scope building as a verification when something in the PR would have a meaningful impact on the image build, such as a change to dependencies or Docker specific files.\r\n\r\n```suggestion\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968749559",
    "pr_number": 1469,
    "pr_file": ".github/workflows/docker.yml",
    "created_at": "2025-02-25T03:00:11+00:00",
    "commented_code": "+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  release:\n+    types: [published]\n+\n+jobs:\n+  docker:\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - id: cu118\n+            name: CUDA 11.8\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu118\"",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1968749559",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1968749559",
        "commented_code": "@@ -0,0 +1,101 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  release:\n+    types: [published]\n+\n+jobs:\n+  docker:\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - id: cu118\n+            name: CUDA 11.8\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu118\"",
        "comment_created_at": "2025-02-25T03:00:11+00:00",
        "comment_author": "polarathene",
        "comment_body": "The matrix is nice, but might be better to split this from the primary workflow that each matrix runner would run. [I previously suggested this in past review feedback](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1912556814).\r\n\r\nFor reasons like cited earlier if you only want to build one image variant the matrix dependency complicates that.\r\n\r\n---\r\n\r\nI'd also decide on what makes most sense for maintainers and users. `11.8` would be needed to support Kepler (2012) GPUs (_see [this full CUDA support matrix](https://en.wikipedia.org/wiki/CUDA#GPUs_supported)_). Maxwell (2014) works with CUDA 12.0+, a decade of support is pretty good?\r\n\r\nIf users have older versions of CUDA, I'd personally defer them to custom builds unless there was enough users chiming in with interest to add the extra variant. This will help save on valuable CI cache and PyTorch itself may eventually EOL support for such at some point.\r\n\r\n**UPDATE:** Another review comment of mine has added more details about CUDA support considerations.\r\n\r\n---\r\n\r\nI understand it's low effort to support the extra CUDA/ROCm versions via the workflow matrix configured here, but personally my policy is to not be overly eager in support (_I see some projects publishing releases for every platform that a compiler supports just because they can, and then there's reluctance to drop anything in future once that decision is made on the basis that it's not known if anyone's relying on it_).\r\n\r\nOn the bright-side with GHCR you do get access stats, but I'd still defer broader support without known demand.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968917851",
    "pr_number": 1469,
    "pr_file": ".github/workflows/docker.yml",
    "created_at": "2025-02-25T05:06:44+00:00",
    "commented_code": "+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  release:\n+    types: [published]\n+\n+jobs:\n+  docker:\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - id: cu118\n+            name: CUDA 11.8\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu118\"\n+          - id: cu121\n+            name: CUDA 12.1\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu121\"\n+          - id: cu124\n+            name: CUDA 12.4\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu124\"\n+          - id: rocm6.2\n+            name: ROCm 6.2\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/rocm6.2\"\n+          - id: cpu\n+            name: CPU only\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cpu\"\n+            extra_args: --cpu\n+\n+\n+    name: ${{ matrix.name }}\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout\n+        uses: actions/checkout@v4\n+      - name: Check which repositories to use\n+        id: repositories\n+        run: |\n+          echo \"GHCR_IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER}/comfyui\" >> \"$GITHUB_ENV\"\n+          if [[ -n \"${DOCKERHUB_USERNAME}\" ]]; then\n+            echo \"DOCKERHUB_IMAGE_NAME=${DOCKERHUB_USERNAME}/comfyui\" >> \"$GITHUB_ENV\"\n+          else\n+            echo \"DOCKERHUB_IMAGE_NAME=\" >> \"$GITHUB_ENV\"\n+            echo \"No Docker Hub username set, only deploying to GitHub Container Repository\"\n+          fi\n+        env:\n+            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n+            GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}\n+      - name: Docker meta\n+        id: meta\n+        uses: docker/metadata-action@v5\n+        with:\n+          # list of Docker images to use as base name for tags\n+          images: |\n+            ${{ env.DOCKERHUB_IMAGE_NAME }}\n+            ${{ env.GHCR_IMAGE_NAME }}\n+          flavor: |\n+            suffix=-${{ matrix.id }},onlatest=true\n+          # generate Docker tags based on the following events/attributes\n+          tags: |\n+            type=ref,event=branch\n+            type=ref,event=pr\n+            type=semver,pattern={{version}}\n+            type=semver,pattern={{major}}.{{minor}}\n+            type=semver,pattern={{major}}\n+            type=sha\n+            # set latest tag for default branch\n+            type=raw,value=latest,enable=${{ github.event_name == 'release' }}",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1968917851",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1968917851",
        "commented_code": "@@ -0,0 +1,101 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  release:\n+    types: [published]\n+\n+jobs:\n+  docker:\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - id: cu118\n+            name: CUDA 11.8\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu118\"\n+          - id: cu121\n+            name: CUDA 12.1\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu121\"\n+          - id: cu124\n+            name: CUDA 12.4\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu124\"\n+          - id: rocm6.2\n+            name: ROCm 6.2\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/rocm6.2\"\n+          - id: cpu\n+            name: CPU only\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cpu\"\n+            extra_args: --cpu\n+\n+\n+    name: ${{ matrix.name }}\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout\n+        uses: actions/checkout@v4\n+      - name: Check which repositories to use\n+        id: repositories\n+        run: |\n+          echo \"GHCR_IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER}/comfyui\" >> \"$GITHUB_ENV\"\n+          if [[ -n \"${DOCKERHUB_USERNAME}\" ]]; then\n+            echo \"DOCKERHUB_IMAGE_NAME=${DOCKERHUB_USERNAME}/comfyui\" >> \"$GITHUB_ENV\"\n+          else\n+            echo \"DOCKERHUB_IMAGE_NAME=\" >> \"$GITHUB_ENV\"\n+            echo \"No Docker Hub username set, only deploying to GitHub Container Repository\"\n+          fi\n+        env:\n+            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n+            GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}\n+      - name: Docker meta\n+        id: meta\n+        uses: docker/metadata-action@v5\n+        with:\n+          # list of Docker images to use as base name for tags\n+          images: |\n+            ${{ env.DOCKERHUB_IMAGE_NAME }}\n+            ${{ env.GHCR_IMAGE_NAME }}\n+          flavor: |\n+            suffix=-${{ matrix.id }},onlatest=true\n+          # generate Docker tags based on the following events/attributes\n+          tags: |\n+            type=ref,event=branch\n+            type=ref,event=pr\n+            type=semver,pattern={{version}}\n+            type=semver,pattern={{major}}.{{minor}}\n+            type=semver,pattern={{major}}\n+            type=sha\n+            # set latest tag for default branch\n+            type=raw,value=latest,enable=${{ github.event_name == 'release' }}",
        "comment_created_at": "2025-02-25T05:06:44+00:00",
        "comment_author": "polarathene",
        "comment_body": "\u274c `type=ref,event=branch` should probably be `type=edge,branch=master`.\r\n\r\nThis project uses other development branches but I don't think they should be building/publishing images related to that... For example:\r\n- Your own repo providing this PR is building `master` and `docker` branch variants (_not sure if that was intentional?_).\r\n- The official repo currently has 10 branches, but that fluctuates and many of the current branches have no relevance to a Docker build (_eg: desktop build and docs focused_).\r\n\r\nA more common pattern is to [use `edge` and have that reflect the development branch](https://github.com/docker/metadata-action?tab=readme-ov-file#typeedge)\r\n- Either building whenever the primary branch is pushed to, or having some scheduled build (_[`type=schedule,pattern=nightly` being an alternative for \"nightly\" builds](https://github.com/docker/metadata-action?tab=readme-ov-file#typeschedule), which might be more appropriate vs build per push on a busy repo_).\r\n- If wanting to access previously nightly builds `type=schedule,pattern={{date 'YYYY-MM-DD'}}` could work I think (_otherwise they still technically exist at the registry, just no longer with a tag associated once the `nightly` tag is re-assigned_).\r\n- For reference, the [schedule event trigger](https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule) only runs on the default branch. Other workflow triggers can have a caveat of being active on other branches/tags, where the event trigger at that commit affects the workflow file used. I've seen this as a gotcha on projects that had their workflows fall out of sync due to long-lived branches, especially when backporting fixes. In those cases it's better to ensure workflows are consistent with their triggers and instead call a job from a separate workflow file instead, which allows targeting a specific branch/ref to keep them consistent and easy to maintain with minimized chance of surprises.\r\n\r\n---\r\n\r\n### Other tag rules\r\n\r\n- \u2705 `type=semver` (_although [care should be taken](https://github.com/docker/metadata-action/tree/master#major-version-zero) with [major version zero releases](https://semver.org/#spec-item-4) (`0.y.z`)_)\r\n- \u274c `type=ref,event=pr` doesn't seem that helpful and could be dropped? It's not like they're being published (_since that's a bit messy to do so securely_).\r\n- \u274c `type=sha` also seems totally unnecessary? What is the motivation for that? If someone actually needs this, digests or custom builds would work for them. No need to pollute a registry with a digest based tag for each push.\r\n- \u274c `type=raw` isn't really doing anything and can be dropped. It's conditional usage with `latest` is somewhat misleading too:\r\n  - When the action is triggered by an event that matches the [`type=semver`](https://github.com/docker/metadata-action?tab=readme-ov-file#typesemver) rule and the `latest` tag is implicitly added [(due to the default `flavor: latest=auto`) for `type=ref,event=tag` + `type=semver,pattern=`](https://github.com/docker/metadata-action?tab=readme-ov-file#latest-tag). You've also got the `flavor` setting configured to append a `suffix` of the variant, [including on the `latest` tag due to `,onlatest=true`](https://github.com/docker/metadata-action?tab=readme-ov-file#flavor-input). This isn't actually tied to the `type=raw,value=latest` tag as you might think it to be.\r\n  - The `enable` logic for this tag rule seems to make sense at a glance, except `enable=false` will prevent adding a tag by **rule**, but it [won't prevent `latest` tags being added by other tag rules that are processed](https://github.com/docker/metadata-action/issues/461#issuecomment-2680849083) when as mentined the default `flavor.latest=auto` with a tag rule `type` which qualifies for setting `latest=true` implicitly.\r\n\r\n**NOTE:** Should the project triggering the release/tag events ever push a release tag for a point release of an earlier major/minor release, that will become the new `latest` unintentionally, and for the semver pattern, this can also affect the major tag. [Tracking issue](https://github.com/docker/metadata-action/issues/407#issuecomment-2680650110) (_provides a workaround to ensure you only `enable` a tag when it's actually the latest semver_).\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1972601422",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 1469,
        "pr_file": ".github/workflows/docker.yml",
        "discussion_id": "1968917851",
        "commented_code": "@@ -0,0 +1,101 @@\n+name: Build and publish Docker images\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+  release:\n+    types: [published]\n+\n+jobs:\n+  docker:\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          - id: cu118\n+            name: CUDA 11.8\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu118\"\n+          - id: cu121\n+            name: CUDA 12.1\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu121\"\n+          - id: cu124\n+            name: CUDA 12.4\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cu124\"\n+          - id: rocm6.2\n+            name: ROCm 6.2\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/rocm6.2\"\n+          - id: cpu\n+            name: CPU only\n+            pytorch_install_args: \"--index-url https://download.pytorch.org/whl/cpu\"\n+            extra_args: --cpu\n+\n+\n+    name: ${{ matrix.name }}\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: Checkout\n+        uses: actions/checkout@v4\n+      - name: Check which repositories to use\n+        id: repositories\n+        run: |\n+          echo \"GHCR_IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY_OWNER}/comfyui\" >> \"$GITHUB_ENV\"\n+          if [[ -n \"${DOCKERHUB_USERNAME}\" ]]; then\n+            echo \"DOCKERHUB_IMAGE_NAME=${DOCKERHUB_USERNAME}/comfyui\" >> \"$GITHUB_ENV\"\n+          else\n+            echo \"DOCKERHUB_IMAGE_NAME=\" >> \"$GITHUB_ENV\"\n+            echo \"No Docker Hub username set, only deploying to GitHub Container Repository\"\n+          fi\n+        env:\n+            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n+            GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}\n+      - name: Docker meta\n+        id: meta\n+        uses: docker/metadata-action@v5\n+        with:\n+          # list of Docker images to use as base name for tags\n+          images: |\n+            ${{ env.DOCKERHUB_IMAGE_NAME }}\n+            ${{ env.GHCR_IMAGE_NAME }}\n+          flavor: |\n+            suffix=-${{ matrix.id }},onlatest=true\n+          # generate Docker tags based on the following events/attributes\n+          tags: |\n+            type=ref,event=branch\n+            type=ref,event=pr\n+            type=semver,pattern={{version}}\n+            type=semver,pattern={{major}}.{{minor}}\n+            type=semver,pattern={{major}}\n+            type=sha\n+            # set latest tag for default branch\n+            type=raw,value=latest,enable=${{ github.event_name == 'release' }}",
        "comment_created_at": "2025-02-27T00:01:13+00:00",
        "comment_author": "polarathene",
        "comment_body": "### For reference\r\n\r\nYour current workflow here has produced a considerable amount of tags, especially \"untagged\" (_this will occur when an image tag is assigned to a new published image, and that earlier published image no longer has anymore tags pointing to it, this problem is multiplied by your variant permutations_):\r\n\r\n> ![image](https://github.com/user-attachments/assets/0d67ed09-3792-4fb1-abcb-5d2019041098)\r\n\r\nA project I maintain that publishes images to GHCR has 28 tagged and 2,258 untagged, which would be due to our `edge` tag being published whenever we merge a PR to the primary branch. Other than that, a much nicer list to look at as a user:\r\n\r\n> ![image](https://github.com/user-attachments/assets/b050355a-e921-478f-81fe-42b733cfc090)\r\n\r\nvs\r\n\r\n> ![image](https://github.com/user-attachments/assets/33918bb0-c28c-460d-8b61-cd25528e11e1)\r\n\r\nAs you don't have any tagged / published releases on your fork, there's none of the semver tags present.\r\n\r\n**NOTE:** You did previously however have a `latest` tag published, with those being handled by [workflows runs](https://github.com/oxc/ComfyUI/actions/runs/12732961982) until [Jan 13 due to this](https://github.com/oxc/ComfyUI/actions/runs/12732961982/workflow#L78):\r\n\r\n```yaml\r\ntags: |\r\n  type=raw,value=latest,enable={{is_default_branch}}\r\n```\r\n\r\nYou then [changed `enable` to the release event](https://github.com/oxc/ComfyUI/blame/1af11ba1595e4194f5cd2ea377f0e4aeaa91d805/.github/workflows/docker.yml#L79), as per [past review feedback](https://github.com/comfyanonymous/ComfyUI/pull/1469#discussion_r1912471760). For a moment I was confused why `latest` tags were otherwise published until tracking that down \ud83d\ude13 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849396429",
    "pr_number": 5676,
    "pr_file": ".github/workflows/test-launch.yml",
    "created_at": "2024-11-20T02:00:23+00:00",
    "commented_code": "- name: Start ComfyUI server\n       run: |\n         python main.py --cpu 2>&1 | tee console_output.log &\n-        wait-for-it --service 127.0.0.1:8188 -t 600\n+        wait-for-it --service 127.0.0.1:8188 -t 30",
    "repo_full_name": "comfyanonymous/ComfyUI",
    "discussion_comments": [
      {
        "comment_id": "1849396429",
        "repo_full_name": "comfyanonymous/ComfyUI",
        "pr_number": 5676,
        "pr_file": ".github/workflows/test-launch.yml",
        "discussion_id": "1849396429",
        "commented_code": "@@ -28,7 +28,7 @@ jobs:\n     - name: Start ComfyUI server\n       run: |\n         python main.py --cpu 2>&1 | tee console_output.log &\n-        wait-for-it --service 127.0.0.1:8188 -t 600\n+        wait-for-it --service 127.0.0.1:8188 -t 30",
        "comment_created_at": "2024-11-20T02:00:23+00:00",
        "comment_author": "huchenlei",
        "comment_body": "Reduce wait time from 10min to 30s to make the test fail faster.",
        "pr_file_module": null
      }
    ]
  }
]