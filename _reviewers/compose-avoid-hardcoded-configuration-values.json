[
  {
    "discussion_id": "980993303",
    "pr_number": 9824,
    "pr_file": "verify-go-modules.sh",
    "created_at": "2022-09-27T09:21:54+00:00",
    "commented_code": "+#!/usr/bin/env bash\n+\n+#   Copyright The containerd Authors.\n+\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+#\n+# verifies if the require and replace directives for two go.mod files are in sync\n+#\n+set -eu -o pipefail\n+\n+ROOT=$(dirname \"${BASH_SOURCE}\")\n+\n+if [ \"$#\" -ne 1 ]; then\n+  echo \"Usage: $0 dir-for-second-go-mod\"\n+  exit 1\n+fi\n+\n+if ! command -v jq &> /dev/null ; then\n+  echo Please install jq\n+  exit 1\n+fi\n+\n+# Load the requires and replaces section in the root go.mod file\n+declare -A map_requires_1\n+declare -A map_replaces_1\n+pushd \"${ROOT}\" > /dev/null\n+while IFS='#' read -r key value\n+do\n+  map_requires_1[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r '.Require[] | .Path +  \" # \" + .Version')\n+while IFS='#' read -r key value\n+do\n+  [ \"$key\" = \"\" ] || map_replaces_1[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r 'try .Replace[] | .Old.Path + \" # \" + .New.Path + \" : \" + .New.Version')\n+popd > /dev/null\n+\n+# Load the requires and replaces section in the other go.mod file\n+declare -A map_requires_2\n+declare -A map_replaces_2\n+pushd \"${ROOT}/$1\" > /dev/null\n+while IFS='#' read -r key value\n+do\n+  [ \"$key\" = \"\" ] || map_requires_2[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r '.Require[] | .Path +  \" # \" + .Version')\n+while IFS='#' read -r key value\n+do\n+  map_replaces_2[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r 'try .Replace[] | .Old.Path + \" # \" + .New.Path + \" : \" + .New.Version')\n+popd > /dev/null\n+\n+# signal for errors later\n+ERRORS=0\n+\n+# iterate through the second go.mod's require section and ensure that all items\n+# have the same values in the root go.mod replace section\n+for k in \"${!map_requires_2[@]}\"\n+do\n+  if [ -v \"map_requires_1[$k]\" ]; then\n+    if [ \"${map_requires_2[$k]}\" != \"${map_requires_1[$k]}\" ]; then\n+      echo \"${k} has different values in the go.mod files require section:\" \\\n+        \"${map_requires_1[$k]} in root go.mod ${map_requires_2[$k]} in $1/go.mod\"\n+      ERRORS=$(( ERRORS + 1 ))\n+    fi\n+  fi\n+done\n+\n+# iterate through the second go.mod's replace section and ensure that all items\n+# have the same values in the root go.mod's replace section. Except for the\n+# containerd/containerd which we know will be different\n+for k in \"${!map_replaces_2[@]}\"\n+do\n+  if [[ \"${k}\" == \"github.com/containerd/containerd\"* ]]; then\n+    continue\n+  fi\n+  if [ -v \"map_replaces_1[$k]\" ]; then\n+    if [ \"${map_replaces_2[$k]}\" != \"${map_replaces_1[$k]}\" ]; then\n+      echo \"${k} has different values in the go.mod files replace section:\" \\\n+        \"${map_replaces_1[$k]} in root go.mod ${map_replaces_2[$k]} in $1/go.mod\"\n+      ERRORS=$(( ERRORS + 1 ))\n+    fi\n+  fi\n+done\n+\n+# iterate through the root go.mod's replace section and ensure that all the\n+# same items are present in the second go.mod's replace section and nothing is missing\n+for k in \"${!map_replaces_1[@]}\"\n+do\n+  if [[ \"${k}\" == \"github.com/containerd/containerd\"* ]]; then",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "980993303",
        "repo_full_name": "docker/compose",
        "pr_number": 9824,
        "pr_file": "verify-go-modules.sh",
        "discussion_id": "980993303",
        "commented_code": "@@ -0,0 +1,112 @@\n+#!/usr/bin/env bash\n+\n+#   Copyright The containerd Authors.\n+\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+#\n+# verifies if the require and replace directives for two go.mod files are in sync\n+#\n+set -eu -o pipefail\n+\n+ROOT=$(dirname \"${BASH_SOURCE}\")\n+\n+if [ \"$#\" -ne 1 ]; then\n+  echo \"Usage: $0 dir-for-second-go-mod\"\n+  exit 1\n+fi\n+\n+if ! command -v jq &> /dev/null ; then\n+  echo Please install jq\n+  exit 1\n+fi\n+\n+# Load the requires and replaces section in the root go.mod file\n+declare -A map_requires_1\n+declare -A map_replaces_1\n+pushd \"${ROOT}\" > /dev/null\n+while IFS='#' read -r key value\n+do\n+  map_requires_1[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r '.Require[] | .Path +  \" # \" + .Version')\n+while IFS='#' read -r key value\n+do\n+  [ \"$key\" = \"\" ] || map_replaces_1[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r 'try .Replace[] | .Old.Path + \" # \" + .New.Path + \" : \" + .New.Version')\n+popd > /dev/null\n+\n+# Load the requires and replaces section in the other go.mod file\n+declare -A map_requires_2\n+declare -A map_replaces_2\n+pushd \"${ROOT}/$1\" > /dev/null\n+while IFS='#' read -r key value\n+do\n+  [ \"$key\" = \"\" ] || map_requires_2[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r '.Require[] | .Path +  \" # \" + .Version')\n+while IFS='#' read -r key value\n+do\n+  map_replaces_2[$key]=\"$value\"\n+done<<<$(go mod edit -json | jq -r 'try .Replace[] | .Old.Path + \" # \" + .New.Path + \" : \" + .New.Version')\n+popd > /dev/null\n+\n+# signal for errors later\n+ERRORS=0\n+\n+# iterate through the second go.mod's require section and ensure that all items\n+# have the same values in the root go.mod replace section\n+for k in \"${!map_requires_2[@]}\"\n+do\n+  if [ -v \"map_requires_1[$k]\" ]; then\n+    if [ \"${map_requires_2[$k]}\" != \"${map_requires_1[$k]}\" ]; then\n+      echo \"${k} has different values in the go.mod files require section:\" \\\n+        \"${map_requires_1[$k]} in root go.mod ${map_requires_2[$k]} in $1/go.mod\"\n+      ERRORS=$(( ERRORS + 1 ))\n+    fi\n+  fi\n+done\n+\n+# iterate through the second go.mod's replace section and ensure that all items\n+# have the same values in the root go.mod's replace section. Except for the\n+# containerd/containerd which we know will be different\n+for k in \"${!map_replaces_2[@]}\"\n+do\n+  if [[ \"${k}\" == \"github.com/containerd/containerd\"* ]]; then\n+    continue\n+  fi\n+  if [ -v \"map_replaces_1[$k]\" ]; then\n+    if [ \"${map_replaces_2[$k]}\" != \"${map_replaces_1[$k]}\" ]; then\n+      echo \"${k} has different values in the go.mod files replace section:\" \\\n+        \"${map_replaces_1[$k]} in root go.mod ${map_replaces_2[$k]} in $1/go.mod\"\n+      ERRORS=$(( ERRORS + 1 ))\n+    fi\n+  fi\n+done\n+\n+# iterate through the root go.mod's replace section and ensure that all the\n+# same items are present in the second go.mod's replace section and nothing is missing\n+for k in \"${!map_replaces_1[@]}\"\n+do\n+  if [[ \"${k}\" == \"github.com/containerd/containerd\"* ]]; then",
        "comment_created_at": "2022-09-27T09:21:54+00:00",
        "comment_author": "glours",
        "comment_body": "```suggestion\r\n  if [[ \"${k}\" == \"github.com/docker/compose\"* ]]; then\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "349638868",
    "pr_number": 7005,
    "pr_file": "script/run/run.sh",
    "created_at": "2019-11-22T15:01:43+00:00",
    "commented_code": "VOLUMES=\"$VOLUMES -v $compose_dir:$compose_dir\"\n fi\n if [ -n \"$HOME\" ]; then\n-    VOLUMES=\"$VOLUMES -v $HOME:$HOME -v $HOME:/root\" # mount $HOME in /root to share docker.config\n+    VOLUMES=\"$VOLUMES -v $HOME:$HOME -e HOME\" # Pass in HOME to share docker.config and allow ~/-relative paths to work.",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "349638868",
        "repo_full_name": "docker/compose",
        "pr_number": 7005,
        "pr_file": "script/run/run.sh",
        "discussion_id": "349638868",
        "commented_code": "@@ -43,7 +43,7 @@ if [ -n \"$compose_dir\" ]; then\n     VOLUMES=\"$VOLUMES -v $compose_dir:$compose_dir\"\n fi\n if [ -n \"$HOME\" ]; then\n-    VOLUMES=\"$VOLUMES -v $HOME:$HOME -v $HOME:/root\" # mount $HOME in /root to share docker.config\n+    VOLUMES=\"$VOLUMES -v $HOME:$HOME -e HOME\" # Pass in HOME to share docker.config and allow ~/-relative paths to work.",
        "comment_created_at": "2019-11-22T15:01:43+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "You should be able to pass the `-e HOME` through the variable `COMPOSE_OPTIONS` (as described in line 11). If we remove this volume mount here, that can break peoples code that expects this mount.",
        "pr_file_module": null
      },
      {
        "comment_id": "349645138",
        "repo_full_name": "docker/compose",
        "pr_number": 7005,
        "pr_file": "script/run/run.sh",
        "discussion_id": "349638868",
        "commented_code": "@@ -43,7 +43,7 @@ if [ -n \"$compose_dir\" ]; then\n     VOLUMES=\"$VOLUMES -v $compose_dir:$compose_dir\"\n fi\n if [ -n \"$HOME\" ]; then\n-    VOLUMES=\"$VOLUMES -v $HOME:$HOME -v $HOME:/root\" # mount $HOME in /root to share docker.config\n+    VOLUMES=\"$VOLUMES -v $HOME:$HOME -e HOME\" # Pass in HOME to share docker.config and allow ~/-relative paths to work.",
        "comment_created_at": "2019-11-22T15:13:26+00:00",
        "comment_author": "glance-",
        "comment_body": "Yes, it can break code for anyone who reads files from /root when running docker-compose wrapper script as a non root user. That sounds like \"working by accident\", and works differently than the stand-alone binary.\r\n\r\nI'd say this makes the whole wrapper script behave more like the stand-alone binary.",
        "pr_file_module": null
      },
      {
        "comment_id": "349669957",
        "repo_full_name": "docker/compose",
        "pr_number": 7005,
        "pr_file": "script/run/run.sh",
        "discussion_id": "349638868",
        "commented_code": "@@ -43,7 +43,7 @@ if [ -n \"$compose_dir\" ]; then\n     VOLUMES=\"$VOLUMES -v $compose_dir:$compose_dir\"\n fi\n if [ -n \"$HOME\" ]; then\n-    VOLUMES=\"$VOLUMES -v $HOME:$HOME -v $HOME:/root\" # mount $HOME in /root to share docker.config\n+    VOLUMES=\"$VOLUMES -v $HOME:$HOME -e HOME\" # Pass in HOME to share docker.config and allow ~/-relative paths to work.",
        "comment_created_at": "2019-11-22T16:01:28+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "Ok fair enough!",
        "pr_file_module": null
      }
    ]
  }
]