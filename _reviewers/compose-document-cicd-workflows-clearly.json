[
  {
    "discussion_id": "1185887404",
    "pr_number": 10533,
    "pr_file": "docs/reference/compose.md",
    "created_at": "2023-05-05T09:32:55+00:00",
    "commented_code": "Setting the `COMPOSE_IGNORE_ORPHANS` environment variable to `true` will stop docker compose from detecting orphaned\n containers for the project.\n+\n+\n+### Use Dry Run mode to test your command\n+\n+Use `--dry-run` flag to test a command without changing your application stack state.\n+Dry Run mode will show you all the steps Compose will apply by executing the command, for example:",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1185887404",
        "repo_full_name": "docker/compose",
        "pr_number": 10533,
        "pr_file": "docs/reference/compose.md",
        "discussion_id": "1185887404",
        "commented_code": "@@ -169,3 +170,49 @@ If flags are explicitly set on the command line, the associated environment vari\n \n Setting the `COMPOSE_IGNORE_ORPHANS` environment variable to `true` will stop docker compose from detecting orphaned\n containers for the project.\n+\n+\n+### Use Dry Run mode to test your command\n+\n+Use `--dry-run` flag to test a command without changing your application stack state.\n+Dry Run mode will show you all the steps Compose will apply by executing the command, for example:",
        "comment_created_at": "2023-05-05T09:32:55+00:00",
        "comment_author": "aevesdocker",
        "comment_body": "```suggestion\r\nDry Run mode shows you all the steps Compose applies when executing a command, for example:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1185888268",
    "pr_number": 10533,
    "pr_file": "docs/reference/compose.md",
    "created_at": "2023-05-05T09:33:54+00:00",
    "commented_code": "Setting the `COMPOSE_IGNORE_ORPHANS` environment variable to `true` will stop docker compose from detecting orphaned\n containers for the project.\n+\n+\n+### Use Dry Run mode to test your command\n+\n+Use `--dry-run` flag to test a command without changing your application stack state.\n+Dry Run mode will show you all the steps Compose will apply by executing the command, for example:\n+```console\n+$ docker compose --dry-run up --build -d\n+[+] Pulling 1/1\n+ ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s\n+[+] Running 10/8\n+ ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s\n+ ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s\n+ ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s\n+ ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started\n+```\n+You could see that the first step will be to pull the image defined by `db` service, then build the `backend` service.",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1185888268",
        "repo_full_name": "docker/compose",
        "pr_number": 10533,
        "pr_file": "docs/reference/compose.md",
        "discussion_id": "1185888268",
        "commented_code": "@@ -169,3 +170,49 @@ If flags are explicitly set on the command line, the associated environment vari\n \n Setting the `COMPOSE_IGNORE_ORPHANS` environment variable to `true` will stop docker compose from detecting orphaned\n containers for the project.\n+\n+\n+### Use Dry Run mode to test your command\n+\n+Use `--dry-run` flag to test a command without changing your application stack state.\n+Dry Run mode will show you all the steps Compose will apply by executing the command, for example:\n+```console\n+$ docker compose --dry-run up --build -d\n+[+] Pulling 1/1\n+ ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s\n+[+] Running 10/8\n+ ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s\n+ ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s\n+ ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s\n+ ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s\n+ ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started\n+```\n+You could see that the first step will be to pull the image defined by `db` service, then build the `backend` service.  ",
        "comment_created_at": "2023-05-05T09:33:54+00:00",
        "comment_author": "aevesdocker",
        "comment_body": "```suggestion\r\nFrom the example above, you can see that the first step is to pull the image defined by `db` service, then build the `backend` service.  \r\n```",
        "pr_file_module": null
      }
    ]
  }
]