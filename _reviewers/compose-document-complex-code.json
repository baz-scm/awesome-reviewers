[
  {
    "discussion_id": "39781985",
    "pr_number": 2051,
    "pr_file": "compose/config/config.py",
    "created_at": "2015-09-17T18:33:10+00:00",
    "commented_code": "Pre validation checks and processing of the config file to interpolate env\n     vars returning a config dict ready to be tested against the schema.\n     \"\"\"\n-    config = interpolate_environment_variables(config)\n-    return config\n+    return interpolate_environment_variables(config)\n \n \n def load(config_details):\n-    config, working_dir, filename = config_details\n+    working_dir, configs = config_details\n \n-    processed_config = pre_process_config(config)\n-    validate_against_fields_schema(processed_config)\n-\n-    service_dicts = []\n-\n-    for service_name, service_dict in list(processed_config.items()):\n-        loader = ServiceLoader(\n-            working_dir=working_dir,\n-            filename=filename,\n-            service_name=service_name,\n-            service_dict=service_dict)\n+    def build_service(filename, service_name, service_dict):\n+        loader = ServiceLoader(working_dir, filename, service_name, service_dict)\n         service_dict = loader.make_service_dict()\n         validate_paths(service_dict)\n-        service_dicts.append(service_dict)\n-\n-    return service_dicts\n+        return service_dict\n+\n+    def load_file(filename, config):\n+        processed_config = pre_process_config(config)\n+        validate_against_fields_schema(processed_config)\n+        return [\n+            build_service(filename, name, service_config)\n+            for name, service_config in processed_config.items()\n+        ]\n+\n+    def merge_services(base, override):\n+        return {\n+            name: merge_service_dicts(base.get(name, {}), override.get(name, {}))\n+            for name in set(base) | set(override)\n+        }\n+\n+    def combine_configs(base, override):\n+        service_dicts = load_file(base.filename, base.config)\n+        if not override:\n+            return service_dicts\n+\n+        return ConfigFile(\n+            override.filename,\n+            merge_services(base.config, override.config))\n+\n+    return reduce(combine_configs, configs + [None])",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "39781985",
        "repo_full_name": "docker/compose",
        "pr_number": 2051,
        "pr_file": "compose/config/config.py",
        "discussion_id": "39781985",
        "commented_code": "@@ -132,29 +163,42 @@ def pre_process_config(config):\n     Pre validation checks and processing of the config file to interpolate env\n     vars returning a config dict ready to be tested against the schema.\n     \"\"\"\n-    config = interpolate_environment_variables(config)\n-    return config\n+    return interpolate_environment_variables(config)\n \n \n def load(config_details):\n-    config, working_dir, filename = config_details\n+    working_dir, configs = config_details\n \n-    processed_config = pre_process_config(config)\n-    validate_against_fields_schema(processed_config)\n-\n-    service_dicts = []\n-\n-    for service_name, service_dict in list(processed_config.items()):\n-        loader = ServiceLoader(\n-            working_dir=working_dir,\n-            filename=filename,\n-            service_name=service_name,\n-            service_dict=service_dict)\n+    def build_service(filename, service_name, service_dict):\n+        loader = ServiceLoader(working_dir, filename, service_name, service_dict)\n         service_dict = loader.make_service_dict()\n         validate_paths(service_dict)\n-        service_dicts.append(service_dict)\n-\n-    return service_dicts\n+        return service_dict\n+\n+    def load_file(filename, config):\n+        processed_config = pre_process_config(config)\n+        validate_against_fields_schema(processed_config)\n+        return [\n+            build_service(filename, name, service_config)\n+            for name, service_config in processed_config.items()\n+        ]\n+\n+    def merge_services(base, override):\n+        return {\n+            name: merge_service_dicts(base.get(name, {}), override.get(name, {}))\n+            for name in set(base) | set(override)\n+        }\n+\n+    def combine_configs(base, override):\n+        service_dicts = load_file(base.filename, base.config)\n+        if not override:\n+            return service_dicts\n+\n+        return ConfigFile(\n+            override.filename,\n+            merge_services(base.config, override.config))\n+\n+    return reduce(combine_configs, configs + [None])",
        "comment_created_at": "2015-09-17T18:33:10+00:00",
        "comment_author": "dnephin",
        "comment_body": "> Also, we should probably document the attributes (including types) of both ConfigDetails and ConfigFile.\n\nWe don't really do this in a consistent way right now. I'd love to use [sphinx](http://sphinx-doc.org/) for all the api docs so the documentation is consistent and machine readable.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "39859772",
    "pr_number": 2051,
    "pr_file": "compose/config/config.py",
    "created_at": "2015-09-18T14:25:19+00:00",
    "commented_code": "Pre validation checks and processing of the config file to interpolate env\n     vars returning a config dict ready to be tested against the schema.\n     \"\"\"\n-    config = interpolate_environment_variables(config)\n-    return config\n+    return interpolate_environment_variables(config)\n \n \n def load(config_details):\n-    config, working_dir, filename = config_details",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "39859772",
        "repo_full_name": "docker/compose",
        "pr_number": 2051,
        "pr_file": "compose/config/config.py",
        "discussion_id": "39859772",
        "commented_code": "@@ -133,29 +178,42 @@ def pre_process_config(config):\n     Pre validation checks and processing of the config file to interpolate env\n     vars returning a config dict ready to be tested against the schema.\n     \"\"\"\n-    config = interpolate_environment_variables(config)\n-    return config\n+    return interpolate_environment_variables(config)\n \n \n def load(config_details):\n-    config, working_dir, filename = config_details",
        "comment_created_at": "2015-09-18T14:25:19+00:00",
        "comment_author": "mnowster",
        "comment_body": "Given how much is happening in this function, could we have a doc string please?\n",
        "pr_file_module": null
      }
    ]
  }
]