[
  {
    "discussion_id": "2059628666",
    "pr_number": 12769,
    "pr_file": "pkg/progress/writer.go",
    "created_at": "2025-04-25T06:20:35+00:00",
    "commented_code": "if !ok {\n \t\tdryRun = false\n \t}\n+\tif v, ok := os.LookupEnv(\"COMPOSE_PROGRESS\"); ok && Mode == ModeAuto {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "2059628666",
        "repo_full_name": "docker/compose",
        "pr_number": 12769,
        "pr_file": "pkg/progress/writer.go",
        "discussion_id": "2059628666",
        "commented_code": "@@ -121,6 +122,9 @@ func NewWriter(ctx context.Context, out *streams.Out, progressTitle string) (Wri\n \tif !ok {\n \t\tdryRun = false\n \t}\n+\tif v, ok := os.LookupEnv(\"COMPOSE_PROGRESS\"); ok && Mode == ModeAuto {",
        "comment_created_at": "2025-04-25T06:20:35+00:00",
        "comment_author": "ndeloof",
        "comment_body": "a better place to manage this is `addProjectFlags` in cmd/compose.go, as you can set flag default value from env value (the same way we do for `--env-file`)",
        "pr_file_module": null
      },
      {
        "comment_id": "2059895602",
        "repo_full_name": "docker/compose",
        "pr_number": 12769,
        "pr_file": "pkg/progress/writer.go",
        "discussion_id": "2059628666",
        "commented_code": "@@ -121,6 +122,9 @@ func NewWriter(ctx context.Context, out *streams.Out, progressTitle string) (Wri\n \tif !ok {\n \t\tdryRun = false\n \t}\n+\tif v, ok := os.LookupEnv(\"COMPOSE_PROGRESS\"); ok && Mode == ModeAuto {",
        "comment_created_at": "2025-04-25T09:30:11+00:00",
        "comment_author": "AnvarU",
        "comment_body": "Done [ccfd133](https://github.com/docker/compose/pull/12769/commits/ccfd13384871f9d46ae9bbe90b06f07aa6a73602)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844001830",
    "pr_number": 12300,
    "pr_file": "pkg/compose/build.go",
    "created_at": "2024-11-15T15:20:40+00:00",
    "commented_code": "if localImagePresent && service.PullPolicy != types.PullPolicyBuild {\n \t\t\treturn nil\n \t\t}\n-\t\tserviceToBeBuild[serviceName] = serviceToBuild{name: serviceName, service: *service}\n+\t\tserviceToBuild[serviceName] = *service\n \t\treturn nil\n \t}, policy)\n-\tif err != nil || len(serviceToBeBuild) == 0 {\n+\tif err != nil || len(serviceToBuild) == 0 {\n \t\treturn imageIDs, err\n \t}\n \n+\tif b, ok := os.LookupEnv(\"COMPOSE_BAKE\"); ok {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1844001830",
        "repo_full_name": "docker/compose",
        "pr_number": 12300,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "1844001830",
        "commented_code": "@@ -92,13 +86,23 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\tif localImagePresent && service.PullPolicy != types.PullPolicyBuild {\n \t\t\treturn nil\n \t\t}\n-\t\tserviceToBeBuild[serviceName] = serviceToBuild{name: serviceName, service: *service}\n+\t\tserviceToBuild[serviceName] = *service\n \t\treturn nil\n \t}, policy)\n-\tif err != nil || len(serviceToBeBuild) == 0 {\n+\tif err != nil || len(serviceToBuild) == 0 {\n \t\treturn imageIDs, err\n \t}\n \n+\tif b, ok := os.LookupEnv(\"COMPOSE_BAKE\"); ok {",
        "comment_created_at": "2024-11-15T15:20:40+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Perhaps could also be worth (if compose reads the cli config) to consider either an option in `features`, or `plugins` (plugins allows plugin-specific options to be set), which would allow opt-in/opt-out of this without having to use an env-var;\r\nhttps://github.com/docker/cli/blob/9861ce90fd6b8ddca19db5f803dcbef9a583e9e1/cli/config/configfile/file.go#L42-L44\r\n\r\n```go\r\n\tPlugins              map[string]map[string]string `json:\"plugins,omitempty\"`\r\n\tAliases              map[string]string            `json:\"aliases,omitempty\"`\r\n\tFeatures             map[string]string            `json:\"features,omitempty\"`\r\n```\r\n\r\n(in addition to an env-var probably)",
        "pr_file_module": null
      },
      {
        "comment_id": "1846035551",
        "repo_full_name": "docker/compose",
        "pr_number": 12300,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "1844001830",
        "commented_code": "@@ -92,13 +86,23 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\tif localImagePresent && service.PullPolicy != types.PullPolicyBuild {\n \t\t\treturn nil\n \t\t}\n-\t\tserviceToBeBuild[serviceName] = serviceToBuild{name: serviceName, service: *service}\n+\t\tserviceToBuild[serviceName] = *service\n \t\treturn nil\n \t}, policy)\n-\tif err != nil || len(serviceToBeBuild) == 0 {\n+\tif err != nil || len(serviceToBuild) == 0 {\n \t\treturn imageIDs, err\n \t}\n \n+\tif b, ok := os.LookupEnv(\"COMPOSE_BAKE\"); ok {",
        "comment_created_at": "2024-11-18T07:54:39+00:00",
        "comment_author": "ndeloof",
        "comment_body": "we never used this mechanism in the past for optional/experimental docker compose features",
        "pr_file_module": null
      },
      {
        "comment_id": "1846197248",
        "repo_full_name": "docker/compose",
        "pr_number": 12300,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "1844001830",
        "commented_code": "@@ -92,13 +86,23 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\tif localImagePresent && service.PullPolicy != types.PullPolicyBuild {\n \t\t\treturn nil\n \t\t}\n-\t\tserviceToBeBuild[serviceName] = serviceToBuild{name: serviceName, service: *service}\n+\t\tserviceToBuild[serviceName] = *service\n \t\treturn nil\n \t}, policy)\n-\tif err != nil || len(serviceToBeBuild) == 0 {\n+\tif err != nil || len(serviceToBuild) == 0 {\n \t\treturn imageIDs, err\n \t}\n \n+\tif b, ok := os.LookupEnv(\"COMPOSE_BAKE\"); ok {",
        "comment_created_at": "2024-11-18T09:49:10+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Yeah, my thinking here was that the cli-config would more easily allow this to be set as a default, which could also allow (e.g.) it to be set through docker desktop \"settings\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1631393003",
    "pr_number": 11889,
    "pr_file": "cmd/compose/compose.go",
    "created_at": "2024-06-07T15:37:15+00:00",
    "commented_code": "return c\n }\n \n-// If user has a local .env file, load it as os.environment so it can be used to set COMPOSE_ variables\n-// This also allows to override values set by the default .env in a compose project when ran from a distinct folder\n-func setEnvWithLocalDotEnv(prjOpts *ProjectOptions) error {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1631393003",
        "repo_full_name": "docker/compose",
        "pr_number": 11889,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "1631393003",
        "commented_code": "@@ -601,42 +599,6 @@ func RootCommand(dockerCli command.Cli, backend Backend) *cobra.Command { //noli\n \treturn c\n }\n \n-// If user has a local .env file, load it as os.environment so it can be used to set COMPOSE_ variables\n-// This also allows to override values set by the default .env in a compose project when ran from a distinct folder\n-func setEnvWithLocalDotEnv(prjOpts *ProjectOptions) error {",
        "comment_created_at": "2024-06-07T15:37:15+00:00",
        "comment_author": "jhrotko",
        "comment_body": "Question: why are we removing this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1631676823",
        "repo_full_name": "docker/compose",
        "pr_number": 11889,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "1631393003",
        "commented_code": "@@ -601,42 +599,6 @@ func RootCommand(dockerCli command.Cli, backend Backend) *cobra.Command { //noli\n \treturn c\n }\n \n-// If user has a local .env file, load it as os.environment so it can be used to set COMPOSE_ variables\n-// This also allows to override values set by the default .env in a compose project when ran from a distinct folder\n-func setEnvWithLocalDotEnv(prjOpts *ProjectOptions) error {",
        "comment_created_at": "2024-06-07T20:53:36+00:00",
        "comment_author": "ndeloof",
        "comment_body": "this is the way we used to load PWD/.env before we know the actual project directory. This logic is now covered by toProjectOptions",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1296023003",
    "pr_number": 10811,
    "pr_file": "cmd/compose/compose.go",
    "created_at": "2023-08-16T14:41:07+00:00",
    "commented_code": "// WithServices creates a cobra run command from a ProjectFunc based on configured project options and selected services\n func (o *ProjectOptions) WithServices(fn ProjectServicesFunc) func(cmd *cobra.Command, args []string) error {\n \treturn Adapt(func(ctx context.Context, args []string) error {\n-\t\tproject, err := o.ToProject(args, cli.WithResolvedPaths(true), cli.WithDiscardEnvFile)\n+\t\tgit, err := remote.NewGitRemoteLoader()",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1296023003",
        "repo_full_name": "docker/compose",
        "pr_number": 10811,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "1296023003",
        "commented_code": "@@ -134,7 +135,13 @@ func (o *ProjectOptions) WithProject(fn ProjectFunc) func(cmd *cobra.Command, ar\n // WithServices creates a cobra run command from a ProjectFunc based on configured project options and selected services\n func (o *ProjectOptions) WithServices(fn ProjectServicesFunc) func(cmd *cobra.Command, args []string) error {\n \treturn Adapt(func(ctx context.Context, args []string) error {\n-\t\tproject, err := o.ToProject(args, cli.WithResolvedPaths(true), cli.WithDiscardEnvFile)\n+\t\tgit, err := remote.NewGitRemoteLoader()",
        "comment_created_at": "2023-08-16T14:41:07+00:00",
        "comment_author": "milas",
        "comment_body": "I think we should put this behind a flag for now, e.g. `COMPOSE_EXPERIMENTAL_INCLUDE_REMOTE=1`.\r\n\r\nIt's not part of the spec at the moment, so I don't think it should be enabled by default until we've done that and ironed out ambiguities, etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1296027858",
    "pr_number": 10811,
    "pr_file": "pkg/remote/git.go",
    "created_at": "2023-08-16T14:44:31+00:00",
    "commented_code": "+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package remote\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"regexp\"\n+\n+\t\"github.com/compose-spec/compose-go/cli\"\n+\t\"github.com/compose-spec/compose-go/loader\"\n+\t\"github.com/docker/compose/v2/pkg/api\"\n+\t\"github.com/moby/buildkit/util/gitutil\"\n+)\n+\n+func NewGitRemoteLoader() (loader.ResourceLoader, error) {\n+\tvar base string\n+\tif cache_home, ok := os.LookupEnv(\"XDG_CACHE_HOME\"); ok {\n+\t\tbase = cache_home",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1296027858",
        "repo_full_name": "docker/compose",
        "pr_number": 10811,
        "pr_file": "pkg/remote/git.go",
        "discussion_id": "1296027858",
        "commented_code": "@@ -0,0 +1,145 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package remote\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"os/exec\"\n+\t\"path/filepath\"\n+\t\"regexp\"\n+\n+\t\"github.com/compose-spec/compose-go/cli\"\n+\t\"github.com/compose-spec/compose-go/loader\"\n+\t\"github.com/docker/compose/v2/pkg/api\"\n+\t\"github.com/moby/buildkit/util/gitutil\"\n+)\n+\n+func NewGitRemoteLoader() (loader.ResourceLoader, error) {\n+\tvar base string\n+\tif cache_home, ok := os.LookupEnv(\"XDG_CACHE_HOME\"); ok {\n+\t\tbase = cache_home",
        "comment_created_at": "2023-08-16T14:44:31+00:00",
        "comment_author": "milas",
        "comment_body": "```suggestion\r\n\tif cacheHome := os.GetEnv(\"XDG_CACHE_HOME\"); cacheHome != \"\" {\r\n\t\tbase = cacheHome\r\n```\r\nUnlikely, but if it's set and empty, we should still fallback to `~/.cache`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1309304468",
    "pr_number": 10947,
    "pr_file": "cmd/compose/compose.go",
    "created_at": "2023-08-29T20:09:49+00:00",
    "commented_code": "cli.WithDotEnv,\n \t\t\tcli.WithConfigFileEnv,\n \t\t\tcli.WithDefaultConfigPath,\n-\t\t\tcli.WithProfiles(o.Profiles),\n+\t\t\tcli.WithDefaultProfiles(o.Profiles...),",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1309304468",
        "repo_full_name": "docker/compose",
        "pr_number": 10947,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "1309304468",
        "commented_code": "@@ -262,7 +262,7 @@ func (o *ProjectOptions) toProjectOptions(po ...cli.ProjectOptionsFn) (*cli.Proj\n \t\t\tcli.WithDotEnv,\n \t\t\tcli.WithConfigFileEnv,\n \t\t\tcli.WithDefaultConfigPath,\n-\t\t\tcli.WithProfiles(o.Profiles),\n+\t\t\tcli.WithDefaultProfiles(o.Profiles...),",
        "comment_created_at": "2023-08-29T20:09:49+00:00",
        "comment_author": "milas",
        "comment_body": "See compose-spec/compose-go#446 - it was reading `COMPOSE_PROFILES` in the load, it's now done via this option up-front for consistency & correct layering",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "921146799",
    "pr_number": 9636,
    "pr_file": "cmd/compose/compose.go",
    "created_at": "2022-07-14T13:19:50+00:00",
    "commented_code": "return err\n \t}\n \tfor k, v := range envFromFile {\n-\t\tif _, ok := os.LookupEnv(k); !ok {\n-\t\t\tif err := os.Setenv(k, v); err != nil {\n-\t\t\t\treturn err\n-\t\t\t}\n+\t\tif err := os.Setenv(k, v); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "921146799",
        "repo_full_name": "docker/compose",
        "pr_number": 9636,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "921146799",
        "commented_code": "@@ -354,10 +354,8 @@ func setEnvWithDotEnv(prjOpts *projectOptions) error {\n \t\treturn err\n \t}\n \tfor k, v := range envFromFile {\n-\t\tif _, ok := os.LookupEnv(k); !ok {\n-\t\t\tif err := os.Setenv(k, v); err != nil {\n-\t\t\t\treturn err\n-\t\t\t}\n+\t\tif err := os.Setenv(k, v); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}",
        "comment_created_at": "2022-07-14T13:19:50+00:00",
        "comment_author": "milas",
        "comment_body": "Nit: Given the complexity/subtlety, I think a comment here is warranted, e.g. `// overwrite the process env with merged OS + env file results` or something\r\n\r\nFor context: I thought this was a regression at first since OS/shell has higher precedence than env file, but then I realized that `GetEnvFromFile` takes in the OS/shell env and handles the precedence/merging, which is why it's safe/necessary to overwrite everything here",
        "pr_file_module": null
      },
      {
        "comment_id": "921698509",
        "repo_full_name": "docker/compose",
        "pr_number": 9636,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "921146799",
        "commented_code": "@@ -354,10 +354,8 @@ func setEnvWithDotEnv(prjOpts *projectOptions) error {\n \t\treturn err\n \t}\n \tfor k, v := range envFromFile {\n-\t\tif _, ok := os.LookupEnv(k); !ok {\n-\t\t\tif err := os.Setenv(k, v); err != nil {\n-\t\t\t\treturn err\n-\t\t\t}\n+\t\tif err := os.Setenv(k, v); err != nil {\n+\t\t\treturn err\n \t\t}\n \t}",
        "comment_created_at": "2022-07-14T23:50:48+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "Yep! Adding the comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "763799651",
    "pr_number": 9007,
    "pr_file": "pkg/e2e/main_test.go",
    "created_at": "2021-12-07T09:28:10+00:00",
    "commented_code": "+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "763799651",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T09:28:10+00:00",
        "comment_author": "mat007",
        "comment_body": "Can\u2019t we do this using a command line flag and a (global) variable instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "763805242",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T09:34:36+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "My second option was to run the tests command line 2 times. One for each configuration of the envvar.\r\nI'm not sure if I understood what you mean by using a global variable for this.",
        "pr_file_module": null
      },
      {
        "comment_id": "763810524",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T09:40:49+00:00",
        "comment_author": "mat007",
        "comment_body": "Why do you need an env var at all? Is this not the same process?",
        "pr_file_module": null
      },
      {
        "comment_id": "763826121",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T09:58:26+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "Ahhh... Finally got what you mean. The idea was to have it also configurable from outside of this `TestMain`.\r\n\r\nWith the envvar we can run just one specific test. And when running like this, `TestMain` doesn't run. So the envvar is a solution to be able to still pass this info to the test.",
        "pr_file_module": null
      },
      {
        "comment_id": "763840400",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T10:13:36+00:00",
        "comment_author": "mat007",
        "comment_body": "But can\u2019t we use a command line flag instead?\r\nSorry it\u2019s just I don\u2019t like env vars much, they tend to magically configure (break) things, a bit like global vars on steroids \ud83d\ude00 ",
        "pr_file_module": null
      },
      {
        "comment_id": "763866758",
        "repo_full_name": "docker/compose",
        "pr_number": 9007,
        "pr_file": "pkg/e2e/main_test.go",
        "discussion_id": "763799651",
        "commented_code": "@@ -0,0 +1,37 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package e2e\n+\n+import (\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/sirupsen/logrus\"\n+)\n+\n+func TestMain(m *testing.M) {\n+\tlogrus.Info(\"Running tests on COMPOSE_STANDALONE_MODE=true\")\n+\t_ = os.Setenv(composeStandaloneEnvVar, \"true\")",
        "comment_created_at": "2021-12-07T10:45:24+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "The only alternative I see is to pass a build tag when running the test to choose in between tagged files. So we can choose which file to use, so we can use that conditionally depending on the tag.... But that really looks like over engineering and gets to the same problematic in the end...",
        "pr_file_module": null
      }
    ]
  }
]