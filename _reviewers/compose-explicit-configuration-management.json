[
  {
    "discussion_id": "1753895622",
    "pr_number": 12115,
    "pr_file": "go.mod",
    "created_at": "2024-09-11T10:03:56+00:00",
    "commented_code": "module github.com/docker/compose/v2\n \n-go 1.21.0\n+go 1.22.0",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1753895622",
        "repo_full_name": "docker/compose",
        "pr_number": 12115,
        "pr_file": "go.mod",
        "discussion_id": "1753895622",
        "commented_code": "@@ -1,23 +1,23 @@\n module github.com/docker/compose/v2\n \n-go 1.21.0\n+go 1.22.0",
        "comment_created_at": "2024-09-11T10:03:56+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Did it automatically update this one, or did it still allow go 1.21.0 here?\r\n\r\nI generally try to treat this one the same as other dependencies; list the minimum required version, and only update if it's _impossible_ to use with older versions; see https://github.com/containerd/containerd/pull/10596#discussion_r1721294997",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1631429507",
    "pr_number": 11892,
    "pr_file": "go.mod",
    "created_at": "2024-06-07T16:10:48+00:00",
    "commented_code": "gotest.tools/v3 v3.5.1\n )\n \n+replace github.com/docker/cli v26.1.3+incompatible => github.com/docker/cli v26.1.1-0.20240607143903-7ae9f2738c6b+incompatible",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1631429507",
        "repo_full_name": "docker/compose",
        "pr_number": 11892,
        "pr_file": "go.mod",
        "discussion_id": "1631429507",
        "commented_code": "@@ -59,6 +59,8 @@ require (\n \tgotest.tools/v3 v3.5.1\n )\n \n+replace github.com/docker/cli v26.1.3+incompatible => github.com/docker/cli v26.1.1-0.20240607143903-7ae9f2738c6b+incompatible",
        "comment_created_at": "2024-06-07T16:10:48+00:00",
        "comment_author": "akerouanton",
        "comment_body": "Not sure why, but `go mod tidy` kept reverting my change when trying to do that in the `require` block above \ud83e\udd14 @thaJeztah @glours @ndeloof Any ideas?",
        "pr_file_module": null
      },
      {
        "comment_id": "1631479979",
        "repo_full_name": "docker/compose",
        "pr_number": 11892,
        "pr_file": "go.mod",
        "discussion_id": "1631429507",
        "commented_code": "@@ -59,6 +59,8 @@ require (\n \tgotest.tools/v3 v3.5.1\n )\n \n+replace github.com/docker/cli v26.1.3+incompatible => github.com/docker/cli v26.1.1-0.20240607143903-7ae9f2738c6b+incompatible",
        "comment_created_at": "2024-06-07T17:02:19+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Because 26.1.1 is lower than 26.1.3. Thank Go for inventing pseudo versions and not understanding release branches",
        "pr_file_module": null
      },
      {
        "comment_id": "1633780821",
        "repo_full_name": "docker/compose",
        "pr_number": 11892,
        "pr_file": "go.mod",
        "discussion_id": "1631429507",
        "commented_code": "@@ -59,6 +59,8 @@ require (\n \tgotest.tools/v3 v3.5.1\n )\n \n+replace github.com/docker/cli v26.1.3+incompatible => github.com/docker/cli v26.1.1-0.20240607143903-7ae9f2738c6b+incompatible",
        "comment_created_at": "2024-06-10T20:18:59+00:00",
        "comment_author": "akerouanton",
        "comment_body": "So we'll need to make a rc1 tag to make it possible to update github.com/docker/cli here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1633782988",
        "repo_full_name": "docker/compose",
        "pr_number": 11892,
        "pr_file": "go.mod",
        "discussion_id": "1631429507",
        "commented_code": "@@ -59,6 +59,8 @@ require (\n \tgotest.tools/v3 v3.5.1\n )\n \n+replace github.com/docker/cli v26.1.3+incompatible => github.com/docker/cli v26.1.1-0.20240607143903-7ae9f2738c6b+incompatible",
        "comment_created_at": "2024-06-10T20:21:06+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "before we have a tag, you can temporarily add replace rules; see https://github.com/docker/buildx/pull/2499",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1471385210",
    "pr_number": 11426,
    "pr_file": "go.mod",
    "created_at": "2024-01-30T15:00:08+00:00",
    "commented_code": "tags.cncf.io/container-device-interface v0.6.2 // indirect\n )\n \n-// Fix an issue with fsutil v0.0.0-20230825212630-f09800878302 on Windows\n-// See https://github.com/docker/buildx/issues/2207#issuecomment-1908460460\n-replace github.com/tonistiigi/fsutil v0.0.0-20230825212630-f09800878302 => github.com/crazy-max/fsutil v0.0.0-20240124164449-376dc28ff40f\n+replace (\n+\t// reverts https://github.com/moby/buildkit/pull/4094 to fix fsutil issues on Windows\n+\tgithub.com/docker/buildx => github.com/crazy-max/buildx v0.8.1-0.20240130141015-d7042ae5516c // compose-617f538cb315\n+\tgithub.com/moby/buildkit => github.com/crazy-max/buildkit v0.7.1-0.20240130133234-d9aa289bd124 // compose-957cb50df991",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1471385210",
        "repo_full_name": "docker/compose",
        "pr_number": 11426,
        "pr_file": "go.mod",
        "discussion_id": "1471385210",
        "commented_code": "@@ -183,6 +183,9 @@ require (\n \ttags.cncf.io/container-device-interface v0.6.2 // indirect\n )\n \n-// Fix an issue with fsutil v0.0.0-20230825212630-f09800878302 on Windows\n-// See https://github.com/docker/buildx/issues/2207#issuecomment-1908460460\n-replace github.com/tonistiigi/fsutil v0.0.0-20230825212630-f09800878302 => github.com/crazy-max/fsutil v0.0.0-20240124164449-376dc28ff40f\n+replace (\n+\t// reverts https://github.com/moby/buildkit/pull/4094 to fix fsutil issues on Windows\n+\tgithub.com/docker/buildx => github.com/crazy-max/buildx v0.8.1-0.20240130141015-d7042ae5516c // compose-617f538cb315\n+\tgithub.com/moby/buildkit => github.com/crazy-max/buildkit v0.7.1-0.20240130133234-d9aa289bd124 // compose-957cb50df991",
        "comment_created_at": "2024-01-30T15:00:08+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Do we have PRs for this in the upstream repositories? Looks like compose is using master / v0.13.x as dependency, so if we could get the fix merged in upstream, that'd be good, I think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1471391255",
        "repo_full_name": "docker/compose",
        "pr_number": 11426,
        "pr_file": "go.mod",
        "discussion_id": "1471385210",
        "commented_code": "@@ -183,6 +183,9 @@ require (\n \ttags.cncf.io/container-device-interface v0.6.2 // indirect\n )\n \n-// Fix an issue with fsutil v0.0.0-20230825212630-f09800878302 on Windows\n-// See https://github.com/docker/buildx/issues/2207#issuecomment-1908460460\n-replace github.com/tonistiigi/fsutil v0.0.0-20230825212630-f09800878302 => github.com/crazy-max/fsutil v0.0.0-20240124164449-376dc28ff40f\n+replace (\n+\t// reverts https://github.com/moby/buildkit/pull/4094 to fix fsutil issues on Windows\n+\tgithub.com/docker/buildx => github.com/crazy-max/buildx v0.8.1-0.20240130141015-d7042ae5516c // compose-617f538cb315\n+\tgithub.com/moby/buildkit => github.com/crazy-max/buildkit v0.7.1-0.20240130133234-d9aa289bd124 // compose-957cb50df991",
        "comment_created_at": "2024-01-30T15:03:35+00:00",
        "comment_author": "crazy-max",
        "comment_body": "Both don't fix the actual issue but reverts https://github.com/moby/buildkit/pull/4094. I hope to have it fix in fsutil so we can vendor in buildkit then buildx and compose to be aligned and remove these replaces :pray:.\r\n\r\nLet me know if you prefer a branch on upstream repos instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "952791814",
    "pr_number": 9776,
    "pr_file": "Makefile",
    "created_at": "2022-08-23T15:39:55+00:00",
    "commented_code": "MOBY_DOCKER=/Applications/Docker.app/Contents/Resources/bin/docker\n endif\n \n-BINARY_FOLDER=$(shell pwd)/bin\n-GIT_TAG?=$(shell git describe --tags --match \"v[0-9]*\")\n TEST_FLAGS?=\n E2E_TEST?=\n ifeq ($(E2E_TEST),)\n else\n \tTEST_FLAGS=-run $(E2E_TEST)\n endif\n \n-all: compose-plugin\n+all: build\n+\n+.PHONY: ldflags\n+ldflags:\n+\t@echo $(LDFLAGS)\n+\n+.PHONY: build ## Build the compose cli-plugin\n+build:\n+\t$(eval DESTDIR ?= $(shell pwd)/bin/build)\n+\tmkdir -p \"$(DESTDIR)\"\n+\tCGO_ENABLED=$(CGO_ENABLED) go build -trimpath -tags \"$(BUILD_TAGS)\" -ldflags \"$(LDFLAGS)\" -o \"$(DESTDIR)/docker-compose\" ./cmd",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "952791814",
        "repo_full_name": "docker/compose",
        "pr_number": 9776,
        "pr_file": "Makefile",
        "discussion_id": "952791814",
        "commented_code": "@@ -30,23 +27,31 @@ ifeq ($(UNAME_S),Darwin)\n \tMOBY_DOCKER=/Applications/Docker.app/Contents/Resources/bin/docker\n endif\n \n-BINARY_FOLDER=$(shell pwd)/bin\n-GIT_TAG?=$(shell git describe --tags --match \"v[0-9]*\")\n TEST_FLAGS?=\n E2E_TEST?=\n ifeq ($(E2E_TEST),)\n else\n \tTEST_FLAGS=-run $(E2E_TEST)\n endif\n \n-all: compose-plugin\n+all: build\n+\n+.PHONY: ldflags\n+ldflags:\n+\t@echo $(LDFLAGS)\n+\n+.PHONY: build ## Build the compose cli-plugin\n+build:\n+\t$(eval DESTDIR ?= $(shell pwd)/bin/build)\n+\tmkdir -p \"$(DESTDIR)\"\n+\tCGO_ENABLED=$(CGO_ENABLED) go build -trimpath -tags \"$(BUILD_TAGS)\" -ldflags \"$(LDFLAGS)\" -o \"$(DESTDIR)/docker-compose\" ./cmd",
        "comment_created_at": "2022-08-23T15:39:55+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Could we set `GO111MODULE=auto` (or `on`), or `-mod=<what is it?>` in the makefile? That way we wouldn't have to think about setting that in `docker-ce-packaging`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "952832902",
    "pr_number": 9776,
    "pr_file": "Makefile",
    "created_at": "2022-08-23T16:11:21+00:00",
    "commented_code": "#   See the License for the specific language governing permissions and\n #   limitations under the License.\n \n-ifneq (, $(BUILDX_BIN))\n-\texport BUILDX_CMD = $(BUILDX_BIN)\n-else ifneq (, $(shell docker buildx version))\n-\texport BUILDX_CMD = docker buildx\n-else ifneq (, $(shell which buildx))\n-\texport BUILDX_CMD = $(which buildx)\n-else\n-\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")\n-endif",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "952832902",
        "repo_full_name": "docker/compose",
        "pr_number": 9776,
        "pr_file": "Makefile",
        "discussion_id": "952832902",
        "commented_code": "@@ -12,15 +12,12 @@\n #   See the License for the specific language governing permissions and\n #   limitations under the License.\n \n-ifneq (, $(BUILDX_BIN))\n-\texport BUILDX_CMD = $(BUILDX_BIN)\n-else ifneq (, $(shell docker buildx version))\n-\texport BUILDX_CMD = docker buildx\n-else ifneq (, $(shell which buildx))\n-\texport BUILDX_CMD = $(which buildx)\n-else\n-\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")\n-endif",
        "comment_created_at": "2022-08-23T16:11:21+00:00",
        "comment_author": "nicksieger",
        "comment_body": "Rather than using the funky `buildx-cmd` target with the eval function below, could we instead change the `else` block of the above code to be\r\n\r\n```Makefile\r\nelse\r\n    export BUILDX_CMD = echo \"Buildx is required: https://github.com/docker/buildx#installing\"; false\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "953152104",
    "pr_number": 9776,
    "pr_file": "Makefile",
    "created_at": "2022-08-23T22:12:14+00:00",
    "commented_code": "e2e: e2e-compose e2e-compose-standalone ## Run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: build-and-e2e\n-build-and-e2e: compose-plugin e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n+build-and-e2e: build e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: cross\n-cross: ## Compile the CLI for linux, darwin and windows\n-\t$(BUILDX_CMD) bake binary\n+cross: buildx-cmd ## Compile the CLI for linux, darwin and windows\n+\t$(BUILDX_CMD) bake binary-cross\n \n .PHONY: test\n-test: ## Run unit tests\n+test: buildx-cmd ## Run unit tests\n \t$(BUILDX_CMD) bake test\n \n .PHONY: cache-clear\n-cache-clear: ## Clear the builder cache\n+cache-clear: buildx-cmd ## Clear the builder cache\n \t$(BUILDX_CMD) prune --force --filter type=exec.cachemount --filter=unused-for=24h\n \n .PHONY: lint\n-lint: ## run linter(s)\n+lint: buildx-cmd ## run linter(s)\n \t$(BUILDX_CMD) bake lint\n \n .PHONY: docs\n-docs: ## generate documentation\n+docs: buildx-cmd ## generate documentation\n \t$(eval $@_TMP_OUT := $(shell mktemp -d -t compose-output.XXXXXXXXXX))\n \t$(BUILDX_CMD) bake --set \"*.output=type=local,dest=$($@_TMP_OUT)\" docs-update\n \trm -rf ./docs/internal\n \tcp -R \"$($@_TMP_OUT)\"/out/* ./docs/\n \trm -rf \"$($@_TMP_OUT)\"/*\n \n .PHONY: validate-docs\n-validate-docs: ## validate the doc does not change\n+validate-docs: buildx-cmd ## validate the doc does not change\n \t$(BUILDX_CMD) bake docs-validate\n \n .PHONY: check-dependencies\n check-dependencies: ## check dependency updates\n \tgo list -u -m -f '{{if not .Indirect}}{{if .Update}}{{.}}{{end}}{{end}}' all\n \n .PHONY: validate-headers\n-validate-headers: ## Check license header for all files\n+validate-headers: buildx-cmd ## Check license header for all files\n \t$(BUILDX_CMD) bake license-validate\n \n .PHONY: go-mod-tidy\n-go-mod-tidy: ## Run go mod tidy in a container and output resulting go.mod and go.sum\n+go-mod-tidy: buildx-cmd ## Run go mod tidy in a container and output resulting go.mod and go.sum\n \t$(BUILDX_CMD) bake vendor-update\n \n .PHONY: validate-go-mod\n-validate-go-mod: ## Validate go.mod and go.sum are up-to-date\n+validate-go-mod: buildx-cmd ## Validate go.mod and go.sum are up-to-date\n \t$(BUILDX_CMD) bake vendor-validate\n \n validate: validate-go-mod validate-headers validate-docs ## Validate sources\n \n-pre-commit: validate check-dependencies lint compose-plugin test e2e-compose\n+pre-commit: validate check-dependencies lint build test e2e-compose\n+\n+.PHONY: buildx-cmd\n+ifneq (, $(BUILDX_BIN))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(BUILDX_BIN))\n+else ifneq (, $(shell docker buildx version 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = docker buildx)\n+else ifneq (, $(shell which buildx 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(shell which buildx))\n+else\n+buildx-cmd:\n+\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "953152104",
        "repo_full_name": "docker/compose",
        "pr_number": 9776,
        "pr_file": "Makefile",
        "discussion_id": "953152104",
        "commented_code": "@@ -76,55 +78,70 @@ mocks:\n e2e: e2e-compose e2e-compose-standalone ## Run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: build-and-e2e\n-build-and-e2e: compose-plugin e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n+build-and-e2e: build e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: cross\n-cross: ## Compile the CLI for linux, darwin and windows\n-\t$(BUILDX_CMD) bake binary\n+cross: buildx-cmd ## Compile the CLI for linux, darwin and windows\n+\t$(BUILDX_CMD) bake binary-cross\n \n .PHONY: test\n-test: ## Run unit tests\n+test: buildx-cmd ## Run unit tests\n \t$(BUILDX_CMD) bake test\n \n .PHONY: cache-clear\n-cache-clear: ## Clear the builder cache\n+cache-clear: buildx-cmd ## Clear the builder cache\n \t$(BUILDX_CMD) prune --force --filter type=exec.cachemount --filter=unused-for=24h\n \n .PHONY: lint\n-lint: ## run linter(s)\n+lint: buildx-cmd ## run linter(s)\n \t$(BUILDX_CMD) bake lint\n \n .PHONY: docs\n-docs: ## generate documentation\n+docs: buildx-cmd ## generate documentation\n \t$(eval $@_TMP_OUT := $(shell mktemp -d -t compose-output.XXXXXXXXXX))\n \t$(BUILDX_CMD) bake --set \"*.output=type=local,dest=$($@_TMP_OUT)\" docs-update\n \trm -rf ./docs/internal\n \tcp -R \"$($@_TMP_OUT)\"/out/* ./docs/\n \trm -rf \"$($@_TMP_OUT)\"/*\n \n .PHONY: validate-docs\n-validate-docs: ## validate the doc does not change\n+validate-docs: buildx-cmd ## validate the doc does not change\n \t$(BUILDX_CMD) bake docs-validate\n \n .PHONY: check-dependencies\n check-dependencies: ## check dependency updates\n \tgo list -u -m -f '{{if not .Indirect}}{{if .Update}}{{.}}{{end}}{{end}}' all\n \n .PHONY: validate-headers\n-validate-headers: ## Check license header for all files\n+validate-headers: buildx-cmd ## Check license header for all files\n \t$(BUILDX_CMD) bake license-validate\n \n .PHONY: go-mod-tidy\n-go-mod-tidy: ## Run go mod tidy in a container and output resulting go.mod and go.sum\n+go-mod-tidy: buildx-cmd ## Run go mod tidy in a container and output resulting go.mod and go.sum\n \t$(BUILDX_CMD) bake vendor-update\n \n .PHONY: validate-go-mod\n-validate-go-mod: ## Validate go.mod and go.sum are up-to-date\n+validate-go-mod: buildx-cmd ## Validate go.mod and go.sum are up-to-date\n \t$(BUILDX_CMD) bake vendor-validate\n \n validate: validate-go-mod validate-headers validate-docs ## Validate sources\n \n-pre-commit: validate check-dependencies lint compose-plugin test e2e-compose\n+pre-commit: validate check-dependencies lint build test e2e-compose\n+\n+.PHONY: buildx-cmd\n+ifneq (, $(BUILDX_BIN))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(BUILDX_BIN))\n+else ifneq (, $(shell docker buildx version 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = docker buildx)\n+else ifneq (, $(shell which buildx 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(shell which buildx))\n+else\n+buildx-cmd:\n+\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")",
        "comment_created_at": "2022-08-23T22:12:14+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "But.. I have to admit that I kinda agree with https://github.com/docker/compose/pull/9776#discussion_r952832902, and wonder to what extend we need to have this complicated auto-detection.\r\n\r\nI think common scenarios would be either;\r\n\r\n- `docker` is installed (and `docker buildx` would be available as well for regular installs)\r\n- it's run in GitHub actions with only `buildx` installed; in that case we can set `BUILDX_CMD=buildx`\r\n- if neither is true, then I think a `/bin/sh: docker: not found` error may be \"just fine\" (after all, we're also not doing similar things to detect if `go` is installed, or `make`, or `git`)\r\n\r\nIf we agree with the above, just a;\r\n\r\n```make\r\nBUILDX_CMD ?= docker buildx\r\n```\r\n\r\nwould cover that scenario\r\n\r\n(feedback / thoughts welcome!)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "953154052",
        "repo_full_name": "docker/compose",
        "pr_number": 9776,
        "pr_file": "Makefile",
        "discussion_id": "953152104",
        "commented_code": "@@ -76,55 +78,70 @@ mocks:\n e2e: e2e-compose e2e-compose-standalone ## Run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: build-and-e2e\n-build-and-e2e: compose-plugin e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n+build-and-e2e: build e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: cross\n-cross: ## Compile the CLI for linux, darwin and windows\n-\t$(BUILDX_CMD) bake binary\n+cross: buildx-cmd ## Compile the CLI for linux, darwin and windows\n+\t$(BUILDX_CMD) bake binary-cross\n \n .PHONY: test\n-test: ## Run unit tests\n+test: buildx-cmd ## Run unit tests\n \t$(BUILDX_CMD) bake test\n \n .PHONY: cache-clear\n-cache-clear: ## Clear the builder cache\n+cache-clear: buildx-cmd ## Clear the builder cache\n \t$(BUILDX_CMD) prune --force --filter type=exec.cachemount --filter=unused-for=24h\n \n .PHONY: lint\n-lint: ## run linter(s)\n+lint: buildx-cmd ## run linter(s)\n \t$(BUILDX_CMD) bake lint\n \n .PHONY: docs\n-docs: ## generate documentation\n+docs: buildx-cmd ## generate documentation\n \t$(eval $@_TMP_OUT := $(shell mktemp -d -t compose-output.XXXXXXXXXX))\n \t$(BUILDX_CMD) bake --set \"*.output=type=local,dest=$($@_TMP_OUT)\" docs-update\n \trm -rf ./docs/internal\n \tcp -R \"$($@_TMP_OUT)\"/out/* ./docs/\n \trm -rf \"$($@_TMP_OUT)\"/*\n \n .PHONY: validate-docs\n-validate-docs: ## validate the doc does not change\n+validate-docs: buildx-cmd ## validate the doc does not change\n \t$(BUILDX_CMD) bake docs-validate\n \n .PHONY: check-dependencies\n check-dependencies: ## check dependency updates\n \tgo list -u -m -f '{{if not .Indirect}}{{if .Update}}{{.}}{{end}}{{end}}' all\n \n .PHONY: validate-headers\n-validate-headers: ## Check license header for all files\n+validate-headers: buildx-cmd ## Check license header for all files\n \t$(BUILDX_CMD) bake license-validate\n \n .PHONY: go-mod-tidy\n-go-mod-tidy: ## Run go mod tidy in a container and output resulting go.mod and go.sum\n+go-mod-tidy: buildx-cmd ## Run go mod tidy in a container and output resulting go.mod and go.sum\n \t$(BUILDX_CMD) bake vendor-update\n \n .PHONY: validate-go-mod\n-validate-go-mod: ## Validate go.mod and go.sum are up-to-date\n+validate-go-mod: buildx-cmd ## Validate go.mod and go.sum are up-to-date\n \t$(BUILDX_CMD) bake vendor-validate\n \n validate: validate-go-mod validate-headers validate-docs ## Validate sources\n \n-pre-commit: validate check-dependencies lint compose-plugin test e2e-compose\n+pre-commit: validate check-dependencies lint build test e2e-compose\n+\n+.PHONY: buildx-cmd\n+ifneq (, $(BUILDX_BIN))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(BUILDX_BIN))\n+else ifneq (, $(shell docker buildx version 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = docker buildx)\n+else ifneq (, $(shell which buildx 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(shell which buildx))\n+else\n+buildx-cmd:\n+\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")",
        "comment_created_at": "2022-08-23T22:15:37+00:00",
        "comment_author": "crazy-max",
        "comment_body": "Sure sgtm to remove this detection.",
        "pr_file_module": null
      },
      {
        "comment_id": "953158790",
        "repo_full_name": "docker/compose",
        "pr_number": 9776,
        "pr_file": "Makefile",
        "discussion_id": "953152104",
        "commented_code": "@@ -76,55 +78,70 @@ mocks:\n e2e: e2e-compose e2e-compose-standalone ## Run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: build-and-e2e\n-build-and-e2e: compose-plugin e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n+build-and-e2e: build e2e-compose e2e-compose-standalone ## Compile the compose cli-plugin and run end to end local tests in both modes. Set E2E_TEST=TestName to run a single test\n \n .PHONY: cross\n-cross: ## Compile the CLI for linux, darwin and windows\n-\t$(BUILDX_CMD) bake binary\n+cross: buildx-cmd ## Compile the CLI for linux, darwin and windows\n+\t$(BUILDX_CMD) bake binary-cross\n \n .PHONY: test\n-test: ## Run unit tests\n+test: buildx-cmd ## Run unit tests\n \t$(BUILDX_CMD) bake test\n \n .PHONY: cache-clear\n-cache-clear: ## Clear the builder cache\n+cache-clear: buildx-cmd ## Clear the builder cache\n \t$(BUILDX_CMD) prune --force --filter type=exec.cachemount --filter=unused-for=24h\n \n .PHONY: lint\n-lint: ## run linter(s)\n+lint: buildx-cmd ## run linter(s)\n \t$(BUILDX_CMD) bake lint\n \n .PHONY: docs\n-docs: ## generate documentation\n+docs: buildx-cmd ## generate documentation\n \t$(eval $@_TMP_OUT := $(shell mktemp -d -t compose-output.XXXXXXXXXX))\n \t$(BUILDX_CMD) bake --set \"*.output=type=local,dest=$($@_TMP_OUT)\" docs-update\n \trm -rf ./docs/internal\n \tcp -R \"$($@_TMP_OUT)\"/out/* ./docs/\n \trm -rf \"$($@_TMP_OUT)\"/*\n \n .PHONY: validate-docs\n-validate-docs: ## validate the doc does not change\n+validate-docs: buildx-cmd ## validate the doc does not change\n \t$(BUILDX_CMD) bake docs-validate\n \n .PHONY: check-dependencies\n check-dependencies: ## check dependency updates\n \tgo list -u -m -f '{{if not .Indirect}}{{if .Update}}{{.}}{{end}}{{end}}' all\n \n .PHONY: validate-headers\n-validate-headers: ## Check license header for all files\n+validate-headers: buildx-cmd ## Check license header for all files\n \t$(BUILDX_CMD) bake license-validate\n \n .PHONY: go-mod-tidy\n-go-mod-tidy: ## Run go mod tidy in a container and output resulting go.mod and go.sum\n+go-mod-tidy: buildx-cmd ## Run go mod tidy in a container and output resulting go.mod and go.sum\n \t$(BUILDX_CMD) bake vendor-update\n \n .PHONY: validate-go-mod\n-validate-go-mod: ## Validate go.mod and go.sum are up-to-date\n+validate-go-mod: buildx-cmd ## Validate go.mod and go.sum are up-to-date\n \t$(BUILDX_CMD) bake vendor-validate\n \n validate: validate-go-mod validate-headers validate-docs ## Validate sources\n \n-pre-commit: validate check-dependencies lint compose-plugin test e2e-compose\n+pre-commit: validate check-dependencies lint build test e2e-compose\n+\n+.PHONY: buildx-cmd\n+ifneq (, $(BUILDX_BIN))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(BUILDX_BIN))\n+else ifneq (, $(shell docker buildx version 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = docker buildx)\n+else ifneq (, $(shell which buildx 2>/dev/null))\n+buildx-cmd:\n+\t$(eval BUILDX_CMD = $(shell which buildx))\n+else\n+buildx-cmd:\n+\t$(error \"Buildx is required: https://github.com/docker/buildx#installing\")",
        "comment_created_at": "2022-08-23T22:25:03+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Thanks! Sorry for being nit-picky there (I can see some value for auto-detection in other scenarios), just looking \"can we simplify things (within reason)\"? In the end, the repository would have a \"how to build\" with some prerequisites, so if things fail, users should just \"read the manual\" \ud83d\ude02 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "741255073",
    "pr_number": 8865,
    "pr_file": "go.mod",
    "created_at": "2021-11-02T16:14:55+00:00",
    "commented_code": "module github.com/docker/compose/v2\n \n-go 1.16\n+go 1.17\n \n require (\n-\tgithub.com/AlecAivazis/survey/v2 v2.2.3\n-\tgithub.com/buger/goterm v1.0.0\n+\tgithub.com/AlecAivazis/survey/v2 v2.3.2\n+\tgithub.com/buger/goterm v1.0.3\n \tgithub.com/cnabio/cnab-to-oci v0.3.1-beta1\n \tgithub.com/compose-spec/compose-go v1.0.4\n-\tgithub.com/containerd/console v1.0.2\n+\tgithub.com/containerd/console v1.0.3",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "741255073",
        "repo_full_name": "docker/compose",
        "pr_number": 8865,
        "pr_file": "go.mod",
        "discussion_id": "741255073",
        "commented_code": "@@ -1,29 +1,26 @@\n module github.com/docker/compose/v2\n \n-go 1.16\n+go 1.17\n \n require (\n-\tgithub.com/AlecAivazis/survey/v2 v2.2.3\n-\tgithub.com/buger/goterm v1.0.0\n+\tgithub.com/AlecAivazis/survey/v2 v2.3.2\n+\tgithub.com/buger/goterm v1.0.3\n \tgithub.com/cnabio/cnab-to-oci v0.3.1-beta1\n \tgithub.com/compose-spec/compose-go v1.0.4\n-\tgithub.com/containerd/console v1.0.2\n+\tgithub.com/containerd/console v1.0.3",
        "comment_created_at": "2021-11-02T16:14:55+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Looks like we're also updating various dependencies here; were these needed for Go 1.17? (otherwise it's good practice to do this separately).",
        "pr_file_module": null
      },
      {
        "comment_id": "741482810",
        "repo_full_name": "docker/compose",
        "pr_number": 8865,
        "pr_file": "go.mod",
        "discussion_id": "741255073",
        "commented_code": "@@ -1,29 +1,26 @@\n module github.com/docker/compose/v2\n \n-go 1.16\n+go 1.17\n \n require (\n-\tgithub.com/AlecAivazis/survey/v2 v2.2.3\n-\tgithub.com/buger/goterm v1.0.0\n+\tgithub.com/AlecAivazis/survey/v2 v2.3.2\n+\tgithub.com/buger/goterm v1.0.3\n \tgithub.com/cnabio/cnab-to-oci v0.3.1-beta1\n \tgithub.com/compose-spec/compose-go v1.0.4\n-\tgithub.com/containerd/console v1.0.2\n+\tgithub.com/containerd/console v1.0.3",
        "comment_created_at": "2021-11-02T21:43:02+00:00",
        "comment_author": "rumpl",
        "comment_body": "Not needed, thought I could do both at once with a nice comment on the PR, can separate if needed",
        "pr_file_module": null
      }
    ]
  }
]