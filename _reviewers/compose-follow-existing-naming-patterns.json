[
  {
    "discussion_id": "1935798823",
    "pr_number": 12486,
    "pr_file": "cmd/compose/publish.go",
    "created_at": "2025-01-30T15:19:51+00:00",
    "commented_code": "flags.BoolVar(&opts.resolveImageDigests, \"resolve-image-digests\", false, \"Pin image tags to digests\")\n \tflags.StringVar(&opts.ociVersion, \"oci-version\", \"\", \"OCI image/artifact specification version (automatically determined by default)\")\n \tflags.BoolVar(&opts.withEnvironment, \"with-env\", false, \"Include environment variables in the published OCI artifact\")\n+\tflags.BoolVarP(&opts.force, \"force\", \"f\", false, \"Force publish without asking for confirmation\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1935798823",
        "repo_full_name": "docker/compose",
        "pr_number": 12486,
        "pr_file": "cmd/compose/publish.go",
        "discussion_id": "1935798823",
        "commented_code": "@@ -48,6 +49,7 @@ func publishCommand(p *ProjectOptions, dockerCli command.Cli, backend api.Servic\n \tflags.BoolVar(&opts.resolveImageDigests, \"resolve-image-digests\", false, \"Pin image tags to digests\")\n \tflags.StringVar(&opts.ociVersion, \"oci-version\", \"\", \"OCI image/artifact specification version (automatically determined by default)\")\n \tflags.BoolVar(&opts.withEnvironment, \"with-env\", false, \"Include environment variables in the published OCI artifact\")\n+\tflags.BoolVarP(&opts.force, \"force\", \"f\", false, \"Force publish without asking for confirmation\")",
        "comment_created_at": "2025-01-30T15:19:51+00:00",
        "comment_author": "ndeloof",
        "comment_body": "I'd suggest to use `-y` to align with https://github.com/docker/compose/blob/main/cmd/compose/create.go#L84",
        "pr_file_module": null
      },
      {
        "comment_id": "1935819797",
        "repo_full_name": "docker/compose",
        "pr_number": 12486,
        "pr_file": "cmd/compose/publish.go",
        "discussion_id": "1935798823",
        "commented_code": "@@ -48,6 +49,7 @@ func publishCommand(p *ProjectOptions, dockerCli command.Cli, backend api.Servic\n \tflags.BoolVar(&opts.resolveImageDigests, \"resolve-image-digests\", false, \"Pin image tags to digests\")\n \tflags.StringVar(&opts.ociVersion, \"oci-version\", \"\", \"OCI image/artifact specification version (automatically determined by default)\")\n \tflags.BoolVar(&opts.withEnvironment, \"with-env\", false, \"Include environment variables in the published OCI artifact\")\n+\tflags.BoolVarP(&opts.force, \"force\", \"f\", false, \"Force publish without asking for confirmation\")",
        "comment_created_at": "2025-01-30T15:31:46+00:00",
        "comment_author": "glours",
        "comment_body": "Agree will update my PR üëç ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1494643089",
    "pr_number": 11513,
    "pr_file": "internal/locker/pidfile_unix.go",
    "created_at": "2024-02-19T14:37:22+00:00",
    "commented_code": "+//go:build !windows",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1494643089",
        "repo_full_name": "docker/compose",
        "pr_number": 11513,
        "pr_file": "internal/locker/pidfile_unix.go",
        "discussion_id": "1494643089",
        "commented_code": "@@ -0,0 +1,29 @@\n+//go:build !windows",
        "comment_created_at": "2024-02-19T14:37:22+00:00",
        "comment_author": "ndeloof",
        "comment_body": "As this also applies to Darwin, maybe rename `_posix` :trollface: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1047756051",
    "pr_number": 10076,
    "pr_file": "cmd/compose/up.go",
    "created_at": "2022-12-13T21:11:50+00:00",
    "commented_code": "flags.BoolVar(&up.cascadeStop, \"abort-on-container-exit\", false, \"Stops all containers if any container was stopped. Incompatible with -d\")\n \tflags.StringVar(&up.exitCodeFrom, \"exit-code-from\", \"\", \"Return the exit code of the selected service container. Implies --abort-on-container-exit\")\n \tflags.IntVarP(&create.timeout, \"timeout\", \"t\", 10, \"Use this timeout in seconds for container shutdown when attached or when containers are already running.\")\n+\tflags.BoolVar(&up.timestamp, \"timestamp\", false, \"Show timestamps.\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1047756051",
        "repo_full_name": "docker/compose",
        "pr_number": 10076,
        "pr_file": "cmd/compose/up.go",
        "discussion_id": "1047756051",
        "commented_code": "@@ -126,6 +127,7 @@ func upCommand(p *projectOptions, backend api.Service) *cobra.Command {\n \tflags.BoolVar(&up.cascadeStop, \"abort-on-container-exit\", false, \"Stops all containers if any container was stopped. Incompatible with -d\")\n \tflags.StringVar(&up.exitCodeFrom, \"exit-code-from\", \"\", \"Return the exit code of the selected service container. Implies --abort-on-container-exit\")\n \tflags.IntVarP(&create.timeout, \"timeout\", \"t\", 10, \"Use this timeout in seconds for container shutdown when attached or when containers are already running.\")\n+\tflags.BoolVar(&up.timestamp, \"timestamp\", false, \"Show timestamps.\")",
        "comment_created_at": "2022-12-13T21:11:50+00:00",
        "comment_author": "milas",
        "comment_body": "For consistency with `compose logs` & `docker logs`, looks like this should be `timestamps` (plural)\r\n\r\nhttps://github.com/docker/cli/blob/990674901b4fdd0bd2d3f91aa84ad3efe225f6fb/cli/command/container/logs.go#L49\r\n\r\nhttps://github.com/docker/compose/blob/0368f190303b28e142f983257171a6f554749313/cmd/compose/logs.go#L60",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "933270977",
    "pr_number": 9179,
    "pr_file": "pkg/api/api.go",
    "created_at": "2022-07-29T13:32:39+00:00",
    "commented_code": "// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {\n+\timageName := service.Image\n+\tif imageName == \"\" {\n+\t\timageName = projectName + \"_\" + service.Name",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "933270977",
        "repo_full_name": "docker/compose",
        "pr_number": 9179,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "933270977",
        "commented_code": "@@ -445,3 +445,12 @@ const (\n \t// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {\n+\timageName := service.Image\n+\tif imageName == \"\" {\n+\t\timageName = projectName + \"_\" + service.Name",
        "comment_created_at": "2022-07-29T13:32:39+00:00",
        "comment_author": "milas",
        "comment_body": "@glours Should we make this `-` to align with other resources (compose-spec/compose-go#294)?",
        "pr_file_module": null
      },
      {
        "comment_id": "933272436",
        "repo_full_name": "docker/compose",
        "pr_number": 9179,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "933270977",
        "commented_code": "@@ -445,3 +445,12 @@ const (\n \t// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {\n+\timageName := service.Image\n+\tif imageName == \"\" {\n+\t\timageName = projectName + \"_\" + service.Name",
        "comment_created_at": "2022-07-29T13:33:53+00:00",
        "comment_author": "milas",
        "comment_body": "Oh, I see this is actually not a change in this PR, as this logic existed perviously as `getImageName` and is just exported now, so don't need to address before merging this even if we want to change",
        "pr_file_module": null
      },
      {
        "comment_id": "933283037",
        "repo_full_name": "docker/compose",
        "pr_number": 9179,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "933270977",
        "commented_code": "@@ -445,3 +445,12 @@ const (\n \t// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {\n+\timageName := service.Image\n+\tif imageName == \"\" {\n+\t\timageName = projectName + \"_\" + service.Name",
        "comment_created_at": "2022-07-29T13:42:27+00:00",
        "comment_author": "glours",
        "comment_body": "It's less important for the image name, but I'll add a commit to use the compose separator üëç ",
        "pr_file_module": null
      },
      {
        "comment_id": "933388135",
        "repo_full_name": "docker/compose",
        "pr_number": 9179,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "933270977",
        "commented_code": "@@ -445,3 +445,12 @@ const (\n \t// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {\n+\timageName := service.Image\n+\tif imageName == \"\" {\n+\t\timageName = projectName + \"_\" + service.Name",
        "comment_created_at": "2022-07-29T15:30:47+00:00",
        "comment_author": "glours",
        "comment_body": "I'll do it in a PR to fix this issue #9618",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "933274071",
    "pr_number": 9179,
    "pr_file": "pkg/api/api.go",
    "created_at": "2022-07-29T13:34:52+00:00",
    "commented_code": "// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "933274071",
        "repo_full_name": "docker/compose",
        "pr_number": 9179,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "933274071",
        "commented_code": "@@ -445,3 +445,12 @@ const (\n \t// UserCancel user cancelled compose up, we are stopping containers\n \tUserCancel\n )\n+\n+// GetDefaultImageName computes the default image name for a service, used to tag built images\n+func GetDefaultImageName(service types.ServiceConfig, projectName string) string {",
        "comment_created_at": "2022-07-29T13:34:52+00:00",
        "comment_author": "milas",
        "comment_body": "I'd propose renaming this to `GetImageNameOrDefault` since it reads `service.Image` if populated and then falls back to producing one. Particularly now that it's exported üòâ ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1134217255",
    "pr_number": 10369,
    "pr_file": "pkg/compose/build.go",
    "created_at": "2023-03-13T15:58:44+00:00",
    "commented_code": "return ret\n }\n \n+func parseBuildContexts(additionalContexts map[string]*string) map[string]build.NamedContext {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1134217255",
        "repo_full_name": "docker/compose",
        "pr_number": 10369,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "1134217255",
        "commented_code": "@@ -402,6 +405,14 @@ func getImageBuildLabels(project *types.Project, service types.ServiceConfig) ty\n \treturn ret\n }\n \n+func parseBuildContexts(additionalContexts map[string]*string) map[string]build.NamedContext {",
        "comment_created_at": "2023-03-13T15:58:44+00:00",
        "comment_author": "ndeloof",
        "comment_body": "nit: AFAICT we don't `parse` things here, so better name this `toBuildContexts`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1143408251",
    "pr_number": 10374,
    "pr_file": "pkg/compose/build_classic.go",
    "created_at": "2023-03-21T13:49:09+00:00",
    "commented_code": "return err == nil\n }\n \n-func imageBuildOptions(options buildx.Options) dockertypes.ImageBuildOptions {\n+func imageBuildOptions(config *types.BuildConfig) dockertypes.ImageBuildOptions {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1143408251",
        "repo_full_name": "docker/compose",
        "pr_number": 10374,
        "pr_file": "pkg/compose/build_classic.go",
        "discussion_id": "1143408251",
        "commented_code": "@@ -252,25 +211,18 @@ func isLocalDir(c string) bool {\n \treturn err == nil\n }\n \n-func imageBuildOptions(options buildx.Options) dockertypes.ImageBuildOptions {\n+func imageBuildOptions(config *types.BuildConfig) dockertypes.ImageBuildOptions {",
        "comment_created_at": "2023-03-21T13:49:09+00:00",
        "comment_author": "milas",
        "comment_body": "Perhaps rename `classicBuildOptions()`",
        "pr_file_module": null
      },
      {
        "comment_id": "1143438542",
        "repo_full_name": "docker/compose",
        "pr_number": 10374,
        "pr_file": "pkg/compose/build_classic.go",
        "discussion_id": "1143408251",
        "commented_code": "@@ -252,25 +211,18 @@ func isLocalDir(c string) bool {\n \treturn err == nil\n }\n \n-func imageBuildOptions(options buildx.Options) dockertypes.ImageBuildOptions {\n+func imageBuildOptions(config *types.BuildConfig) dockertypes.ImageBuildOptions {",
        "comment_created_at": "2023-03-21T14:06:08+00:00",
        "comment_author": "ndeloof",
        "comment_body": "this produces the `options` for the `ImageBuild` engine API, so ...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1122036752",
    "pr_number": 10338,
    "pr_file": "pkg/compose/create.go",
    "created_at": "2023-03-01T16:44:58+00:00",
    "commented_code": "var dependencies []string\n \tfor s, d := range service.DependsOn {\n-\t\tdependencies = append(dependencies, s+\":\"+d.Condition)\n+\t\tdependencies = append(dependencies, fmt.Sprintf(\"%s:%s|%t\", s, d.Condition, d.Restart))",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1122036752",
        "repo_full_name": "docker/compose",
        "pr_number": 10338,
        "pr_file": "pkg/compose/create.go",
        "discussion_id": "1122036752",
        "commented_code": "@@ -470,7 +470,7 @@ func (s *composeService) prepareLabels(service types.ServiceConfig, number int)\n \n \tvar dependencies []string\n \tfor s, d := range service.DependsOn {\n-\t\tdependencies = append(dependencies, s+\":\"+d.Condition)\n+\t\tdependencies = append(dependencies, fmt.Sprintf(\"%s:%s|%t\", s, d.Condition, d.Restart))",
        "comment_created_at": "2023-03-01T16:44:58+00:00",
        "comment_author": "ndeloof",
        "comment_body": "sounds weird to me we use a distinct separator for fields, I'd prefer we use `:` everywhere\r\nThis allows an earlier version of compose to successfully parse the label, and ignore the last `:xxxx` parts (so we can add more in the future)",
        "pr_file_module": null
      },
      {
        "comment_id": "1122045083",
        "repo_full_name": "docker/compose",
        "pr_number": 10338,
        "pr_file": "pkg/compose/create.go",
        "discussion_id": "1122036752",
        "commented_code": "@@ -470,7 +470,7 @@ func (s *composeService) prepareLabels(service types.ServiceConfig, number int)\n \n \tvar dependencies []string\n \tfor s, d := range service.DependsOn {\n-\t\tdependencies = append(dependencies, s+\":\"+d.Condition)\n+\t\tdependencies = append(dependencies, fmt.Sprintf(\"%s:%s|%t\", s, d.Condition, d.Restart))",
        "comment_created_at": "2023-03-01T16:50:28+00:00",
        "comment_author": "glours",
        "comment_body": "Fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1049717077",
    "pr_number": 10082,
    "pr_file": "cmd/compose/compose.go",
    "created_at": "2022-12-15T14:35:36+00:00",
    "commented_code": "}\n \n // RootCommand returns the compose command with its child commands\n-func RootCommand(dockerCli command.Cli, backend api.Service) *cobra.Command { //nolint:gocyclo\n+func RootCommand(dockerCli api.Streams, backend api.Service) *cobra.Command { //nolint:gocyclo",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1049717077",
        "repo_full_name": "docker/compose",
        "pr_number": 10082,
        "pr_file": "cmd/compose/compose.go",
        "discussion_id": "1049717077",
        "commented_code": "@@ -243,7 +242,7 @@ func RunningAsStandalone() bool {\n }\n \n // RootCommand returns the compose command with its child commands\n-func RootCommand(dockerCli command.Cli, backend api.Service) *cobra.Command { //nolint:gocyclo\n+func RootCommand(dockerCli api.Streams, backend api.Service) *cobra.Command { //nolint:gocyclo",
        "comment_created_at": "2022-12-15T14:35:36+00:00",
        "comment_author": "milas",
        "comment_body": "Nit: `s/dockerCli/streams`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1044850499",
    "pr_number": 10044,
    "pr_file": "cmd/compose/pull.go",
    "created_at": "2022-12-09T21:19:49+00:00",
    "commented_code": "return cmd\n }\n \n+func FilterServices(project *types.Project, services []string) error {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1044850499",
        "repo_full_name": "docker/compose",
        "pr_number": 10044,
        "pr_file": "cmd/compose/pull.go",
        "discussion_id": "1044850499",
        "commented_code": "@@ -67,23 +68,29 @@ func pullCommand(p *projectOptions, backend api.Service) *cobra.Command {\n \treturn cmd\n }\n \n+func FilterServices(project *types.Project, services []string) error {",
        "comment_created_at": "2022-12-09T21:19:49+00:00",
        "comment_author": "ndeloof",
        "comment_body": "Don't need to be exporte. Also name is bit confusing. Maybe `withSelectedServicesOnly` or something comparable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1049427873",
        "repo_full_name": "docker/compose",
        "pr_number": 10044,
        "pr_file": "cmd/compose/pull.go",
        "discussion_id": "1044850499",
        "commented_code": "@@ -67,23 +68,29 @@ func pullCommand(p *projectOptions, backend api.Service) *cobra.Command {\n \treturn cmd\n }\n \n+func FilterServices(project *types.Project, services []string) error {",
        "comment_created_at": "2022-12-15T09:48:02+00:00",
        "comment_author": "gferon",
        "comment_body": "Done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "921124498",
    "pr_number": 9636,
    "pr_file": "pkg/compose/run.go",
    "created_at": "2022-07-14T12:57:05+00:00",
    "commented_code": "if len(opts.Environment) > 0 {\n \t\tenv := types.NewMappingWithEquals(opts.Environment)\n \t\tprojectEnv := env.Resolve(func(s string) (string, bool) {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "921124498",
        "repo_full_name": "docker/compose",
        "pr_number": 9636,
        "pr_file": "pkg/compose/run.go",
        "discussion_id": "921124498",
        "commented_code": "@@ -116,8 +116,13 @@ func applyRunOptions(project *types.Project, service *types.ServiceConfig, opts\n \tif len(opts.Environment) > 0 {\n \t\tenv := types.NewMappingWithEquals(opts.Environment)\n \t\tprojectEnv := env.Resolve(func(s string) (string, bool) {",
        "comment_created_at": "2022-07-14T12:57:05+00:00",
        "comment_author": "milas",
        "comment_body": "Nit (not new to your PR üòÖ ): can we rename these? They're very confusing right now.\r\n\r\nI'd recommend:\r\n * `env` -> `cmdEnv` (would match `cmdLineVar` that you added)\r\n * `projectEnv` -> `serviceOverrideEnv`  (it's 100% NOT the \"project\" env which makes this very confusing)",
        "pr_file_module": null
      },
      {
        "comment_id": "921699573",
        "repo_full_name": "docker/compose",
        "pr_number": 9636,
        "pr_file": "pkg/compose/run.go",
        "discussion_id": "921124498",
        "commented_code": "@@ -116,8 +116,13 @@ func applyRunOptions(project *types.Project, service *types.ServiceConfig, opts\n \tif len(opts.Environment) > 0 {\n \t\tenv := types.NewMappingWithEquals(opts.Environment)\n \t\tprojectEnv := env.Resolve(func(s string) (string, bool) {",
        "comment_created_at": "2022-07-14T23:53:56+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "Sure! I felt the same while reading. Didn't change cuz it wasn't part of the PR.\r\nRenaming in 1, 2, 3...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "808057351",
    "pr_number": 9148,
    "pr_file": "pkg/compose/compose.go",
    "created_at": "2022-02-16T14:40:37+00:00",
    "commented_code": "escDollar := []byte{'$', '$'}\n \treturn bytes.ReplaceAll(marshal, dollar, escDollar)\n }\n+\n+// projectFromName builds a types.Project based on actual resources with compose labels set\n+func (s *composeService) projectFromName(containers Containers, projectName string) *types.Project {",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "808057351",
        "repo_full_name": "docker/compose",
        "pr_number": 9148,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "808057351",
        "commented_code": "@@ -92,3 +92,34 @@ func escapeDollarSign(marshal []byte) []byte {\n \tescDollar := []byte{'$', '$'}\n \treturn bytes.ReplaceAll(marshal, dollar, escDollar)\n }\n+\n+// projectFromName builds a types.Project based on actual resources with compose labels set\n+func (s *composeService) projectFromName(containers Containers, projectName string) *types.Project {",
        "comment_created_at": "2022-02-16T14:40:37+00:00",
        "comment_author": "ndeloof",
        "comment_body": "This is basically a duplicate for `projectFromLabels`, better use/adapt this existing function",
        "pr_file_module": null
      },
      {
        "comment_id": "808074818",
        "repo_full_name": "docker/compose",
        "pr_number": 9148,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "808057351",
        "commented_code": "@@ -92,3 +92,34 @@ func escapeDollarSign(marshal []byte) []byte {\n \tescDollar := []byte{'$', '$'}\n \treturn bytes.ReplaceAll(marshal, dollar, escDollar)\n }\n+\n+// projectFromName builds a types.Project based on actual resources with compose labels set\n+func (s *composeService) projectFromName(containers Containers, projectName string) *types.Project {",
        "comment_created_at": "2022-02-16T14:53:52+00:00",
        "comment_author": "arhemd",
        "comment_body": "Yes, that's right but `projectFromName` exists in the file `down.go ` and using that didn't seem right structure-wise.\r\nI would handle this by removing it from `down.go` and modifying the code to use this one instead.\r\nDoes it sound good?",
        "pr_file_module": null
      },
      {
        "comment_id": "808078523",
        "repo_full_name": "docker/compose",
        "pr_number": 9148,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "808057351",
        "commented_code": "@@ -92,3 +92,34 @@ func escapeDollarSign(marshal []byte) []byte {\n \tescDollar := []byte{'$', '$'}\n \treturn bytes.ReplaceAll(marshal, dollar, escDollar)\n }\n+\n+// projectFromName builds a types.Project based on actual resources with compose labels set\n+func (s *composeService) projectFromName(containers Containers, projectName string) *types.Project {",
        "comment_created_at": "2022-02-16T14:56:34+00:00",
        "comment_author": "ndeloof",
        "comment_body": "yes, move it to `compose.go`. Also, probably should be renamed `projectFromActualResources` or something comparable to be more explicit",
        "pr_file_module": null
      },
      {
        "comment_id": "808666781",
        "repo_full_name": "docker/compose",
        "pr_number": 9148,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "808057351",
        "commented_code": "@@ -92,3 +92,34 @@ func escapeDollarSign(marshal []byte) []byte {\n \tescDollar := []byte{'$', '$'}\n \treturn bytes.ReplaceAll(marshal, dollar, escDollar)\n }\n+\n+// projectFromName builds a types.Project based on actual resources with compose labels set\n+func (s *composeService) projectFromName(containers Containers, projectName string) *types.Project {",
        "comment_created_at": "2022-02-17T04:32:10+00:00",
        "comment_author": "arhemd",
        "comment_body": "- Removed `projectFromLabels` from `down.go`\r\n- Fixed an issue causing some tests to fail\r\nI couldn't think of a short and non-misleading alternative for `projectFromName` tho.",
        "pr_file_module": null
      }
    ]
  }
]