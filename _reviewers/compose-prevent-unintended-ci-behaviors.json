[
  {
    "discussion_id": "1179605327",
    "pr_number": 10502,
    "pr_file": "pkg/compose/build_buildkit.go",
    "created_at": "2023-04-27T19:39:44+00:00",
    "commented_code": "return imagesBuilt, err\n }\n+\n+func (s composeService) dryRunBuildResponse(ctx context.Context, options map[string]build.Options) (resp map[string]*client.SolveResponse, err error) {\n+\tbuildResponse := map[string]*client.SolveResponse{}\n+\tfor name, option := range options {\n+\t\tdryRunUUID := fmt.Sprintf(\"dryRun-%x\", sha1.Sum([]byte(name)))\n+\t\targs := []string{\"buildx\", \"build\", \"--print=outline\", \"--output=type=cacheonly\", \"-f\", option.Inputs.DockerfilePath, option.Inputs.ContextPath}\n+\t\tbuildCMD := exec.CommandContext(ctx, \"docker\", args...)",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1179605327",
        "repo_full_name": "docker/compose",
        "pr_number": 10502,
        "pr_file": "pkg/compose/build_buildkit.go",
        "discussion_id": "1179605327",
        "commented_code": "@@ -76,3 +84,23 @@ func (s *composeService) doBuildBuildkit(ctx context.Context, opts map[string]bu\n \n \treturn imagesBuilt, err\n }\n+\n+func (s composeService) dryRunBuildResponse(ctx context.Context, options map[string]build.Options) (resp map[string]*client.SolveResponse, err error) {\n+\tbuildResponse := map[string]*client.SolveResponse{}\n+\tfor name, option := range options {\n+\t\tdryRunUUID := fmt.Sprintf(\"dryRun-%x\", sha1.Sum([]byte(name)))\n+\t\targs := []string{\"buildx\", \"build\", \"--print=outline\", \"--output=type=cacheonly\", \"-f\", option.Inputs.DockerfilePath, option.Inputs.ContextPath}\n+\t\tbuildCMD := exec.CommandContext(ctx, \"docker\", args...)",
        "comment_created_at": "2023-04-27T19:39:44+00:00",
        "comment_author": "ndeloof",
        "comment_body": "we don't exec `docker buildx ...` for a standard build, but use the vendored buildx client, why not do the same here with `BuildOptions.PrintFunc`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1180235005",
        "repo_full_name": "docker/compose",
        "pr_number": 10502,
        "pr_file": "pkg/compose/build_buildkit.go",
        "discussion_id": "1179605327",
        "commented_code": "@@ -76,3 +84,23 @@ func (s *composeService) doBuildBuildkit(ctx context.Context, opts map[string]bu\n \n \treturn imagesBuilt, err\n }\n+\n+func (s composeService) dryRunBuildResponse(ctx context.Context, options map[string]build.Options) (resp map[string]*client.SolveResponse, err error) {\n+\tbuildResponse := map[string]*client.SolveResponse{}\n+\tfor name, option := range options {\n+\t\tdryRunUUID := fmt.Sprintf(\"dryRun-%x\", sha1.Sum([]byte(name)))\n+\t\targs := []string{\"buildx\", \"build\", \"--print=outline\", \"--output=type=cacheonly\", \"-f\", option.Inputs.DockerfilePath, option.Inputs.ContextPath}\n+\t\tbuildCMD := exec.CommandContext(ctx, \"docker\", args...)",
        "comment_created_at": "2023-04-28T10:25:39+00:00",
        "comment_author": "glours",
        "comment_body": "As discuss internally, we'll wait for the buildx `--print` option to be marked as stable, this way we will only have to change the value in the `BuildOptions` and let buildx now when to build or not 👍 \r\nI revert all the changes for a simplest solution for now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "959657498",
    "pr_number": 9729,
    "pr_file": "pkg/compose/build.go",
    "created_at": "2022-08-31T14:27:32+00:00",
    "commented_code": "Attrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "959657498",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959657498",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",",
        "comment_created_at": "2022-08-31T14:27:32+00:00",
        "comment_author": "nicksieger",
        "comment_body": "Does this mean that images are automatically pushed during a `docker compose build`?",
        "pr_file_module": null
      },
      {
        "comment_id": "959721367",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959657498",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",",
        "comment_created_at": "2022-08-31T15:21:25+00:00",
        "comment_author": "glours",
        "comment_body": "Good catch, I added that to check e2e tests but as the default behaviour of Compose is to not push by default I will remove that and update the tests\r\nThanks @nicksieger ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "959688639",
    "pr_number": 9729,
    "pr_file": "pkg/compose/build.go",
    "created_at": "2022-08-31T14:53:06+00:00",
    "commented_code": "Attrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",\n+\t\t\t\t},\n+\t\t\t}}",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "959688639",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959688639",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",\n+\t\t\t\t},\n+\t\t\t}}",
        "comment_created_at": "2022-08-31T14:53:06+00:00",
        "comment_author": "milas",
        "comment_body": "Shouldn't this be `type: \"docker\"` + `\"load\": \"true\"` like the other one?\r\n\r\nI believe this is legitimately trying to push to registry:\r\n```shell\r\n$ docker compose build hello\r\n...\r\n => ERROR exporting to image                                                                                                                           0.7s\r\n => => exporting layers                                                                                                                                0.1s\r\n => => exporting manifest sha256:90bf7923cd97b6dec8f53161c7df1e6d2587ec52ccc060273cdc6b6ae8bd6c9c                                                      0.0s\r\n => => exporting config sha256:ec0a66e1fe3ca40d1042b63f3f82a0ff10189f86c6b68c1dd2b6f3213ac7057a                                                        0.0s\r\n => => exporting manifest sha256:8a1a9bea74c44f39ab83dd4a831d74845c1f4eda2c3f2a5c230e0988fa554236                                                      0.0s\r\n => => exporting config sha256:296e0f515945635ccc81e78c428bdf2b341a725f8ad033afbff0db2d0615aec1                                                        0.0s\r\n => => exporting manifest list sha256:87e79b4bda828912aba9e22edd32010ab65b56da406c307bf60b61e79616b8cb                                                 0.0s\r\n => => pushing layers                                                                                                                                  0.5s\r\n------\r\n > exporting to image:\r\n------\r\nfailed to solve: server message: insufficient_scope: authorization failed\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "959703131",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959688639",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",\n+\t\t\t\t},\n+\t\t\t}}",
        "comment_created_at": "2022-08-31T15:05:19+00:00",
        "comment_author": "milas",
        "comment_body": "I just realized it's doing this because you can't export multi-platform images with the `docker` export type\r\n\r\nI wonder if we need a `--output` flag on `build` with a default of `type=docker` that behaves the same as the buildx flag, so it can error out if you try to do `docker compose build --output=docker` on a multi-platform image.",
        "pr_file_module": null
      },
      {
        "comment_id": "959722189",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959688639",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",\n+\t\t\t\t},\n+\t\t\t}}",
        "comment_created_at": "2022-08-31T15:22:14+00:00",
        "comment_author": "milas",
        "comment_body": "And TIL that `docker compose push` already exists 🤔 \r\n\r\nBut of course, it does not build:\r\n```shell\r\n$ docker compose push\r\nAn image does not exist locally with the tag: milas/hello\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "959733180",
        "repo_full_name": "docker/compose",
        "pr_number": 9729,
        "pr_file": "pkg/compose/build.go",
        "discussion_id": "959688639",
        "commented_code": "@@ -81,6 +81,14 @@ func (s *composeService) build(ctx context.Context, project *types.Project, opti\n \t\t\t\tAttrs: map[string]string{\"ref\": image},\n \t\t\t})\n \t\t}\n+\t\tif len(buildOptions.Platforms) > 1 {\n+\t\t\tbuildOptions.Exports = []bclient.ExportEntry{{\n+\t\t\t\tType: \"image\",\n+\t\t\t\tAttrs: map[string]string{\n+\t\t\t\t\t\"push\": \"true\",\n+\t\t\t\t},\n+\t\t\t}}",
        "comment_created_at": "2022-08-31T15:32:04+00:00",
        "comment_author": "glours",
        "comment_body": "> Shouldn't this be `type: \"docker\"` + `\"load\": \"true\"` like the other one?\r\n> \r\n> I believe this is legitimately trying to push to registry:\r\n> \r\n> ```shell\r\n> $ docker compose build hello\r\n> ...\r\n>  => ERROR exporting to image                                                                                                                           0.7s\r\n>  => => exporting layers                                                                                                                                0.1s\r\n>  => => exporting manifest sha256:90bf7923cd97b6dec8f53161c7df1e6d2587ec52ccc060273cdc6b6ae8bd6c9c                                                      0.0s\r\n>  => => exporting config sha256:ec0a66e1fe3ca40d1042b63f3f82a0ff10189f86c6b68c1dd2b6f3213ac7057a                                                        0.0s\r\n>  => => exporting manifest sha256:8a1a9bea74c44f39ab83dd4a831d74845c1f4eda2c3f2a5c230e0988fa554236                                                      0.0s\r\n>  => => exporting config sha256:296e0f515945635ccc81e78c428bdf2b341a725f8ad033afbff0db2d0615aec1                                                        0.0s\r\n>  => => exporting manifest list sha256:87e79b4bda828912aba9e22edd32010ab65b56da406c307bf60b61e79616b8cb                                                 0.0s\r\n>  => => pushing layers                                                                                                                                  0.5s\r\n> ------\r\n>  > exporting to image:\r\n> ------\r\n> failed to solve: server message: insufficient_scope: authorization failed\r\n> ```\r\n\r\n\r\nNope because `docker` exporter doesn't support multi-arch builds, I just need to remove the `push` option by default",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "975537137",
    "pr_number": 9863,
    "pr_file": "pkg/e2e/pause_test.go",
    "created_at": "2022-09-20T15:43:02+00:00",
    "commented_code": ")\n \n func TestPause(t *testing.T) {\n+\tif _, ok := os.LookupEnv(\"CI\"); ok {\n+\t\tt.Skip(\"Skipping test on CI... flaky\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "975537137",
        "repo_full_name": "docker/compose",
        "pr_number": 9863,
        "pr_file": "pkg/e2e/pause_test.go",
        "discussion_id": "975537137",
        "commented_code": "@@ -29,6 +30,9 @@ import (\n )\n \n func TestPause(t *testing.T) {\n+\tif _, ok := os.LookupEnv(\"CI\"); ok {\n+\t\tt.Skip(\"Skipping test on CI... flaky\")",
        "comment_created_at": "2022-09-20T15:43:02+00:00",
        "comment_author": "laurazard",
        "comment_body": "This test was really flaky on CI, so I think it's best to just skip it there for now until we can harden it. Fwiw, it seems to be a performance issue, as it always passes on the M1 mac, but is flaky on the Intel mac and on the Windows runners.",
        "pr_file_module": null
      }
    ]
  }
]