[
  {
    "discussion_id": "236904988",
    "pr_number": 6342,
    "pr_file": "compose/project.py",
    "created_at": "2018-11-28T00:51:00+00:00",
    "commented_code": "if remove_orphans:\n             for ctnr in orphans:\n                 log.info('Removing orphan container \"{0}\"'.format(ctnr.name))\n-                ctnr.kill()\n+                try:\n+                    ctnr.kill()\n+                except Exception:",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "236904988",
        "repo_full_name": "docker/compose",
        "pr_number": 6342,
        "pr_file": "compose/project.py",
        "discussion_id": "236904988",
        "commented_code": "@@ -638,7 +638,10 @@ def _find():\n         if remove_orphans:\n             for ctnr in orphans:\n                 log.info('Removing orphan container \"{0}\"'.format(ctnr.name))\n-                ctnr.kill()\n+                try:\n+                    ctnr.kill()\n+                except Exception:",
        "comment_created_at": "2018-11-28T00:51:00+00:00",
        "comment_author": "shin-",
        "comment_body": "We should catch `docker.errors.APIError` here as to not hide other legitimate exceptions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "605710209",
    "pr_number": 8247,
    "pr_file": "compose/cli/scan_suggest.py",
    "created_at": "2021-04-01T14:37:56+00:00",
    "commented_code": "+import json\n+import logging\n+import os\n+from distutils.util import strtobool\n+\n+from docker.constants import IS_WINDOWS_PLATFORM\n+from docker.utils.config import find_config_file\n+\n+\n+SCAN_BINARY_NAME = \"docker-scan\" + (\".exe\" if IS_WINDOWS_PLATFORM else \"\")\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class ScanConfig:\n+    def __init__(self, dict):\n+        self.optin = False\n+        vars(self).update(dict)\n+\n+\n+def display_scan_suggest_msg():\n+    if environment_scan_avoid_suggest() or \\\n+            scan_already_invoked() or \\\n+            scan_available() is None:\n+        return\n+    log.info(\"Use 'docker scan' to run Snyk tests against images to find vulnerabilities \"\n+             \"and learn how to fix them\")\n+\n+\n+def environment_scan_avoid_suggest():\n+    return os.getenv('DOCKER_SCAN_SUGGEST', 'true').lower() == 'false'\n+\n+\n+def scan_already_invoked():\n+    docker_folder = docker_config_folder()\n+    if docker_folder is None:\n+        return False\n+\n+    scan_config_file = os.path.join(docker_folder, 'scan', \"config.json\")\n+    if not os.path.exists(scan_config_file):\n+        return False\n+\n+    data = ''\n+    with open(scan_config_file) as f:\n+        data = f.read()\n+    scan_config = json.loads(data, object_hook=ScanConfig)\n+    return scan_config.optin if isinstance(scan_config.optin, bool) else strtobool(scan_config.optin)",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "605710209",
        "repo_full_name": "docker/compose",
        "pr_number": 8247,
        "pr_file": "compose/cli/scan_suggest.py",
        "discussion_id": "605710209",
        "commented_code": "@@ -0,0 +1,80 @@\n+import json\n+import logging\n+import os\n+from distutils.util import strtobool\n+\n+from docker.constants import IS_WINDOWS_PLATFORM\n+from docker.utils.config import find_config_file\n+\n+\n+SCAN_BINARY_NAME = \"docker-scan\" + (\".exe\" if IS_WINDOWS_PLATFORM else \"\")\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class ScanConfig:\n+    def __init__(self, dict):\n+        self.optin = False\n+        vars(self).update(dict)\n+\n+\n+def display_scan_suggest_msg():\n+    if environment_scan_avoid_suggest() or \\\n+            scan_already_invoked() or \\\n+            scan_available() is None:\n+        return\n+    log.info(\"Use 'docker scan' to run Snyk tests against images to find vulnerabilities \"\n+             \"and learn how to fix them\")\n+\n+\n+def environment_scan_avoid_suggest():\n+    return os.getenv('DOCKER_SCAN_SUGGEST', 'true').lower() == 'false'\n+\n+\n+def scan_already_invoked():\n+    docker_folder = docker_config_folder()\n+    if docker_folder is None:\n+        return False\n+\n+    scan_config_file = os.path.join(docker_folder, 'scan', \"config.json\")\n+    if not os.path.exists(scan_config_file):\n+        return False\n+\n+    data = ''\n+    with open(scan_config_file) as f:\n+        data = f.read()\n+    scan_config = json.loads(data, object_hook=ScanConfig)\n+    return scan_config.optin if isinstance(scan_config.optin, bool) else strtobool(scan_config.optin)",
        "comment_created_at": "2021-04-01T14:37:56+00:00",
        "comment_author": "gtardif",
        "comment_body": "what happens here if anything goes wrong (can't read file, can't unmarshall json, ...)\r\nWe should return true by default, to not bother users if we cannot check if scan has been executed previously",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "466406739",
    "pr_number": 7457,
    "pr_file": "compose/cli/main.py",
    "created_at": "2020-08-06T13:21:12+00:00",
    "commented_code": "def run_one_off_container(container_options, project, service, options, toplevel_options,\n                           toplevel_environment):\n-    if not options['--no-deps']:\n-        deps = service.get_dependency_names()\n-        if deps:\n-            project.up(\n-                service_names=deps,\n-                start_deps=True,\n-                strategy=ConvergenceStrategy.never,\n-                rescale=False\n-            )\n-\n-    project.initialize()\n-\n-    container = service.create_container(\n-        quiet=True,\n+    detach = options.get('--detach')\n+    use_network_aliases = options.get('--use-aliases')\n+    containers = project.up(\n+        service_names=[service.name],\n+        start_deps=not options['--no-deps'],\n+        strategy=ConvergenceStrategy.never,\n+        detached=detach,\n+        rescale=False,\n         one_off=True,\n-        **container_options)\n-\n-    use_network_aliases = options['--use-aliases']\n+        override_options=container_options,\n+    )\n+    container = [c for c in containers if c.service == service.name][0]",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "466406739",
        "repo_full_name": "docker/compose",
        "pr_number": 7457,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "466406739",
        "commented_code": "@@ -1298,31 +1298,25 @@ def build_one_off_container_options(options, detach, command):\n \n def run_one_off_container(container_options, project, service, options, toplevel_options,\n                           toplevel_environment):\n-    if not options['--no-deps']:\n-        deps = service.get_dependency_names()\n-        if deps:\n-            project.up(\n-                service_names=deps,\n-                start_deps=True,\n-                strategy=ConvergenceStrategy.never,\n-                rescale=False\n-            )\n-\n-    project.initialize()\n-\n-    container = service.create_container(\n-        quiet=True,\n+    detach = options.get('--detach')\n+    use_network_aliases = options.get('--use-aliases')\n+    containers = project.up(\n+        service_names=[service.name],\n+        start_deps=not options['--no-deps'],\n+        strategy=ConvergenceStrategy.never,\n+        detached=detach,\n+        rescale=False,\n         one_off=True,\n-        **container_options)\n-\n-    use_network_aliases = options['--use-aliases']\n+        override_options=container_options,\n+    )\n+    container = [c for c in containers if c.service == service.name][0]",
        "comment_created_at": "2020-08-06T13:21:12+00:00",
        "comment_author": "aiordache",
        "comment_body": "Could we do a check before accessing this please? Just to make sure we won't throw an exception to users. ",
        "pr_file_module": null
      },
      {
        "comment_id": "466712188",
        "repo_full_name": "docker/compose",
        "pr_number": 7457,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "466406739",
        "commented_code": "@@ -1298,31 +1298,25 @@ def build_one_off_container_options(options, detach, command):\n \n def run_one_off_container(container_options, project, service, options, toplevel_options,\n                           toplevel_environment):\n-    if not options['--no-deps']:\n-        deps = service.get_dependency_names()\n-        if deps:\n-            project.up(\n-                service_names=deps,\n-                start_deps=True,\n-                strategy=ConvergenceStrategy.never,\n-                rescale=False\n-            )\n-\n-    project.initialize()\n-\n-    container = service.create_container(\n-        quiet=True,\n+    detach = options.get('--detach')\n+    use_network_aliases = options.get('--use-aliases')\n+    containers = project.up(\n+        service_names=[service.name],\n+        start_deps=not options['--no-deps'],\n+        strategy=ConvergenceStrategy.never,\n+        detached=detach,\n+        rescale=False,\n         one_off=True,\n-        **container_options)\n-\n-    use_network_aliases = options['--use-aliases']\n+        override_options=container_options,\n+    )\n+    container = [c for c in containers if c.service == service.name][0]",
        "comment_created_at": "2020-08-06T22:07:44+00:00",
        "comment_author": "EricHripko",
        "comment_body": "Of course üëç I've modified this to raise an `OperationFailedError` in case target service isn't in the container list. This is what it'll look like to a user in case they somehow manage to get in this state:\r\n```\r\n$ docker-compose run --rm test sh\r\nCreating docker-compose-example_db_1 ... done\r\nCreating docker-compose-example_test_run ... done\r\nERROR: Could not bring up the requested service\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]