[
  {
    "discussion_id": "1317412819",
    "pr_number": 10949,
    "pr_file": "pkg/api/api.go",
    "created_at": "2023-09-06T14:52:07+00:00",
    "commented_code": "Events(ctx context.Context, projectName string, options EventsOptions) error\n \t// Port executes the equivalent to a `compose port`\n \tPort(ctx context.Context, projectName string, service string, port uint16, options PortOptions) (string, int, error)\n+\t// Publish executes the equivalent to a `compose publish`\n+\tPublish(ctx context.Context, project *types.Project, repository string) error",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1317412819",
        "repo_full_name": "docker/compose",
        "pr_number": 10949,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "1317412819",
        "commented_code": "@@ -74,6 +74,8 @@ type Service interface {\n \tEvents(ctx context.Context, projectName string, options EventsOptions) error\n \t// Port executes the equivalent to a `compose port`\n \tPort(ctx context.Context, projectName string, service string, port uint16, options PortOptions) (string, int, error)\n+\t// Publish executes the equivalent to a `compose publish`\n+\tPublish(ctx context.Context, project *types.Project, repository string) error",
        "comment_created_at": "2023-09-06T14:52:07+00:00",
        "comment_author": "milas",
        "comment_body": "Minor: we often end up refactoring the API methods to add an options object later...maybe worth having `PublishOptions` with a `Repository string` field upfront",
        "pr_file_module": null
      },
      {
        "comment_id": "1317413852",
        "repo_full_name": "docker/compose",
        "pr_number": 10949,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "1317412819",
        "commented_code": "@@ -74,6 +74,8 @@ type Service interface {\n \tEvents(ctx context.Context, projectName string, options EventsOptions) error\n \t// Port executes the equivalent to a `compose port`\n \tPort(ctx context.Context, projectName string, service string, port uint16, options PortOptions) (string, int, error)\n+\t// Publish executes the equivalent to a `compose publish`\n+\tPublish(ctx context.Context, project *types.Project, repository string) error",
        "comment_created_at": "2023-09-06T14:52:34+00:00",
        "comment_author": "milas",
        "comment_body": "e.g. I'm guessing this will need `Quiet bool` at some point",
        "pr_file_module": null
      },
      {
        "comment_id": "1317432840",
        "repo_full_name": "docker/compose",
        "pr_number": 10949,
        "pr_file": "pkg/api/api.go",
        "discussion_id": "1317412819",
        "commented_code": "@@ -74,6 +74,8 @@ type Service interface {\n \tEvents(ctx context.Context, projectName string, options EventsOptions) error\n \t// Port executes the equivalent to a `compose port`\n \tPort(ctx context.Context, projectName string, service string, port uint16, options PortOptions) (string, int, error)\n+\t// Publish executes the equivalent to a `compose publish`\n+\tPublish(ctx context.Context, project *types.Project, repository string) error",
        "comment_created_at": "2023-09-06T15:04:02+00:00",
        "comment_author": "ndeloof",
        "comment_body": "Repository being mandatory parameter should not be part of the `Options` struct imho",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1454059425",
    "pr_number": 10939,
    "pr_file": "pkg/compose/convert.go",
    "created_at": "2024-01-16T21:26:23+00:00",
    "commented_code": "if check.Disable {\n \t\ttest = []string{\"NONE\"}\n \t}\n-\treturn &container.HealthConfig{\n-\t\tTest:        test,\n-\t\tInterval:    interval,\n-\t\tTimeout:     timeout,\n-\t\tStartPeriod: period,\n-\t\tRetries:     retries,\n+\tvar startInterval time.Duration\n+\tif check.StartInterval != nil {\n+\t\tversion, err := s.RuntimeVersion(ctx)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif versions.LessThan(version, \"1.44\") {\n+\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.25 or later\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1454059425",
        "repo_full_name": "docker/compose",
        "pr_number": 10939,
        "pr_file": "pkg/compose/convert.go",
        "discussion_id": "1454059425",
        "commented_code": "@@ -64,13 +67,26 @@ func ToMobyHealthCheck(check *compose.HealthCheckConfig) *container.HealthConfig\n \tif check.Disable {\n \t\ttest = []string{\"NONE\"}\n \t}\n-\treturn &container.HealthConfig{\n-\t\tTest:        test,\n-\t\tInterval:    interval,\n-\t\tTimeout:     timeout,\n-\t\tStartPeriod: period,\n-\t\tRetries:     retries,\n+\tvar startInterval time.Duration\n+\tif check.StartInterval != nil {\n+\t\tversion, err := s.RuntimeVersion(ctx)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif versions.LessThan(version, \"1.44\") {\n+\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.25 or later\")",
        "comment_created_at": "2024-01-16T21:26:23+00:00",
        "comment_author": "tianon",
        "comment_body": "Was this supposed to be _API_ version 1.25?\r\n(not 1.44, as the test is checking, which corresponds to the 25.x RCs, but 1.25 which is 1.13+)\r\n\r\n```suggestion\r\n\t\tif versions.LessThan(version, \"1.25\") {\r\n\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.13 or later\")\r\n```\r\n\r\n(coming here from https://github.com/docker-library/docker/issues/473)",
        "pr_file_module": null
      },
      {
        "comment_id": "1454320004",
        "repo_full_name": "docker/compose",
        "pr_number": 10939,
        "pr_file": "pkg/compose/convert.go",
        "discussion_id": "1454059425",
        "commented_code": "@@ -64,13 +67,26 @@ func ToMobyHealthCheck(check *compose.HealthCheckConfig) *container.HealthConfig\n \tif check.Disable {\n \t\ttest = []string{\"NONE\"}\n \t}\n-\treturn &container.HealthConfig{\n-\t\tTest:        test,\n-\t\tInterval:    interval,\n-\t\tTimeout:     timeout,\n-\t\tStartPeriod: period,\n-\t\tRetries:     retries,\n+\tvar startInterval time.Duration\n+\tif check.StartInterval != nil {\n+\t\tversion, err := s.RuntimeVersion(ctx)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif versions.LessThan(version, \"1.44\") {\n+\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.25 or later\")",
        "comment_created_at": "2024-01-17T01:37:23+00:00",
        "comment_author": "cjlarose",
        "comment_body": "* `StartPeriod` was [introduced](https://docs.docker.com/engine/api/version-history/#v125-api-changes) in Docker Engine API version 1.29\r\n* `StartInterval` does not appear in the Docker Engine API changelog nor in the [docs](https://docs.docker.com/engine/api/v1.42/#tag/Container/operation/ContainerCreate) for Docker Engine API for the latest stable (v 1.42)\r\n\r\nTracking issue for `start-interval`: https://github.com/moby/moby/issues/45897\r\n\r\nDocker Engine 25 does appear to be the earliest version that will support `StartInterval`",
        "pr_file_module": null
      },
      {
        "comment_id": "1454779566",
        "repo_full_name": "docker/compose",
        "pr_number": 10939,
        "pr_file": "pkg/compose/convert.go",
        "discussion_id": "1454059425",
        "commented_code": "@@ -64,13 +67,26 @@ func ToMobyHealthCheck(check *compose.HealthCheckConfig) *container.HealthConfig\n \tif check.Disable {\n \t\ttest = []string{\"NONE\"}\n \t}\n-\treturn &container.HealthConfig{\n-\t\tTest:        test,\n-\t\tInterval:    interval,\n-\t\tTimeout:     timeout,\n-\t\tStartPeriod: period,\n-\t\tRetries:     retries,\n+\tvar startInterval time.Duration\n+\tif check.StartInterval != nil {\n+\t\tversion, err := s.RuntimeVersion(ctx)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif versions.LessThan(version, \"1.44\") {\n+\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.25 or later\")",
        "comment_created_at": "2024-01-17T07:14:01+00:00",
        "comment_author": "ndeloof",
        "comment_body": "This is API version 1.44, but Moby v25 (typo here)\r\nMakes me wonder moby repo could offer a map for engine -> latest API version so we don't make such mistakes :)",
        "pr_file_module": null
      },
      {
        "comment_id": "1454790241",
        "repo_full_name": "docker/compose",
        "pr_number": 10939,
        "pr_file": "pkg/compose/convert.go",
        "discussion_id": "1454059425",
        "commented_code": "@@ -64,13 +67,26 @@ func ToMobyHealthCheck(check *compose.HealthCheckConfig) *container.HealthConfig\n \tif check.Disable {\n \t\ttest = []string{\"NONE\"}\n \t}\n-\treturn &container.HealthConfig{\n-\t\tTest:        test,\n-\t\tInterval:    interval,\n-\t\tTimeout:     timeout,\n-\t\tStartPeriod: period,\n-\t\tRetries:     retries,\n+\tvar startInterval time.Duration\n+\tif check.StartInterval != nil {\n+\t\tversion, err := s.RuntimeVersion(ctx)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tif versions.LessThan(version, \"1.44\") {\n+\t\t\treturn nil, errors.New(\"can't set healthcheck.start_interval as feature require Docker Engine 1.25 or later\")",
        "comment_created_at": "2024-01-17T07:20:15+00:00",
        "comment_author": "ndeloof",
        "comment_body": "https://github.com/docker/compose/pull/11360",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1069574667",
    "pr_number": 10173,
    "pr_file": "pkg/compose/compose.go",
    "created_at": "2023-01-13T15:13:12+00:00",
    "commented_code": "s.maxConcurrency = i\n }\n \n+func (s *composeService) DryRunMode(dryRun bool) error {\n+\tif dryRun {\n+\t\tcli, err := command.NewDockerCli()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\terr = cli.Initialize(flags.NewClientOptions(), command.WithInitializeClient(func(cli *command.DockerCli) (client.APIClient, error) {\n+\t\t\tdryRunClient := api.NewDryRunClient()\n+\t\t\tdryRunClient.WithAPIClient(s.apiClient())\n+\t\t\treturn dryRunClient, nil\n+\t\t}))\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\ts.dockerCli = cli",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1069574667",
        "repo_full_name": "docker/compose",
        "pr_number": 10173,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "1069574667",
        "commented_code": "@@ -63,6 +66,25 @@ func (s *composeService) MaxConcurrency(i int) {\n \ts.maxConcurrency = i\n }\n \n+func (s *composeService) DryRunMode(dryRun bool) error {\n+\tif dryRun {\n+\t\tcli, err := command.NewDockerCli()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\terr = cli.Initialize(flags.NewClientOptions(), command.WithInitializeClient(func(cli *command.DockerCli) (client.APIClient, error) {\n+\t\t\tdryRunClient := api.NewDryRunClient()\n+\t\t\tdryRunClient.WithAPIClient(s.apiClient())\n+\t\t\treturn dryRunClient, nil\n+\t\t}))\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\ts.dockerCli = cli",
        "comment_created_at": "2023-01-13T15:13:12+00:00",
        "comment_author": "ndeloof",
        "comment_body": "could make it simpler by making API client an attribute in `composeService`, initialize with `dockerCli.Client()` and override here with `NewDryRunClient`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1069655168",
        "repo_full_name": "docker/compose",
        "pr_number": 10173,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "1069574667",
        "commented_code": "@@ -63,6 +66,25 @@ func (s *composeService) MaxConcurrency(i int) {\n \ts.maxConcurrency = i\n }\n \n+func (s *composeService) DryRunMode(dryRun bool) error {\n+\tif dryRun {\n+\t\tcli, err := command.NewDockerCli()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\terr = cli.Initialize(flags.NewClientOptions(), command.WithInitializeClient(func(cli *command.DockerCli) (client.APIClient, error) {\n+\t\t\tdryRunClient := api.NewDryRunClient()\n+\t\t\tdryRunClient.WithAPIClient(s.apiClient())\n+\t\t\treturn dryRunClient, nil\n+\t\t}))\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\ts.dockerCli = cli",
        "comment_created_at": "2023-01-13T16:20:12+00:00",
        "comment_author": "glours",
        "comment_body": "Ok as we just discussed, I'll open a PR to remove the `dockerCli` attribute in `composeService` struct, this way we could be sure that the `composeService.apiClient()` will be used everywhere.\r\nWhen merged, we'll be able to safely introduce a APIClient attribute to composeService and be sure we won't have multiple kind of APIClient calls (like `service.dockerCli.client()` used at many place in the source code)",
        "pr_file_module": null
      },
      {
        "comment_id": "1069786546",
        "repo_full_name": "docker/compose",
        "pr_number": 10173,
        "pr_file": "pkg/compose/compose.go",
        "discussion_id": "1069574667",
        "commented_code": "@@ -63,6 +66,25 @@ func (s *composeService) MaxConcurrency(i int) {\n \ts.maxConcurrency = i\n }\n \n+func (s *composeService) DryRunMode(dryRun bool) error {\n+\tif dryRun {\n+\t\tcli, err := command.NewDockerCli()\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\terr = cli.Initialize(flags.NewClientOptions(), command.WithInitializeClient(func(cli *command.DockerCli) (client.APIClient, error) {\n+\t\t\tdryRunClient := api.NewDryRunClient()\n+\t\t\tdryRunClient.WithAPIClient(s.apiClient())\n+\t\t\treturn dryRunClient, nil\n+\t\t}))\n+\t\tif err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t\ts.dockerCli = cli",
        "comment_created_at": "2023-01-13T17:59:26+00:00",
        "comment_author": "glours",
        "comment_body": "Ok after digging a little bit, the `dockerCli` attribute is used widely by the CLI APIs, so it seams safer to override the APIClient of the existing `command.Cli`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1069580414",
    "pr_number": 10173,
    "pr_file": "pkg/api/dryrunclient.go",
    "created_at": "2023-01-13T15:18:11+00:00",
    "commented_code": "+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package api\n+\n+import (\n+\t\"context\"\n+\t\"io\"\n+\t\"net\"\n+\t\"net/http\"\n+\n+\tmoby \"github.com/docker/docker/api/types\"\n+\tcontainerType \"github.com/docker/docker/api/types/container\"\n+\t\"github.com/docker/docker/api/types/events\"\n+\t\"github.com/docker/docker/api/types/filters\"\n+\t\"github.com/docker/docker/api/types/image\"\n+\t\"github.com/docker/docker/api/types/network\"\n+\t\"github.com/docker/docker/api/types/registry\"\n+\t\"github.com/docker/docker/api/types/swarm\"\n+\t\"github.com/docker/docker/api/types/volume\"\n+\t\"github.com/docker/docker/client\"\n+\tspecs \"github.com/opencontainers/image-spec/specs-go/v1\"\n+)\n+\n+var _ client.APIClient = &DryRunClient{}\n+\n+// DryRunClient implements APIClient by delegating to implementation functions. This allows lazy init and per-method overrides\n+type DryRunClient struct {\n+\tCopyFromContainerFn    func(ctx context.Context, container, srcPath string) (io.ReadCloser, moby.ContainerPathStat, error)",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1069580414",
        "repo_full_name": "docker/compose",
        "pr_number": 10173,
        "pr_file": "pkg/api/dryrunclient.go",
        "discussion_id": "1069580414",
        "commented_code": "@@ -0,0 +1,1081 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package api\n+\n+import (\n+\t\"context\"\n+\t\"io\"\n+\t\"net\"\n+\t\"net/http\"\n+\n+\tmoby \"github.com/docker/docker/api/types\"\n+\tcontainerType \"github.com/docker/docker/api/types/container\"\n+\t\"github.com/docker/docker/api/types/events\"\n+\t\"github.com/docker/docker/api/types/filters\"\n+\t\"github.com/docker/docker/api/types/image\"\n+\t\"github.com/docker/docker/api/types/network\"\n+\t\"github.com/docker/docker/api/types/registry\"\n+\t\"github.com/docker/docker/api/types/swarm\"\n+\t\"github.com/docker/docker/api/types/volume\"\n+\t\"github.com/docker/docker/client\"\n+\tspecs \"github.com/opencontainers/image-spec/specs-go/v1\"\n+)\n+\n+var _ client.APIClient = &DryRunClient{}\n+\n+// DryRunClient implements APIClient by delegating to implementation functions. This allows lazy init and per-method overrides\n+type DryRunClient struct {\n+\tCopyFromContainerFn    func(ctx context.Context, container, srcPath string) (io.ReadCloser, moby.ContainerPathStat, error)",
        "comment_created_at": "2023-01-13T15:18:11+00:00",
        "comment_author": "ndeloof",
        "comment_body": "As this is not a generic Client proxy, but dedicated to dry-run usage, we could make it simpler and just have all API methods to directly invoke `client.XX` from dockerCli's client _BUT_ the few ones where we want to bypass actual actions on docker engine.\r\nOR rename this into generic `ClientProxy`, then we can configure dry-run by setting individual func to be overriden",
        "pr_file_module": null
      },
      {
        "comment_id": "1069655492",
        "repo_full_name": "docker/compose",
        "pr_number": 10173,
        "pr_file": "pkg/api/dryrunclient.go",
        "discussion_id": "1069580414",
        "commented_code": "@@ -0,0 +1,1081 @@\n+/*\n+   Copyright 2020 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package api\n+\n+import (\n+\t\"context\"\n+\t\"io\"\n+\t\"net\"\n+\t\"net/http\"\n+\n+\tmoby \"github.com/docker/docker/api/types\"\n+\tcontainerType \"github.com/docker/docker/api/types/container\"\n+\t\"github.com/docker/docker/api/types/events\"\n+\t\"github.com/docker/docker/api/types/filters\"\n+\t\"github.com/docker/docker/api/types/image\"\n+\t\"github.com/docker/docker/api/types/network\"\n+\t\"github.com/docker/docker/api/types/registry\"\n+\t\"github.com/docker/docker/api/types/swarm\"\n+\t\"github.com/docker/docker/api/types/volume\"\n+\t\"github.com/docker/docker/client\"\n+\tspecs \"github.com/opencontainers/image-spec/specs-go/v1\"\n+)\n+\n+var _ client.APIClient = &DryRunClient{}\n+\n+// DryRunClient implements APIClient by delegating to implementation functions. This allows lazy init and per-method overrides\n+type DryRunClient struct {\n+\tCopyFromContainerFn    func(ctx context.Context, container, srcPath string) (io.ReadCloser, moby.ContainerPathStat, error)",
        "comment_created_at": "2023-01-13T16:20:33+00:00",
        "comment_author": "glours",
        "comment_body": "\ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  }
]