[
  {
    "discussion_id": "343424231",
    "pr_number": 6905,
    "pr_file": "compose/cli/main.py",
    "created_at": "2019-11-07T02:05:41+00:00",
    "commented_code": "command,\n                     container.human_readable_state,\n                     container.human_readable_ports,\n+                    container.human_readable_uptime,",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "343424231",
        "repo_full_name": "docker/compose",
        "pr_number": 6905,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "343424231",
        "commented_code": "@@ -753,6 +754,7 @@ def ps(self, options):\n                     command,\n                     container.human_readable_state,\n                     container.human_readable_ports,\n+                    container.human_readable_uptime,",
        "comment_created_at": "2019-11-07T02:05:41+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "Wondering why you didn't use the `Status` field that's returned by the API (which is the field that's used by the `docker` CLI;\r\n\r\n```bash\r\ncurl --unix-socket /var/run/docker.sock \"http://localhost/containers/json\" | jq .\r\n```\r\n\r\n```json\r\n\r\n  {\r\n    \"Id\": \"82950c6535204a462c8a3c1f175408b456fbb91971d2d21a33ba04c8b91c74fd\",\r\n    \"Names\": [\r\n      \"/cranky_keldysh\"\r\n    ],\r\n    \"Image\": \"libnetworkbuild\",\r\n    \"ImageID\": \"sha256:bc6bbc6a0032300d8818182eff0101ecb7af2fc1fb21da6f290943c286946a1e\",\r\n    \"Command\": \"make unit-tests-local\",\r\n    \"Created\": 1573091888,\r\n    \"Ports\": [],\r\n    \"Labels\": {},\r\n    \"State\": \"running\",\r\n    \"Status\": \"Up 5 minutes\",\r\n    \"HostConfig\": {\r\n      \"NetworkMode\": \"default\"\r\n    },\r\n    \"NetworkSettings\": {\r\n      \"Networks\": {\r\n        \"bridge\": {\r\n          \"IPAMConfig\": null,\r\n          \"Links\": null,\r\n          \"Aliases\": null,\r\n          \"NetworkID\": \"5a59d43d598f910579535ffb2cbbb4d0987807d7b5593c264c83337c4220ec1a\",\r\n          \"EndpointID\": \"bf8b6b629b353988d047bcd0bbb897249d7a73a7811b2210b783338e6a975cd9\",\r\n          \"Gateway\": \"172.17.0.1\",\r\n          \"IPAddress\": \"172.17.0.5\",\r\n          \"IPPrefixLen\": 16,\r\n          \"IPv6Gateway\": \"\",\r\n          \"GlobalIPv6Address\": \"\",\r\n          \"GlobalIPv6PrefixLen\": 0,\r\n          \"MacAddress\": \"02:42:ac:11:00:05\",\r\n          \"DriverOpts\": null\r\n        }\r\n      }\r\n    },\r\n    \"Mounts\": [\r\n      {\r\n        \"Type\": \"bind\",\r\n        \"Source\": \"/Users/sebastiaan/projects/libnetwork\",\r\n        \"Destination\": \"/go/src/github.com/docker/libnetwork\",\r\n        \"Mode\": \"\",\r\n        \"RW\": true,\r\n        \"Propagation\": \"rprivate\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "343671691",
        "repo_full_name": "docker/compose",
        "pr_number": 6905,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "343424231",
        "commented_code": "@@ -753,6 +754,7 @@ def ps(self, options):\n                     command,\n                     container.human_readable_state,\n                     container.human_readable_ports,\n+                    container.human_readable_uptime,",
        "comment_created_at": "2019-11-07T14:14:46+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "I agree with this. Also, if it's not running, there is no `Uptime`.\r\nChanging the `State` column to `Status` would do the job.\r\n\r\nThe only thing here is the people that could be parsing this output, but since it's not a guaranteed format, we should be fine.",
        "pr_file_module": null
      },
      {
        "comment_id": "343741454",
        "repo_full_name": "docker/compose",
        "pr_number": 6905,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "343424231",
        "commented_code": "@@ -753,6 +754,7 @@ def ps(self, options):\n                     command,\n                     container.human_readable_state,\n                     container.human_readable_ports,\n+                    container.human_readable_uptime,",
        "comment_created_at": "2019-11-07T16:18:18+00:00",
        "comment_author": "zelahi",
        "comment_body": "Ahh I believe I just missed it.  I didn't use the curl command and actually used the values I saw when I did a `docker inspect <container_name>`.  I'll go ahead and fix it so we use Status instead.  Thanks for the feedback!! =)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "364730029",
    "pr_number": 6858,
    "pr_file": "compose/cli/main.py",
    "created_at": "2020-01-09T13:12:44+00:00",
    "commented_code": "--verbose                   Show more output\n       --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n       --no-ansi                   Do not print ANSI control characters\n+      --ansi (never|always|auto)  Control when to print ANSI control characters",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "364730029",
        "repo_full_name": "docker/compose",
        "pr_number": 6858,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "364730029",
        "commented_code": "@@ -195,6 +208,7 @@ class TopLevelCommand(object):\n       --verbose                   Show more output\n       --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n       --no-ansi                   Do not print ANSI control characters\n+      --ansi (never|always|auto)  Control when to print ANSI control characters",
        "comment_created_at": "2020-01-09T13:12:44+00:00",
        "comment_author": "thaJeztah",
        "comment_body": "should the new option deprecate the old (`--no-ansi`) one? (at least making them conflicting options, as (I think) `--no-ansi` is the equivalent of `--ansi=never`?)\r\n\r\nFor the `docker` cli, if there's an option that cannot be removed we usually _hide_ the option (to discourage use), and (depending on the case) print a deprecation warning if used (but keep it functional if needed).\r\n\r\nAlso looking if we should align the UX to the `--progress` option used on `docker build`;\r\n\r\n```\r\n      --progress string         Set type of progress output (auto, plain, tty). Use plain to show container output (default \"auto\")\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "364832695",
        "repo_full_name": "docker/compose",
        "pr_number": 6858,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "364730029",
        "commented_code": "@@ -195,6 +208,7 @@ class TopLevelCommand(object):\n       --verbose                   Show more output\n       --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n       --no-ansi                   Do not print ANSI control characters\n+      --ansi (never|always|auto)  Control when to print ANSI control characters",
        "comment_created_at": "2020-01-09T16:21:15+00:00",
        "comment_author": "mikesep",
        "comment_body": "Hi @thaJeztah, thanks for your feedback!\r\n\r\n`--no-ansi` is indeed the same as `--ansi=never`. In this code, `--no-ansi` overrides `--ansi`, but I could certainly make `--ansi=MODE` and `--no-ansi` mutually exclusive. I could also hide `--no-ansi` and emit a warning.\r\n\r\nAlignment across CLIs is good. If `--progress=tty` means \"always print ANSI color codes\", I'm not thrilled by that name for it. If that ship has already sailed, and the project would prefer that I follow the auto/plain/tty convention, I can do that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "272160418",
    "pr_number": 6584,
    "pr_file": "compose/service.py",
    "created_at": "2019-04-04T12:46:40+00:00",
    "commented_code": "path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "272160418",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-04T12:46:40+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "I think that like in `docker build` path should be mandatory. ",
        "pr_file_module": null
      },
      {
        "comment_id": "272161212",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-04T12:48:48+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "Also, that would be great if the order here was alphabetic to reflect `docker build --help` options list behavior.",
        "pr_file_module": null
      },
      {
        "comment_id": "272558857",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-05T12:12:41+00:00",
        "comment_author": "orisano",
        "comment_body": "`path=None` is following the original codebase.\r\nhttps://github.com/docker/docker-py/blob/37e096f6add7e26ada3d6840ce9a9ce341bbdf23/docker/api/build.py#L16-L23",
        "pr_file_module": null
      },
      {
        "comment_id": "273363328",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-09T07:47:26+00:00",
        "comment_author": "ulyssessouza",
        "comment_body": "The point is that in this API `path` is optional because `fileobj` can be used instead and `fileobj` is not used in your PR. Checked in https://github.com/docker/docker-py/blob/37e096f6add7e26ada3d6840ce9a9ce341bbdf23/docker/api/build.py#L125\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "274245643",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-11T03:22:54+00:00",
        "comment_author": "orisano",
        "comment_body": "I understand it.\r\ncan i use incompatible signature?",
        "pr_file_module": null
      },
      {
        "comment_id": "275779022",
        "repo_full_name": "docker/compose",
        "pr_number": 6584,
        "pr_file": "compose/service.py",
        "discussion_id": "272160418",
        "commented_code": "@@ -1695,3 +1699,135 @@ def rewrite_build_path(path):\n         path = WINDOWS_LONGPATH_PREFIX + os.path.normpath(path)\n \n     return path\n+\n+\n+def exec_build(path=None, tag=None, quiet=False, fileobj=None,",
        "comment_created_at": "2019-04-16T12:50:14+00:00",
        "comment_author": "orisano",
        "comment_body": "@ulyssessouza I fixed it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "154479593",
    "pr_number": 5410,
    "pr_file": "compose/cli/main.py",
    "created_at": "2017-12-02T00:34:34+00:00",
    "commented_code": "--force-rm              Always remove intermediate containers.\n             --no-cache              Do not use cache when building the image.\n             --pull                  Always attempt to pull a newer version of the image.\n+            --memory MEM            Sets memory limit for the bulid container.",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "154479593",
        "repo_full_name": "docker/compose",
        "pr_number": 5410,
        "pr_file": "compose/cli/main.py",
        "discussion_id": "154479593",
        "commented_code": "@@ -232,6 +232,7 @@ def build(self, options):\n             --force-rm              Always remove intermediate containers.\n             --no-cache              Do not use cache when building the image.\n             --pull                  Always attempt to pull a newer version of the image.\n+            --memory MEM            Sets memory limit for the bulid container.",
        "comment_created_at": "2017-12-02T00:34:34+00:00",
        "comment_author": "shin-",
        "comment_body": "Can we add the short form `-m` as well?",
        "pr_file_module": null
      }
    ]
  }
]