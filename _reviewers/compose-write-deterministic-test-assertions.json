[
  {
    "discussion_id": "1971131231",
    "pr_number": 12576,
    "pr_file": "cmd/compose/version_test.go",
    "created_at": "2025-02-26T08:18:34+00:00",
    "commented_code": "+/*\n+   Copyright 2025 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package compose\n+\n+import (\n+\t\"bytes\"\n+\t\"testing\"\n+\n+\t\"github.com/docker/cli/cli/streams\"\n+\t\"github.com/docker/compose/v2/internal\"\n+\t\"github.com/docker/compose/v2/pkg/mocks\"\n+\t\"go.uber.org/mock/gomock\"\n+\t\"gotest.tools/v3/assert\"\n+)\n+\n+func TestVersionCommand(t *testing.T) {\n+\toriginalVersion := internal.Version\n+\tdefer func() {\n+\t\tinternal.Version = originalVersion\n+\t}()\n+\tinternal.Version = \"v2.33.0-desktop.1\"",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1971131231",
        "repo_full_name": "docker/compose",
        "pr_number": 12576,
        "pr_file": "cmd/compose/version_test.go",
        "discussion_id": "1971131231",
        "commented_code": "@@ -0,0 +1,75 @@\n+/*\n+   Copyright 2025 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package compose\n+\n+import (\n+\t\"bytes\"\n+\t\"testing\"\n+\n+\t\"github.com/docker/cli/cli/streams\"\n+\t\"github.com/docker/compose/v2/internal\"\n+\t\"github.com/docker/compose/v2/pkg/mocks\"\n+\t\"go.uber.org/mock/gomock\"\n+\t\"gotest.tools/v3/assert\"\n+)\n+\n+func TestVersionCommand(t *testing.T) {\n+\toriginalVersion := internal.Version\n+\tdefer func() {\n+\t\tinternal.Version = originalVersion\n+\t}()\n+\tinternal.Version = \"v2.33.0-desktop.1\"",
        "comment_created_at": "2025-02-26T08:18:34+00:00",
        "comment_author": "ndeloof",
        "comment_body": "This version string is very specific to Docker Desktop and will be outdated once we release v2.34, I fear this will bring some confusion. Better use a pure fake version for testing purpose: `v9.9.9-test` for example",
        "pr_file_module": null
      },
      {
        "comment_id": "1971776708",
        "repo_full_name": "docker/compose",
        "pr_number": 12576,
        "pr_file": "cmd/compose/version_test.go",
        "discussion_id": "1971131231",
        "commented_code": "@@ -0,0 +1,75 @@\n+/*\n+   Copyright 2025 Docker Compose CLI authors\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package compose\n+\n+import (\n+\t\"bytes\"\n+\t\"testing\"\n+\n+\t\"github.com/docker/cli/cli/streams\"\n+\t\"github.com/docker/compose/v2/internal\"\n+\t\"github.com/docker/compose/v2/pkg/mocks\"\n+\t\"go.uber.org/mock/gomock\"\n+\t\"gotest.tools/v3/assert\"\n+)\n+\n+func TestVersionCommand(t *testing.T) {\n+\toriginalVersion := internal.Version\n+\tdefer func() {\n+\t\tinternal.Version = originalVersion\n+\t}()\n+\tinternal.Version = \"v2.33.0-desktop.1\"",
        "comment_created_at": "2025-02-26T15:07:29+00:00",
        "comment_author": "maxproske",
        "comment_body": "@ndeloof Good suggestion, done. If there are other areas you'd like unit tests prioritized, just shout.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1180198793",
    "pr_number": 9279,
    "pr_file": "cmd/compose/compose_test.go",
    "created_at": "2023-04-28T09:56:04+00:00",
    "commented_code": "_, err = p.GetService(\"zot\")\n \tassert.NilError(t, err)\n }\n+\n+func TestPrintParametersWithEnvFile(t *testing.T) {\n+\tdirName, err := os.MkdirTemp(\"\", \"docker_compose_dir\")\n+\tif err != nil {\n+\t\tassert.NilError(t, err)\n+\t}\n+\n+\tdefer func() {\n+\t\terr := os.RemoveAll(dirName)\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tdockerCompFile, err := os.CreateTemp(dirName, \"docker-compose-*.yml\")\n+\n+\tif err != nil {\n+\t\tassert.NilError(t, err)\n+\t}\n+\tdefer func() {\n+\t\terr := dockerCompFile.Close()\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tdefer func() {\n+\t\terr := os.Remove(dockerCompFile.Name())\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\t_, err = dockerCompFile.WriteString(`\n+services:\n+  redis:\n+    image: redis\n+  pg:\n+    networks:\n+      - backend\n+    image: postgres\n+    command: \"${LOGGIN_LEVEL:-log_info}\"\n+networks:\n+  frontend:\n+    driver: custom-driver-1\n+  backend:\n+    driver: custom-driver-2\n+    driver_opts:\n+      foo: \"${FOO_TEST_ENV_VAR}\"\n+      bar: \"${BAR?error}\"\n+      buzz: \"${BUZZ:-buzz}\"`)\n+\n+\tassert.NilError(t, err)\n+\n+\tenvFile, err := os.CreateTemp(dirName, \"env_file-*\")\n+\tassert.NilError(t, err)\n+\n+\tdefer func() {\n+\t\terr := envFile.Close()\n+\t\tassert.NilError(t, err)\n+\t}()\n+\tdefer func() {\n+\t\terr := os.Remove(envFile.Name())\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\t_, err = envFile.WriteString(\"FOO_TEST_ENV_VAR=FILE_FOO_VALUE\nBAR=BAR_VALUE\n\")\n+\tassert.NilError(t, err)\n+\n+\terr = os.Setenv(\"FOO_TEST_ENV_VAR\", \"ENV_FOO_VALUE\")\n+\tassert.NilError(t, err)\n+\n+\tdefer func() {\n+\t\terr := os.Unsetenv(\"FOO_TEST_ENV_VAR\")\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tp := projectOptions{\n+\t\tConfigPaths: []string{dockerCompFile.Name()},\n+\t\tEnvFile:     envFile.Name(),\n+\t\tProjectDir:  dirName,\n+\t}\n+\topts := convertOptions{\n+\t\tprojectOptions: &p,\n+\t}\n+\tparams, err := getParameters(opts)\n+\n+\tassert.NilError(t, err)\n+\n+\texpectedMap := Parameters{\n+\t\t\"BAR\": Parameter{\n+\t\t\tName:     \"BAR\",\n+\t\t\tDefault:  \"\",\n+\t\t\tRequired: true,\n+\t\t\tActual:   \"BAR_VALUE\",\n+\t\t\tSource:   envFile.Name(),\n+\t\t},\n+\t\t\"BUZZ\": Parameter{\n+\t\t\tName:     \"BUZZ\",\n+\t\t\tDefault:  \"buzz\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"buzz\",\n+\t\t\tSource:   dockerCompFile.Name(),\n+\t\t},\n+\t\t\"FOO_TEST_ENV_VAR\": Parameter{\n+\t\t\tName:     \"FOO_TEST_ENV_VAR\",\n+\t\t\tDefault:  \"\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"ENV_FOO_VALUE\",\n+\t\t\tSource:   \"os.Env\",\n+\t\t},\n+\t\t\"LOGGIN_LEVEL\": Parameter{\n+\t\t\tName:     \"LOGGIN_LEVEL\",\n+\t\t\tDefault:  \"log_info\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"log_info\",\n+\t\t\tSource:   dockerCompFile.Name(),\n+\t\t},\n+\t}\n+\tassert.Equal(t, len(params), len(expectedMap))\n+\tfor key, val := range expectedMap {\n+\t\tassert.Equal(t, params[key], val)\n+\t}\n+}\n+\n+func TestPrintParametersWithDotFile(t *testing.T) {\n+\tdirName, err := os.MkdirTemp(\"\", \"docker_compose_dir\")",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1180198793",
        "repo_full_name": "docker/compose",
        "pr_number": 9279,
        "pr_file": "cmd/compose/compose_test.go",
        "discussion_id": "1180198793",
        "commented_code": "@@ -51,3 +52,225 @@ func TestFilterServices(t *testing.T) {\n \t_, err = p.GetService(\"zot\")\n \tassert.NilError(t, err)\n }\n+\n+func TestPrintParametersWithEnvFile(t *testing.T) {\n+\tdirName, err := os.MkdirTemp(\"\", \"docker_compose_dir\")\n+\tif err != nil {\n+\t\tassert.NilError(t, err)\n+\t}\n+\n+\tdefer func() {\n+\t\terr := os.RemoveAll(dirName)\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tdockerCompFile, err := os.CreateTemp(dirName, \"docker-compose-*.yml\")\n+\n+\tif err != nil {\n+\t\tassert.NilError(t, err)\n+\t}\n+\tdefer func() {\n+\t\terr := dockerCompFile.Close()\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tdefer func() {\n+\t\terr := os.Remove(dockerCompFile.Name())\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\t_, err = dockerCompFile.WriteString(`\n+services:\n+  redis:\n+    image: redis\n+  pg:\n+    networks:\n+      - backend\n+    image: postgres\n+    command: \"${LOGGIN_LEVEL:-log_info}\"\n+networks:\n+  frontend:\n+    driver: custom-driver-1\n+  backend:\n+    driver: custom-driver-2\n+    driver_opts:\n+      foo: \"${FOO_TEST_ENV_VAR}\"\n+      bar: \"${BAR?error}\"\n+      buzz: \"${BUZZ:-buzz}\"`)\n+\n+\tassert.NilError(t, err)\n+\n+\tenvFile, err := os.CreateTemp(dirName, \"env_file-*\")\n+\tassert.NilError(t, err)\n+\n+\tdefer func() {\n+\t\terr := envFile.Close()\n+\t\tassert.NilError(t, err)\n+\t}()\n+\tdefer func() {\n+\t\terr := os.Remove(envFile.Name())\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\t_, err = envFile.WriteString(\"FOO_TEST_ENV_VAR=FILE_FOO_VALUE\\nBAR=BAR_VALUE\\n\")\n+\tassert.NilError(t, err)\n+\n+\terr = os.Setenv(\"FOO_TEST_ENV_VAR\", \"ENV_FOO_VALUE\")\n+\tassert.NilError(t, err)\n+\n+\tdefer func() {\n+\t\terr := os.Unsetenv(\"FOO_TEST_ENV_VAR\")\n+\t\tassert.NilError(t, err)\n+\t}()\n+\n+\tp := projectOptions{\n+\t\tConfigPaths: []string{dockerCompFile.Name()},\n+\t\tEnvFile:     envFile.Name(),\n+\t\tProjectDir:  dirName,\n+\t}\n+\topts := convertOptions{\n+\t\tprojectOptions: &p,\n+\t}\n+\tparams, err := getParameters(opts)\n+\n+\tassert.NilError(t, err)\n+\n+\texpectedMap := Parameters{\n+\t\t\"BAR\": Parameter{\n+\t\t\tName:     \"BAR\",\n+\t\t\tDefault:  \"\",\n+\t\t\tRequired: true,\n+\t\t\tActual:   \"BAR_VALUE\",\n+\t\t\tSource:   envFile.Name(),\n+\t\t},\n+\t\t\"BUZZ\": Parameter{\n+\t\t\tName:     \"BUZZ\",\n+\t\t\tDefault:  \"buzz\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"buzz\",\n+\t\t\tSource:   dockerCompFile.Name(),\n+\t\t},\n+\t\t\"FOO_TEST_ENV_VAR\": Parameter{\n+\t\t\tName:     \"FOO_TEST_ENV_VAR\",\n+\t\t\tDefault:  \"\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"ENV_FOO_VALUE\",\n+\t\t\tSource:   \"os.Env\",\n+\t\t},\n+\t\t\"LOGGIN_LEVEL\": Parameter{\n+\t\t\tName:     \"LOGGIN_LEVEL\",\n+\t\t\tDefault:  \"log_info\",\n+\t\t\tRequired: false,\n+\t\t\tActual:   \"log_info\",\n+\t\t\tSource:   dockerCompFile.Name(),\n+\t\t},\n+\t}\n+\tassert.Equal(t, len(params), len(expectedMap))\n+\tfor key, val := range expectedMap {\n+\t\tassert.Equal(t, params[key], val)\n+\t}\n+}\n+\n+func TestPrintParametersWithDotFile(t *testing.T) {\n+\tdirName, err := os.MkdirTemp(\"\", \"docker_compose_dir\")",
        "comment_created_at": "2023-04-28T09:56:04+00:00",
        "comment_author": "laurazard",
        "comment_body": "```suggestion\r\n        dirName := t.TempDir()\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1219913433",
    "pr_number": 10660,
    "pr_file": "pkg/utils/writer_test.go",
    "created_at": "2023-06-06T15:57:37+00:00",
    "commented_code": "w := GetWriter(func(line string) {\n \t\tlines = append(lines, line)\n \t})\n-\tw.Write([]byte(\"h\"))\n-\tw.Write([]byte(\"e\"))\n-\tw.Write([]byte(\"l\"))\n-\tw.Write([]byte(\"l\"))\n-\tw.Write([]byte(\"o\"))\n-\tw.Write([]byte(\"\n\"))\n-\tw.Write([]byte(\"world!\n\"))\n-\tassert.DeepEqual(t, lines, []string{\"hello\", \"world!\"})\n+\tw.Write([]byte(\"hello\n\"))\n+\tw.Write([]byte(\"world\n\"))",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "1219913433",
        "repo_full_name": "docker/compose",
        "pr_number": 10660,
        "pr_file": "pkg/utils/writer_test.go",
        "discussion_id": "1219913433",
        "commented_code": "@@ -28,13 +28,9 @@ func TestSplitWriter(t *testing.T) {\n \tw := GetWriter(func(line string) {\n \t\tlines = append(lines, line)\n \t})\n-\tw.Write([]byte(\"h\"))\n-\tw.Write([]byte(\"e\"))\n-\tw.Write([]byte(\"l\"))\n-\tw.Write([]byte(\"l\"))\n-\tw.Write([]byte(\"o\"))\n-\tw.Write([]byte(\"\\n\"))\n-\tw.Write([]byte(\"world!\\n\"))\n-\tassert.DeepEqual(t, lines, []string{\"hello\", \"world!\"})\n+\tw.Write([]byte(\"hello\\n\"))\n+\tw.Write([]byte(\"world\\n\"))",
        "comment_created_at": "2023-06-06T15:57:37+00:00",
        "comment_author": "laurazard",
        "comment_body": "Should we test the new behaviour too by writing a line without an EOL?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "939686617",
    "pr_number": 9173,
    "pr_file": "pkg/e2e/compose_test.go",
    "created_at": "2022-08-07T15:41:20+00:00",
    "commented_code": "res := c.RunDockerComposeCmd(t, \"--project-directory\", \"fixtures/simple-composefile\", \"pull\")\n \toutput := res.Combined()\n \n-\tassert.Assert(t, strings.Contains(output, \"simple Pulled\"))\n-\tassert.Assert(t, strings.Contains(output, \"another Pulled\"))\n+\texpected := []string{",
    "repo_full_name": "docker/compose",
    "discussion_comments": [
      {
        "comment_id": "939686617",
        "repo_full_name": "docker/compose",
        "pr_number": 9173,
        "pr_file": "pkg/e2e/compose_test.go",
        "discussion_id": "939686617",
        "commented_code": "@@ -125,8 +125,28 @@ func TestComposePull(t *testing.T) {\n \tres := c.RunDockerComposeCmd(t, \"--project-directory\", \"fixtures/simple-composefile\", \"pull\")\n \toutput := res.Combined()\n \n-\tassert.Assert(t, strings.Contains(output, \"simple Pulled\"))\n-\tassert.Assert(t, strings.Contains(output, \"another Pulled\"))\n+\texpected := []string{",
        "comment_created_at": "2022-08-07T15:41:20+00:00",
        "comment_author": "laurazard",
        "comment_body": "nit: could we make this a bit more deterministic? Playing around with it locally, seems like `Skipped - Image is already being pulled by` is the only `Skipped - xxx` message that needs checking, and then maybe `Pulled`. Maybe we could do away with `contains()` entirely and just check the output as a whole contains those key phrases",
        "pr_file_module": null
      },
      {
        "comment_id": "942583402",
        "repo_full_name": "docker/compose",
        "pr_number": 9173,
        "pr_file": "pkg/e2e/compose_test.go",
        "discussion_id": "939686617",
        "commented_code": "@@ -125,8 +125,28 @@ func TestComposePull(t *testing.T) {\n \tres := c.RunDockerComposeCmd(t, \"--project-directory\", \"fixtures/simple-composefile\", \"pull\")\n \toutput := res.Combined()\n \n-\tassert.Assert(t, strings.Contains(output, \"simple Pulled\"))\n-\tassert.Assert(t, strings.Contains(output, \"another Pulled\"))\n+\texpected := []string{",
        "comment_created_at": "2022-08-10T15:16:35+00:00",
        "comment_author": "KoditkarVedant",
        "comment_body": "I believe I have an idea how to make this more explicit",
        "pr_file_module": null
      },
      {
        "comment_id": "942652137",
        "repo_full_name": "docker/compose",
        "pr_number": 9173,
        "pr_file": "pkg/e2e/compose_test.go",
        "discussion_id": "939686617",
        "commented_code": "@@ -125,8 +125,28 @@ func TestComposePull(t *testing.T) {\n \tres := c.RunDockerComposeCmd(t, \"--project-directory\", \"fixtures/simple-composefile\", \"pull\")\n \toutput := res.Combined()\n \n-\tassert.Assert(t, strings.Contains(output, \"simple Pulled\"))\n-\tassert.Assert(t, strings.Contains(output, \"another Pulled\"))\n+\texpected := []string{",
        "comment_created_at": "2022-08-10T16:14:52+00:00",
        "comment_author": "KoditkarVedant",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]