[
  {
    "discussion_id": "2202208655",
    "pr_number": 6524,
    "pr_file": "gui/src/pages/gui/ToolCallDiv/ToggleWithIcon.tsx",
    "created_at": "2025-07-12T00:57:12+00:00",
    "commented_code": "+import { ChevronRightIcon } from \"@heroicons/react/24/outline\";\n+import { ComponentType, useState } from \"react\";\n+\n+interface ToggleWithIconProps {\n+  icon?: ComponentType<React.SVGProps<SVGSVGElement>>;\n+  isToggleable?: boolean;\n+  open?: boolean;\n+  onClick?: () => void;\n+  className?: string;\n+  isClickable?: boolean;\n+}\n+\n+export function ToggleWithIcon({\n+  icon: Icon,\n+  isToggleable = false,\n+  open = false,\n+  onClick,\n+  className = \"\",\n+  isClickable = false,\n+}: ToggleWithIconProps) {\n+  const [isHovered, setIsHovered] = useState(false);\n+  const showChevron = isToggleable && (isHovered || open);\n+\n+  function handleClick() {\n+    if ((isToggleable || isClickable) && onClick) {\n+      onClick();\n+    }\n+  }\n+\n+  function renderIcon() {\n+    if (!Icon && !isToggleable) {\n+      return null;\n+    }\n+\n+    if (showChevron) {\n+      return (\n+        <ChevronRightIcon\n+          className={`text-description h-4 w-4 transition-transform duration-200 ease-in-out ${\n+            open ? \"rotate-90\" : \"rotate-0\"\n+          }`}\n+        />\n+      );\n+    }\n+\n+    return Icon ? <Icon className=\"text-description h-4 w-4\" /> : null;\n+  }\n+\n+  return (\n+    <div",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2202208655",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6524,
        "pr_file": "gui/src/pages/gui/ToolCallDiv/ToggleWithIcon.tsx",
        "discussion_id": "2202208655",
        "commented_code": "@@ -0,0 +1,58 @@\n+import { ChevronRightIcon } from \"@heroicons/react/24/outline\";\n+import { ComponentType, useState } from \"react\";\n+\n+interface ToggleWithIconProps {\n+  icon?: ComponentType<React.SVGProps<SVGSVGElement>>;\n+  isToggleable?: boolean;\n+  open?: boolean;\n+  onClick?: () => void;\n+  className?: string;\n+  isClickable?: boolean;\n+}\n+\n+export function ToggleWithIcon({\n+  icon: Icon,\n+  isToggleable = false,\n+  open = false,\n+  onClick,\n+  className = \"\",\n+  isClickable = false,\n+}: ToggleWithIconProps) {\n+  const [isHovered, setIsHovered] = useState(false);\n+  const showChevron = isToggleable && (isHovered || open);\n+\n+  function handleClick() {\n+    if ((isToggleable || isClickable) && onClick) {\n+      onClick();\n+    }\n+  }\n+\n+  function renderIcon() {\n+    if (!Icon && !isToggleable) {\n+      return null;\n+    }\n+\n+    if (showChevron) {\n+      return (\n+        <ChevronRightIcon\n+          className={`text-description h-4 w-4 transition-transform duration-200 ease-in-out ${\n+            open ? \"rotate-90\" : \"rotate-0\"\n+          }`}\n+        />\n+      );\n+    }\n+\n+    return Icon ? <Icon className=\"text-description h-4 w-4\" /> : null;\n+  }\n+\n+  return (\n+    <div",
        "comment_created_at": "2025-07-12T00:57:12+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":7,\"steps\":[]} -->\nClickable div lacks accessibility attributes (role=\"button\", tabIndex, and keyboard handler), making it unreachable for keyboard users and screen readers.",
        "pr_file_module": null
      }
    ]
  }
]