[
  {
    "discussion_id": "2178489030",
    "pr_number": 6385,
    "pr_file": "gui/src/pages/gui/Chat.tsx",
    "created_at": "2025-07-01T20:50:00+00:00",
    "commented_code": "setLocalStorage(\"mainTextEntryCounter\", 1);\n       }\n     },\n-    [\n-      history,\n-      selectedModels,\n-      streamResponse,\n-      mode,\n-      isInEdit,\n-      codeToEdit,\n-      toolCallState,\n-    ],\n+    [history, selectedModels, mode, isInEdit, codeToEdit, toolCallState],",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2178489030",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6385,
        "pr_file": "gui/src/pages/gui/Chat.tsx",
        "discussion_id": "2178489030",
        "commented_code": "@@ -236,15 +235,7 @@ export function Chat() {\n         setLocalStorage(\"mainTextEntryCounter\", 1);\n       }\n     },\n-    [\n-      history,\n-      selectedModels,\n-      streamResponse,\n-      mode,\n-      isInEdit,\n-      codeToEdit,\n-      toolCallState,\n-    ],\n+    [history, selectedModels, mode, isInEdit, codeToEdit, toolCallState],",
        "comment_created_at": "2025-07-01T20:50:00+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nThe dependency array for useCallback is missing currentToolCallApplyState, which is referenced inside the callback. This can lead to stale closures and unexpected behavior if currentToolCallApplyState changes.\n\n```suggestion\n    [history, selectedModels, mode, isInEdit, codeToEdit, toolCallState, currentToolCallApplyState],\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2198762491",
    "pr_number": 6565,
    "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/LumpToolbar.tsx",
    "created_at": "2025-07-10T21:15:26+00:00",
    "commented_code": ");\n \n   const isApplying = applyStates.some((state) => state.status === \"streaming\");\n+  const ideMessenger = useContext(IdeMessengerContext);",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2198762491",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6565,
        "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/LumpToolbar.tsx",
        "discussion_id": "2198762491",
        "commented_code": "@@ -35,6 +35,7 @@ export function LumpToolbar() {\n   );\n \n   const isApplying = applyStates.some((state) => state.status === \"streaming\");\n+  const ideMessenger = useContext(IdeMessengerContext);",
        "comment_created_at": "2025-07-10T21:15:26+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[]} -->\nuseContext should not be called conditionally or inside event handlers; moving it to the top level of the component as done here is correct. However, the dependency array of the useEffect hook does not include ideMessenger, which could lead to stale values if the context changes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2105214648",
    "pr_number": 5801,
    "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/LumpToolbar.tsx",
    "created_at": "2025-05-23T18:30:05+00:00",
    "commented_code": "+import { useEffect } from \"react\";\n+import { useSelector } from \"react-redux\";\n+import { useAppDispatch, useAppSelector } from \"../../../../redux/hooks\";\n+import { selectCurrentToolCall } from \"../../../../redux/selectors/selectCurrentToolCall\";\n+import {\n+  callCurrentTool,\n+  cancelCurrentToolCall,\n+} from \"../../../../redux/thunks\";\n+import { isJetBrains } from \"../../../../util\";\n+import { BlockSettingsTopToolbar } from \"./BlockSettingsTopToolbar\";\n+import { EditOutcomeToolbar } from \"./EditOutcomeToolbar\";\n+import { EditToolbar } from \"./EditToolbar\";\n+import { PendingApplyStatesToolbar } from \"./PendingApplyStatesToolbar\";\n+import { PendingToolCallToolbar } from \"./PendingToolCallToolbar\";\n+import { StreamingToolbar } from \"./StreamingToolbar\";\n+import { TtsActiveToolbar } from \"./TtsActiveToolbar\";\n+\n+export function LumpToolbar() {\n+  const dispatch = useAppDispatch();\n+  const ttsActive = useAppSelector((state) => state.ui.ttsActive);\n+  const isStreaming = useAppSelector((state) => state.session.isStreaming);\n+  const isInEdit = useAppSelector((state) => state.session.isInEdit);\n+  const jetbrains = isJetBrains();\n+  const toolCallState = useSelector(selectCurrentToolCall);\n+  const editApplyState = useAppSelector(\n+    (state) => state.editModeState.applyState,\n+  );\n+  const pendingApplyStates = useAppSelector(\n+    (state) => state.session.codeBlockApplyStates.states,\n+  ).filter((state) => state.status === \"done\");\n+\n+  const handleKeyDown = (event: KeyboardEvent) => {\n+    if (toolCallState?.status === \"generated\") {\n+      const metaKey = event.metaKey || event.ctrlKey;\n+      const altKey = event.altKey;\n+\n+      if (metaKey && event.key === \"Enter\") {\n+        event.preventDefault();\n+        event.stopPropagation();\n+        void dispatch(callCurrentTool());\n+      } else if ((jetbrains ? altKey : metaKey) && event.key === \"Backspace\") {\n+        event.preventDefault();\n+        event.stopPropagation();\n+        void dispatch(cancelCurrentToolCall());\n+      }\n+    }\n+  };\n+\n+  useEffect(() => {\n+    document.addEventListener(\"keydown\", handleKeyDown);",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2105214648",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5801,
        "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/LumpToolbar.tsx",
        "discussion_id": "2105214648",
        "commented_code": "@@ -0,0 +1,83 @@\n+import { useEffect } from \"react\";\n+import { useSelector } from \"react-redux\";\n+import { useAppDispatch, useAppSelector } from \"../../../../redux/hooks\";\n+import { selectCurrentToolCall } from \"../../../../redux/selectors/selectCurrentToolCall\";\n+import {\n+  callCurrentTool,\n+  cancelCurrentToolCall,\n+} from \"../../../../redux/thunks\";\n+import { isJetBrains } from \"../../../../util\";\n+import { BlockSettingsTopToolbar } from \"./BlockSettingsTopToolbar\";\n+import { EditOutcomeToolbar } from \"./EditOutcomeToolbar\";\n+import { EditToolbar } from \"./EditToolbar\";\n+import { PendingApplyStatesToolbar } from \"./PendingApplyStatesToolbar\";\n+import { PendingToolCallToolbar } from \"./PendingToolCallToolbar\";\n+import { StreamingToolbar } from \"./StreamingToolbar\";\n+import { TtsActiveToolbar } from \"./TtsActiveToolbar\";\n+\n+export function LumpToolbar() {\n+  const dispatch = useAppDispatch();\n+  const ttsActive = useAppSelector((state) => state.ui.ttsActive);\n+  const isStreaming = useAppSelector((state) => state.session.isStreaming);\n+  const isInEdit = useAppSelector((state) => state.session.isInEdit);\n+  const jetbrains = isJetBrains();\n+  const toolCallState = useSelector(selectCurrentToolCall);\n+  const editApplyState = useAppSelector(\n+    (state) => state.editModeState.applyState,\n+  );\n+  const pendingApplyStates = useAppSelector(\n+    (state) => state.session.codeBlockApplyStates.states,\n+  ).filter((state) => state.status === \"done\");\n+\n+  const handleKeyDown = (event: KeyboardEvent) => {\n+    if (toolCallState?.status === \"generated\") {\n+      const metaKey = event.metaKey || event.ctrlKey;\n+      const altKey = event.altKey;\n+\n+      if (metaKey && event.key === \"Enter\") {\n+        event.preventDefault();\n+        event.stopPropagation();\n+        void dispatch(callCurrentTool());\n+      } else if ((jetbrains ? altKey : metaKey) && event.key === \"Backspace\") {\n+        event.preventDefault();\n+        event.stopPropagation();\n+        void dispatch(cancelCurrentToolCall());\n+      }\n+    }\n+  };\n+\n+  useEffect(() => {\n+    document.addEventListener(\"keydown\", handleKeyDown);",
        "comment_created_at": "2025-05-23T18:30:05+00:00",
        "comment_author": "RomneyDa",
        "comment_body": "assuming this wasn't changed on this PR but this might cause a bug bc the toolCallState = generated check should be in the use effect adding/removing the listener, not in the listener itself?",
        "pr_file_module": null
      }
    ]
  }
]