[
  {
    "discussion_id": "2179729939",
    "pr_number": 6395,
    "pr_file": "core/tools/definitions/lsTool.ts",
    "created_at": "2025-07-02T10:42:17+00:00",
    "commented_code": "},\n     },\n   },\n+  systemMessageDescription: createSystemMessageExampleCall(",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2179729939",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6395,
        "pr_file": "core/tools/definitions/lsTool.ts",
        "discussion_id": "2179729939",
        "commented_code": "@@ -31,4 +32,9 @@ export const lsTool: Tool = {\n       },\n     },\n   },\n+  systemMessageDescription: createSystemMessageExampleCall(",
        "comment_created_at": "2025-07-02T10:42:17+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nThe systemMessageDescription example omits the required 'recursive' parameter, which may lead to confusion or incorrect tool usage. The example should include both required parameters.\n\n```suggestion\n  systemMessageDescription: createSystemMessageExampleCall(\n    BuiltInToolNames.LSTool,\n    `To list files and folders in a given directory, call the ${BuiltInToolNames.LSTool} tool with the \\\"dirPath\\\" and \\\"recursive\\\" arguments. For example:`,\n    `<dirPath>path/to/dir</dirPath>\\n<recursive>false</recursive>`,\n  ),\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216444612",
    "pr_number": 6395,
    "pr_file": "core/tools/definitions/searchAndReplaceInFile.ts",
    "created_at": "2025-07-18T16:26:55+00:00",
    "commented_code": "},\n     },\n   },\n+  //     systemMessageDescription: createSystemMessageExampleCall(\n+  //     BuiltInToolNames.SearchAndReplaceInFile,\n+  //     `To make targed edits by replacing sections of content in an existing file, use the ${BuiltInToolNames.SearchAndReplaceInFile} tool with a \"diff\" argument containing SEARCH/REPLACE blocks that define exact changes to specific parts of the file.",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2216444612",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6395,
        "pr_file": "core/tools/definitions/searchAndReplaceInFile.ts",
        "discussion_id": "2216444612",
        "commented_code": "@@ -91,4 +91,16 @@ Each string in the diffs array can contain multiple SEARCH/REPLACE blocks, and a\n       },\n     },\n   },\n+  //     systemMessageDescription: createSystemMessageExampleCall(\n+  //     BuiltInToolNames.SearchAndReplaceInFile,\n+  //     `To make targed edits by replacing sections of content in an existing file, use the ${BuiltInToolNames.SearchAndReplaceInFile} tool with a \"diff\" argument containing SEARCH/REPLACE blocks that define exact changes to specific parts of the file.",
        "comment_created_at": "2025-07-18T16:26:55+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[]} -->\nComment contains a typo (\"targed\" \u2192 \"targeted\") and refers to a non-existent \"diff\" argument; the actual schema defines a \"diffs\" array. This misleading documentation can confuse maintainers and future implementers.\n\n<details>\n<summary>Prompt for AI agents</summary>\n\n```\nAddress the following comment on core/tools/definitions/searchAndReplaceInFile.ts at line 96:\n\n<comment>Comment contains a typo (&quot;targed&quot; \u2192 &quot;targeted&quot;) and refers to a non-existent &quot;diff&quot; argument; the actual schema defines a &quot;diffs&quot; array. This misleading documentation can confuse maintainers and future implementers.</comment>\n\n<file context>\n@@ -91,4 +91,16 @@ Each string in the diffs array can contain multiple SEARCH/REPLACE blocks, and a\n       },\n     },\n   },\n+  //     systemMessageDescription: createSystemMessageExampleCall(\n+  //     BuiltInToolNames.SearchAndReplaceInFile,\n+  //     `To make targed edits by replacing sections of content in an existing file, use the ${BuiltInToolNames.SearchAndReplaceInFile} tool with a &quot;diff&quot; argument containing SEARCH/REPLACE blocks that define exact changes to specific parts of the file.\n+  // Each block should follow this format:\n+  // ${SEARCH_AND_REPLACE_FORMAT}\n+\n+  // For example, you could respond with:`,\n+  //     [\n+  //       [&quot;filepath&quot;, &quot;path/to/file.ts&quot;],\n+  //       [&quot;diff&quot;, SEARCH_AND_REPLACE_EXAMPLE],\n+  //     ],\n+  //   ),\n };\n</file context>\n```\n\n</details>\n\n```suggestion\n  //     `To make targeted edits by replacing sections of content in an existing file, use the ${BuiltInToolNames.SearchAndReplaceInFile} tool with a \"diffs\" argument containing SEARCH/REPLACE blocks that define exact changes to specific parts of the file.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1805549634",
    "pr_number": 2554,
    "pr_file": "core/llm/llms/Bedrock.ts",
    "created_at": "2024-10-17T23:01:18+00:00",
    "commented_code": "maxTokens: options.maxTokens,\n         temperature: options.temperature,\n         topP: options.topP,\n-        stopSequences: options.stop?.filter((stop) => stop.trim() !== \"\"),\n+        // TODO: The current approach selects the first 4 items from the list to comply with Bedrock's requirement\n+        // of having at least 4 stop sequences, as per the AWS documentation:",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "1805549634",
        "repo_full_name": "continuedev/continue",
        "pr_number": 2554,
        "pr_file": "core/llm/llms/Bedrock.ts",
        "discussion_id": "1805549634",
        "commented_code": "@@ -111,7 +111,15 @@ class Bedrock extends BaseLLM {\n         maxTokens: options.maxTokens,\n         temperature: options.temperature,\n         topP: options.topP,\n-        stopSequences: options.stop?.filter((stop) => stop.trim() !== \"\"),\n+        // TODO: The current approach selects the first 4 items from the list to comply with Bedrock's requirement\n+        // of having at least 4 stop sequences, as per the AWS documentation:",
        "comment_created_at": "2024-10-17T23:01:18+00:00",
        "comment_author": "tahouse",
        "comment_body": "Hi, minor nit: this should say \"at most 4 stop sequences\" not \"at least\". Documentation specifies: \"Minimum number of 0 items. Maximum number of 4 items.\"\r\n\r\nThe slice logic below looks fine; just the comment is misleading.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1983959230",
    "pr_number": 4517,
    "pr_file": "extensions/vscode/src/quickEdit/EditDecorationManager.ts",
    "created_at": "2025-03-06T19:45:59+00:00",
    "commented_code": "constructor(context: vscode.ExtensionContext) {\n     this.decorationType = vscode.window.createTextEditorDecorationType({\n       backgroundColor: new vscode.ThemeColor(",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "1983959230",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4517,
        "pr_file": "extensions/vscode/src/quickEdit/EditDecorationManager.ts",
        "discussion_id": "1983959230",
        "commented_code": "@@ -6,7 +6,7 @@ class EditDecorationManager {\n   constructor(context: vscode.ExtensionContext) {\n     this.decorationType = vscode.window.createTextEditorDecorationType({\n       backgroundColor: new vscode.ThemeColor(",
        "comment_created_at": "2025-03-06T19:45:59+00:00",
        "comment_author": "owtaylor",
        "comment_body": "I'd include a comment here explaining *why* the new color is a good choice, something like:\r\n\r\n```\r\n// editor.selectionHighlightBackground is documented as always needing to be\r\n// partially transparent. This property is useful when we repurpose it here,\r\n// because it means it won't entirely obscure the selection\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1983907395",
    "pr_number": 4514,
    "pr_file": "extensions/vscode/src/commands.ts",
    "created_at": "2025-03-06T19:02:44+00:00",
    "commented_code": "return;\n       }\n \n+      // Make the start of the selection always above the end of the selection\n+      let selectionStart = editor.selection.start;\n+      let selectionEnd = editor.selection.end;\n+      if (selectionStart.line > selectionEnd.line) {\n+        selectionStart = editor.selection.end;\n+        selectionEnd = editor.selection.start;\n+      } else if (selectionStart.line === selectionEnd.line) {\n+        if (selectionStart.character > selectionEnd.character) {\n+          selectionStart = editor.selection.end\n+          selectionEnd = editor.selection.start\n+        }\n+      }\n+\n+      const startFromCharZero = new vscode.Position(selectionStart.line, 0);\n+      const document = editor.document;\n+      let lastLine, lastChar;\n+      // Check if there is a trailing line",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "1983907395",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4514,
        "pr_file": "extensions/vscode/src/commands.ts",
        "discussion_id": "1983907395",
        "commented_code": "@@ -534,9 +534,38 @@ const getCommandsMap: (\n         return;\n       }\n \n+      // Make the start of the selection always above the end of the selection\n+      let selectionStart = editor.selection.start;\n+      let selectionEnd = editor.selection.end;\n+      if (selectionStart.line > selectionEnd.line) {\n+        selectionStart = editor.selection.end;\n+        selectionEnd = editor.selection.start;\n+      } else if (selectionStart.line === selectionEnd.line) {\n+        if (selectionStart.character > selectionEnd.character) {\n+          selectionStart = editor.selection.end\n+          selectionEnd = editor.selection.start\n+        }\n+      }\n+\n+      const startFromCharZero = new vscode.Position(selectionStart.line, 0);\n+      const document = editor.document;\n+      let lastLine, lastChar;\n+      // Check if there is a trailing line ",
        "comment_created_at": "2025-03-06T19:02:44+00:00",
        "comment_author": "owtaylor",
        "comment_body": "What this comment should include is not what its doing but *why*, so more like:\r\n\r\n // If the user selected onto a trailing line but didn't actually include any characters in it\r\n // they don't want to include that line, so trim it off.",
        "pr_file_module": null
      }
    ]
  }
]