[
  {
    "discussion_id": "2146079584",
    "pr_number": 5958,
    "pr_file": "packages/config-yaml/src/schemas/index.ts",
    "created_at": "2025-06-13T20:54:56+00:00",
    "commented_code": "startUrl: z.string(),\n   rootUrl: z.string().optional(),\n   faviconUrl: z.string().optional(),\n+  maxDepth: z.number().optional(),",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146079584",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5958,
        "pr_file": "packages/config-yaml/src/schemas/index.ts",
        "discussion_id": "2146079584",
        "commented_code": "@@ -36,6 +36,8 @@ const docSchema = z.object({\n   startUrl: z.string(),\n   rootUrl: z.string().optional(),\n   faviconUrl: z.string().optional(),\n+  maxDepth: z.number().optional(),",
        "comment_created_at": "2025-06-13T20:54:56+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Type mismatch in config-types package: 'maxDepth' is defined as string in packages/config-types/src/index.ts but as number in this schema. This inconsistency could cause type validation errors and runtime issues when configs are processed.\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146081816",
    "pr_number": 5936,
    "pr_file": "packages/openai-adapters/src/types.ts",
    "created_at": "2025-06-13T20:56:37+00:00",
    "commented_code": "});\n export type AnthropicConfig = z.infer<typeof AnthropicConfigSchema>;\n \n+export const BedrockConfigSchema = BaseConfig.extend({\n+  provider: z.literal(\"bedrock\"),\n+  env: z.object({\n+    region: z.string().optional(),\n+    profile: z.string().optional(),\n+    modelArn: z.string().optional(),",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146081816",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5936,
        "pr_file": "packages/openai-adapters/src/types.ts",
        "discussion_id": "2146081816",
        "commented_code": "@@ -99,6 +99,18 @@ export const AnthropicConfigSchema = OpenAIConfigSchema.extend({\n });\n export type AnthropicConfig = z.infer<typeof AnthropicConfigSchema>;\n \n+export const BedrockConfigSchema = BaseConfig.extend({\n+  provider: z.literal(\"bedrock\"),\n+  env: z.object({\n+    region: z.string().optional(),\n+    profile: z.string().optional(),\n+    modelArn: z.string().optional(),",
        "comment_created_at": "2025-06-13T20:56:37+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "The modelArn field is marked as optional but it is required for AWS Bedrock to know which foundation model to use. Making this optional will lead to runtime errors when the field is not provided. The schema should make this field required by removing .optional().\n\n\ud83d\udcda [Relevant Docs](https://docs.aws.amazon.com/bedrock/latest/APIReference/welcome.html)\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1802225332",
    "pr_number": 2534,
    "pr_file": "core/config/validation.ts",
    "created_at": "2024-10-16T01:55:38+00:00",
    "commented_code": "+import { SerializedContinueConfig } from \"../\";\n+\n+export type ValidationErrorMessage = string;\n+\n+export class ValidationError extends Error {\n+  public errors: ValidationErrorMessage[];\n+\n+  constructor(errors: ValidationErrorMessage[]) {\n+    super(\"Validation failed\");\n+    this.errors = errors;\n+\n+    // Maintains proper stack trace for where our error was thrown (only available on V8 engines)\n+    if (Error.captureStackTrace) {\n+      Error.captureStackTrace(this, ValidationError);\n+    }\n+  }\n+}\n+\n+/**\n+ * Validates a SerializedContinueConfig object to ensure all properties are correctly formed.\n+ * @param config The configuration object to validate.\n+ * @returns An array of error messages. If the array is empty, the config is valid.\n+ */\n+export function validateConfig(config: SerializedContinueConfig) {\n+  const errors: ValidationErrorMessage[] = [];\n+\n+  // Validate models\n+  if (!Array.isArray(config.models) || config.models.length === 0) {",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "1802225332",
        "repo_full_name": "continuedev/continue",
        "pr_number": 2534,
        "pr_file": "core/config/validation.ts",
        "discussion_id": "1802225332",
        "commented_code": "@@ -0,0 +1,112 @@\n+import { SerializedContinueConfig } from \"../\";\n+\n+export type ValidationErrorMessage = string;\n+\n+export class ValidationError extends Error {\n+  public errors: ValidationErrorMessage[];\n+\n+  constructor(errors: ValidationErrorMessage[]) {\n+    super(\"Validation failed\");\n+    this.errors = errors;\n+\n+    // Maintains proper stack trace for where our error was thrown (only available on V8 engines)\n+    if (Error.captureStackTrace) {\n+      Error.captureStackTrace(this, ValidationError);\n+    }\n+  }\n+}\n+\n+/**\n+ * Validates a SerializedContinueConfig object to ensure all properties are correctly formed.\n+ * @param config The configuration object to validate.\n+ * @returns An array of error messages. If the array is empty, the config is valid.\n+ */\n+export function validateConfig(config: SerializedContinueConfig) {\n+  const errors: ValidationErrorMessage[] = [];\n+\n+  // Validate models\n+  if (!Array.isArray(config.models) || config.models.length === 0) {",
        "comment_created_at": "2024-10-16T01:55:38+00:00",
        "comment_author": "sestinj",
        "comment_body": "Don't worry about changing it in this PR, but just making the note here that we can switch to using zod later (definition is in packages/config-types/src/index.ts)",
        "pr_file_module": null
      },
      {
        "comment_id": "1802916232",
        "repo_full_name": "continuedev/continue",
        "pr_number": 2534,
        "pr_file": "core/config/validation.ts",
        "discussion_id": "1802225332",
        "commented_code": "@@ -0,0 +1,112 @@\n+import { SerializedContinueConfig } from \"../\";\n+\n+export type ValidationErrorMessage = string;\n+\n+export class ValidationError extends Error {\n+  public errors: ValidationErrorMessage[];\n+\n+  constructor(errors: ValidationErrorMessage[]) {\n+    super(\"Validation failed\");\n+    this.errors = errors;\n+\n+    // Maintains proper stack trace for where our error was thrown (only available on V8 engines)\n+    if (Error.captureStackTrace) {\n+      Error.captureStackTrace(this, ValidationError);\n+    }\n+  }\n+}\n+\n+/**\n+ * Validates a SerializedContinueConfig object to ensure all properties are correctly formed.\n+ * @param config The configuration object to validate.\n+ * @returns An array of error messages. If the array is empty, the config is valid.\n+ */\n+export function validateConfig(config: SerializedContinueConfig) {\n+  const errors: ValidationErrorMessage[] = [];\n+\n+  // Validate models\n+  if (!Array.isArray(config.models) || config.models.length === 0) {",
        "comment_created_at": "2024-10-16T11:27:20+00:00",
        "comment_author": "tomasz-stefaniak",
        "comment_body": "I tested it - it's very easy to switch to zod, it took about 5 minutes of work, but it's a bit too eager and fails even valid configs. We'd need to look at the zod schema and see if it's correct.",
        "pr_file_module": null
      }
    ]
  }
]