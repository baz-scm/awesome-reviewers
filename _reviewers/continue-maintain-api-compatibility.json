[
  {
    "discussion_id": "2146095354",
    "pr_number": 4816,
    "pr_file": "core/llm/countTokens.ts",
    "created_at": "2025-06-13T21:08:56+00:00",
    "commented_code": "functions: any[] | undefined;\n   systemMessage: string | undefined;\n   rules: Rule[];\n-}): ChatMessage[] {\n+}): { compiledChatMessages: ChatMessage[]; lastMessageTruncated: boolean } {",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146095354",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4816,
        "pr_file": "core/llm/countTokens.ts",
        "discussion_id": "2146095354",
        "commented_code": "@@ -527,7 +531,7 @@ function compileChatMessages({\n   functions: any[] | undefined;\n   systemMessage: string | undefined;\n   rules: Rule[];\n-}): ChatMessage[] {\n+}): { compiledChatMessages: ChatMessage[]; lastMessageTruncated: boolean } {",
        "comment_created_at": "2025-06-13T21:08:56+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Breaking change: The compileChatMessages function's return type has been changed from ChatMessage[] to an object, but it's used in multiple places across the codebase (core/llm/index.ts, core/core.ts, test files) that expect the original ChatMessage[] return type. This will cause type errors and runtime failures in code that directly uses the returned array without destructuring. For example, in core/llm/index.ts line 748, the function result is directly returned without handling the new object structure.\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146096098",
    "pr_number": 4524,
    "pr_file": "core/index.d.ts",
    "created_at": "2025-06-13T21:09:47+00:00",
    "commented_code": "options?: LLMFullCompletionOptions,\n   ): Promise<ChatMessage>;\n \n-  embed(chunks: string[]): Promise<number[][]>;\n+  embed(chunks: string[], embedding_task: EmbeddingTasks): Promise<number[][]>;",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146096098",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4524,
        "pr_file": "core/index.d.ts",
        "discussion_id": "2146096098",
        "commented_code": "@@ -139,7 +139,7 @@ export interface ILLM extends LLMOptions {\n     options?: LLMFullCompletionOptions,\n   ): Promise<ChatMessage>;\n \n-  embed(chunks: string[]): Promise<number[][]>;\n+  embed(chunks: string[], embedding_task: EmbeddingTasks): Promise<number[][]>;",
        "comment_created_at": "2025-06-13T21:09:47+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Breaking change in method signature that conflicts with multiple existing implementations. The interface in core/config/types.ts (line 141) and multiple implementation classes (e.g., in Bedrock.ts, TransformersJsEmbeddingsProvider.ts) still use the old signature without the embedding_task parameter. This will cause TypeScript compilation errors and potential runtime crashes in existing code.\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146096179",
    "pr_number": 4524,
    "pr_file": "core/indexing/docs/DocsService.ts",
    "created_at": "2025-06-13T21:09:51+00:00",
    "commented_code": "// This particular failure will not mark as a failed config in global context\n     // Since SiteIndexingConfig is likely to be valid\n     try {\n-      await provider.embed([\"continue-test-run\"]);\n+      await provider.embed([\"continue-test-run\"], \"chunk\");",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146096179",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4524,
        "pr_file": "core/indexing/docs/DocsService.ts",
        "discussion_id": "2146096179",
        "commented_code": "@@ -460,7 +460,7 @@ export default class DocsService {\n     // This particular failure will not mark as a failed config in global context\n     // Since SiteIndexingConfig is likely to be valid\n     try {\n-      await provider.embed([\"continue-test-run\"]);\n+      await provider.embed([\"continue-test-run\"], \"chunk\");",
        "comment_created_at": "2025-06-13T21:09:51+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Breaking API change: The embed() method has been modified to require a second parameter ('chunk'/'query') that wasn't previously required. This change impacts backwards compatibility and requires updates to all existing code using the embed() method. The test file DocsService.skip.ts still shows the old usage pattern without the second parameter, indicating this is an incompatible change that hasn't been properly propagated across the codebase.\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2106426721",
    "pr_number": 5837,
    "pr_file": "core/tools/definitions/createRuleBlock.ts",
    "created_at": "2025-05-26T02:47:30+00:00",
    "commented_code": "\"Creates a persistent rule for all future conversations. For establishing code standards or preferences that should be applied consistently. To modify existing rules, use the edit tool instead.\",\n     parameters: {\n       type: \"object\",\n-      required: [\"name\", \"rule\"],\n+      required: [\"name\", \"rule\", \"alwaysApply\", \"description\"],",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2106426721",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5837,
        "pr_file": "core/tools/definitions/createRuleBlock.ts",
        "discussion_id": "2106426721",
        "commented_code": "@@ -16,7 +16,7 @@ export const createRuleBlock: Tool = {\n       \"Creates a persistent rule for all future conversations. For establishing code standards or preferences that should be applied consistently. To modify existing rules, use the edit tool instead.\",\n     parameters: {\n       type: \"object\",\n-      required: [\"name\", \"rule\"],\n+      required: [\"name\", \"rule\", \"alwaysApply\", \"description\"],",
        "comment_created_at": "2025-05-26T02:47:30+00:00",
        "comment_author": "continue-code-review[bot]",
        "comment_body": "Making `alwaysApply` and `description` required parameters may break existing usage of this tool. Consider keeping them optional with sensible defaults to maintain backward compatibility.",
        "pr_file_module": null
      }
    ]
  }
]