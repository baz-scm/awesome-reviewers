[
  {
    "discussion_id": "2175687693",
    "pr_number": 6333,
    "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/PendingToolCallToolbar.tsx",
    "created_at": "2025-06-30T18:49:40+00:00",
    "commented_code": "export function PendingToolCallToolbar() {\n   const dispatch = useAppDispatch();\n   const jetbrains = isJetBrains();\n+  const currentToolCall = useAppSelector(selectCurrentToolCall);",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2175687693",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6333,
        "pr_file": "gui/src/components/mainInput/Lump/LumpToolbar/PendingToolCallToolbar.tsx",
        "discussion_id": "2175687693",
        "commented_code": "@@ -27,6 +28,7 @@ const StopButton = styled.div`\n export function PendingToolCallToolbar() {\n   const dispatch = useAppDispatch();\n   const jetbrains = isJetBrains();\n+  const currentToolCall = useAppSelector(selectCurrentToolCall);",
        "comment_created_at": "2025-06-30T18:49:40+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[]} -->\ncurrentToolCall is retrieved from the Redux store but is not memoized or shallow-compared, which could cause unnecessary re-renders if selectCurrentToolCall returns a new object reference on each call. Consider using a selector that returns a stable reference or memoizes the result.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211765053",
    "pr_number": 6662,
    "pr_file": "gui/src/pages/gui/Chat.tsx",
    "created_at": "2025-07-16T22:49:13+00:00",
    "commented_code": "toolCallStates,\n       } = item;\n \n+      // Calculate once for the entire function\n+      const latestSummaryIndex = findLatestSummaryIndex(history);",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2211765053",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6662,
        "pr_file": "gui/src/pages/gui/Chat.tsx",
        "discussion_id": "2211765053",
        "commented_code": "@@ -270,19 +280,25 @@ export function Chat() {\n         toolCallStates,\n       } = item;\n \n+      // Calculate once for the entire function\n+      const latestSummaryIndex = findLatestSummaryIndex(history);",
        "comment_created_at": "2025-07-16T22:49:13+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":6,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"function StepContainer\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"conversationSummary\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -n \\\"interface .*StepContainerProps\\\" -R gui/src/components/StepContainer\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1,120p' gui/src/components/StepContainer/StepContainer.tsx\"},\"toolName\":\"executeCommand\"}]}]} -->\nfindLatestSummaryIndex() is invoked for every history entry inside renderChatHistoryItem; since the helper itself performs an O(n) scan over the whole history array, this turns the render loop into O(n^2) time complexity. Compute the value once per Chat render (e.g., with useMemo) and reuse it to avoid unnecessary repeated scans.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2087384525",
    "pr_number": 5637,
    "pr_file": "gui/src/pages/gui/ToolCallDiv/ToolCallStatusMessage.tsx",
    "created_at": "2025-05-13T18:10:11+00:00",
    "commented_code": "message = futureMessage;\n   }\n   return (\n-    <div className=\"block\">\n+    <div className=\"block\" style={{ fontSize: getFontSize() }}>",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2087384525",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5637,
        "pr_file": "gui/src/pages/gui/ToolCallDiv/ToolCallStatusMessage.tsx",
        "discussion_id": "2087384525",
        "commented_code": "@@ -65,7 +66,7 @@ export function ToolCallStatusMessage({\n     message = futureMessage;\n   }\n   return (\n-    <div className=\"block\">\n+    <div className=\"block\" style={{ fontSize: getFontSize() }}>",
        "comment_created_at": "2025-05-13T18:10:11+00:00",
        "comment_author": "RomneyDa",
        "comment_body": "Ideally use the `useFontSize` hook so that it doesn't retreive font size on any rerender",
        "pr_file_module": null
      }
    ]
  }
]