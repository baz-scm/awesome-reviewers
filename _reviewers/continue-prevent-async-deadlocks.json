[
  {
    "discussion_id": "2209282637",
    "pr_number": 6649,
    "pr_file": "gui/src/redux/thunks/streamResponseAfterToolCall.ts",
    "created_at": "2025-07-16T05:40:26+00:00",
    "commented_code": "import { ChatMessage } from \"core\";\n import { renderContextItems } from \"core/util/messageContent\";\n import {\n+  ChatHistoryItemWithMessageId,\n   resetNextCodeBlockToApplyIndex,\n   streamUpdate,\n } from \"../slices/sessionSlice\";\n-import { AppThunkDispatch, RootState, ThunkApiType } from \"../store\";\n+import { ThunkApiType } from \"../store\";\n import { findToolCallById } from \"../util\";\n import { streamNormalInput } from \"./streamNormalInput\";\n import { streamThunkWrapper } from \"./streamThunkWrapper\";\n \n-/**\n- * Finds the assistant message that contains the specified tool call.\n- */\n-function findAssistantMessageWithToolCall(\n-  history: RootState[\"session\"][\"history\"],\n-  toolCallId: string,\n-) {\n-  return history.find(\n-    (item) =>\n-      item.message.role === \"assistant\" &&\n-      item.toolCallStates?.some((tc) => tc.toolCallId === toolCallId),\n-  );\n-}\n-\n-/**\n- * Checks if all parallel tool calls in an assistant message are complete.\n- */\n-function areAllToolCallsComplete(\n-  toolCallStates: NonNullable<\n-    ReturnType<typeof findAssistantMessageWithToolCall>\n-  >[\"toolCallStates\"],\n-): boolean {\n-  if (!toolCallStates) return false;\n-\n-  const completedToolCalls = toolCallStates.filter(\n-    (tc) => tc.status === \"done\",\n-  );\n-\n-  return completedToolCalls.length === toolCallStates.length;\n-}\n-\n /**\n  * Determines if we should continue streaming based on tool call completion status.\n  */\n-function shouldContinueStreaming(\n-  assistantMessage: ReturnType<typeof findAssistantMessageWithToolCall>,\n+function areAllToolsDoneStreaming(\n+  assistantMessage: ChatHistoryItemWithMessageId | undefined,\n ): boolean {\n+  // This might occur because of race conditions, if so, the tools are completed\n   if (!assistantMessage?.toolCallStates) {\n-    return false; // No assistant message found - don't stream",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2209282637",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6649,
        "pr_file": "gui/src/redux/thunks/streamResponseAfterToolCall.ts",
        "discussion_id": "2209282637",
        "commented_code": "@@ -2,80 +2,32 @@ import { createAsyncThunk, unwrapResult } from \"@reduxjs/toolkit\";\n import { ChatMessage } from \"core\";\n import { renderContextItems } from \"core/util/messageContent\";\n import {\n+  ChatHistoryItemWithMessageId,\n   resetNextCodeBlockToApplyIndex,\n   streamUpdate,\n } from \"../slices/sessionSlice\";\n-import { AppThunkDispatch, RootState, ThunkApiType } from \"../store\";\n+import { ThunkApiType } from \"../store\";\n import { findToolCallById } from \"../util\";\n import { streamNormalInput } from \"./streamNormalInput\";\n import { streamThunkWrapper } from \"./streamThunkWrapper\";\n \n-/**\n- * Finds the assistant message that contains the specified tool call.\n- */\n-function findAssistantMessageWithToolCall(\n-  history: RootState[\"session\"][\"history\"],\n-  toolCallId: string,\n-) {\n-  return history.find(\n-    (item) =>\n-      item.message.role === \"assistant\" &&\n-      item.toolCallStates?.some((tc) => tc.toolCallId === toolCallId),\n-  );\n-}\n-\n-/**\n- * Checks if all parallel tool calls in an assistant message are complete.\n- */\n-function areAllToolCallsComplete(\n-  toolCallStates: NonNullable<\n-    ReturnType<typeof findAssistantMessageWithToolCall>\n-  >[\"toolCallStates\"],\n-): boolean {\n-  if (!toolCallStates) return false;\n-\n-  const completedToolCalls = toolCallStates.filter(\n-    (tc) => tc.status === \"done\",\n-  );\n-\n-  return completedToolCalls.length === toolCallStates.length;\n-}\n-\n /**\n  * Determines if we should continue streaming based on tool call completion status.\n  */\n-function shouldContinueStreaming(\n-  assistantMessage: ReturnType<typeof findAssistantMessageWithToolCall>,\n+function areAllToolsDoneStreaming(\n+  assistantMessage: ChatHistoryItemWithMessageId | undefined,\n ): boolean {\n+  // This might occur because of race conditions, if so, the tools are completed\n   if (!assistantMessage?.toolCallStates) {\n-    return false; // No assistant message found - don't stream",
        "comment_created_at": "2025-07-16T05:40:26+00:00",
        "comment_author": "Patrick-Erichsen",
        "comment_body": "The core fix was removing this clause. My hypothesis is that we had a race condition where the `toolCallStates` was getting cleared before we reached this point, which should indicate that the tool call has completed and we should continue streaming, but we were instead returning false.\r\n\r\nThe only reason this `shouldContinueStreaming` is because with the new parallel tool calling support, we want to pause streaming until _all_ tools are complete. Previously this check didn't exist at all, we just always resumed streaming at the end of the thunk.",
        "pr_file_module": null
      }
    ]
  }
]