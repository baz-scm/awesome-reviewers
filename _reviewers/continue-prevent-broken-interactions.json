[
  {
    "discussion_id": "2184265283",
    "pr_number": 6445,
    "pr_file": "gui/src/components/mainInput/Lump/sections/tool-policies/ToolPolicyItem.tsx",
    "created_at": "2025-07-04T03:53:51+00:00",
    "commented_code": "</span>\n           </div>\n         </div>\n+\n         <div\n-          className={`flex w-8 flex-row items-center justify-end gap-2 px-2 py-0.5 sm:w-16 ${props.excluded ? \"cursor-not-allowed\" : \"hover:bg-list-active hover:text-list-active-foreground cursor-pointer\"}`}\n+          className={`flex w-8 flex-row items-center justify-end gap-2 px-2 py-0.5 sm:w-16 ${disabled ? \"cursor-not-allowed\" : \"hover:bg-list-active hover:text-list-active-foreground cursor-pointer\"}`}\n           data-testid={`tool-policy-item-${props.tool.function.name}`}\n           onClick={(e) => {\n             dispatch(toggleToolSetting(props.tool.function.name));\n             e.stopPropagation();\n             e.preventDefault();\n           }}\n         >\n-          {props.excluded || policy === \"disabled\" ? (\n+          {disabled || policy === \"disabled\" ? (",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2184265283",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6445,
        "pr_file": "gui/src/components/mainInput/Lump/sections/tool-policies/ToolPolicyItem.tsx",
        "discussion_id": "2184265283",
        "commented_code": "@@ -106,16 +114,17 @@ function ToolPolicyItem(props: ToolDropdownItemProps) {\n             </span>\n           </div>\n         </div>\n+\n         <div\n-          className={`flex w-8 flex-row items-center justify-end gap-2 px-2 py-0.5 sm:w-16 ${props.excluded ? \"cursor-not-allowed\" : \"hover:bg-list-active hover:text-list-active-foreground cursor-pointer\"}`}\n+          className={`flex w-8 flex-row items-center justify-end gap-2 px-2 py-0.5 sm:w-16 ${disabled ? \"cursor-not-allowed\" : \"hover:bg-list-active hover:text-list-active-foreground cursor-pointer\"}`}\n           data-testid={`tool-policy-item-${props.tool.function.name}`}\n           onClick={(e) => {\n             dispatch(toggleToolSetting(props.tool.function.name));\n             e.stopPropagation();\n             e.preventDefault();\n           }}\n         >\n-          {props.excluded || policy === \"disabled\" ? (\n+          {disabled || policy === \"disabled\" ? (",
        "comment_created_at": "2025-07-04T03:53:51+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[]} -->\nThe check disables the UI for both disabled and policy === 'disabled', but the onClick handler above still dispatches toggleToolSetting regardless of disabled state. This could allow toggling a disabled tool via keyboard or programmatic click, which is a UX bug.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2179322886",
    "pr_number": 6395,
    "pr_file": "gui/src/components/ModeSelect/ModeSelect.tsx",
    "created_at": "2025-07-02T07:24:27+00:00",
    "commented_code": "{mode === \"chat\" && <CheckIcon className=\"ml-auto h-3 w-3\" />}\n           </ListboxOption>\n \n-          <ListboxOption\n-            value=\"agent\"\n-            disabled={!agentModeSupported}\n-            className={\"gap-1\"}\n-          >\n+          <ListboxOption value=\"agent\" className={\"gap-1\"}>",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2179322886",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6395,
        "pr_file": "gui/src/components/ModeSelect/ModeSelect.tsx",
        "discussion_id": "2179322886",
        "commented_code": "@@ -92,19 +90,45 @@\n             {mode === \"chat\" && <CheckIcon className=\"ml-auto h-3 w-3\" />}\n           </ListboxOption>\n \n-          <ListboxOption\n-            value=\"agent\"\n-            disabled={!agentModeSupported}\n-            className={\"gap-1\"}\n-          >\n+          <ListboxOption value=\"agent\" className={\"gap-1\"}>",
        "comment_created_at": "2025-07-02T07:24:27+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":5,\"steps\":[{\"text\":\"\",\"toolCalls\":[{\"args\":{\"pattern\":\"**/Tooltip.*\"},\"toolName\":\"listFiles\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1,120p' gui/src/components/gui/Tooltip.tsx\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '1,160p' gui/src/components/ModeSelect/ModeSelect.tsx\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"grep -R \\\"function.*modelIsGreatWithNativeTools\\\" -n\"},\"toolName\":\"executeCommand\"}]},{\"text\":\"\",\"toolCalls\":[{\"args\":{\"command\":\"sed -n '110,150p' core/llm/autodetect.ts\"},\"toolName\":\"executeCommand\"}]}]} -->\nRemoving the disabled attribute now allows the user to switch to Agent mode even when the selected model is known to perform poorly with tools, which can lead to a broken experience. You likely still want to prevent selection when !isGoodInAgentMode.\n\n```suggestion\n          <ListboxOption value=\"agent\" disabled={!isGoodInAgentMode} className={\"gap-1\"}>\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2181091181",
    "pr_number": 6421,
    "pr_file": "gui/src/components/dialogs/index.tsx",
    "created_at": "2025-07-02T22:32:39+00:00",
    "commented_code": "`;\n \n const TextDialog = (props: TextDialogProps) => {\n-  useEffect(() => {\n-    const handleKeyDown = (event: KeyboardEvent) => {\n-      if (event.key === \"Escape\") {\n-        props.onClose();\n-      }\n-    };\n-\n-    document.addEventListener(\"keydown\", handleKeyDown);\n-    return () => {\n-      document.removeEventListener(\"keydown\", handleKeyDown);\n-    };\n-  }, [props]);\n+  const handleKeyDown = (event: React.KeyboardEvent) => {\n+    if (event.key === \"Escape\") {\n+      props.onClose();\n+    }\n+  };\n \n   if (!isValidElement(props.message) && typeof props.message !== \"string\") {\n     return null;\n   }\n \n   return (\n-    <ScreenCover onClick={props.onClose} hidden={!props.showDialog}>\n+    <ScreenCover\n+      onClick={props.onClose}\n+      hidden={!props.showDialog}\n+      onKeyDown={handleKeyDown}",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2181091181",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6421,
        "pr_file": "gui/src/components/dialogs/index.tsx",
        "discussion_id": "2181091181",
        "commented_code": "@@ -41,25 +41,23 @@ const DialogContainer = styled.div`\n `;\n \n const TextDialog = (props: TextDialogProps) => {\n-  useEffect(() => {\n-    const handleKeyDown = (event: KeyboardEvent) => {\n-      if (event.key === \"Escape\") {\n-        props.onClose();\n-      }\n-    };\n-\n-    document.addEventListener(\"keydown\", handleKeyDown);\n-    return () => {\n-      document.removeEventListener(\"keydown\", handleKeyDown);\n-    };\n-  }, [props]);\n+  const handleKeyDown = (event: React.KeyboardEvent) => {\n+    if (event.key === \"Escape\") {\n+      props.onClose();\n+    }\n+  };\n \n   if (!isValidElement(props.message) && typeof props.message !== \"string\") {\n     return null;\n   }\n \n   return (\n-    <ScreenCover onClick={props.onClose} hidden={!props.showDialog}>\n+    <ScreenCover\n+      onClick={props.onClose}\n+      hidden={!props.showDialog}\n+      onKeyDown={handleKeyDown}",
        "comment_created_at": "2025-07-02T22:32:39+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nonKeyDown is set on ScreenCover, but unless the element is focused, keyboard events like Escape will not be captured. Consider programmatically focusing ScreenCover when the dialog opens, or revert to a document-level event listener.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202907883",
    "pr_number": 6595,
    "pr_file": "gui/src/components/AssistantAndOrgListbox/index.tsx",
    "created_at": "2025-07-12T20:33:47+00:00",
    "commented_code": "</ListboxOption>\n \n               <ListboxOption\n-                value=\"new-assistant\"\n+                value=\"reload-config\"",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2202907883",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6595,
        "pr_file": "gui/src/components/AssistantAndOrgListbox/index.tsx",
        "discussion_id": "2202907883",
        "commented_code": "@@ -161,13 +161,12 @@ export function AssistantAndOrgListbox() {\n               </ListboxOption>\n \n               <ListboxOption\n-                value=\"new-assistant\"\n+                value=\"reload-config\"",
        "comment_created_at": "2025-07-12T20:33:47+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":8,\"steps\":[]} -->\nThe value prop for ListboxOption was changed from 'new-assistant' to 'reload-config', but the onClick handler was removed. This means clicking this option will not trigger any action unless handled elsewhere, which may break expected behavior.\n\n```suggestion\n                value=\"reload-config\"\n                fontSizeModifier={-2}\n                className=\"border-border border-b px-2 py-1.5\"\n                onClick={async (e) => {\n                  e.stopPropagation();\n                  await refreshProfiles();\n                }}\n```",
        "pr_file_module": null
      }
    ]
  }
]