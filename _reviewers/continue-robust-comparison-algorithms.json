[
  {
    "discussion_id": "1999117258",
    "pr_number": 4687,
    "pr_file": "core/diff/util.ts",
    "created_at": "2025-03-17T16:08:51+00:00",
    "commented_code": "};\n \n function linesMatchPerfectly(lineA: string, lineB: string): boolean {\n-  return lineA === lineB && lineA !== \"\";\n+\n+//checks if two lines match exactly ignoring trailing whitespace differences\n+//this prevents false mismatches in diff handling when trailing spaces are stripped\n+\n+  return lineA.trimEnd() === lineB.trimEnd() && lineA !== \"\";",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "1999117258",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "1999117258",
        "commented_code": "@@ -16,7 +16,11 @@ export type MatchLineResult = {\n };\n \n function linesMatchPerfectly(lineA: string, lineB: string): boolean {\n-  return lineA === lineB && lineA !== \"\";\n+\n+//checks if two lines match exactly ignoring trailing whitespace differences\n+//this prevents false mismatches in diff handling when trailing spaces are stripped\n+\n+  return lineA.trimEnd() === lineB.trimEnd() && lineA !== \"\";",
        "comment_created_at": "2025-03-17T16:08:51+00:00",
        "comment_author": "owtaylor",
        "comment_body": "This fixes up one case where we are comparing oldLines to newLines, but checking over the code, this isn't the only place where we might have issues:\r\n\r\n - in `matchLine()`, after calling `linesMatchPerfectly()`, we make more references to `oldLines[i]` that potentially might need changes.\r\n - In streamDiff(), we have:\r\n```\r\n         if (oldLinesCopy[0] !== newLine) {\r\n          yield { type: \"new\", line: newLine };\r\n        } else {\r\n          isLineRemoval = true;\r\n        }\r\n```\r\n   which looks suspicious, but I'm pretty sure can never actually be hit: if `oldLinesCopy[0] === newLine` then `isPerfectMatch` should have been true and the case will be `\"same\"` not `\"old\"`. Needs double checking.\r\n\r\nBut the takeaway for me here is that the test cases need updating to test different cases where lines differ only in trailing whitespace. From the `continue/core` directory, you can run:\r\n\r\n```\r\n$ npm test  diff/streamDiff.test.ts\r\n```\r\n\r\nto run streamDiff test cases. Add a test case to check the `linesMatchPerfectly` case, add a test case case that exercises:       `// This is a way to fix indentation, but only for sufficiently long lines to avoid matching whitespace or short lines` when the indentation changes *and* there is a change in whitespace.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2001883020",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "1999117258",
        "commented_code": "@@ -16,7 +16,11 @@ export type MatchLineResult = {\n };\n \n function linesMatchPerfectly(lineA: string, lineB: string): boolean {\n-  return lineA === lineB && lineA !== \"\";\n+\n+//checks if two lines match exactly ignoring trailing whitespace differences\n+//this prevents false mismatches in diff handling when trailing spaces are stripped\n+\n+  return lineA.trimEnd() === lineB.trimEnd() && lineA !== \"\";",
        "comment_created_at": "2025-03-18T19:53:09+00:00",
        "comment_author": "panyamkeerthana",
        "comment_body": "Thanks for the review, I have made the following changes:\r\n\r\n-Added a test case for oldLinesCopy[0] === newLine that confirmed it’s already handled as \"same\" or \"old\", so the else statement was unnecessary and removed.\r\n-Trimmed oldLines throughout and added a test to ensure trailing whitespaces are correctly treated as \"same\", preventing incorrect diffs.\r\n-Added a test to verify that indentation changes in long lines don’t cause unnecessary diffs.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2001910310",
    "pr_number": 4687,
    "pr_file": "core/diff/util.ts",
    "created_at": "2025-03-18T20:11:09+00:00",
    "commented_code": "const isEndBracket = END_BRACKETS.includes(newLine.trim());\n \n   for (let i = 0; i < oldLines.length; i++) {\n+    // trims trailing whitespaces from the old line before comparison\n+    //this ensures trailing spaces don't affect matching.\n+    const oldLineTrimmed = oldLines[i].trimEnd();\n     // Don't match end bracket lines if too far away\n     if (i > 4 && isEndBracket) {\n       return { matchIndex: -1, isPerfectMatch: false, newLine };\n     }\n \n-    if (linesMatchPerfectly(newLine, oldLines[i])) {\n+    if (linesMatchPerfectly(newLine, oldLineTrimmed)) {\n       return { matchIndex: i, isPerfectMatch: true, newLine };",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2001910310",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "2001910310",
        "commented_code": "@@ -62,24 +62,27 @@ export function matchLine(\n   const isEndBracket = END_BRACKETS.includes(newLine.trim());\n \n   for (let i = 0; i < oldLines.length; i++) {\n+    // trims trailing whitespaces from the old line before comparison\n+    //this ensures trailing spaces don't affect matching.\n+    const oldLineTrimmed = oldLines[i].trimEnd();\n     // Don't match end bracket lines if too far away\n     if (i > 4 && isEndBracket) {\n       return { matchIndex: -1, isPerfectMatch: false, newLine };\n     }\n \n-    if (linesMatchPerfectly(newLine, oldLines[i])) {\n+    if (linesMatchPerfectly(newLine, oldLineTrimmed)) {\n       return { matchIndex: i, isPerfectMatch: true, newLine };",
        "comment_created_at": "2025-03-18T20:11:09+00:00",
        "comment_author": "owtaylor",
        "comment_body": "I think this probably should be oldLines[i] not newLine? The goal here should be that when we return `same` - we actually have the old line, not a version that differs in trailing whitespace. First try to make a test case that fails, then change this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2002373822",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "2001910310",
        "commented_code": "@@ -62,24 +62,27 @@ export function matchLine(\n   const isEndBracket = END_BRACKETS.includes(newLine.trim());\n \n   for (let i = 0; i < oldLines.length; i++) {\n+    // trims trailing whitespaces from the old line before comparison\n+    //this ensures trailing spaces don't affect matching.\n+    const oldLineTrimmed = oldLines[i].trimEnd();\n     // Don't match end bracket lines if too far away\n     if (i > 4 && isEndBracket) {\n       return { matchIndex: -1, isPerfectMatch: false, newLine };\n     }\n \n-    if (linesMatchPerfectly(newLine, oldLines[i])) {\n+    if (linesMatchPerfectly(newLine, oldLineTrimmed)) {\n       return { matchIndex: i, isPerfectMatch: true, newLine };",
        "comment_created_at": "2025-03-19T04:05:47+00:00",
        "comment_author": "panyamkeerthana",
        "comment_body": "The test cases I ran for this scenario passed. In streamDiff():\r\n\r\n```\r\ncase \"same\":\r\n    yield { type, line: oldLinesCopy.shift()! };\r\n    break;\r\n```\r\nSo, regardless of what matchLine() returns for newLine, the line that is actually output is the one removed from oldLinesCopy (which is the original old line with the trailing whitespaces). But I can change it to oldLine[i] to maintain logic and uniformity",
        "pr_file_module": null
      },
      {
        "comment_id": "2006288136",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "2001910310",
        "commented_code": "@@ -62,24 +62,27 @@ export function matchLine(\n   const isEndBracket = END_BRACKETS.includes(newLine.trim());\n \n   for (let i = 0; i < oldLines.length; i++) {\n+    // trims trailing whitespaces from the old line before comparison\n+    //this ensures trailing spaces don't affect matching.\n+    const oldLineTrimmed = oldLines[i].trimEnd();\n     // Don't match end bracket lines if too far away\n     if (i > 4 && isEndBracket) {\n       return { matchIndex: -1, isPerfectMatch: false, newLine };\n     }\n \n-    if (linesMatchPerfectly(newLine, oldLines[i])) {\n+    if (linesMatchPerfectly(newLine, oldLineTrimmed)) {\n       return { matchIndex: i, isPerfectMatch: true, newLine };",
        "comment_created_at": "2025-03-20T19:09:10+00:00",
        "comment_author": "owtaylor",
        "comment_body": "Turned out that this very much needed to be newLine - the calling code relies on this only being different from the passed in newline when the leading indentation changed. Sorry for the confusion!",
        "pr_file_module": null
      },
      {
        "comment_id": "2006319211",
        "repo_full_name": "continuedev/continue",
        "pr_number": 4687,
        "pr_file": "core/diff/util.ts",
        "discussion_id": "2001910310",
        "commented_code": "@@ -62,24 +62,27 @@ export function matchLine(\n   const isEndBracket = END_BRACKETS.includes(newLine.trim());\n \n   for (let i = 0; i < oldLines.length; i++) {\n+    // trims trailing whitespaces from the old line before comparison\n+    //this ensures trailing spaces don't affect matching.\n+    const oldLineTrimmed = oldLines[i].trimEnd();\n     // Don't match end bracket lines if too far away\n     if (i > 4 && isEndBracket) {\n       return { matchIndex: -1, isPerfectMatch: false, newLine };\n     }\n \n-    if (linesMatchPerfectly(newLine, oldLines[i])) {\n+    if (linesMatchPerfectly(newLine, oldLineTrimmed)) {\n       return { matchIndex: i, isPerfectMatch: true, newLine };",
        "comment_created_at": "2025-03-20T19:29:46+00:00",
        "comment_author": "panyamkeerthana",
        "comment_body": "All this testing has only made the whitespace and indentation handling more robust! ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2182233686",
    "pr_number": 6429,
    "pr_file": "gui/src/components/mainInput/TipTapEditor/utils/resolveEditorContent.ts",
    "created_at": "2025-07-03T08:51:24+00:00",
    "commented_code": "if (\n         !acc.some(\n           (i) =>\n-            (i.id.providerTitle === item.id.providerTitle &&\n-              i.id.itemId === item.id.itemId) ||\n-            (i.uri &&\n-              item.uri &&\n-              i.uri.type === item.uri.type &&\n-              i.uri.value === item.uri.value),\n+            i.id.providerTitle === item.id.providerTitle &&",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2182233686",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6429,
        "pr_file": "gui/src/components/mainInput/TipTapEditor/utils/resolveEditorContent.ts",
        "discussion_id": "2182233686",
        "commented_code": "@@ -201,12 +201,12 @@ async function gatherContextItems({\n       if (\n         !acc.some(\n           (i) =>\n-            (i.id.providerTitle === item.id.providerTitle &&\n-              i.id.itemId === item.id.itemId) ||\n-            (i.uri &&\n-              item.uri &&\n-              i.uri.type === item.uri.type &&\n-              i.uri.value === item.uri.value),\n+            i.id.providerTitle === item.id.providerTitle &&",
        "comment_created_at": "2025-07-03T08:51:24+00:00",
        "comment_author": "RomneyDa",
        "comment_body": "Requested changes for this line\r\nIt changes deduplication to be for _exactly_ the same context item but breaks it for the original goal which is e.g. openFiles and currentFile adds the same file twice, or @diff is mentioned three times in nested prompts, or @openFiles in a prompt matches a @file mention in the editor, etc.",
        "pr_file_module": null
      },
      {
        "comment_id": "2182259439",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6429,
        "pr_file": "gui/src/components/mainInput/TipTapEditor/utils/resolveEditorContent.ts",
        "discussion_id": "2182233686",
        "commented_code": "@@ -201,12 +201,12 @@ async function gatherContextItems({\n       if (\n         !acc.some(\n           (i) =>\n-            (i.id.providerTitle === item.id.providerTitle &&\n-              i.id.itemId === item.id.itemId) ||\n-            (i.uri &&\n-              item.uri &&\n-              i.uri.type === item.uri.type &&\n-              i.uri.value === item.uri.value),\n+            i.id.providerTitle === item.id.providerTitle &&",
        "comment_created_at": "2025-07-03T09:04:29+00:00",
        "comment_author": "RomneyDa",
        "comment_body": "But I realized deduplication logic had another flaw which is that you can have multiple context items with the same file URI and different content\r\n\r\nMaybe the solution is as simple as\r\n```\r\n   i.content === item.content\r\n```",
        "pr_file_module": null
      }
    ]
  }
]