[
  {
    "discussion_id": "2161329366",
    "pr_number": 6254,
    "pr_file": "gui/src/hooks/ParallelListeners.tsx",
    "created_at": "2025-06-23T11:00:40+00:00",
    "commented_code": "setLocalStorage(\"fontSize\", configResult.config.ui.fontSize);\n         document.body.style.fontSize = `${configResult.config.ui.fontSize}px`;\n       }\n+\n+      if (\n+        configResult.config?.selectedModelByRole.chat?.completionOptions",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2161329366",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6254,
        "pr_file": "gui/src/hooks/ParallelListeners.tsx",
        "discussion_id": "2161329366",
        "commented_code": "@@ -86,6 +87,13 @@ function ParallelListeners() {\n         setLocalStorage(\"fontSize\", configResult.config.ui.fontSize);\n         document.body.style.fontSize = `${configResult.config.ui.fontSize}px`;\n       }\n+\n+      if (\n+        configResult.config?.selectedModelByRole.chat?.completionOptions",
        "comment_created_at": "2025-06-23T11:00:40+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Unsafe property access chain: When config is optional (accessed with ?.), selectedModelByRole is accessed without optional chaining. This can cause runtime errors if config exists but selectedModelByRole is undefined. Based on codebase patterns, selectedModelByRole should be accessed with optional chaining when config is optional. Fix: Change to `configResult.config?.selectedModelByRole?.chat?.completionOptions`\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175687687",
    "pr_number": 6333,
    "pr_file": "gui/src/components/ModeSelect/ModeSelect.tsx",
    "created_at": "2025-06-30T18:49:40+00:00",
    "commented_code": "const cycleMode = useCallback(() => {\n     dispatch(setMode(mode === \"chat\" ? \"agent\" : \"chat\"));\n-    mainEditor?.commands.focus();\n+    if (!document.activeElement?.classList.contains(\"ProseMirror\")) {",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2175687687",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6333,
        "pr_file": "gui/src/components/ModeSelect/ModeSelect.tsx",
        "discussion_id": "2175687687",
        "commented_code": "@@ -34,7 +34,9 @@ export function ModeSelect() {\n \n   const cycleMode = useCallback(() => {\n     dispatch(setMode(mode === \"chat\" ? \"agent\" : \"chat\"));\n-    mainEditor?.commands.focus();\n+    if (!document.activeElement?.classList.contains(\"ProseMirror\")) {",
        "comment_created_at": "2025-06-30T18:49:40+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nThis check assumes that the activeElement will always be an Element and have classList, but activeElement can be null or not an Element (e.g., a text node), which could cause a runtime error. Consider checking if activeElement is an Element before accessing classList.\n\n```suggestion\n    if (!(document.activeElement instanceof Element) || !document.activeElement.classList.contains(\"ProseMirror\")) {\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2146094538",
    "pr_number": 5158,
    "pr_file": "gui/src/components/find/FindWidget.tsx",
    "created_at": "2025-06-13T21:08:05+00:00",
    "commented_code": "let nodeTextValue = caseSensitive\n           ? textNode.nodeValue\n-          : textNode.nodeValue.toLowerCase();\n+          : textNode.nodeValue?.toLowerCase();\n         let startIndex = 0;\n-        while ((startIndex = nodeTextValue.indexOf(query, startIndex)) !== -1) {\n+        while (\n+          (startIndex = nodeTextValue?.indexOf(query, startIndex) ?? -1) !== -1",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2146094538",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5158,
        "pr_file": "gui/src/components/find/FindWidget.tsx",
        "discussion_id": "2146094538",
        "commented_code": "@@ -220,9 +220,11 @@ export const useFindWidget = (searchRef: RefObject<HTMLDivElement>) => {\n \n         let nodeTextValue = caseSensitive\n           ? textNode.nodeValue\n-          : textNode.nodeValue.toLowerCase();\n+          : textNode.nodeValue?.toLowerCase();\n         let startIndex = 0;\n-        while ((startIndex = nodeTextValue.indexOf(query, startIndex)) !== -1) {\n+        while (\n+          (startIndex = nodeTextValue?.indexOf(query, startIndex) ?? -1) !== -1",
        "comment_created_at": "2025-06-13T21:08:05+00:00",
        "comment_author": "recurseml[bot]",
        "comment_body": "Similar null reference safety issue in the search loop. The original code assumed nodeTextValue would never be null when calling indexOf, which could throw a TypeError. The fix adds both optional chaining (?.) and nullish coalescing (??) to safely handle null/undefined cases by defaulting to -1, which properly terminates the loop.\n\n\ud83d\udcda [Relevant Docs](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)\n\n---\n\n> *React with \ud83d\udc4d to tell me that this comment was useful, or \ud83d\udc4e if not (and I'll stop posting more comments like this in the future)*",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2124863817",
    "pr_number": 5946,
    "pr_file": "gui/src/components/mainInput/TipTapEditor/extensions/Prompt/PromptBlockPreview.tsx",
    "created_at": "2025-06-03T20:25:54+00:00",
    "commented_code": "inputId={inputId}\n         itemId={item.id.itemId}\n         onDelete={handleDelete}\n-        onTitleClick={handleTitleClick}\n+        onTitleClick={!item.content ? undefined : handleTitleClick}",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2124863817",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5946,
        "pr_file": "gui/src/components/mainInput/TipTapEditor/extensions/Prompt/PromptBlockPreview.tsx",
        "discussion_id": "2124863817",
        "commented_code": "@@ -40,7 +40,7 @@ export const PromptBlockPreview = ({\n         inputId={inputId}\n         itemId={item.id.itemId}\n         onDelete={handleDelete}\n-        onTitleClick={handleTitleClick}\n+        onTitleClick={!item.content ? undefined : handleTitleClick}",
        "comment_created_at": "2025-06-03T20:25:54+00:00",
        "comment_author": "Patrick-Erichsen",
        "comment_body": "`no-negated-condition`\r\n\r\n```suggestion\r\n        onTitleClick={item.content ? handleTitleClick : undefined}\r\n```",
        "pr_file_module": null
      }
    ]
  }
]