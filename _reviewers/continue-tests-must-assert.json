[
  {
    "discussion_id": "2208983878",
    "pr_number": 6646,
    "pr_file": "packages/continue-sdk/python/api/test/test_get_assistant404_response.py",
    "created_at": "2025-07-16T01:02:18+00:00",
    "commented_code": "+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_assistant404_response import GetAssistant404Response\n+\n+class TestGetAssistant404Response(unittest.TestCase):\n+    \"\"\"GetAssistant404Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetAssistant404Response:\n+        \"\"\"Test GetAssistant404Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetAssistant404Response`\n+        \"\"\"\n+        model = GetAssistant404Response()\n+        if include_optional:\n+            return GetAssistant404Response(\n+                message = 'Assistant not found'\n+            )\n+        else:\n+            return GetAssistant404Response(\n+        )\n+        \"\"\"\n+\n+    def testGetAssistant404Response(self):\n+        \"\"\"Test GetAssistant404Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2208983878",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6646,
        "pr_file": "packages/continue-sdk/python/api/test/test_get_assistant404_response.py",
        "discussion_id": "2208983878",
        "commented_code": "@@ -0,0 +1,51 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_assistant404_response import GetAssistant404Response\n+\n+class TestGetAssistant404Response(unittest.TestCase):\n+    \"\"\"GetAssistant404Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetAssistant404Response:\n+        \"\"\"Test GetAssistant404Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetAssistant404Response`\n+        \"\"\"\n+        model = GetAssistant404Response()\n+        if include_optional:\n+            return GetAssistant404Response(\n+                message = 'Assistant not found'\n+            )\n+        else:\n+            return GetAssistant404Response(\n+        )\n+        \"\"\"\n+\n+    def testGetAssistant404Response(self):\n+        \"\"\"Test GetAssistant404Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
        "comment_created_at": "2025-07-16T01:02:18+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":10,\"steps\":[]} -->\nTest case for required parameters is commented out, so the test does not actually verify the behavior of GetAssistant404Response with required parameters.\n\n```suggestion\n        inst_req_only = self.make_instance(include_optional=False)\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208983884",
    "pr_number": 6646,
    "pr_file": "packages/continue-sdk/python/api/test/test_get_policy200_response.py",
    "created_at": "2025-07-16T01:02:18+00:00",
    "commented_code": "+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_policy200_response import GetPolicy200Response\n+\n+class TestGetPolicy200Response(unittest.TestCase):\n+    \"\"\"GetPolicy200Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetPolicy200Response:\n+        \"\"\"Test GetPolicy200Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetPolicy200Response`\n+        \"\"\"\n+        model = GetPolicy200Response()\n+        if include_optional:\n+            return GetPolicy200Response(\n+                policy = None,\n+                org_slug = ''\n+            )\n+        else:\n+            return GetPolicy200Response(\n+        )\n+        \"\"\"\n+\n+    def testGetPolicy200Response(self):\n+        \"\"\"Test GetPolicy200Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2208983884",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6646,
        "pr_file": "packages/continue-sdk/python/api/test/test_get_policy200_response.py",
        "discussion_id": "2208983884",
        "commented_code": "@@ -0,0 +1,52 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_policy200_response import GetPolicy200Response\n+\n+class TestGetPolicy200Response(unittest.TestCase):\n+    \"\"\"GetPolicy200Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetPolicy200Response:\n+        \"\"\"Test GetPolicy200Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetPolicy200Response`\n+        \"\"\"\n+        model = GetPolicy200Response()\n+        if include_optional:\n+            return GetPolicy200Response(\n+                policy = None,\n+                org_slug = ''\n+            )\n+        else:\n+            return GetPolicy200Response(\n+        )\n+        \"\"\"\n+\n+    def testGetPolicy200Response(self):\n+        \"\"\"Test GetPolicy200Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
        "comment_created_at": "2025-07-16T01:02:18+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nTest cases are commented out, so no actual tests are being run. This means the test will always pass regardless of code correctness.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2208983895",
    "pr_number": 6646,
    "pr_file": "packages/continue-sdk/python/api/test/test_get_assistant200_response.py",
    "created_at": "2025-07-16T01:02:18+00:00",
    "commented_code": "+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_assistant200_response import GetAssistant200Response\n+\n+class TestGetAssistant200Response(unittest.TestCase):\n+    \"\"\"GetAssistant200Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetAssistant200Response:\n+        \"\"\"Test GetAssistant200Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetAssistant200Response`\n+        \"\"\"\n+        model = GetAssistant200Response()\n+        if include_optional:\n+            return GetAssistant200Response(\n+                config_result = openapi_client.models.list_assistants_200_response_inner_config_result.listAssistants_200_response_inner_configResult(\n+                    config = openapi_client.models.config.config(), \n+                    config_load_interrupted = True, \n+                    errors = [\n+                        ''\n+                        ], ),\n+                owner_slug = '',\n+                package_slug = '',\n+                icon_url = '',\n+                on_prem_proxy_url = '',\n+                use_on_prem_proxy = True,\n+                raw_yaml = ''\n+            )\n+        else:\n+            return GetAssistant200Response(\n+                config_result = openapi_client.models.list_assistants_200_response_inner_config_result.listAssistants_200_response_inner_configResult(\n+                    config = openapi_client.models.config.config(), \n+                    config_load_interrupted = True, \n+                    errors = [\n+                        ''\n+                        ], ),\n+                owner_slug = '',\n+                package_slug = '',\n+        )\n+        \"\"\"\n+\n+    def testGetAssistant200Response(self):\n+        \"\"\"Test GetAssistant200Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2208983895",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6646,
        "pr_file": "packages/continue-sdk/python/api/test/test_get_assistant200_response.py",
        "discussion_id": "2208983895",
        "commented_code": "@@ -0,0 +1,70 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    Continue Hub IDE API\n+\n+    API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. \n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by OpenAPI Generator (https://openapi-generator.tech)\n+\n+    Do not edit the class manually.\n+\"\"\"  # noqa: E501\n+\n+\n+import unittest\n+\n+from openapi_client.models.get_assistant200_response import GetAssistant200Response\n+\n+class TestGetAssistant200Response(unittest.TestCase):\n+    \"\"\"GetAssistant200Response unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def make_instance(self, include_optional) -> GetAssistant200Response:\n+        \"\"\"Test GetAssistant200Response\n+            include_optional is a boolean, when False only required\n+            params are included, when True both required and\n+            optional params are included \"\"\"\n+        # uncomment below to create an instance of `GetAssistant200Response`\n+        \"\"\"\n+        model = GetAssistant200Response()\n+        if include_optional:\n+            return GetAssistant200Response(\n+                config_result = openapi_client.models.list_assistants_200_response_inner_config_result.listAssistants_200_response_inner_configResult(\n+                    config = openapi_client.models.config.config(), \n+                    config_load_interrupted = True, \n+                    errors = [\n+                        ''\n+                        ], ),\n+                owner_slug = '',\n+                package_slug = '',\n+                icon_url = '',\n+                on_prem_proxy_url = '',\n+                use_on_prem_proxy = True,\n+                raw_yaml = ''\n+            )\n+        else:\n+            return GetAssistant200Response(\n+                config_result = openapi_client.models.list_assistants_200_response_inner_config_result.listAssistants_200_response_inner_configResult(\n+                    config = openapi_client.models.config.config(), \n+                    config_load_interrupted = True, \n+                    errors = [\n+                        ''\n+                        ], ),\n+                owner_slug = '',\n+                package_slug = '',\n+        )\n+        \"\"\"\n+\n+    def testGetAssistant200Response(self):\n+        \"\"\"Test GetAssistant200Response\"\"\"\n+        # inst_req_only = self.make_instance(include_optional=False)",
        "comment_created_at": "2025-07-16T01:02:18+00:00",
        "comment_author": "cubic-dev-ai[bot]",
        "comment_body": "<!-- metadata:{\"confidence\":9,\"steps\":[]} -->\nTest methods should include at least one assertion or meaningful test logic. This test currently only contains commented-out code, so it does not actually test anything.",
        "pr_file_module": null
      }
    ]
  }
]