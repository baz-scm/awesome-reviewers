[
  {
    "discussion_id": "2190770536",
    "pr_number": 6455,
    "pr_file": "gui/src/components/StyledMarkdownPreview/MermaidBlock.tsx",
    "created_at": "2025-07-07T18:20:30+00:00",
    "commented_code": "+import {\n+  ArrowPathRoundedSquareIcon,\n+  MagnifyingGlassMinusIcon,\n+  MagnifyingGlassPlusIcon,\n+} from \"@heroicons/react/24/outline\";\n+import Panzoom from \"@panzoom/panzoom\";\n+import mermaid from \"mermaid\";\n+import { useEffect, useId, useRef, useState } from \"react\";\n+import { useDebouncedEffect } from \"../find/useDebounce\";\n+import { ToolTip } from \"../gui/Tooltip\";\n+\n+const MINIMUM_ZOOM_STEP = 0.05;\n+\n+const MERMAID_THEME_COLORS = {\n+  background: \"#1e1e1e\",\n+  primaryColor: \"#4d8bf0\",\n+  primaryTextColor: \"#ffffff\",\n+  primaryBorderColor: \"#4d8bf0\",\n+  secondaryColor: \"#3a6db3\",\n+  secondaryTextColor: \"#ffffff\",\n+  secondaryBorderColor: \"#3a6db3\",\n+  tertiaryColor: \"#59bc89\",\n+  tertiaryTextColor: \"#ffffff\",\n+  tertiaryBorderColor: \"#59bc89\",\n+  noteBkgColor: \"#2d2d2d\",\n+  noteTextColor: \"#e6e6e6\",\n+  noteBorderColor: \"#555555\",\n+  lineColor: \"#8c8c8c\",\n+  textColor: \"#e6e6e6\",\n+  mainBkg: \"#252525\",\n+  errorBkgColor: \"#f44336\",\n+  errorTextColor: \"#ffffff\",\n+  nodeBorder: \"#555555\",\n+  clusterBkg: \"#2a2a2a\",\n+  clusterBorder: \"#555555\",\n+  defaultLinkColor: \"#8c8c8c\",\n+  titleColor: \"#e6e6e6\",\n+  edgeLabelBackground: \"#252525\",\n+  activeTaskBkgColor: \"#4caf50\",\n+  activeTaskBorderColor: \"#388e3c\",\n+  doneTaskBkgColor: \"#388e3c\",\n+  doneTaskBorderColor: \"#2e7d32\",\n+  critBkgColor: \"#f44336\",\n+  critBorderColor: \"#d32f2f\",\n+  taskTextColor: \"#e6e6e6\",\n+  taskTextOutsideColor: \"#e6e6e6\",\n+  taskTextLightColor: \"#b3b3b3\",\n+  sectionBkgColor: \"#2a2a2a\",\n+  altSectionBkgColor: \"#303030\",\n+  sectionBkgColor2: \"#252525\",\n+  excludeBkgColor: \"#2d2d2d\",\n+  fillType0: \"#264f78\",\n+  fillType1: \"#3a6db3\",\n+  fillType2: \"#59bc89\",\n+  fillType3: \"#4d8bf0\",\n+  fillType4: \"#3a6db3\",\n+  fillType5: \"#264f78\",\n+  fillType6: \"#59bc89\",\n+  fillType7: \"#4d8bf0\",\n+};\n+\n+mermaid.initialize({\n+  startOnLoad: false,\n+  securityLevel: \"loose\",\n+  theme: \"dark\",\n+  themeVariables: {\n+    ...MERMAID_THEME_COLORS,\n+    fontSize: \"14px\",\n+    fontFamily: \"var(--vscode-font-family)\",\n+  },\n+});\n+\n+export default function MermaidDiagram({ code }: { code: string }) {\n+  const mermaidRenderContainerRef = useRef<HTMLDivElement>(null);\n+  const zoomInButtonRef = useRef<SVGSVGElement>(null);\n+  const zoomOutButtonRef = useRef<SVGSVGElement>(null);\n+  const resetZoomButtonRef = useRef<SVGSVGElement>(null);\n+\n+  const zoomInButtonId = useId();\n+  const zoomOutButtonId = useId();\n+  const resetZoomButtonId = useId();\n+\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState(\"\");\n+\n+  useEffect(() => {\n+    setIsLoading(true);\n+  }, [code]);\n+\n+  useDebouncedEffect(",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2190770536",
        "repo_full_name": "continuedev/continue",
        "pr_number": 6455,
        "pr_file": "gui/src/components/StyledMarkdownPreview/MermaidBlock.tsx",
        "discussion_id": "2190770536",
        "commented_code": "@@ -0,0 +1,178 @@\n+import {\n+  ArrowPathRoundedSquareIcon,\n+  MagnifyingGlassMinusIcon,\n+  MagnifyingGlassPlusIcon,\n+} from \"@heroicons/react/24/outline\";\n+import Panzoom from \"@panzoom/panzoom\";\n+import mermaid from \"mermaid\";\n+import { useEffect, useId, useRef, useState } from \"react\";\n+import { useDebouncedEffect } from \"../find/useDebounce\";\n+import { ToolTip } from \"../gui/Tooltip\";\n+\n+const MINIMUM_ZOOM_STEP = 0.05;\n+\n+const MERMAID_THEME_COLORS = {\n+  background: \"#1e1e1e\",\n+  primaryColor: \"#4d8bf0\",\n+  primaryTextColor: \"#ffffff\",\n+  primaryBorderColor: \"#4d8bf0\",\n+  secondaryColor: \"#3a6db3\",\n+  secondaryTextColor: \"#ffffff\",\n+  secondaryBorderColor: \"#3a6db3\",\n+  tertiaryColor: \"#59bc89\",\n+  tertiaryTextColor: \"#ffffff\",\n+  tertiaryBorderColor: \"#59bc89\",\n+  noteBkgColor: \"#2d2d2d\",\n+  noteTextColor: \"#e6e6e6\",\n+  noteBorderColor: \"#555555\",\n+  lineColor: \"#8c8c8c\",\n+  textColor: \"#e6e6e6\",\n+  mainBkg: \"#252525\",\n+  errorBkgColor: \"#f44336\",\n+  errorTextColor: \"#ffffff\",\n+  nodeBorder: \"#555555\",\n+  clusterBkg: \"#2a2a2a\",\n+  clusterBorder: \"#555555\",\n+  defaultLinkColor: \"#8c8c8c\",\n+  titleColor: \"#e6e6e6\",\n+  edgeLabelBackground: \"#252525\",\n+  activeTaskBkgColor: \"#4caf50\",\n+  activeTaskBorderColor: \"#388e3c\",\n+  doneTaskBkgColor: \"#388e3c\",\n+  doneTaskBorderColor: \"#2e7d32\",\n+  critBkgColor: \"#f44336\",\n+  critBorderColor: \"#d32f2f\",\n+  taskTextColor: \"#e6e6e6\",\n+  taskTextOutsideColor: \"#e6e6e6\",\n+  taskTextLightColor: \"#b3b3b3\",\n+  sectionBkgColor: \"#2a2a2a\",\n+  altSectionBkgColor: \"#303030\",\n+  sectionBkgColor2: \"#252525\",\n+  excludeBkgColor: \"#2d2d2d\",\n+  fillType0: \"#264f78\",\n+  fillType1: \"#3a6db3\",\n+  fillType2: \"#59bc89\",\n+  fillType3: \"#4d8bf0\",\n+  fillType4: \"#3a6db3\",\n+  fillType5: \"#264f78\",\n+  fillType6: \"#59bc89\",\n+  fillType7: \"#4d8bf0\",\n+};\n+\n+mermaid.initialize({\n+  startOnLoad: false,\n+  securityLevel: \"loose\",\n+  theme: \"dark\",\n+  themeVariables: {\n+    ...MERMAID_THEME_COLORS,\n+    fontSize: \"14px\",\n+    fontFamily: \"var(--vscode-font-family)\",\n+  },\n+});\n+\n+export default function MermaidDiagram({ code }: { code: string }) {\n+  const mermaidRenderContainerRef = useRef<HTMLDivElement>(null);\n+  const zoomInButtonRef = useRef<SVGSVGElement>(null);\n+  const zoomOutButtonRef = useRef<SVGSVGElement>(null);\n+  const resetZoomButtonRef = useRef<SVGSVGElement>(null);\n+\n+  const zoomInButtonId = useId();\n+  const zoomOutButtonId = useId();\n+  const resetZoomButtonId = useId();\n+\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [error, setError] = useState(\"\");\n+\n+  useEffect(() => {\n+    setIsLoading(true);\n+  }, [code]);\n+\n+  useDebouncedEffect(",
        "comment_created_at": "2025-07-07T18:20:30+00:00",
        "comment_author": "Patrick-Erichsen",
        "comment_body": "Could we use `async/await` here for readability/consistency with the rest of the codebase?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2119373024",
    "pr_number": 5926,
    "pr_file": "gui/src/components/modelSelection/platform/AssistantSelect.tsx",
    "created_at": "2025-06-01T17:40:44+00:00",
    "commented_code": "const buttonRef = useRef<HTMLButtonElement>(null);\n   const currentOrg = useAppSelector(selectCurrentOrg);\n   const orgs = useAppSelector((store) => store.profiles.organizations);\n+  const config = useAppSelector((state) => state.config.config);\n   const ideMessenger = useContext(IdeMessengerContext);\n   const { isToolbarExpanded } = useLump();\n   const [loading, setLoading] = useState(false);\n+  const [freeTrialStatus, setFreeTrialStatus] =\n+    useState<FreeTrialStatus | null>(null);\n+\n+  useEffect(() => {\n+    ideMessenger\n+      .request(\"controlPlane/getFreeTrialStatus\", undefined)",
    "repo_full_name": "continuedev/continue",
    "discussion_comments": [
      {
        "comment_id": "2119373024",
        "repo_full_name": "continuedev/continue",
        "pr_number": 5926,
        "pr_file": "gui/src/components/modelSelection/platform/AssistantSelect.tsx",
        "discussion_id": "2119373024",
        "commented_code": "@@ -155,13 +158,33 @@ export default function AssistantSelect() {\n   const buttonRef = useRef<HTMLButtonElement>(null);\n   const currentOrg = useAppSelector(selectCurrentOrg);\n   const orgs = useAppSelector((store) => store.profiles.organizations);\n+  const config = useAppSelector((state) => state.config.config);\n   const ideMessenger = useContext(IdeMessengerContext);\n   const { isToolbarExpanded } = useLump();\n   const [loading, setLoading] = useState(false);\n+  const [freeTrialStatus, setFreeTrialStatus] =\n+    useState<FreeTrialStatus | null>(null);\n+\n+  useEffect(() => {\n+    ideMessenger\n+      .request(\"controlPlane/getFreeTrialStatus\", undefined)",
        "comment_created_at": "2025-06-01T17:40:44+00:00",
        "comment_author": "Patrick-Erichsen",
        "comment_body": "We should try to use `async`/`await` instead of callback chaining. Assuming this was AI generated code, could be a good rule ðŸ‘€ ",
        "pr_file_module": null
      }
    ]
  }
]