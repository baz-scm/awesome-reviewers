[
  {
    "discussion_id": "2236727021",
    "pr_number": 147085,
    "pr_file": "homeassistant/components/hanna/coordinator.py",
    "created_at": "2025-07-28T14:27:54+00:00",
    "commented_code": "+\"\"\"Hanna Instruments data coordinator for Home Assistant.\n+\n+This module provides the data coordinator for fetching and managing Hanna Instruments\n+sensor data.\n+\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from hanna_cloud import HannaCloudClient\n+from requests.exceptions import RequestException\n+\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class HannaDataCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Coordinator for fetching Hanna sensor data.\"\"\"\n+\n+    def __init__(\n+        self,\n+        hass: HomeAssistant,\n+        config_entry: ConfigEntry,\n+        device: dict,\n+    ) -> None:\n+        \"\"\"Initialize the Hanna data coordinator.\"\"\"\n+        self.api_client = HannaCloudClient()\n+        self.readings = None\n+        self.device_data = device\n+        self._email = config_entry.data[\"email\"]\n+        self._password = config_entry.data[\"password\"]\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"hanna_{self.device_identifier}\",\n+            update_interval=timedelta(seconds=30),\n+        )\n+        self._authenticated = False\n+\n+    async def ensure_authenticated(self) -> None:\n+        \"\"\"Ensure the client is authenticated with the Hanna API.\"\"\"\n+        if not self._authenticated:\n+            await self.hass.async_add_executor_job(\n+                self.api_client.authenticate, self._email, self._password\n+            )\n+            self._authenticated = True\n+\n+    @property\n+    def device_identifier(self) -> str:\n+        \"\"\"Return the device identifier.\"\"\"\n+        return self.device_data[\"DID\"]\n+\n+    @property\n+    def device_info(self) -> DeviceInfo:\n+        \"\"\"Return device information for Home Assistant.\"\"\"\n+        return DeviceInfo(\n+            identifiers={(\"hanna\", self.device_identifier)},\n+            manufacturer=self.device_data.get(\"manufacturer\"),\n+            model=self.device_data.get(\"DM\"),\n+            name=f\"{self.device_identifier} {self.device_data.get('name')}\",\n+            serial_number=self.device_data.get(\"serial_number\"),\n+            sw_version=self.device_data.get(\"sw_version\"),\n+        )",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2236727021",
        "repo_full_name": "home-assistant/core",
        "pr_number": 147085,
        "pr_file": "homeassistant/components/hanna/coordinator.py",
        "discussion_id": "2236727021",
        "commented_code": "@@ -0,0 +1,101 @@\n+\"\"\"Hanna Instruments data coordinator for Home Assistant.\n+\n+This module provides the data coordinator for fetching and managing Hanna Instruments\n+sensor data.\n+\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from hanna_cloud import HannaCloudClient\n+from requests.exceptions import RequestException\n+\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class HannaDataCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Coordinator for fetching Hanna sensor data.\"\"\"\n+\n+    def __init__(\n+        self,\n+        hass: HomeAssistant,\n+        config_entry: ConfigEntry,\n+        device: dict,\n+    ) -> None:\n+        \"\"\"Initialize the Hanna data coordinator.\"\"\"\n+        self.api_client = HannaCloudClient()\n+        self.readings = None\n+        self.device_data = device\n+        self._email = config_entry.data[\"email\"]\n+        self._password = config_entry.data[\"password\"]\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"hanna_{self.device_identifier}\",\n+            update_interval=timedelta(seconds=30),\n+        )\n+        self._authenticated = False\n+\n+    async def ensure_authenticated(self) -> None:\n+        \"\"\"Ensure the client is authenticated with the Hanna API.\"\"\"\n+        if not self._authenticated:\n+            await self.hass.async_add_executor_job(\n+                self.api_client.authenticate, self._email, self._password\n+            )\n+            self._authenticated = True\n+\n+    @property\n+    def device_identifier(self) -> str:\n+        \"\"\"Return the device identifier.\"\"\"\n+        return self.device_data[\"DID\"]\n+\n+    @property\n+    def device_info(self) -> DeviceInfo:\n+        \"\"\"Return device information for Home Assistant.\"\"\"\n+        return DeviceInfo(\n+            identifiers={(\"hanna\", self.device_identifier)},\n+            manufacturer=self.device_data.get(\"manufacturer\"),\n+            model=self.device_data.get(\"DM\"),\n+            name=f\"{self.device_identifier} {self.device_data.get('name')}\",\n+            serial_number=self.device_data.get(\"serial_number\"),\n+            sw_version=self.device_data.get(\"sw_version\"),\n+        )",
        "comment_created_at": "2025-07-28T14:27:54+00:00",
        "comment_author": "joostlek",
        "comment_body": "```suggestion\r\n    @property\r\n    def device_info(self) -> DeviceInfo:\r\n        \"\"\"Return device information for Home Assistant.\"\"\"\r\n        return DeviceInfo(\r\n            identifiers={(DOMAIN, self.device_identifier)},\r\n            manufacturer=self.device_data.get(\"manufacturer\"),\r\n            model=self.device_data.get(\"DM\"),\r\n            name=f\"{self.device_identifier} {self.device_data.get('name')}\",\r\n            serial_number=self.device_data.get(\"serial_number\"),\r\n            sw_version=self.device_data.get(\"sw_version\"),\r\n        )\r\n```\r\nIMO this belongs in an entity platform (like `sensor.py`) or a base entity (in `entity.py`) as the coordinator is resposible for fetching data, and this is a way the entity displays itself",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908456590",
    "pr_number": 133604,
    "pr_file": "homeassistant/components/bluesound/button.py",
    "created_at": "2025-01-09T09:48:22+00:00",
    "commented_code": "+\"\"\"Button entities for Bluesound.\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import TYPE_CHECKING\n+\n+from pyblu import Player, SyncStatus\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.const import CONF_PORT\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import (\n+    CONNECTION_NETWORK_MAC,\n+    DeviceInfo,\n+    format_mac,\n+)\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import BluesoundCoordinator\n+from .media_player import DEFAULT_PORT\n+from .utils import format_unique_id\n+\n+if TYPE_CHECKING:\n+    from . import BluesoundConfigEntry\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    config_entry: BluesoundConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Bluesound entry.\"\"\"\n+\n+    async_add_entities(\n+        [\n+            SetSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+            ClearSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+        ],\n+        update_before_add=True,\n+    )\n+\n+\n+def generate_device_info(sync_status: SyncStatus, port: int) -> DeviceInfo:\n+    \"\"\"Generate device info.\"\"\"\n+    if port == DEFAULT_PORT:\n+        return DeviceInfo(\n+            identifiers={(DOMAIN, format_mac(sync_status.mac))},\n+            connections={(CONNECTION_NETWORK_MAC, format_mac(sync_status.mac))},\n+            name=sync_status.name,\n+            manufacturer=sync_status.brand,\n+            model=sync_status.model_name,\n+            model_id=sync_status.model,\n+        )\n+\n+    return DeviceInfo(\n+        identifiers={(DOMAIN, format_unique_id(sync_status.mac, port))},\n+        name=sync_status.name,\n+        manufacturer=sync_status.brand,\n+        model=sync_status.model_name,\n+        model_id=sync_status.model,\n+        via_device=(DOMAIN, format_mac(sync_status.mac)),\n+    )\n+\n+\n+class SetSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1908456590",
        "repo_full_name": "home-assistant/core",
        "pr_number": 133604,
        "pr_file": "homeassistant/components/bluesound/button.py",
        "discussion_id": "1908456590",
        "commented_code": "@@ -0,0 +1,120 @@\n+\"\"\"Button entities for Bluesound.\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import TYPE_CHECKING\n+\n+from pyblu import Player, SyncStatus\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.const import CONF_PORT\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import (\n+    CONNECTION_NETWORK_MAC,\n+    DeviceInfo,\n+    format_mac,\n+)\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import BluesoundCoordinator\n+from .media_player import DEFAULT_PORT\n+from .utils import format_unique_id\n+\n+if TYPE_CHECKING:\n+    from . import BluesoundConfigEntry\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    config_entry: BluesoundConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Bluesound entry.\"\"\"\n+\n+    async_add_entities(\n+        [\n+            SetSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+            ClearSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+        ],\n+        update_before_add=True,\n+    )\n+\n+\n+def generate_device_info(sync_status: SyncStatus, port: int) -> DeviceInfo:\n+    \"\"\"Generate device info.\"\"\"\n+    if port == DEFAULT_PORT:\n+        return DeviceInfo(\n+            identifiers={(DOMAIN, format_mac(sync_status.mac))},\n+            connections={(CONNECTION_NETWORK_MAC, format_mac(sync_status.mac))},\n+            name=sync_status.name,\n+            manufacturer=sync_status.brand,\n+            model=sync_status.model_name,\n+            model_id=sync_status.model,\n+        )\n+\n+    return DeviceInfo(\n+        identifiers={(DOMAIN, format_unique_id(sync_status.mac, port))},\n+        name=sync_status.name,\n+        manufacturer=sync_status.brand,\n+        model=sync_status.model_name,\n+        model_id=sync_status.model,\n+        via_device=(DOMAIN, format_mac(sync_status.mac)),\n+    )\n+\n+\n+class SetSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):",
        "comment_created_at": "2025-01-09T09:48:22+00:00",
        "comment_author": "joostlek",
        "comment_body": "Would it maybe make sense to create a base entity that will be inherited in both the media player and the buttons? It would help deduplicate the device info logic",
        "pr_file_module": null
      },
      {
        "comment_id": "1908459048",
        "repo_full_name": "home-assistant/core",
        "pr_number": 133604,
        "pr_file": "homeassistant/components/bluesound/button.py",
        "discussion_id": "1908456590",
        "commented_code": "@@ -0,0 +1,120 @@\n+\"\"\"Button entities for Bluesound.\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import TYPE_CHECKING\n+\n+from pyblu import Player, SyncStatus\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.const import CONF_PORT\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import (\n+    CONNECTION_NETWORK_MAC,\n+    DeviceInfo,\n+    format_mac,\n+)\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import BluesoundCoordinator\n+from .media_player import DEFAULT_PORT\n+from .utils import format_unique_id\n+\n+if TYPE_CHECKING:\n+    from . import BluesoundConfigEntry\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    config_entry: BluesoundConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Bluesound entry.\"\"\"\n+\n+    async_add_entities(\n+        [\n+            SetSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+            ClearSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+        ],\n+        update_before_add=True,\n+    )\n+\n+\n+def generate_device_info(sync_status: SyncStatus, port: int) -> DeviceInfo:\n+    \"\"\"Generate device info.\"\"\"\n+    if port == DEFAULT_PORT:\n+        return DeviceInfo(\n+            identifiers={(DOMAIN, format_mac(sync_status.mac))},\n+            connections={(CONNECTION_NETWORK_MAC, format_mac(sync_status.mac))},\n+            name=sync_status.name,\n+            manufacturer=sync_status.brand,\n+            model=sync_status.model_name,\n+            model_id=sync_status.model,\n+        )\n+\n+    return DeviceInfo(\n+        identifiers={(DOMAIN, format_unique_id(sync_status.mac, port))},\n+        name=sync_status.name,\n+        manufacturer=sync_status.brand,\n+        model=sync_status.model_name,\n+        model_id=sync_status.model,\n+        via_device=(DOMAIN, format_mac(sync_status.mac)),\n+    )\n+\n+\n+class SetSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):",
        "comment_created_at": "2025-01-09T09:50:06+00:00",
        "comment_author": "joostlek",
        "comment_body": "I would reommend doing this in a separate PR",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1908458799",
    "pr_number": 133604,
    "pr_file": "homeassistant/components/bluesound/button.py",
    "created_at": "2025-01-09T09:49:54+00:00",
    "commented_code": "+\"\"\"Button entities for Bluesound.\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import TYPE_CHECKING\n+\n+from pyblu import Player, SyncStatus\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.const import CONF_PORT\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import (\n+    CONNECTION_NETWORK_MAC,\n+    DeviceInfo,\n+    format_mac,\n+)\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import BluesoundCoordinator\n+from .media_player import DEFAULT_PORT\n+from .utils import format_unique_id\n+\n+if TYPE_CHECKING:\n+    from . import BluesoundConfigEntry\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    config_entry: BluesoundConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Bluesound entry.\"\"\"\n+\n+    async_add_entities(\n+        [\n+            SetSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+            ClearSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+        ],\n+        update_before_add=True,\n+    )\n+\n+\n+def generate_device_info(sync_status: SyncStatus, port: int) -> DeviceInfo:\n+    \"\"\"Generate device info.\"\"\"\n+    if port == DEFAULT_PORT:\n+        return DeviceInfo(\n+            identifiers={(DOMAIN, format_mac(sync_status.mac))},\n+            connections={(CONNECTION_NETWORK_MAC, format_mac(sync_status.mac))},\n+            name=sync_status.name,\n+            manufacturer=sync_status.brand,\n+            model=sync_status.model_name,\n+            model_id=sync_status.model,\n+        )\n+\n+    return DeviceInfo(\n+        identifiers={(DOMAIN, format_unique_id(sync_status.mac, port))},\n+        name=sync_status.name,\n+        manufacturer=sync_status.brand,\n+        model=sync_status.model_name,\n+        model_id=sync_status.model,\n+        via_device=(DOMAIN, format_mac(sync_status.mac)),\n+    )\n+\n+\n+class SetSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):\n+    \"\"\"Representation of a sleep timer button.\"\"\"\n+\n+    def __init__(\n+        self, coordinator: BluesoundCoordinator, player: Player, port: int\n+    ) -> None:\n+        \"\"\"Initialize the Bluesound button.\"\"\"\n+        super().__init__(coordinator)\n+        sync_status = coordinator.data.sync_status\n+\n+        self._player = player\n+        self._attr_unique_id = (\n+            f\"set-sleep-timer-{format_unique_id(sync_status.mac, port)}\"\n+        )\n+        self._attr_name = f\"{sync_status.name} Set Sleep Timer\"\n+        self._attr_device_info = generate_device_info(sync_status, port)\n+        self._attr_entity_registry_enabled_default = False\n+\n+    async def async_press(self) -> None:\n+        \"\"\"Set the sleep timer.\"\"\"\n+        await self._player.sleep_timer()\n+\n+\n+class ClearSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):\n+    \"\"\"Representation of a sleep timer button.\"\"\"\n+\n+    def __init__(\n+        self, coordinator: BluesoundCoordinator, player: Player, port: int\n+    ) -> None:\n+        \"\"\"Initialize the Bluesound button.\"\"\"\n+        super().__init__(coordinator)\n+        sync_status = coordinator.data.sync_status\n+\n+        self._player = player\n+        self._attr_unique_id = (\n+            f\"clear-sleep-timer-{format_unique_id(sync_status.mac, port)}\"\n+        )\n+        self._attr_name = f\"{sync_status.name} Clear Sleep Timer\"\n+        self._attr_device_info = generate_device_info(sync_status, port)\n+        self._attr_entity_registry_enabled_default = False\n+\n+    async def async_press(self) -> None:\n+        \"\"\"Clear the sleep timer.\"\"\"\n+        sleep = -1\n+        while sleep != 0:\n+            sleep = await self._player.sleep_timer()",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1908458799",
        "repo_full_name": "home-assistant/core",
        "pr_number": 133604,
        "pr_file": "homeassistant/components/bluesound/button.py",
        "discussion_id": "1908458799",
        "commented_code": "@@ -0,0 +1,120 @@\n+\"\"\"Button entities for Bluesound.\"\"\"\n+\n+from __future__ import annotations\n+\n+from typing import TYPE_CHECKING\n+\n+from pyblu import Player, SyncStatus\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.const import CONF_PORT\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import (\n+    CONNECTION_NETWORK_MAC,\n+    DeviceInfo,\n+    format_mac,\n+)\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import BluesoundCoordinator\n+from .media_player import DEFAULT_PORT\n+from .utils import format_unique_id\n+\n+if TYPE_CHECKING:\n+    from . import BluesoundConfigEntry\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    config_entry: BluesoundConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Bluesound entry.\"\"\"\n+\n+    async_add_entities(\n+        [\n+            SetSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+            ClearSleepTimerButton(\n+                config_entry.runtime_data.coordinator,\n+                config_entry.runtime_data.player,\n+                config_entry.data[CONF_PORT],\n+            ),\n+        ],\n+        update_before_add=True,\n+    )\n+\n+\n+def generate_device_info(sync_status: SyncStatus, port: int) -> DeviceInfo:\n+    \"\"\"Generate device info.\"\"\"\n+    if port == DEFAULT_PORT:\n+        return DeviceInfo(\n+            identifiers={(DOMAIN, format_mac(sync_status.mac))},\n+            connections={(CONNECTION_NETWORK_MAC, format_mac(sync_status.mac))},\n+            name=sync_status.name,\n+            manufacturer=sync_status.brand,\n+            model=sync_status.model_name,\n+            model_id=sync_status.model,\n+        )\n+\n+    return DeviceInfo(\n+        identifiers={(DOMAIN, format_unique_id(sync_status.mac, port))},\n+        name=sync_status.name,\n+        manufacturer=sync_status.brand,\n+        model=sync_status.model_name,\n+        model_id=sync_status.model,\n+        via_device=(DOMAIN, format_mac(sync_status.mac)),\n+    )\n+\n+\n+class SetSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):\n+    \"\"\"Representation of a sleep timer button.\"\"\"\n+\n+    def __init__(\n+        self, coordinator: BluesoundCoordinator, player: Player, port: int\n+    ) -> None:\n+        \"\"\"Initialize the Bluesound button.\"\"\"\n+        super().__init__(coordinator)\n+        sync_status = coordinator.data.sync_status\n+\n+        self._player = player\n+        self._attr_unique_id = (\n+            f\"set-sleep-timer-{format_unique_id(sync_status.mac, port)}\"\n+        )\n+        self._attr_name = f\"{sync_status.name} Set Sleep Timer\"\n+        self._attr_device_info = generate_device_info(sync_status, port)\n+        self._attr_entity_registry_enabled_default = False\n+\n+    async def async_press(self) -> None:\n+        \"\"\"Set the sleep timer.\"\"\"\n+        await self._player.sleep_timer()\n+\n+\n+class ClearSleepTimerButton(CoordinatorEntity[BluesoundCoordinator], ButtonEntity):\n+    \"\"\"Representation of a sleep timer button.\"\"\"\n+\n+    def __init__(\n+        self, coordinator: BluesoundCoordinator, player: Player, port: int\n+    ) -> None:\n+        \"\"\"Initialize the Bluesound button.\"\"\"\n+        super().__init__(coordinator)\n+        sync_status = coordinator.data.sync_status\n+\n+        self._player = player\n+        self._attr_unique_id = (\n+            f\"clear-sleep-timer-{format_unique_id(sync_status.mac, port)}\"\n+        )\n+        self._attr_name = f\"{sync_status.name} Clear Sleep Timer\"\n+        self._attr_device_info = generate_device_info(sync_status, port)\n+        self._attr_entity_registry_enabled_default = False\n+\n+    async def async_press(self) -> None:\n+        \"\"\"Clear the sleep timer.\"\"\"\n+        sleep = -1\n+        while sleep != 0:\n+            sleep = await self._player.sleep_timer()",
        "comment_created_at": "2025-01-09T09:49:54+00:00",
        "comment_author": "joostlek",
        "comment_body": "Instead of having 2 classes, create a generic class that takes in an `ButtonEntityDescription`, which you can extend for Bluesound to add a `press_fn` which you execute when someone presses the button. This way we can deduplicate even less",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218448145",
    "pr_number": 149122,
    "pr_file": "homeassistant/components/workday/__init__.py",
    "created_at": "2025-07-21T07:53:40+00:00",
    "commented_code": ") from ex\n \n \n-async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+def _get_obj_holidays(",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2218448145",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149122,
        "pr_file": "homeassistant/components/workday/__init__.py",
        "discussion_id": "2218448145",
        "commented_code": "@@ -73,32 +91,199 @@ async def _async_validate_country_and_province(\n         ) from ex\n \n \n-async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+def _get_obj_holidays(",
        "comment_created_at": "2025-07-21T07:53:40+00:00",
        "comment_author": "epenet",
        "comment_body": "I know it's only used once - but I think it would still sit better in the new util module",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218449820",
    "pr_number": 149122,
    "pr_file": "homeassistant/components/workday/__init__.py",
    "created_at": "2025-07-21T07:54:37+00:00",
    "commented_code": ") from ex\n \n \n-async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+def _get_obj_holidays(\n+    country: str | None,\n+    province: str | None,\n+    year: int,\n+    language: str | None,\n+    categories: list[str] | None,\n+) -> HolidayBase:\n+    \"\"\"Get the object for the requested country and year.\"\"\"\n+    if not country:\n+        return HolidayBase()\n+\n+    set_categories = None\n+    if categories:\n+        category_list = [PUBLIC]\n+        category_list.extend(categories)\n+        set_categories = tuple(category_list)\n+\n+    obj_holidays: HolidayBase = country_holidays(\n+        country,\n+        subdiv=province,\n+        years=[year, year + 1],\n+        language=language,\n+        categories=set_categories,\n+    )\n+\n+    supported_languages = obj_holidays.supported_languages\n+    default_language = obj_holidays.default_language\n+\n+    if default_language and not language:\n+        # If no language is set, use the default language\n+        LOGGER.debug(\"Changing language from None to %s\", default_language)\n+        return country_holidays(  # Return default if no language\n+            country,\n+            subdiv=province,\n+            years=year,\n+            language=default_language,\n+            categories=set_categories,\n+        )\n+\n+    if (\n+        default_language\n+        and language\n+        and language not in supported_languages\n+        and language.startswith(\"en\")\n+    ):\n+        # If language does not match supported languages, use the first English variant\n+        if default_language.startswith(\"en\"):\n+            LOGGER.debug(\"Changing language from %s to %s\", language, default_language)\n+            return country_holidays(  # Return default English if default language\n+                country,\n+                subdiv=province,\n+                years=year,\n+                language=default_language,\n+                categories=set_categories,\n+            )\n+        for lang in supported_languages:\n+            if lang.startswith(\"en\"):\n+                LOGGER.debug(\"Changing language from %s to %s\", language, lang)\n+                return country_holidays(\n+                    country,\n+                    subdiv=province,\n+                    years=year,\n+                    language=lang,\n+                    categories=set_categories,\n+                )\n+\n+    if default_language and language and language not in supported_languages:\n+        # If language does not match supported languages, use the default language\n+        LOGGER.debug(\"Changing language from %s to %s\", language, default_language)\n+        return country_holidays(  # Return default English if default language\n+            country,\n+            subdiv=province,\n+            years=year,\n+            language=default_language,\n+            categories=set_categories,\n+        )\n+\n+    return obj_holidays\n+\n+\n+def add_remove_custom_holidays(",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2218449820",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149122,
        "pr_file": "homeassistant/components/workday/__init__.py",
        "discussion_id": "2218449820",
        "commented_code": "@@ -73,32 +91,199 @@ async def _async_validate_country_and_province(\n         ) from ex\n \n \n-async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+def _get_obj_holidays(\n+    country: str | None,\n+    province: str | None,\n+    year: int,\n+    language: str | None,\n+    categories: list[str] | None,\n+) -> HolidayBase:\n+    \"\"\"Get the object for the requested country and year.\"\"\"\n+    if not country:\n+        return HolidayBase()\n+\n+    set_categories = None\n+    if categories:\n+        category_list = [PUBLIC]\n+        category_list.extend(categories)\n+        set_categories = tuple(category_list)\n+\n+    obj_holidays: HolidayBase = country_holidays(\n+        country,\n+        subdiv=province,\n+        years=[year, year + 1],\n+        language=language,\n+        categories=set_categories,\n+    )\n+\n+    supported_languages = obj_holidays.supported_languages\n+    default_language = obj_holidays.default_language\n+\n+    if default_language and not language:\n+        # If no language is set, use the default language\n+        LOGGER.debug(\"Changing language from None to %s\", default_language)\n+        return country_holidays(  # Return default if no language\n+            country,\n+            subdiv=province,\n+            years=year,\n+            language=default_language,\n+            categories=set_categories,\n+        )\n+\n+    if (\n+        default_language\n+        and language\n+        and language not in supported_languages\n+        and language.startswith(\"en\")\n+    ):\n+        # If language does not match supported languages, use the first English variant\n+        if default_language.startswith(\"en\"):\n+            LOGGER.debug(\"Changing language from %s to %s\", language, default_language)\n+            return country_holidays(  # Return default English if default language\n+                country,\n+                subdiv=province,\n+                years=year,\n+                language=default_language,\n+                categories=set_categories,\n+            )\n+        for lang in supported_languages:\n+            if lang.startswith(\"en\"):\n+                LOGGER.debug(\"Changing language from %s to %s\", language, lang)\n+                return country_holidays(\n+                    country,\n+                    subdiv=province,\n+                    years=year,\n+                    language=lang,\n+                    categories=set_categories,\n+                )\n+\n+    if default_language and language and language not in supported_languages:\n+        # If language does not match supported languages, use the default language\n+        LOGGER.debug(\"Changing language from %s to %s\", language, default_language)\n+        return country_holidays(  # Return default English if default language\n+            country,\n+            subdiv=province,\n+            years=year,\n+            language=default_language,\n+            categories=set_categories,\n+        )\n+\n+    return obj_holidays\n+\n+\n+def add_remove_custom_holidays(",
        "comment_created_at": "2025-07-21T07:54:37+00:00",
        "comment_author": "epenet",
        "comment_body": "Again, I know it's only used once - but I think it would still sit better in the new util module",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2232132139",
    "pr_number": 148219,
    "pr_file": "homeassistant/components/matter/number.py",
    "created_at": "2025-07-25T22:43:31+00:00",
    "commented_code": "command: Callable[[int], ClusterCommand]\n \n \n+@dataclass(frozen=True, kw_only=True)\n+class MatterMaxNumberEntityDescription(",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2232132139",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148219,
        "pr_file": "homeassistant/components/matter/number.py",
        "discussion_id": "2232132139",
        "commented_code": "@@ -66,6 +66,20 @@ class MatterRangeNumberEntityDescription(\n     command: Callable[[int], ClusterCommand]\n \n \n+@dataclass(frozen=True, kw_only=True)\n+class MatterMaxNumberEntityDescription(",
        "comment_created_at": "2025-07-25T22:43:31+00:00",
        "comment_author": "MartinHjelmare",
        "comment_body": "I suggest we reuse `MatterRangeNumberEntityDescription` instead. We can make the `MatterRangeNumber` class and corresponding entity description more flexible so it can be used for more cases.\r\n\r\nWe can set defaults on the description attributes so they are made optional. Eg to not have to provide the `ha_to_device` attribute we can set a lambda that just returns the input value as default on `ha_to_device`.\r\n\r\nWe can add two attributes on the description that should hold a function to format the max and min values. Then we can move the division with 100 into the entity description from `_update_from_device` in `MatterRangeNumber`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2234108247",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148219,
        "pr_file": "homeassistant/components/matter/number.py",
        "discussion_id": "2232132139",
        "commented_code": "@@ -66,6 +66,20 @@ class MatterRangeNumberEntityDescription(\n     command: Callable[[int], ClusterCommand]\n \n \n+@dataclass(frozen=True, kw_only=True)\n+class MatterMaxNumberEntityDescription(",
        "comment_created_at": "2025-07-27T19:26:39+00:00",
        "comment_author": "lboue",
        "comment_body": "I'm not very comfortable making these modifications. These are advanced cases in the Python language.\r\nI managed to do it for NumberEntity.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2232150351",
    "pr_number": 148219,
    "pr_file": "homeassistant/components/matter/select.py",
    "created_at": "2025-07-25T23:00:46+00:00",
    "commented_code": "super()._update_from_device()\n \n \n+class MatterIntListSelectEntity(MatterEntity, SelectEntity):",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2232150351",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148219,
        "pr_file": "homeassistant/components/matter/select.py",
        "discussion_id": "2232150351",
        "commented_code": "@@ -138,6 +150,52 @@ def _update_from_device(self) -> None:\n         super()._update_from_device()\n \n \n+class MatterIntListSelectEntity(MatterEntity, SelectEntity):",
        "comment_created_at": "2025-07-25T23:00:46+00:00",
        "comment_author": "MartinHjelmare",
        "comment_body": "Same here. Please try to make the existing ListEntity and entity description more flexible by putting more of the work into the description than in the entity class.\r\n\r\nThis new entity and description just have some small changes compared to the existing entity class and description.\r\n\r\nEg, pass the entity instance to the description callback lambda to allow the lambda to access entity attributes. The lambda can accept more than a single parameter.",
        "pr_file_module": null
      },
      {
        "comment_id": "2234132104",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148219,
        "pr_file": "homeassistant/components/matter/select.py",
        "discussion_id": "2232150351",
        "commented_code": "@@ -138,6 +150,52 @@ def _update_from_device(self) -> None:\n         super()._update_from_device()\n \n \n+class MatterIntListSelectEntity(MatterEntity, SelectEntity):",
        "comment_created_at": "2025-07-27T20:58:55+00:00",
        "comment_author": "lboue",
        "comment_body": "I managed to keep only the existing entity. I only modified it to handle the case of a list of integers.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2235460958",
    "pr_number": 149016,
    "pr_file": "homeassistant/components/cloudflare/__init__.py",
    "created_at": "2025-07-28T09:05:43+00:00",
    "commented_code": ") -> None:\n     client = entry.runtime_data.client\n     dns_zone = entry.runtime_data.dns_zone\n-    target_records: list[str] = entry.data[CONF_RECORDS]\n+    target_records: list[tuple[str, str]] = []\n+    # Handle legacy CONF_RECORDS, if there is just the record name\n+    if all(\"|\" not in record for record in entry.data[CONF_RECORDS]):\n+        # Legacy: only record name, assume type \"A\"\n+        target_records = [(record, \"A\") for record in entry.data[CONF_RECORDS]]\n+    else:\n+        # New: list of \"name|type\" strings\n+        target_records = [\n+            tuple(record.split(\"|\", 1)) for record in entry.data[CONF_RECORDS]\n+        ]\n \n     _LOGGER.debug(\"Starting update for zone %s\", dns_zone[\"name\"])\n \n-    records = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"A\")\n+    records_a = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"A\")\n+    records_aaaa = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"AAAA\")\n+    records = records_a + records_aaaa\n     _LOGGER.debug(\"Records: %s\", records)\n \n     session = async_get_clientsession(hass, family=socket.AF_INET)\n+    session_ipv6 = async_get_clientsession(hass, family=socket.AF_INET6)\n     location_info = await async_detect_location_info(session)\n+    location_info_ipv6 = await async_detect_location_info(session_ipv6)\n+\n+    ipv4_address = location_info.ip if location_info else None\n+    ipv6_address = location_info_ipv6.ip if location_info_ipv6 else None\n+\n+    if ipv4_address is not None and not is_ipv4_address(ipv4_address):\n+        _LOGGER.debug(\"Could not get IPv4 address \")\n+        ipv4_address = None\n+\n+    if ipv6_address is not None and not is_ipv6_address(ipv6_address):\n+        _LOGGER.debug(\"Could not get IPv6 address \")\n+        ipv6_address = None\n+\n+    if not ipv4_address and not ipv6_address:\n+        raise HomeAssistantError(\"Could not get any external IP address\")\n+\n+    update_tasks = []\n+\n+    for record in records:\n+        if (record[\"name\"], record[\"type\"]) not in target_records:\n+            continue\n+\n+        if record[\"type\"] == \"A\" and ipv4_address and record[\"content\"] != ipv4_address:",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2235460958",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149016,
        "pr_file": "homeassistant/components/cloudflare/__init__.py",
        "discussion_id": "2235460958",
        "commented_code": "@@ -100,41 +100,87 @@ async def _async_update_cloudflare(\n ) -> None:\n     client = entry.runtime_data.client\n     dns_zone = entry.runtime_data.dns_zone\n-    target_records: list[str] = entry.data[CONF_RECORDS]\n+    target_records: list[tuple[str, str]] = []\n+    # Handle legacy CONF_RECORDS, if there is just the record name\n+    if all(\"|\" not in record for record in entry.data[CONF_RECORDS]):\n+        # Legacy: only record name, assume type \"A\"\n+        target_records = [(record, \"A\") for record in entry.data[CONF_RECORDS]]\n+    else:\n+        # New: list of \"name|type\" strings\n+        target_records = [\n+            tuple(record.split(\"|\", 1)) for record in entry.data[CONF_RECORDS]\n+        ]\n \n     _LOGGER.debug(\"Starting update for zone %s\", dns_zone[\"name\"])\n \n-    records = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"A\")\n+    records_a = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"A\")\n+    records_aaaa = await client.list_dns_records(zone_id=dns_zone[\"id\"], type=\"AAAA\")\n+    records = records_a + records_aaaa\n     _LOGGER.debug(\"Records: %s\", records)\n \n     session = async_get_clientsession(hass, family=socket.AF_INET)\n+    session_ipv6 = async_get_clientsession(hass, family=socket.AF_INET6)\n     location_info = await async_detect_location_info(session)\n+    location_info_ipv6 = await async_detect_location_info(session_ipv6)\n+\n+    ipv4_address = location_info.ip if location_info else None\n+    ipv6_address = location_info_ipv6.ip if location_info_ipv6 else None\n+\n+    if ipv4_address is not None and not is_ipv4_address(ipv4_address):\n+        _LOGGER.debug(\"Could not get IPv4 address \")\n+        ipv4_address = None\n+\n+    if ipv6_address is not None and not is_ipv6_address(ipv6_address):\n+        _LOGGER.debug(\"Could not get IPv6 address \")\n+        ipv6_address = None\n+\n+    if not ipv4_address and not ipv6_address:\n+        raise HomeAssistantError(\"Could not get any external IP address\")\n+\n+    update_tasks = []\n+\n+    for record in records:\n+        if (record[\"name\"], record[\"type\"]) not in target_records:\n+            continue\n+\n+        if record[\"type\"] == \"A\" and ipv4_address and record[\"content\"] != ipv4_address:",
        "comment_created_at": "2025-07-28T09:05:43+00:00",
        "comment_author": "ludeeus",
        "comment_body": "This if/else contains repetitive paths, extract the logic to a reusable helper.",
        "pr_file_module": null
      }
    ]
  }
]