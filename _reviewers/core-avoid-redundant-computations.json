[
  {
    "discussion_id": "2126146039",
    "pr_number": 13433,
    "pr_file": "packages/reactivity/src/watch.ts",
    "created_at": "2025-06-04T09:33:01+00:00",
    "commented_code": "depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2126146039",
        "repo_full_name": "vuejs/core",
        "pr_number": 13433,
        "pr_file": "packages/reactivity/src/watch.ts",
        "discussion_id": "2126146039",
        "commented_code": "@@ -333,35 +333,63 @@ export function traverse(\n   depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []",
        "comment_created_at": "2025-06-04T09:33:01+00:00",
        "comment_author": "GeoffreyParrier",
        "comment_body": "Shouldn't they be declared after the check line 338?\r\nCurrently they use memory even if they don't have any use\r\n\r\nAlso it could be nice to directly add value and depth when declaring for performance \r\n\r\n<details>\r\n<summary>Benchmark (~2.25x faster)</summary>\r\n\r\n![image](https://github.com/user-attachments/assets/03f98fc8-836d-4b7d-b819-b6059625216d)\r\n\r\nhttps://jsbenchmark.com/#eyJjYXNlcyI6W3siaWQiOiJLT2Z2RVpqTVlMS0JBdVhZUWsxajkiLCJjb2RlIjoiY29uc3QgcXVldWUgPSBbWydhJywgMV1dIiwiZGVwZW5kZW5jaWVzIjpbXSwibmFtZSI6IkRlY2xhcmUgYXJyYXkgd2l0aCB2YWx1ZSBkaXJlY3RseSJ9LHsiaWQiOiJ5VzA3VnV2Y1VTV3hLRF9UWFNTZnEiLCJjb2RlIjoiY29uc3QgcXVldWUgPSBbXVxucXVldWUucHVzaChbJ2EnLCAxXSkiLCJkZXBlbmRlbmNpZXMiOltdLCJuYW1lIjoiUHVzaCB0byBhcnJheSBhZnRlciBkZWNsYXJhdGlvbiJ9XSwiY29uZmlnIjp7Im5hbWUiOiJCYXNpYyBleGFtcGxlIiwicGFyYWxsZWwiOnRydWUsImdsb2JhbFRlc3RDb25maWciOnsiZGVwZW5kZW5jaWVzIjpbXX0sImRhdGFDb2RlIjoiIn19\r\n</details>",
        "pr_file_module": null
      },
      {
        "comment_id": "2127845169",
        "repo_full_name": "vuejs/core",
        "pr_number": 13433,
        "pr_file": "packages/reactivity/src/watch.ts",
        "discussion_id": "2126146039",
        "commented_code": "@@ -333,35 +333,63 @@ export function traverse(\n   depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []",
        "comment_created_at": "2025-06-05T02:58:42+00:00",
        "comment_author": "jsy-0526",
        "comment_body": "yes , you are rightã€‚ I will move these two lines to the bottom",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009330968",
    "pr_number": 13085,
    "pr_file": "packages/runtime-dom/src/patchProp.ts",
    "created_at": "2025-03-24T01:07:24+00:00",
    "commented_code": "return false\n   }\n \n-  return key in el\n+  return camelize(key) in el || key in el",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2009330968",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2009330968",
        "commented_code": "@@ -140,5 +142,5 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  return camelize(key) in el || key in el",
        "comment_created_at": "2025-03-24T01:07:24+00:00",
        "comment_author": "edison1105",
        "comment_body": "Maybe we can cache camelKey on el like this:       \r\n```js  \r\nconst camelKey = camelize(key)\r\nif (camelKey in el) {\r\n  ;(el as any)[`$${key}`] = camelKey\r\n  return true\r\n}\r\n```\r\n`patchProp` changes as follows\r\n```js\r\npatchDOMProp(el, el[`$${key}`] || key, nextValue, parentComponent)\r\n```\r\n\r\nCall `camelize` only once, check `in` only once",
        "pr_file_module": null
      },
      {
        "comment_id": "2009824355",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2009330968",
        "commented_code": "@@ -140,5 +142,5 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  return camelize(key) in el || key in el",
        "comment_created_at": "2025-03-24T09:48:09+00:00",
        "comment_author": "vonBrax",
        "comment_body": "Yes, we can cache the check result in the element itself. I would just like to point that there are 2 situations where we need to perform the check: for `.prop` bindings and at the end `shouldSetAsProp`. \r\nFor `.prop` bindings, check would always be performed and only once. \r\nBut if we are coming from `shouldSetAsProp`, to also avoid performing the `in` check when we don't need to, I would also need to add the `$${key}` property on the places where `shouldSetAsProp` would return true - or alternatively set its default value in the top of the function.\r\n\r\nI have a question though: is it possible that `el` would already have a property with the name we are setting (`$${key}`)? Should we actually add a check for that and what to do if it already exists?\r\n\r\n```typescript\r\nfunction shouldSetAsProp(...) {\r\n  ...\r\n  const camelKey = camelize(key)\r\n  if (camelKey in el) {\r\n    if ((el as any)[`$${key}`] && (el as any)[`$${key}`] !== camelKey) {\r\n      // What to do? Throw?\r\n    }\r\n     ;(el as any)[`$${key}`] = camelKey\r\n    return true\r\n  }\r\n ...\r\n}\r\n``` ",
        "pr_file_module": null
      },
      {
        "comment_id": "2010009419",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2009330968",
        "commented_code": "@@ -140,5 +142,5 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  return camelize(key) in el || key in el",
        "comment_created_at": "2025-03-24T11:40:38+00:00",
        "comment_author": "vonBrax",
        "comment_body": "We could use a `symbol` as key too... either to set directly the value of the current prop being set (would get overwritten by every new attribute being set and not cached across renders) or use it to create an object where properties could then be referenced by their specific key and thus caching the results. Or we leave it as you suggested above. Thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "2010311539",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2009330968",
        "commented_code": "@@ -140,5 +142,5 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  return camelize(key) in el || key in el",
        "comment_created_at": "2025-03-24T14:35:55+00:00",
        "comment_author": "edison1105",
        "comment_body": "> Should we actually add a check for that and what to do if it already exists?\r\n\r\nWe just need to use a key that is as unlikely to duplicate as possible, such as `$_v_prop_${key}` or symbol as key.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2011732101",
    "pr_number": 13085,
    "pr_file": "packages/runtime-dom/src/patchProp.ts",
    "created_at": "2025-03-25T09:55:19+00:00",
    "commented_code": "return false\n   }\n \n-  return key in el\n+  const camelKey = camelize(key)\n+  if (camelKey in el) {\n+    setElementPropKey(el, key, camelKey)\n+    return true\n+  }\n+\n+  if (key in el) {\n+    setElementPropKey(el, key)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2011732101",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2011732101",
        "commented_code": "@@ -140,5 +146,24 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  const camelKey = camelize(key)\n+  if (camelKey in el) {\n+    setElementPropKey(el, key, camelKey)\n+    return true\n+  }\n+\n+  if (key in el) {\n+    setElementPropKey(el, key)",
        "comment_created_at": "2025-03-25T09:55:19+00:00",
        "comment_author": "edison1105",
        "comment_body": "I think only the camel key need to be cached. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2011744622",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2011732101",
        "commented_code": "@@ -140,5 +146,24 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  const camelKey = camelize(key)\n+  if (camelKey in el) {\n+    setElementPropKey(el, key, camelKey)\n+    return true\n+  }\n+\n+  if (key in el) {\n+    setElementPropKey(el, key)",
        "comment_created_at": "2025-03-25T10:02:23+00:00",
        "comment_author": "vonBrax",
        "comment_body": "The reason I did that way was to avoid unnecessarily executing this line when the check in the previous line returns `undefined`:\r\n\r\nhttps://github.com/vuejs/core/pull/13085/files/b4bdb6db27cc9962663d2b327b438fe0fb8aa0e2#diff-51bf3d2247157ea7e415bdcf74feabbe5843467638c131743785ab6c68640605R53\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2015265845",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2011732101",
        "commented_code": "@@ -140,5 +146,24 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  const camelKey = camelize(key)\n+  if (camelKey in el) {\n+    setElementPropKey(el, key, camelKey)\n+    return true\n+  }\n+\n+  if (key in el) {\n+    setElementPropKey(el, key)",
        "comment_created_at": "2025-03-27T01:20:53+00:00",
        "comment_author": "edison1105",
        "comment_body": "Based on the current changes, I think your initial commit was actually better. This logic is far more costly than a single 'in' check. Moreover, your original approach didn't always perform two 'in' checksâ€”it only did so when `shouldSetAsProp` was executed. Perhaps the initial commit is more appropriate. I'm really sorry for misleading you.",
        "pr_file_module": null
      },
      {
        "comment_id": "2015993228",
        "repo_full_name": "vuejs/core",
        "pr_number": 13085,
        "pr_file": "packages/runtime-dom/src/patchProp.ts",
        "discussion_id": "2011732101",
        "commented_code": "@@ -140,5 +146,24 @@ function shouldSetAsProp(\n     return false\n   }\n \n-  return key in el\n+  const camelKey = camelize(key)\n+  if (camelKey in el) {\n+    setElementPropKey(el, key, camelKey)\n+    return true\n+  }\n+\n+  if (key in el) {\n+    setElementPropKey(el, key)",
        "comment_created_at": "2025-03-27T08:57:00+00:00",
        "comment_author": "vonBrax",
        "comment_body": "No worries, I'll revert back to the first commit. Thanks for the review and the suggestions!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1316687423",
    "pr_number": 9051,
    "pr_file": "packages/reactivity/src/baseHandlers.ts",
    "created_at": "2023-09-06T03:55:43+00:00",
    "commented_code": "const res = arr[key](...args)\n       if (res === -1 || res === false) {\n         // if that didn't work, run it again using raw values.\n-        return arr[key](...args.map(toRaw))\n+        return arr[key](toRaw(args[0]), ...args.slice(1))",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1316687423",
        "repo_full_name": "vuejs/core",
        "pr_number": 9051,
        "pr_file": "packages/reactivity/src/baseHandlers.ts",
        "discussion_id": "1316687423",
        "commented_code": "@@ -66,7 +66,7 @@ function createArrayInstrumentations() {\n       const res = arr[key](...args)\n       if (res === -1 || res === false) {\n         // if that didn't work, run it again using raw values.\n-        return arr[key](...args.map(toRaw))\n+        return arr[key](toRaw(args[0]), ...args.slice(1))",
        "comment_created_at": "2023-09-06T03:55:43+00:00",
        "comment_author": "baiwusanyu-c",
        "comment_body": "I don't think this is necessary, because the parameters passed in by the user are uncontrollable. The parameters passed in by the user may all be responsive objects. Only use toRaw to process the first parameter. If the subsequent parameters are responsive objects, Incur access tracking overhead",
        "pr_file_module": null
      },
      {
        "comment_id": "1316721560",
        "repo_full_name": "vuejs/core",
        "pr_number": 9051,
        "pr_file": "packages/reactivity/src/baseHandlers.ts",
        "discussion_id": "1316687423",
        "commented_code": "@@ -66,7 +66,7 @@ function createArrayInstrumentations() {\n       const res = arr[key](...args)\n       if (res === -1 || res === false) {\n         // if that didn't work, run it again using raw values.\n-        return arr[key](...args.map(toRaw))\n+        return arr[key](toRaw(args[0]), ...args.slice(1))",
        "comment_created_at": "2023-09-06T04:49:33+00:00",
        "comment_author": "chenfan0",
        "comment_body": "> I don't think this is necessary, because the parameters passed in by the user are uncontrollable. The parameters passed in by the user may all be responsive objects. Only use toRaw to process the first parameter. If the subsequent parameters are responsive objects, Incur access tracking overhead\r\n\r\nThe purpose here is to use the original value to re-check whether it exists, so only the first parameter needs to be toRaw, and other parameters do not require additional processing. At the same time, the modification here will not cause additional overhead, because before executing this code, it will execute `const res = arr[key](...args)`",
        "pr_file_module": null
      },
      {
        "comment_id": "1318042722",
        "repo_full_name": "vuejs/core",
        "pr_number": 9051,
        "pr_file": "packages/reactivity/src/baseHandlers.ts",
        "discussion_id": "1316687423",
        "commented_code": "@@ -66,7 +66,7 @@ function createArrayInstrumentations() {\n       const res = arr[key](...args)\n       if (res === -1 || res === false) {\n         // if that didn't work, run it again using raw values.\n-        return arr[key](...args.map(toRaw))\n+        return arr[key](toRaw(args[0]), ...args.slice(1))",
        "comment_created_at": "2023-09-07T03:26:02+00:00",
        "comment_author": "Jinjiang",
        "comment_body": "I think it would be great if we could add or point out a test case to clarify it further.",
        "pr_file_module": null
      },
      {
        "comment_id": "1318100277",
        "repo_full_name": "vuejs/core",
        "pr_number": 9051,
        "pr_file": "packages/reactivity/src/baseHandlers.ts",
        "discussion_id": "1316687423",
        "commented_code": "@@ -66,7 +66,7 @@ function createArrayInstrumentations() {\n       const res = arr[key](...args)\n       if (res === -1 || res === false) {\n         // if that didn't work, run it again using raw values.\n-        return arr[key](...args.map(toRaw))\n+        return arr[key](toRaw(args[0]), ...args.slice(1))",
        "comment_created_at": "2023-09-07T05:29:58+00:00",
        "comment_author": "chenfan0",
        "comment_body": "> I think it would be great if we could add or point out a test case to clarify it further.\r\n\r\n```\r\n// reactiveArray.spec.ts\r\ntest('Array identity methods should work with raw values', () => {\r\n    const raw = {}\r\n    const arr = reactive([{}, {}])\r\n    arr.push(raw)\r\n    expect(arr.indexOf(raw)).toBe(2)\r\n    expect(arr.indexOf(raw, 3)).toBe(-1)\r\n\r\n    // should work also for the observed version\r\n    const observed = arr[2]\r\n    expect(arr.indexOf(observed)).toBe(2)\r\n    expect(arr.indexOf(observed, 3)).toBe(-1)\r\n  })\r\n```\r\nif the code is \r\n```\r\narr.indexOf(observed, 3, anotherObserved, anotherObserved, anotherObserved, anotherObserved, anotherObserved)\r\n``` \r\nwe just need to use `toRaw` for the first param, and we dont need to use `toRaw` for `anotherObserved`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1641228462",
    "pr_number": 11145,
    "pr_file": "packages/reactivity/src/effect.ts",
    "created_at": "2024-06-15T15:03:30+00:00",
    "commented_code": ") {\n   pauseScheduling()\n   for (const effect of dep.keys()) {\n+    // dep.get(effect) is very expensive, we need to calculate it lazily and reuse the result\n+    let tracking: boolean | undefined\n+\n     if (!dep.computed && effect.computed) {\n-      if (dep.get(effect) === effect._trackId && effect._runnings > 0) {\n+      if (\n+        (tracking ??= dep.get(effect) === effect._trackId) &&\n+        effect._runnings > 0",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1641228462",
        "repo_full_name": "vuejs/core",
        "pr_number": 11145,
        "pr_file": "packages/reactivity/src/effect.ts",
        "discussion_id": "1641228462",
        "commented_code": "@@ -306,14 +306,19 @@ export function triggerEffects(\n ) {\n   pauseScheduling()\n   for (const effect of dep.keys()) {\n+    // dep.get(effect) is very expensive, we need to calculate it lazily and reuse the result\n+    let tracking: boolean | undefined\n+\n     if (!dep.computed && effect.computed) {\n-      if (dep.get(effect) === effect._trackId && effect._runnings > 0) {\n+      if (\n+        (tracking ??= dep.get(effect) === effect._trackId) &&\n+        effect._runnings > 0",
        "comment_created_at": "2024-06-15T15:03:30+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "Would it perhaps be better to check `_runnings` first, try to avoid calling `dep.get(effect)` at all?",
        "pr_file_module": null
      },
      {
        "comment_id": "1641231119",
        "repo_full_name": "vuejs/core",
        "pr_number": 11145,
        "pr_file": "packages/reactivity/src/effect.ts",
        "discussion_id": "1641228462",
        "commented_code": "@@ -306,14 +306,19 @@ export function triggerEffects(\n ) {\n   pauseScheduling()\n   for (const effect of dep.keys()) {\n+    // dep.get(effect) is very expensive, we need to calculate it lazily and reuse the result\n+    let tracking: boolean | undefined\n+\n     if (!dep.computed && effect.computed) {\n-      if (dep.get(effect) === effect._trackId && effect._runnings > 0) {\n+      if (\n+        (tracking ??= dep.get(effect) === effect._trackId) &&\n+        effect._runnings > 0",
        "comment_created_at": "2024-06-15T15:12:29+00:00",
        "comment_author": "jh-leong",
        "comment_body": "Thanks for pointing that out! I've made the changes.",
        "pr_file_module": null
      }
    ]
  }
]