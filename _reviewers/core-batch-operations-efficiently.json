[
  {
    "discussion_id": "2170069344",
    "pr_number": 147085,
    "pr_file": "homeassistant/components/hanna/sensor.py",
    "created_at": "2025-06-26T21:39:46+00:00",
    "commented_code": "+\"\"\"Hanna Instruments sensor integration for Home Assistant.\n+\n+This module provides sensor entities for various Hanna Instruments devices,\n+including pH, ORP, temperature, and chemical sensors. It uses the Hanna API\n+to fetch readings and updates them periodically.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Mapping\n+import logging\n+from typing import Any\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import UnitOfElectricPotential, UnitOfTemperature\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+from homeassistant.helpers.typing import UNDEFINED\n+\n+from .coordinator import HannaDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+SENSOR_DESCRIPTIONS = {\n+    \"ph\": SensorEntityDescription(\n+        key=\"ph\",\n+        name=\"pH value\",\n+        icon=\"mdi:water\",\n+        device_class=SensorDeviceClass.PH,\n+    ),\n+    \"orp\": SensorEntityDescription(\n+        key=\"orp\",\n+        name=\"Chlorine ORP value\",\n+        icon=\"mdi:flash\",\n+        device_class=SensorDeviceClass.VOLTAGE,\n+        native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\n+    ),\n+    \"temp\": SensorEntityDescription(\n+        key=\"temp\",\n+        name=\"Water Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"airTemp\": SensorEntityDescription(\n+        key=\"airTemp\",\n+        name=\"Air Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"acidBase\": SensorEntityDescription(\n+        key=\"acidBase\", name=\"pH Acid/Base Flow Rate\", icon=\"mdi:flask\"\n+    ),\n+    \"cl\": SensorEntityDescription(\n+        key=\"cl\", name=\"Chlorine Flow Rate\", icon=\"mdi:chemical-weapon\"\n+    ),\n+    \"phPumpColor\": SensorEntityDescription(\n+        key=\"phPumpColor\",\n+        name=\"pH Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"clPumpColor\": SensorEntityDescription(\n+        key=\"clPumpColor\",\n+        name=\"Chlorine Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"StatusColor\": SensorEntityDescription(\n+        key=\"StatusColor\",\n+        name=\"System Status\",\n+        icon=\"mdi:information\",\n+    ),\n+    \"ServiceColor\": SensorEntityDescription(\n+        key=\"ServiceColor\",\n+        name=\"Service Status\",\n+        icon=\"mdi:wrench\",\n+    ),\n+    \"alarms\": SensorEntityDescription(\n+        key=\"alarms\",\n+        name=\"Alarms\",\n+        icon=\"mdi:alert\",\n+    ),\n+}\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddConfigEntryEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up Hanna sensors from a config entry.\"\"\"\n+    device_coordinators = entry.runtime_data[\"device_coordinators\"]\n+\n+    for coordinator in device_coordinators.values():\n+        if not coordinator.readings:\n+            _LOGGER.warning(\"No data received for %s\", coordinator.device_identifier)\n+            continue\n+\n+        # Add parameter sensors\n+        param_sensors = []\n+        for parameter in coordinator.get_parameters():\n+            if description := SENSOR_DESCRIPTIONS.get(parameter[\"name\"]):\n+                param_sensors.append(HannaParamSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", parameter[\"name\"])\n+        if param_sensors:\n+            async_add_entities(param_sensors)\n+\n+        # Add status sensors\n+        status_sensors = []\n+        for sensor_name in coordinator.get_messages_value(\"status\"):\n+            if description := SENSOR_DESCRIPTIONS.get(sensor_name):\n+                status_sensors.append(HannaStatusSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", sensor_name)\n+        if status_sensors:\n+            async_add_entities(status_sensors)\n+\n+        # Add alarms sensor\n+        alarm_sensors = []\n+        alarm_sensors.append(\n+            HannaAlarmSensor(coordinator, SENSOR_DESCRIPTIONS[\"alarms\"])\n+        )\n+        if alarm_sensors:\n+            async_add_entities(alarm_sensors)",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2170069344",
        "repo_full_name": "home-assistant/core",
        "pr_number": 147085,
        "pr_file": "homeassistant/components/hanna/sensor.py",
        "discussion_id": "2170069344",
        "commented_code": "@@ -0,0 +1,292 @@\n+\"\"\"Hanna Instruments sensor integration for Home Assistant.\n+\n+This module provides sensor entities for various Hanna Instruments devices,\n+including pH, ORP, temperature, and chemical sensors. It uses the Hanna API\n+to fetch readings and updates them periodically.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Mapping\n+import logging\n+from typing import Any\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import UnitOfElectricPotential, UnitOfTemperature\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+from homeassistant.helpers.typing import UNDEFINED\n+\n+from .coordinator import HannaDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+SENSOR_DESCRIPTIONS = {\n+    \"ph\": SensorEntityDescription(\n+        key=\"ph\",\n+        name=\"pH value\",\n+        icon=\"mdi:water\",\n+        device_class=SensorDeviceClass.PH,\n+    ),\n+    \"orp\": SensorEntityDescription(\n+        key=\"orp\",\n+        name=\"Chlorine ORP value\",\n+        icon=\"mdi:flash\",\n+        device_class=SensorDeviceClass.VOLTAGE,\n+        native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\n+    ),\n+    \"temp\": SensorEntityDescription(\n+        key=\"temp\",\n+        name=\"Water Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"airTemp\": SensorEntityDescription(\n+        key=\"airTemp\",\n+        name=\"Air Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"acidBase\": SensorEntityDescription(\n+        key=\"acidBase\", name=\"pH Acid/Base Flow Rate\", icon=\"mdi:flask\"\n+    ),\n+    \"cl\": SensorEntityDescription(\n+        key=\"cl\", name=\"Chlorine Flow Rate\", icon=\"mdi:chemical-weapon\"\n+    ),\n+    \"phPumpColor\": SensorEntityDescription(\n+        key=\"phPumpColor\",\n+        name=\"pH Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"clPumpColor\": SensorEntityDescription(\n+        key=\"clPumpColor\",\n+        name=\"Chlorine Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"StatusColor\": SensorEntityDescription(\n+        key=\"StatusColor\",\n+        name=\"System Status\",\n+        icon=\"mdi:information\",\n+    ),\n+    \"ServiceColor\": SensorEntityDescription(\n+        key=\"ServiceColor\",\n+        name=\"Service Status\",\n+        icon=\"mdi:wrench\",\n+    ),\n+    \"alarms\": SensorEntityDescription(\n+        key=\"alarms\",\n+        name=\"Alarms\",\n+        icon=\"mdi:alert\",\n+    ),\n+}\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddConfigEntryEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up Hanna sensors from a config entry.\"\"\"\n+    device_coordinators = entry.runtime_data[\"device_coordinators\"]\n+\n+    for coordinator in device_coordinators.values():\n+        if not coordinator.readings:\n+            _LOGGER.warning(\"No data received for %s\", coordinator.device_identifier)\n+            continue\n+\n+        # Add parameter sensors\n+        param_sensors = []\n+        for parameter in coordinator.get_parameters():\n+            if description := SENSOR_DESCRIPTIONS.get(parameter[\"name\"]):\n+                param_sensors.append(HannaParamSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", parameter[\"name\"])\n+        if param_sensors:\n+            async_add_entities(param_sensors)\n+\n+        # Add status sensors\n+        status_sensors = []\n+        for sensor_name in coordinator.get_messages_value(\"status\"):\n+            if description := SENSOR_DESCRIPTIONS.get(sensor_name):\n+                status_sensors.append(HannaStatusSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", sensor_name)\n+        if status_sensors:\n+            async_add_entities(status_sensors)\n+\n+        # Add alarms sensor\n+        alarm_sensors = []\n+        alarm_sensors.append(\n+            HannaAlarmSensor(coordinator, SENSOR_DESCRIPTIONS[\"alarms\"])\n+        )\n+        if alarm_sensors:\n+            async_add_entities(alarm_sensors)",
        "comment_created_at": "2025-06-26T21:39:46+00:00",
        "comment_author": "joostlek",
        "comment_body": "We should collect all entities during initialisation and add them at once instead of calling async add entities multiple times",
        "pr_file_module": null
      },
      {
        "comment_id": "2216889211",
        "repo_full_name": "home-assistant/core",
        "pr_number": 147085,
        "pr_file": "homeassistant/components/hanna/sensor.py",
        "discussion_id": "2170069344",
        "commented_code": "@@ -0,0 +1,292 @@\n+\"\"\"Hanna Instruments sensor integration for Home Assistant.\n+\n+This module provides sensor entities for various Hanna Instruments devices,\n+including pH, ORP, temperature, and chemical sensors. It uses the Hanna API\n+to fetch readings and updates them periodically.\n+\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Mapping\n+import logging\n+from typing import Any\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import UnitOfElectricPotential, UnitOfTemperature\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+from homeassistant.helpers.typing import UNDEFINED\n+\n+from .coordinator import HannaDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+SENSOR_DESCRIPTIONS = {\n+    \"ph\": SensorEntityDescription(\n+        key=\"ph\",\n+        name=\"pH value\",\n+        icon=\"mdi:water\",\n+        device_class=SensorDeviceClass.PH,\n+    ),\n+    \"orp\": SensorEntityDescription(\n+        key=\"orp\",\n+        name=\"Chlorine ORP value\",\n+        icon=\"mdi:flash\",\n+        device_class=SensorDeviceClass.VOLTAGE,\n+        native_unit_of_measurement=UnitOfElectricPotential.MILLIVOLT,\n+    ),\n+    \"temp\": SensorEntityDescription(\n+        key=\"temp\",\n+        name=\"Water Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"airTemp\": SensorEntityDescription(\n+        key=\"airTemp\",\n+        name=\"Air Temperature\",\n+        icon=\"mdi:thermometer\",\n+        device_class=SensorDeviceClass.TEMPERATURE,\n+        native_unit_of_measurement=UnitOfTemperature.CELSIUS,\n+    ),\n+    \"acidBase\": SensorEntityDescription(\n+        key=\"acidBase\", name=\"pH Acid/Base Flow Rate\", icon=\"mdi:flask\"\n+    ),\n+    \"cl\": SensorEntityDescription(\n+        key=\"cl\", name=\"Chlorine Flow Rate\", icon=\"mdi:chemical-weapon\"\n+    ),\n+    \"phPumpColor\": SensorEntityDescription(\n+        key=\"phPumpColor\",\n+        name=\"pH Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"clPumpColor\": SensorEntityDescription(\n+        key=\"clPumpColor\",\n+        name=\"Chlorine Pump Status\",\n+        icon=\"mdi:pump\",\n+    ),\n+    \"StatusColor\": SensorEntityDescription(\n+        key=\"StatusColor\",\n+        name=\"System Status\",\n+        icon=\"mdi:information\",\n+    ),\n+    \"ServiceColor\": SensorEntityDescription(\n+        key=\"ServiceColor\",\n+        name=\"Service Status\",\n+        icon=\"mdi:wrench\",\n+    ),\n+    \"alarms\": SensorEntityDescription(\n+        key=\"alarms\",\n+        name=\"Alarms\",\n+        icon=\"mdi:alert\",\n+    ),\n+}\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddConfigEntryEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up Hanna sensors from a config entry.\"\"\"\n+    device_coordinators = entry.runtime_data[\"device_coordinators\"]\n+\n+    for coordinator in device_coordinators.values():\n+        if not coordinator.readings:\n+            _LOGGER.warning(\"No data received for %s\", coordinator.device_identifier)\n+            continue\n+\n+        # Add parameter sensors\n+        param_sensors = []\n+        for parameter in coordinator.get_parameters():\n+            if description := SENSOR_DESCRIPTIONS.get(parameter[\"name\"]):\n+                param_sensors.append(HannaParamSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", parameter[\"name\"])\n+        if param_sensors:\n+            async_add_entities(param_sensors)\n+\n+        # Add status sensors\n+        status_sensors = []\n+        for sensor_name in coordinator.get_messages_value(\"status\"):\n+            if description := SENSOR_DESCRIPTIONS.get(sensor_name):\n+                status_sensors.append(HannaStatusSensor(coordinator, description))\n+            else:\n+                _LOGGER.warning(\"No sensor description found for %s\", sensor_name)\n+        if status_sensors:\n+            async_add_entities(status_sensors)\n+\n+        # Add alarms sensor\n+        alarm_sensors = []\n+        alarm_sensors.append(\n+            HannaAlarmSensor(coordinator, SENSOR_DESCRIPTIONS[\"alarms\"])\n+        )\n+        if alarm_sensors:\n+            async_add_entities(alarm_sensors)",
        "comment_created_at": "2025-07-18T20:40:37+00:00",
        "comment_author": "bestycame",
        "comment_body": "Updated. Even more efficient! :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2225745676",
    "pr_number": 147085,
    "pr_file": "homeassistant/components/hanna/__init__.py",
    "created_at": "2025-07-23T14:12:25+00:00",
    "commented_code": "+\"\"\"The Hanna Instruments integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+from hanna_cloud import HannaCloudClient\n+\n+from homeassistant.const import Platform\n+from homeassistant.core import HomeAssistant\n+\n+from .const import HannaConfigEntry\n+from .coordinator import HannaDataCoordinator\n+\n+PLATFORMS = [Platform.SENSOR]\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: HannaConfigEntry) -> bool:\n+    \"\"\"Set up Hanna Instruments from a config entry.\"\"\"\n+    # Create a temporary API client to discover devices\n+\n+    api_client = HannaCloudClient()\n+    await hass.async_add_executor_job(\n+        api_client.authenticate,\n+        entry.data[\"email\"],\n+        entry.data[\"password\"],\n+        entry.data[\"code\"],\n+    )\n+\n+    # Get devices\n+    devices = await hass.async_add_executor_job(api_client.get_devices)",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2225745676",
        "repo_full_name": "home-assistant/core",
        "pr_number": 147085,
        "pr_file": "homeassistant/components/hanna/__init__.py",
        "discussion_id": "2225745676",
        "commented_code": "@@ -0,0 +1,62 @@\n+\"\"\"The Hanna Instruments integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+from hanna_cloud import HannaCloudClient\n+\n+from homeassistant.const import Platform\n+from homeassistant.core import HomeAssistant\n+\n+from .const import HannaConfigEntry\n+from .coordinator import HannaDataCoordinator\n+\n+PLATFORMS = [Platform.SENSOR]\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: HannaConfigEntry) -> bool:\n+    \"\"\"Set up Hanna Instruments from a config entry.\"\"\"\n+    # Create a temporary API client to discover devices\n+\n+    api_client = HannaCloudClient()\n+    await hass.async_add_executor_job(\n+        api_client.authenticate,\n+        entry.data[\"email\"],\n+        entry.data[\"password\"],\n+        entry.data[\"code\"],\n+    )\n+\n+    # Get devices\n+    devices = await hass.async_add_executor_job(api_client.get_devices)",
        "comment_created_at": "2025-07-23T14:12:25+00:00",
        "comment_author": "joostlek",
        "comment_body": "Switching from executor job to event loop is expensive, so let's make 1 function and call them in the same exectuor job",
        "pr_file_module": null
      },
      {
        "comment_id": "2228776450",
        "repo_full_name": "home-assistant/core",
        "pr_number": 147085,
        "pr_file": "homeassistant/components/hanna/__init__.py",
        "discussion_id": "2225745676",
        "commented_code": "@@ -0,0 +1,62 @@\n+\"\"\"The Hanna Instruments integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+from hanna_cloud import HannaCloudClient\n+\n+from homeassistant.const import Platform\n+from homeassistant.core import HomeAssistant\n+\n+from .const import HannaConfigEntry\n+from .coordinator import HannaDataCoordinator\n+\n+PLATFORMS = [Platform.SENSOR]\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: HannaConfigEntry) -> bool:\n+    \"\"\"Set up Hanna Instruments from a config entry.\"\"\"\n+    # Create a temporary API client to discover devices\n+\n+    api_client = HannaCloudClient()\n+    await hass.async_add_executor_job(\n+        api_client.authenticate,\n+        entry.data[\"email\"],\n+        entry.data[\"password\"],\n+        entry.data[\"code\"],\n+    )\n+\n+    # Get devices\n+    devices = await hass.async_add_executor_job(api_client.get_devices)",
        "comment_created_at": "2025-07-24T14:58:50+00:00",
        "comment_author": "bestycame",
        "comment_body": "Added a single function to authenticate and get the devices",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2062699291",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/coordinator.py",
    "created_at": "2025-04-27T18:56:55+00:00",
    "commented_code": "+\"\"\"Coordinator for Redgtech integration.\"\"\"\n+\n+import logging\n+import aiohttp\n+from datetime import timedelta\n+from dataclasses import dataclass\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import STATE_ON, STATE_OFF, CONF_ACCESS_TOKEN\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from redgtech_api.api import RedgtechAPI, RedgtechAuthError, RedgtechConnectionError\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.debug(\"Coordinator for Redgtech is being initialized.\")\n+\n+@dataclass\n+class RedgtechDevice:\n+    \"\"\"Representation of a Redgtech device.\"\"\"\n+    id: str\n+    name: str\n+    state: str\n+\n+class RedgtechConfigEntry(ConfigEntry):\n+    \"\"\"Custom ConfigEntry for Redgtech integration.\"\"\"\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator[list[RedgtechDevice]]):\n+    \"\"\"Coordinator to manage fetching data from the Redgtech API.\"\"\"\n+\n+    config_entry: RedgtechConfigEntry\n+\n+    def __init__(self, hass: HomeAssistant, config_entry: RedgtechConfigEntry):\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = RedgtechAPI()\n+        self.access_token = config_entry.data[CONF_ACCESS_TOKEN]\n+\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_method=self.fetch_data,\n+            update_interval=timedelta(seconds=60),\n+            config_entry=config_entry,\n+        )\n+\n+    async def login(self, email: str, password: str) -> str:\n+        \"\"\"Login to the Redgtech API and return the access token.\"\"\"\n+        try:\n+            access_token = await self.api.login(email, password)\n+            self.access_token = access_token\n+            return access_token\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error during login: %s\", e)\n+            raise ConfigEntryError(\"Unexpected error during login\") from e\n+\n+    async def fetch_data(self) -> list[RedgtechDevice]:\n+        \"\"\"Fetch data from the API on demand.\"\"\"\n+        _LOGGER.debug(\"Fetching data from Redgtech API on demand\")\n+        try:\n+            data = await self.api.get_data(self.access_token)\n+        except RedgtechAuthError:\n+            _LOGGER.warning(\"Access token expired, attempting to renew\")\n+            await self.renew_token(self.config_entry.data[\"email\"], self.config_entry.data[\"password\"])\n+            data = await self.api.get_data(self.access_token)\n+        except RedgtechConnectionError as e:\n+            _LOGGER.error(\"Connection error while fetching data: %s\", e)\n+            raise UpdateFailed(\"Failed to connect to Redgtech API\") from e\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error while fetching data: %s\", e)\n+            raise UpdateFailed(\"Unexpected error while fetching data\") from e\n+\n+        devices: list[RedgtechDevice] = []\n+\n+        for item in data[\"boards\"]:\n+            device = RedgtechDevice(\n+                id=item['endpointId'],\n+                name=item[\"friendlyName\"],\n+                state=STATE_ON if item[\"value\"] else STATE_OFF\n+            )\n+            _LOGGER.debug(\"Processing device: %s\", device)\n+            devices.append(device)\n+\n+        return devices\n+\n+    async def set_device_state(self, device_id: str, state: bool) -> None:\n+        \"\"\"Set the state of a device.\"\"\"\n+        _LOGGER.debug(\"Setting device state: %s to %s\", device_id, state)\n+        try:\n+            await self.api.set_switch_state(device_id, state, self.access_token)\n+        except RedgtechAuthError:\n+            _LOGGER.warning(\"Access token expired, attempting to renew\")\n+            await self.renew_token(self.config_entry.data[\"email\"], self.config_entry.data[\"password\"])\n+            await self.api.set_switch_state(device_id, state, self.access_token)\n+        except RedgtechConnectionError as e:\n+            _LOGGER.error(\"Connection error while setting device state: %s\", e)\n+            raise ConfigEntryError(\"Failed to set device state\") from e\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error setting device state: %s\", e)\n+            raise HomeAssistantError(\"Unexpected error setting device state\") from e\n+        _LOGGER.debug(\"Device state set successfully\")\n+        await self._async_update_data()",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2062699291",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/coordinator.py",
        "discussion_id": "2062699291",
        "commented_code": "@@ -0,0 +1,114 @@\n+\"\"\"Coordinator for Redgtech integration.\"\"\"\n+\n+import logging\n+import aiohttp\n+from datetime import timedelta\n+from dataclasses import dataclass\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import STATE_ON, STATE_OFF, CONF_ACCESS_TOKEN\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from redgtech_api.api import RedgtechAPI, RedgtechAuthError, RedgtechConnectionError\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+_LOGGER.debug(\"Coordinator for Redgtech is being initialized.\")\n+\n+@dataclass\n+class RedgtechDevice:\n+    \"\"\"Representation of a Redgtech device.\"\"\"\n+    id: str\n+    name: str\n+    state: str\n+\n+class RedgtechConfigEntry(ConfigEntry):\n+    \"\"\"Custom ConfigEntry for Redgtech integration.\"\"\"\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator[list[RedgtechDevice]]):\n+    \"\"\"Coordinator to manage fetching data from the Redgtech API.\"\"\"\n+\n+    config_entry: RedgtechConfigEntry\n+\n+    def __init__(self, hass: HomeAssistant, config_entry: RedgtechConfigEntry):\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = RedgtechAPI()\n+        self.access_token = config_entry.data[CONF_ACCESS_TOKEN]\n+\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_method=self.fetch_data,\n+            update_interval=timedelta(seconds=60),\n+            config_entry=config_entry,\n+        )\n+\n+    async def login(self, email: str, password: str) -> str:\n+        \"\"\"Login to the Redgtech API and return the access token.\"\"\"\n+        try:\n+            access_token = await self.api.login(email, password)\n+            self.access_token = access_token\n+            return access_token\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error during login: %s\", e)\n+            raise ConfigEntryError(\"Unexpected error during login\") from e\n+\n+    async def fetch_data(self) -> list[RedgtechDevice]:\n+        \"\"\"Fetch data from the API on demand.\"\"\"\n+        _LOGGER.debug(\"Fetching data from Redgtech API on demand\")\n+        try:\n+            data = await self.api.get_data(self.access_token)\n+        except RedgtechAuthError:\n+            _LOGGER.warning(\"Access token expired, attempting to renew\")\n+            await self.renew_token(self.config_entry.data[\"email\"], self.config_entry.data[\"password\"])\n+            data = await self.api.get_data(self.access_token)\n+        except RedgtechConnectionError as e:\n+            _LOGGER.error(\"Connection error while fetching data: %s\", e)\n+            raise UpdateFailed(\"Failed to connect to Redgtech API\") from e\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error while fetching data: %s\", e)\n+            raise UpdateFailed(\"Unexpected error while fetching data\") from e\n+\n+        devices: list[RedgtechDevice] = []\n+\n+        for item in data[\"boards\"]:\n+            device = RedgtechDevice(\n+                id=item['endpointId'],\n+                name=item[\"friendlyName\"],\n+                state=STATE_ON if item[\"value\"] else STATE_OFF\n+            )\n+            _LOGGER.debug(\"Processing device: %s\", device)\n+            devices.append(device)\n+\n+        return devices\n+\n+    async def set_device_state(self, device_id: str, state: bool) -> None:\n+        \"\"\"Set the state of a device.\"\"\"\n+        _LOGGER.debug(\"Setting device state: %s to %s\", device_id, state)\n+        try:\n+            await self.api.set_switch_state(device_id, state, self.access_token)\n+        except RedgtechAuthError:\n+            _LOGGER.warning(\"Access token expired, attempting to renew\")\n+            await self.renew_token(self.config_entry.data[\"email\"], self.config_entry.data[\"password\"])\n+            await self.api.set_switch_state(device_id, state, self.access_token)\n+        except RedgtechConnectionError as e:\n+            _LOGGER.error(\"Connection error while setting device state: %s\", e)\n+            raise ConfigEntryError(\"Failed to set device state\") from e\n+        except Exception as e:\n+            _LOGGER.error(\"Unexpected error setting device state: %s\", e)\n+            raise HomeAssistantError(\"Unexpected error setting device state\") from e\n+        _LOGGER.debug(\"Device state set successfully\")\n+        await self._async_update_data()",
        "comment_created_at": "2025-04-27T18:56:55+00:00",
        "comment_author": "zweckj",
        "comment_body": "why do you want a refresh here? Use `self.async_request_refresh` instead for a buffered refresh",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2235348674",
    "pr_number": 149479,
    "pr_file": "homeassistant/components/verisure/lock.py",
    "created_at": "2025-07-28T08:39:42+00:00",
    "commented_code": ".get(\"doorLockStateChangePollResult\", {})\n                 .get(\"result\")\n             )\n+            LOGGER.debug(\"Lock status is %s\", lock_status)\n         if lock_status == \"OK\":\n             self._state = state\n+            await self.coordinator.async_refresh()",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2235348674",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149479,
        "pr_file": "homeassistant/components/verisure/lock.py",
        "discussion_id": "2235348674",
        "commented_code": "@@ -172,8 +172,10 @@ async def async_set_lock_state(self, code: str, state: LockState) -> None:\n                 .get(\"doorLockStateChangePollResult\", {})\n                 .get(\"result\")\n             )\n+            LOGGER.debug(\"Lock status is %s\", lock_status)\n         if lock_status == \"OK\":\n             self._state = state\n+            await self.coordinator.async_refresh()",
        "comment_created_at": "2025-07-28T08:39:42+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\n            await self.coordinator.async_update_listeners()\n```\nyou already set the state, so do you really need a full refresh? I would assume informing the entity of the state change should be enough",
        "pr_file_module": null
      }
    ]
  }
]