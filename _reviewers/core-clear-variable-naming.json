[
  {
    "discussion_id": "2125747215",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/coordinator.py",
    "created_at": "2025-06-04T06:24:11+00:00",
    "commented_code": "+\"\"\"Coordinator for Redgtech integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from datetime import timedelta\n+from dataclasses import dataclass\n+from typing import TYPE_CHECKING\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import STATE_ON, STATE_OFF, CONF_ACCESS_TOKEN, CONF_EMAIL, CONF_PASSWORD\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError, ConfigEntryNotReady\n+from redgtech_api.api import RedgtechAPI, RedgtechAuthError, RedgtechConnectionError\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+@dataclass\n+class RedgtechDevice:\n+    \"\"\"Representation of a Redgtech device.\"\"\"\n+    id: str",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2125747215",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/coordinator.py",
        "discussion_id": "2125747215",
        "commented_code": "@@ -0,0 +1,99 @@\n+\"\"\"Coordinator for Redgtech integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from datetime import timedelta\n+from dataclasses import dataclass\n+from typing import TYPE_CHECKING\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import STATE_ON, STATE_OFF, CONF_ACCESS_TOKEN, CONF_EMAIL, CONF_PASSWORD\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError, ConfigEntryNotReady\n+from redgtech_api.api import RedgtechAPI, RedgtechAuthError, RedgtechConnectionError\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+@dataclass\n+class RedgtechDevice:\n+    \"\"\"Representation of a Redgtech device.\"\"\"\n+    id: str",
        "comment_created_at": "2025-06-04T06:24:11+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\r\n    unique_id: str\r\n```\r\n`id` is a built in function from python, let's not override that",
        "pr_file_module": null
      },
      {
        "comment_id": "2175557817",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/coordinator.py",
        "discussion_id": "2125747215",
        "commented_code": "@@ -0,0 +1,99 @@\n+\"\"\"Coordinator for Redgtech integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from datetime import timedelta\n+from dataclasses import dataclass\n+from typing import TYPE_CHECKING\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import STATE_ON, STATE_OFF, CONF_ACCESS_TOKEN, CONF_EMAIL, CONF_PASSWORD\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError, ConfigEntryNotReady\n+from redgtech_api.api import RedgtechAPI, RedgtechAuthError, RedgtechConnectionError\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+@dataclass\n+class RedgtechDevice:\n+    \"\"\"Representation of a Redgtech device.\"\"\"\n+    id: str",
        "comment_created_at": "2025-06-30T17:21:05+00:00",
        "comment_author": "Jonhsady",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163123815",
    "pr_number": 142994,
    "pr_file": "homeassistant/components/volvo/entity.py",
    "created_at": "2025-06-24T07:03:45+00:00",
    "commented_code": "+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2163123815",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-24T07:03:45+00:00",
        "comment_author": "zweckj",
        "comment_body": "why are you using an extra field here instead of just using the `key`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2166821078",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T14:10:03+00:00",
        "comment_author": "thomasddn",
        "comment_body": "Because the api fields are camelCase and the `key` is snake case",
        "pr_file_module": null
      },
      {
        "comment_id": "2167027671",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T15:35:45+00:00",
        "comment_author": "zweckj",
        "comment_body": "But what do you need a snakecase key for?",
        "pr_file_module": null
      },
      {
        "comment_id": "2167059448",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T15:50:22+00:00",
        "comment_author": "thomasddn",
        "comment_body": "It doesn\u2019t _need_ to be snake case, but the field is required and I thought snake case is the convention.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167087731",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T16:04:00+00:00",
        "comment_author": "zweckj",
        "comment_body": "It usually is, but since you need the camelcase for the library anyway, instead of managing duplicate information for no reason, I'd just use that for the key",
        "pr_file_module": null
      },
      {
        "comment_id": "2167286354",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T17:48:59+00:00",
        "comment_author": "gjohansson-ST",
        "comment_body": "I'd suggest we leave this as is. It doesn't create any overhead and we'd maintain our convention of using snake casing.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167310750",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T18:04:34+00:00",
        "comment_author": "zweckj",
        "comment_body": "> It doesn't create any overhead\r\n\r\nthat\u2019s exactly my point: it doesn\u2019t generate any value currently, we just have key and translation key twice being the same value, where key is not really used for anything ",
        "pr_file_module": null
      },
      {
        "comment_id": "2167724028",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-25T22:08:51+00:00",
        "comment_author": "gjohansson-ST",
        "comment_body": "Now I'm confused as I thought we are talking about the api field and not translation key?\n\nTranslation key must be snake case and since the convention is to use it also for key (for most things really) I think we should maintain that. But we could set translation key on the entity to the key and so skip in here in the entity description. \n\nAPI field is camel case referencing the what the api needs so we should leave that out and don't mix it with key (as it could also change somewhere down the line inflicting a bigger change than just a rename, who knows). ",
        "pr_file_module": null
      },
      {
        "comment_id": "2173230532",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/entity.py",
        "discussion_id": "2163123815",
        "commented_code": "@@ -0,0 +1,85 @@\n+\"\"\"Volvo entity classes.\"\"\"\n+\n+from abc import abstractmethod\n+from dataclasses import dataclass\n+\n+from volvocarsapi.models import VolvoCarsApiBaseModel\n+\n+from homeassistant.core import callback\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.entity import EntityDescription\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import CONF_VIN, DOMAIN, MANUFACTURER\n+from .coordinator import VolvoBaseCoordinator\n+\n+\n+def get_unique_id(vin: str, key: str) -> str:\n+    \"\"\"Get the unique ID.\"\"\"\n+    return f\"{vin}_{key}\".lower()\n+\n+\n+def value_to_translation_key(value: str) -> str:\n+    \"\"\"Make sure the translation key is valid.\"\"\"\n+    return value.lower()\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoEntityDescription(EntityDescription):\n+    \"\"\"Describes a Volvo entity.\"\"\"\n+\n+    api_field: str",
        "comment_created_at": "2025-06-28T12:38:32+00:00",
        "comment_author": "thomasddn",
        "comment_body": "`translation_key` is now set to `key` in `entity.py`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2234081415",
    "pr_number": 149484,
    "pr_file": "homeassistant/components/ituran/sensor.py",
    "created_at": "2025-07-27T18:09:11+00:00",
    "commented_code": "\"\"\"Describes Ituran sensor entity.\"\"\"\n \n     value_fn: Callable[[Vehicle], StateType | datetime]\n+    is_available: Callable[[Vehicle], bool] = lambda _: True",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2234081415",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149484,
        "pr_file": "homeassistant/components/ituran/sensor.py",
        "discussion_id": "2234081415",
        "commented_code": "@@ -33,6 +35,7 @@ class IturanSensorEntityDescription(SensorEntityDescription):\n     \"\"\"Describes Ituran sensor entity.\"\"\"\n \n     value_fn: Callable[[Vehicle], StateType | datetime]\n+    is_available: Callable[[Vehicle], bool] = lambda _: True",
        "comment_created_at": "2025-07-27T18:09:11+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\n    supported_fn: Callable[[Vehicle], bool] = lambda _: True\n```\notherwise it's too easy to mix it with entity availability, e.g. I was looking into where you're building your `available` property",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067452157",
    "pr_number": 142483,
    "pr_file": "homeassistant/components/matter/event.py",
    "created_at": "2025-04-29T21:24:44+00:00",
    "commented_code": "presses = (data.data or {}).get(\"totalNumberOfPressesCounted\", 1)\n             event_type = f\"multi_press_{presses}\"\n         else:\n-            event_type = EVENT_TYPES_MAP[data.event_id]\n+            event_type = GENERIC_SWITCH_EVENT_TYPES_MAP[data.event_id]\n \n         if event_type not in self.event_types:\n             # this should not happen, but guard for bad things\n             # some remotes send events that they do not report as supported (sigh...)\n             return\n \n+        # For each button interaction, generate two event. The first is a high-level event that enables triggering on any type of button interaction.\n+        # This first event also fixes an automation issue in which the state change trigger only picks up the event if the prior event\n+        # was different. By inserting the any_button_interaction, it ensures that that code never generates two of the same events in a row\n+        # the second event is more specific and conveys the specific interaction event.\n+        self._trigger_event(\"any_button_interaction\", data.data)\n+        self.async_write_ha_state()\n         # pass the rest of the data as-is (such as the advanced Position data)\n         self._trigger_event(event_type, data.data)\n         self.async_write_ha_state()\n \n \n+DoorLockFeature = clusters.DoorLock.Bitmaps.Feature\n+DOOR_LOCK_EVENT_TYPES = {\n+    # mapping from raw event id's to translation keys",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2067452157",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142483,
        "pr_file": "homeassistant/components/matter/event.py",
        "discussion_id": "2067452157",
        "commented_code": "@@ -116,18 +118,297 @@ def _on_matter_node_event(\n             presses = (data.data or {}).get(\"totalNumberOfPressesCounted\", 1)\n             event_type = f\"multi_press_{presses}\"\n         else:\n-            event_type = EVENT_TYPES_MAP[data.event_id]\n+            event_type = GENERIC_SWITCH_EVENT_TYPES_MAP[data.event_id]\n \n         if event_type not in self.event_types:\n             # this should not happen, but guard for bad things\n             # some remotes send events that they do not report as supported (sigh...)\n             return\n \n+        # For each button interaction, generate two event. The first is a high-level event that enables triggering on any type of button interaction.\n+        # This first event also fixes an automation issue in which the state change trigger only picks up the event if the prior event\n+        # was different. By inserting the any_button_interaction, it ensures that that code never generates two of the same events in a row\n+        # the second event is more specific and conveys the specific interaction event.\n+        self._trigger_event(\"any_button_interaction\", data.data)\n+        self.async_write_ha_state()\n         # pass the rest of the data as-is (such as the advanced Position data)\n         self._trigger_event(event_type, data.data)\n         self.async_write_ha_state()\n \n \n+DoorLockFeature = clusters.DoorLock.Bitmaps.Feature\n+DOOR_LOCK_EVENT_TYPES = {\n+    # mapping from raw event id's to translation keys",
        "comment_created_at": "2025-04-29T21:24:44+00:00",
        "comment_author": "marcelveldt",
        "comment_body": "translation keys are id's so lowercase, snake_case",
        "pr_file_module": null
      },
      {
        "comment_id": "2077320430",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142483,
        "pr_file": "homeassistant/components/matter/event.py",
        "discussion_id": "2067452157",
        "commented_code": "@@ -116,18 +118,297 @@ def _on_matter_node_event(\n             presses = (data.data or {}).get(\"totalNumberOfPressesCounted\", 1)\n             event_type = f\"multi_press_{presses}\"\n         else:\n-            event_type = EVENT_TYPES_MAP[data.event_id]\n+            event_type = GENERIC_SWITCH_EVENT_TYPES_MAP[data.event_id]\n \n         if event_type not in self.event_types:\n             # this should not happen, but guard for bad things\n             # some remotes send events that they do not report as supported (sigh...)\n             return\n \n+        # For each button interaction, generate two event. The first is a high-level event that enables triggering on any type of button interaction.\n+        # This first event also fixes an automation issue in which the state change trigger only picks up the event if the prior event\n+        # was different. By inserting the any_button_interaction, it ensures that that code never generates two of the same events in a row\n+        # the second event is more specific and conveys the specific interaction event.\n+        self._trigger_event(\"any_button_interaction\", data.data)\n+        self.async_write_ha_state()\n         # pass the rest of the data as-is (such as the advanced Position data)\n         self._trigger_event(event_type, data.data)\n         self.async_write_ha_state()\n \n \n+DoorLockFeature = clusters.DoorLock.Bitmaps.Feature\n+DOOR_LOCK_EVENT_TYPES = {\n+    # mapping from raw event id's to translation keys",
        "comment_created_at": "2025-05-07T10:26:54+00:00",
        "comment_author": "jvmahon",
        "comment_body": "I'll go back and fix all of this. It will take me a week (I'm currently traveling for work), but will let you know when I'm done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961156737",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/switch.py",
    "created_at": "2025-02-19T08:01:41+00:00",
    "commented_code": "+import logging\n+from datetime import timedelta\n+from homeassistant.components.switch import SwitchEntity\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from redgtech_api import RedgtechAPI\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(hass, config_entry, async_add_entities):\n+    \"\"\"Set up the switch platform.\"\"\"\n+    access_token = config_entry.data.get(\"access_token\")\n+    if not access_token:\n+        _LOGGER.error(\"No access token available\")\n+        return\n+\n+    api = RedgtechAPI(access_token)\n+    coordinator = RedgtechDataUpdateCoordinator(hass, api)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    entities = []\n+    if coordinator.data:\n+        existing_entities = hass.data.get(DOMAIN, {}).get(\"entities\", [])\n+        for item in coordinator.data.get(\"boards\", []):\n+            entity_id = item.get(\"endpointId\", \"\")\n+            if entity_id not in existing_entities:\n+                categories = item.get(\"displayCategories\", \"\")\n+                if \"SWITCH\" in categories:\n+                    entities.append(RedgtechSwitch(coordinator, item, api))\n+                    existing_entities.append(entity_id)\n+\n+        hass.data.setdefault(DOMAIN, {})[\"entities\"] = existing_entities\n+\n+    async_add_entities(entities)\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator):\n+    \"\"\"Class to manage fetching data from the API.\"\"\"\n+\n+    def __init__(self, hass, api):\n+        \"\"\"Initialize.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_interval=timedelta(seconds=1),\n+        )\n+\n+    async def _async_update_data(self):\n+        \"\"\"Fetch data from API.\"\"\"\n+        try:\n+            _LOGGER.debug(\"Fetching data from Redgtech API\")\n+            return await self.api.get_data()\n+        except Exception as e:\n+            raise UpdateFailed(f\"Error fetching data: {e}\")\n+\n+class RedgtechSwitch(SwitchEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    def __init__(self, coordinator, data, api):",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1961156737",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "1961156737",
        "commented_code": "@@ -0,0 +1,115 @@\n+import logging\n+from datetime import timedelta\n+from homeassistant.components.switch import SwitchEntity\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from redgtech_api import RedgtechAPI\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(hass, config_entry, async_add_entities):\n+    \"\"\"Set up the switch platform.\"\"\"\n+    access_token = config_entry.data.get(\"access_token\")\n+    if not access_token:\n+        _LOGGER.error(\"No access token available\")\n+        return\n+\n+    api = RedgtechAPI(access_token)\n+    coordinator = RedgtechDataUpdateCoordinator(hass, api)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    entities = []\n+    if coordinator.data:\n+        existing_entities = hass.data.get(DOMAIN, {}).get(\"entities\", [])\n+        for item in coordinator.data.get(\"boards\", []):\n+            entity_id = item.get(\"endpointId\", \"\")\n+            if entity_id not in existing_entities:\n+                categories = item.get(\"displayCategories\", \"\")\n+                if \"SWITCH\" in categories:\n+                    entities.append(RedgtechSwitch(coordinator, item, api))\n+                    existing_entities.append(entity_id)\n+\n+        hass.data.setdefault(DOMAIN, {})[\"entities\"] = existing_entities\n+\n+    async_add_entities(entities)\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator):\n+    \"\"\"Class to manage fetching data from the API.\"\"\"\n+\n+    def __init__(self, hass, api):\n+        \"\"\"Initialize.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_interval=timedelta(seconds=1),\n+        )\n+\n+    async def _async_update_data(self):\n+        \"\"\"Fetch data from API.\"\"\"\n+        try:\n+            _LOGGER.debug(\"Fetching data from Redgtech API\")\n+            return await self.api.get_data()\n+        except Exception as e:\n+            raise UpdateFailed(f\"Error fetching data: {e}\")\n+\n+class RedgtechSwitch(SwitchEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    def __init__(self, coordinator, data, api):",
        "comment_created_at": "2025-02-19T08:01:41+00:00",
        "comment_author": "zweckj",
        "comment_body": "please, actually read the items required by the quality scale.\r\n\r\nThis is missing a name and `_attr_has_entity_name = True`, which you'd know if you actually read those. It's also missing a unique id, all things explained in the quality scale.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039125992",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/switch.py",
    "created_at": "2025-04-11T09:02:21+00:00",
    "commented_code": "+import logging\n+from typing import Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.components.switch import SwitchEntity\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from homeassistant.exceptions import HomeAssistantError\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+\n+    coordinator = config_entry.runtime_data\n+\n+    switches = []\n+    for device in coordinator.data:\n+        switches.append(RedgtechSwitch(coordinator, device))\n+\n+    async_add_entities(switches)\n+\n+class RedgtechSwitch(CoordinatorEntity[RedgtechDataUpdateCoordinator], SwitchEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name: bool = True\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        super().__init__(coordinator)\n+        self.coordinator = coordinator\n+        self.device = device\n+        self.api: Any = coordinator.api\n+        self._state: bool = device.state == STATE_ON\n+        self._name: str = device.name\n+        self._endpoint_id: str = device.id\n+        self._attr_unique_id: str = f\"redgtech_{self._endpoint_id}\"\n+\n+    @property\n+    def name(self) -> str:\n+        \"\"\"Return the name of the switch.\"\"\"\n+        return self.device.name",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2039125992",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "2039125992",
        "commented_code": "@@ -0,0 +1,81 @@\n+import logging\n+from typing import Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.components.switch import SwitchEntity\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from homeassistant.exceptions import HomeAssistantError\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: ConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+\n+    coordinator = config_entry.runtime_data\n+\n+    switches = []\n+    for device in coordinator.data:\n+        switches.append(RedgtechSwitch(coordinator, device))\n+\n+    async_add_entities(switches)\n+\n+class RedgtechSwitch(CoordinatorEntity[RedgtechDataUpdateCoordinator], SwitchEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name: bool = True\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        super().__init__(coordinator)\n+        self.coordinator = coordinator\n+        self.device = device\n+        self.api: Any = coordinator.api\n+        self._state: bool = device.state == STATE_ON\n+        self._name: str = device.name\n+        self._endpoint_id: str = device.id\n+        self._attr_unique_id: str = f\"redgtech_{self._endpoint_id}\"\n+\n+    @property\n+    def name(self) -> str:\n+        \"\"\"Return the name of the switch.\"\"\"\n+        return self.device.name",
        "comment_created_at": "2025-04-11T09:02:21+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\r\n```\r\nis the switch the main feature of the device? If yes, set `_attr_entity_name` to `None`, so it'll follow the device name (which you have to define as `_attr_device_info`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2088552214",
    "pr_number": 139925,
    "pr_file": "homeassistant/components/fluss/button.py",
    "created_at": "2025-05-14T09:54:59+00:00",
    "commented_code": "+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2088552214",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/button.py",
        "discussion_id": "2088552214",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):",
        "comment_created_at": "2025-05-14T09:54:59+00:00",
        "comment_author": "joostlek",
        "comment_body": "Entities should use `_attr_has_entity_name = True`",
        "pr_file_module": null
      },
      {
        "comment_id": "2092975740",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/button.py",
        "discussion_id": "2088552214",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):",
        "comment_created_at": "2025-05-16T12:43:08+00:00",
        "comment_author": "Marcello17",
        "comment_body": "added _`attr_has_entity_name = True`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2088553274",
    "pr_number": 139925,
    "pr_file": "homeassistant/components/fluss/button.py",
    "created_at": "2025-05-14T09:55:26+00:00",
    "commented_code": "+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):\n+    \"\"\"Representation of a Fluss button device.\"\"\"\n+\n+    def __init__(self, coordinator: FlussDataUpdateCoordinator, device: dict) -> None:\n+        \"\"\"Initialize the button.\"\"\"\n+        if \"deviceId\" not in device:\n+            raise ValueError(\"Device missing required 'deviceId' attribute.\")\n+\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._name = device.get(\"deviceName\", \"Unknown Device\")\n+        self._attr_unique_id = f\"fluss_{device['deviceId']}\"",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2088553274",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/button.py",
        "discussion_id": "2088553274",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):\n+    \"\"\"Representation of a Fluss button device.\"\"\"\n+\n+    def __init__(self, coordinator: FlussDataUpdateCoordinator, device: dict) -> None:\n+        \"\"\"Initialize the button.\"\"\"\n+        if \"deviceId\" not in device:\n+            raise ValueError(\"Device missing required 'deviceId' attribute.\")\n+\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._name = device.get(\"deviceName\", \"Unknown Device\")\n+        self._attr_unique_id = f\"fluss_{device['deviceId']}\"",
        "comment_created_at": "2025-05-14T09:55:26+00:00",
        "comment_author": "joostlek",
        "comment_body": "no need to add the `fluss_` prefix as a unique id is unique per domain per platform",
        "pr_file_module": null
      },
      {
        "comment_id": "2092975118",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/button.py",
        "discussion_id": "2088553274",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Support for Fluss Devices.\"\"\"\n+\n+from datetime import timedelta\n+import logging\n+from typing import Any\n+\n+from fluss_api.main import FlussApiClient\n+\n+from homeassistant.components.button import ButtonEntity\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from homeassistant.util import slugify\n+\n+_LOGGER = logging.getLogger(__package__)\n+DEFAULT_NAME = \"Fluss +\"\n+UPDATE_INTERVAL = 60\n+\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant,\n+    entry: ConfigEntry,\n+    async_add_entities: AddEntitiesCallback,\n+) -> None:\n+    \"\"\"Set up the Fluss Devices.\"\"\"\n+    api: FlussApiClient = entry.runtime_data\n+    api_key: str = entry.data[CONF_API_KEY]\n+\n+    coordinator = FlussDataUpdateCoordinator(hass, api, api_key)\n+    await coordinator.async_config_entry_first_refresh()\n+\n+    async_add_entities(\n+        FlussButton(coordinator, device)\n+        for device in coordinator.data[\"devices\"]\n+        if isinstance(device, dict)\n+    )\n+\n+\n+class FlussDataUpdateCoordinator(DataUpdateCoordinator[dict[str, Any]]):\n+    \"\"\"Class to manage fetching Fluss device data.\"\"\"\n+\n+    def __init__(self, hass: HomeAssistant, api: FlussApiClient, api_key: str) -> None:\n+        \"\"\"Initialize the coordinator.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=f\"Fluss+ ({slugify(api_key[:8])})\",\n+            update_interval=timedelta(seconds=UPDATE_INTERVAL),\n+        )\n+\n+    async def _async_update_data(self) -> dict[str, Any]:\n+        \"\"\"Fetch data from the Fluss API.\"\"\"\n+        try:\n+            return await self.api.async_get_devices()\n+        except Exception as err:\n+            raise UpdateFailed(f\"Error fetching Fluss data: {err}\") from err\n+\n+\n+class FlussButton(ButtonEntity):\n+    \"\"\"Representation of a Fluss button device.\"\"\"\n+\n+    def __init__(self, coordinator: FlussDataUpdateCoordinator, device: dict) -> None:\n+        \"\"\"Initialize the button.\"\"\"\n+        if \"deviceId\" not in device:\n+            raise ValueError(\"Device missing required 'deviceId' attribute.\")\n+\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._name = device.get(\"deviceName\", \"Unknown Device\")\n+        self._attr_unique_id = f\"fluss_{device['deviceId']}\"",
        "comment_created_at": "2025-05-16T12:42:43+00:00",
        "comment_author": "Marcello17",
        "comment_body": "Changed to `self._attr_unique_id = str(device[\"deviceId\"])`",
        "pr_file_module": null
      }
    ]
  }
]