[
  {
    "discussion_id": "111089859",
    "pr_number": 535,
    "pr_file": "src/Session/Store.js",
    "created_at": "2017-04-12T08:24:18+00:00",
    "commented_code": "}\n \n   /** if parsed do not re parse */\n-  if (typeof (pair.d) === pair.t.toLowerCase()) {\n+  if (typeof (pair.d) === pair.t.toLowerCase()) { // eslint-disable-line valid-typeof",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "111089859",
        "repo_full_name": "adonisjs/core",
        "pr_number": 535,
        "pr_file": "src/Session/Store.js",
        "discussion_id": "111089859",
        "commented_code": "@@ -90,7 +90,7 @@ Store.unGuardPair = function (pair) {\n   }\n \n   /** if parsed do not re parse */\n-  if (typeof (pair.d) === pair.t.toLowerCase()) {\n+  if (typeof (pair.d) === pair.t.toLowerCase()) { // eslint-disable-line valid-typeof",
        "comment_created_at": "2017-04-12T08:24:18+00:00",
        "comment_author": "webdevian",
        "comment_body": "Only one line that I couldn't find a workaround for - src/Session/Store.js:93 valid-typeof rule\r\nhttp://eslint.org/docs/rules/valid-typeof",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "55144658",
    "pr_number": 113,
    "pr_file": "src/Encryption/index.js",
    "created_at": "2016-03-06T17:34:33+00:00",
    "commented_code": "*\n    * @public\n    */\n-  decrypt (value, encoding) {\n+  decrypt (payload, encoding) {\n     encoding = encoding || 'utf8'\n-    const decipher = crypto.createDecipher(this.algorithm, this.appKey)\n-    decipher.update(value, 'hex', encoding)\n-    return decipher.final(encoding)\n+    payload = this.getJsonPayload(payload)\n+\n+    let iv = this.base64Decode(payload.iv, true)\n+\n+    let decipher = crypto.createDecipheriv(this.algorithm, this.appKey, iv)\n+    var decrypted = decipher.update(payload.value, 'base64', encoding)\n+    decrypted += decipher.final(encoding)\n+\n+    if (!decrypted) {\n+      throw new Error('Could not decrypt the data.')\n+    }\n+    return decrypted\n+  }\n+\n+  /**\n+   * get the JSON object from the given payload\n+   *\n+   * @param  {String} payload\n+   * @return {Mixed}\n+   */\n+  getJsonPayload (payload) {\n+    payload = JSON.parse(this.base64Decode(payload))\n+    // If the payload is not valid JSON or does not have the proper keys set we will\n+    // assume it is invalid and bail out of the routine since we will not be able\n+    // to decrypt the given value. We'll also check the MAC for this encryption.\n+    if (!payload || this.invalidPayload(payload)) {\n+      throw new Error('The payload is invalid.')\n+    }\n+    if (!this.validMac(payload)) {\n+      throw new Error('The MAC is invalid.')\n+    }\n+    return payload\n+  }\n+\n+  /**\n+   * Create a MAC for the given value\n+   *\n+   * @param  {String} iv\n+   * @param  {String} value\n+   * @return {String}\n+   */\n+  hash (iv, value) {\n+    return this.hashHmac('sha256', iv + value, this.appKey)\n+  }\n+\n+  /**\n+   * Generate a keyed hash value using the HMAC method\n+   *\n+   * @param  {String} algo\n+   * @param  {String} data\n+   * @param  {String} key\n+   * @return {String}\n+   */\n+  hashHmac (algo, data, key) {\n+    return crypto.createHmac(algo, key).update(data).digest('hex')\n+  }\n+\n+  /**\n+   * returns encoded base64 string\n+   *\n+   * @param  {String} unencoded\n+   * @return {String}\n+   */\n+  base64Encode (unencoded) {\n+    return new Buffer(unencoded || '').toString('base64')\n+  }\n+\n+  /**\n+   * returns decoded base64 string/buffer\n+   *\n+   * @param  {String} encoded\n+   * @param  {Boolean} raw\n+   * @return {Mixed}\n+   */\n+  base64Decode (encoded, raw) {\n+    if (raw) {\n+      return new Buffer(encoded || '', 'base64')\n+    }\n+    return new Buffer(encoded || '', 'base64').toString('utf8')\n+  }\n+\n+  /**\n+   * Verify that the encryption payload is valid.\n+   *\n+   * @param  {Mixed} data\n+   * @return {Boolean}\n+   */\n+  invalidPayload (data) {\n+    return typeof data !== 'object' || !data.hasOwnProperty('iv') || !data.hasOwnProperty('value') || !data.hasOwnProperty('mac')\n+  }\n+\n+  /**\n+   * Determine if the MAC for the given payload is valid\n+   *\n+   * @param  object payload\n+   * @return {Boolean}\n+   */\n+  validMac (payload) {\n+    let bytes = crypto.randomBytes(this.getIvSize())",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "55144658",
        "repo_full_name": "adonisjs/core",
        "pr_number": 113,
        "pr_file": "src/Encryption/index.js",
        "discussion_id": "55144658",
        "commented_code": "@@ -62,11 +76,118 @@ class Encryption {\n    *\n    * @public\n    */\n-  decrypt (value, encoding) {\n+  decrypt (payload, encoding) {\n     encoding = encoding || 'utf8'\n-    const decipher = crypto.createDecipher(this.algorithm, this.appKey)\n-    decipher.update(value, 'hex', encoding)\n-    return decipher.final(encoding)\n+    payload = this.getJsonPayload(payload)\n+\n+    let iv = this.base64Decode(payload.iv, true)\n+\n+    let decipher = crypto.createDecipheriv(this.algorithm, this.appKey, iv)\n+    var decrypted = decipher.update(payload.value, 'base64', encoding)\n+    decrypted += decipher.final(encoding)\n+\n+    if (!decrypted) {\n+      throw new Error('Could not decrypt the data.')\n+    }\n+    return decrypted\n+  }\n+\n+  /**\n+   * get the JSON object from the given payload\n+   *\n+   * @param  {String} payload\n+   * @return {Mixed}\n+   */\n+  getJsonPayload (payload) {\n+    payload = JSON.parse(this.base64Decode(payload))\n+    // If the payload is not valid JSON or does not have the proper keys set we will\n+    // assume it is invalid and bail out of the routine since we will not be able\n+    // to decrypt the given value. We'll also check the MAC for this encryption.\n+    if (!payload || this.invalidPayload(payload)) {\n+      throw new Error('The payload is invalid.')\n+    }\n+    if (!this.validMac(payload)) {\n+      throw new Error('The MAC is invalid.')\n+    }\n+    return payload\n+  }\n+\n+  /**\n+   * Create a MAC for the given value\n+   *\n+   * @param  {String} iv\n+   * @param  {String} value\n+   * @return {String}\n+   */\n+  hash (iv, value) {\n+    return this.hashHmac('sha256', iv + value, this.appKey)\n+  }\n+\n+  /**\n+   * Generate a keyed hash value using the HMAC method\n+   *\n+   * @param  {String} algo\n+   * @param  {String} data\n+   * @param  {String} key\n+   * @return {String}\n+   */\n+  hashHmac (algo, data, key) {\n+    return crypto.createHmac(algo, key).update(data).digest('hex')\n+  }\n+\n+  /**\n+   * returns encoded base64 string\n+   *\n+   * @param  {String} unencoded\n+   * @return {String}\n+   */\n+  base64Encode (unencoded) {\n+    return new Buffer(unencoded || '').toString('base64')\n+  }\n+\n+  /**\n+   * returns decoded base64 string/buffer\n+   *\n+   * @param  {String} encoded\n+   * @param  {Boolean} raw\n+   * @return {Mixed}\n+   */\n+  base64Decode (encoded, raw) {\n+    if (raw) {\n+      return new Buffer(encoded || '', 'base64')\n+    }\n+    return new Buffer(encoded || '', 'base64').toString('utf8')\n+  }\n+\n+  /**\n+   * Verify that the encryption payload is valid.\n+   *\n+   * @param  {Mixed} data\n+   * @return {Boolean}\n+   */\n+  invalidPayload (data) {\n+    return typeof data !== 'object' || !data.hasOwnProperty('iv') || !data.hasOwnProperty('value') || !data.hasOwnProperty('mac')\n+  }\n+\n+  /**\n+   * Determine if the MAC for the given payload is valid\n+   *\n+   * @param  object payload\n+   * @return {Boolean}\n+   */\n+  validMac (payload) {\n+    let bytes = crypto.randomBytes(this.getIvSize())",
        "comment_created_at": "2016-03-06T17:34:33+00:00",
        "comment_author": "houndci-bot",
        "comment_body": "'let' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).<br>Missing semicolon.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "47249381",
    "pr_number": 32,
    "pr_file": "src/Session/SessionManager/index.js",
    "created_at": "2015-12-10T16:34:17+00:00",
    "commented_code": "}\n \n \t\t/**\n-\t\t * generating cookie string to push to cookies \n+\t\t * generating cookie string to push to cookies\n \t\t * which will be used by response object\n \t\t * while making response\n \t\t * @type {Object}\n \t\t */\n-\t\tconst session = {key:this.constructor.sessionKey,value:sessionId}\n+\t\tconst session = {key:this.constructor.sessionKey,value:sessionId, options}",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "47249381",
        "repo_full_name": "adonisjs/core",
        "pr_number": 32,
        "pr_file": "src/Session/SessionManager/index.js",
        "discussion_id": "47249381",
        "commented_code": "@@ -172,15 +173,15 @@ class SessionManager {\n \t\t}\n \n \t\t/**\n-\t\t * generating cookie string to push to cookies \n+\t\t * generating cookie string to push to cookies\n \t\t * which will be used by response object\n \t\t * while making response\n \t\t * @type {Object}\n \t\t */\n-\t\tconst session = {key:this.constructor.sessionKey,value:sessionId}\n+\t\tconst session = {key:this.constructor.sessionKey,value:sessionId, options}",
        "comment_created_at": "2015-12-10T16:34:17+00:00",
        "comment_author": "houndci-bot",
        "comment_body": "Line is too long.<br>'const' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).<br>'object short notation' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).<br>Missing semicolon.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "46758253",
    "pr_number": 25,
    "pr_file": "test/integration/basic-server.spec.js",
    "created_at": "2015-12-05T13:19:28+00:00",
    "commented_code": "let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {\n+  return new Promise(function(resolve, reject) {\n+    if (!timeout) {\n+      resolve(data);\n+    } else {\n+      setTimeout(function() {\n         resolve(data);\n-      }else{\n-        setTimeout(function(){\n-          resolve(data);\n-        },timeout);\n-      }\n-    });\n-  }\n+      }, timeout);\n+    }\n+  });\n+}\n \n-  describe(\"Basic Http Server\", function() {\n+describe(\"Basic Http Server\", function() {\n \n-    before(function(done){\n+  before(function(done) {\n \n-      this.timeout(5000)\n+    this.timeout(5000)\n \n-      Helpers.load(path.join(__dirname,'./package.json'))\n-      let env = new Env(Helpers)\n-      let namespace = new Namespace(env,Helpers)\n+    Helpers.load(path.join(__dirname, './package.json'))\n+    let env = new Env(Helpers)\n+    let namespace = new Namespace(env, Helpers)",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "46758253",
        "repo_full_name": "adonisjs/core",
        "pr_number": 25,
        "pr_file": "test/integration/basic-server.spec.js",
        "discussion_id": "46758253",
        "commented_code": "@@ -27,56 +27,56 @@ const Static = Dispatcher.Static\n let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {\n+  return new Promise(function(resolve, reject) {\n+    if (!timeout) {\n+      resolve(data);\n+    } else {\n+      setTimeout(function() {\n         resolve(data);\n-      }else{\n-        setTimeout(function(){\n-          resolve(data);\n-        },timeout);\n-      }\n-    });\n-  }\n+      }, timeout);\n+    }\n+  });\n+}\n \n-  describe(\"Basic Http Server\", function() {\n+describe(\"Basic Http Server\", function() {\n \n-    before(function(done){\n+  before(function(done) {\n \n-      this.timeout(5000)\n+    this.timeout(5000)\n \n-      Helpers.load(path.join(__dirname,'./package.json'))\n-      let env = new Env(Helpers)\n-      let namespace = new Namespace(env,Helpers)\n+    Helpers.load(path.join(__dirname, './package.json'))\n+    let env = new Env(Helpers)\n+    let namespace = new Namespace(env, Helpers)",
        "comment_created_at": "2015-12-05T13:19:28+00:00",
        "comment_author": "houndci-bot",
        "comment_body": "'let' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).<br>Missing semicolon.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "46758254",
    "pr_number": 25,
    "pr_file": "test/integration/basic-server.spec.js",
    "created_at": "2015-12-05T13:19:28+00:00",
    "commented_code": "let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {\n+  return new Promise(function(resolve, reject) {\n+    if (!timeout) {\n+      resolve(data);\n+    } else {\n+      setTimeout(function() {\n         resolve(data);\n-      }else{\n-        setTimeout(function(){\n-          resolve(data);\n-        },timeout);\n-      }\n-    });\n-  }\n+      }, timeout);\n+    }\n+  });\n+}\n \n-  describe(\"Basic Http Server\", function() {\n+describe(\"Basic Http Server\", function() {\n \n-    before(function(done){\n+  before(function(done) {\n \n-      this.timeout(5000)\n+    this.timeout(5000)\n \n-      Helpers.load(path.join(__dirname,'./package.json'))\n-      let env = new Env(Helpers)\n-      let namespace = new Namespace(env,Helpers)\n+    Helpers.load(path.join(__dirname, './package.json'))\n+    let env = new Env(Helpers)",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "46758254",
        "repo_full_name": "adonisjs/core",
        "pr_number": 25,
        "pr_file": "test/integration/basic-server.spec.js",
        "discussion_id": "46758254",
        "commented_code": "@@ -27,56 +27,56 @@ const Static = Dispatcher.Static\n let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {\n+  return new Promise(function(resolve, reject) {\n+    if (!timeout) {\n+      resolve(data);\n+    } else {\n+      setTimeout(function() {\n         resolve(data);\n-      }else{\n-        setTimeout(function(){\n-          resolve(data);\n-        },timeout);\n-      }\n-    });\n-  }\n+      }, timeout);\n+    }\n+  });\n+}\n \n-  describe(\"Basic Http Server\", function() {\n+describe(\"Basic Http Server\", function() {\n \n-    before(function(done){\n+  before(function(done) {\n \n-      this.timeout(5000)\n+    this.timeout(5000)\n \n-      Helpers.load(path.join(__dirname,'./package.json'))\n-      let env = new Env(Helpers)\n-      let namespace = new Namespace(env,Helpers)\n+    Helpers.load(path.join(__dirname, './package.json'))\n+    let env = new Env(Helpers)",
        "comment_created_at": "2015-12-05T13:19:28+00:00",
        "comment_author": "houndci-bot",
        "comment_body": "'let' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).<br>Missing semicolon.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "46758261",
    "pr_number": 25,
    "pr_file": "test/integration/basic-server.spec.js",
    "created_at": "2015-12-05T13:19:29+00:00",
    "commented_code": "let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "46758261",
        "repo_full_name": "adonisjs/core",
        "pr_number": 25,
        "pr_file": "test/integration/basic-server.spec.js",
        "discussion_id": "46758261",
        "commented_code": "@@ -27,56 +27,56 @@ const Static = Dispatcher.Static\n let server = null\n \n \n-  let getData = function(data,timeout) {\n-    return new Promise(function(resolve, reject) {\n-      if (!timeout) {\n+let getData = function(data, timeout) {",
        "comment_created_at": "2015-12-05T13:19:29+00:00",
        "comment_author": "houndci-bot",
        "comment_body": "'let' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).\n",
        "pr_file_module": null
      }
    ]
  }
]