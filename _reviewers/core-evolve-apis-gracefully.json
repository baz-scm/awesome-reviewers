[
  {
    "discussion_id": "1308882004",
    "pr_number": 9069,
    "pr_file": "packages/shared/src/globalsAllowList.ts",
    "created_at": "2023-08-29T14:08:18+00:00",
    "commented_code": "import { makeMap } from './makeMap'\n \n-const GLOBALS_ALLOWED =\n-  'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\n-  'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\n-  'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console'\n+// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n+const GLOBAL_SIMPLE_VALUE = 'globalThis,Infinity,NaN,undefined'\n+const FUNCTION =\n+  'eval,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent'\n+const FUNDAMENTAL = 'Object,Function,Boolean,Symbol'\n+const ERROR =\n+  'Error,AggregateError,EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError'\n+const NUMBER_AND_DATES = 'Math,BigInt,Number,Date'\n+const TEXT = 'String,RegExp'\n+const INDEXED_COLLECTIONS =\n+  'Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,BigInt64Array,BigUint64Array,Float32Array,Float64Array'\n+const KEYED_COLLECTIONS = 'Map,Set,WeakMap,WeakSet'\n+const STRUCTURED_DATA = 'ArrayBuffer,SharedArrayBuffer,DataView,Atomics,JSON'\n+const MANAGING_MEMORY = 'WeakRef,FinalizationRegistry'\n+const CONTROL_ABSTRACTION_OBJECTS =\n+  'Iterator,AsyncIterator,Promise,GeneratorFunction,AsyncGeneratorFunction,Generator,AsyncGenerator,AsyncFunction'\n+const Reflection = 'Reflect,Proxy'\n+const INTERNATIONALIZATION = 'Intl'\n+const OTHER_GLOBALS_ALLOWED = 'console'\n \n-export const isGloballyAllowed = /*#__PURE__*/ makeMap(GLOBALS_ALLOWED)\n+const GLOBALS_ALLOWED = [\n+  GLOBAL_SIMPLE_VALUE,\n+  FUNCTION,\n+  FUNDAMENTAL,\n+  ERROR,\n+  NUMBER_AND_DATES,\n+  TEXT,\n+  INDEXED_COLLECTIONS,\n+  KEYED_COLLECTIONS,\n+  STRUCTURED_DATA,\n+  MANAGING_MEMORY,\n+  CONTROL_ABSTRACTION_OBJECTS,\n+  Reflection,\n+  INTERNATIONALIZATION,\n+  OTHER_GLOBALS_ALLOWED\n+].join(',')\n \n-/** @deprecated use `isGloballyAllowed` instead */\n-export const isGloballyWhitelisted = isGloballyAllowed\n+export const isGloballyAllowed = /*#__PURE__*/ makeMap(GLOBALS_ALLOWED)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1308882004",
        "repo_full_name": "vuejs/core",
        "pr_number": 9069,
        "pr_file": "packages/shared/src/globalsAllowList.ts",
        "discussion_id": "1308882004",
        "commented_code": "@@ -1,11 +1,40 @@\n import { makeMap } from './makeMap'\n \n-const GLOBALS_ALLOWED =\n-  'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\n-  'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\n-  'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console'\n+// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n+const GLOBAL_SIMPLE_VALUE = 'globalThis,Infinity,NaN,undefined'\n+const FUNCTION =\n+  'eval,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent'\n+const FUNDAMENTAL = 'Object,Function,Boolean,Symbol'\n+const ERROR =\n+  'Error,AggregateError,EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError'\n+const NUMBER_AND_DATES = 'Math,BigInt,Number,Date'\n+const TEXT = 'String,RegExp'\n+const INDEXED_COLLECTIONS =\n+  'Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,BigInt64Array,BigUint64Array,Float32Array,Float64Array'\n+const KEYED_COLLECTIONS = 'Map,Set,WeakMap,WeakSet'\n+const STRUCTURED_DATA = 'ArrayBuffer,SharedArrayBuffer,DataView,Atomics,JSON'\n+const MANAGING_MEMORY = 'WeakRef,FinalizationRegistry'\n+const CONTROL_ABSTRACTION_OBJECTS =\n+  'Iterator,AsyncIterator,Promise,GeneratorFunction,AsyncGeneratorFunction,Generator,AsyncGenerator,AsyncFunction'\n+const Reflection = 'Reflect,Proxy'\n+const INTERNATIONALIZATION = 'Intl'\n+const OTHER_GLOBALS_ALLOWED = 'console'\n \n-export const isGloballyAllowed = /*#__PURE__*/ makeMap(GLOBALS_ALLOWED)\n+const GLOBALS_ALLOWED = [\n+  GLOBAL_SIMPLE_VALUE,\n+  FUNCTION,\n+  FUNDAMENTAL,\n+  ERROR,\n+  NUMBER_AND_DATES,\n+  TEXT,\n+  INDEXED_COLLECTIONS,\n+  KEYED_COLLECTIONS,\n+  STRUCTURED_DATA,\n+  MANAGING_MEMORY,\n+  CONTROL_ABSTRACTION_OBJECTS,\n+  Reflection,\n+  INTERNATIONALIZATION,\n+  OTHER_GLOBALS_ALLOWED\n+].join(',')\n \n-/** @deprecated use `isGloballyAllowed` instead */\n-export const isGloballyWhitelisted = isGloballyAllowed\n+export const isGloballyAllowed = /*#__PURE__*/ makeMap(GLOBALS_ALLOWED)",
        "comment_created_at": "2023-08-29T14:08:18+00:00",
        "comment_author": "sxzz",
        "comment_body": "Please keep `isGloballyWhitelisted` for avoiding breaking change.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1599441110",
    "pr_number": 10938,
    "pr_file": "packages/runtime-dom/src/jsx.ts",
    "created_at": "2024-05-14T06:20:31+00:00",
    "commented_code": "export interface DetailsHTMLAttributes extends HTMLAttributes {\n   open?: Booleanish\n-  onToggle?: Event\n+  onToggle?: (payload: MouseEvent) => void",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1599441110",
        "repo_full_name": "vuejs/core",
        "pr_number": 10938,
        "pr_file": "packages/runtime-dom/src/jsx.ts",
        "discussion_id": "1599441110",
        "commented_code": "@@ -406,7 +406,7 @@ export interface DataHTMLAttributes extends HTMLAttributes {\n \n export interface DetailsHTMLAttributes extends HTMLAttributes {\n   open?: Booleanish\n-  onToggle?: Event\n+  onToggle?: (payload: MouseEvent) => void",
        "comment_created_at": "2024-05-14T06:20:31+00:00",
        "comment_author": "haoqunjiang",
        "comment_body": "According to [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event#event_type), it should be a generic `Event`.\r\nAccording to [the HTML spec](https://html.spec.whatwg.org/multipage/interactive-elements.html#the-details-element:event-toggle), though, it should be a `ToggleEvent`.\r\n\r\nEither way, it's not a `MouseEvent`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1599485621",
        "repo_full_name": "vuejs/core",
        "pr_number": 10938,
        "pr_file": "packages/runtime-dom/src/jsx.ts",
        "discussion_id": "1599441110",
        "commented_code": "@@ -406,7 +406,7 @@ export interface DataHTMLAttributes extends HTMLAttributes {\n \n export interface DetailsHTMLAttributes extends HTMLAttributes {\n   open?: Booleanish\n-  onToggle?: Event\n+  onToggle?: (payload: MouseEvent) => void",
        "comment_created_at": "2024-05-14T07:04:32+00:00",
        "comment_author": "btea",
        "comment_body": "Thanks for the detailed explanation, updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1127313130",
    "pr_number": 7836,
    "pr_file": "packages/runtime-core/src/apiCreateApp.ts",
    "created_at": "2023-03-07T03:51:30+00:00",
    "commented_code": "mount(\n     rootContainer: HostElement | string,\n     isHydrate?: boolean,\n-    isSVG?: boolean\n+    namespace?: ElementNamespace",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1127313130",
        "repo_full_name": "vuejs/core",
        "pr_number": 7836,
        "pr_file": "packages/runtime-core/src/apiCreateApp.ts",
        "discussion_id": "1127313130",
        "commented_code": "@@ -46,7 +46,7 @@ export interface App<HostElement = any> {\n   mount(\n     rootContainer: HostElement | string,\n     isHydrate?: boolean,\n-    isSVG?: boolean\n+    namespace?: ElementNamespace",
        "comment_created_at": "2023-03-07T03:51:30+00:00",
        "comment_author": "sxzz",
        "comment_body": "We should add the boolean type here for public API only and normalize the namespace (convert boolean to string) and pass the normalized value for internal API.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1407813191",
    "pr_number": 9698,
    "pr_file": "packages/runtime-dom/__tests__/customElement.spec.ts",
    "created_at": "2023-11-28T14:02:09+00:00",
    "commented_code": "e.setAttribute('bar', '')\n       await nextTick()\n-      expect(e.shadowRoot!.innerHTML).toBe(`1 number true boolean 12345 string`)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1407813191",
        "repo_full_name": "vuejs/core",
        "pr_number": 9698,
        "pr_file": "packages/runtime-dom/__tests__/customElement.spec.ts",
        "discussion_id": "1407813191",
        "commented_code": "@@ -172,17 +172,19 @@ describe('defineCustomElement', () => {\n \n       e.setAttribute('bar', '')\n       await nextTick()\n-      expect(e.shadowRoot!.innerHTML).toBe(`1 number true boolean 12345 string`)",
        "comment_created_at": "2023-11-28T14:02:09+00:00",
        "comment_author": "Alfred-Skyblue",
        "comment_body": "In the original test cases, converting `''` to `true`, I'm not sure if this aligns with expectations, but from a boolean perspective, it should be converted to `false`.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1412259674",
        "repo_full_name": "vuejs/core",
        "pr_number": 9698,
        "pr_file": "packages/runtime-dom/__tests__/customElement.spec.ts",
        "discussion_id": "1407813191",
        "commented_code": "@@ -172,17 +172,19 @@ describe('defineCustomElement', () => {\n \n       e.setAttribute('bar', '')\n       await nextTick()\n-      expect(e.shadowRoot!.innerHTML).toBe(`1 number true boolean 12345 string`)",
        "comment_created_at": "2023-12-01T15:38:19+00:00",
        "comment_author": "WIStudent",
        "comment_body": "HTML Living Spec says that an attribute like `bar=\"\"` must be interpreted as `true`. Changing this to `false` would violate the spec and break exsiting component implementations that use `defineCustomElement`.\r\n\r\n> A number of attributes are boolean attributes. The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.\r\n> \r\n> If the attribute is present, its value must either be the empty string or a value that is an [ASCII case-insensitive](https://infra.spec.whatwg.org/#ascii-case-insensitive) match for the attribute's canonical name, with no leading or trailing whitespace.\r\n> \r\n> The values \"true\" and \"false\" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether.\r\n\r\nhttps://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes",
        "pr_file_module": null
      },
      {
        "comment_id": "1413564608",
        "repo_full_name": "vuejs/core",
        "pr_number": 9698,
        "pr_file": "packages/runtime-dom/__tests__/customElement.spec.ts",
        "discussion_id": "1407813191",
        "commented_code": "@@ -172,17 +172,19 @@ describe('defineCustomElement', () => {\n \n       e.setAttribute('bar', '')\n       await nextTick()\n-      expect(e.shadowRoot!.innerHTML).toBe(`1 number true boolean 12345 string`)",
        "comment_created_at": "2023-12-04T09:07:05+00:00",
        "comment_author": "Alfred-Skyblue",
        "comment_body": "There is a debate over whether, in the absence of a value or when the value is the string 'false,' it should perhaps be considered as false, while in all other cases, it should be considered as true. I have observed that performing such a conversion may result in `getAttribute` returning different values. It is uncertain whether this approach is reasonable, or if we should adhere to the format of Vue component attributes. However, it is worth noting that we have indeed defined a CustomElement.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1367728463",
    "pr_number": 8859,
    "pr_file": "packages/runtime-test/src/nodeOps.ts",
    "created_at": "2023-10-21T13:12:12+00:00",
    "commented_code": "}\n }\n \n+function replace(newChild: TestNode, oldChild: TestNode, logOp = true) {",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1367728463",
        "repo_full_name": "vuejs/core",
        "pr_number": 8859,
        "pr_file": "packages/runtime-test/src/nodeOps.ts",
        "discussion_id": "1367728463",
        "commented_code": "@@ -188,6 +188,28 @@ function remove(child: TestNode, logOp = true) {\n   }\n }\n \n+function replace(newChild: TestNode, oldChild: TestNode, logOp = true) {",
        "comment_created_at": "2023-10-21T13:12:12+00:00",
        "comment_author": "yyx990803",
        "comment_body": "We should avoid adding more methods to `nodeOps` unless it is absolutely necessary, since custom renderers would need to implement all these methods, and if a new method is required for the renderer to work then it is technically a breaking change for previously implemented custom renderers.",
        "pr_file_module": null
      },
      {
        "comment_id": "1367733558",
        "repo_full_name": "vuejs/core",
        "pr_number": 8859,
        "pr_file": "packages/runtime-test/src/nodeOps.ts",
        "discussion_id": "1367728463",
        "commented_code": "@@ -188,6 +188,28 @@ function remove(child: TestNode, logOp = true) {\n   }\n }\n \n+function replace(newChild: TestNode, oldChild: TestNode, logOp = true) {",
        "comment_created_at": "2023-10-21T13:54:01+00:00",
        "comment_author": "edison1105",
        "comment_body": "done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1020381135",
    "pr_number": 7068,
    "pr_file": "packages/compiler-sfc/src/rewriteDefault.ts",
    "created_at": "2022-11-11T16:34:44+00:00",
    "commented_code": "export function rewriteDefault(\n   input: string,\n   as: string,\n-  parserPlugins?: ParserPlugin[]\n+  /** @deprecated use `ast` param instead */\n+  parserPlugins?: ParserPlugin[],",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1020381135",
        "repo_full_name": "vuejs/core",
        "pr_number": 7068,
        "pr_file": "packages/compiler-sfc/src/rewriteDefault.ts",
        "discussion_id": "1020381135",
        "commented_code": "@@ -13,33 +10,23 @@ const exportDefaultClassRE =\n export function rewriteDefault(\n   input: string,\n   as: string,\n-  parserPlugins?: ParserPlugin[]\n+  /** @deprecated use `ast` param instead */\n+  parserPlugins?: ParserPlugin[],",
        "comment_created_at": "2022-11-11T16:34:44+00:00",
        "comment_author": "sxzz",
        "comment_body": "`rewriteDefault` is an exported and open API. So for avoiding a breaking change, I kept the `parserPlugins` and mark it `deprecated`.",
        "pr_file_module": null
      }
    ]
  }
]