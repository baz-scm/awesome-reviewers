[
  {
    "discussion_id": "1253898347",
    "pr_number": 4188,
    "pr_file": "commands/configure.ts",
    "created_at": "2023-07-06T04:03:20+00:00",
    "commented_code": "this.logger.action('update .adonisrc.json file').succeeded()\n   }\n \n+  /**\n+   * Install packages using the correct package manager\n+   * You can specify version of each package by setting it in the\n+   * name like :\n+   *\n+   * ```\n+   * installPackages(['@adonisjs/lucid@next', '@adonisjs/auth@3.0.0'])\n+   * ```\n+   */\n+  async installPackages(packages: { name: string; isDevDependency: boolean }[]) {\n+    const appPath = fileURLToPath(this.app.appRoot)\n+\n+    const devDeps = packages.filter((pkg) => pkg.isDevDependency).map(({ name }) => name)\n+    const deps = packages.filter((pkg) => !pkg.isDevDependency).map(({ name }) => name)\n+\n+    const packageManager = await detectPackageManager(appPath)\n+    let spinner = this.logger\n+      .await(`installing dependencies using ${packageManager || 'npm'}`)\n+      .start()\n+\n+    try {\n+      await installPackage(deps, { cwd: appPath, silent: true })\n+      await installPackage(devDeps, { dev: true, cwd: appPath, silent: true })\n+\n+      spinner.stop()\n+      this.logger.success('dependencies installed')\n+      this.logger.log(devDeps.map((dep) => `      ${this.colors.dim('dev')} ${dep}`).join('\n'))\n+      this.logger.log(deps.map((dep) => `      ${this.colors.dim('prod')} ${dep}`).join('\n'))\n+    } catch (error) {\n+      spinner.stop()\n+      this.logger.error(`unable to install dependencies :\n   ${this.colors.red(error.message)}`)",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "1253898347",
        "repo_full_name": "adonisjs/core",
        "pr_number": 4188,
        "pr_file": "commands/configure.ts",
        "discussion_id": "1253898347",
        "commented_code": "@@ -111,6 +113,40 @@ export default class Configure extends BaseCommand {\n     this.logger.action('update .adonisrc.json file').succeeded()\n   }\n \n+  /**\n+   * Install packages using the correct package manager\n+   * You can specify version of each package by setting it in the\n+   * name like :\n+   *\n+   * ```\n+   * installPackages(['@adonisjs/lucid@next', '@adonisjs/auth@3.0.0'])\n+   * ```\n+   */\n+  async installPackages(packages: { name: string; isDevDependency: boolean }[]) {\n+    const appPath = fileURLToPath(this.app.appRoot)\n+\n+    const devDeps = packages.filter((pkg) => pkg.isDevDependency).map(({ name }) => name)\n+    const deps = packages.filter((pkg) => !pkg.isDevDependency).map(({ name }) => name)\n+\n+    const packageManager = await detectPackageManager(appPath)\n+    let spinner = this.logger\n+      .await(`installing dependencies using ${packageManager || 'npm'}`)\n+      .start()\n+\n+    try {\n+      await installPackage(deps, { cwd: appPath, silent: true })\n+      await installPackage(devDeps, { dev: true, cwd: appPath, silent: true })\n+\n+      spinner.stop()\n+      this.logger.success('dependencies installed')\n+      this.logger.log(devDeps.map((dep) => `      ${this.colors.dim('dev')} ${dep}`).join('\\n'))\n+      this.logger.log(deps.map((dep) => `      ${this.colors.dim('prod')} ${dep}`).join('\\n'))\n+    } catch (error) {\n+      spinner.stop()\n+      this.logger.error(`unable to install dependencies :\\n   ${this.colors.red(error.message)}`)",
        "comment_created_at": "2023-07-06T04:03:20+00:00",
        "comment_author": "thetutlage",
        "comment_body": "Can you log the complete error message here.\r\n\r\n```ts\r\nspinner.update('Unable to install dependencies')\r\nspinner.stop()\r\nthis.logger.fatal(error)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "578327090",
    "pr_number": 2273,
    "pr_file": "src/Ignitor/SignalsListener/index.ts",
    "created_at": "2021-02-18T11:06:18+00:00",
    "commented_code": "/**\n  * Exposes the API to invoke a callback when `SIGTERM` or\n- * `SIGINT (pm2 only)` signals are received.\n+ * `SIGINT` signals are received.\n  */\n export class SignalsListener {\n   protected onCloseCallback?: () => Promise<void>\n \n+  private isKilling = false\n+\n   /**\n    * Invoke callback and exit process\n    */\n-  private kill = async function () {\n-    try {\n-      await this.onCloseCallback()\n+  private kill = async () => {\n+    if (!this.isKilling) {\n+      // First attempt. Try to kill the process gracefully.\n+      this.isKilling = true\n+      if (process.stderr.isTTY) {\n+        // If the process is running in a terminal, display a message to the user.\n+        console.error('Gracefully shutting down the process... Press CTRL+C to force it')\n+      }\n+      try {\n+        await this.onCloseCallback()\n+        process.exit(0)\n+      } catch (error) {\n+        // TODO: log error?\n+        process.exit(1)",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "578327090",
        "repo_full_name": "adonisjs/core",
        "pr_number": 2273,
        "pr_file": "src/Ignitor/SignalsListener/index.ts",
        "discussion_id": "578327090",
        "commented_code": "@@ -11,22 +11,36 @@ import { ApplicationContract } from '@ioc:Adonis/Core/Application'\n \n /**\n  * Exposes the API to invoke a callback when `SIGTERM` or\n- * `SIGINT (pm2 only)` signals are received.\n+ * `SIGINT` signals are received.\n  */\n export class SignalsListener {\n   protected onCloseCallback?: () => Promise<void>\n \n+  private isKilling = false\n+\n   /**\n    * Invoke callback and exit process\n    */\n-  private kill = async function () {\n-    try {\n-      await this.onCloseCallback()\n+  private kill = async () => {\n+    if (!this.isKilling) {\n+      // First attempt. Try to kill the process gracefully.\n+      this.isKilling = true\n+      if (process.stderr.isTTY) {\n+        // If the process is running in a terminal, display a message to the user.\n+        console.error('Gracefully shutting down the process... Press CTRL+C to force it')\n+      }\n+      try {\n+        await this.onCloseCallback()\n+        process.exit(0)\n+      } catch (error) {\n+        // TODO: log error?\n+        process.exit(1)",
        "comment_created_at": "2021-02-18T11:06:18+00:00",
        "comment_author": "targos",
        "comment_body": "It seems useful to log an error that may occur during shutdown, but maybe it's already done before and that's why the function here doesn't do it?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "811512355",
    "pr_number": 3561,
    "pr_file": "src/Ignitor/HttpServer/index.ts",
    "created_at": "2022-02-22T01:37:34+00:00",
    "commented_code": "})\n \n     this.server.instance!.on('error', async (error: NodeJS.ErrnoException) => {\n+      this.application.logger.error(JSON.stringify(error))",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "811512355",
        "repo_full_name": "adonisjs/core",
        "pr_number": 3561,
        "pr_file": "src/Ignitor/HttpServer/index.ts",
        "discussion_id": "811512355",
        "commented_code": "@@ -102,13 +102,17 @@ export class HttpServer {\n     })\n \n     this.server.instance!.on('error', async (error: NodeJS.ErrnoException) => {\n+      this.application.logger.error(JSON.stringify(error))",
        "comment_created_at": "2022-02-22T01:37:34+00:00",
        "comment_author": "thetutlage",
        "comment_body": "Is it required to JSON stringify the error?",
        "pr_file_module": null
      },
      {
        "comment_id": "812018946",
        "repo_full_name": "adonisjs/core",
        "pr_number": 3561,
        "pr_file": "src/Ignitor/HttpServer/index.ts",
        "discussion_id": "811512355",
        "commented_code": "@@ -102,13 +102,17 @@ export class HttpServer {\n     })\n \n     this.server.instance!.on('error', async (error: NodeJS.ErrnoException) => {\n+      this.application.logger.error(JSON.stringify(error))",
        "comment_created_at": "2022-02-22T14:42:05+00:00",
        "comment_author": "daniel-nelson",
        "comment_body": "If the logger prints arbitrary objects nicely, then no. I just didn't want to risk `[object Object]`.",
        "pr_file_module": null
      },
      {
        "comment_id": "812057698",
        "repo_full_name": "adonisjs/core",
        "pr_number": 3561,
        "pr_file": "src/Ignitor/HttpServer/index.ts",
        "discussion_id": "811512355",
        "commented_code": "@@ -102,13 +102,17 @@ export class HttpServer {\n     })\n \n     this.server.instance!.on('error', async (error: NodeJS.ErrnoException) => {\n+      this.application.logger.error(JSON.stringify(error))",
        "comment_created_at": "2022-02-22T15:18:59+00:00",
        "comment_author": "thetutlage",
        "comment_body": "It does :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "389351249",
    "pr_number": 1215,
    "pr_file": "src/Ignitor/SignalsListener/index.ts",
    "created_at": "2020-03-08T09:24:21+00:00",
    "commented_code": "*/\n   private kill = async function () {\n     try {\n+      console.log('Shutting down server...')",
    "repo_full_name": "adonisjs/core",
    "discussion_comments": [
      {
        "comment_id": "389351249",
        "repo_full_name": "adonisjs/core",
        "pr_number": 1215,
        "pr_file": "src/Ignitor/SignalsListener/index.ts",
        "discussion_id": "389351249",
        "commented_code": "@@ -19,6 +19,7 @@ export class SignalsListener {\n    */\n   private kill = async function () {\n     try {\n+      console.log('Shutting down server...')",
        "comment_created_at": "2020-03-08T09:24:21+00:00",
        "comment_author": "thetutlage",
        "comment_body": "Modules should never have hardcoded console statements ",
        "pr_file_module": null
      },
      {
        "comment_id": "389395527",
        "repo_full_name": "adonisjs/core",
        "pr_number": 1215,
        "pr_file": "src/Ignitor/SignalsListener/index.ts",
        "discussion_id": "389351249",
        "commented_code": "@@ -19,6 +19,7 @@ export class SignalsListener {\n    */\n   private kill = async function () {\n     try {\n+      console.log('Shutting down server...')",
        "comment_created_at": "2020-03-08T18:54:32+00:00",
        "comment_author": "McSneaky",
        "comment_body": "Hmm, should use debug or logger module instead?",
        "pr_file_module": null
      }
    ]
  }
]