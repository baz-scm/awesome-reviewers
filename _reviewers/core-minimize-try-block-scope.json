[
  {
    "discussion_id": "2219430123",
    "pr_number": 148989,
    "pr_file": "homeassistant/components/airos/config_flow.py",
    "created_at": "2025-07-21T14:41:08+00:00",
    "commented_code": "+\"\"\"Config flow for the Ubiquiti airOS integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import Any\n+\n+from airos.airos8 import AirOS\n+from airos.exceptions import (\n+    ConnectionAuthenticationError,\n+    ConnectionSetupError,\n+    DataMissingError,\n+    DeviceConnectionError,\n+)\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import ConfigFlow, ConfigFlowResult\n+from homeassistant.const import CONF_HOST, CONF_PASSWORD, CONF_USERNAME\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import HomeAssistantError\n+from homeassistant.helpers.aiohttp_client import async_get_clientsession\n+\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+STEP_USER_DATA_SCHEMA = vol.Schema(\n+    {\n+        vol.Required(CONF_USERNAME, default=\"ubnt\"): str,\n+        vol.Required(CONF_PASSWORD): str,\n+        vol.Required(CONF_HOST): str,\n+    }\n+)\n+\n+\n+async def validate_input(hass: HomeAssistant, data: dict[str, Any]) -> dict[str, Any]:\n+    \"\"\"Validate the user input allows us to connect.\"\"\"\n+\n+    session = async_get_clientsession(hass, verify_ssl=False)\n+    airos_device = AirOS(\n+        host=data[CONF_HOST],\n+        username=data[CONF_USERNAME],\n+        password=data[CONF_PASSWORD],\n+        session=session,\n+    )\n+\n+    try:\n+        await airos_device.login()\n+        status = await airos_device.status()\n+\n+        host_data: dict = status[\"host\"]\n+        device_id: str = host_data[\"device_id\"]\n+        hostname: str = host_data.get(\"hostname\", \"Ubiquiti airOS Device\")\n+\n+        device_data: dict = {\n+            \"title\": hostname,\n+            \"device_id\": device_id,\n+            \"hostname\": hostname,\n+            \"data\": status,\n+        }\n+    except (",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2219430123",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148989,
        "pr_file": "homeassistant/components/airos/config_flow.py",
        "discussion_id": "2219430123",
        "commented_code": "@@ -0,0 +1,118 @@\n+\"\"\"Config flow for the Ubiquiti airOS integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import Any\n+\n+from airos.airos8 import AirOS\n+from airos.exceptions import (\n+    ConnectionAuthenticationError,\n+    ConnectionSetupError,\n+    DataMissingError,\n+    DeviceConnectionError,\n+)\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import ConfigFlow, ConfigFlowResult\n+from homeassistant.const import CONF_HOST, CONF_PASSWORD, CONF_USERNAME\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import HomeAssistantError\n+from homeassistant.helpers.aiohttp_client import async_get_clientsession\n+\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+STEP_USER_DATA_SCHEMA = vol.Schema(\n+    {\n+        vol.Required(CONF_USERNAME, default=\"ubnt\"): str,\n+        vol.Required(CONF_PASSWORD): str,\n+        vol.Required(CONF_HOST): str,\n+    }\n+)\n+\n+\n+async def validate_input(hass: HomeAssistant, data: dict[str, Any]) -> dict[str, Any]:\n+    \"\"\"Validate the user input allows us to connect.\"\"\"\n+\n+    session = async_get_clientsession(hass, verify_ssl=False)\n+    airos_device = AirOS(\n+        host=data[CONF_HOST],\n+        username=data[CONF_USERNAME],\n+        password=data[CONF_PASSWORD],\n+        session=session,\n+    )\n+\n+    try:\n+        await airos_device.login()\n+        status = await airos_device.status()\n+\n+        host_data: dict = status[\"host\"]\n+        device_id: str = host_data[\"device_id\"]\n+        hostname: str = host_data.get(\"hostname\", \"Ubiquiti airOS Device\")\n+\n+        device_data: dict = {\n+            \"title\": hostname,\n+            \"device_id\": device_id,\n+            \"hostname\": hostname,\n+            \"data\": status,\n+        }\n+    except (",
        "comment_created_at": "2025-07-21T14:41:08+00:00",
        "comment_author": "joostlek",
        "comment_body": "only have things in the try block that can raise",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961146641",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/__init__.py",
    "created_at": "2025-02-19T07:53:46+00:00",
    "commented_code": "+import logging\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import Platform\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+from typing import TypedDict\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechEntryData(TypedDict):\n+    config: dict\n+    entities: list\n+\n+PLATFORMS: list[Platform] = [Platform.SWITCH]\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+    \"\"\"Set up Redgtech from a config entry.\"\"\"\n+    _LOGGER.debug(\"Setting up Redgtech entry: %s\", entry.entry_id)\n+    \n+    entry.runtime_data = {\n+        \"config\": entry.data,\n+        \"entities\": []\n+    }\n+\n+    access_token = entry.data.get(\"access_token\")\n+    if not access_token:\n+        _LOGGER.error(\"No access token found in config entry\")\n+        return False\n+\n+    api = RedgtechAPI(access_token)\n+    try:\n+        data = await api.get_data()\n+        _LOGGER.debug(\"Received data from API: %s\", data)\n+\n+        entities = []",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1961146641",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/__init__.py",
        "discussion_id": "1961146641",
        "commented_code": "@@ -0,0 +1,66 @@\n+import logging\n+from homeassistant.core import HomeAssistant\n+from homeassistant.config_entries import ConfigEntry\n+from homeassistant.const import Platform\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+from typing import TypedDict\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechEntryData(TypedDict):\n+    config: dict\n+    entities: list\n+\n+PLATFORMS: list[Platform] = [Platform.SWITCH]\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n+    \"\"\"Set up Redgtech from a config entry.\"\"\"\n+    _LOGGER.debug(\"Setting up Redgtech entry: %s\", entry.entry_id)\n+    \n+    entry.runtime_data = {\n+        \"config\": entry.data,\n+        \"entities\": []\n+    }\n+\n+    access_token = entry.data.get(\"access_token\")\n+    if not access_token:\n+        _LOGGER.error(\"No access token found in config entry\")\n+        return False\n+\n+    api = RedgtechAPI(access_token)\n+    try:\n+        data = await api.get_data()\n+        _LOGGER.debug(\"Received data from API: %s\", data)\n+\n+        entities = []",
        "comment_created_at": "2025-02-19T07:53:46+00:00",
        "comment_author": "zweckj",
        "comment_body": "only have things in try that can fail",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1961150718",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/config_flow.py",
    "created_at": "2025-02-19T07:56:54+00:00",
    "commented_code": "+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from homeassistant.const import CONF_EMAIL, CONF_PASSWORD, CONF_ACCESS_TOKEN\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+from typing import Any, Dict, Optional\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    async def async_step_user(self, user_input: Optional[Dict[str, Any]] = None) -> config_entries.FlowResult:\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(CONF_EMAIL)\n+            password = user_input.get(CONF_PASSWORD)\n+            api = RedgtechAPI()\n+\n+            try:\n+                access_token = await api.login(email, password)",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1961150718",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/config_flow.py",
        "discussion_id": "1961150718",
        "commented_code": "@@ -0,0 +1,52 @@\n+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from homeassistant.const import CONF_EMAIL, CONF_PASSWORD, CONF_ACCESS_TOKEN\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+from typing import Any, Dict, Optional\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    async def async_step_user(self, user_input: Optional[Dict[str, Any]] = None) -> config_entries.FlowResult:\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(CONF_EMAIL)\n+            password = user_input.get(CONF_PASSWORD)\n+            api = RedgtechAPI()\n+\n+            try:\n+                access_token = await api.login(email, password)",
        "comment_created_at": "2025-02-19T07:56:54+00:00",
        "comment_author": "zweckj",
        "comment_body": "only have things in try that can fail",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962215152",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/coordinator.py",
    "created_at": "2025-02-19T18:56:31+00:00",
    "commented_code": "+import logging\n+from datetime import timedelta\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from redgtech_api import RedgtechAPI\n+from .const import DOMAIN\n+from typing import List\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator):\n+    \"\"\"Class to manage fetching data from the API.\"\"\"\n+\n+    def __init__(self, hass, api: RedgtechAPI):\n+        \"\"\"Initialize.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_interval=timedelta(seconds=1),\n+        )\n+\n+    async def _async_update_data(self) -> List[dict]:\n+        \"\"\"Fetch data from API.\"\"\"\n+        try:\n+            _LOGGER.debug(\"Fetching data from Redgtech API\")",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1962215152",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/coordinator.py",
        "discussion_id": "1962215152",
        "commented_code": "@@ -0,0 +1,45 @@\n+import logging\n+from datetime import timedelta\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from homeassistant.helpers.update_coordinator import DataUpdateCoordinator, UpdateFailed\n+from redgtech_api import RedgtechAPI\n+from .const import DOMAIN\n+from typing import List\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechDataUpdateCoordinator(DataUpdateCoordinator):\n+    \"\"\"Class to manage fetching data from the API.\"\"\"\n+\n+    def __init__(self, hass, api: RedgtechAPI):\n+        \"\"\"Initialize.\"\"\"\n+        self.api = api\n+        super().__init__(\n+            hass,\n+            _LOGGER,\n+            name=DOMAIN,\n+            update_interval=timedelta(seconds=1),\n+        )\n+\n+    async def _async_update_data(self) -> List[dict]:\n+        \"\"\"Fetch data from API.\"\"\"\n+        try:\n+            _LOGGER.debug(\"Fetching data from Redgtech API\")",
        "comment_created_at": "2025-02-19T18:56:31+00:00",
        "comment_author": "zweckj",
        "comment_body": "please, only code in try that can actually fail",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143129991",
    "pr_number": 139925,
    "pr_file": "homeassistant/components/fluss/config_flow.py",
    "created_at": "2025-06-12T15:59:37+00:00",
    "commented_code": "+\"\"\"Config flow for Fluss+ integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import Any\n+\n+from fluss_api import (\n+    FlussApiClient,\n+    FlussApiClientAuthenticationError,\n+    FlussApiClientCommunicationError,\n+)\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import ConfigFlow, ConfigFlowResult\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.helpers import config_validation as cv\n+from homeassistant.helpers.aiohttp_client import async_get_clientsession\n+\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+STEP_USER_DATA_SCHEMA = vol.Schema({vol.Required(CONF_API_KEY): cv.string})\n+\n+\n+class FlussConfigFlow(ConfigFlow, domain=DOMAIN):\n+    \"\"\"Handle a config flow for Fluss+.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(\n+        self, user_input: dict[str, Any] | None = None\n+    ) -> ConfigFlowResult:\n+        \"\"\"Handle the initial step.\"\"\"\n+        await self.async_set_unique_id(DOMAIN)\n+\n+        if self._async_current_entries():\n+            return self.async_abort(reason=\"single_instance_allowed\")\n+\n+        errors: dict[str, str] = {}\n+\n+        if user_input is not None:\n+            try:\n+                session = async_get_clientsession(self.hass)",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2143129991",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/config_flow.py",
        "discussion_id": "2143129991",
        "commented_code": "@@ -0,0 +1,61 @@\n+\"\"\"Config flow for Fluss+ integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import Any\n+\n+from fluss_api import (\n+    FlussApiClient,\n+    FlussApiClientAuthenticationError,\n+    FlussApiClientCommunicationError,\n+)\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import ConfigFlow, ConfigFlowResult\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.helpers import config_validation as cv\n+from homeassistant.helpers.aiohttp_client import async_get_clientsession\n+\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+STEP_USER_DATA_SCHEMA = vol.Schema({vol.Required(CONF_API_KEY): cv.string})\n+\n+\n+class FlussConfigFlow(ConfigFlow, domain=DOMAIN):\n+    \"\"\"Handle a config flow for Fluss+.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(\n+        self, user_input: dict[str, Any] | None = None\n+    ) -> ConfigFlowResult:\n+        \"\"\"Handle the initial step.\"\"\"\n+        await self.async_set_unique_id(DOMAIN)\n+\n+        if self._async_current_entries():\n+            return self.async_abort(reason=\"single_instance_allowed\")\n+\n+        errors: dict[str, str] = {}\n+\n+        if user_input is not None:\n+            try:\n+                session = async_get_clientsession(self.hass)",
        "comment_created_at": "2025-06-12T15:59:37+00:00",
        "comment_author": "joostlek",
        "comment_body": "only have things in the try block that can raise",
        "pr_file_module": null
      },
      {
        "comment_id": "2151589857",
        "repo_full_name": "home-assistant/core",
        "pr_number": 139925,
        "pr_file": "homeassistant/components/fluss/config_flow.py",
        "discussion_id": "2143129991",
        "commented_code": "@@ -0,0 +1,61 @@\n+\"\"\"Config flow for Fluss+ integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import Any\n+\n+from fluss_api import (\n+    FlussApiClient,\n+    FlussApiClientAuthenticationError,\n+    FlussApiClientCommunicationError,\n+)\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import ConfigFlow, ConfigFlowResult\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.helpers import config_validation as cv\n+from homeassistant.helpers.aiohttp_client import async_get_clientsession\n+\n+from .const import DOMAIN\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+STEP_USER_DATA_SCHEMA = vol.Schema({vol.Required(CONF_API_KEY): cv.string})\n+\n+\n+class FlussConfigFlow(ConfigFlow, domain=DOMAIN):\n+    \"\"\"Handle a config flow for Fluss+.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(\n+        self, user_input: dict[str, Any] | None = None\n+    ) -> ConfigFlowResult:\n+        \"\"\"Handle the initial step.\"\"\"\n+        await self.async_set_unique_id(DOMAIN)\n+\n+        if self._async_current_entries():\n+            return self.async_abort(reason=\"single_instance_allowed\")\n+\n+        errors: dict[str, str] = {}\n+\n+        if user_input is not None:\n+            try:\n+                session = async_get_clientsession(self.hass)",
        "comment_created_at": "2025-06-17T07:57:49+00:00",
        "comment_author": "Marcello17",
        "comment_body": "moved out",
        "pr_file_module": null
      }
    ]
  }
]