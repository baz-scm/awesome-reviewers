[
  {
    "discussion_id": "1536984380",
    "pr_number": 10576,
    "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
    "created_at": "2024-03-25T02:09:05+00:00",
    "commented_code": "const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1536984380",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T02:09:05+00:00",
        "comment_author": "edison1105",
        "comment_body": "This doesn't seem right, and if you want to call `looseEqual`, the fast path here doesn't make sense.\r\n\r\nsee https://github.com/vuejs/core/commit/2ffb956efe692da059f4895669084c5278871351\r\n![image](https://github.com/vuejs/core/assets/3705199/24d194e0-7b78-43da-adf7-53143c825b3d)\r\n\r\nMaybe the fast path can only for number values for now. There may already be a large number of users using like https://github.com/vuejs/core/issues/10574.\r\nFor string values, keep the old logic.\r\n\r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1536993372",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T02:30:40+00:00",
        "comment_author": "yangxiuxiu1115",
        "comment_body": "You're right, awesome",
        "pr_file_module": null
      },
      {
        "comment_id": "1537028980",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T03:54:09+00:00",
        "comment_author": "edison1105",
        "comment_body": "```ts\r\n// fast path for number values\r\n// there are probably lots of use case like #10574, so for string values should \r\n// compare using `looseEqual` to avoid regression\r\nif (optionType === 'number') {\r\n  option.selected = value.includes(\r\n    number ? looseToNumber(optionValue) : optionValue,\r\n  )\r\n} else {\r\n  option.selected = looseIndexOf(value, optionValue) > -1\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1537038152",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T04:19:15+00:00",
        "comment_author": "yangxiuxiu1115",
        "comment_body": "Maybe both the string type and number type should retain the fast path. I added type judgment and I don\u2019t know whether it will have an impact on the fast channel.",
        "pr_file_module": null
      },
      {
        "comment_id": "1537115446",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T06:44:22+00:00",
        "comment_author": "edison1105",
        "comment_body": "- fast path means without using `looseEqual`\r\n- Your code does the same thing as `looseIndexOf`",
        "pr_file_module": null
      },
      {
        "comment_id": "1537118482",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-25T06:49:24+00:00",
        "comment_author": "yangxiuxiu1115",
        "comment_body": "I'm aware of that, I added a new commit to handle the same type directly, and only use looseEqual when it's different.",
        "pr_file_module": null
      },
      {
        "comment_id": "1538486346",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-26T01:49:21+00:00",
        "comment_author": "edison1105",
        "comment_body": "how about this?\r\n```js\r\noption.selected = value.some(v => String(v)===String(optionValue))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1538508574",
        "repo_full_name": "vuejs/core",
        "pr_number": 10576,
        "pr_file": "packages/runtime-dom/src/directives/vModel.ts",
        "discussion_id": "1536984380",
        "commented_code": "@@ -242,9 +242,13 @@ function setSelected(el: HTMLSelectElement, value: any, number: boolean) {\n         const optionType = typeof optionValue\n         // fast path for string / number values\n         if (optionType === 'string' || optionType === 'number') {\n-          option.selected = value.includes(\n-            number ? looseToNumber(optionValue) : optionValue,\n-          )\n+          option.selected = !!value.find(v => {\n+            let value = optionValue\n+            if (number) {\n+              value = looseToNumber(optionValue)\n+            }\n+            return looseEqual(value, v)",
        "comment_created_at": "2024-03-26T02:28:41+00:00",
        "comment_author": "yangxiuxiu1115",
        "comment_body": "That makes sense, my brother. Why didn't I think of that?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1438449500",
    "pr_number": 9928,
    "pr_file": "packages/runtime-core/src/apiWatch.ts",
    "created_at": "2023-12-30T00:42:04+00:00",
    "commented_code": "}\n   return value\n }\n+\n+export function shallowTraverse(value: unknown) {",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1438449500",
        "repo_full_name": "vuejs/core",
        "pr_number": 9928,
        "pr_file": "packages/runtime-core/src/apiWatch.ts",
        "discussion_id": "1438449500",
        "commented_code": "@@ -464,3 +465,23 @@ export function traverse(value: unknown, seen?: Set<unknown>) {\n   }\n   return value\n }\n+\n+export function shallowTraverse(value: unknown) {",
        "comment_created_at": "2023-12-30T00:42:04+00:00",
        "comment_author": "yyx990803",
        "comment_body": "Should be able to reuse `traverse` by adding a second argument:\r\n\r\n```js\r\ntraverse(value: unknown, shallow = false, seen?: Set<unknown>)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2125270825",
    "pr_number": 13433,
    "pr_file": "packages/reactivity/src/watch.ts",
    "created_at": "2025-06-04T01:50:44+00:00",
    "commented_code": "depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []\n   if (depth <= 0 || !isObject(value) || (value as any)[ReactiveFlags.SKIP]) {\n     return value\n   }\n-\n-  seen = seen || new Set()\n-  if (seen.has(value)) {\n+  if (activeSeen.has(value)) {\n     return value\n   }\n-  seen.add(value)\n-  depth--\n-  if (isRef(value)) {\n-    traverse(value.value, depth, seen)\n-  } else if (isArray(value)) {\n-    for (let i = 0; i < value.length; i++) {\n-      traverse(value[i], depth, seen)\n+  queue.push([value, depth])\n+\n+  while (queue.length > 0) {\n+    const [currentValue, currentDepth] = queue.shift()!",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2125270825",
        "repo_full_name": "vuejs/core",
        "pr_number": 13433,
        "pr_file": "packages/reactivity/src/watch.ts",
        "discussion_id": "2125270825",
        "commented_code": "@@ -333,35 +333,63 @@ export function traverse(\n   depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []\n   if (depth <= 0 || !isObject(value) || (value as any)[ReactiveFlags.SKIP]) {\n     return value\n   }\n-\n-  seen = seen || new Set()\n-  if (seen.has(value)) {\n+  if (activeSeen.has(value)) {\n     return value\n   }\n-  seen.add(value)\n-  depth--\n-  if (isRef(value)) {\n-    traverse(value.value, depth, seen)\n-  } else if (isArray(value)) {\n-    for (let i = 0; i < value.length; i++) {\n-      traverse(value[i], depth, seen)\n+  queue.push([value, depth])\n+\n+  while (queue.length > 0) {\n+    const [currentValue, currentDepth] = queue.shift()!",
        "comment_created_at": "2025-06-04T01:50:44+00:00",
        "comment_author": "Alfred-Skyblue",
        "comment_body": "The time complexity of `queue.shift()` is O(n), so it can be optimized by tracking the index manually:\r\n\r\n```js\r\nconst queue: Array<[any, number]> = []\r\nlet queueIndex = 0\r\n\r\nconst [currentValue, currentDepth] = queue[queueIndex++]\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2125302403",
        "repo_full_name": "vuejs/core",
        "pr_number": 13433,
        "pr_file": "packages/reactivity/src/watch.ts",
        "discussion_id": "2125270825",
        "commented_code": "@@ -333,35 +333,63 @@ export function traverse(\n   depth: number = Infinity,\n   seen?: Set<unknown>,\n ): unknown {\n+  const activeSeen = seen || new Set()\n+  const queue: Array<[any, number]> = []\n   if (depth <= 0 || !isObject(value) || (value as any)[ReactiveFlags.SKIP]) {\n     return value\n   }\n-\n-  seen = seen || new Set()\n-  if (seen.has(value)) {\n+  if (activeSeen.has(value)) {\n     return value\n   }\n-  seen.add(value)\n-  depth--\n-  if (isRef(value)) {\n-    traverse(value.value, depth, seen)\n-  } else if (isArray(value)) {\n-    for (let i = 0; i < value.length; i++) {\n-      traverse(value[i], depth, seen)\n+  queue.push([value, depth])\n+\n+  while (queue.length > 0) {\n+    const [currentValue, currentDepth] = queue.shift()!",
        "comment_created_at": "2025-06-04T02:04:10+00:00",
        "comment_author": "jsy-0526",
        "comment_body": "yep\uff0cyou are right!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114163987",
    "pr_number": 13409,
    "pr_file": "packages/reactivity/src/watch.ts",
    "created_at": "2025-05-29T15:05:07+00:00",
    "commented_code": "// traverse will happen in wrapped getter below\n     if (deep) return source\n     // for `deep: false | 0` or shallow reactive, only traverse root-level properties\n-    if (isShallow(source) || deep === false || deep === 0)\n+    if (isShallow(source) || !deep)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2114163987",
        "repo_full_name": "vuejs/core",
        "pr_number": 13409,
        "pr_file": "packages/reactivity/src/watch.ts",
        "discussion_id": "2114163987",
        "commented_code": "@@ -137,7 +137,7 @@ export function watch(\n     // traverse will happen in wrapped getter below\n     if (deep) return source\n     // for `deep: false | 0` or shallow reactive, only traverse root-level properties\n-    if (isShallow(source) || deep === false || deep === 0)\n+    if (isShallow(source) || !deep)",
        "comment_created_at": "2025-05-29T15:05:07+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Critical: This change breaks the intended behavior for `deep: undefined`.**\n\nThe simplified condition changes the behavior for `deep: undefined` from deep traversal to shallow traversal, which contradicts the explicit comment on line 142 and breaks backward compatibility.\n\n**Original logic:**\n- `deep: undefined` \u2192 falls through to `traverse(source)` (full deep traversal)\n- `deep: false` or `deep: 0` \u2192 shallow traversal (depth 1)\n\n**New logic:**\n- `deep: undefined` \u2192 caught by `!deep`, shallow traversal (depth 1)\n\nThis violates the documented behavior stated in the comment: \"for `deep: undefined` on a reactive object, deeply traverse all properties\".\n\n\n\nTo maintain backward compatibility, revert to the explicit checks or modify the logic to handle `undefined` correctly:\n\n```diff\n-    if (isShallow(source) || !deep)\n+    if (isShallow(source) || deep === false || deep === 0)\n```\n\nAlternatively, if the intent is to treat `undefined` as shallow, update the comment on line 142 to reflect this change.\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n    // before: if (isShallow(source) || !deep)\n    if (isShallow(source) || deep === false || deep === 0)\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn packages/reactivity/src/watch.ts at line 140, the condition 'if\n(isShallow(source) || !deep)' incorrectly treats 'deep: undefined' as shallow\ntraversal, breaking backward compatibility. To fix this, revert to an explicit\ncheck that distinguishes between 'deep: undefined' and falsy values like false\nor 0, ensuring that when 'deep' is undefined, the code performs a full deep\ntraversal as originally intended. Adjust the condition to preserve the original\nbehavior or update the comment if the behavior change is intentional.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]