[
  {
    "discussion_id": "1623093650",
    "pr_number": 7265,
    "pr_file": "packages/reactivity/src/effectScope.ts",
    "created_at": "2024-06-01T02:06:14+00:00",
    "commented_code": "export function onScopeDispose(fn: () => void) {\n   if (activeEffectScope) {\n-    activeEffectScope.cleanups.push(fn)\n+    activeEffectScope.cleanups.push(() => {\n+      pauseTracking()\n+      fn()\n+      resetTracking()\n+    })",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1623093650",
        "repo_full_name": "vuejs/core",
        "pr_number": 7265,
        "pr_file": "packages/reactivity/src/effectScope.ts",
        "discussion_id": "1623093650",
        "commented_code": "@@ -126,7 +126,11 @@ export function getCurrentScope() {\n \n export function onScopeDispose(fn: () => void) {\n   if (activeEffectScope) {\n-    activeEffectScope.cleanups.push(fn)\n+    activeEffectScope.cleanups.push(() => {\n+      pauseTracking()\n+      fn()\n+      resetTracking()\n+    })",
        "comment_created_at": "2024-06-01T02:06:14+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I'm not very familiar with this part of the codebase, but I did have a couple of thoughts...\r\n\r\n1. Is there a reason to call `pauseTracking()` and `resetTracking()` inside each cleanup function, rather than doing it once in `stop`, either side of the `for` loop that invokes these functions?\r\n2. Do we need to handle error cases here? I notice that `run` uses `try`/`finally` for something similar. I'm thinking maybe `resetTracking()` should be in a `finally` block?",
        "pr_file_module": null
      },
      {
        "comment_id": "1628091466",
        "repo_full_name": "vuejs/core",
        "pr_number": 7265,
        "pr_file": "packages/reactivity/src/effectScope.ts",
        "discussion_id": "1623093650",
        "commented_code": "@@ -126,7 +126,11 @@ export function getCurrentScope() {\n \n export function onScopeDispose(fn: () => void) {\n   if (activeEffectScope) {\n-    activeEffectScope.cleanups.push(fn)\n+    activeEffectScope.cleanups.push(() => {\n+      pauseTracking()\n+      fn()\n+      resetTracking()\n+    })",
        "comment_created_at": "2024-06-05T16:35:08+00:00",
        "comment_author": "rudyxu1102",
        "comment_body": "Updated, thanks for your reivew.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1722647505",
    "pr_number": 7265,
    "pr_file": "packages/reactivity/src/effectScope.ts",
    "created_at": "2024-08-20T03:45:22+00:00",
    "commented_code": "stop(fromParent?: boolean): void {\n     if (this._active) {\n+      pauseTracking()",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1722647505",
        "repo_full_name": "vuejs/core",
        "pr_number": 7265,
        "pr_file": "packages/reactivity/src/effectScope.ts",
        "discussion_id": "1722647505",
        "commented_code": "@@ -115,6 +115,7 @@ export class EffectScope {\n \n   stop(fromParent?: boolean): void {\n     if (this._active) {\n+      pauseTracking()",
        "comment_created_at": "2024-08-20T03:45:22+00:00",
        "comment_author": "edison1105",
        "comment_body": "the changes should like below:\r\n```ts\r\n      stop(fromParent?: boolean): void {\r\n        if (this._active) {\r\n      \t  try{\r\n      \t    pauseTracking()\r\n      \t    //...\r\n      \t  } finally {\r\n      \t    resetTracking()\r\n      \t  }\r\n      \t}\r\n      }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1388727165",
    "pr_number": 9206,
    "pr_file": "packages/runtime-core/src/renderEffect.ts",
    "created_at": "2023-11-10T00:22:34+00:00",
    "commented_code": "+import { ReactiveEffect } from '@vue/reactivity'\n+\n+/**\n+ * Extend `ReactiveEffect` by adding `pause` and `resume` methods for controlling the execution of the `render` function.\n+ */\n+export class RenderEffect extends ReactiveEffect {\n+  private _isPaused = false\n+  private _isCalled = false\n+  pause() {\n+    this._isPaused = true\n+  }\n+  resume(runOnce = false) {\n+    if (this._isPaused) {\n+      this._isPaused = false\n+      if (this._isCalled && runOnce) {\n+        super.run()\n+      }\n+      this._isCalled = false\n+    }\n+  }\n+  update() {\n+    if (this._isPaused) {\n+      this._isCalled = true\n+    } else {\n+      return super.run()\n+    }\n+  }",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1388727165",
        "repo_full_name": "vuejs/core",
        "pr_number": 9206,
        "pr_file": "packages/runtime-core/src/renderEffect.ts",
        "discussion_id": "1388727165",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { ReactiveEffect } from '@vue/reactivity'\n+\n+/**\n+ * Extend `ReactiveEffect` by adding `pause` and `resume` methods for controlling the execution of the `render` function.\n+ */\n+export class RenderEffect extends ReactiveEffect {\n+  private _isPaused = false\n+  private _isCalled = false\n+  pause() {\n+    this._isPaused = true\n+  }\n+  resume(runOnce = false) {\n+    if (this._isPaused) {\n+      this._isPaused = false\n+      if (this._isCalled && runOnce) {\n+        super.run()\n+      }\n+      this._isCalled = false\n+    }\n+  }\n+  update() {\n+    if (this._isPaused) {\n+      this._isCalled = true\n+    } else {\n+      return super.run()\n+    }\n+  }",
        "comment_created_at": "2023-11-10T00:22:34+00:00",
        "comment_author": "antfu",
        "comment_body": "Love the compatibility of pausable effect. Since this is not bound to the runtime/dom, I wonder if this could be generally available in `ReactiveEffect` directly.\r\n\r\n/cc @yyx990803 WDYT? Or do you think it deserves a dedicated RFC?",
        "pr_file_module": null
      },
      {
        "comment_id": "1391933179",
        "repo_full_name": "vuejs/core",
        "pr_number": 9206,
        "pr_file": "packages/runtime-core/src/renderEffect.ts",
        "discussion_id": "1388727165",
        "commented_code": "@@ -0,0 +1,28 @@\n+import { ReactiveEffect } from '@vue/reactivity'\n+\n+/**\n+ * Extend `ReactiveEffect` by adding `pause` and `resume` methods for controlling the execution of the `render` function.\n+ */\n+export class RenderEffect extends ReactiveEffect {\n+  private _isPaused = false\n+  private _isCalled = false\n+  pause() {\n+    this._isPaused = true\n+  }\n+  resume(runOnce = false) {\n+    if (this._isPaused) {\n+      this._isPaused = false\n+      if (this._isCalled && runOnce) {\n+        super.run()\n+      }\n+      this._isCalled = false\n+    }\n+  }\n+  update() {\n+    if (this._isPaused) {\n+      this._isCalled = true\n+    } else {\n+      return super.run()\n+    }\n+  }",
        "comment_created_at": "2023-11-14T03:07:09+00:00",
        "comment_author": "Alfred-Skyblue",
        "comment_body": "As the addition of `pause` and `resume` methods in `ReactiveEffect` has significant implications for the existing codebase, I have initiated an RFC to discuss this feature.\r\n\r\nhttps://github.com/vuejs/rfcs/discussions/599\r\n\r\n/cc @yyx990803 @antfu ",
        "pr_file_module": null
      }
    ]
  }
]