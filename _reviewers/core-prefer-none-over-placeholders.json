[
  {
    "discussion_id": "2219438376",
    "pr_number": 148989,
    "pr_file": "homeassistant/components/airos/entity.py",
    "created_at": "2025-07-21T14:43:44+00:00",
    "commented_code": "+\"\"\"Generic AirOS Entity Class.\"\"\"\n+\n+from __future__ import annotations\n+\n+from homeassistant.const import CONF_HOST\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import AirOSData, AirOSDataUpdateCoordinator\n+\n+\n+class AirOSEntity(CoordinatorEntity[AirOSDataUpdateCoordinator]):\n+    \"\"\"Represent a AirOS Entity.\"\"\"\n+\n+    def __init__(\n+        self,\n+        coordinator: AirOSDataUpdateCoordinator,\n+    ) -> None:\n+        \"\"\"Initialise the gateway.\"\"\"\n+        super().__init__(coordinator)\n+\n+        data = self.coordinator.data\n+        device_data = data.device_data\n+        host_data = device_data[\"host\"]\n+\n+        configuration_url: str | None = None\n+        if entry := self.coordinator.config_entry:\n+            configuration_url = f\"https://{entry.data[CONF_HOST]}\"\n+\n+        self._attr_device_info = DeviceInfo(\n+            configuration_url=configuration_url,\n+            identifiers={(DOMAIN, str(data.device_id))},\n+            manufacturer=\"Ubiquiti\",\n+            model=host_data.get(\"devmodel\", \"Unknown\"),\n+            name=data.hostname,\n+            sw_version=host_data.get(\"fwversion\", \"Unknown\"),",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2219438376",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148989,
        "pr_file": "homeassistant/components/airos/entity.py",
        "discussion_id": "2219438376",
        "commented_code": "@@ -0,0 +1,58 @@\n+\"\"\"Generic AirOS Entity Class.\"\"\"\n+\n+from __future__ import annotations\n+\n+from homeassistant.const import CONF_HOST\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import AirOSData, AirOSDataUpdateCoordinator\n+\n+\n+class AirOSEntity(CoordinatorEntity[AirOSDataUpdateCoordinator]):\n+    \"\"\"Represent a AirOS Entity.\"\"\"\n+\n+    def __init__(\n+        self,\n+        coordinator: AirOSDataUpdateCoordinator,\n+    ) -> None:\n+        \"\"\"Initialise the gateway.\"\"\"\n+        super().__init__(coordinator)\n+\n+        data = self.coordinator.data\n+        device_data = data.device_data\n+        host_data = device_data[\"host\"]\n+\n+        configuration_url: str | None = None\n+        if entry := self.coordinator.config_entry:\n+            configuration_url = f\"https://{entry.data[CONF_HOST]}\"\n+\n+        self._attr_device_info = DeviceInfo(\n+            configuration_url=configuration_url,\n+            identifiers={(DOMAIN, str(data.device_id))},\n+            manufacturer=\"Ubiquiti\",\n+            model=host_data.get(\"devmodel\", \"Unknown\"),\n+            name=data.hostname,\n+            sw_version=host_data.get(\"fwversion\", \"Unknown\"),",
        "comment_created_at": "2025-07-21T14:43:44+00:00",
        "comment_author": "joostlek",
        "comment_body": "```suggestion\r\n            model=host_data.get(\"devmodel\"),\r\n            name=data.hostname,\r\n            sw_version=host_data.get(\"fwversion\"),\r\n```\r\nrather set it to `None` than to set an arbritary name",
        "pr_file_module": null
      },
      {
        "comment_id": "2219671998",
        "repo_full_name": "home-assistant/core",
        "pr_number": 148989,
        "pr_file": "homeassistant/components/airos/entity.py",
        "discussion_id": "2219438376",
        "commented_code": "@@ -0,0 +1,58 @@\n+\"\"\"Generic AirOS Entity Class.\"\"\"\n+\n+from __future__ import annotations\n+\n+from homeassistant.const import CONF_HOST\n+from homeassistant.helpers.device_registry import DeviceInfo\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+\n+from .const import DOMAIN\n+from .coordinator import AirOSData, AirOSDataUpdateCoordinator\n+\n+\n+class AirOSEntity(CoordinatorEntity[AirOSDataUpdateCoordinator]):\n+    \"\"\"Represent a AirOS Entity.\"\"\"\n+\n+    def __init__(\n+        self,\n+        coordinator: AirOSDataUpdateCoordinator,\n+    ) -> None:\n+        \"\"\"Initialise the gateway.\"\"\"\n+        super().__init__(coordinator)\n+\n+        data = self.coordinator.data\n+        device_data = data.device_data\n+        host_data = device_data[\"host\"]\n+\n+        configuration_url: str | None = None\n+        if entry := self.coordinator.config_entry:\n+            configuration_url = f\"https://{entry.data[CONF_HOST]}\"\n+\n+        self._attr_device_info = DeviceInfo(\n+            configuration_url=configuration_url,\n+            identifiers={(DOMAIN, str(data.device_id))},\n+            manufacturer=\"Ubiquiti\",\n+            model=host_data.get(\"devmodel\", \"Unknown\"),\n+            name=data.hostname,\n+            sw_version=host_data.get(\"fwversion\", \"Unknown\"),",
        "comment_created_at": "2025-07-21T16:22:21+00:00",
        "comment_author": "CoMPaTech",
        "comment_body": "Not injecting commit suggestion as per consts suggestion added",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069949827",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/switch.py",
    "created_at": "2025-05-01T07:51:53+00:00",
    "commented_code": "+\"\"\"Integration for Redgtech switches.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING, Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from redgtech_api.api import RedgtechConnectionError, RedgtechAuthError\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from homeassistant.helpers.entity import DeviceInfo, ToggleEntity\n+from homeassistant.helpers.restore_state import RestoreEntity\n+\n+if TYPE_CHECKING:\n+    from . import RedgtechConfigEntry\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: RedgtechConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+    coordinator: RedgtechDataUpdateCoordinator = config_entry.runtime_data\n+    async_add_entities(RedgtechSwitch(coordinator, device) for device in coordinator.data)\n+\n+class RedgtechSwitch(ToggleEntity, RestoreEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name = True\n+    _attr_name = None\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._attr_unique_id = f\"redgtech_{device.id}\"\n+        self._attr_device_info = DeviceInfo(\n+            identifiers={(DOMAIN, device.id)},\n+            name=device.name,\n+            manufacturer=\"Redgtech\",\n+            model=\"Switch Model\",",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2069949827",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "2069949827",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Integration for Redgtech switches.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING, Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from redgtech_api.api import RedgtechConnectionError, RedgtechAuthError\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from homeassistant.helpers.entity import DeviceInfo, ToggleEntity\n+from homeassistant.helpers.restore_state import RestoreEntity\n+\n+if TYPE_CHECKING:\n+    from . import RedgtechConfigEntry\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: RedgtechConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+    coordinator: RedgtechDataUpdateCoordinator = config_entry.runtime_data\n+    async_add_entities(RedgtechSwitch(coordinator, device) for device in coordinator.data)\n+\n+class RedgtechSwitch(ToggleEntity, RestoreEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name = True\n+    _attr_name = None\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._attr_unique_id = f\"redgtech_{device.id}\"\n+        self._attr_device_info = DeviceInfo(\n+            identifiers={(DOMAIN, device.id)},\n+            name=device.name,\n+            manufacturer=\"Redgtech\",\n+            model=\"Switch Model\",",
        "comment_created_at": "2025-05-01T07:51:53+00:00",
        "comment_author": "zweckj",
        "comment_body": "this is not a valid model",
        "pr_file_module": null
      },
      {
        "comment_id": "2078273849",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "2069949827",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Integration for Redgtech switches.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING, Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from redgtech_api.api import RedgtechConnectionError, RedgtechAuthError\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from homeassistant.helpers.entity import DeviceInfo, ToggleEntity\n+from homeassistant.helpers.restore_state import RestoreEntity\n+\n+if TYPE_CHECKING:\n+    from . import RedgtechConfigEntry\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: RedgtechConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+    coordinator: RedgtechDataUpdateCoordinator = config_entry.runtime_data\n+    async_add_entities(RedgtechSwitch(coordinator, device) for device in coordinator.data)\n+\n+class RedgtechSwitch(ToggleEntity, RestoreEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name = True\n+    _attr_name = None\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._attr_unique_id = f\"redgtech_{device.id}\"\n+        self._attr_device_info = DeviceInfo(\n+            identifiers={(DOMAIN, device.id)},\n+            name=device.name,\n+            manufacturer=\"Redgtech\",\n+            model=\"Switch Model\",",
        "comment_created_at": "2025-05-07T18:40:01+00:00",
        "comment_author": "Jonhsady",
        "comment_body": "\r\nWhat can you suggest I do?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2078276165",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "2069949827",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Integration for Redgtech switches.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING, Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from redgtech_api.api import RedgtechConnectionError, RedgtechAuthError\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from homeassistant.helpers.entity import DeviceInfo, ToggleEntity\n+from homeassistant.helpers.restore_state import RestoreEntity\n+\n+if TYPE_CHECKING:\n+    from . import RedgtechConfigEntry\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: RedgtechConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+    coordinator: RedgtechDataUpdateCoordinator = config_entry.runtime_data\n+    async_add_entities(RedgtechSwitch(coordinator, device) for device in coordinator.data)\n+\n+class RedgtechSwitch(ToggleEntity, RestoreEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name = True\n+    _attr_name = None\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._attr_unique_id = f\"redgtech_{device.id}\"\n+        self._attr_device_info = DeviceInfo(\n+            identifiers={(DOMAIN, device.id)},\n+            name=device.name,\n+            manufacturer=\"Redgtech\",\n+            model=\"Switch Model\",",
        "comment_created_at": "2025-05-07T18:41:31+00:00",
        "comment_author": "Jonhsady",
        "comment_body": "model=device.model if hasattr(device, \"model\") else \"Unknown Model\"\r\nresolveria?",
        "pr_file_module": null
      },
      {
        "comment_id": "2079957065",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/switch.py",
        "discussion_id": "2069949827",
        "commented_code": "@@ -0,0 +1,87 @@\n+\"\"\"Integration for Redgtech switches.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+from typing import TYPE_CHECKING, Any\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.update_coordinator import CoordinatorEntity\n+from homeassistant.helpers.entity_platform import AddEntitiesCallback\n+from homeassistant.const import STATE_ON, STATE_OFF\n+from .const import DOMAIN\n+from .coordinator import RedgtechDataUpdateCoordinator, RedgtechDevice\n+from redgtech_api.api import RedgtechConnectionError, RedgtechAuthError\n+from homeassistant.exceptions import HomeAssistantError, ConfigEntryError\n+from homeassistant.helpers.entity import DeviceInfo, ToggleEntity\n+from homeassistant.helpers.restore_state import RestoreEntity\n+\n+if TYPE_CHECKING:\n+    from . import RedgtechConfigEntry\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+async def async_setup_entry(\n+    hass: HomeAssistant, config_entry: RedgtechConfigEntry, async_add_entities: AddEntitiesCallback\n+) -> None:\n+    \"\"\"Set up the switch platform.\"\"\"\n+    coordinator: RedgtechDataUpdateCoordinator = config_entry.runtime_data\n+    async_add_entities(RedgtechSwitch(coordinator, device) for device in coordinator.data)\n+\n+class RedgtechSwitch(ToggleEntity, RestoreEntity):\n+    \"\"\"Representation of a Redgtech switch.\"\"\"\n+\n+    _attr_has_entity_name = True\n+    _attr_name = None\n+\n+    def __init__(self, coordinator: RedgtechDataUpdateCoordinator, device: RedgtechDevice) -> None:\n+        \"\"\"Initialize the switch.\"\"\"\n+        self.coordinator = coordinator\n+        self.device = device\n+        self._attr_unique_id = f\"redgtech_{device.id}\"\n+        self._attr_device_info = DeviceInfo(\n+            identifiers={(DOMAIN, device.id)},\n+            name=device.name,\n+            manufacturer=\"Redgtech\",\n+            model=\"Switch Model\",",
        "comment_created_at": "2025-05-08T15:30:23+00:00",
        "comment_author": "zweckj",
        "comment_body": "ideally get the actual model from your API if you can. Otherwise don't set it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135542132",
    "pr_number": 142994,
    "pr_file": "homeassistant/components/volvo/sensor.py",
    "created_at": "2025-06-09T11:19:40+00:00",
    "commented_code": "+\"\"\"Volvo sensors.\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Callable\n+from dataclasses import dataclass\n+from typing import Any\n+\n+from volvocarsapi.models import (\n+    VolvoCarsApiBaseModel,\n+    VolvoCarsValue,\n+    VolvoCarsValueField,\n+    VolvoCarsVehicle,\n+)\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.const import (\n+    PERCENTAGE,\n+    EntityCategory,\n+    UnitOfElectricCurrent,\n+    UnitOfEnergy,\n+    UnitOfEnergyDistance,\n+    UnitOfLength,\n+    UnitOfSpeed,\n+    UnitOfTime,\n+    UnitOfVolume,\n+)\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+\n+from .const import DATA_BATTERY_CAPACITY\n+from .coordinator import VolvoConfigEntry\n+from .entity import VolvoEntity, VolvoEntityDescription, value_to_translation_key\n+\n+PARALLEL_UPDATES = 0\n+\n+# Entities having an \"unknown\" value should report None as the state\n+_UNKNOWN_VALUES = [\n+    \"UNSPECIFIED\",\n+    \"CONNECTION_STATUS_UNSPECIFIED\",\n+    \"CHARGING_SYSTEM_UNSPECIFIED\",\n+]\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoSensorDescription(VolvoEntityDescription, SensorEntityDescription):\n+    \"\"\"Describes a Volvo sensor entity.\"\"\"\n+\n+    value_fn: Callable[[VolvoCarsValue], Any] | None = None\n+    available_fn: Callable[[VolvoCarsVehicle], bool] = lambda vehicle: True\n+\n+\n+def _availability_status(field: VolvoCarsValue) -> str:\n+    reason = field.get(\"unavailable_reason\")\n+    return reason if reason else str(field.value)\n+\n+\n+def _calculate_time_to_service(field: VolvoCarsValue) -> int:\n+    value = int(field.value)\n+\n+    # Always express value in days\n+    if isinstance(field, VolvoCarsValueField) and field.unit == \"months\":\n+        return value * 30\n+\n+    return value\n+\n+\n+_DESCRIPTIONS: tuple[VolvoSensorDescription, ...] = (\n+    # command-accessibility endpoint\n+    VolvoSensorDescription(\n+        key=\"availability\",\n+        translation_key=\"availability\",\n+        api_field=\"availabilityStatus\",\n+        device_class=SensorDeviceClass.ENUM,\n+        options=[\n+            \"available\",\n+            \"car_in_use\",\n+            \"no_internet\",\n+            \"power_saving_mode\",\n+            \"unspecified\",",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2135542132",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/sensor.py",
        "discussion_id": "2135542132",
        "commented_code": "@@ -0,0 +1,360 @@\n+\"\"\"Volvo sensors.\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Callable\n+from dataclasses import dataclass\n+from typing import Any\n+\n+from volvocarsapi.models import (\n+    VolvoCarsApiBaseModel,\n+    VolvoCarsValue,\n+    VolvoCarsValueField,\n+    VolvoCarsVehicle,\n+)\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.const import (\n+    PERCENTAGE,\n+    EntityCategory,\n+    UnitOfElectricCurrent,\n+    UnitOfEnergy,\n+    UnitOfEnergyDistance,\n+    UnitOfLength,\n+    UnitOfSpeed,\n+    UnitOfTime,\n+    UnitOfVolume,\n+)\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+\n+from .const import DATA_BATTERY_CAPACITY\n+from .coordinator import VolvoConfigEntry\n+from .entity import VolvoEntity, VolvoEntityDescription, value_to_translation_key\n+\n+PARALLEL_UPDATES = 0\n+\n+# Entities having an \"unknown\" value should report None as the state\n+_UNKNOWN_VALUES = [\n+    \"UNSPECIFIED\",\n+    \"CONNECTION_STATUS_UNSPECIFIED\",\n+    \"CHARGING_SYSTEM_UNSPECIFIED\",\n+]\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoSensorDescription(VolvoEntityDescription, SensorEntityDescription):\n+    \"\"\"Describes a Volvo sensor entity.\"\"\"\n+\n+    value_fn: Callable[[VolvoCarsValue], Any] | None = None\n+    available_fn: Callable[[VolvoCarsVehicle], bool] = lambda vehicle: True\n+\n+\n+def _availability_status(field: VolvoCarsValue) -> str:\n+    reason = field.get(\"unavailable_reason\")\n+    return reason if reason else str(field.value)\n+\n+\n+def _calculate_time_to_service(field: VolvoCarsValue) -> int:\n+    value = int(field.value)\n+\n+    # Always express value in days\n+    if isinstance(field, VolvoCarsValueField) and field.unit == \"months\":\n+        return value * 30\n+\n+    return value\n+\n+\n+_DESCRIPTIONS: tuple[VolvoSensorDescription, ...] = (\n+    # command-accessibility endpoint\n+    VolvoSensorDescription(\n+        key=\"availability\",\n+        translation_key=\"availability\",\n+        api_field=\"availabilityStatus\",\n+        device_class=SensorDeviceClass.ENUM,\n+        options=[\n+            \"available\",\n+            \"car_in_use\",\n+            \"no_internet\",\n+            \"power_saving_mode\",\n+            \"unspecified\",",
        "comment_created_at": "2025-06-09T11:19:40+00:00",
        "comment_author": "joostlek",
        "comment_body": "I just saw that list where you mention that we map this unknown, is that also applicable here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2138201904",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/sensor.py",
        "discussion_id": "2135542132",
        "commented_code": "@@ -0,0 +1,360 @@\n+\"\"\"Volvo sensors.\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Callable\n+from dataclasses import dataclass\n+from typing import Any\n+\n+from volvocarsapi.models import (\n+    VolvoCarsApiBaseModel,\n+    VolvoCarsValue,\n+    VolvoCarsValueField,\n+    VolvoCarsVehicle,\n+)\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.const import (\n+    PERCENTAGE,\n+    EntityCategory,\n+    UnitOfElectricCurrent,\n+    UnitOfEnergy,\n+    UnitOfEnergyDistance,\n+    UnitOfLength,\n+    UnitOfSpeed,\n+    UnitOfTime,\n+    UnitOfVolume,\n+)\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+\n+from .const import DATA_BATTERY_CAPACITY\n+from .coordinator import VolvoConfigEntry\n+from .entity import VolvoEntity, VolvoEntityDescription, value_to_translation_key\n+\n+PARALLEL_UPDATES = 0\n+\n+# Entities having an \"unknown\" value should report None as the state\n+_UNKNOWN_VALUES = [\n+    \"UNSPECIFIED\",\n+    \"CONNECTION_STATUS_UNSPECIFIED\",\n+    \"CHARGING_SYSTEM_UNSPECIFIED\",\n+]\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoSensorDescription(VolvoEntityDescription, SensorEntityDescription):\n+    \"\"\"Describes a Volvo sensor entity.\"\"\"\n+\n+    value_fn: Callable[[VolvoCarsValue], Any] | None = None\n+    available_fn: Callable[[VolvoCarsVehicle], bool] = lambda vehicle: True\n+\n+\n+def _availability_status(field: VolvoCarsValue) -> str:\n+    reason = field.get(\"unavailable_reason\")\n+    return reason if reason else str(field.value)\n+\n+\n+def _calculate_time_to_service(field: VolvoCarsValue) -> int:\n+    value = int(field.value)\n+\n+    # Always express value in days\n+    if isinstance(field, VolvoCarsValueField) and field.unit == \"months\":\n+        return value * 30\n+\n+    return value\n+\n+\n+_DESCRIPTIONS: tuple[VolvoSensorDescription, ...] = (\n+    # command-accessibility endpoint\n+    VolvoSensorDescription(\n+        key=\"availability\",\n+        translation_key=\"availability\",\n+        api_field=\"availabilityStatus\",\n+        device_class=SensorDeviceClass.ENUM,\n+        options=[\n+            \"available\",\n+            \"car_in_use\",\n+            \"no_internet\",\n+            \"power_saving_mode\",\n+            \"unspecified\",",
        "comment_created_at": "2025-06-10T15:24:18+00:00",
        "comment_author": "thomasddn",
        "comment_body": "Yes, mapping is done at L354-L358",
        "pr_file_module": null
      },
      {
        "comment_id": "2138253620",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/sensor.py",
        "discussion_id": "2135542132",
        "commented_code": "@@ -0,0 +1,360 @@\n+\"\"\"Volvo sensors.\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Callable\n+from dataclasses import dataclass\n+from typing import Any\n+\n+from volvocarsapi.models import (\n+    VolvoCarsApiBaseModel,\n+    VolvoCarsValue,\n+    VolvoCarsValueField,\n+    VolvoCarsVehicle,\n+)\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.const import (\n+    PERCENTAGE,\n+    EntityCategory,\n+    UnitOfElectricCurrent,\n+    UnitOfEnergy,\n+    UnitOfEnergyDistance,\n+    UnitOfLength,\n+    UnitOfSpeed,\n+    UnitOfTime,\n+    UnitOfVolume,\n+)\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+\n+from .const import DATA_BATTERY_CAPACITY\n+from .coordinator import VolvoConfigEntry\n+from .entity import VolvoEntity, VolvoEntityDescription, value_to_translation_key\n+\n+PARALLEL_UPDATES = 0\n+\n+# Entities having an \"unknown\" value should report None as the state\n+_UNKNOWN_VALUES = [\n+    \"UNSPECIFIED\",\n+    \"CONNECTION_STATUS_UNSPECIFIED\",\n+    \"CHARGING_SYSTEM_UNSPECIFIED\",\n+]\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoSensorDescription(VolvoEntityDescription, SensorEntityDescription):\n+    \"\"\"Describes a Volvo sensor entity.\"\"\"\n+\n+    value_fn: Callable[[VolvoCarsValue], Any] | None = None\n+    available_fn: Callable[[VolvoCarsVehicle], bool] = lambda vehicle: True\n+\n+\n+def _availability_status(field: VolvoCarsValue) -> str:\n+    reason = field.get(\"unavailable_reason\")\n+    return reason if reason else str(field.value)\n+\n+\n+def _calculate_time_to_service(field: VolvoCarsValue) -> int:\n+    value = int(field.value)\n+\n+    # Always express value in days\n+    if isinstance(field, VolvoCarsValueField) and field.unit == \"months\":\n+        return value * 30\n+\n+    return value\n+\n+\n+_DESCRIPTIONS: tuple[VolvoSensorDescription, ...] = (\n+    # command-accessibility endpoint\n+    VolvoSensorDescription(\n+        key=\"availability\",\n+        translation_key=\"availability\",\n+        api_field=\"availabilityStatus\",\n+        device_class=SensorDeviceClass.ENUM,\n+        options=[\n+            \"available\",\n+            \"car_in_use\",\n+            \"no_internet\",\n+            \"power_saving_mode\",\n+            \"unspecified\",",
        "comment_created_at": "2025-06-10T15:47:46+00:00",
        "comment_author": "joostlek",
        "comment_body": "In that case, we should not expose `unknown` as a possible state here, from what I read here we either show `unspecified` as valid option, but if that is translated to `None` then neither can be a valid option",
        "pr_file_module": null
      },
      {
        "comment_id": "2140463979",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/sensor.py",
        "discussion_id": "2135542132",
        "commented_code": "@@ -0,0 +1,360 @@\n+\"\"\"Volvo sensors.\"\"\"\n+\n+from __future__ import annotations\n+\n+from collections.abc import Callable\n+from dataclasses import dataclass\n+from typing import Any\n+\n+from volvocarsapi.models import (\n+    VolvoCarsApiBaseModel,\n+    VolvoCarsValue,\n+    VolvoCarsValueField,\n+    VolvoCarsVehicle,\n+)\n+\n+from homeassistant.components.sensor import (\n+    SensorDeviceClass,\n+    SensorEntity,\n+    SensorEntityDescription,\n+    SensorStateClass,\n+)\n+from homeassistant.const import (\n+    PERCENTAGE,\n+    EntityCategory,\n+    UnitOfElectricCurrent,\n+    UnitOfEnergy,\n+    UnitOfEnergyDistance,\n+    UnitOfLength,\n+    UnitOfSpeed,\n+    UnitOfTime,\n+    UnitOfVolume,\n+)\n+from homeassistant.core import HomeAssistant\n+from homeassistant.helpers.entity_platform import AddConfigEntryEntitiesCallback\n+\n+from .const import DATA_BATTERY_CAPACITY\n+from .coordinator import VolvoConfigEntry\n+from .entity import VolvoEntity, VolvoEntityDescription, value_to_translation_key\n+\n+PARALLEL_UPDATES = 0\n+\n+# Entities having an \"unknown\" value should report None as the state\n+_UNKNOWN_VALUES = [\n+    \"UNSPECIFIED\",\n+    \"CONNECTION_STATUS_UNSPECIFIED\",\n+    \"CHARGING_SYSTEM_UNSPECIFIED\",\n+]\n+\n+\n+@dataclass(frozen=True, kw_only=True)\n+class VolvoSensorDescription(VolvoEntityDescription, SensorEntityDescription):\n+    \"\"\"Describes a Volvo sensor entity.\"\"\"\n+\n+    value_fn: Callable[[VolvoCarsValue], Any] | None = None\n+    available_fn: Callable[[VolvoCarsVehicle], bool] = lambda vehicle: True\n+\n+\n+def _availability_status(field: VolvoCarsValue) -> str:\n+    reason = field.get(\"unavailable_reason\")\n+    return reason if reason else str(field.value)\n+\n+\n+def _calculate_time_to_service(field: VolvoCarsValue) -> int:\n+    value = int(field.value)\n+\n+    # Always express value in days\n+    if isinstance(field, VolvoCarsValueField) and field.unit == \"months\":\n+        return value * 30\n+\n+    return value\n+\n+\n+_DESCRIPTIONS: tuple[VolvoSensorDescription, ...] = (\n+    # command-accessibility endpoint\n+    VolvoSensorDescription(\n+        key=\"availability\",\n+        translation_key=\"availability\",\n+        api_field=\"availabilityStatus\",\n+        device_class=SensorDeviceClass.ENUM,\n+        options=[\n+            \"available\",\n+            \"car_in_use\",\n+            \"no_internet\",\n+            \"power_saving_mode\",\n+            \"unspecified\",",
        "comment_created_at": "2025-06-11T15:15:23+00:00",
        "comment_author": "thomasddn",
        "comment_body": "I will remove the `_UNKNOWN_VALUES` values from the sensor options where applicable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2227818968",
    "pr_number": 146437,
    "pr_file": "homeassistant/components/imeon_inverter/sensor.py",
    "created_at": "2025-07-24T08:25:22+00:00",
    "commented_code": "@property\n     def native_value(self) -> StateType | None:\n         \"\"\"Return the state of the entity.\"\"\"\n-        return self.coordinator.data.get(self.data_key)\n+        raw_value = self.coordinator.data.get(self.data_key)\n+        if not isinstance(raw_value, str):\n+            return raw_value\n+        return {\"???\": \"unknown\"}.get(raw_value, raw_value)",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2227818968",
        "repo_full_name": "home-assistant/core",
        "pr_number": 146437,
        "pr_file": "homeassistant/components/imeon_inverter/sensor.py",
        "discussion_id": "2227818968",
        "commented_code": "@@ -366,4 +442,12 @@ class InverterSensor(InverterEntity, SensorEntity):\n     @property\n     def native_value(self) -> StateType | None:\n         \"\"\"Return the state of the entity.\"\"\"\n-        return self.coordinator.data.get(self.data_key)\n+        raw_value = self.coordinator.data.get(self.data_key)\n+        if not isinstance(raw_value, str):\n+            return raw_value\n+        return {\"???\": \"unknown\"}.get(raw_value, raw_value)",
        "comment_created_at": "2025-07-24T08:25:22+00:00",
        "comment_author": "joostlek",
        "comment_body": "We should map `???` to `None`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2230256793",
    "pr_number": 149366,
    "pr_file": "homeassistant/components/geniushub/entity.py",
    "created_at": "2025-07-25T06:24:12+00:00",
    "commented_code": "async def async_update(self) -> None:\n         \"\"\"Update an entity's state data.\"\"\"\n         if \"_state\" in self._device.data:  # only via v3 API\n-            self._last_comms = dt_util.utc_from_timestamp(\n-                self._device.data[\"_state\"][\"lastComms\"]\n-            )\n+            if self._device.data[\"_state\"][\"lastComms\"] is not None:",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2230256793",
        "repo_full_name": "home-assistant/core",
        "pr_number": 149366,
        "pr_file": "homeassistant/components/geniushub/entity.py",
        "discussion_id": "2230256793",
        "commented_code": "@@ -78,9 +78,10 @@ def extra_state_attributes(self) -> dict[str, Any]:\n     async def async_update(self) -> None:\n         \"\"\"Update an entity's state data.\"\"\"\n         if \"_state\" in self._device.data:  # only via v3 API\n-            self._last_comms = dt_util.utc_from_timestamp(\n-                self._device.data[\"_state\"][\"lastComms\"]\n-            )\n+            if self._device.data[\"_state\"][\"lastComms\"] is not None:",
        "comment_created_at": "2025-07-25T06:24:12+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\nif  (state := self._device.data.get(\"_state\")) and (lastComms := state[\"lastComms\"]) is not None: # only via v3 API\n```\nI think if you use walrusses it get's a bit more readable, also is it safe to access the lastComms with [] or do you need to get it as well",
        "pr_file_module": null
      }
    ]
  }
]