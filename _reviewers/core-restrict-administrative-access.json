[
  {
    "discussion_id": "2115998884",
    "pr_number": 142994,
    "pr_file": "tests/components/volvo/test_init.py",
    "created_at": "2025-05-30T14:06:45+00:00",
    "commented_code": "+\"\"\"Test Volvo init.\"\"\"\n+\n+from collections.abc import Awaitable, Callable\n+from http import HTTPStatus\n+\n+import pytest\n+from volvocarsapi.auth import TOKEN_URL\n+\n+from homeassistant.config_entries import ConfigEntryState\n+from homeassistant.const import CONF_TOKEN\n+from homeassistant.core import HomeAssistant\n+\n+from .const import MOCK_ACCESS_TOKEN, SERVER_TOKEN_RESPONSE\n+\n+from tests.common import MockConfigEntry\n+from tests.test_util.aiohttp import AiohttpClientMocker\n+\n+\n+async def test_setup(\n+    hass: HomeAssistant,\n+    mock_config_entry: MockConfigEntry,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test setting up the integration.\"\"\"\n+    assert mock_config_entry.state is ConfigEntryState.NOT_LOADED\n+\n+    assert await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.LOADED\n+\n+    assert await hass.config_entries.async_unload(mock_config_entry.entry_id)\n+    await hass.async_block_till_done()\n+\n+    assert mock_config_entry.state is ConfigEntryState.NOT_LOADED\n+\n+\n+async def test_token_refresh_success(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test where token refresh succeeds.\"\"\"\n+\n+    assert mock_config_entry.data[CONF_TOKEN][\"access_token\"] == MOCK_ACCESS_TOKEN\n+\n+    assert await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.LOADED\n+\n+    # Verify token\n+    assert len(aioclient_mock.mock_calls) == 1\n+    assert (\n+        mock_config_entry.data[CONF_TOKEN][\"access_token\"]\n+        == SERVER_TOKEN_RESPONSE[\"access_token\"]\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    (\"token_response\"),\n+    [\n+        (HTTPStatus.BAD_REQUEST),\n+        (HTTPStatus.FORBIDDEN),\n+        (HTTPStatus.INTERNAL_SERVER_ERROR),\n+        (HTTPStatus.NOT_FOUND),\n+    ],\n+)\n+async def test_token_refresh_fail(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+    token_response: HTTPStatus,\n+) -> None:\n+    \"\"\"Test where token refresh fails.\"\"\"\n+\n+    aioclient_mock.post(TOKEN_URL, status=token_response)\n+\n+    assert not await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.SETUP_RETRY\n+\n+\n+async def test_token_refresh_reauth(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test where token refresh indicates unauthorized.\"\"\"\n+\n+    aioclient_mock.post(TOKEN_URL, status=HTTPStatus.UNAUTHORIZED)\n+\n+    assert not await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.SETUP_ERROR",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2115998884",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "tests/components/volvo/test_init.py",
        "discussion_id": "2115998884",
        "commented_code": "@@ -0,0 +1,89 @@\n+\"\"\"Test Volvo init.\"\"\"\n+\n+from collections.abc import Awaitable, Callable\n+from http import HTTPStatus\n+\n+import pytest\n+from volvocarsapi.auth import TOKEN_URL\n+\n+from homeassistant.config_entries import ConfigEntryState\n+from homeassistant.const import CONF_TOKEN\n+from homeassistant.core import HomeAssistant\n+\n+from .const import MOCK_ACCESS_TOKEN, SERVER_TOKEN_RESPONSE\n+\n+from tests.common import MockConfigEntry\n+from tests.test_util.aiohttp import AiohttpClientMocker\n+\n+\n+async def test_setup(\n+    hass: HomeAssistant,\n+    mock_config_entry: MockConfigEntry,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test setting up the integration.\"\"\"\n+    assert mock_config_entry.state is ConfigEntryState.NOT_LOADED\n+\n+    assert await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.LOADED\n+\n+    assert await hass.config_entries.async_unload(mock_config_entry.entry_id)\n+    await hass.async_block_till_done()\n+\n+    assert mock_config_entry.state is ConfigEntryState.NOT_LOADED\n+\n+\n+async def test_token_refresh_success(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test where token refresh succeeds.\"\"\"\n+\n+    assert mock_config_entry.data[CONF_TOKEN][\"access_token\"] == MOCK_ACCESS_TOKEN\n+\n+    assert await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.LOADED\n+\n+    # Verify token\n+    assert len(aioclient_mock.mock_calls) == 1\n+    assert (\n+        mock_config_entry.data[CONF_TOKEN][\"access_token\"]\n+        == SERVER_TOKEN_RESPONSE[\"access_token\"]\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    (\"token_response\"),\n+    [\n+        (HTTPStatus.BAD_REQUEST),\n+        (HTTPStatus.FORBIDDEN),\n+        (HTTPStatus.INTERNAL_SERVER_ERROR),\n+        (HTTPStatus.NOT_FOUND),\n+    ],\n+)\n+async def test_token_refresh_fail(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+    token_response: HTTPStatus,\n+) -> None:\n+    \"\"\"Test where token refresh fails.\"\"\"\n+\n+    aioclient_mock.post(TOKEN_URL, status=token_response)\n+\n+    assert not await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.SETUP_RETRY\n+\n+\n+async def test_token_refresh_reauth(\n+    mock_config_entry: MockConfigEntry,\n+    aioclient_mock: AiohttpClientMocker,\n+    setup_integration: Callable[[], Awaitable[bool]],\n+) -> None:\n+    \"\"\"Test where token refresh indicates unauthorized.\"\"\"\n+\n+    aioclient_mock.post(TOKEN_URL, status=HTTPStatus.UNAUTHORIZED)\n+\n+    assert not await setup_integration()\n+    assert mock_config_entry.state is ConfigEntryState.SETUP_ERROR",
        "comment_created_at": "2025-05-30T14:06:45+00:00",
        "comment_author": "gjohansson-ST",
        "comment_body": "Could we assert here that the reauth flow has started",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2099266820",
    "pr_number": 145344,
    "pr_file": "homeassistant/components/private_ble_device/__init__.py",
    "created_at": "2025-05-21T04:17:46+00:00",
    "commented_code": "from __future__ import annotations\n \n-from homeassistant.config_entries import ConfigEntry\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import SOURCE_INTEGRATION_DISCOVERY, ConfigEntry\n from homeassistant.const import Platform\n-from homeassistant.core import HomeAssistant\n+from homeassistant.core import HomeAssistant, ServiceCall, SupportsResponse\n+from homeassistant.helpers import config_validation as cv, discovery_flow\n+\n+from .const import DOMAIN\n \n PLATFORMS = [Platform.DEVICE_TRACKER, Platform.SENSOR]\n \n \n async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n     \"\"\"Set up tracking of a private bluetooth device from a config entry.\"\"\"\n+\n+    async def service_register_irk(call: ServiceCall) -> None:\n+        \"\"\"Trigger Private BLE Device to add an IRK.\"\"\"\n+        if _irk := call.data.get(\"irk\", False):\n+            discovery_flow.async_create_flow(\n+                hass,\n+                DOMAIN,\n+                context={\"source\": SOURCE_INTEGRATION_DISCOVERY},\n+                data={\"irk\": _irk},\n+            )\n+\n+    # Register action for creating new Private_BLE_Devices\n+    hass.services.async_register(\n+        DOMAIN,\n+        \"register_irk\",\n+        service_register_irk,\n+        vol.Schema(\n+            {\n+                vol.Required(\"irk\"): cv.string,\n+            }\n+        ),\n+        supports_response=SupportsResponse.NONE,\n+    )",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2099266820",
        "repo_full_name": "home-assistant/core",
        "pr_number": 145344,
        "pr_file": "homeassistant/components/private_ble_device/__init__.py",
        "discussion_id": "2099266820",
        "commented_code": "@@ -2,15 +2,44 @@\n \n from __future__ import annotations\n \n-from homeassistant.config_entries import ConfigEntry\n+import voluptuous as vol\n+\n+from homeassistant.config_entries import SOURCE_INTEGRATION_DISCOVERY, ConfigEntry\n from homeassistant.const import Platform\n-from homeassistant.core import HomeAssistant\n+from homeassistant.core import HomeAssistant, ServiceCall, SupportsResponse\n+from homeassistant.helpers import config_validation as cv, discovery_flow\n+\n+from .const import DOMAIN\n \n PLATFORMS = [Platform.DEVICE_TRACKER, Platform.SENSOR]\n \n \n async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:\n     \"\"\"Set up tracking of a private bluetooth device from a config entry.\"\"\"\n+\n+    async def service_register_irk(call: ServiceCall) -> None:\n+        \"\"\"Trigger Private BLE Device to add an IRK.\"\"\"\n+        if _irk := call.data.get(\"irk\", False):\n+            discovery_flow.async_create_flow(\n+                hass,\n+                DOMAIN,\n+                context={\"source\": SOURCE_INTEGRATION_DISCOVERY},\n+                data={\"irk\": _irk},\n+            )\n+\n+    # Register action for creating new Private_BLE_Devices\n+    hass.services.async_register(\n+        DOMAIN,\n+        \"register_irk\",\n+        service_register_irk,\n+        vol.Schema(\n+            {\n+                vol.Required(\"irk\"): cv.string,\n+            }\n+        ),\n+        supports_response=SupportsResponse.NONE,\n+    )",
        "comment_created_at": "2025-05-21T04:17:46+00:00",
        "comment_author": "bdraco",
        "comment_body": "I'm concerned about the security implications of allowing a service call to create a config entry. At the very least, this should be restricted to admin-level access.\r\n\r\nThat said, it might be better to expose this as a top-level API on the integration instead. That way, it's clearly scoped for use by other integrations and not exposed as a general-purpose service.",
        "pr_file_module": null
      }
    ]
  }
]