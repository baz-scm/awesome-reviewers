[
  {
    "discussion_id": "1724724853",
    "pr_number": 11675,
    "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
    "created_at": "2024-08-21T09:16:41+00:00",
    "commented_code": "})\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1724724853",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-21T09:16:41+00:00",
        "comment_author": "xieyuschen",
        "comment_body": "The [docs here](https://vuejs.org/guide/introduction.html#which-to-choose) conveys that the `Composition API` and `Options API` are equivalent.\r\n \r\n> Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\r\n\r\nPersonally i feel it's better to let the latter overrides the former(current behavior) if the key exists in both as they're equivalent APIs. Overriding according to their position is more intuitive. Introducing a priority breaks the _equivalent concept of two api_ while users need to pay additional attention for this. \r\n\r\nMoreover, seems the original issue is that the `created` hook cannot take effects if the `setup` first and then `data` later. I'm still new to vue so not sure why this change could fix the issue. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1724789757",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-21T10:03:26+00:00",
        "comment_author": "edison1105",
        "comment_body": "When both setup and data are used simultaneously, variables from setup take precedence over those from data at runtime. During compilation, the analyzer checks whether variables used in the render function come from data or setup. If variables with the same name exist:\r\n\r\n\t1.\tIf setup is defined before data, the variables used in the render function are from data.\r\n\t2.\tIf data is defined before setup, the variables used in the render function are from setup.\r\n\r\nThe order of setup and data affects the variables used in the render function, leading to instability. This PR fixes the issue by ensuring that variables from setup have higher precedence, aligning with the runtime behavior.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724800833",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-21T10:11:14+00:00",
        "comment_author": "xieyuschen",
        "comment_body": "oh i see. by the way, do you think it's necessary to test the case mentioned in the issue?\r\n\r\nI would like to add some test cases https://github.com/vuejs/core/pull/11679 to test the case mentioned by the issue after this change. \r\n\r\nUpdated: i have rebase the pr to @yangxiuxiu1115 's, but i cannot create an pr to his repo so i create an pr to the vuejs/core:main directly. \r\n ",
        "pr_file_module": null
      },
      {
        "comment_id": "1724864898",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-21T11:05:02+00:00",
        "comment_author": "edison1105",
        "comment_body": "It's really nice to have those testsüëç",
        "pr_file_module": null
      },
      {
        "comment_id": "1726153053",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-22T02:21:54+00:00",
        "comment_author": "xieyuschen",
        "comment_body": "> It's really nice to have those testsüëç\r\n\r\n@yangxiuxiu1115 could you kindly consider to cherry-pick my commit 0130918996afac75907937a679615c198425346c inside https://github.com/vuejs/core/pull/11679 when you squash the commits in this pr? thanks:)",
        "pr_file_module": null
      },
      {
        "comment_id": "1726155788",
        "repo_full_name": "vuejs/core",
        "pr_number": 11675,
        "pr_file": "packages/compiler-sfc/__tests__/compileScript.spec.ts",
        "discussion_id": "1724724853",
        "commented_code": "@@ -1121,6 +1121,36 @@ describe('SFC analyze <script> bindings', () => {\n     })\n   })\n \n+  it('recognizes data/setup return', () => {\n+    const { bindings } = compile(`\n+      <script>\n+        const bar = 2\n+        const foo = 2\n+        const msg = 2\n+        const hello = 2\n+        export default {\n+          setup() {\n+            return {\n+              foo: 1,\n+              hello: numm\n+            }\n+          },\n+          data() {\n+            return {\n+              foo: null,\n+              msg: null\n+            }\n+          }\n+        }\n+      </script>\n+    `)\n+    expect(bindings).toStrictEqual({\n+      foo: BindingTypes.SETUP_MAYBE_REF,",
        "comment_created_at": "2024-08-22T02:27:22+00:00",
        "comment_author": "yangxiuxiu1115",
        "comment_body": "No problem. Thanks for the case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "988850209",
    "pr_number": 6827,
    "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
    "created_at": "2022-10-06T10:12:34+00:00",
    "commented_code": "} else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "988850209",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
        "discussion_id": "988850209",
        "commented_code": "@@ -199,7 +199,16 @@ export function processExpression(\n     } else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
        "comment_created_at": "2022-10-06T10:12:34+00:00",
        "comment_author": "sxzz",
        "comment_body": "Why check `BindingTypes` here? Consider [this example](https://deploy-preview-6827--vue-sfc-playground.netlify.app/#eNqlUkFOwzAQ/IrlC61a24gDoCpF8A9fUmfTGhLbsjctUZS/s06iqsAFiVt2ZzyzO9mBv4Ugzx3wHS+SiTYgS4BdeNHOtsFHZAOLULOR1dG37I6odzdQ7f0VkgohocREBO2MdwmZ8Z1Dts8Sq/u1doWaTUieCoQ2NCUCVYwVlT0z05Qp7TU3Zaw0n/qEHDpE7xj2AQibK83Zq2ms+cjs7LLZ0IPZzyY2DIv3OBZqfvFXNdpptSYt32HolhW+aRSKRqWvgha+LsC3fE5FtGWQ78k7inTIdL0ASfMdmzq5R0HmWvMTYkg7pSoIje9FiHC2cBGPzw9PQhBLpNoIcumPkSappANsbN3LMgRFsIw0nm1BQmrFIfpLgkj2mm9vnBQ1zxBFBFdBhPh/5x+Cv9yz+ajdSLEsV0FxwOd0NnXnDFr6BVPScyT5XHwDsvHHFZ5sklPsdDEjH78AdCvswQ==), the problem is still existing.",
        "pr_file_module": null
      },
      {
        "comment_id": "988875281",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
        "discussion_id": "988850209",
        "commented_code": "@@ -199,7 +199,16 @@ export function processExpression(\n     } else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
        "comment_created_at": "2022-10-06T10:41:23+00:00",
        "comment_author": "godxiaoji",
        "comment_body": "1. I had to make sure it's a function identifier with `parents.type`. Then use `.bind()` to change the scope to `undefined`.\r\n2. Considered with the smallest dimension of the issue, including the following situations when `type` is  `BindingTypes.SETUP_CONST` or `BindingTypes.SETUP_LET`: \r\n```js\r\n// BindingTypes.SETUP_LET\r\nlet foo = () => {}\r\nlet foo = function() {}\r\n\r\n// BindingTypes.SETUP_CONST\r\nconst foo = () => {}\r\nconst foo = function {}\r\nfunction foo() {}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "988883472",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
        "discussion_id": "988850209",
        "commented_code": "@@ -199,7 +199,16 @@ export function processExpression(\n     } else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
        "comment_created_at": "2022-10-06T10:51:04+00:00",
        "comment_author": "sxzz",
        "comment_body": "There are many kinds of `BindingTypes`. For generality, I don't think it's necessary to check `BindingTypes` here.\r\n\r\nOr if you have a better solution to fix the example I provided, it's also all right.",
        "pr_file_module": null
      },
      {
        "comment_id": "989038529",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
        "discussion_id": "988850209",
        "commented_code": "@@ -199,7 +199,16 @@ export function processExpression(\n     } else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
        "comment_created_at": "2022-10-06T13:18:30+00:00",
        "comment_author": "godxiaoji",
        "comment_body": "Updated! The previous judgment was poor, and the following conditions are also met.\r\n```js\r\nconst foo = ref(function(a, b) {\r\n  console.log(this)\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "989049258",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/transformExpression.ts",
        "discussion_id": "988850209",
        "commented_code": "@@ -199,7 +199,16 @@ export function processExpression(\n     } else {\n       if (type && type.startsWith('setup')) {\n         // setup bindings in non-inline mode\n-        return `$setup.${raw}`\n+        if (\n+          parent &&\n+          parent.type === 'CallExpression' &&\n+          (type === BindingTypes.SETUP_LET || type === BindingTypes.SETUP_CONST)",
        "comment_created_at": "2022-10-06T13:27:49+00:00",
        "comment_author": "sxzz",
        "comment_body": "Great, but CI is failed. You can push an empty commit `git commit --allow-empty -m \"Empty-Commit\"` to re-run CI.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "989126891",
    "pr_number": 6827,
    "pr_file": "packages/compiler-core/src/transforms/vOn.ts",
    "created_at": "2022-10-06T14:31:45+00:00",
    "commented_code": "// avoiding the need to be patched.\n       if (shouldCache && isMemberExp) {\n         if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\n-          exp.content = `${exp.content} && ${exp.content}(...args)`\n+          if (exp.content.startsWith('$setup')) {\n+            exp.content = `${exp.content} && ${exp.content}.call(undefined, ...args)`",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "989126891",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/vOn.ts",
        "discussion_id": "989126891",
        "commented_code": "@@ -120,7 +120,11 @@ export const transformOn: DirectiveTransform = (\n       // avoiding the need to be patched.\n       if (shouldCache && isMemberExp) {\n         if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\n-          exp.content = `${exp.content} && ${exp.content}(...args)`\n+          if (exp.content.startsWith('$setup')) {\n+            exp.content = `${exp.content} && ${exp.content}.call(undefined, ...args)`",
        "comment_created_at": "2022-10-06T14:31:45+00:00",
        "comment_author": "posva",
        "comment_body": "Is this change necessary? Can you add a test for it?",
        "pr_file_module": null
      },
      {
        "comment_id": "989168683",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/vOn.ts",
        "discussion_id": "989126891",
        "commented_code": "@@ -120,7 +120,11 @@ export const transformOn: DirectiveTransform = (\n       // avoiding the need to be patched.\n       if (shouldCache && isMemberExp) {\n         if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\n-          exp.content = `${exp.content} && ${exp.content}(...args)`\n+          if (exp.content.startsWith('$setup')) {\n+            exp.content = `${exp.content} && ${exp.content}.call(undefined, ...args)`",
        "comment_created_at": "2022-10-06T15:05:55+00:00",
        "comment_author": "godxiaoji",
        "comment_body": "It mainly covers the following situations:\r\n```js\r\n<script setup>\r\nlet foo = function () {\r\n  console.log(this);\r\n};\r\n</script>\r\n<template>\r\n  <div @click=\"foo\"></div>\r\n</template>\r\n```\r\nIt is compiled into:\r\n```js\r\n_createElementBlock(\"div\", {\r\n  onClick: _cache[0] || (_cache[0] = (...args)=>($setup.foo && $setup.foo.call(undefined, ...args)))\r\n}, \"1\")\r\n```\r\n\r\nTest added.",
        "pr_file_module": null
      },
      {
        "comment_id": "1046776065",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/vOn.ts",
        "discussion_id": "989126891",
        "commented_code": "@@ -120,7 +120,11 @@ export const transformOn: DirectiveTransform = (\n       // avoiding the need to be patched.\n       if (shouldCache && isMemberExp) {\n         if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\n-          exp.content = `${exp.content} && ${exp.content}(...args)`\n+          if (exp.content.startsWith('$setup')) {\n+            exp.content = `${exp.content} && ${exp.content}.call(undefined, ...args)`",
        "comment_created_at": "2022-12-13T08:08:29+00:00",
        "comment_author": "posva",
        "comment_body": "I see. I still wonder if these changes shouldn't be only applied in dev as I imagine that we want both the behavior to be the same in prod/dev but also we don't want to unnecessarily make the generated code heavier in production",
        "pr_file_module": null
      },
      {
        "comment_id": "1046785695",
        "repo_full_name": "vuejs/core",
        "pr_number": 6827,
        "pr_file": "packages/compiler-core/src/transforms/vOn.ts",
        "discussion_id": "989126891",
        "commented_code": "@@ -120,7 +120,11 @@ export const transformOn: DirectiveTransform = (\n       // avoiding the need to be patched.\n       if (shouldCache && isMemberExp) {\n         if (exp.type === NodeTypes.SIMPLE_EXPRESSION) {\n-          exp.content = `${exp.content} && ${exp.content}(...args)`\n+          if (exp.content.startsWith('$setup')) {\n+            exp.content = `${exp.content} && ${exp.content}.call(undefined, ...args)`",
        "comment_created_at": "2022-12-13T08:19:26+00:00",
        "comment_author": "godxiaoji",
        "comment_body": "> I see. I still wonder if these changes shouldn't be only applied in dev as I imagine that we want both the behavior to be the same in prod/dev but also we don't want to unnecessarily make the generated code heavier in production\r\n\r\nYeah. $setup only exists in the development environment. This change will not affect compilation in the production environment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "593503963",
    "pr_number": 3399,
    "pr_file": "packages/runtime-core/src/component.ts",
    "created_at": "2021-03-12T23:22:37+00:00",
    "commented_code": "*/\n export interface ComponentCustomProps {}\n \n+/**\n+ * For globally defined Directives\n+ * Here is an example of adding a directive `VTooltip` as global directive:\n+ *\n+ * @example\n+ * ```ts\n+ * import VTooltip from 'v-tooltip'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalDirectives {\n+ *     VTooltip\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalDirectives extends Record<string, Directive> {}\n+\n+/**\n+ * For globally defined Components\n+ * Here is an example of adding a component `RouterView` as global component:\n+ *\n+ * @example\n+ * ```ts\n+ * import { RouterView } from 'vue-router'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalComponents {\n+ *     RouterView\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalComponents extends Record<string, Component> {}",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "593503963",
        "repo_full_name": "vuejs/core",
        "pr_number": 3399,
        "pr_file": "packages/runtime-core/src/component.ts",
        "discussion_id": "593503963",
        "commented_code": "@@ -62,6 +62,40 @@ export type Data = Record<string, unknown>\n  */\n export interface ComponentCustomProps {}\n \n+/**\n+ * For globally defined Directives\n+ * Here is an example of adding a directive `VTooltip` as global directive:\n+ *\n+ * @example\n+ * ```ts\n+ * import VTooltip from 'v-tooltip'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalDirectives {\n+ *     VTooltip\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalDirectives extends Record<string, Directive> {}\n+\n+/**\n+ * For globally defined Components\n+ * Here is an example of adding a component `RouterView` as global component:\n+ *\n+ * @example\n+ * ```ts\n+ * import { RouterView } from 'vue-router'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalComponents {\n+ *     RouterView\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalComponents extends Record<string, Component> {}",
        "comment_created_at": "2021-03-12T23:22:37+00:00",
        "comment_author": "johnsoncodehk",
        "comment_body": "I think `Transition`, `TransitionGroup`, `KeepAlive`, `Suspense`, `Teleport` should be include to here.",
        "pr_file_module": null
      },
      {
        "comment_id": "593728380",
        "repo_full_name": "vuejs/core",
        "pr_number": 3399,
        "pr_file": "packages/runtime-core/src/component.ts",
        "discussion_id": "593503963",
        "commented_code": "@@ -62,6 +62,40 @@ export type Data = Record<string, unknown>\n  */\n export interface ComponentCustomProps {}\n \n+/**\n+ * For globally defined Directives\n+ * Here is an example of adding a directive `VTooltip` as global directive:\n+ *\n+ * @example\n+ * ```ts\n+ * import VTooltip from 'v-tooltip'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalDirectives {\n+ *     VTooltip\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalDirectives extends Record<string, Directive> {}\n+\n+/**\n+ * For globally defined Components\n+ * Here is an example of adding a component `RouterView` as global component:\n+ *\n+ * @example\n+ * ```ts\n+ * import { RouterView } from 'vue-router'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalComponents {\n+ *     RouterView\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalComponents extends Record<string, Component> {}",
        "comment_created_at": "2021-03-13T09:39:26+00:00",
        "comment_author": "pikax",
        "comment_body": "Added all the Components and Directives (only `vShow`) as Global",
        "pr_file_module": null
      },
      {
        "comment_id": "815473117",
        "repo_full_name": "vuejs/core",
        "pr_number": 3399,
        "pr_file": "packages/runtime-core/src/component.ts",
        "discussion_id": "593503963",
        "commented_code": "@@ -62,6 +62,40 @@ export type Data = Record<string, unknown>\n  */\n export interface ComponentCustomProps {}\n \n+/**\n+ * For globally defined Directives\n+ * Here is an example of adding a directive `VTooltip` as global directive:\n+ *\n+ * @example\n+ * ```ts\n+ * import VTooltip from 'v-tooltip'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalDirectives {\n+ *     VTooltip\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalDirectives extends Record<string, Directive> {}\n+\n+/**\n+ * For globally defined Components\n+ * Here is an example of adding a component `RouterView` as global component:\n+ *\n+ * @example\n+ * ```ts\n+ * import { RouterView } from 'vue-router'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalComponents {\n+ *     RouterView\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalComponents extends Record<string, Component> {}",
        "comment_created_at": "2022-02-27T18:08:59+00:00",
        "comment_author": "znck",
        "comment_body": "@pikax `GlobalComponents` extends `Record<string, Component>`, so can we infer if a component is global or not?\r\n\r\nI am using following type helper to resolve component (for type check only):\r\n\r\n```ts\r\nfunction resolveComponent<T extends {}, A, B>(\r\n  localRegisteredComponents: T,\r\n  tagName: A,\r\n  tagNameInPascalName?: B,\r\n): A extends keyof T\r\n  ? T[A]\r\n  : B extends keyof T\r\n  ? T[B]\r\n  : A extends keyof KnownKeys<JSX.IntrinsicElements>\r\n  ? ComponentFromProps<JSX.IntrinsicElements[A]>\r\n  : B extends keyof KnownKeys<JSX.IntrinsicElements>\r\n  ? ComponentFromProps<JSX.IntrinsicElements[B]>\r\n  : A extends keyof GlobalComponents\r\n  ? GlobalComponents[A]\r\n  : B extends keyof GlobalComponents\r\n  ? GlobalComponents[B]\r\n  : never\r\n    \r\ntype ComponentFromProps<P> = new () => {\r\n  $props: P\r\n  $slots: { default(): VNodeChild }\r\n}\r\n\r\ntype KnownKeys<T> = {\r\n  [K in keyof T as string extends K\r\n  ? never\r\n  : number extends K\r\n  ? never\r\n  : K]: T[K];\r\n}\r\n```\r\nIt should return `never` when component is not registered locally, not an intrinsic element and not registered globally.",
        "pr_file_module": null
      },
      {
        "comment_id": "815682420",
        "repo_full_name": "vuejs/core",
        "pr_number": 3399,
        "pr_file": "packages/runtime-core/src/component.ts",
        "discussion_id": "593503963",
        "commented_code": "@@ -62,6 +62,40 @@ export type Data = Record<string, unknown>\n  */\n export interface ComponentCustomProps {}\n \n+/**\n+ * For globally defined Directives\n+ * Here is an example of adding a directive `VTooltip` as global directive:\n+ *\n+ * @example\n+ * ```ts\n+ * import VTooltip from 'v-tooltip'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalDirectives {\n+ *     VTooltip\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalDirectives extends Record<string, Directive> {}\n+\n+/**\n+ * For globally defined Components\n+ * Here is an example of adding a component `RouterView` as global component:\n+ *\n+ * @example\n+ * ```ts\n+ * import { RouterView } from 'vue-router'\n+ *\n+ * declare module '@vue/runtime-core' {\n+ *   interface GlobalComponents {\n+ *     RouterView\n+ *   }\n+ * }\n+ * ```\n+ */\n+export interface GlobalComponents extends Record<string, Component> {}",
        "comment_created_at": "2022-02-28T08:49:06+00:00",
        "comment_author": "pikax",
        "comment_body": "@znck interesting, the reason why it extends `Record<string, Component>` is to allow typecheck when users override it, what would be your use case if the Component is global?\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573051909",
    "pr_number": 10537,
    "pr_file": "packages/runtime-dom/src/apiCustomElement.ts",
    "created_at": "2024-04-19T23:28:17+00:00",
    "commented_code": "const resolve = (def: InnerComponentDef, isAsync = false) => {\n       const { props, styles } = def\n \n-      // cast Number-type props set before resolve\n       let numberProps\n       if (props && !isArray(props)) {\n         for (const key in props) {\n           const opt = props[key]\n+\n+          // reflect default value\n+          if (this._props[key] === undefined && hasOwn(opt, 'default')) {\n+            this._setProp(key, opt.default, true, false)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1573051909",
        "repo_full_name": "vuejs/core",
        "pr_number": 10537,
        "pr_file": "packages/runtime-dom/src/apiCustomElement.ts",
        "discussion_id": "1573051909",
        "commented_code": "@@ -250,11 +257,17 @@ export class VueElement extends BaseClass {\n     const resolve = (def: InnerComponentDef, isAsync = false) => {\n       const { props, styles } = def\n \n-      // cast Number-type props set before resolve\n       let numberProps\n       if (props && !isArray(props)) {\n         for (const key in props) {\n           const opt = props[key]\n+\n+          // reflect default value\n+          if (this._props[key] === undefined && hasOwn(opt, 'default')) {\n+            this._setProp(key, opt.default, true, false)",
        "comment_created_at": "2024-04-19T23:28:17+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "Doesn't this also need to account for using a function for the `default`?\r\n\r\n- [Playground - This PR](https://deploy-preview-10537--vue-sfc-playground.netlify.app/#eNrNk01r20AQhv/KsBfJ4MiHFgpGLTTGhxSahrpHXRRpLG+6X+yHayP03ztaybJjTHLNRWjnfd/Rs9rZlsmSq+zFsSXj0mjr4edxteOihq3VEpJsMa6zfcCkUKOphRq3XOEqOK/lWqBE5aEbQ4O1UNWl6rIhkibyeEeOOxzqyfxWr3T87GwWG2nlPFQIX6HWVegNWWWx9HiyXzedYlpgJnSTVnijlO1LEXrhqtyg/+695c/BE280JT3JlU37Hdr30tEU04Wa4Mkykt8fH+o0KY1JZhk9UdVx3x+Bl82Zd+Td8oYmRCuakbZQAAWrtDRcoP1lPKdeBVtCVHqtFEL/+xFr3gacn+rVDqu/N+ov7tDXCvZk0aHdY8EmzZeW4AZ5vXnEA71PotR1EOR+Q/yNtM/QMw62+6Bqwr7wRdqHONRcNX/c+uBRudOmetDe2UV/wWjCVm9s/Yz7Kfscc4Xq6C9eXCH6h7mrLDceHPpgvtFQxOl/stq4NLaK5ze19UdDi8cgn9GO2JQog/BL+HKGi8d2FdrQoarmdSidnTwAlgisgmSjJYKLZrq3vULgAz2NQb4YgAmVFh6lEXTxaAWQ13wfXwDaduCGLmZJ29mzFOlGKV8MqXxx0Yt1/wHeZ49U)\r\n- [Playground - main](https://play.vuejs.org/#eNrNk01r20AQhv/KsBfJ4MiHFgpGLTTGhxSahrpHXRRpLG+6X+yHayP03ztaybJjTHLNRWjnfd/Rs9rZlsmSq+zFsSXj0mjr4edxteOihq3VEpJsMa6zfcCkUKOphRq3XOEqOK/lWqBE5aEbQ4O1UNWl6rIhkibyeEeOOxzqyfxWr3T87GwWG2nlPFQIX6HWVegNWWWx9HiyXzedYlpgJnSTVnijlO1LEXrhqtyg/+695c/BE280JT3JlU37Hdr30tEU04Wa4Mkykt8fH+o0KY1JZhk9UdVx3x+Bl82Zd+Td8oYmRCuakbZQAAWrtDRcoP1lPKdeBVtCVHqtFEL/+xFr3gacn+rVDqu/N+ov7tDXCvZk0aHdY8EmzZeW4AZ5vXnEA71PotR1EOR+Q/yNtM/QMw62+6Bqwr7wRdqHONRcNX/c+uBRudOmetDe2UV/wWjCVm9s/Yz7Kfscc4Xq6C9eXCH6h7mrLDceHPpgvtFQxOl/stq4NLaK5ze19UdDi8cgn9GO2JQog/BL+HKGi8d2FdrQoarmdSidnTwAlgisgmSjJYKLZrq3vULgAz2NQb4YgAmVFh6lEXTxaAWQ13wfXwDaduCGLmZJ29mzFOlGKV8MqXxx0Yt1/wHeZ49U)",
        "pr_file_module": null
      },
      {
        "comment_id": "1573745578",
        "repo_full_name": "vuejs/core",
        "pr_number": 10537,
        "pr_file": "packages/runtime-dom/src/apiCustomElement.ts",
        "discussion_id": "1573051909",
        "commented_code": "@@ -250,11 +257,17 @@ export class VueElement extends BaseClass {\n     const resolve = (def: InnerComponentDef, isAsync = false) => {\n       const { props, styles } = def\n \n-      // cast Number-type props set before resolve\n       let numberProps\n       if (props && !isArray(props)) {\n         for (const key in props) {\n           const opt = props[key]\n+\n+          // reflect default value\n+          if (this._props[key] === undefined && hasOwn(opt, 'default')) {\n+            this._setProp(key, opt.default, true, false)",
        "comment_created_at": "2024-04-21T13:01:37+00:00",
        "comment_author": "edison1105",
        "comment_body": "Updated. feel free to review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "735441677",
    "pr_number": 4850,
    "pr_file": "packages/runtime-core/src/componentEmits.ts",
    "created_at": "2021-10-25T09:55:15+00:00",
    "commented_code": "const isModelListener = event.startsWith('update:')\n \n   // for v-model update:xxx events, apply modifiers on args\n-  const modelArg = isModelListener && event.slice(7)\n+  const eventArg = isModelListener && event.slice(7)\n+  const modelArg = eventArg && (hyphenate(eventArg) in props ? hyphenate(eventArg) : camelize(eventArg))",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "735441677",
        "repo_full_name": "vuejs/core",
        "pr_number": 4850,
        "pr_file": "packages/runtime-core/src/componentEmits.ts",
        "discussion_id": "735441677",
        "commented_code": "@@ -113,7 +113,8 @@ export function emit(\n   const isModelListener = event.startsWith('update:')\n \n   // for v-model update:xxx events, apply modifiers on args\n-  const modelArg = isModelListener && event.slice(7)\n+  const eventArg = isModelListener && event.slice(7)\n+  const modelArg = eventArg && (hyphenate(eventArg) in props ? hyphenate(eventArg) : camelize(eventArg))",
        "comment_created_at": "2021-10-25T09:55:15+00:00",
        "comment_author": "posva",
        "comment_body": "Doesn't this also do it:\r\n\r\n```suggestion\r\n  const modelArg = eventArg && (eventArg in props ? eventArg : hyphenate(eventArg))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "735486121",
        "repo_full_name": "vuejs/core",
        "pr_number": 4850,
        "pr_file": "packages/runtime-core/src/componentEmits.ts",
        "discussion_id": "735441677",
        "commented_code": "@@ -113,7 +113,8 @@ export function emit(\n   const isModelListener = event.startsWith('update:')\n \n   // for v-model update:xxx events, apply modifiers on args\n-  const modelArg = isModelListener && event.slice(7)\n+  const eventArg = isModelListener && event.slice(7)\n+  const modelArg = eventArg && (hyphenate(eventArg) in props ? hyphenate(eventArg) : camelize(eventArg))",
        "comment_created_at": "2021-10-25T10:57:48+00:00",
        "comment_author": "zhaozhongyu",
        "comment_body": "ok, i have add a testcase, and i add `hyphenate` because it may like this \r\n```\r\nthis.$emit('update:firstName', ' one ')\r\n\r\n// in parent\r\nv-model:first-name.trim=\"firstName\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1337608585",
        "repo_full_name": "vuejs/core",
        "pr_number": 4850,
        "pr_file": "packages/runtime-core/src/componentEmits.ts",
        "discussion_id": "735441677",
        "commented_code": "@@ -113,7 +113,8 @@ export function emit(\n   const isModelListener = event.startsWith('update:')\n \n   // for v-model update:xxx events, apply modifiers on args\n-  const modelArg = isModelListener && event.slice(7)\n+  const eventArg = isModelListener && event.slice(7)\n+  const modelArg = eventArg && (hyphenate(eventArg) in props ? hyphenate(eventArg) : camelize(eventArg))",
        "comment_created_at": "2023-09-26T18:12:43+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I know it's been nearly two years since this was opened, but I think this PR is still relevant with the latest `main` branch and I have a suggestion.\r\n\r\nI believe there's a third option that needs to be handled here, not just camel and kebab case. I think an exact match also needs to be considered.\r\n\r\nHere's an example:\r\n\r\n* [SFC Playground](https://play.vuejs.org/#eNp9Uk1v2zAM/SuaLk6B1D70FrjBti7DNmBb0Q/0UPWQyrSjVpYEfaQpXP/3UlKSFkWRiyHyPZKP5hvoN2PKdQA6o7XjVhhPHPhg5kyJ3mjryUAstGQkrdU9KZBa7KG/z2crIZstVFbbOPZDElNcK+dJ7zpyGptMil8gpSY32srmS3HEVF3lmTgNAw+9kUsPGBFSGwvzl2FI5eP4UlcxkZDd2PVxrxuQs+U9P/6x+Fl6K/pTRrGAUVIht672LemUeod6WtGVD04r3HeIzRjlujdCgv1vvEC9jM5IQiK2RLlPf1LO2wDTXZ6vgD9+kn9wm5hj9NyCA7sGRveYX9oOfIYXl/9gg+89iIsEiewD4AU4LUPUmGnfg2pQ9jteUvs7nUao7sotNh6U2y0VhUbmmPiM4pHODqz+JvekPEl1TI34F9/d+BPPNNAKBedWGze5LbaHKe7w1NkL0AuPZsi0BQaRFkyDJ9qdMbGZaoPiURXJ6OQoS4sNJh8rpqRAzd1K4DfaCqUectZ98B4bf+VS8Ec0TO7G6Pw6PeoqEz4YaHwFFOAQXw==)\r\n\r\nWhile I accept it is not common practice, it is possible for the `v-model` argument to be written in neither camel case nor kebab case. In the example above I use `v-model:abc-DEF.trim`. This does work with the current code on `main`, but it no longer works with the change proposed in this PR.\r\n\r\nEven though it's an edge case, I think it's important that an exact match should always work. Case coercion logic shouldn't change that.\r\n\r\nThere's similar logic further down the same file for determining the value of `handlerName`. That tries an exact match first, before considering any case changes. I think the logic for modifiers should be consistent with that.",
        "pr_file_module": null
      },
      {
        "comment_id": "1394422555",
        "repo_full_name": "vuejs/core",
        "pr_number": 4850,
        "pr_file": "packages/runtime-core/src/componentEmits.ts",
        "discussion_id": "735441677",
        "commented_code": "@@ -113,7 +113,8 @@ export function emit(\n   const isModelListener = event.startsWith('update:')\n \n   // for v-model update:xxx events, apply modifiers on args\n-  const modelArg = isModelListener && event.slice(7)\n+  const eventArg = isModelListener && event.slice(7)\n+  const modelArg = eventArg && (hyphenate(eventArg) in props ? hyphenate(eventArg) : camelize(eventArg))",
        "comment_created_at": "2023-11-15T16:04:08+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I've opened #9609, which builds on the work done here and also covers the case I mentioned above.",
        "pr_file_module": null
      }
    ]
  }
]