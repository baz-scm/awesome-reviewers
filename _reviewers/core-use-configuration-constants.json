[
  {
    "discussion_id": "1960290471",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/config_flow.py",
    "created_at": "2025-02-18T18:26:48+00:00",
    "commented_code": "+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(self, user_input=None):\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(\"email\")\n+            password = user_input.get(\"password\")",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1960290471",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/config_flow.py",
        "discussion_id": "1960290471",
        "commented_code": "@@ -0,0 +1,46 @@\n+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(self, user_input=None):\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(\"email\")\n+            password = user_input.get(\"password\")",
        "comment_created_at": "2025-02-18T18:26:48+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\r\n            email = user_input.get(CONF_EMAIL)\r\n            password = user_input.get(CONF_PASSWORD)\r\n```\r\nwe use consts for those things `from homeassistant.const`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1960290832",
    "pr_number": 136947,
    "pr_file": "homeassistant/components/redgtech/config_flow.py",
    "created_at": "2025-02-18T18:27:02+00:00",
    "commented_code": "+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(self, user_input=None):\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(\"email\")\n+            password = user_input.get(\"password\")\n+            \n+            api = RedgtechAPI()\n+            try:\n+                access_token = await api.login(email, password)\n+                if access_token:\n+                    _LOGGER.info(\"Login successful\")\n+\n+                    return self.async_create_entry(\n+                        title=\"Redgtech\",\n+                        data={\"access_token\": access_token}",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "1960290832",
        "repo_full_name": "home-assistant/core",
        "pr_number": 136947,
        "pr_file": "homeassistant/components/redgtech/config_flow.py",
        "discussion_id": "1960290832",
        "commented_code": "@@ -0,0 +1,46 @@\n+from homeassistant import config_entries\n+import voluptuous as vol\n+import logging\n+from .const import DOMAIN\n+from redgtech_api import RedgtechAPI\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+class RedgtechConfigFlow(config_entries.ConfigFlow, domain=DOMAIN):\n+    \"\"\"Config Flow for Redgtech integration.\"\"\"\n+\n+    VERSION = 1\n+\n+    async def async_step_user(self, user_input=None):\n+        \"\"\"Handle the initial user step for login.\"\"\"\n+        errors = {}\n+        \n+        if user_input is not None:\n+            email = user_input.get(\"email\")\n+            password = user_input.get(\"password\")\n+            \n+            api = RedgtechAPI()\n+            try:\n+                access_token = await api.login(email, password)\n+                if access_token:\n+                    _LOGGER.info(\"Login successful\")\n+\n+                    return self.async_create_entry(\n+                        title=\"Redgtech\",\n+                        data={\"access_token\": access_token}",
        "comment_created_at": "2025-02-18T18:27:02+00:00",
        "comment_author": "zweckj",
        "comment_body": "```suggestion\r\n                        data={CONF_ACCESS_TOKEN: access_token}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2044875389",
    "pr_number": 142994,
    "pr_file": "homeassistant/components/volvo/__init__.py",
    "created_at": "2025-04-15T15:12:21+00:00",
    "commented_code": "+\"\"\"The Volvo integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+\n+from aiohttp import ClientResponseError\n+from volvocarsapi.api import VolvoCarsApi\n+\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import ConfigEntryAuthFailed, ConfigEntryNotReady\n+from homeassistant.helpers import aiohttp_client, config_entry_oauth2_flow\n+\n+from .api import VolvoAuth\n+from .const import CONF_VIN, PLATFORMS\n+from .coordinator import VolvoConfigEntry, VolvoData, VolvoDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: VolvoConfigEntry) -> bool:\n+    \"\"\"Set up Volvo from a config entry.\"\"\"\n+    _LOGGER.debug(\"%s - Loading entry\", entry.entry_id)\n+\n+    # Create APIs\n+    implementation = (\n+        await config_entry_oauth2_flow.async_get_config_entry_implementation(\n+            hass, entry\n+        )\n+    )\n+\n+    oauth_session = config_entry_oauth2_flow.OAuth2Session(hass, entry, implementation)\n+    web_session = aiohttp_client.async_get_clientsession(hass)\n+    auth = VolvoAuth(web_session, oauth_session)\n+\n+    try:\n+        await auth.async_get_access_token()\n+    except ClientResponseError as err:\n+        if err.status == 401:\n+            raise ConfigEntryAuthFailed from err\n+\n+        raise ConfigEntryNotReady from err\n+\n+    api = VolvoCarsApi(\n+        web_session,\n+        auth,\n+        entry.data.get(CONF_VIN, \"\"),\n+        entry.data.get(CONF_API_KEY, \"\"),",
    "repo_full_name": "home-assistant/core",
    "discussion_comments": [
      {
        "comment_id": "2044875389",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/__init__.py",
        "discussion_id": "2044875389",
        "commented_code": "@@ -0,0 +1,72 @@\n+\"\"\"The Volvo integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+\n+from aiohttp import ClientResponseError\n+from volvocarsapi.api import VolvoCarsApi\n+\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import ConfigEntryAuthFailed, ConfigEntryNotReady\n+from homeassistant.helpers import aiohttp_client, config_entry_oauth2_flow\n+\n+from .api import VolvoAuth\n+from .const import CONF_VIN, PLATFORMS\n+from .coordinator import VolvoConfigEntry, VolvoData, VolvoDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: VolvoConfigEntry) -> bool:\n+    \"\"\"Set up Volvo from a config entry.\"\"\"\n+    _LOGGER.debug(\"%s - Loading entry\", entry.entry_id)\n+\n+    # Create APIs\n+    implementation = (\n+        await config_entry_oauth2_flow.async_get_config_entry_implementation(\n+            hass, entry\n+        )\n+    )\n+\n+    oauth_session = config_entry_oauth2_flow.OAuth2Session(hass, entry, implementation)\n+    web_session = aiohttp_client.async_get_clientsession(hass)\n+    auth = VolvoAuth(web_session, oauth_session)\n+\n+    try:\n+        await auth.async_get_access_token()\n+    except ClientResponseError as err:\n+        if err.status == 401:\n+            raise ConfigEntryAuthFailed from err\n+\n+        raise ConfigEntryNotReady from err\n+\n+    api = VolvoCarsApi(\n+        web_session,\n+        auth,\n+        entry.data.get(CONF_VIN, \"\"),\n+        entry.data.get(CONF_API_KEY, \"\"),",
        "comment_created_at": "2025-04-15T15:12:21+00:00",
        "comment_author": "joostlek",
        "comment_body": "why would this be not set?",
        "pr_file_module": null
      },
      {
        "comment_id": "2044969235",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/__init__.py",
        "discussion_id": "2044875389",
        "commented_code": "@@ -0,0 +1,72 @@\n+\"\"\"The Volvo integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+\n+from aiohttp import ClientResponseError\n+from volvocarsapi.api import VolvoCarsApi\n+\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import ConfigEntryAuthFailed, ConfigEntryNotReady\n+from homeassistant.helpers import aiohttp_client, config_entry_oauth2_flow\n+\n+from .api import VolvoAuth\n+from .const import CONF_VIN, PLATFORMS\n+from .coordinator import VolvoConfigEntry, VolvoData, VolvoDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: VolvoConfigEntry) -> bool:\n+    \"\"\"Set up Volvo from a config entry.\"\"\"\n+    _LOGGER.debug(\"%s - Loading entry\", entry.entry_id)\n+\n+    # Create APIs\n+    implementation = (\n+        await config_entry_oauth2_flow.async_get_config_entry_implementation(\n+            hass, entry\n+        )\n+    )\n+\n+    oauth_session = config_entry_oauth2_flow.OAuth2Session(hass, entry, implementation)\n+    web_session = aiohttp_client.async_get_clientsession(hass)\n+    auth = VolvoAuth(web_session, oauth_session)\n+\n+    try:\n+        await auth.async_get_access_token()\n+    except ClientResponseError as err:\n+        if err.status == 401:\n+            raise ConfigEntryAuthFailed from err\n+\n+        raise ConfigEntryNotReady from err\n+\n+    api = VolvoCarsApi(\n+        web_session,\n+        auth,\n+        entry.data.get(CONF_VIN, \"\"),\n+        entry.data.get(CONF_API_KEY, \"\"),",
        "comment_created_at": "2025-04-15T15:56:10+00:00",
        "comment_author": "thomasddn",
        "comment_body": "It is to satisfy mypy, otherwise I get `incompatible type \"Any | None\"; expected \"str\"`",
        "pr_file_module": null
      },
      {
        "comment_id": "2045280703",
        "repo_full_name": "home-assistant/core",
        "pr_number": 142994,
        "pr_file": "homeassistant/components/volvo/__init__.py",
        "discussion_id": "2044875389",
        "commented_code": "@@ -0,0 +1,72 @@\n+\"\"\"The Volvo integration.\"\"\"\n+\n+from __future__ import annotations\n+\n+import logging\n+\n+from aiohttp import ClientResponseError\n+from volvocarsapi.api import VolvoCarsApi\n+\n+from homeassistant.const import CONF_API_KEY\n+from homeassistant.core import HomeAssistant\n+from homeassistant.exceptions import ConfigEntryAuthFailed, ConfigEntryNotReady\n+from homeassistant.helpers import aiohttp_client, config_entry_oauth2_flow\n+\n+from .api import VolvoAuth\n+from .const import CONF_VIN, PLATFORMS\n+from .coordinator import VolvoConfigEntry, VolvoData, VolvoDataCoordinator\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+async def async_setup_entry(hass: HomeAssistant, entry: VolvoConfigEntry) -> bool:\n+    \"\"\"Set up Volvo from a config entry.\"\"\"\n+    _LOGGER.debug(\"%s - Loading entry\", entry.entry_id)\n+\n+    # Create APIs\n+    implementation = (\n+        await config_entry_oauth2_flow.async_get_config_entry_implementation(\n+            hass, entry\n+        )\n+    )\n+\n+    oauth_session = config_entry_oauth2_flow.OAuth2Session(hass, entry, implementation)\n+    web_session = aiohttp_client.async_get_clientsession(hass)\n+    auth = VolvoAuth(web_session, oauth_session)\n+\n+    try:\n+        await auth.async_get_access_token()\n+    except ClientResponseError as err:\n+        if err.status == 401:\n+            raise ConfigEntryAuthFailed from err\n+\n+        raise ConfigEntryNotReady from err\n+\n+    api = VolvoCarsApi(\n+        web_session,\n+        auth,\n+        entry.data.get(CONF_VIN, \"\"),\n+        entry.data.get(CONF_API_KEY, \"\"),",
        "comment_created_at": "2025-04-15T19:05:55+00:00",
        "comment_author": "gjohansson-ST",
        "comment_body": "Use `entry.data[CONF_API_KEY]` and not `.get` for keys which can not be empty (such as this one and also the VIN above).",
        "pr_file_module": null
      }
    ]
  }
]