[
  {
    "discussion_id": "2191381395",
    "pr_number": 9249,
    "pr_file": "packages/runtime-core/src/helpers/resolveAssets.ts",
    "created_at": "2025-07-08T03:04:51+00:00",
    "commented_code": "registry[capitalize(camelize(name))])\n   )\n }\n+\n+/**\n+ * @private\n+ */\n+export function resolveSetupReturned(\n+  name: string,\n+  setupReturn: Record<string, unknown>,\n+): unknown {\n+  if (!setupReturn) return name\n+  const returnValue = setupReturn[name]\n+  if (\n+    returnValue &&",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2191381395",
        "repo_full_name": "vuejs/core",
        "pr_number": 9249,
        "pr_file": "packages/runtime-core/src/helpers/resolveAssets.ts",
        "discussion_id": "2191381395",
        "commented_code": "@@ -144,3 +154,23 @@ function resolve(registry: Record<string, any> | undefined, name: string) {\n       registry[capitalize(camelize(name))])\n   )\n }\n+\n+/**\n+ * @private\n+ */\n+export function resolveSetupReturned(\n+  name: string,\n+  setupReturn: Record<string, unknown>,\n+): unknown {\n+  if (!setupReturn) return name\n+  const returnValue = setupReturn[name]\n+  if (\n+    returnValue &&",
        "comment_created_at": "2025-07-08T03:04:51+00:00",
        "comment_author": "edison1105",
        "comment_body": "```suggestion\r\n    __DEV__ &&\r\n    returnValue &&\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2191384296",
        "repo_full_name": "vuejs/core",
        "pr_number": 9249,
        "pr_file": "packages/runtime-core/src/helpers/resolveAssets.ts",
        "discussion_id": "2191381395",
        "commented_code": "@@ -144,3 +154,23 @@ function resolve(registry: Record<string, any> | undefined, name: string) {\n       registry[capitalize(camelize(name))])\n   )\n }\n+\n+/**\n+ * @private\n+ */\n+export function resolveSetupReturned(\n+  name: string,\n+  setupReturn: Record<string, unknown>,\n+): unknown {\n+  if (!setupReturn) return name\n+  const returnValue = setupReturn[name]\n+  if (\n+    returnValue &&",
        "comment_created_at": "2025-07-08T03:08:55+00:00",
        "comment_author": "edison1105",
        "comment_body": "We only warn in __DEV__",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1367782975",
    "pr_number": 5912,
    "pr_file": "packages/reactivity/src/effect.ts",
    "created_at": "2023-10-21T18:57:56+00:00",
    "commented_code": "export let activeEffect: ReactiveEffect | undefined\n \n-export const ITERATE_KEY = Symbol(__DEV__ ? 'iterate' : '')\n-export const MAP_KEY_ITERATE_KEY = Symbol(__DEV__ ? 'Map key iterate' : '')\n+let _FinalizationRegistry = getGlobalThis()\n+  .FinalizationRegistry as typeof FinalizationRegistry\n+\n+if (!_FinalizationRegistry) {\n+  _FinalizationRegistry = class FakeFinalizationRegistry {\n+    register() {}\n+    unregister() {}\n+  } as any\n+  if (__DEV__) {\n+    console.warn(`FinalizationRegistry is not available in this environment.`)\n+  }\n+}\n+\n+const registry = new _FinalizationRegistry<WeakRef<ReactiveEffect>>(",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1367782975",
        "repo_full_name": "vuejs/core",
        "pr_number": 5912,
        "pr_file": "packages/reactivity/src/effect.ts",
        "discussion_id": "1367782975",
        "commented_code": "@@ -47,13 +21,54 @@ export type DebuggerEventExtraInfo = {\n \n export let activeEffect: ReactiveEffect | undefined\n \n-export const ITERATE_KEY = Symbol(__DEV__ ? 'iterate' : '')\n-export const MAP_KEY_ITERATE_KEY = Symbol(__DEV__ ? 'Map key iterate' : '')\n+let _FinalizationRegistry = getGlobalThis()\n+  .FinalizationRegistry as typeof FinalizationRegistry\n+\n+if (!_FinalizationRegistry) {\n+  _FinalizationRegistry = class FakeFinalizationRegistry {\n+    register() {}\n+    unregister() {}\n+  } as any\n+  if (__DEV__) {\n+    console.warn(`FinalizationRegistry is not available in this environment.`)\n+  }\n+}\n+\n+const registry = new _FinalizationRegistry<WeakRef<ReactiveEffect>>(",
        "comment_created_at": "2023-10-21T18:57:56+00:00",
        "comment_author": "dsonet",
        "comment_body": "Maybe do not need to introduce the fake FinalizationRegistry, only initialize the register when the implementation exists.\r\n\r\nAnd later we just check it before using it to avoid an NOOP call there. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1367783374",
        "repo_full_name": "vuejs/core",
        "pr_number": 5912,
        "pr_file": "packages/reactivity/src/effect.ts",
        "discussion_id": "1367782975",
        "commented_code": "@@ -47,13 +21,54 @@ export type DebuggerEventExtraInfo = {\n \n export let activeEffect: ReactiveEffect | undefined\n \n-export const ITERATE_KEY = Symbol(__DEV__ ? 'iterate' : '')\n-export const MAP_KEY_ITERATE_KEY = Symbol(__DEV__ ? 'Map key iterate' : '')\n+let _FinalizationRegistry = getGlobalThis()\n+  .FinalizationRegistry as typeof FinalizationRegistry\n+\n+if (!_FinalizationRegistry) {\n+  _FinalizationRegistry = class FakeFinalizationRegistry {\n+    register() {}\n+    unregister() {}\n+  } as any\n+  if (__DEV__) {\n+    console.warn(`FinalizationRegistry is not available in this environment.`)\n+  }\n+}\n+\n+const registry = new _FinalizationRegistry<WeakRef<ReactiveEffect>>(",
        "comment_created_at": "2023-10-21T19:02:00+00:00",
        "comment_author": "johnsoncodehk",
        "comment_body": "Right, it can be simplified.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1349698060",
    "pr_number": 9355,
    "pr_file": "packages/runtime-core/src/renderer.ts",
    "created_at": "2023-10-08T13:32:28+00:00",
    "commented_code": "}\n \n     // resolve props and slots for setup context\n-    if (!(__COMPAT__ && compatMountInstance)) {\n+    if (!compatMountInstance) {",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1349698060",
        "repo_full_name": "vuejs/core",
        "pr_number": 9355,
        "pr_file": "packages/runtime-core/src/renderer.ts",
        "discussion_id": "1349698060",
        "commented_code": "@@ -1217,7 +1217,7 @@ function baseCreateRenderer(\n     }\n \n     // resolve props and slots for setup context\n-    if (!(__COMPAT__ && compatMountInstance)) {\n+    if (!compatMountInstance) {",
        "comment_created_at": "2023-10-08T13:32:28+00:00",
        "comment_author": "baiwusanyu-c",
        "comment_body": "```\r\nconst compatMountInstance =\r\n      __COMPAT__ && initialVNode.isCompatRoot && initialVNode.component\r\n```\r\nThis does not seem to be simplifyable",
        "pr_file_module": null
      },
      {
        "comment_id": "1349814154",
        "repo_full_name": "vuejs/core",
        "pr_number": 9355,
        "pr_file": "packages/runtime-core/src/renderer.ts",
        "discussion_id": "1349698060",
        "commented_code": "@@ -1217,7 +1217,7 @@ function baseCreateRenderer(\n     }\n \n     // resolve props and slots for setup context\n-    if (!(__COMPAT__ && compatMountInstance)) {\n+    if (!compatMountInstance) {",
        "comment_created_at": "2023-10-09T01:36:25+00:00",
        "comment_author": "stayhpjinng",
        "comment_body": "Maybe the __COMPAT__ check in if (!(__COMPAT__ && compatMountInstance)) is redundant? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1358121909",
        "repo_full_name": "vuejs/core",
        "pr_number": 9355,
        "pr_file": "packages/runtime-core/src/renderer.ts",
        "discussion_id": "1349698060",
        "commented_code": "@@ -1217,7 +1217,7 @@ function baseCreateRenderer(\n     }\n \n     // resolve props and slots for setup context\n-    if (!(__COMPAT__ && compatMountInstance)) {\n+    if (!compatMountInstance) {",
        "comment_created_at": "2023-10-13T11:11:44+00:00",
        "comment_author": "pikax",
        "comment_body": "@stayhpjinng No is not redundant, since `__COMPAT__` will be replaced and statically check at build time, if `false` the if branch will be removed. \r\n\r\nIf you remove `__COMPAT__` the if branch will always be present regardless of the `compatMountInstance` being false. ",
        "pr_file_module": null
      }
    ]
  }
]