[
  {
    "discussion_id": "1438306402",
    "pr_number": 9556,
    "pr_file": "packages/dts-test/defineComponent.test-d.tsx",
    "created_at": "2023-12-29T15:35:09+00:00",
    "commented_code": "})\n })\n \n-describe('type inference w/ optional props declaration', () => {\n-  const MyComponent = defineComponent<{ a: string[]; msg: string }>({\n-    setup(props) {\n-      expectType<string>(props.msg)\n-      expectType<string[]>(props.a)\n-      return {\n-        b: 1,\n-      }\n-    },\n-  })\n-\n-  expectType<JSX.Element>(<MyComponent msg=\"1\" a={['1']} />)\n-  // @ts-expect-error\n-  ;<MyComponent />\n-  // @ts-expect-error\n-  ;<MyComponent msg=\"1\" />\n-})\n+// describe('type inference w/ optional props declaration', () => {\n+//   const MyComponent = defineComponent<{ a: string[]; msg: string }>({\n+//     setup(props) {\n+//       expectType<string>(props.msg)\n+//       expectType<string[]>(props.a)\n+//       return {\n+//         b: 1,\n+//       }\n+//     },\n+//   })\n+\n+//   expectType<JSX.Element>(<MyComponent msg=\"1\" a={['1']} />)\n+//   // @ts-expect-error\n+//   ;<MyComponent />\n+//   // @ts-expect-error\n+//   ;<MyComponent msg=\"1\" />\n+// })",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1438306402",
        "repo_full_name": "vuejs/core",
        "pr_number": 9556,
        "pr_file": "packages/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1438306402",
        "commented_code": "@@ -337,26 +337,28 @@ describe('with object props', () => {\n   })\n })\n \n-describe('type inference w/ optional props declaration', () => {\n-  const MyComponent = defineComponent<{ a: string[]; msg: string }>({\n-    setup(props) {\n-      expectType<string>(props.msg)\n-      expectType<string[]>(props.a)\n-      return {\n-        b: 1,\n-      }\n-    },\n-  })\n-\n-  expectType<JSX.Element>(<MyComponent msg=\"1\" a={['1']} />)\n-  // @ts-expect-error\n-  ;<MyComponent />\n-  // @ts-expect-error\n-  ;<MyComponent msg=\"1\" />\n-})\n+// describe('type inference w/ optional props declaration', () => {\n+//   const MyComponent = defineComponent<{ a: string[]; msg: string }>({\n+//     setup(props) {\n+//       expectType<string>(props.msg)\n+//       expectType<string[]>(props.a)\n+//       return {\n+//         b: 1,\n+//       }\n+//     },\n+//   })\n+\n+//   expectType<JSX.Element>(<MyComponent msg=\"1\" a={['1']} />)\n+//   // @ts-expect-error\n+//   ;<MyComponent />\n+//   // @ts-expect-error\n+//   ;<MyComponent msg=\"1\" />\n+// })",
        "comment_created_at": "2023-12-29T15:35:09+00:00",
        "comment_author": "pikax",
        "comment_body": "Commented because I don't think this is correct, because the `props` as type will not be accessible as `props` but in the `attrs`, to override component props,  we can recommend the newly added `DeclareComponent` helper",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797707811",
    "pr_number": 12158,
    "pr_file": "packages-private/dts-test/defineComponent.test-d.tsx",
    "created_at": "2024-10-12T14:09:43+00:00",
    "commented_code": "// default + function\n     ffff: {\n       type: Function as PropType<(a: number, b: string) => { a: boolean }>,\n-      default: (a: number, b: string) => ({ a: a > +b }),\n+      default: () => (a: number, b: string) => ({ a: a > +b }),",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1797707811",
        "repo_full_name": "vuejs/core",
        "pr_number": 12158,
        "pr_file": "packages-private/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1797707811",
        "commented_code": "@@ -118,7 +118,7 @@ describe('with object props', () => {\n     // default + function\n     ffff: {\n       type: Function as PropType<(a: number, b: string) => { a: boolean }>,\n-      default: (a: number, b: string) => ({ a: a > +b }),\n+      default: () => (a: number, b: string) => ({ a: a > +b }),",
        "comment_created_at": "2024-10-12T14:09:43+00:00",
        "comment_author": "jh-leong",
        "comment_body": "Please avoid changing the existing test cases, as it breaks the current behavior. Let's focus on fixing the issue without introducing a breaking change.",
        "pr_file_module": null
      },
      {
        "comment_id": "1797708991",
        "repo_full_name": "vuejs/core",
        "pr_number": 12158,
        "pr_file": "packages-private/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1797707811",
        "commented_code": "@@ -118,7 +118,7 @@ describe('with object props', () => {\n     // default + function\n     ffff: {\n       type: Function as PropType<(a: number, b: string) => { a: boolean }>,\n-      default: (a: number, b: string) => ({ a: a > +b }),\n+      default: () => (a: number, b: string) => ({ a: a > +b }),",
        "comment_created_at": "2024-10-12T14:16:50+00:00",
        "comment_author": "KazariEX",
        "comment_body": "I think it's a bug.\r\n\r\n> Object or array defaults must be returned from a factory function. The function receives the raw props received by the component as the argument.\r\n\r\nFunction is also object.",
        "pr_file_module": null
      },
      {
        "comment_id": "1797709849",
        "repo_full_name": "vuejs/core",
        "pr_number": 12158,
        "pr_file": "packages-private/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1797707811",
        "commented_code": "@@ -118,7 +118,7 @@ describe('with object props', () => {\n     // default + function\n     ffff: {\n       type: Function as PropType<(a: number, b: string) => { a: boolean }>,\n-      default: (a: number, b: string) => ({ a: a > +b }),\n+      default: () => (a: number, b: string) => ({ a: a > +b }),",
        "comment_created_at": "2024-10-12T14:22:55+00:00",
        "comment_author": "jh-leong",
        "comment_body": "Function-type props are handled differently and don't require a factory function. You can find examples in the docs: https://vuejs.org/guide/components/props.html#prop-validation\r\n\r\n```ts\r\n// Function with a default value\r\npropH: {\r\n  type: Function,\r\n  // Unlike object or array defaults, this is not a factory\r\n  // function - this is a function serving as the default value\r\n  default() {\r\n    return 'Default function'\r\n  }\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1797710279",
        "repo_full_name": "vuejs/core",
        "pr_number": 12158,
        "pr_file": "packages-private/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1797707811",
        "commented_code": "@@ -118,7 +118,7 @@ describe('with object props', () => {\n     // default + function\n     ffff: {\n       type: Function as PropType<(a: number, b: string) => { a: boolean }>,\n-      default: (a: number, b: string) => ({ a: a > +b }),\n+      default: () => (a: number, b: string) => ({ a: a > +b }),",
        "comment_created_at": "2024-10-12T14:25:15+00:00",
        "comment_author": "KazariEX",
        "comment_body": "This brings great difficulty to type inference.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1158571175",
    "pr_number": 7982,
    "pr_file": "packages/dts-test/defineComponent.test-d.tsx",
    "created_at": "2023-04-05T14:05:59+00:00",
    "commented_code": "ComponentOptionsMixin,\n   EmitsOptions,\n   string,\n+  {},",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1158571175",
        "repo_full_name": "vuejs/core",
        "pr_number": 7982,
        "pr_file": "packages/dts-test/defineComponent.test-d.tsx",
        "discussion_id": "1158571175",
        "commented_code": "@@ -1428,6 +1494,7 @@ declare const MyButton: DefineComponent<\n   ComponentOptionsMixin,\n   EmitsOptions,\n   string,\n+  {},",
        "comment_created_at": "2023-04-05T14:05:59+00:00",
        "comment_author": "yyx990803",
        "comment_body": "Missed this part when I was reviewing - we cannot actually change the type arguments order of `DefineComponent` because it's a publicly-exported type and used in library type definitions.",
        "pr_file_module": null
      }
    ]
  }
]