[
  {
    "discussion_id": "1616401883",
    "pr_number": 7297,
    "pr_file": "packages/reactivity/__tests__/effectScope.spec.ts",
    "created_at": "2024-05-27T21:36:44+00:00",
    "commented_code": "it('should dereference child scope from parent scope after stopping child scope (no memleaks)', () => {\n     const parent = new EffectScope()\n-    const child = parent.run(() => new EffectScope())!\n+    const [child] = parent.run(() => [new EffectScope(), new EffectScope()])!",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1616401883",
        "repo_full_name": "vuejs/core",
        "pr_number": 7297,
        "pr_file": "packages/reactivity/__tests__/effectScope.spec.ts",
        "discussion_id": "1616401883",
        "commented_code": "@@ -222,7 +222,7 @@ describe('reactivity/effect/scope', () => {\n \n   it('should dereference child scope from parent scope after stopping child scope (no memleaks)', () => {\n     const parent = new EffectScope()\n-    const child = parent.run(() => new EffectScope())!\n+    const [child] = parent.run(() => [new EffectScope(), new EffectScope()])!",
        "comment_created_at": "2024-05-27T21:36:44+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I think it'd be better to add a new test for this, rather than modifying the existing test.\r\n\r\nIn `effectScope.ts`, there's this `if` check:\r\n\r\n```js\r\nif (last && last !== this) {\r\n```\r\n\r\nThat line is only hit once by the tests. Currently it evaluates to `false`. The change proposed here would switch that, so it evaluates to `true`. That increases the line coverage, but it's still only testing one of the two branches of the `if`. Either way there's a chunk of code that could be removed and the tests would still pass.\r\n\r\nFor example, imagine that `if` check were changed to this:\r\n\r\n```js\r\nif (last) {\r\n```\r\n\r\nThat would be incorrect and the existing test would catch that, but the new test would still pass.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632132081",
    "pr_number": 9190,
    "pr_file": "packages/compiler-sfc/src/script/resolveType.ts",
    "created_at": "2024-06-08T23:32:01+00:00",
    "commented_code": "!ns.declare,\n         )\n       }\n+    } else {\n+      let importType: Import\n+      if (\n+        (importType = scope.imports[name[0]]) &&\n+        importType.imported === '*'\n+      ) {\n+        const importPath = scope.resolvedImportSources[importType.source]\n+        return innerResolveTypeReference(\n+          ctx,\n+          fileToScope(ctx, normalizePath(importPath)),\n+          name.length > 2 ? name.slice(1) : name[name.length - 1],",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1632132081",
        "repo_full_name": "vuejs/core",
        "pr_number": 9190,
        "pr_file": "packages/compiler-sfc/src/script/resolveType.ts",
        "discussion_id": "1632132081",
        "commented_code": "@@ -764,6 +766,21 @@ function innerResolveTypeReference(\n           !ns.declare,\n         )\n       }\n+    } else {\n+      let importType: Import\n+      if (\n+        (importType = scope.imports[name[0]]) &&\n+        importType.imported === '*'\n+      ) {\n+        const importPath = scope.resolvedImportSources[importType.source]\n+        return innerResolveTypeReference(\n+          ctx,\n+          fileToScope(ctx, normalizePath(importPath)),\n+          name.length > 2 ? name.slice(1) : name[name.length - 1],",
        "comment_created_at": "2024-06-08T23:32:01+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "There's only a single test case for this, with `name.length` equal to 2. The `name.slice(1)` part isn't currently tested.\r\n\r\nThis line seems to be repeating some logic from 15 lines earlier. Assuming that isn't coincidental, perhaps it should be refactored to share the logic?",
        "pr_file_module": null
      },
      {
        "comment_id": "1632222050",
        "repo_full_name": "vuejs/core",
        "pr_number": 9190,
        "pr_file": "packages/compiler-sfc/src/script/resolveType.ts",
        "discussion_id": "1632132081",
        "commented_code": "@@ -764,6 +766,21 @@ function innerResolveTypeReference(\n           !ns.declare,\n         )\n       }\n+    } else {\n+      let importType: Import\n+      if (\n+        (importType = scope.imports[name[0]]) &&\n+        importType.imported === '*'\n+      ) {\n+        const importPath = scope.resolvedImportSources[importType.source]\n+        return innerResolveTypeReference(\n+          ctx,\n+          fileToScope(ctx, normalizePath(importPath)),\n+          name.length > 2 ? name.slice(1) : name[name.length - 1],",
        "comment_created_at": "2024-06-09T09:45:44+00:00",
        "comment_author": "edison1105",
        "comment_body": "Updated~\r\nPlease feel free to review.\r\nThanks.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1369712614",
    "pr_number": 6864,
    "pr_file": "packages/runtime-dom/__tests__/getPriorProps.spec.ts",
    "created_at": "2023-10-24T07:09:42+00:00",
    "commented_code": "+import { getPriorProps } from '../src/patchProp'\n+\n+describe('runtime-dom: prior props', () => {\n+  test('img', () => {\n+    const priorProps = getPriorProps('img')\n+    expect(priorProps).toHaveLength(1)\n+    expect(priorProps).toContain('loading')\n+  })\n+\n+  test('p', () => {\n+    const priorProps = getPriorProps('p')\n+    expect(priorProps).toHaveLength(0)\n+  })\n+})",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1369712614",
        "repo_full_name": "vuejs/core",
        "pr_number": 6864,
        "pr_file": "packages/runtime-dom/__tests__/getPriorProps.spec.ts",
        "discussion_id": "1369712614",
        "commented_code": "@@ -0,0 +1,14 @@\n+import { getPriorProps } from '../src/patchProp'\n+\n+describe('runtime-dom: prior props', () => {\n+  test('img', () => {\n+    const priorProps = getPriorProps('img')\n+    expect(priorProps).toHaveLength(1)\n+    expect(priorProps).toContain('loading')\n+  })\n+\n+  test('p', () => {\n+    const priorProps = getPriorProps('p')\n+    expect(priorProps).toHaveLength(0)\n+  })\n+})",
        "comment_created_at": "2023-10-24T07:09:42+00:00",
        "comment_author": "haoqunjiang",
        "comment_body": "These tests are not sufficient for this PR.\r\nThey do not test the actual behavior of the patch process. Rather, They only ensure the utility function is correct, which doesn't help much.\r\n\r\nI suggest adding an E2E test to ensure the loading event never happens for a loading=lazy image.",
        "pr_file_module": null
      },
      {
        "comment_id": "1370058393",
        "repo_full_name": "vuejs/core",
        "pr_number": 6864,
        "pr_file": "packages/runtime-dom/__tests__/getPriorProps.spec.ts",
        "discussion_id": "1369712614",
        "commented_code": "@@ -0,0 +1,14 @@\n+import { getPriorProps } from '../src/patchProp'\n+\n+describe('runtime-dom: prior props', () => {\n+  test('img', () => {\n+    const priorProps = getPriorProps('img')\n+    expect(priorProps).toHaveLength(1)\n+    expect(priorProps).toContain('loading')\n+  })\n+\n+  test('p', () => {\n+    const priorProps = getPriorProps('p')\n+    expect(priorProps).toHaveLength(0)\n+  })\n+})",
        "comment_created_at": "2023-10-24T12:08:09+00:00",
        "comment_author": "weidehai",
        "comment_body": "ok,i will do it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2109965321",
    "pr_number": 12445,
    "pr_file": "packages/vue-compat/__tests__/misc.spec.ts",
    "created_at": "2025-05-27T19:04:52+00:00",
    "commented_code": ")('contenteditable', 'foo', 'true'),\n   ).toHaveBeenWarned()\n })\n+\n+test('ATTR_ENUMERATED_COERCION: true', () => {",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "2109965321",
        "repo_full_name": "vuejs/core",
        "pr_number": 12445,
        "pr_file": "packages/vue-compat/__tests__/misc.spec.ts",
        "discussion_id": "2109965321",
        "commented_code": "@@ -275,3 +275,17 @@ test('ATTR_ENUMERATED_COERCION', () => {\n     )('contenteditable', 'foo', 'true'),\n   ).toHaveBeenWarned()\n })\n+\n+test('ATTR_ENUMERATED_COERCION: true', () => {",
        "comment_created_at": "2025-05-27T19:04:52+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "The test name should be more specific. Something like:\r\n```suggestion\r\ntest('ATTR_ENUMERATED_COERCION, coercing \"false\"', () => {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1667681482",
    "pr_number": 8456,
    "pr_file": "packages/shared/__tests__/normalizeProp.spec.ts",
    "created_at": "2024-07-07T12:16:31+00:00",
    "commented_code": "test('handles string correctly', () => {\n     expect(normalizeClass('foo')).toEqual('foo')\n+    expect(normalizeClass('foo1 ')).toEqual('foo1')\n   })\n \n   test('handles array correctly', () => {\n-    expect(normalizeClass(['foo', undefined, true, false, 'bar'])).toEqual(\n+    expect(normalizeClass(['foo ', undefined, true, false, 'bar'])).toEqual(",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1667681482",
        "repo_full_name": "vuejs/core",
        "pr_number": 8456,
        "pr_file": "packages/shared/__tests__/normalizeProp.spec.ts",
        "discussion_id": "1667681482",
        "commented_code": "@@ -7,10 +13,11 @@ describe('normalizeClass', () => {\n \n   test('handles string correctly', () => {\n     expect(normalizeClass('foo')).toEqual('foo')\n+    expect(normalizeClass('foo1 ')).toEqual('foo1')\n   })\n \n   test('handles array correctly', () => {\n-    expect(normalizeClass(['foo', undefined, true, false, 'bar'])).toEqual(\n+    expect(normalizeClass(['foo ', undefined, true, false, 'bar'])).toEqual(",
        "comment_created_at": "2024-07-07T12:16:31+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I think it might be better to have a separate test for this, rather than modifying the existing test. The expected output is `'foo bar'`, so there's a space trimmed and a space added. The existing test just checks for the added space, but if the input already has a space it's less clear that anything has been added.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724249752",
        "repo_full_name": "vuejs/core",
        "pr_number": 8456,
        "pr_file": "packages/shared/__tests__/normalizeProp.spec.ts",
        "discussion_id": "1667681482",
        "commented_code": "@@ -7,10 +13,11 @@ describe('normalizeClass', () => {\n \n   test('handles string correctly', () => {\n     expect(normalizeClass('foo')).toEqual('foo')\n+    expect(normalizeClass('foo1 ')).toEqual('foo1')\n   })\n \n   test('handles array correctly', () => {\n-    expect(normalizeClass(['foo', undefined, true, false, 'bar'])).toEqual(\n+    expect(normalizeClass(['foo ', undefined, true, false, 'bar'])).toEqual(",
        "comment_created_at": "2024-08-21T02:18:15+00:00",
        "comment_author": "Alfred-Skyblue",
        "comment_body": "Thank you for your suggestion to modify.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1626431758",
    "pr_number": 10155,
    "pr_file": "packages/reactivity/__tests__/ref.spec.ts",
    "created_at": "2024-06-04T18:14:53+00:00",
    "commented_code": "expect(isRef(computed(() => 1))).toBe(true)\n \n     expect(isRef(0)).toBe(false)\n-    expect(isRef(1)).toBe(false)",
    "repo_full_name": "vuejs/core",
    "discussion_comments": [
      {
        "comment_id": "1626431758",
        "repo_full_name": "vuejs/core",
        "pr_number": 10155,
        "pr_file": "packages/reactivity/__tests__/ref.spec.ts",
        "discussion_id": "1626431758",
        "commented_code": "@@ -241,7 +241,6 @@ describe('reactivity/ref', () => {\n     expect(isRef(computed(() => 1))).toBe(true)\n \n     expect(isRef(0)).toBe(false)\n-    expect(isRef(1)).toBe(false)",
        "comment_created_at": "2024-06-04T18:14:53+00:00",
        "comment_author": "skirtles-code",
        "comment_body": "I don't think this should be removed. Testing `isRef` with a truthy primitive value seems like a valid test case.",
        "pr_file_module": null
      }
    ]
  }
]