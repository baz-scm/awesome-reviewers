[
  {
    "discussion_id": "2042458253",
    "pr_number": 2523,
    "pr_file": "src/crewai/agents/agent_adapters/base_tool_adapter.py",
    "created_at": "2025-04-14T16:02:19+00:00",
    "commented_code": "+from abc import ABC, abstractmethod\n+from typing import Any, List, Optional\n+\n+from crewai.tools.base_tool import BaseTool\n+\n+\n+class BaseToolAdapter(ABC):\n+    \"\"\"Base class for all tool adapters in CrewAI.\n+\n+    This abstract class defines the common interface that all tool adapters\n+    must implement. It provides the structure for adapting CrewAI tools to\n+    different frameworks and platforms.\n+    \"\"\"\n+\n+    original_tools: List[BaseTool] = []\n+    converted_tools: List[Any] = []",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2042458253",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2523,
        "pr_file": "src/crewai/agents/agent_adapters/base_tool_adapter.py",
        "discussion_id": "2042458253",
        "commented_code": "@@ -0,0 +1,32 @@\n+from abc import ABC, abstractmethod\n+from typing import Any, List, Optional\n+\n+from crewai.tools.base_tool import BaseTool\n+\n+\n+class BaseToolAdapter(ABC):\n+    \"\"\"Base class for all tool adapters in CrewAI.\n+\n+    This abstract class defines the common interface that all tool adapters\n+    must implement. It provides the structure for adapting CrewAI tools to\n+    different frameworks and platforms.\n+    \"\"\"\n+\n+    original_tools: List[BaseTool] = []\n+    converted_tools: List[Any] = []",
        "comment_created_at": "2025-04-14T16:02:19+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "usually it's not recommend set mutable default argument like [], {} because they will be shared across  all instances of the class (i don't think you wanna that) \r\n\r\nso i'd recommend do it instead\r\n```suggestion\r\ndef __init__(self):\r\n        self.original_tools: List[BaseTool] = []\r\n        self.converted_tools: List[Any] = []\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2042461930",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2523,
        "pr_file": "src/crewai/agents/agent_adapters/base_tool_adapter.py",
        "discussion_id": "2042458253",
        "commented_code": "@@ -0,0 +1,32 @@\n+from abc import ABC, abstractmethod\n+from typing import Any, List, Optional\n+\n+from crewai.tools.base_tool import BaseTool\n+\n+\n+class BaseToolAdapter(ABC):\n+    \"\"\"Base class for all tool adapters in CrewAI.\n+\n+    This abstract class defines the common interface that all tool adapters\n+    must implement. It provides the structure for adapting CrewAI tools to\n+    different frameworks and platforms.\n+    \"\"\"\n+\n+    original_tools: List[BaseTool] = []\n+    converted_tools: List[Any] = []",
        "comment_created_at": "2025-04-14T16:04:34+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "[here's an articles about that](https://docs.python-guide.org/writing/gotchas/)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042465660",
    "pr_number": 2523,
    "pr_file": "src/crewai/agents/agent_adapters/langgraph/langgraph_adapter.py",
    "created_at": "2025-04-14T16:07:04+00:00",
    "commented_code": "+from typing import Any, AsyncIterable, Dict, List, Optional\n+\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.langgraph.langgraph_tool_adapter import (\n+    LangGraphToolAdapter,\n+)\n+from crewai.agents.agent_adapters.langgraph.structured_output_converter import (\n+    LangGraphConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.tools.base_tool import BaseTool\n+from crewai.utilities import Logger\n+from crewai.utilities.converter import Converter\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from langchain_core.messages import ToolMessage\n+    from langgraph.checkpoint.memory import MemorySaver\n+    from langgraph.prebuilt import create_react_agent\n+\n+    LANGGRAPH_AVAILABLE = True\n+except ImportError:\n+    LANGGRAPH_AVAILABLE = False\n+\n+\n+class LangGraphAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for LangGraph agents to work with CrewAI.\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _tool_adapter: LangGraphToolAdapter = PrivateAttr()\n+    _graph: Any = PrivateAttr(default=None)\n+    _memory: Any = PrivateAttr(default=None)\n+    _max_iterations: int = PrivateAttr(default=10)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+\n+    model: str = Field(default=\"gpt-4o\")\n+    verbose: bool = Field(default=False)\n+\n+    def __init__(\n+        self,\n+        role: str,\n+        goal: str,\n+        backstory: str,\n+        tools: Optional[List[BaseTool]] = [],",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2042465660",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2523,
        "pr_file": "src/crewai/agents/agent_adapters/langgraph/langgraph_adapter.py",
        "discussion_id": "2042465660",
        "commented_code": "@@ -0,0 +1,285 @@\n+from typing import Any, AsyncIterable, Dict, List, Optional\n+\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.langgraph.langgraph_tool_adapter import (\n+    LangGraphToolAdapter,\n+)\n+from crewai.agents.agent_adapters.langgraph.structured_output_converter import (\n+    LangGraphConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.tools.base_tool import BaseTool\n+from crewai.utilities import Logger\n+from crewai.utilities.converter import Converter\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from langchain_core.messages import ToolMessage\n+    from langgraph.checkpoint.memory import MemorySaver\n+    from langgraph.prebuilt import create_react_agent\n+\n+    LANGGRAPH_AVAILABLE = True\n+except ImportError:\n+    LANGGRAPH_AVAILABLE = False\n+\n+\n+class LangGraphAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for LangGraph agents to work with CrewAI.\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _tool_adapter: LangGraphToolAdapter = PrivateAttr()\n+    _graph: Any = PrivateAttr(default=None)\n+    _memory: Any = PrivateAttr(default=None)\n+    _max_iterations: int = PrivateAttr(default=10)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+\n+    model: str = Field(default=\"gpt-4o\")\n+    verbose: bool = Field(default=False)\n+\n+    def __init__(\n+        self,\n+        role: str,\n+        goal: str,\n+        backstory: str,\n+        tools: Optional[List[BaseTool]] = [],",
        "comment_created_at": "2025-04-14T16:07:04+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "same comment related to use mutable default argument",
        "pr_file_module": null
      },
      {
        "comment_id": "2047800528",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2523,
        "pr_file": "src/crewai/agents/agent_adapters/langgraph/langgraph_adapter.py",
        "discussion_id": "2042465660",
        "commented_code": "@@ -0,0 +1,285 @@\n+from typing import Any, AsyncIterable, Dict, List, Optional\n+\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.langgraph.langgraph_tool_adapter import (\n+    LangGraphToolAdapter,\n+)\n+from crewai.agents.agent_adapters.langgraph.structured_output_converter import (\n+    LangGraphConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.tools.base_tool import BaseTool\n+from crewai.utilities import Logger\n+from crewai.utilities.converter import Converter\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from langchain_core.messages import ToolMessage\n+    from langgraph.checkpoint.memory import MemorySaver\n+    from langgraph.prebuilt import create_react_agent\n+\n+    LANGGRAPH_AVAILABLE = True\n+except ImportError:\n+    LANGGRAPH_AVAILABLE = False\n+\n+\n+class LangGraphAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for LangGraph agents to work with CrewAI.\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _tool_adapter: LangGraphToolAdapter = PrivateAttr()\n+    _graph: Any = PrivateAttr(default=None)\n+    _memory: Any = PrivateAttr(default=None)\n+    _max_iterations: int = PrivateAttr(default=10)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+\n+    model: str = Field(default=\"gpt-4o\")\n+    verbose: bool = Field(default=False)\n+\n+    def __init__(\n+        self,\n+        role: str,\n+        goal: str,\n+        backstory: str,\n+        tools: Optional[List[BaseTool]] = [],",
        "comment_created_at": "2025-04-16T21:39:00+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "```suggestion\r\ntools: Optional[List[BaseTool]] = None,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1729190247",
    "pr_number": 1253,
    "pr_file": "src/crewai/agent.py",
    "created_at": "2024-08-23T15:55:12+00:00",
    "commented_code": "def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1729190247",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T15:55:12+00:00",
        "comment_author": "gvieira",
        "comment_body": "Won't this break when calling `model_name` with `AttributeError`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1729208294",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T16:10:30+00:00",
        "comment_author": "bhancockio",
        "comment_body": "The type of LLM is `any` so I don't think we are going to run into any issues. \r\n\r\nI just tried changing out the LLM to be a basic OpenAI and the azurechatopenai and didn't get any issues.",
        "pr_file_module": null
      },
      {
        "comment_id": "1729213798",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T16:15:36+00:00",
        "comment_author": "gvieira",
        "comment_body": "Try to pass any other object there, like a `dict` or a random `BaseModel`. I think it's gonna break but I might be wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "1729230028",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T16:29:55+00:00",
        "comment_author": "bhancockio",
        "comment_body": "@gvieira I incorporated your suggestions. Now, we run into another issue when someone passes in an LLM as `{}`. \r\n\r\nI walk through the issue in this loom:\r\n\r\nhttps://www.loom.com/share/527fd6b1e25e4c04a1f8a4910c65cde7?sid=f2dc4d87-6414-4dc2-8aed-7a35784301cf",
        "pr_file_module": null
      },
      {
        "comment_id": "1729261473",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T16:56:05+00:00",
        "comment_author": "gvieira",
        "comment_body": "Sweet. Best solution for this is to introduce a protocol/interface, so we limit what we accept. For now, I would say what you've done is good enough, as long as we create one of those [low-hanging fruit tickets](https://linear.app/crewai/view/e1827ba2-0757-46ca-89d7-3d26105e8dce).",
        "pr_file_module": null
      },
      {
        "comment_id": "1729265349",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1253,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "1729190247",
        "commented_code": "@@ -117,16 +117,19 @@ class Agent(BaseAgent):\n     def post_init_setup(self):\n         self.agent_ops_agent_name = self.role\n \n-        if hasattr(self.llm, \"model_name\"):\n-            self._setup_llm_callbacks()\n+        # Different llms store the model name in different attributes\n+        model_name = self.llm.model_name or self.llm.deployment_name",
        "comment_created_at": "2024-08-23T16:58:33+00:00",
        "comment_author": "bhancockio",
        "comment_body": "Added!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1693520845",
    "pr_number": 1006,
    "pr_file": "src/crewai/crew.py",
    "created_at": "2024-07-26T19:53:47+00:00",
    "commented_code": "default=None,\n         description=\"Path to the prompt json file to be used for the crew.\",\n     )\n-    output_log_file: Optional[Union[bool, str]] = Field(\n-        default=False,\n+    output_log_file: Optional[str] = Field(\n+        default=\"\",",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1693520845",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1006,
        "pr_file": "src/crewai/crew.py",
        "discussion_id": "1693520845",
        "commented_code": "@@ -146,8 +147,8 @@ class Crew(BaseModel):\n         default=None,\n         description=\"Path to the prompt json file to be used for the crew.\",\n     )\n-    output_log_file: Optional[Union[bool, str]] = Field(\n-        default=False,\n+    output_log_file: Optional[str] = Field(\n+        default=\"\",",
        "comment_created_at": "2024-07-26T19:53:47+00:00",
        "comment_author": "pythonbyte",
        "comment_body": "_Suggestion_: Usually is a good practice to have default values as None, instead of empty values such as \"\", [] and {}.",
        "pr_file_module": null
      },
      {
        "comment_id": "1695473661",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1006,
        "pr_file": "src/crewai/crew.py",
        "discussion_id": "1693520845",
        "commented_code": "@@ -146,8 +147,8 @@ class Crew(BaseModel):\n         default=None,\n         description=\"Path to the prompt json file to be used for the crew.\",\n     )\n-    output_log_file: Optional[Union[bool, str]] = Field(\n-        default=False,\n+    output_log_file: Optional[str] = Field(\n+        default=\"\",",
        "comment_created_at": "2024-07-29T15:53:53+00:00",
        "comment_author": "bhancockio",
        "comment_body": "Good call out! Just reverted!",
        "pr_file_module": null
      }
    ]
  }
]