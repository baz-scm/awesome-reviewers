[
  {
    "discussion_id": "2136100190",
    "pr_number": 2892,
    "pr_file": "docs/how-to/postgres-long-term-memory.mdx",
    "created_at": "2025-06-09T17:09:35+00:00",
    "commented_code": "+# Using PostgreSQL for Long-Term Memory\n+\n+CrewAI supports both SQLite and PostgreSQL as database backends for the long-term memory storage system. This guide explains how to configure and use PostgreSQL for storing agent memories, which is especially useful for production environments and when working with Amazon RDS or other managed database services.\n+\n+## Important Configuration Notes\n+\n+**Setting `memory=True` alone on a Crew will create SQLite-based memory storage by default.** To use PostgreSQL, you must explicitly configure it using one of the methods below. Simply having PostgreSQL environment variables set is not sufficient - you need to explicitly create and pass a PostgreSQL `LongTermMemory` instance to your crew.\n+\n+**For automatic memory saving to work, you need both `long_term_memory` AND `entity_memory` configured.** CrewAI's automatic task evaluation and memory saving only occurs when both memory systems are enabled. If you only configure `long_term_memory`, you'll need to save memories manually.\n+\n+## Prerequisites\n+\n+To use PostgreSQL as your long-term memory storage, you'll need to install the `postgres` extras:\n+\n+```bash\n+pip install 'crewai[postgres]'\n+```\n+\n+This will install the required `psycopg[pool]` dependency, which is a modern PostgreSQL client for Python with connection pooling support.\n+\n+**Note:** If you see warnings about \"psycopg pool module not available\", ensure you have the pool extras installed:\n+\n+```bash\n+pip install 'psycopg[pool]'\n+```\n+\n+## Configuration\n+\n+You can configure a crew to use PostgreSQL for long-term memory storage in several ways:\n+\n+### Option 1: Direct Storage Configuration\n+\n+```python\n+from crewai import Agent, Crew, Task\n+from crewai.memory.long_term.long_term_memory import LongTermMemory\n+from crewai.memory.storage.ltm_postgres_storage import LTMPostgresStorage\n+from crewai.memory.entity.entity_memory import EntityMemory\n+\n+# Initialize PostgreSQL storage\n+postgres_storage = LTMPostgresStorage(\n+    connection_string=\"postgresql://username:password@hostname:5432/database\",\n+    schema=\"public\",                  # Optional, defaults to \"public\"\n+    table_name=\"long_term_memories\",  # Optional, defaults to \"long_term_memories\"\n+    use_connection_pool=True,         # Optional, defaults to True\n+    min_pool_size=1,                  # Optional, defaults to 1\n+    max_pool_size=5                   # Optional, defaults to 5\n+)\n+\n+# Create long-term memory with the PostgreSQL storage\n+long_term_memory = LongTermMemory(storage=postgres_storage)\n+\n+# Create a crew with the configured memory (including entity memory for automatic saving)\n+crew = Crew(\n+    agents=[...],\n+    tasks=[...],\n+    memory=True,                    # Enable memory system\n+    long_term_memory=long_term_memory,  # Use PostgreSQL for long-term memory\n+    entity_memory=EntityMemory()    # Required for automatic memory saving",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2136100190",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2892,
        "pr_file": "docs/how-to/postgres-long-term-memory.mdx",
        "discussion_id": "2136100190",
        "commented_code": "@@ -0,0 +1,730 @@\n+# Using PostgreSQL for Long-Term Memory\n+\n+CrewAI supports both SQLite and PostgreSQL as database backends for the long-term memory storage system. This guide explains how to configure and use PostgreSQL for storing agent memories, which is especially useful for production environments and when working with Amazon RDS or other managed database services.\n+\n+## Important Configuration Notes\n+\n+**Setting `memory=True` alone on a Crew will create SQLite-based memory storage by default.** To use PostgreSQL, you must explicitly configure it using one of the methods below. Simply having PostgreSQL environment variables set is not sufficient - you need to explicitly create and pass a PostgreSQL `LongTermMemory` instance to your crew.\n+\n+**For automatic memory saving to work, you need both `long_term_memory` AND `entity_memory` configured.** CrewAI's automatic task evaluation and memory saving only occurs when both memory systems are enabled. If you only configure `long_term_memory`, you'll need to save memories manually.\n+\n+## Prerequisites\n+\n+To use PostgreSQL as your long-term memory storage, you'll need to install the `postgres` extras:\n+\n+```bash\n+pip install 'crewai[postgres]'\n+```\n+\n+This will install the required `psycopg[pool]` dependency, which is a modern PostgreSQL client for Python with connection pooling support.\n+\n+**Note:** If you see warnings about \"psycopg pool module not available\", ensure you have the pool extras installed:\n+\n+```bash\n+pip install 'psycopg[pool]'\n+```\n+\n+## Configuration\n+\n+You can configure a crew to use PostgreSQL for long-term memory storage in several ways:\n+\n+### Option 1: Direct Storage Configuration\n+\n+```python\n+from crewai import Agent, Crew, Task\n+from crewai.memory.long_term.long_term_memory import LongTermMemory\n+from crewai.memory.storage.ltm_postgres_storage import LTMPostgresStorage\n+from crewai.memory.entity.entity_memory import EntityMemory\n+\n+# Initialize PostgreSQL storage\n+postgres_storage = LTMPostgresStorage(\n+    connection_string=\"postgresql://username:password@hostname:5432/database\",\n+    schema=\"public\",                  # Optional, defaults to \"public\"\n+    table_name=\"long_term_memories\",  # Optional, defaults to \"long_term_memories\"\n+    use_connection_pool=True,         # Optional, defaults to True\n+    min_pool_size=1,                  # Optional, defaults to 1\n+    max_pool_size=5                   # Optional, defaults to 5\n+)\n+\n+# Create long-term memory with the PostgreSQL storage\n+long_term_memory = LongTermMemory(storage=postgres_storage)\n+\n+# Create a crew with the configured memory (including entity memory for automatic saving)\n+crew = Crew(\n+    agents=[...],\n+    tasks=[...],\n+    memory=True,                    # Enable memory system\n+    long_term_memory=long_term_memory,  # Use PostgreSQL for long-term memory\n+    entity_memory=EntityMemory()    # Required for automatic memory saving",
        "comment_created_at": "2025-06-09T17:09:35+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "For your use case, I'd recommend encouraging users to set only long_term_memory instead of configuring all the individual memory attributes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2104088527",
    "pr_number": 2861,
    "pr_file": "docs/how-to/maxim-observability.mdx",
    "created_at": "2025-05-23T08:25:06+00:00",
    "commented_code": "+---\n+title: Maxim Integration\n+description: Start Agent monitoring, evaluation, and observability\n+icon: bars-staggered\n+---\n+\n+# Maxim Integration\n+\n+Maxim AI provides comprehensive agent monitoring, evaluation, and observability for your CrewAI applications. With Maxim's one-line integration, you can easily trace and analyse agent interactions, performance metrics, and more.\n+\n+\n+## Features: One Line Integration\n+\n+- **End-to-End Agent Tracing**: Monitor the complete lifecycle of your agents\n+- **Performance Analytics**: Track latency, tokens consumed, and costs\n+- **Hyperparameter Monitoring**: View the configuration details of your agent runs\n+- **Tool Call Tracking**: Observe when and how agents use their tools\n+- **Advanced Visualisation**: Understand agent trajectories through intuitive dashboards\n+\n+## Getting Started\n+\n+### Prerequisites\n+\n+- Python 3.7 or later (Python 3.9+ recommended)",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2104088527",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2861,
        "pr_file": "docs/how-to/maxim-observability.mdx",
        "discussion_id": "2104088527",
        "commented_code": "@@ -0,0 +1,152 @@\n+---\n+title: Maxim Integration\n+description: Start Agent monitoring, evaluation, and observability\n+icon: bars-staggered\n+---\n+\n+# Maxim Integration\n+\n+Maxim AI provides comprehensive agent monitoring, evaluation, and observability for your CrewAI applications. With Maxim's one-line integration, you can easily trace and analyse agent interactions, performance metrics, and more.\n+\n+\n+## Features: One Line Integration\n+\n+- **End-to-End Agent Tracing**: Monitor the complete lifecycle of your agents\n+- **Performance Analytics**: Track latency, tokens consumed, and costs\n+- **Hyperparameter Monitoring**: View the configuration details of your agent runs\n+- **Tool Call Tracking**: Observe when and how agents use their tools\n+- **Advanced Visualisation**: Understand agent trajectories through intuitive dashboards\n+\n+## Getting Started\n+\n+### Prerequisites\n+\n+- Python 3.7 or later (Python 3.9+ recommended)",
        "comment_created_at": "2025-05-23T08:25:06+00:00",
        "comment_author": "tonykipkemboi",
        "comment_body": "for this, make the version Python >=3.10 since anything less than that will fail from CrewAI side",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2076375395",
    "pr_number": 2765,
    "pr_file": "docs/concepts/cli.mdx",
    "created_at": "2025-05-06T21:48:06+00:00",
    "commented_code": "- `-s, --short`: Reset SHORT TERM memory\n - `-e, --entities`: Reset ENTITIES memory\n - `-k, --kickoff-outputs`: Reset LATEST KICKOFF TASK OUTPUTS\n+- `-kn, --knowledge`: Reset KNOWLEDGE storage\n+- `-akn, --agent-knowledge`: Reset AGENT KNOWLEDGE storage",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2076375395",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2765,
        "pr_file": "docs/concepts/cli.mdx",
        "discussion_id": "2076375395",
        "commented_code": "@@ -110,6 +110,8 @@ crewai reset-memories [OPTIONS]\n - `-s, --short`: Reset SHORT TERM memory\n - `-e, --entities`: Reset ENTITIES memory\n - `-k, --kickoff-outputs`: Reset LATEST KICKOFF TASK OUTPUTS\n+- `-kn, --knowledge`: Reset KNOWLEDGE storage\n+- `-akn, --agent-knowledge`: Reset AGENT KNOWLEDGE storage",
        "comment_created_at": "2025-05-06T21:48:06+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "should the `-kn` reset the memory from agents also? Just bring this topic up for discussing here",
        "pr_file_module": null
      },
      {
        "comment_id": "2076411485",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2765,
        "pr_file": "docs/concepts/cli.mdx",
        "discussion_id": "2076375395",
        "commented_code": "@@ -110,6 +110,8 @@ crewai reset-memories [OPTIONS]\n - `-s, --short`: Reset SHORT TERM memory\n - `-e, --entities`: Reset ENTITIES memory\n - `-k, --kickoff-outputs`: Reset LATEST KICKOFF TASK OUTPUTS\n+- `-kn, --knowledge`: Reset KNOWLEDGE storage\n+- `-akn, --agent-knowledge`: Reset AGENT KNOWLEDGE storage",
        "comment_created_at": "2025-05-06T22:03:09+00:00",
        "comment_author": "lorenzejay",
        "comment_body": "def should ! good call",
        "pr_file_module": null
      },
      {
        "comment_id": "2077313344",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2765,
        "pr_file": "docs/concepts/cli.mdx",
        "discussion_id": "2076375395",
        "commented_code": "@@ -110,6 +110,8 @@ crewai reset-memories [OPTIONS]\n - `-s, --short`: Reset SHORT TERM memory\n - `-e, --entities`: Reset ENTITIES memory\n - `-k, --kickoff-outputs`: Reset LATEST KICKOFF TASK OUTPUTS\n+- `-kn, --knowledge`: Reset KNOWLEDGE storage\n+- `-akn, --agent-knowledge`: Reset AGENT KNOWLEDGE storage",
        "comment_created_at": "2025-05-07T10:22:40+00:00",
        "comment_author": "Vidit-Ostwal",
        "comment_body": "Added, now the user have two functionality \r\n`-kn`, this resets the knowledge of crew and agent both\r\n`-akn`, this resets only the agents knowledge",
        "pr_file_module": null
      }
    ]
  }
]