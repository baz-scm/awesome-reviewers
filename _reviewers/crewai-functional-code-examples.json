[
  {
    "discussion_id": "2104086283",
    "pr_number": 2861,
    "pr_file": "docs/how-to/maxim-observability.mdx",
    "created_at": "2025-05-23T08:23:54+00:00",
    "commented_code": "+---\n+title: Maxim Integration\n+description: Start Agent monitoring, evaluation, and observability\n+icon: bars-staggered\n+---\n+\n+# Maxim Integration\n+\n+Maxim AI provides comprehensive agent monitoring, evaluation, and observability for your CrewAI applications. With Maxim's one-line integration, you can easily trace and analyse agent interactions, performance metrics, and more.\n+\n+\n+## Features: One Line Integration\n+\n+- **End-to-End Agent Tracing**: Monitor the complete lifecycle of your agents\n+- **Performance Analytics**: Track latency, tokens consumed, and costs\n+- **Hyperparameter Monitoring**: View the configuration details of your agent runs\n+- **Tool Call Tracking**: Observe when and how agents use their tools\n+- **Advanced Visualisation**: Understand agent trajectories through intuitive dashboards\n+\n+## Getting Started\n+\n+### Prerequisites\n+\n+- Python 3.7 or later (Python 3.9+ recommended)\n+- A Maxim account ([sign up here](https://getmaxim.ai/))\n+- A CrewAI project\n+\n+### Installation\n+\n+Install the Maxim SDK via pip:\n+\n+```python\n+pip install maxim-py>=3.6.2\n+```\n+\n+Or add it to your `requirements.txt`:\n+\n+```\n+maxim-py>=3.6.2\n+```\n+\n+\n+### Basic Setup\n+\n+### 1. Set up environment variables\n+\n+```python\n+### Environment Variables Setup\n+\n+# Create a `.env` file in your project root:\n+\n+# Maxim API Configuration\n+MAXIM_API_KEY=your_api_key_here\n+MAXIM_LOG_REPO_ID=your_repo_id_here\n+```\n+\n+### 2. Import the required packages\n+\n+```python\n+from crewai import Agent, Task, Crew, Process\n+from maxim import Maxim\n+from maxim.logger.crewai import instrument_crewai\n+```\n+\n+### 3. Initialise Maxim with your API key\n+\n+```python\n+# Initialize Maxim logger\n+logger = Maxim().logger()\n+\n+# Instrument CrewAI with just one line\n+instrument_crewai(logger)\n+```\n+\n+### 4. Create and run your CrewAI application as usual\n+\n+```python\n+\n+# Create your agent\n+researcher = Agent(\n+    role='Senior Research Analyst',\n+    goal='Uncover cutting-edge developments in AI',\n+    backstory=\"You are an expert researcher at a tech think tank...\",\n+    verbose=True,\n+    llm=llm\n+)\n+\n+# Define the task\n+research_task = Task(",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2104086283",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2861,
        "pr_file": "docs/how-to/maxim-observability.mdx",
        "discussion_id": "2104086283",
        "commented_code": "@@ -0,0 +1,152 @@\n+---\n+title: Maxim Integration\n+description: Start Agent monitoring, evaluation, and observability\n+icon: bars-staggered\n+---\n+\n+# Maxim Integration\n+\n+Maxim AI provides comprehensive agent monitoring, evaluation, and observability for your CrewAI applications. With Maxim's one-line integration, you can easily trace and analyse agent interactions, performance metrics, and more.\n+\n+\n+## Features: One Line Integration\n+\n+- **End-to-End Agent Tracing**: Monitor the complete lifecycle of your agents\n+- **Performance Analytics**: Track latency, tokens consumed, and costs\n+- **Hyperparameter Monitoring**: View the configuration details of your agent runs\n+- **Tool Call Tracking**: Observe when and how agents use their tools\n+- **Advanced Visualisation**: Understand agent trajectories through intuitive dashboards\n+\n+## Getting Started\n+\n+### Prerequisites\n+\n+- Python 3.7 or later (Python 3.9+ recommended)\n+- A Maxim account ([sign up here](https://getmaxim.ai/))\n+- A CrewAI project\n+\n+### Installation\n+\n+Install the Maxim SDK via pip:\n+\n+```python\n+pip install maxim-py>=3.6.2\n+```\n+\n+Or add it to your `requirements.txt`:\n+\n+```\n+maxim-py>=3.6.2\n+```\n+\n+\n+### Basic Setup\n+\n+### 1. Set up environment variables\n+\n+```python\n+### Environment Variables Setup\n+\n+# Create a `.env` file in your project root:\n+\n+# Maxim API Configuration\n+MAXIM_API_KEY=your_api_key_here\n+MAXIM_LOG_REPO_ID=your_repo_id_here\n+```\n+\n+### 2. Import the required packages\n+\n+```python\n+from crewai import Agent, Task, Crew, Process\n+from maxim import Maxim\n+from maxim.logger.crewai import instrument_crewai\n+```\n+\n+### 3. Initialise Maxim with your API key\n+\n+```python\n+# Initialize Maxim logger\n+logger = Maxim().logger()\n+\n+# Instrument CrewAI with just one line\n+instrument_crewai(logger)\n+```\n+\n+### 4. Create and run your CrewAI application as usual\n+\n+```python\n+\n+# Create your agent\n+researcher = Agent(\n+    role='Senior Research Analyst',\n+    goal='Uncover cutting-edge developments in AI',\n+    backstory=\"You are an expert researcher at a tech think tank...\",\n+    verbose=True,\n+    llm=llm\n+)\n+\n+# Define the task\n+research_task = Task(",
        "comment_created_at": "2025-05-23T08:23:54+00:00",
        "comment_author": "tonykipkemboi",
        "comment_body": "you need to add  `expected_output=\"\"` param in Tasks or it will error. i know it's an example but it's good to have it fully working for llm seo and those who copy paste.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2045533934",
    "pr_number": 2523,
    "pr_file": "docs/how-to/bring-your-own-agent.mdx",
    "created_at": "2025-04-15T21:17:24+00:00",
    "commented_code": "+---\n+title: Bring your own agent\n+description: Learn how to bring your own agents that work within a Crew.\n+icon: robots\n+---\n+\n+Interoperability is a core concept in CrewAI. This guide will show you how to bring your own agents that work within a Crew.\n+\n+\n+## Adapter Guide for Bringing your own agents (Langgraph Agents, OpenAI Agents, etc...)\n+We require 3 adapters to turn any agent from different frameworks to work within crew.\n+\n+1. BaseAgentAdapter\n+2. BaseToolAdapter\n+3. BaseConverter\n+\n+\n+## BaseAgentAdapter\n+This abstract class defines the common interface and functionality that all\n+agent adapters must implement. It extends BaseAgent to maintain compatibility\n+with the CrewAI framework while adding adapter-specific requirements.\n+\n+Required Methods:\n+\n+1. `def configure_tools`\n+2. `configure_structured_output`\n+\n+## Creating your own Adapter\n+To integrate an agent from a different framework (e.g., LangGraph, Autogen, OpenAI Assistants) into CrewAI, you need to create a custom adapter by inheriting from `BaseAgentAdapter`. This adapter acts as a compatibility layer, translating between the CrewAI interfaces and the specific requirements of your external agent.\n+\n+Here's how you implement your custom adapter:\n+\n+1.  **Inherit from `BaseAgentAdapter`**:\n+    ```python\n+    from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+    from crewai.tools import BaseTool\n+    from typing import List, Optional, Any, Dict\n+\n+    class MyCustomAgentAdapter(BaseAgentAdapter):\n+        # ... implementation details ...\n+    ```\n+\n+2.  **Implement `__init__`**:\n+    The constructor should call the parent class constructor `super().__init__(**kwargs)` and perform any initialization specific to your external agent. You can use the optional `agent_config` dictionary passed during CrewAI's `Agent` initialization to configure your adapter and the underlying agent.\n+\n+    ```python\n+    def __init__(self, agent_config: Optional[Dict[str, Any]] = None, **kwargs: Any):\n+        super().__init__(agent_config=agent_config, **kwargs)\n+        # Initialize your external agent here, possibly using agent_config\n+        # Example: self.external_agent = initialize_my_agent(agent_config)\n+        print(f\"Initializing MyCustomAgentAdapter with config: {agent_config}\")\n+    ```\n+\n+3.  **Implement `configure_tools`**:\n+    This abstract method is crucial. It receives a list of CrewAI `BaseTool` instances. Your implementation must convert or adapt these tools into the format expected by your external agent framework. This might involve wrapping them, extracting specific attributes, or registering them with the external agent instance.\n+\n+    ```python\n+    def configure_tools(self, tools: Optional[List[BaseTool]] = None) -> None:\n+        if tools:\n+            adapted_tools = []\n+            for tool in tools:\n+                # Adapt CrewAI BaseTool to the format your agent expects\n+                # Example: adapted_tool = adapt_to_my_framework(tool)\n+                # adapted_tools.append(adapted_tool)\n+                pass # Replace with your actual adaptation logic\n+\n+            # Configure the external agent with the adapted tools\n+            # Example: self.external_agent.set_tools(adapted_tools)\n+            print(f\"Configuring tools for MyCustomAgentAdapter: {adapted_tools}\") # Placeholder\n+        else:\n+            # Handle the case where no tools are provided\n+            # Example: self.external_agent.set_tools([])\n+            print(\"No tools provided for MyCustomAgentAdapter.\")\n+    ```\n+\n+4.  **Implement `configure_structured_output`**:\n+    This method is called when the CrewAI `Agent` is configured with structured output requirements (e.g., `output_json` or `output_pydantic`). Your adapter needs to ensure the external agent is set up to comply with these requirements. This might involve setting specific parameters on the external agent or ensuring its underlying model supports the requested format. If the external agent doesn't support structured output in a way compatible with CrewAI's expectations, you might need to handle the conversion or raise an appropriate error.\n+\n+    ```python\n+    def configure_structured_output(self, structured_output: Any) -> None:\n+        # Configure your external agent to produce output in the specified format\n+        # Example: self.external_agent.set_output_format(structured_output)\n+        self.adapted_structured_output = True # Signal that structured output is handled\n+        print(f\"Configuring structured output for MyCustomAgentAdapter: {structured_output}\")\n+    ```\n+\n+By implementing these methods, your `MyCustomAgentAdapter` will allow your custom agent implementation to function correctly within a CrewAI crew, interacting with tasks and tools seamlessly. Remember to replace the example comments and print statements with your actual adaptation logic specific to the external agent framework you are integrating.\n+\n+## BaseToolAdapter implementation\n+The `BaseToolAdapter` class is responsible for converting CrewAI's native `BaseTool` objects into a format that your specific external agent framework can understand and utilize. Different agent frameworks (like LangGraph, OpenAI Assistants, etc.) have their own unique ways of defining and handling tools, and the `BaseToolAdapter` acts as the translator.\n+\n+Here's how you implement your custom tool adapter:",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2045533934",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2523,
        "pr_file": "docs/how-to/bring-your-own-agent.mdx",
        "discussion_id": "2045533934",
        "commented_code": "@@ -0,0 +1,428 @@\n+---\n+title: Bring your own agent\n+description: Learn how to bring your own agents that work within a Crew.\n+icon: robots\n+---\n+\n+Interoperability is a core concept in CrewAI. This guide will show you how to bring your own agents that work within a Crew.\n+\n+\n+## Adapter Guide for Bringing your own agents (Langgraph Agents, OpenAI Agents, etc...)\n+We require 3 adapters to turn any agent from different frameworks to work within crew.\n+\n+1. BaseAgentAdapter\n+2. BaseToolAdapter\n+3. BaseConverter\n+\n+\n+## BaseAgentAdapter\n+This abstract class defines the common interface and functionality that all\n+agent adapters must implement. It extends BaseAgent to maintain compatibility\n+with the CrewAI framework while adding adapter-specific requirements.\n+\n+Required Methods:\n+\n+1. `def configure_tools`\n+2. `configure_structured_output`\n+\n+## Creating your own Adapter\n+To integrate an agent from a different framework (e.g., LangGraph, Autogen, OpenAI Assistants) into CrewAI, you need to create a custom adapter by inheriting from `BaseAgentAdapter`. This adapter acts as a compatibility layer, translating between the CrewAI interfaces and the specific requirements of your external agent.\n+\n+Here's how you implement your custom adapter:\n+\n+1.  **Inherit from `BaseAgentAdapter`**:\n+    ```python\n+    from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+    from crewai.tools import BaseTool\n+    from typing import List, Optional, Any, Dict\n+\n+    class MyCustomAgentAdapter(BaseAgentAdapter):\n+        # ... implementation details ...\n+    ```\n+\n+2.  **Implement `__init__`**:\n+    The constructor should call the parent class constructor `super().__init__(**kwargs)` and perform any initialization specific to your external agent. You can use the optional `agent_config` dictionary passed during CrewAI's `Agent` initialization to configure your adapter and the underlying agent.\n+\n+    ```python\n+    def __init__(self, agent_config: Optional[Dict[str, Any]] = None, **kwargs: Any):\n+        super().__init__(agent_config=agent_config, **kwargs)\n+        # Initialize your external agent here, possibly using agent_config\n+        # Example: self.external_agent = initialize_my_agent(agent_config)\n+        print(f\"Initializing MyCustomAgentAdapter with config: {agent_config}\")\n+    ```\n+\n+3.  **Implement `configure_tools`**:\n+    This abstract method is crucial. It receives a list of CrewAI `BaseTool` instances. Your implementation must convert or adapt these tools into the format expected by your external agent framework. This might involve wrapping them, extracting specific attributes, or registering them with the external agent instance.\n+\n+    ```python\n+    def configure_tools(self, tools: Optional[List[BaseTool]] = None) -> None:\n+        if tools:\n+            adapted_tools = []\n+            for tool in tools:\n+                # Adapt CrewAI BaseTool to the format your agent expects\n+                # Example: adapted_tool = adapt_to_my_framework(tool)\n+                # adapted_tools.append(adapted_tool)\n+                pass # Replace with your actual adaptation logic\n+\n+            # Configure the external agent with the adapted tools\n+            # Example: self.external_agent.set_tools(adapted_tools)\n+            print(f\"Configuring tools for MyCustomAgentAdapter: {adapted_tools}\") # Placeholder\n+        else:\n+            # Handle the case where no tools are provided\n+            # Example: self.external_agent.set_tools([])\n+            print(\"No tools provided for MyCustomAgentAdapter.\")\n+    ```\n+\n+4.  **Implement `configure_structured_output`**:\n+    This method is called when the CrewAI `Agent` is configured with structured output requirements (e.g., `output_json` or `output_pydantic`). Your adapter needs to ensure the external agent is set up to comply with these requirements. This might involve setting specific parameters on the external agent or ensuring its underlying model supports the requested format. If the external agent doesn't support structured output in a way compatible with CrewAI's expectations, you might need to handle the conversion or raise an appropriate error.\n+\n+    ```python\n+    def configure_structured_output(self, structured_output: Any) -> None:\n+        # Configure your external agent to produce output in the specified format\n+        # Example: self.external_agent.set_output_format(structured_output)\n+        self.adapted_structured_output = True # Signal that structured output is handled\n+        print(f\"Configuring structured output for MyCustomAgentAdapter: {structured_output}\")\n+    ```\n+\n+By implementing these methods, your `MyCustomAgentAdapter` will allow your custom agent implementation to function correctly within a CrewAI crew, interacting with tasks and tools seamlessly. Remember to replace the example comments and print statements with your actual adaptation logic specific to the external agent framework you are integrating.\n+\n+## BaseToolAdapter implementation\n+The `BaseToolAdapter` class is responsible for converting CrewAI's native `BaseTool` objects into a format that your specific external agent framework can understand and utilize. Different agent frameworks (like LangGraph, OpenAI Assistants, etc.) have their own unique ways of defining and handling tools, and the `BaseToolAdapter` acts as the translator.\n+\n+Here's how you implement your custom tool adapter:",
        "comment_created_at": "2025-04-15T21:17:24+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "what about adding a section to talk about `required method` likely the BaseAgentAdapter.. just to try keep the same \"pattern\"",
        "pr_file_module": null
      }
    ]
  }
]