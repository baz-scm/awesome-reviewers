[
  {
    "discussion_id": "2048807029",
    "pr_number": 2610,
    "pr_file": "src/crewai/agent.py",
    "created_at": "2025-04-17T12:05:24+00:00",
    "commented_code": "task=task,\n                 ),\n             )\n-            result = self.agent_executor.invoke(\n-                {\n-                    \"input\": task_prompt,\n-                    \"tool_names\": self.agent_executor.tools_names,\n-                    \"tools\": self.agent_executor.tools_description,\n-                    \"ask_for_human_input\": task.human_input,\n-                }\n-            )[\"output\"]\n+\n+            # Determine execution method based on timeout setting\n+            if self.max_execution_time is not None:\n+                if not isinstance(self.max_execution_time, int) or self.max_execution_time <= 0:\n+                    raise ValueError(\"Max Execution time must be a positive integer greater than zero\")\n+                result = self._execute_with_timeout(task_prompt, task, self.max_execution_time)\n+            else:\n+                result = self._execute_without_timeout(task_prompt, task)\n+                \n+        except TimeoutError as e:\n+            # Propagate TimeoutError without retry\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(\n+                    agent=self,\n+                    task=task,\n+                    error=f\"Task '{task.description}' execution timed out after {self.max_execution_time} seconds. Consider increasing max_execution_time or optimizing the task.\",",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2048807029",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "2048807029",
        "commented_code": "@@ -264,14 +269,26 @@ def execute_task(\n                     task=task,\n                 ),\n             )\n-            result = self.agent_executor.invoke(\n-                {\n-                    \"input\": task_prompt,\n-                    \"tool_names\": self.agent_executor.tools_names,\n-                    \"tools\": self.agent_executor.tools_description,\n-                    \"ask_for_human_input\": task.human_input,\n-                }\n-            )[\"output\"]\n+\n+            # Determine execution method based on timeout setting\n+            if self.max_execution_time is not None:\n+                if not isinstance(self.max_execution_time, int) or self.max_execution_time <= 0:\n+                    raise ValueError(\"Max Execution time must be a positive integer greater than zero\")\n+                result = self._execute_with_timeout(task_prompt, task, self.max_execution_time)\n+            else:\n+                result = self._execute_without_timeout(task_prompt, task)\n+                \n+        except TimeoutError as e:\n+            # Propagate TimeoutError without retry\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(\n+                    agent=self,\n+                    task=task,\n+                    error=f\"Task '{task.description}' execution timed out after {self.max_execution_time} seconds. Consider increasing max_execution_time or optimizing the task.\",",
        "comment_created_at": "2025-04-17T12:05:24+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "what about use the same `error` variable in the event error and exception message?\r\n\r\n```python\r\nerror=f\"Task '{task.description}' execution timed out after {self.max_execution_time} seconds. Consider increasing max_execution_time or optimizing the task.\"\r\n\r\nAgentExecutionErrorEvent(..., error=error)\r\nraise TimetouError(error)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2048810140",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "2048807029",
        "commented_code": "@@ -264,14 +269,26 @@ def execute_task(\n                     task=task,\n                 ),\n             )\n-            result = self.agent_executor.invoke(\n-                {\n-                    \"input\": task_prompt,\n-                    \"tool_names\": self.agent_executor.tools_names,\n-                    \"tools\": self.agent_executor.tools_description,\n-                    \"ask_for_human_input\": task.human_input,\n-                }\n-            )[\"output\"]\n+\n+            # Determine execution method based on timeout setting\n+            if self.max_execution_time is not None:\n+                if not isinstance(self.max_execution_time, int) or self.max_execution_time <= 0:\n+                    raise ValueError(\"Max Execution time must be a positive integer greater than zero\")\n+                result = self._execute_with_timeout(task_prompt, task, self.max_execution_time)\n+            else:\n+                result = self._execute_without_timeout(task_prompt, task)\n+                \n+        except TimeoutError as e:\n+            # Propagate TimeoutError without retry\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(\n+                    agent=self,\n+                    task=task,\n+                    error=f\"Task '{task.description}' execution timed out after {self.max_execution_time} seconds. Consider increasing max_execution_time or optimizing the task.\",",
        "comment_created_at": "2025-04-17T12:07:19+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "Actually I just notice that you can just propagate the error message \r\n```python\r\nerror = str(e)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2048817450",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "src/crewai/agent.py",
        "discussion_id": "2048807029",
        "commented_code": "@@ -264,14 +269,26 @@ def execute_task(\n                     task=task,\n                 ),\n             )\n-            result = self.agent_executor.invoke(\n-                {\n-                    \"input\": task_prompt,\n-                    \"tool_names\": self.agent_executor.tools_names,\n-                    \"tools\": self.agent_executor.tools_description,\n-                    \"ask_for_human_input\": task.human_input,\n-                }\n-            )[\"output\"]\n+\n+            # Determine execution method based on timeout setting\n+            if self.max_execution_time is not None:\n+                if not isinstance(self.max_execution_time, int) or self.max_execution_time <= 0:\n+                    raise ValueError(\"Max Execution time must be a positive integer greater than zero\")\n+                result = self._execute_with_timeout(task_prompt, task, self.max_execution_time)\n+            else:\n+                result = self._execute_without_timeout(task_prompt, task)\n+                \n+        except TimeoutError as e:\n+            # Propagate TimeoutError without retry\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(\n+                    agent=self,\n+                    task=task,\n+                    error=f\"Task '{task.description}' execution timed out after {self.max_execution_time} seconds. Consider increasing max_execution_time or optimizing the task.\",",
        "comment_created_at": "2025-04-17T12:12:06+00:00",
        "comment_author": "Vidit-Ostwal",
        "comment_body": "Got it, changed,",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069285138",
    "pr_number": 2723,
    "pr_file": "src/crewai/crew.py",
    "created_at": "2025-04-30T19:01:25+00:00",
    "commented_code": "return self\n \n+    @model_validator(mode=\"after\")\n+    def set_parent_flow(self, max_depth: int = 5) -> Optional[\"Crew\"]:\n+        \"\"\"Find the nearest Flow instance in the call stack.\n+\n+        Args:\n+            max_depth: Maximum frames to traverse up the call stack.\n+\n+        Returns:\n+            The first Flow instance found in the call stack, or None.\n+        \"\"\"\n+        stack = inspect.stack(context=0)[1 : max_depth + 1]\n+        try:\n+            for frame_info in stack:\n+                candidate = frame_info.frame.f_locals.get(\"self\")\n+                if isinstance(candidate, Flow):\n+                    self.parent_flow = candidate\n+                    break\n+            else:\n+                self.parent_flow = None\n+        finally:\n+            del stack\n+            return self",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2069285138",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2723,
        "pr_file": "src/crewai/crew.py",
        "discussion_id": "2069285138",
        "commented_code": "@@ -275,6 +291,29 @@ def set_private_attrs(self) -> \"Crew\":\n \n         return self\n \n+    @model_validator(mode=\"after\")\n+    def set_parent_flow(self, max_depth: int = 5) -> Optional[\"Crew\"]:\n+        \"\"\"Find the nearest Flow instance in the call stack.\n+\n+        Args:\n+            max_depth: Maximum frames to traverse up the call stack.\n+\n+        Returns:\n+            The first Flow instance found in the call stack, or None.\n+        \"\"\"\n+        stack = inspect.stack(context=0)[1 : max_depth + 1]\n+        try:\n+            for frame_info in stack:\n+                candidate = frame_info.frame.f_locals.get(\"self\")\n+                if isinstance(candidate, Flow):\n+                    self.parent_flow = candidate\n+                    break\n+            else:\n+                self.parent_flow = None\n+        finally:\n+            del stack\n+            return self",
        "comment_created_at": "2025-04-30T19:01:25+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "Consider moving the `return` to try block. While is valid is not common use finally with return ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2037892664",
    "pr_number": 2579,
    "pr_file": "src/crewai/flow/flow.py",
    "created_at": "2025-04-10T17:07:15+00:00",
    "commented_code": "import traceback\n \n             traceback.print_exc()\n+            raise",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2037892664",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2579,
        "pr_file": "src/crewai/flow/flow.py",
        "discussion_id": "2037892664",
        "commented_code": "@@ -1043,6 +1043,7 @@ async def _execute_single_listener(self, listener_name: str, result: Any) -> Non\n             import traceback\n \n             traceback.print_exc()\n+            raise",
        "comment_created_at": "2025-04-10T17:07:15+00:00",
        "comment_author": "lorenzejay",
        "comment_body": "no more silently failing",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1850319222",
    "pr_number": 1635,
    "pr_file": "src/crewai/crew.py",
    "created_at": "2024-11-20T13:28:49+00:00",
    "commented_code": "f\"The process '{self.process}' is not implemented yet.\"\n             )\n \n+        for callback in self.after_kickoff_callbacks:\n+            result = callback(result)",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1850319222",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1635,
        "pr_file": "src/crewai/crew.py",
        "discussion_id": "1850319222",
        "commented_code": "@@ -520,6 +531,9 @@ def kickoff(\n                 f\"The process '{self.process}' is not implemented yet.\"\n             )\n \n+        for callback in self.after_kickoff_callbacks:\n+            result = callback(result)",
        "comment_created_at": "2024-11-20T13:28:49+00:00",
        "comment_author": "thiagomoretto",
        "comment_body": "qq: In case one of the callbacks raises an exception, will it stop the whole process?",
        "pr_file_module": null
      },
      {
        "comment_id": "1850326716",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1635,
        "pr_file": "src/crewai/crew.py",
        "discussion_id": "1850319222",
        "commented_code": "@@ -520,6 +531,9 @@ def kickoff(\n                 f\"The process '{self.process}' is not implemented yet.\"\n             )\n \n+        for callback in self.after_kickoff_callbacks:\n+            result = callback(result)",
        "comment_created_at": "2024-11-20T13:33:44+00:00",
        "comment_author": "gvieira",
        "comment_body": "Good question. The process will break in this case, and I believe it's a good thing, as we can't silently move on if something went wrong in the process of changing inputs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1700205631",
    "pr_number": 1042,
    "pr_file": "src/crewai/agents/executor.py",
    "created_at": "2024-08-01T13:44:40+00:00",
    "commented_code": "yield AgentStep(action=output, observation=observation)\n             return\n \n+        except BadRequestError as e:",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1700205631",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1042,
        "pr_file": "src/crewai/agents/executor.py",
        "discussion_id": "1700205631",
        "commented_code": "@@ -185,6 +197,52 @@ def _iter_next_step(\n             yield AgentStep(action=output, observation=observation)\n             return\n \n+        except BadRequestError as e:",
        "comment_created_at": "2024-08-01T13:44:40+00:00",
        "comment_author": "pythonbyte",
        "comment_body": "_Suggestion_: If the error raised is a type-specific error, maybe is worth it to create a Custom Exception and handle the specific cases when we have the context length exceeded this way you can have something like\r\n\r\n`except ContextLengthExceeded as exc`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1700239865",
    "pr_number": 1042,
    "pr_file": "src/crewai/agents/executor.py",
    "created_at": "2024-08-01T13:54:32+00:00",
    "commented_code": "yield AgentStep(action=output, observation=observation)\n             return\n \n+        except BadRequestError as e:\n+            print(\"Bad Request Error\", e)\n+            if \"context_length_exceeded\" in str(e):\n+                self._logger.log(\n+                    \"debug\",\n+                    \"Context length exceeded. Asking user if they want to use summarize prompt to fit, this will reduce context length.\",\n+                    color=\"yellow\",\n+                )\n+                user_choice = prompt(\n+                    \"Context length exceeded. Do you want to summarize the text to fit models context window? (Y/N): \",\n+                    validator=YesNoValidator(),\n+                ).lower()\n+                if user_choice in [\"y\", \"yes\"]:\n+                    self._logger.log(\n+                        \"debug\",\n+                        \"Context length exceeded. Using summarize prompt to fit, this will reduce context length.\",\n+                        color=\"bold_blue\",\n+                    )\n+                    intermediate_steps = self._handle_context_length(intermediate_steps)\n+\n+                    output = self.agent.plan(\n+                        intermediate_steps,\n+                        callbacks=run_manager.get_child() if run_manager else None,\n+                        **inputs,\n+                    )\n+\n+                    if isinstance(output, AgentFinish):\n+                        yield output\n+                    else:\n+                        yield AgentStep(action=output, observation=None)\n+                    return\n+                else:\n+                    raise SystemExit(\n+                        \"Context length exceeded and user opted not to summarize. Consider using smaller text or RAG tools from crewai_tools.\"\n+                    )\n+\n+            else:\n+                raise e\n+\n+        except Exception as e:\n+            yield AgentStep(\n+                action=AgentAction(\"_Exception\", str(e), str(e)),\n+                observation=str(e),\n+            )\n+            return\n+",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1700239865",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1042,
        "pr_file": "src/crewai/agents/executor.py",
        "discussion_id": "1700239865",
        "commented_code": "@@ -185,6 +197,52 @@ def _iter_next_step(\n             yield AgentStep(action=output, observation=observation)\n             return\n \n+        except BadRequestError as e:\n+            print(\"Bad Request Error\", e)\n+            if \"context_length_exceeded\" in str(e):\n+                self._logger.log(\n+                    \"debug\",\n+                    \"Context length exceeded. Asking user if they want to use summarize prompt to fit, this will reduce context length.\",\n+                    color=\"yellow\",\n+                )\n+                user_choice = prompt(\n+                    \"Context length exceeded. Do you want to summarize the text to fit models context window? (Y/N): \",\n+                    validator=YesNoValidator(),\n+                ).lower()\n+                if user_choice in [\"y\", \"yes\"]:\n+                    self._logger.log(\n+                        \"debug\",\n+                        \"Context length exceeded. Using summarize prompt to fit, this will reduce context length.\",\n+                        color=\"bold_blue\",\n+                    )\n+                    intermediate_steps = self._handle_context_length(intermediate_steps)\n+\n+                    output = self.agent.plan(\n+                        intermediate_steps,\n+                        callbacks=run_manager.get_child() if run_manager else None,\n+                        **inputs,\n+                    )\n+\n+                    if isinstance(output, AgentFinish):\n+                        yield output\n+                    else:\n+                        yield AgentStep(action=output, observation=None)\n+                    return\n+                else:\n+                    raise SystemExit(\n+                        \"Context length exceeded and user opted not to summarize. Consider using smaller text or RAG tools from crewai_tools.\"\n+                    )\n+\n+            else:\n+                raise e\n+\n+        except Exception as e:\n+            yield AgentStep(\n+                action=AgentAction(\"_Exception\", str(e), str(e)),\n+                observation=str(e),\n+            )\n+            return\n+",
        "comment_created_at": "2024-08-01T13:54:32+00:00",
        "comment_author": "pythonbyte",
        "comment_body": "_Suggestion_: All this code could be its method to handle these cases. As I suggested above, if you have a Custom exception you could do something like this:\r\n_hint_: If we have branched out to a specific case and it has too many lines, might be better to have it in a different function to encapsulate and isolate that behavior to be more testable and easier to read\r\n\r\n```\r\nexcept ContextLengthException as exc:\r\n     self._handle_conext_length_exc()\r\n```",
        "pr_file_module": null
      }
    ]
  }
]