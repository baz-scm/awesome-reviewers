[
  {
    "discussion_id": "2048821633",
    "pr_number": 2610,
    "pr_file": "tests/task_test.py",
    "created_at": "2025-04-17T12:15:22+00:00",
    "commented_code": "assert parsed[\"optional\"] is None\n     assert parsed[\"nested\"][\"flag\"] is True\n     assert parsed[\"nested\"][\"empty\"] is None\n+\n+\n+def test_task_with_no_max_execution_time():\n+    researcher = Agent(\n+    role=\"Researcher\",\n+    goal=\"Make the best research and analysis on content about AI and AI agents\",\n+    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.\",\n+    allow_delegation=False,\n+    max_execution_time=None\n+    )\n+\n+    task = Task(\n+        description=\"Give me a list of 5 interesting ideas to explore for na article, what makes them unique and interesting.\",\n+        expected_output=\"Bullet point list of 5 interesting ideas.\",\n+        agent=researcher,\n+    )\n+\n+    with patch.object(Agent, \"_execute_without_timeout\", return_value = \"ok\") as execute:\n+        result = task.execute_sync(agent=researcher)\n+        assert result.raw == \"ok\"\n+        execute.assert_called_once()\n+\n+\n+def test_task_with_max_execution_time():",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2048821633",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "tests/task_test.py",
        "discussion_id": "2048821633",
        "commented_code": "@@ -1368,3 +1368,80 @@ def test_interpolate_valid_types():\n     assert parsed[\"optional\"] is None\n     assert parsed[\"nested\"][\"flag\"] is True\n     assert parsed[\"nested\"][\"empty\"] is None\n+\n+\n+def test_task_with_no_max_execution_time():\n+    researcher = Agent(\n+    role=\"Researcher\",\n+    goal=\"Make the best research and analysis on content about AI and AI agents\",\n+    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.\",\n+    allow_delegation=False,\n+    max_execution_time=None\n+    )\n+\n+    task = Task(\n+        description=\"Give me a list of 5 interesting ideas to explore for na article, what makes them unique and interesting.\",\n+        expected_output=\"Bullet point list of 5 interesting ideas.\",\n+        agent=researcher,\n+    )\n+\n+    with patch.object(Agent, \"_execute_without_timeout\", return_value = \"ok\") as execute:\n+        result = task.execute_sync(agent=researcher)\n+        assert result.raw == \"ok\"\n+        execute.assert_called_once()\n+\n+\n+def test_task_with_max_execution_time():",
        "comment_created_at": "2025-04-17T12:15:22+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "could we improve those tests? I mean you are testing the method will be called but what happens under the hood (that is what is matter) is not beign tested. \r\nCould we use a custom `tool`, add some sleep there?",
        "pr_file_module": null
      },
      {
        "comment_id": "2048822985",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "tests/task_test.py",
        "discussion_id": "2048821633",
        "commented_code": "@@ -1368,3 +1368,80 @@ def test_interpolate_valid_types():\n     assert parsed[\"optional\"] is None\n     assert parsed[\"nested\"][\"flag\"] is True\n     assert parsed[\"nested\"][\"empty\"] is None\n+\n+\n+def test_task_with_no_max_execution_time():\n+    researcher = Agent(\n+    role=\"Researcher\",\n+    goal=\"Make the best research and analysis on content about AI and AI agents\",\n+    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.\",\n+    allow_delegation=False,\n+    max_execution_time=None\n+    )\n+\n+    task = Task(\n+        description=\"Give me a list of 5 interesting ideas to explore for na article, what makes them unique and interesting.\",\n+        expected_output=\"Bullet point list of 5 interesting ideas.\",\n+        agent=researcher,\n+    )\n+\n+    with patch.object(Agent, \"_execute_without_timeout\", return_value = \"ok\") as execute:\n+        result = task.execute_sync(agent=researcher)\n+        assert result.raw == \"ok\"\n+        execute.assert_called_once()\n+\n+\n+def test_task_with_max_execution_time():",
        "comment_created_at": "2025-04-17T12:16:29+00:00",
        "comment_author": "Vidit-Ostwal",
        "comment_body": "Lemme check once. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2048836918",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "tests/task_test.py",
        "discussion_id": "2048821633",
        "commented_code": "@@ -1368,3 +1368,80 @@ def test_interpolate_valid_types():\n     assert parsed[\"optional\"] is None\n     assert parsed[\"nested\"][\"flag\"] is True\n     assert parsed[\"nested\"][\"empty\"] is None\n+\n+\n+def test_task_with_no_max_execution_time():\n+    researcher = Agent(\n+    role=\"Researcher\",\n+    goal=\"Make the best research and analysis on content about AI and AI agents\",\n+    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.\",\n+    allow_delegation=False,\n+    max_execution_time=None\n+    )\n+\n+    task = Task(\n+        description=\"Give me a list of 5 interesting ideas to explore for na article, what makes them unique and interesting.\",\n+        expected_output=\"Bullet point list of 5 interesting ideas.\",\n+        agent=researcher,\n+    )\n+\n+    with patch.object(Agent, \"_execute_without_timeout\", return_value = \"ok\") as execute:\n+        result = task.execute_sync(agent=researcher)\n+        assert result.raw == \"ok\"\n+        execute.assert_called_once()\n+\n+\n+def test_task_with_max_execution_time():",
        "comment_created_at": "2025-04-17T12:25:39+00:00",
        "comment_author": "Vidit-Ostwal",
        "comment_body": "Okay got it, I think adding a test which actually calls completely without mocking anything will make more sense to this.\r\n\r\nI am not sure how the HTTP calls are made during testing \r\nShould I add this line on the top of the function?\r\n\r\n`@pytest.mark.vcr(filter_headers=[\"authorization\"])`\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2048885681",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2610,
        "pr_file": "tests/task_test.py",
        "discussion_id": "2048821633",
        "commented_code": "@@ -1368,3 +1368,80 @@ def test_interpolate_valid_types():\n     assert parsed[\"optional\"] is None\n     assert parsed[\"nested\"][\"flag\"] is True\n     assert parsed[\"nested\"][\"empty\"] is None\n+\n+\n+def test_task_with_no_max_execution_time():\n+    researcher = Agent(\n+    role=\"Researcher\",\n+    goal=\"Make the best research and analysis on content about AI and AI agents\",\n+    backstory=\"You're an expert researcher, specialized in technology, software engineering, AI and startups. You work as a freelancer and is now working on doing research and analysis for a new customer.\",\n+    allow_delegation=False,\n+    max_execution_time=None\n+    )\n+\n+    task = Task(\n+        description=\"Give me a list of 5 interesting ideas to explore for na article, what makes them unique and interesting.\",\n+        expected_output=\"Bullet point list of 5 interesting ideas.\",\n+        agent=researcher,\n+    )\n+\n+    with patch.object(Agent, \"_execute_without_timeout\", return_value = \"ok\") as execute:\n+        result = task.execute_sync(agent=researcher)\n+        assert result.raw == \"ok\"\n+        execute.assert_called_once()\n+\n+\n+def test_task_with_max_execution_time():",
        "comment_created_at": "2025-04-17T12:57:36+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "Yeah you can mock this way, just remember to run with your model API KEY\r\n\r\nI was thinking in add a tool with `result_as_answer=True` like that\r\n\r\n```\r\n@tool(\"what amazing tool\", result_as_answer=True)\r\ndef my_tool(...):\r\n   sleep(5)\r\n   return \"ok\"\r\n\r\nAgent(\r\n  tools[my_tool]\r\n)\r\n```\r\n\r\nI think it will be easier and more explicit to validate that the agent is awaiting a response for more than X seconds",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2042880468",
    "pr_number": 2604,
    "pr_file": "src/crewai/memory/storage/mem0_storage.py",
    "created_at": "2025-04-14T20:27:02+00:00",
    "commented_code": "# Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2042880468",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-14T20:27:02+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "great work!\r\n\r\n\r\nJust add a few test to cover line 122 & 119, pls",
        "pr_file_module": null
      },
      {
        "comment_id": "2045144592",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-15T17:35:44+00:00",
        "comment_author": "Dev-Khant",
        "comment_body": "Thanks for reviewing. Added test to check line 119 and there's already a test which checks the search functionality: https://github.com/crewAIInc/crewAI/blob/main/tests/memory/user_memory_test.py#L33 and it also passes",
        "pr_file_module": null
      },
      {
        "comment_id": "2045220753",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-15T18:25:07+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "The CI tests and type checker are falling. Could u handle that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2045264441",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-15T18:54:28+00:00",
        "comment_author": "Dev-Khant",
        "comment_body": "Fixed both",
        "pr_file_module": null
      },
      {
        "comment_id": "2048803309",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-17T12:02:31+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "@Dev-Khant Your added test still not testing what should be testing.\r\nTo ensure that I removed `hasattr(self.memory, \"llm\")` clause from `mem0_storage` and ran your added test, still passing. \r\n\r\nIt is happens because you added test `test_search_with_llm` is mocking the `user_memory.storage`. \r\n\r\nHere's a few suggestions to fix it:\r\n\r\n1. You have to cover mem0_storage, so add a test into `test_mem0_storage.py`\r\n2. Add test to cover search and save methods \r\n3. Use `unittest.mock.patch` to mock the `memory.save` and `memory.search` calls. Example: `patch(\"mem0.Memory.search\") as mock_method`\r\n4. use `assert_called_once_with` to ensure the propagated parameters. Example: `mock_method.assert_called_once_with(agent_id=, metadata=, ...)`\r\n\r\nLet me know if you need help with those test",
        "pr_file_module": null
      },
      {
        "comment_id": "2049183550",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2604,
        "pr_file": "src/crewai/memory/storage/mem0_storage.py",
        "discussion_id": "2042880468",
        "commented_code": "@@ -116,8 +116,10 @@ def search(\n \n         # Discard the filters for now since we create the filters\n         # automatically when the crew is created.\n+        if hasattr(self, \"llm\"):\n+            del params[\"metadata\"], params[\"output_format\"]\n         results = self.memory.search(**params)\n-        return [r for r in results if r[\"score\"] >= score_threshold]\n+        return [r for r in results[\"results\"] if r[\"score\"] >= score_threshold]",
        "comment_created_at": "2025-04-17T15:20:08+00:00",
        "comment_author": "Dev-Khant",
        "comment_body": "Let me know if the latest tests meet your expectations and if I\u2019ve understood you correctly. If not, could you please help with the tests?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1662879541",
    "pr_number": 843,
    "pr_file": "tests/crew_test.py",
    "created_at": "2024-07-02T17:00:25+00:00",
    "commented_code": "}\n \n \n+@pytest.mark.vcr(filter_headers=[\"authorization\"])\n+def test_hierarchical_crew_creation_tasks_with_agents():\n+    \"\"\"\n+    Agents are not required for tasks in a hierarchical process but sometimes they are still added\n+    This test makes sure that the manager still delegates the task to the agent even if the agent is passed in the task\n+    \"\"\"\n+    from langchain_openai import ChatOpenAI\n+\n+    task = Task(\n+        description=\"Write one amazing paragraph about AI.\",\n+        expected_output=\"A single paragraph with 4 sentences.\",\n+        agent=writer,\n+    )\n+\n+    crew = Crew(\n+        tasks=[task],\n+        agents=[writer],\n+        process=Process.hierarchical,\n+        manager_llm=ChatOpenAI(model=\"gpt-4o\"),\n+    )\n+\n+    assert crew.process == Process.hierarchical\n+    assert crew.manager_llm is not None\n+    assert crew.tasks[0].agent == writer\n+    result = crew.kickoff()",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1662879541",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 843,
        "pr_file": "tests/crew_test.py",
        "discussion_id": "1662879541",
        "commented_code": "@@ -722,6 +745,38 @@ def test_agent_usage_metrics_are_captured_for_hierarchical_process():\n     }\n \n \n+@pytest.mark.vcr(filter_headers=[\"authorization\"])\n+def test_hierarchical_crew_creation_tasks_with_agents():\n+    \"\"\"\n+    Agents are not required for tasks in a hierarchical process but sometimes they are still added\n+    This test makes sure that the manager still delegates the task to the agent even if the agent is passed in the task\n+    \"\"\"\n+    from langchain_openai import ChatOpenAI\n+\n+    task = Task(\n+        description=\"Write one amazing paragraph about AI.\",\n+        expected_output=\"A single paragraph with 4 sentences.\",\n+        agent=writer,\n+    )\n+\n+    crew = Crew(\n+        tasks=[task],\n+        agents=[writer],\n+        process=Process.hierarchical,\n+        manager_llm=ChatOpenAI(model=\"gpt-4o\"),\n+    )\n+\n+    assert crew.process == Process.hierarchical\n+    assert crew.manager_llm is not None\n+    assert crew.tasks[0].agent == writer\n+    result = crew.kickoff()",
        "comment_created_at": "2024-07-02T17:00:25+00:00",
        "comment_author": "bhancockio",
        "comment_body": "Right now, this isn't testing to make sure that during the `_run_hierarchical_process` that the manager agent's tools are only set to the writer when executing the task.\r\n\r\nWe would have to do some mocking to actually make this test valid.",
        "pr_file_module": null
      },
      {
        "comment_id": "1662967311",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 843,
        "pr_file": "tests/crew_test.py",
        "discussion_id": "1662879541",
        "commented_code": "@@ -722,6 +745,38 @@ def test_agent_usage_metrics_are_captured_for_hierarchical_process():\n     }\n \n \n+@pytest.mark.vcr(filter_headers=[\"authorization\"])\n+def test_hierarchical_crew_creation_tasks_with_agents():\n+    \"\"\"\n+    Agents are not required for tasks in a hierarchical process but sometimes they are still added\n+    This test makes sure that the manager still delegates the task to the agent even if the agent is passed in the task\n+    \"\"\"\n+    from langchain_openai import ChatOpenAI\n+\n+    task = Task(\n+        description=\"Write one amazing paragraph about AI.\",\n+        expected_output=\"A single paragraph with 4 sentences.\",\n+        agent=writer,\n+    )\n+\n+    crew = Crew(\n+        tasks=[task],\n+        agents=[writer],\n+        process=Process.hierarchical,\n+        manager_llm=ChatOpenAI(model=\"gpt-4o\"),\n+    )\n+\n+    assert crew.process == Process.hierarchical\n+    assert crew.manager_llm is not None\n+    assert crew.tasks[0].agent == writer\n+    result = crew.kickoff()",
        "comment_created_at": "2024-07-02T18:12:42+00:00",
        "comment_author": "lorenzejay",
        "comment_body": "i think i can do another assert to look into crew.task[0].tools == delegate(Agent=[writer]) or something like that",
        "pr_file_module": null
      }
    ]
  }
]