[
  {
    "discussion_id": "2017299691",
    "pr_number": 2491,
    "pr_file": "src/crewai/utilities/events/base_events.py",
    "created_at": "2025-03-27T17:49:38+00:00",
    "commented_code": "from pydantic import BaseModel, Field\n \n+from crewai.flow.state_utils import Serializable, to_serializable\n \n-class CrewEvent(BaseModel):\n-    \"\"\"Base class for all crew events\"\"\"\n+\n+class BaseEvent(BaseModel):\n+    \"\"\"Base class for all events\"\"\"\n \n     timestamp: datetime = Field(default_factory=datetime.now)\n     type: str\n     source_fingerprint: Optional[str] = None  # UUID string of the source entity\n     source_type: Optional[str] = None  # \"agent\", \"task\", \"crew\"\n     fingerprint_metadata: Optional[Dict[str, Any]] = None  # Any relevant metadata\n+\n+    def to_json(self, exclude: set[str] | None = None) -> Serializable:",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2017299691",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2491,
        "pr_file": "src/crewai/utilities/events/base_events.py",
        "discussion_id": "2017299691",
        "commented_code": "@@ -3,12 +3,26 @@\n \n from pydantic import BaseModel, Field\n \n+from crewai.flow.state_utils import Serializable, to_serializable\n \n-class CrewEvent(BaseModel):\n-    \"\"\"Base class for all crew events\"\"\"\n+\n+class BaseEvent(BaseModel):\n+    \"\"\"Base class for all events\"\"\"\n \n     timestamp: datetime = Field(default_factory=datetime.now)\n     type: str\n     source_fingerprint: Optional[str] = None  # UUID string of the source entity\n     source_type: Optional[str] = None  # \"agent\", \"task\", \"crew\"\n     fingerprint_metadata: Optional[Dict[str, Any]] = None  # Any relevant metadata\n+\n+    def to_json(self, exclude: set[str] | None = None) -> Serializable:",
        "comment_created_at": "2025-03-27T17:49:38+00:00",
        "comment_author": "vinibrsl",
        "comment_body": "I'm following up with a PR that implements this method for other events, where applicable. Mostly where we have complex types or fields we don't want in a JSON format.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1728887920",
    "pr_number": 1240,
    "pr_file": "src/crewai/cli/deploy/api.py",
    "created_at": "2024-08-23T12:26:11+00:00",
    "commented_code": "+from os import getenv\n+\n+import requests\n+\n+\n+class CrewAPI:\n+    \"\"\"\n+    CrewAPI class to interact with the crewAI+ API.\n+    \"\"\"\n+\n+    def __init__(self, api_key: str) -> None:\n+        self.api_key = api_key\n+        self.headers = {\n+            \"Authorization\": f\"Bearer {api_key}\",\n+            \"Content-Type\": \"application/json\",\n+        }\n+        self.base_url = getenv(\n+            \"CREWAI_BASE_URL\", \"https://dev.crewai.com/crewai_plus/api/v1/crews\"\n+        )\n+\n+    def _make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:\n+        url = f\"{self.base_url}/{endpoint}\"\n+        return requests.request(method, url, headers=self.headers, **kwargs)",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1728887920",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1240,
        "pr_file": "src/crewai/cli/deploy/api.py",
        "discussion_id": "1728887920",
        "commented_code": "@@ -0,0 +1,63 @@\n+from os import getenv\n+\n+import requests\n+\n+\n+class CrewAPI:\n+    \"\"\"\n+    CrewAPI class to interact with the crewAI+ API.\n+    \"\"\"\n+\n+    def __init__(self, api_key: str) -> None:\n+        self.api_key = api_key\n+        self.headers = {\n+            \"Authorization\": f\"Bearer {api_key}\",\n+            \"Content-Type\": \"application/json\",\n+        }\n+        self.base_url = getenv(\n+            \"CREWAI_BASE_URL\", \"https://dev.crewai.com/crewai_plus/api/v1/crews\"\n+        )\n+\n+    def _make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:\n+        url = f\"{self.base_url}/{endpoint}\"\n+        return requests.request(method, url, headers=self.headers, **kwargs)",
        "comment_created_at": "2024-08-23T12:26:11+00:00",
        "comment_author": "gvieira",
        "comment_body": "Also no need to change: I've been using Session Objects in such cases. I love how I can setup the object then simply call `get`, `post`, and so on without passing auth headers, url and other stuff.",
        "pr_file_module": null
      },
      {
        "comment_id": "1728910070",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1240,
        "pr_file": "src/crewai/cli/deploy/api.py",
        "discussion_id": "1728887920",
        "commented_code": "@@ -0,0 +1,63 @@\n+from os import getenv\n+\n+import requests\n+\n+\n+class CrewAPI:\n+    \"\"\"\n+    CrewAPI class to interact with the crewAI+ API.\n+    \"\"\"\n+\n+    def __init__(self, api_key: str) -> None:\n+        self.api_key = api_key\n+        self.headers = {\n+            \"Authorization\": f\"Bearer {api_key}\",\n+            \"Content-Type\": \"application/json\",\n+        }\n+        self.base_url = getenv(\n+            \"CREWAI_BASE_URL\", \"https://dev.crewai.com/crewai_plus/api/v1/crews\"\n+        )\n+\n+    def _make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:\n+        url = f\"{self.base_url}/{endpoint}\"\n+        return requests.request(method, url, headers=self.headers, **kwargs)",
        "comment_created_at": "2024-08-23T12:43:08+00:00",
        "comment_author": "pythonbyte",
        "comment_body": "Awesome, I'll take into account for next iterations \ud83e\udee1 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1728892278",
    "pr_number": 1240,
    "pr_file": "src/crewai/cli/deploy/main.py",
    "created_at": "2024-08-23T12:29:56+00:00",
    "commented_code": "+from typing import Any, Dict, List, Optional\n+\n+from rich.console import Console\n+\n+from .api import CrewAPI\n+from .utils import (\n+    fetch_and_json_env_file,\n+    get_auth_token,\n+    get_git_remote_url,\n+    get_project_name,\n+)\n+\n+console = Console()\n+\n+\n+class DeployCommand:\n+    \"\"\"\n+    A class to handle deployment-related operations for CrewAI projects.\n+    \"\"\"\n+\n+    def __init__(self):\n+        \"\"\"\n+        Initialize the DeployCommand with project name and API client.\n+        \"\"\"\n+        try:\n+            access_token = get_auth_token()\n+        except Exception:\n+            console.print(\n+                \"Please sign up/login to CrewAI+ before using the CLI.\",\n+                style=\"bold red\",\n+            )\n+            console.print(\"Run 'crewai signup' to sign up/login.\", style=\"bold green\")\n+            raise SystemExit\n+\n+        self.project_name = get_project_name()\n+        self.client = CrewAPI(api_key=access_token)\n+\n+    def _handle_error(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Handle and display error messages from API responses.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The JSON response containing error information.\n+        \"\"\"\n+        error = json_response.get(\"error\", \"Unknown error\")\n+        message = json_response.get(\"message\", \"No message provided\")\n+        console.print(f\"Error: {error}\", style=\"bold red\")\n+        console.print(f\"Message: {message}\", style=\"bold red\")\n+\n+    def _standard_no_param_error_message(self) -> None:\n+        \"\"\"\n+        Display a standard error message when no UUID or project name is available.\n+        \"\"\"\n+        console.print(\n+            \"No UUID provided, project pyproject.toml not found or with error.\",\n+            style=\"bold red\",\n+        )\n+\n+    def _display_deployment_info(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Display deployment information.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The deployment information to display.\n+        \"\"\"\n+        console.print(\"Deploying the crew...\n\", style=\"bold blue\")\n+        for key, value in json_response.items():\n+            console.print(f\"{key.title()}: [green]{value}[/green]\")\n+        console.print(\"\nTo check the status of the deployment, run:\")\n+        console.print(\"crewai deploy status\")\n+        console.print(\" or\")\n+        console.print(f\"crewai deploy status --uuid \\\"{json_response['uuid']}\\\"\")\n+\n+    def _display_logs(self, log_messages: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Display log messages.\n+\n+        Args:\n+            log_messages (List[Dict[str, Any]]): The log messages to display.\n+        \"\"\"\n+        for log_message in log_messages:\n+            console.print(\n+                f\"{log_message['timestamp']} - {log_message['level']}: {log_message['message']}\"\n+            )\n+\n+    def deploy(self, uuid: Optional[str] = None) -> None:\n+        \"\"\"\n+        Deploy a crew using either UUID or project name.\n+\n+        Args:\n+            uuid (Optional[str]): The UUID of the crew to deploy.\n+        \"\"\"\n+        console.print(\"Starting deployment...\", style=\"bold blue\")\n+        if uuid:\n+            response = self.client.deploy_by_uuid(uuid)\n+        elif self.project_name:\n+            response = self.client.deploy_by_name(self.project_name)",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1728892278",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1240,
        "pr_file": "src/crewai/cli/deploy/main.py",
        "discussion_id": "1728892278",
        "commented_code": "@@ -0,0 +1,289 @@\n+from typing import Any, Dict, List, Optional\n+\n+from rich.console import Console\n+\n+from .api import CrewAPI\n+from .utils import (\n+    fetch_and_json_env_file,\n+    get_auth_token,\n+    get_git_remote_url,\n+    get_project_name,\n+)\n+\n+console = Console()\n+\n+\n+class DeployCommand:\n+    \"\"\"\n+    A class to handle deployment-related operations for CrewAI projects.\n+    \"\"\"\n+\n+    def __init__(self):\n+        \"\"\"\n+        Initialize the DeployCommand with project name and API client.\n+        \"\"\"\n+        try:\n+            access_token = get_auth_token()\n+        except Exception:\n+            console.print(\n+                \"Please sign up/login to CrewAI+ before using the CLI.\",\n+                style=\"bold red\",\n+            )\n+            console.print(\"Run 'crewai signup' to sign up/login.\", style=\"bold green\")\n+            raise SystemExit\n+\n+        self.project_name = get_project_name()\n+        self.client = CrewAPI(api_key=access_token)\n+\n+    def _handle_error(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Handle and display error messages from API responses.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The JSON response containing error information.\n+        \"\"\"\n+        error = json_response.get(\"error\", \"Unknown error\")\n+        message = json_response.get(\"message\", \"No message provided\")\n+        console.print(f\"Error: {error}\", style=\"bold red\")\n+        console.print(f\"Message: {message}\", style=\"bold red\")\n+\n+    def _standard_no_param_error_message(self) -> None:\n+        \"\"\"\n+        Display a standard error message when no UUID or project name is available.\n+        \"\"\"\n+        console.print(\n+            \"No UUID provided, project pyproject.toml not found or with error.\",\n+            style=\"bold red\",\n+        )\n+\n+    def _display_deployment_info(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Display deployment information.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The deployment information to display.\n+        \"\"\"\n+        console.print(\"Deploying the crew...\\n\", style=\"bold blue\")\n+        for key, value in json_response.items():\n+            console.print(f\"{key.title()}: [green]{value}[/green]\")\n+        console.print(\"\\nTo check the status of the deployment, run:\")\n+        console.print(\"crewai deploy status\")\n+        console.print(\" or\")\n+        console.print(f\"crewai deploy status --uuid \\\"{json_response['uuid']}\\\"\")\n+\n+    def _display_logs(self, log_messages: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Display log messages.\n+\n+        Args:\n+            log_messages (List[Dict[str, Any]]): The log messages to display.\n+        \"\"\"\n+        for log_message in log_messages:\n+            console.print(\n+                f\"{log_message['timestamp']} - {log_message['level']}: {log_message['message']}\"\n+            )\n+\n+    def deploy(self, uuid: Optional[str] = None) -> None:\n+        \"\"\"\n+        Deploy a crew using either UUID or project name.\n+\n+        Args:\n+            uuid (Optional[str]): The UUID of the crew to deploy.\n+        \"\"\"\n+        console.print(\"Starting deployment...\", style=\"bold blue\")\n+        if uuid:\n+            response = self.client.deploy_by_uuid(uuid)\n+        elif self.project_name:\n+            response = self.client.deploy_by_name(self.project_name)",
        "comment_created_at": "2024-08-23T12:29:56+00:00",
        "comment_author": "gvieira",
        "comment_body": "What do you think about encapsulating the response logic inside the client? This way `deploy_by_name` and others would either return a known object, like `DeployResponse` or throw an error. I like it, because the generic json parsing, status code handling and so on stays in a single place. If you like it, we can have a Low-hanging fruit as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "1728915243",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1240,
        "pr_file": "src/crewai/cli/deploy/main.py",
        "discussion_id": "1728892278",
        "commented_code": "@@ -0,0 +1,289 @@\n+from typing import Any, Dict, List, Optional\n+\n+from rich.console import Console\n+\n+from .api import CrewAPI\n+from .utils import (\n+    fetch_and_json_env_file,\n+    get_auth_token,\n+    get_git_remote_url,\n+    get_project_name,\n+)\n+\n+console = Console()\n+\n+\n+class DeployCommand:\n+    \"\"\"\n+    A class to handle deployment-related operations for CrewAI projects.\n+    \"\"\"\n+\n+    def __init__(self):\n+        \"\"\"\n+        Initialize the DeployCommand with project name and API client.\n+        \"\"\"\n+        try:\n+            access_token = get_auth_token()\n+        except Exception:\n+            console.print(\n+                \"Please sign up/login to CrewAI+ before using the CLI.\",\n+                style=\"bold red\",\n+            )\n+            console.print(\"Run 'crewai signup' to sign up/login.\", style=\"bold green\")\n+            raise SystemExit\n+\n+        self.project_name = get_project_name()\n+        self.client = CrewAPI(api_key=access_token)\n+\n+    def _handle_error(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Handle and display error messages from API responses.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The JSON response containing error information.\n+        \"\"\"\n+        error = json_response.get(\"error\", \"Unknown error\")\n+        message = json_response.get(\"message\", \"No message provided\")\n+        console.print(f\"Error: {error}\", style=\"bold red\")\n+        console.print(f\"Message: {message}\", style=\"bold red\")\n+\n+    def _standard_no_param_error_message(self) -> None:\n+        \"\"\"\n+        Display a standard error message when no UUID or project name is available.\n+        \"\"\"\n+        console.print(\n+            \"No UUID provided, project pyproject.toml not found or with error.\",\n+            style=\"bold red\",\n+        )\n+\n+    def _display_deployment_info(self, json_response: Dict[str, Any]) -> None:\n+        \"\"\"\n+        Display deployment information.\n+\n+        Args:\n+            json_response (Dict[str, Any]): The deployment information to display.\n+        \"\"\"\n+        console.print(\"Deploying the crew...\\n\", style=\"bold blue\")\n+        for key, value in json_response.items():\n+            console.print(f\"{key.title()}: [green]{value}[/green]\")\n+        console.print(\"\\nTo check the status of the deployment, run:\")\n+        console.print(\"crewai deploy status\")\n+        console.print(\" or\")\n+        console.print(f\"crewai deploy status --uuid \\\"{json_response['uuid']}\\\"\")\n+\n+    def _display_logs(self, log_messages: List[Dict[str, Any]]) -> None:\n+        \"\"\"\n+        Display log messages.\n+\n+        Args:\n+            log_messages (List[Dict[str, Any]]): The log messages to display.\n+        \"\"\"\n+        for log_message in log_messages:\n+            console.print(\n+                f\"{log_message['timestamp']} - {log_message['level']}: {log_message['message']}\"\n+            )\n+\n+    def deploy(self, uuid: Optional[str] = None) -> None:\n+        \"\"\"\n+        Deploy a crew using either UUID or project name.\n+\n+        Args:\n+            uuid (Optional[str]): The UUID of the crew to deploy.\n+        \"\"\"\n+        console.print(\"Starting deployment...\", style=\"bold blue\")\n+        if uuid:\n+            response = self.client.deploy_by_uuid(uuid)\n+        elif self.project_name:\n+            response = self.client.deploy_by_name(self.project_name)",
        "comment_created_at": "2024-08-23T12:47:07+00:00",
        "comment_author": "pythonbyte",
        "comment_body": "I'll setup a low-hanging fruit to look for the v1. But totally agree with that, makes much more sense to have a pre-defined object that we can use and the already available status_code and json content.",
        "pr_file_module": null
      }
    ]
  }
]