[
  {
    "discussion_id": "2180652850",
    "pr_number": 2805,
    "pr_file": "src/crewai/llm.py",
    "created_at": "2025-07-02T17:55:03+00:00",
    "commented_code": "else:\n             self.stop = stop\n \n+        #  Fallback logic\n+        if \"GEMINI_API_KEY\" in os.environ:\n+            api_key = os.environ[\"GEMINI_API_KEY\"]\n+        elif \"GOOGLE_API_KEY\" in os.environ:\n+            api_key = os.environ[\"GOOGLE_API_KEY\"]\n+            os.environ[\"GEMINI_API_KEY\"] = api_key\n+\n+        self.api_key = api_key",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2180652850",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2805,
        "pr_file": "src/crewai/llm.py",
        "discussion_id": "2180652850",
        "commented_code": "@@ -348,6 +366,15 @@ def __init__(\n         else:\n             self.stop = stop\n \n+        #  Fallback logic\n+        if \"GEMINI_API_KEY\" in os.environ:\n+            api_key = os.environ[\"GEMINI_API_KEY\"]\n+        elif \"GOOGLE_API_KEY\" in os.environ:\n+            api_key = os.environ[\"GOOGLE_API_KEY\"]\n+            os.environ[\"GEMINI_API_KEY\"] = api_key\n+\n+        self.api_key = api_key",
        "comment_created_at": "2025-07-02T17:55:03+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "You have couple of issues here\n1. If the parameter `api_key` was provided you have to use it even those GOOGLE/GEMINI_API_KEY have been set.\n2. move this to a dedicated method and call it on init method liek \n```python\ndef get_api_key(api_key: str):\n   if is_gemini_model(self.model):\n       return api_key or self._get_gemini_api_key_evn_vars()\n   return api_key\n\nself.api_key = def get_api_key(fallback=api_key):\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135671716",
    "pr_number": 2852,
    "pr_file": "src/crewai/agents/agent_adapters/foundry_agents/foundry_adapter.py",
    "created_at": "2025-06-09T12:55:25+00:00",
    "commented_code": "+from typing import Any, List, Optional\n+import os\n+import time\n+import json\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.foundry_agents.structured_output_converter import (\n+    FoundryConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools import BaseTool\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.utilities import Logger\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionCompletedEvent,\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from azure.ai.projects import AIProjectClient as FoundryClient\n+    from azure.ai.projects.models import MessageTextContent\n+    from azure.identity import DefaultAzureCredential\n+    from azure.ai.projects.models import FunctionTool\n+\n+\n+    from .foundry_agent_tool_adapter import FoundryAgentToolAdapter\n+\n+    FOUNDRY_AVAILABLE = True\n+except ImportError:\n+    FOUNDRY_AVAILABLE = False\n+\n+\n+class FoundryAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for Foundry Assistants\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _foundry_client: \"FoundryClient\" = PrivateAttr()\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _active_thread_id: Optional[str] = PrivateAttr(default=None)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+    _tool_adapter: \"FoundryAgentToolAdapter\" = PrivateAttr()\n+    _converter_adapter: FoundryConverterAdapter = PrivateAttr()\n+    _converted_tools: Optional[FunctionTool] = PrivateAttr(default=None)\n+\n+    def __init__(\n+        self,\n+        model: str = \"gpt-4.1-mini\",\n+        tools: Optional[List[BaseTool]] = None,\n+        agent_config: Optional[dict] = None,\n+        **kwargs,\n+    ):\n+        if not FOUNDRY_AVAILABLE:\n+            raise ImportError(\n+                \"Foundry Agent Dependencies are not installed. Please install it using `uv pip install azure-ai-projects azure-identity`\"\n+            )\n+        else:\n+            role = kwargs.pop(\"role\", None)\n+            goal = kwargs.pop(\"goal\", None)\n+            backstory = kwargs.pop(\"backstory\", None)\n+            super().__init__(\n+                role=role,\n+                goal=goal,\n+                backstory=backstory,\n+                tools=tools,\n+                agent_config=agent_config,\n+                **kwargs,\n+            )\n+            self._tool_adapter = FoundryAgentToolAdapter(tools=tools)\n+            self.llm = model\n+            self._converter_adapter = FoundryConverterAdapter(self)\n+\n+    def _build_system_prompt(self) -> str:\n+        \"\"\"Build a system prompt for the Foundry agent.\"\"\"\n+        base_prompt = f\"\"\"\n+            You are {self.role}.\n+        \n+            Your goal is: {self.goal}\n+\n+            Your backstory: {self.backstory}\n+\n+            When working on tasks, think step-by-step and use the available tools when necessary.\n+        \"\"\"\n+        return self._converter_adapter.enhance_system_prompt(base_prompt)\n+\n+    def execute_task(\n+        self,\n+        task: Any,\n+        context: Optional[str] = None,\n+        tools: Optional[List[BaseTool]] = None,\n+    ) -> str:\n+        \"\"\"Execute a task using the Foundry Assistant (automatic mode)\"\"\"\n+        self._converter_adapter.configure_structured_output(task)\n+        self.create_agent_executor(tools)\n+\n+        task_prompt = task.prompt()\n+        if context:\n+            task_prompt = self.i18n.slice(\"task_with_context\").format(\n+                task=task_prompt, context=context\n+            )\n+\n+        crewai_event_bus.emit(\n+            self,\n+            event=AgentExecutionStartedEvent(\n+                agent=self,\n+                tools=self.tools,\n+                task_prompt=task_prompt,\n+                task=task,\n+            ),\n+        )\n+\n+        try:\n+            self._foundry_client.agents.create_message(\n+                thread_id=self._active_thread_id,\n+                role=\"user\",\n+                content=task_prompt,\n+            )\n+\n+            self._foundry_client.agents.create_and_process_run(\n+                thread_id=self._active_thread_id,\n+                agent_id=self._foundry_agent_id\n+            )\n+\n+            messages = self._foundry_client.agents.list_messages(thread_id=self._active_thread_id)\n+            final_answer = messages.data[0].content[0]['text']['value']\n+\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionCompletedEvent(\n+                    agent=self, task=task, output=final_answer\n+                ),\n+            )\n+            return final_answer\n+\n+        except Exception as e:\n+            self._logger.log(\"error\", f\"Error executing Foundry task: {str(e)}\")\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(agent=self, task=task, error=str(e)),\n+            )\n+            raise\n+\n+\n+    def create_agent_executor(self, tools: Optional[List[BaseTool]] = None) -> None:\n+        self.configure_tools(tools)\n+        self._foundry_client = FoundryClient.from_connection_string(\n+            credential=DefaultAzureCredential(),\n+            conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "2135671716",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2852,
        "pr_file": "src/crewai/agents/agent_adapters/foundry_agents/foundry_adapter.py",
        "discussion_id": "2135671716",
        "commented_code": "@@ -0,0 +1,184 @@\n+from typing import Any, List, Optional\n+import os\n+import time\n+import json\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.foundry_agents.structured_output_converter import (\n+    FoundryConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools import BaseTool\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.utilities import Logger\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionCompletedEvent,\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from azure.ai.projects import AIProjectClient as FoundryClient\n+    from azure.ai.projects.models import MessageTextContent\n+    from azure.identity import DefaultAzureCredential\n+    from azure.ai.projects.models import FunctionTool\n+\n+\n+    from .foundry_agent_tool_adapter import FoundryAgentToolAdapter\n+\n+    FOUNDRY_AVAILABLE = True\n+except ImportError:\n+    FOUNDRY_AVAILABLE = False\n+\n+\n+class FoundryAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for Foundry Assistants\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _foundry_client: \"FoundryClient\" = PrivateAttr()\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _active_thread_id: Optional[str] = PrivateAttr(default=None)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+    _tool_adapter: \"FoundryAgentToolAdapter\" = PrivateAttr()\n+    _converter_adapter: FoundryConverterAdapter = PrivateAttr()\n+    _converted_tools: Optional[FunctionTool] = PrivateAttr(default=None)\n+\n+    def __init__(\n+        self,\n+        model: str = \"gpt-4.1-mini\",\n+        tools: Optional[List[BaseTool]] = None,\n+        agent_config: Optional[dict] = None,\n+        **kwargs,\n+    ):\n+        if not FOUNDRY_AVAILABLE:\n+            raise ImportError(\n+                \"Foundry Agent Dependencies are not installed. Please install it using `uv pip install azure-ai-projects azure-identity`\"\n+            )\n+        else:\n+            role = kwargs.pop(\"role\", None)\n+            goal = kwargs.pop(\"goal\", None)\n+            backstory = kwargs.pop(\"backstory\", None)\n+            super().__init__(\n+                role=role,\n+                goal=goal,\n+                backstory=backstory,\n+                tools=tools,\n+                agent_config=agent_config,\n+                **kwargs,\n+            )\n+            self._tool_adapter = FoundryAgentToolAdapter(tools=tools)\n+            self.llm = model\n+            self._converter_adapter = FoundryConverterAdapter(self)\n+\n+    def _build_system_prompt(self) -> str:\n+        \"\"\"Build a system prompt for the Foundry agent.\"\"\"\n+        base_prompt = f\"\"\"\n+            You are {self.role}.\n+        \n+            Your goal is: {self.goal}\n+\n+            Your backstory: {self.backstory}\n+\n+            When working on tasks, think step-by-step and use the available tools when necessary.\n+        \"\"\"\n+        return self._converter_adapter.enhance_system_prompt(base_prompt)\n+\n+    def execute_task(\n+        self,\n+        task: Any,\n+        context: Optional[str] = None,\n+        tools: Optional[List[BaseTool]] = None,\n+    ) -> str:\n+        \"\"\"Execute a task using the Foundry Assistant (automatic mode)\"\"\"\n+        self._converter_adapter.configure_structured_output(task)\n+        self.create_agent_executor(tools)\n+\n+        task_prompt = task.prompt()\n+        if context:\n+            task_prompt = self.i18n.slice(\"task_with_context\").format(\n+                task=task_prompt, context=context\n+            )\n+\n+        crewai_event_bus.emit(\n+            self,\n+            event=AgentExecutionStartedEvent(\n+                agent=self,\n+                tools=self.tools,\n+                task_prompt=task_prompt,\n+                task=task,\n+            ),\n+        )\n+\n+        try:\n+            self._foundry_client.agents.create_message(\n+                thread_id=self._active_thread_id,\n+                role=\"user\",\n+                content=task_prompt,\n+            )\n+\n+            self._foundry_client.agents.create_and_process_run(\n+                thread_id=self._active_thread_id,\n+                agent_id=self._foundry_agent_id\n+            )\n+\n+            messages = self._foundry_client.agents.list_messages(thread_id=self._active_thread_id)\n+            final_answer = messages.data[0].content[0]['text']['value']\n+\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionCompletedEvent(\n+                    agent=self, task=task, output=final_answer\n+                ),\n+            )\n+            return final_answer\n+\n+        except Exception as e:\n+            self._logger.log(\"error\", f\"Error executing Foundry task: {str(e)}\")\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(agent=self, task=task, error=str(e)),\n+            )\n+            raise\n+\n+\n+    def create_agent_executor(self, tools: Optional[List[BaseTool]] = None) -> None:\n+        self.configure_tools(tools)\n+        self._foundry_client = FoundryClient.from_connection_string(\n+            credential=DefaultAzureCredential(),\n+            conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],",
        "comment_created_at": "2025-06-09T12:55:25+00:00",
        "comment_author": "lucasgomide",
        "comment_body": "What about requiring this env var during Agent initialization? Logging a clear error message could make the issue much easier to debug",
        "pr_file_module": null
      },
      {
        "comment_id": "2136074112",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 2852,
        "pr_file": "src/crewai/agents/agent_adapters/foundry_agents/foundry_adapter.py",
        "discussion_id": "2135671716",
        "commented_code": "@@ -0,0 +1,184 @@\n+from typing import Any, List, Optional\n+import os\n+import time\n+import json\n+from pydantic import Field, PrivateAttr\n+\n+from crewai.agents.agent_adapters.base_agent_adapter import BaseAgentAdapter\n+from crewai.agents.agent_adapters.foundry_agents.structured_output_converter import (\n+    FoundryConverterAdapter,\n+)\n+from crewai.agents.agent_builder.base_agent import BaseAgent\n+from crewai.tools import BaseTool\n+from crewai.tools.agent_tools.agent_tools import AgentTools\n+from crewai.utilities import Logger\n+from crewai.utilities.events import crewai_event_bus\n+from crewai.utilities.events.agent_events import (\n+    AgentExecutionCompletedEvent,\n+    AgentExecutionErrorEvent,\n+    AgentExecutionStartedEvent,\n+)\n+\n+try:\n+    from azure.ai.projects import AIProjectClient as FoundryClient\n+    from azure.ai.projects.models import MessageTextContent\n+    from azure.identity import DefaultAzureCredential\n+    from azure.ai.projects.models import FunctionTool\n+\n+\n+    from .foundry_agent_tool_adapter import FoundryAgentToolAdapter\n+\n+    FOUNDRY_AVAILABLE = True\n+except ImportError:\n+    FOUNDRY_AVAILABLE = False\n+\n+\n+class FoundryAgentAdapter(BaseAgentAdapter):\n+    \"\"\"Adapter for Foundry Assistants\"\"\"\n+\n+    model_config = {\"arbitrary_types_allowed\": True}\n+\n+    _foundry_client: \"FoundryClient\" = PrivateAttr()\n+    _logger: Logger = PrivateAttr(default_factory=lambda: Logger())\n+    _active_thread_id: Optional[str] = PrivateAttr(default=None)\n+    function_calling_llm: Any = Field(default=None)\n+    step_callback: Any = Field(default=None)\n+    _tool_adapter: \"FoundryAgentToolAdapter\" = PrivateAttr()\n+    _converter_adapter: FoundryConverterAdapter = PrivateAttr()\n+    _converted_tools: Optional[FunctionTool] = PrivateAttr(default=None)\n+\n+    def __init__(\n+        self,\n+        model: str = \"gpt-4.1-mini\",\n+        tools: Optional[List[BaseTool]] = None,\n+        agent_config: Optional[dict] = None,\n+        **kwargs,\n+    ):\n+        if not FOUNDRY_AVAILABLE:\n+            raise ImportError(\n+                \"Foundry Agent Dependencies are not installed. Please install it using `uv pip install azure-ai-projects azure-identity`\"\n+            )\n+        else:\n+            role = kwargs.pop(\"role\", None)\n+            goal = kwargs.pop(\"goal\", None)\n+            backstory = kwargs.pop(\"backstory\", None)\n+            super().__init__(\n+                role=role,\n+                goal=goal,\n+                backstory=backstory,\n+                tools=tools,\n+                agent_config=agent_config,\n+                **kwargs,\n+            )\n+            self._tool_adapter = FoundryAgentToolAdapter(tools=tools)\n+            self.llm = model\n+            self._converter_adapter = FoundryConverterAdapter(self)\n+\n+    def _build_system_prompt(self) -> str:\n+        \"\"\"Build a system prompt for the Foundry agent.\"\"\"\n+        base_prompt = f\"\"\"\n+            You are {self.role}.\n+        \n+            Your goal is: {self.goal}\n+\n+            Your backstory: {self.backstory}\n+\n+            When working on tasks, think step-by-step and use the available tools when necessary.\n+        \"\"\"\n+        return self._converter_adapter.enhance_system_prompt(base_prompt)\n+\n+    def execute_task(\n+        self,\n+        task: Any,\n+        context: Optional[str] = None,\n+        tools: Optional[List[BaseTool]] = None,\n+    ) -> str:\n+        \"\"\"Execute a task using the Foundry Assistant (automatic mode)\"\"\"\n+        self._converter_adapter.configure_structured_output(task)\n+        self.create_agent_executor(tools)\n+\n+        task_prompt = task.prompt()\n+        if context:\n+            task_prompt = self.i18n.slice(\"task_with_context\").format(\n+                task=task_prompt, context=context\n+            )\n+\n+        crewai_event_bus.emit(\n+            self,\n+            event=AgentExecutionStartedEvent(\n+                agent=self,\n+                tools=self.tools,\n+                task_prompt=task_prompt,\n+                task=task,\n+            ),\n+        )\n+\n+        try:\n+            self._foundry_client.agents.create_message(\n+                thread_id=self._active_thread_id,\n+                role=\"user\",\n+                content=task_prompt,\n+            )\n+\n+            self._foundry_client.agents.create_and_process_run(\n+                thread_id=self._active_thread_id,\n+                agent_id=self._foundry_agent_id\n+            )\n+\n+            messages = self._foundry_client.agents.list_messages(thread_id=self._active_thread_id)\n+            final_answer = messages.data[0].content[0]['text']['value']\n+\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionCompletedEvent(\n+                    agent=self, task=task, output=final_answer\n+                ),\n+            )\n+            return final_answer\n+\n+        except Exception as e:\n+            self._logger.log(\"error\", f\"Error executing Foundry task: {str(e)}\")\n+            crewai_event_bus.emit(\n+                self,\n+                event=AgentExecutionErrorEvent(agent=self, task=task, error=str(e)),\n+            )\n+            raise\n+\n+\n+    def create_agent_executor(self, tools: Optional[List[BaseTool]] = None) -> None:\n+        self.configure_tools(tools)\n+        self._foundry_client = FoundryClient.from_connection_string(\n+            credential=DefaultAzureCredential(),\n+            conn_str=os.environ[\"PROJECT_CONNECTION_STRING\"],",
        "comment_created_at": "2025-06-09T16:51:37+00:00",
        "comment_author": "bassmang",
        "comment_body": "added to imports",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1764474532",
    "pr_number": 1334,
    "pr_file": "src/crewai/tools/tool_usage.py",
    "created_at": "2024-09-18T06:30:01+00:00",
    "commented_code": "from crewai.utilities import I18N, Converter, ConverterError, Printer\n \n agentops = None\n-if os.environ.get(\"AGENTOPS_API_KEY\"):",
    "repo_full_name": "crewAIInc/crewAI",
    "discussion_comments": [
      {
        "comment_id": "1764474532",
        "repo_full_name": "crewAIInc/crewAI",
        "pr_number": 1334,
        "pr_file": "src/crewai/tools/tool_usage.py",
        "discussion_id": "1764474532",
        "commented_code": "@@ -11,11 +11,10 @@\n from crewai.utilities import I18N, Converter, ConverterError, Printer\n \n agentops = None\n-if os.environ.get(\"AGENTOPS_API_KEY\"):",
        "comment_created_at": "2024-09-18T06:30:01+00:00",
        "comment_author": "joaomdmoura",
        "comment_body": "shouldn't we keep this? given that if the person haven't set up a key we probably don't was to try import the library anyway?",
        "pr_file_module": null
      }
    ]
  }
]