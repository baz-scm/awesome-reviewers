[
  {
    "discussion_id": "706382798",
    "pr_number": 18054,
    "pr_file": "packages/server/lib/modes/interactive-ct.js",
    "created_at": "2021-09-10T18:19:43+00:00",
    "commented_code": "-const serverCt = require('@packages/server-ct')\n+const chalk = require('chalk')\n+const human = require('human-interval')\n+const _ = require('lodash')\n+const Debug = require('debug')\n+\n const { getBrowsers } = require('../browsers/utils')\n const errors = require('../errors')\n+const browsers = require('../browsers')\n+const { openProject } = require('../open_project')\n+const Updater = require('../updater')\n+\n+const debug = Debug('cypress:server:interactive-ct')\n+\n+const registerCheckForUpdates = () => {\n+  const checkForUpdates = (initialLaunch) => {\n+    Updater.check({\n+      initialLaunch,\n+      testingType: 'component',\n+      onNewVersion: _.noop,\n+      onNoNewVersion: _.noop,\n+    })\n+  }\n+\n+  setInterval(() => checkForUpdates(false), human('60 minutes'))\n+  checkForUpdates(true)\n+}\n+\n+// Partial because there are probably other options that are not included in this type.\n+// projectRoot: string\n+// args: LaunchArgs\n+const start = async (projectRoot, args) => {\n+  if (process.env['CYPRESS_INTERNAL_ENV'] === 'production') {\n+    registerCheckForUpdates()\n+  }\n+\n+  debug('start server-ct on ', projectRoot)\n+\n+  // add chrome as a default browser if none has been specified\n+  return browsers.ensureAndGetByNameOrPath(args.browser)\n+  .then((browser) => {\n+    const spec = {\n+      name: 'All Specs',\n+      absolute: '__all',\n+      relative: '__all',\n+      specType: 'component',\n+    }\n+\n+    const options = {\n+      browsers: [browser],\n+    }\n+\n+    debug('create project')\n+\n+    return openProject.create(projectRoot, args, options)\n+    .then((project) => {\n+      debug('launch project')\n+\n+      return openProject.launch(browser, spec, {\n+        onBrowserClose: () => {\n+          /* eslint-disable no-console */\n+          console.log(chalk.blue('BROWSER EXITED SAFELY'))\n+          console.log(chalk.blue('COMPONENT TESTING STOPPED'))",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "706382798",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18054,
        "pr_file": "packages/server/lib/modes/interactive-ct.js",
        "discussion_id": "706382798",
        "commented_code": "@@ -1,6 +1,71 @@\n-const serverCt = require('@packages/server-ct')\n+const chalk = require('chalk')\n+const human = require('human-interval')\n+const _ = require('lodash')\n+const Debug = require('debug')\n+\n const { getBrowsers } = require('../browsers/utils')\n const errors = require('../errors')\n+const browsers = require('../browsers')\n+const { openProject } = require('../open_project')\n+const Updater = require('../updater')\n+\n+const debug = Debug('cypress:server:interactive-ct')\n+\n+const registerCheckForUpdates = () => {\n+  const checkForUpdates = (initialLaunch) => {\n+    Updater.check({\n+      initialLaunch,\n+      testingType: 'component',\n+      onNewVersion: _.noop,\n+      onNoNewVersion: _.noop,\n+    })\n+  }\n+\n+  setInterval(() => checkForUpdates(false), human('60 minutes'))\n+  checkForUpdates(true)\n+}\n+\n+// Partial because there are probably other options that are not included in this type.\n+// projectRoot: string\n+// args: LaunchArgs\n+const start = async (projectRoot, args) => {\n+  if (process.env['CYPRESS_INTERNAL_ENV'] === 'production') {\n+    registerCheckForUpdates()\n+  }\n+\n+  debug('start server-ct on ', projectRoot)\n+\n+  // add chrome as a default browser if none has been specified\n+  return browsers.ensureAndGetByNameOrPath(args.browser)\n+  .then((browser) => {\n+    const spec = {\n+      name: 'All Specs',\n+      absolute: '__all',\n+      relative: '__all',\n+      specType: 'component',\n+    }\n+\n+    const options = {\n+      browsers: [browser],\n+    }\n+\n+    debug('create project')\n+\n+    return openProject.create(projectRoot, args, options)\n+    .then((project) => {\n+      debug('launch project')\n+\n+      return openProject.launch(browser, spec, {\n+        onBrowserClose: () => {\n+          /* eslint-disable no-console */\n+          console.log(chalk.blue('BROWSER EXITED SAFELY'))\n+          console.log(chalk.blue('COMPONENT TESTING STOPPED'))",
        "comment_created_at": "2021-09-10T18:19:43+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "Should these logs be displayed to the user or should they be `debug` logs?",
        "pr_file_module": null
      },
      {
        "comment_id": "706539266",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18054,
        "pr_file": "packages/server/lib/modes/interactive-ct.js",
        "discussion_id": "706382798",
        "commented_code": "@@ -1,6 +1,71 @@\n-const serverCt = require('@packages/server-ct')\n+const chalk = require('chalk')\n+const human = require('human-interval')\n+const _ = require('lodash')\n+const Debug = require('debug')\n+\n const { getBrowsers } = require('../browsers/utils')\n const errors = require('../errors')\n+const browsers = require('../browsers')\n+const { openProject } = require('../open_project')\n+const Updater = require('../updater')\n+\n+const debug = Debug('cypress:server:interactive-ct')\n+\n+const registerCheckForUpdates = () => {\n+  const checkForUpdates = (initialLaunch) => {\n+    Updater.check({\n+      initialLaunch,\n+      testingType: 'component',\n+      onNewVersion: _.noop,\n+      onNoNewVersion: _.noop,\n+    })\n+  }\n+\n+  setInterval(() => checkForUpdates(false), human('60 minutes'))\n+  checkForUpdates(true)\n+}\n+\n+// Partial because there are probably other options that are not included in this type.\n+// projectRoot: string\n+// args: LaunchArgs\n+const start = async (projectRoot, args) => {\n+  if (process.env['CYPRESS_INTERNAL_ENV'] === 'production') {\n+    registerCheckForUpdates()\n+  }\n+\n+  debug('start server-ct on ', projectRoot)\n+\n+  // add chrome as a default browser if none has been specified\n+  return browsers.ensureAndGetByNameOrPath(args.browser)\n+  .then((browser) => {\n+    const spec = {\n+      name: 'All Specs',\n+      absolute: '__all',\n+      relative: '__all',\n+      specType: 'component',\n+    }\n+\n+    const options = {\n+      browsers: [browser],\n+    }\n+\n+    debug('create project')\n+\n+    return openProject.create(projectRoot, args, options)\n+    .then((project) => {\n+      debug('launch project')\n+\n+      return openProject.launch(browser, spec, {\n+        onBrowserClose: () => {\n+          /* eslint-disable no-console */\n+          console.log(chalk.blue('BROWSER EXITED SAFELY'))\n+          console.log(chalk.blue('COMPONENT TESTING STOPPED'))",
        "comment_created_at": "2021-09-11T01:36:28+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "This PR was purely a \"move the things around\" PR, so I guess whatever is there was the original intention. \r\n\r\nThat said, I'd say `debug` is probably a better fit for this. I will make this change.",
        "pr_file_module": null
      },
      {
        "comment_id": "706539527",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18054,
        "pr_file": "packages/server/lib/modes/interactive-ct.js",
        "discussion_id": "706382798",
        "commented_code": "@@ -1,6 +1,71 @@\n-const serverCt = require('@packages/server-ct')\n+const chalk = require('chalk')\n+const human = require('human-interval')\n+const _ = require('lodash')\n+const Debug = require('debug')\n+\n const { getBrowsers } = require('../browsers/utils')\n const errors = require('../errors')\n+const browsers = require('../browsers')\n+const { openProject } = require('../open_project')\n+const Updater = require('../updater')\n+\n+const debug = Debug('cypress:server:interactive-ct')\n+\n+const registerCheckForUpdates = () => {\n+  const checkForUpdates = (initialLaunch) => {\n+    Updater.check({\n+      initialLaunch,\n+      testingType: 'component',\n+      onNewVersion: _.noop,\n+      onNoNewVersion: _.noop,\n+    })\n+  }\n+\n+  setInterval(() => checkForUpdates(false), human('60 minutes'))\n+  checkForUpdates(true)\n+}\n+\n+// Partial because there are probably other options that are not included in this type.\n+// projectRoot: string\n+// args: LaunchArgs\n+const start = async (projectRoot, args) => {\n+  if (process.env['CYPRESS_INTERNAL_ENV'] === 'production') {\n+    registerCheckForUpdates()\n+  }\n+\n+  debug('start server-ct on ', projectRoot)\n+\n+  // add chrome as a default browser if none has been specified\n+  return browsers.ensureAndGetByNameOrPath(args.browser)\n+  .then((browser) => {\n+    const spec = {\n+      name: 'All Specs',\n+      absolute: '__all',\n+      relative: '__all',\n+      specType: 'component',\n+    }\n+\n+    const options = {\n+      browsers: [browser],\n+    }\n+\n+    debug('create project')\n+\n+    return openProject.create(projectRoot, args, options)\n+    .then((project) => {\n+      debug('launch project')\n+\n+      return openProject.launch(browser, spec, {\n+        onBrowserClose: () => {\n+          /* eslint-disable no-console */\n+          console.log(chalk.blue('BROWSER EXITED SAFELY'))\n+          console.log(chalk.blue('COMPONENT TESTING STOPPED'))",
        "comment_created_at": "2021-09-11T01:38:26+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I did it: https://github.com/cypress-io/cypress/pull/18054/commits/599e113c0bd93f4c592e73a3ffd709040f0be14d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "517447587",
    "pr_number": 9081,
    "pr_file": "packages/driver/src/cypress/stack_utils.js",
    "created_at": "2020-11-04T15:55:41+00:00",
    "commented_code": "const sourceDetails = getSourceDetails(generatedDetails)\n   const originalFile = sourceDetails.file\n+\n+  if (!originalFile) {\n+    // this is an edge case: could not parse the stack trace\n+    // let's not warn about it, but at least allow the user\n+    // to see the original error by being defensive about it\n+    /* eslint-disable-next-line no-console */\n+    console.warn(`Could not get the original source file from line \"${line}\"`)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "517447587",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 9081,
        "pr_file": "packages/driver/src/cypress/stack_utils.js",
        "discussion_id": "517447587",
        "commented_code": "@@ -216,14 +220,23 @@ const getSourceDetailsForLine = (projectRoot, line) => {\n \n   const sourceDetails = getSourceDetails(generatedDetails)\n   const originalFile = sourceDetails.file\n+\n+  if (!originalFile) {\n+    // this is an edge case: could not parse the stack trace\n+    // let's not warn about it, but at least allow the user\n+    // to see the original error by being defensive about it\n+    /* eslint-disable-next-line no-console */\n+    console.warn(`Could not get the original source file from line \"${line}\"`)",
        "comment_created_at": "2020-11-04T15:55:41+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "I don't think we need to output this to the console. There's nothing the user can do about it, so it's just adding noise to the console output.",
        "pr_file_module": null
      },
      {
        "comment_id": "517448305",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 9081,
        "pr_file": "packages/driver/src/cypress/stack_utils.js",
        "discussion_id": "517447587",
        "commented_code": "@@ -216,14 +220,23 @@ const getSourceDetailsForLine = (projectRoot, line) => {\n \n   const sourceDetails = getSourceDetails(generatedDetails)\n   const originalFile = sourceDetails.file\n+\n+  if (!originalFile) {\n+    // this is an edge case: could not parse the stack trace\n+    // let's not warn about it, but at least allow the user\n+    // to see the original error by being defensive about it\n+    /* eslint-disable-next-line no-console */\n+    console.warn(`Could not get the original source file from line \"${line}\"`)",
        "comment_created_at": "2020-11-04T15:56:38+00:00",
        "comment_author": "bahmutov",
        "comment_body": "it is so much easier for the user to report when complaining that their stack trace is missing :) But sure, I can remove it. By the way, we never use `debug` clientside really",
        "pr_file_module": null
      },
      {
        "comment_id": "517452325",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 9081,
        "pr_file": "packages/driver/src/cypress/stack_utils.js",
        "discussion_id": "517447587",
        "commented_code": "@@ -216,14 +220,23 @@ const getSourceDetailsForLine = (projectRoot, line) => {\n \n   const sourceDetails = getSourceDetails(generatedDetails)\n   const originalFile = sourceDetails.file\n+\n+  if (!originalFile) {\n+    // this is an edge case: could not parse the stack trace\n+    // let's not warn about it, but at least allow the user\n+    // to see the original error by being defensive about it\n+    /* eslint-disable-next-line no-console */\n+    console.warn(`Could not get the original source file from line \"${line}\"`)",
        "comment_created_at": "2020-11-04T16:02:02+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "Their stack trace won't be missing. The only consequence is that any lines we can't get the source file for won't be open-able by IDE.",
        "pr_file_module": null
      },
      {
        "comment_id": "518205584",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 9081,
        "pr_file": "packages/driver/src/cypress/stack_utils.js",
        "discussion_id": "517447587",
        "commented_code": "@@ -216,14 +220,23 @@ const getSourceDetailsForLine = (projectRoot, line) => {\n \n   const sourceDetails = getSourceDetails(generatedDetails)\n   const originalFile = sourceDetails.file\n+\n+  if (!originalFile) {\n+    // this is an edge case: could not parse the stack trace\n+    // let's not warn about it, but at least allow the user\n+    // to see the original error by being defensive about it\n+    /* eslint-disable-next-line no-console */\n+    console.warn(`Could not get the original source file from line \"${line}\"`)",
        "comment_created_at": "2020-11-05T16:55:47+00:00",
        "comment_author": "bahmutov",
        "comment_body": "updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "727141786",
    "pr_number": 18422,
    "pr_file": "cli/lib/cli.js",
    "created_at": "2021-10-12T13:33:07+00:00",
    "commented_code": ".option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      let msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+      Use \\`open --ct\\` or \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "727141786",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/lib/cli.js",
        "discussion_id": "727141786",
        "commented_code": "@@ -431,6 +431,16 @@ module.exports = {\n     .option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      let msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+      Use \\`open --ct\\` or \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
        "comment_created_at": "2021-10-12T13:33:07+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "```suggestion\r\n      let msg = `\r\n      ${logSymbols.warning} Warning: `cypress open-ct` is deprecated and will be removed in a future release.\r\n\r\n      Use \\`cypress open --ct\\` or \\`cypress open --component\\` instead.\r\n      `\r\n\r\n      logger.warn()\r\n      logger.warn(stripIndent(msg))\r\n      logger.warn()\r\n```\r\n\r\nIt was bugging me that the vertical spacing wasn't showing up, then I realized `logger.log()` won't log unless the log-level is increased beyond `warn`. I figure the formatting of the message shouldn't be reliant on the log-level.",
        "pr_file_module": null
      },
      {
        "comment_id": "727162951",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/lib/cli.js",
        "discussion_id": "727141786",
        "commented_code": "@@ -431,6 +431,16 @@ module.exports = {\n     .option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      let msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+      Use \\`open --ct\\` or \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
        "comment_created_at": "2021-10-12T13:55:27+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "Why add three logs to achieve the vertical spacing? Does the logger ignore any `\\n` template literals that are added to the string?\r\n\r\nnvm: looks like a limitation/implementation detail here: https://www.npmjs.com/package/common-tags#using-tags-on-regular-string-literals",
        "pr_file_module": null
      },
      {
        "comment_id": "727240579",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/lib/cli.js",
        "discussion_id": "727141786",
        "commented_code": "@@ -431,6 +431,16 @@ module.exports = {\n     .option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      let msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+      Use \\`open --ct\\` or \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
        "comment_created_at": "2021-10-12T15:13:32+00:00",
        "comment_author": "cowboy",
        "comment_body": "TIL about the `common-tags` npm module, seems like it might be better than the un-indent module i'm currently using!",
        "pr_file_module": null
      },
      {
        "comment_id": "727277145",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/lib/cli.js",
        "discussion_id": "727141786",
        "commented_code": "@@ -431,6 +431,16 @@ module.exports = {\n     .option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      let msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+      Use \\`open --ct\\` or \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
        "comment_created_at": "2021-10-12T15:52:45+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "I hadn't looked into the why at all, just copied the pattern from elsewhere in the file. Good there's a reason for it, I suppose!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "727424183",
    "pr_number": 18422,
    "pr_file": "cli/lib/cli.js",
    "created_at": "2021-10-12T19:20:23+00:00",
    "commented_code": ".option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      const msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+\n+      Use \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "727424183",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/lib/cli.js",
        "discussion_id": "727424183",
        "commented_code": "@@ -431,6 +431,17 @@ module.exports = {\n     .option('--dev', text('dev'), coerceFalse)\n     .action((opts) => {\n       debug('opening Cypress')\n+\n+      const msg = `\n+      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\n+\n+      Use \\`open --component\\` instead.\n+      `\n+\n+      logger.log()\n+      logger.warn(stripIndent(msg))\n+      logger.log()",
        "comment_created_at": "2021-10-12T19:20:23+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "```suggestion\r\n      ${logSymbols.warning} Warning: open-ct is deprecated and will be removed in a future release.\r\n\r\n      Use \\`cypress open --component\\` instead.\r\n      `\r\n\r\n      logger.warn()\r\n      logger.warn(stripIndent(msg))\r\n      logger.warn()\r\n```",
        "pr_file_module": null
      }
    ]
  }
]