[
  {
    "discussion_id": "1123167205",
    "pr_number": 25738,
    "pr_file": "cli/CHANGELOG.md",
    "created_at": "2023-03-02T14:17:17+00:00",
    "commented_code": "**Breaking Changes:**\n \n+- The [`.should()` and `.and()`](/api/commands/should) assertions are now queries. This means that they are fully retryable, and it is safe to chain further commands that interact with the DOM after them. Assertions are also now re-run as part of aliases. Addresses [#25134](https://github.com/cypress-io/cypress/issues/25134) and [#25491](https://github.com/cypress-io/cypress/issues/25491). Addressed in [#25738](https://github.com/cypress-io/cypress/pull/25738).",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1123167205",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "cli/CHANGELOG.md",
        "discussion_id": "1123167205",
        "commented_code": "@@ -5,6 +5,8 @@ _Released 03/1/2023 (PENDING)_\n \n **Breaking Changes:**\n \n+- The [`.should()` and `.and()`](/api/commands/should) assertions are now queries. This means that they are fully retryable, and it is safe to chain further commands that interact with the DOM after them. Assertions are also now re-run as part of aliases. Addresses [#25134](https://github.com/cypress-io/cypress/issues/25134) and [#25491](https://github.com/cypress-io/cypress/issues/25491). Addressed in [#25738](https://github.com/cypress-io/cypress/pull/25738).",
        "comment_created_at": "2023-03-02T14:17:17+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "```suggestion\r\n- The [`.should()`](https://docs.cypress.io/api/commands/should) and [`.and()`](/api/commands/and) assertions are now queries. This means that they are fully retryable, and it is safe to chain further commands that interact with the DOM after them. Assertions are also now re-run as part of aliases. Addresses [#25134](https://github.com/cypress-io/cypress/issues/25134) and [#25491](https://github.com/cypress-io/cypress/issues/25491).\r\n```\r\n\r\n> This means that they are fully retryable, and it is safe to chain further commands that interact with the DOM after them. \r\n\r\nI don't know what this means and if users will either since assertions were documented such that they retried to pass.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "605671700",
    "pr_number": 15742,
    "pr_file": "npm/react/docs/recipes.md",
    "created_at": "2021-04-01T13:47:17+00:00",
    "commented_code": "```\n \n See [examples/rollup](examples/rollup) folder for full example.\n+\n+## Usage\n+\n+### Changing props\n+\n+Many components have some statefulness, whether explicitly through `useState`, or implicitly through `useEffect`. Therefore during testing it is useful to keep the component mounted, but change the props being passed to it in order to preserve its state.\n+\n+We recommend building a \"wrapper\" component with the necessary DOM controls to push new props to your component under test.",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "605671700",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15742,
        "pr_file": "npm/react/docs/recipes.md",
        "discussion_id": "605671700",
        "commented_code": "@@ -158,3 +164,83 @@ replace({ 'process.env.NODE_ENV': JSON.stringify('development') }),\n ```\n \n See [examples/rollup](examples/rollup) folder for full example.\n+\n+## Usage\n+\n+### Changing props\n+\n+Many components have some statefulness, whether explicitly through `useState`, or implicitly through `useEffect`. Therefore during testing it is useful to keep the component mounted, but change the props being passed to it in order to preserve its state.\n+\n+We recommend building a \"wrapper\" component with the necessary DOM controls to push new props to your component under test.",
        "comment_created_at": "2021-04-01T13:47:17+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "```suggestion\r\nWe recommend building a \"wrapper\" component, that will be close to how your users will use this component. And add DOM controls that will change props during the test. \r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2180502494",
    "pr_number": 31408,
    "pr_file": "cli/CHANGELOG.md",
    "created_at": "2025-07-02T16:32:15+00:00",
    "commented_code": "<!-- See the ../guides/writing-the-cypress-changelog.md for details on writing the changelog. -->\n+## 15.0.0\n+\n+_Released 07/15/2025 (PENDING)_\n+\n+**Breaking Changes:**\n+\n+- Removed support for Node.js 18 and Node.js 23. Addresses [#31302](https://github.com/cypress-io/cypress/issues/31302).\n+- Removed support for [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol) with the [Firefox](https://www.mozilla.org/firefox/) browser. Addresses [#31189](https://github.com/cypress-io/cypress/issues/31189).\n+- Removed support of the deprecated 3 argument signature of `cy.stub`. Use `cy.stub(object, name).callsFake(fn)` instead. Addresses [#31346](https://github.com/cypress-io/cypress/issues/31346).\n+- `@cypress/webpack-dev-server` and `@cypress/webpack-preprocessor` no longer support `webpack` version 4. Addresses [#31344](https://github.com/cypress-io/cypress/issues/31344). If you still need to use `webpack` version 4, please see our [migration guide](https://docs.cypress.io/app/references/migration-guide#Migrating-to-Cypress-150).\n+- `@cypress/webpack-dev-server` no longer supports `webpack-dev-server` version 4. Addresses [#31605](https://github.com/cypress-io/cypress/issues/31605). If you still need to use `webpack-dev-server` version 4, please see our [migration guide](https://docs.cypress.io/app/references/migration-guide#Migrating-to-Cypress-150).\n+- In order to better align with best practices, `@cypress/webpack-batteries-included-preprocessor` no longer includes certain browser built-ins that were automatically provided by Webpack 4. The removed built-ins are `assert`, `constants`, `crypto`, `domain`, `events`, `http`, `https`, `punycode`, `querystring`, `string_decoder`, `sys`, `timers`, `tty`, `url`, `util`, `vm`, and `zlib`. However, we know that certain built-ins are popular, given that many users have files that are shared between their Cypress tests and node context. Because of this, `@cypress/webpack-batteries-included-preprocessor` will ship with built-in support for `buffer`, `path`, `process`, `os`, and `stream`. If there is a built-in that isn't supported be default and you need to add support, please refer to the Webpack [resolve.fallback](https://webpack.js.org/configuration/resolve/#resolvefallback) documentation and the [`@cypress/webpack-batteries-included-preprocessor` README](../npm/webpack-batteries-included-preprocessor/README.md). Addresses [#31039](https://github.com/cypress-io/cypress/issues/31039).\n+- The application under test's `pagehide` event in Chromium browsers will no longer trigger Cypress's `window:unload` event. Addressed in [#31853](https://github.com/cypress-io/cypress/pull/31853).\n+- The `Cypress.SelectorPlayground` API has been renamed to `Cypress.ElementSelector`. This API was renamed to accommodate its use for defining `selectorPriority` in Cypress Studio and our future [`cy.prompt` release](https://on.cypress.io/cy-prompt-early-access?utm_source=docs&utm_medium=app-changelog&utm_content=cy-prompt-release). Addresses [#31801](https://github.com/cypress-io/cypress/issues/31801). Addressed in [#31889](https://github.com/cypress-io/cypress/pull/31889).\n+- **Component Testing breaking changes:**\n+  - Removed support for Angular 17. The minimum supported version is now `18.0.0`. Addresses [#31303](https://github.com/cypress-io/cypress/issues/31303).\n+  - `@cypress/angular` now requires a minimum of `zone.js` `0.14.0`. Addresses [#31582](https://github.com/cypress-io/cypress/issues/31582).\n+  - The Cypress configuration wizard for Component Testing supports TypeScript 5.0 or greater. Addresses [#31187](https://github.com/cypress-io/cypress/issues/31187).\n+\n+**Features:**\n+\n+- [`cy.url()`](https://docs.cypress.io/api/commands/url), [`cy.hash()`](https://docs.cypress.io/api/commands/hash), [`cy.go()`](https://docs.cypress.io/api/commands/go), [`cy.reload()`](https://docs.cypress.io/api/commands/reload), [`cy.title()`](https://docs.cypress.io/api/commands/title), and [`cy.location()`](https://docs.cypress.io/api/commands/location) now use the automation client (CDP for Chromium browsers and WebDriver BiDi for Firefox) to return the appropriate values from the commands to the user instead of the window object. This is to avoid cross origin issues with [`cy.origin()`](https://docs.cypress.io/api/commands/origin) so these commands can be invoked anywhere inside a Cypress test without having to worry about origin access issues. Experimental Webkit still will use the window object to retrieve these values. Also, [`cy.window()`](https://docs.cypress.io/api/commands/window) will always return the current window object, regardless of origin restrictions. Not every property from the window object will be accessible depending on the origin context. Addresses [#31196](https://github.com/cypress-io/cypress/issues/31196).",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "2180502494",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 31408,
        "pr_file": "cli/CHANGELOG.md",
        "discussion_id": "2180502494",
        "commented_code": "@@ -1,4 +1,34 @@\n <!-- See the ../guides/writing-the-cypress-changelog.md for details on writing the changelog. -->\n+## 15.0.0\n+\n+_Released 07/15/2025 (PENDING)_\n+\n+**Breaking Changes:**\n+\n+- Removed support for Node.js 18 and Node.js 23. Addresses [#31302](https://github.com/cypress-io/cypress/issues/31302).\n+- Removed support for [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol) with the [Firefox](https://www.mozilla.org/firefox/) browser. Addresses [#31189](https://github.com/cypress-io/cypress/issues/31189).\n+- Removed support of the deprecated 3 argument signature of `cy.stub`. Use `cy.stub(object, name).callsFake(fn)` instead. Addresses [#31346](https://github.com/cypress-io/cypress/issues/31346).\n+- `@cypress/webpack-dev-server` and `@cypress/webpack-preprocessor` no longer support `webpack` version 4. Addresses [#31344](https://github.com/cypress-io/cypress/issues/31344). If you still need to use `webpack` version 4, please see our [migration guide](https://docs.cypress.io/app/references/migration-guide#Migrating-to-Cypress-150).\n+- `@cypress/webpack-dev-server` no longer supports `webpack-dev-server` version 4. Addresses [#31605](https://github.com/cypress-io/cypress/issues/31605). If you still need to use `webpack-dev-server` version 4, please see our [migration guide](https://docs.cypress.io/app/references/migration-guide#Migrating-to-Cypress-150).\n+- In order to better align with best practices, `@cypress/webpack-batteries-included-preprocessor` no longer includes certain browser built-ins that were automatically provided by Webpack 4. The removed built-ins are `assert`, `constants`, `crypto`, `domain`, `events`, `http`, `https`, `punycode`, `querystring`, `string_decoder`, `sys`, `timers`, `tty`, `url`, `util`, `vm`, and `zlib`. However, we know that certain built-ins are popular, given that many users have files that are shared between their Cypress tests and node context. Because of this, `@cypress/webpack-batteries-included-preprocessor` will ship with built-in support for `buffer`, `path`, `process`, `os`, and `stream`. If there is a built-in that isn't supported be default and you need to add support, please refer to the Webpack [resolve.fallback](https://webpack.js.org/configuration/resolve/#resolvefallback) documentation and the [`@cypress/webpack-batteries-included-preprocessor` README](../npm/webpack-batteries-included-preprocessor/README.md). Addresses [#31039](https://github.com/cypress-io/cypress/issues/31039).\n+- The application under test's `pagehide` event in Chromium browsers will no longer trigger Cypress's `window:unload` event. Addressed in [#31853](https://github.com/cypress-io/cypress/pull/31853).\n+- The `Cypress.SelectorPlayground` API has been renamed to `Cypress.ElementSelector`. This API was renamed to accommodate its use for defining `selectorPriority` in Cypress Studio and our future [`cy.prompt` release](https://on.cypress.io/cy-prompt-early-access?utm_source=docs&utm_medium=app-changelog&utm_content=cy-prompt-release). Addresses [#31801](https://github.com/cypress-io/cypress/issues/31801). Addressed in [#31889](https://github.com/cypress-io/cypress/pull/31889).\n+- **Component Testing breaking changes:**\n+  - Removed support for Angular 17. The minimum supported version is now `18.0.0`. Addresses [#31303](https://github.com/cypress-io/cypress/issues/31303).\n+  - `@cypress/angular` now requires a minimum of `zone.js` `0.14.0`. Addresses [#31582](https://github.com/cypress-io/cypress/issues/31582).\n+  - The Cypress configuration wizard for Component Testing supports TypeScript 5.0 or greater. Addresses [#31187](https://github.com/cypress-io/cypress/issues/31187).\n+\n+**Features:**\n+\n+- [`cy.url()`](https://docs.cypress.io/api/commands/url), [`cy.hash()`](https://docs.cypress.io/api/commands/hash), [`cy.go()`](https://docs.cypress.io/api/commands/go), [`cy.reload()`](https://docs.cypress.io/api/commands/reload), [`cy.title()`](https://docs.cypress.io/api/commands/title), and [`cy.location()`](https://docs.cypress.io/api/commands/location) now use the automation client (CDP for Chromium browsers and WebDriver BiDi for Firefox) to return the appropriate values from the commands to the user instead of the window object. This is to avoid cross origin issues with [`cy.origin()`](https://docs.cypress.io/api/commands/origin) so these commands can be invoked anywhere inside a Cypress test without having to worry about origin access issues. Experimental Webkit still will use the window object to retrieve these values. Also, [`cy.window()`](https://docs.cypress.io/api/commands/window) will always return the current window object, regardless of origin restrictions. Not every property from the window object will be accessible depending on the origin context. Addresses [#31196](https://github.com/cypress-io/cypress/issues/31196).",
        "comment_created_at": "2025-07-02T16:32:15+00:00",
        "comment_author": "MikeMcC399",
        "comment_body": "```suggestion\r\n- [`cy.url()`](https://docs.cypress.io/api/commands/url), [`cy.hash()`](https://docs.cypress.io/api/commands/hash), [`cy.go()`](https://docs.cypress.io/api/commands/go), [`cy.reload()`](https://docs.cypress.io/api/commands/reload), [`cy.title()`](https://docs.cypress.io/api/commands/title), and [`cy.location()`](https://docs.cypress.io/api/commands/location) now use the automation client (CDP for Chromium browsers and WebDriver BiDi for Firefox) to return the appropriate values from the commands to the user instead of the window object. This is to avoid cross origin issues with [`cy.origin()`](https://docs.cypress.io/api/commands/origin) so these commands can be invoked anywhere inside a Cypress test without having to worry about origin access issues. Experimental WebKit still will use the window object to retrieve these values. Also, [`cy.window()`](https://docs.cypress.io/api/commands/window) will always return the current window object, regardless of origin restrictions. Not every property from the window object will be accessible depending on the origin context. Addresses [#31196](https://github.com/cypress-io/cypress/issues/31196).\r\n```\r\n\r\nTypo - wrong case in Webkit. Fixed in \"Experimental WebKit ...\" Reference https://webkit.org/",
        "pr_file_module": null
      }
    ]
  }
]