[
  {
    "discussion_id": "727218102",
    "pr_number": 18422,
    "pr_file": "cli/__snapshots__/cli_spec.js",
    "created_at": "2021-10-12T14:50:51+00:00",
    "commented_code": "open [options]     Opens Cypress in the interactive GUI.\n     run [options]      Runs Cypress tests from the CLI without the GUI\n     open-ct [options]  Opens Cypress component testing interactive mode.\n-    run-ct [options]   Runs all Cypress Component Testing suites\n+                       Deprecated: use \"open --ct\"\n+    run-ct [options]   Runs all Cypress component testing suites. Deprecated:\n+                       use \"run --ct\"",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "727218102",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/__snapshots__/cli_spec.js",
        "discussion_id": "727218102",
        "commented_code": "@@ -218,7 +218,9 @@ exports['cli help command shows help 1'] = `\n     open [options]     Opens Cypress in the interactive GUI.\n     run [options]      Runs Cypress tests from the CLI without the GUI\n     open-ct [options]  Opens Cypress component testing interactive mode.\n-    run-ct [options]   Runs all Cypress Component Testing suites\n+                       Deprecated: use \"open --ct\"\n+    run-ct [options]   Runs all Cypress component testing suites. Deprecated:\n+                       use \"run --ct\"",
        "comment_created_at": "2021-10-12T14:50:51+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "Looking at https://github.com/cypress-io/cypress-documentation/pull/4140, it looks like `--component` is consistently suggested in the docs.\r\n\r\nLooking at https://github.com/cypress-io/cypress/pull/18399, looks like both `--component` and `--ct` are supported. Should we provide both flap options in the deprecation suggestion? If not, I'd lean towards matching the doc suggestions of `--component`",
        "pr_file_module": null
      },
      {
        "comment_id": "727230335",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/__snapshots__/cli_spec.js",
        "discussion_id": "727218102",
        "commented_code": "@@ -218,7 +218,9 @@ exports['cli help command shows help 1'] = `\n     open [options]     Opens Cypress in the interactive GUI.\n     run [options]      Runs Cypress tests from the CLI without the GUI\n     open-ct [options]  Opens Cypress component testing interactive mode.\n-    run-ct [options]   Runs all Cypress Component Testing suites\n+                       Deprecated: use \"open --ct\"\n+    run-ct [options]   Runs all Cypress component testing suites. Deprecated:\n+                       use \"run --ct\"",
        "comment_created_at": "2021-10-12T15:02:51+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "I'm pretty sure @cowboy had thoughts on support for `--ct` in general and will have a better suggestion on what we should display to users as the default. He did not want for us to have to maintain 2 ways of running component tests in our docs - and have user guides vary on how to pass the flag. \r\n\r\nI didn't see if being as very different from other shorthand flags that we document except that this one is 2 letters instead of 1. \r\n\r\nBut we should have a consistent way that we suggest.",
        "pr_file_module": null
      },
      {
        "comment_id": "727237542",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/__snapshots__/cli_spec.js",
        "discussion_id": "727218102",
        "commented_code": "@@ -218,7 +218,9 @@ exports['cli help command shows help 1'] = `\n     open [options]     Opens Cypress in the interactive GUI.\n     run [options]      Runs Cypress tests from the CLI without the GUI\n     open-ct [options]  Opens Cypress component testing interactive mode.\n-    run-ct [options]   Runs all Cypress Component Testing suites\n+                       Deprecated: use \"open --ct\"\n+    run-ct [options]   Runs all Cypress component testing suites. Deprecated:\n+                       use \"run --ct\"",
        "comment_created_at": "2021-10-12T15:10:21+00:00",
        "comment_author": "cowboy",
        "comment_body": "Offering multiple different options to enable component testing will result in inconsistent documentation and examples, as people will use both options interchangeably, which might confuse users. In order to keep things consistent and maximally readable, I'd recommend just using `--component` and not using `--ct`.",
        "pr_file_module": null
      },
      {
        "comment_id": "727301859",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "cli/__snapshots__/cli_spec.js",
        "discussion_id": "727218102",
        "commented_code": "@@ -218,7 +218,9 @@ exports['cli help command shows help 1'] = `\n     open [options]     Opens Cypress in the interactive GUI.\n     run [options]      Runs Cypress tests from the CLI without the GUI\n     open-ct [options]  Opens Cypress component testing interactive mode.\n-    run-ct [options]   Runs all Cypress Component Testing suites\n+                       Deprecated: use \"open --ct\"\n+    run-ct [options]   Runs all Cypress component testing suites. Deprecated:\n+                       use \"run --ct\"",
        "comment_created_at": "2021-10-12T16:21:47+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Removed --ct entirely to standardize on --component in upcoming commit. If we hadn't already used -c and -C for config / config-file, I'd want a one letter alias, but a shorter two-letter one is unusual.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "503698727",
    "pr_number": 8703,
    "pr_file": "packages/desktop-gui/src/specs/specs-store.js",
    "created_at": "2020-10-13T06:35:45+00:00",
    "commented_code": "const pathSeparatorRe = /[\\\\\\/]/g\n \n-export const allSpecsSpec = new Spec({\n+export const allIntegrationSpecsSpec = new Spec({\n   name: 'All Specs',",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "503698727",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 8703,
        "pr_file": "packages/desktop-gui/src/specs/specs-store.js",
        "discussion_id": "503698727",
        "commented_code": "@@ -8,15 +8,24 @@ import Folder from './folder-model'\n \n const pathSeparatorRe = /[\\\\\\/]/g\n \n-export const allSpecsSpec = new Spec({\n+export const allIntegrationSpecsSpec = new Spec({\n   name: 'All Specs',",
        "comment_created_at": "2020-10-13T06:35:45+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "Should probably also say 'All Integration Specs' here to match the logic of component spec label, otherwise it's not totally accurate when you have both.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "419654897",
    "pr_number": 7192,
    "pr_file": "packages/server/lib/video_capture.js",
    "created_at": "2020-05-04T18:54:36+00:00",
    "commented_code": "const lengths = {}\n \n     const writeVideoFrame = function (data) {\n+      // make sure we haven't ended\n+      // our stream yet because paint\n+      // events can linger beyond\n+      // finishing the actual video\n+      if (done) {\n+        return\n+      }\n+\n       // when `data` is empty, it is sent as an empty object (`{}`)\n       // which can crash the process. this can happen if there are\n       // errors in the video capture process, which are handled later\n       // on, so just skip empty frames here.\n       // @see https://github.com/cypress-io/cypress/pull/6818\n       if (_.isEmpty(data)) {\n-        debug('empty chunk received %o', data)\n+        debugFrames('empty chunk received %o', data)\n \n         return\n       }\n \n-      // make sure we haven't ended\n-      // our stream yet because paint\n-      // events can linger beyond\n-      // finishing the actual video\n-      if (done) {\n+      if (lengths[data.length]) {\n+        debugFrames('duplicate length frame received:', data.length)\n+\n         return\n       }\n \n       // we have written at least 1 byte\n-      written = true\n+      written++",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "419654897",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7192,
        "pr_file": "packages/server/lib/video_capture.js",
        "discussion_id": "419654897",
        "commented_code": "@@ -94,34 +100,35 @@ module.exports = {\n     const lengths = {}\n \n     const writeVideoFrame = function (data) {\n+      // make sure we haven't ended\n+      // our stream yet because paint\n+      // events can linger beyond\n+      // finishing the actual video\n+      if (done) {\n+        return\n+      }\n+\n       // when `data` is empty, it is sent as an empty object (`{}`)\n       // which can crash the process. this can happen if there are\n       // errors in the video capture process, which are handled later\n       // on, so just skip empty frames here.\n       // @see https://github.com/cypress-io/cypress/pull/6818\n       if (_.isEmpty(data)) {\n-        debug('empty chunk received %o', data)\n+        debugFrames('empty chunk received %o', data)\n \n         return\n       }\n \n-      // make sure we haven't ended\n-      // our stream yet because paint\n-      // events can linger beyond\n-      // finishing the actual video\n-      if (done) {\n+      if (lengths[data.length]) {\n+        debugFrames('duplicate length frame received:', data.length)\n+\n         return\n       }\n \n       // we have written at least 1 byte\n-      written = true\n+      written++",
        "comment_created_at": "2020-05-04T18:54:36+00:00",
        "comment_author": "flotwig",
        "comment_body": "probably rename this since it's no longer a boolean\r\n\r\n```suggestion\r\n      writtenChunkCount++\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "414783302",
    "pr_number": 7137,
    "pr_file": "packages/server/lib/routes.js",
    "created_at": "2020-04-24T18:36:36+00:00",
    "commented_code": "res.sendFile(file, { etag: false })\n   })\n \n+  app.get('/__bundled/*', (req, res) => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "414783302",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7137,
        "pr_file": "packages/server/lib/routes.js",
        "discussion_id": "414783302",
        "commented_code": "@@ -59,6 +60,14 @@ module.exports = ({ app, config, getRemoteState, networkProxy, project, onError\n     res.sendFile(file, { etag: false })\n   })\n \n+  app.get('/__bundled/*', (req, res) => {",
        "comment_created_at": "2020-04-24T18:36:36+00:00",
        "comment_author": "brian-mann",
        "comment_body": "minor: can we namespace this to `/__cypress/bundled` so it's consistent with the other conventions?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "385736872",
    "pr_number": 6584,
    "pr_file": "packages/server/lib/util/file.js",
    "created_at": "2020-02-28T14:51:02+00:00",
    "commented_code": "const os = require('os')\n const md5 = require('md5')\n const path = require('path')\n-const debug = require('debug')('cypress:server:file')\n+const debug = require('debug')('cypress-verbose:server:file')",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "385736872",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 6584,
        "pr_file": "packages/server/lib/util/file.js",
        "discussion_id": "385736872",
        "commented_code": "@@ -2,7 +2,7 @@ const _ = require('lodash')\n const os = require('os')\n const md5 = require('md5')\n const path = require('path')\n-const debug = require('debug')('cypress:server:file')\n+const debug = require('debug')('cypress-verbose:server:file')",
        "comment_created_at": "2020-02-28T14:51:02+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "For consistency, should we name this `debugVerbose` even though there are no non-verbose debugs in here?",
        "pr_file_module": null
      },
      {
        "comment_id": "385737814",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 6584,
        "pr_file": "packages/server/lib/util/file.js",
        "discussion_id": "385736872",
        "commented_code": "@@ -2,7 +2,7 @@ const _ = require('lodash')\n const os = require('os')\n const md5 = require('md5')\n const path = require('path')\n-const debug = require('debug')('cypress:server:file')\n+const debug = require('debug')('cypress-verbose:server:file')",
        "comment_created_at": "2020-02-28T14:52:44+00:00",
        "comment_author": "kuceb",
        "comment_body": "Agreed",
        "pr_file_module": null
      }
    ]
  }
]