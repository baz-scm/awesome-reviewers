[
  {
    "discussion_id": "629664195",
    "pr_number": 15788,
    "pr_file": "packages/driver/cypress/integration/commands/actions/scroll_spec.js",
    "created_at": "2021-05-10T20:31:52+00:00",
    "commented_code": "})\n \n       it('waits until the subject is scrollable', () => {\n-        cy.stub(cy, 'ensureScrollability')\n-        .onFirstCall().throws(new Error())\n+        cy.stub(cy, 'ensureScrollability').onFirstCall().throws(new Error())\n \n         cy.on('command:retry', () => {\n           return cy.ensureScrollability.returns()\n         })\n \n-        cy\n-        .get('#scroll-into-view-horizontal')\n-        .scrollTo('right').then(() => {\n+        cy.get('#scroll-into-view-horizontal')\n+        .scrollTo('right')\n+        .then(() => {\n           expect(cy.ensureScrollability).to.be.calledTwice\n         })\n       })\n     })\n \n-    describe('errors', {\n-      defaultCommandTimeout: 50,\n-    }, () => {\n-      beforeEach(function () {\n-        this.logs = []\n-\n-        cy.on('log:added', (attrs, log) => {\n-          this.lastLog = log\n-          this.logs.push(log)\n-        })\n-\n-        return null\n-      })\n+    describe(\n+      'errors',\n+      {\n+        defaultCommandTimeout: 50,\n+      },\n+      () => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "629664195",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15788,
        "pr_file": "packages/driver/cypress/integration/commands/actions/scroll_spec.js",
        "discussion_id": "629664195",
        "commented_code": "@@ -396,153 +459,174 @@ describe('src/cy/commands/actions/scroll', () => {\n       })\n \n       it('waits until the subject is scrollable', () => {\n-        cy.stub(cy, 'ensureScrollability')\n-        .onFirstCall().throws(new Error())\n+        cy.stub(cy, 'ensureScrollability').onFirstCall().throws(new Error())\n \n         cy.on('command:retry', () => {\n           return cy.ensureScrollability.returns()\n         })\n \n-        cy\n-        .get('#scroll-into-view-horizontal')\n-        .scrollTo('right').then(() => {\n+        cy.get('#scroll-into-view-horizontal')\n+        .scrollTo('right')\n+        .then(() => {\n           expect(cy.ensureScrollability).to.be.calledTwice\n         })\n       })\n     })\n \n-    describe('errors', {\n-      defaultCommandTimeout: 50,\n-    }, () => {\n-      beforeEach(function () {\n-        this.logs = []\n-\n-        cy.on('log:added', (attrs, log) => {\n-          this.lastLog = log\n-          this.logs.push(log)\n-        })\n-\n-        return null\n-      })\n+    describe(\n+      'errors',\n+      {\n+        defaultCommandTimeout: 50,\n+      },\n+      () => {",
        "comment_created_at": "2021-05-10T20:31:52+00:00",
        "comment_author": "flotwig",
        "comment_body": "another example of something not matching how we prescribe to users to do this. we'd suggest something more compact like:\r\n\r\n```suggestion\r\n    describe('errors', { defaultCommandTimeout: 50 }, () => {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "629665720",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15788,
        "pr_file": "packages/driver/cypress/integration/commands/actions/scroll_spec.js",
        "discussion_id": "629664195",
        "commented_code": "@@ -396,153 +459,174 @@ describe('src/cy/commands/actions/scroll', () => {\n       })\n \n       it('waits until the subject is scrollable', () => {\n-        cy.stub(cy, 'ensureScrollability')\n-        .onFirstCall().throws(new Error())\n+        cy.stub(cy, 'ensureScrollability').onFirstCall().throws(new Error())\n \n         cy.on('command:retry', () => {\n           return cy.ensureScrollability.returns()\n         })\n \n-        cy\n-        .get('#scroll-into-view-horizontal')\n-        .scrollTo('right').then(() => {\n+        cy.get('#scroll-into-view-horizontal')\n+        .scrollTo('right')\n+        .then(() => {\n           expect(cy.ensureScrollability).to.be.calledTwice\n         })\n       })\n     })\n \n-    describe('errors', {\n-      defaultCommandTimeout: 50,\n-    }, () => {\n-      beforeEach(function () {\n-        this.logs = []\n-\n-        cy.on('log:added', (attrs, log) => {\n-          this.lastLog = log\n-          this.logs.push(log)\n-        })\n-\n-        return null\n-      })\n+    describe(\n+      'errors',\n+      {\n+        defaultCommandTimeout: 50,\n+      },\n+      () => {",
        "comment_created_at": "2021-05-10T20:34:38+00:00",
        "comment_author": "tgriesser",
        "comment_body": "> another example of something not matching how we prescribe to users to do this. we'd suggest something more compact like:\r\n\r\ntrue, though given that most JS developers are using prettier these days, it's always good to have a better pulse on what our APIs end up looking in real-world use",
        "pr_file_module": null
      },
      {
        "comment_id": "629669834",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15788,
        "pr_file": "packages/driver/cypress/integration/commands/actions/scroll_spec.js",
        "discussion_id": "629664195",
        "commented_code": "@@ -396,153 +459,174 @@ describe('src/cy/commands/actions/scroll', () => {\n       })\n \n       it('waits until the subject is scrollable', () => {\n-        cy.stub(cy, 'ensureScrollability')\n-        .onFirstCall().throws(new Error())\n+        cy.stub(cy, 'ensureScrollability').onFirstCall().throws(new Error())\n \n         cy.on('command:retry', () => {\n           return cy.ensureScrollability.returns()\n         })\n \n-        cy\n-        .get('#scroll-into-view-horizontal')\n-        .scrollTo('right').then(() => {\n+        cy.get('#scroll-into-view-horizontal')\n+        .scrollTo('right')\n+        .then(() => {\n           expect(cy.ensureScrollability).to.be.calledTwice\n         })\n       })\n     })\n \n-    describe('errors', {\n-      defaultCommandTimeout: 50,\n-    }, () => {\n-      beforeEach(function () {\n-        this.logs = []\n-\n-        cy.on('log:added', (attrs, log) => {\n-          this.lastLog = log\n-          this.logs.push(log)\n-        })\n-\n-        return null\n-      })\n+    describe(\n+      'errors',\n+      {\n+        defaultCommandTimeout: 50,\n+      },\n+      () => {",
        "comment_created_at": "2021-05-10T20:41:47+00:00",
        "comment_author": "flotwig",
        "comment_body": "yeah. i wonder if there could be a prettier-cypress-plugin someday. IMO, in tests, it makes sense to have some specialized linting, since the `describe(...it(...` stuff is almost like a DSL",
        "pr_file_module": null
      },
      {
        "comment_id": "629737475",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15788,
        "pr_file": "packages/driver/cypress/integration/commands/actions/scroll_spec.js",
        "discussion_id": "629664195",
        "commented_code": "@@ -396,153 +459,174 @@ describe('src/cy/commands/actions/scroll', () => {\n       })\n \n       it('waits until the subject is scrollable', () => {\n-        cy.stub(cy, 'ensureScrollability')\n-        .onFirstCall().throws(new Error())\n+        cy.stub(cy, 'ensureScrollability').onFirstCall().throws(new Error())\n \n         cy.on('command:retry', () => {\n           return cy.ensureScrollability.returns()\n         })\n \n-        cy\n-        .get('#scroll-into-view-horizontal')\n-        .scrollTo('right').then(() => {\n+        cy.get('#scroll-into-view-horizontal')\n+        .scrollTo('right')\n+        .then(() => {\n           expect(cy.ensureScrollability).to.be.calledTwice\n         })\n       })\n     })\n \n-    describe('errors', {\n-      defaultCommandTimeout: 50,\n-    }, () => {\n-      beforeEach(function () {\n-        this.logs = []\n-\n-        cy.on('log:added', (attrs, log) => {\n-          this.lastLog = log\n-          this.logs.push(log)\n-        })\n-\n-        return null\n-      })\n+    describe(\n+      'errors',\n+      {\n+        defaultCommandTimeout: 50,\n+      },\n+      () => {",
        "comment_created_at": "2021-05-10T23:04:48+00:00",
        "comment_author": "brian-mann",
        "comment_body": "Thanks @flotwig this is precisely why I was saying this is a full on product change, and something we need to be very prescriptive and careful about. The `describe` and `it` is a fluid DSL that's not superficial code - it's **the format** and outline for the contract between value and our users. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "596091025",
    "pr_number": 15531,
    "pr_file": "packages/server-ct/crossword-example/unit/App.spec.js",
    "created_at": "2021-03-17T14:50:45+00:00",
    "commented_code": "import { crossword } from '../cypress/fixtures/crosswords'\n import { fillCrossword, getCrossword } from './jestHelpers'\n \n+// eslint-disable-next-line no-undef",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "596091025",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15531,
        "pr_file": "packages/server-ct/crossword-example/unit/App.spec.js",
        "discussion_id": "596091025",
        "commented_code": "@@ -3,6 +3,7 @@ import App from '@/App'\n import { crossword } from '../cypress/fixtures/crosswords'\n import { fillCrossword, getCrossword } from './jestHelpers'\n \n+// eslint-disable-next-line no-undef",
        "comment_created_at": "2021-03-17T14:50:45+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "This should be `/* global jest */` at the top instead of disabling `no-undef`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "554641289",
    "pr_number": 14467,
    "pr_file": "packages/runner-ct/src/lib/event-manager.js",
    "created_at": "2021-01-10T23:42:02+00:00",
    "commented_code": "this._clearAllCookies()\n     })\n \n+    const hmrSocket = connectWebpackHmr({\n+      url: `${window.location.origin}/cypress-webpack-hmr-socket`,\n+      onReload: () => {\n+        if (!state.isInitialBuildSucceed) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "554641289",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14467,
        "pr_file": "packages/runner-ct/src/lib/event-manager.js",
        "discussion_id": "554641289",
        "commented_code": "@@ -195,6 +196,17 @@ const eventManager = {\n       this._clearAllCookies()\n     })\n \n+    const hmrSocket = connectWebpackHmr({\n+      url: `${window.location.origin}/cypress-webpack-hmr-socket`,\n+      onReload: () => {\n+        if (!state.isInitialBuildSucceed) {",
        "comment_created_at": "2021-01-10T23:42:02+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "not a blocker, but what do you think about putting the positive statement first in the if statement? eg:\r\n\r\n```\r\nif (state.initialBuildSucceed) {\r\n  rerun() // most likely path\r\n} else {\r\n  // ... not often happening\r\n}\r\n```\r\n\r\njust a style thing, no need to make this change to get the PR merged :)",
        "pr_file_module": null
      },
      {
        "comment_id": "554932492",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14467,
        "pr_file": "packages/runner-ct/src/lib/event-manager.js",
        "discussion_id": "554641289",
        "commented_code": "@@ -195,6 +196,17 @@ const eventManager = {\n       this._clearAllCookies()\n     })\n \n+    const hmrSocket = connectWebpackHmr({\n+      url: `${window.location.origin}/cypress-webpack-hmr-socket`,\n+      onReload: () => {\n+        if (!state.isInitialBuildSucceed) {",
        "comment_created_at": "2021-01-11T09:59:42+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "Agree, this is better.\r\n> Initial logic was like the fist `if` happens first :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "427764506",
    "pr_number": 7356,
    "pr_file": "packages/driver/test/cypress/integration/commands/assertions_spec.js",
    "created_at": "2020-05-20T06:15:58+00:00",
    "commented_code": "context('attr', () => {\n       beforeEach(function () {\n-        this.$div = $('<div foo=\\'bar\\'>foo</div>')\n+        this.$div = $('<div foo=\\'bar\\' fizz=\\'buzz\\'>foo</div>')",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "427764506",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7356,
        "pr_file": "packages/driver/test/cypress/integration/commands/assertions_spec.js",
        "discussion_id": "427764506",
        "commented_code": "@@ -2350,7 +2350,7 @@ describe('src/cy/commands/assertions', () => {\n \n     context('attr', () => {\n       beforeEach(function () {\n-        this.$div = $('<div foo=\\'bar\\'>foo</div>')\n+        this.$div = $('<div foo=\\'bar\\' fizz=\\'buzz\\'>foo</div>')",
        "comment_created_at": "2020-05-20T06:15:58+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "You can use double quotes here - these escaped single quote `\\'` are just an artifact of converting from CoffeeScript. I'd prefer double quotes. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "419651070",
    "pr_number": 7192,
    "pr_file": "packages/server/lib/modes/run.js",
    "created_at": "2020-05-04T18:48:02+00:00",
    "commented_code": "obj.shouldUploadVideo = suv\n \n-      debug('attempting to close the browser')\n+      let videoCaptureFailed = false\n+\n+      if (endVideoCapture) {\n+        await endVideoCapture()\n+        .tapCatch(() => videoCaptureFailed = true)\n+        .catch(warnVideoRecordingFailed)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "419651070",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7192,
        "pr_file": "packages/server/lib/modes/run.js",
        "discussion_id": "419651070",
        "commented_code": "@@ -1120,27 +1118,31 @@ module.exports = {\n \n       obj.shouldUploadVideo = suv\n \n-      debug('attempting to close the browser')\n+      let videoCaptureFailed = false\n+\n+      if (endVideoCapture) {\n+        await endVideoCapture()\n+        .tapCatch(() => videoCaptureFailed = true)\n+        .catch(warnVideoRecordingFailed)",
        "comment_created_at": "2020-05-04T18:48:02+00:00",
        "comment_author": "kuceb",
        "comment_body": "I prefer syntax of `.catch()` to `try {} catch {}`",
        "pr_file_module": null
      },
      {
        "comment_id": "419651960",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7192,
        "pr_file": "packages/server/lib/modes/run.js",
        "discussion_id": "419651070",
        "commented_code": "@@ -1120,27 +1118,31 @@ module.exports = {\n \n       obj.shouldUploadVideo = suv\n \n-      debug('attempting to close the browser')\n+      let videoCaptureFailed = false\n+\n+      if (endVideoCapture) {\n+        await endVideoCapture()\n+        .tapCatch(() => videoCaptureFailed = true)\n+        .catch(warnVideoRecordingFailed)",
        "comment_created_at": "2020-05-04T18:49:30+00:00",
        "comment_author": "kuceb",
        "comment_body": "changed the logic to be:\r\n- stop video recording\r\n- close browser\r\n- video compression\r\n\r\npreviously it was:\r\n- close browser\r\n- stop video recording + video compress",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "411592477",
    "pr_number": 7035,
    "pr_file": "packages/driver/src/cypress/runner.js",
    "created_at": "2020-04-20T18:20:14+00:00",
    "commented_code": "return _testsById[id]\n   }\n \n+  function hasTestAlreadyRun (test) {\n+    if (Cypress._RESUMED_AT_TEST) {\n+      if (+test.id.slice(1) < +Cypress._RESUMED_AT_TEST.slice(1)) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "411592477",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7035,
        "pr_file": "packages/driver/src/cypress/runner.js",
        "discussion_id": "411592477",
        "commented_code": "@@ -889,6 +889,16 @@ const create = function (specWindow, mocha, Cypress, cy) {\n     return _testsById[id]\n   }\n \n+  function hasTestAlreadyRun (test) {\n+    if (Cypress._RESUMED_AT_TEST) {\n+      if (+test.id.slice(1) < +Cypress._RESUMED_AT_TEST.slice(1)) {",
        "comment_created_at": "2020-04-20T18:20:14+00:00",
        "comment_author": "brian-mann",
        "comment_body": "you can also just `return (expression)` here instead of explicitly `return true` after the `if(...)`",
        "pr_file_module": null
      }
    ]
  }
]