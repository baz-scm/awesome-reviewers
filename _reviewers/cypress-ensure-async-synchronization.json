[
  {
    "discussion_id": "698691329",
    "pr_number": 17934,
    "pr_file": "packages/launchpad/src/App.vue",
    "created_at": "2021-08-30T17:57:13+00:00",
    "commented_code": "<template>\n-  <Layout v-slot=\"{ item }\">\n-    <Wizard v-if=\"item === 'projectSetup'\" />\n-    <SettingsPage v-if=\"item === 'settings'\" />\n-    <RunsPage v-if=\"item === 'runs'\" />\n-  </Layout>\n+  <div v-if=\"!backendInitialized || !query.data.value\">\n+    Loading...\n+  </div>\n+\n+  <div v-else>\n+    <Layout v-slot=\"{ item }\">\n+      <Wizard \n+        v-if=\"item === 'projectSetup'\" \n+        :query=\"query.data.value\"\n+      />\n+      <SettingsPage v-if=\"item === 'settings'\" />\n+      <RunsPage v-if=\"item === 'runs'\" />\n+    </Layout>\n+  </div>\n </template>\n \n <script lang=\"ts\" setup>\n-import { provideClient } from '@urql/vue'\n-import { makeUrqlClient } from './graphql/urqlClient'\n+import { computed } from 'vue'\n+import { gql, useQuery } from '@urql/vue'\n import Layout from \"./layouts/Layout.vue\"\n import SettingsPage from './settings/SettingsPage.vue'\n import Wizard from \"./setup/Wizard.vue\"\n+import { AppQueryDocument } from './generated/graphql'\n import RunsPage from \"./runs/RunsPage.vue\"\n \n-provideClient(makeUrqlClient())\n+gql`\n+query AppQuery {\n+  ...Wizard\n+  app {\n+    activeProject {\n+      __typename\n+    }\n+  }\n+}\n+`\n+\n+/**\n+ * Sometimes the electron app can start before the GraphQL\n+ * server and current project has been initialized.\n+ * We poll until those conditions are met, then render the app\n+ */\n+const query = useQuery({ \n+  query: AppQueryDocument,\n+  requestPolicy: 'network-only'\n+})\n+\n+\n+let interval: number\n+\n+const poll = () => {\n+  try {\n+    if (backendInitialized.value) {\n+      window.clearInterval(interval)\n+    } else {\n+      query.executeQuery()\n+    }\n+  } catch (e) {\n+    // probably graphql server has not initialized yet\n+  }\n+}\n+\n+interval = window.setInterval(poll, 200)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "698691329",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17934,
        "pr_file": "packages/launchpad/src/App.vue",
        "discussion_id": "698691329",
        "commented_code": "@@ -1,18 +1,66 @@\n <template>\n-  <Layout v-slot=\"{ item }\">\n-    <Wizard v-if=\"item === 'projectSetup'\" />\n-    <SettingsPage v-if=\"item === 'settings'\" />\n-    <RunsPage v-if=\"item === 'runs'\" />\n-  </Layout>\n+  <div v-if=\"!backendInitialized || !query.data.value\">\n+    Loading...\n+  </div>\n+\n+  <div v-else>\n+    <Layout v-slot=\"{ item }\">\n+      <Wizard \n+        v-if=\"item === 'projectSetup'\" \n+        :query=\"query.data.value\"\n+      />\n+      <SettingsPage v-if=\"item === 'settings'\" />\n+      <RunsPage v-if=\"item === 'runs'\" />\n+    </Layout>\n+  </div>\n </template>\n \n <script lang=\"ts\" setup>\n-import { provideClient } from '@urql/vue'\n-import { makeUrqlClient } from './graphql/urqlClient'\n+import { computed } from 'vue'\n+import { gql, useQuery } from '@urql/vue'\n import Layout from \"./layouts/Layout.vue\"\n import SettingsPage from './settings/SettingsPage.vue'\n import Wizard from \"./setup/Wizard.vue\"\n+import { AppQueryDocument } from './generated/graphql'\n import RunsPage from \"./runs/RunsPage.vue\"\n \n-provideClient(makeUrqlClient())\n+gql`\n+query AppQuery {\n+  ...Wizard\n+  app {\n+    activeProject {\n+      __typename\n+    }\n+  }\n+}\n+`\n+\n+/**\n+ * Sometimes the electron app can start before the GraphQL\n+ * server and current project has been initialized.\n+ * We poll until those conditions are met, then render the app\n+ */\n+const query = useQuery({ \n+  query: AppQueryDocument,\n+  requestPolicy: 'network-only'\n+})\n+\n+\n+let interval: number\n+\n+const poll = () => {\n+  try {\n+    if (backendInitialized.value) {\n+      window.clearInterval(interval)\n+    } else {\n+      query.executeQuery()\n+    }\n+  } catch (e) {\n+    // probably graphql server has not initialized yet\n+  }\n+}\n+\n+interval = window.setInterval(poll, 200)",
        "comment_created_at": "2021-08-30T17:57:13+00:00",
        "comment_author": "tgriesser",
        "comment_body": "Interesting, I wonder if there's a better way we should be handling things on the server so this race condition isn't a frontend concern.",
        "pr_file_module": null
      },
      {
        "comment_id": "698877394",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17934,
        "pr_file": "packages/launchpad/src/App.vue",
        "discussion_id": "698691329",
        "commented_code": "@@ -1,18 +1,66 @@\n <template>\n-  <Layout v-slot=\"{ item }\">\n-    <Wizard v-if=\"item === 'projectSetup'\" />\n-    <SettingsPage v-if=\"item === 'settings'\" />\n-    <RunsPage v-if=\"item === 'runs'\" />\n-  </Layout>\n+  <div v-if=\"!backendInitialized || !query.data.value\">\n+    Loading...\n+  </div>\n+\n+  <div v-else>\n+    <Layout v-slot=\"{ item }\">\n+      <Wizard \n+        v-if=\"item === 'projectSetup'\" \n+        :query=\"query.data.value\"\n+      />\n+      <SettingsPage v-if=\"item === 'settings'\" />\n+      <RunsPage v-if=\"item === 'runs'\" />\n+    </Layout>\n+  </div>\n </template>\n \n <script lang=\"ts\" setup>\n-import { provideClient } from '@urql/vue'\n-import { makeUrqlClient } from './graphql/urqlClient'\n+import { computed } from 'vue'\n+import { gql, useQuery } from '@urql/vue'\n import Layout from \"./layouts/Layout.vue\"\n import SettingsPage from './settings/SettingsPage.vue'\n import Wizard from \"./setup/Wizard.vue\"\n+import { AppQueryDocument } from './generated/graphql'\n import RunsPage from \"./runs/RunsPage.vue\"\n \n-provideClient(makeUrqlClient())\n+gql`\n+query AppQuery {\n+  ...Wizard\n+  app {\n+    activeProject {\n+      __typename\n+    }\n+  }\n+}\n+`\n+\n+/**\n+ * Sometimes the electron app can start before the GraphQL\n+ * server and current project has been initialized.\n+ * We poll until those conditions are met, then render the app\n+ */\n+const query = useQuery({ \n+  query: AppQueryDocument,\n+  requestPolicy: 'network-only'\n+})\n+\n+\n+let interval: number\n+\n+const poll = () => {\n+  try {\n+    if (backendInitialized.value) {\n+      window.clearInterval(interval)\n+    } else {\n+      query.executeQuery()\n+    }\n+  } catch (e) {\n+    // probably graphql server has not initialized yet\n+  }\n+}\n+\n+interval = window.setInterval(poll, 200)",
        "comment_created_at": "2021-08-30T23:37:11+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I'd say so. If some activities need to occur before the UI is rendered, I suppose something like\r\n\r\n```js\r\nasync function start (openElectron) {\r\n  // do stuff\r\n  await initializeThings()\r\n\r\n  openElectron()\r\n}\r\n```\r\n\r\nI'd say once we untangle the mess that is `open_project`, this problem will natural disappear.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "194940418",
    "pr_number": 1931,
    "pr_file": "packages/driver/src/cy/commands/xhr.coffee",
    "created_at": "2018-06-13T02:28:20+00:00",
    "commented_code": "server = null\n \n+  # TODO reset returns a promise, so all uses should be updated\n+  Cypress.backend(\"set:traffic:routing:reset\")",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "194940418",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 1931,
        "pr_file": "packages/driver/src/cy/commands/xhr.coffee",
        "discussion_id": "194940418",
        "commented_code": "@@ -22,6 +22,9 @@ reset = ->\n \n   server = null\n \n+  # TODO reset returns a promise, so all uses should be updated\n+  Cypress.backend(\"set:traffic:routing:reset\")",
        "comment_created_at": "2018-06-13T02:28:20+00:00",
        "comment_author": "brian-mann",
        "comment_body": "Your reset function is sync, but needs to tap into test:before:run:async and use a callback to ensure that the server ack's the reset before each test",
        "pr_file_module": null
      }
    ]
  }
]