[
  {
    "discussion_id": "1204481764",
    "pr_number": 26857,
    "pr_file": "packages/electron/lib/electron.js",
    "created_at": "2023-05-24T16:30:09+00:00",
    "commented_code": "const opts = minimist(argv)\n \n         if (opts.inspectBrk) {\n-          argv.unshift('--inspect-brk=5566')\n+          if (process.env.CYPRESS_DOCKER_DEV_INSPECT_OVERRIDE) {\n+            argv.unshift(`--inspect-brk=${process.env.CYPRESS_DOCKER_DEV_INSPECT_OVERRIDE}`)\n+          } else {\n+            argv.unshift('--inspect-brk=5566')\n+          }",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1204481764",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 26857,
        "pr_file": "packages/electron/lib/electron.js",
        "discussion_id": "1204481764",
        "commented_code": "@@ -126,7 +126,11 @@ module.exports = {\n         const opts = minimist(argv)\n \n         if (opts.inspectBrk) {\n-          argv.unshift('--inspect-brk=5566')\n+          if (process.env.CYPRESS_DOCKER_DEV_INSPECT_OVERRIDE) {\n+            argv.unshift(`--inspect-brk=${process.env.CYPRESS_DOCKER_DEV_INSPECT_OVERRIDE}`)\n+          } else {\n+            argv.unshift('--inspect-brk=5566')\n+          }",
        "comment_created_at": "2023-05-24T16:30:09+00:00",
        "comment_author": "mjhenkes",
        "comment_body": "I looked at passing this in through the cli as `inspect-brk=0.0.0.0:5566` or `inspect-brk 0.0.0.0:5566` but decided that was more trouble than it was worth since we only need to change it in the even that we want to debug from within a docker container.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839776181",
    "pr_number": 20852,
    "pr_file": "cli/lib/exec/open.js",
    "created_at": "2022-03-31T15:57:07+00:00",
    "commented_code": "start (options = {}) {\n     const args = processOpenOptions(options)\n \n+    function getOpenModeEnv () {\n+      if (os.platform() !== 'linux') return\n+\n+      // on non-GTK desktop environments (KDE, XFCE, ...), native file pickers will not be used in Electron unless\n+      // we explicitly opt-in the the GTK portal functionality\n+      // @see https://tristan.partin.io/blog/2021/04/01/electron-linux-and-your-file-chooser/\n+      return { GTK_USE_PORTAL: '1' }",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "839776181",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 20852,
        "pr_file": "cli/lib/exec/open.js",
        "discussion_id": "839776181",
        "commented_code": "@@ -48,11 +49,21 @@ module.exports = {\n   start (options = {}) {\n     const args = processOpenOptions(options)\n \n+    function getOpenModeEnv () {\n+      if (os.platform() !== 'linux') return\n+\n+      // on non-GTK desktop environments (KDE, XFCE, ...), native file pickers will not be used in Electron unless\n+      // we explicitly opt-in the the GTK portal functionality\n+      // @see https://tristan.partin.io/blog/2021/04/01/electron-linux-and-your-file-chooser/\n+      return { GTK_USE_PORTAL: '1' }",
        "comment_created_at": "2022-03-31T15:57:07+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "Just curious, is this something that could be validated and set in `packages/electron` instead of needing to setup & pass this ENV around?",
        "pr_file_module": null
      },
      {
        "comment_id": "839780302",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 20852,
        "pr_file": "cli/lib/exec/open.js",
        "discussion_id": "839776181",
        "commented_code": "@@ -48,11 +49,21 @@ module.exports = {\n   start (options = {}) {\n     const args = processOpenOptions(options)\n \n+    function getOpenModeEnv () {\n+      if (os.platform() !== 'linux') return\n+\n+      // on non-GTK desktop environments (KDE, XFCE, ...), native file pickers will not be used in Electron unless\n+      // we explicitly opt-in the the GTK portal functionality\n+      // @see https://tristan.partin.io/blog/2021/04/01/electron-linux-and-your-file-chooser/\n+      return { GTK_USE_PORTAL: '1' }",
        "comment_created_at": "2022-03-31T16:01:26+00:00",
        "comment_author": "flotwig",
        "comment_body": "In development, `@packages/electron` is used to bootstrap the Electron process, but in production, the entrypoint is actually `@packages/server/index.js`. So we have to use the CLI to set up any extra env we want to pass, since by the time the binary has launched, it's too late. And I couldn't find any way besides this env var to enable this behavior.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "726121340",
    "pr_number": 18422,
    "pr_file": "packages/server/lib/modes/interactive-e2e.js",
    "created_at": "2021-10-11T13:31:41+00:00",
    "commented_code": "const Events = require('../gui/events')\n const Windows = require('../gui/windows')\n \n+const { getPathToDesktopIndex } = require('@packages/resolve-dist')\n+\n const isDev = () => {\n   return process.env['CYPRESS_INTERNAL_ENV'] === 'development'\n }\n \n+const getUrl = function (type) {\n+  if (type === 'e2e' || !process.env.LAUNCHPAD) {\n+    return getPathToDesktopIndex('desktop-gui')\n+  }",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "726121340",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/server/lib/modes/interactive-e2e.js",
        "discussion_id": "726121340",
        "commented_code": "@@ -9,16 +9,26 @@ const menu = require('../gui/menu')\n const Events = require('../gui/events')\n const Windows = require('../gui/windows')\n \n+const { getPathToDesktopIndex } = require('@packages/resolve-dist')\n+\n const isDev = () => {\n   return process.env['CYPRESS_INTERNAL_ENV'] === 'development'\n }\n \n+const getUrl = function (type) {\n+  if (type === 'e2e' || !process.env.LAUNCHPAD) {\n+    return getPathToDesktopIndex('desktop-gui')\n+  }",
        "comment_created_at": "2021-10-11T13:31:41+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "I don't think we want to use the desktop-gui if type is 'e2e'. desktop-gui is the old UI for the app and it's being replaced by the launchpad. As long as `LAUNCHPAD=1`, this should open the launchpad regardless of testing type.",
        "pr_file_module": null
      },
      {
        "comment_id": "726275090",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/server/lib/modes/interactive-e2e.js",
        "discussion_id": "726121340",
        "commented_code": "@@ -9,16 +9,26 @@ const menu = require('../gui/menu')\n const Events = require('../gui/events')\n const Windows = require('../gui/windows')\n \n+const { getPathToDesktopIndex } = require('@packages/resolve-dist')\n+\n const isDev = () => {\n   return process.env['CYPRESS_INTERNAL_ENV'] === 'development'\n }\n \n+const getUrl = function (type) {\n+  if (type === 'e2e' || !process.env.LAUNCHPAD) {\n+    return getPathToDesktopIndex('desktop-gui')\n+  }",
        "comment_created_at": "2021-10-11T16:12:48+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "You're absolutely right, that's what I get for working on things late on Friday evening.",
        "pr_file_module": null
      },
      {
        "comment_id": "726494386",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/server/lib/modes/interactive-e2e.js",
        "discussion_id": "726121340",
        "commented_code": "@@ -9,16 +9,26 @@ const menu = require('../gui/menu')\n const Events = require('../gui/events')\n const Windows = require('../gui/windows')\n \n+const { getPathToDesktopIndex } = require('@packages/resolve-dist')\n+\n const isDev = () => {\n   return process.env['CYPRESS_INTERNAL_ENV'] === 'development'\n }\n \n+const getUrl = function (type) {\n+  if (type === 'e2e' || !process.env.LAUNCHPAD) {\n+    return getPathToDesktopIndex('desktop-gui')\n+  }",
        "comment_created_at": "2021-10-11T18:36:53+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Also, Tim rewrote how things work this morning in order to support dynamic graphql ports, so I had to throw away some of these change and start fresh. New pushes with different approach.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298003477",
    "pr_number": 4579,
    "pr_file": "cli/lib/util.js",
    "created_at": "2019-06-27T04:41:17+00:00",
    "commented_code": "return path.join(process.cwd(), '..', '..', filename)\n   },\n \n-  getEnv (varName) {\n+  getEnv (varName, trim) {\n+    la(is.unemptyString(varName), 'expected environment variable name, not', varName)\n+\n     const envVar = process.env[varName]\n     const configVar = process.env[`npm_config_${varName}`]\n     const packageConfigVar = process.env[`npm_package_config_${varName}`]\n \n+    let result\n+\n     if (envVar) {\n       debug(`Using ${varName} from environment variable`)\n \n-      return envVar\n-    }\n-\n-    if (configVar) {\n+      result = envVar\n+    } else if (configVar) {\n       debug(`Using ${varName} from npm config`)\n \n-      return configVar\n-    }\n-\n-    if (packageConfigVar) {\n+      result = configVar\n+    } else if (packageConfigVar) {\n       debug(`Using ${varName} from package.json config`)\n \n-      return packageConfigVar\n+      result = packageConfigVar\n     }\n \n-    return undefined\n-\n+    // environment variables are often set double quotes to escape characters\n+    // and on Windows it can lead to weird things: for example\n+    //  set FOO=\"C:\\foo.txt\" && node -e \"console.log('>>>%s<<<', process.env.FOO)\"\n+    // will print\n+    //    >>>\"C:\\foo.txt\" <<<\n+    // see https://github.com/cypress-io/cypress/issues/4506#issuecomment-506029942\n+    // so for sanity sake we should first trim whitespace characters and remove\n+    // double quotes around environment strings if the caller is expected to\n+    // use this environment string as a file path\n+    return trim ? dequote(_.trim(result)) : result",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "298003477",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 4579,
        "pr_file": "cli/lib/util.js",
        "discussion_id": "298003477",
        "commented_code": "@@ -255,31 +270,39 @@ const util = {\n     return path.join(process.cwd(), '..', '..', filename)\n   },\n \n-  getEnv (varName) {\n+  getEnv (varName, trim) {\n+    la(is.unemptyString(varName), 'expected environment variable name, not', varName)\n+\n     const envVar = process.env[varName]\n     const configVar = process.env[`npm_config_${varName}`]\n     const packageConfigVar = process.env[`npm_package_config_${varName}`]\n \n+    let result\n+\n     if (envVar) {\n       debug(`Using ${varName} from environment variable`)\n \n-      return envVar\n-    }\n-\n-    if (configVar) {\n+      result = envVar\n+    } else if (configVar) {\n       debug(`Using ${varName} from npm config`)\n \n-      return configVar\n-    }\n-\n-    if (packageConfigVar) {\n+      result = configVar\n+    } else if (packageConfigVar) {\n       debug(`Using ${varName} from package.json config`)\n \n-      return packageConfigVar\n+      result = packageConfigVar\n     }\n \n-    return undefined\n-\n+    // environment variables are often set double quotes to escape characters\n+    // and on Windows it can lead to weird things: for example\n+    //  set FOO=\"C:\\foo.txt\" && node -e \"console.log('>>>%s<<<', process.env.FOO)\"\n+    // will print\n+    //    >>>\"C:\\foo.txt\" <<<\n+    // see https://github.com/cypress-io/cypress/issues/4506#issuecomment-506029942\n+    // so for sanity sake we should first trim whitespace characters and remove\n+    // double quotes around environment strings if the caller is expected to\n+    // use this environment string as a file path\n+    return trim ? dequote(_.trim(result)) : result",
        "comment_created_at": "2019-06-27T04:41:17+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "Does it remove the quotes first or trim first? Does an example like \"foo.txt  \" work properly in your test? ",
        "pr_file_module": null
      },
      {
        "comment_id": "298161445",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 4579,
        "pr_file": "cli/lib/util.js",
        "discussion_id": "298003477",
        "commented_code": "@@ -255,31 +270,39 @@ const util = {\n     return path.join(process.cwd(), '..', '..', filename)\n   },\n \n-  getEnv (varName) {\n+  getEnv (varName, trim) {\n+    la(is.unemptyString(varName), 'expected environment variable name, not', varName)\n+\n     const envVar = process.env[varName]\n     const configVar = process.env[`npm_config_${varName}`]\n     const packageConfigVar = process.env[`npm_package_config_${varName}`]\n \n+    let result\n+\n     if (envVar) {\n       debug(`Using ${varName} from environment variable`)\n \n-      return envVar\n-    }\n-\n-    if (configVar) {\n+      result = envVar\n+    } else if (configVar) {\n       debug(`Using ${varName} from npm config`)\n \n-      return configVar\n-    }\n-\n-    if (packageConfigVar) {\n+      result = configVar\n+    } else if (packageConfigVar) {\n       debug(`Using ${varName} from package.json config`)\n \n-      return packageConfigVar\n+      result = packageConfigVar\n     }\n \n-    return undefined\n-\n+    // environment variables are often set double quotes to escape characters\n+    // and on Windows it can lead to weird things: for example\n+    //  set FOO=\"C:\\foo.txt\" && node -e \"console.log('>>>%s<<<', process.env.FOO)\"\n+    // will print\n+    //    >>>\"C:\\foo.txt\" <<<\n+    // see https://github.com/cypress-io/cypress/issues/4506#issuecomment-506029942\n+    // so for sanity sake we should first trim whitespace characters and remove\n+    // double quotes around environment strings if the caller is expected to\n+    // use this environment string as a file path\n+    return trim ? dequote(_.trim(result)) : result",
        "comment_created_at": "2019-06-27T12:55:50+00:00",
        "comment_author": "bahmutov",
        "comment_body": "first trims the whitespace, then removes quotes, and there are unit tests, let me add one specifically for your case",
        "pr_file_module": null
      }
    ]
  }
]