[
  {
    "discussion_id": "2294391292",
    "pr_number": 32063,
    "pr_file": "cli/lib/tasks/download.ts",
    "created_at": "2025-08-22T18:23:10+00:00",
    "commented_code": "-const la = require('lazy-ass')\n-const is = require('check-more-types')\n-const os = require('os')\n-const url = require('url')\n-const path = require('path')\n-const debug = require('debug')('cypress:cli')\n-const request = require('@cypress/request')\n-const Promise = require('bluebird')\n-const requestProgress = require('request-progress')\n-const { stripIndent } = require('common-tags')\n-const getProxyForUrl = require('proxy-from-env').getProxyForUrl\n-\n-const { throwFormErrorText, errors } = require('../errors')\n-const fs = require('../fs')\n-const util = require('../util')\n+import la from 'lazy-ass'\n+import is from 'check-more-types'\n+import os from 'os'\n+import url from 'url'\n+import path from 'path'\n+import Debug from 'debug'\n+import request from '@cypress/request'\n+import Bluebird from 'bluebird'\n+import requestProgress from 'request-progress'\n+import { stripIndent } from 'common-tags'\n+import { getProxyForUrl } from 'proxy-from-env'\n+import { throwFormErrorText, errors } from '../errors'\n+import fs from '../fs'\n+import util from '../util'\n+\n+const debug = Debug('cypress:cli')\n \n const defaultBaseUrl = 'https://download.cypress.io/'\n const defaultMaxRedirects = 10\n \n-const getProxyForUrlWithNpmConfig = (url) => {\n+const getProxyForUrlWithNpmConfig = (url: string): string | null => {\n   return getProxyForUrl(url) ||\n     process.env.npm_config_https_proxy ||\n     process.env.npm_config_proxy ||\n     null\n }\n \n-const getBaseUrl = () => {\n+const getBaseUrl = (): string => {\n   if (util.getEnv('CYPRESS_DOWNLOAD_MIRROR')) {\n     let baseUrl = util.getEnv('CYPRESS_DOWNLOAD_MIRROR')\n \n-    if (!baseUrl.endsWith('/')) {\n+    if (!baseUrl?.endsWith('/')) {\n       baseUrl += '/'\n     }\n \n-    return baseUrl\n+    return baseUrl || ''",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "2294391292",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/download.ts",
        "discussion_id": "2294391292",
        "commented_code": "@@ -1,48 +1,49 @@\n-const la = require('lazy-ass')\n-const is = require('check-more-types')\n-const os = require('os')\n-const url = require('url')\n-const path = require('path')\n-const debug = require('debug')('cypress:cli')\n-const request = require('@cypress/request')\n-const Promise = require('bluebird')\n-const requestProgress = require('request-progress')\n-const { stripIndent } = require('common-tags')\n-const getProxyForUrl = require('proxy-from-env').getProxyForUrl\n-\n-const { throwFormErrorText, errors } = require('../errors')\n-const fs = require('../fs')\n-const util = require('../util')\n+import la from 'lazy-ass'\n+import is from 'check-more-types'\n+import os from 'os'\n+import url from 'url'\n+import path from 'path'\n+import Debug from 'debug'\n+import request from '@cypress/request'\n+import Bluebird from 'bluebird'\n+import requestProgress from 'request-progress'\n+import { stripIndent } from 'common-tags'\n+import { getProxyForUrl } from 'proxy-from-env'\n+import { throwFormErrorText, errors } from '../errors'\n+import fs from '../fs'\n+import util from '../util'\n+\n+const debug = Debug('cypress:cli')\n \n const defaultBaseUrl = 'https://download.cypress.io/'\n const defaultMaxRedirects = 10\n \n-const getProxyForUrlWithNpmConfig = (url) => {\n+const getProxyForUrlWithNpmConfig = (url: string): string | null => {\n   return getProxyForUrl(url) ||\n     process.env.npm_config_https_proxy ||\n     process.env.npm_config_proxy ||\n     null\n }\n \n-const getBaseUrl = () => {\n+const getBaseUrl = (): string => {\n   if (util.getEnv('CYPRESS_DOWNLOAD_MIRROR')) {\n     let baseUrl = util.getEnv('CYPRESS_DOWNLOAD_MIRROR')\n \n-    if (!baseUrl.endsWith('/')) {\n+    if (!baseUrl?.endsWith('/')) {\n       baseUrl += '/'\n     }\n \n-    return baseUrl\n+    return baseUrl || ''",
        "comment_created_at": "2025-08-22T18:23:10+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "@AtofStryker I'm not seeing why we would return an empty string here in any case. I guess this env var could be anything. Feels like this env var could be anything - maybe a check higher up for it being a string?",
        "pr_file_module": null
      },
      {
        "comment_id": "2294529935",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/download.ts",
        "discussion_id": "2294391292",
        "commented_code": "@@ -1,48 +1,49 @@\n-const la = require('lazy-ass')\n-const is = require('check-more-types')\n-const os = require('os')\n-const url = require('url')\n-const path = require('path')\n-const debug = require('debug')('cypress:cli')\n-const request = require('@cypress/request')\n-const Promise = require('bluebird')\n-const requestProgress = require('request-progress')\n-const { stripIndent } = require('common-tags')\n-const getProxyForUrl = require('proxy-from-env').getProxyForUrl\n-\n-const { throwFormErrorText, errors } = require('../errors')\n-const fs = require('../fs')\n-const util = require('../util')\n+import la from 'lazy-ass'\n+import is from 'check-more-types'\n+import os from 'os'\n+import url from 'url'\n+import path from 'path'\n+import Debug from 'debug'\n+import request from '@cypress/request'\n+import Bluebird from 'bluebird'\n+import requestProgress from 'request-progress'\n+import { stripIndent } from 'common-tags'\n+import { getProxyForUrl } from 'proxy-from-env'\n+import { throwFormErrorText, errors } from '../errors'\n+import fs from '../fs'\n+import util from '../util'\n+\n+const debug = Debug('cypress:cli')\n \n const defaultBaseUrl = 'https://download.cypress.io/'\n const defaultMaxRedirects = 10\n \n-const getProxyForUrlWithNpmConfig = (url) => {\n+const getProxyForUrlWithNpmConfig = (url: string): string | null => {\n   return getProxyForUrl(url) ||\n     process.env.npm_config_https_proxy ||\n     process.env.npm_config_proxy ||\n     null\n }\n \n-const getBaseUrl = () => {\n+const getBaseUrl = (): string => {\n   if (util.getEnv('CYPRESS_DOWNLOAD_MIRROR')) {\n     let baseUrl = util.getEnv('CYPRESS_DOWNLOAD_MIRROR')\n \n-    if (!baseUrl.endsWith('/')) {\n+    if (!baseUrl?.endsWith('/')) {\n       baseUrl += '/'\n     }\n \n-    return baseUrl\n+    return baseUrl || ''",
        "comment_created_at": "2025-08-22T19:34:58+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "this likely should be `return baseUrl || defaultBaseUrl` just as a safety precaution",
        "pr_file_module": null
      },
      {
        "comment_id": "2294594189",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/download.ts",
        "discussion_id": "2294391292",
        "commented_code": "@@ -1,48 +1,49 @@\n-const la = require('lazy-ass')\n-const is = require('check-more-types')\n-const os = require('os')\n-const url = require('url')\n-const path = require('path')\n-const debug = require('debug')('cypress:cli')\n-const request = require('@cypress/request')\n-const Promise = require('bluebird')\n-const requestProgress = require('request-progress')\n-const { stripIndent } = require('common-tags')\n-const getProxyForUrl = require('proxy-from-env').getProxyForUrl\n-\n-const { throwFormErrorText, errors } = require('../errors')\n-const fs = require('../fs')\n-const util = require('../util')\n+import la from 'lazy-ass'\n+import is from 'check-more-types'\n+import os from 'os'\n+import url from 'url'\n+import path from 'path'\n+import Debug from 'debug'\n+import request from '@cypress/request'\n+import Bluebird from 'bluebird'\n+import requestProgress from 'request-progress'\n+import { stripIndent } from 'common-tags'\n+import { getProxyForUrl } from 'proxy-from-env'\n+import { throwFormErrorText, errors } from '../errors'\n+import fs from '../fs'\n+import util from '../util'\n+\n+const debug = Debug('cypress:cli')\n \n const defaultBaseUrl = 'https://download.cypress.io/'\n const defaultMaxRedirects = 10\n \n-const getProxyForUrlWithNpmConfig = (url) => {\n+const getProxyForUrlWithNpmConfig = (url: string): string | null => {\n   return getProxyForUrl(url) ||\n     process.env.npm_config_https_proxy ||\n     process.env.npm_config_proxy ||\n     null\n }\n \n-const getBaseUrl = () => {\n+const getBaseUrl = (): string => {\n   if (util.getEnv('CYPRESS_DOWNLOAD_MIRROR')) {\n     let baseUrl = util.getEnv('CYPRESS_DOWNLOAD_MIRROR')\n \n-    if (!baseUrl.endsWith('/')) {\n+    if (!baseUrl?.endsWith('/')) {\n       baseUrl += '/'\n     }\n \n-    return baseUrl\n+    return baseUrl || ''",
        "comment_created_at": "2025-08-22T19:55:00+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "updated in f840a2b6722e154bc2aff8170a2fae5a2e7efc06",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2294467961",
    "pr_number": 32063,
    "pr_file": "cli/lib/tasks/verify.ts",
    "created_at": "2025-08-22T19:06:37+00:00",
    "commented_code": "-const _ = require('lodash')\n-const chalk = require('chalk')\n-const { Listr } = require('listr2')\n-const debug = require('debug')('cypress:cli')\n-const { stripIndent } = require('common-tags')\n-const Promise = require('bluebird')\n-const logSymbols = require('log-symbols')\n-const path = require('path')\n-const os = require('os')\n-\n-const verbose = require('../VerboseRenderer')\n-const { throwFormErrorText, errors } = require('../errors')\n-const util = require('../util')\n-const logger = require('../logger')\n-const xvfb = require('../exec/xvfb')\n-const state = require('./state')\n-\n-const VERIFY_TEST_RUNNER_TIMEOUT_MS = +util.getEnv('CYPRESS_VERIFY_TIMEOUT') || 30000\n-\n-const checkExecutable = (binaryDir) => {\n+import _ from 'lodash'\n+import chalk from 'chalk'\n+import { Listr } from 'listr2'\n+import Debug from 'debug'\n+import { stripIndent } from 'common-tags'\n+import Bluebird from 'bluebird'\n+import logSymbols from 'log-symbols'\n+import path from 'path'\n+import os from 'os'\n+import verbose from '../VerboseRenderer'\n+import { throwFormErrorText, errors } from '../errors'\n+import util from '../util'\n+import logger from '../logger'\n+import xvfb from '../exec/xvfb'\n+import state from './state'\n+\n+const debug = Debug('cypress:cli')\n+\n+const VERIFY_TEST_RUNNER_TIMEOUT_MS = (() => {\n+  const verifyTimeout = +(util?.getEnv('CYPRESS_VERIFY_TIMEOUT') || 'NaN')\n+\n+  if (_.isNumber(verifyTimeout) && !_.isNaN(verifyTimeout)) {\n+    return verifyTimeout\n+  }\n+\n+  return 30000\n+})()",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "2294467961",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294467961",
        "commented_code": "@@ -1,29 +1,38 @@\n-const _ = require('lodash')\n-const chalk = require('chalk')\n-const { Listr } = require('listr2')\n-const debug = require('debug')('cypress:cli')\n-const { stripIndent } = require('common-tags')\n-const Promise = require('bluebird')\n-const logSymbols = require('log-symbols')\n-const path = require('path')\n-const os = require('os')\n-\n-const verbose = require('../VerboseRenderer')\n-const { throwFormErrorText, errors } = require('../errors')\n-const util = require('../util')\n-const logger = require('../logger')\n-const xvfb = require('../exec/xvfb')\n-const state = require('./state')\n-\n-const VERIFY_TEST_RUNNER_TIMEOUT_MS = +util.getEnv('CYPRESS_VERIFY_TIMEOUT') || 30000\n-\n-const checkExecutable = (binaryDir) => {\n+import _ from 'lodash'\n+import chalk from 'chalk'\n+import { Listr } from 'listr2'\n+import Debug from 'debug'\n+import { stripIndent } from 'common-tags'\n+import Bluebird from 'bluebird'\n+import logSymbols from 'log-symbols'\n+import path from 'path'\n+import os from 'os'\n+import verbose from '../VerboseRenderer'\n+import { throwFormErrorText, errors } from '../errors'\n+import util from '../util'\n+import logger from '../logger'\n+import xvfb from '../exec/xvfb'\n+import state from './state'\n+\n+const debug = Debug('cypress:cli')\n+\n+const VERIFY_TEST_RUNNER_TIMEOUT_MS = (() => {\n+  const verifyTimeout = +(util?.getEnv('CYPRESS_VERIFY_TIMEOUT') || 'NaN')\n+\n+  if (_.isNumber(verifyTimeout) && !_.isNaN(verifyTimeout)) {\n+    return verifyTimeout\n+  }\n+\n+  return 30000\n+})()",
        "comment_created_at": "2025-08-22T19:06:37+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "@AtofStryker This seems a bit overly complex :/ ",
        "pr_file_module": null
      },
      {
        "comment_id": "2294561111",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294467961",
        "commented_code": "@@ -1,29 +1,38 @@\n-const _ = require('lodash')\n-const chalk = require('chalk')\n-const { Listr } = require('listr2')\n-const debug = require('debug')('cypress:cli')\n-const { stripIndent } = require('common-tags')\n-const Promise = require('bluebird')\n-const logSymbols = require('log-symbols')\n-const path = require('path')\n-const os = require('os')\n-\n-const verbose = require('../VerboseRenderer')\n-const { throwFormErrorText, errors } = require('../errors')\n-const util = require('../util')\n-const logger = require('../logger')\n-const xvfb = require('../exec/xvfb')\n-const state = require('./state')\n-\n-const VERIFY_TEST_RUNNER_TIMEOUT_MS = +util.getEnv('CYPRESS_VERIFY_TIMEOUT') || 30000\n-\n-const checkExecutable = (binaryDir) => {\n+import _ from 'lodash'\n+import chalk from 'chalk'\n+import { Listr } from 'listr2'\n+import Debug from 'debug'\n+import { stripIndent } from 'common-tags'\n+import Bluebird from 'bluebird'\n+import logSymbols from 'log-symbols'\n+import path from 'path'\n+import os from 'os'\n+import verbose from '../VerboseRenderer'\n+import { throwFormErrorText, errors } from '../errors'\n+import util from '../util'\n+import logger from '../logger'\n+import xvfb from '../exec/xvfb'\n+import state from './state'\n+\n+const debug = Debug('cypress:cli')\n+\n+const VERIFY_TEST_RUNNER_TIMEOUT_MS = (() => {\n+  const verifyTimeout = +(util?.getEnv('CYPRESS_VERIFY_TIMEOUT') || 'NaN')\n+\n+  if (_.isNumber(verifyTimeout) && !_.isNaN(verifyTimeout)) {\n+    return verifyTimeout\n+  }\n+\n+  return 30000\n+})()",
        "comment_created_at": "2025-08-22T19:44:50+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "it's technically correct because `CYPRESS_VERIFY_TIMEOUT` could be undefined, though there shouldn't be a common case where that happens. This more so guarantees that we always get the default if we can't resolve  `CYPRESS_VERIFY_TIMEOUT` so it's a bit more defensive which isn't necessarily a bad thing",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2294487261",
    "pr_number": 32063,
    "pr_file": "cli/lib/tasks/verify.ts",
    "created_at": "2025-08-22T19:18:29+00:00",
    "commented_code": "const stdioOptions = _.extend({}, {\n       env: {\n         ...process.env,\n-        FORCE_COLOR: 0,\n+        FORCE_COLOR: '0',",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "2294487261",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294487261",
        "commented_code": "@@ -104,18 +113,18 @@ const runSmokeTest = (binaryDir, options) => {\n     const stdioOptions = _.extend({}, {\n       env: {\n         ...process.env,\n-        FORCE_COLOR: 0,\n+        FORCE_COLOR: '0',",
        "comment_created_at": "2025-08-22T19:18:29+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "@AtofStryker I've confused myself on whether this is actually testing what it should be testing. https://force-color.org/ This was the original PR: https://github.com/cypress-io/cypress/pull/28994 \r\n\r\n>When this variable is present and not an empty string (regardless of its value), it should force the addition of ANSI color.\r\n\r\nWasn't the original intention to have this evaluate to OFF?",
        "pr_file_module": null
      },
      {
        "comment_id": "2294568432",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294487261",
        "commented_code": "@@ -104,18 +113,18 @@ const runSmokeTest = (binaryDir, options) => {\n     const stdioOptions = _.extend({}, {\n       env: {\n         ...process.env,\n-        FORCE_COLOR: 0,\n+        FORCE_COLOR: '0',",
        "comment_created_at": "2025-08-22T19:47:10+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "We want to turn it off because the colored ANSI output was causing out verification task to fail. This should still be testing what we want",
        "pr_file_module": null
      },
      {
        "comment_id": "2294664066",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294487261",
        "commented_code": "@@ -104,18 +113,18 @@ const runSmokeTest = (binaryDir, options) => {\n     const stdioOptions = _.extend({}, {\n       env: {\n         ...process.env,\n-        FORCE_COLOR: 0,\n+        FORCE_COLOR: '0',",
        "comment_created_at": "2025-08-22T20:26:03+00:00",
        "comment_author": "jennifer-shehane",
        "comment_body": "@AtofStryker So `FORCE_COLOR` is evaluating to true here which is what we want?",
        "pr_file_module": null
      },
      {
        "comment_id": "2294714382",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 32063,
        "pr_file": "cli/lib/tasks/verify.ts",
        "discussion_id": "2294487261",
        "commented_code": "@@ -104,18 +113,18 @@ const runSmokeTest = (binaryDir, options) => {\n     const stdioOptions = _.extend({}, {\n       env: {\n         ...process.env,\n-        FORCE_COLOR: 0,\n+        FORCE_COLOR: '0',",
        "comment_created_at": "2025-08-22T20:44:50+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "It would still evaluate to false (or at least should) because anything piped into `execa` would evaluate to a string as its an env variable in the process. It's the equivalent of doing something like `FORCE_COLOR=0 node index.js` where `process.env.FORCE_COLOR` inside `index.js` would actually be `'0'`\r\n\r\n<img width=\"980\" height=\"400\" alt=\"Screenshot 2025-08-22 at 4 33 28\u202fPM\" src=\"https://github.com/user-attachments/assets/53e6dd1c-ca96-4913-a315-5edd22107ace\" />\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "730001971",
    "pr_number": 18422,
    "pr_file": "packages/server/lib/modes/index.ts",
    "created_at": "2021-10-15T17:28:59+00:00",
    "commented_code": "return require('./smoke_test').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'e2e') {\n+  if (mode === 'run') {\n+    if (options.testingType === 'component') {\n+      return require('./run-ct').run(options)\n+    }\n+\n     return require('./run-e2e').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'component') {\n-    return require('./run-ct').run(options)\n-  }\n+  if (mode === 'interactive') {\n+    if (options.testingType === 'component' && !process.env.LAUNCHPAD) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "730001971",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/server/lib/modes/index.ts",
        "discussion_id": "730001971",
        "commented_code": "@@ -7,19 +7,20 @@ export = (mode, options) => {\n     return require('./smoke_test').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'e2e') {\n+  if (mode === 'run') {\n+    if (options.testingType === 'component') {\n+      return require('./run-ct').run(options)\n+    }\n+\n     return require('./run-e2e').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'component') {\n-    return require('./run-ct').run(options)\n-  }\n+  if (mode === 'interactive') {\n+    if (options.testingType === 'component' && !process.env.LAUNCHPAD) {",
        "comment_created_at": "2021-10-15T17:28:59+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "Is there documentation around the LAUNCHPAD env? I'm probably missing it but haven't found it yet",
        "pr_file_module": null
      },
      {
        "comment_id": "730004760",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/server/lib/modes/index.ts",
        "discussion_id": "730001971",
        "commented_code": "@@ -7,19 +7,20 @@ export = (mode, options) => {\n     return require('./smoke_test').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'e2e') {\n+  if (mode === 'run') {\n+    if (options.testingType === 'component') {\n+      return require('./run-ct').run(options)\n+    }\n+\n     return require('./run-e2e').run(options)\n   }\n \n-  if (mode === 'run' && options.testingType === 'component') {\n-    return require('./run-ct').run(options)\n-  }\n+  if (mode === 'interactive') {\n+    if (options.testingType === 'component' && !process.env.LAUNCHPAD) {",
        "comment_created_at": "2021-10-15T17:33:28+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Not that I've found either. Speaking with the CT team, the original plan was to merge launchpad into the `develop` behind this flag, but plans changed, and now the env variable will be removed before launch.\r\n\r\nI'm not removing it here in this PR though, because that's a change which will, I expect, have massive ramifications for our tests on cypress - at the very least every system test that assumes `cypress open` drops it into the e2e testing mode will need an update.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "674229518",
    "pr_number": 17314,
    "pr_file": "packages/server/lib/gui/links.ts",
    "created_at": "2021-07-21T18:28:32+00:00",
    "commented_code": "import _ from 'lodash'\n import { shell } from 'electron'\n+import { machineId } from '../util/machine_id'\n \n // NOTE: in order for query params to be passed through on links\n // forwardQueryParams: true must be set for that slug in the on package\n \n interface OpenExternalOptions {\n   url: string\n-  params: { [key: string]: string }\n+  params?: { [key: string]: string }\n+  machineId?: boolean\n }\n \n-export const openExternal = (opts: OpenExternalOptions | string) => {\n+export const openExternal = async (opts: OpenExternalOptions | string) => {\n   if (_.isString(opts)) {\n     return shell.openExternal(opts)\n   }\n \n   const url = new URL(opts.url)\n \n-  if (opts.params) {\n+  const params = opts.params || {}\n+\n+  if (opts.machineId && url.hostname === 'on.cypress.io') {\n+    params.machine_id = await machineId()\n+  }",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "674229518",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17314,
        "pr_file": "packages/server/lib/gui/links.ts",
        "discussion_id": "674229518",
        "commented_code": "@@ -1,28 +1,36 @@\n import _ from 'lodash'\n import { shell } from 'electron'\n+import { machineId } from '../util/machine_id'\n \n // NOTE: in order for query params to be passed through on links\n // forwardQueryParams: true must be set for that slug in the on package\n \n interface OpenExternalOptions {\n   url: string\n-  params: { [key: string]: string }\n+  params?: { [key: string]: string }\n+  machineId?: boolean\n }\n \n-export const openExternal = (opts: OpenExternalOptions | string) => {\n+export const openExternal = async (opts: OpenExternalOptions | string) => {\n   if (_.isString(opts)) {\n     return shell.openExternal(opts)\n   }\n \n   const url = new URL(opts.url)\n \n-  if (opts.params) {\n+  const params = opts.params || {}\n+\n+  if (opts.machineId && url.hostname === 'on.cypress.io') {\n+    params.machine_id = await machineId()\n+  }",
        "comment_created_at": "2021-07-21T18:28:32+00:00",
        "comment_author": "flotwig",
        "comment_body": "there needs to be a way to opt out of this, for example we use the `CYPRESS_CRASH_REPORTS` environment variable as an opt out here: https://github.com/cypress-io/cypress/blob/3726d7eb26f6489ef6ceb8c046de0f239f830e81/packages/server/lib/exception.js#L54-L64",
        "pr_file_module": null
      }
    ]
  }
]