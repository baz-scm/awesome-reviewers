[
  {
    "discussion_id": "603233801",
    "pr_number": 15696,
    "pr_file": "packages/runner-ct/src/app/SpecList/SpecList.tsx",
    "created_at": "2021-03-29T12:00:08+00:00",
    "commented_code": "return render(match.indexes)\n   }\n \n+  if (props.specs.length < 1) {\n+    return <NoSpec message=\"No spec found\" />",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "603233801",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15696,
        "pr_file": "packages/runner-ct/src/app/SpecList/SpecList.tsx",
        "discussion_id": "603233801",
        "commented_code": "@@ -194,6 +195,10 @@ export const FileTree: React.FC<FileTreeProps> = (props) => {\n     return render(match.indexes)\n   }\n \n+  if (props.specs.length < 1) {\n+    return <NoSpec message=\"No spec found\" />",
        "comment_created_at": "2021-03-29T12:00:08+00:00",
        "comment_author": "agg23",
        "comment_body": "super nit: Maybe centralize the strings in `NoSpec`, and choose one through props.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "594663655",
    "pr_number": 15483,
    "pr_file": "npm/design-system/src/components/FileExplorer/FileExplorerItem.tsx",
    "created_at": "2021-03-15T20:33:15+00:00",
    "commented_code": "+import React, { ReactNode } from 'react'\n+import { InlineIcon } from '@iconify/react'\n+import javascriptIcon from '@iconify/icons-vscode-icons/file-type-js-official'\n+import typescriptIcon from '@iconify/icons-vscode-icons/file-type-typescript-official'\n+import reactJs from '@iconify/icons-vscode-icons/file-type-reactjs'\n+import reactTs from '@iconify/icons-vscode-icons/file-type-reactts'\n+import folderClosed from '@iconify/icons-vscode-icons/default-folder'\n+import folderOpen from '@iconify/icons-vscode-icons/default-folder-opened'\n+import { FolderOrFile } from './types'\n+import styles from './FileExplorer.module.scss'\n+import cs from 'classnames'\n+\n+const icons: Record<string, any> = {\n+  js: { icon: javascriptIcon },\n+  ts: { icon: typescriptIcon },\n+  tsx: { icon: reactTs },\n+  jsx: { icon: reactJs },\n+  folderOpen: { icon: folderOpen },\n+  folderClosed: { icon: folderClosed },\n+}\n+\n+const getExt = (path: string) => {\n+  const extensionMatches = path.match(/(?:\\.([^.]+))?$/)\n+\n+  return extensionMatches ? extensionMatches[1] : ''\n+}\n+\n+export interface FileExplorerItemProps {\n+  item: FolderOrFile\n+  children?: ReactNode\n+  style?: React.CSSProperties\n+  getHref? (item: FolderOrFile): string\n+  depth: number\n+  onFocus: any\n+  onClick: any\n+  onBlur: any\n+}\n+\n+export const FileExplorerItem: React.FC<FileExplorerItemProps> = (props) => {\n+  const ext = getExt(props.item.shortName) || ''\n+  const folderIcon = props.item.isOpen ? icons.folderOpen : icons.folderClosed\n+  const getHref = props.getHref || (() => '#')\n+  const onClick = props.item.onClick || (() => {})\n+\n+  const inlineIconProps = ext ? icons[ext] : folderIcon\n+\n+  // Negative margins let the <a> tag take full width (a11y)\n+  // while the <li> tag with text content can be positioned relatively\n+  // This gives us HTML + CSS-only highlight and click handling\n+  const inlineStyles = {\n+    a: {\n+      marginLeft: `calc(-20px * ${props.depth})`,\n+      width: `calc(100% + (20px * ${props.depth}))`,\n+    },\n+    li: {\n+      marginLeft: `calc(20px * ${props.depth})`,\n+    },\n+  }\n+\n+  return (\n+    <a\n+      style={inlineStyles.a}\n+      className={cs(styles.a, { [styles.isClosed]: !props.item.isOpen, [styles.isSelected]: props.item.isSelected })}\n+      href={getHref(props.item)}\n+      onFocus={(e) => {\n+        props.onFocus(e, props.item)\n+      }}\n+      onBlur={(e) => {\n+        props.onBlur(e, props.item)\n+      }}\n+      onClick={(e) => {\n+        props.onClick(e, props.item)\n+        onClick(e, props.item)\n+      }}",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "594663655",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15483,
        "pr_file": "npm/design-system/src/components/FileExplorer/FileExplorerItem.tsx",
        "discussion_id": "594663655",
        "commented_code": "@@ -0,0 +1,83 @@\n+import React, { ReactNode } from 'react'\n+import { InlineIcon } from '@iconify/react'\n+import javascriptIcon from '@iconify/icons-vscode-icons/file-type-js-official'\n+import typescriptIcon from '@iconify/icons-vscode-icons/file-type-typescript-official'\n+import reactJs from '@iconify/icons-vscode-icons/file-type-reactjs'\n+import reactTs from '@iconify/icons-vscode-icons/file-type-reactts'\n+import folderClosed from '@iconify/icons-vscode-icons/default-folder'\n+import folderOpen from '@iconify/icons-vscode-icons/default-folder-opened'\n+import { FolderOrFile } from './types'\n+import styles from './FileExplorer.module.scss'\n+import cs from 'classnames'\n+\n+const icons: Record<string, any> = {\n+  js: { icon: javascriptIcon },\n+  ts: { icon: typescriptIcon },\n+  tsx: { icon: reactTs },\n+  jsx: { icon: reactJs },\n+  folderOpen: { icon: folderOpen },\n+  folderClosed: { icon: folderClosed },\n+}\n+\n+const getExt = (path: string) => {\n+  const extensionMatches = path.match(/(?:\\.([^.]+))?$/)\n+\n+  return extensionMatches ? extensionMatches[1] : ''\n+}\n+\n+export interface FileExplorerItemProps {\n+  item: FolderOrFile\n+  children?: ReactNode\n+  style?: React.CSSProperties\n+  getHref? (item: FolderOrFile): string\n+  depth: number\n+  onFocus: any\n+  onClick: any\n+  onBlur: any\n+}\n+\n+export const FileExplorerItem: React.FC<FileExplorerItemProps> = (props) => {\n+  const ext = getExt(props.item.shortName) || ''\n+  const folderIcon = props.item.isOpen ? icons.folderOpen : icons.folderClosed\n+  const getHref = props.getHref || (() => '#')\n+  const onClick = props.item.onClick || (() => {})\n+\n+  const inlineIconProps = ext ? icons[ext] : folderIcon\n+\n+  // Negative margins let the <a> tag take full width (a11y)\n+  // while the <li> tag with text content can be positioned relatively\n+  // This gives us HTML + CSS-only highlight and click handling\n+  const inlineStyles = {\n+    a: {\n+      marginLeft: `calc(-20px * ${props.depth})`,\n+      width: `calc(100% + (20px * ${props.depth}))`,\n+    },\n+    li: {\n+      marginLeft: `calc(20px * ${props.depth})`,\n+    },\n+  }\n+\n+  return (\n+    <a\n+      style={inlineStyles.a}\n+      className={cs(styles.a, { [styles.isClosed]: !props.item.isOpen, [styles.isSelected]: props.item.isSelected })}\n+      href={getHref(props.item)}\n+      onFocus={(e) => {\n+        props.onFocus(e, props.item)\n+      }}\n+      onBlur={(e) => {\n+        props.onBlur(e, props.item)\n+      }}\n+      onClick={(e) => {\n+        props.onClick(e, props.item)\n+        onClick(e, props.item)\n+      }}",
        "comment_created_at": "2021-03-15T20:33:15+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "We can move it to function for readability \r\n\r\n```js\r\nfunction handleClick(e: React.MouseEvent<HtmlLinkElement>) { \r\n   props.onClick(e, props.item);\r\n   \r\n   if (props.item.onClick) {\r\n      props.item.onClick(e, props.item)\r\n   }\r\n}\r\n\r\nonClick={handleClick}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "439164461",
    "pr_number": 7646,
    "pr_file": "packages/reporter/src/commands/command.tsx",
    "created_at": "2020-06-12T01:48:15+00:00",
    "commented_code": "</span>\n           </div>\n         </FlashOnClick>\n+        { model.state === 'pending' && !!timeRemaining && <div className='command-progress'><span style={{ animationDuration: `${timeRemaining}ms`, width: `${timeRemaining / model.timeout * 100}%` }} /></div> }",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "439164461",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.tsx",
        "discussion_id": "439164461",
        "commented_code": "@@ -198,6 +199,7 @@ class Command extends Component<Props> {\n             </span>\n           </div>\n         </FlashOnClick>\n+        { model.state === 'pending' && !!timeRemaining && <div className='command-progress'><span style={{ animationDuration: `${timeRemaining}ms`, width: `${timeRemaining / model.timeout * 100}%` }} /></div> }",
        "comment_created_at": "2020-06-12T01:48:15+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "Can we pull this out into something?\r\n\r\nA function at a minimum but also appropriate would be a component since its state and styles are pretty self-contained.",
        "pr_file_module": null
      }
    ]
  }
]