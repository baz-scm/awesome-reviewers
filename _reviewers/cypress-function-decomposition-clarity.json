[
  {
    "discussion_id": "1005767798",
    "pr_number": 24295,
    "pr_file": "packages/packherd-require/src/default-transpile-cache.ts",
    "created_at": "2022-10-26T14:34:57+00:00",
    "commented_code": "+import type { TranspileCache } from './types'\n+\n+/**\n+ * In memory transpile cache that is used if none was provided to `packherd:require`.\n+ */\n+export class DefaultTranspileCache implements TranspileCache {\n+  private readonly _cache: Map<string, string> = new Map()\n+\n+  get (fullPath: string, _skipStaleCheck?: boolean): string | undefined {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1005767798",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 24295,
        "pr_file": "packages/packherd-require/src/default-transpile-cache.ts",
        "discussion_id": "1005767798",
        "commented_code": "@@ -0,0 +1,24 @@\n+import type { TranspileCache } from './types'\n+\n+/**\n+ * In memory transpile cache that is used if none was provided to `packherd:require`.\n+ */\n+export class DefaultTranspileCache implements TranspileCache {\n+  private readonly _cache: Map<string, string> = new Map()\n+\n+  get (fullPath: string, _skipStaleCheck?: boolean): string | undefined {",
        "comment_created_at": "2022-10-26T14:34:57+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "Is `_skipStaleCheck` supposed to be used anywhere?\r\n```suggestion\r\n  get (fullPath: string): string | undefined {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1008292876",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 24295,
        "pr_file": "packages/packherd-require/src/default-transpile-cache.ts",
        "discussion_id": "1005767798",
        "commented_code": "@@ -0,0 +1,24 @@\n+import type { TranspileCache } from './types'\n+\n+/**\n+ * In memory transpile cache that is used if none was provided to `packherd:require`.\n+ */\n+export class DefaultTranspileCache implements TranspileCache {\n+  private readonly _cache: Map<string, string> = new Map()\n+\n+  get (fullPath: string, _skipStaleCheck?: boolean): string | undefined {",
        "comment_created_at": "2022-10-28T17:25:37+00:00",
        "comment_author": "ryanthemanuel",
        "comment_body": "I went ahead and removed it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "826403681",
    "pr_number": 20464,
    "pr_file": "packages/net-stubbing/lib/server/state.ts",
    "created_at": "2022-03-14T21:41:12+00:00",
    "commented_code": "-import { noop } from 'lodash'\n+import type { InterceptedRequest } from './intercepted-request'\n import type { NetStubbingState } from './types'\n \n export function state (): NetStubbingState {\n   return {\n     requests: {},\n     routes: [],\n     pendingEventHandlers: {},\n-    reset () {\n-      // clean up requests that are still pending\n-      for (const requestId in this.requests) {\n-        const { res } = this.requests[requestId]\n+    async reset () {\n+      await Promise.all(Object.values <InterceptedRequest>(this.requests).map((request) => {\n+        const responseEvents = ['before:response', 'response:callback', 'response', 'network:error']\n+        const inResponsePhase = responseEvents.includes(request.lastEvent!)\n+        const { res } = request\n \n-        res.removeAllListeners('finish')\n-        res.removeAllListeners('error')\n-        res.on('error', noop)\n-        res.destroy()\n-      }\n+        if (res.destroyed) {\n+          delete this.requests[request.id]\n+\n+          return Promise.resolve()\n+        }\n+\n+        let shouldDestroyResponse = false\n+\n+        request.subscriptionsByRoute.forEach((subscriptionByRoute) => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "826403681",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 20464,
        "pr_file": "packages/net-stubbing/lib/server/state.ts",
        "discussion_id": "826403681",
        "commented_code": "@@ -1,24 +1,60 @@\n-import { noop } from 'lodash'\n+import type { InterceptedRequest } from './intercepted-request'\n import type { NetStubbingState } from './types'\n \n export function state (): NetStubbingState {\n   return {\n     requests: {},\n     routes: [],\n     pendingEventHandlers: {},\n-    reset () {\n-      // clean up requests that are still pending\n-      for (const requestId in this.requests) {\n-        const { res } = this.requests[requestId]\n+    async reset () {\n+      await Promise.all(Object.values <InterceptedRequest>(this.requests).map((request) => {\n+        const responseEvents = ['before:response', 'response:callback', 'response', 'network:error']\n+        const inResponsePhase = responseEvents.includes(request.lastEvent!)\n+        const { res } = request\n \n-        res.removeAllListeners('finish')\n-        res.removeAllListeners('error')\n-        res.on('error', noop)\n-        res.destroy()\n-      }\n+        if (res.destroyed) {\n+          delete this.requests[request.id]\n+\n+          return Promise.resolve()\n+        }\n+\n+        let shouldDestroyResponse = false\n+\n+        request.subscriptionsByRoute.forEach((subscriptionByRoute) => {",
        "comment_created_at": "2022-03-14T21:41:12+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Can maybe get some more legibility by replacing the `forEach` loops with more functional style `.some()` calls.\r\n\r\n```\r\nconst shouldAwaitSubscription = (sub) => (\r\n  sub.await\r\n  && !sub.skip\r\n  && (responseEvents.includes(sub.eventName) || !inResponsePhase)\r\n)\r\n\r\nconst shouldDestroyResponse = request.subscriptionsByRoute.some((subs) => (\r\n  !subs.immediateStaticResponse\r\n  && subs.subscriptions.some(shouldAwaitSubscription)\r\n})\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "726806495",
    "pr_number": 18440,
    "pr_file": "packages/data-context/src/actions/StorybookActions.ts",
    "created_at": "2021-10-12T06:42:56+00:00",
    "commented_code": "const config = await this.ctx.project.getConfig(project.projectRoot)\n \n-    const spec = await this.generate(storyPath, project.projectRoot, config.componentFolder)\n+    const spec = await this.generateSpec(\n+      storyPath,\n+      project.projectRoot,\n+      config.componentFolder,\n+    )\n \n     this.ctx.wizardData.generatedSpec = spec\n   }\n \n-  private async generate (\n+  private async generateSpec (\n     storyPath: string,\n     projectRoot: string,\n     componentFolder: FullConfig['componentFolder'],\n   ): Promise<FoundSpec | null> {\n-    const storyFile = path.parse(storyPath)\n-    const storyName = storyFile.name.split('.')[0]\n+    const specFileExtension = '.cy'\n+    const parsedFile = path.parse(storyPath)\n+    const fileName = parsedFile.name.split('.')[0] as string\n \n-    try {\n-      const raw = await readCsfOrMdx(storyPath, {\n-        defaultTitle: storyName || '',\n-      })\n-      const parsed = raw.parse()\n-\n-      if (\n-        (!parsed.meta.title && !parsed.meta.component) ||\n-        !parsed.stories.length\n-      ) {\n-        return null\n-      }\n+    let newSpecContent: string | null\n \n-      const specFileExtension = '.cy-spec'\n-      const newSpecContent = this.generateSpecFromCsf(parsed, storyFile)\n-      const newSpecPath = path.join(\n+    try {\n+      newSpecContent = await this.generateSpecFromCsf(\n         storyPath,\n-        '..',\n-        `${parsed.meta.component}${specFileExtension}${storyFile.ext}`,\n+        fileName,\n       )\n \n-      // If this passes then the file exists and we don't want to overwrite it\n-      try {\n-        await this.ctx.fs.access(newSpecPath, this.ctx.fs.constants.F_OK)\n-\n+      if (!newSpecContent) {\n         return null\n-      } catch (e) {\n-        // eslint-disable-line no-empty\n       }\n+    } catch (e) {\n+      return null\n+    }\n \n-      await this.ctx.fs.outputFileSync(newSpecPath, newSpecContent)\n-\n-      const parsedSpec = path.parse(newSpecPath)\n+    let newSpecAbsolute = path.join(\n+      parsedFile.dir,\n+      `${fileName}${specFileExtension}${parsedFile.ext}`,\n+    )\n \n-      // Can this be obtained from the spec watcher?\n-      return {\n-        baseName: parsedSpec.base,\n-        fileName: parsedSpec.base.replace(specFileExtension, ''),\n+    try {\n+      newSpecAbsolute = await this.getFilename(\n+        newSpecAbsolute,\n+        fileName,\n         specFileExtension,\n-        fileExtension: parsedSpec.ext,\n-        name: path.relative(componentFolder || projectRoot, newSpecPath),\n-        relative: path.relative(projectRoot, newSpecPath),\n-        absolute: newSpecPath,\n-        specType: 'component',\n-      }\n+      )\n+\n+      await this.ctx.fs.outputFileSync(newSpecAbsolute, newSpecContent)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "726806495",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18440,
        "pr_file": "packages/data-context/src/actions/StorybookActions.ts",
        "discussion_id": "726806495",
        "commented_code": "@@ -16,82 +16,95 @@ export class StorybookActions {\n \n     const config = await this.ctx.project.getConfig(project.projectRoot)\n \n-    const spec = await this.generate(storyPath, project.projectRoot, config.componentFolder)\n+    const spec = await this.generateSpec(\n+      storyPath,\n+      project.projectRoot,\n+      config.componentFolder,\n+    )\n \n     this.ctx.wizardData.generatedSpec = spec\n   }\n \n-  private async generate (\n+  private async generateSpec (\n     storyPath: string,\n     projectRoot: string,\n     componentFolder: FullConfig['componentFolder'],\n   ): Promise<FoundSpec | null> {\n-    const storyFile = path.parse(storyPath)\n-    const storyName = storyFile.name.split('.')[0]\n+    const specFileExtension = '.cy'\n+    const parsedFile = path.parse(storyPath)\n+    const fileName = parsedFile.name.split('.')[0] as string\n \n-    try {\n-      const raw = await readCsfOrMdx(storyPath, {\n-        defaultTitle: storyName || '',\n-      })\n-      const parsed = raw.parse()\n-\n-      if (\n-        (!parsed.meta.title && !parsed.meta.component) ||\n-        !parsed.stories.length\n-      ) {\n-        return null\n-      }\n+    let newSpecContent: string | null\n \n-      const specFileExtension = '.cy-spec'\n-      const newSpecContent = this.generateSpecFromCsf(parsed, storyFile)\n-      const newSpecPath = path.join(\n+    try {\n+      newSpecContent = await this.generateSpecFromCsf(\n         storyPath,\n-        '..',\n-        `${parsed.meta.component}${specFileExtension}${storyFile.ext}`,\n+        fileName,\n       )\n \n-      // If this passes then the file exists and we don't want to overwrite it\n-      try {\n-        await this.ctx.fs.access(newSpecPath, this.ctx.fs.constants.F_OK)\n-\n+      if (!newSpecContent) {\n         return null\n-      } catch (e) {\n-        // eslint-disable-line no-empty\n       }\n+    } catch (e) {\n+      return null\n+    }\n \n-      await this.ctx.fs.outputFileSync(newSpecPath, newSpecContent)\n-\n-      const parsedSpec = path.parse(newSpecPath)\n+    let newSpecAbsolute = path.join(\n+      parsedFile.dir,\n+      `${fileName}${specFileExtension}${parsedFile.ext}`,\n+    )\n \n-      // Can this be obtained from the spec watcher?\n-      return {\n-        baseName: parsedSpec.base,\n-        fileName: parsedSpec.base.replace(specFileExtension, ''),\n+    try {\n+      newSpecAbsolute = await this.getFilename(\n+        newSpecAbsolute,\n+        fileName,\n         specFileExtension,\n-        fileExtension: parsedSpec.ext,\n-        name: path.relative(componentFolder || projectRoot, newSpecPath),\n-        relative: path.relative(projectRoot, newSpecPath),\n-        absolute: newSpecPath,\n-        specType: 'component',\n-      }\n+      )\n+\n+      await this.ctx.fs.outputFileSync(newSpecAbsolute, newSpecContent)",
        "comment_created_at": "2021-10-12T06:42:56+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Not sure we need to await `outputFileSync` - does this return a `Promise`?",
        "pr_file_module": null
      },
      {
        "comment_id": "727243352",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18440,
        "pr_file": "packages/data-context/src/actions/StorybookActions.ts",
        "discussion_id": "726806495",
        "commented_code": "@@ -16,82 +16,95 @@ export class StorybookActions {\n \n     const config = await this.ctx.project.getConfig(project.projectRoot)\n \n-    const spec = await this.generate(storyPath, project.projectRoot, config.componentFolder)\n+    const spec = await this.generateSpec(\n+      storyPath,\n+      project.projectRoot,\n+      config.componentFolder,\n+    )\n \n     this.ctx.wizardData.generatedSpec = spec\n   }\n \n-  private async generate (\n+  private async generateSpec (\n     storyPath: string,\n     projectRoot: string,\n     componentFolder: FullConfig['componentFolder'],\n   ): Promise<FoundSpec | null> {\n-    const storyFile = path.parse(storyPath)\n-    const storyName = storyFile.name.split('.')[0]\n+    const specFileExtension = '.cy'\n+    const parsedFile = path.parse(storyPath)\n+    const fileName = parsedFile.name.split('.')[0] as string\n \n-    try {\n-      const raw = await readCsfOrMdx(storyPath, {\n-        defaultTitle: storyName || '',\n-      })\n-      const parsed = raw.parse()\n-\n-      if (\n-        (!parsed.meta.title && !parsed.meta.component) ||\n-        !parsed.stories.length\n-      ) {\n-        return null\n-      }\n+    let newSpecContent: string | null\n \n-      const specFileExtension = '.cy-spec'\n-      const newSpecContent = this.generateSpecFromCsf(parsed, storyFile)\n-      const newSpecPath = path.join(\n+    try {\n+      newSpecContent = await this.generateSpecFromCsf(\n         storyPath,\n-        '..',\n-        `${parsed.meta.component}${specFileExtension}${storyFile.ext}`,\n+        fileName,\n       )\n \n-      // If this passes then the file exists and we don't want to overwrite it\n-      try {\n-        await this.ctx.fs.access(newSpecPath, this.ctx.fs.constants.F_OK)\n-\n+      if (!newSpecContent) {\n         return null\n-      } catch (e) {\n-        // eslint-disable-line no-empty\n       }\n+    } catch (e) {\n+      return null\n+    }\n \n-      await this.ctx.fs.outputFileSync(newSpecPath, newSpecContent)\n-\n-      const parsedSpec = path.parse(newSpecPath)\n+    let newSpecAbsolute = path.join(\n+      parsedFile.dir,\n+      `${fileName}${specFileExtension}${parsedFile.ext}`,\n+    )\n \n-      // Can this be obtained from the spec watcher?\n-      return {\n-        baseName: parsedSpec.base,\n-        fileName: parsedSpec.base.replace(specFileExtension, ''),\n+    try {\n+      newSpecAbsolute = await this.getFilename(\n+        newSpecAbsolute,\n+        fileName,\n         specFileExtension,\n-        fileExtension: parsedSpec.ext,\n-        name: path.relative(componentFolder || projectRoot, newSpecPath),\n-        relative: path.relative(projectRoot, newSpecPath),\n-        absolute: newSpecPath,\n-        specType: 'component',\n-      }\n+      )\n+\n+      await this.ctx.fs.outputFileSync(newSpecAbsolute, newSpecContent)",
        "comment_created_at": "2021-10-12T15:16:28+00:00",
        "comment_author": "ZachJW34",
        "comment_body": "Should have been `outputFile`!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "678621311",
    "pr_number": 14350,
    "pr_file": "packages/driver/src/cy/commands/sessions.ts",
    "created_at": "2021-07-28T20:15:31+00:00",
    "commented_code": "+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "678621311",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14350,
        "pr_file": "packages/driver/src/cy/commands/sessions.ts",
        "discussion_id": "678621311",
        "commented_code": "@@ -0,0 +1,822 @@\n+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {",
        "comment_created_at": "2021-07-28T20:15:31+00:00",
        "comment_author": "flotwig",
        "comment_body": "nit: this function is >100 lines long, i get that it's a complicated procedure, but it would be easier to grok if it was broken up into smaller named functions",
        "pr_file_module": null
      },
      {
        "comment_id": "681833472",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14350,
        "pr_file": "packages/driver/src/cy/commands/sessions.ts",
        "discussion_id": "678621311",
        "commented_code": "@@ -0,0 +1,822 @@\n+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {",
        "comment_created_at": "2021-08-03T14:49:00+00:00",
        "comment_author": "kuceb",
        "comment_body": "addressed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "678626874",
    "pr_number": 14350,
    "pr_file": "packages/driver/src/cy/commands/sessions.ts",
    "created_at": "2021-07-28T20:25:07+00:00",
    "commented_code": "+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {\n+      const specWindow = cy.state('specWindow')\n+\n+      if (!_.isObject(options)) {\n+        throw new Error('getStorage() takes an object')\n+      }\n+\n+      const opts = _.defaults({}, options, {\n+        origin: 'current_origin',\n+      })\n+\n+      const current_origin = $Location.create(window.location.href).origin\n+\n+      const origins = await mapOrigins(opts.origin)\n+\n+      const getResults = () => {\n+        return results\n+      }\n+      const results = {\n+        localStorage: [] as any[],\n+        sessionStorage: [] as any[],\n+      }\n+\n+      function pushValue (origin, value) {\n+        if (!_.isEmpty(value.localStorage)) {\n+          results.localStorage.push({ origin, value: value.localStorage })\n+        }\n+\n+        if (!_.isEmpty(value.sessionStorage)) {\n+          results.sessionStorage.push({ origin, value: value.sessionStorage })\n+        }\n+      }\n+\n+      const currentOriginIndex = origins.indexOf(current_origin)\n+\n+      if (currentOriginIndex !== -1) {\n+        origins.splice(currentOriginIndex, 1)\n+        // localStorage.length propery is not always accurate, we must stringify to check for entries\n+        // for ex) try setting localStorge.key = 'val' and reading localStorage.length, may be 0.\n+        const _localStorageStr = JSON.stringify(window.localStorage)\n+        const _localStorage = _localStorageStr.length > 2 && JSON.parse(_localStorageStr)\n+        const _sessionStorageStr = JSON.stringify(window.sessionStorage)\n+        const _sessionStorage = _sessionStorageStr.length > 2 && JSON.parse(JSON.stringify(window.sessionStorage))\n+\n+        const value = {} as any\n+\n+        if (_localStorage) {\n+          value.localStorage = _localStorage\n+        }\n+\n+        if (_sessionStorage) {\n+          value.sessionStorage = _sessionStorage\n+        }\n+\n+        pushValue(current_origin, value)\n+      }\n+\n+      if (_.isEmpty(origins)) {\n+        return getResults()\n+      }\n+\n+      if (current_origin.startsWith('https:')) {\n+        _.remove(origins, (v) => v.startsWith('http:'))\n+      }\n+\n+      const iframes: JQuery<HTMLElement>[] = []\n+\n+      const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+      _.each(origins, (u) => {\n+        const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/getLocalStorage`}\"></iframe>`)\n+\n+        $iframe.appendTo($iframeContainer)\n+        iframes.push($iframe)\n+      })\n+\n+      let onPostMessage\n+      const successOrigins = [] as string[]\n+\n+      await new Promise((resolve) => {\n+        onPostMessage = ((event) => {\n+          const data = event.data\n+\n+          if (data.type !== 'localStorage') return\n+\n+          const value = data.value\n+\n+          pushValue(event.origin, value)\n+\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        })\n+\n+        specWindow.addEventListener('message', onPostMessage)\n+      })\n+      .catch((err) => {\n+        Cypress.log({\n+          name: 'warning',\n+          message: `failed to set session storage data on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+        })\n+      })\n+      .finally(() => {\n+        specWindow.removeEventListener('message', onPostMessage)\n+        $iframeContainer.remove()\n+      })\n+\n+      return getResults()\n+    },\n+\n+    async clearStorage () {\n+      const origins = await getAllHtmlOrigins()\n+\n+      const originOptions = origins.map((v) => ({ origin: v, clear: true }))\n+\n+      await sessions.setStorage({\n+        localStorage: originOptions,\n+        sessionStorage: originOptions,\n+      })\n+    },\n+\n+    async setStorage (options: any, clearAll = false) {\n+      const current_origin = $Location.create(window.location.href).origin as string\n+\n+      const mapToCurrentOrigin = (v) => ({ ...v, origin: (v.origin && v.origin !== 'current_origin') ? $Location.create(v.origin).origin : current_origin })\n+\n+      const mappedLocalStorage = _.map(options.localStorage, (v) => {\n+        const mapped = { origin: v.origin, localStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.localStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const mappedSessionStorage = _.map(options.sessionStorage, (v) => {\n+        const mapped = { origin: v.origin, sessionStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.sessionStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const storageOptions = _.map(_.groupBy(mappedLocalStorage.concat(mappedSessionStorage), 'origin'), (v) => _.merge({}, ...v))\n+\n+      await _setStorageOnOrigins(storageOptions)\n+    },\n+\n+    registerSessionHooks () {\n+      Cypress.on('test:before:run:async', () => {\n+        if (Cypress.config('experimentalSessionSupport')) {\n+          currentTestRegisteredSessions.clear()\n+\n+          return navigateAboutBlank(false)\n+          .then(() => sessions.clearCurrentSessionData())\n+          .then(() => {\n+            return Cypress.backend('reset:renderedHTMLOrigins')\n+          })\n+        }\n+\n+        return\n+      })\n+    },\n+\n+  }\n+\n+  Cypress.on('run:start', () => {\n+    sessions.registerSessionHooks()\n+  })\n+\n+  Commands.addAll({\n+    session (id, setup?: Function, options: {\n+      validate?: Function\n+    } = {}) {\n+      throwIfNoSessionSupport()\n+\n+      if (!id || !_.isString(id) && !_.isObject(id)) {\n+        throw new Error('cy.session requires a string or object as the first argument')\n+      }\n+\n+      // backup session command so we can set it as codeFrame location for errors later on\n+      const sessionCommand = cy.state('current')\n+\n+      // stringfy determinitically if we were given an object\n+      id = typeof id === 'string' ? id : stringifyStable(id)\n+\n+      if (options) {\n+        if (!_.isObject(options)) {\n+          throw new Error('cy.session optional third argument must be an object')\n+        }\n+\n+        const validopts = {\n+          'validate': 'function',\n+        }\n+\n+        Object.keys(options).forEach((key) => {\n+          const expectedType = validopts[key]\n+\n+          if (!expectedType) {\n+            throw new Error(`unexpected option **${key}** passed to cy.session options`)\n+          }\n+\n+          const actualType = typeof options[key]\n+\n+          if (actualType !== expectedType) {\n+            throw new Error(`invalid option **${key}** passed to cy.session options. Expected **${expectedType}**, got ${actualType}`)\n+          }\n+        })\n+      }\n+\n+      let existingSession = getActiveSession(id)\n+\n+      if (!setup) {\n+        if (!existingSession || !currentTestRegisteredSessions.has(id)) {\n+          $errUtils.throwErrByPath('sessions.session.not_found', { args: { id } })\n+        }\n+      } else {\n+        const isUniqSessionDefinition = !existingSession || existingSession.setup.toString().trim() !== setup.toString().trim()\n+\n+        if (isUniqSessionDefinition) {\n+          if (currentTestRegisteredSessions.has(id)) {\n+            throw $errUtils.errByPath('sessions.session.duplicateId', { id: existingSession.id })\n+          }\n+\n+          existingSession = sessions.defineSession({\n+            id,\n+            setup,\n+            validate: options.validate,\n+          })\n+\n+          currentTestRegisteredSessions.set(id, true)\n+        }\n+      }\n+\n+      const _log = Cypress.log({\n+        name: 'session',\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+        groupStart: true,\n+        snapshot: false,\n+      })\n+\n+      const dataLog = Cypress.log({\n+        name: 'session',\n+        sessionInfo: getSessionDetails(existingSession),\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+      })\n+\n+      async function runsetup (existingSession) {\n+        Cypress.log({\n+          name: 'Create New Session',\n+          state: 'passed',\n+          event: true,\n+          type: 'system',\n+          message: ``,\n+          groupStart: true,\n+        })\n+\n+        if (!hadValidationError) {\n+          _log.set({\n+            renderProps: () => {\n+              return {\n+                indicator: 'successful',\n+                message: `(new) ${_log.get().message}`,\n+              }\n+            },\n+          })\n+        }\n+\n+        await navigateAboutBlank()\n+\n+        cy.then(() => sessions.clearCurrentSessionData())",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "678626874",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14350,
        "pr_file": "packages/driver/src/cy/commands/sessions.ts",
        "discussion_id": "678626874",
        "commented_code": "@@ -0,0 +1,822 @@\n+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {\n+      const specWindow = cy.state('specWindow')\n+\n+      if (!_.isObject(options)) {\n+        throw new Error('getStorage() takes an object')\n+      }\n+\n+      const opts = _.defaults({}, options, {\n+        origin: 'current_origin',\n+      })\n+\n+      const current_origin = $Location.create(window.location.href).origin\n+\n+      const origins = await mapOrigins(opts.origin)\n+\n+      const getResults = () => {\n+        return results\n+      }\n+      const results = {\n+        localStorage: [] as any[],\n+        sessionStorage: [] as any[],\n+      }\n+\n+      function pushValue (origin, value) {\n+        if (!_.isEmpty(value.localStorage)) {\n+          results.localStorage.push({ origin, value: value.localStorage })\n+        }\n+\n+        if (!_.isEmpty(value.sessionStorage)) {\n+          results.sessionStorage.push({ origin, value: value.sessionStorage })\n+        }\n+      }\n+\n+      const currentOriginIndex = origins.indexOf(current_origin)\n+\n+      if (currentOriginIndex !== -1) {\n+        origins.splice(currentOriginIndex, 1)\n+        // localStorage.length propery is not always accurate, we must stringify to check for entries\n+        // for ex) try setting localStorge.key = 'val' and reading localStorage.length, may be 0.\n+        const _localStorageStr = JSON.stringify(window.localStorage)\n+        const _localStorage = _localStorageStr.length > 2 && JSON.parse(_localStorageStr)\n+        const _sessionStorageStr = JSON.stringify(window.sessionStorage)\n+        const _sessionStorage = _sessionStorageStr.length > 2 && JSON.parse(JSON.stringify(window.sessionStorage))\n+\n+        const value = {} as any\n+\n+        if (_localStorage) {\n+          value.localStorage = _localStorage\n+        }\n+\n+        if (_sessionStorage) {\n+          value.sessionStorage = _sessionStorage\n+        }\n+\n+        pushValue(current_origin, value)\n+      }\n+\n+      if (_.isEmpty(origins)) {\n+        return getResults()\n+      }\n+\n+      if (current_origin.startsWith('https:')) {\n+        _.remove(origins, (v) => v.startsWith('http:'))\n+      }\n+\n+      const iframes: JQuery<HTMLElement>[] = []\n+\n+      const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+      _.each(origins, (u) => {\n+        const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/getLocalStorage`}\"></iframe>`)\n+\n+        $iframe.appendTo($iframeContainer)\n+        iframes.push($iframe)\n+      })\n+\n+      let onPostMessage\n+      const successOrigins = [] as string[]\n+\n+      await new Promise((resolve) => {\n+        onPostMessage = ((event) => {\n+          const data = event.data\n+\n+          if (data.type !== 'localStorage') return\n+\n+          const value = data.value\n+\n+          pushValue(event.origin, value)\n+\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        })\n+\n+        specWindow.addEventListener('message', onPostMessage)\n+      })\n+      .catch((err) => {\n+        Cypress.log({\n+          name: 'warning',\n+          message: `failed to set session storage data on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+        })\n+      })\n+      .finally(() => {\n+        specWindow.removeEventListener('message', onPostMessage)\n+        $iframeContainer.remove()\n+      })\n+\n+      return getResults()\n+    },\n+\n+    async clearStorage () {\n+      const origins = await getAllHtmlOrigins()\n+\n+      const originOptions = origins.map((v) => ({ origin: v, clear: true }))\n+\n+      await sessions.setStorage({\n+        localStorage: originOptions,\n+        sessionStorage: originOptions,\n+      })\n+    },\n+\n+    async setStorage (options: any, clearAll = false) {\n+      const current_origin = $Location.create(window.location.href).origin as string\n+\n+      const mapToCurrentOrigin = (v) => ({ ...v, origin: (v.origin && v.origin !== 'current_origin') ? $Location.create(v.origin).origin : current_origin })\n+\n+      const mappedLocalStorage = _.map(options.localStorage, (v) => {\n+        const mapped = { origin: v.origin, localStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.localStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const mappedSessionStorage = _.map(options.sessionStorage, (v) => {\n+        const mapped = { origin: v.origin, sessionStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.sessionStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const storageOptions = _.map(_.groupBy(mappedLocalStorage.concat(mappedSessionStorage), 'origin'), (v) => _.merge({}, ...v))\n+\n+      await _setStorageOnOrigins(storageOptions)\n+    },\n+\n+    registerSessionHooks () {\n+      Cypress.on('test:before:run:async', () => {\n+        if (Cypress.config('experimentalSessionSupport')) {\n+          currentTestRegisteredSessions.clear()\n+\n+          return navigateAboutBlank(false)\n+          .then(() => sessions.clearCurrentSessionData())\n+          .then(() => {\n+            return Cypress.backend('reset:renderedHTMLOrigins')\n+          })\n+        }\n+\n+        return\n+      })\n+    },\n+\n+  }\n+\n+  Cypress.on('run:start', () => {\n+    sessions.registerSessionHooks()\n+  })\n+\n+  Commands.addAll({\n+    session (id, setup?: Function, options: {\n+      validate?: Function\n+    } = {}) {\n+      throwIfNoSessionSupport()\n+\n+      if (!id || !_.isString(id) && !_.isObject(id)) {\n+        throw new Error('cy.session requires a string or object as the first argument')\n+      }\n+\n+      // backup session command so we can set it as codeFrame location for errors later on\n+      const sessionCommand = cy.state('current')\n+\n+      // stringfy determinitically if we were given an object\n+      id = typeof id === 'string' ? id : stringifyStable(id)\n+\n+      if (options) {\n+        if (!_.isObject(options)) {\n+          throw new Error('cy.session optional third argument must be an object')\n+        }\n+\n+        const validopts = {\n+          'validate': 'function',\n+        }\n+\n+        Object.keys(options).forEach((key) => {\n+          const expectedType = validopts[key]\n+\n+          if (!expectedType) {\n+            throw new Error(`unexpected option **${key}** passed to cy.session options`)\n+          }\n+\n+          const actualType = typeof options[key]\n+\n+          if (actualType !== expectedType) {\n+            throw new Error(`invalid option **${key}** passed to cy.session options. Expected **${expectedType}**, got ${actualType}`)\n+          }\n+        })\n+      }\n+\n+      let existingSession = getActiveSession(id)\n+\n+      if (!setup) {\n+        if (!existingSession || !currentTestRegisteredSessions.has(id)) {\n+          $errUtils.throwErrByPath('sessions.session.not_found', { args: { id } })\n+        }\n+      } else {\n+        const isUniqSessionDefinition = !existingSession || existingSession.setup.toString().trim() !== setup.toString().trim()\n+\n+        if (isUniqSessionDefinition) {\n+          if (currentTestRegisteredSessions.has(id)) {\n+            throw $errUtils.errByPath('sessions.session.duplicateId', { id: existingSession.id })\n+          }\n+\n+          existingSession = sessions.defineSession({\n+            id,\n+            setup,\n+            validate: options.validate,\n+          })\n+\n+          currentTestRegisteredSessions.set(id, true)\n+        }\n+      }\n+\n+      const _log = Cypress.log({\n+        name: 'session',\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+        groupStart: true,\n+        snapshot: false,\n+      })\n+\n+      const dataLog = Cypress.log({\n+        name: 'session',\n+        sessionInfo: getSessionDetails(existingSession),\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+      })\n+\n+      async function runsetup (existingSession) {\n+        Cypress.log({\n+          name: 'Create New Session',\n+          state: 'passed',\n+          event: true,\n+          type: 'system',\n+          message: ``,\n+          groupStart: true,\n+        })\n+\n+        if (!hadValidationError) {\n+          _log.set({\n+            renderProps: () => {\n+              return {\n+                indicator: 'successful',\n+                message: `(new) ${_log.get().message}`,\n+              }\n+            },\n+          })\n+        }\n+\n+        await navigateAboutBlank()\n+\n+        cy.then(() => sessions.clearCurrentSessionData())",
        "comment_created_at": "2021-07-28T20:25:07+00:00",
        "comment_author": "flotwig",
        "comment_body": "what's the reason to use `cy.then` instead of regular Promises/async/await inside of this function? at first i thought you were doing this because you used other chainables inside of cy.session, but i don't see any chainables besides `cy.then`, so it seems unnecessary to me to use it",
        "pr_file_module": null
      },
      {
        "comment_id": "681835010",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14350,
        "pr_file": "packages/driver/src/cy/commands/sessions.ts",
        "discussion_id": "678626874",
        "commented_code": "@@ -0,0 +1,822 @@\n+import _ from 'lodash'\n+import $ from 'jquery'\n+import $Location from '../../cypress/location'\n+import $errUtils from '../../cypress/error_utils'\n+import stringifyStable from 'json-stable-stringify'\n+import * as $stackUtils from '../../cypress/stack_utils'\n+const currentTestRegisteredSessions = new Map()\n+const getSessionDetails = (sessState) => {\n+  return {\n+    id: sessState.id,\n+    data: _.merge(\n+      _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v.length })),\n+      ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: Object.keys(v.value).length } })),\n+    ) }\n+}\n+const getSessionDetailsForTable = (sessState) => {\n+  return _.merge(\n+    _.mapValues(_.groupBy(sessState.cookies, 'domain'), (v) => ({ cookies: v })),\n+    ..._.map(sessState.localStorage, (v) => ({ [$Location.create(v.origin).hostname]: { localStorage: v } })),\n+  )\n+}\n+\n+const getConsoleProps = (sessState) => {\n+  const ret = {\n+    id: sessState.id,\n+    table: _.compact(_.flatMap(getSessionDetailsForTable(sessState), (val, domain) => {\n+      return [() => {\n+        return {\n+          name: `\ud83c\udf6a Cookies - ${domain} (${val.cookies.length})`,\n+          data: val.cookies,\n+        }\n+      },\n+      val.localStorage && (() => {\n+        return {\n+          name: `\ud83d\udcc1 Storage - ${domain} (${_.keys(val.localStorage.value).length})`,\n+          data: _.map(val.localStorage.value, (value, key) => {\n+            return {\n+              key, value,\n+            }\n+          }),\n+        }\n+      })]\n+    }))\n+    ,\n+  }\n+\n+  return ret\n+}\n+\n+export default function (Commands, Cypress, cy) {\n+  const { Promise } = Cypress\n+\n+  const setActiveSession = (obj) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    const newSessions = { ...currentSessions, ...obj }\n+\n+    cy.state('activeSessions', newSessions)\n+  }\n+  const getActiveSession = (id) => {\n+    const currentSessions = cy.state('activeSessions') || {}\n+\n+    return currentSessions[id]\n+  }\n+  const clearActiveSessions = () => {\n+    const curSessions = cy.state('activeSessions') || {}\n+\n+    cy.state('activeSessions', _.mapValues(curSessions, (v) => ({ ...v, hydrated: false })))\n+  }\n+\n+  async function mapOrigins (origins) {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    return _.uniq(\n+      _.flatten(await Promise.map(\n+        ([] as string[]).concat(origins), async (v) => {\n+          if (v === '*') {\n+            return _.keys(await Cypress.backend('get:renderedHTMLOrigins')).concat([current_origin])\n+          }\n+\n+          if (v === 'current_origin') return current_origin\n+\n+          return $Location.create(v).origin\n+        },\n+      )),\n+    ) as string[]\n+  }\n+\n+  async function _setStorageOnOrigins (originOptions) {\n+    const specWindow = cy.state('specWindow')\n+\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const current_origin_options_index = _.findIndex(originOptions, { origin: current_origin })\n+\n+    if (current_origin_options_index !== -1) {\n+      const opts = originOptions.splice(current_origin_options_index, 1)[0]\n+\n+      if (!_.isEmpty(opts.localStorage)) {\n+        if (opts.localStorage.clear) {\n+          window.localStorage.clear()\n+        }\n+\n+        _.each(opts.localStorage.value, (val, key) => localStorage.setItem(key, val))\n+      }\n+\n+      if (opts.sessionStorage) {\n+        if (opts.sessionStorage.clear) {\n+          window.sessionStorage.clear()\n+        }\n+\n+        _.each(opts.sessionStorage.value, (val, key) => sessionStorage.setItem(key, val))\n+      }\n+    }\n+\n+    if (_.isEmpty(originOptions)) {\n+      return\n+    }\n+\n+    const origins = originOptions.map((v) => v.origin) as string[]\n+\n+    const iframes: JQuery<HTMLElement>[] = []\n+\n+    const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+    // if we're on an https domain, there is no way for the secure context to access insecure origins from iframes\n+    // since there is no way for the app to access localStorage on insecure contexts, we don't have to clear any localStorage on http domains.\n+    if (current_origin.startsWith('https:')) {\n+      _.remove(origins, (v) => v.startsWith('http:'))\n+    }\n+\n+    _.each(origins, (u) => {\n+      const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/setLocalStorage?${u}`}\"></iframe>`)\n+\n+      $iframe.appendTo($iframeContainer)\n+      iframes.push($iframe)\n+    })\n+\n+    let onPostMessage\n+\n+    const successOrigins = [] as string[]\n+\n+    await new Promise((resolve) => {\n+      onPostMessage = (event) => {\n+        const data = event.data\n+\n+        if (data.type === 'set:storage:load') {\n+          if (!event.source) {\n+            throw new Error('failed to get localStorage')\n+          }\n+\n+          const opts = _.find(originOptions, { origin: event.origin })!\n+\n+          event.source.postMessage({ type: 'set:storage:data', data: opts }, '*')\n+        } else if (data.type === 'set:storage:complete') {\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        }\n+      }\n+\n+      specWindow.addEventListener('message', onPostMessage)\n+    })\n+    .timeout(2000)\n+    .catch((err) => {\n+      Cypress.log({\n+        name: 'warning',\n+        message: `failed to set session storage on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+      })\n+    })\n+    .finally(() => {\n+      specWindow.removeEventListener('message', onPostMessage)\n+      $iframeContainer.remove()\n+    })\n+  }\n+\n+  async function getAllHtmlOrigins () {\n+    const current_origin = $Location.create(window.location.href).origin\n+\n+    const origins = _.uniq([..._.keys(await Cypress.backend('get:renderedHTMLOrigins')), current_origin]) as string[]\n+\n+    return origins\n+  }\n+\n+  function throwIfNoSessionSupport () {\n+    if (!Cypress.config('experimentalSessionSupport')) {\n+      // TODO: proper error msg\n+      throw new Error('experimentalSessionSupport is not enabled. You must enable the experimentalSessionSupport flag in order to use Cypress session commands')\n+    }\n+  }\n+\n+  const sessions = {\n+\n+    defineSession (options = {} as any) {\n+      const sess_state = {\n+        id: options.id,\n+        cookies: null,\n+        localStorage: null,\n+        setup: options.setup,\n+        hydrated: false,\n+        validate: options.validate,\n+      }\n+\n+      setActiveSession({ [sess_state.id]: sess_state })\n+\n+      return sess_state\n+    },\n+\n+    async clearAllSavedSessions () {\n+      clearActiveSessions()\n+\n+      return Cypress.backend('clear:session', null)\n+    },\n+\n+    async clearCurrentSessionData () {\n+      window.localStorage.clear()\n+      window.sessionStorage.clear()\n+\n+      await Promise.all([\n+        sessions.clearStorage(),\n+        sessions.clearCookies(),\n+      ])\n+    },\n+\n+    async setSessionData (data) {\n+      const allHtmlOrigins = await getAllHtmlOrigins()\n+\n+      let _localStorage = data.localStorage || []\n+      let _sessionStorage = data.sessionStorage || []\n+\n+      _.each(allHtmlOrigins, (v) => {\n+        if (!_.find(_localStorage, v)) {\n+          _localStorage = _localStorage.concat({ origin: v, clear: true })\n+        }\n+\n+        if (!_.find(_sessionStorage, v)) {\n+          _sessionStorage = _sessionStorage.concat({ origin: v, clear: true })\n+        }\n+      })\n+\n+      await Promise.all([\n+        sessions.setStorage({ localStorage: _localStorage, sessionStorage: _sessionStorage }),\n+        Cypress.automation('clear:cookies', null),\n+      ])\n+\n+      await sessions.setCookies(data.cookies)\n+    },\n+\n+    getCookies () {\n+      return Cypress.automation('get:cookies', {})\n+    },\n+\n+    setCookies (data) {\n+      return Cypress.automation('set:cookies', data)\n+    },\n+\n+    async clearCookies () {\n+      return Cypress.automation('clear:cookies', await sessions.getCookies())\n+    },\n+\n+    async getCurrentSessionData () {\n+      const storage = await sessions.getStorage({ origin: '*' })\n+\n+      let cookies = [] as any[]\n+\n+      cookies = await Cypress.automation('get:cookies', {})\n+\n+      const ses = {\n+        ...storage,\n+        cookies,\n+      }\n+\n+      return ses\n+    },\n+\n+    getSession (id) {\n+      return Cypress.backend('get:session', id)\n+    },\n+\n+    /**\n+     * 1) if we only need current_origin localStorage, access sync\n+     * 2) if cross-origin http, we need to load in iframe from our proxy that will intercept all http reqs at /__cypress/automation/*\n+     *      and postMessage() the localStorage value to us\n+     * 3) if cross-origin https, since we pass-thru https conntections in the proxy, we need to\n+     *      send a message telling our proxy server to intercept the next req to the https domain,\n+     *      then follow 2)\n+     */\n+    async getStorage (options = {}) {\n+      const specWindow = cy.state('specWindow')\n+\n+      if (!_.isObject(options)) {\n+        throw new Error('getStorage() takes an object')\n+      }\n+\n+      const opts = _.defaults({}, options, {\n+        origin: 'current_origin',\n+      })\n+\n+      const current_origin = $Location.create(window.location.href).origin\n+\n+      const origins = await mapOrigins(opts.origin)\n+\n+      const getResults = () => {\n+        return results\n+      }\n+      const results = {\n+        localStorage: [] as any[],\n+        sessionStorage: [] as any[],\n+      }\n+\n+      function pushValue (origin, value) {\n+        if (!_.isEmpty(value.localStorage)) {\n+          results.localStorage.push({ origin, value: value.localStorage })\n+        }\n+\n+        if (!_.isEmpty(value.sessionStorage)) {\n+          results.sessionStorage.push({ origin, value: value.sessionStorage })\n+        }\n+      }\n+\n+      const currentOriginIndex = origins.indexOf(current_origin)\n+\n+      if (currentOriginIndex !== -1) {\n+        origins.splice(currentOriginIndex, 1)\n+        // localStorage.length propery is not always accurate, we must stringify to check for entries\n+        // for ex) try setting localStorge.key = 'val' and reading localStorage.length, may be 0.\n+        const _localStorageStr = JSON.stringify(window.localStorage)\n+        const _localStorage = _localStorageStr.length > 2 && JSON.parse(_localStorageStr)\n+        const _sessionStorageStr = JSON.stringify(window.sessionStorage)\n+        const _sessionStorage = _sessionStorageStr.length > 2 && JSON.parse(JSON.stringify(window.sessionStorage))\n+\n+        const value = {} as any\n+\n+        if (_localStorage) {\n+          value.localStorage = _localStorage\n+        }\n+\n+        if (_sessionStorage) {\n+          value.sessionStorage = _sessionStorage\n+        }\n+\n+        pushValue(current_origin, value)\n+      }\n+\n+      if (_.isEmpty(origins)) {\n+        return getResults()\n+      }\n+\n+      if (current_origin.startsWith('https:')) {\n+        _.remove(origins, (v) => v.startsWith('http:'))\n+      }\n+\n+      const iframes: JQuery<HTMLElement>[] = []\n+\n+      const $iframeContainer = $(`<div style=\"display:none\"></div>`).appendTo($('body', specWindow.document))\n+\n+      _.each(origins, (u) => {\n+        const $iframe = $(`<iframe src=\"${`${u}/__cypress/automation/getLocalStorage`}\"></iframe>`)\n+\n+        $iframe.appendTo($iframeContainer)\n+        iframes.push($iframe)\n+      })\n+\n+      let onPostMessage\n+      const successOrigins = [] as string[]\n+\n+      await new Promise((resolve) => {\n+        onPostMessage = ((event) => {\n+          const data = event.data\n+\n+          if (data.type !== 'localStorage') return\n+\n+          const value = data.value\n+\n+          pushValue(event.origin, value)\n+\n+          successOrigins.push(event.origin)\n+          if (successOrigins.length === origins.length) {\n+            resolve()\n+          }\n+        })\n+\n+        specWindow.addEventListener('message', onPostMessage)\n+      })\n+      .catch((err) => {\n+        Cypress.log({\n+          name: 'warning',\n+          message: `failed to set session storage data on origin(s): ${_.xor(origins, successOrigins).join(', ')}`,\n+        })\n+      })\n+      .finally(() => {\n+        specWindow.removeEventListener('message', onPostMessage)\n+        $iframeContainer.remove()\n+      })\n+\n+      return getResults()\n+    },\n+\n+    async clearStorage () {\n+      const origins = await getAllHtmlOrigins()\n+\n+      const originOptions = origins.map((v) => ({ origin: v, clear: true }))\n+\n+      await sessions.setStorage({\n+        localStorage: originOptions,\n+        sessionStorage: originOptions,\n+      })\n+    },\n+\n+    async setStorage (options: any, clearAll = false) {\n+      const current_origin = $Location.create(window.location.href).origin as string\n+\n+      const mapToCurrentOrigin = (v) => ({ ...v, origin: (v.origin && v.origin !== 'current_origin') ? $Location.create(v.origin).origin : current_origin })\n+\n+      const mappedLocalStorage = _.map(options.localStorage, (v) => {\n+        const mapped = { origin: v.origin, localStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.localStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const mappedSessionStorage = _.map(options.sessionStorage, (v) => {\n+        const mapped = { origin: v.origin, sessionStorage: _.pick(v, 'value', 'clear') }\n+\n+        if (clearAll) {\n+          mapped.sessionStorage.clear = true\n+        }\n+\n+        return mapped\n+      }).map(mapToCurrentOrigin)\n+\n+      const storageOptions = _.map(_.groupBy(mappedLocalStorage.concat(mappedSessionStorage), 'origin'), (v) => _.merge({}, ...v))\n+\n+      await _setStorageOnOrigins(storageOptions)\n+    },\n+\n+    registerSessionHooks () {\n+      Cypress.on('test:before:run:async', () => {\n+        if (Cypress.config('experimentalSessionSupport')) {\n+          currentTestRegisteredSessions.clear()\n+\n+          return navigateAboutBlank(false)\n+          .then(() => sessions.clearCurrentSessionData())\n+          .then(() => {\n+            return Cypress.backend('reset:renderedHTMLOrigins')\n+          })\n+        }\n+\n+        return\n+      })\n+    },\n+\n+  }\n+\n+  Cypress.on('run:start', () => {\n+    sessions.registerSessionHooks()\n+  })\n+\n+  Commands.addAll({\n+    session (id, setup?: Function, options: {\n+      validate?: Function\n+    } = {}) {\n+      throwIfNoSessionSupport()\n+\n+      if (!id || !_.isString(id) && !_.isObject(id)) {\n+        throw new Error('cy.session requires a string or object as the first argument')\n+      }\n+\n+      // backup session command so we can set it as codeFrame location for errors later on\n+      const sessionCommand = cy.state('current')\n+\n+      // stringfy determinitically if we were given an object\n+      id = typeof id === 'string' ? id : stringifyStable(id)\n+\n+      if (options) {\n+        if (!_.isObject(options)) {\n+          throw new Error('cy.session optional third argument must be an object')\n+        }\n+\n+        const validopts = {\n+          'validate': 'function',\n+        }\n+\n+        Object.keys(options).forEach((key) => {\n+          const expectedType = validopts[key]\n+\n+          if (!expectedType) {\n+            throw new Error(`unexpected option **${key}** passed to cy.session options`)\n+          }\n+\n+          const actualType = typeof options[key]\n+\n+          if (actualType !== expectedType) {\n+            throw new Error(`invalid option **${key}** passed to cy.session options. Expected **${expectedType}**, got ${actualType}`)\n+          }\n+        })\n+      }\n+\n+      let existingSession = getActiveSession(id)\n+\n+      if (!setup) {\n+        if (!existingSession || !currentTestRegisteredSessions.has(id)) {\n+          $errUtils.throwErrByPath('sessions.session.not_found', { args: { id } })\n+        }\n+      } else {\n+        const isUniqSessionDefinition = !existingSession || existingSession.setup.toString().trim() !== setup.toString().trim()\n+\n+        if (isUniqSessionDefinition) {\n+          if (currentTestRegisteredSessions.has(id)) {\n+            throw $errUtils.errByPath('sessions.session.duplicateId', { id: existingSession.id })\n+          }\n+\n+          existingSession = sessions.defineSession({\n+            id,\n+            setup,\n+            validate: options.validate,\n+          })\n+\n+          currentTestRegisteredSessions.set(id, true)\n+        }\n+      }\n+\n+      const _log = Cypress.log({\n+        name: 'session',\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+        groupStart: true,\n+        snapshot: false,\n+      })\n+\n+      const dataLog = Cypress.log({\n+        name: 'session',\n+        sessionInfo: getSessionDetails(existingSession),\n+        message: `${existingSession.id > 50 ? `${existingSession.id.substr(0, 47)}...` : existingSession.id}`,\n+      })\n+\n+      async function runsetup (existingSession) {\n+        Cypress.log({\n+          name: 'Create New Session',\n+          state: 'passed',\n+          event: true,\n+          type: 'system',\n+          message: ``,\n+          groupStart: true,\n+        })\n+\n+        if (!hadValidationError) {\n+          _log.set({\n+            renderProps: () => {\n+              return {\n+                indicator: 'successful',\n+                message: `(new) ${_log.get().message}`,\n+              }\n+            },\n+          })\n+        }\n+\n+        await navigateAboutBlank()\n+\n+        cy.then(() => sessions.clearCurrentSessionData())",
        "comment_created_at": "2021-08-03T14:50:30+00:00",
        "comment_author": "kuceb",
        "comment_body": "fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "658676608",
    "pr_number": 17115,
    "pr_file": "packages/server/lib/project-base.ts",
    "created_at": "2021-06-25T10:54:18+00:00",
    "commented_code": "return scaffold.plugins(path.dirname(cfg.pluginsFile), cfg)\n       }\n     })\n-    .then(callbacks.onOpen)\n+    .then((cfg) => {\n+      return this.onOpen(cfg, options)\n+    })",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "658676608",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17115,
        "pr_file": "packages/server/lib/project-base.ts",
        "discussion_id": "658676608",
        "commented_code": "@@ -155,7 +198,9 @@ export class ProjectBase<TServer extends ServerE2E | ServerCt> extends EE {\n         return scaffold.plugins(path.dirname(cfg.pluginsFile), cfg)\n       }\n     })\n-    .then(callbacks.onOpen)\n+    .then((cfg) => {\n+      return this.onOpen(cfg, options)\n+    })",
        "comment_created_at": "2021-06-25T10:54:18+00:00",
        "comment_author": "tgriesser",
        "comment_body": "Nice - would prefer methods over callback args when possible",
        "pr_file_module": null
      }
    ]
  }
]