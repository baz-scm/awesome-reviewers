[
  {
    "discussion_id": "731021042",
    "pr_number": 18494,
    "pr_file": "packages/frontend-shared/cypress/support/mock-graphql/stubgql-Mutation.ts",
    "created_at": "2021-10-18T14:59:54+00:00",
    "commented_code": "ctx.app.projects.push(project)\n \n-    return ctx.app\n+    return true",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "731021042",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18494,
        "pr_file": "packages/frontend-shared/cypress/support/mock-graphql/stubgql-Mutation.ts",
        "discussion_id": "731021042",
        "commented_code": "@@ -19,28 +19,28 @@ export const stubMutation: MaybeResolver<Mutation> = {\n \n     ctx.app.projects.push(project)\n \n-    return ctx.app\n+    return true",
        "comment_created_at": "2021-10-18T14:59:54+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I am still new to GraphQL and Nexus - why do we return `true` for all these instead of the value such as `ctx.app`?\r\n\r\nEdit: is this because we now use the `t.livePlugin`, which means that the client will automatically refetch instead of relying on the return type of the mutation?",
        "pr_file_module": null
      },
      {
        "comment_id": "731049251",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18494,
        "pr_file": "packages/frontend-shared/cypress/support/mock-graphql/stubgql-Mutation.ts",
        "discussion_id": "731021042",
        "commented_code": "@@ -19,28 +19,28 @@ export const stubMutation: MaybeResolver<Mutation> = {\n \n     ctx.app.projects.push(project)\n \n-    return ctx.app\n+    return true",
        "comment_created_at": "2021-10-18T15:26:04+00:00",
        "comment_author": "estrada9166",
        "comment_body": "Yeah! so the reason for returning `true` on these mocks is because the new types for the mutations become `Maybe<Scalars['Boolean']>` based on the `t.liveMutation`, which is going to return `true` if it's specified",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "725037161",
    "pr_number": 18406,
    "pr_file": "packages/graphql/src/schemaTypes/objectTypes/gql-Mutation.ts",
    "created_at": "2021-10-08T13:58:57+00:00",
    "commented_code": "return ctx.coreData.app\n       },\n     })\n+\n+    t.nonNull.field('setCurrentSpec', {\n+      type: 'Project',\n+      description: 'Set the current spec under test',\n+      args: {\n+        spec: nonNull(",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "725037161",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18406,
        "pr_file": "packages/graphql/src/schemaTypes/objectTypes/gql-Mutation.ts",
        "discussion_id": "725037161",
        "commented_code": "@@ -195,5 +196,27 @@ export const mutation = mutationType({\n         return ctx.coreData.app\n       },\n     })\n+\n+    t.nonNull.field('setCurrentSpec', {\n+      type: 'Project',\n+      description: 'Set the current spec under test',\n+      args: {\n+        spec: nonNull(",
        "comment_created_at": "2021-10-08T13:58:57+00:00",
        "comment_author": "tgriesser",
        "comment_body": "we could just send `specId: nonNull(idArg())` since the backend knows what ID corresponds to what spec / pathing?",
        "pr_file_module": null
      },
      {
        "comment_id": "725055078",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18406,
        "pr_file": "packages/graphql/src/schemaTypes/objectTypes/gql-Mutation.ts",
        "discussion_id": "725037161",
        "commented_code": "@@ -195,5 +196,27 @@ export const mutation = mutationType({\n         return ctx.coreData.app\n       },\n     })\n+\n+    t.nonNull.field('setCurrentSpec', {\n+      type: 'Project',\n+      description: 'Set the current spec under test',\n+      args: {\n+        spec: nonNull(",
        "comment_created_at": "2021-10-08T14:21:00+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Good idea, will do - so then we just decode the ID and get the absolute path (which is what we want).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "669560229",
    "pr_number": 17316,
    "pr_file": "packages/server/lib/graphql/entities/Projects.ts",
    "created_at": "2021-07-14T12:18:13+00:00",
    "commented_code": "+import { objectType, extendType, stringArg, nonNull, nullable, enumType } from 'nexus'\n+import { ProjectBase } from '../../project-base'\n+import { projects, TestingType } from '../../projects'\n+\n+const PluginsState = enumType({\n+  name: 'PluginsState',\n+  members: ['uninitialized', 'initializing', 'initialized', 'error'],\n+})\n+\n+const InitPluginsStatus = objectType({\n+  name: 'InitPluginsStatus',\n+  definition (t) {\n+    t.field('state', {\n+      type: PluginsState,\n+    }),\n+    t.nullable.string('message')\n+  },\n+})\n+\n+export const Project = objectType({\n+  name: 'Project',\n+  definition (t) {\n+    t.string('projectRoot')\n+    t.boolean('isOpen')\n+    t.field('plugins', {\n+      type: InitPluginsStatus,\n+    })\n+  },\n+})\n+\n+function formatProject (project: ProjectBase<any>) {\n+  return {\n+    projectRoot: project.projectRoot,\n+    isOpen: project.isOpen,\n+    plugins: project.pluginsStatus,\n+  }\n+}\n+\n+export const Projects = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nonNull.list.field('projects', {\n+      type: 'Project',\n+      resolve (_root, args, ctx) {\n+        return Object.values(projects.projects).map(formatProject)\n+      },\n+    })\n+  },\n+})\n+\n+export const OpenProject = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nullable.field('openProject', {\n+      type: nullable('Project'),\n+      resolve (_root, args, ctx) {\n+        try {\n+          return formatProject(projects.openProject)\n+        } catch (e) {\n+          return null\n+        }\n+      },\n+    })\n+  },\n+})\n+\n+export const InitializePlugins = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('initializePlugins', {\n+      type: InitPluginsStatus,\n+      async resolve (_root, args, ctx) {\n+        await projects.initializePlugins()\n+\n+        return projects.openProject.pluginsStatus\n+      },\n+    })\n+  },\n+})\n+\n+export const AddProject = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('addProject', {\n+      type: nullable('Boolean'),\n+      args: {\n+        projectRoot: nonNull(stringArg()),\n+        testingType: nonNull(stringArg()),\n+      },\n+      async resolve (_root, args, ctx) {\n+        await projects.addProject({\n+          projectRoot: args.projectRoot,\n+          testingType: args.testingType as TestingType,\n+        }, {\n+          isCurrentProject: true,\n+        })",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "669560229",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17316,
        "pr_file": "packages/server/lib/graphql/entities/Projects.ts",
        "discussion_id": "669560229",
        "commented_code": "@@ -0,0 +1,102 @@\n+import { objectType, extendType, stringArg, nonNull, nullable, enumType } from 'nexus'\n+import { ProjectBase } from '../../project-base'\n+import { projects, TestingType } from '../../projects'\n+\n+const PluginsState = enumType({\n+  name: 'PluginsState',\n+  members: ['uninitialized', 'initializing', 'initialized', 'error'],\n+})\n+\n+const InitPluginsStatus = objectType({\n+  name: 'InitPluginsStatus',\n+  definition (t) {\n+    t.field('state', {\n+      type: PluginsState,\n+    }),\n+    t.nullable.string('message')\n+  },\n+})\n+\n+export const Project = objectType({\n+  name: 'Project',\n+  definition (t) {\n+    t.string('projectRoot')\n+    t.boolean('isOpen')\n+    t.field('plugins', {\n+      type: InitPluginsStatus,\n+    })\n+  },\n+})\n+\n+function formatProject (project: ProjectBase<any>) {\n+  return {\n+    projectRoot: project.projectRoot,\n+    isOpen: project.isOpen,\n+    plugins: project.pluginsStatus,\n+  }\n+}\n+\n+export const Projects = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nonNull.list.field('projects', {\n+      type: 'Project',\n+      resolve (_root, args, ctx) {\n+        return Object.values(projects.projects).map(formatProject)\n+      },\n+    })\n+  },\n+})\n+\n+export const OpenProject = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nullable.field('openProject', {\n+      type: nullable('Project'),\n+      resolve (_root, args, ctx) {\n+        try {\n+          return formatProject(projects.openProject)\n+        } catch (e) {\n+          return null\n+        }\n+      },\n+    })\n+  },\n+})\n+\n+export const InitializePlugins = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('initializePlugins', {\n+      type: InitPluginsStatus,\n+      async resolve (_root, args, ctx) {\n+        await projects.initializePlugins()\n+\n+        return projects.openProject.pluginsStatus\n+      },\n+    })\n+  },\n+})\n+\n+export const AddProject = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('addProject', {\n+      type: nullable('Boolean'),\n+      args: {\n+        projectRoot: nonNull(stringArg()),\n+        testingType: nonNull(stringArg()),\n+      },\n+      async resolve (_root, args, ctx) {\n+        await projects.addProject({\n+          projectRoot: args.projectRoot,\n+          testingType: args.testingType as TestingType,\n+        }, {\n+          isCurrentProject: true,\n+        })",
        "comment_created_at": "2021-07-14T12:18:13+00:00",
        "comment_author": "tgriesser",
        "comment_body": "Maybe just `setAsCurrent: Boolean` as part of the mutation?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "669589343",
    "pr_number": 17316,
    "pr_file": "packages/server/lib/graphql/entities/Projects.ts",
    "created_at": "2021-07-14T12:56:25+00:00",
    "commented_code": "+import { objectType, extendType, stringArg, nonNull, nullable, enumType } from 'nexus'\n+import { ProjectBase } from '../../project-base'\n+import { projects, TestingType } from '../../projects'\n+\n+const PluginsState = enumType({\n+  name: 'PluginsState',\n+  members: ['uninitialized', 'initializing', 'initialized', 'error'],\n+})\n+\n+const InitPluginsStatus = objectType({\n+  name: 'InitPluginsStatus',\n+  definition (t) {\n+    t.field('state', {\n+      type: PluginsState,\n+    }),\n+    t.nullable.string('message')\n+  },\n+})\n+\n+export const Project = objectType({\n+  name: 'Project',\n+  definition (t) {\n+    t.string('projectRoot')\n+    t.boolean('isOpen')\n+    t.field('plugins', {\n+      type: InitPluginsStatus,\n+    })\n+  },\n+})\n+\n+function formatProject (project: ProjectBase<any>) {\n+  return {\n+    projectRoot: project.projectRoot,\n+    isOpen: project.isOpen,\n+    plugins: project.pluginsStatus,\n+  }\n+}\n+\n+export const Projects = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nonNull.list.field('projects', {\n+      type: 'Project',\n+      resolve (_root, args, ctx) {\n+        return Object.values(projects.projects).map(formatProject)\n+      },\n+    })\n+  },\n+})\n+\n+export const OpenProject = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nullable.field('openProject', {\n+      type: nullable('Project'),\n+      resolve (_root, args, ctx) {\n+        try {\n+          return formatProject(projects.openProject)\n+        } catch (e) {\n+          return null\n+        }\n+      },\n+    })\n+  },\n+})\n+\n+export const InitializePlugins = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('initializePlugins', {\n+      type: InitPluginsStatus,",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "669589343",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17316,
        "pr_file": "packages/server/lib/graphql/entities/Projects.ts",
        "discussion_id": "669589343",
        "commented_code": "@@ -0,0 +1,102 @@\n+import { objectType, extendType, stringArg, nonNull, nullable, enumType } from 'nexus'\n+import { ProjectBase } from '../../project-base'\n+import { projects, TestingType } from '../../projects'\n+\n+const PluginsState = enumType({\n+  name: 'PluginsState',\n+  members: ['uninitialized', 'initializing', 'initialized', 'error'],\n+})\n+\n+const InitPluginsStatus = objectType({\n+  name: 'InitPluginsStatus',\n+  definition (t) {\n+    t.field('state', {\n+      type: PluginsState,\n+    }),\n+    t.nullable.string('message')\n+  },\n+})\n+\n+export const Project = objectType({\n+  name: 'Project',\n+  definition (t) {\n+    t.string('projectRoot')\n+    t.boolean('isOpen')\n+    t.field('plugins', {\n+      type: InitPluginsStatus,\n+    })\n+  },\n+})\n+\n+function formatProject (project: ProjectBase<any>) {\n+  return {\n+    projectRoot: project.projectRoot,\n+    isOpen: project.isOpen,\n+    plugins: project.pluginsStatus,\n+  }\n+}\n+\n+export const Projects = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nonNull.list.field('projects', {\n+      type: 'Project',\n+      resolve (_root, args, ctx) {\n+        return Object.values(projects.projects).map(formatProject)\n+      },\n+    })\n+  },\n+})\n+\n+export const OpenProject = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nullable.field('openProject', {\n+      type: nullable('Project'),\n+      resolve (_root, args, ctx) {\n+        try {\n+          return formatProject(projects.openProject)\n+        } catch (e) {\n+          return null\n+        }\n+      },\n+    })\n+  },\n+})\n+\n+export const InitializePlugins = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('initializePlugins', {\n+      type: InitPluginsStatus,",
        "comment_created_at": "2021-07-14T12:56:25+00:00",
        "comment_author": "tgriesser",
        "comment_body": "Probably better to resolve with `Project` here, that's the general pattern is to be able to query for the fields that are changed in the mutation in a way that the apollo client can update the normalized cache - in returning just the `status`, you need to manually figure out how you want to update the cache.",
        "pr_file_module": null
      },
      {
        "comment_id": "670138994",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17316,
        "pr_file": "packages/server/lib/graphql/entities/Projects.ts",
        "discussion_id": "669589343",
        "commented_code": "@@ -0,0 +1,102 @@\n+import { objectType, extendType, stringArg, nonNull, nullable, enumType } from 'nexus'\n+import { ProjectBase } from '../../project-base'\n+import { projects, TestingType } from '../../projects'\n+\n+const PluginsState = enumType({\n+  name: 'PluginsState',\n+  members: ['uninitialized', 'initializing', 'initialized', 'error'],\n+})\n+\n+const InitPluginsStatus = objectType({\n+  name: 'InitPluginsStatus',\n+  definition (t) {\n+    t.field('state', {\n+      type: PluginsState,\n+    }),\n+    t.nullable.string('message')\n+  },\n+})\n+\n+export const Project = objectType({\n+  name: 'Project',\n+  definition (t) {\n+    t.string('projectRoot')\n+    t.boolean('isOpen')\n+    t.field('plugins', {\n+      type: InitPluginsStatus,\n+    })\n+  },\n+})\n+\n+function formatProject (project: ProjectBase<any>) {\n+  return {\n+    projectRoot: project.projectRoot,\n+    isOpen: project.isOpen,\n+    plugins: project.pluginsStatus,\n+  }\n+}\n+\n+export const Projects = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nonNull.list.field('projects', {\n+      type: 'Project',\n+      resolve (_root, args, ctx) {\n+        return Object.values(projects.projects).map(formatProject)\n+      },\n+    })\n+  },\n+})\n+\n+export const OpenProject = extendType({\n+  type: 'Query',\n+  definition (t) {\n+    t.nullable.field('openProject', {\n+      type: nullable('Project'),\n+      resolve (_root, args, ctx) {\n+        try {\n+          return formatProject(projects.openProject)\n+        } catch (e) {\n+          return null\n+        }\n+      },\n+    })\n+  },\n+})\n+\n+export const InitializePlugins = extendType({\n+  type: 'Mutation',\n+  definition (t) {\n+    t.nonNull.field('initializePlugins', {\n+      type: InitPluginsStatus,",
        "comment_created_at": "2021-07-15T05:15:11+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I updated all the mutations and queries to return `Project`, it feels much more natural now.",
        "pr_file_module": null
      }
    ]
  }
]