[
  {
    "discussion_id": "741668475",
    "pr_number": 18743,
    "pr_file": "packages/frontend-shared/src/gql-components/HeaderBarContent.vue",
    "created_at": "2021-11-03T07:29:54+00:00",
    "commented_code": "}\n }\n \n+const savedState = computed(() => {\n+  return props.gql?.app?.activeProject?.savedState\n+})\n+\n+const cloudProjectId = computed(() => {\n+  return props.gql?.app?.activeProject?.config?.find((item: { field: string }) => item.field === 'projectId')?.value\n+})\n+\n const props = defineProps<{\n   gql: HeaderBar_HeaderBarContentFragment,\n   showBrowsers?: boolean,\n-  pageName?: string\n+  pageName?: string,\n+  allowAutomaticPromptOpen?: boolean\n }>()\n \n const { t } = useI18n()\n \n+const prompts = sortBy([\n+  {\n+    slug: 'ci1',\n+    interval: interval('4 days'),\n+    noProjectId: true,\n+  },\n+  {\n+    slug: 'orchestration1',\n+    noProjectId: true,\n+  },\n+], 'interval')\n+\n+watch(savedState, (newVal) => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "741668475",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18743,
        "pr_file": "packages/frontend-shared/src/gql-components/HeaderBarContent.vue",
        "discussion_id": "741668475",
        "commented_code": "@@ -139,12 +146,76 @@ const clearActiveProject = () => {\n   }\n }\n \n+const savedState = computed(() => {\n+  return props.gql?.app?.activeProject?.savedState\n+})\n+\n+const cloudProjectId = computed(() => {\n+  return props.gql?.app?.activeProject?.config?.find((item: { field: string }) => item.field === 'projectId')?.value\n+})\n+\n const props = defineProps<{\n   gql: HeaderBar_HeaderBarContentFragment,\n   showBrowsers?: boolean,\n-  pageName?: string\n+  pageName?: string,\n+  allowAutomaticPromptOpen?: boolean\n }>()\n \n const { t } = useI18n()\n \n+const prompts = sortBy([\n+  {\n+    slug: 'ci1',\n+    interval: interval('4 days'),\n+    noProjectId: true,\n+  },\n+  {\n+    slug: 'orchestration1',\n+    noProjectId: true,\n+  },\n+], 'interval')\n+\n+watch(savedState, (newVal) => {",
        "comment_created_at": "2021-11-03T07:29:54+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Instead of creating a ref for `promptToShow` then watching and mutating it based on `props`, shouldn't we just make `promptToShow` a computed value? \r\n\r\n```ts\r\nconst promptToShow = computed(() => {\r\n  // ... various logic around shouldShowPrompt, etc ...\r\n  return prompts[props.gql?.app?.activeProject?.savedState]\r\n})\r\n```\r\n\r\nThen for `clear-force-open`, instead of setting `promptToShow = ''`, we would just have a boolean such as `shouldShowPrompt` and set it to `false`. Unless I'm missing something, it seems like this would reduce the amount of computations and watchers needed.\r\n\r\nBasically when you combine a `watch` with a reactive value that then assigns another reactive value, you are basically just re-inventing `computed`. In this case, the prompt to show is just derived data from `props`, so we should be able to do it with a single `computed`. I think `watch` is generally useful for a side effect such as making an API call, etc, it feels like a code smell to use it to just reassign to another reactive variable. \r\n\r\nIf it helps, `computed` also takes an object of options with `get` and `set`: https://v3.vuejs.org/guide/reactivity-computed-watchers.html#computed-values",
        "pr_file_module": null
      },
      {
        "comment_id": "742092991",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18743,
        "pr_file": "packages/frontend-shared/src/gql-components/HeaderBarContent.vue",
        "discussion_id": "741668475",
        "commented_code": "@@ -139,12 +146,76 @@ const clearActiveProject = () => {\n   }\n }\n \n+const savedState = computed(() => {\n+  return props.gql?.app?.activeProject?.savedState\n+})\n+\n+const cloudProjectId = computed(() => {\n+  return props.gql?.app?.activeProject?.config?.find((item: { field: string }) => item.field === 'projectId')?.value\n+})\n+\n const props = defineProps<{\n   gql: HeaderBar_HeaderBarContentFragment,\n   showBrowsers?: boolean,\n-  pageName?: string\n+  pageName?: string,\n+  allowAutomaticPromptOpen?: boolean\n }>()\n \n const { t } = useI18n()\n \n+const prompts = sortBy([\n+  {\n+    slug: 'ci1',\n+    interval: interval('4 days'),\n+    noProjectId: true,\n+  },\n+  {\n+    slug: 'orchestration1',\n+    noProjectId: true,\n+  },\n+], 'interval')\n+\n+watch(savedState, (newVal) => {",
        "comment_created_at": "2021-11-03T15:59:47+00:00",
        "comment_author": "marktnoonan",
        "comment_body": "I've cleaned this up a bit and removed the watcher. If and when the time comes to get more sophisticated with these prompts there will be some logic to revisit around this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "741671881",
    "pr_number": 18743,
    "pr_file": "packages/frontend-shared/src/gql-components/topnav/TopNav.vue",
    "created_at": "2021-11-03T07:37:13+00:00",
    "commented_code": "const props = defineProps<{\n   gql: TopNavFragment,\n-  showBrowsers?: boolean\n+  showBrowsers?: boolean,\n+  forceOpenDocs?: boolean\n+}>()\n+\n+const emit = defineEmits<{\n+  (e: 'clearForceOpen'): void,\n }>()\n \n-const docsMenuVariant: Ref<'main' | 'orchestration' | 'ci'> = ref('main')\n+const docsMenuVariant: Ref<DocsMenuVariant> = ref('main')\n \n-const promptsEl: Ref<HTMLElement | null> = ref(null)\n+const promptsEl: Ref<ComponentPublicInstance | null> = ref(null)\n+\n+watch(() => props.forceOpenDocs, (newVal) => {\n+  if (newVal === true) {\n+    docsMenuVariant.value = 'ci1'\n+  } else {\n+    docsMenuVariant.value = 'main'\n+  }\n+}, {\n+  immediate: true,\n+})",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "741671881",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18743,
        "pr_file": "packages/frontend-shared/src/gql-components/topnav/TopNav.vue",
        "discussion_id": "741671881",
        "commented_code": "@@ -225,17 +239,39 @@ const handleBrowserChoice = async (browser) => {\n \n const props = defineProps<{\n   gql: TopNavFragment,\n-  showBrowsers?: boolean\n+  showBrowsers?: boolean,\n+  forceOpenDocs?: boolean\n+}>()\n+\n+const emit = defineEmits<{\n+  (e: 'clearForceOpen'): void,\n }>()\n \n-const docsMenuVariant: Ref<'main' | 'orchestration' | 'ci'> = ref('main')\n+const docsMenuVariant: Ref<DocsMenuVariant> = ref('main')\n \n-const promptsEl: Ref<HTMLElement | null> = ref(null)\n+const promptsEl: Ref<ComponentPublicInstance | null> = ref(null)\n+\n+watch(() => props.forceOpenDocs, (newVal) => {\n+  if (newVal === true) {\n+    docsMenuVariant.value = 'ci1'\n+  } else {\n+    docsMenuVariant.value = 'main'\n+  }\n+}, {\n+  immediate: true,\n+})",
        "comment_created_at": "2021-11-03T07:37:13+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Can consider `watchEffect` which is like `watch` and `immediate: true` by default. It will automatically collect all reactive dependencies and re-run when they change. Could also be a ternary:\r\n\r\n```ts\r\nwatchEffect(() => {\r\n  docsMenuVariant.value = props.forceOpenDocs ? 'ci1' : 'main'\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "742004040",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18743,
        "pr_file": "packages/frontend-shared/src/gql-components/topnav/TopNav.vue",
        "discussion_id": "741671881",
        "commented_code": "@@ -225,17 +239,39 @@ const handleBrowserChoice = async (browser) => {\n \n const props = defineProps<{\n   gql: TopNavFragment,\n-  showBrowsers?: boolean\n+  showBrowsers?: boolean,\n+  forceOpenDocs?: boolean\n+}>()\n+\n+const emit = defineEmits<{\n+  (e: 'clearForceOpen'): void,\n }>()\n \n-const docsMenuVariant: Ref<'main' | 'orchestration' | 'ci'> = ref('main')\n+const docsMenuVariant: Ref<DocsMenuVariant> = ref('main')\n \n-const promptsEl: Ref<HTMLElement | null> = ref(null)\n+const promptsEl: Ref<ComponentPublicInstance | null> = ref(null)\n+\n+watch(() => props.forceOpenDocs, (newVal) => {\n+  if (newVal === true) {\n+    docsMenuVariant.value = 'ci1'\n+  } else {\n+    docsMenuVariant.value = 'main'\n+  }\n+}, {\n+  immediate: true,\n+})",
        "comment_created_at": "2021-11-03T14:35:17+00:00",
        "comment_author": "marktnoonan",
        "comment_body": "Nice, I haven't used watchEffect yet, updated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "727675767",
    "pr_number": 18465,
    "pr_file": "packages/launchpad/src/global/GlobalProjectCard.vue",
    "created_at": "2021-10-13T03:44:46+00:00",
    "commented_code": "<button\n       class=\"h-10\"\n       data-testid=\"removeProjectButton\"\n-      @click=\"$emit('removeProject', props.gql.projectRoot)\"",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "727675767",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18465,
        "pr_file": "packages/launchpad/src/global/GlobalProjectCard.vue",
        "discussion_id": "727675767",
        "commented_code": "@@ -16,7 +16,7 @@\n     <button\n       class=\"h-10\"\n       data-testid=\"removeProjectButton\"\n-      @click=\"$emit('removeProject', props.gql.projectRoot)\"",
        "comment_created_at": "2021-10-13T03:44:46+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "We should not do `$emit`, since we do not get type safety. We should always use the `emit` function returned from `defineEmits`.",
        "pr_file_module": null
      },
      {
        "comment_id": "729963325",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18465,
        "pr_file": "packages/launchpad/src/global/GlobalProjectCard.vue",
        "discussion_id": "727675767",
        "commented_code": "@@ -16,7 +16,7 @@\n     <button\n       class=\"h-10\"\n       data-testid=\"removeProjectButton\"\n-      @click=\"$emit('removeProject', props.gql.projectRoot)\"",
        "comment_created_at": "2021-10-15T16:26:48+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "Reasonable logic now that `defineEmits` is always around.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "680705597",
    "pr_number": 17553,
    "pr_file": "packages/launchpad/src/components/Button.vue",
    "created_at": "2021-08-02T07:08:24+00:00",
    "commented_code": "<template>\n   <button\n-    class=\"\n-      border\n-      px-4\n-      py-2\n-      rounded\n-      text-sm\n-      focus:border-indigo-600 focus:outline-transparent\n-    \"\n-    :class=\"variantClasses + ' ' + additionalClasses\"\n+    style=\"width: fit-content\"\n+    class=\"flex items-center border rounded-sm gap-8px focus:border-indigo-600 focus:outline-transparent\"\n+    :class=\"classes\"\n     @click=\"$emit('click')\"\n   >\n-    <slot />\n+    <span v-if=\"prefixIcon || $slots.prefix\" :class=\"iconClasses\" class=\"justify-self-start\">\n+      <slot name=\"prefix\">\n+        <Icon :icon=\"prefixIcon\" :class=\"prefixIconClass\" />\n+      </slot>\n+    </span>\n+    <span class=\"flex-grow\">\n+      <slot />\n+    </span>\n+    <span v-if=\"suffixIcon || $slots.suffix\" :class=\"iconClasses\" class=\"justify-self-end\">\n+      <slot name=\"suffix\">\n+        <Icon :icon=\"suffixIcon\" :class=\"suffixIconClass\" />\n+      </slot>\n+    </span>\n   </button>\n </template>\n \n-<script lang=\"ts\">\n-import { defineComponent, PropType } from \"vue\";\n+<script lang=\"ts\" setup>\n+import { defineEmit, defineProps, PropType } from \"vue\"\n+import type { IconType } from '../types'\n \n const VariantClassesTable = {\n   primary: \"border-indigo-600 bg-indigo-600 text-white\",\n   outline: \"border-gray-200 text-indigo-600\",\n   link: \"border-transparent text-indigo-600\",\n-};\n-\n-export default defineComponent({\n-  emits: { click: null },\n-  props: {\n-    variant: {\n-      type: String as PropType<\"primary\" | \"outline\" | \"link\">,\n-      default: \"primary\",\n-    },\n-    class: {\n-      type: String,\n-      default: \"\",\n-    },\n-  },\n-  setup(props) {\n-    const variantClasses = VariantClassesTable[props.variant];\n+}\n+\n+const SizeClassesTable = {\n+  sm: \"px-1 py-1 text-xs\",\n+  md: 'px-2 py-1 text-xs',\n+  lg: \"px-4 py-2 text-sm\",\n+  xl: \"px-6 py-3 text-lg\"\n+}\n+\n+const IconClassesTable = {\n+  md: \"h-1.25em w-1.25em\",\n+  lg: \"h-2em w-2m\",\n+  xl: \"h-2.5em w-2.5em\"\n+}\n \n-    return { variantClasses, additionalClasses: props.class };\n+defineEmit(['click'])\n+\n+const props = defineProps({",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "680705597",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17553,
        "pr_file": "packages/launchpad/src/components/Button.vue",
        "discussion_id": "680705597",
        "commented_code": "@@ -1,45 +1,85 @@\n <template>\n   <button\n-    class=\"\n-      border\n-      px-4\n-      py-2\n-      rounded\n-      text-sm\n-      focus:border-indigo-600 focus:outline-transparent\n-    \"\n-    :class=\"variantClasses + ' ' + additionalClasses\"\n+    style=\"width: fit-content\"\n+    class=\"flex items-center border rounded-sm gap-8px focus:border-indigo-600 focus:outline-transparent\"\n+    :class=\"classes\"\n     @click=\"$emit('click')\"\n   >\n-    <slot />\n+    <span v-if=\"prefixIcon || $slots.prefix\" :class=\"iconClasses\" class=\"justify-self-start\">\n+      <slot name=\"prefix\">\n+        <Icon :icon=\"prefixIcon\" :class=\"prefixIconClass\" />\n+      </slot>\n+    </span>\n+    <span class=\"flex-grow\">\n+      <slot />\n+    </span>\n+    <span v-if=\"suffixIcon || $slots.suffix\" :class=\"iconClasses\" class=\"justify-self-end\">\n+      <slot name=\"suffix\">\n+        <Icon :icon=\"suffixIcon\" :class=\"suffixIconClass\" />\n+      </slot>\n+    </span>\n   </button>\n </template>\n \n-<script lang=\"ts\">\n-import { defineComponent, PropType } from \"vue\";\n+<script lang=\"ts\" setup>\n+import { defineEmit, defineProps, PropType } from \"vue\"\n+import type { IconType } from '../types'\n \n const VariantClassesTable = {\n   primary: \"border-indigo-600 bg-indigo-600 text-white\",\n   outline: \"border-gray-200 text-indigo-600\",\n   link: \"border-transparent text-indigo-600\",\n-};\n-\n-export default defineComponent({\n-  emits: { click: null },\n-  props: {\n-    variant: {\n-      type: String as PropType<\"primary\" | \"outline\" | \"link\">,\n-      default: \"primary\",\n-    },\n-    class: {\n-      type: String,\n-      default: \"\",\n-    },\n-  },\n-  setup(props) {\n-    const variantClasses = VariantClassesTable[props.variant];\n+}\n+\n+const SizeClassesTable = {\n+  sm: \"px-1 py-1 text-xs\",\n+  md: 'px-2 py-1 text-xs',\n+  lg: \"px-4 py-2 text-sm\",\n+  xl: \"px-6 py-3 text-lg\"\n+}\n+\n+const IconClassesTable = {\n+  md: \"h-1.25em w-1.25em\",\n+  lg: \"h-2em w-2m\",\n+  xl: \"h-2.5em w-2.5em\"\n+}\n \n-    return { variantClasses, additionalClasses: props.class };\n+defineEmit(['click'])\n+\n+const props = defineProps({",
        "comment_created_at": "2021-08-02T07:08:24+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Any reason not to use the more concise and closer to the TS generic syntax?\r\n\r\n```ts\r\ndefineProps<{\r\n  type: IconType\r\n}>\r\n```\r\n\r\netc? Then we don't need the `as` or `PropType` casts - less work for Volar, so the completion should be much faster.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "680718884",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17553,
        "pr_file": "packages/launchpad/src/components/Button.vue",
        "discussion_id": "680705597",
        "commented_code": "@@ -1,45 +1,85 @@\n <template>\n   <button\n-    class=\"\n-      border\n-      px-4\n-      py-2\n-      rounded\n-      text-sm\n-      focus:border-indigo-600 focus:outline-transparent\n-    \"\n-    :class=\"variantClasses + ' ' + additionalClasses\"\n+    style=\"width: fit-content\"\n+    class=\"flex items-center border rounded-sm gap-8px focus:border-indigo-600 focus:outline-transparent\"\n+    :class=\"classes\"\n     @click=\"$emit('click')\"\n   >\n-    <slot />\n+    <span v-if=\"prefixIcon || $slots.prefix\" :class=\"iconClasses\" class=\"justify-self-start\">\n+      <slot name=\"prefix\">\n+        <Icon :icon=\"prefixIcon\" :class=\"prefixIconClass\" />\n+      </slot>\n+    </span>\n+    <span class=\"flex-grow\">\n+      <slot />\n+    </span>\n+    <span v-if=\"suffixIcon || $slots.suffix\" :class=\"iconClasses\" class=\"justify-self-end\">\n+      <slot name=\"suffix\">\n+        <Icon :icon=\"suffixIcon\" :class=\"suffixIconClass\" />\n+      </slot>\n+    </span>\n   </button>\n </template>\n \n-<script lang=\"ts\">\n-import { defineComponent, PropType } from \"vue\";\n+<script lang=\"ts\" setup>\n+import { defineEmit, defineProps, PropType } from \"vue\"\n+import type { IconType } from '../types'\n \n const VariantClassesTable = {\n   primary: \"border-indigo-600 bg-indigo-600 text-white\",\n   outline: \"border-gray-200 text-indigo-600\",\n   link: \"border-transparent text-indigo-600\",\n-};\n-\n-export default defineComponent({\n-  emits: { click: null },\n-  props: {\n-    variant: {\n-      type: String as PropType<\"primary\" | \"outline\" | \"link\">,\n-      default: \"primary\",\n-    },\n-    class: {\n-      type: String,\n-      default: \"\",\n-    },\n-  },\n-  setup(props) {\n-    const variantClasses = VariantClassesTable[props.variant];\n+}\n+\n+const SizeClassesTable = {\n+  sm: \"px-1 py-1 text-xs\",\n+  md: 'px-2 py-1 text-xs',\n+  lg: \"px-4 py-2 text-sm\",\n+  xl: \"px-6 py-3 text-lg\"\n+}\n+\n+const IconClassesTable = {\n+  md: \"h-1.25em w-1.25em\",\n+  lg: \"h-2em w-2m\",\n+  xl: \"h-2.5em w-2.5em\"\n+}\n \n-    return { variantClasses, additionalClasses: props.class };\n+defineEmit(['click'])\n+\n+const props = defineProps({",
        "comment_created_at": "2021-08-02T07:31:54+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "Yes. `withDefaults` isn't on this version of Vue. Need to update to 3.2",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "680639778",
    "pr_number": 17550,
    "pr_file": "packages/launchpad/src/components/PackagesList.vue",
    "created_at": "2021-08-02T04:04:51+00:00",
    "commented_code": "}\n `\n \n-export default defineComponent({\n-  props: {\n-    gql: {\n-      type: Object as PropType<PackagesListFragment>,\n-      required: true\n-    }\n-  },\n-  setup(props) {\n-    return { \n-      packagesToInstall: computed(() => props.gql.packagesToInstall)\n-    };\n-  },\n-});\n+const props = defineProps<{\n+  gql: PackagesListFragment\n+}>()\n+\n+const packagesToInstall = computed(() => props.gql.packagesToInstall)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "680639778",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 17550,
        "pr_file": "packages/launchpad/src/components/PackagesList.vue",
        "discussion_id": "680639778",
        "commented_code": "@@ -26,17 +26,9 @@ fragment PackagesList on Wizard {\n }\n `\n \n-export default defineComponent({\n-  props: {\n-    gql: {\n-      type: Object as PropType<PackagesListFragment>,\n-      required: true\n-    }\n-  },\n-  setup(props) {\n-    return { \n-      packagesToInstall: computed(() => props.gql.packagesToInstall)\n-    };\n-  },\n-});\n+const props = defineProps<{\n+  gql: PackagesListFragment\n+}>()\n+\n+const packagesToInstall = computed(() => props.gql.packagesToInstall)",
        "comment_created_at": "2021-08-02T04:04:51+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Typing `props.` gives us immediate TS inference - no awkward pause while the Volar language server figures out what to do.",
        "pr_file_module": null
      }
    ]
  }
]