[
  {
    "discussion_id": "1100656851",
    "pr_number": 25738,
    "pr_file": "packages/frontend-shared/src/gql-components/ChooseExternalEditor.cy.tsx",
    "created_at": "2023-02-08T20:38:55+00:00",
    "commented_code": "cy.get('[data-cy=\"custom-editor\"]').should('not.exist')\n \n-    cy.get('@chooseEditor').click()\n+    cy.contains('Vim').click()",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1100656851",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/gql-components/ChooseExternalEditor.cy.tsx",
        "discussion_id": "1100656851",
        "commented_code": "@@ -39,7 +39,7 @@ describe('ChooseExternalEditor', { viewportHeight: 400, viewportWidth: 300 }, ()\n \n     cy.get('[data-cy=\"custom-editor\"]').should('not.exist')\n \n-    cy.get('@chooseEditor').click()\n+    cy.contains('Vim').click()",
        "comment_created_at": "2023-02-08T20:38:55+00:00",
        "comment_author": "flotwig",
        "comment_body": "Are this and `ChooseExternalEditorModal.cy.tsx`'s changes are to avoid flake unrelated to this PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "1106196750",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/gql-components/ChooseExternalEditor.cy.tsx",
        "discussion_id": "1100656851",
        "commented_code": "@@ -39,7 +39,7 @@ describe('ChooseExternalEditor', { viewportHeight: 400, viewportWidth: 300 }, ()\n \n     cy.get('[data-cy=\"custom-editor\"]').should('not.exist')\n \n-    cy.get('@chooseEditor').click()\n+    cy.contains('Vim').click()",
        "comment_created_at": "2023-02-14T18:20:15+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "No, it's actually a required change. \r\n\r\n```\r\n    cy.contains(defaultMessages.settingsPage.editor.noEditorSelectedPlaceholder)\r\n    .should('be.visible')\r\n    .as('chooseEditor')\r\n```\r\n\r\nThis previously selected a *specific element* as the alias - since .should() was not a query, you ended up with the alias `chooseEditor: [<input>]`. \r\n\r\nSince .should() is now a query, you instead ended up with the alias `chooseEditor: [undefined, .contains('Choose Editor'), .should('be.visible')]`. Once we've selected an editor, the alias doesn't match anything on the page; there's no element that contains \"choose editor\" any more. An alias of `[undefined, .contains('Choose Editor')]` wouldn't work either; it only worked because .should() was causing a potential detached DOM error by forcing the alias into a specific element as a subject.\r\n\r\nThis could instead be fixed by moving to a test selector, something like\r\n\r\n```\r\n    cy.get('[cy-data'=\"choose-editor\"]).as('chooseEditor')\r\n\r\n    cy.get('@chooseEditor').contains('Choose Editor').should('be.visible')\r\n```\r\n\r\nbut I found it more convenient to make this change change instead (just re-selecting an element that now contains 'Vim') rather than relying on an alias.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "738519330",
    "pr_number": 18670,
    "pr_file": "packages/app/src/spec/SpecRunnerHeader.spec.tsx",
    "created_at": "2021-10-28T15:38:30+00:00",
    "commented_code": "+import SpecRunnerHeader from './SpecRunnerHeader.vue'\n+import { useAutStore } from '../store'\n+import { SpecRunnerHeaderFragmentDoc } from '../generated/graphql-test'\n+\n+describe('SpecRunnerHeader', () => {\n+  it('renders', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.updateUrl('http://localhost:4000')\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+  })\n+\n+  it('disabled selector playground and studio buttons when isRunning is true', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.setIsRunning(true)\n+\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+\n+    cy.get('[data-cy=\"header-studio\"]').should('be.disabled')\n+    cy.get('[data-cy=\"header-selector\"]').should('be.disabled')",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "738519330",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18670,
        "pr_file": "packages/app/src/spec/SpecRunnerHeader.spec.tsx",
        "discussion_id": "738519330",
        "commented_code": "@@ -0,0 +1,107 @@\n+import SpecRunnerHeader from './SpecRunnerHeader.vue'\n+import { useAutStore } from '../store'\n+import { SpecRunnerHeaderFragmentDoc } from '../generated/graphql-test'\n+\n+describe('SpecRunnerHeader', () => {\n+  it('renders', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.updateUrl('http://localhost:4000')\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+  })\n+\n+  it('disabled selector playground and studio buttons when isRunning is true', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.setIsRunning(true)\n+\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+\n+    cy.get('[data-cy=\"header-studio\"]').should('be.disabled')\n+    cy.get('[data-cy=\"header-selector\"]').should('be.disabled')",
        "comment_created_at": "2021-10-28T15:38:30+00:00",
        "comment_author": "marktnoonan",
        "comment_body": "It's not blocking to the PR but I did want to mention that for selecting an interactive element, I have a strong preference for using the accessible name to select the element unless there's a compelling reason not to. Eg `cy.contains('button', path.to.text.in.i18n)`.\r\n\r\nThe `cy.get` selector above will still match if somebody takes away the text for styling reasons and doesn't put back in an aria label or something, which seems not ideal. We care that it's a `button` and has an appropriate label.\r\n\r\nWould be good to have a broader conversation about this though and maybe arrive at a standard.",
        "pr_file_module": null
      },
      {
        "comment_id": "738860116",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18670,
        "pr_file": "packages/app/src/spec/SpecRunnerHeader.spec.tsx",
        "discussion_id": "738519330",
        "commented_code": "@@ -0,0 +1,107 @@\n+import SpecRunnerHeader from './SpecRunnerHeader.vue'\n+import { useAutStore } from '../store'\n+import { SpecRunnerHeaderFragmentDoc } from '../generated/graphql-test'\n+\n+describe('SpecRunnerHeader', () => {\n+  it('renders', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.updateUrl('http://localhost:4000')\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+  })\n+\n+  it('disabled selector playground and studio buttons when isRunning is true', () => {\n+    const autStore = useAutStore()\n+\n+    autStore.setIsRunning(true)\n+\n+    cy.mountFragment(SpecRunnerHeaderFragmentDoc, {\n+      render: (gqlVal) => {\n+        return <SpecRunnerHeader gql={gqlVal} />\n+      },\n+    })\n+\n+    cy.get('[data-cy=\"header-studio\"]').should('be.disabled')\n+    cy.get('[data-cy=\"header-selector\"]').should('be.disabled')",
        "comment_created_at": "2021-10-29T00:34:10+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I agree with this, the main reason I used data selectors here is there are no accessibility selectors (yet), I just hacked together a UI to test the wiring out and give us some basic protection against regressions as we iterate quickly over the next few weeks. \r\n\r\nWe should add those and update the tests with better a11y conventions when someone gets around to actually styling these based on the mocks (probably you, since you seem to be emerging at the resident UI and a11y guy). This should be in the next sprint.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "439608850",
    "pr_number": 7646,
    "pr_file": "packages/reporter/src/commands/command.spec.tsx",
    "created_at": "2020-06-12T19:38:01+00:00",
    "commented_code": "expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "439608850",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.spec.tsx",
        "discussion_id": "439608850",
        "commented_code": "@@ -295,6 +297,12 @@ describe('<Command />', () => {\n \n       expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
        "comment_created_at": "2020-06-12T19:38:01+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "I do not believe this spec can fail meaningfully. It only shows that Progress is rendered, not that it works properly.\r\n\r\nDo you understand why this spec was failing when you were looking for the DOM structure of `Progress` to assert the indicator was working? (e.g. the difference between shallow and a full mount?)",
        "pr_file_module": null
      },
      {
        "comment_id": "439609427",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.spec.tsx",
        "discussion_id": "439608850",
        "commented_code": "@@ -295,6 +297,12 @@ describe('<Command />', () => {\n \n       expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
        "comment_created_at": "2020-06-12T19:39:39+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "If we're going to use shallow mount, I would break this up into two specs:\r\n1. Progress being rendered and passed the correct model (ensures the contract between parent Command component and Progress is correct)\r\n2. Progress having its own unit tests that are based on its internal structure + applied classes (ensures your progress timer is actually working with the Date model etc)\r\n\r\nAlternatively, do a full mount (not shallow) and combine concerns 1 & 2",
        "pr_file_module": null
      },
      {
        "comment_id": "439610674",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.spec.tsx",
        "discussion_id": "439608850",
        "commented_code": "@@ -295,6 +297,12 @@ describe('<Command />', () => {\n \n       expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
        "comment_created_at": "2020-06-12T19:43:07+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "A word of warning: testing timers can be particularly annoying at the unit/component level, so you could _instead_ choose to do an e2e spec to validate this, which may be easier to build and maintain \ud83d\ude47\u200d\u2640\ufe0f \r\n\r\nGiven the bugs we've been able to catch by manually testing, we should definitely add additional test coverage.",
        "pr_file_module": null
      },
      {
        "comment_id": "439611892",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.spec.tsx",
        "discussion_id": "439608850",
        "commented_code": "@@ -295,6 +297,12 @@ describe('<Command />', () => {\n \n       expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
        "comment_created_at": "2020-06-12T19:46:23+00:00",
        "comment_author": "panzarino",
        "comment_body": "That is correct, but I'm not quite sure how to test it otherwise. Because of the way that the animation progress and time is calculated, its nearly impossible to mock that behavior unless somehow `Date.now()` can be stubbed. So, I've reverted to just ensuring that it gets rendered.\r\n\r\nI believe it was failing due to the use of `shallow` which prevents assertions on child components. However, all of the \"logic\" around displaying the bar has now been moved to CSS, so again it's not conditional that the `div` gets rendered, so I figured just checking the component would be sufficient.\r\n\r\nIdeally, there would be a way to ensure that the animations were being calculated correctly because that is the important thing to test here, but that requires stubbing `Date.now()`.",
        "pr_file_module": null
      },
      {
        "comment_id": "439612626",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7646,
        "pr_file": "packages/reporter/src/commands/command.spec.tsx",
        "discussion_id": "439608850",
        "commented_code": "@@ -295,6 +297,12 @@ describe('<Command />', () => {\n \n       expect(component.find('.command-number')).to.have.text('1')\n     })\n+\n+    it('displays the timeout progress indicator', () => {\n+      const component = shallow(<Command model={model({ state: 'pending' })} aliasesWithDuplicates={null} />)\n+\n+      expect(component.find(Progress).first()).to.exist",
        "comment_created_at": "2020-06-12T19:48:15+00:00",
        "comment_author": "panzarino",
        "comment_body": "I agree that perhaps an `e2e` test would be better, also to ensure that the `log` model remains correct, however I am still unsure as to how to validate that the correct timing is calculated.",
        "pr_file_module": null
      }
    ]
  }
]