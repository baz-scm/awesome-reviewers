[
  {
    "discussion_id": "1100660157",
    "pr_number": 25738,
    "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
    "created_at": "2023-02-08T20:43:04+00:00",
    "commented_code": "cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1100660157",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
        "discussion_id": "1100660157",
        "commented_code": "@@ -12,7 +12,7 @@ describe('<Input/>', { viewportWidth: 400, viewportHeight: 80 }, () => {\n     cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
        "comment_created_at": "2023-02-08T20:43:04+00:00",
        "comment_author": "flotwig",
        "comment_body": "Why does `.wrap(null)` need to be added here?",
        "pr_file_module": null
      },
      {
        "comment_id": "1106118916",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
        "discussion_id": "1100660157",
        "commented_code": "@@ -12,7 +12,7 @@ describe('<Input/>', { viewportWidth: 400, viewportHeight: 80 }, () => {\n     cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
        "comment_created_at": "2023-02-14T17:12:51+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "As part of this PR, I started enforcing our documented limits:\r\n\r\n![image](https://user-images.githubusercontent.com/3003404/218808329-bd6a6c0f-0a85-4959-8223-c15317fe294c.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3003404/218808200-e7ae107b-5b0a-4e5c-a7d0-1164fd3abd1f.png)\r\n\r\nEnforcing that isn't necessary - I can continue to allow `.should()` to be chained directly off of `cy` just fine. But it seemed like 'while already doing a breaking change around the command' was a good time to add the enforcement.\r\n\r\nSo I can do one of two things:\r\n1. Make sure this is clear in the changelog and migration guide as a breaking change to match our documentation.\r\n2. Remove this change from the PR, and update our docs to match the loose requirements.\r\n\r\nOpinions?",
        "pr_file_module": null
      },
      {
        "comment_id": "1106124047",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
        "discussion_id": "1100660157",
        "commented_code": "@@ -12,7 +12,7 @@ describe('<Input/>', { viewportWidth: 400, viewportHeight: 80 }, () => {\n     cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
        "comment_created_at": "2023-02-14T17:17:31+00:00",
        "comment_author": "flotwig",
        "comment_body": "I pretty commonly use `cy.should()` just to retry functions that assert things, without a subject. Probably I'd do it less if I wasn't usually testing Cy internals, but still, I'm sure it happens in the wild too. \r\n\r\nAlso, I think `cy.should()` having a default subject of `null` or `undefined` makes logical sense.\r\n\r\nFor these reasons, I think I'd prefer # 2, since it avoids extra migration steps and it doesn't cause any logical inconsistency.",
        "pr_file_module": null
      },
      {
        "comment_id": "1106132512",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
        "discussion_id": "1100660157",
        "commented_code": "@@ -12,7 +12,7 @@ describe('<Input/>', { viewportWidth: 400, viewportHeight: 80 }, () => {\n     cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
        "comment_created_at": "2023-02-14T17:25:31+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Number 2 is good by me. :+1: \r\n\r\nThe default subject will be `undefined` (unless someone can make strong case to the contrary, it would be a breaking change).",
        "pr_file_module": null
      },
      {
        "comment_id": "1113524598",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/frontend-shared/src/components/Input.cy.tsx",
        "discussion_id": "1100660157",
        "commented_code": "@@ -12,7 +12,7 @@ describe('<Input/>', { viewportWidth: 400, viewportHeight: 80 }, () => {\n     cy.mount(() => <Input vModel={value.value}/>)\n     cy.get('input').type(textToType, { delay: 0 })\n \n-    cy.should(() => {\n+    cy.wrap(null).should(() => {",
        "comment_created_at": "2023-02-21T20:15:07+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "Docs PR updated with this change - commands now no longer claim you must / can't chain them off `cy`, they call out what they require as a subject instead.\r\n\r\nAlso undid this test change and removed the code forcing it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "543184420",
    "pr_number": 14183,
    "pr_file": "packages/reporter/src/main.tsx",
    "created_at": "2020-12-15T09:32:00+00:00",
    "commented_code": "}\n \n   render () {\n-    const { appState } = this.props\n-\n     return (\n       <div className='reporter'>\n-        <Header appState={appState} statsStore={this.props.statsStore} />\n-        <Runnables\n-          appState={appState}\n-          error={this.props.error}\n-          runnablesStore={this.props.runnablesStore}\n-          scroller={this.props.scroller}\n-          spec={this.props.spec}\n-        />\n-        <ForcedGcWarning\n-          appState={appState}\n-          events={this.props.events}/>\n+        {this.props.specs.map((spec) => (",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "543184420",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14183,
        "pr_file": "packages/reporter/src/main.tsx",
        "discussion_id": "543184420",
        "commented_code": "@@ -60,21 +40,23 @@ class Reporter extends Component<ReporterProps> {\n   }\n \n   render () {\n-    const { appState } = this.props\n-\n     return (\n       <div className='reporter'>\n-        <Header appState={appState} statsStore={this.props.statsStore} />\n-        <Runnables\n-          appState={appState}\n-          error={this.props.error}\n-          runnablesStore={this.props.runnablesStore}\n-          scroller={this.props.scroller}\n-          spec={this.props.spec}\n-        />\n-        <ForcedGcWarning\n-          appState={appState}\n-          events={this.props.events}/>\n+        {this.props.specs.map((spec) => (",
        "comment_created_at": "2020-12-15T09:32:00+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "We probably need a backward compatibility mode, for existing e2e which should not be changed. That's what `runMode` was doing. ",
        "pr_file_module": null
      },
      {
        "comment_id": "543290168",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14183,
        "pr_file": "packages/reporter/src/main.tsx",
        "discussion_id": "543184420",
        "commented_code": "@@ -60,21 +40,23 @@ class Reporter extends Component<ReporterProps> {\n   }\n \n   render () {\n-    const { appState } = this.props\n-\n     return (\n       <div className='reporter'>\n-        <Header appState={appState} statsStore={this.props.statsStore} />\n-        <Runnables\n-          appState={appState}\n-          error={this.props.error}\n-          runnablesStore={this.props.runnablesStore}\n-          scroller={this.props.scroller}\n-          spec={this.props.spec}\n-        />\n-        <ForcedGcWarning\n-          appState={appState}\n-          events={this.props.events}/>\n+        {this.props.specs.map((spec) => (",
        "comment_created_at": "2020-12-15T12:11:13+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Actually this *is* backwards compatible - I updated e2e to always work with an array of specs. At this point it will always be an array with 1 spec in it, like `[{ relative: '...', absolute: '...' }]`. For all tests, it will be `[{ relative: '_all' }]` (or whatever it is).\r\n\r\nThe idea here was to avoid having two modes, and just have one - multi-spec. Then, eventually, e2e can be updated to support multiple specs too (eg, either using a checkbox in the GUI or passing multiple specs to the `--spec` arg). Win win!\r\n\r\nDoes this make sense? We can jump on a call to discuss this more, I went over this design idea w/ @chrisbreiding and @JessicaSachs. See here for a more detailed breakdown: https://cypress-io.atlassian.net/browse/CT-164?focusedCommentId=12692\r\n\r\nWhat do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "543301582",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14183,
        "pr_file": "packages/reporter/src/main.tsx",
        "discussion_id": "543184420",
        "commented_code": "@@ -60,21 +40,23 @@ class Reporter extends Component<ReporterProps> {\n   }\n \n   render () {\n-    const { appState } = this.props\n-\n     return (\n       <div className='reporter'>\n-        <Header appState={appState} statsStore={this.props.statsStore} />\n-        <Runnables\n-          appState={appState}\n-          error={this.props.error}\n-          runnablesStore={this.props.runnablesStore}\n-          scroller={this.props.scroller}\n-          spec={this.props.spec}\n-        />\n-        <ForcedGcWarning\n-          appState={appState}\n-          events={this.props.events}/>\n+        {this.props.specs.map((spec) => (",
        "comment_created_at": "2020-12-15T12:29:51+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "The main thing \u2013 that it requires a new build, it has a new prop, method names, and a logic inside which can be a pain in terms of releasing binary + test runner. I am not aware of this, but in terms of we are doing a giant PR that has a lot of changes this can be hard to keep track of in the existed codebase.  ",
        "pr_file_module": null
      }
    ]
  }
]