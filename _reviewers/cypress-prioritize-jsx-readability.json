[
  {
    "discussion_id": "603807854",
    "pr_number": 15696,
    "pr_file": "packages/runner-ct/src/app/RunnerCt.tsx",
    "created_at": "2021-03-30T06:11:59+00:00",
    "commented_code": "onDragFinished={persistWidth('ctSpecListWidth')}\n           onChange={debounce(updateSpecListWidth)}\n         >\n-          <SpecList\n-            specs={props.state.specs}\n-            selectedFile={state.spec ? state.spec.relative : undefined}\n-            focusSpecList={focusSpecsList}\n-            searchRef={searchRef}\n-            className={cs(styles.specsList, {\n-              'display-none': hideSpecsListIfNecessary(state),\n-            })}\n-            onFileClick={runSpec}\n-          />\n+          {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "603807854",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15696,
        "pr_file": "packages/runner-ct/src/app/RunnerCt.tsx",
        "discussion_id": "603807854",
        "commented_code": "@@ -199,16 +200,37 @@ const RunnerCt = namedObserver('RunnerCt',\n           onDragFinished={persistWidth('ctSpecListWidth')}\n           onChange={debounce(updateSpecListWidth)}\n         >\n-          <SpecList\n-            specs={props.state.specs}\n-            selectedFile={state.spec ? state.spec.relative : undefined}\n-            focusSpecList={focusSpecsList}\n-            searchRef={searchRef}\n-            className={cs(styles.specsList, {\n-              'display-none': hideSpecsListIfNecessary(state),\n-            })}\n-            onFileClick={runSpec}\n-          />\n+          {",
        "comment_created_at": "2021-03-30T06:11:59+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I'm interested in the team's opinion on this style, especially @dmtrKovalenko and @agg23 who have worked on very big React code-bases. In my past experience in React apps, we tried to keep the `return` function simple and logic free, instead opting for a variable. Eg:\r\n\r\n```tsx\r\nconst specListContent = state.specs.length < 1 \r\n  ? <NoSpec />\r\n  : <SpecList />\r\n\r\n// ...\r\n\r\nreturn (\r\n  <div>\r\n    {specListContent}\r\n  </div>\r\n)\r\n```\r\n\r\nI don't have a super strong opinion, while I do personally prefer this style it's not really a big deal either way. What do you guys think?\r\n\r\nUnrelated but since Vue does not give you this option, since it uses `<template>`, the big Vue code-bases I worked on just inline everything, same as what is done here.",
        "pr_file_module": null
      },
      {
        "comment_id": "603928766",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15696,
        "pr_file": "packages/runner-ct/src/app/RunnerCt.tsx",
        "discussion_id": "603807854",
        "commented_code": "@@ -199,16 +200,37 @@ const RunnerCt = namedObserver('RunnerCt',\n           onDragFinished={persistWidth('ctSpecListWidth')}\n           onChange={debounce(updateSpecListWidth)}\n         >\n-          <SpecList\n-            specs={props.state.specs}\n-            selectedFile={state.spec ? state.spec.relative : undefined}\n-            focusSpecList={focusSpecsList}\n-            searchRef={searchRef}\n-            className={cs(styles.specsList, {\n-              'display-none': hideSpecsListIfNecessary(state),\n-            })}\n-            onFileClick={runSpec}\n-          />\n+          {",
        "comment_created_at": "2021-03-30T09:21:17+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "I will prefer inline option because it takes some time to understand what exactly rendered inside div, especially if jsx is pretty big and you need to go to definition to view specListContent. ",
        "pr_file_module": null
      },
      {
        "comment_id": "603929794",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15696,
        "pr_file": "packages/runner-ct/src/app/RunnerCt.tsx",
        "discussion_id": "603807854",
        "commented_code": "@@ -199,16 +200,37 @@ const RunnerCt = namedObserver('RunnerCt',\n           onDragFinished={persistWidth('ctSpecListWidth')}\n           onChange={debounce(updateSpecListWidth)}\n         >\n-          <SpecList\n-            specs={props.state.specs}\n-            selectedFile={state.spec ? state.spec.relative : undefined}\n-            focusSpecList={focusSpecsList}\n-            searchRef={searchRef}\n-            className={cs(styles.specsList, {\n-              'display-none': hideSpecsListIfNecessary(state),\n-            })}\n-            onFileClick={runSpec}\n-          />\n+          {",
        "comment_created_at": "2021-03-30T09:22:46+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "We can reduce amount of inlined jsx by making an element before return. \r\n\r\nin order to make\r\n\r\n```js\r\nstate.specs.length < 1 \r\n  ? createNewSpecFiller\r\n  : <SpecsList /> \r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "604101300",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15696,
        "pr_file": "packages/runner-ct/src/app/RunnerCt.tsx",
        "discussion_id": "603807854",
        "commented_code": "@@ -199,16 +200,37 @@ const RunnerCt = namedObserver('RunnerCt',\n           onDragFinished={persistWidth('ctSpecListWidth')}\n           onChange={debounce(updateSpecListWidth)}\n         >\n-          <SpecList\n-            specs={props.state.specs}\n-            selectedFile={state.spec ? state.spec.relative : undefined}\n-            focusSpecList={focusSpecsList}\n-            searchRef={searchRef}\n-            className={cs(styles.specsList, {\n-              'display-none': hideSpecsListIfNecessary(state),\n-            })}\n-            onFileClick={runSpec}\n-          />\n+          {",
        "comment_created_at": "2021-03-30T13:34:32+00:00",
        "comment_author": "agg23",
        "comment_body": "Agreed with Dmitriy. JSX can be quite hard to parse without inline flow control, and in my opinion the flow control is neat enough that it's easily understood.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "537652240",
    "pr_number": 9551,
    "pr_file": "packages/reporter/src/runnables/runnables.tsx",
    "created_at": "2020-12-07T16:39:10+00:00",
    "commented_code": "error = noTestsError(specPath)\n   }\n \n-  return error ? <RunnablesError error={error} /> : <RunnablesList runnables={runnables} />\n+  if (error) {\n+    return <RunnablesError error={error} />\n+  }\n+\n+  const isLive = specPath === runnablesStore.runningSpec\n+\n+  return <RunnablesList runnables={isLive ? runnables : runnablesHistory[specPath]} />",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "537652240",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 9551,
        "pr_file": "packages/reporter/src/runnables/runnables.tsx",
        "discussion_id": "537652240",
        "commented_code": "@@ -61,10 +61,16 @@ const RunnablesContent = observer(({ runnablesStore, specPath, error }: Runnable\n     error = noTestsError(specPath)\n   }\n \n-  return error ? <RunnablesError error={error} /> : <RunnablesList runnables={runnables} />\n+  if (error) {\n+    return <RunnablesError error={error} />\n+  }\n+\n+  const isLive = specPath === runnablesStore.runningSpec\n+\n+  return <RunnablesList runnables={isLive ? runnables : runnablesHistory[specPath]} />",
        "comment_created_at": "2020-12-07T16:39:10+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "```suggestion\r\n  const isRunning = specPath === runnablesStore.runningSpec\r\n\r\n  return <RunnablesList runnables={isRunning ? runnables : runnablesHistory[specPath]} />\r\n```",
        "pr_file_module": null
      }
    ]
  }
]