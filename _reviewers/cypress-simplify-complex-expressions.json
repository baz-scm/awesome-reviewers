[
  {
    "discussion_id": "815517293",
    "pr_number": 20361,
    "pr_file": "packages/launchpad/src/global/GlobalPage.vue",
    "created_at": "2022-02-28T00:32:31+00:00",
    "commented_code": "}>()\n \n const filteredProjects = computed(() => {\n-  return (props.gql.projects as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)\n+  return ((props.gql.projects || []) as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "815517293",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 20361,
        "pr_file": "packages/launchpad/src/global/GlobalPage.vue",
        "discussion_id": "815517293",
        "commented_code": "@@ -122,7 +122,7 @@ const props = defineProps<{\n }>()\n \n const filteredProjects = computed(() => {\n-  return (props.gql.projects as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)\n+  return ((props.gql.projects || []) as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)",
        "comment_created_at": "2022-02-28T00:32:31+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "I think we can make this cleaner and more idiomatic from a TS and JS point of view with a type guard and using `includes` instead of `indexOf`. I created a PR against this branch, what do you think? \r\n\r\nI created a PR with the change to show you how it looks: https://github.com/cypress-io/cypress/pull/20381/files\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "816130417",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 20361,
        "pr_file": "packages/launchpad/src/global/GlobalPage.vue",
        "discussion_id": "815517293",
        "commented_code": "@@ -122,7 +122,7 @@ const props = defineProps<{\n }>()\n \n const filteredProjects = computed(() => {\n-  return (props.gql.projects as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)\n+  return ((props.gql.projects || []) as GlobalProjectCardFragment[]).filter((p) => p.title.toLowerCase().indexOf(match.value.toLowerCase()) !== -1)",
        "comment_created_at": "2022-02-28T18:06:33+00:00",
        "comment_author": "JessicaSachs",
        "comment_body": "merged",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "741670825",
    "pr_number": 18743,
    "pr_file": "packages/frontend-shared/src/gql-components/topnav/TopNav.vue",
    "created_at": "2021-11-03T07:35:08+00:00",
    "commented_code": "const props = defineProps<{\n   gql: TopNavFragment,\n-  showBrowsers?: boolean\n+  showBrowsers?: boolean,\n+  forceOpenDocs?: boolean\n+}>()\n+\n+const emit = defineEmits<{\n+  (e: 'clearForceOpen'): void,\n }>()\n \n-const docsMenuVariant: Ref<'main' | 'orchestration' | 'ci'> = ref('main')\n+const docsMenuVariant: Ref<DocsMenuVariant> = ref('main')",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "741670825",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18743,
        "pr_file": "packages/frontend-shared/src/gql-components/topnav/TopNav.vue",
        "discussion_id": "741670825",
        "commented_code": "@@ -225,17 +239,39 @@ const handleBrowserChoice = async (browser) => {\n \n const props = defineProps<{\n   gql: TopNavFragment,\n-  showBrowsers?: boolean\n+  showBrowsers?: boolean,\n+  forceOpenDocs?: boolean\n+}>()\n+\n+const emit = defineEmits<{\n+  (e: 'clearForceOpen'): void,\n }>()\n \n-const docsMenuVariant: Ref<'main' | 'orchestration' | 'ci'> = ref('main')\n+const docsMenuVariant: Ref<DocsMenuVariant> = ref('main')",
        "comment_created_at": "2021-11-03T07:35:08+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Can be more concise:\r\n\r\n```ts\r\nconst docsMenuVariant = ref<DocsMenuVariant>('main')\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "430607539",
    "pr_number": 7463,
    "pr_file": "packages/server/lib/config.coffee",
    "created_at": "2020-05-26T18:05:53+00:00",
    "commented_code": "errors.throw(\"SUPPORT_FILE_NOT_FOUND\", obj.supportFile, obj.configFile || CONFIG_DEFAULTS.configFile)\n           debug(\"switching to found file %s\", obj.supportFile)\n     .catch({code: \"MODULE_NOT_FOUND\"}, ->\n-      debug(\"support file %s does not exist\", sf)\n-      ## supportFile doesn't exist on disk\n-      if sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n-        debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n-        return fs.pathExists(sf)\n-        .then (found) ->\n-          if found\n-            debug(\"support folder exists, set supportFile to false\")\n-            ## if the directory exists, set it to false so it's ignored\n-            obj.supportFile = false\n-          else\n-            debug(\"support folder does not exist, set to default index.js\")\n-            ## otherwise, set it up to be scaffolded later\n-            obj.supportFile = path.join(sf, \"index.js\")\n-          return obj\n-      else\n+      debug(\"support JS module %s does not load\", sf)\n+\n+      loadingDefaltSupportFile = sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n+      if !loadingDefaltSupportFile\n         debug(\"support file is not default\")\n         ## they have it explicitly set, so it should be there\n-        errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+        return errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+\n+      ## supportFile doesn't exist on disk?\n+      debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n+      # at this point suport file is probably just support folder\n+      #  like \"<project root>/cypress/support\"\n+      return fs.pathExists(sf)\n+      .then (found) ->\n+        if found\n+          debug(\"support folder exists\")\n+\n+          debug(\"is there index.ts in the support folder %s?\", sf)\n+          tsSupportFilename = path.join(sf, \"index.ts\")\n+          return fs.pathExists(tsSupportFilename)\n+          .then (foundTsFile) ->\n+            if foundTsFile\n+              debug(\"found index TS support file %s\", tsSupportFilename)\n+              obj.supportFile = tsSupportFilename\n+            else\n+              ## if the directory exists, set it to false so it's ignored\n+              debug(\"setting support file to false\")\n+              obj.supportFile = false\n+        else\n+          debug(\"support folder does not exist, set to default index.js\")\n+          ## otherwise, set it up to be scaffolded later\n+          obj.supportFile = path.join(sf, \"index.js\")\n+        return obj",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "430607539",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7463,
        "pr_file": "packages/server/lib/config.coffee",
        "discussion_id": "430607539",
        "commented_code": "@@ -539,25 +549,39 @@ module.exports = {\n             errors.throw(\"SUPPORT_FILE_NOT_FOUND\", obj.supportFile, obj.configFile || CONFIG_DEFAULTS.configFile)\n           debug(\"switching to found file %s\", obj.supportFile)\n     .catch({code: \"MODULE_NOT_FOUND\"}, ->\n-      debug(\"support file %s does not exist\", sf)\n-      ## supportFile doesn't exist on disk\n-      if sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n-        debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n-        return fs.pathExists(sf)\n-        .then (found) ->\n-          if found\n-            debug(\"support folder exists, set supportFile to false\")\n-            ## if the directory exists, set it to false so it's ignored\n-            obj.supportFile = false\n-          else\n-            debug(\"support folder does not exist, set to default index.js\")\n-            ## otherwise, set it up to be scaffolded later\n-            obj.supportFile = path.join(sf, \"index.js\")\n-          return obj\n-      else\n+      debug(\"support JS module %s does not load\", sf)\n+\n+      loadingDefaltSupportFile = sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n+      if !loadingDefaltSupportFile\n         debug(\"support file is not default\")\n         ## they have it explicitly set, so it should be there\n-        errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+        return errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+\n+      ## supportFile doesn't exist on disk?\n+      debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n+      # at this point suport file is probably just support folder\n+      #  like \"<project root>/cypress/support\"\n+      return fs.pathExists(sf)\n+      .then (found) ->\n+        if found\n+          debug(\"support folder exists\")\n+\n+          debug(\"is there index.ts in the support folder %s?\", sf)\n+          tsSupportFilename = path.join(sf, \"index.ts\")\n+          return fs.pathExists(tsSupportFilename)\n+          .then (foundTsFile) ->\n+            if foundTsFile\n+              debug(\"found index TS support file %s\", tsSupportFilename)\n+              obj.supportFile = tsSupportFilename\n+            else\n+              ## if the directory exists, set it to false so it's ignored\n+              debug(\"setting support file to false\")\n+              obj.supportFile = false\n+        else\n+          debug(\"support folder does not exist, set to default index.js\")\n+          ## otherwise, set it up to be scaffolded later\n+          obj.supportFile = path.join(sf, \"index.js\")\n+        return obj",
        "comment_created_at": "2020-05-26T18:05:53+00:00",
        "comment_author": "flotwig",
        "comment_body": "this nested if/else feels like an antipattern, maybe the logic for deciding `supportFile` should be in a function that is assigned to obj.supportFile here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "430615344",
    "pr_number": 7463,
    "pr_file": "packages/server/lib/config.coffee",
    "created_at": "2020-05-26T18:19:56+00:00",
    "commented_code": "errors.throw(\"SUPPORT_FILE_NOT_FOUND\", obj.supportFile, obj.configFile || CONFIG_DEFAULTS.configFile)\n           debug(\"switching to found file %s\", obj.supportFile)\n     .catch({code: \"MODULE_NOT_FOUND\"}, ->\n-      debug(\"support file %s does not exist\", sf)\n-      ## supportFile doesn't exist on disk\n-      if sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n-        debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n-        return fs.pathExists(sf)\n-        .then (found) ->\n-          if found\n-            debug(\"support folder exists, set supportFile to false\")\n-            ## if the directory exists, set it to false so it's ignored\n-            obj.supportFile = false\n-          else\n-            debug(\"support folder does not exist, set to default index.js\")\n-            ## otherwise, set it up to be scaffolded later\n-            obj.supportFile = path.join(sf, \"index.js\")\n-          return obj\n-      else\n+      debug(\"support JS module %s does not load\", sf)\n+\n+      loadingDefaltSupportFile = sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n+      if !loadingDefaltSupportFile\n         debug(\"support file is not default\")\n         ## they have it explicitly set, so it should be there\n-        errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+        return errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+\n+      ## supportFile doesn't exist on disk?\n+      debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n+      # at this point suport file is probably just support folder\n+      #  like \"<project root>/cypress/support\"\n+      return fs.pathExists(sf)\n+      .then (found) ->\n+        if found\n+          debug(\"support folder exists\")\n+\n+          debug(\"is there index.ts in the support folder %s?\", sf)\n+          tsSupportFilename = path.join(sf, \"index.ts\")",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "430615344",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7463,
        "pr_file": "packages/server/lib/config.coffee",
        "discussion_id": "430615344",
        "commented_code": "@@ -539,25 +549,39 @@ module.exports = {\n             errors.throw(\"SUPPORT_FILE_NOT_FOUND\", obj.supportFile, obj.configFile || CONFIG_DEFAULTS.configFile)\n           debug(\"switching to found file %s\", obj.supportFile)\n     .catch({code: \"MODULE_NOT_FOUND\"}, ->\n-      debug(\"support file %s does not exist\", sf)\n-      ## supportFile doesn't exist on disk\n-      if sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n-        debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n-        return fs.pathExists(sf)\n-        .then (found) ->\n-          if found\n-            debug(\"support folder exists, set supportFile to false\")\n-            ## if the directory exists, set it to false so it's ignored\n-            obj.supportFile = false\n-          else\n-            debug(\"support folder does not exist, set to default index.js\")\n-            ## otherwise, set it up to be scaffolded later\n-            obj.supportFile = path.join(sf, \"index.js\")\n-          return obj\n-      else\n+      debug(\"support JS module %s does not load\", sf)\n+\n+      loadingDefaltSupportFile = sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n+      if !loadingDefaltSupportFile\n         debug(\"support file is not default\")\n         ## they have it explicitly set, so it should be there\n-        errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+        return errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+\n+      ## supportFile doesn't exist on disk?\n+      debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n+      # at this point suport file is probably just support folder\n+      #  like \"<project root>/cypress/support\"\n+      return fs.pathExists(sf)\n+      .then (found) ->\n+        if found\n+          debug(\"support folder exists\")\n+\n+          debug(\"is there index.ts in the support folder %s?\", sf)\n+          tsSupportFilename = path.join(sf, \"index.ts\")",
        "comment_created_at": "2020-05-26T18:19:56+00:00",
        "comment_author": "flotwig",
        "comment_body": "can this logic (and surrounding logic) be extracted into a separate function shared by `setSupportFileAndFolder` and `setPluginsFile`? it seems like it should be possible to clean this up",
        "pr_file_module": null
      },
      {
        "comment_id": "430675286",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 7463,
        "pr_file": "packages/server/lib/config.coffee",
        "discussion_id": "430615344",
        "commented_code": "@@ -539,25 +549,39 @@ module.exports = {\n             errors.throw(\"SUPPORT_FILE_NOT_FOUND\", obj.supportFile, obj.configFile || CONFIG_DEFAULTS.configFile)\n           debug(\"switching to found file %s\", obj.supportFile)\n     .catch({code: \"MODULE_NOT_FOUND\"}, ->\n-      debug(\"support file %s does not exist\", sf)\n-      ## supportFile doesn't exist on disk\n-      if sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n-        debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n-        return fs.pathExists(sf)\n-        .then (found) ->\n-          if found\n-            debug(\"support folder exists, set supportFile to false\")\n-            ## if the directory exists, set it to false so it's ignored\n-            obj.supportFile = false\n-          else\n-            debug(\"support folder does not exist, set to default index.js\")\n-            ## otherwise, set it up to be scaffolded later\n-            obj.supportFile = path.join(sf, \"index.js\")\n-          return obj\n-      else\n+      debug(\"support JS module %s does not load\", sf)\n+\n+      loadingDefaltSupportFile = sf is path.resolve(obj.projectRoot, CONFIG_DEFAULTS.supportFile)\n+      if !loadingDefaltSupportFile\n         debug(\"support file is not default\")\n         ## they have it explicitly set, so it should be there\n-        errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+        return errors.throw(\"SUPPORT_FILE_NOT_FOUND\", path.resolve(obj.projectRoot, sf), obj.configFile || CONFIG_DEFAULTS.configFile)\n+\n+      ## supportFile doesn't exist on disk?\n+      debug(\"support file is default, check if #{path.dirname(sf)} exists\")\n+      # at this point suport file is probably just support folder\n+      #  like \"<project root>/cypress/support\"\n+      return fs.pathExists(sf)\n+      .then (found) ->\n+        if found\n+          debug(\"support folder exists\")\n+\n+          debug(\"is there index.ts in the support folder %s?\", sf)\n+          tsSupportFilename = path.join(sf, \"index.ts\")",
        "comment_created_at": "2020-05-26T20:02:27+00:00",
        "comment_author": "bahmutov",
        "comment_body": "I have refactored both code paths to use same function if the module cannot be found",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "248915400",
    "pr_number": 3130,
    "pr_file": "packages/driver/src/cy/assertions.coffee",
    "created_at": "2019-01-18T03:06:59+00:00",
    "commented_code": "obj\n \n+prepareObjsForDiff = (err) ->\n+  if _.isString(err.actual) || _.isString(err.expected)\n+    return err\n+  ret = {}\n+  ret.actual = mochaUtils.stringify(err.actual)\n+  ret.expected = mochaUtils.stringify(err.expected)\n+  return ret\n+\n+objToString = Object.prototype.toString\n+\n+_sameType = (a, b) ->\n+  return objToString.call(a) is objToString.call(b)\n+\n+showDiff = (err) ->",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "248915400",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 3130,
        "pr_file": "packages/driver/src/cy/assertions.coffee",
        "discussion_id": "248915400",
        "commented_code": "@@ -56,6 +58,27 @@ parseValueActualAndExpected = (value, actual, expected) ->\n \n   obj\n \n+prepareObjsForDiff = (err) ->\n+  if _.isString(err.actual) || _.isString(err.expected)\n+    return err\n+  ret = {}\n+  ret.actual = mochaUtils.stringify(err.actual)\n+  ret.expected = mochaUtils.stringify(err.expected)\n+  return ret\n+\n+objToString = Object.prototype.toString\n+\n+_sameType = (a, b) ->\n+  return objToString.call(a) is objToString.call(b)\n+\n+showDiff = (err) ->",
        "comment_created_at": "2019-01-18T03:06:59+00:00",
        "comment_author": "bahmutov",
        "comment_body": "this condition is too complex, AND and negations all mixed. I would suggest splitting this into little functions so that the meaning is clear from names",
        "pr_file_module": null
      },
      {
        "comment_id": "248916102",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 3130,
        "pr_file": "packages/driver/src/cy/assertions.coffee",
        "discussion_id": "248915400",
        "commented_code": "@@ -56,6 +58,27 @@ parseValueActualAndExpected = (value, actual, expected) ->\n \n   obj\n \n+prepareObjsForDiff = (err) ->\n+  if _.isString(err.actual) || _.isString(err.expected)\n+    return err\n+  ret = {}\n+  ret.actual = mochaUtils.stringify(err.actual)\n+  ret.expected = mochaUtils.stringify(err.expected)\n+  return ret\n+\n+objToString = Object.prototype.toString\n+\n+_sameType = (a, b) ->\n+  return objToString.call(a) is objToString.call(b)\n+\n+showDiff = (err) ->",
        "comment_created_at": "2019-01-18T03:13:10+00:00",
        "comment_author": "kuceb",
        "comment_body": "I can't think of a clear way to reduce this down, what do you think? \r\n\r\nbut I could rename the function to `shouldShowDiff` to make it clearer",
        "pr_file_module": null
      },
      {
        "comment_id": "248917654",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 3130,
        "pr_file": "packages/driver/src/cy/assertions.coffee",
        "discussion_id": "248915400",
        "commented_code": "@@ -56,6 +58,27 @@ parseValueActualAndExpected = (value, actual, expected) ->\n \n   obj\n \n+prepareObjsForDiff = (err) ->\n+  if _.isString(err.actual) || _.isString(err.expected)\n+    return err\n+  ret = {}\n+  ret.actual = mochaUtils.stringify(err.actual)\n+  ret.expected = mochaUtils.stringify(err.expected)\n+  return ret\n+\n+objToString = Object.prototype.toString\n+\n+_sameType = (a, b) ->\n+  return objToString.call(a) is objToString.call(b)\n+\n+showDiff = (err) ->",
        "comment_created_at": "2019-01-18T03:26:19+00:00",
        "comment_author": "bahmutov",
        "comment_body": "sure you can, just need to replace conditions with words.\r\n```coffeescript\r\ndiffCanBeShown = (err) -> err && err.showDiff isnt false\r\nhasExpectedValue = (err) -> err.expected isnt undefined\r\nshowDiff = (err) ->\r\n  return (\r\n    diffCanBeShown(err) &&\r\n    _sameType(err.actual, err.expected) &&\r\n    hasExpectedValue(err)\r\n  )\r\n```\r\nHmm, now it is a little bit better and is readable, and maybe we need to change the order - why do `_sameType` if `err.expected` is undefined? And while we are at it, we can make it a nice predicate too\r\n\r\n```coffeescript\r\ndiffCanBeShown = (err) -> err && err.showDiff isnt false\r\nhasExpectedValue = (err) -> err.expected isnt undefined\r\nhasSameTypeValues = (err) -> _sameType(err.actual, err.expected)\r\nshowDiff = (err) ->\r\n  return (\r\n    diffCanBeShown(err) &&\r\n    hasExpectedValue(err) &&\r\n    hasSameTypeValues(err)\r\n  )\r\n```\r\nwow, we got 3 predicates, all with the same single argument, which is what [Ramda.allPass](https://ramdajs.com/docs/#allPass) is all about.\r\n\r\n```coffeescript\r\ndiffCanBeShown = (err) -> err && err.showDiff isnt false\r\nhasExpectedValue = (err) -> err.expected isnt undefined\r\nhasSameTypeValues = (err) -> _sameType(err.actual, err.expected)\r\nshowDiff = R.allPass([diffCanBeShown, hasExpectedValue, hasSameTypeValues])\r\n```\r\neasy to read I hope, and fewer opportunities to make a typo or a logical error",
        "pr_file_module": null
      }
    ]
  }
]