[
  {
    "discussion_id": "1099092529",
    "pr_number": 25738,
    "pr_file": "packages/driver/src/cy/assertions.ts",
    "created_at": "2023-02-07T19:15:19+00:00",
    "commented_code": "return {\n     finishAssertions,\n+    assert,\n \n     // TODO: define the specific type of options\n     verifyUpcomingAssertions (subject, options: Record<string, any> = {}, callbacks: VerifyUpcomingAssertionsCallbacks = {}) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1099092529",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/driver/src/cy/assertions.ts",
        "discussion_id": "1099092529",
        "commented_code": "@@ -275,27 +192,26 @@ export const create = (Cypress: ICypress, cy: $Cy) => {\n \n   return {\n     finishAssertions,\n+    assert,\n \n     // TODO: define the specific type of options\n     verifyUpcomingAssertions (subject, options: Record<string, any> = {}, callbacks: VerifyUpcomingAssertionsCallbacks = {}) {",
        "comment_created_at": "2023-02-07T19:15:19+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "`verifyUpcomingAssertions` is no longer an accurate name, but given that a variety of plugins and custom commands rely on it, I've opted not to rename it something more appropriate (like `verifyImplicitAssertions` or somesuch).\r\n\r\nIt may not be documented as part of our public API, but I'd consider it public-facing and am therefore hesitant to rename it without an extremely compelling reason.",
        "pr_file_module": null
      },
      {
        "comment_id": "1123239259",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 25738,
        "pr_file": "packages/driver/src/cy/assertions.ts",
        "discussion_id": "1099092529",
        "commented_code": "@@ -275,27 +192,26 @@ export const create = (Cypress: ICypress, cy: $Cy) => {\n \n   return {\n     finishAssertions,\n+    assert,\n \n     // TODO: define the specific type of options\n     verifyUpcomingAssertions (subject, options: Record<string, any> = {}, callbacks: VerifyUpcomingAssertionsCallbacks = {}) {",
        "comment_created_at": "2023-03-02T15:00:27+00:00",
        "comment_author": "emilyrohrbough",
        "comment_body": "Yeah if anything we could rename to verifyImplictAssertions, then update verifyUpcomingAssertions to pass through to the new function and log a warning / use typescript to deprecate the func to remove at some point down the line \ud83e\udd37\ud83c\udffb ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1005829072",
    "pr_number": 24295,
    "pr_file": "packages/packherd-require/src/transpile-ts.ts",
    "created_at": "2022-10-26T15:19:41+00:00",
    "commented_code": "+import type { Debugger } from 'debug'\n+import { TransformOptions, transformSync } from 'esbuild'\n+import type { TranspileCache } from './types'\n+import path from 'path'\n+import { installSourcemapSupport } from './sourcemap-support'\n+\n+type EnhancedModule = NodeModule & {\n+  _extensions: Record<string, (mod: EnhancedModule, filename: string) => void>\n+  _compile: (code: string, filename: string) => unknown\n+  _cache: Record<string, NodeModule>\n+}\n+\n+const DEFAULT_TRANSFORM_OPTS: TransformOptions = {\n+  target: ['node14.5'],\n+  loader: 'ts',\n+  format: 'cjs',\n+  sourcemap: 'inline',\n+  minify: false,\n+  supported: {\n+    // We won't be supporting dynamic imports since everything we're doing gets bundled into one snapshot anyway\n+    'dynamic-import': false,\n+  },\n+}\n+\n+function transpileTsCode (\n+  fullModuleUri: string,\n+  ts: string,\n+  cache: TranspileCache,\n+  projectBaseDir: string,\n+  // TODO: consider 'error' for importsNotUsedAsValues (maybe) to add some type checking\n+  tsconfig?: TransformOptions['tsconfigRaw'],\n+): string {\n+  installSourcemapSupport(cache, projectBaseDir)\n+\n+  // Try to get from cache first\n+  const cached = (cache != null && cache.get(fullModuleUri)) || null\n+\n+  if (cached != null) return cached\n+\n+  // Transpile\n+  const opts = Object.assign({}, DEFAULT_TRANSFORM_OPTS, {\n+    tsconfigRaw: tsconfig,\n+    sourcefile: fullModuleUri,\n+  })\n+  const result = transformSync(ts, opts)\n+\n+  // Add to Cache\n+  if (cache != null) {\n+    cache.add(fullModuleUri, result.code)\n+  }\n+\n+  return result.code\n+}\n+\n+/**\n+ * Hooks into `Module._extensions` in order to transpile TypeScript modules on the fly.\n+ *\n+ * @param Module the Node.js Module\n+ * @param projectBaseDir root of the project\n+ * @param log `debug` module logger to use\n+ * @param diagnostics if `true` in case of a transpile/compile error the app breaks when run in the debugger\n+ * @param cache used to avoid re-transpiling modules that haven't changed since last transpile\n+ * @param sourceMapLookup allows overriding how a sourcemap for a particular `uri` is retrieved\n+ * @param tsconfig overrides tsconfig passed to esbuild\n+ *\n+ * @category Transpilation\n+ */\n+export function hookTranspileTs (\n+  Module: EnhancedModule,\n+  projectBaseDir: string,\n+  log: Debugger,\n+  diagnostics: boolean,",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "1005829072",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 24295,
        "pr_file": "packages/packherd-require/src/transpile-ts.ts",
        "discussion_id": "1005829072",
        "commented_code": "@@ -0,0 +1,121 @@\n+import type { Debugger } from 'debug'\n+import { TransformOptions, transformSync } from 'esbuild'\n+import type { TranspileCache } from './types'\n+import path from 'path'\n+import { installSourcemapSupport } from './sourcemap-support'\n+\n+type EnhancedModule = NodeModule & {\n+  _extensions: Record<string, (mod: EnhancedModule, filename: string) => void>\n+  _compile: (code: string, filename: string) => unknown\n+  _cache: Record<string, NodeModule>\n+}\n+\n+const DEFAULT_TRANSFORM_OPTS: TransformOptions = {\n+  target: ['node14.5'],\n+  loader: 'ts',\n+  format: 'cjs',\n+  sourcemap: 'inline',\n+  minify: false,\n+  supported: {\n+    // We won't be supporting dynamic imports since everything we're doing gets bundled into one snapshot anyway\n+    'dynamic-import': false,\n+  },\n+}\n+\n+function transpileTsCode (\n+  fullModuleUri: string,\n+  ts: string,\n+  cache: TranspileCache,\n+  projectBaseDir: string,\n+  // TODO: consider 'error' for importsNotUsedAsValues (maybe) to add some type checking\n+  tsconfig?: TransformOptions['tsconfigRaw'],\n+): string {\n+  installSourcemapSupport(cache, projectBaseDir)\n+\n+  // Try to get from cache first\n+  const cached = (cache != null && cache.get(fullModuleUri)) || null\n+\n+  if (cached != null) return cached\n+\n+  // Transpile\n+  const opts = Object.assign({}, DEFAULT_TRANSFORM_OPTS, {\n+    tsconfigRaw: tsconfig,\n+    sourcefile: fullModuleUri,\n+  })\n+  const result = transformSync(ts, opts)\n+\n+  // Add to Cache\n+  if (cache != null) {\n+    cache.add(fullModuleUri, result.code)\n+  }\n+\n+  return result.code\n+}\n+\n+/**\n+ * Hooks into `Module._extensions` in order to transpile TypeScript modules on the fly.\n+ *\n+ * @param Module the Node.js Module\n+ * @param projectBaseDir root of the project\n+ * @param log `debug` module logger to use\n+ * @param diagnostics if `true` in case of a transpile/compile error the app breaks when run in the debugger\n+ * @param cache used to avoid re-transpiling modules that haven't changed since last transpile\n+ * @param sourceMapLookup allows overriding how a sourcemap for a particular `uri` is retrieved\n+ * @param tsconfig overrides tsconfig passed to esbuild\n+ *\n+ * @category Transpilation\n+ */\n+export function hookTranspileTs (\n+  Module: EnhancedModule,\n+  projectBaseDir: string,\n+  log: Debugger,\n+  diagnostics: boolean,",
        "comment_created_at": "2022-10-26T15:19:41+00:00",
        "comment_author": "AtofStryker",
        "comment_body": "Wonder if `diagnosticsEnabled` implies boolean more for readability, even though the typings I think suffice.\r\n```suggestion\r\n  diagnosticsEnabled: boolean,\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1008319476",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 24295,
        "pr_file": "packages/packherd-require/src/transpile-ts.ts",
        "discussion_id": "1005829072",
        "commented_code": "@@ -0,0 +1,121 @@\n+import type { Debugger } from 'debug'\n+import { TransformOptions, transformSync } from 'esbuild'\n+import type { TranspileCache } from './types'\n+import path from 'path'\n+import { installSourcemapSupport } from './sourcemap-support'\n+\n+type EnhancedModule = NodeModule & {\n+  _extensions: Record<string, (mod: EnhancedModule, filename: string) => void>\n+  _compile: (code: string, filename: string) => unknown\n+  _cache: Record<string, NodeModule>\n+}\n+\n+const DEFAULT_TRANSFORM_OPTS: TransformOptions = {\n+  target: ['node14.5'],\n+  loader: 'ts',\n+  format: 'cjs',\n+  sourcemap: 'inline',\n+  minify: false,\n+  supported: {\n+    // We won't be supporting dynamic imports since everything we're doing gets bundled into one snapshot anyway\n+    'dynamic-import': false,\n+  },\n+}\n+\n+function transpileTsCode (\n+  fullModuleUri: string,\n+  ts: string,\n+  cache: TranspileCache,\n+  projectBaseDir: string,\n+  // TODO: consider 'error' for importsNotUsedAsValues (maybe) to add some type checking\n+  tsconfig?: TransformOptions['tsconfigRaw'],\n+): string {\n+  installSourcemapSupport(cache, projectBaseDir)\n+\n+  // Try to get from cache first\n+  const cached = (cache != null && cache.get(fullModuleUri)) || null\n+\n+  if (cached != null) return cached\n+\n+  // Transpile\n+  const opts = Object.assign({}, DEFAULT_TRANSFORM_OPTS, {\n+    tsconfigRaw: tsconfig,\n+    sourcefile: fullModuleUri,\n+  })\n+  const result = transformSync(ts, opts)\n+\n+  // Add to Cache\n+  if (cache != null) {\n+    cache.add(fullModuleUri, result.code)\n+  }\n+\n+  return result.code\n+}\n+\n+/**\n+ * Hooks into `Module._extensions` in order to transpile TypeScript modules on the fly.\n+ *\n+ * @param Module the Node.js Module\n+ * @param projectBaseDir root of the project\n+ * @param log `debug` module logger to use\n+ * @param diagnostics if `true` in case of a transpile/compile error the app breaks when run in the debugger\n+ * @param cache used to avoid re-transpiling modules that haven't changed since last transpile\n+ * @param sourceMapLookup allows overriding how a sourcemap for a particular `uri` is retrieved\n+ * @param tsconfig overrides tsconfig passed to esbuild\n+ *\n+ * @category Transpilation\n+ */\n+export function hookTranspileTs (\n+  Module: EnhancedModule,\n+  projectBaseDir: string,\n+  log: Debugger,\n+  diagnostics: boolean,",
        "comment_created_at": "2022-10-28T18:01:11+00:00",
        "comment_author": "ryanthemanuel",
        "comment_body": "updated: [`5350985` (#24295)](https://github.com/cypress-io/cypress/pull/24295/commits/535098505c724c701cfa5bab443b1f998ed0a90a)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "735600254",
    "pr_number": 18422,
    "pr_file": "packages/data-context/test/unit/data-context.spec.ts",
    "created_at": "2021-10-25T13:29:44+00:00",
    "commented_code": "import { expect } from 'chai'\n+import { DataContext } from '@packages/data-context'\n+import snapshot from 'snap-shot-it'\n \n-describe('@packages/data-context unit', () => {\n-  it('has a sample test', () => {\n-    expect(1).to.eq(1)\n+const makeDataContext = (options) => {\n+  return new DataContext({\n+    launchOptions: {},\n+    launchArgs: {},\n+    appApi: {\n+      getBrowsers: () => ({}),\n+    },\n+    authApi: {},\n+    projectApi: {\n+      getProjectRootsFromCache: () => ([]),\n+    },\n+    ...options,\n+  })\n+}\n+\n+describe('@packages/data-context', () => {\n+  describe('initializeData', () => {\n+    it('should initialize', async () => {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "735600254",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/data-context/test/unit/data-context.spec.ts",
        "discussion_id": "735600254",
        "commented_code": "@@ -1,7 +1,43 @@\n import { expect } from 'chai'\n+import { DataContext } from '@packages/data-context'\n+import snapshot from 'snap-shot-it'\n \n-describe('@packages/data-context unit', () => {\n-  it('has a sample test', () => {\n-    expect(1).to.eq(1)\n+const makeDataContext = (options) => {\n+  return new DataContext({\n+    launchOptions: {},\n+    launchArgs: {},\n+    appApi: {\n+      getBrowsers: () => ({}),\n+    },\n+    authApi: {},\n+    projectApi: {\n+      getProjectRootsFromCache: () => ([]),\n+    },\n+    ...options,\n+  })\n+}\n+\n+describe('@packages/data-context', () => {\n+  describe('initializeData', () => {\n+    it('should initialize', async () => {",
        "comment_created_at": "2021-10-25T13:29:44+00:00",
        "comment_author": "chrisbreiding",
        "comment_body": "```suggestion\r\n    it('initializes', async () => {\r\n```\r\n\r\nThis is a real nitpick, but adding \"should\" to the beginning of every test title ends up being superfluous.",
        "pr_file_module": null
      },
      {
        "comment_id": "735849428",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18422,
        "pr_file": "packages/data-context/test/unit/data-context.spec.ts",
        "discussion_id": "735600254",
        "commented_code": "@@ -1,7 +1,43 @@\n import { expect } from 'chai'\n+import { DataContext } from '@packages/data-context'\n+import snapshot from 'snap-shot-it'\n \n-describe('@packages/data-context unit', () => {\n-  it('has a sample test', () => {\n-    expect(1).to.eq(1)\n+const makeDataContext = (options) => {\n+  return new DataContext({\n+    launchOptions: {},\n+    launchArgs: {},\n+    appApi: {\n+      getBrowsers: () => ({}),\n+    },\n+    authApi: {},\n+    projectApi: {\n+      getProjectRootsFromCache: () => ([]),\n+    },\n+    ...options,\n+  })\n+}\n+\n+describe('@packages/data-context', () => {\n+  describe('initializeData', () => {\n+    it('should initialize', async () => {",
        "comment_created_at": "2021-10-25T18:18:14+00:00",
        "comment_author": "BlueWinds",
        "comment_body": "I always liked the way it reads, \"it should initialize\", but I'm happy to go with the existing standard.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "727694506",
    "pr_number": 18463,
    "pr_file": "packages/data-context/src/sources/StorybookDataSource.ts",
    "created_at": "2021-10-13T04:44:21+00:00",
    "commented_code": "return this.storybookInfoLoader.load(this.ctx.activeProject?.projectRoot)\n   }\n \n+  async getStories (): Promise<SpecFile[]> {\n+    const project = this.ctx.activeProject\n+\n+    if (!project) {\n+      throw Error(`Cannot find stories without activeProject.`)\n+    }\n+\n+    const storybook = await this.ctx.storybook.storybookInfo",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "727694506",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18463,
        "pr_file": "packages/data-context/src/sources/StorybookDataSource.ts",
        "discussion_id": "727694506",
        "commented_code": "@@ -22,6 +24,34 @@ export class StorybookDataSource {\n     return this.storybookInfoLoader.load(this.ctx.activeProject?.projectRoot)\n   }\n \n+  async getStories (): Promise<SpecFile[]> {\n+    const project = this.ctx.activeProject\n+\n+    if (!project) {\n+      throw Error(`Cannot find stories without activeProject.`)\n+    }\n+\n+    const storybook = await this.ctx.storybook.storybookInfo",
        "comment_created_at": "2021-10-13T04:44:21+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "Having an async getter seems kind of strange. Should `storybookInfo` be a method called `loadStorybookInfo` or something to that meaning?",
        "pr_file_module": null
      },
      {
        "comment_id": "728218576",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 18463,
        "pr_file": "packages/data-context/src/sources/StorybookDataSource.ts",
        "discussion_id": "727694506",
        "commented_code": "@@ -22,6 +24,34 @@ export class StorybookDataSource {\n     return this.storybookInfoLoader.load(this.ctx.activeProject?.projectRoot)\n   }\n \n+  async getStories (): Promise<SpecFile[]> {\n+    const project = this.ctx.activeProject\n+\n+    if (!project) {\n+      throw Error(`Cannot find stories without activeProject.`)\n+    }\n+\n+    const storybook = await this.ctx.storybook.storybookInfo",
        "comment_created_at": "2021-10-13T15:58:35+00:00",
        "comment_author": "ZachJW34",
        "comment_body": "You're right `await storybookInfo ` feels strange",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "577135959",
    "pr_number": 15105,
    "pr_file": "npm/webpack-dev-server/src/measureWebpackPerformance.ts",
    "created_at": "2021-02-16T21:02:53+00:00",
    "commented_code": "const compareWithPrevious = process.env.WEBPACK_PERF_MEASURE_COMPARE\n \n   function percentageDiff (a: number, b: number) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "577135959",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15105,
        "pr_file": "npm/webpack-dev-server/src/measureWebpackPerformance.ts",
        "discussion_id": "577135959",
        "commented_code": "@@ -13,7 +13,7 @@ export function measureWebpackPerformance (webpackConfig: webpack.Configuration)\n   const compareWithPrevious = process.env.WEBPACK_PERF_MEASURE_COMPARE\n \n   function percentageDiff (a: number, b: number) {",
        "comment_created_at": "2021-02-16T21:02:53+00:00",
        "comment_author": "elevatebart",
        "comment_body": "Maybe using the word `before` and `after` would make this function easier to use.",
        "pr_file_module": null
      },
      {
        "comment_id": "577138331",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 15105,
        "pr_file": "npm/webpack-dev-server/src/measureWebpackPerformance.ts",
        "discussion_id": "577135959",
        "commented_code": "@@ -13,7 +13,7 @@ export function measureWebpackPerformance (webpackConfig: webpack.Configuration)\n   const compareWithPrevious = process.env.WEBPACK_PERF_MEASURE_COMPARE\n \n   function percentageDiff (a: number, b: number) {",
        "comment_created_at": "2021-02-16T21:07:01+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "It's not actually before and after but any number. Maybe base and comparing?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "554638045",
    "pr_number": 14467,
    "pr_file": "packages/runner-ct/src/lib/state.ts",
    "created_at": "2021-01-10T23:14:36+00:00",
    "commented_code": "}\n \n   @action setSpec (spec: Cypress.Cypress['spec'] | null) {\n-    this.spec = spec\n+    if (this.isInitialBuildSucceed) {",
    "repo_full_name": "cypress-io/cypress",
    "discussion_comments": [
      {
        "comment_id": "554638045",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14467,
        "pr_file": "packages/runner-ct/src/lib/state.ts",
        "discussion_id": "554638045",
        "commented_code": "@@ -194,7 +196,20 @@ export default class State {\n   }\n \n   @action setSpec (spec: Cypress.Cypress['spec'] | null) {\n-    this.spec = spec\n+    if (this.isInitialBuildSucceed) {",
        "comment_created_at": "2021-01-10T23:14:36+00:00",
        "comment_author": "lmiller1990",
        "comment_body": "nit: I think `hasInitialBuildSucceeded` is a little more natural.",
        "pr_file_module": null
      },
      {
        "comment_id": "554933954",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14467,
        "pr_file": "packages/runner-ct/src/lib/state.ts",
        "discussion_id": "554638045",
        "commented_code": "@@ -194,7 +196,20 @@ export default class State {\n   }\n \n   @action setSpec (spec: Cypress.Cypress['spec'] | null) {\n-    this.spec = spec\n+    if (this.isInitialBuildSucceed) {",
        "comment_created_at": "2021-01-11T10:02:15+00:00",
        "comment_author": "dmtrKovalenko",
        "comment_body": "I love the convention of all the boolean variables starting with `is` like previous `isRunning`, `isLoading` \u2013 it is much easier to understand the type without thinking :) \r\n\r\nMaybe you'll find better name starting with `is` for this variable? Thank you",
        "pr_file_module": null
      },
      {
        "comment_id": "555184055",
        "repo_full_name": "cypress-io/cypress",
        "pr_number": 14467,
        "pr_file": "packages/runner-ct/src/lib/state.ts",
        "discussion_id": "554638045",
        "commented_code": "@@ -194,7 +196,20 @@ export default class State {\n   }\n \n   @action setSpec (spec: Cypress.Cypress['spec'] | null) {\n-    this.spec = spec\n+    if (this.isInitialBuildSucceed) {",
        "comment_created_at": "2021-01-11T16:38:59+00:00",
        "comment_author": "elevatebart",
        "comment_body": "How about `isInitialBuildSuccesful` ? Not perfect temporality because it \"was\" succesful but I prefer it.",
        "pr_file_module": null
      }
    ]
  }
]