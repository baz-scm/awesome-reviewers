[
  {
    "discussion_id": "672831327",
    "pr_number": 9394,
    "pr_file": "python4j/python4j-core/src/main/java/org/nd4j/python4j/PythonConstants.java",
    "created_at": "2021-07-20T06:07:22+00:00",
    "commented_code": "+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.python4j;\n+\n+/**\n+ *\n+ * This class helps control the runtime's {@link PythonExecutioner} -\n+ * the {@link PythonExecutioner} is heavily system properties based.\n+ * Various aspects of the python executioner can be controlled with\n+ * the properties in this class. Python's core behavior of initialization,\n+ * python path setting, and working with javacpp's embedded cpython\n+ * are keys to integrating the python executioner successfully with various applications.\n+ *\n+ * @author Adam Gibson\n+ */\n+public class PythonConstants {\n+    public final static String DEFAULT_PYTHON_PATH_PROPERTY = \"org.eclipse.python4j.path\";\n+    public final static String JAVACPP_PYTHON_APPEND_TYPE = \"org.eclipse.python4j.path.append\";\n+    //for embedded execution, this is to ensure we allow customization of the gil state releasing when running in another embedded python situation\n+    public final static String RELEASE_GIL_AUTOMATICALLY = \"org.eclipse.python4j.release_gil_automatically\";\n+    public final static String DEFAULT_RELEASE_GIL_AUTOMATICALLY = \"true\";\n+    public final static String DEFAULT_APPEND_TYPE = \"before\";\n+    public final static String INITIALIZE_PYTHON = \"org.eclipse.python4j.python.initialize\";\n+    public final static String DEFAULT_INITIALIZE_PYTHON = \"true\";\n+    public final static String PYTHON_EXEC_RESOURCE = \"org/nd4j/python4j/pythonexec/pythonexec.py\";\n+    final static String PYTHON_EXCEPTION_KEY = \"__python_exception__\";\n+\n+\n+    /**\n+     * Sets the default python path.\n+     * See {@link #defaultPythonPath()}\n+     * for more information.\n+     * @param newPythonPath the new python path to use\n+     */\n+    public static void setDefaultPythonPath(String newPythonPath) {\n+        System.setProperty(DEFAULT_PYTHON_PATH_PROPERTY,newPythonPath);\n+    }\n+\n+    /**\n+     * Returns the default python path.\n+     * This python path should be initialized before the {@link PythonExecutioner}\n+     * is called.\n+     * @return\n+     */\n+    public static String defaultPythonPath() {\n+        return System.getProperty(PythonConstants.DEFAULT_PYTHON_PATH_PROPERTY);\n+    }\n+\n+    /**\n+     * Returns whether to initialize python or not.\n+     * This property is used when python should be initialized manually.\n+     * Normally, the {@link PythonExecutioner} will handle initialization\n+     * in its {@link PythonExecutioner#init()} method\n+     *\n+     * @return\n+     */\n+    public static boolean initializePythonOrNot() {\n+        return Boolean.parseBoolean(System.getProperty(INITIALIZE_PYTHON,DEFAULT_INITIALIZE_PYTHON));\n+    }\n+\n+    /**\n+     * See {@link #initializePythonOrNot()}\n+     *  for more information on this property.\n+     *  This is the setter method for the associated value.\n+     * @param initializePython whether to initialize python or not\n+     */\n+    public static void setInitializePython(boolean initializePython) {\n+        System.setProperty(INITIALIZE_PYTHON,String.valueOf(initializePython));\n+    }\n+\n+\n+    /**\n+     * Returns the default javacpp python append type.\n+     * In javacpp's cython module, it comes with built in support\n+     * for determining the python path of most modules.\n+     *\n+     * This can clash when invoking python using another distribution of python\n+     * such as anaconda. This property allows the user to control how javacpp\n+     * interacts with a different python present on the classpath.\n+     *\n+     * The default value is {@link #DEFAULT_APPEND_TYPE}\n+     * @return\n+     */\n+    public static PythonExecutioner.JavaCppPathType javaCppPythonAppendType() {\n+        return PythonExecutioner.JavaCppPathType.valueOf(System.getProperty(JAVACPP_PYTHON_APPEND_TYPE,DEFAULT_APPEND_TYPE).toUpperCase());\n+    }\n+\n+    /**\n+     * Setter for the javacpp append type.\n+     * See {@link #javaCppPythonAppendType()}\n+     * for more information on value set by this setter.\n+     * @param appendType the append type to use\n+     */\n+    public static void setJavacppPythonAppendType(PythonExecutioner.JavaCppPathType appendType) {\n+        System.setProperty(JAVACPP_PYTHON_APPEND_TYPE,appendType.name());\n+    }\n+\n+\n+    /**\n+     * See {@link #gilIsReleaseAutomatically()}\n+     * for more information on this setter.\n+     * @param releaseGilAutomatically whether to release the gil automatically or not.\n+     */\n+    public static void setReleaseGilAutomatically(boolean releaseGilAutomatically) {\n+        System.setProperty(RELEASE_GIL_AUTOMATICALLY,String.valueOf(releaseGilAutomatically));\n+    }\n+\n+    /**\n+     * Returns true if the GIL is released automatically or not.\n+     * For linking against applications where python is already present\n+     * this is a knob allowing people to turn automatic python thread management off.\n+     * This is enabled by default. See {@link #RELEASE_GIL_AUTOMATICALLY}\n+     * and its default value {@link #DEFAULT_RELEASE_GIL_AUTOMATICALLY}\n+     * @return\n+     */\n+    public final static boolean gilIsReleaseAutomatically() {",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "672831327",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9394,
        "pr_file": "python4j/python4j-core/src/main/java/org/nd4j/python4j/PythonConstants.java",
        "discussion_id": "672831327",
        "commented_code": "@@ -0,0 +1,137 @@\n+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.python4j;\n+\n+/**\n+ *\n+ * This class helps control the runtime's {@link PythonExecutioner} -\n+ * the {@link PythonExecutioner} is heavily system properties based.\n+ * Various aspects of the python executioner can be controlled with\n+ * the properties in this class. Python's core behavior of initialization,\n+ * python path setting, and working with javacpp's embedded cpython\n+ * are keys to integrating the python executioner successfully with various applications.\n+ *\n+ * @author Adam Gibson\n+ */\n+public class PythonConstants {\n+    public final static String DEFAULT_PYTHON_PATH_PROPERTY = \"org.eclipse.python4j.path\";\n+    public final static String JAVACPP_PYTHON_APPEND_TYPE = \"org.eclipse.python4j.path.append\";\n+    //for embedded execution, this is to ensure we allow customization of the gil state releasing when running in another embedded python situation\n+    public final static String RELEASE_GIL_AUTOMATICALLY = \"org.eclipse.python4j.release_gil_automatically\";\n+    public final static String DEFAULT_RELEASE_GIL_AUTOMATICALLY = \"true\";\n+    public final static String DEFAULT_APPEND_TYPE = \"before\";\n+    public final static String INITIALIZE_PYTHON = \"org.eclipse.python4j.python.initialize\";\n+    public final static String DEFAULT_INITIALIZE_PYTHON = \"true\";\n+    public final static String PYTHON_EXEC_RESOURCE = \"org/nd4j/python4j/pythonexec/pythonexec.py\";\n+    final static String PYTHON_EXCEPTION_KEY = \"__python_exception__\";\n+\n+\n+    /**\n+     * Sets the default python path.\n+     * See {@link #defaultPythonPath()}\n+     * for more information.\n+     * @param newPythonPath the new python path to use\n+     */\n+    public static void setDefaultPythonPath(String newPythonPath) {\n+        System.setProperty(DEFAULT_PYTHON_PATH_PROPERTY,newPythonPath);\n+    }\n+\n+    /**\n+     * Returns the default python path.\n+     * This python path should be initialized before the {@link PythonExecutioner}\n+     * is called.\n+     * @return\n+     */\n+    public static String defaultPythonPath() {\n+        return System.getProperty(PythonConstants.DEFAULT_PYTHON_PATH_PROPERTY);\n+    }\n+\n+    /**\n+     * Returns whether to initialize python or not.\n+     * This property is used when python should be initialized manually.\n+     * Normally, the {@link PythonExecutioner} will handle initialization\n+     * in its {@link PythonExecutioner#init()} method\n+     *\n+     * @return\n+     */\n+    public static boolean initializePythonOrNot() {\n+        return Boolean.parseBoolean(System.getProperty(INITIALIZE_PYTHON,DEFAULT_INITIALIZE_PYTHON));\n+    }\n+\n+    /**\n+     * See {@link #initializePythonOrNot()}\n+     *  for more information on this property.\n+     *  This is the setter method for the associated value.\n+     * @param initializePython whether to initialize python or not\n+     */\n+    public static void setInitializePython(boolean initializePython) {\n+        System.setProperty(INITIALIZE_PYTHON,String.valueOf(initializePython));\n+    }\n+\n+\n+    /**\n+     * Returns the default javacpp python append type.\n+     * In javacpp's cython module, it comes with built in support\n+     * for determining the python path of most modules.\n+     *\n+     * This can clash when invoking python using another distribution of python\n+     * such as anaconda. This property allows the user to control how javacpp\n+     * interacts with a different python present on the classpath.\n+     *\n+     * The default value is {@link #DEFAULT_APPEND_TYPE}\n+     * @return\n+     */\n+    public static PythonExecutioner.JavaCppPathType javaCppPythonAppendType() {\n+        return PythonExecutioner.JavaCppPathType.valueOf(System.getProperty(JAVACPP_PYTHON_APPEND_TYPE,DEFAULT_APPEND_TYPE).toUpperCase());\n+    }\n+\n+    /**\n+     * Setter for the javacpp append type.\n+     * See {@link #javaCppPythonAppendType()}\n+     * for more information on value set by this setter.\n+     * @param appendType the append type to use\n+     */\n+    public static void setJavacppPythonAppendType(PythonExecutioner.JavaCppPathType appendType) {\n+        System.setProperty(JAVACPP_PYTHON_APPEND_TYPE,appendType.name());\n+    }\n+\n+\n+    /**\n+     * See {@link #gilIsReleaseAutomatically()}\n+     * for more information on this setter.\n+     * @param releaseGilAutomatically whether to release the gil automatically or not.\n+     */\n+    public static void setReleaseGilAutomatically(boolean releaseGilAutomatically) {\n+        System.setProperty(RELEASE_GIL_AUTOMATICALLY,String.valueOf(releaseGilAutomatically));\n+    }\n+\n+    /**\n+     * Returns true if the GIL is released automatically or not.\n+     * For linking against applications where python is already present\n+     * this is a knob allowing people to turn automatic python thread management off.\n+     * This is enabled by default. See {@link #RELEASE_GIL_AUTOMATICALLY}\n+     * and its default value {@link #DEFAULT_RELEASE_GIL_AUTOMATICALLY}\n+     * @return\n+     */\n+    public final static boolean gilIsReleaseAutomatically() {",
        "comment_created_at": "2021-07-20T06:07:22+00:00",
        "comment_author": "treo",
        "comment_body": "I guess a better name here would be just `releaseGilAutomatically`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "259815642",
    "pr_number": 7188,
    "pr_file": "datavec/datavec-python/src/main/java/org/datavec/python/PythonTransform.java",
    "created_at": "2019-02-25T13:12:00+00:00",
    "commented_code": "+package org.datavec.python;\n+\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+public class PythonTransform {\n+    private String setupCode;\n+    private String execCode;\n+    private String code;\n+    private String name;\n+    private PythonVariables pyInputs;\n+    private PythonVariables pyOutputs;\n+\n+    private void parseSetupAndExecCode() throws Exception{",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "259815642",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7188,
        "pr_file": "datavec/datavec-python/src/main/java/org/datavec/python/PythonTransform.java",
        "discussion_id": "259815642",
        "commented_code": "@@ -0,0 +1,171 @@\n+package org.datavec.python;\n+\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+public class PythonTransform {\n+    private String setupCode;\n+    private String execCode;\n+    private String code;\n+    private String name;\n+    private PythonVariables pyInputs;\n+    private PythonVariables pyOutputs;\n+\n+    private void parseSetupAndExecCode() throws Exception{",
        "comment_created_at": "2019-02-25T13:12:00+00:00",
        "comment_author": "maxpumperla",
        "comment_body": "this is a confusing name (although I see how you got it). It suggests that you parse the setup and exec the code.\r\n\r\nA doc string might help. Maybe find an unambiguous convention.\r\n\r\nAlso, what's the setup tag for? Can we have a test for it? ",
        "pr_file_module": null
      },
      {
        "comment_id": "259837476",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7188,
        "pr_file": "datavec/datavec-python/src/main/java/org/datavec/python/PythonTransform.java",
        "discussion_id": "259815642",
        "commented_code": "@@ -0,0 +1,171 @@\n+package org.datavec.python;\n+\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+public class PythonTransform {\n+    private String setupCode;\n+    private String execCode;\n+    private String code;\n+    private String name;\n+    private PythonVariables pyInputs;\n+    private PythonVariables pyOutputs;\n+\n+    private void parseSetupAndExecCode() throws Exception{",
        "comment_created_at": "2019-02-25T14:06:57+00:00",
        "comment_author": "farizrahman4u",
        "comment_body": "The \"setup\" part of the code is whatever you need to do only once (imports, loading stuff to memory). We do it once and persist that state in memory so that we dont have to do it per transaction. I havent committed the tests because of the issue i discussed in our call (regarding arrays getting GCed too early sometimes). Will add tests once it works.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "192663441",
    "pr_number": 5451,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
    "created_at": "2018-06-04T08:36:03+00:00",
    "commented_code": "}\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "192663441",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5451,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
        "discussion_id": "192663441",
        "commented_code": "@@ -1496,6 +1497,33 @@ public INDArray getArr() {\n \n     }\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();",
        "comment_created_at": "2018-06-04T08:36:03+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "What about ```var_``` prefix instead of ```sd_var_```? It's shorter, and no less descriptive.",
        "pr_file_module": null
      },
      {
        "comment_id": "192665252",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5451,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
        "discussion_id": "192663441",
        "commented_code": "@@ -1496,6 +1497,33 @@ public INDArray getArr() {\n \n     }\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();",
        "comment_created_at": "2018-06-04T08:42:34+00:00",
        "comment_author": "farizrahman4u",
        "comment_body": "Because `var_` maybe too common a prefix? For e.g:\r\n\r\n```\r\nx = sd.var(arr) // named var_0, user doens't know about this\r\n\r\n// somewhere else:\r\n\r\nx = sd.var(\"var_0\", arrx) // name already taken\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "192665612",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5451,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
        "discussion_id": "192663441",
        "commented_code": "@@ -1496,6 +1497,33 @@ public INDArray getArr() {\n \n     }\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();",
        "comment_created_at": "2018-06-04T08:43:49+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Yeah, good point. OK, sounds good :)",
        "pr_file_module": null
      }
    ]
  }
]