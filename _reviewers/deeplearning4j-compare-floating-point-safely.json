[
  {
    "discussion_id": "1065535097",
    "pr_number": 9880,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/impl/transforms/comparison/Eps.java",
    "created_at": "2023-01-10T09:27:50+00:00",
    "commented_code": "public Eps(INDArray x, INDArray y, INDArray z) {\n         super(x, y, z);\n+        this.extraArgs = new Object[]{1e-2};",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "1065535097",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9880,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/impl/transforms/comparison/Eps.java",
        "discussion_id": "1065535097",
        "commented_code": "@@ -53,6 +53,7 @@ public Eps() {}\n \n     public Eps(INDArray x, INDArray y, INDArray z) {\n         super(x, y, z);\n+        this.extraArgs = new Object[]{1e-2};",
        "comment_created_at": "2023-01-10T09:27:50+00:00",
        "comment_author": "treo",
        "comment_body": "Is 0.01 really a good default value for this? Typical epsilon values are 1e-6, 1e-7 or even 1e-12 for double. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1065568552",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9880,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/api/ops/impl/transforms/comparison/Eps.java",
        "discussion_id": "1065535097",
        "commented_code": "@@ -53,6 +53,7 @@ public Eps() {}\n \n     public Eps(INDArray x, INDArray y, INDArray z) {\n         super(x, y, z);\n+        this.extraArgs = new Object[]{1e-2};",
        "comment_created_at": "2023-01-10T09:58:14+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "283675590",
    "pr_number": 7731,
    "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
    "created_at": "2019-05-14T08:12:41+00:00",
    "commented_code": "INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "283675590",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T08:12:41+00:00",
        "comment_author": "saudet",
        "comment_body": "We want to set the depth and the number of channels here instead of just \"1, 1\"",
        "pr_file_module": null
      },
      {
        "comment_id": "283678624",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T08:20:37+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "Did I miss somethings ? What do you mean depth here ? Depth of image of depth of 3d volume ?",
        "pr_file_module": null
      },
      {
        "comment_id": "283683235",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T08:31:24+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "I believe you mean depth of 3D volume. But in that case, I can not guess the structure of data. I need more metadata information to be able to correctly load the image. For example, what are the numbers of channel/depth/batch?  How are they arranged ? If you need data at this complexity. I recommend you to wrap this project [tifffile](https://pypi.org/project/tifffile/) into Datavec. I saw you began to work with numpy. It won't be much difficult, if you are already able to communicate numpy with INDArray",
        "pr_file_module": null
      },
      {
        "comment_id": "283687575",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T08:42:10+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "Or this Java project ([bioformat](https://www.openmicroscopy.org/bio-formats/)), if you don't want Python.",
        "pr_file_module": null
      },
      {
        "comment_id": "283698568",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T09:07:17+00:00",
        "comment_author": "saudet",
        "comment_body": "It's not about NDArray, it's about returning the data that is in a TIFF file, but you're right, `pixa.n()` is often basically the \"depth\",  so we'd need another DEPTH mode would be a good name I think:\r\n```\r\nNd4j.create(1, channels, pixa.n(), pixa.pix(0).h(), pixa.pix(0).w());\r\n```\r\nBut sometimes we want to return it as a batch though, so for MINIBATCH mode we'd have:\r\n```\r\nNd4j.create(pixa.n(), channels, 1, pixa.pix(0).h(), pixa.pix(0).w());\r\n```\r\nFor the CHANNELS mode, I guess something like this:\r\n```\r\nNd4j.create(1, pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\r\n```\r\nBut the channels information goes away and this is strange... What about supporting only the first one above, the one in NCDHW order, and leave it up to the user to manipulate the output further if they need it?",
        "pr_file_module": null
      },
      {
        "comment_id": "283699114",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T09:08:38+00:00",
        "comment_author": "saudet",
        "comment_body": "Sure, we can use other dependencies than Leptonica if something else is easier to work with.",
        "pr_file_module": null
      },
      {
        "comment_id": "283703757",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T09:20:10+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "Sincerely, I personally don't think hard-coding this part is a good idea. It seems that you started to have biomedical image users. In this area, your 5 channels is still not enough. You will need the time dimension. Generally, we (at least me) work with by default 5-channel images (TimeChannelZXY). For the training, you need anther N. That become really complex from my point of view. What do you think @AlexDBlack ? ",
        "pr_file_module": null
      },
      {
        "comment_id": "283706532",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T09:26:36+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "@saudet I believe for instance its better to let user permute their data axis to get what they want, because integrating metadata to get exactly what they want is **painful**...",
        "pr_file_module": null
      },
      {
        "comment_id": "283748994",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T11:24:27+00:00",
        "comment_author": "saudet",
        "comment_body": "I don't think TIFF files contain other axes like time, right? If so let's not worry about that. We're only interested in loading data image files here.",
        "pr_file_module": null
      },
      {
        "comment_id": "283751362",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-14T11:31:50+00:00",
        "comment_author": "BioinfoTongLI",
        "comment_body": "It depends on what tiff you want to manipulate. \r\n\r\nSo, yes. In this case, In fact, I would remove the multipage option. Every image will by default be loaded in `batch` channel. It up to user to reorder the image. Is this what you wanted ?",
        "pr_file_module": null
      },
      {
        "comment_id": "284053225",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-15T00:53:02+00:00",
        "comment_author": "saudet",
        "comment_body": "Sounds reasonable, yes. Let's just make sure images with more than 1 channel can be loaded.",
        "pr_file_module": null
      },
      {
        "comment_id": "285362105",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7731,
        "pr_file": "datavec/datavec-data/datavec-data-image/src/main/java/org/datavec/image/loader/NativeImageLoader.java",
        "discussion_id": "283675590",
        "commented_code": "@@ -824,36 +838,37 @@ private INDArray asMatrix(BytePointer bytes, long length) throws IOException {\n         INDArrayIndex[] index = null;\n         switch (this.multiPageMode) {\n             case MINIBATCH:\n-                data = Nd4j.create(pixa.n(), 1, pixa.pix(0).h(), pixa.pix(0).w());\n+                data = Nd4j.create(pixa.n(), 1, 1, pixa.pix(0).h(), pixa.pix(0).w());",
        "comment_created_at": "2019-05-19T02:58:49+00:00",
        "comment_author": "saudet",
        "comment_body": "This still doesn't take into account the number of channels in the image. We need \r\nto put the `channels` variable somewhere here and below as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "271145656",
    "pr_number": 7422,
    "pr_file": "nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/autodiff/samediff/SameDiffOutputTest.java",
    "created_at": "2019-04-02T06:11:24+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.autodiff.samediff;\n+\n+import org.junit.Test;\n+import org.nd4j.autodiff.samediff.SDVariable;\n+import org.nd4j.autodiff.samediff.SameDiff;\n+import org.nd4j.linalg.BaseNd4jTest;\n+import org.nd4j.linalg.api.buffer.DataType;\n+import org.nd4j.linalg.api.ndarray.INDArray;\n+import org.nd4j.linalg.dataset.DataSet;\n+import org.nd4j.linalg.factory.Nd4j;\n+import org.nd4j.linalg.factory.Nd4jBackend;\n+import org.nd4j.linalg.learning.config.Sgd;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class SameDiffOutputTest extends BaseNd4jTest {\n+\n+    public SameDiffOutputTest(Nd4jBackend backend) {\n+        super(backend);\n+    }\n+\n+    @Test\n+    public void outputTest(){\n+        DataSet data = new DataSet(Nd4j.zeros(10, 10), Nd4j.zeros(10, 10));\n+        SameDiff sd = SameDiff.create();\n+\n+        SDVariable in = sd.placeHolder(\"input\", DataType.FLOAT, 10, 10);\n+        SDVariable out = in.add(\"out\", 2);\n+\n+        TrainingConfig conf = new TrainingConfig.Builder()\n+                .l2(1e-4)\n+                .updater(new Sgd(3e-1))\n+                .dataSetFeatureMapping(\"input\")\n+                .dataSetLabelMapping()\n+                .build();\n+\n+        sd.setTrainingConfig(conf);\n+\n+        INDArray output = sd.output(data, \"out\").get(\"out\");\n+\n+        assertTrue(output.toString().equals(Nd4j.zeros(10, 10).add(2).toString()));",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "271145656",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7422,
        "pr_file": "nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/autodiff/samediff/SameDiffOutputTest.java",
        "discussion_id": "271145656",
        "commented_code": "@@ -0,0 +1,69 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.autodiff.samediff;\n+\n+import org.junit.Test;\n+import org.nd4j.autodiff.samediff.SDVariable;\n+import org.nd4j.autodiff.samediff.SameDiff;\n+import org.nd4j.linalg.BaseNd4jTest;\n+import org.nd4j.linalg.api.buffer.DataType;\n+import org.nd4j.linalg.api.ndarray.INDArray;\n+import org.nd4j.linalg.dataset.DataSet;\n+import org.nd4j.linalg.factory.Nd4j;\n+import org.nd4j.linalg.factory.Nd4jBackend;\n+import org.nd4j.linalg.learning.config.Sgd;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class SameDiffOutputTest extends BaseNd4jTest {\n+\n+    public SameDiffOutputTest(Nd4jBackend backend) {\n+        super(backend);\n+    }\n+\n+    @Test\n+    public void outputTest(){\n+        DataSet data = new DataSet(Nd4j.zeros(10, 10), Nd4j.zeros(10, 10));\n+        SameDiff sd = SameDiff.create();\n+\n+        SDVariable in = sd.placeHolder(\"input\", DataType.FLOAT, 10, 10);\n+        SDVariable out = in.add(\"out\", 2);\n+\n+        TrainingConfig conf = new TrainingConfig.Builder()\n+                .l2(1e-4)\n+                .updater(new Sgd(3e-1))\n+                .dataSetFeatureMapping(\"input\")\n+                .dataSetLabelMapping()\n+                .build();\n+\n+        sd.setTrainingConfig(conf);\n+\n+        INDArray output = sd.output(data, \"out\").get(\"out\");\n+\n+        assertTrue(output.toString().equals(Nd4j.zeros(10, 10).add(2).toString()));",
        "comment_created_at": "2019-04-02T06:11:24+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "The reason it isn't equal without the toString is datatypes.\r\nBy design we don't cast on equals.\r\nI'd recommend either specifying datatypes on all INDArrays, or on none of them.\r\nTests default to double; you are comparing a float [10,10] with double [10,10] hence the failure.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "253805462",
    "pr_number": 7081,
    "pr_file": "arbiter/arbiter-core/src/main/java/org/deeplearning4j/arbiter/optimize/generator/genetic/population/PopulationModel.java",
    "created_at": "2019-02-05T10:24:21+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.deeplearning4j.arbiter.optimize.generator.genetic.population;\n+\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.Chromosome;\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.culling.CullOperator;\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.culling.LeastFitCullOperator;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/**\n+ * The population model handles all aspects of the population (initialization, additions and culling)\n+ *\n+ * @author Alexandre Boulanger\n+ */\n+public class PopulationModel {\n+    private static final int DEFAULT_POPULATION_SIZE = 30;\n+\n+    /**\n+     * A comparator used when higher fitness value is better\n+     */\n+    public class MaximizeScoreComparator implements Comparator<Chromosome> {\n+        @Override\n+        public int compare(Chromosome lhs, Chromosome rhs) {\n+            if (lhs.fitness < rhs.fitness)\n+                return 1;\n+            else if (rhs.fitness < lhs.fitness)\n+                return -1;\n+            return 0;",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "253805462",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7081,
        "pr_file": "arbiter/arbiter-core/src/main/java/org/deeplearning4j/arbiter/optimize/generator/genetic/population/PopulationModel.java",
        "discussion_id": "253805462",
        "commented_code": "@@ -0,0 +1,188 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.deeplearning4j.arbiter.optimize.generator.genetic.population;\n+\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.Chromosome;\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.culling.CullOperator;\n+import org.deeplearning4j.arbiter.optimize.generator.genetic.culling.LeastFitCullOperator;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/**\n+ * The population model handles all aspects of the population (initialization, additions and culling)\n+ *\n+ * @author Alexandre Boulanger\n+ */\n+public class PopulationModel {\n+    private static final int DEFAULT_POPULATION_SIZE = 30;\n+\n+    /**\n+     * A comparator used when higher fitness value is better\n+     */\n+    public class MaximizeScoreComparator implements Comparator<Chromosome> {\n+        @Override\n+        public int compare(Chromosome lhs, Chromosome rhs) {\n+            if (lhs.fitness < rhs.fitness)\n+                return 1;\n+            else if (rhs.fitness < lhs.fitness)\n+                return -1;\n+            return 0;",
        "comment_created_at": "2019-02-05T10:24:21+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Let's replace these 5 lines with: ```return Double.compareDouble(lhs.getFitness(), rhs.getFitness())``` (possibly with order switched, if that's the intention here).\r\nNote I'm assuming the fitness field is protected/private and getter via ```@Data``` was added, as per earlier review comment.\r\nSame thing for other comparator.",
        "pr_file_module": null
      }
    ]
  }
]