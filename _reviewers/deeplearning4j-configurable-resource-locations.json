[
  {
    "discussion_id": "688830999",
    "pr_number": 9410,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/ir/OpDescriptorHolder.java",
    "created_at": "2021-08-13T23:56:43+00:00",
    "commented_code": "+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.ir;\n+\n+import lombok.val;\n+import org.apache.commons.io.IOUtils;\n+import org.nd4j.common.config.ND4JClassLoading;\n+import org.nd4j.common.io.ClassPathResource;\n+import org.nd4j.shade.protobuf.TextFormat;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+\n+/**\n+ * A utility class for accessing the nd4j op descriptors.\n+ * May override default definition of {@link #nd4jFileNameTextDefault}\n+ * with the system property {@link #nd4jFileSpecifierProperty}\n+ * @author Adam Gibson\n+ */\n+public class OpDescriptorHolder {\n+\n+    public static String  nd4jFileNameTextDefault = \"/nd4j-op-def.pbtxt\";",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "688830999",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9410,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/ir/OpDescriptorHolder.java",
        "discussion_id": "688830999",
        "commented_code": "@@ -0,0 +1,99 @@\n+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.ir;\n+\n+import lombok.val;\n+import org.apache.commons.io.IOUtils;\n+import org.nd4j.common.config.ND4JClassLoading;\n+import org.nd4j.common.io.ClassPathResource;\n+import org.nd4j.shade.protobuf.TextFormat;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+\n+/**\n+ * A utility class for accessing the nd4j op descriptors.\n+ * May override default definition of {@link #nd4jFileNameTextDefault}\n+ * with the system property {@link #nd4jFileSpecifierProperty}\n+ * @author Adam Gibson\n+ */\n+public class OpDescriptorHolder {\n+\n+    public static String  nd4jFileNameTextDefault = \"/nd4j-op-def.pbtxt\";",
        "comment_created_at": "2021-08-13T23:56:43+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "@treo I added this based on the model import code. Since I'm attempting to use the new op descriptors in the dynamic custom ops properties now, I wanted an easier/faster way to access the descriptors. The only problems I could think of with this might be graalvm, but if there are I will address those later.",
        "pr_file_module": null
      },
      {
        "comment_id": "689349379",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9410,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/ir/OpDescriptorHolder.java",
        "discussion_id": "688830999",
        "commented_code": "@@ -0,0 +1,99 @@\n+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.ir;\n+\n+import lombok.val;\n+import org.apache.commons.io.IOUtils;\n+import org.nd4j.common.config.ND4JClassLoading;\n+import org.nd4j.common.io.ClassPathResource;\n+import org.nd4j.shade.protobuf.TextFormat;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+\n+/**\n+ * A utility class for accessing the nd4j op descriptors.\n+ * May override default definition of {@link #nd4jFileNameTextDefault}\n+ * with the system property {@link #nd4jFileSpecifierProperty}\n+ * @author Adam Gibson\n+ */\n+public class OpDescriptorHolder {\n+\n+    public static String  nd4jFileNameTextDefault = \"/nd4j-op-def.pbtxt\";",
        "comment_created_at": "2021-08-16T08:46:20+00:00",
        "comment_author": "treo",
        "comment_body": "We've had issues with people creating uberjars and not packaging resources previously. So having something that is dependent on loading a resource may introduce new problems. \r\n\r\nIn particular, Spring Boot has a special way of class loading and resource loading. I can imagine that it may break there.",
        "pr_file_module": null
      },
      {
        "comment_id": "689428376",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9410,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/ir/OpDescriptorHolder.java",
        "discussion_id": "688830999",
        "commented_code": "@@ -0,0 +1,99 @@\n+/*\n+ *  ******************************************************************************\n+ *  *\n+ *  *\n+ *  * This program and the accompanying materials are made available under the\n+ *  * terms of the Apache License, Version 2.0 which is available at\n+ *  * https://www.apache.org/licenses/LICENSE-2.0.\n+ *  *\n+ *  *  See the NOTICE file distributed with this work for additional\n+ *  *  information regarding copyright ownership.\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ *  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ *  * License for the specific language governing permissions and limitations\n+ *  * under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *  *****************************************************************************\n+ */\n+package org.nd4j.ir;\n+\n+import lombok.val;\n+import org.apache.commons.io.IOUtils;\n+import org.nd4j.common.config.ND4JClassLoading;\n+import org.nd4j.common.io.ClassPathResource;\n+import org.nd4j.shade.protobuf.TextFormat;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.*;\n+\n+/**\n+ * A utility class for accessing the nd4j op descriptors.\n+ * May override default definition of {@link #nd4jFileNameTextDefault}\n+ * with the system property {@link #nd4jFileSpecifierProperty}\n+ * @author Adam Gibson\n+ */\n+public class OpDescriptorHolder {\n+\n+    public static String  nd4jFileNameTextDefault = \"/nd4j-op-def.pbtxt\";",
        "comment_created_at": "2021-08-16T10:45:26+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "@treo in that case we can tell people to just override the classloader with their own. That functionality was merged a while back. I agree with you and will keep an eye on that though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "209495764",
    "pr_number": 6115,
    "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/logic/v2/FileChunksTracker.java",
    "created_at": "2018-08-13T05:40:12+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.logic.v2;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidChunk;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidMessage_v2;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage_v2> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private File holder;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "209495764",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6115,
        "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/logic/v2/FileChunksTracker.java",
        "discussion_id": "209495764",
        "commented_code": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.logic.v2;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidChunk;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidMessage_v2;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage_v2> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private File holder;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
        "comment_created_at": "2018-08-13T05:40:12+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Let's make dir configurable. User might want it on SSD different to system drive.",
        "pr_file_module": null
      },
      {
        "comment_id": "209496990",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6115,
        "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/logic/v2/FileChunksTracker.java",
        "discussion_id": "209495764",
        "commented_code": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.logic.v2;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidChunk;\n+import org.nd4j.parameterserver.distributed.messages.v2.VoidMessage_v2;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage_v2> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private File holder;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
        "comment_created_at": "2018-08-13T05:51:40+00:00",
        "comment_author": "raver119",
        "comment_body": "Yes, once we'll be ready to merge lots of stuff will become configurable.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "214576518",
    "pr_number": 6115,
    "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/v2/chunks/impl/FileChunksTracker.java",
    "created_at": "2018-09-03T05:06:50+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.v2.chunks.impl;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.linalg.util.SerializationUtils;\n+import org.nd4j.parameterserver.distributed.v2.chunks.ChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.VoidChunk;\n+import org.nd4j.parameterserver.distributed.v2.messages.VoidMessage;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    private File holder;\n+\n+    private final long size;\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        size = chunk.getTotalSize();\n+\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "214576518",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6115,
        "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/v2/chunks/impl/FileChunksTracker.java",
        "discussion_id": "214576518",
        "commented_code": "@@ -0,0 +1,129 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.v2.chunks.impl;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.linalg.util.SerializationUtils;\n+import org.nd4j.parameterserver.distributed.v2.chunks.ChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.VoidChunk;\n+import org.nd4j.parameterserver.distributed.v2.messages.VoidMessage;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    private File holder;\n+\n+    private final long size;\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        size = chunk.getTotalSize();\n+\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
        "comment_created_at": "2018-09-03T05:06:50+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Do we want configurable location?\r\ni.e., for VMs etc with slow system  HDD but fast SSD available",
        "pr_file_module": null
      },
      {
        "comment_id": "214582670",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6115,
        "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/v2/chunks/impl/FileChunksTracker.java",
        "discussion_id": "214576518",
        "commented_code": "@@ -0,0 +1,129 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.v2.chunks.impl;\n+\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.val;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.linalg.util.SerializationUtils;\n+import org.nd4j.parameterserver.distributed.v2.chunks.ChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.VoidChunk;\n+import org.nd4j.parameterserver.distributed.v2.messages.VoidMessage;\n+\n+import java.io.*;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * File-based implementation of ChunksTracker\n+ */\n+public class FileChunksTracker<T extends VoidMessage> implements ChunksTracker<T> {\n+    @Getter\n+    private final String originId;\n+\n+    private final int numChunks;\n+\n+    private Map<Integer, AtomicBoolean> map = new ConcurrentHashMap<>();\n+\n+    private File holder;\n+\n+    private final long size;\n+\n+    public FileChunksTracker(VoidChunk chunk) {\n+        originId = chunk.getOriginalId();\n+        numChunks = chunk.getNumberOfChunks();\n+        size = chunk.getTotalSize();\n+\n+        try {\n+            holder = File.createTempFile(\"FileChunksTracker\", \"Message\");",
        "comment_created_at": "2018-09-03T06:01:37+00:00",
        "comment_author": "raver119",
        "comment_body": "Probably yes... Try configurable location first, fallback to default temp second.\r\nBut user can just redefine java temp dir as well...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "214581404",
    "pr_number": 6115,
    "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/v2/util/MessageSplitter.java",
    "created_at": "2018-09-03T05:51:42+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.v2.util;\n+\n+import lombok.NonNull;\n+import lombok.val;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.linalg.util.SerializationUtils;\n+import org.nd4j.parameterserver.distributed.v2.chunks.ChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.impl.FileChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.VoidChunk;\n+import org.nd4j.parameterserver.distributed.v2.chunks.impl.InmemoryChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.messages.VoidMessage;\n+import org.nd4j.linalg.primitives.Optional;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * This class provides methods for splitting VoidMessages into chunks, and merging them back again\n+ *\n+ * @author raver119@gmail.com\n+ */\n+public class MessageSplitter {\n+    private static final MessageSplitter INSTANCE = new MessageSplitter();\n+\n+    private Map<String, ChunksTracker> trackers = new ConcurrentHashMap<>();\n+\n+    // simple counter for memory used by all in-memory trackers\n+    protected final AtomicLong memoryUse = new AtomicLong(0);\n+\n+    public MessageSplitter() {\n+        //\n+    }\n+\n+    /**\n+     * This method returns shared instance of MessageSplitter\n+     *\n+     * @return\n+     */\n+    public static MessageSplitter getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * This method splits VoidMessage into chunks, and returns them as Collection\n+     * @param message\n+     * @return\n+     */\n+    public Collection<VoidChunk> split(@NonNull VoidMessage message, int maxBytes) throws IOException {\n+        if (maxBytes <= 0)\n+            throw new ND4JIllegalStateException(\"MaxBytes must be > 0\");\n+\n+        val tempFile = File.createTempFile(\"messageSplitter\",\"temp\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "214581404",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6115,
        "pr_file": "nd4j/nd4j-parameter-server-parent/nd4j-parameter-server-node/src/main/java/org/nd4j/parameterserver/distributed/v2/util/MessageSplitter.java",
        "discussion_id": "214581404",
        "commented_code": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.nd4j.parameterserver.distributed.v2.util;\n+\n+import lombok.NonNull;\n+import lombok.val;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.primitives.AtomicBoolean;\n+import org.nd4j.linalg.util.SerializationUtils;\n+import org.nd4j.parameterserver.distributed.v2.chunks.ChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.impl.FileChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.chunks.VoidChunk;\n+import org.nd4j.parameterserver.distributed.v2.chunks.impl.InmemoryChunksTracker;\n+import org.nd4j.parameterserver.distributed.v2.messages.VoidMessage;\n+import org.nd4j.linalg.primitives.Optional;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * This class provides methods for splitting VoidMessages into chunks, and merging them back again\n+ *\n+ * @author raver119@gmail.com\n+ */\n+public class MessageSplitter {\n+    private static final MessageSplitter INSTANCE = new MessageSplitter();\n+\n+    private Map<String, ChunksTracker> trackers = new ConcurrentHashMap<>();\n+\n+    // simple counter for memory used by all in-memory trackers\n+    protected final AtomicLong memoryUse = new AtomicLong(0);\n+\n+    public MessageSplitter() {\n+        //\n+    }\n+\n+    /**\n+     * This method returns shared instance of MessageSplitter\n+     *\n+     * @return\n+     */\n+    public static MessageSplitter getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * This method splits VoidMessage into chunks, and returns them as Collection\n+     * @param message\n+     * @return\n+     */\n+    public Collection<VoidChunk> split(@NonNull VoidMessage message, int maxBytes) throws IOException {\n+        if (maxBytes <= 0)\n+            throw new ND4JIllegalStateException(\"MaxBytes must be > 0\");\n+\n+        val tempFile = File.createTempFile(\"messageSplitter\",\"temp\");",
        "comment_created_at": "2018-09-03T05:51:42+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Also configurable location here?",
        "pr_file_module": null
      }
    ]
  }
]