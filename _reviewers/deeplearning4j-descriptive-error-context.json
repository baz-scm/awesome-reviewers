[
  {
    "discussion_id": "863914380",
    "pr_number": 9674,
    "pr_file": "libnd4j/include/ops/declarable/impl/PlatformHelper.cpp",
    "created_at": "2022-05-03T15:39:12+00:00",
    "commented_code": "sd_printf(\"Can't get Z variable for node_%i!\n\", ctx.nodeId());\n       }\n     } else {\n-      sd_printf(\"BOOM!\n\", \"\");\n-      throw std::runtime_error(\"Boom!\");\n+      sd_printf(\"Failed execution!\n\", \"\");\n+      throw std::runtime_error(\"Failed execution\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "863914380",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9674,
        "pr_file": "libnd4j/include/ops/declarable/impl/PlatformHelper.cpp",
        "discussion_id": "863914380",
        "commented_code": "@@ -76,8 +76,8 @@ sd::NDArray* PlatformHelper::getZ(graph::Context& ctx, int inputId) {\n         sd_printf(\"Can't get Z variable for node_%i!\\n\", ctx.nodeId());\n       }\n     } else {\n-      sd_printf(\"BOOM!\\n\", \"\");\n-      throw std::runtime_error(\"Boom!\");\n+      sd_printf(\"Failed execution!\\n\", \"\");\n+      throw std::runtime_error(\"Failed execution\");",
        "comment_created_at": "2022-05-03T15:39:12+00:00",
        "comment_author": "treo",
        "comment_body": "While \"Failed execution\" is a better message than \"Boom\", I wonder if we can't have something more descriptive here?\r\n\r\nAlso, Do we need to both print and throw an exception? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "808554865",
    "pr_number": 9639,
    "pr_file": "libnd4j/include/array/impl/ShapeList.cpp",
    "created_at": "2022-02-16T23:59:17+00:00",
    "commented_code": "//    }\n \n ShapeList::ShapeList(const sd::LongType* shape) {\n-  if (shape != nullptr) _shapes.push_back(shape);\n+  if (shape != nullptr) push_back(shape);\n }\n \n ShapeList::~ShapeList() {\n   if (_autoremovable) destroy();\n }\n \n-ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes, bool isWorkspace) : ShapeList(shapes) {\n+ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes, bool isWorkspace)\n+#if !defined(__NEC__)\n+    : ShapeList(shapes) {\n+#else\n+{\n+  for (int i = 0; i < shapes.size(); i++) {\n+    push_back(shapes[i]);\n+  }\n+#endif\n   _workspace = isWorkspace;\n }\n \n-ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes) { _shapes = shapes; }\n-\n-std::vector<const sd::LongType*>* ShapeList::asVector() { return &_shapes; }\n+ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes) {\n+#if defined(__NEC__)\n+  for (int i = 0; i < shapes.size(); i++) {\n+    push_back(shapes[i]);\n+  }\n+#else\n+  _shapes = shapes;\n+#endif\n+}\n \n void ShapeList::destroy() {\n   if (_destroyed) return;\n \n   if (!_workspace)\n-    for (auto v : _shapes)\n-      if (v != nullptr) delete[] v;\n+    for (int i = 0; i < size(); i++)\n+      if (_shapes[i] != nullptr) delete[] _shapes[i];\n \n   _destroyed = true;\n }\n \n-int ShapeList::size() const { return (int)_shapes.size(); }\n+int ShapeList::size() const {\n+#if defined(__NEC__)\n+  return size_x;\n+#else\n+  return (int)_shapes.size();\n+#endif\n+}\n \n const sd::LongType* ShapeList::at(int idx) {\n-  if (_shapes.size() <= idx) throw std::runtime_error(\"Can't find requested variable by index\");\n+  if (size() <= idx || idx < 0) throw std::runtime_error(\"Can't find requested variable by index\");\n \n-  return _shapes.at(idx);\n+  return _shapes[idx];\n }\n \n-void ShapeList::push_back(const sd::LongType* shape) { _shapes.push_back(shape); }\n+void ShapeList::push_back(const sd::LongType* shape) {\n+#if defined(__NEC__)\n+  if (size_x + 1 >= NEC_MAX_SHAPE_LIST) {\n+    sd_printf(\"current %d > ShapeList limit %d \n\", size_x, NEC_MAX_SHAPE_LIST);\n+    throw std::runtime_error(\"ShapeList for Nec is limited\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "808554865",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9639,
        "pr_file": "libnd4j/include/array/impl/ShapeList.cpp",
        "discussion_id": "808554865",
        "commented_code": "@@ -28,43 +28,74 @@ namespace sd {\n //    }\n \n ShapeList::ShapeList(const sd::LongType* shape) {\n-  if (shape != nullptr) _shapes.push_back(shape);\n+  if (shape != nullptr) push_back(shape);\n }\n \n ShapeList::~ShapeList() {\n   if (_autoremovable) destroy();\n }\n \n-ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes, bool isWorkspace) : ShapeList(shapes) {\n+ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes, bool isWorkspace)\n+#if !defined(__NEC__)\n+    : ShapeList(shapes) {\n+#else\n+{\n+  for (int i = 0; i < shapes.size(); i++) {\n+    push_back(shapes[i]);\n+  }\n+#endif\n   _workspace = isWorkspace;\n }\n \n-ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes) { _shapes = shapes; }\n-\n-std::vector<const sd::LongType*>* ShapeList::asVector() { return &_shapes; }\n+ShapeList::ShapeList(const std::vector<const sd::LongType*>& shapes) {\n+#if defined(__NEC__)\n+  for (int i = 0; i < shapes.size(); i++) {\n+    push_back(shapes[i]);\n+  }\n+#else\n+  _shapes = shapes;\n+#endif\n+}\n \n void ShapeList::destroy() {\n   if (_destroyed) return;\n \n   if (!_workspace)\n-    for (auto v : _shapes)\n-      if (v != nullptr) delete[] v;\n+    for (int i = 0; i < size(); i++)\n+      if (_shapes[i] != nullptr) delete[] _shapes[i];\n \n   _destroyed = true;\n }\n \n-int ShapeList::size() const { return (int)_shapes.size(); }\n+int ShapeList::size() const {\n+#if defined(__NEC__)\n+  return size_x;\n+#else\n+  return (int)_shapes.size();\n+#endif\n+}\n \n const sd::LongType* ShapeList::at(int idx) {\n-  if (_shapes.size() <= idx) throw std::runtime_error(\"Can't find requested variable by index\");\n+  if (size() <= idx || idx < 0) throw std::runtime_error(\"Can't find requested variable by index\");\n \n-  return _shapes.at(idx);\n+  return _shapes[idx];\n }\n \n-void ShapeList::push_back(const sd::LongType* shape) { _shapes.push_back(shape); }\n+void ShapeList::push_back(const sd::LongType* shape) {\n+#if defined(__NEC__)\n+  if (size_x + 1 >= NEC_MAX_SHAPE_LIST) {\n+    sd_printf(\"current %d > ShapeList limit %d \\n\", size_x, NEC_MAX_SHAPE_LIST);\n+    throw std::runtime_error(\"ShapeList for Nec is limited\");",
        "comment_created_at": "2022-02-16T23:59:17+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "Mind putting a location of the error here like: ShapeList:: error message similar to what we do in other error messages? That helps track down the problem.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "698314497",
    "pr_number": 9434,
    "pr_file": "libnd4j/include/ConstMessages.cpp",
    "created_at": "2021-08-30T08:56:40+00:00",
    "commented_code": "+/* ******************************************************************************\n+ *\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ *  See the NOTICE file distributed with this work for additional\n+ *  information regarding copyright ownership.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+#include <ConstMessages.h>\n+\n+#define IS_EMPTY_MSG_INPUT_ \"the Emptiness of the Input NDArray\"\n+#define IS_EMPTY_MSG_OUTPUT_ \"the Emptiness of the Output NDArray\"\n+#define RANK_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define SHAPE_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define RANK_MSG_OUTPUT_ \"the Rank of the Output NDArray\"\n+#define TYPE_MSG_INPUT_ \"the Type of the Input NDArray\"\n+#define TYPE_MSG_OUTPUT_ \"the Type of the Output NDArray\"\n+#define EWS_MSG_INPUT_ \"the EWS of the Input NDArray\"\n+#define EWS_MSG_OUTPUT_ \"the EWS of the Output NDArray\"\n+#define ORDERING_MSG_INPUT_ \"the Ordering of the Input NDArray\"\n+#define ORDERING_MSG_OUTPUT_ \"the Ordering of the Output NDArray\"\n+\n+namespace sd{\n+\n+\n+    const char* OP_VALIDATION_FAIL_MSG = \"Op validation failed\";\n+\n+    const char* TYPECHECK_MSG = \"Checking the Type requirments for the NDArrays\";\n+    const char* NO_MSG = \"\";\n+    const char* EXPECTED_TRUE = \"expected to be True\";\n+    const char* EXPECTED_FALSE = \"expected to be False\";\n+    const char* EXPECTED_NOT_SUPPORTED = \"not supported\";\n+    const char* EXPECTED_EQ_MSG = \"expected to be equal to\";\n+    const char* EXPECTED_NE_MSG = \"expected to be different than\";\n+    const char* EXPECTED_LT_MSG = \"expected to be less than\";\n+    const char* EXPECTED_LE_MSG = \"expected to be less than or equal\";\n+    const char* EXPECTED_GT_MSG = \"expected to be greater than\";\n+    const char* EXPECTED_GE_MSG = \"expected to be greater than or equal\";\n+\n+    const char* EXPECTED_IN = \"expected to be one of these\";\n+\n+    const char* IS_EMPTY_MSG_INPUT= IS_EMPTY_MSG_INPUT_;\n+    const char* IS_EMPTY_MSG_INPUT0= IS_EMPTY_MSG_INPUT_ \"#0\";\n+    const char* IS_EMPTY_MSG_INPUT1= IS_EMPTY_MSG_INPUT_ \"#1\";\n+    const char* IS_EMPTY_MSG_INPUT2= IS_EMPTY_MSG_INPUT_ \"#2\";\n+    const char* IS_EMPTY_MSG_INPUT3= IS_EMPTY_MSG_INPUT_ \"#3\";\n+\n+    const char* RANK_MSG_INPUT= RANK_MSG_INPUT_;\n+    const char* RANK_MSG_INPUT0= RANK_MSG_INPUT_ \"#0\";\n+    const char* RANK_MSG_INPUT1= RANK_MSG_INPUT_ \"#1\";\n+    const char* RANK_MSG_INPUT2= RANK_MSG_INPUT_ \"#2\";\n+    const char* RANK_MSG_INPUT3= RANK_MSG_INPUT_ \"#3\";\n+\n+    const char* SHAPE_MSG_INPUT= SHAPE_MSG_INPUT_;\n+    const char* SHAPE_MSG_INPUT0= SHAPE_MSG_INPUT_ \"#0\";\n+    const char* SHAPE_MSG_INPUT1= SHAPE_MSG_INPUT_ \"#1\";\n+    const char* SHAPE_MSG_INPUT2= SHAPE_MSG_INPUT_ \"#2\";\n+    const char* SHAPE_MSG_INPUT3= SHAPE_MSG_INPUT_ \"#3\";\n+\n+    const char* TYPE_MSG_INPUT= TYPE_MSG_INPUT_;\n+    const char* TYPE_MSG_INPUT0= TYPE_MSG_INPUT_ \"#0\";",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "698314497",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9434,
        "pr_file": "libnd4j/include/ConstMessages.cpp",
        "discussion_id": "698314497",
        "commented_code": "@@ -0,0 +1,114 @@\n+/* ******************************************************************************\n+ *\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ *  See the NOTICE file distributed with this work for additional\n+ *  information regarding copyright ownership.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+#include <ConstMessages.h>\n+\n+#define IS_EMPTY_MSG_INPUT_ \"the Emptiness of the Input NDArray\"\n+#define IS_EMPTY_MSG_OUTPUT_ \"the Emptiness of the Output NDArray\"\n+#define RANK_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define SHAPE_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define RANK_MSG_OUTPUT_ \"the Rank of the Output NDArray\"\n+#define TYPE_MSG_INPUT_ \"the Type of the Input NDArray\"\n+#define TYPE_MSG_OUTPUT_ \"the Type of the Output NDArray\"\n+#define EWS_MSG_INPUT_ \"the EWS of the Input NDArray\"\n+#define EWS_MSG_OUTPUT_ \"the EWS of the Output NDArray\"\n+#define ORDERING_MSG_INPUT_ \"the Ordering of the Input NDArray\"\n+#define ORDERING_MSG_OUTPUT_ \"the Ordering of the Output NDArray\"\n+\n+namespace sd{\n+\n+\n+    const char* OP_VALIDATION_FAIL_MSG = \"Op validation failed\";\n+\n+    const char* TYPECHECK_MSG = \"Checking the Type requirments for the NDArrays\";\n+    const char* NO_MSG = \"\";\n+    const char* EXPECTED_TRUE = \"expected to be True\";\n+    const char* EXPECTED_FALSE = \"expected to be False\";\n+    const char* EXPECTED_NOT_SUPPORTED = \"not supported\";\n+    const char* EXPECTED_EQ_MSG = \"expected to be equal to\";\n+    const char* EXPECTED_NE_MSG = \"expected to be different than\";\n+    const char* EXPECTED_LT_MSG = \"expected to be less than\";\n+    const char* EXPECTED_LE_MSG = \"expected to be less than or equal\";\n+    const char* EXPECTED_GT_MSG = \"expected to be greater than\";\n+    const char* EXPECTED_GE_MSG = \"expected to be greater than or equal\";\n+\n+    const char* EXPECTED_IN = \"expected to be one of these\";\n+\n+    const char* IS_EMPTY_MSG_INPUT= IS_EMPTY_MSG_INPUT_;\n+    const char* IS_EMPTY_MSG_INPUT0= IS_EMPTY_MSG_INPUT_ \"#0\";\n+    const char* IS_EMPTY_MSG_INPUT1= IS_EMPTY_MSG_INPUT_ \"#1\";\n+    const char* IS_EMPTY_MSG_INPUT2= IS_EMPTY_MSG_INPUT_ \"#2\";\n+    const char* IS_EMPTY_MSG_INPUT3= IS_EMPTY_MSG_INPUT_ \"#3\";\n+\n+    const char* RANK_MSG_INPUT= RANK_MSG_INPUT_;\n+    const char* RANK_MSG_INPUT0= RANK_MSG_INPUT_ \"#0\";\n+    const char* RANK_MSG_INPUT1= RANK_MSG_INPUT_ \"#1\";\n+    const char* RANK_MSG_INPUT2= RANK_MSG_INPUT_ \"#2\";\n+    const char* RANK_MSG_INPUT3= RANK_MSG_INPUT_ \"#3\";\n+\n+    const char* SHAPE_MSG_INPUT= SHAPE_MSG_INPUT_;\n+    const char* SHAPE_MSG_INPUT0= SHAPE_MSG_INPUT_ \"#0\";\n+    const char* SHAPE_MSG_INPUT1= SHAPE_MSG_INPUT_ \"#1\";\n+    const char* SHAPE_MSG_INPUT2= SHAPE_MSG_INPUT_ \"#2\";\n+    const char* SHAPE_MSG_INPUT3= SHAPE_MSG_INPUT_ \"#3\";\n+\n+    const char* TYPE_MSG_INPUT= TYPE_MSG_INPUT_;\n+    const char* TYPE_MSG_INPUT0= TYPE_MSG_INPUT_ \"#0\";",
        "comment_created_at": "2021-08-30T08:56:40+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "Are these supposed to be stubs?",
        "pr_file_module": null
      },
      {
        "comment_id": "698519562",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9434,
        "pr_file": "libnd4j/include/ConstMessages.cpp",
        "discussion_id": "698314497",
        "commented_code": "@@ -0,0 +1,114 @@\n+/* ******************************************************************************\n+ *\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ *  See the NOTICE file distributed with this work for additional\n+ *  information regarding copyright ownership.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+#include <ConstMessages.h>\n+\n+#define IS_EMPTY_MSG_INPUT_ \"the Emptiness of the Input NDArray\"\n+#define IS_EMPTY_MSG_OUTPUT_ \"the Emptiness of the Output NDArray\"\n+#define RANK_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define SHAPE_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define RANK_MSG_OUTPUT_ \"the Rank of the Output NDArray\"\n+#define TYPE_MSG_INPUT_ \"the Type of the Input NDArray\"\n+#define TYPE_MSG_OUTPUT_ \"the Type of the Output NDArray\"\n+#define EWS_MSG_INPUT_ \"the EWS of the Input NDArray\"\n+#define EWS_MSG_OUTPUT_ \"the EWS of the Output NDArray\"\n+#define ORDERING_MSG_INPUT_ \"the Ordering of the Input NDArray\"\n+#define ORDERING_MSG_OUTPUT_ \"the Ordering of the Output NDArray\"\n+\n+namespace sd{\n+\n+\n+    const char* OP_VALIDATION_FAIL_MSG = \"Op validation failed\";\n+\n+    const char* TYPECHECK_MSG = \"Checking the Type requirments for the NDArrays\";\n+    const char* NO_MSG = \"\";\n+    const char* EXPECTED_TRUE = \"expected to be True\";\n+    const char* EXPECTED_FALSE = \"expected to be False\";\n+    const char* EXPECTED_NOT_SUPPORTED = \"not supported\";\n+    const char* EXPECTED_EQ_MSG = \"expected to be equal to\";\n+    const char* EXPECTED_NE_MSG = \"expected to be different than\";\n+    const char* EXPECTED_LT_MSG = \"expected to be less than\";\n+    const char* EXPECTED_LE_MSG = \"expected to be less than or equal\";\n+    const char* EXPECTED_GT_MSG = \"expected to be greater than\";\n+    const char* EXPECTED_GE_MSG = \"expected to be greater than or equal\";\n+\n+    const char* EXPECTED_IN = \"expected to be one of these\";\n+\n+    const char* IS_EMPTY_MSG_INPUT= IS_EMPTY_MSG_INPUT_;\n+    const char* IS_EMPTY_MSG_INPUT0= IS_EMPTY_MSG_INPUT_ \"#0\";\n+    const char* IS_EMPTY_MSG_INPUT1= IS_EMPTY_MSG_INPUT_ \"#1\";\n+    const char* IS_EMPTY_MSG_INPUT2= IS_EMPTY_MSG_INPUT_ \"#2\";\n+    const char* IS_EMPTY_MSG_INPUT3= IS_EMPTY_MSG_INPUT_ \"#3\";\n+\n+    const char* RANK_MSG_INPUT= RANK_MSG_INPUT_;\n+    const char* RANK_MSG_INPUT0= RANK_MSG_INPUT_ \"#0\";\n+    const char* RANK_MSG_INPUT1= RANK_MSG_INPUT_ \"#1\";\n+    const char* RANK_MSG_INPUT2= RANK_MSG_INPUT_ \"#2\";\n+    const char* RANK_MSG_INPUT3= RANK_MSG_INPUT_ \"#3\";\n+\n+    const char* SHAPE_MSG_INPUT= SHAPE_MSG_INPUT_;\n+    const char* SHAPE_MSG_INPUT0= SHAPE_MSG_INPUT_ \"#0\";\n+    const char* SHAPE_MSG_INPUT1= SHAPE_MSG_INPUT_ \"#1\";\n+    const char* SHAPE_MSG_INPUT2= SHAPE_MSG_INPUT_ \"#2\";\n+    const char* SHAPE_MSG_INPUT3= SHAPE_MSG_INPUT_ \"#3\";\n+\n+    const char* TYPE_MSG_INPUT= TYPE_MSG_INPUT_;\n+    const char* TYPE_MSG_INPUT0= TYPE_MSG_INPUT_ \"#0\";",
        "comment_created_at": "2021-08-30T14:07:48+00:00",
        "comment_author": "quickwritereader",
        "comment_body": "`#define TYPE_MSG_INPUT_ \"the Type of the Input NDArray\"`\r\nthese are standard messages for some checks. #0 here means index 0. I made it so that one could change/translate it. ",
        "pr_file_module": null
      },
      {
        "comment_id": "698526607",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9434,
        "pr_file": "libnd4j/include/ConstMessages.cpp",
        "discussion_id": "698314497",
        "commented_code": "@@ -0,0 +1,114 @@\n+/* ******************************************************************************\n+ *\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ *  See the NOTICE file distributed with this work for additional\n+ *  information regarding copyright ownership.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+#include <ConstMessages.h>\n+\n+#define IS_EMPTY_MSG_INPUT_ \"the Emptiness of the Input NDArray\"\n+#define IS_EMPTY_MSG_OUTPUT_ \"the Emptiness of the Output NDArray\"\n+#define RANK_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define SHAPE_MSG_INPUT_ \"the Rank of the Input NDArray\"\n+#define RANK_MSG_OUTPUT_ \"the Rank of the Output NDArray\"\n+#define TYPE_MSG_INPUT_ \"the Type of the Input NDArray\"\n+#define TYPE_MSG_OUTPUT_ \"the Type of the Output NDArray\"\n+#define EWS_MSG_INPUT_ \"the EWS of the Input NDArray\"\n+#define EWS_MSG_OUTPUT_ \"the EWS of the Output NDArray\"\n+#define ORDERING_MSG_INPUT_ \"the Ordering of the Input NDArray\"\n+#define ORDERING_MSG_OUTPUT_ \"the Ordering of the Output NDArray\"\n+\n+namespace sd{\n+\n+\n+    const char* OP_VALIDATION_FAIL_MSG = \"Op validation failed\";\n+\n+    const char* TYPECHECK_MSG = \"Checking the Type requirments for the NDArrays\";\n+    const char* NO_MSG = \"\";\n+    const char* EXPECTED_TRUE = \"expected to be True\";\n+    const char* EXPECTED_FALSE = \"expected to be False\";\n+    const char* EXPECTED_NOT_SUPPORTED = \"not supported\";\n+    const char* EXPECTED_EQ_MSG = \"expected to be equal to\";\n+    const char* EXPECTED_NE_MSG = \"expected to be different than\";\n+    const char* EXPECTED_LT_MSG = \"expected to be less than\";\n+    const char* EXPECTED_LE_MSG = \"expected to be less than or equal\";\n+    const char* EXPECTED_GT_MSG = \"expected to be greater than\";\n+    const char* EXPECTED_GE_MSG = \"expected to be greater than or equal\";\n+\n+    const char* EXPECTED_IN = \"expected to be one of these\";\n+\n+    const char* IS_EMPTY_MSG_INPUT= IS_EMPTY_MSG_INPUT_;\n+    const char* IS_EMPTY_MSG_INPUT0= IS_EMPTY_MSG_INPUT_ \"#0\";\n+    const char* IS_EMPTY_MSG_INPUT1= IS_EMPTY_MSG_INPUT_ \"#1\";\n+    const char* IS_EMPTY_MSG_INPUT2= IS_EMPTY_MSG_INPUT_ \"#2\";\n+    const char* IS_EMPTY_MSG_INPUT3= IS_EMPTY_MSG_INPUT_ \"#3\";\n+\n+    const char* RANK_MSG_INPUT= RANK_MSG_INPUT_;\n+    const char* RANK_MSG_INPUT0= RANK_MSG_INPUT_ \"#0\";\n+    const char* RANK_MSG_INPUT1= RANK_MSG_INPUT_ \"#1\";\n+    const char* RANK_MSG_INPUT2= RANK_MSG_INPUT_ \"#2\";\n+    const char* RANK_MSG_INPUT3= RANK_MSG_INPUT_ \"#3\";\n+\n+    const char* SHAPE_MSG_INPUT= SHAPE_MSG_INPUT_;\n+    const char* SHAPE_MSG_INPUT0= SHAPE_MSG_INPUT_ \"#0\";\n+    const char* SHAPE_MSG_INPUT1= SHAPE_MSG_INPUT_ \"#1\";\n+    const char* SHAPE_MSG_INPUT2= SHAPE_MSG_INPUT_ \"#2\";\n+    const char* SHAPE_MSG_INPUT3= SHAPE_MSG_INPUT_ \"#3\";\n+\n+    const char* TYPE_MSG_INPUT= TYPE_MSG_INPUT_;\n+    const char* TYPE_MSG_INPUT0= TYPE_MSG_INPUT_ \"#0\";",
        "comment_created_at": "2021-08-30T14:16:16+00:00",
        "comment_author": "quickwritereader",
        "comment_body": "```\r\nreq.expectEq(makeInfoVariable(input->dataType(), TYPE_MSG_INPUT0), sd::DataType::FLOAT32) &&\r\nreq.expectEq(makeInfoVariable(weights->dataType(), TYPE_MSG_INPUT1), sd::DataType::FLOAT32)\r\n```\r\ncurrently, it prints such in failure. \r\n`the Type of the Input NDArray#0 {6} expected to be equal to  5`\r\nmeaning the input (indexed 0) { here evaluated result} expected to be  equal to actual result\r\nI think I need to add better stringify for DataType as it outputs int number\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "640195529",
    "pr_number": 9328,
    "pr_file": "libnd4j/include/helpers/impl/EigenValsAndVecs.cpp",
    "created_at": "2021-05-26T23:56:03+00:00",
    "commented_code": "}\n }\n \n+template <typename T>\n+void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n+    calcEigenVecs_<T>(schurMatrixU, _Vals, _Vecs);\n+}\n+\n+template <typename T>\n+void eig_(const NDArray& input, NDArray& vals,  NDArray& vecs ){ \n+\n+    assert(input.rankOf() == 2);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "640195529",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9328,
        "pr_file": "libnd4j/include/helpers/impl/EigenValsAndVecs.cpp",
        "discussion_id": "640195529",
        "commented_code": "@@ -284,6 +294,33 @@ void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n     }\n }\n \n+template <typename T>\n+void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n+    calcEigenVecs_<T>(schurMatrixU, _Vals, _Vecs);\n+}\n+\n+template <typename T>\n+void eig_(const NDArray& input, NDArray& vals,  NDArray& vecs ){ \n+\n+    assert(input.rankOf() == 2);",
        "comment_created_at": "2021-05-26T23:56:03+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "Mind adding error messages to these? Otherwise it will be hard to debug (especially from java)",
        "pr_file_module": null
      },
      {
        "comment_id": "640222324",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9328,
        "pr_file": "libnd4j/include/helpers/impl/EigenValsAndVecs.cpp",
        "discussion_id": "640195529",
        "commented_code": "@@ -284,6 +294,33 @@ void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n     }\n }\n \n+template <typename T>\n+void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n+    calcEigenVecs_<T>(schurMatrixU, _Vals, _Vecs);\n+}\n+\n+template <typename T>\n+void eig_(const NDArray& input, NDArray& vals,  NDArray& vecs ){ \n+\n+    assert(input.rankOf() == 2);",
        "comment_created_at": "2021-05-27T01:15:16+00:00",
        "comment_author": "quickwritereader",
        "comment_body": "Its accepted just to leave a comment while using the standard runtime assert . I will expand it to have messages. \r\n\r\nI used assert there because it is used internally by the op and the op is responsible for throwing errors and checking before calling.",
        "pr_file_module": null
      },
      {
        "comment_id": "640237797",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9328,
        "pr_file": "libnd4j/include/helpers/impl/EigenValsAndVecs.cpp",
        "discussion_id": "640195529",
        "commented_code": "@@ -284,6 +294,33 @@ void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n     }\n }\n \n+template <typename T>\n+void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n+    calcEigenVecs_<T>(schurMatrixU, _Vals, _Vecs);\n+}\n+\n+template <typename T>\n+void eig_(const NDArray& input, NDArray& vals,  NDArray& vecs ){ \n+\n+    assert(input.rankOf() == 2);",
        "comment_created_at": "2021-05-27T02:06:26+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "For sure! I was just mentioning that because anyone at the java level debugging something from c++ won't really want to have to click in to and read c++ source code and to try to reverse engineer what the problem is.",
        "pr_file_module": null
      },
      {
        "comment_id": "640319515",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9328,
        "pr_file": "libnd4j/include/helpers/impl/EigenValsAndVecs.cpp",
        "discussion_id": "640195529",
        "commented_code": "@@ -284,6 +294,33 @@ void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n     }\n }\n \n+template <typename T>\n+void EigenValsAndVecs<T>::calcEigenVecs(const NDArray& schurMatrixU) {\n+    calcEigenVecs_<T>(schurMatrixU, _Vals, _Vecs);\n+}\n+\n+template <typename T>\n+void eig_(const NDArray& input, NDArray& vals,  NDArray& vecs ){ \n+\n+    assert(input.rankOf() == 2);",
        "comment_created_at": "2021-05-27T06:22:08+00:00",
        "comment_author": "quickwritereader",
        "comment_body": "I followed the old trick to add a message to the assert. now it will be informative for debug",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "262836286",
    "pr_number": 7251,
    "pr_file": "libnd4j/include/ops/declarable/generic/transforms/standardize.cpp",
    "created_at": "2019-03-06T08:34:46+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2019 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+//\n+// @author Paul Dubs\n+//\n+\n+#include <op_boilerplate.h>\n+#if NOT_EXCLUDED(OP_standardize)\n+\n+#include <ops/declarable/CustomOperations.h>\n+#include <ops/declarable/helpers/reverse.h>\n+\n+\n+namespace nd4j {\n+namespace ops  {\n+\n+    CONFIGURABLE_OP_IMPL(standardize, 1, 1, true, 0, -2) {\n+        \n+        auto input = INPUT_VARIABLE(0);\n+        auto output = OUTPUT_VARIABLE(0);\n+        \n+        std::vector<int> axis;        \n+\n+        if (block.width() > 1)            \n+            axis = INPUT_VARIABLE(1)->template asVectorT<int>();\n+        else if (block.numI() > 0) \n+            axis = *block.getIArguments();        \n+\n+        if(axis.empty()) {      // do not perform standardization\n+            output->assign(input);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "262836286",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7251,
        "pr_file": "libnd4j/include/ops/declarable/generic/transforms/standardize.cpp",
        "discussion_id": "262836286",
        "commented_code": "@@ -0,0 +1,133 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2019 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+//\n+// @author Paul Dubs\n+//\n+\n+#include <op_boilerplate.h>\n+#if NOT_EXCLUDED(OP_standardize)\n+\n+#include <ops/declarable/CustomOperations.h>\n+#include <ops/declarable/helpers/reverse.h>\n+\n+\n+namespace nd4j {\n+namespace ops  {\n+\n+    CONFIGURABLE_OP_IMPL(standardize, 1, 1, true, 0, -2) {\n+        \n+        auto input = INPUT_VARIABLE(0);\n+        auto output = OUTPUT_VARIABLE(0);\n+        \n+        std::vector<int> axis;        \n+\n+        if (block.width() > 1)            \n+            axis = INPUT_VARIABLE(1)->template asVectorT<int>();\n+        else if (block.numI() > 0) \n+            axis = *block.getIArguments();        \n+\n+        if(axis.empty()) {      // do not perform standardization\n+            output->assign(input);",
        "comment_created_at": "2019-03-06T08:34:46+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Is \"no axis\" a legitimate use case? More likely to be a bug than \"I want to implement identity op via standardize\".\r\nIMO exception would be better.",
        "pr_file_module": null
      }
    ]
  }
]