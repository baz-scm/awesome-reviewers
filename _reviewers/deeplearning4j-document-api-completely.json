[
  {
    "discussion_id": "749030917",
    "pr_number": 9521,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/enums/WeightsFormat.java",
    "created_at": "2021-11-15T06:17:17+00:00",
    "commented_code": "*/\n \n package org.nd4j.enums;\n-\n+//  // [kH, kW, iC, oC], [oC, iC, kH, kW], [oC, kH, kW, iC]\n public enum WeightsFormat {\n-  YXIO,\n+  YXIO, //[kH, kW, iC, oC]\n \n-  OIYX,\n+  OIYX, // [oC, iC, kH, kW]\n \n-  OYXI\n+  OYXI //[oC, kH, kW, iC]\n }",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "749030917",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9521,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/enums/WeightsFormat.java",
        "discussion_id": "749030917",
        "commented_code": "@@ -19,11 +19,11 @@\n  */\n \n package org.nd4j.enums;\n-\n+//  // [kH, kW, iC, oC], [oC, iC, kH, kW], [oC, kH, kW, iC]\n public enum WeightsFormat {\n-  YXIO,\n+  YXIO, //[kH, kW, iC, oC]\n \n-  OIYX,\n+  OIYX, // [oC, iC, kH, kW]\n \n-  OYXI\n+  OYXI //[oC, kH, kW, iC]\n }",
        "comment_created_at": "2021-11-15T06:17:17+00:00",
        "comment_author": "treo",
        "comment_body": "It may make sense to put this as Javadoc on the individual Enums? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "677149871",
    "pr_number": 9400,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/indexing/conditions/Or.java",
    "created_at": "2021-07-27T06:18:17+00:00",
    "commented_code": "this.conditions = conditions;\n     }\n \n+    @Override\n+    public void setValue(Number value) {\n+",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "677149871",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9400,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/indexing/conditions/Or.java",
        "discussion_id": "677149871",
        "commented_code": "@@ -28,6 +28,11 @@ public Or(Condition... conditions) {\n         this.conditions = conditions;\n     }\n \n+    @Override\n+    public void setValue(Number value) {\n+",
        "comment_created_at": "2021-07-27T06:18:17+00:00",
        "comment_author": "treo",
        "comment_body": "Again, a comment why this is empty would be useful.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "305560062",
    "pr_number": 7997,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
    "created_at": "2019-07-20T00:41:22+00:00",
    "commented_code": "nd4j.initContext();\n     }\n \n-\n     public enum PadMode {\n         CONSTANT, EDGE, LINEAR_RAMP, MAXIMUM, MEAN, MEDIAN, MINIMUM, REFLECT, SYMMETRIC, WRAP\n \n     }\n \n     /**\n-     * Pad the given ndarray to the size along each dimension\n-     * @param toPad the ndarray to pad\n-     * @param padWidth the width to pad along each dimension\n-     * @param padMode the mode to pad in\n-     * @return the padded ndarray\n-     * based on the specified mode\n+     * @see #pad(INDArray, int[][], PadMode)",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "305560062",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7997,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
        "discussion_id": "305560062",
        "commented_code": "@@ -204,26 +203,18 @@\n         nd4j.initContext();\n     }\n \n-\n     public enum PadMode {\n         CONSTANT, EDGE, LINEAR_RAMP, MAXIMUM, MEAN, MEDIAN, MINIMUM, REFLECT, SYMMETRIC, WRAP\n \n     }\n \n     /**\n-     * Pad the given ndarray to the size along each dimension\n-     * @param toPad the ndarray to pad\n-     * @param padWidth the width to pad along each dimension\n-     * @param padMode the mode to pad in\n-     * @return the padded ndarray\n-     * based on the specified mode\n+     * @see #pad(INDArray, int[][], PadMode)",
        "comment_created_at": "2019-07-20T00:41:22+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "https://github.com/eclipse/deeplearning4j/issues/8031\r\n\r\nAlso `@see` is self-referential?\r\nShould be `#pad(INDArray, int[][], List<double[]>, PadMode)` I think? (there's other ones like this).\r\nAlso for future reference: when the signatures differ, we need to specify the default behaviour / arg values, otherwise the user has to try and dig this out of the code.\r\nA good comment would be: `As per {@link ...} with 'constantValues' being zeros (zero padding)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "305560705",
    "pr_number": 7997,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
    "created_at": "2019-07-20T00:52:10+00:00",
    "commented_code": "*/\n     public static INDArray rollAxis(INDArray a, int axis) {\n         return rollAxis(a, axis, 0);\n-\n     }\n \n-\n     /**\n-     *\n-     * @param arr\n-     * @param dimension\n-     * @return\n+     * Get the maximum (argmax) or minimum (argmin) values for a dimension.",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "305560705",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7997,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
        "discussion_id": "305560705",
        "commented_code": "@@ -677,26 +651,21 @@ public static void setParams(INDArray theta, Collection<INDArray>... matrices) {\n      */\n     public static INDArray rollAxis(INDArray a, int axis) {\n         return rollAxis(a, axis, 0);\n-\n     }\n \n-\n     /**\n-     *\n-     * @param arr\n-     * @param dimension\n-     * @return\n+     * Get the maximum (argmax) or minimum (argmin) values for a dimension.",
        "comment_created_at": "2019-07-20T00:52:10+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "I get what you're going for here. But suppose the user comes directly to the argMax method (not via the argMin see/link).\r\nThey could reasonably intepret this to mean that *somehow* the minimum might be returned by this method.\r\n\r\nBetter: only talk about argmax here. And for argMin, do something like `An per {@link argMax(...)} but for minimum values`",
        "pr_file_module": null
      },
      {
        "comment_id": "306074145",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7997,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
        "discussion_id": "305560705",
        "commented_code": "@@ -677,26 +651,21 @@ public static void setParams(INDArray theta, Collection<INDArray>... matrices) {\n      */\n     public static INDArray rollAxis(INDArray a, int axis) {\n         return rollAxis(a, axis, 0);\n-\n     }\n \n-\n     /**\n-     *\n-     * @param arr\n-     * @param dimension\n-     * @return\n+     * Get the maximum (argmax) or minimum (argmin) values for a dimension.",
        "comment_created_at": "2019-07-22T23:29:17+00:00",
        "comment_author": "RobAltena",
        "comment_body": "[PR with fix](https://github.com/SkymindIO/deeplearning4j/pull/76)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "305563128",
    "pr_number": 7997,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
    "created_at": "2019-07-20T01:52:04+00:00",
    "commented_code": "}\n     }\n \n-\n-\n     /**\n-     * Array written to outputstream\n-     *\n-     * @param os the outputstream stream ndarray\n-     * @param split\n      * @deprecated custom col separators are no longer supported; uses \",\"\n-     * @param precision\n      * @deprecated precision can no longer be specified. The array is written in scientific notation.\n-     * Use {@link #writeTxtString(INDArray, OutputStream)}\n+     * @see #writeTxtString(INDArray, OutputStream)\n      */\n     public static void writeTxtString(INDArray write, OutputStream os, String split, int precision) {",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "305563128",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7997,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
        "discussion_id": "305563128",
        "commented_code": "@@ -2285,41 +2420,27 @@ public static void writeTxt(INDArray write, String filePath) {\n         }\n     }\n \n-\n-\n     /**\n-     * Array written to outputstream\n-     *\n-     * @param os the outputstream stream ndarray\n-     * @param split\n      * @deprecated custom col separators are no longer supported; uses \",\"\n-     * @param precision\n      * @deprecated precision can no longer be specified. The array is written in scientific notation.\n-     * Use {@link #writeTxtString(INDArray, OutputStream)}\n+     * @see #writeTxtString(INDArray, OutputStream)\n      */\n     public static void writeTxtString(INDArray write, OutputStream os, String split, int precision) {",
        "comment_created_at": "2019-07-20T01:52:04+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Technically not javadoc, but you might as well fix them when you see them.\r\nDeprecated methods should follow the following format (usually)\r\n1. An `@Deprecated` annotation on the method (or class if applicable)\r\n2. A `@deprecated` javadoc tag\r\n3. Javadoc tag should include what to use instead (+ why it was deprecated, if applicable)\r\n4. Usually - no other comments other than the deprecated information (to discourage users from using it at all)\r\n\r\nAlso a minor nitpick: I prefer the `{@link ...}` style directly in the `@deprecated` tag.\r\n`@see` gets rendered to javadoc as something like:\r\n```\r\nSee Also:\r\nsomeMethod(int, double)\r\n```\r\nSemantically - \"see also\" is different to \"use this instead\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "262836978",
    "pr_number": 7251,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/ops/SDMath.java",
    "created_at": "2019-03-06T08:36:53+00:00",
    "commented_code": "return updateVariableNameAndReference(ret, name);\n     }\n \n+    /**\n+     * Standardize input variable along given axis",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "262836978",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7251,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/ops/SDMath.java",
        "discussion_id": "262836978",
        "commented_code": "@@ -2168,6 +2168,28 @@ public SDVariable step(String name, SDVariable in, double cutoff) {\n         return updateVariableNameAndReference(ret, name);\n     }\n \n+    /**\n+     * Standardize input variable along given axis",
        "comment_created_at": "2019-03-06T08:36:53+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Better javadoc would be good. Mainly clarify exactly what you mean by \"standardize\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "186936413",
    "pr_number": 4985,
    "pr_file": "deeplearning4j-zoo/src/main/java/org/deeplearning4j/zoo/InstantiableModel.java",
    "created_at": "2018-05-09T05:50:42+00:00",
    "commented_code": "public Model init();\n \n-    public ModelMetaData metaData();\n-\n-    public ZooType zooType();\n+    @Deprecated public ModelMetaData metaData();",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "186936413",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 4985,
        "pr_file": "deeplearning4j-zoo/src/main/java/org/deeplearning4j/zoo/InstantiableModel.java",
        "discussion_id": "186936413",
        "commented_code": "@@ -12,9 +12,7 @@\n \n     public Model init();\n \n-    public ModelMetaData metaData();\n-\n-    public ZooType zooType();\n+    @Deprecated public ModelMetaData metaData();",
        "comment_created_at": "2018-05-09T05:50:42+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "As a general rule: any time we add a ```@Deprecated``` tag we should have javadoc to explain why and/or what to use instead. Even better: add a date/version (pretty sure we're going with 1.0.0-beta for next release)",
        "pr_file_module": null
      },
      {
        "comment_id": "186940138",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 4985,
        "pr_file": "deeplearning4j-zoo/src/main/java/org/deeplearning4j/zoo/InstantiableModel.java",
        "discussion_id": "186936413",
        "commented_code": "@@ -12,9 +12,7 @@\n \n     public Model init();\n \n-    public ModelMetaData metaData();\n-\n-    public ZooType zooType();\n+    @Deprecated public ModelMetaData metaData();",
        "comment_created_at": "2018-05-09T06:18:12+00:00",
        "comment_author": "crockpotveggies",
        "comment_body": "See update.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "211565521",
    "pr_number": 6229,
    "pr_file": "deeplearning4j/deeplearning4j-scaleout/deeplearning4j-scaleout-parallelwrapper/src/main/java/org/deeplearning4j/parallelism/InplaceParallelInference.java",
    "created_at": "2018-08-21T11:10:05+00:00",
    "commented_code": "+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.deeplearning4j.parallelism;\n+\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.deeplearning4j.nn.api.Model;\n+import org.deeplearning4j.nn.conf.ComputationGraphConfiguration;\n+import org.deeplearning4j.nn.conf.MultiLayerConfiguration;\n+import org.deeplearning4j.nn.graph.ComputationGraph;\n+import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\n+import org.deeplearning4j.parallelism.inference.LoadBalanceMode;\n+import org.nd4j.linalg.api.ndarray.INDArray;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.factory.Nd4j;\n+\n+import java.util.*;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * This ParallelInference implementation provides inference functionality without launching additional threads, so inference happens in the calling thread",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "211565521",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6229,
        "pr_file": "deeplearning4j/deeplearning4j-scaleout/deeplearning4j-scaleout-parallelwrapper/src/main/java/org/deeplearning4j/parallelism/InplaceParallelInference.java",
        "discussion_id": "211565521",
        "commented_code": "@@ -0,0 +1,273 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015-2018 Skymind, Inc.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Apache License, Version 2.0 which is available at\n+ * https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ ******************************************************************************/\n+\n+package org.deeplearning4j.parallelism;\n+\n+\n+import lombok.*;\n+import lombok.extern.slf4j.Slf4j;\n+import org.deeplearning4j.nn.api.Model;\n+import org.deeplearning4j.nn.conf.ComputationGraphConfiguration;\n+import org.deeplearning4j.nn.conf.MultiLayerConfiguration;\n+import org.deeplearning4j.nn.graph.ComputationGraph;\n+import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\n+import org.deeplearning4j.parallelism.inference.LoadBalanceMode;\n+import org.nd4j.linalg.api.ndarray.INDArray;\n+import org.nd4j.linalg.exception.ND4JIllegalStateException;\n+import org.nd4j.linalg.factory.Nd4j;\n+\n+import java.util.*;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * This ParallelInference implementation provides inference functionality without launching additional threads, so inference happens in the calling thread",
        "comment_created_at": "2018-08-21T11:10:05+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "More javadoc - limitations, when to use.\r\nAlso how to build one (i.e., \"use PI builder configured with X, not this class\") - that might not be obvious to users at first glance (it wasn't for me)",
        "pr_file_module": null
      }
    ]
  }
]