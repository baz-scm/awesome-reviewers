[
  {
    "discussion_id": "336816568",
    "pr_number": 8301,
    "pr_file": "docs/samediff/templates/model-import.md",
    "created_at": "2019-10-21T02:00:20+00:00",
    "commented_code": "-# Getting started: importing TensorFlow and ONNX models into SameDiff\n\\ No newline at end of file\n+---\n+title: Getting started: importing TensorFlow and ONNX models into SameDiff\n+short_title: Model import\n+description: importing TensorFlow and ONNX models into SameDiff\n+category: SameDiff\n+weight: 3\n+---\n+\n+# Getting started: importing TensorFlow models into SameDiff\n+\n+## What models can be imported into samediff\n+\n+Currently samediff supports the import of Tensorflow frozen graphs through the various Samediff.importFrozenTF methods.",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "336816568",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 8301,
        "pr_file": "docs/samediff/templates/model-import.md",
        "discussion_id": "336816568",
        "commented_code": "@@ -1 +1,62 @@\n-# Getting started: importing TensorFlow and ONNX models into SameDiff\n\\ No newline at end of file\n+---\n+title: Getting started: importing TensorFlow and ONNX models into SameDiff\n+short_title: Model import\n+description: importing TensorFlow and ONNX models into SameDiff\n+category: SameDiff\n+weight: 3\n+---\n+\n+# Getting started: importing TensorFlow models into SameDiff\n+\n+## What models can be imported into samediff\n+\n+Currently samediff supports the import of Tensorflow frozen graphs through the various Samediff.importFrozenTF methods. ",
        "comment_created_at": "2019-10-21T02:00:20+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Capitalization: `samediff` -> `SameDiff`\r\n`Tensorflow` -> `TensorFlow`\r\n`Samediff.importFrozenTF` -> `SameDiff.importFrozenTF`\r\n\r\nSame things in a few other places in the doc, I won't flag others...",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "307207165",
    "pr_number": 8043,
    "pr_file": "docs/samediff/templates/ops.md",
    "created_at": "2019-07-25T09:41:59+00:00",
    "commented_code": "-# SameDiff operations\n-\n-{{autogenerated}}\n\\ No newline at end of file\n+---\r\n+title: Operations in SameDiff\r\n+short_title: Ops\r\n+description: What kind of operations is there in `SameDiff` and how to use them\r\n+category: SameDiff\r\n+weight: 4\r\n+---\r\n+\r\n+# SameDiff operations\r\n+\r\n+Operations in `SameDiff` work mostly the way you'd expect them to. You take variables - in our framework, those are \r\n+objects of type `SDVariable` - apply operations to them, and thus produce new variables. Before we proceed to the \r\n+overview of the available operations, let us list some of their common properties.\r\n+\r\n+## Common properties of operations\r\n+\r\n+- All operations should return a new `SDVariable`. Thus, a standalone operation like ```x.mul(2);``` will not work; one \r\n+needs to have something like\r\n+```java\r\n+SDVariable _2x = x.mul(2);\r\n+``` \r\n+- All variables in an operation have to belong to the same instance of `SamdeDiff` (see the [variables](./samediff/variables)\r\n+section on how variables are added to a `SameDiff` instance). In other words, the following code will also produce an \r\n+exception \r\n+```java\r\n+SDVariable x = sameDiff0.var(DataType.FLOAT, 1);\r\n+SDVariable y = sameDiff1.placeHolder(DataType.FLOAT, 1);\r\n+//The following code produces exception, because SameDiff instances are different\r\n+SDVariable z = x.add(y);\r\n+```\r\n+- Operations **may not** be used to redefine variables that were already introduced. The following code will produce an \r\n+exception\r\n+```java\r\n+SDVariable z = x.add(y);\r\n+//The following code produces an exception!!!\r\n+x = z.mul(y);\r\n+``` \r\n+To learn more why it is made like that, see our section on [graph](./samediff/graph).\r\n+- Variables of any *variable type* may be used in any operation, as long as their *data types* match those that are \r\n+required by the operation (again, see our [variables](./samediff/variables) section for what variable types are). Most\r\n+often an operation will require its `SDVariable` to have a floating point data type.\r\n+- Variables created by operations have `ARRAY` variable type.\r\n+- For all operations, you may define a `String` name of your resulting variable, although for most operations this\r\n+is not obligatory. The name goes as the first (optional) argument in each operation, like so:",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "307207165",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 8043,
        "pr_file": "docs/samediff/templates/ops.md",
        "discussion_id": "307207165",
        "commented_code": "@@ -1,3 +1,243 @@\n-# SameDiff operations\n-\n-{{autogenerated}}\n\\ No newline at end of file\n+---\r\n+title: Operations in SameDiff\r\n+short_title: Ops\r\n+description: What kind of operations is there in `SameDiff` and how to use them\r\n+category: SameDiff\r\n+weight: 4\r\n+---\r\n+\r\n+# SameDiff operations\r\n+\r\n+Operations in `SameDiff` work mostly the way you'd expect them to. You take variables - in our framework, those are \r\n+objects of type `SDVariable` - apply operations to them, and thus produce new variables. Before we proceed to the \r\n+overview of the available operations, let us list some of their common properties.\r\n+\r\n+## Common properties of operations\r\n+\r\n+- All operations should return a new `SDVariable`. Thus, a standalone operation like ```x.mul(2);``` will not work; one \r\n+needs to have something like\r\n+```java\r\n+SDVariable _2x = x.mul(2);\r\n+``` \r\n+- All variables in an operation have to belong to the same instance of `SamdeDiff` (see the [variables](./samediff/variables)\r\n+section on how variables are added to a `SameDiff` instance). In other words, the following code will also produce an \r\n+exception \r\n+```java\r\n+SDVariable x = sameDiff0.var(DataType.FLOAT, 1);\r\n+SDVariable y = sameDiff1.placeHolder(DataType.FLOAT, 1);\r\n+//The following code produces exception, because SameDiff instances are different\r\n+SDVariable z = x.add(y);\r\n+```\r\n+- Operations **may not** be used to redefine variables that were already introduced. The following code will produce an \r\n+exception\r\n+```java\r\n+SDVariable z = x.add(y);\r\n+//The following code produces an exception!!!\r\n+x = z.mul(y);\r\n+``` \r\n+To learn more why it is made like that, see our section on [graph](./samediff/graph).\r\n+- Variables of any *variable type* may be used in any operation, as long as their *data types* match those that are \r\n+required by the operation (again, see our [variables](./samediff/variables) section for what variable types are). Most\r\n+often an operation will require its `SDVariable` to have a floating point data type.\r\n+- Variables created by operations have `ARRAY` variable type.\r\n+- For all operations, you may define a `String` name of your resulting variable, although for most operations this\r\n+is not obligatory. The name goes as the first (optional) argument in each operation, like so:\r",
        "comment_created_at": "2019-07-25T09:41:59+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Technically it's a method overload, not an optional argument.\r\nLet's also mention generated name \"based on the operation name\" when not specified",
        "pr_file_module": null
      }
    ]
  }
]