[
  {
    "discussion_id": "242828434",
    "pr_number": 6835,
    "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
    "created_at": "2018-12-19T08:36:42+00:00",
    "commented_code": "*Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "242828434",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6835,
        "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
        "discussion_id": "242828434",
        "commented_code": "@@ -12,60 +12,77 @@ weight: 10\n \n *Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all",
        "comment_created_at": "2018-12-19T08:36:42+00:00",
        "comment_author": "printomi",
        "comment_body": "I think apt-get clean does not need the argument `all`. See [this answer on askubuntu](https://askubuntu.com/a/144224).\r\nOption `-y` of apt-get commands is not necessary. I don't like it, because it applies changes without asking. However, if one wants to run these commands non-interactively, they can read the [man page](http://manpages.ubuntu.com/manpages/bionic/man8/apt-get.8.html) about option `-y`.",
        "pr_file_module": null
      },
      {
        "comment_id": "243735221",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6835,
        "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
        "discussion_id": "242828434",
        "commented_code": "@@ -12,60 +12,77 @@ weight: 10\n \n *Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all",
        "comment_created_at": "2018-12-22T12:21:13+00:00",
        "comment_author": "ShamsUlAzeem",
        "comment_body": "I'll get rid of the `all` part in there. The reason I put the `-y` flag in there was for people who just want to copy and paste the script from the docs. If I don't put it in there and if someone copies and execute the script then the behavior would be different. The characters from the successive command would be used as a reply for the changes that are to be made. In that case the behavior is more ambiguous. I think it's pretty safe for these commands to have a `-y` flag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "242835376",
    "pr_number": 6835,
    "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
    "created_at": "2018-12-19T08:59:46+00:00",
    "commented_code": "*Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all\n+sudo apt-get update -y\n+sudo apt-get upgrade -y\n+sudo apt-get install -y cmake git openjdk-8-jdk build-essential\n+echo 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Maven\n+MAVEN_VERSION=3.6.0\n+cd /usr/local/src\n+sudo wget http://www-eu.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo tar -xf apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo mv apache-maven-${MAVEN_VERSION}/ apache-maven/\n+echo 'export PATH=/usr/local/src/apache-maven/bin:${PATH}' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Python Developer Tools\n+sudo apt-get upgrade python-setuptools",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "242835376",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6835,
        "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
        "discussion_id": "242835376",
        "commented_code": "@@ -12,60 +12,77 @@ weight: 10\n \n *Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all\n+sudo apt-get update -y\n+sudo apt-get upgrade -y\n+sudo apt-get install -y cmake git openjdk-8-jdk build-essential\n+echo 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Maven\n+MAVEN_VERSION=3.6.0\n+cd /usr/local/src\n+sudo wget http://www-eu.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo tar -xf apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo mv apache-maven-${MAVEN_VERSION}/ apache-maven/\n+echo 'export PATH=/usr/local/src/apache-maven/bin:${PATH}' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Python Developer Tools\n+sudo apt-get upgrade python-setuptools",
        "comment_created_at": "2018-12-19T08:59:46+00:00",
        "comment_author": "printomi",
        "comment_body": "Why do we need two separate apt-get commands here to install packages? I would use this single line instead:\r\n```\r\nsudo apt-get install python-pip python-wheel python-dev python-setuptools\r\n```\r\nI would ask this same question on CentOS with yum.",
        "pr_file_module": null
      },
      {
        "comment_id": "243735354",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6835,
        "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
        "discussion_id": "242835376",
        "commented_code": "@@ -12,60 +12,77 @@ weight: 10\n \n *Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all\n+sudo apt-get update -y\n+sudo apt-get upgrade -y\n+sudo apt-get install -y cmake git openjdk-8-jdk build-essential\n+echo 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Maven\n+MAVEN_VERSION=3.6.0\n+cd /usr/local/src\n+sudo wget http://www-eu.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo tar -xf apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo mv apache-maven-${MAVEN_VERSION}/ apache-maven/\n+echo 'export PATH=/usr/local/src/apache-maven/bin:${PATH}' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Python Developer Tools\n+sudo apt-get upgrade python-setuptools",
        "comment_created_at": "2018-12-22T12:26:38+00:00",
        "comment_author": "ShamsUlAzeem",
        "comment_body": "@printomi would the `install` command also upgrade the previously installed packages?",
        "pr_file_module": null
      },
      {
        "comment_id": "244651478",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6835,
        "pr_file": "docs/deeplearning4j/templates/build-from-source.md",
        "discussion_id": "242835376",
        "commented_code": "@@ -12,60 +12,77 @@ weight: 10\n \n *Unless you have a very good reason to build from source (such as developing new features - excluding custom layers, custom activation functions, custom loss functions, etc - all of which can be added without modifying DL4J directly) then you shouldn't build from source. Building from source can be quite complex, with no benefit in a lot of cases.*\n \n-For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository. If you are not using the master branch, you can modify these steps as needed (i.e.: switching GIT branches and modifying the `build-dl4j-stack.sh` script).\n+For those developers and engineers who prefer to use the most up-to-date version of Deeplearning4j or fork and build their own version, these instructions will walk you through building and installing Deeplearning4j. The preferred installation destination is to your machine's local maven repository.\n \n-Building locally requires that you build the entire Deeplearning4j stack which includes:\n+Building locally will build the entire Deeplearning4j stack, which is now consolidated inside the Deeplearning4j [monorepo](). The main components of the stack includes:\n \n-- [libnd4j](https://github.com/deeplearning4j/libnd4j)\n-- [nd4j](https://github.com/deeplearning4j/nd4j)\n-- [datavec](https://github.com/deeplearning4j/datavec)\n-- [deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n+* [LIBND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/libnd4j)\n+* [ND4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4j)\n+* [Datavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/datavec)\n+* [Arbiter](https://github.com/deeplearning4j/deeplearning4j/tree/master/arbiter)\n+* [ND4S](https://github.com/deeplearning4j/deeplearning4j/tree/master/nd4s)\n+* [Gym Java Client](https://github.com/deeplearning4j/deeplearning4j/tree/master/gym-java-client)\n+* [RL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/rl4j)\n+* [ScalNet](https://github.com/deeplearning4j/deeplearning4j/tree/master/scalnet)\n+* [PyDL4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydl4j)\n+* [Jumpy](https://github.com/deeplearning4j/deeplearning4j/tree/master/jumpy)\n+* [PyDatavec](https://github.com/deeplearning4j/deeplearning4j/tree/master/pydatavec)\n+* [DeepLearning4J](https://github.com/deeplearning4j/deeplearning4j/tree/master/deeplearning4j)\n \n-Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and is also includes multiple \"flavors\" depending on the computing architecture you choose to utilize. This includes CPU (OpenBLAS, MKL, ATLAS) and GPU (CUDA). The DL4J stack also supports x86 and PowerPC architectures.\n+Note that Deeplearning4j is designed to work on most platforms (Windows, OS X, and Linux) and it also includes multiple \"flavors\" depending on the computing architecture you choose to utilize, such as CUDA for GPUs.\n \n ## Prerequisites\n \n-Your local machine will require some essential software and environment variables set *before* you try to build and install the DL4J stack. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This software includes:\n-\n-- git\n-- cmake (3.2 or higher)\n-- OpenMP\n-- gcc (4.9 or higher)\n-- maven (3.3 or higher)\n-\n-Architecture-specific software includes:\n-\n-CPU options:\n-\n-- Intel MKL\n-- OpenBLAS\n-- ATLAS\n-\n-GPU options:\n-\n-- CUDA\n+Your local machine will require some essential softwares and environment variables set *before* you try to build and install DL4J. Depending on your platform and the version of your operating system, the instructions may vary in getting them to work. This required softwares include:\n \n+* Git\n+* Cmake\n+* OpenMP 4.5 supported compiler (Recommended)\n+* GCC >= 4.9\n+* G++ >= 4.9\n+* Java >= 1.7\n+* Maven >= 3.3\n+* Python Developer Tools\n+* CUDA SDK >= 8.0 (Optional - For GPU build)\n \n IDE-specific requirements:\n \n-- IntelliJ Lombok plugin\n+* Lombok Plugin for IntelliJ or Eclipse\n \n DL4J testing dependencies:\n \n-- dl4j-test-resources\n+* [dl4j-test-resources](https://github.com/deeplearning4j/dl4j-test-resources) (Needed only for running tests.)\n \n ### Installing Prerequisite Tools\n \n-#### Linux\n+#### Ubuntu\n \n-**Ubuntu**\n Assuming you are using Ubuntu as your flavor of Linux and you are running as a non-root user, follow these steps to install prerequisite software:\n \n-```\n-sudo apt-get purge maven maven2 maven3\n-sudo add-apt-repository ppa:natecarlson/maven3\n-sudo apt-get update\n-sudo apt-get install maven build-essentials cmake libgomp1\n+```bash\n+# Installing JDK, Cmake, git, GCC and G++\n+sudo apt-get clean -y all\n+sudo apt-get update -y\n+sudo apt-get upgrade -y\n+sudo apt-get install -y cmake git openjdk-8-jdk build-essential\n+echo 'export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Maven\n+MAVEN_VERSION=3.6.0\n+cd /usr/local/src\n+sudo wget http://www-eu.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo tar -xf apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz\n+sudo mv apache-maven-${MAVEN_VERSION}/ apache-maven/\n+echo 'export PATH=/usr/local/src/apache-maven/bin:${PATH}' >> ~/.profile\n+source ~/.profile\n+\n+# Installing Python Developer Tools\n+sudo apt-get upgrade python-setuptools",
        "comment_created_at": "2019-01-01T23:51:15+00:00",
        "comment_author": "printomi",
        "comment_body": "Yes, `apt-get install package` will either  install a new package, or upgrade an existing package. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "196265300",
    "pr_number": 5616,
    "pr_file": "nd4j/RaspberryPi.md",
    "created_at": "2018-06-19T00:34:49+00:00",
    "commented_code": "+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "196265300",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5616,
        "pr_file": "nd4j/RaspberryPi.md",
        "discussion_id": "196265300",
        "commented_code": "@@ -0,0 +1,46 @@\n+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
        "comment_created_at": "2018-06-19T00:34:49+00:00",
        "comment_author": "saudet",
        "comment_body": "Let's use a variable for the path to the tools.",
        "pr_file_module": null
      },
      {
        "comment_id": "196271532",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5616,
        "pr_file": "nd4j/RaspberryPi.md",
        "discussion_id": "196265300",
        "commented_code": "@@ -0,0 +1,46 @@\n+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
        "comment_created_at": "2018-06-19T01:25:07+00:00",
        "comment_author": "shdwshard",
        "comment_body": "for the \"/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\" or \"/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/\" bit which is used twice? Makes sense in theory, not sure how that works inside this file, but looks plausible that one more SET and some syntax could make that work.  (I'll look it up)",
        "pr_file_module": null
      },
      {
        "comment_id": "196274516",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5616,
        "pr_file": "nd4j/RaspberryPi.md",
        "discussion_id": "196265300",
        "commented_code": "@@ -0,0 +1,46 @@\n+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
        "comment_created_at": "2018-06-19T01:49:18+00:00",
        "comment_author": "saudet",
        "comment_body": "All 3 like for Android here:\r\nhttps://github.com/deeplearning4j/deeplearning4j/blob/master/libnd4j/cmake/android-arm.cmake\r\nOr just 1 variable that's used for all 3. It doesn't really matter, as long as it's configurable so we can include it in a script file like this:\r\nhttps://github.com/deeplearning4j/deeplearning4j/blob/master/libnd4j/buildnativeoperations.sh#L150",
        "pr_file_module": null
      },
      {
        "comment_id": "196279582",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5616,
        "pr_file": "nd4j/RaspberryPi.md",
        "discussion_id": "196265300",
        "commented_code": "@@ -0,0 +1,46 @@\n+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
        "comment_created_at": "2018-06-19T02:31:20+00:00",
        "comment_author": "shdwshard",
        "comment_body": "Ahh, got it.  That makes a lot of sense for how to organize things, so I'll check out the repo locally and properly edit this branch.",
        "pr_file_module": null
      },
      {
        "comment_id": "196288482",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5616,
        "pr_file": "nd4j/RaspberryPi.md",
        "discussion_id": "196265300",
        "commented_code": "@@ -0,0 +1,46 @@\n+Please follow following instructions to build nd4j for raspberry PI:\n+\n+1. download cross compilation tools for Raspberry PI\n+\n+    ```\n+    $ apt-get/yum install git rsync cmake\n+    $ mkdir $HOME/raspberrypi\n+    $ cd $HOME/raspberrypi\n+    $ git clone git://github.com/raspberrypi/tools.git\n+    $ export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin\n+    $ mkdir $HOME/raspberrypi/rootfs\n+    (Replace the ip address in the following command with the IP of a raspberry pi device)\n+    $ rsync -rl --delete-after --safe-links pi@(192.168.1.PI):/{lib,usr} $HOME/raspberrypi/rootfs\n+    $ cat > $HOME/raspberrypi/pi.cmake <<END\n+    SET(CMAKE_SYSTEM_NAME Linux)\n+    SET(CMAKE_SYSTEM_VERSION 1)\n+    SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)",
        "comment_created_at": "2018-06-19T03:57:17+00:00",
        "comment_author": "shdwshard",
        "comment_body": "Modified and modeled after Android.",
        "pr_file_module": null
      }
    ]
  }
]