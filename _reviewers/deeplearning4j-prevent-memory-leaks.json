[
  {
    "discussion_id": "2048530850",
    "pr_number": 10208,
    "pr_file": "libnd4j/include/helpers/cpu/TadCalculator.cpp",
    "created_at": "2025-04-17T08:53:37+00:00",
    "commented_code": "auto shapesBuffer = ConstantShapeHelper::getInstance().bufferForShapeInfo(sPtr->pointerAsT<LongType>());\n \n     // Create offsets buffer\n-    _tadOffsets = ConstantOffsetsBuffer(oPtr);\n-    _tadShape = *shapesBuffer;\n+    _tadOffsets = new ConstantOffsetsBuffer(oPtr);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "2048530850",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 10208,
        "pr_file": "libnd4j/include/helpers/cpu/TadCalculator.cpp",
        "discussion_id": "2048530850",
        "commented_code": "@@ -48,8 +48,8 @@ void TadCalculator::createTadPack(const std::vector<LongType>& dimensions) {\n     auto shapesBuffer = ConstantShapeHelper::getInstance().bufferForShapeInfo(sPtr->pointerAsT<LongType>());\n \n     // Create offsets buffer\n-    _tadOffsets = ConstantOffsetsBuffer(oPtr);\n-    _tadShape = *shapesBuffer;\n+    _tadOffsets = new ConstantOffsetsBuffer(oPtr);",
        "comment_created_at": "2025-04-17T08:53:37+00:00",
        "comment_author": "Copilot",
        "comment_body": "The allocation of _tadOffsets using 'new' raises a potential memory management risk; consider using a smart pointer or ensuring proper deallocation in the class destructor.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1099877580",
    "pr_number": 9907,
    "pr_file": "libnd4j/include/array/impl/NDArrayFactory.cpp",
    "created_at": "2023-02-08T09:35:20+00:00",
    "commented_code": "sd::LaunchContext* context) {\n   if ((int)shape.size() > SD_MAX_RANK)\n     throw std::invalid_argument(\"NDArrayFactory::create: rank of NDArray can't exceed 32\");\n+  sd_printf(\"In arrLength usage aDArrayFactory::create(const char order, const std::vector<sd::LongType>& shape, sd::DataType dtype,\n\"\n+            \"                               sd::LaunchContext* context)\n\",0);\n \n-  ShapeDescriptor descriptor(dtype, order, shape);\n+  ShapeDescriptor *descriptor = new ShapeDescriptor(dtype, order, shape);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "1099877580",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9907,
        "pr_file": "libnd4j/include/array/impl/NDArrayFactory.cpp",
        "discussion_id": "1099877580",
        "commented_code": "@@ -506,11 +512,13 @@ NDArray NDArrayFactory::create(const char order, const std::vector<sd::LongType>\n                                sd::LaunchContext* context) {\n   if ((int)shape.size() > SD_MAX_RANK)\n     throw std::invalid_argument(\"NDArrayFactory::create: rank of NDArray can't exceed 32\");\n+  sd_printf(\"In arrLength usage aDArrayFactory::create(const char order, const std::vector<sd::LongType>& shape, sd::DataType dtype,\\n\"\n+            \"                               sd::LaunchContext* context)\\n\",0);\n \n-  ShapeDescriptor descriptor(dtype, order, shape);\n+  ShapeDescriptor *descriptor = new ShapeDescriptor(dtype, order, shape);",
        "comment_created_at": "2023-02-08T09:35:20+00:00",
        "comment_author": "treo",
        "comment_body": "Missing a delete for this one?",
        "pr_file_module": null
      }
    ]
  }
]