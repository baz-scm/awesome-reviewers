[
  {
    "discussion_id": "298434381",
    "pr_number": 7916,
    "pr_file": "docs/nd4j/templates/quickstart.md",
    "created_at": "2019-06-28T02:35:52+00:00",
    "commented_code": "+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "298434381",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7916,
        "pr_file": "docs/nd4j/templates/quickstart.md",
        "discussion_id": "298434381",
        "commented_code": "@@ -0,0 +1,381 @@\n+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);",
        "comment_created_at": "2019-06-28T02:35:52+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Let's direct users to Nd4j.createFromArray instead.\r\nUnlike Nd4j.create, there's overloads for all java primitive types and Number (long, short, Long, Boolean etc), and so users are less likely to get confused with Nd4j.create(int[]), where they think the int[] is content just like Nd4j.create(double[]), but it's actually shape",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298434478",
    "pr_number": 7916,
    "pr_file": "docs/nd4j/templates/quickstart.md",
    "created_at": "2019-06-28T02:36:37+00:00",
    "commented_code": "+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "298434478",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7916,
        "pr_file": "docs/nd4j/templates/quickstart.md",
        "discussion_id": "298434478",
        "commented_code": "@@ -0,0 +1,381 @@\n+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');",
        "comment_created_at": "2019-06-28T02:36:37+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "This is old. Nd4j.createFromArray has overloads up to 4d for all types",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298434596",
    "pr_number": 7916,
    "pr_file": "docs/nd4j/templates/quickstart.md",
    "created_at": "2019-06-28T02:37:25+00:00",
    "commented_code": "+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');\n+```\n+\n+Nd4j can create arrays initialized with zeros and ones using the functions `zeros` and `ones`. The `rand` function allows you to create an array initialized with random values.\n+The default datatype of the INDarray created is `float`. Some overloads allow you to set the datatype.\n+\n+```java\n+INDArray  x = Nd4j.zeros(5);\n+//[         0,         0,         0,         0,         0], FLOAT\n+\n+int [] shape = {5};\n+x = Nd4j.zeros(shape, DataType.DOUBLE);",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "298434596",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7916,
        "pr_file": "docs/nd4j/templates/quickstart.md",
        "discussion_id": "298434596",
        "commented_code": "@@ -0,0 +1,381 @@\n+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');\n+```\n+\n+Nd4j can create arrays initialized with zeros and ones using the functions `zeros` and `ones`. The `rand` function allows you to create an array initialized with random values.\n+The default datatype of the INDarray created is `float`. Some overloads allow you to set the datatype.\n+\n+```java\n+INDArray  x = Nd4j.zeros(5);\n+//[         0,         0,         0,         0,         0], FLOAT\n+\n+int [] shape = {5};\n+x = Nd4j.zeros(shape, DataType.DOUBLE);",
        "comment_created_at": "2019-06-28T02:37:25+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Use `Nd4j.zeros(DataType.DOUBLE, 5)`,  no need to do it in 2 lines with array for shape.\r\nMaybe also show the import for DataType the first time it's used.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "298435709",
    "pr_number": 7916,
    "pr_file": "docs/nd4j/templates/quickstart.md",
    "created_at": "2019-06-28T02:46:12+00:00",
    "commented_code": "+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');\n+```\n+\n+Nd4j can create arrays initialized with zeros and ones using the functions `zeros` and `ones`. The `rand` function allows you to create an array initialized with random values.\n+The default datatype of the INDarray created is `float`. Some overloads allow you to set the datatype.\n+\n+```java\n+INDArray  x = Nd4j.zeros(5);\n+//[         0,         0,         0,         0,         0], FLOAT\n+\n+int [] shape = {5};\n+x = Nd4j.zeros(shape, DataType.DOUBLE);\n+//[         0,         0,         0,         0,         0], DOUBLE\n+\n+// For higher dimensions you can provide a shape array. 2D random matrix example:\n+int rows = 4;\n+int cols = 5;\n+int[] shape = {rows, cols};\n+INDArray x = Nd4j.rand(shape);\n+```\n+\n+Use the `arange` functions to create an array of evenly spaces values:\n+\n+```java\n+INDArray  x = Nd4j.arange(5);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000]\n+\n+INDArray  x = Nd4j.arange(2, 7);\n+// [    2.0000,    3.0000,    4.0000,    5.0000,    6.0000]\n+```\n+\n+The `linspace` function allows you to specify the number of points generated:\n+```java\n+INDArray  x = Nd4j.linspace(1, 10, 5);\n+// [    1.0000,    3.2500,    5.5000,    7.7500,   10.0000]\n+\n+// Evaluate a function over many points.\n+import static org.nd4j.linalg.ops.transforms.Transforms.sin;\n+INDArray  x = Nd4j.linspace(0.0, Math.PI, 100, DataType.DOUBLE);\n+INDArray  y = sin(x);  \n+```\n+\n+### Printing Arrays\n+The INDArray supports Java's `toString()` method. The output is similar to printing NumPy arrays:\n+```java\n+INDArray  x = Nd4j.arange(6);  //1d array\n+System.out.println(x);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000,    5.0000]\n+\n+int [] shape = {4,3};\n+x = Nd4j.arange(12).reshape(shape);   //2d array\n+System.out.println(x);\n+/*\n+[[         0,    1.0000,    2.0000], \n+ [    3.0000,    4.0000,    5.0000], \n+ [    6.0000,    7.0000,    8.0000], \n+ [    9.0000,   10.0000,   11.0000]]\n+*/\n+\n+int [] shape2 = {2,3,4};\n+x = Nd4j.arange(24).reshape(shape2);  //3d array\n+System.out.println(x);\n+/*\n+[[[         0,    1.0000,    2.0000,    3.0000], \n+  [    4.0000,    5.0000,    6.0000,    7.0000], \n+  [    8.0000,    9.0000,   10.0000,   11.0000]], \n+\n+ [[   12.0000,   13.0000,   14.0000,   15.0000], \n+  [   16.0000,   17.0000,   18.0000,   19.0000], \n+  [   20.0000,   21.0000,   22.0000,   23.0000]]]\n+*/\n+```\n+\n+### Basic Operations\n+You will have to use INDArray methods to perform operations on your arrays. There are  in-place and copy overloads and scalar and element wise overloaded versions. The in-place operators return a reference to the array so you can conveniently chain operations together.\n+\n+```java\n+//Copy\n+arr_new = arr.add(scalar);    // return a new array with scalar added to each element of arr.\n+arr_new = arr.add(other_arr); // return a new array with element wise addition of arr and other_arr.\n+\n+//in place.\n+arr_new = arr.addi(scalar); //Heads up: arr_new points to the same array as arr.\n+arr_new = arr.addi(other_arr);\n+```\n+\n+addition: arr.add(...), arr.addi(...)\n+substraction: arr.sub(...), arr.subi(...)\n+multiplication: arr.mul(...), arr.muli(...)\n+division: arr.div(...), arr.divi(...)\n+\n+When you perform the basic operations you must make sure the underlying data types are the same.\n+```java\n+int [] shape = {5};\n+INDArray  x = Nd4j.zeros(shape, DataType.DOUBLE);\n+INDArray  x2 = Nd4j.zeros(shape, DataType.INT);\n+INDArray  x3 = x.add(x2);\n+// java.lang.IllegalArgumentException: Op.X and Op.Y must have the same data type, but got INT vs DOUBLE\n+```",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "298435709",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7916,
        "pr_file": "docs/nd4j/templates/quickstart.md",
        "discussion_id": "298435709",
        "commented_code": "@@ -0,0 +1,381 @@\n+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');\n+```\n+\n+Nd4j can create arrays initialized with zeros and ones using the functions `zeros` and `ones`. The `rand` function allows you to create an array initialized with random values.\n+The default datatype of the INDarray created is `float`. Some overloads allow you to set the datatype.\n+\n+```java\n+INDArray  x = Nd4j.zeros(5);\n+//[         0,         0,         0,         0,         0], FLOAT\n+\n+int [] shape = {5};\n+x = Nd4j.zeros(shape, DataType.DOUBLE);\n+//[         0,         0,         0,         0,         0], DOUBLE\n+\n+// For higher dimensions you can provide a shape array. 2D random matrix example:\n+int rows = 4;\n+int cols = 5;\n+int[] shape = {rows, cols};\n+INDArray x = Nd4j.rand(shape);\n+```\n+\n+Use the `arange` functions to create an array of evenly spaces values:\n+\n+```java\n+INDArray  x = Nd4j.arange(5);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000]\n+\n+INDArray  x = Nd4j.arange(2, 7);\n+// [    2.0000,    3.0000,    4.0000,    5.0000,    6.0000]\n+```\n+\n+The `linspace` function allows you to specify the number of points generated:\n+```java\n+INDArray  x = Nd4j.linspace(1, 10, 5);\n+// [    1.0000,    3.2500,    5.5000,    7.7500,   10.0000]\n+\n+// Evaluate a function over many points.\n+import static org.nd4j.linalg.ops.transforms.Transforms.sin;\n+INDArray  x = Nd4j.linspace(0.0, Math.PI, 100, DataType.DOUBLE);\n+INDArray  y = sin(x);  \n+```\n+\n+### Printing Arrays\n+The INDArray supports Java's `toString()` method. The output is similar to printing NumPy arrays:\n+```java\n+INDArray  x = Nd4j.arange(6);  //1d array\n+System.out.println(x);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000,    5.0000]\n+\n+int [] shape = {4,3};\n+x = Nd4j.arange(12).reshape(shape);   //2d array\n+System.out.println(x);\n+/*\n+[[         0,    1.0000,    2.0000], \n+ [    3.0000,    4.0000,    5.0000], \n+ [    6.0000,    7.0000,    8.0000], \n+ [    9.0000,   10.0000,   11.0000]]\n+*/\n+\n+int [] shape2 = {2,3,4};\n+x = Nd4j.arange(24).reshape(shape2);  //3d array\n+System.out.println(x);\n+/*\n+[[[         0,    1.0000,    2.0000,    3.0000], \n+  [    4.0000,    5.0000,    6.0000,    7.0000], \n+  [    8.0000,    9.0000,   10.0000,   11.0000]], \n+\n+ [[   12.0000,   13.0000,   14.0000,   15.0000], \n+  [   16.0000,   17.0000,   18.0000,   19.0000], \n+  [   20.0000,   21.0000,   22.0000,   23.0000]]]\n+*/\n+```\n+\n+### Basic Operations\n+You will have to use INDArray methods to perform operations on your arrays. There are  in-place and copy overloads and scalar and element wise overloaded versions. The in-place operators return a reference to the array so you can conveniently chain operations together.\n+\n+```java\n+//Copy\n+arr_new = arr.add(scalar);    // return a new array with scalar added to each element of arr.\n+arr_new = arr.add(other_arr); // return a new array with element wise addition of arr and other_arr.\n+\n+//in place.\n+arr_new = arr.addi(scalar); //Heads up: arr_new points to the same array as arr.\n+arr_new = arr.addi(other_arr);\n+```\n+\n+addition: arr.add(...), arr.addi(...)\n+substraction: arr.sub(...), arr.subi(...)\n+multiplication: arr.mul(...), arr.muli(...)\n+division: arr.div(...), arr.divi(...)\n+\n+When you perform the basic operations you must make sure the underlying data types are the same.\n+```java\n+int [] shape = {5};\n+INDArray  x = Nd4j.zeros(shape, DataType.DOUBLE);\n+INDArray  x2 = Nd4j.zeros(shape, DataType.INT);\n+INDArray  x3 = x.add(x2);\n+// java.lang.IllegalArgumentException: Op.X and Op.Y must have the same data type, but got INT vs DOUBLE\n+```",
        "comment_created_at": "2019-06-28T02:46:12+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Show casting example as solution to this:\r\n`INDArray x3 = x.add(x2.cast(DataType.DOUBLE))`",
        "pr_file_module": null
      },
      {
        "comment_id": "298933404",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7916,
        "pr_file": "docs/nd4j/templates/quickstart.md",
        "discussion_id": "298435709",
        "commented_code": "@@ -0,0 +1,381 @@\n+---\n+title: Quickstart\n+short_title: Quick start tutorial\n+description: ND4J Key features and brief samples.\n+category: ND4J\n+weight: 1\n+---\n+<!--- Comments are standard html. Tripple dash based on stackoverflow: https://stackoverflow.com/questions/4823468/comments-in-markdown -->\n+\n+<!--- Borrowing the layout of the Numpy quickstart to get started. -->\n+\n+## Introduction\n+<!--- What is ND4J and why is it important. From the nd4j repo readme.  -->\n+ND4J is a scientific computing library for the JVM. It is meant to be used in production environments rather than as a research tool, which means routines are designed to run fast with minimum RAM requirements. The main features are:\n+* A versatile n-dimensional array object.\n+* Linear algebra and signal processing functions.\n+* Multiplatform functionality including GPUs.\n+\n+This quickstart follows the same layout and approach of the [Numpy quickstart](https://docs.scipy.org/doc/numpy/user/quickstart.html). This should help people familiar with Python and Numpy get started quickly with Nd4J.\n+\n+## Prerequisites\n+<!--- // Java, Maven, git. Coding skills and hello world example. -->\n+\n+To follow the examples in this quick start you will need to know some Java. You will also need to install the following software on your computer:\n+<!--- from the dl4j quickstart, pointing to the dl4j quiclstart for details. -->\n+* [Java (developer version)](./deeplearning4j-quickstart#Java) 1.7 or later (Only 64-Bit versions supported)\n+* [Apache Maven](./deeplearning4j-quickstart#Maven) (automated build and dependency manager)\n+<!--- git allows us to start with a cleaner project than mvn create. -->\n+* [Git](./deeplearning4j-quickstart#Git)(distributed version control system)\n+\n+If you are confident you know how to use maven and git, please feel free to skip to the [Basics](#Basics). In the remainder of this section we will build a small 'hello ND4J' application to verify the prequisites are set up correctly.\n+\n+Execute the following commands to get the project from github. \n+\n+<!--- TODO: Create HelloNd4J or Quickstart-nd4j repo in Deeplearning4J. -->\n+```shell\n+git clone https://github.com/RobAltena/HelloNd4J.git\n+\n+cd HelloNd4J\n+\n+mvn install\n+\n+mvn exec:java -Dexec.mainClass=\"HelloNd4j\"\n+```\n+\n+When everything is set up correctly you should see the following output:\n+\n+```shell\n+SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n+SLF4J: Defaulting to no-operation (NOP) logger implementation\n+SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n+[         0,         0]\n+```\n+\n+## Basics\n+<!--- TODO: We will put some into this page. Start with refering to existing doc. -->\n+While this quickstart is being build, please refer to our existing \n+[basics usage](./nd4j-basics) document.\n+\n+The main feature of Nd4j is the versatile n-dimensional array interface called INDArray. To improve performance Nd4j uses off-heap memory to store data. The INDArray is different from standard Java arrays.\n+\n+Some of the key properties and methods for an INDArray x are as follows:\n+\n+```java\n+// The number of axes (dimensions) of the array.\n+int dimensions = x.shape().length;\n+\n+// The dimensions of the array. The size in each dimension.\n+long[] shape = x.shape();\n+\n+// The total number of elements.\n+length = x.length();\n+\n+// The type of the array elements. \n+DataType dt = x.dataType();\n+```\n+<!--- staying away from itemsize and data buffer. The numpy quickstart has these. -->\n+\n+### Array Creation\n+To create INDArrays you use the static factory methods of the [Nd4j](https://deeplearning4j.org/api/latest/org/nd4j/linalg/factory/Nd4j.html ) class.\n+\n+<!--- We have good docs on creating INDArrays already.  -->\n+<!--- https://deeplearning4j.org/docs/latest/nd4j-overview#creating -->\n+The `Nd4j.create` function is overloaded to make it easy to create INDArrays from regular Java arrays. The example below uses Java `double` arrays. Similar create methods are overloaded for `float`, `int` and `long`.\n+\n+```java\n+double arr_2d[][]={{1.0,2.0,3.0},{4.0,5.0,6.0},{7.0,8.0,9.0}};\n+INDArray x_2d = Nd4j.create(arr_2d);\n+\n+double arr_1d[]={1.0,2.0,3.0};\n+INDArray  x_1d = Nd4j.create(arr_1d);\n+```\n+\n+There are overloaded `create` functions for INDArrays up to 4 dimensions. To create INDArrays with any shape use the `create` functions that take a shape as one of their arguments.\n+\n+```java\n+double[] flat = ArrayUtil.flattenDoubleArray(myDoubleArray);\n+int[] shape = ...;\t//Array shape here\n+INDArray myArr = Nd4j.create(flat,shape,'c');\n+```\n+\n+Nd4j can create arrays initialized with zeros and ones using the functions `zeros` and `ones`. The `rand` function allows you to create an array initialized with random values.\n+The default datatype of the INDarray created is `float`. Some overloads allow you to set the datatype.\n+\n+```java\n+INDArray  x = Nd4j.zeros(5);\n+//[         0,         0,         0,         0,         0], FLOAT\n+\n+int [] shape = {5};\n+x = Nd4j.zeros(shape, DataType.DOUBLE);\n+//[         0,         0,         0,         0,         0], DOUBLE\n+\n+// For higher dimensions you can provide a shape array. 2D random matrix example:\n+int rows = 4;\n+int cols = 5;\n+int[] shape = {rows, cols};\n+INDArray x = Nd4j.rand(shape);\n+```\n+\n+Use the `arange` functions to create an array of evenly spaces values:\n+\n+```java\n+INDArray  x = Nd4j.arange(5);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000]\n+\n+INDArray  x = Nd4j.arange(2, 7);\n+// [    2.0000,    3.0000,    4.0000,    5.0000,    6.0000]\n+```\n+\n+The `linspace` function allows you to specify the number of points generated:\n+```java\n+INDArray  x = Nd4j.linspace(1, 10, 5);\n+// [    1.0000,    3.2500,    5.5000,    7.7500,   10.0000]\n+\n+// Evaluate a function over many points.\n+import static org.nd4j.linalg.ops.transforms.Transforms.sin;\n+INDArray  x = Nd4j.linspace(0.0, Math.PI, 100, DataType.DOUBLE);\n+INDArray  y = sin(x);  \n+```\n+\n+### Printing Arrays\n+The INDArray supports Java's `toString()` method. The output is similar to printing NumPy arrays:\n+```java\n+INDArray  x = Nd4j.arange(6);  //1d array\n+System.out.println(x);\n+// [         0,    1.0000,    2.0000,    3.0000,    4.0000,    5.0000]\n+\n+int [] shape = {4,3};\n+x = Nd4j.arange(12).reshape(shape);   //2d array\n+System.out.println(x);\n+/*\n+[[         0,    1.0000,    2.0000], \n+ [    3.0000,    4.0000,    5.0000], \n+ [    6.0000,    7.0000,    8.0000], \n+ [    9.0000,   10.0000,   11.0000]]\n+*/\n+\n+int [] shape2 = {2,3,4};\n+x = Nd4j.arange(24).reshape(shape2);  //3d array\n+System.out.println(x);\n+/*\n+[[[         0,    1.0000,    2.0000,    3.0000], \n+  [    4.0000,    5.0000,    6.0000,    7.0000], \n+  [    8.0000,    9.0000,   10.0000,   11.0000]], \n+\n+ [[   12.0000,   13.0000,   14.0000,   15.0000], \n+  [   16.0000,   17.0000,   18.0000,   19.0000], \n+  [   20.0000,   21.0000,   22.0000,   23.0000]]]\n+*/\n+```\n+\n+### Basic Operations\n+You will have to use INDArray methods to perform operations on your arrays. There are  in-place and copy overloads and scalar and element wise overloaded versions. The in-place operators return a reference to the array so you can conveniently chain operations together.\n+\n+```java\n+//Copy\n+arr_new = arr.add(scalar);    // return a new array with scalar added to each element of arr.\n+arr_new = arr.add(other_arr); // return a new array with element wise addition of arr and other_arr.\n+\n+//in place.\n+arr_new = arr.addi(scalar); //Heads up: arr_new points to the same array as arr.\n+arr_new = arr.addi(other_arr);\n+```\n+\n+addition: arr.add(...), arr.addi(...)\n+substraction: arr.sub(...), arr.subi(...)\n+multiplication: arr.mul(...), arr.muli(...)\n+division: arr.div(...), arr.divi(...)\n+\n+When you perform the basic operations you must make sure the underlying data types are the same.\n+```java\n+int [] shape = {5};\n+INDArray  x = Nd4j.zeros(shape, DataType.DOUBLE);\n+INDArray  x2 = Nd4j.zeros(shape, DataType.INT);\n+INDArray  x3 = x.add(x2);\n+// java.lang.IllegalArgumentException: Op.X and Op.Y must have the same data type, but got INT vs DOUBLE\n+```",
        "comment_created_at": "2019-07-01T08:32:25+00:00",
        "comment_author": "RobAltena",
        "comment_body": "`INDArray x3 = x.add(x2.castTo(DataType.DOUBLE));`",
        "pr_file_module": null
      }
    ]
  }
]