[
  {
    "discussion_id": "846578605",
    "pr_number": 9663,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/functions/DifferentialFunction.java",
    "created_at": "2022-04-09T05:33:21+00:00",
    "commented_code": "SDVariable[] outputVars = outputVariables();\n         String[] out = new String[outputVars.length];\n         for( int i = 0; i < out.length; i++) {\n-            out[i] = outputVars[i].name();\n+            out[i] = outputVars[i] == null ? \"\" : outputVars[i].name();",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "846578605",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9663,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/functions/DifferentialFunction.java",
        "discussion_id": "846578605",
        "commented_code": "@@ -603,7 +603,7 @@ public SDVariable outputVariable() {\n         SDVariable[] outputVars = outputVariables();\n         String[] out = new String[outputVars.length];\n         for( int i = 0; i < out.length; i++) {\n-            out[i] = outputVars[i].name();\n+            out[i] = outputVars[i] == null ? \"\" : outputVars[i].name();",
        "comment_created_at": "2022-04-09T05:33:21+00:00",
        "comment_author": "treo",
        "comment_body": "Do we need the `null` case anywhere? Or wouldn't it make more sense to handle `null` in the `outputVariables()` function, so that everything downstream doesn't need to have special case handling?",
        "pr_file_module": null
      },
      {
        "comment_id": "846757455",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 9663,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/functions/DifferentialFunction.java",
        "discussion_id": "846578605",
        "commented_code": "@@ -603,7 +603,7 @@ public SDVariable outputVariable() {\n         SDVariable[] outputVars = outputVariables();\n         String[] out = new String[outputVars.length];\n         for( int i = 0; i < out.length; i++) {\n-            out[i] = outputVars[i].name();\n+            out[i] = outputVars[i] == null ? \"\" : outputVars[i].name();",
        "comment_created_at": "2022-04-10T10:40:50+00:00",
        "comment_author": "agibsonccc",
        "comment_body": "Null comes mostly come the Switch op where 1 branch is null and the other isn't. I'd want to think on this one a bit. I'm not clear if there's anything in specific I'd want to do with the null case beyond that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "305561112",
    "pr_number": 7997,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
    "created_at": "2019-07-20T01:00:31+00:00",
    "commented_code": "}\n \n     /**\n-     *\n-     * @param length\n-     * @param initialize\n-     * @return\n+     * @see #createBuffer(DataType dataType, long length, boolean initialize)\n      */\n     public static DataBuffer createBuffer(long length, boolean initialize) {\n         DataBuffer ret = createBuffer(Nd4j.dataType(), length, initialize);\n \n         return ret;\n     }\n \n+    /**\n+     * Create a data buffer based on datatype.\n+     * @param dataType the type of buffer to create\n+     * @param length  the length of the buffer\n+     * @param initialize  flag to leave the underlying memory (false) or initialize with zero (true).\n+     * @return the created buffer.\n+     */\n     public static DataBuffer createBuffer(DataType dataType, long length, boolean initialize) {\n         return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, length, initialize) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType,length, initialize, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n+    /**\n+     * Create a data buffer based on datatype, workspace.\n+     * @param dataType the type of buffer to create\n+     * @param length  the length of the buffer\n+     * @param initialize  flag to leave the underlying memory (false) or initialize with zero (true).\n+     * @param workspace workspace to use for buffer creation.\n+     * @return the created buffer.\n+     */\n     public static DataBuffer createBuffer(DataType dataType, long length, boolean initialize, MemoryWorkspace workspace) {\n         return workspace == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, length, initialize) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType,length, initialize, workspace);\n     }\n \n     /**\n      * Create a buffer based on the data opType\n-     *\n      * @param data the data to create the buffer with\n      * @return the created buffer\n      */\n     public static DataBuffer createBuffer(float[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.FLOAT)\n-            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createFloat(data) : DATA_BUFFER_FACTORY_INSTANCE.createFloat(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-        //else if (dataType() == DataType.HALF)\n-//            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createHalf(data): DATA_BUFFER_FACTORY_INSTANCE.createHalf(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-//        else\n-//            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data)) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data), Nd4j.getMemoryManager().getCurrentWorkspace()) ;\n-        return ret;\n+        return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createFloat(data) : DATA_BUFFER_FACTORY_INSTANCE.createFloat(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n+    /**\n+     * Create a buffer based on underlying array.\n+     * @param data data to create the buffer with\n+     * @return the created buffer\n+     */\n     public static DataBuffer createBufferDetached(float[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.FLOAT)\n-            ret = DATA_BUFFER_FACTORY_INSTANCE.createFloat(data);\n-        //else if (dataType() == DataType.HALF)\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createHalf(data);\n-//        else\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data));\n-        return ret;\n+        return DATA_BUFFER_FACTORY_INSTANCE.createFloat(data);\n     }\n \n+    /**\n+     * @see #createBufferDetached(float[])\n+     */\n     public static DataBuffer createBufferDetached(double[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.DOUBLE)\n-            ret = DATA_BUFFER_FACTORY_INSTANCE.createDouble(data);\n-        //else if (dataType() == DataType.HALF)\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createHalf(ArrayUtil.toFloats(data));\n-//        else\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createFloat(ArrayUtil.toFloats(data));\n-        return ret;\n+        return DATA_BUFFER_FACTORY_INSTANCE.createDouble(data);\n     }\n \n     /**\n-     * Create a buffer based on the data opType\n-     *\n-     * @param data the data to create the buffer with\n-     * @return the created buffer\n+     * @see #createBuffer(float[])\n      */\n     public static DataBuffer createBuffer(double[] data) {\n-        DataBuffer ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(data) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-        return ret;\n+        return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(data) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n     /**\n-     * This method creates\n-     * @param data\n-     * @param dataType\n-     * @return\n+     * Create a buffer based on the data of the underlying java array with the specified type..\n+     * @param data underlying java array\n+     * @param dataType specified type.\n+     * @return created buffer,\n      */\n     public static DataBuffer createTypedBuffer(double[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(float[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(int[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(long[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(short[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(byte[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(boolean[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n-    ////////////////\n-\n+    /**\n+     * Create a buffer based on the data of the underlying java array, specified type and workspace\n+     * @param data underlying java array\n+     * @param dataType specified type.\n+     * @param workspace specified workspace.\n+     * @return created buffer,\n+     */",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "305561112",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7997,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/factory/Nd4j.java",
        "discussion_id": "305561112",
        "commented_code": "@@ -1507,215 +1563,280 @@ public static DataBuffer createBuffer(Pointer pointer, DataType type, long lengt\n     }\n \n     /**\n-     *\n-     * @param length\n-     * @param initialize\n-     * @return\n+     * @see #createBuffer(DataType dataType, long length, boolean initialize)\n      */\n     public static DataBuffer createBuffer(long length, boolean initialize) {\n         DataBuffer ret = createBuffer(Nd4j.dataType(), length, initialize);\n \n         return ret;\n     }\n \n+    /**\n+     * Create a data buffer based on datatype.\n+     * @param dataType the type of buffer to create\n+     * @param length  the length of the buffer\n+     * @param initialize  flag to leave the underlying memory (false) or initialize with zero (true).\n+     * @return the created buffer.\n+     */\n     public static DataBuffer createBuffer(DataType dataType, long length, boolean initialize) {\n         return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, length, initialize) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType,length, initialize, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n+    /**\n+     * Create a data buffer based on datatype, workspace.\n+     * @param dataType the type of buffer to create\n+     * @param length  the length of the buffer\n+     * @param initialize  flag to leave the underlying memory (false) or initialize with zero (true).\n+     * @param workspace workspace to use for buffer creation.\n+     * @return the created buffer.\n+     */\n     public static DataBuffer createBuffer(DataType dataType, long length, boolean initialize, MemoryWorkspace workspace) {\n         return workspace == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, length, initialize) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType,length, initialize, workspace);\n     }\n \n     /**\n      * Create a buffer based on the data opType\n-     *\n      * @param data the data to create the buffer with\n      * @return the created buffer\n      */\n     public static DataBuffer createBuffer(float[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.FLOAT)\n-            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createFloat(data) : DATA_BUFFER_FACTORY_INSTANCE.createFloat(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-        //else if (dataType() == DataType.HALF)\n-//            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createHalf(data): DATA_BUFFER_FACTORY_INSTANCE.createHalf(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-//        else\n-//            ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data)) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data), Nd4j.getMemoryManager().getCurrentWorkspace()) ;\n-        return ret;\n+        return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createFloat(data) : DATA_BUFFER_FACTORY_INSTANCE.createFloat(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n+    /**\n+     * Create a buffer based on underlying array.\n+     * @param data data to create the buffer with\n+     * @return the created buffer\n+     */\n     public static DataBuffer createBufferDetached(float[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.FLOAT)\n-            ret = DATA_BUFFER_FACTORY_INSTANCE.createFloat(data);\n-        //else if (dataType() == DataType.HALF)\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createHalf(data);\n-//        else\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createDouble(ArrayUtil.toDoubles(data));\n-        return ret;\n+        return DATA_BUFFER_FACTORY_INSTANCE.createFloat(data);\n     }\n \n+    /**\n+     * @see #createBufferDetached(float[])\n+     */\n     public static DataBuffer createBufferDetached(double[] data) {\n-        DataBuffer ret;\n-        //if (dataType() == DataType.DOUBLE)\n-            ret = DATA_BUFFER_FACTORY_INSTANCE.createDouble(data);\n-        //else if (dataType() == DataType.HALF)\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createHalf(ArrayUtil.toFloats(data));\n-//        else\n-//            ret = DATA_BUFFER_FACTORY_INSTANCE.createFloat(ArrayUtil.toFloats(data));\n-        return ret;\n+        return DATA_BUFFER_FACTORY_INSTANCE.createDouble(data);\n     }\n \n     /**\n-     * Create a buffer based on the data opType\n-     *\n-     * @param data the data to create the buffer with\n-     * @return the created buffer\n+     * @see #createBuffer(float[])\n      */\n     public static DataBuffer createBuffer(double[] data) {\n-        DataBuffer ret = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(data) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n-        return ret;\n+        return Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.createDouble(data) : DATA_BUFFER_FACTORY_INSTANCE.createDouble(data, Nd4j.getMemoryManager().getCurrentWorkspace());\n     }\n \n     /**\n-     * This method creates\n-     * @param data\n-     * @param dataType\n-     * @return\n+     * Create a buffer based on the data of the underlying java array with the specified type..\n+     * @param data underlying java array\n+     * @param dataType specified type.\n+     * @return created buffer,\n      */\n     public static DataBuffer createTypedBuffer(double[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(float[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(int[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(long[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(short[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(byte[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n+    /**\n+     * @see #createTypedBuffer(float[], DataType)\n+     */\n     public static DataBuffer createTypedBuffer(boolean[] data, DataType dataType) {\n         val buffer = Nd4j.getMemoryManager().getCurrentWorkspace() == null ? DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false) : DATA_BUFFER_FACTORY_INSTANCE.create(dataType, data.length, false, Nd4j.getMemoryManager().getCurrentWorkspace());\n         buffer.setData(data);\n         return buffer;\n     }\n \n-    ////////////////\n-\n+    /**\n+     * Create a buffer based on the data of the underlying java array, specified type and workspace\n+     * @param data underlying java array\n+     * @param dataType specified type.\n+     * @param workspace specified workspace.\n+     * @return created buffer,\n+     */",
        "comment_created_at": "2019-07-20T01:00:31+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "General point (applies everywhere) - if a method allows null values, it should be marked as such in the docs, with a brief explanation of the behaviour for null vs. non-null.\r\nSomething along the lines:\r\n`@param workspace Optional memory workspace to define the buffer in, may be null (buffer not created in workspace)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "259654991",
    "pr_number": 7218,
    "pr_file": "deeplearning4j/deeplearning4j-nn/src/main/java/org/deeplearning4j/util/ValidationUtils.java",
    "created_at": "2019-02-25T01:32:04+00:00",
    "commented_code": "+package org.deeplearning4j.util;\n+\n+import java.util.Arrays;\n+import org.nd4j.base.Preconditions;\n+\n+public class ValidationUtils {\n+\n+    private ValidationUtils(){\n+\n+    }\n+\n+    /**\n+     * Checks that the values is >= 0.\n+     *\n+     * @param data An int\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(int data, String paramName){\n+        Preconditions.checkArgument(data >= 0,\n+                \"Values for %s must be >= 0, got: %s\", paramName, data);\n+    }\n+\n+    /**\n+     * Checks that the values is >= 0.\n+     *\n+     * @param data An int\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(double data, String paramName){\n+        Preconditions.checkArgument(data >= 0,\n+                \"Values for %s must be >= 0, got: %s\", paramName, data);\n+    }\n+\n+    /**\n+     * Checks that all values are >= 0.\n+     *\n+     * @param data An array\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(int[] data, String paramName){",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "259654991",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 7218,
        "pr_file": "deeplearning4j/deeplearning4j-nn/src/main/java/org/deeplearning4j/util/ValidationUtils.java",
        "discussion_id": "259654991",
        "commented_code": "@@ -0,0 +1,318 @@\n+package org.deeplearning4j.util;\n+\n+import java.util.Arrays;\n+import org.nd4j.base.Preconditions;\n+\n+public class ValidationUtils {\n+\n+    private ValidationUtils(){\n+\n+    }\n+\n+    /**\n+     * Checks that the values is >= 0.\n+     *\n+     * @param data An int\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(int data, String paramName){\n+        Preconditions.checkArgument(data >= 0,\n+                \"Values for %s must be >= 0, got: %s\", paramName, data);\n+    }\n+\n+    /**\n+     * Checks that the values is >= 0.\n+     *\n+     * @param data An int\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(double data, String paramName){\n+        Preconditions.checkArgument(data >= 0,\n+                \"Values for %s must be >= 0, got: %s\", paramName, data);\n+    }\n+\n+    /**\n+     * Checks that all values are >= 0.\n+     *\n+     * @param data An array\n+     * @param paramName The param name, for error reporting\n+     */\n+    public static void validateNonNegative(int[] data, String paramName){",
        "comment_created_at": "2019-02-25T01:32:04+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Handling of nulls? You have some in the later methods, but not here...\r\nIf null is acceptable, we should return null here. If not, let's either add a lombok ```@NonNull``` or a ```Preconditions.checkNotNull(```. At present, nulls will give a non-useful NPE.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "244545887",
    "pr_number": 6928,
    "pr_file": "deeplearning4j/deeplearning4j-modelimport/src/main/java/org/deeplearning4j/nn/modelimport/keras/preprocessing/text/KerasTokenizer.java",
    "created_at": "2018-12-30T21:36:50+00:00",
    "commented_code": "throw new InvalidKerasConfigurationException(\"No configuration found for Keras tokenizer\");\n \n \n-        int numWords = (int) tokenizerConfig.get(\"num_words\");\n+        Integer numWords = (Integer) tokenizerConfig.get(\"num_words\");",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "244545887",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 6928,
        "pr_file": "deeplearning4j/deeplearning4j-modelimport/src/main/java/org/deeplearning4j/nn/modelimport/keras/preprocessing/text/KerasTokenizer.java",
        "discussion_id": "244545887",
        "commented_code": "@@ -114,7 +114,7 @@ public static KerasTokenizer fromJson(String jsonFileName) throws IOException, I\n             throw new InvalidKerasConfigurationException(\"No configuration found for Keras tokenizer\");\n \n \n-        int numWords = (int) tokenizerConfig.get(\"num_words\");\n+        Integer numWords = (Integer) tokenizerConfig.get(\"num_words\");",
        "comment_created_at": "2018-12-30T21:36:50+00:00",
        "comment_author": "dstine",
        "comment_body": "In addition to fixing the NPE, this avoids an unnecessary unbox-then-immediately-rebox. (Same pattern is in use for `documentCount` and could also be changed.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "193597120",
    "pr_number": 5497,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SDIndex.java",
    "created_at": "2018-06-07T00:23:30+00:00",
    "commented_code": "+package org.nd4j.autodiff.samediff;\n+\n+import org.nd4j.linalg.exception.ND4JIllegalArgumentException;\n+\n+public class SDIndex {\n+\n+    public enum IndexType{\n+      ALL,\n+      POINT,\n+      INTERVAL\n+    }\n+\n+    public IndexType indexType = IndexType.ALL;\n+    \n+    public SDIndex(){}\n+    \n+    public static SDIndex all(){\n+        return new SDIndex();\n+    }\n+    \n+    public Integer point_index;\n+    public static SDIndex point(Integer i){",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "193597120",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5497,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SDIndex.java",
        "discussion_id": "193597120",
        "commented_code": "@@ -0,0 +1,52 @@\n+package org.nd4j.autodiff.samediff;\n+\n+import org.nd4j.linalg.exception.ND4JIllegalArgumentException;\n+\n+public class SDIndex {\n+\n+    public enum IndexType{\n+      ALL,\n+      POINT,\n+      INTERVAL\n+    }\n+\n+    public IndexType indexType = IndexType.ALL;\n+    \n+    public SDIndex(){}\n+    \n+    public static SDIndex all(){\n+        return new SDIndex();\n+    }\n+    \n+    public Integer point_index;\n+    public static SDIndex point(Integer i){",
        "comment_created_at": "2018-06-07T00:23:30+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "I don't think point(null) is valid?\r\nThe way you have it implemented currently (with masks) it won't return a single value along that dimension, I think.\r\nAnd if we don't allow null, switch arg to ```int```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "192663606",
    "pr_number": 5451,
    "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
    "created_at": "2018-06-04T08:36:37+00:00",
    "commented_code": "}\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();\n+        }\n+        return varName;\n+    }\n+    \n+    public SDVariable var(int[] shape) {",
    "repo_full_name": "deeplearning4j/deeplearning4j",
    "discussion_comments": [
      {
        "comment_id": "192663606",
        "repo_full_name": "deeplearning4j/deeplearning4j",
        "pr_number": 5451,
        "pr_file": "nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/autodiff/samediff/SameDiff.java",
        "discussion_id": "192663606",
        "commented_code": "@@ -1496,6 +1497,33 @@ public INDArray getArr() {\n \n     }\n \n+    // auto naming\n+\n+    private Integer _var_id = 0;\n+    private String getNewVarName(){\n+        String varName = \"sd_var_\" + _var_id.toString();\n+        while(variableMap.containsKey(varName)){\n+            _var_id++;\n+            varName = \"sd_var_\" + _var_id.toString();\n+        }\n+        return varName;\n+    }\n+    \n+    public SDVariable var(int[] shape) {",
        "comment_created_at": "2018-06-04T08:36:37+00:00",
        "comment_author": "AlexDBlack",
        "comment_body": "Switch all of these array methods to var-args - ```var(int... shape)``` etc\r\nMaybe also a ```Preconditions.checkArgument(shape != null  && shape.length > 0, \"Invalid shape: %s\", shape)```",
        "pr_file_module": null
      }
    ]
  }
]