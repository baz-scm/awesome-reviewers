[
  {
    "discussion_id": "2161311126",
    "pr_number": 29830,
    "pr_file": "cli/tools/bundle/transform.rs",
    "created_at": "2025-06-23T10:50:41+00:00",
    "commented_code": "+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use deno_ast::swc;\n+use deno_ast::swc::ast::Bool;\n+use deno_ast::swc::ecma_visit::VisitMut;\n+use deno_ast::swc::ecma_visit::VisitMutWith;\n+\n+pub struct BundleTransform {\n+  is_entrypoint: bool,\n+}\n+\n+impl BundleTransform {\n+  pub fn new(is_entrypoint: bool) -> Self {\n+    Self { is_entrypoint }\n+  }\n+}\n+\n+impl VisitMut for BundleTransform {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2161311126",
        "repo_full_name": "denoland/deno",
        "pr_number": 29830,
        "pr_file": "cli/tools/bundle/transform.rs",
        "discussion_id": "2161311126",
        "commented_code": "@@ -0,0 +1,44 @@\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use deno_ast::swc;\n+use deno_ast::swc::ast::Bool;\n+use deno_ast::swc::ecma_visit::VisitMut;\n+use deno_ast::swc::ecma_visit::VisitMutWith;\n+\n+pub struct BundleTransform {\n+  is_entrypoint: bool,\n+}\n+\n+impl BundleTransform {\n+  pub fn new(is_entrypoint: bool) -> Self {\n+    Self { is_entrypoint }\n+  }\n+}\n+\n+impl VisitMut for BundleTransform {",
        "comment_created_at": "2025-06-23T10:50:41+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Nit: since this is just `import.meta.main` transform maybe rename to `ImportMetaMainTransform` so we can chain more transforms in the future as needed?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111662502",
    "pr_number": 29327,
    "pr_file": "runtime/permissions/lib.rs",
    "created_at": "2025-05-28T11:53:47+00:00",
    "commented_code": "}\n \n impl Host {\n-  fn parse(s: &str) -> Result<Self, HostParseError> {\n+  fn parse_for_query(s: &str) -> Result<Self, HostParseError> {\n+    Self::parse_inner(s, false)\n+  }\n+\n+  #[cfg(test)]\n+  fn parse_for_list(s: &str) -> Result<Self, HostParseError> {\n+    Self::parse_inner(s, true)\n+  }\n+\n+  fn parse_inner(\n+    s: &str,\n+    allow_subdomain_wildcard: bool,",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2111662502",
        "repo_full_name": "denoland/deno",
        "pr_number": 29327,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "2111662502",
        "commented_code": "@@ -840,7 +841,19 @@ pub enum HostParseError {\n }\n \n impl Host {\n-  fn parse(s: &str) -> Result<Self, HostParseError> {\n+  fn parse_for_query(s: &str) -> Result<Self, HostParseError> {\n+    Self::parse_inner(s, false)\n+  }\n+\n+  #[cfg(test)]\n+  fn parse_for_list(s: &str) -> Result<Self, HostParseError> {\n+    Self::parse_inner(s, true)\n+  }\n+\n+  fn parse_inner(\n+    s: &str,\n+    allow_subdomain_wildcard: bool,",
        "comment_created_at": "2025-05-28T11:53:47+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Please use an enum here as these booleans are easy to mistake:\r\n```\r\n#[derive(Default, Debug)]\r\nenum SubdomainWildcardSupport {\r\n  Enabled,\r\n  #[default]\r\n  Disabled\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112362158",
    "pr_number": 29327,
    "pr_file": "cli/args/flags_net.rs",
    "created_at": "2025-05-28T16:58:24+00:00",
    "commented_code": "if Url::parse(&format!(\"internal://{host_and_port}\")).is_ok()\n     || host_and_port.parse::<IpAddr>().is_ok()\n     || host_and_port.parse::<BarePort>().is_ok()\n-    || NetDescriptor::parse(host_and_port).is_ok()\n+    || NetDescriptor::parse_for_list(host_and_port, true).is_ok()",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2112362158",
        "repo_full_name": "denoland/deno",
        "pr_number": 29327,
        "pr_file": "cli/args/flags_net.rs",
        "discussion_id": "2112362158",
        "commented_code": "@@ -32,7 +32,7 @@ pub fn validator(host_and_port: &str) -> Result<String, String> {\n   if Url::parse(&format!(\"internal://{host_and_port}\")).is_ok()\n     || host_and_port.parse::<IpAddr>().is_ok()\n     || host_and_port.parse::<BarePort>().is_ok()\n-    || NetDescriptor::parse(host_and_port).is_ok()\n+    || NetDescriptor::parse_for_list(host_and_port, true).is_ok()",
        "comment_created_at": "2025-05-28T16:58:24+00:00",
        "comment_author": "dsherret",
        "comment_body": "I see from a resolved comment that we're going to change this to an enum? Consider that or have a `parse_for_list_with_wildcards` method.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112753339",
        "repo_full_name": "denoland/deno",
        "pr_number": 29327,
        "pr_file": "cli/args/flags_net.rs",
        "discussion_id": "2112362158",
        "commented_code": "@@ -32,7 +32,7 @@ pub fn validator(host_and_port: &str) -> Result<String, String> {\n   if Url::parse(&format!(\"internal://{host_and_port}\")).is_ok()\n     || host_and_port.parse::<IpAddr>().is_ok()\n     || host_and_port.parse::<BarePort>().is_ok()\n-    || NetDescriptor::parse(host_and_port).is_ok()\n+    || NetDescriptor::parse_for_list(host_and_port, true).is_ok()",
        "comment_created_at": "2025-05-28T21:06:20+00:00",
        "comment_author": "nayeemrmn",
        "comment_body": "I don't think we should do it where it represents the `--unstable-` option (as opposed to list vs query) because there's so much precedent for using booleans for that, it's a relatively temporary thing and it's nice to separate it from the list vs query one, which uses an enum now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112793308",
        "repo_full_name": "denoland/deno",
        "pr_number": 29327,
        "pr_file": "cli/args/flags_net.rs",
        "discussion_id": "2112362158",
        "commented_code": "@@ -32,7 +32,7 @@ pub fn validator(host_and_port: &str) -> Result<String, String> {\n   if Url::parse(&format!(\"internal://{host_and_port}\")).is_ok()\n     || host_and_port.parse::<IpAddr>().is_ok()\n     || host_and_port.parse::<BarePort>().is_ok()\n-    || NetDescriptor::parse(host_and_port).is_ok()\n+    || NetDescriptor::parse_for_list(host_and_port, true).is_ok()",
        "comment_created_at": "2025-05-28T21:34:51+00:00",
        "comment_author": "dsherret",
        "comment_body": "Don't we usually name the unstable options in an options bag rather than parameters? Or we should be and I've been updating some of them like in https://github.com/denoland/deno/pull/29473\r\n\r\nGiven it's permissions code I think we should make it very clear what's going on here and this `true` here isn't clear.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112812943",
        "repo_full_name": "denoland/deno",
        "pr_number": 29327,
        "pr_file": "cli/args/flags_net.rs",
        "discussion_id": "2112362158",
        "commented_code": "@@ -32,7 +32,7 @@ pub fn validator(host_and_port: &str) -> Result<String, String> {\n   if Url::parse(&format!(\"internal://{host_and_port}\")).is_ok()\n     || host_and_port.parse::<IpAddr>().is_ok()\n     || host_and_port.parse::<BarePort>().is_ok()\n-    || NetDescriptor::parse(host_and_port).is_ok()\n+    || NetDescriptor::parse_for_list(host_and_port, true).is_ok()",
        "comment_created_at": "2025-05-28T21:52:31+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "+1 here - ideally we'd find a way to ban `bool` in permission code :D everything should be an enum here with descriptive name",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093764514",
    "pr_number": 29330,
    "pr_file": "ext/io/lib.rs",
    "created_at": "2025-05-16T23:17:37+00:00",
    "commented_code": "}\n }\n \n+pub struct ReadCancelResource(Rc<CancelHandle>);\n+\n+impl Resource for ReadCancelResource {\n+  fn name(&self) -> Cow<str> {\n+    \"readCancel\".into()\n+  }\n+\n+  fn close(self: Rc<Self>) {\n+    self.0.cancel();\n+  }\n+}\n+\n+#[op2(fast)]\n+#[smi]\n+pub fn op_read_cancel_handle(state: &mut OpState) -> u32 {\n+  state\n+    .resource_table\n+    .add(ReadCancelResource(CancelHandle::new_rc()))\n+}\n+\n+#[op2(async)]\n+pub async fn op_read_cancel(",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2093764514",
        "repo_full_name": "denoland/deno",
        "pr_number": 29330,
        "pr_file": "ext/io/lib.rs",
        "discussion_id": "2093764514",
        "commented_code": "@@ -1002,6 +1008,59 @@ impl crate::fs::File for StdFileResourceInner {\n   }\n }\n \n+pub struct ReadCancelResource(Rc<CancelHandle>);\n+\n+impl Resource for ReadCancelResource {\n+  fn name(&self) -> Cow<str> {\n+    \"readCancel\".into()\n+  }\n+\n+  fn close(self: Rc<Self>) {\n+    self.0.cancel();\n+  }\n+}\n+\n+#[op2(fast)]\n+#[smi]\n+pub fn op_read_cancel_handle(state: &mut OpState) -> u32 {\n+  state\n+    .resource_table\n+    .add(ReadCancelResource(CancelHandle::new_rc()))\n+}\n+\n+#[op2(async)]\n+pub async fn op_read_cancel(",
        "comment_created_at": "2025-05-16T23:17:37+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Nitpick: at first glance in JS I thought this means \"to cancel a read\" while in fact it's a \"read with maybe cancel\". Can you rename this op to `op_read_with_cancel_handle`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1871906778",
    "pr_number": 27217,
    "pr_file": "runtime/ops/os/mod.rs",
    "created_at": "2024-12-05T18:36:41+00:00",
    "commented_code": "Ok(None)\n }\n \n+#[derive(Serialize)]\n+struct CpuUsage {\n+  system: usize,\n+  user: usize,\n+}\n+\n+#[op2]\n+#[serde]\n+fn op_runtime_cpu_usage() -> CpuUsage {\n+  let (sys, user) = get_usage();\n+  CpuUsage {\n+    system: sys.as_micros() as usize,\n+    user: user.as_micros() as usize,\n+  }\n+}\n+\n+#[cfg(unix)]\n+fn get_usage() -> (std::time::Duration, std::time::Duration) {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1871906778",
        "repo_full_name": "denoland/deno",
        "pr_number": 27217,
        "pr_file": "runtime/ops/os/mod.rs",
        "discussion_id": "1871906778",
        "commented_code": "@@ -341,6 +343,120 @@ fn op_uid(\n   Ok(None)\n }\n \n+#[derive(Serialize)]\n+struct CpuUsage {\n+  system: usize,\n+  user: usize,\n+}\n+\n+#[op2]\n+#[serde]\n+fn op_runtime_cpu_usage() -> CpuUsage {\n+  let (sys, user) = get_usage();\n+  CpuUsage {\n+    system: sys.as_micros() as usize,\n+    user: user.as_micros() as usize,\n+  }\n+}\n+\n+#[cfg(unix)]\n+fn get_usage() -> (std::time::Duration, std::time::Duration) {",
        "comment_created_at": "2024-12-05T18:36:41+00:00",
        "comment_author": "irbull",
        "comment_body": "Maybe call these `get_cpu_usage` as there are also memory usage functions in this file.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069051513",
    "pr_number": 28929,
    "pr_file": "runtime/worker.rs",
    "created_at": "2025-04-30T16:25:58+00:00",
    "commented_code": "Ok(ret_val.is_true())\n   }\n }\n+\n+fn common_extensions<\n+  TInNpmPackageChecker: InNpmPackageChecker + 'static,\n+  TNpmPackageFolderResolver: NpmPackageFolderResolver + 'static,\n+  TExtNodeSys: ExtNodeSys + 'static,\n+>(\n+  has_snapshot: bool,\n+  unconfigured: bool,\n+) -> Vec<Extension> {\n+  // NOTE(bartlomieju): ordering is important here, keep it in sync with\n+  // `runtime/worker.rs`, `runtime/web_worker.rs`, `runtime/snapshot_info.rs`\n+  // and `runtime/snapshot.rs`!\n+  vec![\n+    deno_telemetry::deno_telemetry::init(),\n+    // Web APIs\n+    deno_webidl::deno_webidl::init(),\n+    deno_console::deno_console::init(),\n+    deno_url::deno_url::init(),\n+    deno_web::deno_web::lazy_init::<PermissionsContainer>(),\n+    deno_webgpu::deno_webgpu::init(),\n+    deno_canvas::deno_canvas::init(),\n+    deno_fetch::deno_fetch::lazy_init::<PermissionsContainer>(),\n+    deno_cache::deno_cache::lazy_init(),\n+    deno_websocket::deno_websocket::lazy_init::<PermissionsContainer>(),\n+    deno_webstorage::deno_webstorage::lazy_init(),\n+    deno_crypto::deno_crypto::lazy_init(),\n+    deno_broadcast_channel::deno_broadcast_channel::lazy_init::<\n+      InMemoryBroadcastChannel,\n+    >(),\n+    deno_ffi::deno_ffi::lazy_init::<PermissionsContainer>(),\n+    deno_net::deno_net::lazy_init::<PermissionsContainer>(),\n+    deno_tls::deno_tls::init(),\n+    deno_kv::deno_kv::lazy_init::<MultiBackendDbHandler>(),\n+    deno_cron::deno_cron::init(LocalCronHandler::new()),\n+    deno_napi::deno_napi::lazy_init::<PermissionsContainer>(),\n+    deno_http::deno_http::lazy_init(),\n+    deno_io::deno_io::lazy_init(),\n+    deno_fs::deno_fs::lazy_init::<PermissionsContainer>(),\n+    deno_os::deno_os::lazy_init(),\n+    deno_process::deno_process::lazy_init(),\n+    deno_node::deno_node::lazy_init::<\n+      PermissionsContainer,\n+      TInNpmPackageChecker,\n+      TNpmPackageFolderResolver,\n+      TExtNodeSys,\n+    >(),\n+    // Ops from this crate\n+    ops::runtime::deno_runtime::lazy_init(),\n+    ops::worker_host::deno_worker_host::lazy_init(),\n+    ops::fs_events::deno_fs_events::init(),\n+    ops::permissions::deno_permissions::init(),\n+    ops::tty::deno_tty::init(),\n+    ops::http::deno_http_runtime::init(),\n+    ops::bootstrap::deno_bootstrap::init(\n+      has_snapshot.then(Default::default),\n+      unconfigured,\n+    ),\n+    runtime::init(),\n+    // NOTE(bartlomieju): this is done, just so that ops from this extension\n+    // are available and importing them in `99_main.js` doesn't cause an\n+    // error because they're not defined. Trying to use these ops in non-worker\n+    // context will cause a panic.\n+    ops::web_worker::deno_web_worker::init().disable(),\n+  ]\n+}\n+\n+#[allow(clippy::too_many_arguments)]\n+fn common_runtime(\n+  module_loader: Rc<dyn ModuleLoader>,\n+  startup_snapshot: Option<&'static [u8]>,\n+  create_params: Option<v8::CreateParams>,\n+  skip_op_registration: bool,\n+  shared_array_buffer_store: Option<SharedArrayBufferStore>,\n+  compiled_wasm_module_store: Option<CompiledWasmModuleStore>,\n+  extensions: Vec<Extension>,\n+  op_metrics_factory_fn: Option<OpMetricsFactoryFn>,\n+  enable_stack_trace_arg_in_ops: bool,\n+) -> JsRuntime {\n+  JsRuntime::new(RuntimeOptions {\n+    module_loader: Some(module_loader),\n+    startup_snapshot,\n+    create_params,\n+    skip_op_registration,\n+    shared_array_buffer_store,\n+    compiled_wasm_module_store,\n+    extensions,\n+    #[cfg(feature = \"transpile\")]\n+    extension_transpiler: Some(Rc::new(|specifier, source| {\n+      crate::transpile::maybe_transpile_source(specifier, source)\n+    })),\n+    #[cfg(not(feature = \"transpile\"))]\n+    extension_transpiler: None,\n+    inspector: true,\n+    is_main: true,\n+    op_metrics_factory_fn,\n+    wait_for_inspector_disconnect_callback: Some(\n+      make_wait_for_inspector_disconnect_callback(),\n+    ),\n+    import_meta_resolve_callback: Some(Box::new(import_meta_resolve_callback)),\n+    validate_import_attributes_cb: Some(Box::new(\n+      validate_import_attributes_callback,\n+    )),\n+    import_assertions_support: deno_core::ImportAssertionsSupport::Error,\n+    maybe_op_stack_trace_callback: enable_stack_trace_arg_in_ops.then(|| {\n+      Box::new(|stack| {\n+        deno_permissions::prompter::set_current_stacktrace(stack)\n+      }) as _\n+    }),\n+    ..Default::default()\n+  })\n+}\n+\n+pub struct Unconfigured {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2069051513",
        "repo_full_name": "denoland/deno",
        "pr_number": 28929,
        "pr_file": "runtime/worker.rs",
        "discussion_id": "2069051513",
        "commented_code": "@@ -958,3 +931,265 @@ impl MainWorker {\n     Ok(ret_val.is_true())\n   }\n }\n+\n+fn common_extensions<\n+  TInNpmPackageChecker: InNpmPackageChecker + 'static,\n+  TNpmPackageFolderResolver: NpmPackageFolderResolver + 'static,\n+  TExtNodeSys: ExtNodeSys + 'static,\n+>(\n+  has_snapshot: bool,\n+  unconfigured: bool,\n+) -> Vec<Extension> {\n+  // NOTE(bartlomieju): ordering is important here, keep it in sync with\n+  // `runtime/worker.rs`, `runtime/web_worker.rs`, `runtime/snapshot_info.rs`\n+  // and `runtime/snapshot.rs`!\n+  vec![\n+    deno_telemetry::deno_telemetry::init(),\n+    // Web APIs\n+    deno_webidl::deno_webidl::init(),\n+    deno_console::deno_console::init(),\n+    deno_url::deno_url::init(),\n+    deno_web::deno_web::lazy_init::<PermissionsContainer>(),\n+    deno_webgpu::deno_webgpu::init(),\n+    deno_canvas::deno_canvas::init(),\n+    deno_fetch::deno_fetch::lazy_init::<PermissionsContainer>(),\n+    deno_cache::deno_cache::lazy_init(),\n+    deno_websocket::deno_websocket::lazy_init::<PermissionsContainer>(),\n+    deno_webstorage::deno_webstorage::lazy_init(),\n+    deno_crypto::deno_crypto::lazy_init(),\n+    deno_broadcast_channel::deno_broadcast_channel::lazy_init::<\n+      InMemoryBroadcastChannel,\n+    >(),\n+    deno_ffi::deno_ffi::lazy_init::<PermissionsContainer>(),\n+    deno_net::deno_net::lazy_init::<PermissionsContainer>(),\n+    deno_tls::deno_tls::init(),\n+    deno_kv::deno_kv::lazy_init::<MultiBackendDbHandler>(),\n+    deno_cron::deno_cron::init(LocalCronHandler::new()),\n+    deno_napi::deno_napi::lazy_init::<PermissionsContainer>(),\n+    deno_http::deno_http::lazy_init(),\n+    deno_io::deno_io::lazy_init(),\n+    deno_fs::deno_fs::lazy_init::<PermissionsContainer>(),\n+    deno_os::deno_os::lazy_init(),\n+    deno_process::deno_process::lazy_init(),\n+    deno_node::deno_node::lazy_init::<\n+      PermissionsContainer,\n+      TInNpmPackageChecker,\n+      TNpmPackageFolderResolver,\n+      TExtNodeSys,\n+    >(),\n+    // Ops from this crate\n+    ops::runtime::deno_runtime::lazy_init(),\n+    ops::worker_host::deno_worker_host::lazy_init(),\n+    ops::fs_events::deno_fs_events::init(),\n+    ops::permissions::deno_permissions::init(),\n+    ops::tty::deno_tty::init(),\n+    ops::http::deno_http_runtime::init(),\n+    ops::bootstrap::deno_bootstrap::init(\n+      has_snapshot.then(Default::default),\n+      unconfigured,\n+    ),\n+    runtime::init(),\n+    // NOTE(bartlomieju): this is done, just so that ops from this extension\n+    // are available and importing them in `99_main.js` doesn't cause an\n+    // error because they're not defined. Trying to use these ops in non-worker\n+    // context will cause a panic.\n+    ops::web_worker::deno_web_worker::init().disable(),\n+  ]\n+}\n+\n+#[allow(clippy::too_many_arguments)]\n+fn common_runtime(\n+  module_loader: Rc<dyn ModuleLoader>,\n+  startup_snapshot: Option<&'static [u8]>,\n+  create_params: Option<v8::CreateParams>,\n+  skip_op_registration: bool,\n+  shared_array_buffer_store: Option<SharedArrayBufferStore>,\n+  compiled_wasm_module_store: Option<CompiledWasmModuleStore>,\n+  extensions: Vec<Extension>,\n+  op_metrics_factory_fn: Option<OpMetricsFactoryFn>,\n+  enable_stack_trace_arg_in_ops: bool,\n+) -> JsRuntime {\n+  JsRuntime::new(RuntimeOptions {\n+    module_loader: Some(module_loader),\n+    startup_snapshot,\n+    create_params,\n+    skip_op_registration,\n+    shared_array_buffer_store,\n+    compiled_wasm_module_store,\n+    extensions,\n+    #[cfg(feature = \"transpile\")]\n+    extension_transpiler: Some(Rc::new(|specifier, source| {\n+      crate::transpile::maybe_transpile_source(specifier, source)\n+    })),\n+    #[cfg(not(feature = \"transpile\"))]\n+    extension_transpiler: None,\n+    inspector: true,\n+    is_main: true,\n+    op_metrics_factory_fn,\n+    wait_for_inspector_disconnect_callback: Some(\n+      make_wait_for_inspector_disconnect_callback(),\n+    ),\n+    import_meta_resolve_callback: Some(Box::new(import_meta_resolve_callback)),\n+    validate_import_attributes_cb: Some(Box::new(\n+      validate_import_attributes_callback,\n+    )),\n+    import_assertions_support: deno_core::ImportAssertionsSupport::Error,\n+    maybe_op_stack_trace_callback: enable_stack_trace_arg_in_ops.then(|| {\n+      Box::new(|stack| {\n+        deno_permissions::prompter::set_current_stacktrace(stack)\n+      }) as _\n+    }),\n+    ..Default::default()\n+  })\n+}\n+\n+pub struct Unconfigured {",
        "comment_created_at": "2025-04-30T16:25:58+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Nitpick: consider renaming to `UnconfiguredRuntime` or `PrewarmedRuntime` - I found `Unconfigured` not very intelligible when reviewing `cli/` part. Fine to do it in a follow up PR to not block this one",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039708395",
    "pr_number": 28769,
    "pr_file": "cli/lsp/language_server.rs",
    "created_at": "2025-04-11T14:52:11+00:00",
    "commented_code": "// a @types/node package and now's a good time to do that anyway\n     self.refresh_dep_info().await;\n \n-    self.project_changed([], true);\n+    self.project_changed([], true, false);",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2039708395",
        "repo_full_name": "denoland/deno",
        "pr_number": 28769,
        "pr_file": "cli/lsp/language_server.rs",
        "discussion_id": "2039708395",
        "commented_code": "@@ -1224,18 +1225,20 @@ impl Inner {\n     // a @types/node package and now's a good time to do that anyway\n     self.refresh_dep_info().await;\n \n-    self.project_changed([], true);\n+    self.project_changed([], true, false);",
        "comment_created_at": "2025-04-11T14:52:11+00:00",
        "comment_author": "dsherret",
        "comment_body": "Nitpick: It might be good to have the call sites for this be more descriptive and not use boolean parameters, but it's probably fine because it's internal.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1966037698",
    "pr_number": 28234,
    "pr_file": "cli/graph_container.rs",
    "created_at": "2025-02-21T19:08:09+00:00",
    "commented_code": "&self,\n     specifiers: &[ModuleSpecifier],\n     ext_overwrite: Option<&String>,\n+  ) -> Result<(), AnyError> {\n+    self\n+      .check_specifiers_allow_unknown_media_types(\n+        specifiers,\n+        ext_overwrite,\n+        false,\n+      )\n+      .await\n+  }\n+  pub async fn check_specifiers_allow_unknown_media_types(",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1966037698",
        "repo_full_name": "denoland/deno",
        "pr_number": 28234,
        "pr_file": "cli/graph_container.rs",
        "discussion_id": "1966037698",
        "commented_code": "@@ -69,19 +70,34 @@ impl MainModuleGraphContainer {\n     &self,\n     specifiers: &[ModuleSpecifier],\n     ext_overwrite: Option<&String>,\n+  ) -> Result<(), AnyError> {\n+    self\n+      .check_specifiers_allow_unknown_media_types(\n+        specifiers,\n+        ext_overwrite,\n+        false,\n+      )\n+      .await\n+  }\n+  pub async fn check_specifiers_allow_unknown_media_types(",
        "comment_created_at": "2025-02-21T19:08:09+00:00",
        "comment_author": "nathanwhit",
        "comment_body": "names are hard",
        "pr_file_module": null
      },
      {
        "comment_id": "1966042091",
        "repo_full_name": "denoland/deno",
        "pr_number": 28234,
        "pr_file": "cli/graph_container.rs",
        "discussion_id": "1966037698",
        "commented_code": "@@ -69,19 +70,34 @@ impl MainModuleGraphContainer {\n     &self,\n     specifiers: &[ModuleSpecifier],\n     ext_overwrite: Option<&String>,\n+  ) -> Result<(), AnyError> {\n+    self\n+      .check_specifiers_allow_unknown_media_types(\n+        specifiers,\n+        ext_overwrite,\n+        false,\n+      )\n+      .await\n+  }\n+  pub async fn check_specifiers_allow_unknown_media_types(",
        "comment_created_at": "2025-02-21T19:11:47+00:00",
        "comment_author": "dsherret",
        "comment_body": "Maybe: `check_specifiers(specifiers: &[ModuleSpecifier], options: CheckSpecifierOptions)`",
        "pr_file_module": null
      }
    ]
  }
]