[
  {
    "discussion_id": "1990833182",
    "pr_number": 28463,
    "pr_file": "ext/node/polyfills/http.ts",
    "created_at": "2025-03-12T07:34:00+00:00",
    "commented_code": "if (span) {\n           span.setAttribute(\"http.response.status_code\", res.status);\n+          if (res.status >= 400) {\n+            span.setAttribute(\"error.type\", String(res.status));\n+            span.setStatus({\n+              code: 2, // Error\n+              message: res.statusText,",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1990833182",
        "repo_full_name": "denoland/deno",
        "pr_number": 28463,
        "pr_file": "ext/node/polyfills/http.ts",
        "discussion_id": "1990833182",
        "commented_code": "@@ -552,6 +549,13 @@ class ClientRequest extends OutgoingMessage {\n \n         if (span) {\n           span.setAttribute(\"http.response.status_code\", res.status);\n+          if (res.status >= 400) {\n+            span.setAttribute(\"error.type\", String(res.status));\n+            span.setStatus({\n+              code: 2, // Error\n+              message: res.statusText,",
        "comment_created_at": "2025-03-12T07:34:00+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "You can omit the message:\r\n\r\n> Don\u2019t set the span status description if the reason can be inferred from http.response.status_code.\r\n\r\nhttps://opentelemetry.io/docs/specs/semconv/http/http-spans/\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1927974640",
    "pr_number": 27789,
    "pr_file": "ext/net/lib.deno_net.d.ts",
    "created_at": "2025-01-24T01:47:47+00:00",
    "commented_code": "readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1927974640",
        "repo_full_name": "denoland/deno",
        "pr_number": 27789,
        "pr_file": "ext/net/lib.deno_net.d.ts",
        "discussion_id": "1927974640",
        "commented_code": "@@ -138,6 +138,8 @@ declare namespace Deno {\n \n     readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
        "comment_created_at": "2025-01-24T01:47:47+00:00",
        "comment_author": "kt3k",
        "comment_body": "I don't think this is desirable addition to Deno API because no other resources expose file descriptor.\r\n\r\nWe generally use rid as a substitute to fd in node compat layer. Doesn't it work to assign `conn.rid` to `handle.fd` for TCP handle for your use case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1928002961",
        "repo_full_name": "denoland/deno",
        "pr_number": 27789,
        "pr_file": "ext/net/lib.deno_net.d.ts",
        "discussion_id": "1927974640",
        "commented_code": "@@ -138,6 +138,8 @@ declare namespace Deno {\n \n     readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
        "comment_created_at": "2025-01-24T02:30:18+00:00",
        "comment_author": "muthu90tech",
        "comment_body": "Hi thanks for the review, since the rid is a pointer to the internal tcpstream resource and is an abstraction, we would like to print the actual file descriptor the connection is using for observability purposes. Thank you ",
        "pr_file_module": null
      },
      {
        "comment_id": "1928157582",
        "repo_full_name": "denoland/deno",
        "pr_number": 27789,
        "pr_file": "ext/net/lib.deno_net.d.ts",
        "discussion_id": "1927974640",
        "commented_code": "@@ -138,6 +138,8 @@ declare namespace Deno {\n \n     readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
        "comment_created_at": "2025-01-24T06:39:41+00:00",
        "comment_author": "kt3k",
        "comment_body": "@ry @bartlomieju What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1928590494",
        "repo_full_name": "denoland/deno",
        "pr_number": 27789,
        "pr_file": "ext/net/lib.deno_net.d.ts",
        "discussion_id": "1927974640",
        "commented_code": "@@ -138,6 +138,8 @@ declare namespace Deno {\n \n     readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
        "comment_created_at": "2025-01-24T12:14:28+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "I'm fine exposing `fd` in the Node compat API, but we shouldn't do it in the `Deno` APIs. IMO this should be handled the same way we're passing resource IDs between Deno APIs and Node APIs (via a private symbol)",
        "pr_file_module": null
      },
      {
        "comment_id": "1929622259",
        "repo_full_name": "denoland/deno",
        "pr_number": 27789,
        "pr_file": "ext/net/lib.deno_net.d.ts",
        "discussion_id": "1927974640",
        "commented_code": "@@ -138,6 +138,8 @@ declare namespace Deno {\n \n     readonly readable: ReadableStream<Uint8Array>;\n     readonly writable: WritableStream<Uint8Array>;\n+\n+    readonly fd: number;",
        "comment_created_at": "2025-01-25T22:54:12+00:00",
        "comment_author": "muthu90tech",
        "comment_body": "@bartlomieju Got it, I pushed another commit to use internal symbols to expose fd, thank you\r\nhttps://github.com/denoland/deno_core/pull/1061",
        "pr_file_module": null
      }
    ]
  }
]