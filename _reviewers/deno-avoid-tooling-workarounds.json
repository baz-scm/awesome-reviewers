[
  {
    "discussion_id": "2041120698",
    "pr_number": 28855,
    "pr_file": "ext/node/update_node_stream.js",
    "created_at": "2025-04-13T12:59:54+00:00",
    "commented_code": "+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2041120698",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T12:59:54+00:00",
        "comment_author": "ry",
        "comment_body": "can you open a dprint issue and link it here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2041168976",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T17:18:57+00:00",
        "comment_author": "littledivy",
        "comment_body": "https://github.com/dprint/dprint-plugin-typescript/issues/705",
        "pr_file_module": null
      },
      {
        "comment_id": "2041172141",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T17:34:13+00:00",
        "comment_author": "dsherret",
        "comment_body": "It looks like an swc syntax error.",
        "pr_file_module": null
      },
      {
        "comment_id": "2041172614",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T17:36:56+00:00",
        "comment_author": "littledivy",
        "comment_body": "it can parse it on the swc [playground](https://play.swc.rs/?version=1.11.20&code=H4sIAAAAAAAAA0vOzysuUUgrys9VsFWorrXmSq0oyC8qUUhJTUsszYHIWAMAg8l5qiUAAAA%3D&config=H4sIAAAAAAAAA1WPSw7DIAwF9zkF8rrbdtE79BCIOhERP9mOVBTl7oUE0maH3xszsA5KwcwGnmotxzIkTYx0ziXhHER%2FSgKSE7IhmwRuvRWu1agd4x5tRwOiaUKpW8j3hoOLkbHjLfM22DH%2FC030iZD5ClZUh8nhVTc0Jfj4XvayfaQ%2B9tA%2F4Ad12XkxWH71TaEFh%2B0LYuVI0xQBAAA%3D)",
        "pr_file_module": null
      },
      {
        "comment_id": "2041214755",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T21:22:09+00:00",
        "comment_author": "dsherret",
        "comment_body": "It's an swc diagnostic that's not surfaced in the playground. I'll open an swc issue.",
        "pr_file_module": null
      },
      {
        "comment_id": "2041219372",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T21:46:50+00:00",
        "comment_author": "dsherret",
        "comment_body": "Looked into it and here's an example of the swc playground erroring: https://play.swc.rs/?version=1.11.20&code=H4sIAAAAAAAAA0vOzysuUUgrys9VsFWorrXmSq0oyC8qUUhJTUsszYHIWAMAg8l5qiUAAAA%3D&config=H4sIAAAAAAAAA1WPsQ6DMAxEd74Cee7aDp2rbv0IKzUoKCGRbSQQ4t8JkNCyxXfPd%2FFc1TV0YuBZz%2BmZhogsxOecFJl6xTEpQMajGLZR4VZcGmNgfVGDg9M3B59A5YFOoJNtt0EntEvL4YAit6R7rNxzHrgQhAqeNW9720z%2FPzLBRyaRK7ih2LeOrnVVrgQfvsNu5kt1inTUP%2BAHlbIzGKx8yuZ2WLWst%2B%2Fb9zUBAAA%3D\r\n\r\nIt's because of the `export default from` proposal.",
        "pr_file_module": null
      },
      {
        "comment_id": "2041220126",
        "repo_full_name": "denoland/deno",
        "pr_number": 28855,
        "pr_file": "ext/node/update_node_stream.js",
        "discussion_id": "2041120698",
        "commented_code": "@@ -0,0 +1,507 @@\n+#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run\n+// deno-lint-ignore-file\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+// This file is used to transform Node.js internal streams code to\n+// Deno polyfills.\n+\n+import jscodeshift from \"npm:jscodeshift@0.15.2\";\n+import $ from \"jsr:@david/dax@0.42.0\";\n+\n+import path from \"node:path\";\n+\n+import { version } from \"../../tests/node_compat/runner/suite/node_version.ts\";\n+import { expandGlobSync } from \"jsr:@std/fs@1.0.14/expand-glob\";\n+\n+const globs = [\n+  \"internal/streams/*.js\",\n+  \"stream/*.js\",\n+];\n+\n+// These have special handling for lazy loading\n+const ignore = [\"duplexify.js\"];\n+\n+const moduleMap = {\n+  \"events\": \"node:events\",\n+  \"buffer\": \"node:buffer\",\n+  \"stream\": \"node:stream\",\n+  \"string_decoder\": \"node:string_decoder\",\n+  \"internal/abort_controller\": \"ext:deno_web/03_abort_signal.js\",\n+  \"internal/events/abort_listener\":\n+    \"ext:deno_node/internal/events/abort_listener.mjs\",\n+  \"internal/assert\": \"ext:deno_node/internal/assert.mjs\",\n+  \"internal/webstreams/adapters\":\n+    \"ext:deno_node/internal/webstreams/adapters.js\",\n+  \"internal/webstreams/compression\": \"ext:deno_web/14_compression.js\",\n+  \"internal/webstreams/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/errors\": \"ext:deno_node/internal/errors.ts\",\n+  \"internal/event_target\": \"ext:deno_node/internal/event_target.mjs\",\n+  \"internal/util\": \"ext:deno_node/internal/util.mjs\",\n+  \"internal/util/debuglog\": \"ext:deno_node/internal/util/debuglog.ts\",\n+  \"internal/validators\": \"ext:deno_node/internal/validators.mjs\",\n+  \"internal/encoding\": \"ext:deno_web/08_text_encoding.js\",\n+  \"internal/blob\": \"ext:deno_web/09_file.js\",\n+};\n+\n+// Use default export for these conditional require()\n+const defaultLazy = [\n+  \"internal/streams/passthrough\",\n+  \"internal/streams/readable\",\n+  \"internal/streams/duplexify\",\n+];\n+\n+// Workaround a bug in our formatter: \"export default from;\" does not work\n+// correctly, so we rename it to something else and export.\n+const renameForDefaultExport = [\"from\"];",
        "comment_created_at": "2025-04-13T21:50:57+00:00",
        "comment_author": "dsherret",
        "comment_body": "https://github.com/swc-project/swc/issues/10372 -- Using identifiers that are also contextual keywords is kind of asking to hit edge cases.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1966326499",
    "pr_number": 28240,
    "pr_file": "cli/tsc/97_ts_host.js",
    "created_at": "2025-02-21T23:43:17+00:00",
    "commented_code": "}\n }\n \n-// @ts-ignore Undocumented function.",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1966326499",
        "repo_full_name": "denoland/deno",
        "pr_number": 28240,
        "pr_file": "cli/tsc/97_ts_host.js",
        "discussion_id": "1966326499",
        "commented_code": "@@ -768,9 +761,6 @@ for (const [key, value] of Object.entries(hostImpl)) {\n   }\n }\n \n-// @ts-ignore Undocumented function.",
        "comment_created_at": "2025-02-21T23:43:17+00:00",
        "comment_author": "dsherret",
        "comment_body": "We should try to move off `@ts-ignore` and instead just remove the `/** @internal */`s in TypeScript's codebase. I updated https://github.com/denoland/TypeScript/pull/15 as part of this change.",
        "pr_file_module": null
      }
    ]
  }
]