[
  {
    "discussion_id": "1959859611",
    "pr_number": 28168,
    "pr_file": "tests/unit_node/sqlite_test.ts",
    "created_at": "2025-02-18T14:26:52+00:00",
    "commented_code": "db.close();\n });\n+\n+Deno.test(\"[node/sqlite] StatementSync#iterate\", () => {\n+  const db = new DatabaseSync(\":memory:\");\n+  const stmt = db.prepare(\"SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\");\n+\n+  const result = [];\n+  // @ts-ignore: types are not up to date\n+  for (const row of stmt.iterate()) {\n+    result.push(row);\n+  }",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1959859611",
        "repo_full_name": "denoland/deno",
        "pr_number": 28168,
        "pr_file": "tests/unit_node/sqlite_test.ts",
        "discussion_id": "1959859611",
        "commented_code": "@@ -197,3 +197,17 @@ CREATE TABLE two(id int PRIMARY KEY) STRICT;`);\n \n   db.close();\n });\n+\n+Deno.test(\"[node/sqlite] StatementSync#iterate\", () => {\n+  const db = new DatabaseSync(\":memory:\");\n+  const stmt = db.prepare(\"SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\");\n+\n+  const result = [];\n+  // @ts-ignore: types are not up to date\n+  for (const row of stmt.iterate()) {\n+    result.push(row);\n+  }",
        "comment_created_at": "2025-02-18T14:26:52+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Won't it crash/error if you try to iterate again? Can you add a test for that?",
        "pr_file_module": null
      },
      {
        "comment_id": "1959952476",
        "repo_full_name": "denoland/deno",
        "pr_number": 28168,
        "pr_file": "tests/unit_node/sqlite_test.ts",
        "discussion_id": "1959859611",
        "commented_code": "@@ -197,3 +197,17 @@ CREATE TABLE two(id int PRIMARY KEY) STRICT;`);\n \n   db.close();\n });\n+\n+Deno.test(\"[node/sqlite] StatementSync#iterate\", () => {\n+  const db = new DatabaseSync(\":memory:\");\n+  const stmt = db.prepare(\"SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\");\n+\n+  const result = [];\n+  // @ts-ignore: types are not up to date\n+  for (const row of stmt.iterate()) {\n+    result.push(row);\n+  }",
        "comment_created_at": "2025-02-18T15:13:14+00:00",
        "comment_author": "littledivy",
        "comment_body": "Added a test",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1932878168",
    "pr_number": 27431,
    "pr_file": "tests/specs/run/webtransport/main.ts",
    "created_at": "2025-01-28T21:25:44+00:00",
    "commented_code": "+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n+\n+import { decodeBase64 } from \"@std/encoding/base64\";\n+import { assertEquals } from \"@std/assert\";\n+\n+const cert = Deno.readTextFileSync(\"../../../testdata/tls/localhost.crt\");\n+const certHash = await crypto.subtle.digest(\n+  \"SHA-256\",\n+  decodeBase64(cert.split(\"\n\").slice(1, -2).join(\"\")),\n+);\n+\n+const server = new Deno.QuicEndpoint({",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1932878168",
        "repo_full_name": "denoland/deno",
        "pr_number": 27431,
        "pr_file": "tests/specs/run/webtransport/main.ts",
        "discussion_id": "1932878168",
        "commented_code": "@@ -0,0 +1,100 @@\n+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n+\n+import { decodeBase64 } from \"@std/encoding/base64\";\n+import { assertEquals } from \"@std/assert\";\n+\n+const cert = Deno.readTextFileSync(\"../../../testdata/tls/localhost.crt\");\n+const certHash = await crypto.subtle.digest(\n+  \"SHA-256\",\n+  decodeBase64(cert.split(\"\\n\").slice(1, -2).join(\"\")),\n+);\n+\n+const server = new Deno.QuicEndpoint({",
        "comment_created_at": "2025-01-28T21:25:44+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Could you wrap this whole thing in a `Deno.test()` so that we get the benefit of sanitizers?",
        "pr_file_module": null
      }
    ]
  }
]