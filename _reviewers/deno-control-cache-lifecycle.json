[
  {
    "discussion_id": "2183955184",
    "pr_number": 29996,
    "pr_file": "cli/module_loader.rs",
    "created_at": "2025-07-03T23:58:55+00:00",
    "commented_code": "ModuleKind::Cjs,\n           &text.into(),\n         )\n-        .map(Cow::Owned)\n-        .map_err(JsErrorBox::from_err)\n+        .map_err(JsErrorBox::from_err)?;\n+      self.parsed_soure_cache.free(&specifier);",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2183955184",
        "repo_full_name": "denoland/deno",
        "pr_number": 29996,
        "pr_file": "cli/module_loader.rs",
        "discussion_id": "2183955184",
        "commented_code": "@@ -1464,10 +1467,14 @@ impl<TGraphContainer: ModuleGraphContainer> NodeRequireLoader\n           ModuleKind::Cjs,\n           &text.into(),\n         )\n-        .map(Cow::Owned)\n-        .map_err(JsErrorBox::from_err)\n+        .map_err(JsErrorBox::from_err)?;\n+      self.parsed_soure_cache.free(&specifier);",
        "comment_created_at": "2025-07-03T23:58:55+00:00",
        "comment_author": "dsherret",
        "comment_body": "It's better to do this at a higher level so the caller can decide when to free these from the cache.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2089781681",
    "pr_number": 29299,
    "pr_file": "cli/npm/installer/common/mod.rs",
    "created_at": "2025-05-14T21:27:59+00:00",
    "commented_code": ") -> Result<(), JsErrorBox>;\n }\n \n-pub trait NpmPackageExtraInfoProvider: std::fmt::Debug + Send + Sync {\n-  async fn get_package_extra_info(\n-    &self,\n-    package_id: &PackageNv,\n-    package_path: &Path,\n-    expected: ExpectedExtraInfo,\n-  ) -> Result<deno_npm::NpmPackageExtraInfo, JsErrorBox>;\n+pub struct CachedNpmPackageExtraInfoProvider {\n+  inner: Arc<NpmPackageExtraInfoProvider>,\n+  cache: RwLock<rustc_hash::FxHashMap<PackageNv, NpmPackageExtraInfo>>,\n }",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2089781681",
        "repo_full_name": "denoland/deno",
        "pr_number": 29299,
        "pr_file": "cli/npm/installer/common/mod.rs",
        "discussion_id": "2089781681",
        "commented_code": "@@ -27,48 +29,56 @@ pub trait NpmPackageFsInstaller: std::fmt::Debug + Send + Sync {\n   ) -> Result<(), JsErrorBox>;\n }\n \n-pub trait NpmPackageExtraInfoProvider: std::fmt::Debug + Send + Sync {\n-  async fn get_package_extra_info(\n-    &self,\n-    package_id: &PackageNv,\n-    package_path: &Path,\n-    expected: ExpectedExtraInfo,\n-  ) -> Result<deno_npm::NpmPackageExtraInfo, JsErrorBox>;\n+pub struct CachedNpmPackageExtraInfoProvider {\n+  inner: Arc<NpmPackageExtraInfoProvider>,\n+  cache: RwLock<rustc_hash::FxHashMap<PackageNv, NpmPackageExtraInfo>>,\n }",
        "comment_created_at": "2025-05-14T21:27:59+00:00",
        "comment_author": "dsherret",
        "comment_body": "Separated the caching to separate the concerns (and it allows for a long lived service and short lived cached)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1930891286",
    "pr_number": 27838,
    "pr_file": "cli/lsp/tsc.rs",
    "created_at": "2025-01-27T17:16:50+00:00",
    "commented_code": "})\n     })\n     .collect();\n+  NodeResolutionThreadLocalCache::clear();",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1930891286",
        "repo_full_name": "denoland/deno",
        "pr_number": 27838,
        "pr_file": "cli/lsp/tsc.rs",
        "discussion_id": "1930891286",
        "commented_code": "@@ -4640,6 +4642,7 @@ fn op_resolve_inner(\n       })\n     })\n     .collect();\n+  NodeResolutionThreadLocalCache::clear();",
        "comment_created_at": "2025-01-27T17:16:50+00:00",
        "comment_author": "dsherret",
        "comment_body": "We should improve this to be smarter. Right now I just have it clearing before and after each op_resolve.",
        "pr_file_module": null
      },
      {
        "comment_id": "1939890061",
        "repo_full_name": "denoland/deno",
        "pr_number": 27838,
        "pr_file": "cli/lsp/tsc.rs",
        "discussion_id": "1930891286",
        "commented_code": "@@ -4640,6 +4642,7 @@ fn op_resolve_inner(\n       })\n     })\n     .collect();\n+  NodeResolutionThreadLocalCache::clear();",
        "comment_created_at": "2025-02-03T19:07:22+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Could we clear it after a request is completed instead? I did a similar thing in https://github.com/denoland/deno/pull/27831",
        "pr_file_module": null
      },
      {
        "comment_id": "1939925454",
        "repo_full_name": "denoland/deno",
        "pr_number": 27838,
        "pr_file": "cli/lsp/tsc.rs",
        "discussion_id": "1930891286",
        "commented_code": "@@ -4640,6 +4642,7 @@ fn op_resolve_inner(\n       })\n     })\n     .collect();\n+  NodeResolutionThreadLocalCache::clear();",
        "comment_created_at": "2025-02-03T19:36:54+00:00",
        "comment_author": "dsherret",
        "comment_body": "Oh, actually I think we can just clear when the dependents and config are recreated. I will move this there.",
        "pr_file_module": null
      },
      {
        "comment_id": "1939937147",
        "repo_full_name": "denoland/deno",
        "pr_number": 27838,
        "pr_file": "cli/lsp/tsc.rs",
        "discussion_id": "1930891286",
        "commented_code": "@@ -4640,6 +4642,7 @@ fn op_resolve_inner(\n       })\n     })\n     .collect();\n+  NodeResolutionThreadLocalCache::clear();",
        "comment_created_at": "2025-02-03T19:47:53+00:00",
        "comment_author": "dsherret",
        "comment_body": "Ah, seems tricky. Yeah I'm going to switch to clear after the request is completed.",
        "pr_file_module": null
      }
    ]
  }
]