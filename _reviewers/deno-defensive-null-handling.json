[
  {
    "discussion_id": "2144210296",
    "pr_number": 29725,
    "pr_file": "runtime/js/99_main.js",
    "created_at": "2025-06-13T05:02:42+00:00",
    "commented_code": "// FIXME(bartlomieju): temporarily add whole `Deno.core` to\n // `Deno[Deno.internal]` namespace. It should be removed and only necessary\n // methods should be left there.\n-ObjectAssign(internals, { core });\n+ObjectAssign(internals, { core, nodeGlobals: { ...nodeGlobals } });",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2144210296",
        "repo_full_name": "denoland/deno",
        "pr_number": 29725,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "2144210296",
        "commented_code": "@@ -730,7 +731,7 @@ function removeImportedOps() {\n // FIXME(bartlomieju): temporarily add whole `Deno.core` to\n // `Deno[Deno.internal]` namespace. It should be removed and only necessary\n // methods should be left there.\n-ObjectAssign(internals, { core });\n+ObjectAssign(internals, { core, nodeGlobals: { ...nodeGlobals } });",
        "comment_created_at": "2025-06-13T05:02:42+00:00",
        "comment_author": "iuioiua",
        "comment_body": "```suggestion\r\nObjectAssign(internals, { core, nodeGlobals });\r\n```\r\nMight this be fine?",
        "pr_file_module": null
      },
      {
        "comment_id": "2144343193",
        "repo_full_name": "denoland/deno",
        "pr_number": 29725,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "2144210296",
        "commented_code": "@@ -730,7 +731,7 @@ function removeImportedOps() {\n // FIXME(bartlomieju): temporarily add whole `Deno.core` to\n // `Deno[Deno.internal]` namespace. It should be removed and only necessary\n // methods should be left there.\n-ObjectAssign(internals, { core });\n+ObjectAssign(internals, { core, nodeGlobals: { ...nodeGlobals } });",
        "comment_created_at": "2025-06-13T07:03:31+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "No, I don't want to expose the underlying object, because I don't want people to be able to modify it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1699106991",
    "pr_number": 24810,
    "pr_file": "ext/fs/30_fs.js",
    "created_at": "2024-07-31T21:06:05+00:00",
    "commented_code": "if (options) checkOpenOptions(options);\n   const rid = op_fs_open_sync(\n     pathFromURL(path),\n-    options,\n+    options?.read ?? true,",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1699106991",
        "repo_full_name": "denoland/deno",
        "pr_number": 24810,
        "pr_file": "ext/fs/30_fs.js",
        "discussion_id": "1699106991",
        "commented_code": "@@ -619,7 +619,13 @@ function openSync(\n   if (options) checkOpenOptions(options);\n   const rid = op_fs_open_sync(\n     pathFromURL(path),\n-    options,\n+    options?.read ?? true,",
        "comment_created_at": "2024-07-31T21:06:05+00:00",
        "comment_author": "nathanwhit",
        "comment_body": "```suggestion\r\n    options?.read ?? false,\r\n```\r\nAnd likewise below",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047370446",
    "pr_number": 28868,
    "pr_file": "runtime/js/41_prompt.js",
    "created_at": "2025-04-16T17:05:48+00:00",
    "commented_code": "return null;\n   }\n \n-  return op_read_line_prompt(\n-    `${message} `,\n-    `${defaultValue}`,\n-  );\n+  const formattedMessage = message === \"\" ? \"\" : `${message} `;\n+\n+  return op_read_line_prompt(formattedMessage, `${defaultValue}`);",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2047370446",
        "repo_full_name": "denoland/deno",
        "pr_number": 28868,
        "pr_file": "runtime/js/41_prompt.js",
        "discussion_id": "2047370446",
        "commented_code": "@@ -41,10 +38,9 @@ function prompt(message = \"Prompt\", defaultValue) {\n     return null;\n   }\n \n-  return op_read_line_prompt(\n-    `${message} `,\n-    `${defaultValue}`,\n-  );\n+  const formattedMessage = message === \"\" ? \"\" : `${message} `;\n+\n+  return op_read_line_prompt(formattedMessage, `${defaultValue}`);",
        "comment_created_at": "2025-04-16T17:05:48+00:00",
        "comment_author": "dsherret",
        "comment_body": "```suggestion\r\n  const formattedMessage = message.length === 0 ? \"\" : `${message} `;\r\n  return op_read_line_prompt(formattedMessage, `${defaultValue}`);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1838358536",
    "pr_number": 26710,
    "pr_file": "runtime/js/telemetry.js",
    "created_at": "2024-11-12T15:58:52+00:00",
    "commented_code": "+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n+\n+import { core, primordials } from \"ext:core/mod.js\";\n+import {\n+  op_otel_log,\n+  op_otel_span_attribute,\n+  op_otel_span_attribute2,\n+  op_otel_span_attribute3,\n+  op_otel_span_continue,\n+  op_otel_span_flush,\n+  op_otel_span_start,\n+} from \"ext:core/ops\";\n+import { Console } from \"ext:deno_console/01_console.js\";\n+import { performance } from \"ext:deno_web/15_performance.js\";\n+\n+const {\n+  SymbolDispose,\n+  MathRandom,\n+  Array,\n+  ObjectEntries,\n+  SafeMap,\n+  ReflectApply,\n+  SymbolFor,\n+  Error,\n+} = primordials;\n+const { AsyncVariable, setAsyncContext } = core;\n+\n+const CURRENT = new AsyncVariable();\n+let TRACING_ENABLED = false;\n+\n+const SPAN_ID_BYTES = 8;\n+const TRACE_ID_BYTES = 16;\n+\n+const TRACE_FLAG_SAMPLED = 1 << 0;\n+\n+const hexSliceLookupTable = (function () {\n+  const alphabet = \"0123456789abcdef\";\n+  const table = new Array(256);\n+  for (let i = 0; i < 16; ++i) {\n+    const i16 = i * 16;\n+    for (let j = 0; j < 16; ++j) {\n+      table[i16 + j] = alphabet[i] + alphabet[j];\n+    }\n+  }\n+  return table;\n+})();\n+\n+function generateId(bytes) {\n+  let out = \"\";\n+  for (let i = 0; i < bytes / 4; i += 1) {\n+    const r32 = (MathRandom() * 2 ** 32) >>> 0;\n+    out += hexSliceLookupTable[(r32 >> 24) & 0xff];\n+    out += hexSliceLookupTable[(r32 >> 16) & 0xff];\n+    out += hexSliceLookupTable[(r32 >> 8) & 0xff];\n+    out += hexSliceLookupTable[r32 & 0xff];\n+  }\n+  return out;\n+}\n+\n+function submit(span) {\n+  if (!(span.traceFlags & TRACE_FLAG_SAMPLED)) return;\n+\n+  op_otel_span_start(\n+    span.traceId,\n+    span.spanId,\n+    span.parentSpanId ?? \"\",\n+    span.kind,\n+    span.name,\n+    span.startTime,\n+    span.endTime,\n+  );\n+\n+  if (span.status !== null && span.status.code !== 0) {\n+    op_otel_span_continue(span.code, span.message ?? \"\");\n+  }\n+\n+  const attributes = ObjectEntries(span.attributes);\n+  let i = 0;\n+  while (i < attributes.length) {\n+    if (i + 2 < attributes.length) {\n+      op_otel_span_attribute3(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+        attributes[i + 1][0],\n+        attributes[i + 1][1],\n+        attributes[i + 2][0],\n+        attributes[i + 2][1],\n+      );\n+      i += 3;\n+    } else if (i + 1 < attributes.length) {\n+      op_otel_span_attribute2(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+        attributes[i + 1][0],\n+        attributes[i + 1][1],\n+      );\n+      i += 2;\n+    } else {\n+      op_otel_span_attribute(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+      );\n+      i += 1;\n+    }\n+  }\n+\n+  op_otel_span_flush();\n+}\n+\n+const now = () => (performance.timeOrigin + performance.now()) / 1000;\n+\n+class Span {\n+  traceId;\n+  spanId;\n+  parentSpanId;\n+  kind;\n+  name;\n+  startTime;\n+  endTime;\n+  status = null;\n+  attributes = {};",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1838358536",
        "repo_full_name": "denoland/deno",
        "pr_number": 26710,
        "pr_file": "runtime/js/telemetry.js",
        "discussion_id": "1838358536",
        "commented_code": "@@ -0,0 +1,378 @@\n+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n+\n+import { core, primordials } from \"ext:core/mod.js\";\n+import {\n+  op_otel_log,\n+  op_otel_span_attribute,\n+  op_otel_span_attribute2,\n+  op_otel_span_attribute3,\n+  op_otel_span_continue,\n+  op_otel_span_flush,\n+  op_otel_span_start,\n+} from \"ext:core/ops\";\n+import { Console } from \"ext:deno_console/01_console.js\";\n+import { performance } from \"ext:deno_web/15_performance.js\";\n+\n+const {\n+  SymbolDispose,\n+  MathRandom,\n+  Array,\n+  ObjectEntries,\n+  SafeMap,\n+  ReflectApply,\n+  SymbolFor,\n+  Error,\n+} = primordials;\n+const { AsyncVariable, setAsyncContext } = core;\n+\n+const CURRENT = new AsyncVariable();\n+let TRACING_ENABLED = false;\n+\n+const SPAN_ID_BYTES = 8;\n+const TRACE_ID_BYTES = 16;\n+\n+const TRACE_FLAG_SAMPLED = 1 << 0;\n+\n+const hexSliceLookupTable = (function () {\n+  const alphabet = \"0123456789abcdef\";\n+  const table = new Array(256);\n+  for (let i = 0; i < 16; ++i) {\n+    const i16 = i * 16;\n+    for (let j = 0; j < 16; ++j) {\n+      table[i16 + j] = alphabet[i] + alphabet[j];\n+    }\n+  }\n+  return table;\n+})();\n+\n+function generateId(bytes) {\n+  let out = \"\";\n+  for (let i = 0; i < bytes / 4; i += 1) {\n+    const r32 = (MathRandom() * 2 ** 32) >>> 0;\n+    out += hexSliceLookupTable[(r32 >> 24) & 0xff];\n+    out += hexSliceLookupTable[(r32 >> 16) & 0xff];\n+    out += hexSliceLookupTable[(r32 >> 8) & 0xff];\n+    out += hexSliceLookupTable[r32 & 0xff];\n+  }\n+  return out;\n+}\n+\n+function submit(span) {\n+  if (!(span.traceFlags & TRACE_FLAG_SAMPLED)) return;\n+\n+  op_otel_span_start(\n+    span.traceId,\n+    span.spanId,\n+    span.parentSpanId ?? \"\",\n+    span.kind,\n+    span.name,\n+    span.startTime,\n+    span.endTime,\n+  );\n+\n+  if (span.status !== null && span.status.code !== 0) {\n+    op_otel_span_continue(span.code, span.message ?? \"\");\n+  }\n+\n+  const attributes = ObjectEntries(span.attributes);\n+  let i = 0;\n+  while (i < attributes.length) {\n+    if (i + 2 < attributes.length) {\n+      op_otel_span_attribute3(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+        attributes[i + 1][0],\n+        attributes[i + 1][1],\n+        attributes[i + 2][0],\n+        attributes[i + 2][1],\n+      );\n+      i += 3;\n+    } else if (i + 1 < attributes.length) {\n+      op_otel_span_attribute2(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+        attributes[i + 1][0],\n+        attributes[i + 1][1],\n+      );\n+      i += 2;\n+    } else {\n+      op_otel_span_attribute(\n+        attributes.length,\n+        attributes[i][0],\n+        attributes[i][1],\n+      );\n+      i += 1;\n+    }\n+  }\n+\n+  op_otel_span_flush();\n+}\n+\n+const now = () => (performance.timeOrigin + performance.now()) / 1000;\n+\n+class Span {\n+  traceId;\n+  spanId;\n+  parentSpanId;\n+  kind;\n+  name;\n+  startTime;\n+  endTime;\n+  status = null;\n+  attributes = {};",
        "comment_created_at": "2024-11-12T15:58:52+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "```suggestion\r\n  attributes = { __proto__: null };\r\n```",
        "pr_file_module": null
      }
    ]
  }
]