[
  {
    "discussion_id": "2048076006",
    "pr_number": 28937,
    "pr_file": "ext/node/polyfills/https.ts",
    "created_at": "2025-04-17T02:10:01+00:00",
    "commented_code": "}\n \n   options._defaultAgent = globalAgent;\n+  if (options.agent === undefined) {\n+    if (options.key !== undefined) {\n+      options._defaultAgent.options.key = options.key;\n+    }\n+    if (options.cert !== undefined) {\n+      options._defaultAgent.options.cert = options.cert;\n+    }\n+    if (options.ca !== undefined) {\n+      options._defaultAgent.options.ca = options.ca;\n+    }\n+  } else {\n+    if (options.key !== undefined) {\n+      options.agent.options.key = options.key;\n+    }\n+    if (options.cert !== undefined) {\n+      options.agent.options.cert = options.cert;\n+    }\n+    if (options.ca !== undefined) {\n+      options.agent.options.ca = options.ca;\n+    }\n+  }",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2048076006",
        "repo_full_name": "denoland/deno",
        "pr_number": 28937,
        "pr_file": "ext/node/polyfills/https.ts",
        "discussion_id": "2048076006",
        "commented_code": "@@ -170,6 +170,27 @@ export function request(...args: any[]) {\n   }\n \n   options._defaultAgent = globalAgent;\n+  if (options.agent === undefined) {\n+    if (options.key !== undefined) {\n+      options._defaultAgent.options.key = options.key;\n+    }\n+    if (options.cert !== undefined) {\n+      options._defaultAgent.options.cert = options.cert;\n+    }\n+    if (options.ca !== undefined) {\n+      options._defaultAgent.options.ca = options.ca;\n+    }\n+  } else {\n+    if (options.key !== undefined) {\n+      options.agent.options.key = options.key;\n+    }\n+    if (options.cert !== undefined) {\n+      options.agent.options.cert = options.cert;\n+    }\n+    if (options.ca !== undefined) {\n+      options.agent.options.ca = options.ca;\n+    }\n+  }",
        "comment_created_at": "2025-04-17T02:10:01+00:00",
        "comment_author": "nana4gonta",
        "comment_body": "The following code also works in Node.js, so the processing is as follows.\r\n```ts\r\n// client\r\nconst options: https.RequestOptions = {\r\n    method: \"GET\",\r\n    hostname: \"localhost\",\r\n    port: 8443,\r\n    agent: new https.Agent({\r\n        cert: fs.readFileSync(path.join(import.meta.dirname, \"../certs/mtls\", \"client.crt\")),\r\n        ca: fs.readFileSync(path.join(import.meta.dirname, \"../certs/mtls\", \"server_ca.crt\")),\r\n    }),\r\n    key: fs.readFileSync(path.join(import.meta.dirname, \"../certs/mtls\", \"client.key\")),\r\n};\r\nconst req = https.request(options, res => {\r\n    const chunk: string[] = [];\r\n    res.on(\"data\", (data: string) => chunk.push(data));\r\n    res.on(\"end\", () => {\r\n        console.log(buffer.Buffer.concat(chunk).toString());\r\n        console.log(\"end\");\r\n    });\r\n});\r\n\r\nreq.on(\"error\", error => {\r\n    console.log(error);\r\n});\r\n\r\nreq.end();\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039459428",
    "pr_number": 28725,
    "pr_file": "cli/tsc/dts/lib.deno_net.d.ts",
    "created_at": "2025-04-11T12:19:21+00:00",
    "commented_code": "options: UnixListenOptions & { transport: \"unix\" },\n   ): UnixListener;\n \n+  /** Options which can be set when opening a vsock listener via\n+   * {@linkcode Deno.listen}.\n+   *\n+   * @category Network\n+   */\n+  export interface VsockListenOptions {\n+    cid: number;\n+    port: number;\n+  }\n+\n+  /** Listen announces on the local transport address.\n+   *\n+   * ```ts\n+   * const listener = Deno.listen({ cid: -1, port: 80, transport: \"vsock\" })\n+   * ```\n+   *\n+   * Requires `allow-net` permission.\n+   *\n+   * @tags allow-net\n+   * @category Network\n+   */",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2039459428",
        "repo_full_name": "denoland/deno",
        "pr_number": 28725,
        "pr_file": "cli/tsc/dts/lib.deno_net.d.ts",
        "discussion_id": "2039459428",
        "commented_code": "@@ -223,6 +236,32 @@ declare namespace Deno {\n     options: UnixListenOptions & { transport: \"unix\" },\n   ): UnixListener;\n \n+  /** Options which can be set when opening a vsock listener via\n+   * {@linkcode Deno.listen}.\n+   *\n+   * @category Network\n+   */\n+  export interface VsockListenOptions {\n+    cid: number;\n+    port: number;\n+  }\n+\n+  /** Listen announces on the local transport address.\n+   *\n+   * ```ts\n+   * const listener = Deno.listen({ cid: -1, port: 80, transport: \"vsock\" })\n+   * ```\n+   *\n+   * Requires `allow-net` permission.\n+   *\n+   * @tags allow-net\n+   * @category Network\n+   */",
        "comment_created_at": "2025-04-11T12:19:21+00:00",
        "comment_author": "ry",
        "comment_body": "Ideally has a brief description of vsock. Add that this is an unstable interface. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941531423",
    "pr_number": 27957,
    "pr_file": "ext/websocket/lib.deno_websocket.d.ts",
    "created_at": "2025-02-04T16:41:54+00:00",
    "commented_code": "* Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n    *\n    * Can be set, to change how binary data is returned. The default is \"blob\".\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.binaryType = \"arraybuffer\";\n+   * ```\n    */\n   binaryType: BinaryType;\n   /**\n    * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n    *\n    * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.send(\"Hello, world!\");\n+   * console.log(ws.bufferedAmount); // 13\n+   * ```\n    */\n   readonly bufferedAmount: number;\n   /**\n    * Returns the extensions selected by the server, if any.\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * console.log(ws.extensions); // \"\"\n+   * ```",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1941531423",
        "repo_full_name": "denoland/deno",
        "pr_number": 27957,
        "pr_file": "ext/websocket/lib.deno_websocket.d.ts",
        "discussion_id": "1941531423",
        "commented_code": "@@ -57,16 +59,32 @@ interface WebSocket extends EventTarget {\n    * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n    *\n    * Can be set, to change how binary data is returned. The default is \"blob\".\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.binaryType = \"arraybuffer\";\n+   * ```\n    */\n   binaryType: BinaryType;\n   /**\n    * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n    *\n    * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.send(\"Hello, world!\");\n+   * console.log(ws.bufferedAmount); // 13\n+   * ```\n    */\n   readonly bufferedAmount: number;\n   /**\n    * Returns the extensions selected by the server, if any.\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * console.log(ws.extensions); // \"\"\n+   * ```",
        "comment_created_at": "2025-02-04T16:41:54+00:00",
        "comment_author": "ry",
        "comment_body": "this isn't very descriptive - you could give some examples of extensions that might be returned",
        "pr_file_module": null
      },
      {
        "comment_id": "1945101199",
        "repo_full_name": "denoland/deno",
        "pr_number": 27957,
        "pr_file": "ext/websocket/lib.deno_websocket.d.ts",
        "discussion_id": "1941531423",
        "commented_code": "@@ -57,16 +59,32 @@ interface WebSocket extends EventTarget {\n    * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n    *\n    * Can be set, to change how binary data is returned. The default is \"blob\".\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.binaryType = \"arraybuffer\";\n+   * ```\n    */\n   binaryType: BinaryType;\n   /**\n    * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n    *\n    * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.send(\"Hello, world!\");\n+   * console.log(ws.bufferedAmount); // 13\n+   * ```\n    */\n   readonly bufferedAmount: number;\n   /**\n    * Returns the extensions selected by the server, if any.\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * console.log(ws.extensions); // \"\"\n+   * ```",
        "comment_created_at": "2025-02-06T16:54:11+00:00",
        "comment_author": "thisisjofrank",
        "comment_body": "updated",
        "pr_file_module": null
      },
      {
        "comment_id": "1945169791",
        "repo_full_name": "denoland/deno",
        "pr_number": 27957,
        "pr_file": "ext/websocket/lib.deno_websocket.d.ts",
        "discussion_id": "1941531423",
        "commented_code": "@@ -57,16 +59,32 @@ interface WebSocket extends EventTarget {\n    * Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n    *\n    * Can be set, to change how binary data is returned. The default is \"blob\".\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.binaryType = \"arraybuffer\";\n+   * ```\n    */\n   binaryType: BinaryType;\n   /**\n    * Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n    *\n    * If the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * ws.send(\"Hello, world!\");\n+   * console.log(ws.bufferedAmount); // 13\n+   * ```\n    */\n   readonly bufferedAmount: number;\n   /**\n    * Returns the extensions selected by the server, if any.\n+   *\n+   * ```ts\n+   * const ws = new WebSocket(\"ws://localhost:8080\");\n+   * console.log(ws.extensions); // \"\"\n+   * ```",
        "comment_created_at": "2025-02-06T17:44:33+00:00",
        "comment_author": "ry",
        "comment_body": "There's no such thing as `WebSocketServer`. The example doesn't need to be runnable - just looking for a description of what this is... something like \r\n\r\n```ts\r\n/**\r\n * Returns the extensions selected by the server, if any.\r\n *\r\n * WebSocket extensions add optional features negotiated during the handshake via\r\n * the `Sec-WebSocket-Extensions` header.\r\n *\r\n * At the time of writing, there are two registered extensions:\r\n *\r\n * - [`permessage-deflate`](https://www.rfc-editor.org/rfc/rfc7692.html): Enables per-message compression using DEFLATE.\r\n * - [`bbf-usp-protocol`](https://usp.technology/): Used by the Broadband Forum's User Services Platform (USP).\r\n *\r\n * See the full list at [IANA WebSocket Extensions](https://www.iana.org/assignments/websocket/websocket.xml#extension-name).\r\n *\r\n * Example:\r\n *\r\n * ```ts\r\n * const ws = new WebSocket(\"ws://localhost:8080\");\r\n * console.log(ws.extensions); // e.g., \"permessage-deflate\"\r\n * ```\r\n */\r\nreadonly extensions: string;\r\n```",
        "pr_file_module": null
      }
    ]
  }
]