[
  {
    "discussion_id": "1324712925",
    "pr_number": 20472,
    "pr_file": "ext/http/00_serve.js",
    "created_at": "2023-09-13T15:36:50+00:00",
    "commented_code": "return;\n     }\n \n-    const status = inner.status;\n-    const headers = inner.headerList;\n+    let status;\n+    let headers;\n+    let body;\n+\n+    const inner = toInnerResponse(response);\n+    if (inner) {\n+      status = inner.status;\n+      headers = inner.headerList;\n+      body = inner.body;\n+    } else {\n+      // response is a ServeHandlerResponse\n+      status = response.status ?? 200;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1324712925",
        "repo_full_name": "denoland/deno",
        "pr_number": 20472,
        "pr_file": "ext/http/00_serve.js",
        "discussion_id": "1324712925",
        "commented_code": "@@ -477,8 +478,27 @@ function mapToCallback(context, callback, onError) {\n       return;\n     }\n \n-    const status = inner.status;\n-    const headers = inner.headerList;\n+    let status;\n+    let headers;\n+    let body;\n+\n+    const inner = toInnerResponse(response);\n+    if (inner) {\n+      status = inner.status;\n+      headers = inner.headerList;\n+      body = inner.body;\n+    } else {\n+      // response is a ServeHandlerResponse\n+      status = response.status ?? 200;",
        "comment_created_at": "2023-09-13T15:36:50+00:00",
        "comment_author": "marcosc90",
        "comment_body": "I'm not doing any input validation, `{ status: 'foo' }` will crash the server, similar to what happens now with `Deno.serve(() => null)`. Using `ServeHandlerResponse` is supposed to be a lower level/fast API so I think we shouldn't validate the input. LMK if input validation is preferred.",
        "pr_file_module": null
      },
      {
        "comment_id": "1326241408",
        "repo_full_name": "denoland/deno",
        "pr_number": 20472,
        "pr_file": "ext/http/00_serve.js",
        "discussion_id": "1324712925",
        "commented_code": "@@ -477,8 +478,27 @@ function mapToCallback(context, callback, onError) {\n       return;\n     }\n \n-    const status = inner.status;\n-    const headers = inner.headerList;\n+    let status;\n+    let headers;\n+    let body;\n+\n+    const inner = toInnerResponse(response);\n+    if (inner) {\n+      status = inner.status;\n+      headers = inner.headerList;\n+      body = inner.body;\n+    } else {\n+      // response is a ServeHandlerResponse\n+      status = response.status ?? 200;",
        "comment_created_at": "2023-09-14T16:38:14+00:00",
        "comment_author": "mmastrac",
        "comment_body": "I think we'll need to do some very basic validation in this codepath, but it should be pretty minimal. The challenge here is that there's no easy way for the developer to get feedback on failures.",
        "pr_file_module": null
      },
      {
        "comment_id": "1326445695",
        "repo_full_name": "denoland/deno",
        "pr_number": 20472,
        "pr_file": "ext/http/00_serve.js",
        "discussion_id": "1324712925",
        "commented_code": "@@ -477,8 +478,27 @@ function mapToCallback(context, callback, onError) {\n       return;\n     }\n \n-    const status = inner.status;\n-    const headers = inner.headerList;\n+    let status;\n+    let headers;\n+    let body;\n+\n+    const inner = toInnerResponse(response);\n+    if (inner) {\n+      status = inner.status;\n+      headers = inner.headerList;\n+      body = inner.body;\n+    } else {\n+      // response is a ServeHandlerResponse\n+      status = response.status ?? 200;",
        "comment_created_at": "2023-09-14T19:49:31+00:00",
        "comment_author": "marcosc90",
        "comment_body": "Added status validation and tests for it.\r\n\r\n```\r\nTerminating Deno.serve loop due to unexpected error RangeError: The status provided (50) is not equal to 101 and outside the range [200, 599].\r\n    at ext:deno_http/00_serve.js:502:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\nTerminating Deno.serve loop due to unexpected error TypeError: Invalid status (foo)\r\n    at ext:deno_http/00_serve.js:498:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\nTerminating Deno.serve loop due to unexpected error TypeError: Invalid status ([object Object])\r\n    at ext:deno_http/00_serve.js:498:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\nTerminating Deno.serve loop due to unexpected error RangeError: The status provided (600) is not equal to 101 and outside the range [200, 599].\r\n    at ext:deno_http/00_serve.js:502:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\nTerminating Deno.serve loop due to unexpected error RangeError: The status provided (100) is not equal to 101 and outside the range [200, 599].\r\n    at ext:deno_http/00_serve.js:502:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\nTerminating Deno.serve loop due to unexpected error TypeError: Invalid status (200)\r\n    at ext:deno_http/00_serve.js:498:17\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\n ```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1030690881",
    "pr_number": 16775,
    "pr_file": "runtime/js/99_main.js",
    "created_at": "2022-11-23T16:58:28+00:00",
    "commented_code": "setLanguage,\n   } = window.__bootstrap.globalScope;\n \n+  // Disables setting `__proto__` and emits a warning instead, for security reasons.\n+  // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n+  ObjectDefineProperty(ObjectPrototype, \"__proto__\", {\n+    configurable: true,\n+    enumerable: false,\n+    get() {\n+      return ObjectGetPrototypeOf(this);\n+    },\n+    set(_) {\n+      console.warn(\n+        \"Prototype access via __proto__ attempted; __proto__ is not implemented in Deno due to security reasons. Use Object.setPrototypeOf instead.\",",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1030690881",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "1030690881",
        "commented_code": "@@ -73,6 +71,21 @@ delete Intl.v8BreakIterator;\n     setLanguage,\n   } = window.__bootstrap.globalScope;\n \n+  // Disables setting `__proto__` and emits a warning instead, for security reasons.\n+  // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n+  ObjectDefineProperty(ObjectPrototype, \"__proto__\", {\n+    configurable: true,\n+    enumerable: false,\n+    get() {\n+      return ObjectGetPrototypeOf(this);\n+    },\n+    set(_) {\n+      console.warn(\n+        \"Prototype access via __proto__ attempted; __proto__ is not implemented in Deno due to security reasons. Use Object.setPrototypeOf instead.\",",
        "comment_created_at": "2022-11-23T16:58:28+00:00",
        "comment_author": "dsherret",
        "comment_body": "Maybe we should show which code did this by showing part of the stack?",
        "pr_file_module": null
      },
      {
        "comment_id": "1030702692",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "1030690881",
        "commented_code": "@@ -73,6 +71,21 @@ delete Intl.v8BreakIterator;\n     setLanguage,\n   } = window.__bootstrap.globalScope;\n \n+  // Disables setting `__proto__` and emits a warning instead, for security reasons.\n+  // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n+  ObjectDefineProperty(ObjectPrototype, \"__proto__\", {\n+    configurable: true,\n+    enumerable: false,\n+    get() {\n+      return ObjectGetPrototypeOf(this);\n+    },\n+    set(_) {\n+      console.warn(\n+        \"Prototype access via __proto__ attempted; __proto__ is not implemented in Deno due to security reasons. Use Object.setPrototypeOf instead.\",",
        "comment_created_at": "2022-11-23T17:10:52+00:00",
        "comment_author": "khrj",
        "comment_body": "Yeah that's a good idea. Does printing `new Error().stack` sound good?",
        "pr_file_module": null
      },
      {
        "comment_id": "1030738591",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "1030690881",
        "commented_code": "@@ -73,6 +71,21 @@ delete Intl.v8BreakIterator;\n     setLanguage,\n   } = window.__bootstrap.globalScope;\n \n+  // Disables setting `__proto__` and emits a warning instead, for security reasons.\n+  // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n+  ObjectDefineProperty(ObjectPrototype, \"__proto__\", {\n+    configurable: true,\n+    enumerable: false,\n+    get() {\n+      return ObjectGetPrototypeOf(this);\n+    },\n+    set(_) {\n+      console.warn(\n+        \"Prototype access via __proto__ attempted; __proto__ is not implemented in Deno due to security reasons. Use Object.setPrototypeOf instead.\",",
        "comment_created_at": "2022-11-23T17:52:18+00:00",
        "comment_author": "dsherret",
        "comment_body": "Yup!",
        "pr_file_module": null
      }
    ]
  }
]