[
  {
    "discussion_id": "2229477324",
    "pr_number": 30197,
    "pr_file": "cli/tools/run/mod.rs",
    "created_at": "2025-07-24T20:09:52+00:00",
    "commented_code": "watcher_communicator.clone(),\n         );\n         let cli_options = factory.cli_options()?;\n+\n+        load_env_variables_from_env_file(\n+          cli_options.env_file_name(),\n+          log_level,\n+        );",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2229477324",
        "repo_full_name": "denoland/deno",
        "pr_number": 30197,
        "pr_file": "cli/tools/run/mod.rs",
        "discussion_id": "2229477324",
        "commented_code": "@@ -178,6 +181,12 @@ async fn run_with_watch(\n           watcher_communicator.clone(),\n         );\n         let cli_options = factory.cli_options()?;\n+\n+        load_env_variables_from_env_file(\n+          cli_options.env_file_name(),\n+          log_level,\n+        );",
        "comment_created_at": "2025-07-24T20:09:52+00:00",
        "comment_author": "dsherret",
        "comment_body": "I think you want to move this above creating the factory and use `flags.env_file` instead. That way the changed environment variables propagate into everything created by the factory.",
        "pr_file_module": null
      },
      {
        "comment_id": "2229484832",
        "repo_full_name": "denoland/deno",
        "pr_number": 30197,
        "pr_file": "cli/tools/run/mod.rs",
        "discussion_id": "2229477324",
        "commented_code": "@@ -178,6 +181,12 @@ async fn run_with_watch(\n           watcher_communicator.clone(),\n         );\n         let cli_options = factory.cli_options()?;\n+\n+        load_env_variables_from_env_file(\n+          cli_options.env_file_name(),\n+          log_level,\n+        );",
        "comment_created_at": "2025-07-24T20:14:17+00:00",
        "comment_author": "meetdhanani17",
        "comment_body": "Thank you for the suggestions, I'll make changes!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190936284",
    "pr_number": 30022,
    "pr_file": "cli/args/flags.rs",
    "created_at": "2025-07-07T20:12:26+00:00",
    "commented_code": ".help_heading(TYPE_CHECKING_HEADING)\n }\n \n+fn connected_arg() -> Arg {\n+  Arg::new(\"connected\")\n+    .long(\"connected\")\n+    .env(\"DENO_CONNECTED\")",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2190936284",
        "repo_full_name": "denoland/deno",
        "pr_number": 30022,
        "pr_file": "cli/args/flags.rs",
        "discussion_id": "2190936284",
        "commented_code": "@@ -4635,6 +4638,15 @@ fn no_check_arg() -> Arg {\n     .help_heading(TYPE_CHECKING_HEADING)\n }\n \n+fn connected_arg() -> Arg {\n+  Arg::new(\"connected\")\n+    .long(\"connected\")\n+    .env(\"DENO_CONNECTED\")",
        "comment_created_at": "2025-07-07T20:12:26+00:00",
        "comment_author": "dsherret",
        "comment_body": "We'll need to remove the usage of `.env` because the env file hasn't been loaded at this point. Do a search through the other code to see how it's done, but basically we need to load the env variables after loading the env file.",
        "pr_file_module": null
      },
      {
        "comment_id": "2190936789",
        "repo_full_name": "denoland/deno",
        "pr_number": 30022,
        "pr_file": "cli/args/flags.rs",
        "discussion_id": "2190936284",
        "commented_code": "@@ -4635,6 +4638,15 @@ fn no_check_arg() -> Arg {\n     .help_heading(TYPE_CHECKING_HEADING)\n }\n \n+fn connected_arg() -> Arg {\n+  Arg::new(\"connected\")\n+    .long(\"connected\")\n+    .env(\"DENO_CONNECTED\")",
        "comment_created_at": "2025-07-07T20:12:50+00:00",
        "comment_author": "dsherret",
        "comment_body": "I have a pending custom lint rule I need to implement for this: https://github.com/denoland/deno/issues/29886",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058042800",
    "pr_number": 28929,
    "pr_file": "cli/main.rs",
    "created_at": "2025-04-24T10:15:49+00:00",
    "commented_code": "on_log_end: DrawThread::show,\n   })\n }\n+\n+async fn wait_for_start() -> Result<\n+  Option<(deno_runtime::Unconfigured, Vec<std::ffi::OsString>)>,\n+  AnyError,\n+> {\n+  use tokio::io::AsyncReadExt;\n+\n+  let Some(startup_snapshot) = deno_snapshots::CLI_SNAPSHOT else {\n+    return Ok(None);\n+  };\n+\n+  let Ok(path) = std::env::var(\"DENO_CONTROL_SOCK\") else {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2058042800",
        "repo_full_name": "denoland/deno",
        "pr_number": 28929,
        "pr_file": "cli/main.rs",
        "discussion_id": "2058042800",
        "commented_code": "@@ -545,3 +556,56 @@ fn init_logging(\n     on_log_end: DrawThread::show,\n   })\n }\n+\n+async fn wait_for_start() -> Result<\n+  Option<(deno_runtime::Unconfigured, Vec<std::ffi::OsString>)>,\n+  AnyError,\n+> {\n+  use tokio::io::AsyncReadExt;\n+\n+  let Some(startup_snapshot) = deno_snapshots::CLI_SNAPSHOT else {\n+    return Ok(None);\n+  };\n+\n+  let Ok(path) = std::env::var(\"DENO_CONTROL_SOCK\") else {",
        "comment_created_at": "2025-04-24T10:15:49+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "Unset this after reading so it doesn't propagate into subprocesses ",
        "pr_file_module": null
      }
    ]
  }
]