[
  {
    "discussion_id": "1655590841",
    "pr_number": 24250,
    "pr_file": "cli/js/40_jupyter.js",
    "created_at": "2024-06-26T22:30:11+00:00",
    "commented_code": "internals.jupyter = { formatInner };\n \n+/**\n+class CommMessage(TypedDict):\n+    header: dict\n+    # typically UUID, must be unique per message\n+    msg_id: str\n+    msg_type: str\n+    parent_header: dict\n+    metadata: dict\n+    content: <custom payload>\n+    buffers: list[memoryview]\n+\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+\n+const comm = await Deno.jupyter.comms.open(\"1234-5678\");\n+const data = await comm.recv();\n+\n+const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+\n+c = Comm(\"1234-5678\")\n+\n+c.on(\"update\", data => {\n+    console.log(data);\n+    Deno.jupyter.broadcast(...);\n+});\n+\n+\n+{\n+    msg_type: \"comm_msg\",\n+    content: {\n+        comm_id: \"1234-5678\",\n+        data: {\n+\n+        }\n+    }\n+}\n+*/\n+\n function enableJupyter() {\n-  const { op_jupyter_broadcast } = core.ops;\n+  const { op_jupyter_broadcast, op_jupyter_comm_recv, op_jupyter_comm_open } =\n+    core.ops;\n+\n+  function comm(commId, targetName, msgCallback) {\n+    op_jupyter_comm_open(commId, targetName);\n+\n+    let closed = false;\n+\n+    // TODO(bartlomieju): return something, so we can close this comm.\n+    (async () => {\n+      while (true) {\n+        const [data, buffers] = await op_jupyter_comm_recv(commId);\n+\n+        if (!data) {\n+          closed = true;\n+          break;\n+        }\n+\n+        msgCallback?.({\n+          ...data,\n+          buffers,\n+        });\n+      }\n+    })();\n+\n+    return {\n+      close() {\n+        if (closed) {\n+          return;\n+        }\n+\n+        closed = true;\n+      },\n+      send(data) {\n+        return broadcast(\"comm_msg\", {\n+          comm_id: commId,\n+          data: data,\n+        });\n+      },",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1655590841",
        "repo_full_name": "denoland/deno",
        "pr_number": 24250,
        "pr_file": "cli/js/40_jupyter.js",
        "discussion_id": "1655590841",
        "commented_code": "@@ -336,8 +356,90 @@ async function formatInner(obj, raw) {\n \n internals.jupyter = { formatInner };\n \n+/**\n+class CommMessage(TypedDict):\n+    header: dict\n+    # typically UUID, must be unique per message\n+    msg_id: str\n+    msg_type: str\n+    parent_header: dict\n+    metadata: dict\n+    content: <custom payload>\n+    buffers: list[memoryview]\n+\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+\n+const comm = await Deno.jupyter.comms.open(\"1234-5678\");\n+const data = await comm.recv();\n+\n+const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+\n+c = Comm(\"1234-5678\")\n+\n+c.on(\"update\", data => {\n+    console.log(data);\n+    Deno.jupyter.broadcast(...);\n+});\n+\n+\n+{\n+    msg_type: \"comm_msg\",\n+    content: {\n+        comm_id: \"1234-5678\",\n+        data: {\n+\n+        }\n+    }\n+}\n+*/\n+\n function enableJupyter() {\n-  const { op_jupyter_broadcast } = core.ops;\n+  const { op_jupyter_broadcast, op_jupyter_comm_recv, op_jupyter_comm_open } =\n+    core.ops;\n+\n+  function comm(commId, targetName, msgCallback) {\n+    op_jupyter_comm_open(commId, targetName);\n+\n+    let closed = false;\n+\n+    // TODO(bartlomieju): return something, so we can close this comm.\n+    (async () => {\n+      while (true) {\n+        const [data, buffers] = await op_jupyter_comm_recv(commId);\n+\n+        if (!data) {\n+          closed = true;\n+          break;\n+        }\n+\n+        msgCallback?.({\n+          ...data,\n+          buffers,\n+        });\n+      }\n+    })();\n+\n+    return {\n+      close() {\n+        if (closed) {\n+          return;\n+        }\n+\n+        closed = true;\n+      },\n+      send(data) {\n+        return broadcast(\"comm_msg\", {\n+          comm_id: commId,\n+          data: data,\n+        });\n+      },",
        "comment_created_at": "2024-06-26T22:30:11+00:00",
        "comment_author": "manzt",
        "comment_body": "In order to send binary data to widgets, we'll also want to allow for buffers here:\r\n\r\n```suggestion\r\n      send(data, buffers = []) {\r\n        return broadcast(\"comm_msg\", {\r\n          comm_id: commId,\r\n          data: data,\r\n        }, { buffers });\r\n      },\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1655593854",
        "repo_full_name": "denoland/deno",
        "pr_number": 24250,
        "pr_file": "cli/js/40_jupyter.js",
        "discussion_id": "1655590841",
        "commented_code": "@@ -336,8 +356,90 @@ async function formatInner(obj, raw) {\n \n internals.jupyter = { formatInner };\n \n+/**\n+class CommMessage(TypedDict):\n+    header: dict\n+    # typically UUID, must be unique per message\n+    msg_id: str\n+    msg_type: str\n+    parent_header: dict\n+    metadata: dict\n+    content: <custom payload>\n+    buffers: list[memoryview]\n+\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+\n+const comm = await Deno.jupyter.comms.open(\"1234-5678\");\n+const data = await comm.recv();\n+\n+const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+\n+c = Comm(\"1234-5678\")\n+\n+c.on(\"update\", data => {\n+    console.log(data);\n+    Deno.jupyter.broadcast(...);\n+});\n+\n+\n+{\n+    msg_type: \"comm_msg\",\n+    content: {\n+        comm_id: \"1234-5678\",\n+        data: {\n+\n+        }\n+    }\n+}\n+*/\n+\n function enableJupyter() {\n-  const { op_jupyter_broadcast } = core.ops;\n+  const { op_jupyter_broadcast, op_jupyter_comm_recv, op_jupyter_comm_open } =\n+    core.ops;\n+\n+  function comm(commId, targetName, msgCallback) {\n+    op_jupyter_comm_open(commId, targetName);\n+\n+    let closed = false;\n+\n+    // TODO(bartlomieju): return something, so we can close this comm.\n+    (async () => {\n+      while (true) {\n+        const [data, buffers] = await op_jupyter_comm_recv(commId);\n+\n+        if (!data) {\n+          closed = true;\n+          break;\n+        }\n+\n+        msgCallback?.({\n+          ...data,\n+          buffers,\n+        });\n+      }\n+    })();\n+\n+    return {\n+      close() {\n+        if (closed) {\n+          return;\n+        }\n+\n+        closed = true;\n+      },\n+      send(data) {\n+        return broadcast(\"comm_msg\", {\n+          comm_id: commId,\n+          data: data,\n+        });\n+      },",
        "comment_created_at": "2024-06-26T22:35:25+00:00",
        "comment_author": "manzt",
        "comment_body": "Also, I think the recv callback should mirror whatever we have here for sending. So maybe rather than `{ ...data, buffers }` we can just have a function with two args:\r\n\r\n```js\r\nlet comm = Deno.jupyter.comm(commId, (data, buffers) => {\r\n\r\n})\r\n\r\ncomm.send(data, buffers);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1655595146",
    "pr_number": 24250,
    "pr_file": "cli/js/40_jupyter.js",
    "created_at": "2024-06-26T22:37:48+00:00",
    "commented_code": "internals.jupyter = { formatInner };\n \n+/**\n+class CommMessage(TypedDict):\n+    header: dict\n+    # typically UUID, must be unique per message\n+    msg_id: str\n+    msg_type: str\n+    parent_header: dict\n+    metadata: dict\n+    content: <custom payload>\n+    buffers: list[memoryview]\n+\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+\n+const comm = await Deno.jupyter.comms.open(\"1234-5678\");\n+const data = await comm.recv();\n+\n+const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+\n+c = Comm(\"1234-5678\")\n+\n+c.on(\"update\", data => {\n+    console.log(data);\n+    Deno.jupyter.broadcast(...);\n+});\n+\n+\n+{\n+    msg_type: \"comm_msg\",\n+    content: {\n+        comm_id: \"1234-5678\",\n+        data: {\n+\n+        }\n+    }\n+}\n+*/\n+\n function enableJupyter() {\n-  const { op_jupyter_broadcast } = core.ops;\n+  const { op_jupyter_broadcast, op_jupyter_comm_recv, op_jupyter_comm_open } =\n+    core.ops;\n+\n+  function comm(commId, targetName, msgCallback) {\n+    op_jupyter_comm_open(commId, targetName);\n+\n+    let closed = false;\n+\n+    // TODO(bartlomieju): return something, so we can close this comm.\n+    (async () => {\n+      while (true) {\n+        const [data, buffers] = await op_jupyter_comm_recv(commId);\n+\n+        if (!data) {\n+          closed = true;\n+          break;\n+        }\n+\n+        msgCallback?.({\n+          ...data,\n+          buffers,\n+        });",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1655595146",
        "repo_full_name": "denoland/deno",
        "pr_number": 24250,
        "pr_file": "cli/js/40_jupyter.js",
        "discussion_id": "1655595146",
        "commented_code": "@@ -336,8 +356,90 @@ async function formatInner(obj, raw) {\n \n internals.jupyter = { formatInner };\n \n+/**\n+class CommMessage(TypedDict):\n+    header: dict\n+    # typically UUID, must be unique per message\n+    msg_id: str\n+    msg_type: str\n+    parent_header: dict\n+    metadata: dict\n+    content: <custom payload>\n+    buffers: list[memoryview]\n+\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+((async) => {\n+  const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+})();\n+\n+const comm = await Deno.jupyter.comms.open(\"1234-5678\");\n+const data = await comm.recv();\n+\n+const data = await Deno.jupyter.comms.recv(\"1234-5678\");\n+\n+c = Comm(\"1234-5678\")\n+\n+c.on(\"update\", data => {\n+    console.log(data);\n+    Deno.jupyter.broadcast(...);\n+});\n+\n+\n+{\n+    msg_type: \"comm_msg\",\n+    content: {\n+        comm_id: \"1234-5678\",\n+        data: {\n+\n+        }\n+    }\n+}\n+*/\n+\n function enableJupyter() {\n-  const { op_jupyter_broadcast } = core.ops;\n+  const { op_jupyter_broadcast, op_jupyter_comm_recv, op_jupyter_comm_open } =\n+    core.ops;\n+\n+  function comm(commId, targetName, msgCallback) {\n+    op_jupyter_comm_open(commId, targetName);\n+\n+    let closed = false;\n+\n+    // TODO(bartlomieju): return something, so we can close this comm.\n+    (async () => {\n+      while (true) {\n+        const [data, buffers] = await op_jupyter_comm_recv(commId);\n+\n+        if (!data) {\n+          closed = true;\n+          break;\n+        }\n+\n+        msgCallback?.({\n+          ...data,\n+          buffers,\n+        });",
        "comment_created_at": "2024-06-26T22:37:48+00:00",
        "comment_author": "manzt",
        "comment_body": "Follow up on comment below, to mirror the send API \r\n\r\n```suggestion\r\n        msgCallback?.(data, buffers);\r\n```",
        "pr_file_module": null
      }
    ]
  }
]