[
  {
    "discussion_id": "2201927546",
    "pr_number": 30085,
    "pr_file": "runtime/permissions/lib.rs",
    "created_at": "2025-07-11T21:40:07+00:00",
    "commented_code": "Ok(())\n   }\n \n+  pub fn check_net_resolved_addr_is_not_denied(",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2201927546",
        "repo_full_name": "denoland/deno",
        "pr_number": 30085,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "2201927546",
        "commented_code": "@@ -3345,6 +3401,20 @@ impl PermissionsContainer {\n     Ok(())\n   }\n \n+  pub fn check_net_resolved_addr_is_not_denied(",
        "comment_created_at": "2025-07-11T21:40:07+00:00",
        "comment_author": "nathanwhit",
        "comment_body": "workaround the fact that if you do `--allow-net=localhost`, after dns resolution we'd try to look for `127.0.0.1` and deny.\r\n\r\nmaybe a better fix would be to expand `--allow-net=localhost` to `localhost` and `127.0.0.1` on startup. we'd have to think about how to avoid hurting startup perf too badly",
        "pr_file_module": null
      },
      {
        "comment_id": "2223628297",
        "repo_full_name": "denoland/deno",
        "pr_number": 30085,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "2201927546",
        "commented_code": "@@ -3345,6 +3401,20 @@ impl PermissionsContainer {\n     Ok(())\n   }\n \n+  pub fn check_net_resolved_addr_is_not_denied(",
        "comment_created_at": "2025-07-22T19:21:19+00:00",
        "comment_author": "nathanwhit",
        "comment_body": "Thinking about it more, I don't think expanding it on startup is safe, because for instance what if `example.com` resolves to `123.123.0.1`, and then that IP gets reallocated to some other (malicious) service. Then, a fetch request of that IP would still be allowed through even though it doesn't belong to `example.com` anymore",
        "pr_file_module": null
      },
      {
        "comment_id": "2227701353",
        "repo_full_name": "denoland/deno",
        "pr_number": 30085,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "2201927546",
        "commented_code": "@@ -3345,6 +3401,20 @@ impl PermissionsContainer {\n     Ok(())\n   }\n \n+  pub fn check_net_resolved_addr_is_not_denied(",
        "comment_created_at": "2025-07-24T07:43:20+00:00",
        "comment_author": "wuurrd",
        "comment_body": "I think it makes a lot of sense that if an address is in allow, only a matching --deny-net=... should take precedence, and another --allow-net shouldn't be necessary:\r\n\r\n```\r\n--deny-net=127.0.0.1 --allow-net=example.com\r\nWould imply:\r\nexample.com -> 1.1.1.1 (pass)\r\nexample.com -> 127.0.0.1 (fail)\r\n```\r\n\r\n```\r\n# This rbndr.us randomly swaps between 127.0.0.1 and 192.168.0.1\r\n--deny-net=192.168.0.1/24 --allow-net=7f000001.c0a80001.rbndr.us\r\nWould imply:\r\n7f000001.c0a80001.rbndr.us -> 127.0.0.1 (pass)\r\n7f000001.c0a80001.rbndr.us -> 192.168.0.1 (fail)\r\n```\r\n\r\n```\r\n--allow-net=example.com\r\nWould imply:\r\nexample.com -> [any IP] (pass)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2131890283",
    "pr_number": 29207,
    "pr_file": "ext/net/ops.rs",
    "created_at": "2025-06-06T09:48:09+00:00",
    "commented_code": "Ok(nwritten)\n }\n \n+#[op2(fast)]\n+pub fn op_net_validate_multicast(\n+  #[string] address: String,\n+  #[string] multi_interface: String,\n+) -> Result<(), NetError> {\n+  let addr = Ipv4Addr::from_str(address.as_str())?;\n+  let interface_addr = Ipv4Addr::from_str(multi_interface.as_str())?;\n+\n+  if !addr.is_multicast() {\n+    return Err(NetError::InvalidHostname(address));\n+  }\n+\n+  if !interface_addr.is_multicast() {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2131890283",
        "repo_full_name": "denoland/deno",
        "pr_number": 29207,
        "pr_file": "ext/net/ops.rs",
        "discussion_id": "2131890283",
        "commented_code": "@@ -263,6 +263,25 @@ where\n   Ok(nwritten)\n }\n \n+#[op2(fast)]\n+pub fn op_net_validate_multicast(\n+  #[string] address: String,\n+  #[string] multi_interface: String,\n+) -> Result<(), NetError> {\n+  let addr = Ipv4Addr::from_str(address.as_str())?;\n+  let interface_addr = Ipv4Addr::from_str(multi_interface.as_str())?;\n+\n+  if !addr.is_multicast() {\n+    return Err(NetError::InvalidHostname(address));\n+  }\n+\n+  if !interface_addr.is_multicast() {",
        "comment_created_at": "2025-06-06T09:48:09+00:00",
        "comment_author": "2color",
        "comment_body": "I think this might be a bug.\r\n\r\n`multi_interface` is optional, and when omitted will typically default to letting the OS choose one interface. I believe this is the same as passing `0.0.0.0` (`INADDR_ANY`).\r\n\r\n> https://nodejs.org/api/dgram.html#socketaddmembershipmulticastaddress-multicastinterface\r\n>  If the multicastInterface argument is not specified, the operating system will choose one interface and will add membership to it. \r\n\r\n> According to the [linux ipv4 man page](https://man7.org/linux/man-pages/man7/ip.7.html):\r\n> imr_address is the address of the local interface\r\n> with which the system should join the multicast group; if\r\n> it is equal to INADDR_ANY, an appropriate interface is\r\n> chosen by the system.\r\n\r\n\r\nHere's a reproduction: https://github.com/ipshipyard/deno_helia/blob/main/ssdp.ts",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048574521",
    "pr_number": 28877,
    "pr_file": "ext/http/lib.rs",
    "created_at": "2025-04-17T09:20:35+00:00",
    "commented_code": "drop(upgraded);\n   unreachable!(\"unexpected stream type\");\n }\n+\n+#[op2]\n+#[serde]\n+pub fn op_http_serve_address_override(\n+) -> (Option<String>, Option<String>, Option<u16>) {\n+  match std::env::var(\"DENO_SERVE_ADDRESS\") {\n+    Ok(val) => parse_serve_address(&val),\n+    Err(_) => (None, None, None),\n+  }\n+}\n+\n+fn parse_serve_address(",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2048574521",
        "repo_full_name": "denoland/deno",
        "pr_number": 28877,
        "pr_file": "ext/http/lib.rs",
        "discussion_id": "2048574521",
        "commented_code": "@@ -1687,3 +1689,63 @@ fn extract_network_stream<U: CanDowncastUpgrade>(\n   drop(upgraded);\n   unreachable!(\"unexpected stream type\");\n }\n+\n+#[op2]\n+#[serde]\n+pub fn op_http_serve_address_override(\n+) -> (Option<String>, Option<String>, Option<u16>) {\n+  match std::env::var(\"DENO_SERVE_ADDRESS\") {\n+    Ok(val) => parse_serve_address(&val),\n+    Err(_) => (None, None, None),\n+  }\n+}\n+\n+fn parse_serve_address(",
        "comment_created_at": "2025-04-17T09:20:35+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "This magic parsing doesn't work because it can't handle `vsock`. We should require that these are prefixed:\r\n\r\n- `tcp:<addr>:<port>`\r\n- `unix:<path>`\r\n- `vsock:<cid>:<port>`",
        "pr_file_module": null
      },
      {
        "comment_id": "2048639478",
        "repo_full_name": "denoland/deno",
        "pr_number": 28877,
        "pr_file": "ext/http/lib.rs",
        "discussion_id": "2048574521",
        "commented_code": "@@ -1687,3 +1689,63 @@ fn extract_network_stream<U: CanDowncastUpgrade>(\n   drop(upgraded);\n   unreachable!(\"unexpected stream type\");\n }\n+\n+#[op2]\n+#[serde]\n+pub fn op_http_serve_address_override(\n+) -> (Option<String>, Option<String>, Option<u16>) {\n+  match std::env::var(\"DENO_SERVE_ADDRESS\") {\n+    Ok(val) => parse_serve_address(&val),\n+    Err(_) => (None, None, None),\n+  }\n+}\n+\n+fn parse_serve_address(",
        "comment_created_at": "2025-04-17T10:01:32+00:00",
        "comment_author": "lucacasonato",
        "comment_body": "https://github.com/denoland/deno/pull/28941",
        "pr_file_module": null
      }
    ]
  }
]