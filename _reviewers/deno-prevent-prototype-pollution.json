[
  {
    "discussion_id": "1030337950",
    "pr_number": 16775,
    "pr_file": "cli/tsc/99_main_compiler.js",
    "created_at": "2022-11-23T11:40:00+00:00",
    "commented_code": "// that is created when Deno needs to type check TypeScript, and in some\n // instances convert TypeScript to JavaScript.\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1030337950",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "cli/tsc/99_main_compiler.js",
        "discussion_id": "1030337950",
        "commented_code": "@@ -8,11 +8,22 @@\n // that is created when Deno needs to type check TypeScript, and in some\n // instances convert TypeScript to JavaScript.\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.",
        "comment_created_at": "2022-11-23T11:40:00+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "I believe it should stay disabled in the TSC implementation. There won't be any user code executed here that might require it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1030340565",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "cli/tsc/99_main_compiler.js",
        "discussion_id": "1030337950",
        "commented_code": "@@ -8,11 +8,22 @@\n // that is created when Deno needs to type check TypeScript, and in some\n // instances convert TypeScript to JavaScript.\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.",
        "comment_created_at": "2022-11-23T11:42:24+00:00",
        "comment_author": "khrj",
        "comment_body": "`chalk@3` won't work with this change (chalk uses the setter) -- but it _should_ emit a warning which will help anyone using a package dependent on chalk know why there's an error similar to the one shown in `pm2`",
        "pr_file_module": null
      },
      {
        "comment_id": "1030342993",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "cli/tsc/99_main_compiler.js",
        "discussion_id": "1030337950",
        "commented_code": "@@ -8,11 +8,22 @@\n // that is created when Deno needs to type check TypeScript, and in some\n // instances convert TypeScript to JavaScript.\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.",
        "comment_created_at": "2022-11-23T11:44:21+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Do you know of any package that only uses getter?",
        "pr_file_module": null
      },
      {
        "comment_id": "1030496339",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "cli/tsc/99_main_compiler.js",
        "discussion_id": "1030337950",
        "commented_code": "@@ -8,11 +8,22 @@\n // that is created when Deno needs to type check TypeScript, and in some\n // instances convert TypeScript to JavaScript.\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.",
        "comment_created_at": "2022-11-23T14:15:49+00:00",
        "comment_author": "khrj",
        "comment_body": "I don't happen to know any -- and I'm not sure why any package would want to access a prototype when it cannot be modified --  but I don't see any harm in leaving it in. I could make a test npm package that accesses `__proto__` if needed (although I don't see how this is npm specific)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1030339361",
    "pr_number": 16775,
    "pr_file": "runtime/js/99_main.js",
    "created_at": "2022-11-23T11:41:23+00:00",
    "commented_code": "// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n \"use strict\";\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.\n // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n-delete Object.prototype.__proto__;\n+// deno-lint-ignore prefer-primordials\n+Object.defineProperty(Object.prototype, \"__proto__\", {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1030339361",
        "repo_full_name": "denoland/deno",
        "pr_number": 16775,
        "pr_file": "runtime/js/99_main.js",
        "discussion_id": "1030339361",
        "commented_code": "@@ -1,9 +1,22 @@\n // Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n \"use strict\";\n \n-// Removes the `__proto__` for security reasons.\n+// Disables setting `__proto__` and emits a warning instead, for security reasons.\n // https://tc39.es/ecma262/#sec-get-object.prototype.__proto__\n-delete Object.prototype.__proto__;\n+// deno-lint-ignore prefer-primordials\n+Object.defineProperty(Object.prototype, \"__proto__\", {",
        "comment_created_at": "2022-11-23T11:41:23+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "These should use primordials like `ObjectDefineProperty`, `ObjectPrototype` and `ObjectGetPrototypeOf`. You will need to move this after line 53",
        "pr_file_module": null
      }
    ]
  }
]