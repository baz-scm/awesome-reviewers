[
  {
    "discussion_id": "2076773338",
    "pr_number": 26452,
    "pr_file": "ext/node/polyfills/internal_binding/udp_wrap.ts",
    "created_at": "2025-05-07T04:40:16+00:00",
    "commented_code": "}\n \n   setBroadcast(_bool: 0 | 1): number {\n-    notImplemented(\"udp.UDP.prototype.setBroadcast\");\n+    this.#listener?.setBroadcast(_bool === 1);\n+    return 0;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2076773338",
        "repo_full_name": "denoland/deno",
        "pr_number": 26452,
        "pr_file": "ext/node/polyfills/internal_binding/udp_wrap.ts",
        "discussion_id": "2076773338",
        "commented_code": "@@ -300,7 +316,8 @@ export class UDP extends HandleWrap {\n   }\n \n   setBroadcast(_bool: 0 | 1): number {\n-    notImplemented(\"udp.UDP.prototype.setBroadcast\");\n+    this.#listener?.setBroadcast(_bool === 1);\n+    return 0;",
        "comment_created_at": "2025-05-07T04:40:16+00:00",
        "comment_author": "littledivy",
        "comment_body": "This should return an error code when `setBroadcast` fails",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112268516",
    "pr_number": 29485,
    "pr_file": "ext/node/polyfills/internal_binding/crypto.ts",
    "created_at": "2025-05-28T16:06:48+00:00",
    "commented_code": "export { timingSafeEqual } from \"ext:deno_node/internal_binding/_timingSafeEqual.ts\";\n \n export function getFipsCrypto(): boolean {\n-  notImplemented(\"crypto.getFipsCrypto\");\n+  return false;\n }\n \n export function setFipsCrypto(_fips: boolean) {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2112268516",
        "repo_full_name": "denoland/deno",
        "pr_number": 29485,
        "pr_file": "ext/node/polyfills/internal_binding/crypto.ts",
        "discussion_id": "2112268516",
        "commented_code": "@@ -6,7 +6,7 @@ import { notImplemented } from \"ext:deno_node/_utils.ts\";\n export { timingSafeEqual } from \"ext:deno_node/internal_binding/_timingSafeEqual.ts\";\n \n export function getFipsCrypto(): boolean {\n-  notImplemented(\"crypto.getFipsCrypto\");\n+  return false;\n }\n \n export function setFipsCrypto(_fips: boolean) {",
        "comment_created_at": "2025-05-28T16:06:48+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Should this one be covered too? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2112272682",
        "repo_full_name": "denoland/deno",
        "pr_number": 29485,
        "pr_file": "ext/node/polyfills/internal_binding/crypto.ts",
        "discussion_id": "2112268516",
        "commented_code": "@@ -6,7 +6,7 @@ import { notImplemented } from \"ext:deno_node/_utils.ts\";\n export { timingSafeEqual } from \"ext:deno_node/internal_binding/_timingSafeEqual.ts\";\n \n export function getFipsCrypto(): boolean {\n-  notImplemented(\"crypto.getFipsCrypto\");\n+  return false;\n }\n \n export function setFipsCrypto(_fips: boolean) {",
        "comment_created_at": "2025-05-28T16:08:58+00:00",
        "comment_author": "littledivy",
        "comment_body": "It should throw an error if FIPS is not available.\r\n\r\n> Throws an error if FIPS mode is not available.\r\n\r\nhttps://nodejs.org/api/crypto.html#cryptosetfipsbool",
        "pr_file_module": null
      },
      {
        "comment_id": "2113767015",
        "repo_full_name": "denoland/deno",
        "pr_number": 29485,
        "pr_file": "ext/node/polyfills/internal_binding/crypto.ts",
        "discussion_id": "2112268516",
        "commented_code": "@@ -6,7 +6,7 @@ import { notImplemented } from \"ext:deno_node/_utils.ts\";\n export { timingSafeEqual } from \"ext:deno_node/internal_binding/_timingSafeEqual.ts\";\n \n export function getFipsCrypto(): boolean {\n-  notImplemented(\"crypto.getFipsCrypto\");\n+  return false;\n }\n \n export function setFipsCrypto(_fips: boolean) {",
        "comment_created_at": "2025-05-29T11:35:02+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Okay, but shouldn't it be a specific error instead of `notImplemented` error?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2093765379",
    "pr_number": 29330,
    "pr_file": "ext/node/polyfills/internal_binding/stream_wrap.ts",
    "created_at": "2025-05-16T23:19:35+00:00",
    "commented_code": "return this.#read();\n       }\n \n+      if (e.message === \"cancelled\") return null;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2093765379",
        "repo_full_name": "denoland/deno",
        "pr_number": 29330,
        "pr_file": "ext/node/polyfills/internal_binding/stream_wrap.ts",
        "discussion_id": "2093765379",
        "commented_code": "@@ -341,6 +356,8 @@ export class LibuvStreamWrap extends HandleWrap {\n         return this.#read();\n       }\n \n+      if (e.message === \"cancelled\") return null;",
        "comment_created_at": "2025-05-16T23:19:35+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "\ud83d\ude22 can we use `Deno.errors.<something>` here? This seems super brittle",
        "pr_file_module": null
      },
      {
        "comment_id": "2093880083",
        "repo_full_name": "denoland/deno",
        "pr_number": 29330,
        "pr_file": "ext/node/polyfills/internal_binding/stream_wrap.ts",
        "discussion_id": "2093765379",
        "commented_code": "@@ -341,6 +356,8 @@ export class LibuvStreamWrap extends HandleWrap {\n         return this.#read();\n       }\n \n+      if (e.message === \"cancelled\") return null;",
        "comment_created_at": "2025-05-17T03:55:37+00:00",
        "comment_author": "littledivy",
        "comment_body": "We can't use `Deno.errors.Interrupted` which means \"operation was cancelled for user\" whereas this one means \"operation was cancelled for readStop()\". Since this isn't a public API error I think a custom generic error is probably fine and faster to create.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2069053520",
    "pr_number": 28929,
    "pr_file": "tests/specs/run/unconfigured/main.ts",
    "created_at": "2025-04-30T16:26:45+00:00",
    "commented_code": "+const tempDirPath = await Deno.makeTempDir();\n+\n+const sockPath = `${tempDirPath}/control.sock`;\n+const testPath = `${tempDirPath}/test.ts`;\n+\n+const command = new Deno.Command(Deno.execPath(), {\n+  env: {\n+    DENO_UNSTABLE_CONTROL_SOCK: `unix:${sockPath}`,\n+  },\n+});\n+\n+const child = command.spawn();\n+\n+while (true) {\n+  try {\n+    await Deno.lstat(sockPath);\n+    break;\n+  } catch {\n+    await new Promise((r) => setTimeout(r, 10));",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2069053520",
        "repo_full_name": "denoland/deno",
        "pr_number": 28929,
        "pr_file": "tests/specs/run/unconfigured/main.ts",
        "discussion_id": "2069053520",
        "commented_code": "@@ -0,0 +1,44 @@\n+const tempDirPath = await Deno.makeTempDir();\n+\n+const sockPath = `${tempDirPath}/control.sock`;\n+const testPath = `${tempDirPath}/test.ts`;\n+\n+const command = new Deno.Command(Deno.execPath(), {\n+  env: {\n+    DENO_UNSTABLE_CONTROL_SOCK: `unix:${sockPath}`,\n+  },\n+});\n+\n+const child = command.spawn();\n+\n+while (true) {\n+  try {\n+    await Deno.lstat(sockPath);\n+    break;\n+  } catch {\n+    await new Promise((r) => setTimeout(r, 10));",
        "comment_created_at": "2025-04-30T16:26:45+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Add a limit here so the test won't hang if something goes wrong",
        "pr_file_module": null
      }
    ]
  }
]