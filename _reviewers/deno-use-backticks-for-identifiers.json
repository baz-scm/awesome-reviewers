[
  {
    "discussion_id": "2123507541",
    "pr_number": 29569,
    "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
    "created_at": "2025-06-03T11:19:30+00:00",
    "commented_code": "/** @category Events */\n interface EventListener {\n+  /**\n+   * The EventListener interface represents a callback function to be called\n+   * whenever an event of a specific type occurs on a target object.\n+   *\n+   * This is a basic event listener, represented by a simple function\n+   * that receives an Event object as its only parameter.\n+   *\n+   * @example\n+   * ```ts\n+   * // Create an event listener function\n+   * const handleEvent = (event: Event) => {\n+   *   console.log(`Event of type \"${event.type}\" occurred`);\n+   *   console.log(`Event phase: ${event.eventPhase}`);\n+   *\n+   *   // Access event properties\n+   *   if (event.cancelable) {\n+   *     event.preventDefault();\n+   *   }\n+   * };\n+   *\n+   * // Attach the event listener to a target\n+   * const target = new EventTarget();\n+   * target.addEventListener('custom', handleEvent);\n+   *\n+   * // Or create a listener inline\n+   * target.addEventListener('message', (event) => {\n+   *   console.log('Message received:', event);\n+   * });\n+   * ```\n+   *\n+   * @category Events\n+   */\n   (evt: Event): void;\n }\n \n-/** @category Events */\n+/**\n+ * The EventListenerObject interface represents an object that can handle events\n+ * dispatched by an EventTarget object.\n+ *\n+ * This interface provides an alternative to using a function as an event listener.\n+ * When implementing an object with this interface, the handleEvent() method\n+ * will be called when the event is triggered.",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2123507541",
        "repo_full_name": "denoland/deno",
        "pr_number": 29569,
        "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
        "discussion_id": "2123507541",
        "commented_code": "@@ -218,10 +218,76 @@ declare var EventTarget: {\n \n /** @category Events */\n interface EventListener {\n+  /**\n+   * The EventListener interface represents a callback function to be called\n+   * whenever an event of a specific type occurs on a target object.\n+   *\n+   * This is a basic event listener, represented by a simple function\n+   * that receives an Event object as its only parameter.\n+   *\n+   * @example\n+   * ```ts\n+   * // Create an event listener function\n+   * const handleEvent = (event: Event) => {\n+   *   console.log(`Event of type \"${event.type}\" occurred`);\n+   *   console.log(`Event phase: ${event.eventPhase}`);\n+   *\n+   *   // Access event properties\n+   *   if (event.cancelable) {\n+   *     event.preventDefault();\n+   *   }\n+   * };\n+   *\n+   * // Attach the event listener to a target\n+   * const target = new EventTarget();\n+   * target.addEventListener('custom', handleEvent);\n+   *\n+   * // Or create a listener inline\n+   * target.addEventListener('message', (event) => {\n+   *   console.log('Message received:', event);\n+   * });\n+   * ```\n+   *\n+   * @category Events\n+   */\n   (evt: Event): void;\n }\n \n-/** @category Events */\n+/**\n+ * The EventListenerObject interface represents an object that can handle events\n+ * dispatched by an EventTarget object.\n+ *\n+ * This interface provides an alternative to using a function as an event listener.\n+ * When implementing an object with this interface, the handleEvent() method\n+ * will be called when the event is triggered.",
        "comment_created_at": "2025-06-03T11:19:30+00:00",
        "comment_author": "philhawksworth",
        "comment_body": "monospacing\r\n\r\n```suggestion\r\n * The `EventListenerObject` interface represents an object that can handle events\r\n * dispatched by an `EventTarget` object.\r\n *\r\n * This interface provides an alternative to using a function as an event listener.\r\n * When implementing an object with this interface, the `handleEvent()` method\r\n * will be called when the event is triggered.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123510481",
    "pr_number": 29569,
    "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
    "created_at": "2025-06-03T11:20:46+00:00",
    "commented_code": "| EventListener\n   | EventListenerObject;\n \n-/** @category Events */\n+/**\n+ * Options for configuring an event listener via addEventListener.\n+ *\n+ * This interface extends EventListenerOptions and provides additional configuration\n+ * options to control event listener behavior.",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2123510481",
        "repo_full_name": "denoland/deno",
        "pr_number": 29569,
        "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
        "discussion_id": "2123510481",
        "commented_code": "@@ -231,10 +297,48 @@ type EventListenerOrEventListenerObject =\n   | EventListener\n   | EventListenerObject;\n \n-/** @category Events */\n+/**\n+ * Options for configuring an event listener via addEventListener.\n+ *\n+ * This interface extends EventListenerOptions and provides additional configuration\n+ * options to control event listener behavior.",
        "comment_created_at": "2025-06-03T11:20:46+00:00",
        "comment_author": "philhawksworth",
        "comment_body": "monospacing\r\n\r\n```suggestion\r\n * Options for configuring an event listener via `addEventListener`.\r\n *\r\n * This interface extends `EventListenerOptions` and provides additional configuration\r\n * options to control event listener behavior.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2123522561",
    "pr_number": 29569,
    "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
    "created_at": "2025-06-03T11:26:05+00:00",
    "commented_code": "/** @category Events */\n interface EventListener {\n+  /**\n+   * The EventListener interface represents a callback function to be called\n+   * whenever an event of a specific type occurs on a target object.\n+   *\n+   * This is a basic event listener, represented by a simple function\n+   * that receives an Event object as its only parameter.\n+   *\n+   * @example\n+   * ```ts\n+   * // Create an event listener function\n+   * const handleEvent = (event: Event) => {\n+   *   console.log(`Event of type \"${event.type}\" occurred`);\n+   *   console.log(`Event phase: ${event.eventPhase}`);\n+   *\n+   *   // Access event properties\n+   *   if (event.cancelable) {\n+   *     event.preventDefault();\n+   *   }\n+   * };\n+   *\n+   * // Attach the event listener to a target\n+   * const target = new EventTarget();\n+   * target.addEventListener('custom', handleEvent);\n+   *\n+   * // Or create a listener inline\n+   * target.addEventListener('message', (event) => {\n+   *   console.log('Message received:', event);\n+   * });\n+   * ```\n+   *\n+   * @category Events\n+   */\n   (evt: Event): void;\n }\n \n-/** @category Events */\n+/**\n+ * The EventListenerObject interface represents an object that can handle events\n+ * dispatched by an EventTarget object.\n+ *\n+ * This interface provides an alternative to using a function as an event listener.\n+ * When implementing an object with this interface, the handleEvent() method",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2123522561",
        "repo_full_name": "denoland/deno",
        "pr_number": 29569,
        "pr_file": "cli/tsc/dts/lib.deno_web.d.ts",
        "discussion_id": "2123522561",
        "commented_code": "@@ -218,10 +218,76 @@ declare var EventTarget: {\n \n /** @category Events */\n interface EventListener {\n+  /**\n+   * The EventListener interface represents a callback function to be called\n+   * whenever an event of a specific type occurs on a target object.\n+   *\n+   * This is a basic event listener, represented by a simple function\n+   * that receives an Event object as its only parameter.\n+   *\n+   * @example\n+   * ```ts\n+   * // Create an event listener function\n+   * const handleEvent = (event: Event) => {\n+   *   console.log(`Event of type \"${event.type}\" occurred`);\n+   *   console.log(`Event phase: ${event.eventPhase}`);\n+   *\n+   *   // Access event properties\n+   *   if (event.cancelable) {\n+   *     event.preventDefault();\n+   *   }\n+   * };\n+   *\n+   * // Attach the event listener to a target\n+   * const target = new EventTarget();\n+   * target.addEventListener('custom', handleEvent);\n+   *\n+   * // Or create a listener inline\n+   * target.addEventListener('message', (event) => {\n+   *   console.log('Message received:', event);\n+   * });\n+   * ```\n+   *\n+   * @category Events\n+   */\n   (evt: Event): void;\n }\n \n-/** @category Events */\n+/**\n+ * The EventListenerObject interface represents an object that can handle events\n+ * dispatched by an EventTarget object.\n+ *\n+ * This interface provides an alternative to using a function as an event listener.\n+ * When implementing an object with this interface, the handleEvent() method",
        "comment_created_at": "2025-06-03T11:26:05+00:00",
        "comment_author": "philhawksworth",
        "comment_body": "monospacing\r\n\r\n```suggestion\r\n * The `EventListenerObject` interface represents an object that can handle events\r\n * dispatched by an `EventTarget` object.\r\n *\r\n * This interface provides an alternative to using a function as an event listener.\r\n * When implementing an object with this interface, the `handleEvent()` method\r\n```",
        "pr_file_module": null
      }
    ]
  }
]