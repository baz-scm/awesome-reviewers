[
  {
    "discussion_id": "2093765006",
    "pr_number": 29330,
    "pr_file": "ext/node/polyfills/internal_binding/stream_wrap.ts",
    "created_at": "2025-05-16T23:18:52+00:00",
    "commented_code": "}\n \n     try {\n-      nread = await this[kStreamBaseField]!.read(buf);\n+      if (this[kStreamBaseField]![_readCancel]) {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2093765006",
        "repo_full_name": "denoland/deno",
        "pr_number": 29330,
        "pr_file": "ext/node/polyfills/internal_binding/stream_wrap.ts",
        "discussion_id": "2093765006",
        "commented_code": "@@ -331,7 +336,17 @@ export class LibuvStreamWrap extends HandleWrap {\n     }\n \n     try {\n-      nread = await this[kStreamBaseField]!.read(buf);\n+      if (this[kStreamBaseField]![_readCancel]) {",
        "comment_created_at": "2025-05-16T23:18:52+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Ditto, suggest to rename it to `readWithCancelHandle`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2063534414",
    "pr_number": 29071,
    "pr_file": "ext/node/polyfills/http.ts",
    "created_at": "2025-04-28T12:15:30+00:00",
    "commented_code": "this.reader = opts.reader;\n     this.writable = true;\n     this.readable = true;\n-    opts.signal?.addEventListener(\"abort\", () => {\n-      this.emit(\"error\", opts.signal?.reason ?? new Error(\"aborted\"));\n+    this.#request = opts.request;\n+  }\n+\n+  bindToAbortSignal() {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2063534414",
        "repo_full_name": "denoland/deno",
        "pr_number": 29071,
        "pr_file": "ext/node/polyfills/http.ts",
        "discussion_id": "2063534414",
        "commented_code": "@@ -148,8 +150,13 @@ class FakeSocket extends EventEmitter {\n     this.reader = opts.reader;\n     this.writable = true;\n     this.readable = true;\n-    opts.signal?.addEventListener(\"abort\", () => {\n-      this.emit(\"error\", opts.signal?.reason ?? new Error(\"aborted\"));\n+    this.#request = opts.request;\n+  }\n+\n+  bindToAbortSignal() {",
        "comment_created_at": "2025-04-28T12:15:30+00:00",
        "comment_author": "devsnek",
        "comment_body": "maybe make this a private method, this interface is supposed to sort of mirror node's socket interface",
        "pr_file_module": null
      },
      {
        "comment_id": "2066140445",
        "repo_full_name": "denoland/deno",
        "pr_number": 29071,
        "pr_file": "ext/node/polyfills/http.ts",
        "discussion_id": "2063534414",
        "commented_code": "@@ -148,8 +150,13 @@ class FakeSocket extends EventEmitter {\n     this.reader = opts.reader;\n     this.writable = true;\n     this.readable = true;\n-    opts.signal?.addEventListener(\"abort\", () => {\n-      this.emit(\"error\", opts.signal?.reason ?? new Error(\"aborted\"));\n+    this.#request = opts.request;\n+  }\n+\n+  bindToAbortSignal() {",
        "comment_created_at": "2025-04-29T11:43:06+00:00",
        "comment_author": "kt3k",
        "comment_body": "Changed this to symbol named function. I'm aware that is not completely private, but because this is called from the outside of the class, I guess this can't be private",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1945308077",
    "pr_number": 27977,
    "pr_file": "cli/tsc/dts/lib.deno.unstable.d.ts",
    "created_at": "2025-02-06T19:32:36+00:00",
    "commented_code": "fileName: string,\n       source: string,\n     ): Diagnostic[];\n+\n+    /**\n+     * Shared properties of an ast node\n+     * @category Linter\n+     * @experimental\n+     */\n+    export interface AstBase {",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1945308077",
        "repo_full_name": "denoland/deno",
        "pr_number": 27977,
        "pr_file": "cli/tsc/dts/lib.deno.unstable.d.ts",
        "discussion_id": "1945308077",
        "commented_code": "@@ -1475,6 +1475,2211 @@ declare namespace Deno {\n       fileName: string,\n       source: string,\n     ): Diagnostic[];\n+\n+    /**\n+     * Shared properties of an ast node\n+     * @category Linter\n+     * @experimental\n+     */\n+    export interface AstBase {",
        "comment_created_at": "2025-02-06T19:32:36+00:00",
        "comment_author": "dsherret",
        "comment_body": "Not sure about this name. What do other people do?",
        "pr_file_module": null
      },
      {
        "comment_id": "1945343024",
        "repo_full_name": "denoland/deno",
        "pr_number": 27977,
        "pr_file": "cli/tsc/dts/lib.deno.unstable.d.ts",
        "discussion_id": "1945308077",
        "commented_code": "@@ -1475,6 +1475,2211 @@ declare namespace Deno {\n       fileName: string,\n       source: string,\n     ): Diagnostic[];\n+\n+    /**\n+     * Shared properties of an ast node\n+     * @category Linter\n+     * @experimental\n+     */\n+    export interface AstBase {",
        "comment_created_at": "2025-02-06T19:56:48+00:00",
        "comment_author": "marvinhagemeister",
        "comment_body": "TSEStree calls it `BaseNode`. I guess we could also inline this type into all nodes if preferred.",
        "pr_file_module": null
      },
      {
        "comment_id": "1945367809",
        "repo_full_name": "denoland/deno",
        "pr_number": 27977,
        "pr_file": "cli/tsc/dts/lib.deno.unstable.d.ts",
        "discussion_id": "1945308077",
        "commented_code": "@@ -1475,6 +1475,2211 @@ declare namespace Deno {\n       fileName: string,\n       source: string,\n     ): Diagnostic[];\n+\n+    /**\n+     * Shared properties of an ast node\n+     * @category Linter\n+     * @experimental\n+     */\n+    export interface AstBase {",
        "comment_created_at": "2025-02-06T20:17:23+00:00",
        "comment_author": "marvinhagemeister",
        "comment_body": "Alright, inlined the `AstBase` type. That way we bypass the naming discussion",
        "pr_file_module": null
      }
    ]
  }
]