[
  {
    "discussion_id": "2044170007",
    "pr_number": 28904,
    "pr_file": "ext/node/polyfills/testing.ts",
    "created_at": "2025-04-15T10:09:20+00:00",
    "commented_code": "const {\n   PromisePrototypeThen,\n   ArrayPrototypePush,\n+  ArrayPrototypeForEach,\n   SafePromiseAll,\n   SafePromisePrototypeFinally,\n } = primordials;\n import { notImplemented, warnNotImplemented } from \"ext:deno_node/_utils.ts\";\n \n+const methodsToCopy = [\n+  \"deepEqual\",\n+  \"deepStrictEqual\",\n+  \"doesNotMatch\",\n+  \"doesNotReject\",\n+  \"doesNotThrow\",\n+  \"equal\",\n+  \"fail\",\n+  \"ifError\",\n+  \"match\",\n+  \"notDeepEqual\",\n+  \"notDeepStrictEqual\",\n+  \"notEqual\",\n+  \"notStrictEqual\",\n+  \"partialDeepStrictEqual\",\n+  \"rejects\",\n+  \"strictEqual\",\n+  \"throws\",\n+];\n+\n+/** `assert` object available via t.assert */\n+let assertObject = undefined;\n+function getAssertObject() {\n+  if (assertObject === undefined) {\n+    const assert = process.getBuiltinModule(\"node:assert\");",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2044170007",
        "repo_full_name": "denoland/deno",
        "pr_number": 28904,
        "pr_file": "ext/node/polyfills/testing.ts",
        "discussion_id": "2044170007",
        "commented_code": "@@ -4,11 +4,45 @@ import { primordials } from \"ext:core/mod.js\";\n const {\n   PromisePrototypeThen,\n   ArrayPrototypePush,\n+  ArrayPrototypeForEach,\n   SafePromiseAll,\n   SafePromisePrototypeFinally,\n } = primordials;\n import { notImplemented, warnNotImplemented } from \"ext:deno_node/_utils.ts\";\n \n+const methodsToCopy = [\n+  \"deepEqual\",\n+  \"deepStrictEqual\",\n+  \"doesNotMatch\",\n+  \"doesNotReject\",\n+  \"doesNotThrow\",\n+  \"equal\",\n+  \"fail\",\n+  \"ifError\",\n+  \"match\",\n+  \"notDeepEqual\",\n+  \"notDeepStrictEqual\",\n+  \"notEqual\",\n+  \"notStrictEqual\",\n+  \"partialDeepStrictEqual\",\n+  \"rejects\",\n+  \"strictEqual\",\n+  \"throws\",\n+];\n+\n+/** `assert` object available via t.assert */\n+let assertObject = undefined;\n+function getAssertObject() {\n+  if (assertObject === undefined) {\n+    const assert = process.getBuiltinModule(\"node:assert\");",
        "comment_created_at": "2025-04-15T10:09:20+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "Shouldn't this be a direct import of `assert` module - since we use ESM instead of CJS I don't think there's a need for going through `process.getBuiltinModule`",
        "pr_file_module": null
      },
      {
        "comment_id": "2046462682",
        "repo_full_name": "denoland/deno",
        "pr_number": 28904,
        "pr_file": "ext/node/polyfills/testing.ts",
        "discussion_id": "2044170007",
        "commented_code": "@@ -4,11 +4,45 @@ import { primordials } from \"ext:core/mod.js\";\n const {\n   PromisePrototypeThen,\n   ArrayPrototypePush,\n+  ArrayPrototypeForEach,\n   SafePromiseAll,\n   SafePromisePrototypeFinally,\n } = primordials;\n import { notImplemented, warnNotImplemented } from \"ext:deno_node/_utils.ts\";\n \n+const methodsToCopy = [\n+  \"deepEqual\",\n+  \"deepStrictEqual\",\n+  \"doesNotMatch\",\n+  \"doesNotReject\",\n+  \"doesNotThrow\",\n+  \"equal\",\n+  \"fail\",\n+  \"ifError\",\n+  \"match\",\n+  \"notDeepEqual\",\n+  \"notDeepStrictEqual\",\n+  \"notEqual\",\n+  \"notStrictEqual\",\n+  \"partialDeepStrictEqual\",\n+  \"rejects\",\n+  \"strictEqual\",\n+  \"throws\",\n+];\n+\n+/** `assert` object available via t.assert */\n+let assertObject = undefined;\n+function getAssertObject() {\n+  if (assertObject === undefined) {\n+    const assert = process.getBuiltinModule(\"node:assert\");",
        "comment_created_at": "2025-04-16T09:06:25+00:00",
        "comment_author": "kt3k",
        "comment_body": "That seems to work. Updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1821594699",
    "pr_number": 26606,
    "pr_file": "tests/specs/serve/declarativeSer/server.ts",
    "created_at": "2024-10-29T22:14:29+00:00",
    "commented_code": "+export const fetch = (req: Request) => {\n+  return new Response(\"Hello from declarative server!\");\n+};",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1821594699",
        "repo_full_name": "denoland/deno",
        "pr_number": 26606,
        "pr_file": "tests/specs/serve/declarativeSer/server.ts",
        "discussion_id": "1821594699",
        "commented_code": "@@ -0,0 +1,3 @@\n+export const fetch = (req: Request) => {\n+  return new Response(\"Hello from declarative server!\");\n+}; ",
        "comment_created_at": "2024-10-29T22:14:29+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "We don't support this syntax (yet!), so you'll need something like this:\r\n\r\n```ts\r\nexport default {\r\n  fetch(req: Request) {\r\n    return new Response(\"Hello from declarative server\");\r\n  },\r\n  onListen(info) {\r\n    console.log(info);\r\n  }\r\n} satisfies Deno.ServeDefaultExport;\r\n```",
        "pr_file_module": null
      }
    ]
  }
]