[
  {
    "discussion_id": "2191219761",
    "pr_number": 30022,
    "pr_file": "cli/ops/deploy.rs",
    "created_at": "2025-07-08T00:01:48+00:00",
    "commented_code": "+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use deno_core::op2;\n+use deno_error::JsErrorBox;\n+\n+use crate::tools::deploy::get_token_entry;\n+\n+deno_core::extension!(\n+  deno_deploy,\n+  ops = [\n+    op_deploy_token_get,\n+    op_deploy_token_set,\n+    op_deploy_token_delete,\n+  ],\n+);\n+\n+#[op2]\n+#[string]\n+pub fn op_deploy_token_get() -> Result<Option<String>, JsErrorBox> {\n+  match get_token_entry()\n+    .map_err(|e| JsErrorBox::type_error(e.to_string()))?\n+    .get_password()\n+  {\n+    Ok(password) => Ok(Some(password)),",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2191219761",
        "repo_full_name": "denoland/deno",
        "pr_number": 30022,
        "pr_file": "cli/ops/deploy.rs",
        "discussion_id": "2191219761",
        "commented_code": "@@ -0,0 +1,46 @@\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use deno_core::op2;\n+use deno_error::JsErrorBox;\n+\n+use crate::tools::deploy::get_token_entry;\n+\n+deno_core::extension!(\n+  deno_deploy,\n+  ops = [\n+    op_deploy_token_get,\n+    op_deploy_token_set,\n+    op_deploy_token_delete,\n+  ],\n+);\n+\n+#[op2]\n+#[string]\n+pub fn op_deploy_token_get() -> Result<Option<String>, JsErrorBox> {\n+  match get_token_entry()\n+    .map_err(|e| JsErrorBox::type_error(e.to_string()))?\n+    .get_password()\n+  {\n+    Ok(password) => Ok(Some(password)),",
        "comment_created_at": "2025-07-08T00:01:48+00:00",
        "comment_author": "dsherret",
        "comment_body": "Is it ok this is accessible without permissions?",
        "pr_file_module": null
      },
      {
        "comment_id": "2191221761",
        "repo_full_name": "denoland/deno",
        "pr_number": 30022,
        "pr_file": "cli/ops/deploy.rs",
        "discussion_id": "2191219761",
        "commented_code": "@@ -0,0 +1,46 @@\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use deno_core::op2;\n+use deno_error::JsErrorBox;\n+\n+use crate::tools::deploy::get_token_entry;\n+\n+deno_core::extension!(\n+  deno_deploy,\n+  ops = [\n+    op_deploy_token_get,\n+    op_deploy_token_set,\n+    op_deploy_token_delete,\n+  ],\n+);\n+\n+#[op2]\n+#[string]\n+pub fn op_deploy_token_get() -> Result<Option<String>, JsErrorBox> {\n+  match get_token_entry()\n+    .map_err(|e| JsErrorBox::type_error(e.to_string()))?\n+    .get_password()\n+  {\n+    Ok(password) => Ok(Some(password)),",
        "comment_created_at": "2025-07-08T00:04:00+00:00",
        "comment_author": "crowlKats",
        "comment_body": "these ops are only accessible by the `deploy` subcommand, which invokes the JSR package with allow-all anyways",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160395279",
    "pr_number": 29842,
    "pr_file": "ext/node/ops/sqlite/backup.rs",
    "created_at": "2025-06-22T16:20:55+00:00",
    "commented_code": "+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use std::ffi::c_int;\n+use std::time;\n+\n+use deno_core::op2;\n+use rusqlite::backup;\n+use rusqlite::Connection;\n+use serde::Deserialize;\n+use serde::Serialize;\n+\n+use super::DatabaseSync;\n+use super::SqliteError;\n+\n+const DEFAULT_BACKUP_RATE: c_int = 5;\n+\n+#[derive(Serialize, Deserialize)]\n+struct BackupOptions {\n+  source: Option<String>,\n+  target: Option<String>,\n+  rate: Option<c_int>,\n+  // progress: fn(backup::Progress),\n+}\n+\n+#[op2]\n+#[serde]\n+pub fn op_node_database_backup(\n+  #[cppgc] source_db: &DatabaseSync,\n+  #[string] path: String,\n+  #[serde] options: Option<BackupOptions>,\n+) -> std::result::Result<(), SqliteError> {\n+  let src_conn_ref = source_db.conn.borrow();\n+  let src_conn = src_conn_ref.as_ref().ok_or(SqliteError::SessionClosed)?;\n+  let path = std::path::Path::new(&path);\n+  let mut dst_conn = Connection::open(path)?;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2160395279",
        "repo_full_name": "denoland/deno",
        "pr_number": 29842,
        "pr_file": "ext/node/ops/sqlite/backup.rs",
        "discussion_id": "2160395279",
        "commented_code": "@@ -0,0 +1,41 @@\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use std::ffi::c_int;\n+use std::time;\n+\n+use deno_core::op2;\n+use rusqlite::backup;\n+use rusqlite::Connection;\n+use serde::Deserialize;\n+use serde::Serialize;\n+\n+use super::DatabaseSync;\n+use super::SqliteError;\n+\n+const DEFAULT_BACKUP_RATE: c_int = 5;\n+\n+#[derive(Serialize, Deserialize)]\n+struct BackupOptions {\n+  source: Option<String>,\n+  target: Option<String>,\n+  rate: Option<c_int>,\n+  // progress: fn(backup::Progress),\n+}\n+\n+#[op2]\n+#[serde]\n+pub fn op_node_database_backup(\n+  #[cppgc] source_db: &DatabaseSync,\n+  #[string] path: String,\n+  #[serde] options: Option<BackupOptions>,\n+) -> std::result::Result<(), SqliteError> {\n+  let src_conn_ref = source_db.conn.borrow();\n+  let src_conn = src_conn_ref.as_ref().ok_or(SqliteError::SessionClosed)?;\n+  let path = std::path::Path::new(&path);\n+  let mut dst_conn = Connection::open(path)?;",
        "comment_created_at": "2025-06-22T16:20:55+00:00",
        "comment_author": "dsherret",
        "comment_body": "I think we'll need to add write permission checks here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2160414442",
        "repo_full_name": "denoland/deno",
        "pr_number": 29842,
        "pr_file": "ext/node/ops/sqlite/backup.rs",
        "discussion_id": "2160395279",
        "commented_code": "@@ -0,0 +1,41 @@\n+// Copyright 2018-2025 the Deno authors. MIT license.\n+\n+use std::ffi::c_int;\n+use std::time;\n+\n+use deno_core::op2;\n+use rusqlite::backup;\n+use rusqlite::Connection;\n+use serde::Deserialize;\n+use serde::Serialize;\n+\n+use super::DatabaseSync;\n+use super::SqliteError;\n+\n+const DEFAULT_BACKUP_RATE: c_int = 5;\n+\n+#[derive(Serialize, Deserialize)]\n+struct BackupOptions {\n+  source: Option<String>,\n+  target: Option<String>,\n+  rate: Option<c_int>,\n+  // progress: fn(backup::Progress),\n+}\n+\n+#[op2]\n+#[serde]\n+pub fn op_node_database_backup(\n+  #[cppgc] source_db: &DatabaseSync,\n+  #[string] path: String,\n+  #[serde] options: Option<BackupOptions>,\n+) -> std::result::Result<(), SqliteError> {\n+  let src_conn_ref = source_db.conn.borrow();\n+  let src_conn = src_conn_ref.as_ref().ok_or(SqliteError::SessionClosed)?;\n+  let path = std::path::Path::new(&path);\n+  let mut dst_conn = Connection::open(path)?;",
        "comment_created_at": "2025-06-22T17:39:52+00:00",
        "comment_author": "edilson258",
        "comment_body": "judging by the signature\r\n\r\n```js\r\nfunction backup(\r\n  sourceDb: DatabaseSync,\r\n  path: string | Buffer | URL,\r\n  options?: BackupOptions,\r\n): Promise<void>;\r\n```\r\nSince `path` can have different forms, we'll need to check diff permissions accordingly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2099832392",
    "pr_number": 29408,
    "pr_file": "ext/fs/ops.rs",
    "created_at": "2025-05-21T09:35:12+00:00",
    "commented_code": "Ok(())\n }\n \n+#[op2(stack_trace)]\n+pub fn op_fs_fchown_sync(\n+  state: &mut OpState,\n+  #[smi] rid: ResourceId,\n+  uid: Option<u32>,\n+  gid: Option<u32>,\n+) -> Result<(), FsOpsError> {\n+  let file =\n+    FileResource::get_file(state, rid).map_err(FsOpsErrorKind::Resource)?;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "2099832392",
        "repo_full_name": "denoland/deno",
        "pr_number": 29408,
        "pr_file": "ext/fs/ops.rs",
        "discussion_id": "2099832392",
        "commented_code": "@@ -382,6 +382,32 @@ where\n   Ok(())\n }\n \n+#[op2(stack_trace)]\n+pub fn op_fs_fchown_sync(\n+  state: &mut OpState,\n+  #[smi] rid: ResourceId,\n+  uid: Option<u32>,\n+  gid: Option<u32>,\n+) -> Result<(), FsOpsError> {\n+  let file =\n+    FileResource::get_file(state, rid).map_err(FsOpsErrorKind::Resource)?;",
        "comment_created_at": "2025-05-21T09:35:12+00:00",
        "comment_author": "marvinhagemeister",
        "comment_body": "Do we need to add permission checks here like in `op_fs_chown_async`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2099912901",
        "repo_full_name": "denoland/deno",
        "pr_number": 29408,
        "pr_file": "ext/fs/ops.rs",
        "discussion_id": "2099832392",
        "commented_code": "@@ -382,6 +382,32 @@ where\n   Ok(())\n }\n \n+#[op2(stack_trace)]\n+pub fn op_fs_fchown_sync(\n+  state: &mut OpState,\n+  #[smi] rid: ResourceId,\n+  uid: Option<u32>,\n+  gid: Option<u32>,\n+) -> Result<(), FsOpsError> {\n+  let file =\n+    FileResource::get_file(state, rid).map_err(FsOpsErrorKind::Resource)?;",
        "comment_created_at": "2025-05-21T10:16:36+00:00",
        "comment_author": "kt3k",
        "comment_body": "I'm not entirely sure, but other ops which take resource id as parameter generally don't seem checking permissions (e.g. [op_fs_ftruncate_sync](https://github.com/denoland/deno/blob/7abce12183f24c6d8c5a939392545c11fbc28f6a/ext/fs/ops.rs#L1625), [op_fs_futime_sync](https://github.com/denoland/deno/blob/7abce12183f24c6d8c5a939392545c11fbc28f6a/ext/fs/ops.rs#L1649), etc)\r\n\r\nI think this is because the permission is checked when the file is opened (i.e. when fd obtained)\r\n\r\n(Correct me if I'm wrong. cc @littledivy @bartlomieju )",
        "pr_file_module": null
      },
      {
        "comment_id": "2101529284",
        "repo_full_name": "denoland/deno",
        "pr_number": 29408,
        "pr_file": "ext/fs/ops.rs",
        "discussion_id": "2099832392",
        "commented_code": "@@ -382,6 +382,32 @@ where\n   Ok(())\n }\n \n+#[op2(stack_trace)]\n+pub fn op_fs_fchown_sync(\n+  state: &mut OpState,\n+  #[smi] rid: ResourceId,\n+  uid: Option<u32>,\n+  gid: Option<u32>,\n+) -> Result<(), FsOpsError> {\n+  let file =\n+    FileResource::get_file(state, rid).map_err(FsOpsErrorKind::Resource)?;",
        "comment_created_at": "2025-05-22T03:02:25+00:00",
        "comment_author": "littledivy",
        "comment_body": "Yes, creating the file resource already checks for --allow-read",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1725321280",
    "pr_number": 25132,
    "pr_file": "runtime/permissions/lib.rs",
    "created_at": "2024-08-21T15:41:46+00:00",
    "commented_code": "fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1725321280",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-21T15:41:46+00:00",
        "comment_author": "dsherret",
        "comment_body": "This might be a security issue. I think there's a reason why this isn't allowed without `-A`, but I can't remember at the moment.",
        "pr_file_module": null
      },
      {
        "comment_id": "1725404103",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-21T16:42:24+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": "@dsherret this #23208 prevent some paths if they don't have all permissions, so we need to exclude UNC paths from that pattern with this code or close issue it if it's for security reasons.",
        "pr_file_module": null
      },
      {
        "comment_id": "1725410919",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-21T16:47:54+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": "> @dsherret this #23208 prevent some paths if they don't have all permissions, so we need to exclude UNC paths from that pattern with this code or close issue it if it's for security reasons.\r\n\r\nRegarding #23208. I realize it's not a security problem, thus can accept this change?",
        "pr_file_module": null
      },
      {
        "comment_id": "1730272630",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-25T07:22:33+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": "@mmastrac Please check this change.",
        "pr_file_module": null
      },
      {
        "comment_id": "1730784602",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-26T07:06:07+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": "@dsherret @mmastrac \r\nCan we accept it, or should we close the issue and consider it unsolvable? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1731606419",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-26T17:55:44+00:00",
        "comment_author": "dsherret",
        "comment_body": "I looked into this a bit and I think it's more complicated than it seems. Here's some points from an old internal document:\r\n\r\n> - If users are using `\\\\.\\` paths to access things like named pipes, raw devices, those should trigger `--allow-sys` .\r\n> - Network resources should perform DNS lookup in permission checks, and the fully-resolved permission check object should include the the IP address. When we make the outgoing network requests, we must use the resolved IP.\r\n\r\nThat said, I'm not sure about what the right solution is here. At the moment, this just requires `--allow-all` permissions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1732179443",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-08-27T06:00:36+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": " \r\n\r\n> I looked into this a bit and I think it's more complicated than it seems. Here's some points from an old internal document:\r\n> \r\n> > * If users are using `\\\\.\\` paths to access things like named pipes, raw devices, those should trigger `--allow-sys` .\r\n> > * Network resources should perform DNS lookup in permission checks, and the fully-resolved permission check object should include the the IP address. When we make the outgoing network requests, we must use the resolved IP.\r\n> \r\n> That said, I'm not sure about what the right solution is here. At the moment, this just requires `--allow-all` permissions.\r\n\r\nbut I assume if it requires extra permission, it will prompt to ask it to grant the permission, thus actually at this moment it grants all the permission needed, no need to verify all permissions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1741779378",
        "repo_full_name": "denoland/deno",
        "pr_number": 25132,
        "pr_file": "runtime/permissions/lib.rs",
        "discussion_id": "1725321280",
        "commented_code": "@@ -1820,6 +1820,14 @@ impl PermissionsContainer {\n \n       fn is_normalized_windows_drive_path(path: &Path) -> bool {\n         let s = path.as_os_str().as_encoded_bytes();\n+\n+        // Check if the path is a UNC path (e.g., \\\\Server\\Share\\Folder)\n+        // UNC paths typically contain \"\\\\\" at the start or somewhere in the middle\n+        if s.windows(2).any(|window| window == b\"\\\\\\\\\") {\n+          return true;",
        "comment_created_at": "2024-09-03T09:57:15+00:00",
        "comment_author": "yazan-abdalrahman",
        "comment_body": "> This might be a security issue. I think there's a reason why this isn't allowed without `-A`, but I can't remember at the moment.\r\n\r\n\r\n\r\n> This might be a security issue. I think there's a reason why this isn't allowed without `-A`, but I can't remember at the moment.\r\n\r\n@dsherret \r\nWhat about this? I don't think it's a security issue, but why do sheared files require all permissions? Just some permissions like read, write, and net? and why it  didn't  prompt to give it all permission?",
        "pr_file_module": null
      }
    ]
  }
]