[
  {
    "discussion_id": "1298285067",
    "pr_number": 20150,
    "pr_file": "ext/web/02_event.js",
    "created_at": "2023-08-18T10:19:07+00:00",
    "commented_code": "const { listeners } = self[eventTargetData];\n     if (callback !== null && ReflectHas(listeners, type)) {\n-      listeners[type] = ArrayPrototypeFilter(\n-        listeners[type],\n+      listeners[type].capture = ArrayPrototypeFilter(\n+        listeners[type].capture,",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1298285067",
        "repo_full_name": "denoland/deno",
        "pr_number": 20150,
        "pr_file": "ext/web/02_event.js",
        "discussion_id": "1298285067",
        "commented_code": "@@ -1037,8 +1037,12 @@ class EventTarget {\n \n     const { listeners } = self[eventTargetData];\n     if (callback !== null && ReflectHas(listeners, type)) {\n-      listeners[type] = ArrayPrototypeFilter(\n-        listeners[type],\n+      listeners[type].capture = ArrayPrototypeFilter(\n+        listeners[type].capture,",
        "comment_created_at": "2023-08-18T10:19:07+00:00",
        "comment_author": "bartlomieju",
        "comment_body": "This appears to be wrong, I think you should use a logic similar to this:\r\n```\r\n((typeof listener.options === \"boolean\" &&\r\n          listener.options === options.capture) ||\r\n          (typeof listener.options === \"object\" &&\r\n            listener.options.capture === options.capture)) &&\r\n        listener.callback === callback\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1306497883",
        "repo_full_name": "denoland/deno",
        "pr_number": 20150,
        "pr_file": "ext/web/02_event.js",
        "discussion_id": "1298285067",
        "commented_code": "@@ -1037,8 +1037,12 @@ class EventTarget {\n \n     const { listeners } = self[eventTargetData];\n     if (callback !== null && ReflectHas(listeners, type)) {\n-      listeners[type] = ArrayPrototypeFilter(\n-        listeners[type],\n+      listeners[type].capture = ArrayPrototypeFilter(\n+        listeners[type].capture,",
        "comment_created_at": "2023-08-26T17:45:43+00:00",
        "comment_author": "TomokiMiyauci",
        "comment_body": "I think the original suggestion is correct.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1785533791",
    "pr_number": 25517,
    "pr_file": "ext/web/01_mimesniff.js",
    "created_at": "2024-10-03T02:12:01+00:00",
    "commented_code": "/**\n  * Ref: https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\n+ * NOTE: Some browsers have implementation-defined image formats.\n+ * For example, The AVIF image format is supported by all browsers today.\n+ * However, the standardization seems to have hard going.\n+ * See: https://github.com/whatwg/mimesniff/issues/143\n  * @param {Uint8Array} input\n  * @returns {string | undefined}\n  */",
    "repo_full_name": "denoland/deno",
    "discussion_comments": [
      {
        "comment_id": "1785533791",
        "repo_full_name": "denoland/deno",
        "pr_number": 25517,
        "pr_file": "ext/web/01_mimesniff.js",
        "discussion_id": "1785533791",
        "commented_code": "@@ -395,6 +395,10 @@ const ImageTypePatternTable = [\n \n /**\n  * Ref: https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\n+ * NOTE: Some browsers have implementation-defined image formats.\n+ * For example, The AVIF image format is supported by all browsers today.\n+ * However, the standardization seems to have hard going.\n+ * See: https://github.com/whatwg/mimesniff/issues/143\n  * @param {Uint8Array} input\n  * @returns {string | undefined}\n  */",
        "comment_created_at": "2024-10-03T02:12:01+00:00",
        "comment_author": "Hajime-san",
        "comment_body": "This question is unrelated to quoted the line.\r\nI think that the `sniffImage` function should receives another argument which is a byte sequence as `Uint8Array` and passes to `imageTypePatternMatchingAlgorithm`.\r\nIt seems that the `imageTypeMatched` variable will always become `undefined` with the current implementation.\r\n\r\nhttps://github.com/denoland/deno/blob/c7cba4eda73e000baa6bfbce6a156f9974edee36/ext/web/01_mimesniff.js#L418-L441",
        "pr_file_module": null
      },
      {
        "comment_id": "1855077165",
        "repo_full_name": "denoland/deno",
        "pr_number": 25517,
        "pr_file": "ext/web/01_mimesniff.js",
        "discussion_id": "1785533791",
        "commented_code": "@@ -395,6 +395,10 @@ const ImageTypePatternTable = [\n \n /**\n  * Ref: https://mimesniff.spec.whatwg.org/#image-type-pattern-matching-algorithm\n+ * NOTE: Some browsers have implementation-defined image formats.\n+ * For example, The AVIF image format is supported by all browsers today.\n+ * However, the standardization seems to have hard going.\n+ * See: https://github.com/whatwg/mimesniff/issues/143\n  * @param {Uint8Array} input\n  * @returns {string | undefined}\n  */",
        "comment_created_at": "2024-11-23T04:38:30+00:00",
        "comment_author": "crowlKats",
        "comment_body": "I dont have strong opinions on this, though the spec does specify a single argument, but givne that it is internal functionality should be fine to deviate. so don't mind as long as we are compliant in behaivour",
        "pr_file_module": null
      }
    ]
  }
]