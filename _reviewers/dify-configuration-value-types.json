[
  {
    "discussion_id": "2281674238",
    "pr_number": 24093,
    "pr_file": "api/configs/middleware/vdb/pgvector_config.py",
    "created_at": "2025-08-18T08:30:58+00:00",
    "commented_code": "Configuration settings for PGVector (PostgreSQL with vector extension)\n     \"\"\"\n \n+    PGVECTOR_IS_OWNER: Optional[bool] = Field(\n+        description=\"Whether the PGVector is the owner of the database\",\n+        default=True,",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2281674238",
        "repo_full_name": "langgenius/dify",
        "pr_number": 24093,
        "pr_file": "api/configs/middleware/vdb/pgvector_config.py",
        "discussion_id": "2281674238",
        "commented_code": "@@ -9,6 +9,11 @@ class PGVectorConfig(BaseSettings):\n     Configuration settings for PGVector (PostgreSQL with vector extension)\n     \"\"\"\n \n+    PGVECTOR_IS_OWNER: Optional[bool] = Field(\n+        description=\"Whether the PGVector is the owner of the database\",\n+        default=True,",
        "comment_created_at": "2025-08-18T08:30:58+00:00",
        "comment_author": "crazywoola",
        "comment_body": "```suggestion\n        default=False,\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2281680931",
        "repo_full_name": "langgenius/dify",
        "pr_number": 24093,
        "pr_file": "api/configs/middleware/vdb/pgvector_config.py",
        "discussion_id": "2281674238",
        "commented_code": "@@ -9,6 +9,11 @@ class PGVectorConfig(BaseSettings):\n     Configuration settings for PGVector (PostgreSQL with vector extension)\n     \"\"\"\n \n+    PGVECTOR_IS_OWNER: Optional[bool] = Field(\n+        description=\"Whether the PGVector is the owner of the database\",\n+        default=True,",
        "comment_created_at": "2025-08-18T08:33:57+00:00",
        "comment_author": "ElvisWai",
        "comment_body": "The default value of True is reasonable, as most cloud platforms support the use of super permissions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176858307",
    "pr_number": 20716,
    "pr_file": "api/core/mcp/utils.py",
    "created_at": "2025-07-01T08:40:36+00:00",
    "commented_code": "+import httpx\n+\n+from configs import dify_config\n+\n+SSRF_DEFAULT_MAX_RETRIES = dify_config.SSRF_DEFAULT_MAX_RETRIES\n+\n+HTTP_REQUEST_NODE_SSL_VERIFY = True  # Default value for HTTP_REQUEST_NODE_SSL_VERIFY is True\n+try:\n+    HTTP_REQUEST_NODE_SSL_VERIFY = dify_config.HTTP_REQUEST_NODE_SSL_VERIFY",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2176858307",
        "repo_full_name": "langgenius/dify",
        "pr_number": 20716,
        "pr_file": "api/core/mcp/utils.py",
        "discussion_id": "2176858307",
        "commented_code": "@@ -0,0 +1,112 @@\n+import httpx\n+\n+from configs import dify_config\n+\n+SSRF_DEFAULT_MAX_RETRIES = dify_config.SSRF_DEFAULT_MAX_RETRIES\n+\n+HTTP_REQUEST_NODE_SSL_VERIFY = True  # Default value for HTTP_REQUEST_NODE_SSL_VERIFY is True\n+try:\n+    HTTP_REQUEST_NODE_SSL_VERIFY = dify_config.HTTP_REQUEST_NODE_SSL_VERIFY",
        "comment_created_at": "2025-07-01T08:40:36+00:00",
        "comment_author": "QuantumGhost",
        "comment_body": "This logic seems unnecessary, as the `dify_config.HTTP_REQUEST_NODE_SSL_VERIFY` is already a boolean value.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1818280024",
    "pr_number": 9789,
    "pr_file": "api/configs/middleware/cache/redis_config.py",
    "created_at": "2024-10-28T02:02:06+00:00",
    "commented_code": "description=\"Socket timeout in seconds for Redis Sentinel connections\",\n         default=0.1,\n     )\n+\n+    REDIS_USE_CLUSTERS: Optional[bool] = Field(",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1818280024",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9789,
        "pr_file": "api/configs/middleware/cache/redis_config.py",
        "discussion_id": "1818280024",
        "commented_code": "@@ -68,3 +68,18 @@ class RedisConfig(BaseSettings):\n         description=\"Socket timeout in seconds for Redis Sentinel connections\",\n         default=0.1,\n     )\n+\n+    REDIS_USE_CLUSTERS: Optional[bool] = Field(",
        "comment_created_at": "2024-10-28T02:02:06+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "```suggestion\r\n    REDIS_USE_CLUSTERS: bool = Field(\r\n```\r\n`Optional` is not required as default value is always provided.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1861521470",
    "pr_number": 11179,
    "pr_file": "api/configs/feature/__init__.py",
    "created_at": "2024-11-28T05:20:57+00:00",
    "commented_code": "default=None,\n     )\n \n+    SCARF_NO_ANALYTICS: Optional[str] = Field(\n+        description=\"This is about whether to disable Scarf analytics in Unstructured library.\",\n+        default=\"false\",",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1861521470",
        "repo_full_name": "langgenius/dify",
        "pr_number": 11179,
        "pr_file": "api/configs/feature/__init__.py",
        "discussion_id": "1861521470",
        "commented_code": "@@ -585,6 +585,11 @@ class RagEtlConfig(BaseSettings):\n         default=None,\n     )\n \n+    SCARF_NO_ANALYTICS: Optional[str] = Field(\n+        description=\"This is about whether to disable Scarf analytics in Unstructured library.\",\n+        default=\"false\",",
        "comment_created_at": "2024-11-28T05:20:57+00:00",
        "comment_author": "crazywoola",
        "comment_body": "For boolean value, we prefer to use `SCARF_NO_ANALYTICS: bool`. and `default=False`",
        "pr_file_module": null
      },
      {
        "comment_id": "1861558714",
        "repo_full_name": "langgenius/dify",
        "pr_number": 11179,
        "pr_file": "api/configs/feature/__init__.py",
        "discussion_id": "1861521470",
        "commented_code": "@@ -585,6 +585,11 @@ class RagEtlConfig(BaseSettings):\n         default=None,\n     )\n \n+    SCARF_NO_ANALYTICS: Optional[str] = Field(\n+        description=\"This is about whether to disable Scarf analytics in Unstructured library.\",\n+        default=\"false\",",
        "comment_created_at": "2024-11-28T06:14:36+00:00",
        "comment_author": "realethanhsu",
        "comment_body": "Thank you for your suggestion! I agree that we should use\u00a0`SCARF_NO_ANALYTICS: bool`\u00a0as you proposed.\r\nHowever, I would like to point out that if we implement it this way, when\u00a0`app_factory.py`\u00a0populates the configurations into the system environment variables, the assignment\u00a0`os.environ[key] = str(value)`\u00a0will convert\u00a0`SCARF_NO_ANALYTICS`\u00a0to\u00a0`\"True\"`\u00a0in system environment variables. \r\n![image](https://github.com/user-attachments/assets/cdd6ceb2-0f03-4e55-8650-04fe2fea9eea)\r\n\r\nIn fact, the Unstructured library checks the condition using\u00a0`os.getenv(\"SCARF_NO_ANALYTICS\") != \"true\"`. This means that\u00a0`os.getenv(\"SCARF_NO_ANALYTICS\")`\u00a0should be\u00a0`\"true\"`\u00a0rather than\u00a0`\"True\"`.\r\n![image](https://github.com/user-attachments/assets/566e693d-2db8-4910-a46e-10b15ac5e4fe)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1861628478",
        "repo_full_name": "langgenius/dify",
        "pr_number": 11179,
        "pr_file": "api/configs/feature/__init__.py",
        "discussion_id": "1861521470",
        "commented_code": "@@ -585,6 +585,11 @@ class RagEtlConfig(BaseSettings):\n         default=None,\n     )\n \n+    SCARF_NO_ANALYTICS: Optional[str] = Field(\n+        description=\"This is about whether to disable Scarf analytics in Unstructured library.\",\n+        default=\"false\",",
        "comment_created_at": "2024-11-28T07:21:01+00:00",
        "comment_author": "crazywoola",
        "comment_body": "Sounds good to me. :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797704237",
    "pr_number": 9233,
    "pr_file": "api/services/account_service.py",
    "created_at": "2024-10-12T13:42:37+00:00",
    "commented_code": "return account\n \n     @staticmethod\n-    def get_account_jwt_token(account, *, exp: timedelta = timedelta(days=30)):\n+    def get_account_jwt_token(account: Account) -> str:\n         payload = {\n             \"user_id\": account.id,\n-            \"exp\": datetime.now(timezone.utc).replace(tzinfo=None) + exp,\n+            \"exp\": int(\n+                datetime.now(timezone.utc).timestamp()\n+                + timedelta(minutes=dify_config.ACCESS_TOKEN_EXPIRE_MINUTES).total_seconds()",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1797704237",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9233,
        "pr_file": "api/services/account_service.py",
        "discussion_id": "1797704237",
        "commented_code": "@@ -84,10 +113,13 @@ def load_user(user_id: str) -> None | Account:\n         return account\n \n     @staticmethod\n-    def get_account_jwt_token(account, *, exp: timedelta = timedelta(days=30)):\n+    def get_account_jwt_token(account: Account) -> str:\n         payload = {\n             \"user_id\": account.id,\n-            \"exp\": datetime.now(timezone.utc).replace(tzinfo=None) + exp,\n+            \"exp\": int(\n+                datetime.now(timezone.utc).timestamp()\n+                + timedelta(minutes=dify_config.ACCESS_TOKEN_EXPIRE_MINUTES).total_seconds()",
        "comment_created_at": "2024-10-12T13:42:37+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "Considering the expiration time is used in seconds, it's suggested to change the time unit of this config from minutes to seconds for better consistency and flexibility.",
        "pr_file_module": null
      },
      {
        "comment_id": "1797708281",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9233,
        "pr_file": "api/services/account_service.py",
        "discussion_id": "1797704237",
        "commented_code": "@@ -84,10 +113,13 @@ def load_user(user_id: str) -> None | Account:\n         return account\n \n     @staticmethod\n-    def get_account_jwt_token(account, *, exp: timedelta = timedelta(days=30)):\n+    def get_account_jwt_token(account: Account) -> str:\n         payload = {\n             \"user_id\": account.id,\n-            \"exp\": datetime.now(timezone.utc).replace(tzinfo=None) + exp,\n+            \"exp\": int(\n+                datetime.now(timezone.utc).timestamp()\n+                + timedelta(minutes=dify_config.ACCESS_TOKEN_EXPIRE_MINUTES).total_seconds()",
        "comment_created_at": "2024-10-12T14:11:48+00:00",
        "comment_author": "laipz8200",
        "comment_body": "Thank you for your suggestion! For this scenario, using minutes is sufficient and more readable, as there won't be any access tokens with a validity period of less than one minute.",
        "pr_file_module": null
      },
      {
        "comment_id": "1797712954",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9233,
        "pr_file": "api/services/account_service.py",
        "discussion_id": "1797704237",
        "commented_code": "@@ -84,10 +113,13 @@ def load_user(user_id: str) -> None | Account:\n         return account\n \n     @staticmethod\n-    def get_account_jwt_token(account, *, exp: timedelta = timedelta(days=30)):\n+    def get_account_jwt_token(account: Account) -> str:\n         payload = {\n             \"user_id\": account.id,\n-            \"exp\": datetime.now(timezone.utc).replace(tzinfo=None) + exp,\n+            \"exp\": int(\n+                datetime.now(timezone.utc).timestamp()\n+                + timedelta(minutes=dify_config.ACCESS_TOKEN_EXPIRE_MINUTES).total_seconds()",
        "comment_created_at": "2024-10-12T14:42:44+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "SGTM.",
        "pr_file_module": null
      }
    ]
  }
]