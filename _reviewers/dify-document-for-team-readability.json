[
  {
    "discussion_id": "2341405912",
    "pr_number": 25522,
    "pr_file": "web/app/components/base/date-and-time-picker/date-picker/index.tsx",
    "created_at": "2025-09-11T15:21:07+00:00",
    "commented_code": "setView(ViewType.date)\n   }\n \n-  const timeFormat = needTimePicker ? t('time.dateFormats.displayWithTime') : t('time.dateFormats.display')\n-  const displayValue = value?.format(timeFormat) || ''\n+  const timeFormat = needTimePicker ? 'YYYY-MM-DD HH:mm' : 'YYYY-MM-DD'\n+  const displayValue = normalizedValue?.format(timeFormat) || ''",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2341405912",
        "repo_full_name": "langgenius/dify",
        "pr_number": 25522,
        "pr_file": "web/app/components/base/date-and-time-picker/date-picker/index.tsx",
        "discussion_id": "2341405912",
        "commented_code": "@@ -191,8 +199,8 @@ const DatePicker = ({\n     setView(ViewType.date)\n   }\n \n-  const timeFormat = needTimePicker ? t('time.dateFormats.displayWithTime') : t('time.dateFormats.display')\n-  const displayValue = value?.format(timeFormat) || ''\n+  const timeFormat = needTimePicker ? 'YYYY-MM-DD HH:mm' : 'YYYY-MM-DD'\n+  const displayValue = normalizedValue?.format(timeFormat) || ''",
        "comment_created_at": "2025-09-11T15:21:07+00:00",
        "comment_author": "lyzno1",
        "comment_body": "This removes i18n support. Please keep: t('time.dateFormats.displayWithTime') and t('time.dateFormats.display'). The type fix is good, but display format should stay localized.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2188469961",
    "pr_number": 21957,
    "pr_file": "web/app/components/app/configuration/config/config-audio.tsx",
    "created_at": "2025-07-06T16:54:58+00:00",
    "commented_code": "+'use client'\n+import type { FC } from 'react'\n+import React, { useCallback } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import produce from 'immer'\n+import { useContext } from 'use-context-selector'\n+\n+import { Microphone01 } from '@/app/components/base/icons/src/vender/features'\n+import Tooltip from '@/app/components/base/tooltip'\n+import ConfigContext from '@/context/debug-configuration'\n+import { SupportUploadFileTypes } from '@/app/components/workflow/types'\n+import { useFeatures, useFeaturesStore } from '@/app/components/base/features/hooks'\n+import Switch from '@/app/components/base/switch'\n+\n+const ConfigAudio: FC = () => {\n+  const { t } = useTranslation()\n+  const file = useFeatures(s => s.features.file)\n+  const featuresStore = useFeaturesStore()\n+  const { isShowAudioConfig } = useContext(ConfigContext)\n+\n+  const isAudioEnabled = file?.allowed_file_types?.includes(SupportUploadFileTypes.audio) ?? false\n+\n+  const handleChange = useCallback((value: boolean) => {\n+    const {\n+      features,\n+      setFeatures,\n+    } = featuresStore!.getState()\n+\n+    const newFeatures = produce(features, (draft) => {",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2188469961",
        "repo_full_name": "langgenius/dify",
        "pr_number": 21957,
        "pr_file": "web/app/components/app/configuration/config/config-audio.tsx",
        "discussion_id": "2188469961",
        "commented_code": "@@ -0,0 +1,78 @@\n+'use client'\n+import type { FC } from 'react'\n+import React, { useCallback } from 'react'\n+import { useTranslation } from 'react-i18next'\n+import produce from 'immer'\n+import { useContext } from 'use-context-selector'\n+\n+import { Microphone01 } from '@/app/components/base/icons/src/vender/features'\n+import Tooltip from '@/app/components/base/tooltip'\n+import ConfigContext from '@/context/debug-configuration'\n+import { SupportUploadFileTypes } from '@/app/components/workflow/types'\n+import { useFeatures, useFeaturesStore } from '@/app/components/base/features/hooks'\n+import Switch from '@/app/components/base/switch'\n+\n+const ConfigAudio: FC = () => {\n+  const { t } = useTranslation()\n+  const file = useFeatures(s => s.features.file)\n+  const featuresStore = useFeaturesStore()\n+  const { isShowAudioConfig } = useContext(ConfigContext)\n+\n+  const isAudioEnabled = file?.allowed_file_types?.includes(SupportUploadFileTypes.audio) ?? false\n+\n+  const handleChange = useCallback((value: boolean) => {\n+    const {\n+      features,\n+      setFeatures,\n+    } = featuresStore!.getState()\n+\n+    const newFeatures = produce(features, (draft) => {",
        "comment_created_at": "2025-07-06T16:54:58+00:00",
        "comment_author": "pavan-gopala",
        "comment_body": "try adding jsdoc comment telling little bit about new Features it increases readablity & easy to pick and work for others\r\n",
        "pr_file_module": null
      }
    ]
  }
]