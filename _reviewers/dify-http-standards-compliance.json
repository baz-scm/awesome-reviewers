[
  {
    "discussion_id": "2250229308",
    "pr_number": 23333,
    "pr_file": "api/controllers/service_api/dataset/document.py",
    "created_at": "2025-08-04T01:30:57+00:00",
    "commented_code": "\"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update_by_file\",\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update-by-file\",\n )\n-api.add_resource(DocumentDeleteApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")\n+api.add_resource(DocumentApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2250238404",
        "repo_full_name": "langgenius/dify",
        "pr_number": 23333,
        "pr_file": "api/controllers/service_api/dataset/document.py",
        "discussion_id": "2250229308",
        "commented_code": "@@ -588,7 +586,6 @@ def get(self, tenant_id, dataset_id, document_id):\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update_by_file\",\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update-by-file\",\n )\n-api.add_resource(DocumentDeleteApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")\n+api.add_resource(DocumentApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")",
        "comment_created_at": "2025-08-04T01:30:57+00:00",
        "comment_author": "hyongtao-code",
        "comment_body": "Hello, I think this is still not resolved. The AI is right \u2014 it should return either `return {\"result\": \"success\"}, 200` or `return \"\", 204`. I noticed quite a few similar issues in these two files, and I tend to prefer the former.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2250259325",
        "repo_full_name": "langgenius/dify",
        "pr_number": 23333,
        "pr_file": "api/controllers/service_api/dataset/document.py",
        "discussion_id": "2250229308",
        "commented_code": "@@ -588,7 +586,6 @@ def get(self, tenant_id, dataset_id, document_id):\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update_by_file\",\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update-by-file\",\n )\n-api.add_resource(DocumentDeleteApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")\n+api.add_resource(DocumentApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")",
        "comment_created_at": "2025-08-04T02:00:51+00:00",
        "comment_author": "hyongtao-code",
        "comment_body": "However, I\u2019m hesitant to make changes here because I am unsure if the modifications will impact the frontend display.",
        "pr_file_module": null
      },
      {
        "comment_id": "2250287369",
        "repo_full_name": "langgenius/dify",
        "pr_number": 23333,
        "pr_file": "api/controllers/service_api/dataset/document.py",
        "discussion_id": "2250229308",
        "commented_code": "@@ -588,7 +586,6 @@ def get(self, tenant_id, dataset_id, document_id):\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update_by_file\",\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update-by-file\",\n )\n-api.add_resource(DocumentDeleteApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")\n+api.add_resource(DocumentApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")",
        "comment_created_at": "2025-08-04T02:39:42+00:00",
        "comment_author": "crazywoola",
        "comment_body": "Sure, you can fix this https://github.com/langgenius/dify/issues/23336 in the same PR :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2250312011",
        "repo_full_name": "langgenius/dify",
        "pr_number": 23333,
        "pr_file": "api/controllers/service_api/dataset/document.py",
        "discussion_id": "2250229308",
        "commented_code": "@@ -588,7 +586,6 @@ def get(self, tenant_id, dataset_id, document_id):\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update_by_file\",\n     \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>/update-by-file\",\n )\n-api.add_resource(DocumentDeleteApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")\n+api.add_resource(DocumentApi, \"/datasets/<uuid:dataset_id>/documents/<uuid:document_id>\")",
        "comment_created_at": "2025-08-04T03:11:49+00:00",
        "comment_author": "hyongtao-code",
        "comment_body": "Done at commit c5cb0ae.\r\n\r\nThanks for your review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2230457568",
    "pr_number": 22878,
    "pr_file": "api/controllers/console/app/annotation.py",
    "created_at": "2025-07-25T08:08:44+00:00",
    "commented_code": "}\n         return response, 200\n \n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def delete(self, app_id):\n+        if not current_user.is_editor:\n+            raise Forbidden()\n+\n+        app_id = str(app_id)\n+        AppAnnotationService.clear_all_annotations(app_id)\n+        return {\"result\": \"success\"}, 200",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2230457568",
        "repo_full_name": "langgenius/dify",
        "pr_number": 22878,
        "pr_file": "api/controllers/console/app/annotation.py",
        "discussion_id": "2230457568",
        "commented_code": "@@ -123,6 +123,17 @@ def get(self, app_id):\n         }\n         return response, 200\n \n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def delete(self, app_id):\n+        if not current_user.is_editor:\n+            raise Forbidden()\n+\n+        app_id = str(app_id)\n+        AppAnnotationService.clear_all_annotations(app_id)\n+        return {\"result\": \"success\"}, 200",
        "comment_created_at": "2025-07-25T08:08:44+00:00",
        "comment_author": "crazywoola",
        "comment_body": "```suggestion\r\n        return {\"result\": \"success\"}, 204\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174433541",
    "pr_number": 20716,
    "pr_file": "api/controllers/console/workspace/tool_providers.py",
    "created_at": "2025-06-30T07:42:04+00:00",
    "commented_code": "return jsonable_encoder(ToolLabelsService.list_tool_labels())\n \n \n+class ToolProviderMCPApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def post(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"server_url\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"name\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_type\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_background\", type=str, required=False, nullable=True, location=\"json\", default=\"\")\n+        parser.add_argument(\"server_identifier\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        user = current_user\n+        if not validators.url(args[\"server_url\"]):\n+            raise ValueError(\"Server URL is not valid.\")\n+        return jsonable_encoder(\n+            MCPToolManageService.create_mcp_provider(\n+                tenant_id=user.current_tenant_id,\n+                server_url=args[\"server_url\"],\n+                name=args[\"name\"],\n+                icon=args[\"icon\"],\n+                icon_type=args[\"icon_type\"],\n+                icon_background=args[\"icon_background\"],\n+                user_id=user.id,\n+                server_identifier=args[\"server_identifier\"],\n+            )\n+        )\n+\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def put(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"server_url\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"name\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_type\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_background\", type=str, required=False, nullable=True, location=\"json\")\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"server_identifier\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        if not validators.url(args[\"server_url\"]):\n+            if \"[__HIDDEN__]\" in args[\"server_url\"]:\n+                pass\n+            else:\n+                raise ValueError(\"Server URL is not valid.\")\n+        MCPToolManageService.update_mcp_provider(\n+            tenant_id=current_user.current_tenant_id,\n+            provider_id=args[\"provider_id\"],\n+            server_url=args[\"server_url\"],\n+            name=args[\"name\"],\n+            icon=args[\"icon\"],\n+            icon_type=args[\"icon_type\"],\n+            icon_background=args[\"icon_background\"],\n+            server_identifier=args[\"server_identifier\"],\n+        )\n+        return {\"result\": \"success\"}\n+\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def delete(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        MCPToolManageService.delete_mcp_tool(tenant_id=current_user.current_tenant_id, provider_id=args[\"provider_id\"])\n+        return {\"result\": \"success\"}\n+\n+\n+class ToolMCPAuthApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def post(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"authorization_code\", type=str, required=False, nullable=True, location=\"json\")\n+        args = parser.parse_args()\n+        provider_id = args[\"provider_id\"]\n+        tenant_id = current_user.current_tenant_id\n+        provider = MCPToolManageService.get_mcp_provider_by_provider_id(provider_id, tenant_id)\n+        if not provider:\n+            raise ValueError(\"provider not found\")\n+        try:\n+            with MCPClient(\n+                provider.decrypted_server_url,\n+                provider_id,\n+                tenant_id,\n+                authed=False,\n+                authorization_code=args[\"authorization_code\"],\n+                for_list=True,\n+            ):\n+                MCPToolManageService.update_mcp_provider_credentials(\n+                    mcp_provider=provider,\n+                    credentials=provider.decrypted_credentials,\n+                    authed=True,\n+                )\n+                return {\"result\": \"success\"}\n+\n+        except MCPAuthError:\n+            auth_provider = OAuthClientProvider(provider_id, tenant_id, for_list=True)\n+\n+            return auth(auth_provider, provider.decrypted_server_url, args[\"authorization_code\"])\n+\n+\n+class ToolMCPDetailApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self, provider_id):\n+        user = current_user\n+        provider = MCPToolManageService.get_mcp_provider_by_provider_id(provider_id, user.current_tenant_id)\n+        return jsonable_encoder(ToolTransformService.mcp_provider_to_user_provider(provider))\n+\n+\n+class ToolMCPListAllApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self):\n+        user = current_user\n+        tenant_id = user.current_tenant_id\n+\n+        tools = MCPToolManageService.retrieve_mcp_tools(tenant_id=tenant_id)\n+\n+        return [tool.to_dict() for tool in tools]\n+\n+\n+class ToolMCPUpdateApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self, provider_id):",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2174433541",
        "repo_full_name": "langgenius/dify",
        "pr_number": 20716,
        "pr_file": "api/controllers/console/workspace/tool_providers.py",
        "discussion_id": "2174433541",
        "commented_code": "@@ -613,6 +620,160 @@ def get(self):\n         return jsonable_encoder(ToolLabelsService.list_tool_labels())\n \n \n+class ToolProviderMCPApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def post(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"server_url\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"name\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_type\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_background\", type=str, required=False, nullable=True, location=\"json\", default=\"\")\n+        parser.add_argument(\"server_identifier\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        user = current_user\n+        if not validators.url(args[\"server_url\"]):\n+            raise ValueError(\"Server URL is not valid.\")\n+        return jsonable_encoder(\n+            MCPToolManageService.create_mcp_provider(\n+                tenant_id=user.current_tenant_id,\n+                server_url=args[\"server_url\"],\n+                name=args[\"name\"],\n+                icon=args[\"icon\"],\n+                icon_type=args[\"icon_type\"],\n+                icon_background=args[\"icon_background\"],\n+                user_id=user.id,\n+                server_identifier=args[\"server_identifier\"],\n+            )\n+        )\n+\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def put(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"server_url\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"name\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_type\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"icon_background\", type=str, required=False, nullable=True, location=\"json\")\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"server_identifier\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        if not validators.url(args[\"server_url\"]):\n+            if \"[__HIDDEN__]\" in args[\"server_url\"]:\n+                pass\n+            else:\n+                raise ValueError(\"Server URL is not valid.\")\n+        MCPToolManageService.update_mcp_provider(\n+            tenant_id=current_user.current_tenant_id,\n+            provider_id=args[\"provider_id\"],\n+            server_url=args[\"server_url\"],\n+            name=args[\"name\"],\n+            icon=args[\"icon\"],\n+            icon_type=args[\"icon_type\"],\n+            icon_background=args[\"icon_background\"],\n+            server_identifier=args[\"server_identifier\"],\n+        )\n+        return {\"result\": \"success\"}\n+\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def delete(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        args = parser.parse_args()\n+        MCPToolManageService.delete_mcp_tool(tenant_id=current_user.current_tenant_id, provider_id=args[\"provider_id\"])\n+        return {\"result\": \"success\"}\n+\n+\n+class ToolMCPAuthApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def post(self):\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"provider_id\", type=str, required=True, nullable=False, location=\"json\")\n+        parser.add_argument(\"authorization_code\", type=str, required=False, nullable=True, location=\"json\")\n+        args = parser.parse_args()\n+        provider_id = args[\"provider_id\"]\n+        tenant_id = current_user.current_tenant_id\n+        provider = MCPToolManageService.get_mcp_provider_by_provider_id(provider_id, tenant_id)\n+        if not provider:\n+            raise ValueError(\"provider not found\")\n+        try:\n+            with MCPClient(\n+                provider.decrypted_server_url,\n+                provider_id,\n+                tenant_id,\n+                authed=False,\n+                authorization_code=args[\"authorization_code\"],\n+                for_list=True,\n+            ):\n+                MCPToolManageService.update_mcp_provider_credentials(\n+                    mcp_provider=provider,\n+                    credentials=provider.decrypted_credentials,\n+                    authed=True,\n+                )\n+                return {\"result\": \"success\"}\n+\n+        except MCPAuthError:\n+            auth_provider = OAuthClientProvider(provider_id, tenant_id, for_list=True)\n+\n+            return auth(auth_provider, provider.decrypted_server_url, args[\"authorization_code\"])\n+\n+\n+class ToolMCPDetailApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self, provider_id):\n+        user = current_user\n+        provider = MCPToolManageService.get_mcp_provider_by_provider_id(provider_id, user.current_tenant_id)\n+        return jsonable_encoder(ToolTransformService.mcp_provider_to_user_provider(provider))\n+\n+\n+class ToolMCPListAllApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self):\n+        user = current_user\n+        tenant_id = user.current_tenant_id\n+\n+        tools = MCPToolManageService.retrieve_mcp_tools(tenant_id=tenant_id)\n+\n+        return [tool.to_dict() for tool in tools]\n+\n+\n+class ToolMCPUpdateApi(Resource):\n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    def get(self, provider_id):",
        "comment_created_at": "2025-06-30T07:42:04+00:00",
        "comment_author": "QuantumGhost",
        "comment_body": "This api retrieves MCP tools from remote server and saves the returned list. It's better to use `PUT` for http method, and the method name in `MCPToolManageService` should be renamed to `refresh_mcp_tool_from_remote_server` to better reflect the fact that this is an updating operation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2179390910",
    "pr_number": 21505,
    "pr_file": "api/controllers/console/workspace/members.py",
    "created_at": "2025-07-02T07:59:17+00:00",
    "commented_code": "except Exception as e:\n                 raise ValueError(str(e))\n \n-        return {\"result\": \"success\"}, 204\n+        return {\"result\": \"success\", \"tenant_id\": str(current_user.current_tenant.id)}, 200",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2179390910",
        "repo_full_name": "langgenius/dify",
        "pr_number": 21505,
        "pr_file": "api/controllers/console/workspace/members.py",
        "discussion_id": "2179390910",
        "commented_code": "@@ -110,7 +111,7 @@ def delete(self, member_id):\n             except Exception as e:\n                 raise ValueError(str(e))\n \n-        return {\"result\": \"success\"}, 204\n+        return {\"result\": \"success\", \"tenant_id\": str(current_user.current_tenant.id)}, 200",
        "comment_created_at": "2025-07-02T07:59:17+00:00",
        "comment_author": "laipz8200",
        "comment_body": "Please consider modifying this method to POST, as according to the definition found at https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Methods/DELETE, the DELETE method should not include a body. Thank you!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108085503",
    "pr_number": 20023,
    "pr_file": "api/controllers/service_api/dataset/dataset.py",
    "created_at": "2025-05-27T03:29:15+00:00",
    "commented_code": "raise DatasetInUseError()\n \n \n+class DatasetTagsApi(DatasetApiResource):\n+    @validate_dataset_token\n+    @marshal_with(tag_fields)\n+    def get(self, _, dataset_id):\n+        \"\"\"Get all knowledge type tags.\"\"\"\n+        tags = TagService.get_tags(\"knowledge\", current_user.current_tenant_id)\n+\n+        return tags, 200\n+\n+    @validate_dataset_token\n+    def post(self, _, dataset_id):\n+        \"\"\"Add a knowledge type tag.\"\"\"\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+\n+        args = parser.parse_args()\n+        args[\"type\"] = \"knowledge\"\n+        tag = TagService.save_tags(args)\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": 0}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def patch(self, _, dataset_id):\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        tag = TagService.update_tags(args, args.get(\"tag_id\"))\n+\n+        binding_count = TagService.get_tag_binding_count(args.get(\"tag_id\"))\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": binding_count}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def delete(self, _, dataset_id):\n+        \"\"\"Delete a knowledge type tag.\"\"\"\n+        if not current_user.is_editor:\n+            raise Forbidden()\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        TagService.delete_tag(args.get(\"tag_id\"))\n+\n+        return {\"result\": \"success\"}, 200",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2108085503",
        "repo_full_name": "langgenius/dify",
        "pr_number": 20023,
        "pr_file": "api/controllers/service_api/dataset/dataset.py",
        "discussion_id": "2108085503",
        "commented_code": "@@ -320,5 +322,134 @@ def delete(self, _, dataset_id):\n             raise DatasetInUseError()\n \n \n+class DatasetTagsApi(DatasetApiResource):\n+    @validate_dataset_token\n+    @marshal_with(tag_fields)\n+    def get(self, _, dataset_id):\n+        \"\"\"Get all knowledge type tags.\"\"\"\n+        tags = TagService.get_tags(\"knowledge\", current_user.current_tenant_id)\n+\n+        return tags, 200\n+\n+    @validate_dataset_token\n+    def post(self, _, dataset_id):\n+        \"\"\"Add a knowledge type tag.\"\"\"\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+\n+        args = parser.parse_args()\n+        args[\"type\"] = \"knowledge\"\n+        tag = TagService.save_tags(args)\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": 0}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def patch(self, _, dataset_id):\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        tag = TagService.update_tags(args, args.get(\"tag_id\"))\n+\n+        binding_count = TagService.get_tag_binding_count(args.get(\"tag_id\"))\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": binding_count}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def delete(self, _, dataset_id):\n+        \"\"\"Delete a knowledge type tag.\"\"\"\n+        if not current_user.is_editor:\n+            raise Forbidden()\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        TagService.delete_tag(args.get(\"tag_id\"))\n+\n+        return {\"result\": \"success\"}, 200",
        "comment_created_at": "2025-05-27T03:29:15+00:00",
        "comment_author": "crazywoola",
        "comment_body": "Please use `return 204` instead",
        "pr_file_module": null
      },
      {
        "comment_id": "2108747784",
        "repo_full_name": "langgenius/dify",
        "pr_number": 20023,
        "pr_file": "api/controllers/service_api/dataset/dataset.py",
        "discussion_id": "2108085503",
        "commented_code": "@@ -320,5 +322,134 @@ def delete(self, _, dataset_id):\n             raise DatasetInUseError()\n \n \n+class DatasetTagsApi(DatasetApiResource):\n+    @validate_dataset_token\n+    @marshal_with(tag_fields)\n+    def get(self, _, dataset_id):\n+        \"\"\"Get all knowledge type tags.\"\"\"\n+        tags = TagService.get_tags(\"knowledge\", current_user.current_tenant_id)\n+\n+        return tags, 200\n+\n+    @validate_dataset_token\n+    def post(self, _, dataset_id):\n+        \"\"\"Add a knowledge type tag.\"\"\"\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+\n+        args = parser.parse_args()\n+        args[\"type\"] = \"knowledge\"\n+        tag = TagService.save_tags(args)\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": 0}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def patch(self, _, dataset_id):\n+        if not (current_user.is_editor or current_user.is_dataset_editor):\n+            raise Forbidden()\n+\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\n+            \"name\",\n+            nullable=False,\n+            required=True,\n+            help=\"Name must be between 1 to 50 characters.\",\n+            type=DatasetTagsApi._validate_tag_name,\n+        )\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        tag = TagService.update_tags(args, args.get(\"tag_id\"))\n+\n+        binding_count = TagService.get_tag_binding_count(args.get(\"tag_id\"))\n+\n+        response = {\"id\": tag.id, \"name\": tag.name, \"type\": tag.type, \"binding_count\": binding_count}\n+\n+        return response, 200\n+\n+    @validate_dataset_token\n+    def delete(self, _, dataset_id):\n+        \"\"\"Delete a knowledge type tag.\"\"\"\n+        if not current_user.is_editor:\n+            raise Forbidden()\n+        parser = reqparse.RequestParser()\n+        parser.add_argument(\"tag_id\", nullable=False, required=True, help=\"Id of a tag.\", type=str)\n+        args = parser.parse_args()\n+        TagService.delete_tag(args.get(\"tag_id\"))\n+\n+        return {\"result\": \"success\"}, 200",
        "comment_created_at": "2025-05-27T09:49:43+00:00",
        "comment_author": "ZombieBlue",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]