[
  {
    "discussion_id": "1274382672",
    "pr_number": 638,
    "pr_file": "web/app/components/i18n.tsx",
    "created_at": "2023-07-26T05:12:13+00:00",
    "commented_code": "locale: Locale\n   dictionary: Record<string, any>\n   children: React.ReactNode\n-  setLocaleOnClient: (locale: Locale) => void\n }\n const I18n: FC<II18nProps> = ({\n   dictionary,\n   children,\n+  locale,\n }) => {\n-  const locale = getLocaleOnClient()\n+  const clientLocale = getLocaleOnClient()\n+\n+  // force to change language if server have the locale to resolve the UI hydrate error\n+  locale && changeLanguage(locale)\n+\n   return (\n     <I18NContext.Provider value={{\n-      locale,\n+      locale: locale || clientLocale,\n       i18n: dictionary,\n       setLocaleOnClient,\n     }}>",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1274382672",
        "repo_full_name": "langgenius/dify",
        "pr_number": 638,
        "pr_file": "web/app/components/i18n.tsx",
        "discussion_id": "1274382672",
        "commented_code": "@@ -11,16 +11,20 @@ export type II18nProps = {\n   locale: Locale\n   dictionary: Record<string, any>\n   children: React.ReactNode\n-  setLocaleOnClient: (locale: Locale) => void\n }\n const I18n: FC<II18nProps> = ({\n   dictionary,\n   children,\n+  locale,\n }) => {\n-  const locale = getLocaleOnClient()\n+  const clientLocale = getLocaleOnClient()\n+\n+  // force to change language if server have the locale to resolve the UI hydrate error\n+  locale && changeLanguage(locale)\n+\n   return (\n     <I18NContext.Provider value={{\n-      locale,\n+      locale: locale || clientLocale,\n       i18n: dictionary,\n       setLocaleOnClient,\n     }}>",
        "comment_created_at": "2023-07-26T05:12:13+00:00",
        "comment_author": "CodiumAI-Agent",
        "comment_body": "**Suggestion:** Avoid calling `changeLanguage` directly in the component render. It's better to use `useEffect` hook to handle side effects like changing the language. This will ensure that the language is changed only when the `locale` prop changes.\n```suggestion\nconst I18n: FC<II18nProps> = ({\n  dictionary,\n  children,\n  locale,\n}) => {\n  const clientLocale = getLocaleOnClient()\n\n  useEffect(() => {\n    // force to change language if server have the locale to resolve the UI hydrate error\n    locale && changeLanguage(locale)\n  }, [locale])\n\n  return (\n    <I18NContext.Provider value={{\n      locale: locale || clientLocale,\n      i18n: dictionary,\n      setLocaleOnClient,\n    }}>\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1870475289",
    "pr_number": 11356,
    "pr_file": "web/app/components/base/mermaid/index.tsx",
    "created_at": "2024-12-05T01:02:40+00:00",
    "commented_code": "}\n   }\n \n+  useEffect(() => {\n+    if (typeof window !== 'undefined') {\n+      mermaid.initialize({\n+        startOnLoad: true,\n+        theme: 'neutral',\n+        look,\n+        flowchart: {\n+          htmlLabels: true,\n+          useMaxWidth: true,\n+        },\n+      })\n+\n+      localStorage.removeItem(chartId.current)\n+      renderFlowchart(props.PrimitiveCode).then()",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1870475289",
        "repo_full_name": "langgenius/dify",
        "pr_number": 11356,
        "pr_file": "web/app/components/base/mermaid/index.tsx",
        "discussion_id": "1870475289",
        "commented_code": "@@ -66,8 +67,26 @@ const Flowchart = React.forwardRef((props: {\n     }\n   }\n \n+  useEffect(() => {\n+    if (typeof window !== 'undefined') {\n+      mermaid.initialize({\n+        startOnLoad: true,\n+        theme: 'neutral',\n+        look,\n+        flowchart: {\n+          htmlLabels: true,\n+          useMaxWidth: true,\n+        },\n+      })\n+\n+      localStorage.removeItem(chartId.current)\n+      renderFlowchart(props.PrimitiveCode).then()",
        "comment_created_at": "2024-12-05T01:02:40+00:00",
        "comment_author": "crazywoola",
        "comment_body": "Please wrap the function by using `useCallback` and `async` and `await` .",
        "pr_file_module": null
      }
    ]
  }
]