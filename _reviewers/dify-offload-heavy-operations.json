[
  {
    "discussion_id": "2306253089",
    "pr_number": 24509,
    "pr_file": "api/controllers/console/app/conversation.py",
    "created_at": "2025-08-28T05:51:51+00:00",
    "commented_code": "return conversations\n \n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    @get_app_model(mode=AppMode.COMPLETION)\n+    def delete(self, app_model):",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2306253089",
        "repo_full_name": "langgenius/dify",
        "pr_number": 24509,
        "pr_file": "api/controllers/console/app/conversation.py",
        "discussion_id": "2306253089",
        "commented_code": "@@ -100,6 +100,37 @@ def get(self, app_model):\n \n         return conversations\n \n+    @setup_required\n+    @login_required\n+    @account_initialization_required\n+    @get_app_model(mode=AppMode.COMPLETION)\n+    def delete(self, app_model):",
        "comment_created_at": "2025-08-28T05:51:51+00:00",
        "comment_author": "crazywoola",
        "comment_body": "Please move these lines into service layer instead, consider using celery tasks  for removing large amount of data. :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2262715089",
    "pr_number": 23591,
    "pr_file": "api/services/conversation_service.py",
    "created_at": "2025-08-08T11:40:23+00:00",
    "commented_code": "return conversation\n \n+    @classmethod\n+    def get_conversation_for_deletion(\n+        cls, app_model: App, conversation_id: str, user: Optional[Union[Account, EndUser]]\n+    ):\n+        if isinstance(user, EndUser):\n+            # For service API users, allow deletion of any API-created conversation in the app\n+            conversation = (\n+                db.session.query(Conversation)\n+                .where(\n+                    Conversation.id == conversation_id,\n+                    Conversation.app_id == app_model.id,\n+                    Conversation.from_source == \"api\",\n+                    Conversation.is_deleted.is_(False),\n+                )\n+                .first()\n+            )\n+        else:\n+            # For console users, use the old code\n+            if user is None:\n+                raise ConversationNotExistsError()\n+\n+            conversation = (\n+                db.session.query(Conversation)\n+                .where(\n+                    Conversation.id == conversation_id,\n+                    Conversation.app_id == app_model.id,\n+                    Conversation.from_source == \"console\",\n+                    Conversation.from_account_id == user.id,\n+                    Conversation.is_deleted.is_(False),\n+                )\n+                .first()\n+            )\n+\n+        if not conversation:\n+            raise ConversationNotExistsError()\n+\n+        return conversation\n+\n     @classmethod\n     def delete(cls, app_model: App, conversation_id: str, user: Optional[Union[Account, EndUser]]):\n-        conversation = cls.get_conversation(app_model, conversation_id, user)\n+        try:\n+            # Verify conversation exists and user has permission to delete it\n+            conversation = cls.get_conversation_for_deletion(app_model, conversation_id, user)\n \n-        conversation.is_deleted = True\n-        conversation.updated_at = naive_utc_now()\n-        db.session.commit()\n+            if conversation.app_id != app_model.id:\n+                raise ConversationNotExistsError()\n+\n+            # Delete related data in correct order to respect foreign key constraints",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2262715089",
        "repo_full_name": "langgenius/dify",
        "pr_number": 23591,
        "pr_file": "api/services/conversation_service.py",
        "discussion_id": "2262715089",
        "commented_code": "@@ -170,13 +172,91 @@ def get_conversation(cls, app_model: App, conversation_id: str, user: Optional[U\n \n         return conversation\n \n+    @classmethod\n+    def get_conversation_for_deletion(\n+        cls, app_model: App, conversation_id: str, user: Optional[Union[Account, EndUser]]\n+    ):\n+        if isinstance(user, EndUser):\n+            # For service API users, allow deletion of any API-created conversation in the app\n+            conversation = (\n+                db.session.query(Conversation)\n+                .where(\n+                    Conversation.id == conversation_id,\n+                    Conversation.app_id == app_model.id,\n+                    Conversation.from_source == \"api\",\n+                    Conversation.is_deleted.is_(False),\n+                )\n+                .first()\n+            )\n+        else:\n+            # For console users, use the old code\n+            if user is None:\n+                raise ConversationNotExistsError()\n+\n+            conversation = (\n+                db.session.query(Conversation)\n+                .where(\n+                    Conversation.id == conversation_id,\n+                    Conversation.app_id == app_model.id,\n+                    Conversation.from_source == \"console\",\n+                    Conversation.from_account_id == user.id,\n+                    Conversation.is_deleted.is_(False),\n+                )\n+                .first()\n+            )\n+\n+        if not conversation:\n+            raise ConversationNotExistsError()\n+\n+        return conversation\n+\n     @classmethod\n     def delete(cls, app_model: App, conversation_id: str, user: Optional[Union[Account, EndUser]]):\n-        conversation = cls.get_conversation(app_model, conversation_id, user)\n+        try:\n+            # Verify conversation exists and user has permission to delete it\n+            conversation = cls.get_conversation_for_deletion(app_model, conversation_id, user)\n \n-        conversation.is_deleted = True\n-        conversation.updated_at = naive_utc_now()\n-        db.session.commit()\n+            if conversation.app_id != app_model.id:\n+                raise ConversationNotExistsError()\n+\n+            # Delete related data in correct order to respect foreign key constraints",
        "comment_created_at": "2025-08-08T11:40:23+00:00",
        "comment_author": "laipz8200",
        "comment_body": "Please consider doing the remaining deletions in Celery.",
        "pr_file_module": null
      }
    ]
  }
]