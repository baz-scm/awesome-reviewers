[
  {
    "discussion_id": "2048610181",
    "pr_number": 17877,
    "pr_file": "api/core/model_runtime/entities/model_entities.py",
    "created_at": "2025-04-17T09:42:47+00:00",
    "commented_code": "parameter_rules: list[ParameterRule] = []\n     pricing: Optional[PriceConfig] = None\n \n+    @model_validator(mode=\"after\")\n+    def validate_model(self):\n+        supported_schema_keys = [\"json_schema\"]\n+        schema_key = next((rule.name for rule in self.parameter_rules if rule.name in supported_schema_keys), None)\n+        if schema_key:",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2048610181",
        "repo_full_name": "langgenius/dify",
        "pr_number": 17877,
        "pr_file": "api/core/model_runtime/entities/model_entities.py",
        "discussion_id": "2048610181",
        "commented_code": "@@ -197,6 +198,18 @@ class AIModelEntity(ProviderModel):\n     parameter_rules: list[ParameterRule] = []\n     pricing: Optional[PriceConfig] = None\n \n+    @model_validator(mode=\"after\")\n+    def validate_model(self):\n+        supported_schema_keys = [\"json_schema\"]\n+        schema_key = next((rule.name for rule in self.parameter_rules if rule.name in supported_schema_keys), None)\n+        if schema_key:",
        "comment_created_at": "2025-04-17T09:42:47+00:00",
        "comment_author": "QuantumGhost",
        "comment_body": "I recommend using an early return to simplify the logic and reduce nested if statements:\n\n```py\nif not schema_key:\n    return self\n\n# Update self.features here\n...\n\nreturn self\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048623037",
    "pr_number": 17877,
    "pr_file": "api/core/workflow/nodes/llm/node.py",
    "created_at": "2025-04-17T09:51:08+00:00",
    "commented_code": "self.deduct_llm_quota(tenant_id=self.tenant_id, model_instance=model_instance, usage=usage)\n                     break\n             outputs = {\"text\": result_text, \"usage\": jsonable_encoder(usage), \"finish_reason\": finish_reason}\n-\n+            if self.node_data.structured_output_enabled and self.node_data.structured_output:",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2048623037",
        "repo_full_name": "langgenius/dify",
        "pr_number": 17877,
        "pr_file": "api/core/workflow/nodes/llm/node.py",
        "discussion_id": "2048623037",
        "commented_code": "@@ -192,7 +201,20 @@ def _run(self) -> Generator[NodeEvent | InNodeEvent, None, None]:\n                     self.deduct_llm_quota(tenant_id=self.tenant_id, model_instance=model_instance, usage=usage)\n                     break\n             outputs = {\"text\": result_text, \"usage\": jsonable_encoder(usage), \"finish_reason\": finish_reason}\n-\n+            if self.node_data.structured_output_enabled and self.node_data.structured_output:",
        "comment_created_at": "2025-04-17T09:51:08+00:00",
        "comment_author": "QuantumGhost",
        "comment_body": "Deeply nested if statements can be hard to read and maintain. \n\nI suggest extracting this section into a dedicated local function, such as `process_structured_output`, and placing it at the beginning of the `_run` method. You can then call this function here for improved clarity and organization.\n\nAdditionally, leveraging an early-return approach within `process_structured_output` can further simplify the logic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2046570534",
    "pr_number": 18026,
    "pr_file": "api/repositories/workflow_node_execution/sqlalchemy_repository.py",
    "created_at": "2025-04-16T09:59:40+00:00",
    "commented_code": "+\"\"\"\n+SQLAlchemy implementation of the WorkflowNodeExecutionRepository.\n+\"\"\"\n+\n+from collections.abc import Sequence\n+from typing import Optional\n+\n+from sqlalchemy import UnaryExpression, asc, desc, select\n+from sqlalchemy.orm import Session\n+\n+from core.repository.workflow_node_execution_repository import (\n+    OrderConfig,\n+    WorkflowNodeExecutionCriteria,\n+)\n+from models.workflow import WorkflowNodeExecution, WorkflowNodeExecutionStatus, WorkflowNodeExecutionTriggeredFrom\n+\n+\n+class SQLAlchemyWorkflowNodeExecutionRepository:\n+    \"\"\"\n+    SQLAlchemy implementation of the WorkflowNodeExecutionRepository interface.\n+\n+    This implementation supports multi-tenancy by filtering operations based on tenant_id.\n+    Each method that modifies data (save, update, delete) flushes changes to the database,\n+    but does not commit the transaction. Callers are responsible for committing\n+    or rolling back the transaction as needed.\n+    \"\"\"\n+\n+    def __init__(self, session: Session, tenant_id: str, app_id: Optional[str] = None):\n+        \"\"\"\n+        Initialize the repository with a SQLAlchemy session and tenant context.\n+\n+        Args:\n+            session: SQLAlchemy session\n+            tenant_id: Tenant ID for multi-tenancy\n+            app_id: Optional app ID for filtering by application\n+        \"\"\"\n+        self.session = session\n+        self.tenant_id = tenant_id\n+        self.app_id = app_id\n+\n+    def save(self, execution: WorkflowNodeExecution) -> None:\n+        \"\"\"\n+        Save a WorkflowNodeExecution instance and flush changes to the database.\n+        The caller is responsible for committing the transaction.\n+\n+        Args:\n+            execution: The WorkflowNodeExecution instance to save\n+        \"\"\"\n+        # Ensure tenant_id is set\n+        if not execution.tenant_id:\n+            execution.tenant_id = self.tenant_id\n+\n+        # Set app_id if provided and not already set\n+        if self.app_id and not execution.app_id:\n+            execution.app_id = self.app_id\n+\n+        self.session.add(execution)\n+        self.session.flush()\n+\n+    def get_by_node_execution_id(self, node_execution_id: str) -> Optional[WorkflowNodeExecution]:\n+        \"\"\"\n+        Retrieve a WorkflowNodeExecution by its node_execution_id.\n+\n+        Args:\n+            node_execution_id: The node execution ID\n+\n+        Returns:\n+            The WorkflowNodeExecution instance if found, None otherwise\n+        \"\"\"\n+        stmt = select(WorkflowNodeExecution).where(\n+            WorkflowNodeExecution.node_execution_id == node_execution_id,\n+            WorkflowNodeExecution.tenant_id == self.tenant_id,\n+        )\n+\n+        if self.app_id:\n+            stmt = stmt.where(WorkflowNodeExecution.app_id == self.app_id)\n+\n+        return self.session.scalar(stmt)\n+\n+    def get_by_workflow_run(\n+        self,\n+        workflow_run_id: str,\n+        order_config: Optional[OrderConfig] = None,\n+    ) -> Sequence[WorkflowNodeExecution]:\n+        \"\"\"\n+        Retrieve all WorkflowNodeExecution instances for a specific workflow run.\n+\n+        Args:\n+            workflow_run_id: The workflow run ID\n+            order_config: Optional configuration for ordering results\n+                order_config.order_by: List of fields to order by (e.g., [\"index\", \"created_at\"])\n+                order_config.order_direction: Direction to order (\"asc\" or \"desc\")\n+\n+        Returns:\n+            A list of WorkflowNodeExecution instances\n+        \"\"\"\n+        stmt = select(WorkflowNodeExecution).where(\n+            WorkflowNodeExecution.workflow_run_id == workflow_run_id,\n+            WorkflowNodeExecution.tenant_id == self.tenant_id,\n+            WorkflowNodeExecution.triggered_from == WorkflowNodeExecutionTriggeredFrom.WORKFLOW_RUN.value,\n+        )\n+\n+        if self.app_id:\n+            stmt = stmt.where(WorkflowNodeExecution.app_id == self.app_id)\n+\n+        # Apply ordering if provided\n+        if order_config and order_config.order_by:\n+            order_columns: list[UnaryExpression] = []\n+            for field in order_config.order_by:\n+                column = getattr(WorkflowNodeExecution, field, None)\n+                if column:\n+                    if order_config.order_direction == \"desc\":",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "2046570534",
        "repo_full_name": "langgenius/dify",
        "pr_number": 18026,
        "pr_file": "api/repositories/workflow_node_execution/sqlalchemy_repository.py",
        "discussion_id": "2046570534",
        "commented_code": "@@ -0,0 +1,241 @@\n+\"\"\"\n+SQLAlchemy implementation of the WorkflowNodeExecutionRepository.\n+\"\"\"\n+\n+from collections.abc import Sequence\n+from typing import Optional\n+\n+from sqlalchemy import UnaryExpression, asc, desc, select\n+from sqlalchemy.orm import Session\n+\n+from core.repository.workflow_node_execution_repository import (\n+    OrderConfig,\n+    WorkflowNodeExecutionCriteria,\n+)\n+from models.workflow import WorkflowNodeExecution, WorkflowNodeExecutionStatus, WorkflowNodeExecutionTriggeredFrom\n+\n+\n+class SQLAlchemyWorkflowNodeExecutionRepository:\n+    \"\"\"\n+    SQLAlchemy implementation of the WorkflowNodeExecutionRepository interface.\n+\n+    This implementation supports multi-tenancy by filtering operations based on tenant_id.\n+    Each method that modifies data (save, update, delete) flushes changes to the database,\n+    but does not commit the transaction. Callers are responsible for committing\n+    or rolling back the transaction as needed.\n+    \"\"\"\n+\n+    def __init__(self, session: Session, tenant_id: str, app_id: Optional[str] = None):\n+        \"\"\"\n+        Initialize the repository with a SQLAlchemy session and tenant context.\n+\n+        Args:\n+            session: SQLAlchemy session\n+            tenant_id: Tenant ID for multi-tenancy\n+            app_id: Optional app ID for filtering by application\n+        \"\"\"\n+        self.session = session\n+        self.tenant_id = tenant_id\n+        self.app_id = app_id\n+\n+    def save(self, execution: WorkflowNodeExecution) -> None:\n+        \"\"\"\n+        Save a WorkflowNodeExecution instance and flush changes to the database.\n+        The caller is responsible for committing the transaction.\n+\n+        Args:\n+            execution: The WorkflowNodeExecution instance to save\n+        \"\"\"\n+        # Ensure tenant_id is set\n+        if not execution.tenant_id:\n+            execution.tenant_id = self.tenant_id\n+\n+        # Set app_id if provided and not already set\n+        if self.app_id and not execution.app_id:\n+            execution.app_id = self.app_id\n+\n+        self.session.add(execution)\n+        self.session.flush()\n+\n+    def get_by_node_execution_id(self, node_execution_id: str) -> Optional[WorkflowNodeExecution]:\n+        \"\"\"\n+        Retrieve a WorkflowNodeExecution by its node_execution_id.\n+\n+        Args:\n+            node_execution_id: The node execution ID\n+\n+        Returns:\n+            The WorkflowNodeExecution instance if found, None otherwise\n+        \"\"\"\n+        stmt = select(WorkflowNodeExecution).where(\n+            WorkflowNodeExecution.node_execution_id == node_execution_id,\n+            WorkflowNodeExecution.tenant_id == self.tenant_id,\n+        )\n+\n+        if self.app_id:\n+            stmt = stmt.where(WorkflowNodeExecution.app_id == self.app_id)\n+\n+        return self.session.scalar(stmt)\n+\n+    def get_by_workflow_run(\n+        self,\n+        workflow_run_id: str,\n+        order_config: Optional[OrderConfig] = None,\n+    ) -> Sequence[WorkflowNodeExecution]:\n+        \"\"\"\n+        Retrieve all WorkflowNodeExecution instances for a specific workflow run.\n+\n+        Args:\n+            workflow_run_id: The workflow run ID\n+            order_config: Optional configuration for ordering results\n+                order_config.order_by: List of fields to order by (e.g., [\"index\", \"created_at\"])\n+                order_config.order_direction: Direction to order (\"asc\" or \"desc\")\n+\n+        Returns:\n+            A list of WorkflowNodeExecution instances\n+        \"\"\"\n+        stmt = select(WorkflowNodeExecution).where(\n+            WorkflowNodeExecution.workflow_run_id == workflow_run_id,\n+            WorkflowNodeExecution.tenant_id == self.tenant_id,\n+            WorkflowNodeExecution.triggered_from == WorkflowNodeExecutionTriggeredFrom.WORKFLOW_RUN.value,\n+        )\n+\n+        if self.app_id:\n+            stmt = stmt.where(WorkflowNodeExecution.app_id == self.app_id)\n+\n+        # Apply ordering if provided\n+        if order_config and order_config.order_by:\n+            order_columns: list[UnaryExpression] = []\n+            for field in order_config.order_by:\n+                column = getattr(WorkflowNodeExecution, field, None)\n+                if column:\n+                    if order_config.order_direction == \"desc\":",
        "comment_created_at": "2025-04-16T09:59:40+00:00",
        "comment_author": "QuantumGhost",
        "comment_body": "Using an early `continue` improves code readability and simplifies the logic.\n\nExample:\n\n```py\nif not column:\n    continue\n# do something with column\n...\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1947555556",
    "pr_number": 13401,
    "pr_file": "api/core/workflow/nodes/answer/answer_stream_processor.py",
    "created_at": "2025-02-08T10:03:29+00:00",
    "commented_code": ":param event: node run succeeded event\n         :return:\n         \"\"\"\n-        for answer_node_id, position in self.route_position.items():\n+        for answer_node_id, _ in self.route_position.items():",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1947555556",
        "repo_full_name": "langgenius/dify",
        "pr_number": 13401,
        "pr_file": "api/core/workflow/nodes/answer/answer_stream_processor.py",
        "discussion_id": "1947555556",
        "commented_code": "@@ -82,7 +82,7 @@ def _generate_stream_outputs_when_node_finished(\n         :param event: node run succeeded event\n         :return:\n         \"\"\"\n-        for answer_node_id, position in self.route_position.items():\n+        for answer_node_id, _ in self.route_position.items():",
        "comment_created_at": "2025-02-08T10:03:29+00:00",
        "comment_author": "laipz8200",
        "comment_body": "If you don't use value here, you can remove `.items()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1794682413",
    "pr_number": 9156,
    "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
    "created_at": "2024-10-10T05:31:54+00:00",
    "commented_code": "# with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
    "repo_full_name": "langgenius/dify",
    "discussion_comments": [
      {
        "comment_id": "1794682413",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:31:54+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "```suggestion\r\n        res = vn.ask(prompt, print_results=False, auto_train=True, visualize=allow_llm_to_see_data)\r\n```\r\nAvoid using positional boolean parameters in this case, set the parameter by name for better readability.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794684831",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:33:29+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "The `visualize` parameter controls whether to generate plotly code. Is this the exact objective you want to achieve?",
        "pr_file_module": null
      },
      {
        "comment_id": "1794694124",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:41:13+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "Firstly, visualize and allow_llm_to_see_data are different, and therefore they should not be set as visualize=allow_llm_to_see_data. Due to the #4930, the current visualize is always False, so we are removing the generate_chart. Additionally, we are adding the allow_llm_to_see_data parameter to control whether to allow LLM to see the data. @bowenliang123 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1794698356",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:45:01+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "> therefore they should not be set as visualize=allow_llm_to_see_data.\r\n\r\nIf so, which correct parameter you are setting?",
        "pr_file_module": null
      },
      {
        "comment_id": "1794702628",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:47:29+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "```\r\n    def ask(\r\n        self,\r\n        question: Union[str, None] = None,\r\n        print_results: bool = True,\r\n        auto_train: bool = True,\r\n        visualize: bool = True,  # if False, will not generate plotly code\r\n    ) -> Union[\r\n```\r\n\r\nI didn't see `allow_llm_to_see_data` parameter in `vn.ask` method signature of vanna 0.5.5 according to poetry lockfile.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794702841",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:47:47+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "Avoid using positional boolean parameters anyway.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794707093",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T05:52:36+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "vn.ask(prompt, False, True, False, allow_llm_to_see_data)\r\nprint_result = False\r\nauto_train = True\r\nvisualize = False\r\nallow_llm_to_see_data = allow_llm_to_see_data",
        "pr_file_module": null
      },
      {
        "comment_id": "1794714602",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T06:00:15+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "No. I dont have a clue for having allow_llm_to_see_data in this method. The code block above is copied from vanna 0.5.5(see https://github.com/vanna-ai/vanna/blob/v0.5.5/src/vanna/base/base.py). And `vn.ask` even does not accept `**kwargs ` anyway . Show your evidence.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794718593",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T06:04:22+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "Are you trying to use the newly added parameter >0.5.5 anyway?\r\nSo please bump the vanna package version as well. And make sure your're installing it correctly. Otherwise, the vanna version in peotry lockfile is the alignment for our discussion.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794723477",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T06:10:04+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "Thanks, I do indeed need to upgrade Vanna.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794726374",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T06:11:54+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "> Avoid using positional boolean parameters anyway.\r\n\r\nNo problem. Make sure you are using named boolean parameters.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794753420",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T06:33:12+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "ok",
        "pr_file_module": null
      },
      {
        "comment_id": "1794822974",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T07:14:53+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "@bowenliang123 done",
        "pr_file_module": null
      },
      {
        "comment_id": "1794825779",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T07:17:06+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "Thanks. But could you minimize the changes in lockfile? Revert the poetry.lock file first and run `dev/sync-poetry` script to update the poetry lockfile.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794903284",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T07:52:12+00:00",
        "comment_author": "hwzhuhao",
        "comment_body": "@bowenliang123 done",
        "pr_file_module": null
      },
      {
        "comment_id": "1794912728",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T07:57:10+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "LGTM.",
        "pr_file_module": null
      },
      {
        "comment_id": "1794913186",
        "repo_full_name": "langgenius/dify",
        "pr_number": 9156,
        "pr_file": "api/core/tools/provider/builtin/vanna/tools/vanna.py",
        "discussion_id": "1794682413",
        "commented_code": "@@ -111,9 +111,8 @@ def _invoke(\n         # with \"visualize\" set to True (default behavior) leads to remote code execution.\n         # Affected versions: <= 0.5.5\n         #########################################################################################\n-        generate_chart = False\n-        # generate_chart = tool_parameters.get(\"generate_chart\", True)\n-        res = vn.ask(prompt, False, True, generate_chart)\n+        allow_llm_to_see_data = tool_parameters.get(\"allow_llm_to_see_data\", False)\n+        res = vn.ask(prompt, False, True, False, allow_llm_to_see_data)",
        "comment_created_at": "2024-10-10T07:57:28+00:00",
        "comment_author": "bowenliang123",
        "comment_body": "LGTM.",
        "pr_file_module": null
      }
    ]
  }
]