[
  {
    "discussion_id": "2276113526",
    "pr_number": 34294,
    "pr_file": "app/assets/javascripts/discourse/tests/integration/components/header-contents-test.gjs",
    "created_at": "2025-08-14T09:38:10+00:00",
    "commented_code": "module(\"Integration | Component | Header | Contents\", function (hooks) {\n   setupRenderingTest(hooks);\n \n-  test(\"showHeaderSearch\", async function (assert) {\n-    const site = getOwner(this).lookup(\"service:site\");\n-    const toggleNavigationMenu = () => {};\n-\n-    sinon.stub(site, \"mobileView\").value(true);\n-\n-    await render(\n-      <template>\n-        <Contents\n-          @sidebarEnabled={{true}}\n-          @toggleNavigationMenu={{toggleNavigationMenu}}\n-          @showSidebar={{true}}\n-        >test</Contents>\n-      </template>\n-    );\n-\n-    assert\n-      .dom(\".floating-search-input-wrapper\")\n-      .doesNotExist(\"it does not display when the site is in mobile view\");\n+  module(\"header search\", function () {\n+    test(\"is hidden in mobile view\", async function (assert) {\n+      const site = getOwner(this).lookup(\"service:site\");\n+      const toggleNavigationMenu = () => {};\n+\n+      sinon.stub(site, \"mobileView\").value(false);\n+\n+      await render(\n+        <template>\n+          <Contents\n+            @sidebarEnabled={{true}}\n+            @toggleNavigationMenu={{toggleNavigationMenu}}\n+            @showSidebar={{true}}\n+          >\n+            test\n+          </Contents>\n+        </template>\n+      );\n+\n+      assert\n+        .dom(\".floating-search-input-wrapper\")\n+        .doesNotExist(\"it does not display when the site is in mobile view\");\n+    });\n+\n+    [\"signup\", \"login\", \"invites.show\", \"activate-account\"].forEach((name) => {",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2276113526",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34294,
        "pr_file": "app/assets/javascripts/discourse/tests/integration/components/header-contents-test.gjs",
        "discussion_id": "2276113526",
        "commented_code": "@@ -8,24 +8,82 @@ import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n module(\"Integration | Component | Header | Contents\", function (hooks) {\n   setupRenderingTest(hooks);\n \n-  test(\"showHeaderSearch\", async function (assert) {\n-    const site = getOwner(this).lookup(\"service:site\");\n-    const toggleNavigationMenu = () => {};\n-\n-    sinon.stub(site, \"mobileView\").value(true);\n-\n-    await render(\n-      <template>\n-        <Contents\n-          @sidebarEnabled={{true}}\n-          @toggleNavigationMenu={{toggleNavigationMenu}}\n-          @showSidebar={{true}}\n-        >test</Contents>\n-      </template>\n-    );\n-\n-    assert\n-      .dom(\".floating-search-input-wrapper\")\n-      .doesNotExist(\"it does not display when the site is in mobile view\");\n+  module(\"header search\", function () {\n+    test(\"is hidden in mobile view\", async function (assert) {\n+      const site = getOwner(this).lookup(\"service:site\");\n+      const toggleNavigationMenu = () => {};\n+\n+      sinon.stub(site, \"mobileView\").value(false);\n+\n+      await render(\n+        <template>\n+          <Contents\n+            @sidebarEnabled={{true}}\n+            @toggleNavigationMenu={{toggleNavigationMenu}}\n+            @showSidebar={{true}}\n+          >\n+            test\n+          </Contents>\n+        </template>\n+      );\n+\n+      assert\n+        .dom(\".floating-search-input-wrapper\")\n+        .doesNotExist(\"it does not display when the site is in mobile view\");\n+    });\n+\n+    [\"signup\", \"login\", \"invites.show\", \"activate-account\"].forEach((name) => {",
        "comment_created_at": "2025-08-14T09:38:10+00:00",
        "comment_author": "dbattersby",
        "comment_body": "I have done this in the past too but I think we generally want to avoid this pattern of generating tests from an array, as it makes it harder to debug later.\r\n\r\nWe can probably do this all within the same test by using `await render()` and `assert.dom` for each route.",
        "pr_file_module": null
      },
      {
        "comment_id": "2276173818",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34294,
        "pr_file": "app/assets/javascripts/discourse/tests/integration/components/header-contents-test.gjs",
        "discussion_id": "2276113526",
        "commented_code": "@@ -8,24 +8,82 @@ import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n module(\"Integration | Component | Header | Contents\", function (hooks) {\n   setupRenderingTest(hooks);\n \n-  test(\"showHeaderSearch\", async function (assert) {\n-    const site = getOwner(this).lookup(\"service:site\");\n-    const toggleNavigationMenu = () => {};\n-\n-    sinon.stub(site, \"mobileView\").value(true);\n-\n-    await render(\n-      <template>\n-        <Contents\n-          @sidebarEnabled={{true}}\n-          @toggleNavigationMenu={{toggleNavigationMenu}}\n-          @showSidebar={{true}}\n-        >test</Contents>\n-      </template>\n-    );\n-\n-    assert\n-      .dom(\".floating-search-input-wrapper\")\n-      .doesNotExist(\"it does not display when the site is in mobile view\");\n+  module(\"header search\", function () {\n+    test(\"is hidden in mobile view\", async function (assert) {\n+      const site = getOwner(this).lookup(\"service:site\");\n+      const toggleNavigationMenu = () => {};\n+\n+      sinon.stub(site, \"mobileView\").value(false);\n+\n+      await render(\n+        <template>\n+          <Contents\n+            @sidebarEnabled={{true}}\n+            @toggleNavigationMenu={{toggleNavigationMenu}}\n+            @showSidebar={{true}}\n+          >\n+            test\n+          </Contents>\n+        </template>\n+      );\n+\n+      assert\n+        .dom(\".floating-search-input-wrapper\")\n+        .doesNotExist(\"it does not display when the site is in mobile view\");\n+    });\n+\n+    [\"signup\", \"login\", \"invites.show\", \"activate-account\"].forEach((name) => {",
        "comment_created_at": "2025-08-14T10:01:57+00:00",
        "comment_author": "yuriyaran",
        "comment_body": "> We can probably do this all within the same test by using await render() and assert.dom for each route.\r\n\r\n@dbattersby, this was my initial implementation, but having `async/await` inside `forEach(async () => { await render()})` causes race conditions, and is unreliable in terms of proper rendering order causing asserts to fail",
        "pr_file_module": null
      },
      {
        "comment_id": "2276245311",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34294,
        "pr_file": "app/assets/javascripts/discourse/tests/integration/components/header-contents-test.gjs",
        "discussion_id": "2276113526",
        "commented_code": "@@ -8,24 +8,82 @@ import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n module(\"Integration | Component | Header | Contents\", function (hooks) {\n   setupRenderingTest(hooks);\n \n-  test(\"showHeaderSearch\", async function (assert) {\n-    const site = getOwner(this).lookup(\"service:site\");\n-    const toggleNavigationMenu = () => {};\n-\n-    sinon.stub(site, \"mobileView\").value(true);\n-\n-    await render(\n-      <template>\n-        <Contents\n-          @sidebarEnabled={{true}}\n-          @toggleNavigationMenu={{toggleNavigationMenu}}\n-          @showSidebar={{true}}\n-        >test</Contents>\n-      </template>\n-    );\n-\n-    assert\n-      .dom(\".floating-search-input-wrapper\")\n-      .doesNotExist(\"it does not display when the site is in mobile view\");\n+  module(\"header search\", function () {\n+    test(\"is hidden in mobile view\", async function (assert) {\n+      const site = getOwner(this).lookup(\"service:site\");\n+      const toggleNavigationMenu = () => {};\n+\n+      sinon.stub(site, \"mobileView\").value(false);\n+\n+      await render(\n+        <template>\n+          <Contents\n+            @sidebarEnabled={{true}}\n+            @toggleNavigationMenu={{toggleNavigationMenu}}\n+            @showSidebar={{true}}\n+          >\n+            test\n+          </Contents>\n+        </template>\n+      );\n+\n+      assert\n+        .dom(\".floating-search-input-wrapper\")\n+        .doesNotExist(\"it does not display when the site is in mobile view\");\n+    });\n+\n+    [\"signup\", \"login\", \"invites.show\", \"activate-account\"].forEach((name) => {",
        "comment_created_at": "2025-08-14T10:34:24+00:00",
        "comment_author": "dbattersby",
        "comment_body": "I was meaning that we can remove the `forEach` loop and just assert for each of those routes within the body of the test, as the test is async already. But this is more of a suggestion and not a show stopper IMO as we do have this pattern in various places already \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "2278872132",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34294,
        "pr_file": "app/assets/javascripts/discourse/tests/integration/components/header-contents-test.gjs",
        "discussion_id": "2276113526",
        "commented_code": "@@ -8,24 +8,82 @@ import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n module(\"Integration | Component | Header | Contents\", function (hooks) {\n   setupRenderingTest(hooks);\n \n-  test(\"showHeaderSearch\", async function (assert) {\n-    const site = getOwner(this).lookup(\"service:site\");\n-    const toggleNavigationMenu = () => {};\n-\n-    sinon.stub(site, \"mobileView\").value(true);\n-\n-    await render(\n-      <template>\n-        <Contents\n-          @sidebarEnabled={{true}}\n-          @toggleNavigationMenu={{toggleNavigationMenu}}\n-          @showSidebar={{true}}\n-        >test</Contents>\n-      </template>\n-    );\n-\n-    assert\n-      .dom(\".floating-search-input-wrapper\")\n-      .doesNotExist(\"it does not display when the site is in mobile view\");\n+  module(\"header search\", function () {\n+    test(\"is hidden in mobile view\", async function (assert) {\n+      const site = getOwner(this).lookup(\"service:site\");\n+      const toggleNavigationMenu = () => {};\n+\n+      sinon.stub(site, \"mobileView\").value(false);\n+\n+      await render(\n+        <template>\n+          <Contents\n+            @sidebarEnabled={{true}}\n+            @toggleNavigationMenu={{toggleNavigationMenu}}\n+            @showSidebar={{true}}\n+          >\n+            test\n+          </Contents>\n+        </template>\n+      );\n+\n+      assert\n+        .dom(\".floating-search-input-wrapper\")\n+        .doesNotExist(\"it does not display when the site is in mobile view\");\n+    });\n+\n+    [\"signup\", \"login\", \"invites.show\", \"activate-account\"].forEach((name) => {",
        "comment_created_at": "2025-08-15T12:01:04+00:00",
        "comment_author": "yuriyaran",
        "comment_body": "Thanks, @dbattersby. Totally agree that looping makes it harder to debug. I reworked the tests per each case individually.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2270040125",
    "pr_number": 34218,
    "pr_file": "app/assets/javascripts/discourse/tests/integration/components/color-input-test.gjs",
    "created_at": "2025-08-12T14:23:36+00:00",
    "commented_code": "+import { fillIn, render } from \"@ember/test-helpers\";\n+import { module, test } from \"qunit\";\n+import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n+import ColorInput from \"admin/components/color-input\";\n+\n+module(\"Integration | Component | ColorInput\", function (hooks) {\n+  setupRenderingTest(hooks);\n+\n+  const testCases = {\n+    \"black text\": [\"000\", \"000000\"],\n+    \"white text\": [\"fff\", \"ffffff\"],\n+    \"2 digit sequence\": [\"f2f\", \"f2f2f2\"],\n+    \"3 digit sequence\": [\"DDD\", \"DDDDDD\"],\n+    \"with no sequence\": [\"0f8\", \"0f8\"],\n+  };\n+\n+  async function testHexCode(assert, short, expanded) {\n+    let result = null;\n+\n+    const autocompleteHex = (color) => {\n+      result = color.replace(\"#\", \"\");\n+    };\n+\n+    await render(\n+      <template><ColorInput @onChangeColor={{autocompleteHex}} /></template>\n+    );\n+\n+    await fillIn(\".hex-input\", short);\n+    assert.strictEqual(result, expanded, \"autocompleted hex code\");\n+  }\n+\n+  Object.entries(testCases).forEach(([name, [short, expanded]]) => {\n+    test(name, async function (assert) {\n+      await testHexCode(assert, short, expanded);\n+    });\n+  });",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2270040125",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34218,
        "pr_file": "app/assets/javascripts/discourse/tests/integration/components/color-input-test.gjs",
        "discussion_id": "2270040125",
        "commented_code": "@@ -0,0 +1,37 @@\n+import { fillIn, render } from \"@ember/test-helpers\";\n+import { module, test } from \"qunit\";\n+import { setupRenderingTest } from \"discourse/tests/helpers/component-test\";\n+import ColorInput from \"admin/components/color-input\";\n+\n+module(\"Integration | Component | ColorInput\", function (hooks) {\n+  setupRenderingTest(hooks);\n+\n+  const testCases = {\n+    \"black text\": [\"000\", \"000000\"],\n+    \"white text\": [\"fff\", \"ffffff\"],\n+    \"2 digit sequence\": [\"f2f\", \"f2f2f2\"],\n+    \"3 digit sequence\": [\"DDD\", \"DDDDDD\"],\n+    \"with no sequence\": [\"0f8\", \"0f8\"],\n+  };\n+\n+  async function testHexCode(assert, short, expanded) {\n+    let result = null;\n+\n+    const autocompleteHex = (color) => {\n+      result = color.replace(\"#\", \"\");\n+    };\n+\n+    await render(\n+      <template><ColorInput @onChangeColor={{autocompleteHex}} /></template>\n+    );\n+\n+    await fillIn(\".hex-input\", short);\n+    assert.strictEqual(result, expanded, \"autocompleted hex code\");\n+  }\n+\n+  Object.entries(testCases).forEach(([name, [short, expanded]]) => {\n+    test(name, async function (assert) {\n+      await testHexCode(assert, short, expanded);\n+    });\n+  });",
        "comment_created_at": "2025-08-12T14:23:36+00:00",
        "comment_author": "CvX",
        "comment_body": "shorter and easier to debug (e.g. can set a breakpoint on a specific case)\r\n\r\n```suggestion\r\n  test(\"autocompletes hex codes\", async function (assert) {\r\n    let result;\r\n    const autocompleteHex = (color) => (result = color.replace(\"#\", \"\"));\r\n\r\n    await render(\r\n      <template><ColorInput @onChangeColor={{autocompleteHex}} /></template>\r\n    );\r\n\r\n    await fillIn(\".hex-input\", \"000\");\r\n    assert.strictEqual(result, \"000000\", \"black text\");\r\n    await fillIn(\".hex-input\", \"fff\");\r\n    assert.strictEqual(result, \"ffffff\", \"white text\");\r\n    await fillIn(\".hex-input\", \"f2f\");\r\n    assert.strictEqual(result, \"f2f2f2\", \"2 digit sequence\");\r\n    await fillIn(\".hex-input\", \"DDD\");\r\n    assert.strictEqual(result, \"DDDDDD\", \"3 digit sequence\");\r\n    await fillIn(\".hex-input\", \"0f8\");\r\n    assert.strictEqual(result, \"0f8\", \"with no sequence\");\r\n  });\r\n```",
        "pr_file_module": null
      }
    ]
  }
]