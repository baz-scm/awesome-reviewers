[
  {
    "discussion_id": "2292467388",
    "pr_number": 34466,
    "pr_file": "lib/middleware/crawler_hooks.rb",
    "created_at": "2025-08-22T01:24:27+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module Middleware\n+  class CrawlerHooks\n+    def initialize(app)\n+      @app = app\n+    end\n+\n+    def call(env)\n+      request = Rack::Request.new(env)\n+      status, headers, response = @app.call(env)\n+\n+      if status == 200 && headers[\"Content-Type\"]&.include?(\"text/html\") &&\n+           CrawlerDetection.crawler?(request.user_agent, request.get_header(\"HTTP_VIA\"))",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2292467388",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34466,
        "pr_file": "lib/middleware/crawler_hooks.rb",
        "discussion_id": "2292467388",
        "commented_code": "@@ -0,0 +1,48 @@\n+# frozen_string_literal: true\n+\n+module Middleware\n+  class CrawlerHooks\n+    def initialize(app)\n+      @app = app\n+    end\n+\n+    def call(env)\n+      request = Rack::Request.new(env)\n+      status, headers, response = @app.call(env)\n+\n+      if status == 200 && headers[\"Content-Type\"]&.include?(\"text/html\") &&\n+           CrawlerDetection.crawler?(request.user_agent, request.get_header(\"HTTP_VIA\"))",
        "comment_created_at": "2025-08-22T01:24:27+00:00",
        "comment_author": "tgxworld",
        "comment_body": "Instead of partially duplicating the crawler layout logic here, perhaps we can set a header in the response to indicate we are using the crawler view? \n\nhttps://github.com/discourse/discourse/blob/bae64dec56a9d58d853cda0aa243a7d57710f12a/app/controllers/application_controller.rb#L74-L82\n\nThere is also a performance aspect to this where ` CrawlerDetection.crawler?` is now run twice for every request.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157982989",
    "pr_number": 33283,
    "pr_file": "app/serializers/site_serializer.rb",
    "created_at": "2025-06-20T03:43:12+00:00",
    "commented_code": "def ordered_flags(flags)\n     flags.map { |id| PostActionType.new(id: id) }\n   end\n+\n+  def used_flag_ids(flag_ids)\n+    @used_flag_ids ||= Flag.used_flag_ids(flag_ids)",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2157982989",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33283,
        "pr_file": "app/serializers/site_serializer.rb",
        "discussion_id": "2157982989",
        "commented_code": "@@ -405,4 +410,8 @@ def full_name_visible_in_signup\n   def ordered_flags(flags)\n     flags.map { |id| PostActionType.new(id: id) }\n   end\n+\n+  def used_flag_ids(flag_ids)\n+    @used_flag_ids ||= Flag.used_flag_ids(flag_ids)",
        "comment_created_at": "2025-06-20T03:43:12+00:00",
        "comment_author": "tgxworld",
        "comment_body": "Memoize here so we don't execute the query twice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2145076973",
    "pr_number": 33176,
    "pr_file": "migrations/lib/converters/discourse/utilities/data_helper.rb",
    "created_at": "2025-06-13T13:17:38+00:00",
    "commented_code": null,
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2145076973",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33176,
        "pr_file": "migrations/lib/converters/discourse/utilities/data_helper.rb",
        "discussion_id": "2145076973",
        "commented_code": null,
        "comment_created_at": "2025-06-13T13:17:38+00:00",
        "comment_author": "s3lase",
        "comment_body": "This is a nifty extraction.  Been thinking about this after doing a couple of upload fields\r\n\r\n1. I see the `TODO` for `type`,  but for now, could we make it flexible. I'd like to  reuse this for other non-avatar uploads fields\r\n2.  Minor perf nit: Could we cache the key interpolations here? Skips the interpolation for every row\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2146015790",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33176,
        "pr_file": "migrations/lib/converters/discourse/utilities/data_helper.rb",
        "discussion_id": "2145076973",
        "commented_code": null,
        "comment_created_at": "2025-06-13T20:11:05+00:00",
        "comment_author": "gschlager",
        "comment_body": "1. Oh, I completely forgot to extract the `type`. I'm sure I would have noticed eventually. :blush:  I'll fix it.\r\n\r\n2. I've been thinking about that. I thought, keep it simple, but now that you mention it, I guess it's worth adding a slightly more complex implementation to cache the keys.",
        "pr_file_module": null
      }
    ]
  }
]