[
  {
    "discussion_id": "2297006546",
    "pr_number": 34504,
    "pr_file": "app/assets/javascripts/discourse/app/controllers/preferences/profile.js",
    "created_at": "2025-08-25T03:16:50+00:00",
    "commented_code": "return siteFields\n       .filter(\n         (siteField) =>\n-          siteField.requirement === \"for_all_users\" &&\n-          isEmpty(userFields[siteField.id])\n+          siteField.requirement === \"for_all_users\" && !userFields[siteField.id]",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2297006546",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34504,
        "pr_file": "app/assets/javascripts/discourse/app/controllers/preferences/profile.js",
        "discussion_id": "2297006546",
        "commented_code": "@@ -91,8 +91,7 @@ export default class ProfileController extends Controller {\n     return siteFields\n       .filter(\n         (siteField) =>\n-          siteField.requirement === \"for_all_users\" &&\n-          isEmpty(userFields[siteField.id])\n+          siteField.requirement === \"for_all_users\" && !userFields[siteField.id]",
        "comment_created_at": "2025-08-25T03:16:50+00:00",
        "comment_author": "Drenmi",
        "comment_body": "Fields of type `confirmation` are automatically cast from `null` to `false`. This accounts for that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2286813087",
    "pr_number": 34426,
    "pr_file": "app/assets/javascripts/float-kit/addon/lib/update-position.js",
    "created_at": "2025-08-20T02:13:34+00:00",
    "commented_code": "middleware.push(inline());\n     }\n \n-    middleware.push(visibilityOptimizerMiddleware);\n+    const visibilityOptimizer =\n+      options.visibilityOptimizer ?? VISIBILITY_OPTIMIZERS.FLIP;\n+\n+    if (visibilityOptimizer !== VISIBILITY_OPTIMIZERS.NONE) {\n+      const visibilityOptimizerMiddleware =\n+        visibilityOptimizer === VISIBILITY_OPTIMIZERS.AUTO_PLACEMENT\n+          ? autoPlacement({\n+              allowedPlacements:\n+                options.allowedPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            })\n+          : flip({\n+              fallbackPlacements:\n+                options.fallbackPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            });\n+      middleware.push(visibilityOptimizerMiddleware);\n+    }\n \n     let limiter;\n     if (options.limitShift) {\n       limiter = limitShift(options.limitShift);\n     }\n+    let crossAxis = true;\n+    if (options.crossAxisShift !== undefined) {\n+      crossAxis = options.crossAxisShift;\n+    }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2286813087",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34426,
        "pr_file": "app/assets/javascripts/float-kit/addon/lib/update-position.js",
        "discussion_id": "2286813087",
        "commented_code": "@@ -63,17 +48,38 @@ export async function updatePosition(trigger, content, options) {\n       middleware.push(inline());\n     }\n \n-    middleware.push(visibilityOptimizerMiddleware);\n+    const visibilityOptimizer =\n+      options.visibilityOptimizer ?? VISIBILITY_OPTIMIZERS.FLIP;\n+\n+    if (visibilityOptimizer !== VISIBILITY_OPTIMIZERS.NONE) {\n+      const visibilityOptimizerMiddleware =\n+        visibilityOptimizer === VISIBILITY_OPTIMIZERS.AUTO_PLACEMENT\n+          ? autoPlacement({\n+              allowedPlacements:\n+                options.allowedPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            })\n+          : flip({\n+              fallbackPlacements:\n+                options.fallbackPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            });\n+      middleware.push(visibilityOptimizerMiddleware);\n+    }\n \n     let limiter;\n     if (options.limitShift) {\n       limiter = limitShift(options.limitShift);\n     }\n+    let crossAxis = true;\n+    if (options.crossAxisShift !== undefined) {\n+      crossAxis = options.crossAxisShift;\n+    }",
        "comment_created_at": "2025-08-20T02:13:34+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "```suggestion\r\n    const crossAxis = options.crossAxisShift ?? true;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2286813402",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34426,
        "pr_file": "app/assets/javascripts/float-kit/addon/lib/update-position.js",
        "discussion_id": "2286813087",
        "commented_code": "@@ -63,17 +48,38 @@ export async function updatePosition(trigger, content, options) {\n       middleware.push(inline());\n     }\n \n-    middleware.push(visibilityOptimizerMiddleware);\n+    const visibilityOptimizer =\n+      options.visibilityOptimizer ?? VISIBILITY_OPTIMIZERS.FLIP;\n+\n+    if (visibilityOptimizer !== VISIBILITY_OPTIMIZERS.NONE) {\n+      const visibilityOptimizerMiddleware =\n+        visibilityOptimizer === VISIBILITY_OPTIMIZERS.AUTO_PLACEMENT\n+          ? autoPlacement({\n+              allowedPlacements:\n+                options.allowedPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            })\n+          : flip({\n+              fallbackPlacements:\n+                options.fallbackPlacements ?? FLOAT_UI_PLACEMENTS,\n+              ...detectOverflowOptions,\n+            });\n+      middleware.push(visibilityOptimizerMiddleware);\n+    }\n \n     let limiter;\n     if (options.limitShift) {\n       limiter = limitShift(options.limitShift);\n     }\n+    let crossAxis = true;\n+    if (options.crossAxisShift !== undefined) {\n+      crossAxis = options.crossAxisShift;\n+    }",
        "comment_created_at": "2025-08-20T02:13:52+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "Or even just move this down to the `shift` now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2246824000",
    "pr_number": 33857,
    "pr_file": "app/assets/javascripts/discourse/app/static/prosemirror/extensions/mention.js",
    "created_at": "2025-08-01T03:33:10+00:00",
    "commented_code": "} else {\n       INVALID_MENTIONS.add(name);\n     }\n+\n+    checkMentionWarning(name, response, context);\n   });\n }\n \n+function checkMentionWarning(name, response, context) {\n+  const hereCount = parseInt(response?.here_count, 10) || 0;",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2246824000",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33857,
        "pr_file": "app/assets/javascripts/discourse/app/static/prosemirror/extensions/mention.js",
        "discussion_id": "2246824000",
        "commented_code": "@@ -182,7 +184,73 @@ async function fetchMentions(names) {\n     } else {\n       INVALID_MENTIONS.add(name);\n     }\n+\n+    checkMentionWarning(name, response, context);\n   });\n }\n \n+function checkMentionWarning(name, response, context) {\n+  const hereCount = parseInt(response?.here_count, 10) || 0;",
        "comment_created_at": "2025-08-01T03:33:10+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "We do some initial `response?.` safe navigation here but then not below, could we just return if response is null?",
        "pr_file_module": null
      },
      {
        "comment_id": "2247007932",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33857,
        "pr_file": "app/assets/javascripts/discourse/app/static/prosemirror/extensions/mention.js",
        "discussion_id": "2246824000",
        "commented_code": "@@ -182,7 +184,73 @@ async function fetchMentions(names) {\n     } else {\n       INVALID_MENTIONS.add(name);\n     }\n+\n+    checkMentionWarning(name, response, context);\n   });\n }\n \n+function checkMentionWarning(name, response, context) {\n+  const hereCount = parseInt(response?.here_count, 10) || 0;",
        "comment_created_at": "2025-08-01T05:58:11+00:00",
        "comment_author": "dbattersby",
        "comment_body": "Unfortunately we can't as `@here` mentions are just one potential case, there are also group and user mentions too. It looks like the safe navigation is used on other values too so I don't think it's an issue but we can possibly clean this code up a little once we extract to a new service.",
        "pr_file_module": null
      },
      {
        "comment_id": "2250208073",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33857,
        "pr_file": "app/assets/javascripts/discourse/app/static/prosemirror/extensions/mention.js",
        "discussion_id": "2246824000",
        "commented_code": "@@ -182,7 +184,73 @@ async function fetchMentions(names) {\n     } else {\n       INVALID_MENTIONS.add(name);\n     }\n+\n+    checkMentionWarning(name, response, context);\n   });\n }\n \n+function checkMentionWarning(name, response, context) {\n+  const hereCount = parseInt(response?.here_count, 10) || 0;",
        "comment_created_at": "2025-08-04T00:36:15+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "OK all good",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2158787201",
    "pr_number": 33181,
    "pr_file": "app/assets/javascripts/discourse/app/lib/render-tags.js",
    "created_at": "2025-06-20T11:55:27+00:00",
    "commented_code": "}\n \n export default function (topic, params) {\n-  let tags = topic.tags;\n+  let tags = topic?.tags || params?.tags;\n   let buffer = \"\";\n   let tagsForUser = null;\n   let tagName;\n-  const isPrivateMessage = topic.get(\"isPrivateMessage\");\n+\n+  const isPrivateMessage = topic?.get?.(\"isPrivateMessage\");",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2158787201",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33181,
        "pr_file": "app/assets/javascripts/discourse/app/lib/render-tags.js",
        "discussion_id": "2158787201",
        "commented_code": "@@ -25,15 +25,16 @@ export function clearTagsHtmlCallbacks() {\n }\n \n export default function (topic, params) {\n-  let tags = topic.tags;\n+  let tags = topic?.tags || params?.tags;\n   let buffer = \"\";\n   let tagsForUser = null;\n   let tagName;\n-  const isPrivateMessage = topic.get(\"isPrivateMessage\");\n+\n+  const isPrivateMessage = topic?.get?.(\"isPrivateMessage\");",
        "comment_created_at": "2025-06-20T11:55:27+00:00",
        "comment_author": "CvX",
        "comment_body": "are there cases where `topic` is present but isn't an `EmberObject`? (i.e. doesn't have a `get` method?)",
        "pr_file_module": null
      }
    ]
  }
]