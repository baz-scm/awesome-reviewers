[
  {
    "discussion_id": "2280606626",
    "pr_number": 34361,
    "pr_file": "app/assets/javascripts/discourse/app/controllers/preferences/interface.js",
    "created_at": "2025-08-16T21:17:00+00:00",
    "commented_code": "loadColorScheme(colorSchemeId) {\n     this.setProperties({\n       selectedColorSchemeId: colorSchemeId,\n-      previewingColorScheme: this.isViewingOwnProfile,\n+      previewingColorScheme: this._shouldEnablePreview(false),\n     });\n \n     if (!this.isViewingOwnProfile) {\n       return;\n     }\n \n-    if (colorSchemeId < 0) {\n-      const defaultTheme = this.userSelectableThemes.findBy(\"id\", this.themeId);\n-\n-      if (defaultTheme && defaultTheme.color_scheme_id) {\n-        colorSchemeId = defaultTheme.color_scheme_id;\n-      }\n-    }\n-    loadColorSchemeStylesheet(colorSchemeId, this.themeId);\n-    if (this.selectedDarkColorSchemeId === -1) {\n-      // set this same scheme for dark mode preview when dark scheme is disabled\n-      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n+    // only preview light schemes when in light mode\n+    if (!this._isInLightMode()) {\n+      return;\n     }\n+\n+    this._previewColorScheme(false);\n   }\n \n   @action\n   loadDarkColorScheme(colorSchemeId) {\n     this.setProperties({\n       selectedDarkColorSchemeId: colorSchemeId,\n-      previewingColorScheme: this.isViewingOwnProfile,\n+      previewingColorScheme: this._shouldEnablePreview(true),\n     });\n \n     if (!this.isViewingOwnProfile) {\n       return;\n     }\n \n-    if (colorSchemeId === -1) {\n-      // load preview of regular scheme when dark scheme is disabled\n-      loadColorSchemeStylesheet(this.selectedColorSchemeId, this.themeId, true);\n-      this.session.set(\"darkModeAvailable\", false);\n-    } else {\n-      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n-      this.session.set(\"darkModeAvailable\", true);\n+    // only preview dark schemes when in dark mode\n+    if (!this._isInDarkMode()) {\n+      return;\n     }\n+\n+    this._previewColorScheme(true);\n+    this.session.set(\"darkModeAvailable\", colorSchemeId !== -1);\n   }\n \n   @action\n   selectColorMode(modeId) {\n     this.selectedInterfaceColorModeId = modeId;\n     this.set(\"previewingColorScheme\", this.isViewingOwnProfile);\n+\n+    if (!this.isViewingOwnProfile) {\n+      return;\n+    }\n+\n+    this._applyInterfaceModePreview(modeId);\n+    this._previewColorSchemeForMode(modeId);\n+  }\n+\n+  _applyInterfaceModePreview(modeId) {\n+    const modeActions = {\n+      [INTERFACE_COLOR_MODES.AUTO]: () => this.interfaceColor.useAutoMode(),\n+      [INTERFACE_COLOR_MODES.LIGHT]: () => this.interfaceColor.forceLightMode(),\n+      [INTERFACE_COLOR_MODES.DARK]: () => this.interfaceColor.forceDarkMode(),\n+    };\n+\n+    modeActions[modeId]?.();\n+  }\n+\n+  _previewColorSchemeForMode(modeId) {\n+    if (this._shouldShowPreviewForMode(modeId, false)) {\n+      this._removePreviewStylesheet(\"dark\");\n+      this._previewColorScheme(false);\n+    } else if (this._shouldShowPreviewForMode(modeId, true)) {\n+      this._removePreviewStylesheet(\"light\");\n+      this._previewColorScheme(true);\n+    }\n+  }\n+\n+  _shouldShowPreviewForMode(modeId, isDark) {\n+    const targetMode = isDark\n+      ? INTERFACE_COLOR_MODES.DARK\n+      : INTERFACE_COLOR_MODES.LIGHT;\n+    const autoCondition = isDark\n+      ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n+      : !window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n+\n+    return (\n+      modeId === targetMode ||\n+      (modeId === INTERFACE_COLOR_MODES.AUTO && autoCondition)\n+    );\n+  }\n+\n+  _removePreviewStylesheet(type) {\n+    const selector =\n+      type === \"dark\" ? \"link#cs-preview-dark\" : \"link#cs-preview-light\";\n+    const stylesheet = document.querySelector(selector);\n+    if (stylesheet) {\n+      stylesheet.remove();\n+    }\n+  }\n+\n+  _previewColorScheme(isDark) {\n+    const selectedId = isDark\n+      ? this.selectedDarkColorSchemeId\n+      : this.selectedColorSchemeId;\n+    const colorSchemeId = this._resolveThemeDefaultColorScheme(\n+      selectedId,\n+      isDark\n+    );\n+    loadColorSchemeStylesheet(colorSchemeId, this.themeId, isDark);\n+\n+    if (!isDark) {\n+      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n+    }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2280606626",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34361,
        "pr_file": "app/assets/javascripts/discourse/app/controllers/preferences/interface.js",
        "discussion_id": "2280606626",
        "commented_code": "@@ -434,52 +476,110 @@ export default class InterfaceController extends Controller {\n   loadColorScheme(colorSchemeId) {\n     this.setProperties({\n       selectedColorSchemeId: colorSchemeId,\n-      previewingColorScheme: this.isViewingOwnProfile,\n+      previewingColorScheme: this._shouldEnablePreview(false),\n     });\n \n     if (!this.isViewingOwnProfile) {\n       return;\n     }\n \n-    if (colorSchemeId < 0) {\n-      const defaultTheme = this.userSelectableThemes.findBy(\"id\", this.themeId);\n-\n-      if (defaultTheme && defaultTheme.color_scheme_id) {\n-        colorSchemeId = defaultTheme.color_scheme_id;\n-      }\n-    }\n-    loadColorSchemeStylesheet(colorSchemeId, this.themeId);\n-    if (this.selectedDarkColorSchemeId === -1) {\n-      // set this same scheme for dark mode preview when dark scheme is disabled\n-      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n+    // only preview light schemes when in light mode\n+    if (!this._isInLightMode()) {\n+      return;\n     }\n+\n+    this._previewColorScheme(false);\n   }\n \n   @action\n   loadDarkColorScheme(colorSchemeId) {\n     this.setProperties({\n       selectedDarkColorSchemeId: colorSchemeId,\n-      previewingColorScheme: this.isViewingOwnProfile,\n+      previewingColorScheme: this._shouldEnablePreview(true),\n     });\n \n     if (!this.isViewingOwnProfile) {\n       return;\n     }\n \n-    if (colorSchemeId === -1) {\n-      // load preview of regular scheme when dark scheme is disabled\n-      loadColorSchemeStylesheet(this.selectedColorSchemeId, this.themeId, true);\n-      this.session.set(\"darkModeAvailable\", false);\n-    } else {\n-      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n-      this.session.set(\"darkModeAvailable\", true);\n+    // only preview dark schemes when in dark mode\n+    if (!this._isInDarkMode()) {\n+      return;\n     }\n+\n+    this._previewColorScheme(true);\n+    this.session.set(\"darkModeAvailable\", colorSchemeId !== -1);\n   }\n \n   @action\n   selectColorMode(modeId) {\n     this.selectedInterfaceColorModeId = modeId;\n     this.set(\"previewingColorScheme\", this.isViewingOwnProfile);\n+\n+    if (!this.isViewingOwnProfile) {\n+      return;\n+    }\n+\n+    this._applyInterfaceModePreview(modeId);\n+    this._previewColorSchemeForMode(modeId);\n+  }\n+\n+  _applyInterfaceModePreview(modeId) {\n+    const modeActions = {\n+      [INTERFACE_COLOR_MODES.AUTO]: () => this.interfaceColor.useAutoMode(),\n+      [INTERFACE_COLOR_MODES.LIGHT]: () => this.interfaceColor.forceLightMode(),\n+      [INTERFACE_COLOR_MODES.DARK]: () => this.interfaceColor.forceDarkMode(),\n+    };\n+\n+    modeActions[modeId]?.();\n+  }\n+\n+  _previewColorSchemeForMode(modeId) {\n+    if (this._shouldShowPreviewForMode(modeId, false)) {\n+      this._removePreviewStylesheet(\"dark\");\n+      this._previewColorScheme(false);\n+    } else if (this._shouldShowPreviewForMode(modeId, true)) {\n+      this._removePreviewStylesheet(\"light\");\n+      this._previewColorScheme(true);\n+    }\n+  }\n+\n+  _shouldShowPreviewForMode(modeId, isDark) {\n+    const targetMode = isDark\n+      ? INTERFACE_COLOR_MODES.DARK\n+      : INTERFACE_COLOR_MODES.LIGHT;\n+    const autoCondition = isDark\n+      ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n+      : !window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n+\n+    return (\n+      modeId === targetMode ||\n+      (modeId === INTERFACE_COLOR_MODES.AUTO && autoCondition)\n+    );\n+  }\n+\n+  _removePreviewStylesheet(type) {\n+    const selector =\n+      type === \"dark\" ? \"link#cs-preview-dark\" : \"link#cs-preview-light\";\n+    const stylesheet = document.querySelector(selector);\n+    if (stylesheet) {\n+      stylesheet.remove();\n+    }\n+  }\n+\n+  _previewColorScheme(isDark) {\n+    const selectedId = isDark\n+      ? this.selectedDarkColorSchemeId\n+      : this.selectedColorSchemeId;\n+    const colorSchemeId = this._resolveThemeDefaultColorScheme(\n+      selectedId,\n+      isDark\n+    );\n+    loadColorSchemeStylesheet(colorSchemeId, this.themeId, isDark);\n+\n+    if (!isDark) {\n+      loadColorSchemeStylesheet(colorSchemeId, this.themeId, true);\n+    }",
        "comment_created_at": "2025-08-16T21:17:00+00:00",
        "comment_author": "CvX",
        "comment_body": "just writing it out to wrap my head around it \ud83d\ude05 \r\n\r\nif the color scheme is dark:\r\n* load the stylesheet with isDark `true`\r\n\r\nif the color scheme is light:\r\n* load the stylesheet with isDark `false`\r\n* load the stylesheet with isDark `true`\r\n\r\nif that's correct, maybe it would be more readable to have the code follow that? i.e.\r\n\r\n```js\r\nif (isDark) {\r\n  load(\u2026, true);\r\n} else {\r\n  load(\u2026, true);\r\n  load(\u2026, false);\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274593130",
    "pr_number": 34297,
    "pr_file": "app/assets/javascripts/discourse/app/lib/quote.js",
    "created_at": "2025-08-13T20:48:40+00:00",
    "commented_code": "params.push(`username:${opts.username || post.username}`);\n   }\n \n-  return `[quote=\"${params.join(\", \")}\"]\n${contents.trim()}\n[/quote]\n\n`;\n+  const transformedParams = applyValueTransformer(\"quote-params\", params, {\n+    post,\n+    opts,\n+  });\n+\n+  return `[quote=\"${transformedParams.join(\n+    \", \"\n+  )}\"]\n${contents.trim()}\n[/quote]\n\n`;",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2274593130",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34297,
        "pr_file": "app/assets/javascripts/discourse/app/lib/quote.js",
        "discussion_id": "2274593130",
        "commented_code": "@@ -37,5 +38,12 @@ export function buildQuote(post, contents, opts = {}) {\n     params.push(`username:${opts.username || post.username}`);\n   }\n \n-  return `[quote=\"${params.join(\", \")}\"]\\n${contents.trim()}\\n[/quote]\\n\\n`;\n+  const transformedParams = applyValueTransformer(\"quote-params\", params, {\n+    post,\n+    opts,\n+  });\n+\n+  return `[quote=\"${transformedParams.join(\n+    \", \"\n+  )}\"]\\n${contents.trim()}\\n[/quote]\\n\\n`;",
        "comment_created_at": "2025-08-13T20:48:40+00:00",
        "comment_author": "megothss",
        "comment_body": "```suggestion\r\n  const transformedParams = applyValueTransformer(\"quote-params\", params, {\r\n    post,\r\n    contents,\r\n    opts,\r\n  });\r\n\r\n  const paramsString = transformedParams.join(\", \");\r\n  return `[quote=\"${paramsString}\"]\\n${contents.trim()}\\n[/quote]\\n\\n`;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2268656510",
    "pr_number": 33992,
    "pr_file": "app/assets/javascripts/discourse/app/lib/filter-suggestions.js",
    "created_at": "2025-08-12T05:46:33+00:00",
    "commented_code": "import { i18n } from \"discourse-i18n\";\n \n export default class FilterSuggestions {\n-  static async getFilterSuggestionsByType(\n-    type,\n-    prefix,\n-    filterName,\n-    prevTerms,\n-    lastTerm,\n-    deps = {}\n-  ) {\n-    switch (type) {\n-      case \"category\":\n-        return await FilterSuggestions.getCategorySuggestions(\n-          deps.site,\n-          prefix,\n-          filterName,\n-          prevTerms,\n-          lastTerm\n+  /**\n+   * Main entry point - takes raw input text and available tips, returns suggestions\n+   * @param {string} text - The full input text from the user\n+   * @param {Array} tips - Available filter tips from the server\n+   * @param {Object} context - Additional context (site data, etc.)\n+   * @returns {Object} { suggestions: Array, activeFilter: string|null }\n+   */\n+  static async getSuggestions(text, tips = [], context = {}) {\n+    const parser = new FilterParser(text);\n+    const lastSegment = parser.getLastSegment();\n+\n+    if (!lastSegment.word) {\n+      return {\n+        suggestions: this.getTopLevelTips(tips),\n+        activeFilter: null,\n+      };\n+    }\n+\n+    if (lastSegment.filterName && lastSegment.hasColon) {\n+      const tip = this.findTipForFilter(lastSegment.filterName, tips);\n+\n+      if (tip?.type) {\n+        const suggestions = await this.getFilterValueSuggestions(\n+          tip,\n+          lastSegment,\n+          context\n         );\n+\n+        return {\n+          suggestions,\n+          activeFilter: lastSegment.filterName,\n+        };\n+      }\n+    }\n+\n+    // Otherwise, filter the available tips based on what user typed\n+    return {\n+      suggestions: this.filterTips(tips, lastSegment.word, lastSegment.prefix),\n+      activeFilter: null,\n+    };\n+  }\n+\n+  static getTopLevelTips(tips) {\n+    return tips\n+      .filter((tip) => tip.priority === 1)\n+      .sort((a, b) => {\n+        // First by priority (descending)\n+        const priorityDiff = (b.priority || 0) - (a.priority || 0);\n+        if (priorityDiff !== 0) {\n+          return priorityDiff;\n+        }\n+        // Then alphabetically\n+        return a.name.localeCompare(b.name);\n+      })\n+      .slice(0, 20);",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2268656510",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33992,
        "pr_file": "app/assets/javascripts/discourse/app/lib/filter-suggestions.js",
        "discussion_id": "2268656510",
        "commented_code": "@@ -2,81 +2,348 @@ import { ajax } from \"discourse/lib/ajax\";\n import { i18n } from \"discourse-i18n\";\n \n export default class FilterSuggestions {\n-  static async getFilterSuggestionsByType(\n-    type,\n-    prefix,\n-    filterName,\n-    prevTerms,\n-    lastTerm,\n-    deps = {}\n-  ) {\n-    switch (type) {\n-      case \"category\":\n-        return await FilterSuggestions.getCategorySuggestions(\n-          deps.site,\n-          prefix,\n-          filterName,\n-          prevTerms,\n-          lastTerm\n+  /**\n+   * Main entry point - takes raw input text and available tips, returns suggestions\n+   * @param {string} text - The full input text from the user\n+   * @param {Array} tips - Available filter tips from the server\n+   * @param {Object} context - Additional context (site data, etc.)\n+   * @returns {Object} { suggestions: Array, activeFilter: string|null }\n+   */\n+  static async getSuggestions(text, tips = [], context = {}) {\n+    const parser = new FilterParser(text);\n+    const lastSegment = parser.getLastSegment();\n+\n+    if (!lastSegment.word) {\n+      return {\n+        suggestions: this.getTopLevelTips(tips),\n+        activeFilter: null,\n+      };\n+    }\n+\n+    if (lastSegment.filterName && lastSegment.hasColon) {\n+      const tip = this.findTipForFilter(lastSegment.filterName, tips);\n+\n+      if (tip?.type) {\n+        const suggestions = await this.getFilterValueSuggestions(\n+          tip,\n+          lastSegment,\n+          context\n         );\n+\n+        return {\n+          suggestions,\n+          activeFilter: lastSegment.filterName,\n+        };\n+      }\n+    }\n+\n+    // Otherwise, filter the available tips based on what user typed\n+    return {\n+      suggestions: this.filterTips(tips, lastSegment.word, lastSegment.prefix),\n+      activeFilter: null,\n+    };\n+  }\n+\n+  static getTopLevelTips(tips) {\n+    return tips\n+      .filter((tip) => tip.priority === 1)\n+      .sort((a, b) => {\n+        // First by priority (descending)\n+        const priorityDiff = (b.priority || 0) - (a.priority || 0);\n+        if (priorityDiff !== 0) {\n+          return priorityDiff;\n+        }\n+        // Then alphabetically\n+        return a.name.localeCompare(b.name);\n+      })\n+      .slice(0, 20);",
        "comment_created_at": "2025-08-12T05:46:33+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "Think we should bring back `MAX_RESULTS` const for the 20 then it can be used throughout this file and in the tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218130006",
    "pr_number": 33628,
    "pr_file": "app/assets/javascripts/admin/addon/controllers/admin-customize-colors.js",
    "created_at": "2025-07-21T03:45:58+00:00",
    "commented_code": "+import { tracked } from \"@glimmer/tracking\";\n import Controller from \"@ember/controller\";\n-import EmberObject, { action } from \"@ember/object\";\n+import { action } from \"@ember/object\";\n import { service } from \"@ember/service\";\n-import discourseComputed from \"discourse/lib/decorators\";\n import { i18n } from \"discourse-i18n\";\n import ColorSchemeSelectBaseModal from \"admin/components/modal/color-scheme-select-base\";\n+import { setDefaultColorScheme } from \"admin/lib/color-scheme-manager\";\n \n export default class AdminCustomizeColorsController extends Controller {\n   @service router;\n   @service modal;\n+  @service store;\n+  @service dialog;\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorScheme() {\n-    return this.model.findBy(\"is_base\", true);\n-  }\n+  @tracked defaultTheme = null;\n+  @tracked filterValue = \"\";\n+  @tracked typeFilter = \"all\";\n+  @tracked isSettingDefault = false;\n+\n+  isDefaultThemeColorScheme = (scheme) => {\n+    return this.defaultTheme?.color_scheme_id === scheme.id;\n+  };\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorSchemes() {\n-    return this.model.filterBy(\"is_base\", true);\n+  get allBaseColorSchemes() {\n+    return this.model?.filterBy(\"is_base\", true) || [];\n   }\n \n-  @discourseComputed(\"baseColorScheme\")\n-  baseColors(baseColorScheme) {\n-    const baseColorsHash = EmberObject.create({});\n-    baseColorScheme.get(\"colors\").forEach((color) => {\n-      baseColorsHash.set(color.get(\"name\"), color);\n+  get filteredColorSchemes() {\n+    let schemes = this.model.filter((scheme) => !scheme.is_base);\n+    // built-in \"Light (default)\"\n+    const lightBaseScheme = this.allBaseColorSchemes.find(\n+      (scheme) => scheme.base_scheme_id === \"Light\" || scheme.name === \"Light\"\n+    );\n+    if (lightBaseScheme) {\n+      const builtInDefault = {\n+        ...lightBaseScheme,\n+        id: null,\n+        name: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        description: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        is_builtin_default: true,\n+      };\n+      schemes.unshift(builtInDefault);\n+    }\n+\n+    if (this.typeFilter !== \"all\") {\n+      if (this.typeFilter === \"user_selectable\") {\n+        schemes = schemes.filter((scheme) => scheme.user_selectable);\n+      } else if (this.typeFilter === \"from_theme\") {\n+        schemes = schemes.filter((scheme) => scheme.theme_id);\n+      }\n+    }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2218130006",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33628,
        "pr_file": "app/assets/javascripts/admin/addon/controllers/admin-customize-colors.js",
        "discussion_id": "2218130006",
        "commented_code": "@@ -1,36 +1,114 @@\n+import { tracked } from \"@glimmer/tracking\";\n import Controller from \"@ember/controller\";\n-import EmberObject, { action } from \"@ember/object\";\n+import { action } from \"@ember/object\";\n import { service } from \"@ember/service\";\n-import discourseComputed from \"discourse/lib/decorators\";\n import { i18n } from \"discourse-i18n\";\n import ColorSchemeSelectBaseModal from \"admin/components/modal/color-scheme-select-base\";\n+import { setDefaultColorScheme } from \"admin/lib/color-scheme-manager\";\n \n export default class AdminCustomizeColorsController extends Controller {\n   @service router;\n   @service modal;\n+  @service store;\n+  @service dialog;\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorScheme() {\n-    return this.model.findBy(\"is_base\", true);\n-  }\n+  @tracked defaultTheme = null;\n+  @tracked filterValue = \"\";\n+  @tracked typeFilter = \"all\";\n+  @tracked isSettingDefault = false;\n+\n+  isDefaultThemeColorScheme = (scheme) => {\n+    return this.defaultTheme?.color_scheme_id === scheme.id;\n+  };\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorSchemes() {\n-    return this.model.filterBy(\"is_base\", true);\n+  get allBaseColorSchemes() {\n+    return this.model?.filterBy(\"is_base\", true) || [];\n   }\n \n-  @discourseComputed(\"baseColorScheme\")\n-  baseColors(baseColorScheme) {\n-    const baseColorsHash = EmberObject.create({});\n-    baseColorScheme.get(\"colors\").forEach((color) => {\n-      baseColorsHash.set(color.get(\"name\"), color);\n+  get filteredColorSchemes() {\n+    let schemes = this.model.filter((scheme) => !scheme.is_base);\n+    // built-in \"Light (default)\"\n+    const lightBaseScheme = this.allBaseColorSchemes.find(\n+      (scheme) => scheme.base_scheme_id === \"Light\" || scheme.name === \"Light\"\n+    );\n+    if (lightBaseScheme) {\n+      const builtInDefault = {\n+        ...lightBaseScheme,\n+        id: null,\n+        name: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        description: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        is_builtin_default: true,\n+      };\n+      schemes.unshift(builtInDefault);\n+    }\n+\n+    if (this.typeFilter !== \"all\") {\n+      if (this.typeFilter === \"user_selectable\") {\n+        schemes = schemes.filter((scheme) => scheme.user_selectable);\n+      } else if (this.typeFilter === \"from_theme\") {\n+        schemes = schemes.filter((scheme) => scheme.theme_id);\n+      }\n+    }",
        "comment_created_at": "2025-07-21T03:45:58+00:00",
        "comment_author": "lis2",
        "comment_body": "```suggestion\n    switch (this.typeFilter) {\n      case \"user_selectable\":\n        schemes = schemes.filter((scheme) => scheme.user_selectable);\n        break;\n      case \"from_theme\":\n        schemes = schemes.filter((scheme) => scheme.theme_id);\n        break;\n    }\n```\nI think that switch make would be a bit better as it will be easier to add more options.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2218312930",
    "pr_number": 33628,
    "pr_file": "app/assets/javascripts/admin/addon/controllers/admin-customize-colors.js",
    "created_at": "2025-07-21T06:31:46+00:00",
    "commented_code": "+import { tracked } from \"@glimmer/tracking\";\n import Controller from \"@ember/controller\";\n-import EmberObject, { action } from \"@ember/object\";\n+import { action } from \"@ember/object\";\n import { service } from \"@ember/service\";\n-import discourseComputed from \"discourse/lib/decorators\";\n import { i18n } from \"discourse-i18n\";\n import ColorSchemeSelectBaseModal from \"admin/components/modal/color-scheme-select-base\";\n+import { setDefaultColorScheme } from \"admin/lib/color-scheme-manager\";\n \n export default class AdminCustomizeColorsController extends Controller {\n   @service router;\n   @service modal;\n+  @service store;\n+  @service dialog;\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorScheme() {\n-    return this.model.findBy(\"is_base\", true);\n-  }\n+  @tracked defaultTheme = null;\n+  @tracked filterValue = \"\";\n+  @tracked typeFilter = \"all\";\n+  @tracked isSettingDefault = false;\n+\n+  isDefaultThemeColorScheme = (scheme) => {\n+    return this.defaultTheme?.color_scheme_id === scheme.id;\n+  };\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorSchemes() {\n-    return this.model.filterBy(\"is_base\", true);\n+  get allBaseColorSchemes() {\n+    return this.model?.filterBy(\"is_base\", true) || [];\n   }\n \n-  @discourseComputed(\"baseColorScheme\")\n-  baseColors(baseColorScheme) {\n-    const baseColorsHash = EmberObject.create({});\n-    baseColorScheme.get(\"colors\").forEach((color) => {\n-      baseColorsHash.set(color.get(\"name\"), color);\n+  get filteredColorSchemes() {\n+    let schemes = this.model.filter((scheme) => !scheme.is_base);\n+    // built-in \"Light (default)\"\n+    const lightBaseScheme = this.allBaseColorSchemes.find(\n+      (scheme) => scheme.base_scheme_id === \"Light\" || scheme.name === \"Light\"\n+    );\n+    if (lightBaseScheme) {\n+      const builtInDefault = {\n+        ...lightBaseScheme,\n+        id: null,\n+        name: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        description: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        is_builtin_default: true,\n+      };\n+      schemes.unshift(builtInDefault);\n+    }\n+\n+    if (this.typeFilter !== \"all\") {\n+      if (this.typeFilter === \"user_selectable\") {\n+        schemes = schemes.filter((scheme) => scheme.user_selectable);\n+      } else if (this.typeFilter === \"from_theme\") {\n+        schemes = schemes.filter((scheme) => scheme.theme_id);\n+      }\n+    }\n+\n+    if (this.filterValue) {\n+      const term = this.filterValue.toLowerCase();\n+      schemes = schemes.filter((scheme) => {\n+        const nameMatches = scheme.name?.toLowerCase().includes(term);\n+        const themeMatches = scheme.theme_name?.toLowerCase().includes(term);\n+        return nameMatches || themeMatches;\n+      });\n+    }\n+\n+    // active first, then user selectable, then alpha\n+    schemes.sort((a, b) => {\n+      const defaultId = this.defaultTheme?.color_scheme_id;\n+\n+      const isDefaultA = a.is_builtin_default\n+        ? defaultId === null\n+        : a.id === defaultId;\n+\n+      const isDefaultB = b.is_builtin_default\n+        ? defaultId === null\n+        : b.id === defaultId;\n+\n+      if (isDefaultA !== isDefaultB) {\n+        return isDefaultA ? -1 : 1;\n+      }\n+\n+      if (a.user_selectable !== b.user_selectable) {\n+        return a.user_selectable ? -1 : 1;\n+      }\n+\n+      return (a.name || \"\").localeCompare(b.name || \"\");\n     });\n-    return baseColorsHash;\n+\n+    return schemes;\n+  }\n+\n+  get showFilters() {\n+    return this.model.filter((scheme) => !scheme.is_base).length > 8;",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2218312930",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33628,
        "pr_file": "app/assets/javascripts/admin/addon/controllers/admin-customize-colors.js",
        "discussion_id": "2218312930",
        "commented_code": "@@ -1,36 +1,114 @@\n+import { tracked } from \"@glimmer/tracking\";\n import Controller from \"@ember/controller\";\n-import EmberObject, { action } from \"@ember/object\";\n+import { action } from \"@ember/object\";\n import { service } from \"@ember/service\";\n-import discourseComputed from \"discourse/lib/decorators\";\n import { i18n } from \"discourse-i18n\";\n import ColorSchemeSelectBaseModal from \"admin/components/modal/color-scheme-select-base\";\n+import { setDefaultColorScheme } from \"admin/lib/color-scheme-manager\";\n \n export default class AdminCustomizeColorsController extends Controller {\n   @service router;\n   @service modal;\n+  @service store;\n+  @service dialog;\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorScheme() {\n-    return this.model.findBy(\"is_base\", true);\n-  }\n+  @tracked defaultTheme = null;\n+  @tracked filterValue = \"\";\n+  @tracked typeFilter = \"all\";\n+  @tracked isSettingDefault = false;\n+\n+  isDefaultThemeColorScheme = (scheme) => {\n+    return this.defaultTheme?.color_scheme_id === scheme.id;\n+  };\n \n-  @discourseComputed(\"model.@each.id\")\n-  baseColorSchemes() {\n-    return this.model.filterBy(\"is_base\", true);\n+  get allBaseColorSchemes() {\n+    return this.model?.filterBy(\"is_base\", true) || [];\n   }\n \n-  @discourseComputed(\"baseColorScheme\")\n-  baseColors(baseColorScheme) {\n-    const baseColorsHash = EmberObject.create({});\n-    baseColorScheme.get(\"colors\").forEach((color) => {\n-      baseColorsHash.set(color.get(\"name\"), color);\n+  get filteredColorSchemes() {\n+    let schemes = this.model.filter((scheme) => !scheme.is_base);\n+    // built-in \"Light (default)\"\n+    const lightBaseScheme = this.allBaseColorSchemes.find(\n+      (scheme) => scheme.base_scheme_id === \"Light\" || scheme.name === \"Light\"\n+    );\n+    if (lightBaseScheme) {\n+      const builtInDefault = {\n+        ...lightBaseScheme,\n+        id: null,\n+        name: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        description: i18n(\"admin.customize.theme.default_light_scheme\"),\n+        is_builtin_default: true,\n+      };\n+      schemes.unshift(builtInDefault);\n+    }\n+\n+    if (this.typeFilter !== \"all\") {\n+      if (this.typeFilter === \"user_selectable\") {\n+        schemes = schemes.filter((scheme) => scheme.user_selectable);\n+      } else if (this.typeFilter === \"from_theme\") {\n+        schemes = schemes.filter((scheme) => scheme.theme_id);\n+      }\n+    }\n+\n+    if (this.filterValue) {\n+      const term = this.filterValue.toLowerCase();\n+      schemes = schemes.filter((scheme) => {\n+        const nameMatches = scheme.name?.toLowerCase().includes(term);\n+        const themeMatches = scheme.theme_name?.toLowerCase().includes(term);\n+        return nameMatches || themeMatches;\n+      });\n+    }\n+\n+    // active first, then user selectable, then alpha\n+    schemes.sort((a, b) => {\n+      const defaultId = this.defaultTheme?.color_scheme_id;\n+\n+      const isDefaultA = a.is_builtin_default\n+        ? defaultId === null\n+        : a.id === defaultId;\n+\n+      const isDefaultB = b.is_builtin_default\n+        ? defaultId === null\n+        : b.id === defaultId;\n+\n+      if (isDefaultA !== isDefaultB) {\n+        return isDefaultA ? -1 : 1;\n+      }\n+\n+      if (a.user_selectable !== b.user_selectable) {\n+        return a.user_selectable ? -1 : 1;\n+      }\n+\n+      return (a.name || \"\").localeCompare(b.name || \"\");\n     });\n-    return baseColorsHash;\n+\n+    return schemes;\n+  }\n+\n+  get showFilters() {\n+    return this.model.filter((scheme) => !scheme.is_base).length > 8;",
        "comment_created_at": "2025-07-21T06:31:46+00:00",
        "comment_author": "lis2",
        "comment_body": "I think it would be good to move 8 to constant to avoid magic number",
        "pr_file_module": null
      }
    ]
  }
]