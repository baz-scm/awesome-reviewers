[
  {
    "discussion_id": "2265616528",
    "pr_number": 33665,
    "pr_file": "app/assets/javascripts/admin/addon/components/site-setting.gjs",
    "created_at": "2025-08-11T03:48:03+00:00",
    "commented_code": "@service router;\n   @service dialog;\n   @service siteSettingChangeTracker;\n+  @service messageBus;\n \n   @tracked isSecret = null;\n+  @tracked status = null;\n+  @tracked progress = null;\n   updateExistingUsers = null;\n \n   constructor() {\n     super(...arguments);\n     this.isSecret = this.setting?.secret;\n+\n+    const settingName = this.setting.setting;\n+\n+    if (this.canSubscribeToSettingsJobs) {\n+      this.messageBus.subscribe(`${settingName}`, this.onMessage);\n+    }\n+  }\n+\n+  willDestroy() {\n+    super.willDestroy(...arguments);\n+    const settingName = this.setting.setting;\n+\n+    if (this.canSubscribeToSettingsJobs) {\n+      this.messageBus.unsubscribe(\n+        `/site_setting/${settingName}/process`,\n+        this.onMessage\n+      );\n+    }\n+  }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2265616528",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33665,
        "pr_file": "app/assets/javascripts/admin/addon/components/site-setting.gjs",
        "discussion_id": "2265616528",
        "commented_code": "@@ -50,13 +53,49 @@ export default class SiteSettingComponent extends Component {\n   @service router;\n   @service dialog;\n   @service siteSettingChangeTracker;\n+  @service messageBus;\n \n   @tracked isSecret = null;\n+  @tracked status = null;\n+  @tracked progress = null;\n   updateExistingUsers = null;\n \n   constructor() {\n     super(...arguments);\n     this.isSecret = this.setting?.secret;\n+\n+    const settingName = this.setting.setting;\n+\n+    if (this.canSubscribeToSettingsJobs) {\n+      this.messageBus.subscribe(`${settingName}`, this.onMessage);\n+    }\n+  }\n+\n+  willDestroy() {\n+    super.willDestroy(...arguments);\n+    const settingName = this.setting.setting;\n+\n+    if (this.canSubscribeToSettingsJobs) {\n+      this.messageBus.unsubscribe(\n+        `/site_setting/${settingName}/process`,\n+        this.onMessage\n+      );\n+    }\n+  }",
        "comment_created_at": "2025-08-11T03:48:03+00:00",
        "comment_author": "tgxworld",
        "comment_body": "```suggestion\n    if (this.canSubscribeToSettingsJobs) {\n      this.messageBus.unsubscribe(\n        `/site_setting/${this.setting.setting}/process`,\n        this.onMessage\n      );\n    }\n  }\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176056007",
    "pr_number": 32506,
    "pr_file": "app/assets/javascripts/discourse/app/components/reviewable-refresh/item.gjs",
    "created_at": "2025-06-30T22:10:06+00:00",
    "commented_code": "+import { tracked } from \"@glimmer/tracking\";\n+import Component from \"@ember/component\";\n+import { fn } from \"@ember/helper\";\n+import { on } from \"@ember/modifier\";\n+import { action, set } from \"@ember/object\";\n+import { alias } from \"@ember/object/computed\";\n+import { getOwner } from \"@ember/owner\";\n+import { service } from \"@ember/service\";\n+import { classify, dasherize } from \"@ember/string\";\n+import { tagName } from \"@ember-decorators/component\";\n+import { eq } from \"truth-helpers\";\n+import DButton from \"discourse/components/d-button\";\n+import HorizontalOverflowNav from \"discourse/components/horizontal-overflow-nav\";\n+import ExplainReviewableModal from \"discourse/components/modal/explain-reviewable\";\n+import RejectReasonReviewableModal from \"discourse/components/modal/reject-reason-reviewable\";\n+import ReviseAndRejectPostReviewable from \"discourse/components/modal/revise-and-reject-post-reviewable\";\n+import ReviewableBundledAction from \"discourse/components/reviewable-bundled-action\";\n+import ReviewableClaimedTopic from \"discourse/components/reviewable-claimed-topic\";\n+import ReviewableCreatedBy from \"discourse/components/reviewable-created-by\";\n+import ReviewableFlagReason from \"discourse/components/reviewable-refresh/flag-reason\";\n+import ReviewableInsights from \"discourse/components/reviewable-refresh/insights\";\n+import ReviewableTimeline from \"discourse/components/reviewable-refresh/timeline\";\n+import icon from \"discourse/helpers/d-icon\";\n+import { newReviewableStatus } from \"discourse/helpers/reviewable-status\";\n+import { ajax } from \"discourse/lib/ajax\";\n+import { popupAjaxError } from \"discourse/lib/ajax-error\";\n+import discourseComputed, { bind } from \"discourse/lib/decorators\";\n+import optionalService from \"discourse/lib/optional-service\";\n+import Category from \"discourse/models/category\";\n+import Composer from \"discourse/models/composer\";\n+import Topic from \"discourse/models/topic\";\n+import { i18n } from \"discourse-i18n\";\n+\n+// const IpLookup = optionalRequire(\"admin/components/ip-lookup\");\n+\n+let _components = {};\n+\n+const pluginReviewableParams = {};\n+\n+// The mappings defined here are default core mappings, and cannot be overridden\n+// by plugins.\n+const defaultActionModalClassMap = {\n+  revise_and_reject_post: ReviseAndRejectPostReviewable,\n+};\n+const actionModalClassMap = { ...defaultActionModalClassMap };\n+\n+export function addPluginReviewableParam(reviewableType, param) {\n+  pluginReviewableParams[reviewableType]\n+    ? pluginReviewableParams[reviewableType].push(param)\n+    : (pluginReviewableParams[reviewableType] = [param]);\n+}\n+\n+export function registerReviewableActionModal(actionName, modalClass) {\n+  if (Object.keys(defaultActionModalClassMap).includes(actionName)) {\n+    throw new Error(\n+      `Cannot override default action modal class for ${actionName} (mapped to ${defaultActionModalClassMap[actionName].name})!`\n+    );\n+  }\n+  actionModalClassMap[actionName] = modalClass;\n+}\n+\n+function lookupComponent(context, name) {\n+  return getOwner(context).resolveRegistration(`component:${name}`);\n+}\n+\n+@tagName(\"\")\n+export default class ReviewableItem extends Component {\n+  @service dialog;\n+  @service modal;\n+  @service siteSettings;\n+  @service currentUser;\n+  @service composer;\n+  @service store;\n+  @service toasts;\n+  @service messageBus;\n+  @optionalService adminTools;\n+\n+  @tracked disabled = false;\n+  @tracked activeTab = \"insights\";\n+\n+  @alias(\"reviewable.claimed_by.automatic\") autoClaimed;\n+\n+  updating = null;\n+  editing = false;\n+  _updates = null;\n+\n+  constructor() {\n+    super(...arguments);\n+    this.messageBus.subscribe(\"/reviewable_claimed\", this._updateClaimedBy);\n+    this.messageBus.subscribe(\"/reviewable_action\", this._updateStatus);\n+  }\n+\n+  willDestroy() {\n+    super.willDestroy(...arguments);\n+    this.messageBus.unsubscribe(\"/reviewable_claimed\", this._updateClaimedBy);\n+    this.messageBus.unsubscribe(\"/reviewable_action\", this._updateStatus);\n+  }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2176056007",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32506,
        "pr_file": "app/assets/javascripts/discourse/app/components/reviewable-refresh/item.gjs",
        "discussion_id": "2176056007",
        "commented_code": "@@ -0,0 +1,770 @@\n+import { tracked } from \"@glimmer/tracking\";\n+import Component from \"@ember/component\";\n+import { fn } from \"@ember/helper\";\n+import { on } from \"@ember/modifier\";\n+import { action, set } from \"@ember/object\";\n+import { alias } from \"@ember/object/computed\";\n+import { getOwner } from \"@ember/owner\";\n+import { service } from \"@ember/service\";\n+import { classify, dasherize } from \"@ember/string\";\n+import { tagName } from \"@ember-decorators/component\";\n+import { eq } from \"truth-helpers\";\n+import DButton from \"discourse/components/d-button\";\n+import HorizontalOverflowNav from \"discourse/components/horizontal-overflow-nav\";\n+import ExplainReviewableModal from \"discourse/components/modal/explain-reviewable\";\n+import RejectReasonReviewableModal from \"discourse/components/modal/reject-reason-reviewable\";\n+import ReviseAndRejectPostReviewable from \"discourse/components/modal/revise-and-reject-post-reviewable\";\n+import ReviewableBundledAction from \"discourse/components/reviewable-bundled-action\";\n+import ReviewableClaimedTopic from \"discourse/components/reviewable-claimed-topic\";\n+import ReviewableCreatedBy from \"discourse/components/reviewable-created-by\";\n+import ReviewableFlagReason from \"discourse/components/reviewable-refresh/flag-reason\";\n+import ReviewableInsights from \"discourse/components/reviewable-refresh/insights\";\n+import ReviewableTimeline from \"discourse/components/reviewable-refresh/timeline\";\n+import icon from \"discourse/helpers/d-icon\";\n+import { newReviewableStatus } from \"discourse/helpers/reviewable-status\";\n+import { ajax } from \"discourse/lib/ajax\";\n+import { popupAjaxError } from \"discourse/lib/ajax-error\";\n+import discourseComputed, { bind } from \"discourse/lib/decorators\";\n+import optionalService from \"discourse/lib/optional-service\";\n+import Category from \"discourse/models/category\";\n+import Composer from \"discourse/models/composer\";\n+import Topic from \"discourse/models/topic\";\n+import { i18n } from \"discourse-i18n\";\n+\n+// const IpLookup = optionalRequire(\"admin/components/ip-lookup\");\n+\n+let _components = {};\n+\n+const pluginReviewableParams = {};\n+\n+// The mappings defined here are default core mappings, and cannot be overridden\n+// by plugins.\n+const defaultActionModalClassMap = {\n+  revise_and_reject_post: ReviseAndRejectPostReviewable,\n+};\n+const actionModalClassMap = { ...defaultActionModalClassMap };\n+\n+export function addPluginReviewableParam(reviewableType, param) {\n+  pluginReviewableParams[reviewableType]\n+    ? pluginReviewableParams[reviewableType].push(param)\n+    : (pluginReviewableParams[reviewableType] = [param]);\n+}\n+\n+export function registerReviewableActionModal(actionName, modalClass) {\n+  if (Object.keys(defaultActionModalClassMap).includes(actionName)) {\n+    throw new Error(\n+      `Cannot override default action modal class for ${actionName} (mapped to ${defaultActionModalClassMap[actionName].name})!`\n+    );\n+  }\n+  actionModalClassMap[actionName] = modalClass;\n+}\n+\n+function lookupComponent(context, name) {\n+  return getOwner(context).resolveRegistration(`component:${name}`);\n+}\n+\n+@tagName(\"\")\n+export default class ReviewableItem extends Component {\n+  @service dialog;\n+  @service modal;\n+  @service siteSettings;\n+  @service currentUser;\n+  @service composer;\n+  @service store;\n+  @service toasts;\n+  @service messageBus;\n+  @optionalService adminTools;\n+\n+  @tracked disabled = false;\n+  @tracked activeTab = \"insights\";\n+\n+  @alias(\"reviewable.claimed_by.automatic\") autoClaimed;\n+\n+  updating = null;\n+  editing = false;\n+  _updates = null;\n+\n+  constructor() {\n+    super(...arguments);\n+    this.messageBus.subscribe(\"/reviewable_claimed\", this._updateClaimedBy);\n+    this.messageBus.subscribe(\"/reviewable_action\", this._updateStatus);\n+  }\n+\n+  willDestroy() {\n+    super.willDestroy(...arguments);\n+    this.messageBus.unsubscribe(\"/reviewable_claimed\", this._updateClaimedBy);\n+    this.messageBus.unsubscribe(\"/reviewable_action\", this._updateStatus);\n+  }",
        "comment_created_at": "2025-06-30T22:10:06+00:00",
        "comment_author": "jjaffeux",
        "comment_body": "Would be nice to use the third argument when subscribing: https://meta.discourse.org/t/write-end-to-end-system-specs-for-the-discourse-user-interface/325937\r\n\r\n(it's actually not specific to tests, just a general good practice when using message bus)",
        "pr_file_module": null
      }
    ]
  }
]