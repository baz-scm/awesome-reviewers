[
  {
    "discussion_id": "2284558935",
    "pr_number": 34404,
    "pr_file": "lib/site_settings/label_formatter.rb",
    "created_at": "2025-08-19T08:40:23+00:00",
    "commented_code": "%w[youtube YouTube],\n     ].freeze\n \n+    HUMANIZED_ACRONYMS_HASH = HUMANIZED_ACRONYMS.map { |a| [a, true] }.to_h.freeze",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2284558935",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34404,
        "pr_file": "lib/site_settings/label_formatter.rb",
        "discussion_id": "2284558935",
        "commented_code": "@@ -80,33 +80,41 @@ class LabelFormatter\n       %w[youtube YouTube],\n     ].freeze\n \n+    HUMANIZED_ACRONYMS_HASH = HUMANIZED_ACRONYMS.map { |a| [a, true] }.to_h.freeze",
        "comment_created_at": "2025-08-19T08:40:23+00:00",
        "comment_author": "tgxworld",
        "comment_body": "Instead of doing this, we can convert `HUMANIZED_ACRONYMS` to use a Set since `Set#include?` is O(1) complexity. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077505258",
    "pr_number": 32561,
    "pr_file": "script/bulk_import/generic_bulk.rb",
    "created_at": "2025-05-07T12:23:54+00:00",
    "commented_code": "permissions.close\n   end\n \n+  def import_category_moderation_groups\n+    puts \"\", \"Importing category moderation groups...\"\n+\n+    moderation_groups = query(<<~SQL)\n+      SELECT c.id AS category_id, \n+            m.value AS group_id\n+      FROM categories c,\n+           JSON_EACH(c.moderation_group_ids) m\n+      ORDER BY c.id, m.value\n+    SQL\n+\n+    existing_moderation_groups = CategoryModerationGroup.pluck(:category_id, :group_id).to_set\n+\n+    create_category_moderation_groups(moderation_groups) do |row|\n+      category_id = category_id_from_imported_id(row[\"category_id\"])\n+      group_id = group_id_from_imported_id(row[\"group_id\"])\n+\n+      next unless category_id && group_id\n+      next if existing_moderation_groups.include?([category_id, group_id])",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2077505258",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077505258",
        "commented_code": "@@ -360,6 +361,32 @@ def import_category_permissions\n     permissions.close\n   end\n \n+  def import_category_moderation_groups\n+    puts \"\", \"Importing category moderation groups...\"\n+\n+    moderation_groups = query(<<~SQL)\n+      SELECT c.id AS category_id, \n+            m.value AS group_id\n+      FROM categories c,\n+           JSON_EACH(c.moderation_group_ids) m\n+      ORDER BY c.id, m.value\n+    SQL\n+\n+    existing_moderation_groups = CategoryModerationGroup.pluck(:category_id, :group_id).to_set\n+\n+    create_category_moderation_groups(moderation_groups) do |row|\n+      category_id = category_id_from_imported_id(row[\"category_id\"])\n+      group_id = group_id_from_imported_id(row[\"group_id\"])\n+\n+      next unless category_id && group_id\n+      next if existing_moderation_groups.include?([category_id, group_id])",
        "comment_created_at": "2025-05-07T12:23:54+00:00",
        "comment_author": "s3lase",
        "comment_body": "```suggestion\r\n      next unless existing_moderation_groups.add?([category_id, group_id])\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2112008471",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077505258",
        "commented_code": "@@ -360,6 +361,32 @@ def import_category_permissions\n     permissions.close\n   end\n \n+  def import_category_moderation_groups\n+    puts \"\", \"Importing category moderation groups...\"\n+\n+    moderation_groups = query(<<~SQL)\n+      SELECT c.id AS category_id, \n+            m.value AS group_id\n+      FROM categories c,\n+           JSON_EACH(c.moderation_group_ids) m\n+      ORDER BY c.id, m.value\n+    SQL\n+\n+    existing_moderation_groups = CategoryModerationGroup.pluck(:category_id, :group_id).to_set\n+\n+    create_category_moderation_groups(moderation_groups) do |row|\n+      category_id = category_id_from_imported_id(row[\"category_id\"])\n+      group_id = group_id_from_imported_id(row[\"group_id\"])\n+\n+      next unless category_id && group_id\n+      next if existing_moderation_groups.include?([category_id, group_id])",
        "comment_created_at": "2025-05-28T14:03:25+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "Updated with suggested",
        "pr_file_module": null
      }
    ]
  }
]