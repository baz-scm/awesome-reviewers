[
  {
    "discussion_id": "2287035617",
    "pr_number": 33665,
    "pr_file": "spec/requests/admin/site_settings_controller_spec.rb",
    "created_at": "2025-08-20T05:39:43+00:00",
    "commented_code": "end\n \n     context \"when logged in as a non-staff user\" do\n+      fab!(:user1, :user)\n+      fab!(:user2, :user)\n+\n+      let(:tracking) { NotificationLevels.all[:tracking] }\n+      let(:watching) { NotificationLevels.all[:watching] }\n+\n       before { sign_in(user) }\n \n+      context \"with default categories\" do\n+        let(:category_ids) { 3.times.collect { Fabricate(:category).id } }\n+\n+        before do\n+          SiteSetting.default_categories_watching = category_ids.first(2).join(\"|\")\n+\n+          CategoryUser.create!(\n+            category_id: category_ids.last,\n+            notification_level: tracking,\n+            user: user2,\n+          )\n+\n+          Jobs.run_immediately!\n+        end\n+\n+        it \"doesn't update default categories\" do\n+          put \"/admin/site_settings/default_categories_watching.json\",\n+              params: {\n+                default_categories_watching: category_ids.last(2).join(\"|\"),\n+                update_existing_user: true,\n+              }\n+\n+          expect(response.status).to eq(404)\n+\n+          expect_not_enqueued_with(\n+            job: Jobs::SiteSettingUpdateDefaultCategories,\n+            args: {\n+              id: \"default_categories_watching\",\n+              value: category_ids.last(2).join(\"|\"),\n+              previous_value: category_ids.first(2).join(\"|\"),\n+            },\n+          )\n+\n+          expect(\n+            CategoryUser.where(category_id: category_ids.last, notification_level: watching).count,\n+          ).to eq(0)\n+        end\n+      end\n+\n+      context \"with default tags\" do\n+        let(:tags) { 3.times.collect { Fabricate(:tag) } }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2287035617",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33665,
        "pr_file": "spec/requests/admin/site_settings_controller_spec.rb",
        "discussion_id": "2287035617",
        "commented_code": "@@ -727,8 +720,85 @@ def expect_user_count(\n     end\n \n     context \"when logged in as a non-staff user\" do\n+      fab!(:user1, :user)\n+      fab!(:user2, :user)\n+\n+      let(:tracking) { NotificationLevels.all[:tracking] }\n+      let(:watching) { NotificationLevels.all[:watching] }\n+\n       before { sign_in(user) }\n \n+      context \"with default categories\" do\n+        let(:category_ids) { 3.times.collect { Fabricate(:category).id } }\n+\n+        before do\n+          SiteSetting.default_categories_watching = category_ids.first(2).join(\"|\")\n+\n+          CategoryUser.create!(\n+            category_id: category_ids.last,\n+            notification_level: tracking,\n+            user: user2,\n+          )\n+\n+          Jobs.run_immediately!\n+        end\n+\n+        it \"doesn't update default categories\" do\n+          put \"/admin/site_settings/default_categories_watching.json\",\n+              params: {\n+                default_categories_watching: category_ids.last(2).join(\"|\"),\n+                update_existing_user: true,\n+              }\n+\n+          expect(response.status).to eq(404)\n+\n+          expect_not_enqueued_with(\n+            job: Jobs::SiteSettingUpdateDefaultCategories,\n+            args: {\n+              id: \"default_categories_watching\",\n+              value: category_ids.last(2).join(\"|\"),\n+              previous_value: category_ids.first(2).join(\"|\"),\n+            },\n+          )\n+\n+          expect(\n+            CategoryUser.where(category_id: category_ids.last, notification_level: watching).count,\n+          ).to eq(0)\n+        end\n+      end\n+\n+      context \"with default tags\" do\n+        let(:tags) { 3.times.collect { Fabricate(:tag) } }",
        "comment_created_at": "2025-08-20T05:39:43+00:00",
        "comment_author": "tgxworld",
        "comment_body": "```suggestion\n        fab!(:tag, :tag_1)\n        fab!(:tag, :tag_2)\n        fab!(:tag, :tag_3)\n        let(:tags) { [tag_1, tag_2, tag_3] } \n```\n\nIntroduces the use of `fab!` so that we can reuse the fabricated objects between tests.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2285590861",
    "pr_number": 34376,
    "pr_file": "spec/requests/admin/config/customize_controller_spec.rb",
    "created_at": "2025-08-19T15:15:51+00:00",
    "commented_code": "end\n     end\n   end\n+\n+  describe \"#theme_site_settings\" do\n+    fab!(:theme_1) { Fabricate(:theme) }\n+    fab!(:theme_2) { Fabricate(:theme) }\n+    fab!(:theme_3) { Fabricate(:theme) }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2285590861",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34376,
        "pr_file": "spec/requests/admin/config/customize_controller_spec.rb",
        "discussion_id": "2285590861",
        "commented_code": "@@ -182,4 +182,80 @@\n       end\n     end\n   end\n+\n+  describe \"#theme_site_settings\" do\n+    fab!(:theme_1) { Fabricate(:theme) }\n+    fab!(:theme_2) { Fabricate(:theme) }\n+    fab!(:theme_3) { Fabricate(:theme) }",
        "comment_created_at": "2025-08-19T15:15:51+00:00",
        "comment_author": "CvX",
        "comment_body": "we'll merge the rubocop autofix soon but just a reminder that we now have this shorthand: `fab!(:theme_1, :theme)`",
        "pr_file_module": null
      },
      {
        "comment_id": "2286753951",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34376,
        "pr_file": "spec/requests/admin/config/customize_controller_spec.rb",
        "discussion_id": "2285590861",
        "commented_code": "@@ -182,4 +182,80 @@\n       end\n     end\n   end\n+\n+  describe \"#theme_site_settings\" do\n+    fab!(:theme_1) { Fabricate(:theme) }\n+    fab!(:theme_2) { Fabricate(:theme) }\n+    fab!(:theme_3) { Fabricate(:theme) }",
        "comment_created_at": "2025-08-20T01:19:48+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "Ah yes thanks will fix it up quickly",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2271167129",
    "pr_number": 34261,
    "pr_file": "plugins/discourse-ai/spec/system/summarization/gists_toggle_spec.rb",
    "created_at": "2025-08-12T20:38:15+00:00",
    "commented_code": "expect(page).not_to have_css(\".topic-list-layout-trigger\")\n     end\n   end\n+\n+  context \"when viewing gists on desktop\" do\n+    it \"renders gist component in desktop outlet\" do\n+      visit(\"/latest\")\n+\n+      find(\".topic-list-layout-trigger\").click\n+      find(\n+        \".dropdown-menu__item .d-button-label\",\n+        text: I18n.t(\"js.discourse_ai.summarization.topic_list_layout.button.expanded\"),\n+      ).click\n+\n+      expect(page).to have_css(\".link-bottom-line .excerpt__contents\")\n+    end\n+  end\n+end\n+\n+describe \"Gists Toggle Functionality - Mobile\", type: :system, mobile: true do\n+  fab!(:admin)\n+  fab!(:group)\n+  fab!(:topic_with_gist) { Fabricate(:topic) }",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2271167129",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34261,
        "pr_file": "plugins/discourse-ai/spec/system/summarization/gists_toggle_spec.rb",
        "discussion_id": "2271167129",
        "commented_code": "@@ -93,4 +93,50 @@\n       expect(page).not_to have_css(\".topic-list-layout-trigger\")\n     end\n   end\n+\n+  context \"when viewing gists on desktop\" do\n+    it \"renders gist component in desktop outlet\" do\n+      visit(\"/latest\")\n+\n+      find(\".topic-list-layout-trigger\").click\n+      find(\n+        \".dropdown-menu__item .d-button-label\",\n+        text: I18n.t(\"js.discourse_ai.summarization.topic_list_layout.button.expanded\"),\n+      ).click\n+\n+      expect(page).to have_css(\".link-bottom-line .excerpt__contents\")\n+    end\n+  end\n+end\n+\n+describe \"Gists Toggle Functionality - Mobile\", type: :system, mobile: true do\n+  fab!(:admin)\n+  fab!(:group)\n+  fab!(:topic_with_gist) { Fabricate(:topic) }",
        "comment_created_at": "2025-08-12T20:38:15+00:00",
        "comment_author": "CvX",
        "comment_body": "you can use this new-ish shorthand:\r\n\r\n```suggestion\r\n  fab!(:topic_with_gist, :topic)\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2230266630",
    "pr_number": 33848,
    "pr_file": "spec/models/form_template_spec.rb",
    "created_at": "2025-07-25T06:30:44+00:00",
    "commented_code": "expect(t.save).to eq(false)\n     expect(t.errors.full_messages.first).to include(I18n.t(\"form_templates.errors.missing_id\"))\n   end\n+\n+  describe \"#process!\" do\n+    fab!(:admin)\n+    fab!(:tag1, :tag)\n+    fab!(:tag2, :tag)\n+    fab!(:tag3, :tag)\n+    fab!(:tag4, :tag)\n+    fab!(:tag5, :tag)",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2230266630",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33848,
        "pr_file": "spec/models/form_template_spec.rb",
        "discussion_id": "2230266630",
        "commented_code": "@@ -86,4 +86,36 @@\n     expect(t.save).to eq(false)\n     expect(t.errors.full_messages.first).to include(I18n.t(\"form_templates.errors.missing_id\"))\n   end\n+\n+  describe \"#process!\" do\n+    fab!(:admin)\n+    fab!(:tag1, :tag)\n+    fab!(:tag2, :tag)\n+    fab!(:tag3, :tag)\n+    fab!(:tag4, :tag)\n+    fab!(:tag5, :tag)",
        "comment_created_at": "2025-07-25T06:30:44+00:00",
        "comment_author": "tgxworld",
        "comment_body": "Are these records fabricated to ensure that the `tag-chooser` selector isn't returning all the tags? Otherwise, we don't need to fabricate these records. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2230639439",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33848,
        "pr_file": "spec/models/form_template_spec.rb",
        "discussion_id": "2230266630",
        "commented_code": "@@ -86,4 +86,36 @@\n     expect(t.save).to eq(false)\n     expect(t.errors.full_messages.first).to include(I18n.t(\"form_templates.errors.missing_id\"))\n   end\n+\n+  describe \"#process!\" do\n+    fab!(:admin)\n+    fab!(:tag1, :tag)\n+    fab!(:tag2, :tag)\n+    fab!(:tag3, :tag)\n+    fab!(:tag4, :tag)\n+    fab!(:tag5, :tag)",
        "comment_created_at": "2025-07-25T09:34:02+00:00",
        "comment_author": "Lhcfl",
        "comment_body": "yeah, so it is using `to eq` instead of `to include`",
        "pr_file_module": null
      },
      {
        "comment_id": "2230798393",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33848,
        "pr_file": "spec/models/form_template_spec.rb",
        "discussion_id": "2230266630",
        "commented_code": "@@ -86,4 +86,36 @@\n     expect(t.save).to eq(false)\n     expect(t.errors.full_messages.first).to include(I18n.t(\"form_templates.errors.missing_id\"))\n   end\n+\n+  describe \"#process!\" do\n+    fab!(:admin)\n+    fab!(:tag1, :tag)\n+    fab!(:tag2, :tag)\n+    fab!(:tag3, :tag)\n+    fab!(:tag4, :tag)\n+    fab!(:tag5, :tag)",
        "comment_created_at": "2025-07-25T10:57:45+00:00",
        "comment_author": "Lhcfl",
        "comment_body": "I thought about it and decided to use them - because I happened to notice a bug in the initial commit, where the processed value would not be written when the attribute was empty.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2223365631",
    "pr_number": 33754,
    "pr_file": "plugins/discourse-calendar/spec/services/discourse_post_event/chat_channel_sync_spec.rb",
    "created_at": "2025-07-22T17:48:31+00:00",
    "commented_code": "expect(event.chat_channel_id).to be_nil\n   end\n+\n+  it \"defaults event name to post title\" do\n+    post = Fabricate(:post, user: Fabricate(:admin))\n+    event = Fabricate(:event, chat_enabled: true, post: post)",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2223365631",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33754,
        "pr_file": "plugins/discourse-calendar/spec/services/discourse_post_event/chat_channel_sync_spec.rb",
        "discussion_id": "2223365631",
        "commented_code": "@@ -27,4 +27,11 @@\n \n     expect(event.chat_channel_id).to be_nil\n   end\n+\n+  it \"defaults event name to post title\" do\n+    post = Fabricate(:post, user: Fabricate(:admin))\n+    event = Fabricate(:event, chat_enabled: true, post: post)",
        "comment_created_at": "2025-07-22T17:48:31+00:00",
        "comment_author": "CvX",
        "comment_body": "you could reuse the top-level fab I think\r\n\r\n```suggestion\r\n    event = Fabricate(:event, chat_enabled: true, post: admin_post)\r\n```",
        "pr_file_module": null
      }
    ]
  }
]