[
  {
    "discussion_id": "2255777976",
    "pr_number": 33984,
    "pr_file": "migrations/lib/importer/steps/tags.rb",
    "created_at": "2025-08-06T03:30:43+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class Tags < ::Migrations::Importer::CopyStep\n+    include ::HasSanitizableFields\n+\n+    MAX_DESCRIPTION_LENGTH = 1000\n+    RESERVED_TAGS = Tag::RESERVED_TAGS.to_set.freeze\n+\n+    store_mapped_ids true\n+    requires_mapping :existing_tag_by_name, \"SELECT LOWER(name), id FROM tags\"\n+\n+    column_names %i[id name description target_tag_id created_at updated_at]\n+\n+    total_rows_query <<~SQL, MappingType::TAGS\n+      SELECT COUNT(*)\n+      FROM tags\n+           LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAGS\n+      SELECT tags.*\n+      FROM tags\n+          LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+      ORDER BY tags.target_tag_id, tags.ROWID\n+    SQL\n+\n+    def execute\n+      SiteSetting.max_tag_length = 100 if SiteSetting.max_tag_length < 100",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2255777976",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33984,
        "pr_file": "migrations/lib/importer/steps/tags.rb",
        "discussion_id": "2255777976",
        "commented_code": "@@ -0,0 +1,108 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class Tags < ::Migrations::Importer::CopyStep\n+    include ::HasSanitizableFields\n+\n+    MAX_DESCRIPTION_LENGTH = 1000\n+    RESERVED_TAGS = Tag::RESERVED_TAGS.to_set.freeze\n+\n+    store_mapped_ids true\n+    requires_mapping :existing_tag_by_name, \"SELECT LOWER(name), id FROM tags\"\n+\n+    column_names %i[id name description target_tag_id created_at updated_at]\n+\n+    total_rows_query <<~SQL, MappingType::TAGS\n+      SELECT COUNT(*)\n+      FROM tags\n+           LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAGS\n+      SELECT tags.*\n+      FROM tags\n+          LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+      ORDER BY tags.target_tag_id, tags.ROWID\n+    SQL\n+\n+    def execute\n+      SiteSetting.max_tag_length = 100 if SiteSetting.max_tag_length < 100",
        "comment_created_at": "2025-08-06T03:30:43+00:00",
        "comment_author": "s3lase",
        "comment_body": "I copied this over from the current importer as-is, but I\u2019m not sure why the value is set to 100.\n\nShould we wrap site setting updates like this in some kind of restore logic, or maybe have a dedicated, configurable step at the start of the import to set them with a warning? We could potentially merge these with the site settings specified in the intermediate DB.",
        "pr_file_module": null
      },
      {
        "comment_id": "2259503506",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33984,
        "pr_file": "migrations/lib/importer/steps/tags.rb",
        "discussion_id": "2255777976",
        "commented_code": "@@ -0,0 +1,108 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class Tags < ::Migrations::Importer::CopyStep\n+    include ::HasSanitizableFields\n+\n+    MAX_DESCRIPTION_LENGTH = 1000\n+    RESERVED_TAGS = Tag::RESERVED_TAGS.to_set.freeze\n+\n+    store_mapped_ids true\n+    requires_mapping :existing_tag_by_name, \"SELECT LOWER(name), id FROM tags\"\n+\n+    column_names %i[id name description target_tag_id created_at updated_at]\n+\n+    total_rows_query <<~SQL, MappingType::TAGS\n+      SELECT COUNT(*)\n+      FROM tags\n+           LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAGS\n+      SELECT tags.*\n+      FROM tags\n+          LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+      ORDER BY tags.target_tag_id, tags.ROWID\n+    SQL\n+\n+    def execute\n+      SiteSetting.max_tag_length = 100 if SiteSetting.max_tag_length < 100",
        "comment_created_at": "2025-08-07T08:14:00+00:00",
        "comment_author": "gschlager",
        "comment_body": "I do not know why it's 100. My best guess is that it was an easy way out during the migration I was working on. `max_tag_length` needs to be larger than the longest tag name. Looking at the implementation of `DiscourseTagging.clean_tag` it seems like tag names can't get longer, just shorter. So, maybe we simply do a `LENGTH(name)` query on the IntermediateDB first, and then adjust the site setting if the value is too small. What do you think about that?",
        "pr_file_module": null
      },
      {
        "comment_id": "2260591845",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33984,
        "pr_file": "migrations/lib/importer/steps/tags.rb",
        "discussion_id": "2255777976",
        "commented_code": "@@ -0,0 +1,108 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class Tags < ::Migrations::Importer::CopyStep\n+    include ::HasSanitizableFields\n+\n+    MAX_DESCRIPTION_LENGTH = 1000\n+    RESERVED_TAGS = Tag::RESERVED_TAGS.to_set.freeze\n+\n+    store_mapped_ids true\n+    requires_mapping :existing_tag_by_name, \"SELECT LOWER(name), id FROM tags\"\n+\n+    column_names %i[id name description target_tag_id created_at updated_at]\n+\n+    total_rows_query <<~SQL, MappingType::TAGS\n+      SELECT COUNT(*)\n+      FROM tags\n+           LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAGS\n+      SELECT tags.*\n+      FROM tags\n+          LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+      ORDER BY tags.target_tag_id, tags.ROWID\n+    SQL\n+\n+    def execute\n+      SiteSetting.max_tag_length = 100 if SiteSetting.max_tag_length < 100",
        "comment_created_at": "2025-08-07T14:57:14+00:00",
        "comment_author": "s3lase",
        "comment_body": "I\u2019m okay with adjusting it based on the longest tag in the current import.\r\n\r\nThe bigger concern here though is how we handle site setting changes like this during import runs. `max_tag_length` change here isn\u2019t a big deal on its own, but other settings might have more impact, especially when importing or merging into existing sites. \r\n\r\nOnce we have logging or warnings in place, maybe we start flagging changes like these? Also, should this be handled in the dedicated site settings import step, where we collate all changes needed and present  a warning upfront?",
        "pr_file_module": null
      },
      {
        "comment_id": "2265191159",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33984,
        "pr_file": "migrations/lib/importer/steps/tags.rb",
        "discussion_id": "2255777976",
        "commented_code": "@@ -0,0 +1,108 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class Tags < ::Migrations::Importer::CopyStep\n+    include ::HasSanitizableFields\n+\n+    MAX_DESCRIPTION_LENGTH = 1000\n+    RESERVED_TAGS = Tag::RESERVED_TAGS.to_set.freeze\n+\n+    store_mapped_ids true\n+    requires_mapping :existing_tag_by_name, \"SELECT LOWER(name), id FROM tags\"\n+\n+    column_names %i[id name description target_tag_id created_at updated_at]\n+\n+    total_rows_query <<~SQL, MappingType::TAGS\n+      SELECT COUNT(*)\n+      FROM tags\n+           LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAGS\n+      SELECT tags.*\n+      FROM tags\n+          LEFT JOIN mapped.ids mapped_tag\n+            ON tags.original_id = mapped_tag.original_id AND mapped_tag.type = ?\n+      WHERE mapped_tag.original_id IS NULL\n+      ORDER BY tags.target_tag_id, tags.ROWID\n+    SQL\n+\n+    def execute\n+      SiteSetting.max_tag_length = 100 if SiteSetting.max_tag_length < 100",
        "comment_created_at": "2025-08-10T09:05:47+00:00",
        "comment_author": "gschlager",
        "comment_body": "I think it's best to keep it within the step that requires the change. Makes the code easier to maintain. But, we could put those setting changes in a dedicated method of steps and call them at the beginning of the import.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "654238057",
    "pr_number": 13422,
    "pr_file": "app/jobs/scheduled/pending_users_reminder.rb",
    "created_at": "2021-06-18T08:19:37+00:00",
    "commented_code": "module Jobs\n \n   class PendingUsersReminder < ::Jobs::Scheduled\n-    every 1.hour\n+    every 20.minutes",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "654238057",
        "repo_full_name": "discourse/discourse",
        "pr_number": 13422,
        "pr_file": "app/jobs/scheduled/pending_users_reminder.rb",
        "discussion_id": "654238057",
        "commented_code": "@@ -3,13 +3,13 @@\n module Jobs\n \n   class PendingUsersReminder < ::Jobs::Scheduled\n-    every 1.hour\n+    every 20.minutes",
        "comment_created_at": "2021-06-18T08:19:37+00:00",
        "comment_author": "tgxworld",
        "comment_body": "Is there a topic discussing this change? Unless we run a job at a much higher frequency like 5 minutes, I don't think this change is currently worth making. This is because most of the site setting values wouldn't make any difference since the job is only run three times an hour.",
        "pr_file_module": null
      },
      {
        "comment_id": "654519577",
        "repo_full_name": "discourse/discourse",
        "pr_number": 13422,
        "pr_file": "app/jobs/scheduled/pending_users_reminder.rb",
        "discussion_id": "654238057",
        "commented_code": "@@ -3,13 +3,13 @@\n module Jobs\n \n   class PendingUsersReminder < ::Jobs::Scheduled\n-    every 1.hour\n+    every 20.minutes",
        "comment_created_at": "2021-06-18T15:26:08+00:00",
        "comment_author": "eviltrout",
        "comment_body": "Yes this is a requested feature and I asked Roman to work on it. I agree we might need to go more frequent here (5-10 mins) though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2114797799",
    "pr_number": 32561,
    "pr_file": "script/bulk_import/base.rb",
    "created_at": "2025-05-29T21:44:54+00:00",
    "commented_code": "group[:created_at] ||= NOW\n     group[:updated_at] ||= group[:created_at]\n+    group[:assignable_level] ||= Group::ALIAS_LEVELS[:nobody] if @assign_plugin_enabled",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2114797799",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/base.rb",
        "discussion_id": "2114797799",
        "commented_code": "@@ -1225,6 +1243,7 @@ def process_group(group)\n \n     group[:created_at] ||= NOW\n     group[:updated_at] ||= group[:created_at]\n+    group[:assignable_level] ||= Group::ALIAS_LEVELS[:nobody] if @assign_plugin_enabled",
        "comment_created_at": "2025-05-29T21:44:54+00:00",
        "comment_author": "gschlager",
        "comment_body": "I think it's safe to set this unconditionally. There's no need for `@assign_plugin_enabled` in that case. A comment might be enough.",
        "pr_file_module": null
      },
      {
        "comment_id": "2121503586",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/base.rb",
        "discussion_id": "2114797799",
        "commented_code": "@@ -1225,6 +1243,7 @@ def process_group(group)\n \n     group[:created_at] ||= NOW\n     group[:updated_at] ||= group[:created_at]\n+    group[:assignable_level] ||= Group::ALIAS_LEVELS[:nobody] if @assign_plugin_enabled",
        "comment_created_at": "2025-06-02T15:26:55+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "Updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2124334131",
    "pr_number": 32561,
    "pr_file": "script/bulk_import/generic_bulk.rb",
    "created_at": "2025-06-03T16:04:51+00:00",
    "commented_code": "email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: false,\n+        hide_profile: false,\n+        hide_presence: false,",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2124334131",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2124334131",
        "commented_code": "@@ -562,6 +636,9 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: false,\n+        hide_profile: false,\n+        hide_presence: false,",
        "comment_created_at": "2025-06-03T16:04:51+00:00",
        "comment_author": "gschlager",
        "comment_body": "Why always `false`? If this is just about setting defaults, then the `USER_OPTION_DEFAULTS` hash in `BulkImport` is the right way to do it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2125061456",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2124334131",
        "commented_code": "@@ -562,6 +636,9 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: false,\n+        hide_profile: false,\n+        hide_presence: false,",
        "comment_created_at": "2025-06-03T22:43:39+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "Please see discussion with @s3lase here - https://github.com/discourse/discourse/pull/32561#discussion_r2077493455",
        "pr_file_module": null
      },
      {
        "comment_id": "2135933796",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2124334131",
        "commented_code": "@@ -562,6 +636,9 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: false,\n+        hide_profile: false,\n+        hide_presence: false,",
        "comment_created_at": "2025-06-09T15:22:41+00:00",
        "comment_author": "s3lase",
        "comment_body": "My comment was specifically on  `hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false`.\r\n\r\nIt was more about the fact that there's been change to make `hide_profile_and_presence` more granular, splitting it into `hide_profile` and `hide_presence`.  This removed `default_hide_profile_and_presence` site setting but kept the `hide_profile_and_presence` column in `user_options`.  Currently, users can't set `hide_profile_and_presence` directly, but if someone does so, say via the console, the callback below still ensures it stays in sync.\r\n\r\nhttps://github.com/discourse/discourse/blob/4117b08aa38f23919b32b94c82d9e2e9ea21f261/app/models/user_option.rb#L228-L235\r\n\r\nIf we\u2019re going to support importing just `hide_profile_and_presence` directly, we need to ensure it's synced with with `hide_profile` and `hide_presence` otherwise, we risk unintentionally breaking  things that expect them to be synced.\r\n\r\nIt looks like you\u2019ve reverted to hardcoded default values. @gschlager\u2019s comment here is on where you\u2019re doing this and why they\u2019re hardcoded to `false`. The current pattern is to set such defaults in `/script/bulk_import/base.rb`. In this case, the ideal place will be in `USER_OPTION_DEFAULTS` which in turn is used in:\r\n\r\nhttps://github.com/discourse/discourse/blob/4640a2237419f8e1f64e220ec220cf9f71ea7618/script/bulk_import/base.rb#L1400-L1403\r\n\r\n---\r\nIf you want to continue importing just `hide_profile_and_presence`, which at this stage seems just fine, you can do:\r\n\r\n\r\n```suggestion\r\n        hide_profile_and_presence: row[\"hide_profile_and_presence\"],\r\n```\r\n\r\nAnd then in `/script/bulk_import/base.rb`:\r\n\r\n\r\n```patch\r\ndiff --git a/script/bulk_import/base.rb b/script/bulk_import/base.rb\r\nindex 6d7cb130bc..b014ae961b 100644\r\n--- a/script/bulk_import/base.rb\r\n+++ b/script/bulk_import/base.rb\r\n@@ -1369,6 +1369,7 @@ class BulkImport::Base\r\n     notification_level_when_replying: SiteSetting.default_other_notification_level_when_replying,\r\n     like_notification_frequency: SiteSetting.default_other_like_notification_frequency,\r\n     skip_new_user_tips: SiteSetting.default_other_skip_new_user_tips,\r\n+    hide_profile_and_presence: false,\r\n     hide_profile: SiteSetting.default_hide_profile,\r\n     hide_presence: SiteSetting.default_hide_presence,\r\n     sidebar_link_to_filtered_list: SiteSetting.default_sidebar_link_to_filtered_list,\r\n@@ -1376,6 +1377,11 @@ class BulkImport::Base\r\n   }\r\n\r\n   def process_user_option(user_option)\r\n+    if user_option.key?(:hide_profile_and_presence)\r\n+      hide_profile_and_presence = user_option[:hide_profile_and_presence]\r\n+      user_option[:hide_profile] = user_option[:hide_presence] = hide_profile_and_presence\r\n+    end\r\n+\r\n     USER_OPTION_DEFAULTS.each { |key, value| user_option[key] = value if user_option[key].nil? }\r\n     user_option\r\n   end\r\n\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2136101883",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2124334131",
        "commented_code": "@@ -562,6 +636,9 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: false,\n+        hide_profile: false,\n+        hide_presence: false,",
        "comment_created_at": "2025-06-09T17:10:11+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "Thanks for clarifying @s3lase, I've implemented your suggestion to resolve the error\r\n```\r\nERROR:  null value in column \"hide_profile_and_presence\" of relation \"user_options\" violates not-null constraint\r\n```",
        "pr_file_module": null
      }
    ]
  }
]