[
  {
    "discussion_id": "2158033207",
    "pr_number": 33282,
    "pr_file": "AI-AGENTS.md",
    "created_at": "2025-06-20T04:46:39+00:00",
    "commented_code": "+# AI Coding Agent Guide\n+\n+This file contains project-specific instructions that any AI coding agent should read at the start of each conversation and maintain in memory throughout the entire interaction. IMPORTANT: Once this file has been read or updated, it MUST be loaded at the beginning of any new conversation to ensure awareness of communication requirements, custom tasks, etc.\n+\n+## Default Mode\n+\n+- Architect mode should be enabled by default.\n+- Focus on providing detailed analysis, patterns, trade-offs, and architectural guidance.\n+- If you're unable to write code that fits these guidelines, stop and ask for additional context from the developer.\n+\n+## Development Environment\n+\n+Discourse is a large project with a long development history. Ensure you understand the context of any changes you're making before you start.\n+\n+### General Rules\n+These rules apply to ALL files being changed.\n+\n+- Always lint changed files.\n+- Always make display strings translatable.\n+- Avoid splitting display strings into pieces: use translation placeholders, or multiple translatable strings where appropriate.\n+- After completing a task, create a subagent to review the changes and ensure they conform to the instructions in this file, as well as the prompt(s) given.\n+\n+### JavaScript\n+- Don't create empty backing classes for template tag only components, unless specifically asked to.\n+- Use the FormKit library for creating forms and form inputs. FormKit is documented here: https://meta.discourse.org/t/discourse-toolkit-to-render-forms/326439\n+\n+### JavaScript Documentation\n+- Always add JSDocs for classes, methods, and members, except for:\n+  - `@service` members\n+  - constructors\n+- Always use multiline JSDoc format.\n+- For components:\n+  - Specify the component name with `@component`.\n+  - List the params. These can be found in `this.args` in the JS, or `@paramname` in the `<template>`.\n+- For methods:\n+  - Don't add `@returns` for `@action` methods.\n+  - Don't add `@type` for getters, document with `@returns`.\n+- For members:\n+  - Specify the @type.\n+\n+## Writing Tests\n+\n+### General Rules\n+- Don't write tests for functionality that is handled by classes/components/modules other than the specific one being tested.\n+- Don't write obvious tests (eg, testing that a string can contain unicode characters)\n+\n+### Ruby Test Rules\n+- Use `fab!()` instead of `let()` wherever possible.\n+\n+### Command Reference\n+\n+#### Testing\n+\n+```bash\n+# Run all Ruby tests\n+bin/rspec\n+\n+# Run a specific Ruby test file\n+bin/rspec spec/path/to/file_spec.rb\n+\n+# Run a specific Ruby test by line number\n+bin/rspec spec/path/to/file_spec.rb:123\n+\n+# Run JavaScript tests\n+bin/rake qunit:test\n+\n+# Run a specific JavaScript test module\n+pnpm ember exam --filter 'Module | Filter | goes-here'\n+\n+```\n+\n+#### Linting and Formatting\n+\n+```bash\n+# Lint Ruby files\n+bundle exec rubocop path/to/file\n+bundle exec stree write Gemfile path/to/file\n+\n+# Lint JavaScript/TypeScript files\n+pnpm lint:js path/to/file\n+pnpm lint:hbs path/to/file\n+pnpm lint:prettier path/to/file\n+\n+# Lint CSS/SCSS files\n+pnpm lint:css path/to/file\n+```\n+\n+## Database & Performance\n+\n+### ActiveRecord Best Practices\n+- Always use `includes()` or `preload()` to prevent N+1 queries when accessing associations\n+- Use `find_each()` or `in_batches()` for large dataset processing\n+- Prefer database-level operations (`update_all`, `delete_all`) over Ruby loops for bulk changes\n+- Use `exists?` instead of `present?` when checking for record existence\n+\n+### Migration Guidelines\n+- Always include rollback logic in migrations\n+- Use `add_index(..., algorithm: :concurrently)` for large tables in production\n+- Never remove columns directly - deprecate first, then remove in subsequent release\n+- Test migrations on production-sized datasets when possible\n+\n+### Query Optimization\n+- Use `explain` to analyze query performance during development\n+- Avoid `SELECT *` - specify needed columns explicitly\n+- Use database indexes strategically, but avoid over-indexing\n+- Consider using `counter_cache` for frequently accessed counts\n+\n+## Security Guidelines\n+\n+### XSS Prevention\n+- Always use `{{}}` (escaped) instead of `{{{ }}}` (unescaped) in Ember templates\n+- Sanitize user input using Discourse's built-in helpers (`sanitize`, `cook`)\n+- Never directly insert user content into `innerHTML` or similar DOM methods\n+- Use `@html` argument carefully and only with pre-sanitized content\n+\n+### CSRF Protection\n+- All state-changing requests must use POST/PUT/DELETE, never GET\n+- Ensure CSRF tokens are included in AJAX requests\n+- Use Rails' `protect_from_forgery` in controllers handling sensitive operations\n+\n+### Input Sanitization\n+- Validate and sanitize all user inputs on both client and server side\n+- Use strong parameters in Rails controllers\n+- Apply appropriate length limits and format validation\n+- Never trust client-side validation alone\n+\n+### Authorization\n+- Always use Guardian classes for authorization checks",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2158033207",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33282,
        "pr_file": "AI-AGENTS.md",
        "discussion_id": "2158033207",
        "commented_code": "@@ -0,0 +1,142 @@\n+# AI Coding Agent Guide\n+\n+This file contains project-specific instructions that any AI coding agent should read at the start of each conversation and maintain in memory throughout the entire interaction. IMPORTANT: Once this file has been read or updated, it MUST be loaded at the beginning of any new conversation to ensure awareness of communication requirements, custom tasks, etc.\n+\n+## Default Mode\n+\n+- Architect mode should be enabled by default.\n+- Focus on providing detailed analysis, patterns, trade-offs, and architectural guidance.\n+- If you're unable to write code that fits these guidelines, stop and ask for additional context from the developer.\n+\n+## Development Environment\n+\n+Discourse is a large project with a long development history. Ensure you understand the context of any changes you're making before you start.\n+\n+### General Rules\n+These rules apply to ALL files being changed.\n+\n+- Always lint changed files.\n+- Always make display strings translatable.\n+- Avoid splitting display strings into pieces: use translation placeholders, or multiple translatable strings where appropriate.\n+- After completing a task, create a subagent to review the changes and ensure they conform to the instructions in this file, as well as the prompt(s) given.\n+\n+### JavaScript\n+- Don't create empty backing classes for template tag only components, unless specifically asked to.\n+- Use the FormKit library for creating forms and form inputs. FormKit is documented here: https://meta.discourse.org/t/discourse-toolkit-to-render-forms/326439\n+\n+### JavaScript Documentation\n+- Always add JSDocs for classes, methods, and members, except for:\n+  - `@service` members\n+  - constructors\n+- Always use multiline JSDoc format.\n+- For components:\n+  - Specify the component name with `@component`.\n+  - List the params. These can be found in `this.args` in the JS, or `@paramname` in the `<template>`.\n+- For methods:\n+  - Don't add `@returns` for `@action` methods.\n+  - Don't add `@type` for getters, document with `@returns`.\n+- For members:\n+  - Specify the @type.\n+\n+## Writing Tests\n+\n+### General Rules\n+- Don't write tests for functionality that is handled by classes/components/modules other than the specific one being tested.\n+- Don't write obvious tests (eg, testing that a string can contain unicode characters)\n+\n+### Ruby Test Rules\n+- Use `fab!()` instead of `let()` wherever possible.\n+\n+### Command Reference\n+\n+#### Testing\n+\n+```bash\n+# Run all Ruby tests\n+bin/rspec\n+\n+# Run a specific Ruby test file\n+bin/rspec spec/path/to/file_spec.rb\n+\n+# Run a specific Ruby test by line number\n+bin/rspec spec/path/to/file_spec.rb:123\n+\n+# Run JavaScript tests\n+bin/rake qunit:test\n+\n+# Run a specific JavaScript test module\n+pnpm ember exam --filter 'Module | Filter | goes-here'\n+\n+```\n+\n+#### Linting and Formatting\n+\n+```bash\n+# Lint Ruby files\n+bundle exec rubocop path/to/file\n+bundle exec stree write Gemfile path/to/file\n+\n+# Lint JavaScript/TypeScript files\n+pnpm lint:js path/to/file\n+pnpm lint:hbs path/to/file\n+pnpm lint:prettier path/to/file\n+\n+# Lint CSS/SCSS files\n+pnpm lint:css path/to/file\n+```\n+\n+## Database & Performance\n+\n+### ActiveRecord Best Practices\n+- Always use `includes()` or `preload()` to prevent N+1 queries when accessing associations\n+- Use `find_each()` or `in_batches()` for large dataset processing\n+- Prefer database-level operations (`update_all`, `delete_all`) over Ruby loops for bulk changes\n+- Use `exists?` instead of `present?` when checking for record existence\n+\n+### Migration Guidelines\n+- Always include rollback logic in migrations\n+- Use `add_index(..., algorithm: :concurrently)` for large tables in production\n+- Never remove columns directly - deprecate first, then remove in subsequent release\n+- Test migrations on production-sized datasets when possible\n+\n+### Query Optimization\n+- Use `explain` to analyze query performance during development\n+- Avoid `SELECT *` - specify needed columns explicitly\n+- Use database indexes strategically, but avoid over-indexing\n+- Consider using `counter_cache` for frequently accessed counts\n+\n+## Security Guidelines\n+\n+### XSS Prevention\n+- Always use `{{}}` (escaped) instead of `{{{ }}}` (unescaped) in Ember templates\n+- Sanitize user input using Discourse's built-in helpers (`sanitize`, `cook`)\n+- Never directly insert user content into `innerHTML` or similar DOM methods\n+- Use `@html` argument carefully and only with pre-sanitized content\n+\n+### CSRF Protection\n+- All state-changing requests must use POST/PUT/DELETE, never GET\n+- Ensure CSRF tokens are included in AJAX requests\n+- Use Rails' `protect_from_forgery` in controllers handling sensitive operations\n+\n+### Input Sanitization\n+- Validate and sanitize all user inputs on both client and server side\n+- Use strong parameters in Rails controllers\n+- Apply appropriate length limits and format validation\n+- Never trust client-side validation alone\n+\n+### Authorization\n+- Always use Guardian classes for authorization checks",
        "comment_created_at": "2025-06-20T04:46:39+00:00",
        "comment_author": "martin-brennan",
        "comment_body": "```suggestion\r\n- Always use Guardian classes for authorization checks, the Guardian class defined in lib/guardian.rb\r\n- There are other Guardian classes defined in lib/guardian\r\n```",
        "pr_file_module": null
      }
    ]
  }
]