[
  {
    "discussion_id": "2294690675",
    "pr_number": 33991,
    "pr_file": "migrations/lib/importer/steps/tag_groups.rb",
    "created_at": "2025-08-22T20:34:15+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class TagGroups < ::Migrations::Importer::CopyStep\n+    MAX_NAME_LENGTH = 100\n+\n+    depends_on :tags\n+    store_mapped_ids true\n+\n+    requires_mapping :existing_tag_group_by_name, \"SELECT LOWER(name), id FROM tag_groups\"\n+\n+    column_names %i[id name one_per_topic created_at updated_at parent_tag_id]\n+\n+    total_rows_query <<~SQL, MappingType::TAG_GROUPS\n+      SELECT COUNT(*)\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+              ON tag_groups.original_id = mapped_tag_group.original_id\n+                 AND mapped_tag_group.type = ?\n+      WHERE mapped_tag_group.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAG_GROUPS, MappingType::TAGS\n+      SELECT tag_groups.*,\n+             mapped_tag.discourse_id AS discourse_parent_tag_id\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+             ON tag_groups.original_id = mapped_tag_group.original_id\n+                AND mapped_tag_group.type = ?1\n+           LEFT JOIN mapped.ids mapped_tag\n+             ON tag_groups.parent_tag_id = mapped_tag.original_id AND mapped_tag.type = ?2\n+      WHERE mapped_tag_group.original_id IS NULL\n+      ORDER BY tag_groups.original_id\n+    SQL\n+\n+    def execute\n+      SiteSetting.tags_listed_by_group = true",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2294690675",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33991,
        "pr_file": "migrations/lib/importer/steps/tag_groups.rb",
        "discussion_id": "2294690675",
        "commented_code": "@@ -0,0 +1,56 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class TagGroups < ::Migrations::Importer::CopyStep\n+    MAX_NAME_LENGTH = 100\n+\n+    depends_on :tags\n+    store_mapped_ids true\n+\n+    requires_mapping :existing_tag_group_by_name, \"SELECT LOWER(name), id FROM tag_groups\"\n+\n+    column_names %i[id name one_per_topic created_at updated_at parent_tag_id]\n+\n+    total_rows_query <<~SQL, MappingType::TAG_GROUPS\n+      SELECT COUNT(*)\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+              ON tag_groups.original_id = mapped_tag_group.original_id\n+                 AND mapped_tag_group.type = ?\n+      WHERE mapped_tag_group.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAG_GROUPS, MappingType::TAGS\n+      SELECT tag_groups.*,\n+             mapped_tag.discourse_id AS discourse_parent_tag_id\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+             ON tag_groups.original_id = mapped_tag_group.original_id\n+                AND mapped_tag_group.type = ?1\n+           LEFT JOIN mapped.ids mapped_tag\n+             ON tag_groups.parent_tag_id = mapped_tag.original_id AND mapped_tag.type = ?2\n+      WHERE mapped_tag_group.original_id IS NULL\n+      ORDER BY tag_groups.original_id\n+    SQL\n+\n+    def execute\n+      SiteSetting.tags_listed_by_group = true",
        "comment_created_at": "2025-08-22T20:34:15+00:00",
        "comment_author": "gschlager",
        "comment_body": "Should we update that site setting only when there are tag groups? The `before` hook from https://github.com/discourse/discourse/pull/34491 could have the row count as a parameter.",
        "pr_file_module": null
      },
      {
        "comment_id": "2297961064",
        "repo_full_name": "discourse/discourse",
        "pr_number": 33991,
        "pr_file": "migrations/lib/importer/steps/tag_groups.rb",
        "discussion_id": "2294690675",
        "commented_code": "@@ -0,0 +1,56 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Importer::Steps\n+  class TagGroups < ::Migrations::Importer::CopyStep\n+    MAX_NAME_LENGTH = 100\n+\n+    depends_on :tags\n+    store_mapped_ids true\n+\n+    requires_mapping :existing_tag_group_by_name, \"SELECT LOWER(name), id FROM tag_groups\"\n+\n+    column_names %i[id name one_per_topic created_at updated_at parent_tag_id]\n+\n+    total_rows_query <<~SQL, MappingType::TAG_GROUPS\n+      SELECT COUNT(*)\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+              ON tag_groups.original_id = mapped_tag_group.original_id\n+                 AND mapped_tag_group.type = ?\n+      WHERE mapped_tag_group.original_id IS NULL\n+    SQL\n+\n+    rows_query <<~SQL, MappingType::TAG_GROUPS, MappingType::TAGS\n+      SELECT tag_groups.*,\n+             mapped_tag.discourse_id AS discourse_parent_tag_id\n+      FROM tag_groups\n+           LEFT JOIN mapped.ids mapped_tag_group\n+             ON tag_groups.original_id = mapped_tag_group.original_id\n+                AND mapped_tag_group.type = ?1\n+           LEFT JOIN mapped.ids mapped_tag\n+             ON tag_groups.parent_tag_id = mapped_tag.original_id AND mapped_tag.type = ?2\n+      WHERE mapped_tag_group.original_id IS NULL\n+      ORDER BY tag_groups.original_id\n+    SQL\n+\n+    def execute\n+      SiteSetting.tags_listed_by_group = true",
        "comment_created_at": "2025-08-25T12:24:14+00:00",
        "comment_author": "s3lase",
        "comment_body": "Yes, that works, even though there\u2019s a scenario where all available rows could be skipped too. I think just checking whether there are any rows is good enough for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2285138583",
    "pr_number": 34351,
    "pr_file": "db/migrate/20250818063631_migrate_color_schemes_base_scheme_id_from_string_to_int.rb",
    "created_at": "2025-08-19T12:44:06+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+class MigrateColorSchemesBaseSchemeIdFromStringToInt < ActiveRecord::Migration[8.0]\n+  NAMES_TO_ID_MAP = {\n+    \"Light\" => -1,\n+    \"Dark\" => -2,\n+    \"Neutral\" => -3,\n+    \"Grey Amber\" => -4,\n+    \"Shades of Blue\" => -5,\n+    \"Latte\" => -6,\n+    \"Summer\" => -7,\n+    \"Dark Rose\" => -8,\n+    \"WCAG\" => -9,\n+    \"WCAG Dark\" => -10,\n+    \"Dracula\" => -11,\n+    \"Solarized Light\" => -12,\n+    \"Solarized Dark\" => -13,\n+  }\n+  def up\n+    return if column_exists?(:color_schemes, :base_scheme_id, :integer)\n+    execute <<-SQL\n+      UPDATE color_schemes\n+      SET base_scheme_id = (\n+        SELECT id FROM color_schemes base_schemes\n+        WHERE base_scheme_id = base_schemes.base_scheme_id\n+        AND base_schemes.via_wizard IS TRUE\n+        LIMIT 1\n+      )\n+      WHERE color_schemes.via_wizard IS FALSE\n+      AND color_schemes.base_scheme_id IS NOT NULL\n+    SQL\n+\n+    NAMES_TO_ID_MAP.each { |name, id| execute <<-SQL }\n+      UPDATE color_schemes\n+      SET base_scheme_id = #{id}\n+      WHERE base_scheme_id = '#{name}'\n+      AND via_wizard IS TRUE\n+    SQL",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2285138583",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34351,
        "pr_file": "db/migrate/20250818063631_migrate_color_schemes_base_scheme_id_from_string_to_int.rb",
        "discussion_id": "2285138583",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+class MigrateColorSchemesBaseSchemeIdFromStringToInt < ActiveRecord::Migration[8.0]\n+  NAMES_TO_ID_MAP = {\n+    \"Light\" => -1,\n+    \"Dark\" => -2,\n+    \"Neutral\" => -3,\n+    \"Grey Amber\" => -4,\n+    \"Shades of Blue\" => -5,\n+    \"Latte\" => -6,\n+    \"Summer\" => -7,\n+    \"Dark Rose\" => -8,\n+    \"WCAG\" => -9,\n+    \"WCAG Dark\" => -10,\n+    \"Dracula\" => -11,\n+    \"Solarized Light\" => -12,\n+    \"Solarized Dark\" => -13,\n+  }\n+  def up\n+    return if column_exists?(:color_schemes, :base_scheme_id, :integer)\n+    execute <<-SQL\n+      UPDATE color_schemes\n+      SET base_scheme_id = (\n+        SELECT id FROM color_schemes base_schemes\n+        WHERE base_scheme_id = base_schemes.base_scheme_id\n+        AND base_schemes.via_wizard IS TRUE\n+        LIMIT 1\n+      )\n+      WHERE color_schemes.via_wizard IS FALSE\n+      AND color_schemes.base_scheme_id IS NOT NULL\n+    SQL\n+\n+    NAMES_TO_ID_MAP.each { |name, id| execute <<-SQL }\n+      UPDATE color_schemes\n+      SET base_scheme_id = #{id}\n+      WHERE base_scheme_id = '#{name}'\n+      AND via_wizard IS TRUE\n+    SQL",
        "comment_created_at": "2025-08-19T12:44:06+00:00",
        "comment_author": "OsamaSayegh",
        "comment_body": "Is there a reason we can't use this `UPDATE` statement for all palettes? I see this one is for palettes that are `via_wizard: true` and the one above for `via_wizard: false`, but I don't understand why different logic is needed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2286525039",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34351,
        "pr_file": "db/migrate/20250818063631_migrate_color_schemes_base_scheme_id_from_string_to_int.rb",
        "discussion_id": "2285138583",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+class MigrateColorSchemesBaseSchemeIdFromStringToInt < ActiveRecord::Migration[8.0]\n+  NAMES_TO_ID_MAP = {\n+    \"Light\" => -1,\n+    \"Dark\" => -2,\n+    \"Neutral\" => -3,\n+    \"Grey Amber\" => -4,\n+    \"Shades of Blue\" => -5,\n+    \"Latte\" => -6,\n+    \"Summer\" => -7,\n+    \"Dark Rose\" => -8,\n+    \"WCAG\" => -9,\n+    \"WCAG Dark\" => -10,\n+    \"Dracula\" => -11,\n+    \"Solarized Light\" => -12,\n+    \"Solarized Dark\" => -13,\n+  }\n+  def up\n+    return if column_exists?(:color_schemes, :base_scheme_id, :integer)\n+    execute <<-SQL\n+      UPDATE color_schemes\n+      SET base_scheme_id = (\n+        SELECT id FROM color_schemes base_schemes\n+        WHERE base_scheme_id = base_schemes.base_scheme_id\n+        AND base_schemes.via_wizard IS TRUE\n+        LIMIT 1\n+      )\n+      WHERE color_schemes.via_wizard IS FALSE\n+      AND color_schemes.base_scheme_id IS NOT NULL\n+    SQL\n+\n+    NAMES_TO_ID_MAP.each { |name, id| execute <<-SQL }\n+      UPDATE color_schemes\n+      SET base_scheme_id = #{id}\n+      WHERE base_scheme_id = '#{name}'\n+      AND via_wizard IS TRUE\n+    SQL",
        "comment_created_at": "2025-08-19T22:43:55+00:00",
        "comment_author": "lis2",
        "comment_body": "`via_wizard` are base palettes created here - https://github.com/discourse/discourse/blob/main/db/fixtures/600_themes.rb#L25\r\n\r\nFor them, I would like to use map and set base_scheme_id with negative values -1, -2 etc. So `ColorScheme id: 301, name: \"Dark\", base_scheme_id: \"Dark\"` will become `ColorScheme id: 301, name: \"Dark\", base_scheme_id: \"-2\"`. Side note: I considered updating `id` column from 301 to -2 but that would require much complicated migration. \r\n\r\nWhen `via_wizard` is false, palettes are created by themes or manually by user. For them, I would like to set `base_scheme_id` as positive values so\r\n`ColorScheme id: 400, name: \"Custom scheme\", base_scheme_id: \"Dark\"` will become `ColorScheme id: 400, name: \"Custom scheme\", base_scheme_id: \"301\"`\r\n\r\nDoes it make sense?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2286659700",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34351,
        "pr_file": "db/migrate/20250818063631_migrate_color_schemes_base_scheme_id_from_string_to_int.rb",
        "discussion_id": "2285138583",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+class MigrateColorSchemesBaseSchemeIdFromStringToInt < ActiveRecord::Migration[8.0]\n+  NAMES_TO_ID_MAP = {\n+    \"Light\" => -1,\n+    \"Dark\" => -2,\n+    \"Neutral\" => -3,\n+    \"Grey Amber\" => -4,\n+    \"Shades of Blue\" => -5,\n+    \"Latte\" => -6,\n+    \"Summer\" => -7,\n+    \"Dark Rose\" => -8,\n+    \"WCAG\" => -9,\n+    \"WCAG Dark\" => -10,\n+    \"Dracula\" => -11,\n+    \"Solarized Light\" => -12,\n+    \"Solarized Dark\" => -13,\n+  }\n+  def up\n+    return if column_exists?(:color_schemes, :base_scheme_id, :integer)\n+    execute <<-SQL\n+      UPDATE color_schemes\n+      SET base_scheme_id = (\n+        SELECT id FROM color_schemes base_schemes\n+        WHERE base_scheme_id = base_schemes.base_scheme_id\n+        AND base_schemes.via_wizard IS TRUE\n+        LIMIT 1\n+      )\n+      WHERE color_schemes.via_wizard IS FALSE\n+      AND color_schemes.base_scheme_id IS NOT NULL\n+    SQL\n+\n+    NAMES_TO_ID_MAP.each { |name, id| execute <<-SQL }\n+      UPDATE color_schemes\n+      SET base_scheme_id = #{id}\n+      WHERE base_scheme_id = '#{name}'\n+      AND via_wizard IS TRUE\n+    SQL",
        "comment_created_at": "2025-08-20T00:05:41+00:00",
        "comment_author": "OsamaSayegh",
        "comment_body": "Yeah it makes sense now, but there's one issue. In `600_themes.rb`, we seed only a subset of the hardcoded palettes defined in `ColorScheme::BUILT_IN_SCHEMES`, but if a custom palettes has been created based on one of the hardcoded/built-in palettes that aren't seeded, it will be missed by this migration because it has `via_wizard: false` and there's no db record for the built-in palette that it's based on. As an example, if you base a custom palette on `Dark Rose` which is a built-in palette and not seeded, the custom palette will end up with null for its `base_scheme_id` field instead of `-8`.\n\nAlso, why should the first example have -2 for the `base_scheme_id` and the other example a positive id that exists in the database? Why not -2 for both?",
        "pr_file_module": null
      },
      {
        "comment_id": "2286683428",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34351,
        "pr_file": "db/migrate/20250818063631_migrate_color_schemes_base_scheme_id_from_string_to_int.rb",
        "discussion_id": "2285138583",
        "commented_code": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+class MigrateColorSchemesBaseSchemeIdFromStringToInt < ActiveRecord::Migration[8.0]\n+  NAMES_TO_ID_MAP = {\n+    \"Light\" => -1,\n+    \"Dark\" => -2,\n+    \"Neutral\" => -3,\n+    \"Grey Amber\" => -4,\n+    \"Shades of Blue\" => -5,\n+    \"Latte\" => -6,\n+    \"Summer\" => -7,\n+    \"Dark Rose\" => -8,\n+    \"WCAG\" => -9,\n+    \"WCAG Dark\" => -10,\n+    \"Dracula\" => -11,\n+    \"Solarized Light\" => -12,\n+    \"Solarized Dark\" => -13,\n+  }\n+  def up\n+    return if column_exists?(:color_schemes, :base_scheme_id, :integer)\n+    execute <<-SQL\n+      UPDATE color_schemes\n+      SET base_scheme_id = (\n+        SELECT id FROM color_schemes base_schemes\n+        WHERE base_scheme_id = base_schemes.base_scheme_id\n+        AND base_schemes.via_wizard IS TRUE\n+        LIMIT 1\n+      )\n+      WHERE color_schemes.via_wizard IS FALSE\n+      AND color_schemes.base_scheme_id IS NOT NULL\n+    SQL\n+\n+    NAMES_TO_ID_MAP.each { |name, id| execute <<-SQL }\n+      UPDATE color_schemes\n+      SET base_scheme_id = #{id}\n+      WHERE base_scheme_id = '#{name}'\n+      AND via_wizard IS TRUE\n+    SQL",
        "comment_created_at": "2025-08-20T00:25:13+00:00",
        "comment_author": "lis2",
        "comment_body": ">As an example, if you base a custom palette on Dark Rose which is a built-in palette and not seeded, the custom palette will end up with null for its base_scheme_id field instead of -8.\r\n\r\nThank you, very good catch \ud83d\udc4d I will improve it\r\n\r\n> Also, why should the first example have -2 for the base_scheme_id and the other example a positive id that exists in the database? Why not -2 for both?\r\n\r\nBoth would be fine, but I thought that using positive id makes more sense. Technically, you can take base color palette like Dark and change some colors. If we create new palette based on \"Dark\", with positive ids we will have those adjusted colors. If we store \"-2\", then we would have hardcoded values. \r\n\r\nEDITED: Ah, but now we have problem with your Dark Rose if is not seeded. You are right, let's keep negative ids there.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2252872609",
    "pr_number": 34085,
    "pr_file": "plugins/discourse-ai/db/migrate/20250721080444_seed_personas_from_triage_scripts.rb",
    "created_at": "2025-08-05T01:03:34+00:00",
    "commented_code": "desc = \"Seeded Persona for an LLM Triage script\"\n           prompt = field[\"system_prompt\"]\n \n+          duplicate = DB.query_single(<<~SQL, name: name).first\n+              SELECT id from ai_personas where name = :name\n+            SQL\n+\n+          next nil if duplicate.present?",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2252872609",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34085,
        "pr_file": "plugins/discourse-ai/db/migrate/20250721080444_seed_personas_from_triage_scripts.rb",
        "discussion_id": "2252872609",
        "commented_code": "@@ -44,6 +44,12 @@ def up\n           desc = \"Seeded Persona for an LLM Triage script\"\n           prompt = field[\"system_prompt\"]\n \n+          duplicate = DB.query_single(<<~SQL, name: name).first\n+              SELECT id from ai_personas where name = :name\n+            SQL\n+\n+          next nil if duplicate.present?",
        "comment_created_at": "2025-08-05T01:03:34+00:00",
        "comment_author": "romanrizzi",
        "comment_body": "I think this should be:\r\n\r\n```\r\nif duplicate.present?\r\n  duplicate\r\nelse\r\n  ...\r\nend\r\n```\r\n\r\nSo the migration can continue.",
        "pr_file_module": null
      },
      {
        "comment_id": "2252873922",
        "repo_full_name": "discourse/discourse",
        "pr_number": 34085,
        "pr_file": "plugins/discourse-ai/db/migrate/20250721080444_seed_personas_from_triage_scripts.rb",
        "discussion_id": "2252872609",
        "commented_code": "@@ -44,6 +44,12 @@ def up\n           desc = \"Seeded Persona for an LLM Triage script\"\n           prompt = field[\"system_prompt\"]\n \n+          duplicate = DB.query_single(<<~SQL, name: name).first\n+              SELECT id from ai_personas where name = :name\n+            SQL\n+\n+          next nil if duplicate.present?",
        "comment_created_at": "2025-08-05T01:04:55+00:00",
        "comment_author": "featheredtoast",
        "comment_body": "Good catch, you're right - I've updated to do that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107849317",
    "pr_number": 32907,
    "pr_file": "migrations/lib/converters/discourse/steps/group_users.rb",
    "created_at": "2025-05-26T21:01:25+00:00",
    "commented_code": "+# frozen_string_literal: true\n+\n+module Migrations::Converters::Discourse\n+  class GroupUsers < ::Migrations::Converters::Base::ProgressStep\n+    attr_accessor :source_db\n+\n+    def max_progress\n+      @source_db.count <<~SQL\n+        SELECT COUNT(*)\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def items\n+      @source_db.query <<~SQL\n+        SELECT *\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def process_item(item)\n+      IntermediateDB::GroupUser.create(\n+        group_id: item[:group_id],\n+        user_id: item[:user_id],\n+        owner: item[:owner],\n+        notification_level: item[:notification_level],\n+        first_unread_pm_at: item[:first_unread_pm_at],",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2107849317",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32907,
        "pr_file": "migrations/lib/converters/discourse/steps/group_users.rb",
        "discussion_id": "2107849317",
        "commented_code": "@@ -0,0 +1,33 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Converters::Discourse\n+  class GroupUsers < ::Migrations::Converters::Base::ProgressStep\n+    attr_accessor :source_db\n+\n+    def max_progress\n+      @source_db.count <<~SQL\n+        SELECT COUNT(*)\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def items\n+      @source_db.query <<~SQL\n+        SELECT *\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def process_item(item)\n+      IntermediateDB::GroupUser.create(\n+        group_id: item[:group_id],\n+        user_id: item[:user_id],\n+        owner: item[:owner],\n+        notification_level: item[:notification_level],\n+        first_unread_pm_at: item[:first_unread_pm_at],",
        "comment_created_at": "2025-05-26T21:01:25+00:00",
        "comment_author": "gschlager",
        "comment_body": "Could we skip this? `first_unread_pm_at` feels like a calculated column.",
        "pr_file_module": null
      },
      {
        "comment_id": "2108014042",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32907,
        "pr_file": "migrations/lib/converters/discourse/steps/group_users.rb",
        "discussion_id": "2107849317",
        "commented_code": "@@ -0,0 +1,33 @@\n+# frozen_string_literal: true\n+\n+module Migrations::Converters::Discourse\n+  class GroupUsers < ::Migrations::Converters::Base::ProgressStep\n+    attr_accessor :source_db\n+\n+    def max_progress\n+      @source_db.count <<~SQL\n+        SELECT COUNT(*)\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def items\n+      @source_db.query <<~SQL\n+        SELECT *\n+        FROM group_users\n+        WHERE user_id >= 0\n+      SQL\n+    end\n+\n+    def process_item(item)\n+      IntermediateDB::GroupUser.create(\n+        group_id: item[:group_id],\n+        user_id: item[:user_id],\n+        owner: item[:owner],\n+        notification_level: item[:notification_level],\n+        first_unread_pm_at: item[:first_unread_pm_at],",
        "comment_created_at": "2025-05-27T02:05:33+00:00",
        "comment_author": "s3lase",
        "comment_body": "Good catch! I missed that. I tried to include as many columns as possible, only skipping computed columns. There are probably still a few others.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2077493455",
    "pr_number": 32561,
    "pr_file": "script/bulk_import/generic_bulk.rb",
    "created_at": "2025-05-07T12:16:33+00:00",
    "commented_code": "email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false,",
    "repo_full_name": "discourse/discourse",
    "discussion_comments": [
      {
        "comment_id": "2077493455",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077493455",
        "commented_code": "@@ -562,6 +631,7 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false,",
        "comment_created_at": "2025-05-07T12:16:33+00:00",
        "comment_author": "s3lase",
        "comment_body": "There seems to be some work to make this setting more granular by splitting it into `hide_profile` and `hide_presence`, but `hide_profile_and_presence` still appears to be kept in sync as follows: \r\n\r\nhttps://github.com/discourse/discourse/blob/4117b08aa38f23919b32b94c82d9e2e9ea21f261/app/models/user_option.rb#L228-L235\r\n\r\nSimply setting `hide_profile_and_presence` might be problematic.  You could:\r\n\r\n1. Set both `hide_profile` and `hide_presence` to the value of `hide_profile_and_presence`,  if it\u2019s explicitly provided in `process_user_options`\r\n2. Update the converter framework to support to also support  `hide_profile` and `hide_presence` and replicate the logic above to keep them in sync",
        "pr_file_module": null
      },
      {
        "comment_id": "2112047660",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077493455",
        "commented_code": "@@ -562,6 +631,7 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false,",
        "comment_created_at": "2025-05-28T14:20:59+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "I've made a couple of updates here. Let me know if this would work? This is actually not used in the converter. It was due to an error that was caused during the import that requested this to be added if I remember correctly.",
        "pr_file_module": null
      },
      {
        "comment_id": "2112155669",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077493455",
        "commented_code": "@@ -562,6 +631,7 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false,",
        "comment_created_at": "2025-05-28T15:09:41+00:00",
        "comment_author": "RubenOussoren",
        "comment_body": "This was the error:\r\n```\r\nERROR:  null value in column \"hide_profile_and_presence\" of relation \"user_options\" violates not-null constraint\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2135939703",
        "repo_full_name": "discourse/discourse",
        "pr_number": 32561,
        "pr_file": "script/bulk_import/generic_bulk.rb",
        "discussion_id": "2077493455",
        "commented_code": "@@ -562,6 +631,7 @@ def import_user_options\n         email_level: row[\"email_level\"],\n         email_messages_level: row[\"email_messages_level\"],\n         email_digests: row[\"email_digests\"],\n+        hide_profile_and_presence: row[\"hide_profile_and_presence\"] || false,",
        "comment_created_at": "2025-06-09T15:26:07+00:00",
        "comment_author": "s3lase",
        "comment_body": "The suggestion at the end of https://github.com/discourse/discourse/pull/32561#discussion_r2135933796 should help with the error",
        "pr_file_module": null
      }
    ]
  }
]