[
  {
    "discussion_id": "2188741891",
    "pr_number": 19620,
    "pr_file": "django/db/migrations/autodetector.py",
    "created_at": "2025-07-06T23:50:16+00:00",
    "commented_code": "self._generate_removed_field(app_label, model_name, field_name)\n \n     def _generate_removed_field(self, app_label, model_name, field_name):\n+        # Include dependencies such as order_with_respect_to, constraints,\n+        # and any generated fields that may depend on this field. These are\n+        # safely ignored if not present.\n+        dependencies = [\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_ORDER_WRT,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.ALTER_FOO_TOGETHER,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n+            ),\n+        ]\n+        dependencies.extend(\n+            self._get_generated_field_dependencies_for_removed_field(\n+                app_label, model_name, field_name\n+            )\n+        )\n         self.add_operation(\n             app_label,\n             operations.RemoveField(\n                 model_name=model_name,\n                 name=field_name,\n             ),\n-            # We might need to depend on the removal of an\n-            # order_with_respect_to or index/constraint/unique_together operation;\n-            # this is safely ignored if there isn't one\n-            dependencies=[\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_ORDER_WRT,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.ALTER_FOO_TOGETHER,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n-                ),",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "2188741891",
        "repo_full_name": "django/django",
        "pr_number": 19620,
        "pr_file": "django/db/migrations/autodetector.py",
        "discussion_id": "2188741891",
        "commented_code": "@@ -1212,35 +1212,41 @@ def generate_removed_fields(self):\n             self._generate_removed_field(app_label, model_name, field_name)\n \n     def _generate_removed_field(self, app_label, model_name, field_name):\n+        # Include dependencies such as order_with_respect_to, constraints,\n+        # and any generated fields that may depend on this field. These are\n+        # safely ignored if not present.\n+        dependencies = [\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_ORDER_WRT,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.ALTER_FOO_TOGETHER,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n+            ),\n+        ]\n+        dependencies.extend(\n+            self._get_generated_field_dependencies_for_removed_field(\n+                app_label, model_name, field_name\n+            )\n+        )\n         self.add_operation(\n             app_label,\n             operations.RemoveField(\n                 model_name=model_name,\n                 name=field_name,\n             ),\n-            # We might need to depend on the removal of an\n-            # order_with_respect_to or index/constraint/unique_together operation;\n-            # this is safely ignored if there isn't one\n-            dependencies=[\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_ORDER_WRT,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.ALTER_FOO_TOGETHER,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n-                ),",
        "comment_created_at": "2025-07-06T23:50:16+00:00",
        "comment_author": "charettes",
        "comment_body": "I think all of the diff noise above could be avoided by simply doing\r\n\r\n```\r\n            *self._get_generated_field_dependencies_for_removed_field(\r\n                app_label, model_name, field_name\r\n            ),\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2189369043",
        "repo_full_name": "django/django",
        "pr_number": 19620,
        "pr_file": "django/db/migrations/autodetector.py",
        "discussion_id": "2188741891",
        "commented_code": "@@ -1212,35 +1212,41 @@ def generate_removed_fields(self):\n             self._generate_removed_field(app_label, model_name, field_name)\n \n     def _generate_removed_field(self, app_label, model_name, field_name):\n+        # Include dependencies such as order_with_respect_to, constraints,\n+        # and any generated fields that may depend on this field. These are\n+        # safely ignored if not present.\n+        dependencies = [\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_ORDER_WRT,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.ALTER_FOO_TOGETHER,\n+            ),\n+            OperationDependency(\n+                app_label,\n+                model_name,\n+                field_name,\n+                OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n+            ),\n+        ]\n+        dependencies.extend(\n+            self._get_generated_field_dependencies_for_removed_field(\n+                app_label, model_name, field_name\n+            )\n+        )\n         self.add_operation(\n             app_label,\n             operations.RemoveField(\n                 model_name=model_name,\n                 name=field_name,\n             ),\n-            # We might need to depend on the removal of an\n-            # order_with_respect_to or index/constraint/unique_together operation;\n-            # this is safely ignored if there isn't one\n-            dependencies=[\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_ORDER_WRT,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.ALTER_FOO_TOGETHER,\n-                ),\n-                OperationDependency(\n-                    app_label,\n-                    model_name,\n-                    field_name,\n-                    OperationDependency.Type.REMOVE_INDEX_OR_CONSTRAINT,\n-                ),",
        "comment_created_at": "2025-07-07T08:35:31+00:00",
        "comment_author": "cliff688",
        "comment_body": "Super \ud83d\ude80 ! Thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033576901",
    "pr_number": 19361,
    "pr_file": "tests/migrations/test_migrations_backwards/0002_remove.py",
    "created_at": "2025-04-08T16:23:34+00:00",
    "commented_code": "+from django.db import migrations\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = [\n+        ('migrations', '0001_initial'),\n+    ]\n+\n+    operations = [\n+        migrations.RemoveField(\n+            model_name=\"dog\",\n+            name=\"animal\",\n+        ),",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "2033576901",
        "repo_full_name": "django/django",
        "pr_number": 19361,
        "pr_file": "tests/migrations/test_migrations_backwards/0002_remove.py",
        "discussion_id": "2033576901",
        "commented_code": "@@ -0,0 +1,20 @@\n+from django.db import migrations\n+\n+\n+class Migration(migrations.Migration):\n+    dependencies = [\n+        ('migrations', '0001_initial'),\n+    ]\n+\n+    operations = [\n+        migrations.RemoveField(\n+            model_name=\"dog\",\n+            name=\"animal\",\n+        ),",
        "comment_created_at": "2025-04-08T16:23:34+00:00",
        "comment_author": "wookkl",
        "comment_body": "The `models.Index(fields=[\"animal\", \"name\"], name=\"animal_name_idx\")` is not removed here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2045040622",
    "pr_number": 19361,
    "pr_file": "tests/migrations/test_autodetector.py",
    "created_at": "2025-04-15T16:35:04+00:00",
    "commented_code": "changes, \"otherapp\", 0, 0, model_name=\"book\", name=\"book_title_author_idx\"\n         )\n \n+    def test_remove_field_and_index(self):\n+        before_state = [\n+            ModelState(\"testapp\", \"Animal\", []),\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[\n+                    (\"name\", models.CharField(max_length=100)),\n+                    (\n+                        \"animal\",\n+                        models.ForeignKey(\"testapp.Animal\", on_delete=models.CASCADE),\n+                    ),\n+                ],\n+                options={\n+                    \"indexes\": [\n+                        models.Index(fields=(\"animal\", \"name\"), name=\"animal_name_idx\")\n+                    ],\n+                },\n+            ),\n+        ]\n+        changes = self.get_changes(before_state, [])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            [\"RemoveIndex\", \"RemoveField\", \"DeleteModel\", \"DeleteModel\"],\n+        )\n+\n+    def test_remove_field_and_constraint(self):\n+        before_state = [\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[(\"name\", models.CharField(max_length=100))],\n+                options={\n+                    \"constraints\": [\n+                        models.CheckConstraint(\n+                            condition=models.Q(name__contains=\"dog__\"),\n+                            name=\"name_contains_prefix\",\n+                        )\n+                    ]\n+                },\n+            ),",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "2045040622",
        "repo_full_name": "django/django",
        "pr_number": 19361,
        "pr_file": "tests/migrations/test_autodetector.py",
        "discussion_id": "2045040622",
        "commented_code": "@@ -2798,6 +2798,62 @@ def test_remove_indexes(self):\n             changes, \"otherapp\", 0, 0, model_name=\"book\", name=\"book_title_author_idx\"\n         )\n \n+    def test_remove_field_and_index(self):\n+        before_state = [\n+            ModelState(\"testapp\", \"Animal\", []),\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[\n+                    (\"name\", models.CharField(max_length=100)),\n+                    (\n+                        \"animal\",\n+                        models.ForeignKey(\"testapp.Animal\", on_delete=models.CASCADE),\n+                    ),\n+                ],\n+                options={\n+                    \"indexes\": [\n+                        models.Index(fields=(\"animal\", \"name\"), name=\"animal_name_idx\")\n+                    ],\n+                },\n+            ),\n+        ]\n+        changes = self.get_changes(before_state, [])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            [\"RemoveIndex\", \"RemoveField\", \"DeleteModel\", \"DeleteModel\"],\n+        )\n+\n+    def test_remove_field_and_constraint(self):\n+        before_state = [\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[(\"name\", models.CharField(max_length=100))],\n+                options={\n+                    \"constraints\": [\n+                        models.CheckConstraint(\n+                            condition=models.Q(name__contains=\"dog__\"),\n+                            name=\"name_contains_prefix\",\n+                        )\n+                    ]\n+                },\n+            ),",
        "comment_created_at": "2025-04-15T16:35:04+00:00",
        "comment_author": "charettes",
        "comment_body": "You need two models here to trigger the related model special casing. It could be the exact same as the `test_remove_field_and_index` except that `Dog` has a constraint instead of an index.",
        "pr_file_module": null
      },
      {
        "comment_id": "2045055295",
        "repo_full_name": "django/django",
        "pr_number": 19361,
        "pr_file": "tests/migrations/test_autodetector.py",
        "discussion_id": "2045040622",
        "commented_code": "@@ -2798,6 +2798,62 @@ def test_remove_indexes(self):\n             changes, \"otherapp\", 0, 0, model_name=\"book\", name=\"book_title_author_idx\"\n         )\n \n+    def test_remove_field_and_index(self):\n+        before_state = [\n+            ModelState(\"testapp\", \"Animal\", []),\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[\n+                    (\"name\", models.CharField(max_length=100)),\n+                    (\n+                        \"animal\",\n+                        models.ForeignKey(\"testapp.Animal\", on_delete=models.CASCADE),\n+                    ),\n+                ],\n+                options={\n+                    \"indexes\": [\n+                        models.Index(fields=(\"animal\", \"name\"), name=\"animal_name_idx\")\n+                    ],\n+                },\n+            ),\n+        ]\n+        changes = self.get_changes(before_state, [])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(\n+            changes,\n+            \"testapp\",\n+            0,\n+            [\"RemoveIndex\", \"RemoveField\", \"DeleteModel\", \"DeleteModel\"],\n+        )\n+\n+    def test_remove_field_and_constraint(self):\n+        before_state = [\n+            ModelState(\n+                \"testapp\",\n+                \"Dog\",\n+                fields=[(\"name\", models.CharField(max_length=100))],\n+                options={\n+                    \"constraints\": [\n+                        models.CheckConstraint(\n+                            condition=models.Q(name__contains=\"dog__\"),\n+                            name=\"name_contains_prefix\",\n+                        )\n+                    ]\n+                },\n+            ),",
        "comment_created_at": "2025-04-15T16:45:15+00:00",
        "comment_author": "wookkl",
        "comment_body": "Thank you! I'll update the test based on this ticket: https://code.djangoproject.com/ticket/35962.",
        "pr_file_module": null
      }
    ]
  }
]