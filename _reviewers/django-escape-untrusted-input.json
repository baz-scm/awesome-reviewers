[
  {
    "discussion_id": "1958453884",
    "pr_number": 18823,
    "pr_file": "docs/ref/contrib/postgres/search.txt",
    "created_at": "2025-02-17T15:52:02+00:00",
    "commented_code": ">>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])\n     >>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by(\"-rank\")\n \n+Lexeme objects\n+==============\n+\n+Lexeme objects allow search operators to be safely used with strings from an\n+untrusted source. The content of each lexeme is escaped so that any operators that may\n+exist in the string itself will not be interpreted.",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1958453884",
        "repo_full_name": "django/django",
        "pr_number": 18823,
        "pr_file": "docs/ref/contrib/postgres/search.txt",
        "discussion_id": "1958453884",
        "commented_code": "@@ -276,6 +291,36 @@ floats to :class:`SearchRank` as ``weights`` in the same order above:\n     >>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])\n     >>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by(\"-rank\")\n \n+Lexeme objects\n+==============\n+\n+Lexeme objects allow search operators to be safely used with strings from an\n+untrusted source. The content of each lexeme is escaped so that any operators that may\n+exist in the string itself will not be interpreted.",
        "comment_created_at": "2025-02-17T15:52:02+00:00",
        "comment_author": "jacobtylerwalls",
        "comment_body": "Although we don't need to retest postgres functionality in detail, I'm thinking a single test case showing an operator in a string (\"esc&pe me\") would be helpful to demonstrate this. Or does one of the assertions already do this?",
        "pr_file_module": null
      },
      {
        "comment_id": "1964559836",
        "repo_full_name": "django/django",
        "pr_number": 18823,
        "pr_file": "docs/ref/contrib/postgres/search.txt",
        "discussion_id": "1958453884",
        "commented_code": "@@ -276,6 +291,36 @@ floats to :class:`SearchRank` as ``weights`` in the same order above:\n     >>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])\n     >>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by(\"-rank\")\n \n+Lexeme objects\n+==============\n+\n+Lexeme objects allow search operators to be safely used with strings from an\n+untrusted source. The content of each lexeme is escaped so that any operators that may\n+exist in the string itself will not be interpreted.",
        "comment_created_at": "2025-02-21T00:37:15+00:00",
        "comment_author": "GappleBee",
        "comment_body": "In `TestLexemes.test_as_sql`, there are some escaping tests which show this albeit with quotes in a string instead of operators in a string",
        "pr_file_module": null
      },
      {
        "comment_id": "1965430436",
        "repo_full_name": "django/django",
        "pr_number": 18823,
        "pr_file": "docs/ref/contrib/postgres/search.txt",
        "discussion_id": "1958453884",
        "commented_code": "@@ -276,6 +291,36 @@ floats to :class:`SearchRank` as ``weights`` in the same order above:\n     >>> rank = SearchRank(vector, query, weights=[0.2, 0.4, 0.6, 0.8])\n     >>> Entry.objects.annotate(rank=rank).filter(rank__gte=0.3).order_by(\"-rank\")\n \n+Lexeme objects\n+==============\n+\n+Lexeme objects allow search operators to be safely used with strings from an\n+untrusted source. The content of each lexeme is escaped so that any operators that may\n+exist in the string itself will not be interpreted.",
        "comment_created_at": "2025-02-21T12:53:25+00:00",
        "comment_author": "jacobtylerwalls",
        "comment_body": "Yeah, one with an operator would be good to show I think.",
        "pr_file_module": null
      }
    ]
  }
]