[
  {
    "discussion_id": "1959644615",
    "pr_number": 19172,
    "pr_file": "django/contrib/admin/templatetags/admin_list.py",
    "created_at": "2025-02-18T12:21:48+00:00",
    "commented_code": "@register.simple_tag\n-def paginator_number(cl, i):\n+def paginator_number(p, i):",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1959644615",
        "repo_full_name": "django/django",
        "pr_number": 19172,
        "pr_file": "django/contrib/admin/templatetags/admin_list.py",
        "discussion_id": "1959644615",
        "commented_code": "@@ -35,36 +36,37 @@\n \n \n @register.simple_tag\n-def paginator_number(cl, i):\n+def paginator_number(p, i):",
        "comment_created_at": "2025-02-18T12:21:48+00:00",
        "comment_author": "nanuxbe",
        "comment_body": "I'm aware you are replacing the `cl` abbreviation that is 2 letters with a similar-type abbreviation for pagination but `p` is probably too short. Could this be `pagination` instead of just `p`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1959744438",
        "repo_full_name": "django/django",
        "pr_number": 19172,
        "pr_file": "django/contrib/admin/templatetags/admin_list.py",
        "discussion_id": "1959644615",
        "commented_code": "@@ -35,36 +36,37 @@\n \n \n @register.simple_tag\n-def paginator_number(cl, i):\n+def paginator_number(p, i):",
        "comment_created_at": "2025-02-18T13:26:06+00:00",
        "comment_author": "cliff688",
        "comment_body": "Agree, better to have descriptive variable names to make the code more readable and self-documenting.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437029156",
    "pr_number": 16851,
    "pr_file": "tests/delete/models.py",
    "created_at": "2023-12-27T13:02:36+00:00",
    "commented_code": "generic_delete_bottom = models.ForeignKey(\n         GenericDeleteBottom, on_delete=models.CASCADE\n     )\n+\n+\n+class Foo(models.Model):\n+    \"\"\"Initial model named Foo\"\"\"\n+\n+\n+class Bar(models.Model):",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1437029156",
        "repo_full_name": "django/django",
        "pr_number": 16851,
        "pr_file": "tests/delete/models.py",
        "discussion_id": "1437029156",
        "commented_code": "@@ -241,3 +241,115 @@ class GenericDeleteBottomParent(models.Model):\n     generic_delete_bottom = models.ForeignKey(\n         GenericDeleteBottom, on_delete=models.CASCADE\n     )\n+\n+\n+class Foo(models.Model):\n+    \"\"\"Initial model named Foo\"\"\"\n+\n+\n+class Bar(models.Model):",
        "comment_created_at": "2023-12-27T13:02:36+00:00",
        "comment_author": "felixxm",
        "comment_body": "Please try to avoid meaningless model names (e.g. `Foo`, `Bar`, `Baz`, etc.). Maybe `Child`, `Parent`, `Grandparent`, etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1796591065",
    "pr_number": 18627,
    "pr_file": "django/tasks/utils.py",
    "created_at": "2024-10-11T08:09:49+00:00",
    "commented_code": "+import inspect\n+import json\n+import time\n+from collections import deque\n+from functools import wraps\n+from traceback import format_exception\n+\n+from django.utils.module_loading import import_string\n+\n+\n+def is_global_function(func):",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1796591065",
        "repo_full_name": "django/django",
        "pr_number": 18627,
        "pr_file": "django/tasks/utils.py",
        "discussion_id": "1796591065",
        "commented_code": "@@ -0,0 +1,84 @@\n+import inspect\n+import json\n+import time\n+from collections import deque\n+from functools import wraps\n+from traceback import format_exception\n+\n+from django.utils.module_loading import import_string\n+\n+\n+def is_global_function(func):",
        "comment_created_at": "2024-10-11T08:09:49+00:00",
        "comment_author": "RealOrangeOne",
        "comment_body": "I've heard some comments that \"global\" here could be confusing. Perhaps `is_module_level_function` is a better name?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1555171742",
    "pr_number": 17554,
    "pr_file": "django/db/models/lazy.py",
    "created_at": "2024-04-08T02:55:48+00:00",
    "commented_code": "+from contextlib import contextmanager",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1555171742",
        "repo_full_name": "django/django",
        "pr_number": 17554,
        "pr_file": "django/db/models/lazy.py",
        "discussion_id": "1555171742",
        "commented_code": "@@ -0,0 +1,63 @@\n+from contextlib import contextmanager",
        "comment_created_at": "2024-04-08T02:55:48+00:00",
        "comment_author": "charettes",
        "comment_body": "Any thoughts about naming this module  `fetching` instead? It feels like _fetching_ ties it to `prefetch_related` and is not an already overloaded term within the code base compared the _lazy_.",
        "pr_file_module": null
      },
      {
        "comment_id": "1575936312",
        "repo_full_name": "django/django",
        "pr_number": 17554,
        "pr_file": "django/db/models/lazy.py",
        "discussion_id": "1555171742",
        "commented_code": "@@ -0,0 +1,63 @@\n+from contextlib import contextmanager",
        "comment_created_at": "2024-04-23T09:22:04+00:00",
        "comment_author": "adamchainz",
        "comment_body": "I tried describing the feature name a few different ways before settling on \u201clazy-loading modes\u201d as in the release notes. But \u201clazy-fetching modes\u201d could also be a candidate.\r\n\r\nHappy to rename the module, but I\u2019d prefer to keep it aligned with the name of the feature.\r\n\r\nI agree that \u201clazy\u201d is used in many ways - translations, \u201clazy relationships\u201d for passing a string to Foreign Keys, `SimpleLazyObject`... But it does also accurately describes how the data is lazily fetched by a field on access. Naming things is hard.",
        "pr_file_module": null
      },
      {
        "comment_id": "1579648680",
        "repo_full_name": "django/django",
        "pr_number": 17554,
        "pr_file": "django/db/models/lazy.py",
        "discussion_id": "1555171742",
        "commented_code": "@@ -0,0 +1,63 @@\n+from contextlib import contextmanager",
        "comment_created_at": "2024-04-25T15:00:27+00:00",
        "comment_author": "adamchainz",
        "comment_body": "What do you think about putting this module in `db.models.fields` ? The fetching code here is all called from, and calls back to, fields. It seems logical to me...",
        "pr_file_module": null
      },
      {
        "comment_id": "1579823787",
        "repo_full_name": "django/django",
        "pr_number": 17554,
        "pr_file": "django/db/models/lazy.py",
        "discussion_id": "1555171742",
        "commented_code": "@@ -0,0 +1,63 @@\n+from contextlib import contextmanager",
        "comment_created_at": "2024-04-25T16:47:19+00:00",
        "comment_author": "adamchainz",
        "comment_body": "I\u2019ve tried that for now, and updated the release notes to avoid the word lazy. I went for \u201con-demand fetching\u201d, which makes sense to me. WDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "1590396565",
        "repo_full_name": "django/django",
        "pr_number": 17554,
        "pr_file": "django/db/models/lazy.py",
        "discussion_id": "1555171742",
        "commented_code": "@@ -0,0 +1,63 @@\n+from contextlib import contextmanager",
        "comment_created_at": "2024-05-05T19:39:08+00:00",
        "comment_author": "charettes",
        "comment_body": "I think your proposed structure and wording under `fields.fetching` makes a lot of sense. Thank you for doing that!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959627880",
    "pr_number": 19172,
    "pr_file": "django/contrib/admin/options.py",
    "created_at": "2025-02-18T12:13:50+00:00",
    "commented_code": "return ChangeList\n \n+    def get_pagination(self, request, **kwargs):",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1959627880",
        "repo_full_name": "django/django",
        "pr_number": 19172,
        "pr_file": "django/contrib/admin/options.py",
        "discussion_id": "1959627880",
        "commented_code": "@@ -843,6 +843,14 @@ def get_changelist(self, request, **kwargs):\n \n         return ChangeList\n \n+    def get_pagination(self, request, **kwargs):",
        "comment_created_at": "2025-02-18T12:13:50+00:00",
        "comment_author": "nanuxbe",
        "comment_body": "Given this returns a class, is there a reason not to use `get_pagination_class` instead of `get_pagination`?\r\nSee also comment below in the same area",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959640573",
    "pr_number": 19172,
    "pr_file": "django/contrib/admin/options.py",
    "created_at": "2025-02-18T12:18:53+00:00",
    "commented_code": ".order_by(\"action_time\")\n         )\n \n-        paginator = self.get_paginator(request, action_list, 100)\n-        page_number = request.GET.get(PAGE_VAR, 1)\n-        page_obj = paginator.get_page(page_number)\n-        page_range = paginator.get_elided_page_range(page_obj.number)\n+        Pagination = self.get_pagination(request)\n+        pagination = Pagination(",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1959640573",
        "repo_full_name": "django/django",
        "pr_number": 19172,
        "pr_file": "django/contrib/admin/options.py",
        "discussion_id": "1959640573",
        "commented_code": "@@ -2257,19 +2266,22 @@ def history_view(self, request, object_id, extra_context=None):\n             .order_by(\"action_time\")\n         )\n \n-        paginator = self.get_paginator(request, action_list, 100)\n-        page_number = request.GET.get(PAGE_VAR, 1)\n-        page_obj = paginator.get_page(page_number)\n-        page_range = paginator.get_elided_page_range(page_obj.number)\n+        Pagination = self.get_pagination(request)\n+        pagination = Pagination(",
        "comment_created_at": "2025-02-18T12:18:53+00:00",
        "comment_author": "nanuxbe",
        "comment_body": "I feel like having both `Pagination` and `pagination` can be quite confusing, especially since we have `get_pagination` that returns the class and not the instance.\r\n\r\nThis would look better to me if we had:\r\n- `pagination_class` and `get_pagination_class` instead of `Pagination` and `get_pagination`\r\n- maybe also have a new `get_pagination` that would be in charge of calling `get_pagination_class` and instantiating the pagination class instead of directly calling the `Pagination` class.\r\n\r\nThis would be similar to a pattern we have in other places in Django, like in the `FormView` https://ccbv.co.uk/projects/Django/5.0/django.views.generic.edit/FormView/#get_form",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1830875167",
    "pr_number": 18627,
    "pr_file": "django/tasks/task.py",
    "created_at": "2024-11-06T11:40:38+00:00",
    "commented_code": "+from dataclasses import dataclass, field, replace\n+from datetime import datetime, timedelta\n+from inspect import iscoroutinefunction\n+from typing import Any, Callable, Dict, Optional\n+\n+from asgiref.sync import async_to_sync, sync_to_async\n+\n+from django.db.models.enums import TextChoices\n+from django.utils import timezone\n+from django.utils.translation import gettext_lazy as _\n+\n+from .exceptions import ResultDoesNotExist\n+from .utils import exception_from_dict, get_module_path\n+\n+DEFAULT_TASK_BACKEND_ALIAS = \"default\"\n+DEFAULT_QUEUE_NAME = \"default\"\n+MIN_PRIORITY = -100\n+MAX_PRIORITY = 100\n+DEFAULT_PRIORITY = 0\n+\n+TASK_REFRESH_ATTRS = {\n+    \"_exception_data\",\n+    \"_return_value\",\n+    \"finished_at\",\n+    \"started_at\",\n+    \"status\",\n+    \"enqueued_at\",\n+}\n+\n+\n+class ResultStatus(TextChoices):\n+    NEW = (\"NEW\", _(\"New\"))\n+    RUNNING = (\"RUNNING\", _(\"Running\"))\n+    FAILED = (\"FAILED\", _(\"Failed\"))\n+    COMPLETE = (\"COMPLETE\", _(\"Complete\"))",
    "repo_full_name": "django/django",
    "discussion_comments": [
      {
        "comment_id": "1830875167",
        "repo_full_name": "django/django",
        "pr_number": 18627,
        "pr_file": "django/tasks/task.py",
        "discussion_id": "1830875167",
        "commented_code": "@@ -0,0 +1,267 @@\n+from dataclasses import dataclass, field, replace\n+from datetime import datetime, timedelta\n+from inspect import iscoroutinefunction\n+from typing import Any, Callable, Dict, Optional\n+\n+from asgiref.sync import async_to_sync, sync_to_async\n+\n+from django.db.models.enums import TextChoices\n+from django.utils import timezone\n+from django.utils.translation import gettext_lazy as _\n+\n+from .exceptions import ResultDoesNotExist\n+from .utils import exception_from_dict, get_module_path\n+\n+DEFAULT_TASK_BACKEND_ALIAS = \"default\"\n+DEFAULT_QUEUE_NAME = \"default\"\n+MIN_PRIORITY = -100\n+MAX_PRIORITY = 100\n+DEFAULT_PRIORITY = 0\n+\n+TASK_REFRESH_ATTRS = {\n+    \"_exception_data\",\n+    \"_return_value\",\n+    \"finished_at\",\n+    \"started_at\",\n+    \"status\",\n+    \"enqueued_at\",\n+}\n+\n+\n+class ResultStatus(TextChoices):\n+    NEW = (\"NEW\", _(\"New\"))\n+    RUNNING = (\"RUNNING\", _(\"Running\"))\n+    FAILED = (\"FAILED\", _(\"Failed\"))\n+    COMPLETE = (\"COMPLETE\", _(\"Complete\"))",
        "comment_created_at": "2024-11-06T11:40:38+00:00",
        "comment_author": "rtpg",
        "comment_body": "Would renaming `COMPLETE` to `SUCCEEDED` be out of the cards? something that has failed has still completed, something that has succeeded has definitely not failed",
        "pr_file_module": null
      },
      {
        "comment_id": "1850672178",
        "repo_full_name": "django/django",
        "pr_number": 18627,
        "pr_file": "django/tasks/task.py",
        "discussion_id": "1830875167",
        "commented_code": "@@ -0,0 +1,267 @@\n+from dataclasses import dataclass, field, replace\n+from datetime import datetime, timedelta\n+from inspect import iscoroutinefunction\n+from typing import Any, Callable, Dict, Optional\n+\n+from asgiref.sync import async_to_sync, sync_to_async\n+\n+from django.db.models.enums import TextChoices\n+from django.utils import timezone\n+from django.utils.translation import gettext_lazy as _\n+\n+from .exceptions import ResultDoesNotExist\n+from .utils import exception_from_dict, get_module_path\n+\n+DEFAULT_TASK_BACKEND_ALIAS = \"default\"\n+DEFAULT_QUEUE_NAME = \"default\"\n+MIN_PRIORITY = -100\n+MAX_PRIORITY = 100\n+DEFAULT_PRIORITY = 0\n+\n+TASK_REFRESH_ATTRS = {\n+    \"_exception_data\",\n+    \"_return_value\",\n+    \"finished_at\",\n+    \"started_at\",\n+    \"status\",\n+    \"enqueued_at\",\n+}\n+\n+\n+class ResultStatus(TextChoices):\n+    NEW = (\"NEW\", _(\"New\"))\n+    RUNNING = (\"RUNNING\", _(\"Running\"))\n+    FAILED = (\"FAILED\", _(\"Failed\"))\n+    COMPLETE = (\"COMPLETE\", _(\"Complete\"))",
        "comment_created_at": "2024-11-20T16:50:59+00:00",
        "comment_author": "RealOrangeOne",
        "comment_body": "Yeah that sounds like a great idea (and something worth getting right now). I think I've used \"finished\" to be `FAILED | COMPLETE`, but `SUCCEEDED` is far clearer.",
        "pr_file_module": null
      }
    ]
  }
]