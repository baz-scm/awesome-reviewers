[
  {
    "discussion_id": "2117522773",
    "pr_number": 4430,
    "pr_file": "drizzle-kit/build.dev.ts",
    "created_at": "2025-05-31T08:10:04+00:00",
    "commented_code": "platform: 'node',\n \texternal: ['drizzle-orm', 'esbuild', ...driversPackages],\n \tbanner: {\n-\t\tjs: `#!/usr/bin/env -S node --loader @esbuild-kit/esm-loader --no-warnings`,\n+\t\tjs: '#!/usr/bin/env -S npx tsx',",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2117522773",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4430,
        "pr_file": "drizzle-kit/build.dev.ts",
        "discussion_id": "2117522773",
        "commented_code": "@@ -24,7 +24,7 @@ esbuild.buildSync({\n \tplatform: 'node',\n \texternal: ['drizzle-orm', 'esbuild', ...driversPackages],\n \tbanner: {\n-\t\tjs: `#!/usr/bin/env -S node --loader @esbuild-kit/esm-loader --no-warnings`,\n+\t\tjs: '#!/usr/bin/env -S npx tsx',",
        "comment_created_at": "2025-05-31T08:10:04+00:00",
        "comment_author": "kevcube",
        "comment_body": "npm (therefore npx) is bundled with all node installations so I expect this to always work.\r\n\r\nIf anyone disagrees then I can switch this. line to `node --include tsx`",
        "pr_file_module": null
      },
      {
        "comment_id": "2132569291",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4430,
        "pr_file": "drizzle-kit/build.dev.ts",
        "discussion_id": "2117522773",
        "commented_code": "@@ -24,7 +24,7 @@ esbuild.buildSync({\n \tplatform: 'node',\n \texternal: ['drizzle-orm', 'esbuild', ...driversPackages],\n \tbanner: {\n-\t\tjs: `#!/usr/bin/env -S node --loader @esbuild-kit/esm-loader --no-warnings`,\n+\t\tjs: '#!/usr/bin/env -S npx tsx',",
        "comment_created_at": "2025-06-06T17:13:02+00:00",
        "comment_author": "ZuBB",
        "comment_body": "my guess is that `node --include tsx` should be (a tiny bit) faster: we invoke `node` binary in a more straightforward way.\r\n\r\nOn the other side I would be glad to see this merged and released in any form.",
        "pr_file_module": null
      },
      {
        "comment_id": "2160359993",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4430,
        "pr_file": "drizzle-kit/build.dev.ts",
        "discussion_id": "2117522773",
        "commented_code": "@@ -24,7 +24,7 @@ esbuild.buildSync({\n \tplatform: 'node',\n \texternal: ['drizzle-orm', 'esbuild', ...driversPackages],\n \tbanner: {\n-\t\tjs: `#!/usr/bin/env -S node --loader @esbuild-kit/esm-loader --no-warnings`,\n+\t\tjs: '#!/usr/bin/env -S npx tsx',",
        "comment_created_at": "2025-06-22T14:07:15+00:00",
        "comment_author": "barrenechea",
        "comment_body": "I wasn't able to make it work with `node --include tsx`, but it works fine with `node --import tsx`, maybe that's the one you referred to? I tested it across all Node versions between 18 and 24.\r\n\r\nI agree with that it should call node directly \ud83d\ude04 Let\u2019s keep the original param as well, since tsx is able to handle `--no-warnings` as per [their docs](https://tsx.is/node-enhancement#swap-node-for-tsx):\r\n\r\n```suggestion\r\n\t\tjs: '#!/usr/bin/env -S node --import tsx --no-warnings',\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1426574454",
    "pr_number": 1481,
    "pr_file": "drizzle-orm/src/pg-core/session.ts",
    "created_at": "2023-12-14T11:06:06+00:00",
    "commented_code": "isolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n \taccessMode?: 'read only' | 'read write';\n \tdeferrable?: boolean;\n+\trlsConfig?: {",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1426574454",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1481,
        "pr_file": "drizzle-orm/src/pg-core/session.ts",
        "discussion_id": "1426574454",
        "commented_code": "@@ -29,6 +30,14 @@ export interface PgTransactionConfig {\n \tisolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n \taccessMode?: 'read only' | 'read write';\n \tdeferrable?: boolean;\n+\trlsConfig?: {",
        "comment_created_at": "2023-12-14T11:06:06+00:00",
        "comment_author": "rphlmr",
        "comment_body": "What about (suggestion):\r\n```ts\r\nset?: {\r\n\t\tconfigs?: {\r\n\t\t\tname: string;\r\n\t\t\tvalue: string;\r\n\t\t\tisLocal?: boolean;\r\n\t\t}[];\r\n\t\trole?: AnyPgRole;\r\n\t};\r\n```\r\n- `set` because postgres commands start with `set` or `set_`\r\n- `configs` because of `set_config(...)`\r\n\r\nAnd I think it is not only related to rls.\r\nWe can imagine wanting to use this to set_config, which is later used in a PG function that we called in our transaction.\r\n\r\nLike https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html ",
        "pr_file_module": null
      },
      {
        "comment_id": "1430684460",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1481,
        "pr_file": "drizzle-orm/src/pg-core/session.ts",
        "discussion_id": "1426574454",
        "commented_code": "@@ -29,6 +30,14 @@ export interface PgTransactionConfig {\n \tisolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n \taccessMode?: 'read only' | 'read write';\n \tdeferrable?: boolean;\n+\trlsConfig?: {",
        "comment_created_at": "2023-12-18T21:52:31+00:00",
        "comment_author": "net",
        "comment_body": "Yes, `set_config(...)` is not just for policies. I like `set: { configs: ..., role: ... }` or `set_configs: ..., set_role: ...`.\r\n\r\nhttps://www.postgresql.org/docs/16/functions-admin.html",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1782616932",
    "pr_number": 2727,
    "pr_file": "drizzle-kit/src/cli/commands/introspect.ts",
    "created_at": "2024-10-01T11:40:12+00:00",
    "commented_code": "writeFileSync(relationsFile, relationsTs.file);\n \tconsole.log();\n \n-\tconst { snapshots, journal } = prepareOutFolder(out, 'postgresql');",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1782616932",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 2727,
        "pr_file": "drizzle-kit/src/cli/commands/introspect.ts",
        "discussion_id": "1782616932",
        "commented_code": "@@ -201,7 +211,7 @@ export const introspectMysql = async (\n \twriteFileSync(relationsFile, relationsTs.file);\n \tconsole.log();\n \n-\tconst { snapshots, journal } = prepareOutFolder(out, 'postgresql');",
        "comment_created_at": "2024-10-01T11:40:12+00:00",
        "comment_author": "Rodriguespn",
        "comment_body": "This is inside the `introspectMysql` function, so the output folder should be named `mysql` and not `postgresql`, correct?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1498414510",
    "pr_number": 1895,
    "pr_file": "drizzle-orm/src/neon-http/session.ts",
    "created_at": "2024-02-21T22:57:56+00:00",
    "commented_code": "import type { FullQueryResults, QueryRows } from '@neondatabase/serverless';\n+import type { BatchItem } from '~/batch';",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1498414510",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1895,
        "pr_file": "drizzle-orm/src/neon-http/session.ts",
        "discussion_id": "1498414510",
        "commented_code": "@@ -1,76 +1,97 @@\n import type { FullQueryResults, QueryRows } from '@neondatabase/serverless';\n+import type { BatchItem } from '~/batch';",
        "comment_created_at": "2024-02-21T22:57:56+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "Here\u2019s the other.",
        "pr_file_module": null
      },
      {
        "comment_id": "1498418251",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1895,
        "pr_file": "drizzle-orm/src/neon-http/session.ts",
        "discussion_id": "1498414510",
        "commented_code": "@@ -1,76 +1,97 @@\n import type { FullQueryResults, QueryRows } from '@neondatabase/serverless';\n+import type { BatchItem } from '~/batch';",
        "comment_created_at": "2024-02-21T23:02:33+00:00",
        "comment_author": "andrewbranch",
        "comment_body": "I don\u2019t know if there are reasons this isn\u2019t feasible, but if you want to catch this with a tighter feedback loop, `--module nodenext` accomplishes that:\r\n\r\n<img width=\"628\" alt=\"image\" src=\"https://github.com/drizzle-team/drizzle-orm/assets/3277153/587808ba-5ce9-4ba9-8b0b-eed6338ecae5\">\r\n\r\nN.B. `~/session` is also missing its extension, but doesn\u2019t show up in attw because `PreparedQuery` doesn\u2019t appear in the declaration emit for this file (it\u2019s only used inside a function, not as a return/param type), so the import is elided.",
        "pr_file_module": null
      },
      {
        "comment_id": "1498817914",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1895,
        "pr_file": "drizzle-orm/src/neon-http/session.ts",
        "discussion_id": "1498414510",
        "commented_code": "@@ -1,76 +1,97 @@\n import type { FullQueryResults, QueryRows } from '@neondatabase/serverless';\n+import type { BatchItem } from '~/batch';",
        "comment_created_at": "2024-02-22T08:06:51+00:00",
        "comment_author": "AndriiSherman",
        "comment_body": "That fixed the problem, thanks a lot!",
        "pr_file_module": null
      }
    ]
  }
]