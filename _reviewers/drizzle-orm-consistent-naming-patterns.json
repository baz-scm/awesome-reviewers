[
  {
    "discussion_id": "1897965266",
    "pr_number": 3792,
    "pr_file": "drizzle-orm/src/singlestore-core/columns/vector.ts",
    "created_at": "2024-12-26T14:52:11+00:00",
    "commented_code": "+import type { ColumnBaseConfig } from '~/column';",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1897965266",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 3792,
        "pr_file": "drizzle-orm/src/singlestore-core/columns/vector.ts",
        "discussion_id": "1897965266",
        "commented_code": "@@ -0,0 +1,77 @@\n+import type { ColumnBaseConfig } from '~/column';",
        "comment_created_at": "2024-12-26T14:52:11+00:00",
        "comment_author": "AndriiSherman",
        "comment_body": "should be `from '~/column.ts'`\r\nThe reason why `attw` is failing - is because you didn't add `.ts`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1347828685",
    "pr_number": 1218,
    "pr_file": "drizzle-orm/src/mysql-core/query-builders/set-operators.ts",
    "created_at": "2023-10-05T18:35:42+00:00",
    "commented_code": "+import { entityKind } from '~/entity.ts';\n+import {\n+\tapplyMixins,\n+\thaveSameKeys,\n+\torderSelectedFields,\n+\ttype Placeholder,\n+\ttype Query,\n+\tQueryPromise,\n+\tSelectionProxyHandler,\n+\ttype SQL,\n+\tSubquery,\n+\ttype ValidateShape,\n+\ttype ValueOrArray,\n+} from '~/index.ts';\n+import type {\n+\tMySqlSession,\n+\tPreparedQueryConfig,\n+\tPreparedQueryHKTBase,\n+\tPreparedQueryKind,\n+} from '~/mysql-core/session.ts';\n+import { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\n+import type {\n+\tBuildSubquerySelection,\n+\tJoinNullability,\n+\tSelectMode,\n+\tSelectResult,\n+} from '~/query-builders/select.types.ts';\n+import { type ColumnsSelection } from '~/view.ts';\n+import type { MySqlColumn } from '../columns/common.ts';\n+import type { MySqlDialect } from '../dialect.ts';\n+import type { SubqueryWithSelection } from '../subquery.ts';\n+\n+type SetOperator = 'union' | 'intersect' | 'except';\n+\n+const getMySqlSetOperators = () => {\n+\treturn {\n+\t\tunion,\n+\t\tunionAll,\n+\t\tintersect,\n+\t\tintersectAll,\n+\t\texcept,\n+\t\texceptAll,\n+\t};\n+};\n+\n+type MySqlSetOperators = ReturnType<typeof getMySqlSetOperators>;\n+\n+type SetOperatorRightSelect<\n+\tTValue extends TypedQueryBuilder<any, SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\tTNullabilityMap extends Record<string, JoinNullability>,\n+> = TValue extends MySqlSetOperatorBuilder<any, infer TSel, infer TMode, any, infer TNull> ? ValidateShape<\n+\t\tSelectResult<TSel, TMode, TNull>,\n+\t\tSelectResult<TSelection, TSelectMode, TNullabilityMap>,\n+\t\tTypedQueryBuilder<any, SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>\n+\t>\n+\t: TValue;\n+\n+type SetOperatorRestSelect<\n+\tTValue extends readonly TypedQueryBuilder<any, any[]>[],\n+\tValid,\n+> = TValue extends [infer First, ...infer Rest]\n+\t? First extends MySqlSetOperatorBuilder<any, infer TSel, infer TMode, any, infer TNull>\n+\t\t? Rest extends TypedQueryBuilder<any, any[]>[] ? [\n+\t\t\t\tValidateShape<SelectResult<TSel, TMode, TNull>, Valid, TValue[0]>,\n+\t\t\t\t...SetOperatorRestSelect<Rest, Valid>,\n+\t\t\t]\n+\t\t: ValidateShape<SelectResult<TSel, TMode, TNull>, Valid, TValue>\n+\t: never[]\n+\t: TValue;\n+\n+export interface MySqlSetOperatorConfig {\n+\tfields: Record<string, unknown>;\n+\toperator: SetOperator;\n+\tisAll: boolean;\n+\tleftSelect: MySqlSetOperatorBuilder<any, any, any, any, any>;\n+\trightSelect: TypedQueryBuilder<any, any[]>;\n+\tlimit?: number | Placeholder;\n+\torderBy?: (MySqlColumn | SQL | SQL.Aliased)[];\n+\toffset?: number | Placeholder;\n+}\n+\n+export interface MySqlSetOperatorBuilder<\n+\tTTableName extends string | undefined,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n+\t\t: {},\n+> extends\n+\tTypedQueryBuilder<\n+\t\tBuildSubquerySelection<TSelection, TNullabilityMap>,\n+\t\tSelectResult<TSelection, TSelectMode, TNullabilityMap>[]\n+\t>,\n+\tQueryPromise<SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>\n+{}\n+\n+export abstract class MySqlSetOperatorBuilder<\n+\tTTableName extends string | undefined,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n+\t\t: {},\n+> extends TypedQueryBuilder<\n+\tBuildSubquerySelection<TSelection, TNullabilityMap>,\n+\tSelectResult<TSelection, TSelectMode, TNullabilityMap>[]\n+> {\n+\tstatic readonly [entityKind]: string = 'MySqlSetOperatorBuilder';\n+\n+\tprotected abstract joinsNotNullableMap: Record<string, boolean>;\n+\tprotected abstract config: {\n+\t\tfields: Record<string, unknown>;\n+\t\tlimit?: number | Placeholder;\n+\t\torderBy?: (MySqlColumn | SQL | SQL.Aliased)[];\n+\t\toffset?: number | Placeholder;\n+\t};\n+\t/* @internal */\n+\tabstract readonly session: MySqlSession | undefined;\n+\tprotected abstract dialect: MySqlDialect;\n+\n+\t/** @internal */\n+\tgetSetOperatorConfig() {\n+\t\treturn {\n+\t\t\tsession: this.session,\n+\t\t\tdialect: this.dialect,\n+\t\t\tjoinsNotNullableMap: this.joinsNotNullableMap,\n+\t\t\tfields: this.config.fields,\n+\t\t};\n+\t}\n+\n+\tprivate setOperator(",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1347828685",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/set-operators.ts",
        "discussion_id": "1347828685",
        "commented_code": "@@ -0,0 +1,351 @@\n+import { entityKind } from '~/entity.ts';\n+import {\n+\tapplyMixins,\n+\thaveSameKeys,\n+\torderSelectedFields,\n+\ttype Placeholder,\n+\ttype Query,\n+\tQueryPromise,\n+\tSelectionProxyHandler,\n+\ttype SQL,\n+\tSubquery,\n+\ttype ValidateShape,\n+\ttype ValueOrArray,\n+} from '~/index.ts';\n+import type {\n+\tMySqlSession,\n+\tPreparedQueryConfig,\n+\tPreparedQueryHKTBase,\n+\tPreparedQueryKind,\n+} from '~/mysql-core/session.ts';\n+import { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\n+import type {\n+\tBuildSubquerySelection,\n+\tJoinNullability,\n+\tSelectMode,\n+\tSelectResult,\n+} from '~/query-builders/select.types.ts';\n+import { type ColumnsSelection } from '~/view.ts';\n+import type { MySqlColumn } from '../columns/common.ts';\n+import type { MySqlDialect } from '../dialect.ts';\n+import type { SubqueryWithSelection } from '../subquery.ts';\n+\n+type SetOperator = 'union' | 'intersect' | 'except';\n+\n+const getMySqlSetOperators = () => {\n+\treturn {\n+\t\tunion,\n+\t\tunionAll,\n+\t\tintersect,\n+\t\tintersectAll,\n+\t\texcept,\n+\t\texceptAll,\n+\t};\n+};\n+\n+type MySqlSetOperators = ReturnType<typeof getMySqlSetOperators>;\n+\n+type SetOperatorRightSelect<\n+\tTValue extends TypedQueryBuilder<any, SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\tTNullabilityMap extends Record<string, JoinNullability>,\n+> = TValue extends MySqlSetOperatorBuilder<any, infer TSel, infer TMode, any, infer TNull> ? ValidateShape<\n+\t\tSelectResult<TSel, TMode, TNull>,\n+\t\tSelectResult<TSelection, TSelectMode, TNullabilityMap>,\n+\t\tTypedQueryBuilder<any, SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>\n+\t>\n+\t: TValue;\n+\n+type SetOperatorRestSelect<\n+\tTValue extends readonly TypedQueryBuilder<any, any[]>[],\n+\tValid,\n+> = TValue extends [infer First, ...infer Rest]\n+\t? First extends MySqlSetOperatorBuilder<any, infer TSel, infer TMode, any, infer TNull>\n+\t\t? Rest extends TypedQueryBuilder<any, any[]>[] ? [\n+\t\t\t\tValidateShape<SelectResult<TSel, TMode, TNull>, Valid, TValue[0]>,\n+\t\t\t\t...SetOperatorRestSelect<Rest, Valid>,\n+\t\t\t]\n+\t\t: ValidateShape<SelectResult<TSel, TMode, TNull>, Valid, TValue>\n+\t: never[]\n+\t: TValue;\n+\n+export interface MySqlSetOperatorConfig {\n+\tfields: Record<string, unknown>;\n+\toperator: SetOperator;\n+\tisAll: boolean;\n+\tleftSelect: MySqlSetOperatorBuilder<any, any, any, any, any>;\n+\trightSelect: TypedQueryBuilder<any, any[]>;\n+\tlimit?: number | Placeholder;\n+\torderBy?: (MySqlColumn | SQL | SQL.Aliased)[];\n+\toffset?: number | Placeholder;\n+}\n+\n+export interface MySqlSetOperatorBuilder<\n+\tTTableName extends string | undefined,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n+\t\t: {},\n+> extends\n+\tTypedQueryBuilder<\n+\t\tBuildSubquerySelection<TSelection, TNullabilityMap>,\n+\t\tSelectResult<TSelection, TSelectMode, TNullabilityMap>[]\n+\t>,\n+\tQueryPromise<SelectResult<TSelection, TSelectMode, TNullabilityMap>[]>\n+{}\n+\n+export abstract class MySqlSetOperatorBuilder<\n+\tTTableName extends string | undefined,\n+\tTSelection extends ColumnsSelection,\n+\tTSelectMode extends SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n+\t\t: {},\n+> extends TypedQueryBuilder<\n+\tBuildSubquerySelection<TSelection, TNullabilityMap>,\n+\tSelectResult<TSelection, TSelectMode, TNullabilityMap>[]\n+> {\n+\tstatic readonly [entityKind]: string = 'MySqlSetOperatorBuilder';\n+\n+\tprotected abstract joinsNotNullableMap: Record<string, boolean>;\n+\tprotected abstract config: {\n+\t\tfields: Record<string, unknown>;\n+\t\tlimit?: number | Placeholder;\n+\t\torderBy?: (MySqlColumn | SQL | SQL.Aliased)[];\n+\t\toffset?: number | Placeholder;\n+\t};\n+\t/* @internal */\n+\tabstract readonly session: MySqlSession | undefined;\n+\tprotected abstract dialect: MySqlDialect;\n+\n+\t/** @internal */\n+\tgetSetOperatorConfig() {\n+\t\treturn {\n+\t\t\tsession: this.session,\n+\t\t\tdialect: this.dialect,\n+\t\t\tjoinsNotNullableMap: this.joinsNotNullableMap,\n+\t\t\tfields: this.config.fields,\n+\t\t};\n+\t}\n+\n+\tprivate setOperator(",
        "comment_created_at": "2023-10-05T18:35:42+00:00",
        "comment_author": "dankochetov",
        "comment_body": "For consistency with select builder's `createJoin`\r\n```suggestion\r\n\tprivate createSetOperator(\r\n```",
        "pr_file_module": null
      }
    ]
  }
]