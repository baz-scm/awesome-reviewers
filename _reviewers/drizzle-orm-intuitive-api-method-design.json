[
  {
    "discussion_id": "1728801145",
    "pr_number": 2812,
    "pr_file": "drizzle-orm/src/sql/expressions/conditional.ts",
    "created_at": "2024-08-23T11:10:00+00:00",
    "commented_code": "+import type { Column, GetColumnData } from \"~/column.ts\";\n+\n+import { type SQL, sql, type SQLWrapper } from \"../sql.ts\";\n+\n+type ExpressionType<T> = T extends Column ? GetColumnData<T, \"raw\"> : T extends SQL<infer I> ? I : unknown;\n+\n+export const caseWhen = (condition: SQL | undefined) => {\n+  const sqlChunks: SQL[] = [];\n+  sqlChunks.push(sql`CASE `);\n+\n+  const when = <AccType = null>(condition: SQL | undefined) => {\n+    sqlChunks.push(sql`WHEN ${condition} `);\n+\n+    const end = <FinalType = null>() => {\n+      sqlChunks.push(sql`END`);\n+      return sql.join(sqlChunks) as SQL<FinalType>;\n+    };\n+\n+    return {\n+      then: <T extends SQL | SQLWrapper | Column>(value: T) => {",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1728801145",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 2812,
        "pr_file": "drizzle-orm/src/sql/expressions/conditional.ts",
        "discussion_id": "1728801145",
        "commented_code": "@@ -0,0 +1,38 @@\n+import type { Column, GetColumnData } from \"~/column.ts\";\n+\n+import { type SQL, sql, type SQLWrapper } from \"../sql.ts\";\n+\n+type ExpressionType<T> = T extends Column ? GetColumnData<T, \"raw\"> : T extends SQL<infer I> ? I : unknown;\n+\n+export const caseWhen = (condition: SQL | undefined) => {\n+  const sqlChunks: SQL[] = [];\n+  sqlChunks.push(sql`CASE `);\n+\n+  const when = <AccType = null>(condition: SQL | undefined) => {\n+    sqlChunks.push(sql`WHEN ${condition} `);\n+\n+    const end = <FinalType = null>() => {\n+      sqlChunks.push(sql`END`);\n+      return sql.join(sqlChunks) as SQL<FinalType>;\n+    };\n+\n+    return {\n+      then: <T extends SQL | SQLWrapper | Column>(value: T) => {",
        "comment_created_at": "2024-08-23T11:10:00+00:00",
        "comment_author": "juliusmarminge",
        "comment_body": "overloading `.then()` seems a bit fishy to me",
        "pr_file_module": null
      },
      {
        "comment_id": "1741589795",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 2812,
        "pr_file": "drizzle-orm/src/sql/expressions/conditional.ts",
        "discussion_id": "1728801145",
        "commented_code": "@@ -0,0 +1,38 @@\n+import type { Column, GetColumnData } from \"~/column.ts\";\n+\n+import { type SQL, sql, type SQLWrapper } from \"../sql.ts\";\n+\n+type ExpressionType<T> = T extends Column ? GetColumnData<T, \"raw\"> : T extends SQL<infer I> ? I : unknown;\n+\n+export const caseWhen = (condition: SQL | undefined) => {\n+  const sqlChunks: SQL[] = [];\n+  sqlChunks.push(sql`CASE `);\n+\n+  const when = <AccType = null>(condition: SQL | undefined) => {\n+    sqlChunks.push(sql`WHEN ${condition} `);\n+\n+    const end = <FinalType = null>() => {\n+      sqlChunks.push(sql`END`);\n+      return sql.join(sqlChunks) as SQL<FinalType>;\n+    };\n+\n+    return {\n+      then: <T extends SQL | SQLWrapper | Column>(value: T) => {",
        "comment_created_at": "2024-09-03T07:47:11+00:00",
        "comment_author": "louneskmt",
        "comment_body": "It is, any other idea?",
        "pr_file_module": null
      },
      {
        "comment_id": "1790251364",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 2812,
        "pr_file": "drizzle-orm/src/sql/expressions/conditional.ts",
        "discussion_id": "1728801145",
        "commented_code": "@@ -0,0 +1,38 @@\n+import type { Column, GetColumnData } from \"~/column.ts\";\n+\n+import { type SQL, sql, type SQLWrapper } from \"../sql.ts\";\n+\n+type ExpressionType<T> = T extends Column ? GetColumnData<T, \"raw\"> : T extends SQL<infer I> ? I : unknown;\n+\n+export const caseWhen = (condition: SQL | undefined) => {\n+  const sqlChunks: SQL[] = [];\n+  sqlChunks.push(sql`CASE `);\n+\n+  const when = <AccType = null>(condition: SQL | undefined) => {\n+    sqlChunks.push(sql`WHEN ${condition} `);\n+\n+    const end = <FinalType = null>() => {\n+      sqlChunks.push(sql`END`);\n+      return sql.join(sqlChunks) as SQL<FinalType>;\n+    };\n+\n+    return {\n+      then: <T extends SQL | SQLWrapper | Column>(value: T) => {",
        "comment_created_at": "2024-10-07T13:41:01+00:00",
        "comment_author": "mjbergman92",
        "comment_body": "why not when(condition, value)... something more similar to [this suggestion](https://github.com/drizzle-team/drizzle-orm/issues/1065#issuecomment-1863219952)?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013647262",
    "pr_number": 4314,
    "pr_file": "drizzle-arktype/src/column.ts",
    "created_at": "2025-03-26T08:50:49+00:00",
    "commented_code": "+import { type Type, type } from 'arktype';\n+import type { Column, ColumnBaseConfig } from 'drizzle-orm';\n+import type {\n+\tMySqlBigInt53,\n+\tMySqlChar,\n+\tMySqlDouble,\n+\tMySqlFloat,\n+\tMySqlInt,\n+\tMySqlMediumInt,\n+\tMySqlReal,\n+\tMySqlSerial,\n+\tMySqlSmallInt,\n+\tMySqlText,\n+\tMySqlTinyInt,\n+\tMySqlVarChar,\n+\tMySqlYear,\n+} from 'drizzle-orm/mysql-core';\n+import type {\n+\tPgArray,\n+\tPgBigInt53,\n+\tPgBigSerial53,\n+\tPgBinaryVector,\n+\tPgChar,\n+\tPgDoublePrecision,\n+\tPgGeometry,\n+\tPgGeometryObject,\n+\tPgHalfVector,\n+\tPgInteger,\n+\tPgLineABC,\n+\tPgLineTuple,\n+\tPgPointObject,\n+\tPgPointTuple,\n+\tPgReal,\n+\tPgSerial,\n+\tPgSmallInt,\n+\tPgSmallSerial,\n+\tPgUUID,\n+\tPgVarchar,\n+\tPgVector,\n+} from 'drizzle-orm/pg-core';\n+import type {\n+\tSingleStoreBigInt53,\n+\tSingleStoreChar,\n+\tSingleStoreDouble,\n+\tSingleStoreFloat,\n+\tSingleStoreInt,\n+\tSingleStoreMediumInt,\n+\tSingleStoreReal,\n+\tSingleStoreSerial,\n+\tSingleStoreSmallInt,\n+\tSingleStoreText,\n+\tSingleStoreTinyInt,\n+\tSingleStoreVarChar,\n+\tSingleStoreYear,\n+} from 'drizzle-orm/singlestore-core';\n+import type { SQLiteInteger, SQLiteReal, SQLiteText } from 'drizzle-orm/sqlite-core';\n+import { CONSTANTS } from './constants.ts';\n+import { isColumnType, isWithEnum } from './utils.ts';\n+\n+export const literalSchema = type('string | number | boolean | null');\n+export const jsonSchema = literalSchema.or(type('unknown.any[] | Record<string, unknown.any>'));",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2013647262",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4314,
        "pr_file": "drizzle-arktype/src/column.ts",
        "discussion_id": "2013647262",
        "commented_code": "@@ -0,0 +1,291 @@\n+import { type Type, type } from 'arktype';\n+import type { Column, ColumnBaseConfig } from 'drizzle-orm';\n+import type {\n+\tMySqlBigInt53,\n+\tMySqlChar,\n+\tMySqlDouble,\n+\tMySqlFloat,\n+\tMySqlInt,\n+\tMySqlMediumInt,\n+\tMySqlReal,\n+\tMySqlSerial,\n+\tMySqlSmallInt,\n+\tMySqlText,\n+\tMySqlTinyInt,\n+\tMySqlVarChar,\n+\tMySqlYear,\n+} from 'drizzle-orm/mysql-core';\n+import type {\n+\tPgArray,\n+\tPgBigInt53,\n+\tPgBigSerial53,\n+\tPgBinaryVector,\n+\tPgChar,\n+\tPgDoublePrecision,\n+\tPgGeometry,\n+\tPgGeometryObject,\n+\tPgHalfVector,\n+\tPgInteger,\n+\tPgLineABC,\n+\tPgLineTuple,\n+\tPgPointObject,\n+\tPgPointTuple,\n+\tPgReal,\n+\tPgSerial,\n+\tPgSmallInt,\n+\tPgSmallSerial,\n+\tPgUUID,\n+\tPgVarchar,\n+\tPgVector,\n+} from 'drizzle-orm/pg-core';\n+import type {\n+\tSingleStoreBigInt53,\n+\tSingleStoreChar,\n+\tSingleStoreDouble,\n+\tSingleStoreFloat,\n+\tSingleStoreInt,\n+\tSingleStoreMediumInt,\n+\tSingleStoreReal,\n+\tSingleStoreSerial,\n+\tSingleStoreSmallInt,\n+\tSingleStoreText,\n+\tSingleStoreTinyInt,\n+\tSingleStoreVarChar,\n+\tSingleStoreYear,\n+} from 'drizzle-orm/singlestore-core';\n+import type { SQLiteInteger, SQLiteReal, SQLiteText } from 'drizzle-orm/sqlite-core';\n+import { CONSTANTS } from './constants.ts';\n+import { isColumnType, isWithEnum } from './utils.ts';\n+\n+export const literalSchema = type('string | number | boolean | null');\n+export const jsonSchema = literalSchema.or(type('unknown.any[] | Record<string, unknown.any>'));",
        "comment_created_at": "2025-03-26T08:50:49+00:00",
        "comment_author": "ssalbdivad",
        "comment_body": "Chained methods like `.or` can accept a definition so you don't need the type wrapper here:\r\n\r\n```ts\r\nliteralSchema.or('unknown.any[] | Record<string, unknown.any>')\r\n```",
        "pr_file_module": null
      }
    ]
  }
]