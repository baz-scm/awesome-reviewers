[
  {
    "discussion_id": "2013646177",
    "pr_number": 4314,
    "pr_file": "drizzle-arktype/src/column.ts",
    "created_at": "2025-03-26T08:50:07+00:00",
    "commented_code": "+import { type Type, type } from 'arktype';\n+import type { Column, ColumnBaseConfig } from 'drizzle-orm';\n+import type {\n+\tMySqlBigInt53,\n+\tMySqlChar,\n+\tMySqlDouble,\n+\tMySqlFloat,\n+\tMySqlInt,\n+\tMySqlMediumInt,\n+\tMySqlReal,\n+\tMySqlSerial,\n+\tMySqlSmallInt,\n+\tMySqlText,\n+\tMySqlTinyInt,\n+\tMySqlVarChar,\n+\tMySqlYear,\n+} from 'drizzle-orm/mysql-core';\n+import type {\n+\tPgArray,\n+\tPgBigInt53,\n+\tPgBigSerial53,\n+\tPgBinaryVector,\n+\tPgChar,\n+\tPgDoublePrecision,\n+\tPgGeometry,\n+\tPgGeometryObject,\n+\tPgHalfVector,\n+\tPgInteger,\n+\tPgLineABC,\n+\tPgLineTuple,\n+\tPgPointObject,\n+\tPgPointTuple,\n+\tPgReal,\n+\tPgSerial,\n+\tPgSmallInt,\n+\tPgSmallSerial,\n+\tPgUUID,\n+\tPgVarchar,\n+\tPgVector,\n+} from 'drizzle-orm/pg-core';\n+import type {\n+\tSingleStoreBigInt53,\n+\tSingleStoreChar,\n+\tSingleStoreDouble,\n+\tSingleStoreFloat,\n+\tSingleStoreInt,\n+\tSingleStoreMediumInt,\n+\tSingleStoreReal,\n+\tSingleStoreSerial,\n+\tSingleStoreSmallInt,\n+\tSingleStoreText,\n+\tSingleStoreTinyInt,\n+\tSingleStoreVarChar,\n+\tSingleStoreYear,\n+} from 'drizzle-orm/singlestore-core';\n+import type { SQLiteInteger, SQLiteReal, SQLiteText } from 'drizzle-orm/sqlite-core';\n+import { CONSTANTS } from './constants.ts';\n+import { isColumnType, isWithEnum } from './utils.ts';\n+\n+export const literalSchema = type('string | number | boolean | null');\n+export const jsonSchema = literalSchema.or(type('unknown.any[] | Record<string, unknown.any>'));",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2013646177",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4314,
        "pr_file": "drizzle-arktype/src/column.ts",
        "discussion_id": "2013646177",
        "commented_code": "@@ -0,0 +1,291 @@\n+import { type Type, type } from 'arktype';\n+import type { Column, ColumnBaseConfig } from 'drizzle-orm';\n+import type {\n+\tMySqlBigInt53,\n+\tMySqlChar,\n+\tMySqlDouble,\n+\tMySqlFloat,\n+\tMySqlInt,\n+\tMySqlMediumInt,\n+\tMySqlReal,\n+\tMySqlSerial,\n+\tMySqlSmallInt,\n+\tMySqlText,\n+\tMySqlTinyInt,\n+\tMySqlVarChar,\n+\tMySqlYear,\n+} from 'drizzle-orm/mysql-core';\n+import type {\n+\tPgArray,\n+\tPgBigInt53,\n+\tPgBigSerial53,\n+\tPgBinaryVector,\n+\tPgChar,\n+\tPgDoublePrecision,\n+\tPgGeometry,\n+\tPgGeometryObject,\n+\tPgHalfVector,\n+\tPgInteger,\n+\tPgLineABC,\n+\tPgLineTuple,\n+\tPgPointObject,\n+\tPgPointTuple,\n+\tPgReal,\n+\tPgSerial,\n+\tPgSmallInt,\n+\tPgSmallSerial,\n+\tPgUUID,\n+\tPgVarchar,\n+\tPgVector,\n+} from 'drizzle-orm/pg-core';\n+import type {\n+\tSingleStoreBigInt53,\n+\tSingleStoreChar,\n+\tSingleStoreDouble,\n+\tSingleStoreFloat,\n+\tSingleStoreInt,\n+\tSingleStoreMediumInt,\n+\tSingleStoreReal,\n+\tSingleStoreSerial,\n+\tSingleStoreSmallInt,\n+\tSingleStoreText,\n+\tSingleStoreTinyInt,\n+\tSingleStoreVarChar,\n+\tSingleStoreYear,\n+} from 'drizzle-orm/singlestore-core';\n+import type { SQLiteInteger, SQLiteReal, SQLiteText } from 'drizzle-orm/sqlite-core';\n+import { CONSTANTS } from './constants.ts';\n+import { isColumnType, isWithEnum } from './utils.ts';\n+\n+export const literalSchema = type('string | number | boolean | null');\n+export const jsonSchema = literalSchema.or(type('unknown.any[] | Record<string, unknown.any>'));",
        "comment_created_at": "2025-03-26T08:50:07+00:00",
        "comment_author": "ssalbdivad",
        "comment_body": "There is a more precise recursive `object.json` type that could be used here if you want.\r\n\r\nTBH validating this kind of thing directly though is generally pretty inefficient and not needed in most cases. If you'd like to speed this simplified version up significantly, you can replace `Record<string, unknown.any>` with `type.object.as<Record<string, any>>()` (or maybe `unknown` unless you really need `any`) since it is impossible for that index signature to fail validation.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2014452608",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4314,
        "pr_file": "drizzle-arktype/src/column.ts",
        "discussion_id": "2013646177",
        "commented_code": "@@ -0,0 +1,291 @@\n+import { type Type, type } from 'arktype';\n+import type { Column, ColumnBaseConfig } from 'drizzle-orm';\n+import type {\n+\tMySqlBigInt53,\n+\tMySqlChar,\n+\tMySqlDouble,\n+\tMySqlFloat,\n+\tMySqlInt,\n+\tMySqlMediumInt,\n+\tMySqlReal,\n+\tMySqlSerial,\n+\tMySqlSmallInt,\n+\tMySqlText,\n+\tMySqlTinyInt,\n+\tMySqlVarChar,\n+\tMySqlYear,\n+} from 'drizzle-orm/mysql-core';\n+import type {\n+\tPgArray,\n+\tPgBigInt53,\n+\tPgBigSerial53,\n+\tPgBinaryVector,\n+\tPgChar,\n+\tPgDoublePrecision,\n+\tPgGeometry,\n+\tPgGeometryObject,\n+\tPgHalfVector,\n+\tPgInteger,\n+\tPgLineABC,\n+\tPgLineTuple,\n+\tPgPointObject,\n+\tPgPointTuple,\n+\tPgReal,\n+\tPgSerial,\n+\tPgSmallInt,\n+\tPgSmallSerial,\n+\tPgUUID,\n+\tPgVarchar,\n+\tPgVector,\n+} from 'drizzle-orm/pg-core';\n+import type {\n+\tSingleStoreBigInt53,\n+\tSingleStoreChar,\n+\tSingleStoreDouble,\n+\tSingleStoreFloat,\n+\tSingleStoreInt,\n+\tSingleStoreMediumInt,\n+\tSingleStoreReal,\n+\tSingleStoreSerial,\n+\tSingleStoreSmallInt,\n+\tSingleStoreText,\n+\tSingleStoreTinyInt,\n+\tSingleStoreVarChar,\n+\tSingleStoreYear,\n+} from 'drizzle-orm/singlestore-core';\n+import type { SQLiteInteger, SQLiteReal, SQLiteText } from 'drizzle-orm/sqlite-core';\n+import { CONSTANTS } from './constants.ts';\n+import { isColumnType, isWithEnum } from './utils.ts';\n+\n+export const literalSchema = type('string | number | boolean | null');\n+export const jsonSchema = literalSchema.or(type('unknown.any[] | Record<string, unknown.any>'));",
        "comment_created_at": "2025-03-26T15:36:01+00:00",
        "comment_author": "L-Mario564",
        "comment_body": "> There is a more precise recursive object.json type that could be used here if you want.\r\n>\r\n> TBH validating this kind of thing directly though is generally pretty inefficient and not needed in most cases.\r\n\r\nThe above definition is the same one used for other Drizzle validator packages, so keeping it the same will output the same type regardless if the developer is using drizzle-zod, drizzle-valibot, drizzle-arktype or drizzle-typebox. This also includes the definition having `Record<string, any>` rather than `Record<string, unknown>`, since that's the type used for the other validators (although could be changed across all of these packages to be `Record<string, unknown`).\r\n\r\nRegardless, I'll definitely implement the optimization.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013681790",
    "pr_number": 4314,
    "pr_file": "drizzle-arktype/src/schema.types.internal.ts",
    "created_at": "2025-03-26T09:11:15+00:00",
    "commented_code": "+import type { Type, type } from 'arktype';\n+import { Inferred } from 'arktype/internal/methods/base.ts';\n+import type { Assume, Column, DrizzleTypeError, SelectedFieldsFlat, Simplify, Table, View } from 'drizzle-orm';\n+import type {\n+\tArktypeNullable,\n+\tArktypeOptional,\n+\tGetArktypeType,\n+\tGetBaseColumn,\n+\tGetEnumValuesFromColumn,\n+\tHandleColumn,\n+} from './column.types.ts';\n+import type { GetSelection, RemoveNever } from './utils.ts';\n+\n+export interface Conditions {\n+\tnever: (column?: Column) => boolean;\n+\toptional: (column: Column) => boolean;\n+\tnullable: (column: Column) => boolean;\n+}\n+\n+type GenericSchema = Inferred | [Inferred, '?'];\n+\n+export type BuildRefineColumns<\n+\tTColumns extends Record<string, any>,\n+> = Simplify<\n+\tRemoveNever<\n+\t\t{\n+\t\t\t[K in keyof TColumns]: TColumns[K] extends infer TColumn extends Column ? GetArktypeType<\n+\t\t\t\t\tTColumn['_']['data'],\n+\t\t\t\t\tTColumn['_']['dataType'],\n+\t\t\t\t\tTColumn['_']['columnType'],\n+\t\t\t\t\tGetEnumValuesFromColumn<TColumn>,\n+\t\t\t\t\tGetBaseColumn<TColumn>\n+\t\t\t\t> extends infer TSchema extends GenericSchema ? TSchema\n+\t\t\t\t: Type<any, {}>\n+\t\t\t\t: TColumns[K] extends infer TObject extends SelectedFieldsFlat<Column> | Table | View\n+\t\t\t\t\t? BuildRefineColumns<GetSelection<TObject>>\n+\t\t\t\t: TColumns[K];\n+\t\t}\n+\t>\n+>;\n+\n+export type BuildRefine<\n+\tTColumns extends Record<string, any>,\n+> = BuildRefineColumns<TColumns> extends infer TBuildColumns ? {\n+\t\t[K in keyof TBuildColumns]?: TBuildColumns[K] extends GenericSchema",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2013681790",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4314,
        "pr_file": "drizzle-arktype/src/schema.types.internal.ts",
        "discussion_id": "2013681790",
        "commented_code": "@@ -0,0 +1,106 @@\n+import type { Type, type } from 'arktype';\n+import { Inferred } from 'arktype/internal/methods/base.ts';\n+import type { Assume, Column, DrizzleTypeError, SelectedFieldsFlat, Simplify, Table, View } from 'drizzle-orm';\n+import type {\n+\tArktypeNullable,\n+\tArktypeOptional,\n+\tGetArktypeType,\n+\tGetBaseColumn,\n+\tGetEnumValuesFromColumn,\n+\tHandleColumn,\n+} from './column.types.ts';\n+import type { GetSelection, RemoveNever } from './utils.ts';\n+\n+export interface Conditions {\n+\tnever: (column?: Column) => boolean;\n+\toptional: (column: Column) => boolean;\n+\tnullable: (column: Column) => boolean;\n+}\n+\n+type GenericSchema = Inferred | [Inferred, '?'];\n+\n+export type BuildRefineColumns<\n+\tTColumns extends Record<string, any>,\n+> = Simplify<\n+\tRemoveNever<\n+\t\t{\n+\t\t\t[K in keyof TColumns]: TColumns[K] extends infer TColumn extends Column ? GetArktypeType<\n+\t\t\t\t\tTColumn['_']['data'],\n+\t\t\t\t\tTColumn['_']['dataType'],\n+\t\t\t\t\tTColumn['_']['columnType'],\n+\t\t\t\t\tGetEnumValuesFromColumn<TColumn>,\n+\t\t\t\t\tGetBaseColumn<TColumn>\n+\t\t\t\t> extends infer TSchema extends GenericSchema ? TSchema\n+\t\t\t\t: Type<any, {}>\n+\t\t\t\t: TColumns[K] extends infer TObject extends SelectedFieldsFlat<Column> | Table | View\n+\t\t\t\t\t? BuildRefineColumns<GetSelection<TObject>>\n+\t\t\t\t: TColumns[K];\n+\t\t}\n+\t>\n+>;\n+\n+export type BuildRefine<\n+\tTColumns extends Record<string, any>,\n+> = BuildRefineColumns<TColumns> extends infer TBuildColumns ? {\n+\t\t[K in keyof TBuildColumns]?: TBuildColumns[K] extends GenericSchema",
        "comment_created_at": "2025-03-26T09:11:15+00:00",
        "comment_author": "ssalbdivad",
        "comment_body": "If I understand correctly what you're looking to do here, the easiest + most efficient way is `TBuildColumns[K] extends type.Any ? ((schema: TBuildColumns[K]) => type.Any) | type.Any`.\r\n\r\n`Inferred` is internal and shouldn't be used here since there are other ways to identify a `Type` (though totally understand how those are hard to find externally).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1376812389",
    "pr_number": 1218,
    "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
    "created_at": "2023-10-30T21:16:17+00:00",
    "commented_code": "> = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1376812389",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
        "discussion_id": "1376812389",
        "commented_code": "@@ -268,3 +362,98 @@ export type MySqlSelect<\n > = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
        "comment_created_at": "2023-10-30T21:16:17+00:00",
        "comment_author": "dankochetov",
        "comment_body": "Use the `_` property reference instead of inference whenever possible, it's cleaner and was specifically designed for such cases.\n```suggestion\n> = ValidateShape<\n\tTValue['_']['result'][number],\n\tTResult[number],\n\tTypedQueryBuilder<any, TValue['_']['result']>\n>;\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1376871286",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
        "discussion_id": "1376812389",
        "commented_code": "@@ -268,3 +362,98 @@ export type MySqlSelect<\n > = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
        "comment_created_at": "2023-10-30T22:38:49+00:00",
        "comment_author": "Angelelz",
        "comment_body": "I wish I had thought of that. You have no idea how long I spent with this stupid type. I'll commit in my code to run all the tests again",
        "pr_file_module": null
      },
      {
        "comment_id": "1376990406",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
        "discussion_id": "1376812389",
        "commented_code": "@@ -268,3 +362,98 @@ export type MySqlSelect<\n > = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
        "comment_created_at": "2023-10-31T02:45:25+00:00",
        "comment_author": "Angelelz",
        "comment_body": "For some reason if I don't narrow the type the way I implemented it, the ValidateShape won't pick it up and won't show the error. I added your suggested change, but the type errors don't show. If you can set it up and check the type-tests let me know. I did however simplified it a little based on your suggestion.",
        "pr_file_module": null
      },
      {
        "comment_id": "1377040904",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
        "discussion_id": "1376812389",
        "commented_code": "@@ -268,3 +362,98 @@ export type MySqlSelect<\n > = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
        "comment_created_at": "2023-10-31T04:29:18+00:00",
        "comment_author": "Angelelz",
        "comment_body": "I think I know the reason. `TValue` extends `MySqlSetOperatorWithResult<TResult>` and the `TResult` is pulled from the type we actually want to validate against. When we compare `TValue['_']['result'][number]` against `TResult[number]` the compiler is basically comparing the same type against itself.\r\nThat's why narrowing _**and inferring**_ is necessary for the ValidateShape to work properly.",
        "pr_file_module": null
      },
      {
        "comment_id": "1377270779",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1218,
        "pr_file": "drizzle-orm/src/mysql-core/query-builders/select.types.ts",
        "discussion_id": "1376812389",
        "commented_code": "@@ -268,3 +362,98 @@ export type MySqlSelect<\n > = MySqlSelectBase<TTableName, TSelection, TSelectMode, PreparedQueryHKTBase, TNullabilityMap, true, never>;\n \n export type AnyMySqlSelect = MySqlSelectBase<any, any, any, any, any, any, any, any>;\n+\n+export type MySqlSetOperator<\n+\tTTableName extends string | undefined = string | undefined,\n+\tTSelection extends ColumnsSelection = Record<string, any>,\n+\tTSelectMode extends SelectMode = SelectMode,\n+\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n+\tTNullabilityMap extends Record<string, JoinNullability> = Record<string, JoinNullability>,\n+> = MySqlSelectBase<\n+\tTTableName,\n+\tTSelection,\n+\tTSelectMode,\n+\tTPreparedQueryHKT,\n+\tTNullabilityMap,\n+\ttrue,\n+\tMySqlSetOperatorExcludedMethods\n+>;\n+\n+export type SetOperatorRightSelect<\n+\tTValue extends MySqlSetOperatorWithResult<TResult>,\n+\tTResult extends any[],\n+> = TValue extends MySqlSetOperatorInterface<any, any, any, any, any, any, any, infer TValueResult, any>\n+\t? TValueResult extends Array<infer TValueObj> ? ValidateShape<\n+\t\t\tTValueObj,\n+\t\t\tTResult[number],\n+\t\t\tTypedQueryBuilder<any, TValueResult>\n+\t\t>\n+\t: never\n+\t: TValue;\n+",
        "comment_created_at": "2023-10-31T09:14:43+00:00",
        "comment_author": "dankochetov",
        "comment_body": "Makes sense, I might look into the types later to see if they can be further optimized. Type performance is our bottleneck in general, so we have to be careful not to introduce too much type checking overhead.",
        "pr_file_module": null
      }
    ]
  }
]