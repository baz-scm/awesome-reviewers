[
  {
    "discussion_id": "2100594208",
    "pr_number": 4292,
    "pr_file": "drizzle-kit/src/serializer/pgSerializer.ts",
    "created_at": "2025-05-21T15:31:43+00:00",
    "commented_code": "const primaryKey: boolean = column.primary;\n \t\t\tconst sqlTypeLowered = column.getSQLType().toLowerCase();\n \n-\t\t\tconst typeSchema = is(column, PgEnumColumn) ? column.enum.schema || 'public' : undefined;\n+\t\t\tconst typeSchema = is(column, PgEnumColumn)\n+\t\t\t\t? column.enum.schema || 'public'",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2100594208",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4292,
        "pr_file": "drizzle-kit/src/serializer/pgSerializer.ts",
        "discussion_id": "2100594208",
        "commented_code": "@@ -158,7 +159,12 @@ export const generatePgSnapshot = (\n \t\t\tconst primaryKey: boolean = column.primary;\n \t\t\tconst sqlTypeLowered = column.getSQLType().toLowerCase();\n \n-\t\t\tconst typeSchema = is(column, PgEnumColumn) ? column.enum.schema || 'public' : undefined;\n+\t\t\tconst typeSchema = is(column, PgEnumColumn)\n+\t\t\t\t? column.enum.schema || 'public'",
        "comment_created_at": "2025-05-21T15:31:43+00:00",
        "comment_author": "devdatkumar",
        "comment_body": "for line 163 and 165, use ?? instead of || to avoid falling back on 'public' if the schema is an empty string ''.\r\n```tsx\r\nconst typeSchema = is(column, PgEnumColumn)\r\n  ? column.enum.schema ?? 'public'\r\n  : is(column, PgArray) && is(column.baseColumn, PgEnumColumn)\r\n    ? column.baseColumn.enum.schema ?? 'public'\r\n    : undefined;\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100596403",
    "pr_number": 4292,
    "pr_file": "drizzle-kit/src/serializer/pgSerializer.ts",
    "created_at": "2025-05-21T15:32:47+00:00",
    "commented_code": "const primaryKey: boolean = column.primary;\n \t\t\t\tconst sqlTypeLowered = column.getSQLType().toLowerCase();\n \n-\t\t\t\tconst typeSchema = is(column, PgEnumColumn) ? column.enum.schema || 'public' : undefined;\n+\t\t\t\tconst typeSchema = is(column, PgEnumColumn)\n+\t\t\t\t\t? column.enum.schema || 'public'\n+\t\t\t\t\t: is(column, PgArray) && is(column.baseColumn, PgEnumColumn)\n+\t\t\t\t\t\t? column.baseColumn.enum.schema || 'public'\n+\t\t\t\t\t\t: undefined;\n+",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "2100596403",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 4292,
        "pr_file": "drizzle-kit/src/serializer/pgSerializer.ts",
        "discussion_id": "2100596403",
        "commented_code": "@@ -746,7 +752,12 @@ export const generatePgSnapshot = (\n \t\t\t\tconst primaryKey: boolean = column.primary;\n \t\t\t\tconst sqlTypeLowered = column.getSQLType().toLowerCase();\n \n-\t\t\t\tconst typeSchema = is(column, PgEnumColumn) ? column.enum.schema || 'public' : undefined;\n+\t\t\t\tconst typeSchema = is(column, PgEnumColumn)\n+\t\t\t\t\t? column.enum.schema || 'public'\n+\t\t\t\t\t: is(column, PgArray) && is(column.baseColumn, PgEnumColumn)\n+\t\t\t\t\t\t? column.baseColumn.enum.schema || 'public'\n+\t\t\t\t\t\t: undefined;\n+",
        "comment_created_at": "2025-05-21T15:32:47+00:00",
        "comment_author": "devdatkumar",
        "comment_body": "for line 756 and 758, use ?? instead of || to avoid falling back on 'public' if the schema is an empty string ''.\r\n```tsx\r\nconst typeSchema = is(column, PgEnumColumn)\r\n  ? column.enum.schema ?? 'public'\r\n  : is(column, PgArray) && is(column.baseColumn, PgEnumColumn)\r\n    ? column.baseColumn.enum.schema ?? 'public'\r\n    : undefined;\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1306219345",
    "pr_number": 1050,
    "pr_file": "drizzle-orm/src/libsql/session.ts",
    "created_at": "2023-08-25T23:48:09+00:00",
    "commented_code": "// that can be accessed both as objects and arrays. Let's\n \t// turn them into objects what's what other SQLite drivers\n \t// do.\n-\treturn Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n+\treturn Object.keys(obj || {}).reduce((acc: Record<string, any>, key) => {",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1306219345",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1050,
        "pr_file": "drizzle-orm/src/libsql/session.ts",
        "discussion_id": "1306219345",
        "commented_code": "@@ -184,7 +184,7 @@ function normalizeRow(obj: any) {\n \t// that can be accessed both as objects and arrays. Let's\n \t// turn them into objects what's what other SQLite drivers\n \t// do.\n-\treturn Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n+\treturn Object.keys(obj || {}).reduce((acc: Record<string, any>, key) => {",
        "comment_created_at": "2023-08-25T23:48:09+00:00",
        "comment_author": "dankochetov",
        "comment_body": "```suggestion\r\n\treturn Object.keys(obj ?? {}).reduce((acc: Record<string, any>, key) => {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1309146257",
    "pr_number": 1071,
    "pr_file": "drizzle-orm/src/aws-data-api/pg/session.ts",
    "created_at": "2023-08-29T17:26:54+00:00",
    "commented_code": "return row.map((field: Field) => getValueFromDataApi(field));\n \t\t});\n \t}\n+\n+\t/** @internal */\n+\tmapResultRows(records: Field[][], columnMetadata: ColumnMetadata[]) {\n+\t\treturn records.map((record) => {\n+\t\t\tconst row: Record<string, unknown> = {};\n+\t\t\tfor (const [index, field] of record.entries()) {\n+\t\t\t\tconst { name } = columnMetadata[index]!;\n+\t\t\t\trow[name || index] = getValueFromDataApi(field); // not what to default if name is undefined",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1309146257",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1071,
        "pr_file": "drizzle-orm/src/aws-data-api/pg/session.ts",
        "discussion_id": "1309146257",
        "commented_code": "@@ -89,6 +93,18 @@ export class AwsDataApiPreparedQuery<T extends PreparedQueryConfig> extends Prep\n \t\t\treturn row.map((field: Field) => getValueFromDataApi(field));\n \t\t});\n \t}\n+\n+\t/** @internal */\n+\tmapResultRows(records: Field[][], columnMetadata: ColumnMetadata[]) {\n+\t\treturn records.map((record) => {\n+\t\t\tconst row: Record<string, unknown> = {};\n+\t\t\tfor (const [index, field] of record.entries()) {\n+\t\t\t\tconst { name } = columnMetadata[index]!;\n+\t\t\t\trow[name || index] = getValueFromDataApi(field); // not what to default if name is undefined",
        "comment_created_at": "2023-08-29T17:26:54+00:00",
        "comment_author": "dankochetov",
        "comment_body": "Any reason you've used `||` here instead of `??` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1309863946",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1071,
        "pr_file": "drizzle-orm/src/aws-data-api/pg/session.ts",
        "discussion_id": "1309146257",
        "commented_code": "@@ -89,6 +93,18 @@ export class AwsDataApiPreparedQuery<T extends PreparedQueryConfig> extends Prep\n \t\t\treturn row.map((field: Field) => getValueFromDataApi(field));\n \t\t});\n \t}\n+\n+\t/** @internal */\n+\tmapResultRows(records: Field[][], columnMetadata: ColumnMetadata[]) {\n+\t\treturn records.map((record) => {\n+\t\t\tconst row: Record<string, unknown> = {};\n+\t\t\tfor (const [index, field] of record.entries()) {\n+\t\t\t\tconst { name } = columnMetadata[index]!;\n+\t\t\t\trow[name || index] = getValueFromDataApi(field); // not what to default if name is undefined",
        "comment_created_at": "2023-08-30T08:08:47+00:00",
        "comment_author": "boian-ivanov",
        "comment_body": "As I've added as a comment, I'm not entirely sure what the default behaviour should be if the column key is not found. But it made sense to default it to the index if/when it's undefined. \nI've used two pipes for the general reason that it would default to the index, if the value on the left wouldn't be a valid array index, but as the values we're expecting are either string or undefined, I'm happy to do a nullish coalescing operation as well",
        "pr_file_module": null
      },
      {
        "comment_id": "1310218506",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 1071,
        "pr_file": "drizzle-orm/src/aws-data-api/pg/session.ts",
        "discussion_id": "1309146257",
        "commented_code": "@@ -89,6 +93,18 @@ export class AwsDataApiPreparedQuery<T extends PreparedQueryConfig> extends Prep\n \t\t\treturn row.map((field: Field) => getValueFromDataApi(field));\n \t\t});\n \t}\n+\n+\t/** @internal */\n+\tmapResultRows(records: Field[][], columnMetadata: ColumnMetadata[]) {\n+\t\treturn records.map((record) => {\n+\t\t\tconst row: Record<string, unknown> = {};\n+\t\t\tfor (const [index, field] of record.entries()) {\n+\t\t\t\tconst { name } = columnMetadata[index]!;\n+\t\t\t\trow[name || index] = getValueFromDataApi(field); // not what to default if name is undefined",
        "comment_created_at": "2023-08-30T12:45:20+00:00",
        "comment_author": "dankochetov",
        "comment_body": "Yes, let's use nullish coalescing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1208612710",
    "pr_number": 631,
    "pr_file": "drizzle-orm/src/sqlite-core/dialect.ts",
    "created_at": "2023-05-28T17:49:03+00:00",
    "commented_code": "const dbMigrations = session.values<[number, string, string]>(\n \t\t\tsql`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`,\n \t\t);\n-\n-\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n+\t\t// fix for bun-sqlite migrations where dbMigrations return null\n+\t\tconst lastDbMigration = dbMigrations == null ? undefined : dbMigrations[0] ?? undefined;",
    "repo_full_name": "drizzle-team/drizzle-orm",
    "discussion_comments": [
      {
        "comment_id": "1208612710",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 631,
        "pr_file": "drizzle-orm/src/sqlite-core/dialect.ts",
        "discussion_id": "1208612710",
        "commented_code": "@@ -660,8 +660,8 @@ export class SQLiteSyncDialect extends SQLiteDialect {\n \t\tconst dbMigrations = session.values<[number, string, string]>(\n \t\t\tsql`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`,\n \t\t);\n-\n-\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n+\t\t// fix for bun-sqlite migrations where dbMigrations return null\n+\t\tconst lastDbMigration = dbMigrations == null ? undefined : dbMigrations[0] ?? undefined;",
        "comment_created_at": "2023-05-28T17:49:03+00:00",
        "comment_author": "dankochetov",
        "comment_body": "```suggestion\r\n\t\tconst lastDbMigration = dbMigrations?.[0] ?? undefined;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1208621764",
        "repo_full_name": "drizzle-team/drizzle-orm",
        "pr_number": 631,
        "pr_file": "drizzle-orm/src/sqlite-core/dialect.ts",
        "discussion_id": "1208612710",
        "commented_code": "@@ -660,8 +660,8 @@ export class SQLiteSyncDialect extends SQLiteDialect {\n \t\tconst dbMigrations = session.values<[number, string, string]>(\n \t\t\tsql`SELECT id, hash, created_at FROM \"__drizzle_migrations\" ORDER BY created_at DESC LIMIT 1`,\n \t\t);\n-\n-\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n+\t\t// fix for bun-sqlite migrations where dbMigrations return null\n+\t\tconst lastDbMigration = dbMigrations == null ? undefined : dbMigrations[0] ?? undefined;",
        "comment_created_at": "2023-05-28T18:35:53+00:00",
        "comment_author": "titouv",
        "comment_body": "Thanks for the edit, it's way cleaner that way",
        "pr_file_module": null
      }
    ]
  }
]