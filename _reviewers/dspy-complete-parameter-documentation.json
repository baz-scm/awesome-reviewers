[
  {
    "discussion_id": "2314689083",
    "pr_number": 8737,
    "pr_file": "dspy/teleprompt/gepa/gepa.py",
    "created_at": "2025-09-02T00:30:56+00:00",
    "commented_code": "a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. \n+            If provided, GEPA will use this custom proposer instead of its default instruction proposal",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2314689083",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2314689083",
        "commented_code": "@@ -211,6 +211,13 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. \n+            If provided, GEPA will use this custom proposer instead of its default instruction proposal ",
        "comment_created_at": "2025-09-02T00:30:56+00:00",
        "comment_author": "LakshyAAAgrawal",
        "comment_body": "Can you include some link to the `default instruction proposal` so that people wanting to implement their own logic have a reference point? Also some kind of link to `MultiModalInstructionProposer() from dspy.teleprompt.gepa.instruction_proposal`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2314969983",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2314689083",
        "commented_code": "@@ -211,6 +211,13 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. \n+            If provided, GEPA will use this custom proposer instead of its default instruction proposal ",
        "comment_created_at": "2025-09-02T05:45:19+00:00",
        "comment_author": "andressrg",
        "comment_body": "I'm not sure how to add links here. I've just added this:\r\n\r\n```\r\nUse `MultiModalInstructionProposer()` from `dspy.teleprompt.gepa.instruction_proposal` \r\nfor handling visual content. If None (default), GEPA uses its built-in text-optimized \r\nproposer (see `gepa.strategies.instruction_proposal.InstructionProposalSignature` \r\nfor reference implementation).\r\n```\r\n\r\nIs this what you were proposing? or is there a way to add hrefs here that I might not be familiar with? \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2317178012",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2314689083",
        "commented_code": "@@ -211,6 +211,13 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. \n+            If provided, GEPA will use this custom proposer instead of its default instruction proposal ",
        "comment_created_at": "2025-09-02T21:07:30+00:00",
        "comment_author": "LakshyAAAgrawal",
        "comment_body": "I think this is markdown so \\[]() should work. I think you can feel free to ignore this as nit for now, otherwise, just include a markdown link to the source location. Won't hold back merge for this!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2317590406",
    "pr_number": 8737,
    "pr_file": "dspy/teleprompt/gepa/gepa.py",
    "created_at": "2025-09-03T02:17:11+00:00",
    "commented_code": "a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol.",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2317590406",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2317590406",
        "commented_code": "@@ -210,6 +209,14 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. ",
        "comment_created_at": "2025-09-03T02:17:11+00:00",
        "comment_author": "LakshyAAAgrawal",
        "comment_body": "Let's add a note here, saying that \"if instruction_proposer is provided and reflection_lm is provided, the instruction_proposer is called in context of the reflection_lm. However, it is not mandatory to provide reflection_lm and instruction_proposer can implement custom logic including invocation of custom LLMs.\" Feel free to improve upon this!",
        "pr_file_module": null
      },
      {
        "comment_id": "2317632238",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2317590406",
        "commented_code": "@@ -210,6 +209,14 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. ",
        "comment_created_at": "2025-09-03T02:57:50+00:00",
        "comment_author": "andressrg",
        "comment_body": "sure. On it",
        "pr_file_module": null
      },
      {
        "comment_id": "2317652322",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8737,
        "pr_file": "dspy/teleprompt/gepa/gepa.py",
        "discussion_id": "2317590406",
        "commented_code": "@@ -210,6 +209,14 @@ def metric(\n             a strong reflection model. Consider using `dspy.LM(model='gpt-5', temperature=1.0, max_tokens=32000)` \n             for optimal performance.\n         skip_perfect_score: Whether to skip examples with perfect scores during reflection. Default is True.\n+        instruction_proposer: Optional custom instruction proposer implementing GEPA's ProposalFn protocol. ",
        "comment_created_at": "2025-09-03T03:16:21+00:00",
        "comment_author": "andressrg",
        "comment_body": "Added",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1763723214",
    "pr_number": 1501,
    "pr_file": "dspy/evaluate/evaluate.py",
    "created_at": "2024-09-17T18:37:32+00:00",
    "commented_code": "):",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "1763723214",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 1501,
        "pr_file": "dspy/evaluate/evaluate.py",
        "discussion_id": "1763723214",
        "commented_code": "@@ -57,6 +58,10 @@ def __init__(\n     ):",
        "comment_created_at": "2024-09-17T18:37:32+00:00",
        "comment_author": "dbczumar",
        "comment_body": "@hmoazam @okhat While we're here, can we start to add docstrings to these core classes / functions, including docstrings for each parameter? Super helpful for usability.\r\n\r\nCan we also add type hints? I.e. is `batched_metric` Optional[bool]`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2122302507",
    "pr_number": 8296,
    "pr_file": "dspy/primitives/python_interpreter.py",
    "created_at": "2025-06-02T22:59:08+00:00",
    "commented_code": "```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(self, deno_command: Optional[List[str]] = None, enable_read_paths: Optional[Union[bool, Iterable[Union[PathLike, str]]]] = None, enable_env_vars: Optional[Union[bool, Iterable[str]]] = None, enable_network_access: Optional[Union[bool, Iterable[str]]] = None, enable_write_paths: Optional[Union[bool, Iterable[Union[PathLike, str]]]] = None) -> None:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2122302507",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8296,
        "pr_file": "dspy/primitives/python_interpreter.py",
        "discussion_id": "2122302507",
        "commented_code": "@@ -24,16 +25,90 @@ class PythonInterpreter:\n     ```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(self, deno_command: Optional[List[str]] = None, enable_read_paths: Optional[Union[bool, Iterable[Union[PathLike, str]]]] = None, enable_env_vars: Optional[Union[bool, Iterable[str]]] = None, enable_network_access: Optional[Union[bool, Iterable[str]]] = None, enable_write_paths: Optional[Union[bool, Iterable[Union[PathLike, str]]]] = None) -> None:",
        "comment_created_at": "2025-06-02T22:59:08+00:00",
        "comment_author": "TomeHirata",
        "comment_body": "Can we add a docstring for these arguments?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2125048003",
    "pr_number": 8296,
    "pr_file": "dspy/primitives/python_interpreter.py",
    "created_at": "2025-06-03T22:30:16+00:00",
    "commented_code": "```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(\n+        self,\n+        deno_command: Optional[List[str]] = None,\n+        enable_read_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        enable_env_vars: Optional[Iterable[str]] = None,\n+        enable_network_access: Optional[Iterable[str]] = None,\n+        enable_write_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        sync_files: bool = True,\n+    ) -> None:\n+        \"\"\"\n+        Args:\n+            deno_command: command list to launch Deno.\n+            enable_read_paths: Files or directories to allow reading from in the sandbox.\n+            enable_env_vars: Environment variable names to allow in the sandbox.\n+            enable_network_access: Domains or IPs to allow network access in the sandbox.\n+            enable_write_paths: Files or directories to allow writing to in the sandbox.\n+            sync_files: If set, syncs changes within the sandbox back to original files after execution.\n+        \"\"\"",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2125048003",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8296,
        "pr_file": "dspy/primitives/python_interpreter.py",
        "discussion_id": "2125048003",
        "commented_code": "@@ -24,16 +25,99 @@ class PythonInterpreter:\n     ```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(\n+        self,\n+        deno_command: Optional[List[str]] = None,\n+        enable_read_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        enable_env_vars: Optional[Iterable[str]] = None,\n+        enable_network_access: Optional[Iterable[str]] = None,\n+        enable_write_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        sync_files: bool = True,\n+    ) -> None:\n+        \"\"\"\n+        Args:\n+            deno_command: command list to launch Deno.\n+            enable_read_paths: Files or directories to allow reading from in the sandbox.\n+            enable_env_vars: Environment variable names to allow in the sandbox.\n+            enable_network_access: Domains or IPs to allow network access in the sandbox.\n+            enable_write_paths: Files or directories to allow writing to in the sandbox.\n+            sync_files: If set, syncs changes within the sandbox back to original files after execution.\n+        \"\"\"",
        "comment_created_at": "2025-06-03T22:30:16+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "Not necessarily in this PR, but we should add some code examples to explain how to use these news args (also when should users use these args) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013533968",
    "pr_number": 8014,
    "pr_file": "dspy/utils/usage_tracker.py",
    "created_at": "2025-03-26T07:29:38+00:00",
    "commented_code": "+\"\"\"Usage tracking utilities for DSPy.\"\"\"\n+\n+from collections import defaultdict\n+from contextlib import contextmanager\n+from typing import Any\n+\n+from dspy.dsp.utils.settings import settings\n+\n+\n+class UsageTracker:\n+    \"\"\"Tracks LM usage data within a context.\"\"\"\n+\n+    def __init__(self):\n+        self.usage_data = defaultdict(list)",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2013533968",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8014,
        "pr_file": "dspy/utils/usage_tracker.py",
        "discussion_id": "2013533968",
        "commented_code": "@@ -0,0 +1,59 @@\n+\"\"\"Usage tracking utilities for DSPy.\"\"\"\n+\n+from collections import defaultdict\n+from contextlib import contextmanager\n+from typing import Any\n+\n+from dspy.dsp.utils.settings import settings\n+\n+\n+class UsageTracker:\n+    \"\"\"Tracks LM usage data within a context.\"\"\"\n+\n+    def __init__(self):\n+        self.usage_data = defaultdict(list)",
        "comment_created_at": "2025-03-26T07:29:38+00:00",
        "comment_author": "TomeHirata",
        "comment_body": "nit: if may be helpful if we document what are the key and value of this dict",
        "pr_file_module": null
      },
      {
        "comment_id": "2014975904",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8014,
        "pr_file": "dspy/utils/usage_tracker.py",
        "discussion_id": "2013533968",
        "commented_code": "@@ -0,0 +1,59 @@\n+\"\"\"Usage tracking utilities for DSPy.\"\"\"\n+\n+from collections import defaultdict\n+from contextlib import contextmanager\n+from typing import Any\n+\n+from dspy.dsp.utils.settings import settings\n+\n+\n+class UsageTracker:\n+    \"\"\"Tracks LM usage data within a context.\"\"\"\n+\n+    def __init__(self):\n+        self.usage_data = defaultdict(list)",
        "comment_created_at": "2025-03-26T20:47:15+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "sg! ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1992238065",
    "pr_number": 2040,
    "pr_file": "dspy/adapters/chat_adapter.py",
    "created_at": "2025-03-12T20:23:35+00:00",
    "commented_code": "annotation (e.g. str, int, etc.), and the type of the value itself. Joins the formatted values\n     into a single string, which is is a multiline string if there are multiple fields.\n \n-    Args:\n-      fields_with_values: A dictionary mapping information about a field to its corresponding\n-                          value.\n+    Parameters:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "1992238065",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2040,
        "pr_file": "dspy/adapters/chat_adapter.py",
        "discussion_id": "1992238065",
        "commented_code": "@@ -141,9 +175,8 @@ def format_fields(fields_with_values: Dict[FieldInfoWithName, Any]) -> str:\n     annotation (e.g. str, int, etc.), and the type of the value itself. Joins the formatted values\n     into a single string, which is is a multiline string if there are multiple fields.\n \n-    Args:\n-      fields_with_values: A dictionary mapping information about a field to its corresponding\n-                          value.\n+    Parameters:",
        "comment_created_at": "2025-03-12T20:23:35+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "Revert this, Args is the standard: https://google.github.io/styleguide/pyguide.html#383-functions-and-methods",
        "pr_file_module": null
      },
      {
        "comment_id": "1992343962",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2040,
        "pr_file": "dspy/adapters/chat_adapter.py",
        "discussion_id": "1992238065",
        "commented_code": "@@ -141,9 +175,8 @@ def format_fields(fields_with_values: Dict[FieldInfoWithName, Any]) -> str:\n     annotation (e.g. str, int, etc.), and the type of the value itself. Joins the formatted values\n     into a single string, which is is a multiline string if there are multiple fields.\n \n-    Args:\n-      fields_with_values: A dictionary mapping information about a field to its corresponding\n-                          value.\n+    Parameters:",
        "comment_created_at": "2025-03-12T21:49:22+00:00",
        "comment_author": "gilad12-coder",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]