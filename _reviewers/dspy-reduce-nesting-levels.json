[
  {
    "discussion_id": "2110658870",
    "pr_number": 8286,
    "pr_file": "dspy/primitives/module.py",
    "created_at": "2025-05-28T01:19:01+00:00",
    "commented_code": "path.mkdir(parents=True)\n \n             try:\n+                if modules_to_serialize is not None:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2110658870",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8286,
        "pr_file": "dspy/primitives/module.py",
        "discussion_id": "2110658870",
        "commented_code": "@@ -198,6 +205,10 @@ def save(self, path, save_program=False):\n                 path.mkdir(parents=True)\n \n             try:\n+                if modules_to_serialize is not None:",
        "comment_created_at": "2025-05-28T01:19:01+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "nit: remove this if condition check and use `modules_to_serialize = modules_to_serialize or []` to reduce the nesting level. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2110707362",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8286,
        "pr_file": "dspy/primitives/module.py",
        "discussion_id": "2110658870",
        "commented_code": "@@ -198,6 +205,10 @@ def save(self, path, save_program=False):\n                 path.mkdir(parents=True)\n \n             try:\n+                if modules_to_serialize is not None:",
        "comment_created_at": "2025-05-28T01:52:42+00:00",
        "comment_author": "erandeutsch",
        "comment_body": "Thanks, I replaced the condition check with your suggestion.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2125046283",
    "pr_number": 8296,
    "pr_file": "dspy/primitives/python_interpreter.py",
    "created_at": "2025-06-03T22:28:32+00:00",
    "commented_code": "```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(\n+        self,\n+        deno_command: Optional[List[str]] = None,\n+        enable_read_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        enable_env_vars: Optional[Iterable[str]] = None,\n+        enable_network_access: Optional[Iterable[str]] = None,\n+        enable_write_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        sync_files: bool = True,\n+    ) -> None:\n+        \"\"\"\n+        Args:\n+            deno_command: command list to launch Deno.\n+            enable_read_paths: Files or directories to allow reading from in the sandbox.\n+            enable_env_vars: Environment variable names to allow in the sandbox.\n+            enable_network_access: Domains or IPs to allow network access in the sandbox.\n+            enable_write_paths: Files or directories to allow writing to in the sandbox.\n+            sync_files: If set, syncs changes within the sandbox back to original files after execution.\n+        \"\"\"\n         if isinstance(deno_command, dict):\n             deno_command = None  # no-op, just a guard in case someone passes a dict\n-        self.deno_command = deno_command or [\"deno\", \"run\", \"--allow-read\", self._get_runner_path()]\n+\n+        self.enable_read_paths = enable_read_paths",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2125046283",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8296,
        "pr_file": "dspy/primitives/python_interpreter.py",
        "discussion_id": "2125046283",
        "commented_code": "@@ -24,16 +25,99 @@ class PythonInterpreter:\n     ```\n     \"\"\"\n \n-    def __init__(self, deno_command: Optional[List[str]] = None) -> None:\n+    def __init__(\n+        self,\n+        deno_command: Optional[List[str]] = None,\n+        enable_read_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        enable_env_vars: Optional[Iterable[str]] = None,\n+        enable_network_access: Optional[Iterable[str]] = None,\n+        enable_write_paths: Optional[Iterable[Union[PathLike, str]]] = None,\n+        sync_files: bool = True,\n+    ) -> None:\n+        \"\"\"\n+        Args:\n+            deno_command: command list to launch Deno.\n+            enable_read_paths: Files or directories to allow reading from in the sandbox.\n+            enable_env_vars: Environment variable names to allow in the sandbox.\n+            enable_network_access: Domains or IPs to allow network access in the sandbox.\n+            enable_write_paths: Files or directories to allow writing to in the sandbox.\n+            sync_files: If set, syncs changes within the sandbox back to original files after execution.\n+        \"\"\"\n         if isinstance(deno_command, dict):\n             deno_command = None  # no-op, just a guard in case someone passes a dict\n-        self.deno_command = deno_command or [\"deno\", \"run\", \"--allow-read\", self._get_runner_path()]\n+\n+        self.enable_read_paths = enable_read_paths",
        "comment_created_at": "2025-06-03T22:28:32+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "we can simplify the implementation by: `self.enable_read_paths = enable_read_paths or []`, then you don't need to check `if self.enable_read_paths` in the following code. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2094769450",
    "pr_number": 8238,
    "pr_file": "dspy/utils/usage_tracker.py",
    "created_at": "2025-05-19T03:17:36+00:00",
    "commented_code": "else:\n                     result[k] = result[k] or 0\n                     result[k] += v if v else 0\n+            else:\n+                result[k] = dict(v) if isinstance(v, dict) else v",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2094769450",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8238,
        "pr_file": "dspy/utils/usage_tracker.py",
        "discussion_id": "2094769450",
        "commented_code": "@@ -43,6 +43,8 @@ def _merge_usage_entries(self, usage_entry1, usage_entry2) -> dict[str, dict[str\n                 else:\n                     result[k] = result[k] or 0\n                     result[k] += v if v else 0\n+            else:\n+                result[k] = dict(v) if isinstance(v, dict) else v",
        "comment_created_at": "2025-05-19T03:17:36+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "probably use the following code to reduce nesting:\r\n\r\n```\r\n        result = dict(usage_entry2)\r\n        for k, v in usage_entry1.items():\r\n            current_v = result.get(k)\r\n            if isinstance(v, dict):\r\n                result[k] = self._merge_usage_entries(current_v, v)\r\n            else:\r\n                result[k] = current_v or 0\r\n                result[k] += v if v else 0\r\n        return result\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2095092096",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8238,
        "pr_file": "dspy/utils/usage_tracker.py",
        "discussion_id": "2094769450",
        "commented_code": "@@ -43,6 +43,8 @@ def _merge_usage_entries(self, usage_entry1, usage_entry2) -> dict[str, dict[str\n                 else:\n                     result[k] = result[k] or 0\n                     result[k] += v if v else 0\n+            else:\n+                result[k] = dict(v) if isinstance(v, dict) else v",
        "comment_created_at": "2025-05-19T08:00:14+00:00",
        "comment_author": "estsauver",
        "comment_body": "Nice edit",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912468298",
    "pr_number": 2023,
    "pr_file": "dspy/clients/lm.py",
    "created_at": "2025-01-12T14:47:32+00:00",
    "commented_code": "}\n                 for c in response[\"choices\"]\n             ]\n+        elif tools:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "1912468298",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2023,
        "pr_file": "dspy/clients/lm.py",
        "discussion_id": "1912468298",
        "commented_code": "@@ -110,6 +116,8 @@ def __call__(self, prompt=None, messages=None, **kwargs):\n                 }\n                 for c in response[\"choices\"]\n             ]\n+        elif tools:",
        "comment_created_at": "2025-01-12T14:47:32+00:00",
        "comment_author": "okhat",
        "comment_body": "I think the if statements here need to be refactored. Right now, you can only ask for logprobs _or_ tools, but not both.\r\n\r\nI think we should move the if statement about logprobs and tools etc inside the loop over `choices`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1927740909",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2023,
        "pr_file": "dspy/clients/lm.py",
        "discussion_id": "1912468298",
        "commented_code": "@@ -110,6 +116,8 @@ def __call__(self, prompt=None, messages=None, **kwargs):\n                 }\n                 for c in response[\"choices\"]\n             ]\n+        elif tools:",
        "comment_created_at": "2025-01-23T22:01:58+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "good catch, fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1989002076",
    "pr_number": 2040,
    "pr_file": "dspy/adapters/chat_adapter.py",
    "created_at": "2025-03-11T11:12:09+00:00",
    "commented_code": "class ChatAdapter(Adapter):\n-  \n     def __init__(self, callbacks: Optional[list[BaseCallback]] = None):\n         super().__init__(callbacks)\n \n-    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]:\n+    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]],\n+                 inputs: dict[str, Any]) -> list[dict[str, Any]]:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "1989002076",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2040,
        "pr_file": "dspy/adapters/chat_adapter.py",
        "discussion_id": "1989002076",
        "commented_code": "@@ -39,11 +37,11 @@ class FieldInfoWithName(NamedTuple):\n \n \n class ChatAdapter(Adapter):\n-  \n     def __init__(self, callbacks: Optional[list[BaseCallback]] = None):\n         super().__init__(callbacks)\n \n-    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]:\n+    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]],\n+                 inputs: dict[str, Any]) -> list[dict[str, Any]]:",
        "comment_created_at": "2025-03-11T11:12:09+00:00",
        "comment_author": "zbambergerNLP",
        "comment_body": "nit: format as follows:\r\n\r\n```python\r\ndef __call__(\r\n  self, \r\n  lm: LM, \r\n  lm_kwargs: Dict[str, Any], \r\n  ...\r\n) -> List[Dict[str, Any]]\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1989941462",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 2040,
        "pr_file": "dspy/adapters/chat_adapter.py",
        "discussion_id": "1989002076",
        "commented_code": "@@ -39,11 +37,11 @@ class FieldInfoWithName(NamedTuple):\n \n \n class ChatAdapter(Adapter):\n-  \n     def __init__(self, callbacks: Optional[list[BaseCallback]] = None):\n         super().__init__(callbacks)\n \n-    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]], inputs: dict[str, Any]) -> list[dict[str, Any]]:\n+    def __call__(self, lm: LM, lm_kwargs: dict[str, Any], signature: Type[Signature], demos: list[dict[str, Any]],\n+                 inputs: dict[str, Any]) -> list[dict[str, Any]]:",
        "comment_created_at": "2025-03-11T18:48:30+00:00",
        "comment_author": "gilad12-coder",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]