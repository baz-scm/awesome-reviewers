[
  {
    "discussion_id": "2275547158",
    "pr_number": 8650,
    "pr_file": "tests/clients/test_lm.py",
    "created_at": "2025-08-14T05:47:00+00:00",
    "commented_code": "def test_reasoning_model_requirements():\n     # Should raise assertion error if temperature or max_tokens requirements not met\n-    with pytest.raises(AssertionError) as exc_info:\n+    with pytest.raises(ValueError) as error:",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2275547158",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8650,
        "pr_file": "tests/clients/test_lm.py",
        "discussion_id": "2275547158",
        "commented_code": "@@ -219,13 +219,13 @@ def test_reasoning_model_token_parameter():\n \n def test_reasoning_model_requirements():\n     # Should raise assertion error if temperature or max_tokens requirements not met\n-    with pytest.raises(AssertionError) as exc_info:\n+    with pytest.raises(ValueError) as error:",
        "comment_created_at": "2025-08-14T05:47:00+00:00",
        "comment_author": "TomeHirata",
        "comment_body": "Let's use pytest matcher rather than manually using `assert`\r\nhttps://docs.pytest.org/en/stable/how-to/assert.html#matching-exception-messages",
        "pr_file_module": null
      },
      {
        "comment_id": "2275758329",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8650,
        "pr_file": "tests/clients/test_lm.py",
        "discussion_id": "2275547158",
        "commented_code": "@@ -219,13 +219,13 @@ def test_reasoning_model_token_parameter():\n \n def test_reasoning_model_requirements():\n     # Should raise assertion error if temperature or max_tokens requirements not met\n-    with pytest.raises(AssertionError) as exc_info:\n+    with pytest.raises(ValueError) as error:",
        "comment_created_at": "2025-08-14T07:41:28+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2116354157",
    "pr_number": 8296,
    "pr_file": "tests/primitives/test_python_interpreter.py",
    "created_at": "2025-05-30T18:01:02+00:00",
    "commented_code": "code = f\"final_answer('The result is', {token})\"\n         result = interpreter(code)\n \n-        # They should matain the same order\n+        # They should maintain the same order\n         assert result == [\"The result is\", token], \"The returned results are differ, `final_answer` trick doesn't work\"\n+    \n+def test_enable_env_vars_flag():\n+    os.environ[\"FOO_TEST_ENV\"] = \"test_value\"\n+\n+    with PythonInterpreter(enable_env_vars=False) as interpreter:\n+        code = \"import os\nresult = os.getenv('FOO_TEST_ENV')\nresult\"\n+        result = interpreter.execute(code)\n+        assert result == \"\", \"Environment variables should be inaccessible without allow-env\"\n+\n+    with PythonInterpreter(enable_env_vars=True) as interpreter:\n+        code = \"import os\nresult = os.getenv('FOO_TEST_ENV')\nresult\"\n+        result = interpreter.execute(code)\n+        assert result == \"test_value\", \"Environment variables should be accessible with allow-env\"\n+\n+\n+def test_read_file_access_control():\n+    testfile_path = os.path.abspath(\"tests/primitives/test_temp_file.txt\")",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2116354157",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8296,
        "pr_file": "tests/primitives/test_python_interpreter.py",
        "discussion_id": "2116354157",
        "commented_code": "@@ -59,5 +58,101 @@ def test_final_answer_trick():\n         code = f\"final_answer('The result is', {token})\"\n         result = interpreter(code)\n \n-        # They should matain the same order\n+        # They should maintain the same order\n         assert result == [\"The result is\", token], \"The returned results are differ, `final_answer` trick doesn't work\"\n+    \n+def test_enable_env_vars_flag():\n+    os.environ[\"FOO_TEST_ENV\"] = \"test_value\"\n+\n+    with PythonInterpreter(enable_env_vars=False) as interpreter:\n+        code = \"import os\\nresult = os.getenv('FOO_TEST_ENV')\\nresult\"\n+        result = interpreter.execute(code)\n+        assert result == \"\", \"Environment variables should be inaccessible without allow-env\"\n+\n+    with PythonInterpreter(enable_env_vars=True) as interpreter:\n+        code = \"import os\\nresult = os.getenv('FOO_TEST_ENV')\\nresult\"\n+        result = interpreter.execute(code)\n+        assert result == \"test_value\", \"Environment variables should be accessible with allow-env\"\n+\n+\n+def test_read_file_access_control():\n+    testfile_path = os.path.abspath(\"tests/primitives/test_temp_file.txt\")",
        "comment_created_at": "2025-05-30T18:01:02+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "nit: use `tmp_path` fixture so that it's automatically cleaned up. Examole: https://github.com/stanfordnlp/dspy/blob/9287208b94bcf4a0295e9f8b3d9a1c5f18418029/tests/utils/test_saving.py#L38",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2092298589",
    "pr_number": 8217,
    "pr_file": "tests/adapters/test_chat_adapter.py",
    "created_at": "2025-05-16T04:28:20+00:00",
    "commented_code": "lm = dspy.utils.DummyLM([{\"answer\": \"Paris\"}])\n     result = await adapter.acall(lm, {}, signature, [], {\"question\": \"What is the capital of France?\"})\n     assert result == [{\"answer\": \"Paris\"}]\n+\n+\n+def test_chat_adapter_formats_image():\n+    # Test basic image formatting\n+    image = dspy.Image(url=\"https://example.com/image.jpg\")\n+\n+    class MySignature(dspy.Signature):\n+        image: dspy.Image = dspy.InputField()\n+        text: str = dspy.OutputField()\n+\n+    adapter = dspy.ChatAdapter()\n+    messages = adapter.format(MySignature, [], {\"image\": image})\n+\n+    assert len(messages) == 2\n+    user_message_content = messages[1][\"content\"]\n+    assert user_message_content is not None\n+\n+    # The message should have 3 chunks of types: text, image_url, text\n+    assert len(user_message_content) == 3\n+    assert user_message_content[0][\"type\"] == \"text\"\n+    assert user_message_content[2][\"type\"] == \"text\"\n+\n+    # Assert that the image is formatted correctly\n+    expected_image_content = {\"type\": \"image_url\", \"image_url\": {\"url\": \"https://example.com/image.jpg\"}}\n+    assert expected_image_content in user_message_content\n+\n+    # Test formatting with few-shot examples",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2092298589",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8217,
        "pr_file": "tests/adapters/test_chat_adapter.py",
        "discussion_id": "2092298589",
        "commented_code": "@@ -94,3 +95,93 @@ async def test_chat_adapter_async_call():\n     lm = dspy.utils.DummyLM([{\"answer\": \"Paris\"}])\n     result = await adapter.acall(lm, {}, signature, [], {\"question\": \"What is the capital of France?\"})\n     assert result == [{\"answer\": \"Paris\"}]\n+\n+\n+def test_chat_adapter_formats_image():\n+    # Test basic image formatting\n+    image = dspy.Image(url=\"https://example.com/image.jpg\")\n+\n+    class MySignature(dspy.Signature):\n+        image: dspy.Image = dspy.InputField()\n+        text: str = dspy.OutputField()\n+\n+    adapter = dspy.ChatAdapter()\n+    messages = adapter.format(MySignature, [], {\"image\": image})\n+\n+    assert len(messages) == 2\n+    user_message_content = messages[1][\"content\"]\n+    assert user_message_content is not None\n+\n+    # The message should have 3 chunks of types: text, image_url, text\n+    assert len(user_message_content) == 3\n+    assert user_message_content[0][\"type\"] == \"text\"\n+    assert user_message_content[2][\"type\"] == \"text\"\n+\n+    # Assert that the image is formatted correctly\n+    expected_image_content = {\"type\": \"image_url\", \"image_url\": {\"url\": \"https://example.com/image.jpg\"}}\n+    assert expected_image_content in user_message_content\n+\n+    # Test formatting with few-shot examples",
        "comment_created_at": "2025-05-16T04:28:20+00:00",
        "comment_author": "TomeHirata",
        "comment_body": "nit: shall we parameterize or split the test for clear test cases?",
        "pr_file_module": null
      },
      {
        "comment_id": "2092309349",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8217,
        "pr_file": "tests/adapters/test_chat_adapter.py",
        "discussion_id": "2092298589",
        "commented_code": "@@ -94,3 +95,93 @@ async def test_chat_adapter_async_call():\n     lm = dspy.utils.DummyLM([{\"answer\": \"Paris\"}])\n     result = await adapter.acall(lm, {}, signature, [], {\"question\": \"What is the capital of France?\"})\n     assert result == [{\"answer\": \"Paris\"}]\n+\n+\n+def test_chat_adapter_formats_image():\n+    # Test basic image formatting\n+    image = dspy.Image(url=\"https://example.com/image.jpg\")\n+\n+    class MySignature(dspy.Signature):\n+        image: dspy.Image = dspy.InputField()\n+        text: str = dspy.OutputField()\n+\n+    adapter = dspy.ChatAdapter()\n+    messages = adapter.format(MySignature, [], {\"image\": image})\n+\n+    assert len(messages) == 2\n+    user_message_content = messages[1][\"content\"]\n+    assert user_message_content is not None\n+\n+    # The message should have 3 chunks of types: text, image_url, text\n+    assert len(user_message_content) == 3\n+    assert user_message_content[0][\"type\"] == \"text\"\n+    assert user_message_content[2][\"type\"] == \"text\"\n+\n+    # Assert that the image is formatted correctly\n+    expected_image_content = {\"type\": \"image_url\", \"image_url\": {\"url\": \"https://example.com/image.jpg\"}}\n+    assert expected_image_content in user_message_content\n+\n+    # Test formatting with few-shot examples",
        "comment_created_at": "2025-05-16T04:42:37+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "Splitting sounds good to me",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2067157428",
    "pr_number": 8129,
    "pr_file": "tests/retrievers/test_embeddings.py",
    "created_at": "2025-04-29T18:56:35+00:00",
    "commented_code": "+import numpy as np\n+import pytest\n+\n+from dspy.retrievers.embeddings import Embeddings\n+\n+@pytest.fixture\n+def dummy_corpus():\n+    return [\n+        \"The cat sat on the mat.\",\n+        \"The dog barked at the mailman.\",\n+        \"The sun rises in the east.\",\n+        \"The quick brown fox jumps over the lazy dog.\",\n+        \"An apple a day keeps the doctor away.\"\n+    ]\n+\n+@pytest.fixture\n+def dummy_embedder():",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "2067157428",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 8129,
        "pr_file": "tests/retrievers/test_embeddings.py",
        "discussion_id": "2067157428",
        "commented_code": "@@ -0,0 +1,85 @@\n+import numpy as np\n+import pytest\n+\n+from dspy.retrievers.embeddings import Embeddings\n+\n+@pytest.fixture\n+def dummy_corpus():\n+    return [\n+        \"The cat sat on the mat.\",\n+        \"The dog barked at the mailman.\",\n+        \"The sun rises in the east.\",\n+        \"The quick brown fox jumps over the lazy dog.\",\n+        \"An apple a day keeps the doctor away.\"\n+    ]\n+\n+@pytest.fixture\n+def dummy_embedder():",
        "comment_created_at": "2025-04-29T18:56:35+00:00",
        "comment_author": "chenmoneygithub",
        "comment_body": "nit: we don't need this to be a fixture, we can just define the `dummy_embedder()` as a helper function.\r\n\r\nAnd we can simulate the embedding model's functionality of keeping similar data close and different data far away by something like:\r\n\r\n```\r\nif \"cat\" in text:\r\n    embeddings.append(np.array([1, 0, 0]))\r\nelif \"dog\" in text:\r\n    embeddings.append(np.array([0, 1, 0]))\r\n```\r\n\r\nIn this way we can also test that the FAISS retrieving works as expected. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1597804273",
    "pr_number": 919,
    "pr_file": "build_utils/tests/intro.py",
    "created_at": "2024-05-13T02:33:10+00:00",
    "commented_code": "+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
    "repo_full_name": "stanfordnlp/dspy",
    "discussion_comments": [
      {
        "comment_id": "1597804273",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 919,
        "pr_file": "build_utils/tests/intro.py",
        "discussion_id": "1597804273",
        "commented_code": "@@ -0,0 +1,223 @@\n+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
        "comment_created_at": "2024-05-13T02:33:10+00:00",
        "comment_author": "ammirsm",
        "comment_body": "I would say let's move this to a pytest and run that test case instead of running the actual intro.py file. what do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1605910046",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 919,
        "pr_file": "build_utils/tests/intro.py",
        "discussion_id": "1597804273",
        "commented_code": "@@ -0,0 +1,223 @@\n+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
        "comment_created_at": "2024-05-18T23:13:22+00:00",
        "comment_author": "hmoazam",
        "comment_body": "Yes that's a good call, I'll do that. Shall I put it under tests/examples?",
        "pr_file_module": null
      },
      {
        "comment_id": "1607181092",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 919,
        "pr_file": "build_utils/tests/intro.py",
        "discussion_id": "1597804273",
        "commented_code": "@@ -0,0 +1,223 @@\n+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
        "comment_created_at": "2024-05-20T19:26:10+00:00",
        "comment_author": "ammirsm",
        "comment_body": "I would say that would be a great place to put or we can move all of these tests to a new folder name `tests/integration` and keep them there, this way we can distinct it later to run them or not to run them where ever we want. \r\n\r\nI think it is good to separate these integration and maybe later we want to run them in their own CI step.",
        "pr_file_module": null
      },
      {
        "comment_id": "1607427542",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 919,
        "pr_file": "build_utils/tests/intro.py",
        "discussion_id": "1597804273",
        "commented_code": "@@ -0,0 +1,223 @@\n+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
        "comment_created_at": "2024-05-21T00:20:16+00:00",
        "comment_author": "ammirsm",
        "comment_body": "I can help with setting up this one for you, it will be a little bit tricky, I will push it in another branch and add it to CI for you in couple days.",
        "pr_file_module": null
      },
      {
        "comment_id": "1607467247",
        "repo_full_name": "stanfordnlp/dspy",
        "pr_number": 919,
        "pr_file": "build_utils/tests/intro.py",
        "discussion_id": "1597804273",
        "commented_code": "@@ -0,0 +1,223 @@\n+###\n+# Copy of intro notebook for the sake of testing new versions of the package.",
        "comment_created_at": "2024-05-21T01:23:34+00:00",
        "comment_author": "ammirsm",
        "comment_body": "https://github.com/stanfordnlp/dspy/pull/1048\r\n\r\nI added my initial commits here.",
        "pr_file_module": null
      }
    ]
  }
]