[
  {
    "discussion_id": "2253606622",
    "pr_number": 18499,
    "pr_file": "scripts/merge_vcpkg_deps.py",
    "created_at": "2025-08-05T08:50:40+00:00",
    "commented_code": "# TODO: deduplication is disabled for now, just let vcpkg handle duplicates in deps\n         # dedup_set.add(dep)\n \n+opensslVersion = os.getenv(\"OPEN_SSL_VERSION_OVERRIDE\", \"3.0.8\")",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2253606622",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18499,
        "pr_file": "scripts/merge_vcpkg_deps.py",
        "discussion_id": "2253606622",
        "commented_code": "@@ -61,11 +62,12 @@ def prefix_overlay_port_or_triplet(overlay_port_or_triplet):\n         # TODO: deduplication is disabled for now, just let vcpkg handle duplicates in deps\n         # dedup_set.add(dep)\n \n+opensslVersion = os.getenv(\"OPEN_SSL_VERSION_OVERRIDE\", \"3.0.8\")",
        "comment_created_at": "2025-08-05T08:50:40+00:00",
        "comment_author": "samansmink",
        "comment_body": "nit: `OPENSSL_VERSION_OVERRIDE`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019101168",
    "pr_number": 16833,
    "pr_file": "scripts/run_tests_one_by_one.py",
    "created_at": "2025-03-28T17:53:49+00:00",
    "commented_code": "assertions = args.no_assertions\n time_execution = args.time_execution\n timeout = args.timeout\n+summarize_failures = args.summarize_failures",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2019101168",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "scripts/run_tests_one_by_one.py",
        "discussion_id": "2019101168",
        "commented_code": "@@ -61,6 +66,7 @@ def valid_timeout(value):\n assertions = args.no_assertions\n time_execution = args.time_execution\n timeout = args.timeout\n+summarize_failures = args.summarize_failures",
        "comment_created_at": "2025-03-28T17:53:49+00:00",
        "comment_author": "carlopi",
        "comment_body": "Should this be ON also if ENV variable?\r\n\r\nEither to be handled here or in the summary later (otherwise if ENV is set, python will skip printing)",
        "pr_file_module": null
      },
      {
        "comment_id": "2021024955",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "scripts/run_tests_one_by_one.py",
        "discussion_id": "2019101168",
        "commented_code": "@@ -61,6 +66,7 @@ def valid_timeout(value):\n assertions = args.no_assertions\n time_execution = args.time_execution\n timeout = args.timeout\n+summarize_failures = args.summarize_failures",
        "comment_created_at": "2025-03-31T13:14:12+00:00",
        "comment_author": "hmeriann",
        "comment_body": "You're right! Thank you for pointing on this. I think the solution is ~~to pass the ENV variable from the Python script~~ to just print the summary if there is anything in `error_container` dictionary",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108878457",
    "pr_number": 16833,
    "pr_file": "scripts/run_tests_one_by_one.py",
    "created_at": "2025-05-27T10:57:55+00:00",
    "commented_code": "background_print_thread.start()\n \n     unittest_stdout = sys.stdout if list_of_tests else subprocess.PIPE\n-    unittest_stderr = sys.stderr if list_of_tests else subprocess.PIPE\n+    unittest_stderr = subprocess.PIPE\n \n     start = time.time()\n     try:\n         test_cmd = [unittest_program] + test\n         if args.valgrind:\n             test_cmd = ['valgrind'] + test_cmd\n-        res = subprocess.run(test_cmd, stdout=unittest_stdout, stderr=unittest_stderr, timeout=timeout)\n+        # should unset SUMMARIZE_FAILURES to avoid producing exceeding failure logs\n+        if list_of_tests or no_exit or tests_per_invocation:",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2108878457",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "scripts/run_tests_one_by_one.py",
        "discussion_id": "2108878457",
        "commented_code": "@@ -139,14 +166,19 @@ def launch_test(test, list_of_tests=False):\n     background_print_thread.start()\n \n     unittest_stdout = sys.stdout if list_of_tests else subprocess.PIPE\n-    unittest_stderr = sys.stderr if list_of_tests else subprocess.PIPE\n+    unittest_stderr = subprocess.PIPE\n \n     start = time.time()\n     try:\n         test_cmd = [unittest_program] + test\n         if args.valgrind:\n             test_cmd = ['valgrind'] + test_cmd\n-        res = subprocess.run(test_cmd, stdout=unittest_stdout, stderr=unittest_stderr, timeout=timeout)\n+        # should unset SUMMARIZE_FAILURES to avoid producing exceeding failure logs\n+        if list_of_tests or no_exit or tests_per_invocation:",
        "comment_created_at": "2025-05-27T10:57:55+00:00",
        "comment_author": "Tmonster",
        "comment_body": "try the following lines instead\r\n```py\r\n        if args.valgrind:\r\n            test_cmd = ['valgrind'] + test_cmd\r\n        # should unset SUMMARIZE_FAILURES to avoid producing exceeding failure logs\r\n        env = os.environ.copy()\r\n        if list_of_tests or no_exit or tests_per_invocation:\r\n            env['SUMMARIZE_FAILURES'] = '0'\r\n            env['NO_DUPLICATING_HEADERS'] = '1'\r\n        else:\r\n            env['SUMMARIZE_FAILURES'] = '0'\r\n        res = subprocess.run(test_cmd, stdout=unittest_stdout, stderr=unittest_stderr, timeout=timeout, env=env)\r\n```\r\n\r\nThe default behavior for subprocess.run is to pass the current environment to the subprocesses unless env is passed. You are passing a new environment on line 181, which means the current environment is no longer passed, so you loose all of the thread suppression environment variables. If you copy the whole environment, it should work",
        "pr_file_module": null
      }
    ]
  }
]