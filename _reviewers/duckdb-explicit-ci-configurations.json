[
  {
    "discussion_id": "2166135611",
    "pr_number": 18042,
    "pr_file": ".github/workflows/LinuxRelease.yml",
    "created_at": "2025-06-25T08:33:47+00:00",
    "commented_code": "python3 scripts/get_test_list.py --file-contains 'require httpfs' --list '\"*\"' > test.list\n         python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '-f test.list'\n-        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '[secret]'\n\\ No newline at end of file\n+        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '[secret]'\n+\n+ linux-configs:\n+    name: Linux test configs\n+    runs-on: ubuntu-24.04\n+    needs: linux-extensions-64\n+    env:\n+      CORE_EXTENSIONS: \"json;parquet;tpch;tpcds\"\n+      GEN: ninja\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+      with:\n+        fetch-depth: 0\n+\n+    - uses: actions/setup-python@v5\n+      with:\n+        python-version: '3.12'\n+\n+    - name: Install Ninja\n+      shell: bash\n+      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build\n+\n+    - name: Setup Ccache\n+      uses: hendrikmuhs/ccache-action@main\n+      with:\n+        key: ${{ github.job }}\n+        save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}\n+\n+    - name: Build\n+      shell: bash\n+      run: make\n+\n+    - name: Test available configurations\n+      shell: bash\n+      run: |\n+        shopt -s nullglob\n+        for file in test/configs/*; do",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2166135611",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18042,
        "pr_file": ".github/workflows/LinuxRelease.yml",
        "discussion_id": "2166135611",
        "commented_code": "@@ -437,4 +437,44 @@ jobs:\n \n         python3 scripts/get_test_list.py --file-contains 'require httpfs' --list '\"*\"' > test.list\n         python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '-f test.list'\n-        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '[secret]'\n\\ No newline at end of file\n+        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '[secret]'\n+\n+ linux-configs:\n+    name: Linux test configs\n+    runs-on: ubuntu-24.04\n+    needs: linux-extensions-64\n+    env:\n+      CORE_EXTENSIONS: \"json;parquet;tpch;tpcds\"\n+      GEN: ninja\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+      with:\n+        fetch-depth: 0\n+\n+    - uses: actions/setup-python@v5\n+      with:\n+        python-version: '3.12'\n+\n+    - name: Install Ninja\n+      shell: bash\n+      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build\n+\n+    - name: Setup Ccache\n+      uses: hendrikmuhs/ccache-action@main\n+      with:\n+        key: ${{ github.job }}\n+        save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}\n+\n+    - name: Build\n+      shell: bash\n+      run: make\n+\n+    - name: Test available configurations\n+      shell: bash\n+      run: |\n+        shopt -s nullglob\n+        for file in test/configs/*; do",
        "comment_created_at": "2025-06-25T08:33:47+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Instead of doing a glob over all configs - which will be hard to understand for people trying to work with CI failures - it would be much nicer to have individual config files that have logically named components in the CI (e.g. \"Encrypted Database Test\" -> run encrypted_db.config).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2210214100",
    "pr_number": 18269,
    "pr_file": ".github/workflows/Python.yml",
    "created_at": "2025-07-16T12:18:45+00:00",
    "commented_code": "linux-python3:\n     name: Python 3 Linux\n-    runs-on: ubuntu-22.04\n+    runs-on: ${{ matrix.platform.os }}\n     needs: linux-python3-10\n     strategy:\n       fail-fast: false\n       matrix:\n-        duckdb_arch: [linux_amd64]\n-        arch: [x86_64, aarch64]\n-        python_build: [ cp39-*, cp310-*, cp311-*, cp312-*, cp313-*]\n-        manylinux: [manylinux_2_28]\n+        platform:\n+          - { os: ubuntu-24.04,     arch: x86_64 }\n+          - { os: ubuntu-24.04-arm, arch: aarch64 }\n+        python: [ cp39, cp310, cp311, cp312, cp313]\n         isRelease:\n           - ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || inputs.run_all == 'true' }}\n         exclude:\n           # Speed things up a bit for non-releases\n-          - isRelease: false\n-            python_build: 'cp310-*'\n-          - isRelease: false\n-            python_build: 'cp311-*'\n-          - isRelease: false\n-            python_build: 'cp312-*'\n-          - isRelease: false\n-            arch: aarch64\n+          - { isRelease: false, python: cp310 }",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2210214100",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18269,
        "pr_file": ".github/workflows/Python.yml",
        "discussion_id": "2210214100",
        "commented_code": "@@ -129,35 +129,29 @@ jobs:\n \n   linux-python3:\n     name: Python 3 Linux\n-    runs-on: ubuntu-22.04\n+    runs-on: ${{ matrix.platform.os }}\n     needs: linux-python3-10\n     strategy:\n       fail-fast: false\n       matrix:\n-        duckdb_arch: [linux_amd64]\n-        arch: [x86_64, aarch64]\n-        python_build: [ cp39-*, cp310-*, cp311-*, cp312-*, cp313-*]\n-        manylinux: [manylinux_2_28]\n+        platform:\n+          - { os: ubuntu-24.04,     arch: x86_64 }\n+          - { os: ubuntu-24.04-arm, arch: aarch64 }\n+        python: [ cp39, cp310, cp311, cp312, cp313]\n         isRelease:\n           - ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || inputs.run_all == 'true' }}\n         exclude:\n           # Speed things up a bit for non-releases\n-          - isRelease: false\n-            python_build: 'cp310-*'\n-          - isRelease: false\n-            python_build: 'cp311-*'\n-          - isRelease: false\n-            python_build: 'cp312-*'\n-          - isRelease: false\n-            arch: aarch64\n+          - { isRelease: false, python: cp310 }",
        "comment_created_at": "2025-07-16T12:18:45+00:00",
        "comment_author": "hmeriann",
        "comment_body": "May I ask a question, why do we switch from versions with sub-tag like `cp310-*` to versions without sub-tag `cp310`? It's just for information to me, otherwise I think the PR only makes thing better for python client.",
        "pr_file_module": null
      },
      {
        "comment_id": "2210271035",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18269,
        "pr_file": ".github/workflows/Python.yml",
        "discussion_id": "2210214100",
        "commented_code": "@@ -129,35 +129,29 @@ jobs:\n \n   linux-python3:\n     name: Python 3 Linux\n-    runs-on: ubuntu-22.04\n+    runs-on: ${{ matrix.platform.os }}\n     needs: linux-python3-10\n     strategy:\n       fail-fast: false\n       matrix:\n-        duckdb_arch: [linux_amd64]\n-        arch: [x86_64, aarch64]\n-        python_build: [ cp39-*, cp310-*, cp311-*, cp312-*, cp313-*]\n-        manylinux: [manylinux_2_28]\n+        platform:\n+          - { os: ubuntu-24.04,     arch: x86_64 }\n+          - { os: ubuntu-24.04-arm, arch: aarch64 }\n+        python: [ cp39, cp310, cp311, cp312, cp313]\n         isRelease:\n           - ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || inputs.run_all == 'true' }}\n         exclude:\n           # Speed things up a bit for non-releases\n-          - isRelease: false\n-            python_build: 'cp310-*'\n-          - isRelease: false\n-            python_build: 'cp311-*'\n-          - isRelease: false\n-            python_build: 'cp312-*'\n-          - isRelease: false\n-            arch: aarch64\n+          - { isRelease: false, python: cp310 }",
        "comment_created_at": "2025-07-16T12:38:23+00:00",
        "comment_author": "evertlammerts",
        "comment_body": "Well, the result will be the same, but now we're explicit about what we want to build.\r\n\r\nThe value here is used to populate `CIBW_BUILD` and technically, if we set e.g. `CIBW_BUILD=cp9-*`, this tells cibuildwheel to build for Python 3.9 on all platforms that it knows _and can_. That includes manylinux, mussllinux, win, osx, etc on all archs it knows for these systems. The reason it only built for manylinux x86_64 and aarch64 was that 1. the runner is Ubuntu and on Ubuntu it can only build for Linux and 2. `CIBW_SKIP` was set to exclude musllinux. \r\n\r\nSo now we just set `CIBW_BUILD` to exactly that what we want to build, namely `${{ matrix.python }}-manylinux_${{ matrix.platform.arch }}`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2210309053",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18269,
        "pr_file": ".github/workflows/Python.yml",
        "discussion_id": "2210214100",
        "commented_code": "@@ -129,35 +129,29 @@ jobs:\n \n   linux-python3:\n     name: Python 3 Linux\n-    runs-on: ubuntu-22.04\n+    runs-on: ${{ matrix.platform.os }}\n     needs: linux-python3-10\n     strategy:\n       fail-fast: false\n       matrix:\n-        duckdb_arch: [linux_amd64]\n-        arch: [x86_64, aarch64]\n-        python_build: [ cp39-*, cp310-*, cp311-*, cp312-*, cp313-*]\n-        manylinux: [manylinux_2_28]\n+        platform:\n+          - { os: ubuntu-24.04,     arch: x86_64 }\n+          - { os: ubuntu-24.04-arm, arch: aarch64 }\n+        python: [ cp39, cp310, cp311, cp312, cp313]\n         isRelease:\n           - ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || inputs.run_all == 'true' }}\n         exclude:\n           # Speed things up a bit for non-releases\n-          - isRelease: false\n-            python_build: 'cp310-*'\n-          - isRelease: false\n-            python_build: 'cp311-*'\n-          - isRelease: false\n-            python_build: 'cp312-*'\n-          - isRelease: false\n-            arch: aarch64\n+          - { isRelease: false, python: cp310 }",
        "comment_created_at": "2025-07-16T12:49:35+00:00",
        "comment_author": "hmeriann",
        "comment_body": "Thanks for explaining it!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172079131",
    "pr_number": 18016,
    "pr_file": ".github/workflows/CodeQuality.yml",
    "created_at": "2025-06-27T13:43:07+00:00",
    "commented_code": "GH_TOKEN: ${{ secrets.GH_TOKEN }}\n \n jobs:\n+  check-draft:\n+    name: Don't trigger further jobs to run on draft PR\n+    runs-on: ubuntu-24.04\n+    outputs:\n+      is_draft: ${{ steps.check-draft.outputs.is_draft }}\n+    steps:\n+    - id: check-draft\n+      run: |\n+        echo \"is_draft=${{ github.event.pull_request.draft }}\" >> $GITHUB_OUTPUT\n+",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2172079131",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18016,
        "pr_file": ".github/workflows/CodeQuality.yml",
        "discussion_id": "2172079131",
        "commented_code": "@@ -39,10 +39,21 @@ env:\n   GH_TOKEN: ${{ secrets.GH_TOKEN }}\n \n jobs:\n+  check-draft:\n+    name: Don't trigger further jobs to run on draft PR\n+    runs-on: ubuntu-24.04\n+    outputs:\n+      is_draft: ${{ steps.check-draft.outputs.is_draft }}\n+    steps:\n+    - id: check-draft\n+      run: |\n+        echo \"is_draft=${{ github.event.pull_request.draft }}\" >> $GITHUB_OUTPUT\n+",
        "comment_created_at": "2025-06-27T13:43:07+00:00",
        "comment_author": "carlopi",
        "comment_body": "Question: could this be somehow made so that the other steps only have a `check-draft` ?\r\n\r\nI think it should be possible (but would need to be tested), using your previous idea, something like:\r\n```\r\n  check-draft:\r\n     name: ....\r\n     if: ${{ github.event.pull_request.draft != true }}\r\n     runs-on: ubuntu-24.04\r\n     steps:    ## are those even needed\r\n     - id: some_id\r\n        run: echo \"This is not a draft\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2172081696",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18016,
        "pr_file": ".github/workflows/CodeQuality.yml",
        "discussion_id": "2172079131",
        "commented_code": "@@ -39,10 +39,21 @@ env:\n   GH_TOKEN: ${{ secrets.GH_TOKEN }}\n \n jobs:\n+  check-draft:\n+    name: Don't trigger further jobs to run on draft PR\n+    runs-on: ubuntu-24.04\n+    outputs:\n+      is_draft: ${{ steps.check-draft.outputs.is_draft }}\n+    steps:\n+    - id: check-draft\n+      run: |\n+        echo \"is_draft=${{ github.event.pull_request.draft }}\" >> $GITHUB_OUTPUT\n+",
        "comment_created_at": "2025-06-27T13:44:31+00:00",
        "comment_author": "carlopi",
        "comment_body": "Then the rest could only have: ` needs: check-draft`, I think, that should be less work / less maintenance.\r\n\r\nAnd maybe instead of `check-draft` it could be `preliminary-checks` or something equivalent, so that code might be changed in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "2172185612",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18016,
        "pr_file": ".github/workflows/CodeQuality.yml",
        "discussion_id": "2172079131",
        "commented_code": "@@ -39,10 +39,21 @@ env:\n   GH_TOKEN: ${{ secrets.GH_TOKEN }}\n \n jobs:\n+  check-draft:\n+    name: Don't trigger further jobs to run on draft PR\n+    runs-on: ubuntu-24.04\n+    outputs:\n+      is_draft: ${{ steps.check-draft.outputs.is_draft }}\n+    steps:\n+    - id: check-draft\n+      run: |\n+        echo \"is_draft=${{ github.event.pull_request.draft }}\" >> $GITHUB_OUTPUT\n+",
        "comment_created_at": "2025-06-27T14:35:51+00:00",
        "comment_author": "hmeriann",
        "comment_body": "Actually yes, thank you for the suggestion!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2161552039",
    "pr_number": 18019,
    "pr_file": ".github/workflows/LinuxRelease.yml",
    "created_at": "2025-06-23T12:52:43+00:00",
    "commented_code": "AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}\n         AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}\n       run: |\n+        python3 scripts/amalgamation.py\n         zip -j duckdb_cli-linux-${{ matrix.config.arch }}.zip build/release/duckdb\n         gzip -9 -k -n -c build/release/duckdb > duckdb_cli-linux-${{ matrix.config.arch }}.gz\n         zip -j libduckdb-linux-${{ matrix.config.arch }}.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2161552039",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18019,
        "pr_file": ".github/workflows/LinuxRelease.yml",
        "discussion_id": "2161552039",
        "commented_code": "@@ -109,10 +109,12 @@ jobs:\n         AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}\n         AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}\n       run: |\n+        python3 scripts/amalgamation.py\n         zip -j duckdb_cli-linux-${{ matrix.config.arch }}.zip build/release/duckdb\n         gzip -9 -k -n -c build/release/duckdb > duckdb_cli-linux-${{ matrix.config.arch }}.gz\n         zip -j libduckdb-linux-${{ matrix.config.arch }}.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h",
        "comment_created_at": "2025-06-23T12:52:43+00:00",
        "comment_author": "mlafeldt",
        "comment_body": "This should really fail right now since `src/amalgamation/duckdb.hpp` won't exist without calling the amalgamation script. \ud83e\udd14",
        "pr_file_module": null
      },
      {
        "comment_id": "2163639203",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18019,
        "pr_file": ".github/workflows/LinuxRelease.yml",
        "discussion_id": "2161552039",
        "commented_code": "@@ -109,10 +109,12 @@ jobs:\n         AWS_ACCESS_KEY_ID: ${{ secrets.S3_DUCKDB_STAGING_ID }}\n         AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DUCKDB_STAGING_KEY }}\n       run: |\n+        python3 scripts/amalgamation.py\n         zip -j duckdb_cli-linux-${{ matrix.config.arch }}.zip build/release/duckdb\n         gzip -9 -k -n -c build/release/duckdb > duckdb_cli-linux-${{ matrix.config.arch }}.gz\n         zip -j libduckdb-linux-${{ matrix.config.arch }}.zip build/release/src/libduckdb*.* src/amalgamation/duckdb.hpp src/include/duckdb.h",
        "comment_created_at": "2025-06-24T10:56:50+00:00",
        "comment_author": "mlafeldt",
        "comment_body": "I learned that zip treats missing files as a warning - unless `-MM` is used. \ud83d\ude48",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143111804",
    "pr_number": 17906,
    "pr_file": ".github/workflows/CrossVersion.yml",
    "created_at": "2025-06-12T15:50:24+00:00",
    "commented_code": "runs-on: macos-14\n     strategy:\n       matrix:\n-        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'main' ]\n+        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'v1.3-ossivalis', 'main' ]",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2143111804",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17906,
        "pr_file": ".github/workflows/CrossVersion.yml",
        "discussion_id": "2143111804",
        "commented_code": "@@ -28,7 +32,8 @@ jobs:\n     runs-on: macos-14\n     strategy:\n       matrix:\n-        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'main' ]\n+        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'v1.3-ossivalis', 'main' ]",
        "comment_created_at": "2025-06-12T15:50:24+00:00",
        "comment_author": "carlopi",
        "comment_body": "I would keep only the latest patch release for a given minor, + `v1.3-ossivalis` + `main`.\r\nSo something like:\r\n```\r\n'v1.0.0', 'v1.1.3', 'v1.2.2', 'v1.3-ossivalis', 'main'\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2143112953",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17906,
        "pr_file": ".github/workflows/CrossVersion.yml",
        "discussion_id": "2143111804",
        "commented_code": "@@ -28,7 +32,8 @@ jobs:\n     runs-on: macos-14\n     strategy:\n       matrix:\n-        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'main' ]\n+        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'v1.3-ossivalis', 'main' ]",
        "comment_created_at": "2025-06-12T15:51:00+00:00",
        "comment_author": "carlopi",
        "comment_body": "(and same elsewhere)",
        "pr_file_module": null
      },
      {
        "comment_id": "2143137490",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17906,
        "pr_file": ".github/workflows/CrossVersion.yml",
        "discussion_id": "2143111804",
        "commented_code": "@@ -28,7 +32,8 @@ jobs:\n     runs-on: macos-14\n     strategy:\n       matrix:\n-        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'main' ]\n+        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'v1.3-ossivalis', 'main' ]",
        "comment_created_at": "2025-06-12T16:03:36+00:00",
        "comment_author": "hmeriann",
        "comment_body": "Thanks!",
        "pr_file_module": null
      },
      {
        "comment_id": "2143141134",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17906,
        "pr_file": ".github/workflows/CrossVersion.yml",
        "discussion_id": "2143111804",
        "commented_code": "@@ -28,7 +32,8 @@ jobs:\n     runs-on: macos-14\n     strategy:\n       matrix:\n-        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'main' ]\n+        version: [ 'v1.0.0', 'v1.1.3', 'v1.2.1', 'v1.2-histrionicus', 'v1.3-ossivalis', 'main' ]",
        "comment_created_at": "2025-06-12T16:05:37+00:00",
        "comment_author": "carlopi",
        "comment_body": "Nit, given you are touching this, could it be 1.2.2?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2005277764",
    "pr_number": 16747,
    "pr_file": ".github/workflows/InvokeCI.yml",
    "created_at": "2025-03-20T10:30:31+00:00",
    "commented_code": "override_git_describe: ${{ inputs.override_git_describe }}\n       git_ref: ${{ inputs.git_ref }}\n       skip_tests: ${{ inputs.skip_tests }}\n+\n+  notify-odbc-main:\n+    uses: ./.github/workflows/NotifyExternalRepositories.yml\n+    secrets: inherit\n+    if: ${{ inputs.git_ref == '' }}",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2005277764",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16747,
        "pr_file": ".github/workflows/InvokeCI.yml",
        "discussion_id": "2005277764",
        "commented_code": "@@ -86,3 +86,19 @@ jobs:\n       override_git_describe: ${{ inputs.override_git_describe }}\n       git_ref: ${{ inputs.git_ref }}\n       skip_tests: ${{ inputs.skip_tests }}\n+\n+  notify-odbc-main:\n+    uses: ./.github/workflows/NotifyExternalRepositories.yml\n+    secrets: inherit\n+    if: ${{ inputs.git_ref == '' }}",
        "comment_created_at": "2025-03-20T10:30:31+00:00",
        "comment_author": "carlopi",
        "comment_body": "I think this (and the next) need a section like:\r\n```yml\r\nneeds:\r\n   - linux\r\n   - osx\r\n   - windows\r\n   - etc\r\n```\r\nso that both those are run only AFTER the rest has completed.\r\nI think as dependency anything that builds extensions, that should be: OSX, Windows, LinuxRelease, Python and R.",
        "pr_file_module": null
      }
    ]
  }
]