[
  {
    "discussion_id": "2139804508",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-11T10:40:39+00:00",
    "commented_code": "}\n \n \tINPUT_TYPE val;\n+\tbool is_null;\n \n \tusing STRUCT_STATE = PrimitiveTypeState;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, PrimitiveType<INPUT_TYPE> &result) {\n+\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, bool is_null, PrimitiveType<INPUT_TYPE> &result) {\n \t\tauto &vdata = state.main_data;\n \t\tauto idx = vdata.sel->get_index(i);\n \t\tauto ptr = UnifiedVectorFormat::GetData<INPUT_TYPE>(vdata);\n \t\tresult.val = ptr[idx];\n+\t\tresult.is_null = is_null;\n \t\treturn true;\n \t}\n \n \tstatic void AssignResult(Vector &result, idx_t i, PrimitiveType<INPUT_TYPE> value) {\n+\t\tFlatVector::SetNull(result, i, value.is_null);",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2139804508",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2139804508",
        "commented_code": "@@ -31,18 +31,21 @@ struct PrimitiveType {\n \t}\n \n \tINPUT_TYPE val;\n+\tbool is_null;\n \n \tusing STRUCT_STATE = PrimitiveTypeState;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, PrimitiveType<INPUT_TYPE> &result) {\n+\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, bool is_null, PrimitiveType<INPUT_TYPE> &result) {\n \t\tauto &vdata = state.main_data;\n \t\tauto idx = vdata.sel->get_index(i);\n \t\tauto ptr = UnifiedVectorFormat::GetData<INPUT_TYPE>(vdata);\n \t\tresult.val = ptr[idx];\n+\t\tresult.is_null = is_null;\n \t\treturn true;\n \t}\n \n \tstatic void AssignResult(Vector &result, idx_t i, PrimitiveType<INPUT_TYPE> value) {\n+\t\tFlatVector::SetNull(result, i, value.is_null);",
        "comment_created_at": "2025-06-11T10:40:39+00:00",
        "comment_author": "Mytherin",
        "comment_body": "We only need to call `FlatVector::SetNull` when the value is null, so this could be:\r\n```cpp\r\nif (value.is_null) {\r\n    FlatVector::SetNull(result, i, true);\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2139812159",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-11T10:45:21+00:00",
    "commented_code": "continue;\n \t\t\t}\n \t\t\tA_TYPE input;\n-\t\t\tif (!A_TYPE::ConstructType(state, i, input)) {\n+\t\t\tif (!A_TYPE::ConstructType(state, i, false, input)) {",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2139812159",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2139812159",
        "commented_code": "@@ -259,7 +284,7 @@ struct GenericExecutor {\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tA_TYPE input;\n-\t\t\tif (!A_TYPE::ConstructType(state, i, input)) {\n+\t\t\tif (!A_TYPE::ConstructType(state, i, false, input)) {",
        "comment_created_at": "2025-06-11T10:45:21+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Maybe instead of having `ConstructType` return false if any child is `NULL`, we can have a method `ContainsNull()` on the type, so we could do this instead:\r\n\r\n```cpp\r\nA_TYPE input = A_TYPE::ConstructType(state, i);\r\nif (input.ContainsNull()) {\r\n     FlatVector::SetNull(result, i, true);\r\n     continue;\r\n}\r\n```\r\n\r\nThen we can also remove the validity check from a few lines up.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141765873",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-12T05:48:01+00:00",
    "commented_code": "struct StructTypeBinary {\n \tA_TYPE a_val;\n \tB_TYPE b_val;\n+\tbool a_is_null;",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2141765873",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2141765873",
        "commented_code": "@@ -93,28 +116,40 @@ template <class A_TYPE, class B_TYPE>\n struct StructTypeBinary {\n \tA_TYPE a_val;\n \tB_TYPE b_val;\n+\tbool a_is_null;",
        "comment_created_at": "2025-06-12T05:48:01+00:00",
        "comment_author": "Mytherin",
        "comment_body": "These fields are not necessary - `a_val` and `b_val` have their own `is_null` field (i.e. we should just use `a_val.is_null`)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141766429",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-12T05:48:34+00:00",
    "commented_code": "}\n \n \tINPUT_TYPE val;\n+\tbool is_null;",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2141766429",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2141766429",
        "commented_code": "@@ -31,18 +31,32 @@ struct PrimitiveType {\n \t}\n \n \tINPUT_TYPE val;\n+\tbool is_null;",
        "comment_created_at": "2025-06-12T05:48:34+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Can we have a `ExecutorBaseType` class that has this member that all types inherits from? Every `*Type` class needs this field",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141766945",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-12T05:49:03+00:00",
    "commented_code": "template <class A_TYPE>\n struct StructTypeUnary {\n \tA_TYPE a_val;\n+\tbool is_null;\n \n \tusing STRUCT_STATE = StructTypeState<1>;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, StructTypeUnary<A_TYPE> &result) {\n+\tbool ContainsNull() {\n+\t\treturn is_null;",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2141766945",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2141766945",
        "commented_code": "@@ -67,23 +81,32 @@ struct StructTypeState {\n template <class A_TYPE>\n struct StructTypeUnary {\n \tA_TYPE a_val;\n+\tbool is_null;\n \n \tusing STRUCT_STATE = StructTypeState<1>;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, StructTypeUnary<A_TYPE> &result) {\n+\tbool ContainsNull() {\n+\t\treturn is_null;",
        "comment_created_at": "2025-06-12T05:49:03+00:00",
        "comment_author": "Mytherin",
        "comment_body": "`ContainsNull` should return whether or not this field, or **any** child field is null, i.e. this should return `is_null || a_val.is_null` - same for all of the other elements",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141770638",
    "pr_number": 17874,
    "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
    "created_at": "2025-06-12T05:52:22+00:00",
    "commented_code": "struct StructTypeBinary {\n \tA_TYPE a_val;\n \tB_TYPE b_val;\n+\tbool a_is_null;\n+\tbool b_is_null;\n \n \tusing STRUCT_STATE = StructTypeState<2>;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, StructTypeBinary<A_TYPE, B_TYPE> &result) {\n+\tbool ContainsNull() {\n+\t\treturn a_is_null || b_is_null;",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2141770638",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17874,
        "pr_file": "src/include/duckdb/common/vector_operations/generic_executor.hpp",
        "discussion_id": "2141770638",
        "commented_code": "@@ -93,28 +116,40 @@ template <class A_TYPE, class B_TYPE>\n struct StructTypeBinary {\n \tA_TYPE a_val;\n \tB_TYPE b_val;\n+\tbool a_is_null;\n+\tbool b_is_null;\n \n \tusing STRUCT_STATE = StructTypeState<2>;\n \n-\tstatic bool ConstructType(STRUCT_STATE &state, idx_t i, StructTypeBinary<A_TYPE, B_TYPE> &result) {\n+\tbool ContainsNull() {\n+\t\treturn a_is_null || b_is_null;",
        "comment_created_at": "2025-06-12T05:52:22+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Note that nulls can be at different levels - i.e. the struct itself can be NULL, as well as the child elements. This should also check if the struct itself is `NULL` (so `is_null || a_val.is_null || b_val.is_null`)",
        "pr_file_module": null
      }
    ]
  }
]