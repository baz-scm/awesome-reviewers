[
  {
    "discussion_id": "2161075760",
    "pr_number": 17992,
    "pr_file": "src/include/duckdb/common/types/string_type.hpp",
    "created_at": "2025-06-23T08:53:45+00:00",
    "commented_code": ": string_t(value.c_str(), UnsafeNumericCast<uint32_t>(value.size())) {\n \t}\n \n+\t// Allocate using an arena allocator\n+\tstring_t(const char *data, const uint32_t len, ArenaAllocator &arena) {",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2161075760",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17992,
        "pr_file": "src/include/duckdb/common/types/string_type.hpp",
        "discussion_id": "2161075760",
        "commented_code": "@@ -70,6 +71,41 @@ struct string_t {\n \t    : string_t(value.c_str(), UnsafeNumericCast<uint32_t>(value.size())) {\n \t}\n \n+\t// Allocate using an arena allocator\n+\tstring_t(const char *data, const uint32_t len, ArenaAllocator &arena) {",
        "comment_created_at": "2025-06-23T08:53:45+00:00",
        "comment_author": "taniabogatsch",
        "comment_body": "Nit: Can we pass the `ArenaAllocator` as the first argument, iirc that's more in line with other code. :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2221387496",
    "pr_number": 18270,
    "pr_file": "test/include/test_config.hpp",
    "created_at": "2025-07-22T06:43:36+00:00",
    "commented_code": "public:\n \tFailureSummary();\n \n+\tstatic FailureSummary &Instance();",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2221387496",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18270,
        "pr_file": "test/include/test_config.hpp",
        "discussion_id": "2221387496",
        "commented_code": "@@ -70,17 +70,17 @@ class FailureSummary {\n public:\n \tFailureSummary();\n \n+\tstatic FailureSummary &Instance();",
        "comment_created_at": "2025-07-22T06:43:36+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Can we stick to the old code pattern here instead of making this public?",
        "pr_file_module": null
      },
      {
        "comment_id": "2254598509",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18270,
        "pr_file": "test/include/test_config.hpp",
        "discussion_id": "2221387496",
        "commented_code": "@@ -70,17 +70,17 @@ class FailureSummary {\n public:\n \tFailureSummary();\n \n+\tstatic FailureSummary &Instance();",
        "comment_created_at": "2025-08-05T14:51:02+00:00",
        "comment_author": "hmeriann",
        "comment_body": "Sorry I broke old code pattern here. Put FailureSummary Instance back in private and added a method that accesses it internally.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163594152",
    "pr_number": 17875,
    "pr_file": "src/include/duckdb/main/client_context.hpp",
    "created_at": "2025-06-24T10:41:36+00:00",
    "commented_code": "lock_guard<mutex> client_guard;\n };\n \n+//! The QueryContext wraps an optional client context.\n+//! It makes query-related information available to operations.\n+class QueryContext {\n+public:\n+\tQueryContext() : context(nullptr) {\n+\t}\n+\tQueryContext(ClientContext &context) : context(context) {\n+\t}\n+\tQueryContext(optional_ptr<ClientContext> context) : context(context) {",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2163594152",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17875,
        "pr_file": "src/include/duckdb/main/client_context.hpp",
        "discussion_id": "2163594152",
        "commented_code": "@@ -325,4 +326,32 @@ class ClientContextLock {\n \tlock_guard<mutex> client_guard;\n };\n \n+//! The QueryContext wraps an optional client context.\n+//! It makes query-related information available to operations.\n+class QueryContext {\n+public:\n+\tQueryContext() : context(nullptr) {\n+\t}\n+\tQueryContext(ClientContext &context) : context(context) {\n+\t}\n+\tQueryContext(optional_ptr<ClientContext> context) : context(context) {",
        "comment_created_at": "2025-06-24T10:41:36+00:00",
        "comment_author": "Mytherin",
        "comment_body": "This constructor should not be necessary - `optional_ptr<ClientContext>` is already implicitly constructable from `ClientContext &`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2048775303",
    "pr_number": 17164,
    "pr_file": "src/include/duckdb/main/query_profiler.hpp",
    "created_at": "2025-04-17T11:43:55+00:00",
    "commented_code": "class SQLStatement;\n \n struct OperatorInformation {\n-\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t elements_scanned_p = 0,\n-\t                             idx_t result_set_size_p = 0)\n-\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p) {\n+\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t result_set_size_p = 0,\n+\t                             idx_t system_peak_buffer_manager_memory_p = 0,\n+\t                             idx_t system_peak_temp_directory_size_p = 0)\n+\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p),\n+\t      system_peak_buffer_manager_memory(system_peak_buffer_manager_memory_p),\n+\t      system_peak_temp_directory_size(system_peak_temp_directory_size_p) {\n \t}\n \n \tdouble time;\n \tidx_t elements_returned;\n \tidx_t result_set_size;\n+\tidx_t system_peak_buffer_manager_memory;\n+\tidx_t system_peak_temp_directory_size;",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2048775303",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17164,
        "pr_file": "src/include/duckdb/main/query_profiler.hpp",
        "discussion_id": "2048775303",
        "commented_code": "@@ -34,14 +34,19 @@ class PhysicalOperator;\n class SQLStatement;\n \n struct OperatorInformation {\n-\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t elements_scanned_p = 0,\n-\t                             idx_t result_set_size_p = 0)\n-\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p) {\n+\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t result_set_size_p = 0,\n+\t                             idx_t system_peak_buffer_manager_memory_p = 0,\n+\t                             idx_t system_peak_temp_directory_size_p = 0)\n+\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p),\n+\t      system_peak_buffer_manager_memory(system_peak_buffer_manager_memory_p),\n+\t      system_peak_temp_directory_size(system_peak_temp_directory_size_p) {\n \t}\n \n \tdouble time;\n \tidx_t elements_returned;\n \tidx_t result_set_size;\n+\tidx_t system_peak_buffer_manager_memory;\n+\tidx_t system_peak_temp_directory_size;",
        "comment_created_at": "2025-04-17T11:43:55+00:00",
        "comment_author": "taniabogatsch",
        "comment_body": "Given that we keep likely keep expanding these, and since this PR also adds two additional parameters to the constructor: should we maybe move these into a `struct`? Something like `OperatorInfoMetrics`. \ud83e\udd14 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2053659212",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17164,
        "pr_file": "src/include/duckdb/main/query_profiler.hpp",
        "discussion_id": "2048775303",
        "commented_code": "@@ -34,14 +34,19 @@ class PhysicalOperator;\n class SQLStatement;\n \n struct OperatorInformation {\n-\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t elements_scanned_p = 0,\n-\t                             idx_t result_set_size_p = 0)\n-\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p) {\n+\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t result_set_size_p = 0,\n+\t                             idx_t system_peak_buffer_manager_memory_p = 0,\n+\t                             idx_t system_peak_temp_directory_size_p = 0)\n+\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p),\n+\t      system_peak_buffer_manager_memory(system_peak_buffer_manager_memory_p),\n+\t      system_peak_temp_directory_size(system_peak_temp_directory_size_p) {\n \t}\n \n \tdouble time;\n \tidx_t elements_returned;\n \tidx_t result_set_size;\n+\tidx_t system_peak_buffer_manager_memory;\n+\tidx_t system_peak_temp_directory_size;",
        "comment_created_at": "2025-04-22T08:51:36+00:00",
        "comment_author": "lnkuiper",
        "comment_body": "It's already `struct OperatorInformation`, but I agree that this constructor is getting out of hand. I checked, and nowhere in the code base are we using the constructor; we always use the defaults. So instead, I've removed the arguments from the constructor, and made it so the values are initialized within the structure, which I think is a lot cleaner.",
        "pr_file_module": null
      },
      {
        "comment_id": "2053733814",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17164,
        "pr_file": "src/include/duckdb/main/query_profiler.hpp",
        "discussion_id": "2048775303",
        "commented_code": "@@ -34,14 +34,19 @@ class PhysicalOperator;\n class SQLStatement;\n \n struct OperatorInformation {\n-\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t elements_scanned_p = 0,\n-\t                             idx_t result_set_size_p = 0)\n-\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p) {\n+\texplicit OperatorInformation(double time_p = 0, idx_t elements_returned_p = 0, idx_t result_set_size_p = 0,\n+\t                             idx_t system_peak_buffer_manager_memory_p = 0,\n+\t                             idx_t system_peak_temp_directory_size_p = 0)\n+\t    : time(time_p), elements_returned(elements_returned_p), result_set_size(result_set_size_p),\n+\t      system_peak_buffer_manager_memory(system_peak_buffer_manager_memory_p),\n+\t      system_peak_temp_directory_size(system_peak_temp_directory_size_p) {\n \t}\n \n \tdouble time;\n \tidx_t elements_returned;\n \tidx_t result_set_size;\n+\tidx_t system_peak_buffer_manager_memory;\n+\tidx_t system_peak_temp_directory_size;",
        "comment_created_at": "2025-04-22T09:30:10+00:00",
        "comment_author": "taniabogatsch",
        "comment_body": "Yes, great! \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2095865878",
    "pr_number": 17132,
    "pr_file": "src/include/duckdb/function/register_function_list_helper.hpp",
    "created_at": "2025-05-19T14:37:30+00:00",
    "commented_code": "}\n }\n \n+static vector<string> GetExamplesForFunctionAlias(const string &function_name, const string &alias_of,\n+                                                  vector<string> &all_examples) {\n+\tvector<string> filtered_examples;\n+\tbool is_operator = (!function_name.empty() && !(function_name[0] >= 'a' && function_name[0] <= 'z') &&\n+\t                    !(function_name[0] >= 'A' && function_name[0] <= 'Z'));\n+\tbool alias_of_is_operator = (!alias_of.empty() && !(alias_of[0] >= 'a' && alias_of[0] <= 'z') &&\n+\t                             !(alias_of[0] >= 'A' && alias_of[0] <= 'Z'));",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2095865878",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17132,
        "pr_file": "src/include/duckdb/function/register_function_list_helper.hpp",
        "discussion_id": "2095865878",
        "commented_code": "@@ -30,6 +30,36 @@ static void FillFunctionParameters(FunctionDescription &function_description, co\n \t}\n }\n \n+static vector<string> GetExamplesForFunctionAlias(const string &function_name, const string &alias_of,\n+                                                  vector<string> &all_examples) {\n+\tvector<string> filtered_examples;\n+\tbool is_operator = (!function_name.empty() && !(function_name[0] >= 'a' && function_name[0] <= 'z') &&\n+\t                    !(function_name[0] >= 'A' && function_name[0] <= 'Z'));\n+\tbool alias_of_is_operator = (!alias_of.empty() && !(alias_of[0] >= 'a' && alias_of[0] <= 'z') &&\n+\t                             !(alias_of[0] >= 'A' && alias_of[0] <= 'Z'));",
        "comment_created_at": "2025-05-19T14:37:30+00:00",
        "comment_author": "Maxxen",
        "comment_body": "There is some code to check for operators in Tokenizer.hpp, e.g. `BaseTokenizer::isSpecialOperator` and `BaseTokenizer::IsSingleByteOperator`. Maybe they could be made static/reusable here in a future PR?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1379042779",
    "pr_number": 9014,
    "pr_file": "src/include/duckdb/function/table/ordinality_data.hpp",
    "created_at": "2023-11-01T16:40:32+00:00",
    "commented_code": "+#pragma once",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "1379042779",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 9014,
        "pr_file": "src/include/duckdb/function/table/ordinality_data.hpp",
        "discussion_id": "1379042779",
        "commented_code": "@@ -0,0 +1,24 @@\n+#pragma once",
        "comment_created_at": "2023-11-01T16:40:32+00:00",
        "comment_author": "taniabogatsch",
        "comment_body": "Can we add the same header lines as in our other header files?\r\n\r\n```cpp\r\n//===----------------------------------------------------------------------===//\r\n//                         DuckDB\r\n//\r\n// duckdb/function/table/ordinality_data.hpp\r\n//\r\n//\r\n//===----------------------------------------------------------------------===//\r\n\r\n#pragma once\r\n\r\n#include \"...\"\r\n\r\nnamespace duckdb { \r\n// ...\r\n```",
        "pr_file_module": null
      }
    ]
  }
]