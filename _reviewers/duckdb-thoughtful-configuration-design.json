[
  {
    "discussion_id": "2195083334",
    "pr_number": 17499,
    "pr_file": "CMakeLists.txt",
    "created_at": "2025-07-09T13:46:31+00:00",
    "commented_code": "option(ENABLE_EXTENSION_AUTOLOADING \"Enable extension auto-loading by default.\" FALSE)\n option(ENABLE_EXTENSION_AUTOINSTALL \"Enable extension auto-installing by default.\" FALSE)\n option(EXTENSION_TESTS_ONLY \"Only load the tests for extensions, don't actually build them; useful for testing loadable extensions\" FALSE)\n+set(SECONDARY_EXTENSION_DIR \"\" CACHE STRING \"Optional extension secondary directory (for package managers)\")",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2195083334",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17499,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2195083334",
        "commented_code": "@@ -159,6 +159,7 @@ option(FORCE_WARN_UNUSED \"Unused code objects lead to compiler warnings.\" FALSE)\n option(ENABLE_EXTENSION_AUTOLOADING \"Enable extension auto-loading by default.\" FALSE)\n option(ENABLE_EXTENSION_AUTOINSTALL \"Enable extension auto-installing by default.\" FALSE)\n option(EXTENSION_TESTS_ONLY \"Only load the tests for extensions, don't actually build them; useful for testing loadable extensions\" FALSE)\n+set(SECONDARY_EXTENSION_DIR \"\" CACHE STRING \"Optional extension secondary directory (for package managers)\")",
        "comment_created_at": "2025-07-09T13:46:31+00:00",
        "comment_author": "Mytherin",
        "comment_body": "Can we perhaps have this option be `EXTENSION_DIRECTORIES` - which defaults to `~/.duckdb/extensions` - and can then be extended using e.g. a colon separated list similar to how `PATH` works (`~/.duckdb/extensions:/my/directory`)",
        "pr_file_module": null
      },
      {
        "comment_id": "2200642777",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17499,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2195083334",
        "commented_code": "@@ -159,6 +159,7 @@ option(FORCE_WARN_UNUSED \"Unused code objects lead to compiler warnings.\" FALSE)\n option(ENABLE_EXTENSION_AUTOLOADING \"Enable extension auto-loading by default.\" FALSE)\n option(ENABLE_EXTENSION_AUTOINSTALL \"Enable extension auto-installing by default.\" FALSE)\n option(EXTENSION_TESTS_ONLY \"Only load the tests for extensions, don't actually build them; useful for testing loadable extensions\" FALSE)\n+set(SECONDARY_EXTENSION_DIR \"\" CACHE STRING \"Optional extension secondary directory (for package managers)\")",
        "comment_created_at": "2025-07-11T12:46:16+00:00",
        "comment_author": "xhochy",
        "comment_body": "Done, I opted to use `;` as the separator on Windows though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2215767004",
    "pr_number": 18305,
    "pr_file": "src/CMakeLists.txt",
    "created_at": "2025-07-18T11:03:49+00:00",
    "commented_code": "if(AMALGAMATION_BUILD)\n \n   add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n+  set_target_properties(duckdb PROPERTIES VERSION ${DUCKDB_VERSION_NUMBER} SOVERSION ${DUCKDB_MAJOR_VERSION})",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2215767004",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18305,
        "pr_file": "src/CMakeLists.txt",
        "discussion_id": "2215767004",
        "commented_code": "@@ -60,6 +60,7 @@ endfunction()\n if(AMALGAMATION_BUILD)\n \n   add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n+  set_target_properties(duckdb PROPERTIES VERSION ${DUCKDB_VERSION_NUMBER} SOVERSION ${DUCKDB_MAJOR_VERSION})",
        "comment_created_at": "2025-07-18T11:03:49+00:00",
        "comment_author": "carlopi",
        "comment_body": "```suggestion\r\n  set_target_properties(duckdb PROPERTIES VERSION ${DUCKDB_VERSION_NUMBER} SOVERSION ${DUCKDB_MAJOR_VERSION}.${DUCKDB_MINOR_VERSION})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2215768076",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18305,
        "pr_file": "src/CMakeLists.txt",
        "discussion_id": "2215767004",
        "commented_code": "@@ -60,6 +60,7 @@ endfunction()\n if(AMALGAMATION_BUILD)\n \n   add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n+  set_target_properties(duckdb PROPERTIES VERSION ${DUCKDB_VERSION_NUMBER} SOVERSION ${DUCKDB_MAJOR_VERSION})",
        "comment_created_at": "2025-07-18T11:04:29+00:00",
        "comment_author": "carlopi",
        "comment_body": "Would something like this work as well? We are still moving fast, I don't think we guarantee 1.3.x and 1.4.x libraries to be compatible.",
        "pr_file_module": null
      },
      {
        "comment_id": "2215912305",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 18305,
        "pr_file": "src/CMakeLists.txt",
        "discussion_id": "2215767004",
        "commented_code": "@@ -60,6 +60,7 @@ endfunction()\n if(AMALGAMATION_BUILD)\n \n   add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n+  set_target_properties(duckdb PROPERTIES VERSION ${DUCKDB_VERSION_NUMBER} SOVERSION ${DUCKDB_MAJOR_VERSION})",
        "comment_created_at": "2025-07-18T12:20:00+00:00",
        "comment_author": "strophy",
        "comment_body": "Sure, that seems to work fine. I've changed the commit, the resulting files look like this now:\r\n```\r\nlrwxrwxrwx  1 builder abuild   16 Jul 18 12:04 libduckdb.so -> libduckdb.so.1.3\r\nlrwxrwxrwx  1 builder abuild   18 Jul 18 12:04 libduckdb.so.1.3 -> libduckdb.so.1.3.2\r\n-rwxr-xr-x  1 builder abuild  64M Jul 18 12:04 libduckdb.so.1.3.2\r\n-rw-r--r--  1 builder abuild  63M Jul 18 12:04 libduckdb_static.a\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2019100032",
    "pr_number": 16833,
    "pr_file": "CMakeLists.txt",
    "created_at": "2025-03-28T17:52:46+00:00",
    "commented_code": "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2019100032",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2019100032",
        "commented_code": "@@ -536,6 +536,9 @@ if(FORCE_ASSERT)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
        "comment_created_at": "2025-03-28T17:52:46+00:00",
        "comment_author": "carlopi",
        "comment_body": "It's this still used?",
        "pr_file_module": null
      },
      {
        "comment_id": "2020897489",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2019100032",
        "commented_code": "@@ -536,6 +536,9 @@ if(FORCE_ASSERT)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
        "comment_created_at": "2025-03-31T11:50:34+00:00",
        "comment_author": "hmeriann",
        "comment_body": "yes, I've added it to get the `SUMMARIZE_FAILURE` flag from CI env",
        "pr_file_module": null
      },
      {
        "comment_id": "2021048710",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2019100032",
        "commented_code": "@@ -536,6 +536,9 @@ if(FORCE_ASSERT)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
        "comment_created_at": "2025-03-31T13:28:01+00:00",
        "comment_author": "carlopi",
        "comment_body": "I guess a rephrase is: is `SUMMARIZE_FAILURES_ENV` ever used? I see it only once in the code to set the variable, so I am not sure who reads this",
        "pr_file_module": null
      },
      {
        "comment_id": "2021062269",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2019100032",
        "commented_code": "@@ -536,6 +536,9 @@ if(FORCE_ASSERT)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
        "comment_created_at": "2025-03-31T13:36:36+00:00",
        "comment_author": "hmeriann",
        "comment_body": "ah, I see! it should be used by `unittest` https://github.com/duckdb/duckdb/blob/efbb8ef88dc0550cd541c84bf2a4fa8410fe7dbb/test/unittest.cpp#L40",
        "pr_file_module": null
      },
      {
        "comment_id": "2021067573",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 16833,
        "pr_file": "CMakeLists.txt",
        "discussion_id": "2019100032",
        "commented_code": "@@ -536,6 +536,9 @@ if(FORCE_ASSERT)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_FORCE_ASSERT\")\n endif()\n \n+# sets SUMMARIZE_FAILURES env variable for unittest\n+set(SUMMARIZE_FAILURES_ENV \"$ENV{SUMMARIZE_FAILURES}\")\n+",
        "comment_created_at": "2025-03-31T13:40:06+00:00",
        "comment_author": "carlopi",
        "comment_body": "I think just removing `SUMMARIZE_FAILURES_ENV` entirely is good, and then at runtime either env variable `SUMMARIZE_FAILURES` OR options decide the behaviour",
        "pr_file_module": null
      }
    ]
  }
]