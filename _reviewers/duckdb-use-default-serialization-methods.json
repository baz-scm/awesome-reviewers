[
  {
    "discussion_id": "2094924137",
    "pr_number": 17518,
    "pr_file": "src/planner/operator/logical_get.cpp",
    "created_at": "2025-05-19T06:24:47+00:00",
    "commented_code": "}\n \tserializer.WriteProperty(210, \"projected_input\", projected_input);\n \tserializer.WritePropertyWithDefault(211, \"column_indexes\", column_ids);\n+\tserializer.WriteProperty(212, \"extra_info\", extra_info);",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2094924137",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17518,
        "pr_file": "src/planner/operator/logical_get.cpp",
        "discussion_id": "2094924137",
        "commented_code": "@@ -219,6 +219,7 @@ void LogicalGet::Serialize(Serializer &serializer) const {\n \t}\n \tserializer.WriteProperty(210, \"projected_input\", projected_input);\n \tserializer.WritePropertyWithDefault(211, \"column_indexes\", column_ids);\n+\tserializer.WriteProperty(212, \"extra_info\", extra_info);",
        "comment_created_at": "2025-05-19T06:24:47+00:00",
        "comment_author": "Mytherin",
        "comment_body": "This needs to be `WritePropertyWithDefault` and `ReadPropertyWithDefault` otherwise backwards compatibility is broken",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2084055170",
    "pr_number": 17428,
    "pr_file": "extension/core_functions/lambda_functions.cpp",
    "created_at": "2025-05-12T07:55:26+00:00",
    "commented_code": "serializer.WriteProperty(100, \"return_type\", bind_data.return_type);\n \tserializer.WritePropertyWithDefault(101, \"lambda_expr\", bind_data.lambda_expr, unique_ptr<Expression>());\n \tserializer.WriteProperty(102, \"has_index\", bind_data.has_index);\n-\tserializer.WriteProperty(103, \"has_initial\", bind_data.has_initial);\n+\tif (serializer.ShouldSerialize(5)) {",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "2084055170",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 17428,
        "pr_file": "extension/core_functions/lambda_functions.cpp",
        "discussion_id": "2084055170",
        "commented_code": "@@ -229,15 +229,17 @@ void ListLambdaBindData::Serialize(Serializer &serializer, const optional_ptr<Fu\n \tserializer.WriteProperty(100, \"return_type\", bind_data.return_type);\n \tserializer.WritePropertyWithDefault(101, \"lambda_expr\", bind_data.lambda_expr, unique_ptr<Expression>());\n \tserializer.WriteProperty(102, \"has_index\", bind_data.has_index);\n-\tserializer.WriteProperty(103, \"has_initial\", bind_data.has_initial);\n+\tif (serializer.ShouldSerialize(5)) {",
        "comment_created_at": "2025-05-12T07:55:26+00:00",
        "comment_author": "Mytherin",
        "comment_body": "I think the `ShouldSerialize` is incorrect here - this means we lose the information about the initial value if we are serializing to an older storage version. Throwing an error on deserialization is fine when the initial value is defined since the alternative is that we have incorrect results.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912918929",
    "pr_number": 15684,
    "pr_file": "extension/parquet/parquet_extension.cpp",
    "created_at": "2025-01-13T09:48:49+00:00",
    "commented_code": "serializer.WriteProperty(111, \"debug_use_openssl\", bind_data.debug_use_openssl);\n \tserializer.WriteProperty(112, \"dictionary_size_limit\", bind_data.dictionary_size_limit);\n \tserializer.WriteProperty(113, \"bloom_filter_false_positive_ratio\", bind_data.bloom_filter_false_positive_ratio);\n+\tserializer.WriteProperty(114, \"encoding_compatibility\", bind_data.encoding_compatibility);",
    "repo_full_name": "duckdb/duckdb",
    "discussion_comments": [
      {
        "comment_id": "1912918929",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 15684,
        "pr_file": "extension/parquet/parquet_extension.cpp",
        "discussion_id": "1912918929",
        "commented_code": "@@ -1448,6 +1484,7 @@ static void ParquetCopySerialize(Serializer &serializer, const FunctionData &bin\n \tserializer.WriteProperty(111, \"debug_use_openssl\", bind_data.debug_use_openssl);\n \tserializer.WriteProperty(112, \"dictionary_size_limit\", bind_data.dictionary_size_limit);\n \tserializer.WriteProperty(113, \"bloom_filter_false_positive_ratio\", bind_data.bloom_filter_false_positive_ratio);\n+\tserializer.WriteProperty(114, \"encoding_compatibility\", bind_data.encoding_compatibility);",
        "comment_created_at": "2025-01-13T09:48:49+00:00",
        "comment_author": "carlopi",
        "comment_body": "Should this be `WritePropertyWithDefault` or `WritePropertyWithExplicitDefault` ?\r\n\r\nAnd most likely also for the above fields, like they are now the plan can't be written by main and read by v1.1.3 (I think).\r\n\r\nI would be for moving `dictionary_size_limit` and `bloom_filter_false_positive_ratio` if possible to have a default.",
        "pr_file_module": null
      },
      {
        "comment_id": "1912922376",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 15684,
        "pr_file": "extension/parquet/parquet_extension.cpp",
        "discussion_id": "1912918929",
        "commented_code": "@@ -1448,6 +1484,7 @@ static void ParquetCopySerialize(Serializer &serializer, const FunctionData &bin\n \tserializer.WriteProperty(111, \"debug_use_openssl\", bind_data.debug_use_openssl);\n \tserializer.WriteProperty(112, \"dictionary_size_limit\", bind_data.dictionary_size_limit);\n \tserializer.WriteProperty(113, \"bloom_filter_false_positive_ratio\", bind_data.bloom_filter_false_positive_ratio);\n+\tserializer.WriteProperty(114, \"encoding_compatibility\", bind_data.encoding_compatibility);",
        "comment_created_at": "2025-01-13T09:51:22+00:00",
        "comment_author": "lnkuiper",
        "comment_body": "All three parameters have a default in `ParquetWriteBindData` so I think this is not a concern",
        "pr_file_module": null
      },
      {
        "comment_id": "1914472492",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 15684,
        "pr_file": "extension/parquet/parquet_extension.cpp",
        "discussion_id": "1912918929",
        "commented_code": "@@ -1448,6 +1484,7 @@ static void ParquetCopySerialize(Serializer &serializer, const FunctionData &bin\n \tserializer.WriteProperty(111, \"debug_use_openssl\", bind_data.debug_use_openssl);\n \tserializer.WriteProperty(112, \"dictionary_size_limit\", bind_data.dictionary_size_limit);\n \tserializer.WriteProperty(113, \"bloom_filter_false_positive_ratio\", bind_data.bloom_filter_false_positive_ratio);\n+\tserializer.WriteProperty(114, \"encoding_compatibility\", bind_data.encoding_compatibility);",
        "comment_created_at": "2025-01-14T09:06:07+00:00",
        "comment_author": "lnkuiper",
        "comment_body": "I looked into it and we skip writing the value if it is equal to the default. I've added defaults now so that we can skip writing these values in these cases, but I don't think it affects the serialization version.",
        "pr_file_module": null
      },
      {
        "comment_id": "1914481031",
        "repo_full_name": "duckdb/duckdb",
        "pr_number": 15684,
        "pr_file": "extension/parquet/parquet_extension.cpp",
        "discussion_id": "1912918929",
        "commented_code": "@@ -1448,6 +1484,7 @@ static void ParquetCopySerialize(Serializer &serializer, const FunctionData &bin\n \tserializer.WriteProperty(111, \"debug_use_openssl\", bind_data.debug_use_openssl);\n \tserializer.WriteProperty(112, \"dictionary_size_limit\", bind_data.dictionary_size_limit);\n \tserializer.WriteProperty(113, \"bloom_filter_false_positive_ratio\", bind_data.bloom_filter_false_positive_ratio);\n+\tserializer.WriteProperty(114, \"encoding_compatibility\", bind_data.encoding_compatibility);",
        "comment_created_at": "2025-01-14T09:12:17+00:00",
        "comment_author": "carlopi",
        "comment_body": "Thanks, I think now looks to make sense to me (the changes between now and v1.1.3 as a whole), but in doubt maybe serialization experts @Maxxen or @Mytherin want to have a peek?",
        "pr_file_module": null
      }
    ]
  }
]