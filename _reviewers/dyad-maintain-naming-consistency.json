[
  {
    "discussion_id": "2427578778",
    "pr_number": 1454,
    "pr_file": "src/ipc/handlers/github_handlers.ts",
    "created_at": "2025-10-13T23:59:59+00:00",
    "commented_code": "})\n     .where(eq(apps.id, appId));\n }\n+// --- GitHub Clone Repo from URL Handler ---\n+async function handleCloneRepoFromUrl(\n+  event: IpcMainInvokeEvent,\n+  params: CloneRepoParams,\n+): Promise<",
    "repo_full_name": "dyad-sh/dyad",
    "discussion_comments": [
      {
        "comment_id": "2427578778",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1454,
        "pr_file": "src/ipc/handlers/github_handlers.ts",
        "discussion_id": "2427578778",
        "commented_code": "@@ -627,6 +629,121 @@ async function handleDisconnectGithubRepo(\n     })\n     .where(eq(apps.id, appId));\n }\n+// --- GitHub Clone Repo from URL Handler ---\n+async function handleCloneRepoFromUrl(\n+  event: IpcMainInvokeEvent,\n+  params: CloneRepoParams,\n+): Promise<",
        "comment_created_at": "2025-10-13T23:59:59+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "Similar to CloneRepoParams, I would create an IPC type called CloneRepoReturnType and then use it here and in ipc_client.ts, this way it won't get out of sync in the future. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2314880387",
    "pr_number": 1140,
    "pr_file": "src/__tests__/getFunctionNameFromPath.test.ts",
    "created_at": "2025-09-02T04:27:00+00:00",
    "commented_code": "+import { getFunctionNameFromPath } from \"@/ipc/processors/response_processor\";\n+import { describe, expect, it } from \"vitest\";\n+\n+describe(\"getFunctionNameFromPath\", () => {\n+  it(\"returns directory name for index files\", () => {\n+    expect(getFunctionNameFromPath(\"/foo/bar/index.ts\")).toBe(\"bar\");\n+  });\n+",
    "repo_full_name": "dyad-sh/dyad",
    "discussion_comments": [
      {
        "comment_id": "2314880387",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1140,
        "pr_file": "src/__tests__/getFunctionNameFromPath.test.ts",
        "discussion_id": "2314880387",
        "commented_code": "@@ -0,0 +1,16 @@\n+import { getFunctionNameFromPath } from \"@/ipc/processors/response_processor\";\n+import { describe, expect, it } from \"vitest\";\n+\n+describe(\"getFunctionNameFromPath\", () => {\n+  it(\"returns directory name for index files\", () => {\n+    expect(getFunctionNameFromPath(\"/foo/bar/index.ts\")).toBe(\"bar\");\n+  });\n+",
        "comment_created_at": "2025-09-02T04:27:00+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "I don't know if this is the right expectation - when i look at supabase edge function examples (e.g. https://github.com/supabase/supabase/tree/master/examples/edge-functions/supabase/functions) it's always function-name/index.ts - is there supabase docs that says edge functions aren't always exported from index.ts?",
        "pr_file_module": null
      },
      {
        "comment_id": "2316509099",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1140,
        "pr_file": "src/__tests__/getFunctionNameFromPath.test.ts",
        "discussion_id": "2314880387",
        "commented_code": "@@ -0,0 +1,16 @@\n+import { getFunctionNameFromPath } from \"@/ipc/processors/response_processor\";\n+import { describe, expect, it } from \"vitest\";\n+\n+describe(\"getFunctionNameFromPath\", () => {\n+  it(\"returns directory name for index files\", () => {\n+    expect(getFunctionNameFromPath(\"/foo/bar/index.ts\")).toBe(\"bar\");\n+  });\n+",
        "comment_created_at": "2025-09-02T15:50:46+00:00",
        "comment_author": "rakibulrocky14",
        "comment_body": "@wwwillchen \r\n\r\nSupabase\u2019s official examples and CLI scaffolding do indeed use the function-name/index.ts convention, and the code fully supports that layout.\r\n\r\nI added a small safeguard so that if someone provides a direct file path (e.g., hello.ts) the function still works, even though this pattern isn\u2019t explicitly documented. It doesn\u2019t change the behavior for the standard folder/index.ts structure, so existing workflows remain unaffected.\r\n\r\nIf the project wants to enforce the official convention strictly, I can revert to the narrower implementation, but keeping the broader support is harmless and future\u2011proofs the tool. \r\n\r\n> Which approach do you prefer? Please let me know.",
        "pr_file_module": null
      },
      {
        "comment_id": "2317772112",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1140,
        "pr_file": "src/__tests__/getFunctionNameFromPath.test.ts",
        "discussion_id": "2314880387",
        "commented_code": "@@ -0,0 +1,16 @@\n+import { getFunctionNameFromPath } from \"@/ipc/processors/response_processor\";\n+import { describe, expect, it } from \"vitest\";\n+\n+describe(\"getFunctionNameFromPath\", () => {\n+  it(\"returns directory name for index files\", () => {\n+    expect(getFunctionNameFromPath(\"/foo/bar/index.ts\")).toBe(\"bar\");\n+  });\n+",
        "comment_created_at": "2025-09-03T05:08:02+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "let's stick with the official convention. we can do broader support later if we get users requesting this. thanks",
        "pr_file_module": null
      }
    ]
  }
]