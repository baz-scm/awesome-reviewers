[
  {
    "discussion_id": "2445763282",
    "pr_number": 1577,
    "pr_file": "src/components/NodePathSelector.tsx",
    "created_at": "2025-10-20T18:15:44+00:00",
    "commented_code": "+import { useState, useEffect } from \"react\";\n+import { Label } from \"@/components/ui/label\";\n+import { Button } from \"@/components/ui/button\";\n+import { useSettings } from \"@/hooks/useSettings\";\n+import { showError, showSuccess } from \"@/lib/toast\";\n+import { IpcClient } from \"@/ipc/ipc_client\";\n+import { FolderOpen, RotateCcw, CheckCircle, AlertCircle } from \"lucide-react\";\n+\n+export function NodePathSelector() {\n+  const { settings, updateSettings } = useSettings();\n+  const [isSelectingPath, setIsSelectingPath] = useState(false);\n+  const [nodeStatus, setNodeStatus] = useState<{\n+    version: string | null;\n+    isValid: boolean;\n+  }>({\n+    version: null,\n+    isValid: false,\n+  });\n+  const [isCheckingNode, setIsCheckingNode] = useState(false);\n+  const [systemPath, setSystemPath] = useState<string>(\"Loading...\");\n+\n+  // Check Node.js status when component mounts or path changes\n+  useEffect(() => {\n+    checkNodeStatus();\n+  }, [settings?.customNodePath]);\n+\n+  useEffect(() => {\n+    // Fetch system path on mount\n+    const fetchSystemPath = async () => {\n+      try {\n+        const debugInfo = await IpcClient.getInstance().getSystemDebugInfo();\n+        setSystemPath(debugInfo.nodePath || \"System PATH (not available)\");\n+      } catch (err) {\n+        console.error(\"Failed to fetch system path:\", err);\n+        setSystemPath(\"System PATH (not available)\");\n+      }\n+    };\n+    fetchSystemPath();\n+  }, []);\n+\n+  const checkNodeStatus = async () => {\n+    if (!settings) return;\n+    setIsCheckingNode(true);\n+    try {\n+      const status = await IpcClient.getInstance().getNodejsStatus();\n+      setNodeStatus({\n+        version: status.nodeVersion,\n+        isValid: !!status.nodeVersion,\n+      });\n+    } catch (error) {\n+      console.error(\"Failed to check Node.js status:\", error);\n+      setNodeStatus({ version: null, isValid: false });\n+    } finally {\n+      setIsCheckingNode(false);\n+    }\n+  };\n+  const handleSelectNodePath = async () => {\n+    setIsSelectingPath(true);\n+    try {\n+      // Call the IPC method to select folder\n+      const result = await IpcClient.getInstance().selectNodeFolder();\n+      if (result.path) {\n+        // Save the custom path to settings",
    "repo_full_name": "dyad-sh/dyad",
    "discussion_comments": [
      {
        "comment_id": "2445763282",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1577,
        "pr_file": "src/components/NodePathSelector.tsx",
        "discussion_id": "2445763282",
        "commented_code": "@@ -0,0 +1,183 @@\n+import { useState, useEffect } from \"react\";\n+import { Label } from \"@/components/ui/label\";\n+import { Button } from \"@/components/ui/button\";\n+import { useSettings } from \"@/hooks/useSettings\";\n+import { showError, showSuccess } from \"@/lib/toast\";\n+import { IpcClient } from \"@/ipc/ipc_client\";\n+import { FolderOpen, RotateCcw, CheckCircle, AlertCircle } from \"lucide-react\";\n+\n+export function NodePathSelector() {\n+  const { settings, updateSettings } = useSettings();\n+  const [isSelectingPath, setIsSelectingPath] = useState(false);\n+  const [nodeStatus, setNodeStatus] = useState<{\n+    version: string | null;\n+    isValid: boolean;\n+  }>({\n+    version: null,\n+    isValid: false,\n+  });\n+  const [isCheckingNode, setIsCheckingNode] = useState(false);\n+  const [systemPath, setSystemPath] = useState<string>(\"Loading...\");\n+\n+  // Check Node.js status when component mounts or path changes\n+  useEffect(() => {\n+    checkNodeStatus();\n+  }, [settings?.customNodePath]);\n+\n+  useEffect(() => {\n+    // Fetch system path on mount\n+    const fetchSystemPath = async () => {\n+      try {\n+        const debugInfo = await IpcClient.getInstance().getSystemDebugInfo();\n+        setSystemPath(debugInfo.nodePath || \"System PATH (not available)\");\n+      } catch (err) {\n+        console.error(\"Failed to fetch system path:\", err);\n+        setSystemPath(\"System PATH (not available)\");\n+      }\n+    };\n+    fetchSystemPath();\n+  }, []);\n+\n+  const checkNodeStatus = async () => {\n+    if (!settings) return;\n+    setIsCheckingNode(true);\n+    try {\n+      const status = await IpcClient.getInstance().getNodejsStatus();\n+      setNodeStatus({\n+        version: status.nodeVersion,\n+        isValid: !!status.nodeVersion,\n+      });\n+    } catch (error) {\n+      console.error(\"Failed to check Node.js status:\", error);\n+      setNodeStatus({ version: null, isValid: false });\n+    } finally {\n+      setIsCheckingNode(false);\n+    }\n+  };\n+  const handleSelectNodePath = async () => {\n+    setIsSelectingPath(true);\n+    try {\n+      // Call the IPC method to select folder\n+      const result = await IpcClient.getInstance().selectNodeFolder();\n+      if (result.path) {\n+        // Save the custom path to settings",
        "comment_created_at": "2025-10-20T18:15:44+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "looking at the code, I don't think setNodePath IPC is actually needed.\r\nyou're updating the settings via updateSettings and then reloadEnvPath is updating the path.",
        "pr_file_module": null
      },
      {
        "comment_id": "2446325082",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1577,
        "pr_file": "src/components/NodePathSelector.tsx",
        "discussion_id": "2445763282",
        "commented_code": "@@ -0,0 +1,183 @@\n+import { useState, useEffect } from \"react\";\n+import { Label } from \"@/components/ui/label\";\n+import { Button } from \"@/components/ui/button\";\n+import { useSettings } from \"@/hooks/useSettings\";\n+import { showError, showSuccess } from \"@/lib/toast\";\n+import { IpcClient } from \"@/ipc/ipc_client\";\n+import { FolderOpen, RotateCcw, CheckCircle, AlertCircle } from \"lucide-react\";\n+\n+export function NodePathSelector() {\n+  const { settings, updateSettings } = useSettings();\n+  const [isSelectingPath, setIsSelectingPath] = useState(false);\n+  const [nodeStatus, setNodeStatus] = useState<{\n+    version: string | null;\n+    isValid: boolean;\n+  }>({\n+    version: null,\n+    isValid: false,\n+  });\n+  const [isCheckingNode, setIsCheckingNode] = useState(false);\n+  const [systemPath, setSystemPath] = useState<string>(\"Loading...\");\n+\n+  // Check Node.js status when component mounts or path changes\n+  useEffect(() => {\n+    checkNodeStatus();\n+  }, [settings?.customNodePath]);\n+\n+  useEffect(() => {\n+    // Fetch system path on mount\n+    const fetchSystemPath = async () => {\n+      try {\n+        const debugInfo = await IpcClient.getInstance().getSystemDebugInfo();\n+        setSystemPath(debugInfo.nodePath || \"System PATH (not available)\");\n+      } catch (err) {\n+        console.error(\"Failed to fetch system path:\", err);\n+        setSystemPath(\"System PATH (not available)\");\n+      }\n+    };\n+    fetchSystemPath();\n+  }, []);\n+\n+  const checkNodeStatus = async () => {\n+    if (!settings) return;\n+    setIsCheckingNode(true);\n+    try {\n+      const status = await IpcClient.getInstance().getNodejsStatus();\n+      setNodeStatus({\n+        version: status.nodeVersion,\n+        isValid: !!status.nodeVersion,\n+      });\n+    } catch (error) {\n+      console.error(\"Failed to check Node.js status:\", error);\n+      setNodeStatus({ version: null, isValid: false });\n+    } finally {\n+      setIsCheckingNode(false);\n+    }\n+  };\n+  const handleSelectNodePath = async () => {\n+    setIsSelectingPath(true);\n+    try {\n+      // Call the IPC method to select folder\n+      const result = await IpcClient.getInstance().selectNodeFolder();\n+      if (result.path) {\n+        // Save the custom path to settings",
        "comment_created_at": "2025-10-20T23:11:44+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "@princeaden1 could you address this comment? thanks",
        "pr_file_module": null
      },
      {
        "comment_id": "2446394547",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1577,
        "pr_file": "src/components/NodePathSelector.tsx",
        "discussion_id": "2445763282",
        "commented_code": "@@ -0,0 +1,183 @@\n+import { useState, useEffect } from \"react\";\n+import { Label } from \"@/components/ui/label\";\n+import { Button } from \"@/components/ui/button\";\n+import { useSettings } from \"@/hooks/useSettings\";\n+import { showError, showSuccess } from \"@/lib/toast\";\n+import { IpcClient } from \"@/ipc/ipc_client\";\n+import { FolderOpen, RotateCcw, CheckCircle, AlertCircle } from \"lucide-react\";\n+\n+export function NodePathSelector() {\n+  const { settings, updateSettings } = useSettings();\n+  const [isSelectingPath, setIsSelectingPath] = useState(false);\n+  const [nodeStatus, setNodeStatus] = useState<{\n+    version: string | null;\n+    isValid: boolean;\n+  }>({\n+    version: null,\n+    isValid: false,\n+  });\n+  const [isCheckingNode, setIsCheckingNode] = useState(false);\n+  const [systemPath, setSystemPath] = useState<string>(\"Loading...\");\n+\n+  // Check Node.js status when component mounts or path changes\n+  useEffect(() => {\n+    checkNodeStatus();\n+  }, [settings?.customNodePath]);\n+\n+  useEffect(() => {\n+    // Fetch system path on mount\n+    const fetchSystemPath = async () => {\n+      try {\n+        const debugInfo = await IpcClient.getInstance().getSystemDebugInfo();\n+        setSystemPath(debugInfo.nodePath || \"System PATH (not available)\");\n+      } catch (err) {\n+        console.error(\"Failed to fetch system path:\", err);\n+        setSystemPath(\"System PATH (not available)\");\n+      }\n+    };\n+    fetchSystemPath();\n+  }, []);\n+\n+  const checkNodeStatus = async () => {\n+    if (!settings) return;\n+    setIsCheckingNode(true);\n+    try {\n+      const status = await IpcClient.getInstance().getNodejsStatus();\n+      setNodeStatus({\n+        version: status.nodeVersion,\n+        isValid: !!status.nodeVersion,\n+      });\n+    } catch (error) {\n+      console.error(\"Failed to check Node.js status:\", error);\n+      setNodeStatus({ version: null, isValid: false });\n+    } finally {\n+      setIsCheckingNode(false);\n+    }\n+  };\n+  const handleSelectNodePath = async () => {\n+    setIsSelectingPath(true);\n+    try {\n+      // Call the IPC method to select folder\n+      const result = await IpcClient.getInstance().selectNodeFolder();\n+      if (result.path) {\n+        // Save the custom path to settings",
        "comment_created_at": "2025-10-20T23:50:57+00:00",
        "comment_author": "princeaden1",
        "comment_body": "@wwwillchen Thanks, I've gone through the code again and removed setNodePath.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2400448936",
    "pr_number": 1432,
    "pr_file": "src/components/chat/DyadMarkdownParser.tsx",
    "created_at": "2025-10-03T00:27:53+00:00",
    "commented_code": "return null;\n \n     case \"dyad-command\":\n-      // Don't render anything for dyad-command\n-      return null;\n+      try {\n+        let action;\n+        if (attributes.id || attributes.action) {\n+          action = {\n+            id: attributes.id || attributes.action,",
    "repo_full_name": "dyad-sh/dyad",
    "discussion_comments": [
      {
        "comment_id": "2400448936",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1432,
        "pr_file": "src/components/chat/DyadMarkdownParser.tsx",
        "discussion_id": "2400448936",
        "commented_code": "@@ -498,8 +500,30 @@ function renderCustomTag(\n       return null;\n \n     case \"dyad-command\":\n-      // Don't render anything for dyad-command\n-      return null;\n+      try {\n+        let action;\n+        if (attributes.id || attributes.action) {\n+          action = {\n+            id: attributes.id || attributes.action,",
        "comment_created_at": "2025-10-03T00:27:53+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "this feels a bit too indirect (even though it does work). I think you can use attributes.type and map it to `id` and that should work for all the existing cases.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2287091739",
    "pr_number": 1001,
    "pr_file": "src/components/settings/ApiKeyConfiguration.tsx",
    "created_at": "2025-08-20T06:18:11+00:00",
    "commented_code": "onDeleteKey,\n   isDyad,\n }: ApiKeyConfigurationProps) {\n+  // Special handling for Azure OpenAI which requires environment variables\n+  if (provider === \"azure\") {\n+    const azureApiKey = envVars[\"AZURE_API_KEY\"];\n+    const azureResourceName = envVars[\"AZURE_RESOURCE_NAME\"];\n+\n+    const isAzureConfigured = !!(azureApiKey && azureResourceName);\n+\n+    return (",
    "repo_full_name": "dyad-sh/dyad",
    "discussion_comments": [
      {
        "comment_id": "2287091739",
        "repo_full_name": "dyad-sh/dyad",
        "pr_number": 1001,
        "pr_file": "src/components/settings/ApiKeyConfiguration.tsx",
        "discussion_id": "2287091739",
        "commented_code": "@@ -46,6 +46,99 @@ export function ApiKeyConfiguration({\n   onDeleteKey,\n   isDyad,\n }: ApiKeyConfigurationProps) {\n+  // Special handling for Azure OpenAI which requires environment variables\n+  if (provider === \"azure\") {\n+    const azureApiKey = envVars[\"AZURE_API_KEY\"];\n+    const azureResourceName = envVars[\"AZURE_RESOURCE_NAME\"];\n+\n+    const isAzureConfigured = !!(azureApiKey && azureResourceName);\n+\n+    return (",
        "comment_created_at": "2025-08-20T06:18:11+00:00",
        "comment_author": "wwwillchen",
        "comment_body": "this should be extracted into a separate component and ideally separate file",
        "pr_file_module": null
      }
    ]
  }
]