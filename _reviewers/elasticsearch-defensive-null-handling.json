[
  {
    "discussion_id": "2171707161",
    "pr_number": 130000,
    "pr_file": "server/src/main/java/org/elasticsearch/cluster/metadata/ProjectMetadata.java",
    "created_at": "2025-06-27T11:29:43+00:00",
    "commented_code": "public static ProjectMetadata fromXContent(XContentParser parser) throws IOException {\n            XContentParser.Token token = parser.currentToken();\n            if (token == null) {\n                token = parser.nextToken();\n            }",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2171707161",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130000,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/metadata/ProjectMetadata.java",
        "discussion_id": "2171707161",
        "commented_code": "@@ -2089,6 +2089,9 @@ static boolean assertDataStreams(Map<String, IndexMetadata> indices, DataStreamM\n \n         public static ProjectMetadata fromXContent(XContentParser parser) throws IOException {\n             XContentParser.Token token = parser.currentToken();\n+            if (token == null) {\n+                token = parser.nextToken();\n+            }",
        "comment_created_at": "2025-06-27T11:29:43+00:00",
        "comment_author": "pxsalehi",
        "comment_body": "what's this all about?",
        "pr_file_module": null
      },
      {
        "comment_id": "2174109969",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130000,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/metadata/ProjectMetadata.java",
        "discussion_id": "2171707161",
        "commented_code": "@@ -2089,6 +2089,9 @@ static boolean assertDataStreams(Map<String, IndexMetadata> indices, DataStreamM\n \n         public static ProjectMetadata fromXContent(XContentParser parser) throws IOException {\n             XContentParser.Token token = parser.currentToken();\n+            if (token == null) {\n+                token = parser.nextToken();\n+            }",
        "comment_created_at": "2025-06-30T02:42:36+00:00",
        "comment_author": "ywangd",
        "comment_body": "This is needed when the `ProjectMetadata` is parsed on its own, i.e. _not_ as part of `Metadata`. In the later case, the `parser.nextToken()` method is already called when parsing the outer structure. In this PR, we need to de/serialize `ProjectMetadata` on its own. Hence the need for active call to this method. We also use this pattern in other places such as [here](https://github.com/elastic/elasticsearch/blob/cacce50192ac29e1aaca2e75c170a90d15af292c/server/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshots.java#L276-L278).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2163198891",
    "pr_number": 129684,
    "pr_file": "qa/lucene-index-compatibility/src/javaRestTest/java/org/elasticsearch/lucene/AbstractIndexCompatibilityTestCase.java",
    "created_at": "2025-06-24T07:44:21+00:00",
    "commented_code": "@SuppressWarnings(\"unchecked\")\n    protected static void assertIndexSetting(String indexName, Setting<?> setting, Matcher<Boolean> matcher) throws Exception {\n        var indexSettings = getIndexSettingsAsMap(indexName);\n        assertThat(Boolean.parseBoolean((String) indexSettings.get(setting.getKey())), matcher);\n        assertThat(Booleans.parseBoolean((String) indexSettings.get(setting.getKey())), matcher);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2163198891",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "qa/lucene-index-compatibility/src/javaRestTest/java/org/elasticsearch/lucene/AbstractIndexCompatibilityTestCase.java",
        "discussion_id": "2163198891",
        "commented_code": "@@ -330,7 +331,7 @@ protected static List<ClusterBlock> indexBlocks(String indexName) throws Excepti\n     @SuppressWarnings(\"unchecked\")\n     protected static void assertIndexSetting(String indexName, Setting<?> setting, Matcher<Boolean> matcher) throws Exception {\n         var indexSettings = getIndexSettingsAsMap(indexName);\n-        assertThat(Boolean.parseBoolean((String) indexSettings.get(setting.getKey())), matcher);\n+        assertThat(Booleans.parseBoolean((String) indexSettings.get(setting.getKey())), matcher);",
        "comment_created_at": "2025-06-24T07:44:21+00:00",
        "comment_author": "mosche",
        "comment_body": "Please use `Booleans.parseBoolean(...., false)` here in case the setting is absent",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167510376",
    "pr_number": 130035,
    "pr_file": "x-pack/plugin/migrate/src/main/java/org/elasticsearch/xpack/migrate/task/ReindexDataStreamTask.java",
    "created_at": "2025-06-25T19:57:23+00:00",
    "commented_code": "int totalIndices = initialTotalIndices;\n        int totalIndicesToBeUpgraded = initialTotalIndicesToBeUpgraded;\n        PersistentTasksCustomMetadata.PersistentTask<?> persistentTask = PersistentTasksCustomMetadata.getTaskWithId(\n            clusterService.state(),\n            clusterService.state().projectState(projectId).metadata(),",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2167510376",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130035,
        "pr_file": "x-pack/plugin/migrate/src/main/java/org/elasticsearch/xpack/migrate/task/ReindexDataStreamTask.java",
        "discussion_id": "2167510376",
        "commented_code": "@@ -70,7 +74,7 @@ public ReindexDataStreamStatus getStatus() {\n         int totalIndices = initialTotalIndices;\n         int totalIndicesToBeUpgraded = initialTotalIndicesToBeUpgraded;\n         PersistentTasksCustomMetadata.PersistentTask<?> persistentTask = PersistentTasksCustomMetadata.getTaskWithId(\n-            clusterService.state(),\n+            clusterService.state().projectState(projectId).metadata(),",
        "comment_created_at": "2025-06-25T19:57:23+00:00",
        "comment_author": "nielsbauman",
        "comment_body": "1. There is no need to convert to `ProjectState` here (we could call `clusterService.state().metadata().getProject(projectId)`).\r\n2. I see we have a `null`-check below for `persistentTask`. While we should handle project deletions (even soft-deletes) gracefully and stop persistent tasks first, I think it doesn't hurt to have some defense against deleted projects here. We could do something like:\r\n\t```java\r\n\tvar project = clusterService.state().metadata().projects().get(projectId);\r\n\tPersistentTasksCustomMetadata.PersistentTask<?> persistentTask = project == null ? null : PersistentTasksCustomMetadata.getTaskWithId(project, getPersistentTask());\r\n\t```\r\n\tBut other variations of that are fine too of course.\r\n\r\nThe same goes for similar changes in this and other files, and for obtaining `sourceIndex` in `ReindexDataStreamIndexTransportAction.java`. Generally, if a block of code assumes that something exists (e.g. a task/custom/index), I don't do an extra `null`-check for the project, but if the code defends against missing objects, I check for missing project to maintain the level of defense.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167648998",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130035,
        "pr_file": "x-pack/plugin/migrate/src/main/java/org/elasticsearch/xpack/migrate/task/ReindexDataStreamTask.java",
        "discussion_id": "2167510376",
        "commented_code": "@@ -70,7 +74,7 @@ public ReindexDataStreamStatus getStatus() {\n         int totalIndices = initialTotalIndices;\n         int totalIndicesToBeUpgraded = initialTotalIndicesToBeUpgraded;\n         PersistentTasksCustomMetadata.PersistentTask<?> persistentTask = PersistentTasksCustomMetadata.getTaskWithId(\n-            clusterService.state(),\n+            clusterService.state().projectState(projectId).metadata(),",
        "comment_created_at": "2025-06-25T21:15:49+00:00",
        "comment_author": "joegallo",
        "comment_body": "14ac8331a512cb0696d8634722bea48fda3fd689 addresses your first point, but I'll have to grind a bit on the second one. (Which I'll do tomorrow.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2167691284",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130035,
        "pr_file": "x-pack/plugin/migrate/src/main/java/org/elasticsearch/xpack/migrate/task/ReindexDataStreamTask.java",
        "discussion_id": "2167510376",
        "commented_code": "@@ -70,7 +74,7 @@ public ReindexDataStreamStatus getStatus() {\n         int totalIndices = initialTotalIndices;\n         int totalIndicesToBeUpgraded = initialTotalIndicesToBeUpgraded;\n         PersistentTasksCustomMetadata.PersistentTask<?> persistentTask = PersistentTasksCustomMetadata.getTaskWithId(\n-            clusterService.state(),\n+            clusterService.state().projectState(projectId).metadata(),",
        "comment_created_at": "2025-06-25T21:45:18+00:00",
        "comment_author": "joegallo",
        "comment_body": "I think your second point is the only comment here that's still outstanding, I'll pick up on that one tomorrow (this comment is just a bookmark from myself to myself).",
        "pr_file_module": null
      },
      {
        "comment_id": "2169242470",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130035,
        "pr_file": "x-pack/plugin/migrate/src/main/java/org/elasticsearch/xpack/migrate/task/ReindexDataStreamTask.java",
        "discussion_id": "2167510376",
        "commented_code": "@@ -70,7 +74,7 @@ public ReindexDataStreamStatus getStatus() {\n         int totalIndices = initialTotalIndices;\n         int totalIndicesToBeUpgraded = initialTotalIndicesToBeUpgraded;\n         PersistentTasksCustomMetadata.PersistentTask<?> persistentTask = PersistentTasksCustomMetadata.getTaskWithId(\n-            clusterService.state(),\n+            clusterService.state().projectState(projectId).metadata(),",
        "comment_created_at": "2025-06-26T14:41:50+00:00",
        "comment_author": "joegallo",
        "comment_body": "Okay, I think I've handled your second point via ef53eb2a0051c2a7167d11f6837c9e8ab1a6b289.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2128058868",
    "pr_number": 128797,
    "pr_file": "server/src/internalClusterTest/java/org/elasticsearch/recovery/RelocationIT.java",
    "created_at": "2025-06-05T06:33:25+00:00",
    "commented_code": "waitForDocs(numDocs, indexer);\n            logger.info(\"--> {} docs indexed\", numDocs);\n\n            IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodes[0]);\n            IndexShard shard = indicesService.indexServiceSafe(resolveIndex(\"test\")).getShard(0);\n            if (throttleIndexing) {\n                // Activate index throttling on \"test\" index primary shard\n                shard.activateThrottling();\n                // Verify that indexing is throttled for this shard\n                assertThat(shard.getEngineOrNull().isThrottled(), equalTo(true));",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2128058868",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128797,
        "pr_file": "server/src/internalClusterTest/java/org/elasticsearch/recovery/RelocationIT.java",
        "discussion_id": "2128058868",
        "commented_code": "@@ -200,6 +277,14 @@ public void testRelocationWhileIndexingRandom() throws Exception {\n             waitForDocs(numDocs, indexer);\n             logger.info(\"--> {} docs indexed\", numDocs);\n \n+            IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodes[0]);\n+            IndexShard shard = indicesService.indexServiceSafe(resolveIndex(\"test\")).getShard(0);\n+            if (throttleIndexing) {\n+                // Activate index throttling on \"test\" index primary shard\n+                shard.activateThrottling();\n+                // Verify that indexing is throttled for this shard\n+                assertThat(shard.getEngineOrNull().isThrottled(), equalTo(true));",
        "comment_created_at": "2025-06-05T06:33:25+00:00",
        "comment_author": "henningandersen",
        "comment_body": "```suggestion\r\n                assertThat(shard.getEngine().isThrottled(), equalTo(true));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2129155634",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128797,
        "pr_file": "server/src/internalClusterTest/java/org/elasticsearch/recovery/RelocationIT.java",
        "discussion_id": "2128058868",
        "commented_code": "@@ -200,6 +277,14 @@ public void testRelocationWhileIndexingRandom() throws Exception {\n             waitForDocs(numDocs, indexer);\n             logger.info(\"--> {} docs indexed\", numDocs);\n \n+            IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodes[0]);\n+            IndexShard shard = indicesService.indexServiceSafe(resolveIndex(\"test\")).getShard(0);\n+            if (throttleIndexing) {\n+                // Activate index throttling on \"test\" index primary shard\n+                shard.activateThrottling();\n+                // Verify that indexing is throttled for this shard\n+                assertThat(shard.getEngineOrNull().isThrottled(), equalTo(true));",
        "comment_created_at": "2025-06-05T15:42:46+00:00",
        "comment_author": "ankikuma",
        "comment_body": "getEngine() is not public right now. Can I change this to :\r\n\r\nEngine engine = shard.getEngineOrNull();\r\nassertThat(engine != null && engine.isThrottled(), equalTo(true));",
        "pr_file_module": null
      }
    ]
  }
]