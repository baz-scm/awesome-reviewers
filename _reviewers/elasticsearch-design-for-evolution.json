[
  {
    "discussion_id": "2162056413",
    "pr_number": 129872,
    "pr_file": "server/src/main/java/org/elasticsearch/action/admin/cluster/state/RemoteClusterStateRequest.java",
    "created_at": "2025-06-23T16:51:34+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.action.admin.cluster.state;\n\nimport org.elasticsearch.TransportVersions;\nimport org.elasticsearch.action.ActionRequest;\nimport org.elasticsearch.action.ActionRequestValidationException;\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.io.stream.StreamOutput;\nimport org.elasticsearch.tasks.CancellableTask;\nimport org.elasticsearch.tasks.Task;\nimport org.elasticsearch.tasks.TaskId;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n/**\n * A remote-only version of {@link ClusterStateRequest} that should be used for cross-cluster requests.\n * It simply exists to handle incoming remote requests and forward them to the local transport action.\n */\npublic class RemoteClusterStateRequest extends ActionRequest {\n\n    private final ClusterStateRequest clusterStateRequest;",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2162056413",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129872,
        "pr_file": "server/src/main/java/org/elasticsearch/action/admin/cluster/state/RemoteClusterStateRequest.java",
        "discussion_id": "2162056413",
        "commented_code": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.state;\n+\n+import org.elasticsearch.TransportVersions;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.tasks.CancellableTask;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.tasks.TaskId;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * A remote-only version of {@link ClusterStateRequest} that should be used for cross-cluster requests.\n+ * It simply exists to handle incoming remote requests and forward them to the local transport action.\n+ */\n+public class RemoteClusterStateRequest extends ActionRequest {\n+\n+    private final ClusterStateRequest clusterStateRequest;",
        "comment_created_at": "2025-06-23T16:51:34+00:00",
        "comment_author": "nielsbauman",
        "comment_body": "Suggestions other than wrapping the whole request itself like this are welcome too.",
        "pr_file_module": null
      },
      {
        "comment_id": "2179881540",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129872,
        "pr_file": "server/src/main/java/org/elasticsearch/action/admin/cluster/state/RemoteClusterStateRequest.java",
        "discussion_id": "2162056413",
        "commented_code": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.action.admin.cluster.state;\n+\n+import org.elasticsearch.TransportVersions;\n+import org.elasticsearch.action.ActionRequest;\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.tasks.CancellableTask;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.tasks.TaskId;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * A remote-only version of {@link ClusterStateRequest} that should be used for cross-cluster requests.\n+ * It simply exists to handle incoming remote requests and forward them to the local transport action.\n+ */\n+public class RemoteClusterStateRequest extends ActionRequest {\n+\n+    private final ClusterStateRequest clusterStateRequest;",
        "comment_created_at": "2025-07-02T12:05:18+00:00",
        "comment_author": "DaveCTurner",
        "comment_body": "I think I'd be inclined to duplicate all the fields rather than wrap up the local-only request, so that these things may diverge in future.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2004202386",
    "pr_number": 125052,
    "pr_file": "x-pack/plugin/rank-rrf/src/main/java/org/elasticsearch/xpack/rank/hybrid/HybridRetrieverBuilder.java",
    "created_at": "2025-03-19T20:08:41+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0; you may not use this file except in compliance with the Elastic License\n * 2.0.\n */\n\npackage org.elasticsearch.xpack.rank.hybrid;\n\nimport org.elasticsearch.common.collect.ImmutableOpenMap;\nimport org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\nimport org.elasticsearch.common.xcontent.support.XContentMapValues;\nimport org.elasticsearch.index.query.MatchQueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilder;\nimport org.elasticsearch.search.rank.RankBuilder;\nimport org.elasticsearch.search.retriever.CompoundRetrieverBuilder;\nimport org.elasticsearch.search.retriever.RetrieverBuilder;\nimport org.elasticsearch.search.retriever.RetrieverBuilderWrapper;\nimport org.elasticsearch.search.retriever.RetrieverParserContext;\nimport org.elasticsearch.search.retriever.StandardRetrieverBuilder;\nimport org.elasticsearch.xcontent.ConstructingObjectParser;\nimport org.elasticsearch.xcontent.NamedXContentRegistry;\nimport org.elasticsearch.xcontent.ParseField;\nimport org.elasticsearch.xcontent.XContentBuilder;\nimport org.elasticsearch.xcontent.XContentParseException;\nimport org.elasticsearch.xcontent.XContentParser;\nimport org.elasticsearch.xcontent.support.MapXContentParser;\nimport org.elasticsearch.xpack.inference.rank.textsimilarity.TextSimilarityRankRetrieverBuilder;\nimport org.elasticsearch.xpack.rank.linear.LinearRetrieverBuilder;\nimport org.elasticsearch.xpack.rank.linear.MinMaxScoreNormalizer;\nimport org.elasticsearch.xpack.rank.linear.ScoreNormalizer;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static org.elasticsearch.search.retriever.CompoundRetrieverBuilder.RANK_WINDOW_SIZE_FIELD;\nimport static org.elasticsearch.xcontent.ConstructingObjectParser.constructorArg;\nimport static org.elasticsearch.xcontent.ConstructingObjectParser.optionalConstructorArg;\nimport static org.elasticsearch.xpack.rank.hybrid.QuerySettings.TYPE_FIELD;\n\n// TODO:\n// - Retriever name support\n\npublic class HybridRetrieverBuilder extends RetrieverBuilderWrapper<HybridRetrieverBuilder> {\n    public static final String NAME = \"hybrid\";\n    public static final ParseField FIELDS_FIELD = new ParseField(\"fields\");\n    public static final ParseField QUERY_FIELD = new ParseField(\"query\");\n    public static final ParseField RERANK_FIELD = new ParseField(\"rerank\");",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2004202386",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 125052,
        "pr_file": "x-pack/plugin/rank-rrf/src/main/java/org/elasticsearch/xpack/rank/hybrid/HybridRetrieverBuilder.java",
        "discussion_id": "2004202386",
        "commented_code": "@@ -0,0 +1,373 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License\n+ * 2.0; you may not use this file except in compliance with the Elastic License\n+ * 2.0.\n+ */\n+\n+package org.elasticsearch.xpack.rank.hybrid;\n+\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.elasticsearch.common.xcontent.support.XContentMapValues;\n+import org.elasticsearch.index.query.MatchQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.rank.RankBuilder;\n+import org.elasticsearch.search.retriever.CompoundRetrieverBuilder;\n+import org.elasticsearch.search.retriever.RetrieverBuilder;\n+import org.elasticsearch.search.retriever.RetrieverBuilderWrapper;\n+import org.elasticsearch.search.retriever.RetrieverParserContext;\n+import org.elasticsearch.search.retriever.StandardRetrieverBuilder;\n+import org.elasticsearch.xcontent.ConstructingObjectParser;\n+import org.elasticsearch.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.xcontent.ParseField;\n+import org.elasticsearch.xcontent.XContentBuilder;\n+import org.elasticsearch.xcontent.XContentParseException;\n+import org.elasticsearch.xcontent.XContentParser;\n+import org.elasticsearch.xcontent.support.MapXContentParser;\n+import org.elasticsearch.xpack.inference.rank.textsimilarity.TextSimilarityRankRetrieverBuilder;\n+import org.elasticsearch.xpack.rank.linear.LinearRetrieverBuilder;\n+import org.elasticsearch.xpack.rank.linear.MinMaxScoreNormalizer;\n+import org.elasticsearch.xpack.rank.linear.ScoreNormalizer;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.search.retriever.CompoundRetrieverBuilder.RANK_WINDOW_SIZE_FIELD;\n+import static org.elasticsearch.xcontent.ConstructingObjectParser.constructorArg;\n+import static org.elasticsearch.xcontent.ConstructingObjectParser.optionalConstructorArg;\n+import static org.elasticsearch.xpack.rank.hybrid.QuerySettings.TYPE_FIELD;\n+\n+// TODO:\n+// - Retriever name support\n+\n+public class HybridRetrieverBuilder extends RetrieverBuilderWrapper<HybridRetrieverBuilder> {\n+    public static final String NAME = \"hybrid\";\n+    public static final ParseField FIELDS_FIELD = new ParseField(\"fields\");\n+    public static final ParseField QUERY_FIELD = new ParseField(\"query\");\n+    public static final ParseField RERANK_FIELD = new ParseField(\"rerank\");",
        "comment_created_at": "2025-03-19T20:08:41+00:00",
        "comment_author": "kderusso",
        "comment_body": "I like that we incorporated `rerank` into this POC - I'd also like to see `rule` incorporated as I think business rules will be a critical part of the hybrid retriever. In that vein I wonder if there's something more generic we can do with the retrievers that we call - Something like this, that could be easily extended as we add any additional future retrievers or want more customization. \r\n\r\n```\r\nPOST wiki-index/_search\r\n{\r\n  \"retriever\": {\r\n    \"hybrid\": {\r\n      \"fields\": [\"content\", \"content.semantic\"],\r\n      \"query\": \"foo\",\r\n      \"rank_modifiers\": [\r\n      \"rule\": { \r\n         ... \r\n       },\r\n      \"rerank\": {\r\n        \"inference_id\": \"my-reranker-service\",\r\n        \"field\": \"content\"\r\n      }]\r\n    }\r\n  }\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172738742",
    "pr_number": 128923,
    "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/external/http/retry/BaseResponseHandler.java",
    "created_at": "2025-06-27T19:33:47+00:00",
    "commented_code": "}\n\n    protected Exception buildError(String message, Request request, HttpResult result) {\n        var errorEntityMsg = errorParseFunction.apply(result);\n        return buildError(message, request, result, errorEntityMsg);\n        var errorResponse = errorParseFunction.apply(result);\n        return buildError(message, request, result, errorResponse);\n    }\n\n    protected Exception buildError(String message, Request request, HttpResult result, ErrorResponse errorResponse) {\n        var responseStatusCode = result.response().getStatusLine().getStatusCode();\n        return new ElasticsearchStatusException(\n            errorMessage(message, request, result, errorResponse, responseStatusCode),\n            errorMessage(message, request, errorResponse, responseStatusCode),\n            toRestStatus(responseStatusCode)\n        );\n    }\n\n    protected String errorMessage(String message, Request request, HttpResult result, ErrorResponse errorResponse, int statusCode) {\n    /**\n     * Builds an error for a streaming request with a custom error type.\n     * This method is used when an error response is received from the external service.\n     * Only streaming requests support this format, and it should be used when the error response.\n     *\n     * @param message            the error message to include in the exception\n     * @param request            the request that caused the error\n     * @param result             the HTTP result containing the error response\n     * @param errorResponse      the parsed error response from the HTTP result\n     * @param errorResponseClass the class of the expected error response type\n     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n     */\n    protected UnifiedChatCompletionException buildChatCompletionError(\n        String message,\n        Request request,\n        HttpResult result,\n        ErrorResponse errorResponse,\n        Class<? extends ErrorResponse> errorResponseClass\n    ) {\n        assert request.isStreaming() : \"Only streaming requests support this format\";\n        var statusCode = result.response().getStatusLine().getStatusCode();\n        var errorMessage = errorMessage(message, request, errorResponse, statusCode);\n        var restStatus = toRestStatus(statusCode);\n\n        return buildChatCompletionError(errorResponse, errorMessage, restStatus, errorResponseClass);\n    }\n\n    /**\n     * Builds a {@link UnifiedChatCompletionException} for a streaming request.\n     * This method is used when an error response is received from the external service.\n     * Only streaming requests should use this method.\n     *\n     * @param errorResponse      the error response parsed from the HTTP result\n     * @param errorMessage       the error message to include in the exception\n     * @param restStatus         the REST status code of the response\n     * @param errorResponseClass the class of the expected error response type\n     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n     */\n    protected UnifiedChatCompletionException buildChatCompletionError(\n        ErrorResponse errorResponse,\n        String errorMessage,\n        RestStatus restStatus,\n        Class<? extends ErrorResponse> errorResponseClass\n    ) {\n        if (errorResponseClass.isInstance(errorResponse)) {\n            return buildProviderSpecificChatCompletionError(errorResponse, errorMessage, restStatus);\n        } else {\n            return buildDefaultChatCompletionError(errorResponse, errorMessage, restStatus);\n        }\n    }\n\n    /**\n     * Builds a custom {@link UnifiedChatCompletionException} for a streaming request.\n     * This method is called when a specific error response is found in the HTTP result.\n     * It must be implemented by subclasses to handle specific error response formats.\n     * Only streaming requests should use this method.\n     *\n     * @param errorResponse the error response parsed from the HTTP result\n     * @param errorMessage  the error message to include in the exception\n     * @param restStatus    the REST status code of the response\n     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n     */\n    protected UnifiedChatCompletionException buildProviderSpecificChatCompletionError(\n        ErrorResponse errorResponse,\n        String errorMessage,\n        RestStatus restStatus\n    ) {\n        throw new UnsupportedOperationException(\n            \"Custom error handling is not implemented. Please override buildProviderSpecificChatCompletionError method.\"\n        );\n    }\n\n    /**\n     * Builds a default {@link UnifiedChatCompletionException} for a streaming request.\n     * This method is used when an error response is received but no specific error handling is implemented.\n     * Only streaming requests should use this method.\n     *\n     * @param errorResponse the error response parsed from the HTTP result\n     * @param errorMessage  the error message to include in the exception\n     * @param restStatus    the REST status code of the response\n     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n     */\n    protected UnifiedChatCompletionException buildDefaultChatCompletionError(\n        ErrorResponse errorResponse,\n        String errorMessage,\n        RestStatus restStatus\n    ) {\n        return new UnifiedChatCompletionException(\n            restStatus,\n            errorMessage,\n            createErrorType(errorResponse),\n            restStatus.name().toLowerCase(Locale.ROOT)\n        );\n    }\n\n    /**\n     * Builds a mid-stream error for a streaming request.\n     * This method is used when an error occurs while processing a streaming response.\n     * It must be implemented by subclasses to handle specific error response formats.\n     * Only streaming requests should use this method.\n     *\n     * @param inferenceEntityId the ID of the inference entity\n     * @param message           the error message\n     * @param e                the exception that caused the error, can be null\n     * @return a {@link UnifiedChatCompletionException} representing the mid-stream error\n     */\n    public UnifiedChatCompletionException buildMidStreamChatCompletionError(String inferenceEntityId, String message, Exception e) {\n        throw new UnsupportedOperationException(\n            \"Mid-stream error handling is not implemented. Please override buildMidStreamChatCompletionError method.\"\n        );\n    }\n\n    /**\n     * Builds a mid-stream error for a streaming request with a custom error type.\n     * This method is used when an error occurs while processing a streaming response and allows for custom error handling.\n     * Only streaming requests should use this method.\n     *\n     * @param inferenceEntityId the ID of the inference entity\n     * @param message           the error message\n     * @param e                the exception that caused the error, can be null\n     * @param errorResponseClass the class of the expected error response type\n     * @return a {@link UnifiedChatCompletionException} representing the mid-stream error\n     */\n    protected UnifiedChatCompletionException buildMidStreamChatCompletionError(\n        String inferenceEntityId,\n        String message,\n        Exception e,\n        Class<? extends ErrorResponse> errorResponseClass",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2172738742",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128923,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/external/http/retry/BaseResponseHandler.java",
        "discussion_id": "2172738742",
        "commented_code": "@@ -109,19 +117,230 @@ private void checkForErrorObject(Request request, HttpResult result) {\n     }\n \n     protected Exception buildError(String message, Request request, HttpResult result) {\n-        var errorEntityMsg = errorParseFunction.apply(result);\n-        return buildError(message, request, result, errorEntityMsg);\n+        var errorResponse = errorParseFunction.apply(result);\n+        return buildError(message, request, result, errorResponse);\n     }\n \n     protected Exception buildError(String message, Request request, HttpResult result, ErrorResponse errorResponse) {\n         var responseStatusCode = result.response().getStatusLine().getStatusCode();\n         return new ElasticsearchStatusException(\n-            errorMessage(message, request, result, errorResponse, responseStatusCode),\n+            errorMessage(message, request, errorResponse, responseStatusCode),\n             toRestStatus(responseStatusCode)\n         );\n     }\n \n-    protected String errorMessage(String message, Request request, HttpResult result, ErrorResponse errorResponse, int statusCode) {\n+    /**\n+     * Builds an error for a streaming request with a custom error type.\n+     * This method is used when an error response is received from the external service.\n+     * Only streaming requests support this format, and it should be used when the error response.\n+     *\n+     * @param message            the error message to include in the exception\n+     * @param request            the request that caused the error\n+     * @param result             the HTTP result containing the error response\n+     * @param errorResponse      the parsed error response from the HTTP result\n+     * @param errorResponseClass the class of the expected error response type\n+     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n+     */\n+    protected UnifiedChatCompletionException buildChatCompletionError(\n+        String message,\n+        Request request,\n+        HttpResult result,\n+        ErrorResponse errorResponse,\n+        Class<? extends ErrorResponse> errorResponseClass\n+    ) {\n+        assert request.isStreaming() : \"Only streaming requests support this format\";\n+        var statusCode = result.response().getStatusLine().getStatusCode();\n+        var errorMessage = errorMessage(message, request, errorResponse, statusCode);\n+        var restStatus = toRestStatus(statusCode);\n+\n+        return buildChatCompletionError(errorResponse, errorMessage, restStatus, errorResponseClass);\n+    }\n+\n+    /**\n+     * Builds a {@link UnifiedChatCompletionException} for a streaming request.\n+     * This method is used when an error response is received from the external service.\n+     * Only streaming requests should use this method.\n+     *\n+     * @param errorResponse      the error response parsed from the HTTP result\n+     * @param errorMessage       the error message to include in the exception\n+     * @param restStatus         the REST status code of the response\n+     * @param errorResponseClass the class of the expected error response type\n+     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n+     */\n+    protected UnifiedChatCompletionException buildChatCompletionError(\n+        ErrorResponse errorResponse,\n+        String errorMessage,\n+        RestStatus restStatus,\n+        Class<? extends ErrorResponse> errorResponseClass\n+    ) {\n+        if (errorResponseClass.isInstance(errorResponse)) {\n+            return buildProviderSpecificChatCompletionError(errorResponse, errorMessage, restStatus);\n+        } else {\n+            return buildDefaultChatCompletionError(errorResponse, errorMessage, restStatus);\n+        }\n+    }\n+\n+    /**\n+     * Builds a custom {@link UnifiedChatCompletionException} for a streaming request.\n+     * This method is called when a specific error response is found in the HTTP result.\n+     * It must be implemented by subclasses to handle specific error response formats.\n+     * Only streaming requests should use this method.\n+     *\n+     * @param errorResponse the error response parsed from the HTTP result\n+     * @param errorMessage  the error message to include in the exception\n+     * @param restStatus    the REST status code of the response\n+     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n+     */\n+    protected UnifiedChatCompletionException buildProviderSpecificChatCompletionError(\n+        ErrorResponse errorResponse,\n+        String errorMessage,\n+        RestStatus restStatus\n+    ) {\n+        throw new UnsupportedOperationException(\n+            \"Custom error handling is not implemented. Please override buildProviderSpecificChatCompletionError method.\"\n+        );\n+    }\n+\n+    /**\n+     * Builds a default {@link UnifiedChatCompletionException} for a streaming request.\n+     * This method is used when an error response is received but no specific error handling is implemented.\n+     * Only streaming requests should use this method.\n+     *\n+     * @param errorResponse the error response parsed from the HTTP result\n+     * @param errorMessage  the error message to include in the exception\n+     * @param restStatus    the REST status code of the response\n+     * @return an instance of {@link UnifiedChatCompletionException} with details from the error response\n+     */\n+    protected UnifiedChatCompletionException buildDefaultChatCompletionError(\n+        ErrorResponse errorResponse,\n+        String errorMessage,\n+        RestStatus restStatus\n+    ) {\n+        return new UnifiedChatCompletionException(\n+            restStatus,\n+            errorMessage,\n+            createErrorType(errorResponse),\n+            restStatus.name().toLowerCase(Locale.ROOT)\n+        );\n+    }\n+\n+    /**\n+     * Builds a mid-stream error for a streaming request.\n+     * This method is used when an error occurs while processing a streaming response.\n+     * It must be implemented by subclasses to handle specific error response formats.\n+     * Only streaming requests should use this method.\n+     *\n+     * @param inferenceEntityId the ID of the inference entity\n+     * @param message           the error message\n+     * @param e                the exception that caused the error, can be null\n+     * @return a {@link UnifiedChatCompletionException} representing the mid-stream error\n+     */\n+    public UnifiedChatCompletionException buildMidStreamChatCompletionError(String inferenceEntityId, String message, Exception e) {\n+        throw new UnsupportedOperationException(\n+            \"Mid-stream error handling is not implemented. Please override buildMidStreamChatCompletionError method.\"\n+        );\n+    }\n+\n+    /**\n+     * Builds a mid-stream error for a streaming request with a custom error type.\n+     * This method is used when an error occurs while processing a streaming response and allows for custom error handling.\n+     * Only streaming requests should use this method.\n+     *\n+     * @param inferenceEntityId the ID of the inference entity\n+     * @param message           the error message\n+     * @param e                the exception that caused the error, can be null\n+     * @param errorResponseClass the class of the expected error response type\n+     * @return a {@link UnifiedChatCompletionException} representing the mid-stream error\n+     */\n+    protected UnifiedChatCompletionException buildMidStreamChatCompletionError(\n+        String inferenceEntityId,\n+        String message,\n+        Exception e,\n+        Class<? extends ErrorResponse> errorResponseClass",
        "comment_created_at": "2025-06-27T19:33:47+00:00",
        "comment_author": "jonathan-buttner",
        "comment_body": "Instead of passing in a class here how about we either:\r\n\r\n- Take a function that accepts a string and returns some error class\r\n- Take a builder-like interface that has a method that accepts a string and returns an error class",
        "pr_file_module": null
      }
    ]
  }
]