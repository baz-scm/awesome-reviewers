[
  {
    "discussion_id": "2172022369",
    "pr_number": 130206,
    "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
    "created_at": "2025-06-27T13:12:53+00:00",
    "commented_code": "continue;\n                }\n                float[] neighborCentroid = centroids[neighbor];\n                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n                final float soar;\n                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n                } else {\n                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n                }\n                if (soar < minSoar) {\n                    bestAssignment = neighbor;\n                    minSoar = soar;\n                }\n            }\n\n            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2172022369",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130206,
        "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
        "discussion_id": "2172022369",
        "commented_code": "@@ -207,13 +215,19 @@ private int[] assignSpilled(FloatVectorValues vectors, List<int[]> neighborhoods\n                     continue;\n                 }\n                 float[] neighborCentroid = centroids[neighbor];\n-                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                final float soar;\n+                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n+                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                } else {\n+                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n+                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n+                }\n                 if (soar < minSoar) {\n                     bestAssignment = neighbor;\n                     minSoar = soar;\n                 }\n             }\n-\n+            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
        "comment_created_at": "2025-06-27T13:12:53+00:00",
        "comment_author": "Copilot",
        "comment_body": "Using an assertion to handle the unassigned bestAssignment might fail silently in production if assertions are disabled. Consider explicitly handling this error case (e.g., by throwing an exception) to ensure that assignment failures are caught.\n```suggestion\n            if (bestAssignment == -1) {\n                throw new IllegalStateException(\"Failed to assign soar vector to centroid\");\n            }\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2172025988",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130206,
        "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
        "discussion_id": "2172022369",
        "commented_code": "@@ -207,13 +215,19 @@ private int[] assignSpilled(FloatVectorValues vectors, List<int[]> neighborhoods\n                     continue;\n                 }\n                 float[] neighborCentroid = centroids[neighbor];\n-                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                final float soar;\n+                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n+                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                } else {\n+                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n+                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n+                }\n                 if (soar < minSoar) {\n                     bestAssignment = neighbor;\n                     minSoar = soar;\n                 }\n             }\n-\n+            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
        "comment_created_at": "2025-06-27T13:14:55+00:00",
        "comment_author": "benwtrent",
        "comment_body": "This assert is fine. But we need to make sure that if we do accidentally set an invalid centroid, when going through the assignments later, we check for `-1`",
        "pr_file_module": null
      },
      {
        "comment_id": "2172029264",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130206,
        "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
        "discussion_id": "2172022369",
        "commented_code": "@@ -207,13 +215,19 @@ private int[] assignSpilled(FloatVectorValues vectors, List<int[]> neighborhoods\n                     continue;\n                 }\n                 float[] neighborCentroid = centroids[neighbor];\n-                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                final float soar;\n+                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n+                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                } else {\n+                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n+                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n+                }\n                 if (soar < minSoar) {\n                     bestAssignment = neighbor;\n                     minSoar = soar;\n                 }\n             }\n-\n+            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
        "comment_created_at": "2025-06-27T13:16:41+00:00",
        "comment_author": "iverase",
        "comment_body": "We are doing it as the code is working now, let see if we can add a test\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2172040204",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130206,
        "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
        "discussion_id": "2172022369",
        "commented_code": "@@ -207,13 +215,19 @@ private int[] assignSpilled(FloatVectorValues vectors, List<int[]> neighborhoods\n                     continue;\n                 }\n                 float[] neighborCentroid = centroids[neighbor];\n-                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                final float soar;\n+                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n+                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                } else {\n+                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n+                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n+                }\n                 if (soar < minSoar) {\n                     bestAssignment = neighbor;\n                     minSoar = soar;\n                 }\n             }\n-\n+            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
        "comment_created_at": "2025-06-27T13:22:44+00:00",
        "comment_author": "iverase",
        "comment_body": "We don't really check but the way we create assignments per clusters (which is horrible slow and I want to change it) later on only take valid values so we can put in the array anything that will get ignored. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2172052178",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130206,
        "pr_file": "server/src/main/java/org/elasticsearch/index/codec/vectors/cluster/KMeansLocal.java",
        "discussion_id": "2172022369",
        "commented_code": "@@ -207,13 +215,19 @@ private int[] assignSpilled(FloatVectorValues vectors, List<int[]> neighborhoods\n                     continue;\n                 }\n                 float[] neighborCentroid = centroids[neighbor];\n-                float soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                final float soar;\n+                if (vectorCentroidDist > SOAR_MIN_DISTANCE) {\n+                    soar = ESVectorUtil.soarDistance(vector, neighborCentroid, diffs, soarLambda, vectorCentroidDist);\n+                } else {\n+                    // if the vector is very close to the centroid, we look for the second-nearest centroid\n+                    soar = VectorUtil.squareDistance(vector, neighborCentroid);\n+                }\n                 if (soar < minSoar) {\n                     bestAssignment = neighbor;\n                     minSoar = soar;\n                 }\n             }\n-\n+            assert bestAssignment != -1 : \"Failed to assign soar vector to centroid\";",
        "comment_created_at": "2025-06-27T13:29:00+00:00",
        "comment_author": "iverase",
        "comment_body": "I pushed https://github.com/elastic/elasticsearch/pull/130206/commits/d26103a495bf0f83fbb2d28d1c00df2ad6b4ebe7 that is how I found this issue. We explicitly check for -1 in soar assignments.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1491692056",
    "pr_number": 105558,
    "pr_file": "server/src/main/java/org/elasticsearch/cluster/coordination/NodeJoinExecutor.java",
    "created_at": "2024-02-15T21:27:47+00:00",
    "commented_code": "} else {\n                    try {\n                        CompatibilityVersions compatibilityVersions = nodeJoinTask.compatibilityVersions();\n                        assert systemIndexVersionConsistent(compatibilityVersions.systemIndexMappingsVersion(), compatibilityVersionsMap);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "1491692056",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 105558,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/coordination/NodeJoinExecutor.java",
        "discussion_id": "1491692056",
        "commented_code": "@@ -158,6 +159,7 @@ public ClusterState execute(BatchExecutionContext<JoinTask> batchExecutionContex\n                 } else {\n                     try {\n                         CompatibilityVersions compatibilityVersions = nodeJoinTask.compatibilityVersions();\n+                        assert systemIndexVersionConsistent(compatibilityVersions.systemIndexMappingsVersion(), compatibilityVersionsMap);",
        "comment_created_at": "2024-02-15T21:27:47+00:00",
        "comment_author": "rjernst",
        "comment_body": "Using assert means this won't run in production. Should we also ensure these match regardless of whether asserts are turned on?",
        "pr_file_module": null
      },
      {
        "comment_id": "1491749688",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 105558,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/coordination/NodeJoinExecutor.java",
        "discussion_id": "1491692056",
        "commented_code": "@@ -158,6 +159,7 @@ public ClusterState execute(BatchExecutionContext<JoinTask> batchExecutionContex\n                 } else {\n                     try {\n                         CompatibilityVersions compatibilityVersions = nodeJoinTask.compatibilityVersions();\n+                        assert systemIndexVersionConsistent(compatibilityVersions.systemIndexMappingsVersion(), compatibilityVersionsMap);",
        "comment_created_at": "2024-02-15T22:39:30+00:00",
        "comment_author": "williamrandolph",
        "comment_body": "Definitely -- I put up this PR as a draft so I could run CI, work out a good test case, and figure out what we need to communicate to plugin authors. Once all that's done, I'll put this in an `ensureSystemIndexVersionConsistent` along the lines of the other checks in this block of code.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033704333",
    "pr_number": 122491,
    "pr_file": "modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/CefParser.java",
    "created_at": "2025-04-08T17:24:22+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\npackage org.elasticsearch.ingest.common;\n\nimport org.elasticsearch.common.Strings;\nimport org.elasticsearch.common.network.InetAddresses;\nimport org.elasticsearch.common.network.NetworkAddress;\nimport org.elasticsearch.common.time.DateFormatters;\nimport org.elasticsearch.core.Nullable;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.TemporalAccessor;\nimport java.time.temporal.WeekFields;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static java.time.temporal.ChronoField.DAY_OF_MONTH;\nimport static java.time.temporal.ChronoField.HOUR_OF_DAY;\nimport static java.time.temporal.ChronoField.MINUTE_OF_DAY;\nimport static java.time.temporal.ChronoField.MONTH_OF_YEAR;\nimport static java.time.temporal.ChronoField.NANO_OF_SECOND;\nimport static java.time.temporal.ChronoField.SECOND_OF_DAY;\nimport static java.util.Map.entry;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.DoubleType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.FloatType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.IPType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.IntegerType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.LongType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.MACAddressType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.StringType;\nimport static org.elasticsearch.ingest.common.CefParser.DataType.TimestampType;\n\nfinal class CefParser {\n    private final boolean removeEmptyValues;\n    private final ZoneId timezone;\n\n    CefParser(ZoneId timezone, boolean removeEmptyValues) {\n        this.removeEmptyValues = removeEmptyValues;\n        this.timezone = timezone;\n    }\n\n    private static final Pattern HEADER_PATTERN = Pattern.compile(\"(?:\\\\\\\\\\\\||\\\\\\\\\\\\\\\\|[^|])*?\");\n    private static final Pattern HEADER_NEXT_FIELD_PATTERN = Pattern.compile(\"(\" + HEADER_PATTERN.pattern() + \")\\\\|\");\n    private static final Pattern HEADER_ESCAPE_CAPTURE = Pattern.compile(\"\\\\\\\\([\\\\\\\\|])\");\n\n    // New patterns for extension parsing\n    private static final String EXTENSION_KEY_PATTERN = \"(?:[\\\\w-]+(?:\\\\.[^\\\\.=\\\\s\\\\|\\\\\\\\\\\\[\\\\]]+)*(?:\\\\[[0-9]+\\\\])?(?==))\";\n    private static final Pattern EXTENSION_KEY_ARRAY_CAPTURE = Pattern.compile(\"^([^\\\\[\\\\]]+)((?:\\\\[[0-9]+\\\\])+)$\");\n    private static final String EXTENSION_VALUE_PATTERN = \"(?:[^\\\\s\\\\\\\\]|\\\\\\\\[^|]|\\\\s(?!\" + EXTENSION_KEY_PATTERN + \"=))*\";\n    private static final Pattern EXTENSION_NEXT_KEY_VALUE_PATTERN = Pattern.compile(\n        \"(\" + EXTENSION_KEY_PATTERN + \")=(\" + EXTENSION_VALUE_PATTERN + \")(?:\\\\s+|$)\"\n    );\n\n    // Comprehensive regex pattern to match various MAC address formats\n    private static final String MAC_ADDRESS_REGEX = \"^(\" +\n    // Combined colon and hyphen separated 6-group patterns\n        \"(([0-9A-Fa-f]{2}[:|-]){5}[0-9A-Fa-f]{2})|\" +\n        // Dot-separated 6-group pattern\n        \"([0-9A-Fa-f]{4}\\\\.){2}[0-9A-Fa-f]{4}|\" +\n        // Combined colon and hyphen separated 8-group patterns\n        \"([0-9A-Fa-f]{2}[:|-]){7}[0-9A-Fa-f]{2}|\" +\n        // Dot-separated EUI-64\n        \"([0-9A-Fa-f]{4}\\\\.){3}[0-9A-Fa-f]{4}\" + \")$\";\n\n    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(MAC_ADDRESS_REGEX);\n    private static final int EUI48_HEX_LENGTH = 48 / 4;\n    private static final int EUI64_HEX_LENGTH = 64 / 4;\n    private static final int EUI64_HEX_WITH_SEPARATOR_MAX_LENGTH = EUI64_HEX_LENGTH + EUI64_HEX_LENGTH / 2 - 1;\n    private static final Map<String, String> EXTENSION_VALUE_SANITIZER_REVERSE_MAPPING = Map.ofEntries(\n        entry(\"\\\\\\\\\", \"\\\\\"),\n        entry(\"\\\\=\", \"=\"),\n        entry(\"\\\\\\n\", \"\\n\"),\n        entry(\"\\\\\\r\", \"\\r\")\n    );\n\n    enum DataType {\n        IntegerType,\n        LongType,\n        FloatType,\n        DoubleType,\n        StringType,\n        BooleanType,\n        IPType,\n        MACAddressType,\n        TimestampType\n    }\n\n    private static final Map<String, ExtensionMapping> EXTENSION_MAPPINGS = Map.<String, ExtensionMapping>ofEntries(\n        entry(\"agt\", new ExtensionMapping(\"agentAddress\", IPType, \"agent.ip\")),\n        entry(\"agentDnsDomain\", new ExtensionMapping(\"agentDnsDomain\", StringType, \"agent.name\")),\n        entry(\"ahost\", new ExtensionMapping(\"agentHostName\", StringType, \"agent.name\")),\n        entry(\"aid\", new ExtensionMapping(\"agentId\", StringType, \"agent.id\")),\n        entry(\"amac\", new ExtensionMapping(\"agentMacAddress\", MACAddressType, \"agent.mac\")),\n        entry(\"agentNtDomain\", new ExtensionMapping(\"agentNtDomain\", StringType, null)),\n        entry(\"art\", new ExtensionMapping(\"agentReceiptTime\", TimestampType, \"event.created\")),\n        entry(\"atz\", new ExtensionMapping(\"agentTimeZone\", StringType, null)),\n        entry(\"agentTranslatedAddress\", new ExtensionMapping(\"agentTranslatedAddress\", IPType, null)),\n        entry(\"agentTranslatedZoneExternalID\", new ExtensionMapping(\"agentTranslatedZoneExternalID\", StringType, null)),\n        entry(\"agentTranslatedZoneURI\", new ExtensionMapping(\"agentTranslatedZoneURI\", StringType, null)),\n        entry(\"at\", new ExtensionMapping(\"agentType\", StringType, \"agent.type\")),\n        entry(\"av\", new ExtensionMapping(\"agentVersion\", StringType, \"agent.version\")),\n        entry(\"agentZoneExternalID\", new ExtensionMapping(\"agentZoneExternalID\", StringType, null)),\n        entry(\"agentZoneURI\", new ExtensionMapping(\"agentZoneURI\", StringType, null)),\n        entry(\"app\", new ExtensionMapping(\"applicationProtocol\", StringType, \"network.protocol\")),\n        entry(\"cnt\", new ExtensionMapping(\"baseEventCount\", IntegerType, null)),\n        entry(\"in\", new ExtensionMapping(\"bytesIn\", LongType, \"source.bytes\")),\n        entry(\"out\", new ExtensionMapping(\"bytesOut\", LongType, \"destination.bytes\")),\n        entry(\"customerExternalID\", new ExtensionMapping(\"customerExternalID\", StringType, \"organization.id\")),\n        entry(\"customerURI\", new ExtensionMapping(\"customerURI\", StringType, \"organization.name\")),\n        entry(\"dst\", new ExtensionMapping(\"destinationAddress\", IPType, \"destination.ip\")),\n        entry(\"destinationDnsDomain\", new ExtensionMapping(\"destinationDnsDomain\", StringType, \"destination.registered_domain\")),\n        entry(\"dlat\", new ExtensionMapping(\"destinationGeoLatitude\", DoubleType, \"destination.geo.location.lat\")),\n        entry(\"dlong\", new ExtensionMapping(\"destinationGeoLongitude\", DoubleType, \"destination.geo.location.lon\")),\n        entry(\"dhost\", new ExtensionMapping(\"destinationHostName\", StringType, \"destination.domain\")),\n        entry(\"dmac\", new ExtensionMapping(\"destinationMacAddress\", MACAddressType, \"destination.mac\")),\n        entry(\"dntdom\", new ExtensionMapping(\"destinationNtDomain\", StringType, \"destination.registered_domain\")),\n        entry(\"dpt\", new ExtensionMapping(\"destinationPort\", IntegerType, \"destination.port\")),\n        entry(\"dpid\", new ExtensionMapping(\"destinationProcessId\", LongType, \"destination.process.pid\")),\n        entry(\"dproc\", new ExtensionMapping(\"destinationProcessName\", StringType, \"destination.process.name\")),\n        entry(\"destinationServiceName\", new ExtensionMapping(\"destinationServiceName\", StringType, \"destination.service.name\")),\n        entry(\"destinationTranslatedAddress\", new ExtensionMapping(\"destinationTranslatedAddress\", IPType, \"destination.nat.ip\")),\n        entry(\"destinationTranslatedPort\", new ExtensionMapping(\"destinationTranslatedPort\", IntegerType, \"destination.nat.port\")),\n        entry(\"destinationTranslatedZoneExternalID\", new ExtensionMapping(\"destinationTranslatedZoneExternalID\", StringType, null)),\n        entry(\"destinationTranslatedZoneURI\", new ExtensionMapping(\"destinationTranslatedZoneURI\", StringType, null)),\n        entry(\"duid\", new ExtensionMapping(\"destinationUserId\", StringType, \"destination.user.id\")),\n        entry(\"duser\", new ExtensionMapping(\"destinationUserName\", StringType, \"destination.user.name\")),\n        entry(\"dpriv\", new ExtensionMapping(\"destinationUserPrivileges\", StringType, \"destination.user.group.name\")),\n        entry(\"destinationZoneExternalID\", new ExtensionMapping(\"destinationZoneExternalID\", StringType, null)),\n        entry(\"destinationZoneURI\", new ExtensionMapping(\"destinationZoneURI\", StringType, null)),\n        entry(\"act\", new ExtensionMapping(\"deviceAction\", StringType, \"event.action\")),\n        entry(\"dvc\", new ExtensionMapping(\"deviceAddress\", IPType, \"observer.ip\")),\n        entry(\"cfp1Label\", new ExtensionMapping(\"deviceCustomFloatingPoint1Label\", StringType, null)),\n        entry(\"cfp3Label\", new ExtensionMapping(\"deviceCustomFloatingPoint3Label\", StringType, null)),\n        entry(\"cfp4Label\", new ExtensionMapping(\"deviceCustomFloatingPoint4Label\", StringType, null)),\n        entry(\"deviceCustomDate1\", new ExtensionMapping(\"deviceCustomDate1\", TimestampType, null)),\n        entry(\"deviceCustomDate1Label\", new ExtensionMapping(\"deviceCustomDate1Label\", StringType, null)),\n        entry(\"deviceCustomDate2\", new ExtensionMapping(\"deviceCustomDate2\", TimestampType, null)),\n        entry(\"deviceCustomDate2Label\", new ExtensionMapping(\"deviceCustomDate2Label\", StringType, null)),\n        entry(\"cfp1\", new ExtensionMapping(\"deviceCustomFloatingPoint1\", FloatType, null)),\n        entry(\"cfp2\", new ExtensionMapping(\"deviceCustomFloatingPoint2\", FloatType, null)),\n        entry(\"cfp2Label\", new ExtensionMapping(\"deviceCustomFloatingPoint2Label\", StringType, null)),\n        entry(\"cfp3\", new ExtensionMapping(\"deviceCustomFloatingPoint3\", FloatType, null)),\n        entry(\"cfp4\", new ExtensionMapping(\"deviceCustomFloatingPoint4\", FloatType, null)),\n        entry(\"c6a1\", new ExtensionMapping(\"deviceCustomIPv6Address1\", IPType, null)),\n        entry(\"c6a1Label\", new ExtensionMapping(\"deviceCustomIPv6Address1Label\", StringType, null)),\n        entry(\"c6a2\", new ExtensionMapping(\"deviceCustomIPv6Address2\", IPType, null)),\n        entry(\"c6a2Label\", new ExtensionMapping(\"deviceCustomIPv6Address2Label\", StringType, null)),\n        entry(\"c6a3\", new ExtensionMapping(\"deviceCustomIPv6Address3\", IPType, null)),\n        entry(\"c6a3Label\", new ExtensionMapping(\"deviceCustomIPv6Address3Label\", StringType, null)),\n        entry(\"c6a4\", new ExtensionMapping(\"deviceCustomIPv6Address4\", IPType, null)),\n        entry(\"C6a4Label\", new ExtensionMapping(\"deviceCustomIPv6Address4Label\", StringType, null)),\n        entry(\"cn1\", new ExtensionMapping(\"deviceCustomNumber1\", LongType, null)),\n        entry(\"cn1Label\", new ExtensionMapping(\"deviceCustomNumber1Label\", StringType, null)),\n        entry(\"cn2\", new ExtensionMapping(\"deviceCustomNumber2\", LongType, null)),\n        entry(\"cn2Label\", new ExtensionMapping(\"deviceCustomNumber2Label\", StringType, null)),\n        entry(\"cn3\", new ExtensionMapping(\"deviceCustomNumber3\", LongType, null)),\n        entry(\"cn3Label\", new ExtensionMapping(\"deviceCustomNumber3Label\", StringType, null)),\n        entry(\"cs1\", new ExtensionMapping(\"deviceCustomString1\", StringType, null)),\n        entry(\"cs1Label\", new ExtensionMapping(\"deviceCustomString1Label\", StringType, null)),\n        entry(\"cs2\", new ExtensionMapping(\"deviceCustomString2\", StringType, null)),\n        entry(\"cs2Label\", new ExtensionMapping(\"deviceCustomString2Label\", StringType, null)),\n        entry(\"cs3\", new ExtensionMapping(\"deviceCustomString3\", StringType, null)),\n        entry(\"cs3Label\", new ExtensionMapping(\"deviceCustomString3Label\", StringType, null)),\n        entry(\"cs4\", new ExtensionMapping(\"deviceCustomString4\", StringType, null)),\n        entry(\"cs4Label\", new ExtensionMapping(\"deviceCustomString4Label\", StringType, null)),\n        entry(\"cs5\", new ExtensionMapping(\"deviceCustomString5\", StringType, null)),\n        entry(\"cs5Label\", new ExtensionMapping(\"deviceCustomString5Label\", StringType, null)),\n        entry(\"cs6\", new ExtensionMapping(\"deviceCustomString6\", StringType, null)),\n        entry(\"cs6Label\", new ExtensionMapping(\"deviceCustomString6Label\", StringType, null)),\n        entry(\"deviceDirection\", new ExtensionMapping(\"deviceDirection\", StringType, \"network.direction\")),\n        entry(\"deviceDnsDomain\", new ExtensionMapping(\"deviceDnsDomain\", StringType, \"observer.registered_domain\")),\n        entry(\"cat\", new ExtensionMapping(\"deviceEventCategory\", StringType, null)),\n        entry(\"deviceExternalId\", new ExtensionMapping(\"deviceExternalId\", StringType, \"observer.name\")),\n        entry(\"deviceFacility\", new ExtensionMapping(\"deviceFacility\", LongType, \"log.syslog.facility.code\")),\n        entry(\"dvchost\", new ExtensionMapping(\"deviceHostName\", StringType, \"observer.hostname\")),\n        entry(\"deviceInboundInterface\", new ExtensionMapping(\"deviceInboundInterface\", StringType, \"observer.ingress.interface.name\")),\n        entry(\"dvcmac\", new ExtensionMapping(\"deviceMacAddress\", MACAddressType, \"observer.mac\")),\n        entry(\"deviceNtDomain\", new ExtensionMapping(\"deviceNtDomain\", StringType, null)),\n        entry(\"deviceOutboundInterface\", new ExtensionMapping(\"deviceOutboundInterface\", StringType, \"observer.egress.interface.name\")),\n        entry(\"devicePayloadId\", new ExtensionMapping(\"devicePayloadId\", StringType, \"event.id\")),\n        entry(\"dvcpid\", new ExtensionMapping(\"deviceProcessId\", LongType, \"process.pid\")),\n        entry(\"deviceProcessName\", new ExtensionMapping(\"deviceProcessName\", StringType, \"process.name\")),\n        entry(\"rt\", new ExtensionMapping(\"deviceReceiptTime\", TimestampType, \"@timestamp\")),\n        entry(\"dtz\", new ExtensionMapping(\"deviceTimeZone\", StringType, \"event.timezone\")),\n        entry(\"deviceTranslatedAddress\", new ExtensionMapping(\"deviceTranslatedAddress\", IPType, \"host.nat.ip\")),\n        entry(\"deviceTranslatedZoneExternalID\", new ExtensionMapping(\"deviceTranslatedZoneExternalID\", StringType, null)),\n        entry(\"deviceTranslatedZoneURI\", new ExtensionMapping(\"deviceTranslatedZoneURI\", StringType, null)),\n        entry(\"deviceZoneExternalID\", new ExtensionMapping(\"deviceZoneExternalID\", StringType, null)),\n        entry(\"deviceZoneURI\", new ExtensionMapping(\"deviceZoneURI\", StringType, null)),\n        entry(\"end\", new ExtensionMapping(\"endTime\", TimestampType, \"event.end\")),\n        entry(\"eventId\", new ExtensionMapping(\"eventId\", StringType, \"event.id\")),\n        entry(\"outcome\", new ExtensionMapping(\"eventOutcome\", StringType, \"event.outcome\")),\n        entry(\"externalId\", new ExtensionMapping(\"externalId\", StringType, null)),\n        entry(\"fileCreateTime\", new ExtensionMapping(\"fileCreateTime\", TimestampType, \"file.created\")),\n        entry(\"fileHash\", new ExtensionMapping(\"fileHash\", StringType, \"file.hash\")),\n        entry(\"fileId\", new ExtensionMapping(\"fileId\", StringType, \"file.inode\")),\n        entry(\"fileModificationTime\", new ExtensionMapping(\"fileModificationTime\", TimestampType, \"file.mtime\")),\n        entry(\"flexNumber1\", new ExtensionMapping(\"deviceFlexNumber1\", LongType, null)),\n        entry(\"flexNumber1Label\", new ExtensionMapping(\"deviceFlexNumber1Label\", StringType, null)),\n        entry(\"flexNumber2\", new ExtensionMapping(\"deviceFlexNumber2\", LongType, null)),\n        entry(\"flexNumber2Label\", new ExtensionMapping(\"deviceFlexNumber2Label\", StringType, null)),\n        entry(\"fname\", new ExtensionMapping(\"filename\", StringType, \"file.name\")),\n        entry(\"filePath\", new ExtensionMapping(\"filePath\", StringType, \"file.path\")),\n        entry(\"filePermission\", new ExtensionMapping(\"filePermission\", StringType, \"file.group\")),\n        entry(\"fsize\", new ExtensionMapping(\"fileSize\", LongType, \"file.size\")),\n        entry(\"fileType\", new ExtensionMapping(\"fileType\", StringType, \"file.type\")),\n        entry(\"flexDate1\", new ExtensionMapping(\"flexDate1\", TimestampType, null)),\n        entry(\"flexDate1Label\", new ExtensionMapping(\"flexDate1Label\", StringType, null)),\n        entry(\"flexString1\", new ExtensionMapping(\"flexString1\", StringType, null)),\n        entry(\"flexString2\", new ExtensionMapping(\"flexString2\", StringType, null)),\n        entry(\"flexString1Label\", new ExtensionMapping(\"flexString1Label\", StringType, null)),\n        entry(\"flexString2Label\", new ExtensionMapping(\"flexString2Label\", StringType, null)),\n        entry(\"msg\", new ExtensionMapping(\"message\", StringType, \"message\")),\n        entry(\"oldFileCreateTime\", new ExtensionMapping(\"oldFileCreateTime\", TimestampType, null)),\n        entry(\"oldFileHash\", new ExtensionMapping(\"oldFileHash\", StringType, null)),\n        entry(\"oldFileId\", new ExtensionMapping(\"oldFileId\", StringType, null)),\n        entry(\"oldFileModificationTime\", new ExtensionMapping(\"oldFileModificationTime\", TimestampType, null)),\n        entry(\"oldFileName\", new ExtensionMapping(\"oldFileName\", StringType, null)),\n        entry(\"oldFilePath\", new ExtensionMapping(\"oldFilePath\", StringType, null)),\n        entry(\"oldFilePermission\", new ExtensionMapping(\"oldFilePermission\", StringType, null)),\n        entry(\"oldFileSize\", new ExtensionMapping(\"oldFileSize\", IntegerType, null)),\n        entry(\"oldFileType\", new ExtensionMapping(\"oldFileType\", StringType, null)),\n        entry(\"rawEvent\", new ExtensionMapping(\"rawEvent\", StringType, \"event.original\")),\n        entry(\"reason\", new ExtensionMapping(\"Reason\", StringType, \"event.reason\")),\n        entry(\"requestClientApplication\", new ExtensionMapping(\"requestClientApplication\", StringType, \"user_agent.original\")),\n        entry(\"requestContext\", new ExtensionMapping(\"requestContext\", StringType, \"http.request.referrer\")),\n        entry(\"requestCookies\", new ExtensionMapping(\"requestCookies\", StringType, null)),\n        entry(\"requestMethod\", new ExtensionMapping(\"requestMethod\", StringType, \"http.request.method\")),\n        entry(\"request\", new ExtensionMapping(\"requestUrl\", StringType, \"url.original\")),\n        entry(\"src\", new ExtensionMapping(\"sourceAddress\", IPType, \"source.ip\")),\n        entry(\"sourceDnsDomain\", new ExtensionMapping(\"sourceDnsDomain\", StringType, \"source.domain\")),\n        entry(\"slat\", new ExtensionMapping(\"sourceGeoLatitude\", DoubleType, \"source.geo.location.lat\")),\n        entry(\"slong\", new ExtensionMapping(\"sourceGeoLongitude\", DoubleType, \"source.geo.location.lon\")),\n        entry(\"shost\", new ExtensionMapping(\"sourceHostName\", StringType, \"source.domain\")),\n        entry(\"smac\", new ExtensionMapping(\"sourceMacAddress\", MACAddressType, \"source.mac\")),\n        entry(\"sntdom\", new ExtensionMapping(\"sourceNtDomain\", StringType, \"source.registered_domain\")),\n        entry(\"spt\", new ExtensionMapping(\"sourcePort\", IntegerType, \"source.port\")),\n        entry(\"spid\", new ExtensionMapping(\"sourceProcessId\", LongType, \"source.process.pid\")),\n        entry(\"sproc\", new ExtensionMapping(\"sourceProcessName\", StringType, \"source.process.name\")),\n        entry(\"sourceServiceName\", new ExtensionMapping(\"sourceServiceName\", StringType, \"source.service.name\")),\n        entry(\"sourceTranslatedAddress\", new ExtensionMapping(\"sourceTranslatedAddress\", IPType, \"source.nat.ip\")),\n        entry(\"sourceTranslatedPort\", new ExtensionMapping(\"sourceTranslatedPort\", IntegerType, \"source.nat.port\")),\n        entry(\"sourceTranslatedZoneExternalID\", new ExtensionMapping(\"sourceTranslatedZoneExternalID\", StringType, null)),\n        entry(\"sourceTranslatedZoneURI\", new ExtensionMapping(\"sourceTranslatedZoneURI\", StringType, null)),\n        entry(\"suid\", new ExtensionMapping(\"sourceUserId\", StringType, \"source.user.id\")),\n        entry(\"suser\", new ExtensionMapping(\"sourceUserName\", StringType, \"source.user.name\")),\n        entry(\"spriv\", new ExtensionMapping(\"sourceUserPrivileges\", StringType, \"source.user.group.name\")),\n        entry(\"sourceZoneExternalID\", new ExtensionMapping(\"sourceZoneExternalID\", StringType, null)),\n        entry(\"sourceZoneURI\", new ExtensionMapping(\"sourceZoneURI\", StringType, null)),\n        entry(\"start\", new ExtensionMapping(\"startTime\", TimestampType, \"event.start\")),\n        entry(\"proto\", new ExtensionMapping(\"transportProtocol\", StringType, \"network.transport\")),\n        entry(\"type\", new ExtensionMapping(\"type\", IntegerType, \"event.kind\")),\n        entry(\"catdt\", new ExtensionMapping(\"categoryDeviceType\", StringType, null)),\n        entry(\"mrt\", new ExtensionMapping(\"managerReceiptTime\", TimestampType, \"event.ingested\"))\n    );\n\n    private static final Set<String> ERROR_MESSAGE_INCOMPLETE_CEF_HEADER = Set.of(\"incomplete CEF header\");\n    private static final List<String> TIME_LAYOUTS = List.of(\n        // MMM dd HH:mm:ss.SSS zzz\n        \"MMM dd HH:mm:ss.SSS z\",\n        \"MMM dd HH:mm:ss.SSS Z\",\n        \"MMM dd HH:mm:ss.SSS 'GMT'XX:XX\",\n        // MMM dd HH:mm:sss.SSS\n        \"MMM dd HH:mm:ss.SSS\",\n        // MMM dd HH:mm:ss zzz\n        \"MMM dd HH:mm:ss z\",\n        \"MMM dd HH:mm:ss Z\",\n        \"MMM dd HH:mm:ss 'GMT'XX:XX\",\n        // MMM dd HH:mm:ss\n        \"MMM dd HH:mm:ss\",\n        // MMM dd yyyy HH:mm:ss.SSS zzz\n        \"MMM dd yyyy HH:mm:ss.SSS z\",\n        \"MMM dd yyyy HH:mm:ss.SSS Z\",\n        \"MMM dd yyyy HH:mm:ss.SSS 'GMT'XX:XX\",\n        // MMM dd yyyy HH:mm:ss.SSS\n        \"MMM dd yyyy HH:mm:ss.SSS\",\n        // MMM dd yyyy HH:mm:ss zzz\n        \"MMM dd yyyy HH:mm:ss z\",\n        \"MMM dd yyyy HH:mm:ss Z\",\n        \"MMM dd yyyy HH:mm:ss 'GMT'XX:XX\",\n        // MMM dd yyyy HH:mm:ss\n        \"MMM dd yyyy HH:mm:ss\"\n    );\n\n    private static final List<ChronoField> CHRONO_FIELDS = List.of(\n        NANO_OF_SECOND,\n        SECOND_OF_DAY,\n        MINUTE_OF_DAY,\n        HOUR_OF_DAY,\n        DAY_OF_MONTH,\n        MONTH_OF_YEAR\n    );\n\n    CefEvent process(String cefString) {\n        List<String> headers = new ArrayList<>();\n        Matcher matcher = HEADER_NEXT_FIELD_PATTERN.matcher(cefString);\n        int extensionStart = 0;\n\n        for (int i = 0; i < 7 && matcher.find(); i++) {\n            String field = matcher.group(1);\n            field = HEADER_ESCAPE_CAPTURE.matcher(field).replaceAll(\"$1\");\n            headers.add(field);\n            extensionStart = matcher.end();\n        }\n\n        if (headers.isEmpty() == false && headers.getFirst().startsWith(\"CEF:\")) {\n            CefEvent event = new CefEvent();\n            // Add error message if there are not enough header fields\n            if (headers.size() != 7) {\n                event.addRootMapping(\"error.message\", new HashSet<>(ERROR_MESSAGE_INCOMPLETE_CEF_HEADER));",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2033704333",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 122491,
        "pr_file": "modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/CefParser.java",
        "discussion_id": "2033704333",
        "commented_code": "@@ -0,0 +1,565 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+package org.elasticsearch.ingest.common;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkAddress;\n+import org.elasticsearch.common.time.DateFormatters;\n+import org.elasticsearch.core.Nullable;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.WeekFields;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.time.temporal.ChronoField.DAY_OF_MONTH;\n+import static java.time.temporal.ChronoField.HOUR_OF_DAY;\n+import static java.time.temporal.ChronoField.MINUTE_OF_DAY;\n+import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n+import static java.time.temporal.ChronoField.NANO_OF_SECOND;\n+import static java.time.temporal.ChronoField.SECOND_OF_DAY;\n+import static java.util.Map.entry;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.DoubleType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.FloatType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.IPType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.IntegerType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.LongType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.MACAddressType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.StringType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.TimestampType;\n+\n+final class CefParser {\n+    private final boolean removeEmptyValues;\n+    private final ZoneId timezone;\n+\n+    CefParser(ZoneId timezone, boolean removeEmptyValues) {\n+        this.removeEmptyValues = removeEmptyValues;\n+        this.timezone = timezone;\n+    }\n+\n+    private static final Pattern HEADER_PATTERN = Pattern.compile(\"(?:\\\\\\\\\\\\||\\\\\\\\\\\\\\\\|[^|])*?\");\n+    private static final Pattern HEADER_NEXT_FIELD_PATTERN = Pattern.compile(\"(\" + HEADER_PATTERN.pattern() + \")\\\\|\");\n+    private static final Pattern HEADER_ESCAPE_CAPTURE = Pattern.compile(\"\\\\\\\\([\\\\\\\\|])\");\n+\n+    // New patterns for extension parsing\n+    private static final String EXTENSION_KEY_PATTERN = \"(?:[\\\\w-]+(?:\\\\.[^\\\\.=\\\\s\\\\|\\\\\\\\\\\\[\\\\]]+)*(?:\\\\[[0-9]+\\\\])?(?==))\";\n+    private static final Pattern EXTENSION_KEY_ARRAY_CAPTURE = Pattern.compile(\"^([^\\\\[\\\\]]+)((?:\\\\[[0-9]+\\\\])+)$\");\n+    private static final String EXTENSION_VALUE_PATTERN = \"(?:[^\\\\s\\\\\\\\]|\\\\\\\\[^|]|\\\\s(?!\" + EXTENSION_KEY_PATTERN + \"=))*\";\n+    private static final Pattern EXTENSION_NEXT_KEY_VALUE_PATTERN = Pattern.compile(\n+        \"(\" + EXTENSION_KEY_PATTERN + \")=(\" + EXTENSION_VALUE_PATTERN + \")(?:\\\\s+|$)\"\n+    );\n+\n+    // Comprehensive regex pattern to match various MAC address formats\n+    private static final String MAC_ADDRESS_REGEX = \"^(\" +\n+    // Combined colon and hyphen separated 6-group patterns\n+        \"(([0-9A-Fa-f]{2}[:|-]){5}[0-9A-Fa-f]{2})|\" +\n+        // Dot-separated 6-group pattern\n+        \"([0-9A-Fa-f]{4}\\\\.){2}[0-9A-Fa-f]{4}|\" +\n+        // Combined colon and hyphen separated 8-group patterns\n+        \"([0-9A-Fa-f]{2}[:|-]){7}[0-9A-Fa-f]{2}|\" +\n+        // Dot-separated EUI-64\n+        \"([0-9A-Fa-f]{4}\\\\.){3}[0-9A-Fa-f]{4}\" + \")$\";\n+\n+    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(MAC_ADDRESS_REGEX);\n+    private static final int EUI48_HEX_LENGTH = 48 / 4;\n+    private static final int EUI64_HEX_LENGTH = 64 / 4;\n+    private static final int EUI64_HEX_WITH_SEPARATOR_MAX_LENGTH = EUI64_HEX_LENGTH + EUI64_HEX_LENGTH / 2 - 1;\n+    private static final Map<String, String> EXTENSION_VALUE_SANITIZER_REVERSE_MAPPING = Map.ofEntries(\n+        entry(\"\\\\\\\\\", \"\\\\\"),\n+        entry(\"\\\\=\", \"=\"),\n+        entry(\"\\\\\\n\", \"\\n\"),\n+        entry(\"\\\\\\r\", \"\\r\")\n+    );\n+\n+    enum DataType {\n+        IntegerType,\n+        LongType,\n+        FloatType,\n+        DoubleType,\n+        StringType,\n+        BooleanType,\n+        IPType,\n+        MACAddressType,\n+        TimestampType\n+    }\n+\n+    private static final Map<String, ExtensionMapping> EXTENSION_MAPPINGS = Map.<String, ExtensionMapping>ofEntries(\n+        entry(\"agt\", new ExtensionMapping(\"agentAddress\", IPType, \"agent.ip\")),\n+        entry(\"agentDnsDomain\", new ExtensionMapping(\"agentDnsDomain\", StringType, \"agent.name\")),\n+        entry(\"ahost\", new ExtensionMapping(\"agentHostName\", StringType, \"agent.name\")),\n+        entry(\"aid\", new ExtensionMapping(\"agentId\", StringType, \"agent.id\")),\n+        entry(\"amac\", new ExtensionMapping(\"agentMacAddress\", MACAddressType, \"agent.mac\")),\n+        entry(\"agentNtDomain\", new ExtensionMapping(\"agentNtDomain\", StringType, null)),\n+        entry(\"art\", new ExtensionMapping(\"agentReceiptTime\", TimestampType, \"event.created\")),\n+        entry(\"atz\", new ExtensionMapping(\"agentTimeZone\", StringType, null)),\n+        entry(\"agentTranslatedAddress\", new ExtensionMapping(\"agentTranslatedAddress\", IPType, null)),\n+        entry(\"agentTranslatedZoneExternalID\", new ExtensionMapping(\"agentTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"agentTranslatedZoneURI\", new ExtensionMapping(\"agentTranslatedZoneURI\", StringType, null)),\n+        entry(\"at\", new ExtensionMapping(\"agentType\", StringType, \"agent.type\")),\n+        entry(\"av\", new ExtensionMapping(\"agentVersion\", StringType, \"agent.version\")),\n+        entry(\"agentZoneExternalID\", new ExtensionMapping(\"agentZoneExternalID\", StringType, null)),\n+        entry(\"agentZoneURI\", new ExtensionMapping(\"agentZoneURI\", StringType, null)),\n+        entry(\"app\", new ExtensionMapping(\"applicationProtocol\", StringType, \"network.protocol\")),\n+        entry(\"cnt\", new ExtensionMapping(\"baseEventCount\", IntegerType, null)),\n+        entry(\"in\", new ExtensionMapping(\"bytesIn\", LongType, \"source.bytes\")),\n+        entry(\"out\", new ExtensionMapping(\"bytesOut\", LongType, \"destination.bytes\")),\n+        entry(\"customerExternalID\", new ExtensionMapping(\"customerExternalID\", StringType, \"organization.id\")),\n+        entry(\"customerURI\", new ExtensionMapping(\"customerURI\", StringType, \"organization.name\")),\n+        entry(\"dst\", new ExtensionMapping(\"destinationAddress\", IPType, \"destination.ip\")),\n+        entry(\"destinationDnsDomain\", new ExtensionMapping(\"destinationDnsDomain\", StringType, \"destination.registered_domain\")),\n+        entry(\"dlat\", new ExtensionMapping(\"destinationGeoLatitude\", DoubleType, \"destination.geo.location.lat\")),\n+        entry(\"dlong\", new ExtensionMapping(\"destinationGeoLongitude\", DoubleType, \"destination.geo.location.lon\")),\n+        entry(\"dhost\", new ExtensionMapping(\"destinationHostName\", StringType, \"destination.domain\")),\n+        entry(\"dmac\", new ExtensionMapping(\"destinationMacAddress\", MACAddressType, \"destination.mac\")),\n+        entry(\"dntdom\", new ExtensionMapping(\"destinationNtDomain\", StringType, \"destination.registered_domain\")),\n+        entry(\"dpt\", new ExtensionMapping(\"destinationPort\", IntegerType, \"destination.port\")),\n+        entry(\"dpid\", new ExtensionMapping(\"destinationProcessId\", LongType, \"destination.process.pid\")),\n+        entry(\"dproc\", new ExtensionMapping(\"destinationProcessName\", StringType, \"destination.process.name\")),\n+        entry(\"destinationServiceName\", new ExtensionMapping(\"destinationServiceName\", StringType, \"destination.service.name\")),\n+        entry(\"destinationTranslatedAddress\", new ExtensionMapping(\"destinationTranslatedAddress\", IPType, \"destination.nat.ip\")),\n+        entry(\"destinationTranslatedPort\", new ExtensionMapping(\"destinationTranslatedPort\", IntegerType, \"destination.nat.port\")),\n+        entry(\"destinationTranslatedZoneExternalID\", new ExtensionMapping(\"destinationTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"destinationTranslatedZoneURI\", new ExtensionMapping(\"destinationTranslatedZoneURI\", StringType, null)),\n+        entry(\"duid\", new ExtensionMapping(\"destinationUserId\", StringType, \"destination.user.id\")),\n+        entry(\"duser\", new ExtensionMapping(\"destinationUserName\", StringType, \"destination.user.name\")),\n+        entry(\"dpriv\", new ExtensionMapping(\"destinationUserPrivileges\", StringType, \"destination.user.group.name\")),\n+        entry(\"destinationZoneExternalID\", new ExtensionMapping(\"destinationZoneExternalID\", StringType, null)),\n+        entry(\"destinationZoneURI\", new ExtensionMapping(\"destinationZoneURI\", StringType, null)),\n+        entry(\"act\", new ExtensionMapping(\"deviceAction\", StringType, \"event.action\")),\n+        entry(\"dvc\", new ExtensionMapping(\"deviceAddress\", IPType, \"observer.ip\")),\n+        entry(\"cfp1Label\", new ExtensionMapping(\"deviceCustomFloatingPoint1Label\", StringType, null)),\n+        entry(\"cfp3Label\", new ExtensionMapping(\"deviceCustomFloatingPoint3Label\", StringType, null)),\n+        entry(\"cfp4Label\", new ExtensionMapping(\"deviceCustomFloatingPoint4Label\", StringType, null)),\n+        entry(\"deviceCustomDate1\", new ExtensionMapping(\"deviceCustomDate1\", TimestampType, null)),\n+        entry(\"deviceCustomDate1Label\", new ExtensionMapping(\"deviceCustomDate1Label\", StringType, null)),\n+        entry(\"deviceCustomDate2\", new ExtensionMapping(\"deviceCustomDate2\", TimestampType, null)),\n+        entry(\"deviceCustomDate2Label\", new ExtensionMapping(\"deviceCustomDate2Label\", StringType, null)),\n+        entry(\"cfp1\", new ExtensionMapping(\"deviceCustomFloatingPoint1\", FloatType, null)),\n+        entry(\"cfp2\", new ExtensionMapping(\"deviceCustomFloatingPoint2\", FloatType, null)),\n+        entry(\"cfp2Label\", new ExtensionMapping(\"deviceCustomFloatingPoint2Label\", StringType, null)),\n+        entry(\"cfp3\", new ExtensionMapping(\"deviceCustomFloatingPoint3\", FloatType, null)),\n+        entry(\"cfp4\", new ExtensionMapping(\"deviceCustomFloatingPoint4\", FloatType, null)),\n+        entry(\"c6a1\", new ExtensionMapping(\"deviceCustomIPv6Address1\", IPType, null)),\n+        entry(\"c6a1Label\", new ExtensionMapping(\"deviceCustomIPv6Address1Label\", StringType, null)),\n+        entry(\"c6a2\", new ExtensionMapping(\"deviceCustomIPv6Address2\", IPType, null)),\n+        entry(\"c6a2Label\", new ExtensionMapping(\"deviceCustomIPv6Address2Label\", StringType, null)),\n+        entry(\"c6a3\", new ExtensionMapping(\"deviceCustomIPv6Address3\", IPType, null)),\n+        entry(\"c6a3Label\", new ExtensionMapping(\"deviceCustomIPv6Address3Label\", StringType, null)),\n+        entry(\"c6a4\", new ExtensionMapping(\"deviceCustomIPv6Address4\", IPType, null)),\n+        entry(\"C6a4Label\", new ExtensionMapping(\"deviceCustomIPv6Address4Label\", StringType, null)),\n+        entry(\"cn1\", new ExtensionMapping(\"deviceCustomNumber1\", LongType, null)),\n+        entry(\"cn1Label\", new ExtensionMapping(\"deviceCustomNumber1Label\", StringType, null)),\n+        entry(\"cn2\", new ExtensionMapping(\"deviceCustomNumber2\", LongType, null)),\n+        entry(\"cn2Label\", new ExtensionMapping(\"deviceCustomNumber2Label\", StringType, null)),\n+        entry(\"cn3\", new ExtensionMapping(\"deviceCustomNumber3\", LongType, null)),\n+        entry(\"cn3Label\", new ExtensionMapping(\"deviceCustomNumber3Label\", StringType, null)),\n+        entry(\"cs1\", new ExtensionMapping(\"deviceCustomString1\", StringType, null)),\n+        entry(\"cs1Label\", new ExtensionMapping(\"deviceCustomString1Label\", StringType, null)),\n+        entry(\"cs2\", new ExtensionMapping(\"deviceCustomString2\", StringType, null)),\n+        entry(\"cs2Label\", new ExtensionMapping(\"deviceCustomString2Label\", StringType, null)),\n+        entry(\"cs3\", new ExtensionMapping(\"deviceCustomString3\", StringType, null)),\n+        entry(\"cs3Label\", new ExtensionMapping(\"deviceCustomString3Label\", StringType, null)),\n+        entry(\"cs4\", new ExtensionMapping(\"deviceCustomString4\", StringType, null)),\n+        entry(\"cs4Label\", new ExtensionMapping(\"deviceCustomString4Label\", StringType, null)),\n+        entry(\"cs5\", new ExtensionMapping(\"deviceCustomString5\", StringType, null)),\n+        entry(\"cs5Label\", new ExtensionMapping(\"deviceCustomString5Label\", StringType, null)),\n+        entry(\"cs6\", new ExtensionMapping(\"deviceCustomString6\", StringType, null)),\n+        entry(\"cs6Label\", new ExtensionMapping(\"deviceCustomString6Label\", StringType, null)),\n+        entry(\"deviceDirection\", new ExtensionMapping(\"deviceDirection\", StringType, \"network.direction\")),\n+        entry(\"deviceDnsDomain\", new ExtensionMapping(\"deviceDnsDomain\", StringType, \"observer.registered_domain\")),\n+        entry(\"cat\", new ExtensionMapping(\"deviceEventCategory\", StringType, null)),\n+        entry(\"deviceExternalId\", new ExtensionMapping(\"deviceExternalId\", StringType, \"observer.name\")),\n+        entry(\"deviceFacility\", new ExtensionMapping(\"deviceFacility\", LongType, \"log.syslog.facility.code\")),\n+        entry(\"dvchost\", new ExtensionMapping(\"deviceHostName\", StringType, \"observer.hostname\")),\n+        entry(\"deviceInboundInterface\", new ExtensionMapping(\"deviceInboundInterface\", StringType, \"observer.ingress.interface.name\")),\n+        entry(\"dvcmac\", new ExtensionMapping(\"deviceMacAddress\", MACAddressType, \"observer.mac\")),\n+        entry(\"deviceNtDomain\", new ExtensionMapping(\"deviceNtDomain\", StringType, null)),\n+        entry(\"deviceOutboundInterface\", new ExtensionMapping(\"deviceOutboundInterface\", StringType, \"observer.egress.interface.name\")),\n+        entry(\"devicePayloadId\", new ExtensionMapping(\"devicePayloadId\", StringType, \"event.id\")),\n+        entry(\"dvcpid\", new ExtensionMapping(\"deviceProcessId\", LongType, \"process.pid\")),\n+        entry(\"deviceProcessName\", new ExtensionMapping(\"deviceProcessName\", StringType, \"process.name\")),\n+        entry(\"rt\", new ExtensionMapping(\"deviceReceiptTime\", TimestampType, \"@timestamp\")),\n+        entry(\"dtz\", new ExtensionMapping(\"deviceTimeZone\", StringType, \"event.timezone\")),\n+        entry(\"deviceTranslatedAddress\", new ExtensionMapping(\"deviceTranslatedAddress\", IPType, \"host.nat.ip\")),\n+        entry(\"deviceTranslatedZoneExternalID\", new ExtensionMapping(\"deviceTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"deviceTranslatedZoneURI\", new ExtensionMapping(\"deviceTranslatedZoneURI\", StringType, null)),\n+        entry(\"deviceZoneExternalID\", new ExtensionMapping(\"deviceZoneExternalID\", StringType, null)),\n+        entry(\"deviceZoneURI\", new ExtensionMapping(\"deviceZoneURI\", StringType, null)),\n+        entry(\"end\", new ExtensionMapping(\"endTime\", TimestampType, \"event.end\")),\n+        entry(\"eventId\", new ExtensionMapping(\"eventId\", StringType, \"event.id\")),\n+        entry(\"outcome\", new ExtensionMapping(\"eventOutcome\", StringType, \"event.outcome\")),\n+        entry(\"externalId\", new ExtensionMapping(\"externalId\", StringType, null)),\n+        entry(\"fileCreateTime\", new ExtensionMapping(\"fileCreateTime\", TimestampType, \"file.created\")),\n+        entry(\"fileHash\", new ExtensionMapping(\"fileHash\", StringType, \"file.hash\")),\n+        entry(\"fileId\", new ExtensionMapping(\"fileId\", StringType, \"file.inode\")),\n+        entry(\"fileModificationTime\", new ExtensionMapping(\"fileModificationTime\", TimestampType, \"file.mtime\")),\n+        entry(\"flexNumber1\", new ExtensionMapping(\"deviceFlexNumber1\", LongType, null)),\n+        entry(\"flexNumber1Label\", new ExtensionMapping(\"deviceFlexNumber1Label\", StringType, null)),\n+        entry(\"flexNumber2\", new ExtensionMapping(\"deviceFlexNumber2\", LongType, null)),\n+        entry(\"flexNumber2Label\", new ExtensionMapping(\"deviceFlexNumber2Label\", StringType, null)),\n+        entry(\"fname\", new ExtensionMapping(\"filename\", StringType, \"file.name\")),\n+        entry(\"filePath\", new ExtensionMapping(\"filePath\", StringType, \"file.path\")),\n+        entry(\"filePermission\", new ExtensionMapping(\"filePermission\", StringType, \"file.group\")),\n+        entry(\"fsize\", new ExtensionMapping(\"fileSize\", LongType, \"file.size\")),\n+        entry(\"fileType\", new ExtensionMapping(\"fileType\", StringType, \"file.type\")),\n+        entry(\"flexDate1\", new ExtensionMapping(\"flexDate1\", TimestampType, null)),\n+        entry(\"flexDate1Label\", new ExtensionMapping(\"flexDate1Label\", StringType, null)),\n+        entry(\"flexString1\", new ExtensionMapping(\"flexString1\", StringType, null)),\n+        entry(\"flexString2\", new ExtensionMapping(\"flexString2\", StringType, null)),\n+        entry(\"flexString1Label\", new ExtensionMapping(\"flexString1Label\", StringType, null)),\n+        entry(\"flexString2Label\", new ExtensionMapping(\"flexString2Label\", StringType, null)),\n+        entry(\"msg\", new ExtensionMapping(\"message\", StringType, \"message\")),\n+        entry(\"oldFileCreateTime\", new ExtensionMapping(\"oldFileCreateTime\", TimestampType, null)),\n+        entry(\"oldFileHash\", new ExtensionMapping(\"oldFileHash\", StringType, null)),\n+        entry(\"oldFileId\", new ExtensionMapping(\"oldFileId\", StringType, null)),\n+        entry(\"oldFileModificationTime\", new ExtensionMapping(\"oldFileModificationTime\", TimestampType, null)),\n+        entry(\"oldFileName\", new ExtensionMapping(\"oldFileName\", StringType, null)),\n+        entry(\"oldFilePath\", new ExtensionMapping(\"oldFilePath\", StringType, null)),\n+        entry(\"oldFilePermission\", new ExtensionMapping(\"oldFilePermission\", StringType, null)),\n+        entry(\"oldFileSize\", new ExtensionMapping(\"oldFileSize\", IntegerType, null)),\n+        entry(\"oldFileType\", new ExtensionMapping(\"oldFileType\", StringType, null)),\n+        entry(\"rawEvent\", new ExtensionMapping(\"rawEvent\", StringType, \"event.original\")),\n+        entry(\"reason\", new ExtensionMapping(\"Reason\", StringType, \"event.reason\")),\n+        entry(\"requestClientApplication\", new ExtensionMapping(\"requestClientApplication\", StringType, \"user_agent.original\")),\n+        entry(\"requestContext\", new ExtensionMapping(\"requestContext\", StringType, \"http.request.referrer\")),\n+        entry(\"requestCookies\", new ExtensionMapping(\"requestCookies\", StringType, null)),\n+        entry(\"requestMethod\", new ExtensionMapping(\"requestMethod\", StringType, \"http.request.method\")),\n+        entry(\"request\", new ExtensionMapping(\"requestUrl\", StringType, \"url.original\")),\n+        entry(\"src\", new ExtensionMapping(\"sourceAddress\", IPType, \"source.ip\")),\n+        entry(\"sourceDnsDomain\", new ExtensionMapping(\"sourceDnsDomain\", StringType, \"source.domain\")),\n+        entry(\"slat\", new ExtensionMapping(\"sourceGeoLatitude\", DoubleType, \"source.geo.location.lat\")),\n+        entry(\"slong\", new ExtensionMapping(\"sourceGeoLongitude\", DoubleType, \"source.geo.location.lon\")),\n+        entry(\"shost\", new ExtensionMapping(\"sourceHostName\", StringType, \"source.domain\")),\n+        entry(\"smac\", new ExtensionMapping(\"sourceMacAddress\", MACAddressType, \"source.mac\")),\n+        entry(\"sntdom\", new ExtensionMapping(\"sourceNtDomain\", StringType, \"source.registered_domain\")),\n+        entry(\"spt\", new ExtensionMapping(\"sourcePort\", IntegerType, \"source.port\")),\n+        entry(\"spid\", new ExtensionMapping(\"sourceProcessId\", LongType, \"source.process.pid\")),\n+        entry(\"sproc\", new ExtensionMapping(\"sourceProcessName\", StringType, \"source.process.name\")),\n+        entry(\"sourceServiceName\", new ExtensionMapping(\"sourceServiceName\", StringType, \"source.service.name\")),\n+        entry(\"sourceTranslatedAddress\", new ExtensionMapping(\"sourceTranslatedAddress\", IPType, \"source.nat.ip\")),\n+        entry(\"sourceTranslatedPort\", new ExtensionMapping(\"sourceTranslatedPort\", IntegerType, \"source.nat.port\")),\n+        entry(\"sourceTranslatedZoneExternalID\", new ExtensionMapping(\"sourceTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"sourceTranslatedZoneURI\", new ExtensionMapping(\"sourceTranslatedZoneURI\", StringType, null)),\n+        entry(\"suid\", new ExtensionMapping(\"sourceUserId\", StringType, \"source.user.id\")),\n+        entry(\"suser\", new ExtensionMapping(\"sourceUserName\", StringType, \"source.user.name\")),\n+        entry(\"spriv\", new ExtensionMapping(\"sourceUserPrivileges\", StringType, \"source.user.group.name\")),\n+        entry(\"sourceZoneExternalID\", new ExtensionMapping(\"sourceZoneExternalID\", StringType, null)),\n+        entry(\"sourceZoneURI\", new ExtensionMapping(\"sourceZoneURI\", StringType, null)),\n+        entry(\"start\", new ExtensionMapping(\"startTime\", TimestampType, \"event.start\")),\n+        entry(\"proto\", new ExtensionMapping(\"transportProtocol\", StringType, \"network.transport\")),\n+        entry(\"type\", new ExtensionMapping(\"type\", IntegerType, \"event.kind\")),\n+        entry(\"catdt\", new ExtensionMapping(\"categoryDeviceType\", StringType, null)),\n+        entry(\"mrt\", new ExtensionMapping(\"managerReceiptTime\", TimestampType, \"event.ingested\"))\n+    );\n+\n+    private static final Set<String> ERROR_MESSAGE_INCOMPLETE_CEF_HEADER = Set.of(\"incomplete CEF header\");\n+    private static final List<String> TIME_LAYOUTS = List.of(\n+        // MMM dd HH:mm:ss.SSS zzz\n+        \"MMM dd HH:mm:ss.SSS z\",\n+        \"MMM dd HH:mm:ss.SSS Z\",\n+        \"MMM dd HH:mm:ss.SSS 'GMT'XX:XX\",\n+        // MMM dd HH:mm:sss.SSS\n+        \"MMM dd HH:mm:ss.SSS\",\n+        // MMM dd HH:mm:ss zzz\n+        \"MMM dd HH:mm:ss z\",\n+        \"MMM dd HH:mm:ss Z\",\n+        \"MMM dd HH:mm:ss 'GMT'XX:XX\",\n+        // MMM dd HH:mm:ss\n+        \"MMM dd HH:mm:ss\",\n+        // MMM dd yyyy HH:mm:ss.SSS zzz\n+        \"MMM dd yyyy HH:mm:ss.SSS z\",\n+        \"MMM dd yyyy HH:mm:ss.SSS Z\",\n+        \"MMM dd yyyy HH:mm:ss.SSS 'GMT'XX:XX\",\n+        // MMM dd yyyy HH:mm:ss.SSS\n+        \"MMM dd yyyy HH:mm:ss.SSS\",\n+        // MMM dd yyyy HH:mm:ss zzz\n+        \"MMM dd yyyy HH:mm:ss z\",\n+        \"MMM dd yyyy HH:mm:ss Z\",\n+        \"MMM dd yyyy HH:mm:ss 'GMT'XX:XX\",\n+        // MMM dd yyyy HH:mm:ss\n+        \"MMM dd yyyy HH:mm:ss\"\n+    );\n+\n+    private static final List<ChronoField> CHRONO_FIELDS = List.of(\n+        NANO_OF_SECOND,\n+        SECOND_OF_DAY,\n+        MINUTE_OF_DAY,\n+        HOUR_OF_DAY,\n+        DAY_OF_MONTH,\n+        MONTH_OF_YEAR\n+    );\n+\n+    CefEvent process(String cefString) {\n+        List<String> headers = new ArrayList<>();\n+        Matcher matcher = HEADER_NEXT_FIELD_PATTERN.matcher(cefString);\n+        int extensionStart = 0;\n+\n+        for (int i = 0; i < 7 && matcher.find(); i++) {\n+            String field = matcher.group(1);\n+            field = HEADER_ESCAPE_CAPTURE.matcher(field).replaceAll(\"$1\");\n+            headers.add(field);\n+            extensionStart = matcher.end();\n+        }\n+\n+        if (headers.isEmpty() == false && headers.getFirst().startsWith(\"CEF:\")) {\n+            CefEvent event = new CefEvent();\n+            // Add error message if there are not enough header fields\n+            if (headers.size() != 7) {\n+                event.addRootMapping(\"error.message\", new HashSet<>(ERROR_MESSAGE_INCOMPLETE_CEF_HEADER));",
        "comment_created_at": "2025-04-08T17:24:22+00:00",
        "comment_author": "joegallo",
        "comment_body": "Why does this implementation add an error message and not throw an exception? This doesn't seem in line with the way ingest processing usually handles errors.",
        "pr_file_module": null
      },
      {
        "comment_id": "2034669550",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 122491,
        "pr_file": "modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/CefParser.java",
        "discussion_id": "2033704333",
        "commented_code": "@@ -0,0 +1,565 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+package org.elasticsearch.ingest.common;\n+\n+import org.elasticsearch.common.Strings;\n+import org.elasticsearch.common.network.InetAddresses;\n+import org.elasticsearch.common.network.NetworkAddress;\n+import org.elasticsearch.common.time.DateFormatters;\n+import org.elasticsearch.core.Nullable;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.WeekFields;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static java.time.temporal.ChronoField.DAY_OF_MONTH;\n+import static java.time.temporal.ChronoField.HOUR_OF_DAY;\n+import static java.time.temporal.ChronoField.MINUTE_OF_DAY;\n+import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n+import static java.time.temporal.ChronoField.NANO_OF_SECOND;\n+import static java.time.temporal.ChronoField.SECOND_OF_DAY;\n+import static java.util.Map.entry;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.DoubleType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.FloatType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.IPType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.IntegerType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.LongType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.MACAddressType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.StringType;\n+import static org.elasticsearch.ingest.common.CefParser.DataType.TimestampType;\n+\n+final class CefParser {\n+    private final boolean removeEmptyValues;\n+    private final ZoneId timezone;\n+\n+    CefParser(ZoneId timezone, boolean removeEmptyValues) {\n+        this.removeEmptyValues = removeEmptyValues;\n+        this.timezone = timezone;\n+    }\n+\n+    private static final Pattern HEADER_PATTERN = Pattern.compile(\"(?:\\\\\\\\\\\\||\\\\\\\\\\\\\\\\|[^|])*?\");\n+    private static final Pattern HEADER_NEXT_FIELD_PATTERN = Pattern.compile(\"(\" + HEADER_PATTERN.pattern() + \")\\\\|\");\n+    private static final Pattern HEADER_ESCAPE_CAPTURE = Pattern.compile(\"\\\\\\\\([\\\\\\\\|])\");\n+\n+    // New patterns for extension parsing\n+    private static final String EXTENSION_KEY_PATTERN = \"(?:[\\\\w-]+(?:\\\\.[^\\\\.=\\\\s\\\\|\\\\\\\\\\\\[\\\\]]+)*(?:\\\\[[0-9]+\\\\])?(?==))\";\n+    private static final Pattern EXTENSION_KEY_ARRAY_CAPTURE = Pattern.compile(\"^([^\\\\[\\\\]]+)((?:\\\\[[0-9]+\\\\])+)$\");\n+    private static final String EXTENSION_VALUE_PATTERN = \"(?:[^\\\\s\\\\\\\\]|\\\\\\\\[^|]|\\\\s(?!\" + EXTENSION_KEY_PATTERN + \"=))*\";\n+    private static final Pattern EXTENSION_NEXT_KEY_VALUE_PATTERN = Pattern.compile(\n+        \"(\" + EXTENSION_KEY_PATTERN + \")=(\" + EXTENSION_VALUE_PATTERN + \")(?:\\\\s+|$)\"\n+    );\n+\n+    // Comprehensive regex pattern to match various MAC address formats\n+    private static final String MAC_ADDRESS_REGEX = \"^(\" +\n+    // Combined colon and hyphen separated 6-group patterns\n+        \"(([0-9A-Fa-f]{2}[:|-]){5}[0-9A-Fa-f]{2})|\" +\n+        // Dot-separated 6-group pattern\n+        \"([0-9A-Fa-f]{4}\\\\.){2}[0-9A-Fa-f]{4}|\" +\n+        // Combined colon and hyphen separated 8-group patterns\n+        \"([0-9A-Fa-f]{2}[:|-]){7}[0-9A-Fa-f]{2}|\" +\n+        // Dot-separated EUI-64\n+        \"([0-9A-Fa-f]{4}\\\\.){3}[0-9A-Fa-f]{4}\" + \")$\";\n+\n+    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(MAC_ADDRESS_REGEX);\n+    private static final int EUI48_HEX_LENGTH = 48 / 4;\n+    private static final int EUI64_HEX_LENGTH = 64 / 4;\n+    private static final int EUI64_HEX_WITH_SEPARATOR_MAX_LENGTH = EUI64_HEX_LENGTH + EUI64_HEX_LENGTH / 2 - 1;\n+    private static final Map<String, String> EXTENSION_VALUE_SANITIZER_REVERSE_MAPPING = Map.ofEntries(\n+        entry(\"\\\\\\\\\", \"\\\\\"),\n+        entry(\"\\\\=\", \"=\"),\n+        entry(\"\\\\\\n\", \"\\n\"),\n+        entry(\"\\\\\\r\", \"\\r\")\n+    );\n+\n+    enum DataType {\n+        IntegerType,\n+        LongType,\n+        FloatType,\n+        DoubleType,\n+        StringType,\n+        BooleanType,\n+        IPType,\n+        MACAddressType,\n+        TimestampType\n+    }\n+\n+    private static final Map<String, ExtensionMapping> EXTENSION_MAPPINGS = Map.<String, ExtensionMapping>ofEntries(\n+        entry(\"agt\", new ExtensionMapping(\"agentAddress\", IPType, \"agent.ip\")),\n+        entry(\"agentDnsDomain\", new ExtensionMapping(\"agentDnsDomain\", StringType, \"agent.name\")),\n+        entry(\"ahost\", new ExtensionMapping(\"agentHostName\", StringType, \"agent.name\")),\n+        entry(\"aid\", new ExtensionMapping(\"agentId\", StringType, \"agent.id\")),\n+        entry(\"amac\", new ExtensionMapping(\"agentMacAddress\", MACAddressType, \"agent.mac\")),\n+        entry(\"agentNtDomain\", new ExtensionMapping(\"agentNtDomain\", StringType, null)),\n+        entry(\"art\", new ExtensionMapping(\"agentReceiptTime\", TimestampType, \"event.created\")),\n+        entry(\"atz\", new ExtensionMapping(\"agentTimeZone\", StringType, null)),\n+        entry(\"agentTranslatedAddress\", new ExtensionMapping(\"agentTranslatedAddress\", IPType, null)),\n+        entry(\"agentTranslatedZoneExternalID\", new ExtensionMapping(\"agentTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"agentTranslatedZoneURI\", new ExtensionMapping(\"agentTranslatedZoneURI\", StringType, null)),\n+        entry(\"at\", new ExtensionMapping(\"agentType\", StringType, \"agent.type\")),\n+        entry(\"av\", new ExtensionMapping(\"agentVersion\", StringType, \"agent.version\")),\n+        entry(\"agentZoneExternalID\", new ExtensionMapping(\"agentZoneExternalID\", StringType, null)),\n+        entry(\"agentZoneURI\", new ExtensionMapping(\"agentZoneURI\", StringType, null)),\n+        entry(\"app\", new ExtensionMapping(\"applicationProtocol\", StringType, \"network.protocol\")),\n+        entry(\"cnt\", new ExtensionMapping(\"baseEventCount\", IntegerType, null)),\n+        entry(\"in\", new ExtensionMapping(\"bytesIn\", LongType, \"source.bytes\")),\n+        entry(\"out\", new ExtensionMapping(\"bytesOut\", LongType, \"destination.bytes\")),\n+        entry(\"customerExternalID\", new ExtensionMapping(\"customerExternalID\", StringType, \"organization.id\")),\n+        entry(\"customerURI\", new ExtensionMapping(\"customerURI\", StringType, \"organization.name\")),\n+        entry(\"dst\", new ExtensionMapping(\"destinationAddress\", IPType, \"destination.ip\")),\n+        entry(\"destinationDnsDomain\", new ExtensionMapping(\"destinationDnsDomain\", StringType, \"destination.registered_domain\")),\n+        entry(\"dlat\", new ExtensionMapping(\"destinationGeoLatitude\", DoubleType, \"destination.geo.location.lat\")),\n+        entry(\"dlong\", new ExtensionMapping(\"destinationGeoLongitude\", DoubleType, \"destination.geo.location.lon\")),\n+        entry(\"dhost\", new ExtensionMapping(\"destinationHostName\", StringType, \"destination.domain\")),\n+        entry(\"dmac\", new ExtensionMapping(\"destinationMacAddress\", MACAddressType, \"destination.mac\")),\n+        entry(\"dntdom\", new ExtensionMapping(\"destinationNtDomain\", StringType, \"destination.registered_domain\")),\n+        entry(\"dpt\", new ExtensionMapping(\"destinationPort\", IntegerType, \"destination.port\")),\n+        entry(\"dpid\", new ExtensionMapping(\"destinationProcessId\", LongType, \"destination.process.pid\")),\n+        entry(\"dproc\", new ExtensionMapping(\"destinationProcessName\", StringType, \"destination.process.name\")),\n+        entry(\"destinationServiceName\", new ExtensionMapping(\"destinationServiceName\", StringType, \"destination.service.name\")),\n+        entry(\"destinationTranslatedAddress\", new ExtensionMapping(\"destinationTranslatedAddress\", IPType, \"destination.nat.ip\")),\n+        entry(\"destinationTranslatedPort\", new ExtensionMapping(\"destinationTranslatedPort\", IntegerType, \"destination.nat.port\")),\n+        entry(\"destinationTranslatedZoneExternalID\", new ExtensionMapping(\"destinationTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"destinationTranslatedZoneURI\", new ExtensionMapping(\"destinationTranslatedZoneURI\", StringType, null)),\n+        entry(\"duid\", new ExtensionMapping(\"destinationUserId\", StringType, \"destination.user.id\")),\n+        entry(\"duser\", new ExtensionMapping(\"destinationUserName\", StringType, \"destination.user.name\")),\n+        entry(\"dpriv\", new ExtensionMapping(\"destinationUserPrivileges\", StringType, \"destination.user.group.name\")),\n+        entry(\"destinationZoneExternalID\", new ExtensionMapping(\"destinationZoneExternalID\", StringType, null)),\n+        entry(\"destinationZoneURI\", new ExtensionMapping(\"destinationZoneURI\", StringType, null)),\n+        entry(\"act\", new ExtensionMapping(\"deviceAction\", StringType, \"event.action\")),\n+        entry(\"dvc\", new ExtensionMapping(\"deviceAddress\", IPType, \"observer.ip\")),\n+        entry(\"cfp1Label\", new ExtensionMapping(\"deviceCustomFloatingPoint1Label\", StringType, null)),\n+        entry(\"cfp3Label\", new ExtensionMapping(\"deviceCustomFloatingPoint3Label\", StringType, null)),\n+        entry(\"cfp4Label\", new ExtensionMapping(\"deviceCustomFloatingPoint4Label\", StringType, null)),\n+        entry(\"deviceCustomDate1\", new ExtensionMapping(\"deviceCustomDate1\", TimestampType, null)),\n+        entry(\"deviceCustomDate1Label\", new ExtensionMapping(\"deviceCustomDate1Label\", StringType, null)),\n+        entry(\"deviceCustomDate2\", new ExtensionMapping(\"deviceCustomDate2\", TimestampType, null)),\n+        entry(\"deviceCustomDate2Label\", new ExtensionMapping(\"deviceCustomDate2Label\", StringType, null)),\n+        entry(\"cfp1\", new ExtensionMapping(\"deviceCustomFloatingPoint1\", FloatType, null)),\n+        entry(\"cfp2\", new ExtensionMapping(\"deviceCustomFloatingPoint2\", FloatType, null)),\n+        entry(\"cfp2Label\", new ExtensionMapping(\"deviceCustomFloatingPoint2Label\", StringType, null)),\n+        entry(\"cfp3\", new ExtensionMapping(\"deviceCustomFloatingPoint3\", FloatType, null)),\n+        entry(\"cfp4\", new ExtensionMapping(\"deviceCustomFloatingPoint4\", FloatType, null)),\n+        entry(\"c6a1\", new ExtensionMapping(\"deviceCustomIPv6Address1\", IPType, null)),\n+        entry(\"c6a1Label\", new ExtensionMapping(\"deviceCustomIPv6Address1Label\", StringType, null)),\n+        entry(\"c6a2\", new ExtensionMapping(\"deviceCustomIPv6Address2\", IPType, null)),\n+        entry(\"c6a2Label\", new ExtensionMapping(\"deviceCustomIPv6Address2Label\", StringType, null)),\n+        entry(\"c6a3\", new ExtensionMapping(\"deviceCustomIPv6Address3\", IPType, null)),\n+        entry(\"c6a3Label\", new ExtensionMapping(\"deviceCustomIPv6Address3Label\", StringType, null)),\n+        entry(\"c6a4\", new ExtensionMapping(\"deviceCustomIPv6Address4\", IPType, null)),\n+        entry(\"C6a4Label\", new ExtensionMapping(\"deviceCustomIPv6Address4Label\", StringType, null)),\n+        entry(\"cn1\", new ExtensionMapping(\"deviceCustomNumber1\", LongType, null)),\n+        entry(\"cn1Label\", new ExtensionMapping(\"deviceCustomNumber1Label\", StringType, null)),\n+        entry(\"cn2\", new ExtensionMapping(\"deviceCustomNumber2\", LongType, null)),\n+        entry(\"cn2Label\", new ExtensionMapping(\"deviceCustomNumber2Label\", StringType, null)),\n+        entry(\"cn3\", new ExtensionMapping(\"deviceCustomNumber3\", LongType, null)),\n+        entry(\"cn3Label\", new ExtensionMapping(\"deviceCustomNumber3Label\", StringType, null)),\n+        entry(\"cs1\", new ExtensionMapping(\"deviceCustomString1\", StringType, null)),\n+        entry(\"cs1Label\", new ExtensionMapping(\"deviceCustomString1Label\", StringType, null)),\n+        entry(\"cs2\", new ExtensionMapping(\"deviceCustomString2\", StringType, null)),\n+        entry(\"cs2Label\", new ExtensionMapping(\"deviceCustomString2Label\", StringType, null)),\n+        entry(\"cs3\", new ExtensionMapping(\"deviceCustomString3\", StringType, null)),\n+        entry(\"cs3Label\", new ExtensionMapping(\"deviceCustomString3Label\", StringType, null)),\n+        entry(\"cs4\", new ExtensionMapping(\"deviceCustomString4\", StringType, null)),\n+        entry(\"cs4Label\", new ExtensionMapping(\"deviceCustomString4Label\", StringType, null)),\n+        entry(\"cs5\", new ExtensionMapping(\"deviceCustomString5\", StringType, null)),\n+        entry(\"cs5Label\", new ExtensionMapping(\"deviceCustomString5Label\", StringType, null)),\n+        entry(\"cs6\", new ExtensionMapping(\"deviceCustomString6\", StringType, null)),\n+        entry(\"cs6Label\", new ExtensionMapping(\"deviceCustomString6Label\", StringType, null)),\n+        entry(\"deviceDirection\", new ExtensionMapping(\"deviceDirection\", StringType, \"network.direction\")),\n+        entry(\"deviceDnsDomain\", new ExtensionMapping(\"deviceDnsDomain\", StringType, \"observer.registered_domain\")),\n+        entry(\"cat\", new ExtensionMapping(\"deviceEventCategory\", StringType, null)),\n+        entry(\"deviceExternalId\", new ExtensionMapping(\"deviceExternalId\", StringType, \"observer.name\")),\n+        entry(\"deviceFacility\", new ExtensionMapping(\"deviceFacility\", LongType, \"log.syslog.facility.code\")),\n+        entry(\"dvchost\", new ExtensionMapping(\"deviceHostName\", StringType, \"observer.hostname\")),\n+        entry(\"deviceInboundInterface\", new ExtensionMapping(\"deviceInboundInterface\", StringType, \"observer.ingress.interface.name\")),\n+        entry(\"dvcmac\", new ExtensionMapping(\"deviceMacAddress\", MACAddressType, \"observer.mac\")),\n+        entry(\"deviceNtDomain\", new ExtensionMapping(\"deviceNtDomain\", StringType, null)),\n+        entry(\"deviceOutboundInterface\", new ExtensionMapping(\"deviceOutboundInterface\", StringType, \"observer.egress.interface.name\")),\n+        entry(\"devicePayloadId\", new ExtensionMapping(\"devicePayloadId\", StringType, \"event.id\")),\n+        entry(\"dvcpid\", new ExtensionMapping(\"deviceProcessId\", LongType, \"process.pid\")),\n+        entry(\"deviceProcessName\", new ExtensionMapping(\"deviceProcessName\", StringType, \"process.name\")),\n+        entry(\"rt\", new ExtensionMapping(\"deviceReceiptTime\", TimestampType, \"@timestamp\")),\n+        entry(\"dtz\", new ExtensionMapping(\"deviceTimeZone\", StringType, \"event.timezone\")),\n+        entry(\"deviceTranslatedAddress\", new ExtensionMapping(\"deviceTranslatedAddress\", IPType, \"host.nat.ip\")),\n+        entry(\"deviceTranslatedZoneExternalID\", new ExtensionMapping(\"deviceTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"deviceTranslatedZoneURI\", new ExtensionMapping(\"deviceTranslatedZoneURI\", StringType, null)),\n+        entry(\"deviceZoneExternalID\", new ExtensionMapping(\"deviceZoneExternalID\", StringType, null)),\n+        entry(\"deviceZoneURI\", new ExtensionMapping(\"deviceZoneURI\", StringType, null)),\n+        entry(\"end\", new ExtensionMapping(\"endTime\", TimestampType, \"event.end\")),\n+        entry(\"eventId\", new ExtensionMapping(\"eventId\", StringType, \"event.id\")),\n+        entry(\"outcome\", new ExtensionMapping(\"eventOutcome\", StringType, \"event.outcome\")),\n+        entry(\"externalId\", new ExtensionMapping(\"externalId\", StringType, null)),\n+        entry(\"fileCreateTime\", new ExtensionMapping(\"fileCreateTime\", TimestampType, \"file.created\")),\n+        entry(\"fileHash\", new ExtensionMapping(\"fileHash\", StringType, \"file.hash\")),\n+        entry(\"fileId\", new ExtensionMapping(\"fileId\", StringType, \"file.inode\")),\n+        entry(\"fileModificationTime\", new ExtensionMapping(\"fileModificationTime\", TimestampType, \"file.mtime\")),\n+        entry(\"flexNumber1\", new ExtensionMapping(\"deviceFlexNumber1\", LongType, null)),\n+        entry(\"flexNumber1Label\", new ExtensionMapping(\"deviceFlexNumber1Label\", StringType, null)),\n+        entry(\"flexNumber2\", new ExtensionMapping(\"deviceFlexNumber2\", LongType, null)),\n+        entry(\"flexNumber2Label\", new ExtensionMapping(\"deviceFlexNumber2Label\", StringType, null)),\n+        entry(\"fname\", new ExtensionMapping(\"filename\", StringType, \"file.name\")),\n+        entry(\"filePath\", new ExtensionMapping(\"filePath\", StringType, \"file.path\")),\n+        entry(\"filePermission\", new ExtensionMapping(\"filePermission\", StringType, \"file.group\")),\n+        entry(\"fsize\", new ExtensionMapping(\"fileSize\", LongType, \"file.size\")),\n+        entry(\"fileType\", new ExtensionMapping(\"fileType\", StringType, \"file.type\")),\n+        entry(\"flexDate1\", new ExtensionMapping(\"flexDate1\", TimestampType, null)),\n+        entry(\"flexDate1Label\", new ExtensionMapping(\"flexDate1Label\", StringType, null)),\n+        entry(\"flexString1\", new ExtensionMapping(\"flexString1\", StringType, null)),\n+        entry(\"flexString2\", new ExtensionMapping(\"flexString2\", StringType, null)),\n+        entry(\"flexString1Label\", new ExtensionMapping(\"flexString1Label\", StringType, null)),\n+        entry(\"flexString2Label\", new ExtensionMapping(\"flexString2Label\", StringType, null)),\n+        entry(\"msg\", new ExtensionMapping(\"message\", StringType, \"message\")),\n+        entry(\"oldFileCreateTime\", new ExtensionMapping(\"oldFileCreateTime\", TimestampType, null)),\n+        entry(\"oldFileHash\", new ExtensionMapping(\"oldFileHash\", StringType, null)),\n+        entry(\"oldFileId\", new ExtensionMapping(\"oldFileId\", StringType, null)),\n+        entry(\"oldFileModificationTime\", new ExtensionMapping(\"oldFileModificationTime\", TimestampType, null)),\n+        entry(\"oldFileName\", new ExtensionMapping(\"oldFileName\", StringType, null)),\n+        entry(\"oldFilePath\", new ExtensionMapping(\"oldFilePath\", StringType, null)),\n+        entry(\"oldFilePermission\", new ExtensionMapping(\"oldFilePermission\", StringType, null)),\n+        entry(\"oldFileSize\", new ExtensionMapping(\"oldFileSize\", IntegerType, null)),\n+        entry(\"oldFileType\", new ExtensionMapping(\"oldFileType\", StringType, null)),\n+        entry(\"rawEvent\", new ExtensionMapping(\"rawEvent\", StringType, \"event.original\")),\n+        entry(\"reason\", new ExtensionMapping(\"Reason\", StringType, \"event.reason\")),\n+        entry(\"requestClientApplication\", new ExtensionMapping(\"requestClientApplication\", StringType, \"user_agent.original\")),\n+        entry(\"requestContext\", new ExtensionMapping(\"requestContext\", StringType, \"http.request.referrer\")),\n+        entry(\"requestCookies\", new ExtensionMapping(\"requestCookies\", StringType, null)),\n+        entry(\"requestMethod\", new ExtensionMapping(\"requestMethod\", StringType, \"http.request.method\")),\n+        entry(\"request\", new ExtensionMapping(\"requestUrl\", StringType, \"url.original\")),\n+        entry(\"src\", new ExtensionMapping(\"sourceAddress\", IPType, \"source.ip\")),\n+        entry(\"sourceDnsDomain\", new ExtensionMapping(\"sourceDnsDomain\", StringType, \"source.domain\")),\n+        entry(\"slat\", new ExtensionMapping(\"sourceGeoLatitude\", DoubleType, \"source.geo.location.lat\")),\n+        entry(\"slong\", new ExtensionMapping(\"sourceGeoLongitude\", DoubleType, \"source.geo.location.lon\")),\n+        entry(\"shost\", new ExtensionMapping(\"sourceHostName\", StringType, \"source.domain\")),\n+        entry(\"smac\", new ExtensionMapping(\"sourceMacAddress\", MACAddressType, \"source.mac\")),\n+        entry(\"sntdom\", new ExtensionMapping(\"sourceNtDomain\", StringType, \"source.registered_domain\")),\n+        entry(\"spt\", new ExtensionMapping(\"sourcePort\", IntegerType, \"source.port\")),\n+        entry(\"spid\", new ExtensionMapping(\"sourceProcessId\", LongType, \"source.process.pid\")),\n+        entry(\"sproc\", new ExtensionMapping(\"sourceProcessName\", StringType, \"source.process.name\")),\n+        entry(\"sourceServiceName\", new ExtensionMapping(\"sourceServiceName\", StringType, \"source.service.name\")),\n+        entry(\"sourceTranslatedAddress\", new ExtensionMapping(\"sourceTranslatedAddress\", IPType, \"source.nat.ip\")),\n+        entry(\"sourceTranslatedPort\", new ExtensionMapping(\"sourceTranslatedPort\", IntegerType, \"source.nat.port\")),\n+        entry(\"sourceTranslatedZoneExternalID\", new ExtensionMapping(\"sourceTranslatedZoneExternalID\", StringType, null)),\n+        entry(\"sourceTranslatedZoneURI\", new ExtensionMapping(\"sourceTranslatedZoneURI\", StringType, null)),\n+        entry(\"suid\", new ExtensionMapping(\"sourceUserId\", StringType, \"source.user.id\")),\n+        entry(\"suser\", new ExtensionMapping(\"sourceUserName\", StringType, \"source.user.name\")),\n+        entry(\"spriv\", new ExtensionMapping(\"sourceUserPrivileges\", StringType, \"source.user.group.name\")),\n+        entry(\"sourceZoneExternalID\", new ExtensionMapping(\"sourceZoneExternalID\", StringType, null)),\n+        entry(\"sourceZoneURI\", new ExtensionMapping(\"sourceZoneURI\", StringType, null)),\n+        entry(\"start\", new ExtensionMapping(\"startTime\", TimestampType, \"event.start\")),\n+        entry(\"proto\", new ExtensionMapping(\"transportProtocol\", StringType, \"network.transport\")),\n+        entry(\"type\", new ExtensionMapping(\"type\", IntegerType, \"event.kind\")),\n+        entry(\"catdt\", new ExtensionMapping(\"categoryDeviceType\", StringType, null)),\n+        entry(\"mrt\", new ExtensionMapping(\"managerReceiptTime\", TimestampType, \"event.ingested\"))\n+    );\n+\n+    private static final Set<String> ERROR_MESSAGE_INCOMPLETE_CEF_HEADER = Set.of(\"incomplete CEF header\");\n+    private static final List<String> TIME_LAYOUTS = List.of(\n+        // MMM dd HH:mm:ss.SSS zzz\n+        \"MMM dd HH:mm:ss.SSS z\",\n+        \"MMM dd HH:mm:ss.SSS Z\",\n+        \"MMM dd HH:mm:ss.SSS 'GMT'XX:XX\",\n+        // MMM dd HH:mm:sss.SSS\n+        \"MMM dd HH:mm:ss.SSS\",\n+        // MMM dd HH:mm:ss zzz\n+        \"MMM dd HH:mm:ss z\",\n+        \"MMM dd HH:mm:ss Z\",\n+        \"MMM dd HH:mm:ss 'GMT'XX:XX\",\n+        // MMM dd HH:mm:ss\n+        \"MMM dd HH:mm:ss\",\n+        // MMM dd yyyy HH:mm:ss.SSS zzz\n+        \"MMM dd yyyy HH:mm:ss.SSS z\",\n+        \"MMM dd yyyy HH:mm:ss.SSS Z\",\n+        \"MMM dd yyyy HH:mm:ss.SSS 'GMT'XX:XX\",\n+        // MMM dd yyyy HH:mm:ss.SSS\n+        \"MMM dd yyyy HH:mm:ss.SSS\",\n+        // MMM dd yyyy HH:mm:ss zzz\n+        \"MMM dd yyyy HH:mm:ss z\",\n+        \"MMM dd yyyy HH:mm:ss Z\",\n+        \"MMM dd yyyy HH:mm:ss 'GMT'XX:XX\",\n+        // MMM dd yyyy HH:mm:ss\n+        \"MMM dd yyyy HH:mm:ss\"\n+    );\n+\n+    private static final List<ChronoField> CHRONO_FIELDS = List.of(\n+        NANO_OF_SECOND,\n+        SECOND_OF_DAY,\n+        MINUTE_OF_DAY,\n+        HOUR_OF_DAY,\n+        DAY_OF_MONTH,\n+        MONTH_OF_YEAR\n+    );\n+\n+    CefEvent process(String cefString) {\n+        List<String> headers = new ArrayList<>();\n+        Matcher matcher = HEADER_NEXT_FIELD_PATTERN.matcher(cefString);\n+        int extensionStart = 0;\n+\n+        for (int i = 0; i < 7 && matcher.find(); i++) {\n+            String field = matcher.group(1);\n+            field = HEADER_ESCAPE_CAPTURE.matcher(field).replaceAll(\"$1\");\n+            headers.add(field);\n+            extensionStart = matcher.end();\n+        }\n+\n+        if (headers.isEmpty() == false && headers.getFirst().startsWith(\"CEF:\")) {\n+            CefEvent event = new CefEvent();\n+            // Add error message if there are not enough header fields\n+            if (headers.size() != 7) {\n+                event.addRootMapping(\"error.message\", new HashSet<>(ERROR_MESSAGE_INCOMPLETE_CEF_HEADER));",
        "comment_created_at": "2025-04-09T07:27:13+00:00",
        "comment_author": "bhapas",
        "comment_body": "I followed beats approach for this initially. But I agree that this should just throw exception just like other scenarios. - Fixed in https://github.com/elastic/elasticsearch/pull/122491/commits/ee969db097a7d4dfb50e014975ec524d5dc478af",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1199069767",
    "pr_number": 95941,
    "pr_file": "server/src/main/java/org/elasticsearch/action/support/TimeoutReleasableListener.java",
    "created_at": "2023-05-19T15:03:10+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\npackage org.elasticsearch.action.support;\n\nimport org.elasticsearch.ElasticsearchTimeoutException;\nimport org.elasticsearch.action.ActionListener;\nimport org.elasticsearch.core.Releasable;\nimport org.elasticsearch.core.Releasables;\nimport org.elasticsearch.core.TimeValue;\nimport org.elasticsearch.threadpool.ThreadPool;\n\nimport java.util.Objects;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Supplier;\n\n/**\n * A listener for a {@link Releasable} which races against a timeout, but which does not leak any {@link Releasable} with which it is\n * eventually completed.\n */\npublic class TimeoutReleasableListener implements ActionListener<Releasable> {\n\n    private final Supplier<ActionListener<Releasable>> listenerSupplier;\n    private final Runnable timeoutCanceller;\n\n    public static TimeoutReleasableListener create(\n        ActionListener<Releasable> delegate,\n        TimeValue timeout,\n        ThreadPool threadPool,\n        String timeoutExecutor\n    ) {\n        final var listenerSupplier = readOnce(delegate);\n        return new TimeoutReleasableListener(listenerSupplier, scheduleTimeout(timeout, threadPool, timeoutExecutor, listenerSupplier));\n    }\n\n    private static Supplier<ActionListener<Releasable>> readOnce(ActionListener<Releasable> listener) {\n        final var listenerRef = new AtomicReference<>(ActionListener.assertOnce(listener));\n        return new Supplier<>() {\n            @Override\n            public ActionListener<Releasable> get() {\n                return listenerRef.getAndSet(null);\n            }\n\n            @Override\n            public String toString() {\n                return Objects.toString(listenerRef.get());\n            }\n        };\n    }\n\n    private static Runnable scheduleTimeout(\n        TimeValue timeout,\n        ThreadPool threadPool,\n        String timeoutExecutor,\n        Supplier<ActionListener<Releasable>> listenerSupplier\n    ) {\n        try {\n            final var cancellable = threadPool.schedule(() -> {\n                final var listener = listenerSupplier.get();\n                if (listener != null) {\n                    listener.onFailure(new ElasticsearchTimeoutException(\"timed out after [\" + timeout + \"/\" + timeout.millis() + \"ms]\"));\n                }\n            }, timeout, timeoutExecutor);\n            return () -> {\n                try {\n                    cancellable.cancel();\n                } catch (Exception e) {\n                    // should not happen, we cannot reasonably do anything with an exception here anyway\n                    assert false : e;\n                }\n            };\n        } catch (Exception e) {\n            listenerSupplier.get().onFailure(e);\n            return () -> {};",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "1199069767",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 95941,
        "pr_file": "server/src/main/java/org/elasticsearch/action/support/TimeoutReleasableListener.java",
        "discussion_id": "1199069767",
        "commented_code": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License\n+ * 2.0 and the Server Side Public License, v 1; you may not use this file except\n+ * in compliance with, at your election, the Elastic License 2.0 or the Server\n+ * Side Public License, v 1.\n+ */\n+\n+package org.elasticsearch.action.support;\n+\n+import org.elasticsearch.ElasticsearchTimeoutException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.core.Releasable;\n+import org.elasticsearch.core.Releasables;\n+import org.elasticsearch.core.TimeValue;\n+import org.elasticsearch.threadpool.ThreadPool;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A listener for a {@link Releasable} which races against a timeout, but which does not leak any {@link Releasable} with which it is\n+ * eventually completed.\n+ */\n+public class TimeoutReleasableListener implements ActionListener<Releasable> {\n+\n+    private final Supplier<ActionListener<Releasable>> listenerSupplier;\n+    private final Runnable timeoutCanceller;\n+\n+    public static TimeoutReleasableListener create(\n+        ActionListener<Releasable> delegate,\n+        TimeValue timeout,\n+        ThreadPool threadPool,\n+        String timeoutExecutor\n+    ) {\n+        final var listenerSupplier = readOnce(delegate);\n+        return new TimeoutReleasableListener(listenerSupplier, scheduleTimeout(timeout, threadPool, timeoutExecutor, listenerSupplier));\n+    }\n+\n+    private static Supplier<ActionListener<Releasable>> readOnce(ActionListener<Releasable> listener) {\n+        final var listenerRef = new AtomicReference<>(ActionListener.assertOnce(listener));\n+        return new Supplier<>() {\n+            @Override\n+            public ActionListener<Releasable> get() {\n+                return listenerRef.getAndSet(null);\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return Objects.toString(listenerRef.get());\n+            }\n+        };\n+    }\n+\n+    private static Runnable scheduleTimeout(\n+        TimeValue timeout,\n+        ThreadPool threadPool,\n+        String timeoutExecutor,\n+        Supplier<ActionListener<Releasable>> listenerSupplier\n+    ) {\n+        try {\n+            final var cancellable = threadPool.schedule(() -> {\n+                final var listener = listenerSupplier.get();\n+                if (listener != null) {\n+                    listener.onFailure(new ElasticsearchTimeoutException(\"timed out after [\" + timeout + \"/\" + timeout.millis() + \"ms]\"));\n+                }\n+            }, timeout, timeoutExecutor);\n+            return () -> {\n+                try {\n+                    cancellable.cancel();\n+                } catch (Exception e) {\n+                    // should not happen, we cannot reasonably do anything with an exception here anyway\n+                    assert false : e;\n+                }\n+            };\n+        } catch (Exception e) {\n+            listenerSupplier.get().onFailure(e);\n+            return () -> {};",
        "comment_created_at": "2023-05-19T15:03:10+00:00",
        "comment_author": "henningandersen",
        "comment_body": "I wonder about this. I suppose it only happens during shutdown? Can we perhaps assert that?\r\n\r\nIn case we do get here, it seems odd that we try to block operations afterwards. Probably not a big deal if it only happens on shutdown.\r\n\r\nTo some extent we could just throw here? Or change `TimeoutReleasableListener.create` into a `run` method accepting the code to run under timeout (a `Consumer<ActionListener`), so we can skip calling it when scheduling the timeout fails?",
        "pr_file_module": null
      }
    ]
  }
]