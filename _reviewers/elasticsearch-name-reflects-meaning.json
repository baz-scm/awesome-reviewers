[
  {
    "discussion_id": "2137933778",
    "pr_number": 129146,
    "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/action/IbmWatsonxActionCreator.java",
    "created_at": "2025-06-10T13:38:48+00:00",
    "commented_code": "package org.elasticsearch.xpack.inference.services.ibmwatsonx.action;\n\nimport org.elasticsearch.inference.TaskType;\nimport org.elasticsearch.threadpool.ThreadPool;\nimport org.elasticsearch.xpack.inference.common.Truncator;\nimport org.elasticsearch.xpack.inference.external.action.ExecutableAction;\nimport org.elasticsearch.xpack.inference.external.action.SenderExecutableAction;\nimport org.elasticsearch.xpack.inference.external.action.SingleInputSenderExecutableAction;\nimport org.elasticsearch.xpack.inference.external.http.retry.ResponseHandler;\nimport org.elasticsearch.xpack.inference.external.http.sender.ChatCompletionInput;\nimport org.elasticsearch.xpack.inference.external.http.sender.GenericRequestManager;\nimport org.elasticsearch.xpack.inference.external.http.sender.Sender;\nimport org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\nimport org.elasticsearch.xpack.inference.services.ServiceComponents;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxCompletionResponseHandler;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxEmbeddingsRequestManager;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxRerankRequestManager;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.embeddings.IbmWatsonxEmbeddingsModel;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.request.IbmWatsonxChatCompletionRequest;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.rerank.IbmWatsonxRerankModel;\nimport org.elasticsearch.xpack.inference.services.openai.response.OpenAiChatCompletionResponseEntity;\n\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static org.elasticsearch.core.Strings.format;\nimport static org.elasticsearch.xpack.inference.external.action.ActionUtils.constructFailedToSendRequestMessage;\n\n/**\n * IbmWatsonxActionCreator is responsible for creating executable actions for various models.\n * It implements the IbmWatsonxActionVisitor interface to provide specific implementations.\n */\npublic class IbmWatsonxActionCreator implements IbmWatsonxActionVisitor {\n    private final Sender sender;\n    private final ServiceComponents serviceComponents;\n\n    static final String COMPLETION_REQUEST_TYPE = \"IBM WatsonX completions\";",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2137933778",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/action/IbmWatsonxActionCreator.java",
        "discussion_id": "2137933778",
        "commented_code": "@@ -7,26 +7,48 @@\n \n package org.elasticsearch.xpack.inference.services.ibmwatsonx.action;\n \n+import org.elasticsearch.inference.TaskType;\n import org.elasticsearch.threadpool.ThreadPool;\n import org.elasticsearch.xpack.inference.common.Truncator;\n import org.elasticsearch.xpack.inference.external.action.ExecutableAction;\n import org.elasticsearch.xpack.inference.external.action.SenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.action.SingleInputSenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.http.retry.ResponseHandler;\n+import org.elasticsearch.xpack.inference.external.http.sender.ChatCompletionInput;\n+import org.elasticsearch.xpack.inference.external.http.sender.GenericRequestManager;\n import org.elasticsearch.xpack.inference.external.http.sender.Sender;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n import org.elasticsearch.xpack.inference.services.ServiceComponents;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxCompletionResponseHandler;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxEmbeddingsRequestManager;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxRerankRequestManager;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.embeddings.IbmWatsonxEmbeddingsModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.request.IbmWatsonxChatCompletionRequest;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.rerank.IbmWatsonxRerankModel;\n+import org.elasticsearch.xpack.inference.services.openai.response.OpenAiChatCompletionResponseEntity;\n \n import java.util.Map;\n import java.util.Objects;\n \n+import static org.elasticsearch.core.Strings.format;\n import static org.elasticsearch.xpack.inference.external.action.ActionUtils.constructFailedToSendRequestMessage;\n \n+/**\n+ * IbmWatsonxActionCreator is responsible for creating executable actions for various models.\n+ * It implements the IbmWatsonxActionVisitor interface to provide specific implementations.\n+ */\n public class IbmWatsonxActionCreator implements IbmWatsonxActionVisitor {\n     private final Sender sender;\n     private final ServiceComponents serviceComponents;\n \n+    static final String COMPLETION_REQUEST_TYPE = \"IBM WatsonX completions\";",
        "comment_created_at": "2025-06-10T13:38:48+00:00",
        "comment_author": "Jan-Kazlouski-elastic",
        "comment_body": "After discussion in dms it was found that platform is called Watsonx not WatsonX. Could you please unify naming. Thank you!",
        "pr_file_module": null
      },
      {
        "comment_id": "2145230716",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/action/IbmWatsonxActionCreator.java",
        "discussion_id": "2137933778",
        "commented_code": "@@ -7,26 +7,48 @@\n \n package org.elasticsearch.xpack.inference.services.ibmwatsonx.action;\n \n+import org.elasticsearch.inference.TaskType;\n import org.elasticsearch.threadpool.ThreadPool;\n import org.elasticsearch.xpack.inference.common.Truncator;\n import org.elasticsearch.xpack.inference.external.action.ExecutableAction;\n import org.elasticsearch.xpack.inference.external.action.SenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.action.SingleInputSenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.http.retry.ResponseHandler;\n+import org.elasticsearch.xpack.inference.external.http.sender.ChatCompletionInput;\n+import org.elasticsearch.xpack.inference.external.http.sender.GenericRequestManager;\n import org.elasticsearch.xpack.inference.external.http.sender.Sender;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n import org.elasticsearch.xpack.inference.services.ServiceComponents;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxCompletionResponseHandler;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxEmbeddingsRequestManager;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxRerankRequestManager;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.embeddings.IbmWatsonxEmbeddingsModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.request.IbmWatsonxChatCompletionRequest;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.rerank.IbmWatsonxRerankModel;\n+import org.elasticsearch.xpack.inference.services.openai.response.OpenAiChatCompletionResponseEntity;\n \n import java.util.Map;\n import java.util.Objects;\n \n+import static org.elasticsearch.core.Strings.format;\n import static org.elasticsearch.xpack.inference.external.action.ActionUtils.constructFailedToSendRequestMessage;\n \n+/**\n+ * IbmWatsonxActionCreator is responsible for creating executable actions for various models.\n+ * It implements the IbmWatsonxActionVisitor interface to provide specific implementations.\n+ */\n public class IbmWatsonxActionCreator implements IbmWatsonxActionVisitor {\n     private final Sender sender;\n     private final ServiceComponents serviceComponents;\n \n+    static final String COMPLETION_REQUEST_TYPE = \"IBM WatsonX completions\";",
        "comment_created_at": "2025-06-13T14:32:43+00:00",
        "comment_author": "Evgenii-Kazannik",
        "comment_body": "Thanks. Unified the naming as IBM Watsonx",
        "pr_file_module": null
      },
      {
        "comment_id": "2150308524",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/action/IbmWatsonxActionCreator.java",
        "discussion_id": "2137933778",
        "commented_code": "@@ -7,26 +7,48 @@\n \n package org.elasticsearch.xpack.inference.services.ibmwatsonx.action;\n \n+import org.elasticsearch.inference.TaskType;\n import org.elasticsearch.threadpool.ThreadPool;\n import org.elasticsearch.xpack.inference.common.Truncator;\n import org.elasticsearch.xpack.inference.external.action.ExecutableAction;\n import org.elasticsearch.xpack.inference.external.action.SenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.action.SingleInputSenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.http.retry.ResponseHandler;\n+import org.elasticsearch.xpack.inference.external.http.sender.ChatCompletionInput;\n+import org.elasticsearch.xpack.inference.external.http.sender.GenericRequestManager;\n import org.elasticsearch.xpack.inference.external.http.sender.Sender;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n import org.elasticsearch.xpack.inference.services.ServiceComponents;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxCompletionResponseHandler;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxEmbeddingsRequestManager;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxRerankRequestManager;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.embeddings.IbmWatsonxEmbeddingsModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.request.IbmWatsonxChatCompletionRequest;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.rerank.IbmWatsonxRerankModel;\n+import org.elasticsearch.xpack.inference.services.openai.response.OpenAiChatCompletionResponseEntity;\n \n import java.util.Map;\n import java.util.Objects;\n \n+import static org.elasticsearch.core.Strings.format;\n import static org.elasticsearch.xpack.inference.external.action.ActionUtils.constructFailedToSendRequestMessage;\n \n+/**\n+ * IbmWatsonxActionCreator is responsible for creating executable actions for various models.\n+ * It implements the IbmWatsonxActionVisitor interface to provide specific implementations.\n+ */\n public class IbmWatsonxActionCreator implements IbmWatsonxActionVisitor {\n     private final Sender sender;\n     private final ServiceComponents serviceComponents;\n \n+    static final String COMPLETION_REQUEST_TYPE = \"IBM WatsonX completions\";",
        "comment_created_at": "2025-06-16T15:34:29+00:00",
        "comment_author": "dan-rubinstein",
        "comment_body": "A bit of a nitpick but the platform seems to be called `IBM watsonx` (from [their website](https://www.ibm.com/watsonx)) but this change updates it everywhere to `IBM Watsonx`. Can we keep consistent with IBM's capitalization to avoid confusion?",
        "pr_file_module": null
      },
      {
        "comment_id": "2156393080",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/action/IbmWatsonxActionCreator.java",
        "discussion_id": "2137933778",
        "commented_code": "@@ -7,26 +7,48 @@\n \n package org.elasticsearch.xpack.inference.services.ibmwatsonx.action;\n \n+import org.elasticsearch.inference.TaskType;\n import org.elasticsearch.threadpool.ThreadPool;\n import org.elasticsearch.xpack.inference.common.Truncator;\n import org.elasticsearch.xpack.inference.external.action.ExecutableAction;\n import org.elasticsearch.xpack.inference.external.action.SenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.action.SingleInputSenderExecutableAction;\n+import org.elasticsearch.xpack.inference.external.http.retry.ResponseHandler;\n+import org.elasticsearch.xpack.inference.external.http.sender.ChatCompletionInput;\n+import org.elasticsearch.xpack.inference.external.http.sender.GenericRequestManager;\n import org.elasticsearch.xpack.inference.external.http.sender.Sender;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n import org.elasticsearch.xpack.inference.services.ServiceComponents;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxCompletionResponseHandler;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxEmbeddingsRequestManager;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.IbmWatsonxRerankRequestManager;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.embeddings.IbmWatsonxEmbeddingsModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.request.IbmWatsonxChatCompletionRequest;\n import org.elasticsearch.xpack.inference.services.ibmwatsonx.rerank.IbmWatsonxRerankModel;\n+import org.elasticsearch.xpack.inference.services.openai.response.OpenAiChatCompletionResponseEntity;\n \n import java.util.Map;\n import java.util.Objects;\n \n+import static org.elasticsearch.core.Strings.format;\n import static org.elasticsearch.xpack.inference.external.action.ActionUtils.constructFailedToSendRequestMessage;\n \n+/**\n+ * IbmWatsonxActionCreator is responsible for creating executable actions for various models.\n+ * It implements the IbmWatsonxActionVisitor interface to provide specific implementations.\n+ */\n public class IbmWatsonxActionCreator implements IbmWatsonxActionVisitor {\n     private final Sender sender;\n     private final ServiceComponents serviceComponents;\n \n+    static final String COMPLETION_REQUEST_TYPE = \"IBM WatsonX completions\";",
        "comment_created_at": "2025-06-19T07:59:32+00:00",
        "comment_author": "Evgenii-Kazannik",
        "comment_body": "Sure. I updated it everywhere from IBM Watsonx to IBM watsonx. Thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176564193",
    "pr_number": 129013,
    "pr_file": "server/src/main/java/org/elasticsearch/TransportVersions.java",
    "created_at": "2025-07-01T06:45:32+00:00",
    "commented_code": "public static final TransportVersion ML_INFERENCE_COHERE_API_VERSION = def(9_110_0_00);\n    public static final TransportVersion ESQL_PROFILE_INCLUDE_PLAN = def(9_111_0_00);\n    public static final TransportVersion MAPPINGS_IN_DATA_STREAMS = def(9_112_0_00);\n    public static final TransportVersion LOOKUP_JOIN_MANY_INDICES = def(9_113_0_00);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2176564193",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129013,
        "pr_file": "server/src/main/java/org/elasticsearch/TransportVersions.java",
        "discussion_id": "2176564193",
        "commented_code": "@@ -326,6 +326,7 @@ static TransportVersion def(int id) {\n     public static final TransportVersion ML_INFERENCE_COHERE_API_VERSION = def(9_110_0_00);\n     public static final TransportVersion ESQL_PROFILE_INCLUDE_PLAN = def(9_111_0_00);\n     public static final TransportVersion MAPPINGS_IN_DATA_STREAMS = def(9_112_0_00);\n+    public static final TransportVersion LOOKUP_JOIN_MANY_INDICES = def(9_113_0_00);",
        "comment_created_at": "2025-07-01T06:45:32+00:00",
        "comment_author": "idegtiarenko",
        "comment_body": "This is a bit confusing. Why many indices? Should it be LOOKUP_JOIN_REMOTE_INDICES instead?",
        "pr_file_module": null
      },
      {
        "comment_id": "2177851184",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129013,
        "pr_file": "server/src/main/java/org/elasticsearch/TransportVersions.java",
        "discussion_id": "2176564193",
        "commented_code": "@@ -326,6 +326,7 @@ static TransportVersion def(int id) {\n     public static final TransportVersion ML_INFERENCE_COHERE_API_VERSION = def(9_110_0_00);\n     public static final TransportVersion ESQL_PROFILE_INCLUDE_PLAN = def(9_111_0_00);\n     public static final TransportVersion MAPPINGS_IN_DATA_STREAMS = def(9_112_0_00);\n+    public static final TransportVersion LOOKUP_JOIN_MANY_INDICES = def(9_113_0_00);",
        "comment_created_at": "2025-07-01T15:03:54+00:00",
        "comment_author": "smalyshev",
        "comment_body": "Because 9.1 already supports receiving LOOKUP JOIN from the coordinator, but only if there's a single index. If there is more than one - i.e. if it `lookup_index` resolves to `remote1:lookup_on_remote1,remote2:lookup_on_remote2` (because of aliases), 9.1 remote would not be able to process such request. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2180403269",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129013,
        "pr_file": "server/src/main/java/org/elasticsearch/TransportVersions.java",
        "discussion_id": "2176564193",
        "commented_code": "@@ -326,6 +326,7 @@ static TransportVersion def(int id) {\n     public static final TransportVersion ML_INFERENCE_COHERE_API_VERSION = def(9_110_0_00);\n     public static final TransportVersion ESQL_PROFILE_INCLUDE_PLAN = def(9_111_0_00);\n     public static final TransportVersion MAPPINGS_IN_DATA_STREAMS = def(9_112_0_00);\n+    public static final TransportVersion LOOKUP_JOIN_MANY_INDICES = def(9_113_0_00);",
        "comment_created_at": "2025-07-02T15:47:44+00:00",
        "comment_author": "alex-spies",
        "comment_body": "I find this name confusing as well. Can we rename to `LOOKUP_JOIN_CCS` or so?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178772720",
    "pr_number": 130411,
    "pr_file": "server/src/main/java/org/elasticsearch/cluster/NodeWriteLoad.java",
    "created_at": "2025-07-02T00:43:50+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.cluster;\n\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.io.stream.StreamOutput;\nimport org.elasticsearch.common.io.stream.Writeable;\n\nimport java.io.IOException;\n\n/**\n * Record representing an estimate of a node's write load. The estimation is based on the usage of the node's write thread pool.\n *\n * @param nodeId Node ID.\n * @param totalWriteThreadPoolThreads Total number of threads in the write thread pool.\n * @param percentWriteThreadPoolUtilization Percent of write thread pool threads that are in use, averaged over some period of time.\n * @param maxTaskTimeInWriteQueueMillis How long the oldest task (next to be run) in the write thread pool queue has been queued. Zero if\n *                                      there is no write thread pool queue.\n */\npublic record NodeWriteLoad(\n    String nodeId,\n    int totalWriteThreadPoolThreads,\n    int percentWriteThreadPoolUtilization,\n    long maxTaskTimeInWriteQueueMillis",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2178772720",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130411,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/NodeWriteLoad.java",
        "discussion_id": "2178772720",
        "commented_code": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.cluster;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Record representing an estimate of a node's write load. The estimation is based on the usage of the node's write thread pool.\n+ *\n+ * @param nodeId Node ID.\n+ * @param totalWriteThreadPoolThreads Total number of threads in the write thread pool.\n+ * @param percentWriteThreadPoolUtilization Percent of write thread pool threads that are in use, averaged over some period of time.\n+ * @param maxTaskTimeInWriteQueueMillis How long the oldest task (next to be run) in the write thread pool queue has been queued. Zero if\n+ *                                      there is no write thread pool queue.\n+ */\n+public record NodeWriteLoad(\n+    String nodeId,\n+    int totalWriteThreadPoolThreads,\n+    int percentWriteThreadPoolUtilization,\n+    long maxTaskTimeInWriteQueueMillis",
        "comment_created_at": "2025-07-02T00:43:50+00:00",
        "comment_author": "nicktindall",
        "comment_body": "I think we should indicate that these are averages (e.g. `averageWriteThreadPoolUtilization` and `averageWriteThreadPoolQueueLatency`)\r\n\r\nI used the term \"queue latency\" to describe the time spent waiting in the queue, I'm not married to that term specifically but I think we should try and be consistent (happy to agree on something else).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2168477523",
    "pr_number": 130042,
    "pr_file": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataDataStreamsService.java",
    "created_at": "2025-06-26T08:16:17+00:00",
    "commented_code": "Priority.NORMAL,\n            updateSettingsExecutor\n        );\n        ClusterStateTaskExecutor<UpdateMappingsTask> updateMappingsExecutor = new SimpleBatchedAckListenerTaskExecutor<>() {\n\n            @Override\n            public Tuple<ClusterState, ClusterStateAckListener> executeTask(\n                UpdateMappingsTask updateMappingsTask,\n                ClusterState clusterState\n            ) throws Exception {\n                DataStream dataStream = createDataStreamForUpdatedDataStreamMappings(\n                    updateMappingsTask.projectId,\n                    updateMappingsTask.dataStreamName,\n                    updateMappingsTask.mappingsOverrides,\n                    clusterState\n                );\n                ProjectMetadata projectMetadata = clusterState.metadata().getProject(updateMappingsTask.projectId);\n                ProjectMetadata.Builder projectMetadataBuilder = ProjectMetadata.builder(projectMetadata);\n                projectMetadataBuilder.removeDataStream(updateMappingsTask.dataStreamName);\n                projectMetadataBuilder.put(dataStream);\n                ClusterState updatedClusterState = ClusterState.builder(clusterState).putProjectMetadata(projectMetadataBuilder).build();\n                return new Tuple<>(updatedClusterState, updateMappingsTask);\n            }\n        };\n        this.updateMappingsTaskQueue = clusterService.createTaskQueue(\n            \"update-data-stream-settings\",",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2168477523",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130042,
        "pr_file": "server/src/main/java/org/elasticsearch/cluster/metadata/MetadataDataStreamsService.java",
        "discussion_id": "2168477523",
        "commented_code": "@@ -164,6 +166,32 @@ public Tuple<ClusterState, ClusterStateAckListener> executeTask(\n             Priority.NORMAL,\n             updateSettingsExecutor\n         );\n+        ClusterStateTaskExecutor<UpdateMappingsTask> updateMappingsExecutor = new SimpleBatchedAckListenerTaskExecutor<>() {\n+\n+            @Override\n+            public Tuple<ClusterState, ClusterStateAckListener> executeTask(\n+                UpdateMappingsTask updateMappingsTask,\n+                ClusterState clusterState\n+            ) throws Exception {\n+                DataStream dataStream = createDataStreamForUpdatedDataStreamMappings(\n+                    updateMappingsTask.projectId,\n+                    updateMappingsTask.dataStreamName,\n+                    updateMappingsTask.mappingsOverrides,\n+                    clusterState\n+                );\n+                ProjectMetadata projectMetadata = clusterState.metadata().getProject(updateMappingsTask.projectId);\n+                ProjectMetadata.Builder projectMetadataBuilder = ProjectMetadata.builder(projectMetadata);\n+                projectMetadataBuilder.removeDataStream(updateMappingsTask.dataStreamName);\n+                projectMetadataBuilder.put(dataStream);\n+                ClusterState updatedClusterState = ClusterState.builder(clusterState).putProjectMetadata(projectMetadataBuilder).build();\n+                return new Tuple<>(updatedClusterState, updateMappingsTask);\n+            }\n+        };\n+        this.updateMappingsTaskQueue = clusterService.createTaskQueue(\n+            \"update-data-stream-settings\",",
        "comment_created_at": "2025-06-26T08:16:17+00:00",
        "comment_author": "Copilot",
        "comment_body": "The task queue is named \"update-data-stream-settings\" but is used for mappings; it should be renamed to \"update-data-stream-mappings\" for clarity.\n```suggestion\n            \"update-data-stream-mappings\",\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2128503327",
    "pr_number": 128930,
    "pr_file": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleService.java",
    "created_at": "2025-06-05T10:23:45+00:00",
    "commented_code": "return IndexLifecycleTransition.moveIndexToStep(index, project, newStepKey, nowSupplier, policyRegistry, true);\n    }\n\n    public ClusterState moveClusterStateToPreviouslyFailedStep(ClusterState currentState, String[] indices) {\n        ClusterState newState = currentState;\n    public ProjectMetadata moveClusterStateToPreviouslyFailedStep(ProjectMetadata currentProject, String[] indices) {",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2128503327",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128930,
        "pr_file": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleService.java",
        "discussion_id": "2128503327",
        "commented_code": "@@ -170,12 +170,18 @@ public ProjectMetadata moveIndexToStep(ProjectMetadata project, Index index, Ste\n         return IndexLifecycleTransition.moveIndexToStep(index, project, newStepKey, nowSupplier, policyRegistry, true);\n     }\n \n-    public ClusterState moveClusterStateToPreviouslyFailedStep(ClusterState currentState, String[] indices) {\n-        ClusterState newState = currentState;\n+    public ProjectMetadata moveClusterStateToPreviouslyFailedStep(ProjectMetadata currentProject, String[] indices) {",
        "comment_created_at": "2025-06-05T10:23:45+00:00",
        "comment_author": "PeteGillinElastic",
        "comment_body": "Method naming time again! This definitely shouldn't have `ClusterState` in its name since it deals with `ProjectMetadata`. Arguably, it should be called `moveIndicesToPreviouslyFailedStep`, since it's really the state of the indices that it's acting on. WDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "2129069796",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128930,
        "pr_file": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleService.java",
        "discussion_id": "2128503327",
        "commented_code": "@@ -170,12 +170,18 @@ public ProjectMetadata moveIndexToStep(ProjectMetadata project, Index index, Ste\n         return IndexLifecycleTransition.moveIndexToStep(index, project, newStepKey, nowSupplier, policyRegistry, true);\n     }\n \n-    public ClusterState moveClusterStateToPreviouslyFailedStep(ClusterState currentState, String[] indices) {\n-        ClusterState newState = currentState;\n+    public ProjectMetadata moveClusterStateToPreviouslyFailedStep(ProjectMetadata currentProject, String[] indices) {",
        "comment_created_at": "2025-06-05T14:59:59+00:00",
        "comment_author": "nielsbauman",
        "comment_body": "Ugh, you're absolutely right. I did it for one of these methods, but forgot to do the others. Thanks for raising it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2128506436",
    "pr_number": 128930,
    "pr_file": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleTransition.java",
    "created_at": "2025-06-05T10:24:50+00:00",
    "commented_code": ");\n        }\n\n        return LifecycleExecutionStateUtils.newClusterStateWithLifecycleState(clusterState, idxMeta.getIndex(), failedState.build());\n        return project.withLifecycleState(idxMeta.getIndex(), failedState.build());\n    }\n\n    /**\n     * Move the given index's execution state back to a step that had previously failed. If this is\n     * an automatic retry ({@code isAutomaticRetry}), the retry count is incremented.\n     */\n    static ClusterState moveClusterStateToPreviouslyFailedStep(\n        ClusterState currentState,\n    static ProjectMetadata moveClusterStateToPreviouslyFailedStep(",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2128506436",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 128930,
        "pr_file": "x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleTransition.java",
        "discussion_id": "2128506436",
        "commented_code": "@@ -204,22 +201,21 @@ static ClusterState moveClusterStateToErrorStep(\n             );\n         }\n \n-        return LifecycleExecutionStateUtils.newClusterStateWithLifecycleState(clusterState, idxMeta.getIndex(), failedState.build());\n+        return project.withLifecycleState(idxMeta.getIndex(), failedState.build());\n     }\n \n     /**\n      * Move the given index's execution state back to a step that had previously failed. If this is\n      * an automatic retry ({@code isAutomaticRetry}), the retry count is incremented.\n      */\n-    static ClusterState moveClusterStateToPreviouslyFailedStep(\n-        ClusterState currentState,\n+    static ProjectMetadata moveClusterStateToPreviouslyFailedStep(",
        "comment_created_at": "2025-06-05T10:24:50+00:00",
        "comment_author": "PeteGillinElastic",
        "comment_body": "Method naming again... Should this one be `moveIndexToPreviouslyFailedStep`, like you've done with `moveIndexToErrorStep` above?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2027497237",
    "pr_number": 122491,
    "pr_file": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/CefProcessorTests.java",
    "created_at": "2025-04-03T17:57:14+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.ingest.common;\n\nimport org.elasticsearch.ingest.IngestDocument;\nimport org.elasticsearch.test.ESTestCase;\nimport org.junit.Before;\n\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static java.util.Map.entry;\nimport static org.hamcrest.Matchers.containsInAnyOrder;\nimport static org.hamcrest.Matchers.equalTo;\n\npublic class CefProcessorTests extends ESTestCase {\n\n    private IngestDocument document;\n\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n    }\n\n    public void testExecute() {\n        Map<String, Object> source = new HashMap<>();\n        String message = \"CEF:0|Elastic|Vaporware|1.0.0-alpha|18|Web request|low|eventId=3457 requestMethod=POST \"\n            + \"slat=38.915 slong=-77.511 proto=TCP sourceServiceName=httpd requestContext=https://www.google.com \"\n            + \"src=89.160.20.156 spt=33876 dst=192.168.10.1 dpt=443 request=https://www.example.com/cart\";\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"Elastic\", \"product\", \"Vaporware\", \"version\", \"1.0.0-alpha\", \"event_class_id\", \"18\")\n                        ),\n                        entry(\"name\", \"Web request\"),\n                        entry(\"severity\", \"low\")\n                    )\n                ),\n                entry(\"observer\", Map.of(\"product\", \"Vaporware\", \"vendor\", \"Elastic\", \"version\", \"1.0.0-alpha\")),\n                entry(\"event\", Map.of(\"id\", \"3457\", \"code\", \"18\")),\n                entry(\n                    \"source\",\n                    Map.ofEntries(\n                        entry(\"ip\", \"89.160.20.156\"),\n                        entry(\"port\", 33876),\n                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -77.511, \"lat\", 38.915))),\n                        entry(\"service\", Map.of(\"name\", \"httpd\"))\n                    )\n                ),\n                entry(\"destination\", Map.of(\"ip\", \"192.168.10.1\", \"port\", 443)),\n                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\", \"referrer\", \"https://www.google.com\"))),\n                entry(\"network\", Map.of(\"transport\", \"TCP\")),\n                entry(\"url\", Map.of(\"original\", \"https://www.example.com/cart\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testInvalidCefFormat() {\n        Map<String, Object> invalidSource = new HashMap<>();\n        invalidSource.put(\"message\", \"Invalid CEF message\");\n        IngestDocument invalidIngestDocument = new IngestDocument(\"index\", \"id\", 1L, null, null, invalidSource);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        expectThrows(IllegalArgumentException.class, () -> processor.execute(invalidIngestDocument));\n    }\n\n    public void testStandardMessage() {\n        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n            + \"src=10.0.0.192 dst=12.121.122.82 spt=1232 eventId=1 in=4294967296 out=4294967296\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232, \"bytes\", 4294967296L)),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\", \"bytes\", 4294967296L)),\n                entry(\"event\", Map.of(\"id\", \"1\", \"code\", \"100\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testHeaderOnly() {\n        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEmptyDeviceFields() {\n        String message = \"CEF:0|||1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\"device\", Map.of(\"vendor\", \"\", \"product\", \"\", \"version\", \"1.0\", \"event_class_id\", \"100\")),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"\", \"vendor\", \"\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEscapedPipeInHeader() {\n        String message = \"CEF:26|security|threat\\\\|->manager|1.0|100|\"\n            + \"trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threat|->manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEqualsSignInHeader() {\n        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEmptyExtensionValue() {\n        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst= spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testLeadingWhitespace() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10| src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEscapedPipeInExtension() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this\\\\|has an escaped pipe\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        expectThrows(IllegalArgumentException.class, () -> processor.execute(document));\n    }\n\n    public void testPipeInMessage() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this|has a pipe\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\"),\n                        entry(\"extensions\", Map.of(\"moo\", \"this|has a pipe\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEqualsInMessage() {\n        String message =\n            \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this =has = equals\\\\= dst=12.121.122.82 spt=1232\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\"),\n                        entry(\"extensions\", Map.of(\"moo\", \"this =has = equals=\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"source\", Map.of(\"port\", 1232)),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testEscapesInExtension() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|msg=a+b\\\\=c x=c\\\\\\\\d\\\\=z\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\"),\n                        entry(\"extensions\", Map.of(\"x\", \"c\\\\d=z\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"message\", \"a+b=c\")\n            )\n        );\n    }\n\n    public void testMalformedExtensionEscape() {\n        String message = \"CEF:0|FooBar|Web Gateway|1.2.3.45.67|200|Success|2|rt=Sep 07 2018 14:50:39 cat=Access Log dst=1.1.1.1 \"\n            + \"dhost=foo.example.com suser=redacted src=2.2.2.2 requestMethod=POST request='https://foo.example.com/bar/bingo/1' \"\n            + \"requestClientApplication='Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test=' cs1= cs1Label=Foo Bar\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"FooBar\", \"product\", \"Web Gateway\", \"version\", \"1.2.3.45.67\", \"event_class_id\", \"200\")\n                        ),\n                        entry(\"name\", \"Success\"),\n                        entry(\"severity\", \"2\"),\n                        entry(\"extensions\", Map.of(\"deviceCustomString1Label\", \"Foo Bar\", \"deviceEventCategory\", \"Access Log\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"200\")),\n                entry(\"observer\", Map.of(\"product\", \"Web Gateway\", \"vendor\", \"FooBar\", \"version\", \"1.2.3.45.67\")),\n                entry(\"@timestamp\", ZonedDateTime.parse(\"2018-09-07T14:50:39Z\")),\n                entry(\"destination\", Map.of(\"ip\", \"1.1.1.1\", \"domain\", \"foo.example.com\")),\n                entry(\"source\", Map.of(\"ip\", \"2.2.2.2\", \"user\", Map.of(\"name\", \"redacted\"))),\n                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\"))),\n                entry(\"url\", Map.of(\"original\", \"'https://foo.example.com/bar/bingo/1'\")),\n                entry(\"user_agent\", Map.of(\"original\", \"'Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test='\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testMultipleMalformedExtensionValues() {\n        String message = \"CEF:0|vendor|product|version|event_id|name|Very-High| \"\n            + \"msg=Hello World error=Failed because id==old_id user=root angle=106.7<=180\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"vendor\", \"product\", \"product\", \"version\", \"version\", \"event_class_id\", \"event_id\")\n                        ),\n                        entry(\"name\", \"name\"),\n                        entry(\"severity\", \"Very-High\"),\n                        entry(\"extensions\", Map.of(\"id\", \"=old_id\", \"user\", \"root\", \"angle\", \"106.7<=180\", \"error\", \"Failed because\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"event_id\")),\n                entry(\"observer\", Map.of(\"product\", \"product\", \"vendor\", \"vendor\", \"version\", \"version\")),\n                entry(\"message\", \"Hello World\")\n            )\n        );\n    }\n\n    public void testPaddedMessage() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|spt=1232 \"\n            + \"msg=Trailing space in non-final extensions is  preserved    src=10.0.0.192 \";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"message is padded\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n                entry(\"message\", \"Trailing space in non-final extensions is  preserved\")\n            )\n        );\n    }\n\n    public void testCrlfMessage() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n            + \"spt=1232 msg=Trailing space in final extensions is not preserved\\t \\r\\ndpt=1234\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"message is padded\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"port\", 1232)),\n                entry(\"message\", \"Trailing space in final extensions is not preserved\"),\n                entry(\"destination\", Map.of(\"port\", 1234))\n            )\n        );\n    }\n\n    public void testTabMessage() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n            + \"spt=1232 msg=Tabs\\tand\\rcontrol\\ncharacters are preserved\\t src=127.0.0.1\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"message is padded\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n                entry(\"message\", \"Tabs\\tand\\rcontrol\\ncharacters are preserved\")\n            )\n        );\n    }\n\n    public void testTabNoSepMessage() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|message has tabs|10|spt=1232 msg=Tab is not a separator\\tsrc=127.0.0.1\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"message has tabs\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n                entry(\"message\", \"Tab is not a separator\")\n            )\n        );\n    }\n\n    public void testEscapedMessage() {\n        String message = \"CEF:0|security\\\\compliance|threat\\\\|->manager|1.0|100|message contains escapes|10|\"\n            + \"spt=1232 msg=Newlines in messages\\\\\\nare allowed.\\\\\\r\\\\\\nAnd so are carriage feeds\\\\\\\\newlines\\\\\\\\\\\\=. dpt=4432\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.ofEntries(\n                                entry(\"vendor\", \"security\\\\compliance\"),\n                                entry(\"product\", \"threat|->manager\"),\n                                entry(\"version\", \"1.0\"),\n                                entry(\"event_class_id\", \"100\")\n                            )\n                        ),\n                        entry(\"name\", \"message contains escapes\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\\\\compliance\", \"version\", \"1.0\")),\n                entry(\"source\", Map.of(\"port\", 1232)),\n                entry(\"message\", \"Newlines in messages\\nare allowed.\\r\\nAnd so are carriage feeds\\\\newlines\\\\=.\"),\n                entry(\"destination\", Map.of(\"port\", 4432))\n            )\n        );\n    }\n\n    public void testTruncatedHeader() {\n        String message = \"CEF:0|SentinelOne|Mgmt|activityID=1111111111111111111 activityType=3505 \"\n            + \"siteId=None siteName=None accountId=1222222222222222222 accountName=foo-bar mdr notificationScope=ACCOUNT\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\"device\", Map.of(\"vendor\", \"SentinelOne\", \"product\", \"Mgmt\")),\n                        entry(\n                            \"extensions\",\n                            Map.ofEntries(\n                                entry(\"activityID\", \"1111111111111111111\"),\n                                entry(\"activityType\", \"3505\"),\n                                entry(\"siteId\", \"None\"),\n                                entry(\"siteName\", \"None\"),\n                                entry(\"accountId\", \"1222222222222222222\"),\n                                entry(\"accountName\", \"foo-bar mdr\"),\n                                entry(\"notificationScope\", \"ACCOUNT\")\n                            )\n                        )\n                    )\n                ),\n                entry(\"observer\", Map.of(\"product\", \"Mgmt\", \"vendor\", \"SentinelOne\")),\n                entry(\"message\", message),\n                entry(\"error\", Map.of(\"message\", Set.of(\"incomplete CEF header\")))\n            )\n        );\n    }\n\n    public void testIgnoreEmptyValuesInExtension() {\n        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src= dst=12.121.122.82 spt=\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\")\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testHyphenInExtensionKey() {\n        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|Some-Key=123456\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"26\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\"),\n                        entry(\"extensions\", Map.of(\"Some-Key\", \"123456\"))\n                    )\n                ),\n                entry(\"event\", Map.of(\"code\", \"100\")),\n                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n                entry(\"message\", message)\n            )\n        );\n    }\n\n    public void testAllFieldsInExtension() {\n        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n            + \"agt=192.168.0.1 agentDnsDomain=example.com ahost=agentHost aid=agentId amac=00:0a:95:9d:68:16 agentNtDomain=example.org \"\n            + \"art=1622547800000 atz=UTC agentTranslatedAddress=10.0.0.1 agentTranslatedZoneExternalID=ext123 agentTranslatedZoneURI=uri \"\n            + \"at=agentType av=1.0 agentZoneExternalID=zoneExtId agentZoneURI=zoneUri app=HTTP cnt=1234 in=5678 out=91011 \"\n            + \"customerExternalID=custExtId customerURI=custUri dst=192.168.0.2 dlat=37.7749 dlong=-122.4194 \"\n            + \"dhost=destHost dmac=00:0a:95:9d:68:16 dntdom=destNtDomain dpt=80 dpid=1234 \"\n            + \"dproc=destProc destinationServiceName=destService \"\n            + \"destinationTranslatedAddress=10.0.0.2 destinationTranslatedPort=8080 destinationTranslatedZoneExternalID=destExtId \"\n            + \"destinationTranslatedZoneURI=destUri duid=destUserId duser=destUser dpriv=admin destinationZoneExternalID=destZoneExtId \"\n            + \"destinationZoneURI=destZoneUri act=blocked dvc=192.168.0.3 cfp1Label=cfp1Label cfp3Label=cfp3Label cfp4Label=cfp4Label \"\n            + \"deviceCustomDate1=1622547800000 deviceCustomDate1Label=customDate1Label deviceCustomDate2=1622547900000 \"\n            + \"deviceCustomDate2Label=customDate2Label cfp1=1.23 cfp2=2.34 cfp2Label=cfp2Label cfp3=3.45 cfp4=4.56 c6a1=2001:db8::1 \"\n            + \"c6a1Label=c6a1Label c6a2=2001:db8::2 c6a2Label=c6a2Label c6a3=2001:db8::3 c6a3Label=c6a3Label c6a4=2001:db8::4 \"\n            + \"C6a4Label=c6a4Label cn1=123 cn1Label=cn1Label cn2=234 cn2Label=cn2Label cn3=345 cn3Label=cn3Label cs1=customString1 \"\n            + \"cs1Label=cs1Label cs2=customString2 cs2Label=cs2Label cs3=customString3 cs3Label=cs3Label \"\n            + \"cs4=customString4 cs4Label=cs4Label \"\n            + \"cs5=customString5 cs5Label=cs5Label cs6=customString6 cs6Label=cs6Label deviceDirection=inbound deviceDnsDomain=example.com \"\n            + \"cat=category deviceExternalId=extId deviceFacility=16 dvchost=host1 deviceInboundInterface=eth0 dvcmac=00:0a:95:9d:68:16 \"\n            + \"deviceNtDomain=example.org deviceOutboundInterface=eth1 devicePayloadId=payloadId dvcpid=5678 deviceProcessName=procName \"\n            + \"rt=1622547800000 dtz=UTC deviceTranslatedAddress=10.0.0.3 deviceTranslatedZoneExternalID=transExtId \"\n            + \"deviceTranslatedZoneURI=transUri deviceZoneExternalID=zoneExtId deviceZoneURI=zoneUri end=1622547900000 eventId=evt123 \"\n            + \"outcome=success externalId=extId fileCreateTime=1622547800000 fileHash=abcd1234 fileId=5678 \"\n            + \"fileModificationTime=1622547900000 \"\n            + \"fname=file.txt filePath=/path/to/file filePermission=rw-r--r-- fsize=1024 fileType=txt flexDate1=1622547800000 \"\n            + \"flexDate1Label=flexDate1Label flexString1=flexString1 flexString2=flexString2 flexString1Label=flexString1Label \"\n            + \"flexString2Label=flexString2Label msg=message oldFileCreateTime=1622547800000 oldFileHash=oldHash oldFileId=oldId \"\n            + \"oldFileModificationTime=1622547900000 oldFileName=oldFile oldFilePath=/old/path \"\n            + \"oldFilePermission=rw-r--r-- oldFileSize=2048 \"\n            + \"oldFileType=oldType rawEvent=rawEvent reason=reason requestClientApplication=Mozilla requestContext=referrer \"\n            + \"requestCookies=cookies requestMethod=GET request=url src=192.168.0.4 sourceDnsDomain=sourceDomain \"\n            + \"slat=37.7749 slong=-122.4194 \"\n            + \"shost=sourceHost smac=00:0a:95:9d:68:16 sntdom=sourceNtDomain spt=443 spid=1234 \"\n            + \"sproc=sourceProc sourceServiceName=sourceService \"\n            + \"sourceTranslatedAddress=10.0.0.4 sourceTranslatedPort=8081 sourceTranslatedZoneExternalID=sourceExtId \"\n            + \"sourceTranslatedZoneURI=sourceUri suid=sourceUserId suser=sourceUser spriv=sourcePriv sourceZoneExternalID=sourceZoneExtId \"\n            + \"sourceZoneURI=sourceZoneUri start=1622547800000 proto=TCP type=1 catdt=catDeviceType mrt=1622547800000\";\n        Map<String, Object> source = new HashMap<>();\n        source.put(\"message\", message);\n        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n        processor.execute(document);\n        assertMapsEqual(\n            document.getSource(),\n            Map.ofEntries(\n                entry(\n                    \"cef\",\n                    Map.ofEntries(\n                        entry(\"version\", \"0\"),\n                        entry(\n                            \"device\",\n                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n                        ),\n                        entry(\"name\", \"trojan successfully stopped\"),\n                        entry(\"severity\", \"10\"),\n                        entry(\n                            \"extensions\",\n                            Map.ofEntries(\n                                entry(\"deviceNtDomain\", \"example.org\"),\n                                entry(\"agentZoneExternalID\", \"zoneExtId\"),\n                                entry(\"agentTimeZone\", \"UTC\"),\n                                entry(\"deviceCustomIPv6Address1Label\", \"c6a1Label\"),\n                                entry(\"deviceCustomString1\", \"customString1\"),\n                                entry(\"deviceCustomIPv6Address2Label\", \"c6a2Label\"),\n                                entry(\"deviceCustomNumber3\", 345L),\n                                entry(\"deviceCustomFloatingPoint1\", 1.23f),\n                                entry(\"deviceCustomNumber2\", 234L),\n                                entry(\"deviceCustomFloatingPoint2\", 2.34f),\n                                entry(\"deviceCustomFloatingPoint3\", 3.45f),\n                                entry(\"deviceCustomFloatingPoint4\", 4.56f),\n                                entry(\"flexDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                                entry(\"destinationTranslatedZoneExternalID\", \"destExtId\"),\n                                entry(\"deviceCustomNumber1\", 123L),\n                                entry(\"deviceEventCategory\", \"category\"),\n                                entry(\"deviceCustomString6Label\", \"cs6Label\"),\n                                entry(\"deviceCustomNumber2Label\", \"cn2Label\"),\n                                entry(\"flexString1Label\", \"flexString1Label\"),\n                                entry(\"deviceCustomString5Label\", \"cs5Label\"),\n                                entry(\"agentZoneURI\", \"zoneUri\"),\n                                entry(\"deviceCustomString2Label\", \"cs2Label\"),\n                                entry(\"deviceCustomDate2Label\", \"customDate2Label\"),\n                                entry(\"deviceCustomNumber1Label\", \"cn1Label\"),\n                                entry(\"oldFileType\", \"oldType\"),\n                                entry(\"destinationZoneExternalID\", \"destZoneExtId\"),\n                                entry(\"categoryDeviceType\", \"catDeviceType\"),\n                                entry(\"deviceZoneURI\", \"zoneUri\"),\n                                entry(\"sourceTranslatedZoneExternalID\", \"sourceExtId\"),\n                                entry(\"agentTranslatedAddress\", \"10.0.0.1\"),\n                                entry(\"requestCookies\", \"cookies\"),\n                                entry(\"deviceCustomIPv6Address3\", \"2001:db8::3\"),\n                                entry(\"oldFilePath\", \"/old/path\"),\n                                entry(\"deviceCustomIPv6Address2\", \"2001:db8::2\"),\n                                entry(\"deviceCustomIPv6Address1\", \"2001:db8::1\"),\n                                entry(\"oldFileId\", \"oldId\"),\n                                entry(\"deviceTranslatedZoneExternalID\", \"transExtId\"),\n                                entry(\"deviceCustomFloatingPoint2Label\", \"cfp2Label\"),\n                                entry(\"deviceTranslatedZoneURI\", \"transUri\"),\n                                entry(\"deviceCustomIPv6Address4Label\", \"c6a4Label\"),\n                                entry(\"agentTranslatedZoneURI\", \"uri\"),\n                                entry(\"oldFilePermission\", \"rw-r--r--\"),\n                                entry(\"deviceCustomIPv6Address4\", \"2001:db8::4\"),\n                                entry(\"sourceZoneURI\", \"sourceZoneUri\"),\n                                entry(\"deviceCustomFloatingPoint3Label\", \"cfp3Label\"),\n                                entry(\"agentTranslatedZoneExternalID\", \"ext123\"),\n                                entry(\"destinationZoneURI\", \"destZoneUri\"),\n                                entry(\"flexDate1Label\", \"flexDate1Label\"),\n                                entry(\"agentNtDomain\", \"example.org\"),\n                                entry(\"deviceCustomDate2\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n                                entry(\"deviceCustomDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                                entry(\"deviceCustomString3Label\", \"cs3Label\"),\n                                entry(\"deviceCustomDate1Label\", \"customDate1Label\"),\n                                entry(\"destinationTranslatedZoneURI\", \"destUri\"),\n                                entry(\"oldFileModificationTime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n                                entry(\"deviceCustomFloatingPoint1Label\", \"cfp1Label\"),\n                                entry(\"deviceCustomIPv6Address3Label\", \"c6a3Label\"),\n                                entry(\"deviceCustomFloatingPoint4Label\", \"cfp4Label\"),\n                                entry(\"oldFileSize\", 2048),\n                                entry(\"externalId\", \"extId\"),\n                                entry(\"baseEventCount\", 1234),\n                                entry(\"flexString2\", \"flexString2\"),\n                                entry(\"deviceCustomNumber3Label\", \"cn3Label\"),\n                                entry(\"flexString1\", \"flexString1\"),\n                                entry(\"deviceCustomString4Label\", \"cs4Label\"),\n                                entry(\"flexString2Label\", \"flexString2Label\"),\n                                entry(\"deviceCustomString3\", \"customString3\"),\n                                entry(\"deviceCustomString2\", \"customString2\"),\n                                entry(\"deviceCustomString1Label\", \"cs1Label\"),\n                                entry(\"deviceCustomString5\", \"customString5\"),\n                                entry(\"deviceCustomString4\", \"customString4\"),\n                                entry(\"deviceZoneExternalID\", \"zoneExtId\"),\n                                entry(\"deviceCustomString6\", \"customString6\"),\n                                entry(\"oldFileName\", \"oldFile\"),\n                                entry(\"sourceZoneExternalID\", \"sourceZoneExtId\"),\n                                entry(\"oldFileHash\", \"oldHash\"),\n                                entry(\"sourceTranslatedZoneURI\", \"sourceUri\"),\n                                entry(\"oldFileCreateTime\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\"))\n                            )\n                        )\n                    )\n                ),\n                entry(\"host\", Map.of(\"nat\", Map.of(\"ip\", \"10.0.0.3\"))),\n                entry(\"log\", Map.of(\"syslog\", Map.of(\"facility\", Map.of(\"code\", 16L)))),\n                entry(\n                    \"observer\",\n                    Map.ofEntries(\n                        entry(\"ingress\", Map.of(\"interface\", Map.of(\"name\", \"eth0\"))),\n                        entry(\"registered_domain\", \"example.com\"),\n                        entry(\"product\", \"threatmanager\"),\n                        entry(\"hostname\", \"host1\"),\n                        entry(\"vendor\", \"security\"),\n                        entry(\"ip\", \"192.168.0.3\"),\n                        entry(\"name\", \"extId\"),\n                        entry(\"version\", \"1.0\"),\n                        entry(\"mac\", \"00:0a:95:9d:68:16\"),\n                        entry(\"egress\", Map.of(\"interface\", Map.of(\"name\", \"eth1\")))\n                    )\n                ),\n                entry(\n                    \"agent\",\n                    Map.ofEntries(\n                        entry(\"ip\", \"192.168.0.1\"),\n                        entry(\"name\", \"example.com\"),\n                        entry(\"id\", \"agentId\"),\n                        entry(\"type\", \"agentType\"),\n                        entry(\"version\", \"1.0\"),\n                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n                    )\n                ),\n                entry(\"process\", Map.of(\"name\", \"procName\", \"pid\", 5678L)),\n                entry(\n                    \"destination\",\n                    Map.ofEntries(\n                        entry(\"nat\", Map.of(\"port\", 8080, \"ip\", \"10.0.0.2\")),\n                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n                        entry(\"registered_domain\", \"destNtDomain\"),\n                        entry(\"process\", Map.of(\"name\", \"destProc\", \"pid\", 1234L)),\n                        entry(\"port\", 80),\n                        entry(\"bytes\", 91011L),\n                        entry(\"service\", Map.of(\"name\", \"destService\")),\n                        entry(\"domain\", \"destHost\"),\n                        entry(\"ip\", \"192.168.0.2\"),\n                        entry(\"user\", Map.of(\"name\", \"destUser\", \"id\", \"destUserId\", \"group\", Map.of(\"name\", \"admin\"))),\n                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n                    )\n                ),\n                entry(\n                    \"source\",\n                    Map.ofEntries(\n                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n                        entry(\"nat\", Map.of(\"port\", 8081, \"ip\", \"10.0.0.4\")),\n                        entry(\"registered_domain\", \"sourceNtDomain\"),\n                        entry(\"process\", Map.of(\"name\", \"sourceProc\", \"pid\", 1234L)),\n                        entry(\"port\", 443),\n                        entry(\"service\", Map.of(\"name\", \"sourceService\")),\n                        entry(\"bytes\", 5678L),\n                        entry(\"ip\", \"192.168.0.4\"),\n                        entry(\"domain\", \"sourceDomain\"),\n                        entry(\"user\", Map.of(\"name\", \"sourceUser\", \"id\", \"sourceUserId\", \"group\", Map.of(\"name\", \"sourcePriv\"))),\n                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n                    )\n                ),\n                entry(\"message\", \"message\"),\n                entry(\"url\", Map.of(\"original\", \"url\")),\n                entry(\"network\", Map.of(\"protocol\", \"HTTP\", \"transport\", \"TCP\", \"direction\", \"inbound\")),\n                entry(\n                    \"file\",\n                    Map.ofEntries(\n                        entry(\"inode\", \"5678\"),\n                        entry(\"path\", \"/path/to/file\"),\n                        entry(\"size\", 1024L),\n                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                        entry(\"name\", \"file.txt\"),\n                        entry(\"mtime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n                        entry(\"type\", \"txt\"),\n                        entry(\"hash\", \"abcd1234\"),\n                        entry(\"group\", \"rw-r--r--\")\n                    )\n                ),\n                entry(\"@timestamp\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                entry(\"organization\", Map.of(\"name\", \"custUri\", \"id\", \"custExtId\")),\n                entry(\n                    \"event\",\n                    Map.ofEntries(\n                        entry(\"action\", \"blocked\"),\n                        entry(\"timezone\", \"UTC\"),\n                        entry(\"end\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n                        entry(\"id\", \"evt123\"),\n                        entry(\"outcome\", \"success\"),\n                        entry(\"start\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                        entry(\"reason\", \"reason\"),\n                        entry(\"ingested\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                        entry(\"kind\", 1),\n                        entry(\"original\", \"rawEvent\"),\n                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n                        entry(\"code\", \"100\")\n                    )\n                ),\n                entry(\"user_agent\", Map.of(\"original\", \"Mozilla\")),\n                entry(\"http\", Map.of(\"request\", Map.of(\"referrer\", \"referrer\", \"method\", \"GET\")))\n            )\n        );\n    }\n\n    // Date parsing tests\n    public void testToTimestampWithUnixTimestamp() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String unixTimestamp = \"1633072800000\"; // Example Unix timestamp in milliseconds\n        ZonedDateTime expected = ZonedDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(unixTimestamp)), ZoneId.of(\"UTC\"));\n        ZonedDateTime result = parser.toTimestamp(unixTimestamp);\n        assertEquals(expected, result);\n    }\n\n    public void testToTimestampWithFormattedDate() {\n        CefParser parser = new CefParser(ZoneId.of(\"Europe/Stockholm\"), false);\n        String formattedDate = \"Oct 01 2021 12:00:00 UTC\"; // Example formatted date\n        ZonedDateTime expected = ZonedDateTime.parse(\"2021-10-01T14:00+02:00[Europe/Stockholm]\");\n        ZonedDateTime result = parser.toTimestamp(formattedDate);\n        assertEquals(expected, result);\n    }\n\n    public void testToTimestampWithFormattedDateWithoutYear() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String formattedDate = \"Oct 01 12:00:00 UTC\"; // Example formatted date without year\n        int currentYear = ZonedDateTime.now(ZoneId.of(\"UTC\")).getYear();\n        ZonedDateTime expected = ZonedDateTime.parse(currentYear + \"-10-01T12:00:00Z[UTC]\");\n        ZonedDateTime result = parser.toTimestamp(formattedDate);\n        assertEquals(expected, result);\n    }\n\n    public void testToTimestampWithFormattedDateWithoutTimezone() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String formattedDate = \"Sep 07 2018 14:50:39\"; // Example formatted date without year\n        ZonedDateTime expected = ZonedDateTime.parse(\"2018-09-07T14:50:39Z[UTC]\");\n        ZonedDateTime result = parser.toTimestamp(formattedDate);\n        assertEquals(expected, result);\n    }\n\n    public void testToTimestampWithInvalidDate() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String invalidDate = \"invalid date\";\n        assertThrows(IllegalArgumentException.class, () -> parser.toTimestamp(invalidDate));\n    }\n\n    public void testToMacAddressWithSeparators() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        List<String> macAddresses = List.of(\n            // EUI-48 (with separators).\n            \"00:0D:60:AF:1B:61\",\n            \"00-0D-60-AF-1B-61\",\n            \"000D.60AF.1B61\",\n\n            // EUI-64 (with separators).\n            \"00:0D:60:FF:FE:AF:1B:61\",\n            \"00-0D-60-FF-FE-AF-1B-61\",\n            \"000D.60FF.FEAF.1B61\"\n        );\n        macAddresses.forEach(macAddress -> {\n            String result = parser.toMACAddress(macAddress);\n            assertEquals(macAddress, result);\n        });\n    }\n\n    public void testEUI48ToMacAddressWithOutSeparators() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String macAddress = \"000D60AF1B61\";\n        String result = parser.toMACAddress(macAddress);\n        assertEquals(\"00:0D:60:AF:1B:61\", result);\n    }\n\n    public void testEUI64ToMacAddressWithOutSeparators() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n        String macAddress = \"000D60FFFEAF1B61\";\n        String result = parser.toMACAddress(macAddress);\n        assertEquals(\"00:0D:60:FF:FE:AF:1B:61\", result);\n    }\n\n    public void toIP_validIPv4Address() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n        String result = parser.toIP(\"192.168.1.1\");\n        assertEquals(\"192.168.1.1\", result);\n    }\n\n    public void toIP_validIPv6Address() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n        String result = parser.toIP(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\");\n        assertEquals(\"2001:db8:85a3::8a2e:370:7334\", result);\n    }\n\n    public void toIP_invalidIPAddress() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"invalid_ip\"));\n        assertEquals(\"Invalid IP address format\", exception.getMessage());\n    }\n\n    public void toIP_emptyString() {\n        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"\"));\n        assertEquals(\"Invalid IP address format\", exception.getMessage());\n    }\n\n    public void toIP_nullString() {",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2027497237",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 122491,
        "pr_file": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/CefProcessorTests.java",
        "discussion_id": "2027497237",
        "commented_code": "@@ -0,0 +1,1104 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.ingest.common;\n+\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.test.ESTestCase;\n+import org.junit.Before;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Map.entry;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class CefProcessorTests extends ESTestCase {\n+\n+    private IngestDocument document;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void testExecute() {\n+        Map<String, Object> source = new HashMap<>();\n+        String message = \"CEF:0|Elastic|Vaporware|1.0.0-alpha|18|Web request|low|eventId=3457 requestMethod=POST \"\n+            + \"slat=38.915 slong=-77.511 proto=TCP sourceServiceName=httpd requestContext=https://www.google.com \"\n+            + \"src=89.160.20.156 spt=33876 dst=192.168.10.1 dpt=443 request=https://www.example.com/cart\";\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"Elastic\", \"product\", \"Vaporware\", \"version\", \"1.0.0-alpha\", \"event_class_id\", \"18\")\n+                        ),\n+                        entry(\"name\", \"Web request\"),\n+                        entry(\"severity\", \"low\")\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"Vaporware\", \"vendor\", \"Elastic\", \"version\", \"1.0.0-alpha\")),\n+                entry(\"event\", Map.of(\"id\", \"3457\", \"code\", \"18\")),\n+                entry(\n+                    \"source\",\n+                    Map.ofEntries(\n+                        entry(\"ip\", \"89.160.20.156\"),\n+                        entry(\"port\", 33876),\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -77.511, \"lat\", 38.915))),\n+                        entry(\"service\", Map.of(\"name\", \"httpd\"))\n+                    )\n+                ),\n+                entry(\"destination\", Map.of(\"ip\", \"192.168.10.1\", \"port\", 443)),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\", \"referrer\", \"https://www.google.com\"))),\n+                entry(\"network\", Map.of(\"transport\", \"TCP\")),\n+                entry(\"url\", Map.of(\"original\", \"https://www.example.com/cart\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testInvalidCefFormat() {\n+        Map<String, Object> invalidSource = new HashMap<>();\n+        invalidSource.put(\"message\", \"Invalid CEF message\");\n+        IngestDocument invalidIngestDocument = new IngestDocument(\"index\", \"id\", 1L, null, null, invalidSource);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        expectThrows(IllegalArgumentException.class, () -> processor.execute(invalidIngestDocument));\n+    }\n+\n+    public void testStandardMessage() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n+            + \"src=10.0.0.192 dst=12.121.122.82 spt=1232 eventId=1 in=4294967296 out=4294967296\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232, \"bytes\", 4294967296L)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\", \"bytes\", 4294967296L)),\n+                entry(\"event\", Map.of(\"id\", \"1\", \"code\", \"100\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testHeaderOnly() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEmptyDeviceFields() {\n+        String message = \"CEF:0|||1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\"device\", Map.of(\"vendor\", \"\", \"product\", \"\", \"version\", \"1.0\", \"event_class_id\", \"100\")),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"\", \"vendor\", \"\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapedPipeInHeader() {\n+        String message = \"CEF:26|security|threat\\\\|->manager|1.0|100|\"\n+            + \"trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat|->manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEqualsSignInHeader() {\n+        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEmptyExtensionValue() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst= spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testLeadingWhitespace() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10| src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapedPipeInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this\\\\|has an escaped pipe\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        expectThrows(IllegalArgumentException.class, () -> processor.execute(document));\n+    }\n+\n+    public void testPipeInMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this|has a pipe\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"moo\", \"this|has a pipe\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEqualsInMessage() {\n+        String message =\n+            \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this =has = equals\\\\= dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"moo\", \"this =has = equals=\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapesInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|msg=a+b\\\\=c x=c\\\\\\\\d\\\\=z\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"x\", \"c\\\\d=z\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", \"a+b=c\")\n+            )\n+        );\n+    }\n+\n+    public void testMalformedExtensionEscape() {\n+        String message = \"CEF:0|FooBar|Web Gateway|1.2.3.45.67|200|Success|2|rt=Sep 07 2018 14:50:39 cat=Access Log dst=1.1.1.1 \"\n+            + \"dhost=foo.example.com suser=redacted src=2.2.2.2 requestMethod=POST request='https://foo.example.com/bar/bingo/1' \"\n+            + \"requestClientApplication='Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test=' cs1= cs1Label=Foo Bar\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"FooBar\", \"product\", \"Web Gateway\", \"version\", \"1.2.3.45.67\", \"event_class_id\", \"200\")\n+                        ),\n+                        entry(\"name\", \"Success\"),\n+                        entry(\"severity\", \"2\"),\n+                        entry(\"extensions\", Map.of(\"deviceCustomString1Label\", \"Foo Bar\", \"deviceEventCategory\", \"Access Log\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"200\")),\n+                entry(\"observer\", Map.of(\"product\", \"Web Gateway\", \"vendor\", \"FooBar\", \"version\", \"1.2.3.45.67\")),\n+                entry(\"@timestamp\", ZonedDateTime.parse(\"2018-09-07T14:50:39Z\")),\n+                entry(\"destination\", Map.of(\"ip\", \"1.1.1.1\", \"domain\", \"foo.example.com\")),\n+                entry(\"source\", Map.of(\"ip\", \"2.2.2.2\", \"user\", Map.of(\"name\", \"redacted\"))),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\"))),\n+                entry(\"url\", Map.of(\"original\", \"'https://foo.example.com/bar/bingo/1'\")),\n+                entry(\"user_agent\", Map.of(\"original\", \"'Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test='\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testMultipleMalformedExtensionValues() {\n+        String message = \"CEF:0|vendor|product|version|event_id|name|Very-High| \"\n+            + \"msg=Hello World error=Failed because id==old_id user=root angle=106.7<=180\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"vendor\", \"product\", \"product\", \"version\", \"version\", \"event_class_id\", \"event_id\")\n+                        ),\n+                        entry(\"name\", \"name\"),\n+                        entry(\"severity\", \"Very-High\"),\n+                        entry(\"extensions\", Map.of(\"id\", \"=old_id\", \"user\", \"root\", \"angle\", \"106.7<=180\", \"error\", \"Failed because\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"event_id\")),\n+                entry(\"observer\", Map.of(\"product\", \"product\", \"vendor\", \"vendor\", \"version\", \"version\")),\n+                entry(\"message\", \"Hello World\")\n+            )\n+        );\n+    }\n+\n+    public void testPaddedMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|spt=1232 \"\n+            + \"msg=Trailing space in non-final extensions is  preserved    src=10.0.0.192 \";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"message\", \"Trailing space in non-final extensions is  preserved\")\n+            )\n+        );\n+    }\n+\n+    public void testCrlfMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n+            + \"spt=1232 msg=Trailing space in final extensions is not preserved\\t \\r\\ndpt=1234\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", \"Trailing space in final extensions is not preserved\"),\n+                entry(\"destination\", Map.of(\"port\", 1234))\n+            )\n+        );\n+    }\n+\n+    public void testTabMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n+            + \"spt=1232 msg=Tabs\\tand\\rcontrol\\ncharacters are preserved\\t src=127.0.0.1\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n+                entry(\"message\", \"Tabs\\tand\\rcontrol\\ncharacters are preserved\")\n+            )\n+        );\n+    }\n+\n+    public void testTabNoSepMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message has tabs|10|spt=1232 msg=Tab is not a separator\\tsrc=127.0.0.1\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message has tabs\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n+                entry(\"message\", \"Tab is not a separator\")\n+            )\n+        );\n+    }\n+\n+    public void testEscapedMessage() {\n+        String message = \"CEF:0|security\\\\compliance|threat\\\\|->manager|1.0|100|message contains escapes|10|\"\n+            + \"spt=1232 msg=Newlines in messages\\\\\\nare allowed.\\\\\\r\\\\\\nAnd so are carriage feeds\\\\\\\\newlines\\\\\\\\\\\\=. dpt=4432\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.ofEntries(\n+                                entry(\"vendor\", \"security\\\\compliance\"),\n+                                entry(\"product\", \"threat|->manager\"),\n+                                entry(\"version\", \"1.0\"),\n+                                entry(\"event_class_id\", \"100\")\n+                            )\n+                        ),\n+                        entry(\"name\", \"message contains escapes\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\\\\compliance\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", \"Newlines in messages\\nare allowed.\\r\\nAnd so are carriage feeds\\\\newlines\\\\=.\"),\n+                entry(\"destination\", Map.of(\"port\", 4432))\n+            )\n+        );\n+    }\n+\n+    public void testTruncatedHeader() {\n+        String message = \"CEF:0|SentinelOne|Mgmt|activityID=1111111111111111111 activityType=3505 \"\n+            + \"siteId=None siteName=None accountId=1222222222222222222 accountName=foo-bar mdr notificationScope=ACCOUNT\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\"device\", Map.of(\"vendor\", \"SentinelOne\", \"product\", \"Mgmt\")),\n+                        entry(\n+                            \"extensions\",\n+                            Map.ofEntries(\n+                                entry(\"activityID\", \"1111111111111111111\"),\n+                                entry(\"activityType\", \"3505\"),\n+                                entry(\"siteId\", \"None\"),\n+                                entry(\"siteName\", \"None\"),\n+                                entry(\"accountId\", \"1222222222222222222\"),\n+                                entry(\"accountName\", \"foo-bar mdr\"),\n+                                entry(\"notificationScope\", \"ACCOUNT\")\n+                            )\n+                        )\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"Mgmt\", \"vendor\", \"SentinelOne\")),\n+                entry(\"message\", message),\n+                entry(\"error\", Map.of(\"message\", Set.of(\"incomplete CEF header\")))\n+            )\n+        );\n+    }\n+\n+    public void testIgnoreEmptyValuesInExtension() {\n+        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src= dst=12.121.122.82 spt=\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testHyphenInExtensionKey() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|Some-Key=123456\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"Some-Key\", \"123456\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testAllFieldsInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n+            + \"agt=192.168.0.1 agentDnsDomain=example.com ahost=agentHost aid=agentId amac=00:0a:95:9d:68:16 agentNtDomain=example.org \"\n+            + \"art=1622547800000 atz=UTC agentTranslatedAddress=10.0.0.1 agentTranslatedZoneExternalID=ext123 agentTranslatedZoneURI=uri \"\n+            + \"at=agentType av=1.0 agentZoneExternalID=zoneExtId agentZoneURI=zoneUri app=HTTP cnt=1234 in=5678 out=91011 \"\n+            + \"customerExternalID=custExtId customerURI=custUri dst=192.168.0.2 dlat=37.7749 dlong=-122.4194 \"\n+            + \"dhost=destHost dmac=00:0a:95:9d:68:16 dntdom=destNtDomain dpt=80 dpid=1234 \"\n+            + \"dproc=destProc destinationServiceName=destService \"\n+            + \"destinationTranslatedAddress=10.0.0.2 destinationTranslatedPort=8080 destinationTranslatedZoneExternalID=destExtId \"\n+            + \"destinationTranslatedZoneURI=destUri duid=destUserId duser=destUser dpriv=admin destinationZoneExternalID=destZoneExtId \"\n+            + \"destinationZoneURI=destZoneUri act=blocked dvc=192.168.0.3 cfp1Label=cfp1Label cfp3Label=cfp3Label cfp4Label=cfp4Label \"\n+            + \"deviceCustomDate1=1622547800000 deviceCustomDate1Label=customDate1Label deviceCustomDate2=1622547900000 \"\n+            + \"deviceCustomDate2Label=customDate2Label cfp1=1.23 cfp2=2.34 cfp2Label=cfp2Label cfp3=3.45 cfp4=4.56 c6a1=2001:db8::1 \"\n+            + \"c6a1Label=c6a1Label c6a2=2001:db8::2 c6a2Label=c6a2Label c6a3=2001:db8::3 c6a3Label=c6a3Label c6a4=2001:db8::4 \"\n+            + \"C6a4Label=c6a4Label cn1=123 cn1Label=cn1Label cn2=234 cn2Label=cn2Label cn3=345 cn3Label=cn3Label cs1=customString1 \"\n+            + \"cs1Label=cs1Label cs2=customString2 cs2Label=cs2Label cs3=customString3 cs3Label=cs3Label \"\n+            + \"cs4=customString4 cs4Label=cs4Label \"\n+            + \"cs5=customString5 cs5Label=cs5Label cs6=customString6 cs6Label=cs6Label deviceDirection=inbound deviceDnsDomain=example.com \"\n+            + \"cat=category deviceExternalId=extId deviceFacility=16 dvchost=host1 deviceInboundInterface=eth0 dvcmac=00:0a:95:9d:68:16 \"\n+            + \"deviceNtDomain=example.org deviceOutboundInterface=eth1 devicePayloadId=payloadId dvcpid=5678 deviceProcessName=procName \"\n+            + \"rt=1622547800000 dtz=UTC deviceTranslatedAddress=10.0.0.3 deviceTranslatedZoneExternalID=transExtId \"\n+            + \"deviceTranslatedZoneURI=transUri deviceZoneExternalID=zoneExtId deviceZoneURI=zoneUri end=1622547900000 eventId=evt123 \"\n+            + \"outcome=success externalId=extId fileCreateTime=1622547800000 fileHash=abcd1234 fileId=5678 \"\n+            + \"fileModificationTime=1622547900000 \"\n+            + \"fname=file.txt filePath=/path/to/file filePermission=rw-r--r-- fsize=1024 fileType=txt flexDate1=1622547800000 \"\n+            + \"flexDate1Label=flexDate1Label flexString1=flexString1 flexString2=flexString2 flexString1Label=flexString1Label \"\n+            + \"flexString2Label=flexString2Label msg=message oldFileCreateTime=1622547800000 oldFileHash=oldHash oldFileId=oldId \"\n+            + \"oldFileModificationTime=1622547900000 oldFileName=oldFile oldFilePath=/old/path \"\n+            + \"oldFilePermission=rw-r--r-- oldFileSize=2048 \"\n+            + \"oldFileType=oldType rawEvent=rawEvent reason=reason requestClientApplication=Mozilla requestContext=referrer \"\n+            + \"requestCookies=cookies requestMethod=GET request=url src=192.168.0.4 sourceDnsDomain=sourceDomain \"\n+            + \"slat=37.7749 slong=-122.4194 \"\n+            + \"shost=sourceHost smac=00:0a:95:9d:68:16 sntdom=sourceNtDomain spt=443 spid=1234 \"\n+            + \"sproc=sourceProc sourceServiceName=sourceService \"\n+            + \"sourceTranslatedAddress=10.0.0.4 sourceTranslatedPort=8081 sourceTranslatedZoneExternalID=sourceExtId \"\n+            + \"sourceTranslatedZoneURI=sourceUri suid=sourceUserId suser=sourceUser spriv=sourcePriv sourceZoneExternalID=sourceZoneExtId \"\n+            + \"sourceZoneURI=sourceZoneUri start=1622547800000 proto=TCP type=1 catdt=catDeviceType mrt=1622547800000\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\n+                            \"extensions\",\n+                            Map.ofEntries(\n+                                entry(\"deviceNtDomain\", \"example.org\"),\n+                                entry(\"agentZoneExternalID\", \"zoneExtId\"),\n+                                entry(\"agentTimeZone\", \"UTC\"),\n+                                entry(\"deviceCustomIPv6Address1Label\", \"c6a1Label\"),\n+                                entry(\"deviceCustomString1\", \"customString1\"),\n+                                entry(\"deviceCustomIPv6Address2Label\", \"c6a2Label\"),\n+                                entry(\"deviceCustomNumber3\", 345L),\n+                                entry(\"deviceCustomFloatingPoint1\", 1.23f),\n+                                entry(\"deviceCustomNumber2\", 234L),\n+                                entry(\"deviceCustomFloatingPoint2\", 2.34f),\n+                                entry(\"deviceCustomFloatingPoint3\", 3.45f),\n+                                entry(\"deviceCustomFloatingPoint4\", 4.56f),\n+                                entry(\"flexDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                                entry(\"destinationTranslatedZoneExternalID\", \"destExtId\"),\n+                                entry(\"deviceCustomNumber1\", 123L),\n+                                entry(\"deviceEventCategory\", \"category\"),\n+                                entry(\"deviceCustomString6Label\", \"cs6Label\"),\n+                                entry(\"deviceCustomNumber2Label\", \"cn2Label\"),\n+                                entry(\"flexString1Label\", \"flexString1Label\"),\n+                                entry(\"deviceCustomString5Label\", \"cs5Label\"),\n+                                entry(\"agentZoneURI\", \"zoneUri\"),\n+                                entry(\"deviceCustomString2Label\", \"cs2Label\"),\n+                                entry(\"deviceCustomDate2Label\", \"customDate2Label\"),\n+                                entry(\"deviceCustomNumber1Label\", \"cn1Label\"),\n+                                entry(\"oldFileType\", \"oldType\"),\n+                                entry(\"destinationZoneExternalID\", \"destZoneExtId\"),\n+                                entry(\"categoryDeviceType\", \"catDeviceType\"),\n+                                entry(\"deviceZoneURI\", \"zoneUri\"),\n+                                entry(\"sourceTranslatedZoneExternalID\", \"sourceExtId\"),\n+                                entry(\"agentTranslatedAddress\", \"10.0.0.1\"),\n+                                entry(\"requestCookies\", \"cookies\"),\n+                                entry(\"deviceCustomIPv6Address3\", \"2001:db8::3\"),\n+                                entry(\"oldFilePath\", \"/old/path\"),\n+                                entry(\"deviceCustomIPv6Address2\", \"2001:db8::2\"),\n+                                entry(\"deviceCustomIPv6Address1\", \"2001:db8::1\"),\n+                                entry(\"oldFileId\", \"oldId\"),\n+                                entry(\"deviceTranslatedZoneExternalID\", \"transExtId\"),\n+                                entry(\"deviceCustomFloatingPoint2Label\", \"cfp2Label\"),\n+                                entry(\"deviceTranslatedZoneURI\", \"transUri\"),\n+                                entry(\"deviceCustomIPv6Address4Label\", \"c6a4Label\"),\n+                                entry(\"agentTranslatedZoneURI\", \"uri\"),\n+                                entry(\"oldFilePermission\", \"rw-r--r--\"),\n+                                entry(\"deviceCustomIPv6Address4\", \"2001:db8::4\"),\n+                                entry(\"sourceZoneURI\", \"sourceZoneUri\"),\n+                                entry(\"deviceCustomFloatingPoint3Label\", \"cfp3Label\"),\n+                                entry(\"agentTranslatedZoneExternalID\", \"ext123\"),\n+                                entry(\"destinationZoneURI\", \"destZoneUri\"),\n+                                entry(\"flexDate1Label\", \"flexDate1Label\"),\n+                                entry(\"agentNtDomain\", \"example.org\"),\n+                                entry(\"deviceCustomDate2\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                                entry(\"deviceCustomDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                                entry(\"deviceCustomString3Label\", \"cs3Label\"),\n+                                entry(\"deviceCustomDate1Label\", \"customDate1Label\"),\n+                                entry(\"destinationTranslatedZoneURI\", \"destUri\"),\n+                                entry(\"oldFileModificationTime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                                entry(\"deviceCustomFloatingPoint1Label\", \"cfp1Label\"),\n+                                entry(\"deviceCustomIPv6Address3Label\", \"c6a3Label\"),\n+                                entry(\"deviceCustomFloatingPoint4Label\", \"cfp4Label\"),\n+                                entry(\"oldFileSize\", 2048),\n+                                entry(\"externalId\", \"extId\"),\n+                                entry(\"baseEventCount\", 1234),\n+                                entry(\"flexString2\", \"flexString2\"),\n+                                entry(\"deviceCustomNumber3Label\", \"cn3Label\"),\n+                                entry(\"flexString1\", \"flexString1\"),\n+                                entry(\"deviceCustomString4Label\", \"cs4Label\"),\n+                                entry(\"flexString2Label\", \"flexString2Label\"),\n+                                entry(\"deviceCustomString3\", \"customString3\"),\n+                                entry(\"deviceCustomString2\", \"customString2\"),\n+                                entry(\"deviceCustomString1Label\", \"cs1Label\"),\n+                                entry(\"deviceCustomString5\", \"customString5\"),\n+                                entry(\"deviceCustomString4\", \"customString4\"),\n+                                entry(\"deviceZoneExternalID\", \"zoneExtId\"),\n+                                entry(\"deviceCustomString6\", \"customString6\"),\n+                                entry(\"oldFileName\", \"oldFile\"),\n+                                entry(\"sourceZoneExternalID\", \"sourceZoneExtId\"),\n+                                entry(\"oldFileHash\", \"oldHash\"),\n+                                entry(\"sourceTranslatedZoneURI\", \"sourceUri\"),\n+                                entry(\"oldFileCreateTime\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\"))\n+                            )\n+                        )\n+                    )\n+                ),\n+                entry(\"host\", Map.of(\"nat\", Map.of(\"ip\", \"10.0.0.3\"))),\n+                entry(\"log\", Map.of(\"syslog\", Map.of(\"facility\", Map.of(\"code\", 16L)))),\n+                entry(\n+                    \"observer\",\n+                    Map.ofEntries(\n+                        entry(\"ingress\", Map.of(\"interface\", Map.of(\"name\", \"eth0\"))),\n+                        entry(\"registered_domain\", \"example.com\"),\n+                        entry(\"product\", \"threatmanager\"),\n+                        entry(\"hostname\", \"host1\"),\n+                        entry(\"vendor\", \"security\"),\n+                        entry(\"ip\", \"192.168.0.3\"),\n+                        entry(\"name\", \"extId\"),\n+                        entry(\"version\", \"1.0\"),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\"),\n+                        entry(\"egress\", Map.of(\"interface\", Map.of(\"name\", \"eth1\")))\n+                    )\n+                ),\n+                entry(\n+                    \"agent\",\n+                    Map.ofEntries(\n+                        entry(\"ip\", \"192.168.0.1\"),\n+                        entry(\"name\", \"example.com\"),\n+                        entry(\"id\", \"agentId\"),\n+                        entry(\"type\", \"agentType\"),\n+                        entry(\"version\", \"1.0\"),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\"process\", Map.of(\"name\", \"procName\", \"pid\", 5678L)),\n+                entry(\n+                    \"destination\",\n+                    Map.ofEntries(\n+                        entry(\"nat\", Map.of(\"port\", 8080, \"ip\", \"10.0.0.2\")),\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n+                        entry(\"registered_domain\", \"destNtDomain\"),\n+                        entry(\"process\", Map.of(\"name\", \"destProc\", \"pid\", 1234L)),\n+                        entry(\"port\", 80),\n+                        entry(\"bytes\", 91011L),\n+                        entry(\"service\", Map.of(\"name\", \"destService\")),\n+                        entry(\"domain\", \"destHost\"),\n+                        entry(\"ip\", \"192.168.0.2\"),\n+                        entry(\"user\", Map.of(\"name\", \"destUser\", \"id\", \"destUserId\", \"group\", Map.of(\"name\", \"admin\"))),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\n+                    \"source\",\n+                    Map.ofEntries(\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n+                        entry(\"nat\", Map.of(\"port\", 8081, \"ip\", \"10.0.0.4\")),\n+                        entry(\"registered_domain\", \"sourceNtDomain\"),\n+                        entry(\"process\", Map.of(\"name\", \"sourceProc\", \"pid\", 1234L)),\n+                        entry(\"port\", 443),\n+                        entry(\"service\", Map.of(\"name\", \"sourceService\")),\n+                        entry(\"bytes\", 5678L),\n+                        entry(\"ip\", \"192.168.0.4\"),\n+                        entry(\"domain\", \"sourceDomain\"),\n+                        entry(\"user\", Map.of(\"name\", \"sourceUser\", \"id\", \"sourceUserId\", \"group\", Map.of(\"name\", \"sourcePriv\"))),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\"message\", \"message\"),\n+                entry(\"url\", Map.of(\"original\", \"url\")),\n+                entry(\"network\", Map.of(\"protocol\", \"HTTP\", \"transport\", \"TCP\", \"direction\", \"inbound\")),\n+                entry(\n+                    \"file\",\n+                    Map.ofEntries(\n+                        entry(\"inode\", \"5678\"),\n+                        entry(\"path\", \"/path/to/file\"),\n+                        entry(\"size\", 1024L),\n+                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"name\", \"file.txt\"),\n+                        entry(\"mtime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                        entry(\"type\", \"txt\"),\n+                        entry(\"hash\", \"abcd1234\"),\n+                        entry(\"group\", \"rw-r--r--\")\n+                    )\n+                ),\n+                entry(\"@timestamp\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                entry(\"organization\", Map.of(\"name\", \"custUri\", \"id\", \"custExtId\")),\n+                entry(\n+                    \"event\",\n+                    Map.ofEntries(\n+                        entry(\"action\", \"blocked\"),\n+                        entry(\"timezone\", \"UTC\"),\n+                        entry(\"end\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                        entry(\"id\", \"evt123\"),\n+                        entry(\"outcome\", \"success\"),\n+                        entry(\"start\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"reason\", \"reason\"),\n+                        entry(\"ingested\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"kind\", 1),\n+                        entry(\"original\", \"rawEvent\"),\n+                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"code\", \"100\")\n+                    )\n+                ),\n+                entry(\"user_agent\", Map.of(\"original\", \"Mozilla\")),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"referrer\", \"referrer\", \"method\", \"GET\")))\n+            )\n+        );\n+    }\n+\n+    // Date parsing tests\n+    public void testToTimestampWithUnixTimestamp() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String unixTimestamp = \"1633072800000\"; // Example Unix timestamp in milliseconds\n+        ZonedDateTime expected = ZonedDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(unixTimestamp)), ZoneId.of(\"UTC\"));\n+        ZonedDateTime result = parser.toTimestamp(unixTimestamp);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDate() {\n+        CefParser parser = new CefParser(ZoneId.of(\"Europe/Stockholm\"), false);\n+        String formattedDate = \"Oct 01 2021 12:00:00 UTC\"; // Example formatted date\n+        ZonedDateTime expected = ZonedDateTime.parse(\"2021-10-01T14:00+02:00[Europe/Stockholm]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDateWithoutYear() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String formattedDate = \"Oct 01 12:00:00 UTC\"; // Example formatted date without year\n+        int currentYear = ZonedDateTime.now(ZoneId.of(\"UTC\")).getYear();\n+        ZonedDateTime expected = ZonedDateTime.parse(currentYear + \"-10-01T12:00:00Z[UTC]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDateWithoutTimezone() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String formattedDate = \"Sep 07 2018 14:50:39\"; // Example formatted date without year\n+        ZonedDateTime expected = ZonedDateTime.parse(\"2018-09-07T14:50:39Z[UTC]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithInvalidDate() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String invalidDate = \"invalid date\";\n+        assertThrows(IllegalArgumentException.class, () -> parser.toTimestamp(invalidDate));\n+    }\n+\n+    public void testToMacAddressWithSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        List<String> macAddresses = List.of(\n+            // EUI-48 (with separators).\n+            \"00:0D:60:AF:1B:61\",\n+            \"00-0D-60-AF-1B-61\",\n+            \"000D.60AF.1B61\",\n+\n+            // EUI-64 (with separators).\n+            \"00:0D:60:FF:FE:AF:1B:61\",\n+            \"00-0D-60-FF-FE-AF-1B-61\",\n+            \"000D.60FF.FEAF.1B61\"\n+        );\n+        macAddresses.forEach(macAddress -> {\n+            String result = parser.toMACAddress(macAddress);\n+            assertEquals(macAddress, result);\n+        });\n+    }\n+\n+    public void testEUI48ToMacAddressWithOutSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String macAddress = \"000D60AF1B61\";\n+        String result = parser.toMACAddress(macAddress);\n+        assertEquals(\"00:0D:60:AF:1B:61\", result);\n+    }\n+\n+    public void testEUI64ToMacAddressWithOutSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String macAddress = \"000D60FFFEAF1B61\";\n+        String result = parser.toMACAddress(macAddress);\n+        assertEquals(\"00:0D:60:FF:FE:AF:1B:61\", result);\n+    }\n+\n+    public void toIP_validIPv4Address() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        String result = parser.toIP(\"192.168.1.1\");\n+        assertEquals(\"192.168.1.1\", result);\n+    }\n+\n+    public void toIP_validIPv6Address() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        String result = parser.toIP(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\");\n+        assertEquals(\"2001:db8:85a3::8a2e:370:7334\", result);\n+    }\n+\n+    public void toIP_invalidIPAddress() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"invalid_ip\"));\n+        assertEquals(\"Invalid IP address format\", exception.getMessage());\n+    }\n+\n+    public void toIP_emptyString() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"\"));\n+        assertEquals(\"Invalid IP address format\", exception.getMessage());\n+    }\n+\n+    public void toIP_nullString() {",
        "comment_created_at": "2025-04-03T17:57:14+00:00",
        "comment_author": "joegallo",
        "comment_body": "These `toIP_` methods aren't formatted to actually be JUnit tests (which start with `test`), so none of them are running. If you fix that so that they do run, not all of the tests pass.\r\n\r\nPlease avoid underscores in these names, regardless, so for example have `toIP_nullString` become `testToIPNullString`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2028230119",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 122491,
        "pr_file": "modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/CefProcessorTests.java",
        "discussion_id": "2027497237",
        "commented_code": "@@ -0,0 +1,1104 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.ingest.common;\n+\n+import org.elasticsearch.ingest.IngestDocument;\n+import org.elasticsearch.test.ESTestCase;\n+import org.junit.Before;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Map.entry;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class CefProcessorTests extends ESTestCase {\n+\n+    private IngestDocument document;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void testExecute() {\n+        Map<String, Object> source = new HashMap<>();\n+        String message = \"CEF:0|Elastic|Vaporware|1.0.0-alpha|18|Web request|low|eventId=3457 requestMethod=POST \"\n+            + \"slat=38.915 slong=-77.511 proto=TCP sourceServiceName=httpd requestContext=https://www.google.com \"\n+            + \"src=89.160.20.156 spt=33876 dst=192.168.10.1 dpt=443 request=https://www.example.com/cart\";\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"Elastic\", \"product\", \"Vaporware\", \"version\", \"1.0.0-alpha\", \"event_class_id\", \"18\")\n+                        ),\n+                        entry(\"name\", \"Web request\"),\n+                        entry(\"severity\", \"low\")\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"Vaporware\", \"vendor\", \"Elastic\", \"version\", \"1.0.0-alpha\")),\n+                entry(\"event\", Map.of(\"id\", \"3457\", \"code\", \"18\")),\n+                entry(\n+                    \"source\",\n+                    Map.ofEntries(\n+                        entry(\"ip\", \"89.160.20.156\"),\n+                        entry(\"port\", 33876),\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -77.511, \"lat\", 38.915))),\n+                        entry(\"service\", Map.of(\"name\", \"httpd\"))\n+                    )\n+                ),\n+                entry(\"destination\", Map.of(\"ip\", \"192.168.10.1\", \"port\", 443)),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\", \"referrer\", \"https://www.google.com\"))),\n+                entry(\"network\", Map.of(\"transport\", \"TCP\")),\n+                entry(\"url\", Map.of(\"original\", \"https://www.example.com/cart\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testInvalidCefFormat() {\n+        Map<String, Object> invalidSource = new HashMap<>();\n+        invalidSource.put(\"message\", \"Invalid CEF message\");\n+        IngestDocument invalidIngestDocument = new IngestDocument(\"index\", \"id\", 1L, null, null, invalidSource);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        expectThrows(IllegalArgumentException.class, () -> processor.execute(invalidIngestDocument));\n+    }\n+\n+    public void testStandardMessage() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n+            + \"src=10.0.0.192 dst=12.121.122.82 spt=1232 eventId=1 in=4294967296 out=4294967296\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232, \"bytes\", 4294967296L)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\", \"bytes\", 4294967296L)),\n+                entry(\"event\", Map.of(\"id\", \"1\", \"code\", \"100\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testHeaderOnly() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEmptyDeviceFields() {\n+        String message = \"CEF:0|||1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\"device\", Map.of(\"vendor\", \"\", \"product\", \"\", \"version\", \"1.0\", \"event_class_id\", \"100\")),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"\", \"vendor\", \"\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapedPipeInHeader() {\n+        String message = \"CEF:26|security|threat\\\\|->manager|1.0|100|\"\n+            + \"trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat|->manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEqualsSignInHeader() {\n+        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEmptyExtensionValue() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|src=10.0.0.192 dst= spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testLeadingWhitespace() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10| src=10.0.0.192 dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapedPipeInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this\\\\|has an escaped pipe\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        expectThrows(IllegalArgumentException.class, () -> processor.execute(document));\n+    }\n+\n+    public void testPipeInMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this|has a pipe\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"moo\", \"this|has a pipe\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEqualsInMessage() {\n+        String message =\n+            \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|moo=this =has = equals\\\\= dst=12.121.122.82 spt=1232\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"moo\", \"this =has = equals=\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testEscapesInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|msg=a+b\\\\=c x=c\\\\\\\\d\\\\=z\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"x\", \"c\\\\d=z\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", \"a+b=c\")\n+            )\n+        );\n+    }\n+\n+    public void testMalformedExtensionEscape() {\n+        String message = \"CEF:0|FooBar|Web Gateway|1.2.3.45.67|200|Success|2|rt=Sep 07 2018 14:50:39 cat=Access Log dst=1.1.1.1 \"\n+            + \"dhost=foo.example.com suser=redacted src=2.2.2.2 requestMethod=POST request='https://foo.example.com/bar/bingo/1' \"\n+            + \"requestClientApplication='Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test=' cs1= cs1Label=Foo Bar\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"FooBar\", \"product\", \"Web Gateway\", \"version\", \"1.2.3.45.67\", \"event_class_id\", \"200\")\n+                        ),\n+                        entry(\"name\", \"Success\"),\n+                        entry(\"severity\", \"2\"),\n+                        entry(\"extensions\", Map.of(\"deviceCustomString1Label\", \"Foo Bar\", \"deviceEventCategory\", \"Access Log\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"200\")),\n+                entry(\"observer\", Map.of(\"product\", \"Web Gateway\", \"vendor\", \"FooBar\", \"version\", \"1.2.3.45.67\")),\n+                entry(\"@timestamp\", ZonedDateTime.parse(\"2018-09-07T14:50:39Z\")),\n+                entry(\"destination\", Map.of(\"ip\", \"1.1.1.1\", \"domain\", \"foo.example.com\")),\n+                entry(\"source\", Map.of(\"ip\", \"2.2.2.2\", \"user\", Map.of(\"name\", \"redacted\"))),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"method\", \"POST\"))),\n+                entry(\"url\", Map.of(\"original\", \"'https://foo.example.com/bar/bingo/1'\")),\n+                entry(\"user_agent\", Map.of(\"original\", \"'Foo-Bar/2018.1.7; =Email:user@example.com; Guid:test='\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testMultipleMalformedExtensionValues() {\n+        String message = \"CEF:0|vendor|product|version|event_id|name|Very-High| \"\n+            + \"msg=Hello World error=Failed because id==old_id user=root angle=106.7<=180\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"vendor\", \"product\", \"product\", \"version\", \"version\", \"event_class_id\", \"event_id\")\n+                        ),\n+                        entry(\"name\", \"name\"),\n+                        entry(\"severity\", \"Very-High\"),\n+                        entry(\"extensions\", Map.of(\"id\", \"=old_id\", \"user\", \"root\", \"angle\", \"106.7<=180\", \"error\", \"Failed because\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"event_id\")),\n+                entry(\"observer\", Map.of(\"product\", \"product\", \"vendor\", \"vendor\", \"version\", \"version\")),\n+                entry(\"message\", \"Hello World\")\n+            )\n+        );\n+    }\n+\n+    public void testPaddedMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|spt=1232 \"\n+            + \"msg=Trailing space in non-final extensions is  preserved    src=10.0.0.192 \";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"ip\", \"10.0.0.192\", \"port\", 1232)),\n+                entry(\"message\", \"Trailing space in non-final extensions is  preserved\")\n+            )\n+        );\n+    }\n+\n+    public void testCrlfMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n+            + \"spt=1232 msg=Trailing space in final extensions is not preserved\\t \\r\\ndpt=1234\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", \"Trailing space in final extensions is not preserved\"),\n+                entry(\"destination\", Map.of(\"port\", 1234))\n+            )\n+        );\n+    }\n+\n+    public void testTabMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message is padded|10|\"\n+            + \"spt=1232 msg=Tabs\\tand\\rcontrol\\ncharacters are preserved\\t src=127.0.0.1\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message is padded\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n+                entry(\"message\", \"Tabs\\tand\\rcontrol\\ncharacters are preserved\")\n+            )\n+        );\n+    }\n+\n+    public void testTabNoSepMessage() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|message has tabs|10|spt=1232 msg=Tab is not a separator\\tsrc=127.0.0.1\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"message has tabs\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232, \"ip\", \"127.0.0.1\")),\n+                entry(\"message\", \"Tab is not a separator\")\n+            )\n+        );\n+    }\n+\n+    public void testEscapedMessage() {\n+        String message = \"CEF:0|security\\\\compliance|threat\\\\|->manager|1.0|100|message contains escapes|10|\"\n+            + \"spt=1232 msg=Newlines in messages\\\\\\nare allowed.\\\\\\r\\\\\\nAnd so are carriage feeds\\\\\\\\newlines\\\\\\\\\\\\=. dpt=4432\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.ofEntries(\n+                                entry(\"vendor\", \"security\\\\compliance\"),\n+                                entry(\"product\", \"threat|->manager\"),\n+                                entry(\"version\", \"1.0\"),\n+                                entry(\"event_class_id\", \"100\")\n+                            )\n+                        ),\n+                        entry(\"name\", \"message contains escapes\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat|->manager\", \"vendor\", \"security\\\\compliance\", \"version\", \"1.0\")),\n+                entry(\"source\", Map.of(\"port\", 1232)),\n+                entry(\"message\", \"Newlines in messages\\nare allowed.\\r\\nAnd so are carriage feeds\\\\newlines\\\\=.\"),\n+                entry(\"destination\", Map.of(\"port\", 4432))\n+            )\n+        );\n+    }\n+\n+    public void testTruncatedHeader() {\n+        String message = \"CEF:0|SentinelOne|Mgmt|activityID=1111111111111111111 activityType=3505 \"\n+            + \"siteId=None siteName=None accountId=1222222222222222222 accountName=foo-bar mdr notificationScope=ACCOUNT\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\"device\", Map.of(\"vendor\", \"SentinelOne\", \"product\", \"Mgmt\")),\n+                        entry(\n+                            \"extensions\",\n+                            Map.ofEntries(\n+                                entry(\"activityID\", \"1111111111111111111\"),\n+                                entry(\"activityType\", \"3505\"),\n+                                entry(\"siteId\", \"None\"),\n+                                entry(\"siteName\", \"None\"),\n+                                entry(\"accountId\", \"1222222222222222222\"),\n+                                entry(\"accountName\", \"foo-bar mdr\"),\n+                                entry(\"notificationScope\", \"ACCOUNT\")\n+                            )\n+                        )\n+                    )\n+                ),\n+                entry(\"observer\", Map.of(\"product\", \"Mgmt\", \"vendor\", \"SentinelOne\")),\n+                entry(\"message\", message),\n+                entry(\"error\", Map.of(\"message\", Set.of(\"incomplete CEF header\")))\n+            )\n+        );\n+    }\n+\n+    public void testIgnoreEmptyValuesInExtension() {\n+        String message = \"CEF:26|security|threat=manager|1.0|100|trojan successfully stopped|10|src= dst=12.121.122.82 spt=\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threat=manager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\")\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threat=manager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"destination\", Map.of(\"ip\", \"12.121.122.82\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testHyphenInExtensionKey() {\n+        String message = \"CEF:26|security|threatmanager|1.0|100|trojan successfully stopped|10|Some-Key=123456\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"26\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\"extensions\", Map.of(\"Some-Key\", \"123456\"))\n+                    )\n+                ),\n+                entry(\"event\", Map.of(\"code\", \"100\")),\n+                entry(\"observer\", Map.of(\"product\", \"threatmanager\", \"vendor\", \"security\", \"version\", \"1.0\")),\n+                entry(\"message\", message)\n+            )\n+        );\n+    }\n+\n+    public void testAllFieldsInExtension() {\n+        String message = \"CEF:0|security|threatmanager|1.0|100|trojan successfully stopped|10|\"\n+            + \"agt=192.168.0.1 agentDnsDomain=example.com ahost=agentHost aid=agentId amac=00:0a:95:9d:68:16 agentNtDomain=example.org \"\n+            + \"art=1622547800000 atz=UTC agentTranslatedAddress=10.0.0.1 agentTranslatedZoneExternalID=ext123 agentTranslatedZoneURI=uri \"\n+            + \"at=agentType av=1.0 agentZoneExternalID=zoneExtId agentZoneURI=zoneUri app=HTTP cnt=1234 in=5678 out=91011 \"\n+            + \"customerExternalID=custExtId customerURI=custUri dst=192.168.0.2 dlat=37.7749 dlong=-122.4194 \"\n+            + \"dhost=destHost dmac=00:0a:95:9d:68:16 dntdom=destNtDomain dpt=80 dpid=1234 \"\n+            + \"dproc=destProc destinationServiceName=destService \"\n+            + \"destinationTranslatedAddress=10.0.0.2 destinationTranslatedPort=8080 destinationTranslatedZoneExternalID=destExtId \"\n+            + \"destinationTranslatedZoneURI=destUri duid=destUserId duser=destUser dpriv=admin destinationZoneExternalID=destZoneExtId \"\n+            + \"destinationZoneURI=destZoneUri act=blocked dvc=192.168.0.3 cfp1Label=cfp1Label cfp3Label=cfp3Label cfp4Label=cfp4Label \"\n+            + \"deviceCustomDate1=1622547800000 deviceCustomDate1Label=customDate1Label deviceCustomDate2=1622547900000 \"\n+            + \"deviceCustomDate2Label=customDate2Label cfp1=1.23 cfp2=2.34 cfp2Label=cfp2Label cfp3=3.45 cfp4=4.56 c6a1=2001:db8::1 \"\n+            + \"c6a1Label=c6a1Label c6a2=2001:db8::2 c6a2Label=c6a2Label c6a3=2001:db8::3 c6a3Label=c6a3Label c6a4=2001:db8::4 \"\n+            + \"C6a4Label=c6a4Label cn1=123 cn1Label=cn1Label cn2=234 cn2Label=cn2Label cn3=345 cn3Label=cn3Label cs1=customString1 \"\n+            + \"cs1Label=cs1Label cs2=customString2 cs2Label=cs2Label cs3=customString3 cs3Label=cs3Label \"\n+            + \"cs4=customString4 cs4Label=cs4Label \"\n+            + \"cs5=customString5 cs5Label=cs5Label cs6=customString6 cs6Label=cs6Label deviceDirection=inbound deviceDnsDomain=example.com \"\n+            + \"cat=category deviceExternalId=extId deviceFacility=16 dvchost=host1 deviceInboundInterface=eth0 dvcmac=00:0a:95:9d:68:16 \"\n+            + \"deviceNtDomain=example.org deviceOutboundInterface=eth1 devicePayloadId=payloadId dvcpid=5678 deviceProcessName=procName \"\n+            + \"rt=1622547800000 dtz=UTC deviceTranslatedAddress=10.0.0.3 deviceTranslatedZoneExternalID=transExtId \"\n+            + \"deviceTranslatedZoneURI=transUri deviceZoneExternalID=zoneExtId deviceZoneURI=zoneUri end=1622547900000 eventId=evt123 \"\n+            + \"outcome=success externalId=extId fileCreateTime=1622547800000 fileHash=abcd1234 fileId=5678 \"\n+            + \"fileModificationTime=1622547900000 \"\n+            + \"fname=file.txt filePath=/path/to/file filePermission=rw-r--r-- fsize=1024 fileType=txt flexDate1=1622547800000 \"\n+            + \"flexDate1Label=flexDate1Label flexString1=flexString1 flexString2=flexString2 flexString1Label=flexString1Label \"\n+            + \"flexString2Label=flexString2Label msg=message oldFileCreateTime=1622547800000 oldFileHash=oldHash oldFileId=oldId \"\n+            + \"oldFileModificationTime=1622547900000 oldFileName=oldFile oldFilePath=/old/path \"\n+            + \"oldFilePermission=rw-r--r-- oldFileSize=2048 \"\n+            + \"oldFileType=oldType rawEvent=rawEvent reason=reason requestClientApplication=Mozilla requestContext=referrer \"\n+            + \"requestCookies=cookies requestMethod=GET request=url src=192.168.0.4 sourceDnsDomain=sourceDomain \"\n+            + \"slat=37.7749 slong=-122.4194 \"\n+            + \"shost=sourceHost smac=00:0a:95:9d:68:16 sntdom=sourceNtDomain spt=443 spid=1234 \"\n+            + \"sproc=sourceProc sourceServiceName=sourceService \"\n+            + \"sourceTranslatedAddress=10.0.0.4 sourceTranslatedPort=8081 sourceTranslatedZoneExternalID=sourceExtId \"\n+            + \"sourceTranslatedZoneURI=sourceUri suid=sourceUserId suser=sourceUser spriv=sourcePriv sourceZoneExternalID=sourceZoneExtId \"\n+            + \"sourceZoneURI=sourceZoneUri start=1622547800000 proto=TCP type=1 catdt=catDeviceType mrt=1622547800000\";\n+        Map<String, Object> source = new HashMap<>();\n+        source.put(\"message\", message);\n+        document = new IngestDocument(\"index\", \"id\", 1L, null, null, source);\n+        CefProcessor processor = new CefProcessor(\"tag\", \"description\", \"message\", \"cef\", false, true, null);\n+        processor.execute(document);\n+        assertMapsEqual(\n+            document.getSource(),\n+            Map.ofEntries(\n+                entry(\n+                    \"cef\",\n+                    Map.ofEntries(\n+                        entry(\"version\", \"0\"),\n+                        entry(\n+                            \"device\",\n+                            Map.of(\"vendor\", \"security\", \"product\", \"threatmanager\", \"version\", \"1.0\", \"event_class_id\", \"100\")\n+                        ),\n+                        entry(\"name\", \"trojan successfully stopped\"),\n+                        entry(\"severity\", \"10\"),\n+                        entry(\n+                            \"extensions\",\n+                            Map.ofEntries(\n+                                entry(\"deviceNtDomain\", \"example.org\"),\n+                                entry(\"agentZoneExternalID\", \"zoneExtId\"),\n+                                entry(\"agentTimeZone\", \"UTC\"),\n+                                entry(\"deviceCustomIPv6Address1Label\", \"c6a1Label\"),\n+                                entry(\"deviceCustomString1\", \"customString1\"),\n+                                entry(\"deviceCustomIPv6Address2Label\", \"c6a2Label\"),\n+                                entry(\"deviceCustomNumber3\", 345L),\n+                                entry(\"deviceCustomFloatingPoint1\", 1.23f),\n+                                entry(\"deviceCustomNumber2\", 234L),\n+                                entry(\"deviceCustomFloatingPoint2\", 2.34f),\n+                                entry(\"deviceCustomFloatingPoint3\", 3.45f),\n+                                entry(\"deviceCustomFloatingPoint4\", 4.56f),\n+                                entry(\"flexDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                                entry(\"destinationTranslatedZoneExternalID\", \"destExtId\"),\n+                                entry(\"deviceCustomNumber1\", 123L),\n+                                entry(\"deviceEventCategory\", \"category\"),\n+                                entry(\"deviceCustomString6Label\", \"cs6Label\"),\n+                                entry(\"deviceCustomNumber2Label\", \"cn2Label\"),\n+                                entry(\"flexString1Label\", \"flexString1Label\"),\n+                                entry(\"deviceCustomString5Label\", \"cs5Label\"),\n+                                entry(\"agentZoneURI\", \"zoneUri\"),\n+                                entry(\"deviceCustomString2Label\", \"cs2Label\"),\n+                                entry(\"deviceCustomDate2Label\", \"customDate2Label\"),\n+                                entry(\"deviceCustomNumber1Label\", \"cn1Label\"),\n+                                entry(\"oldFileType\", \"oldType\"),\n+                                entry(\"destinationZoneExternalID\", \"destZoneExtId\"),\n+                                entry(\"categoryDeviceType\", \"catDeviceType\"),\n+                                entry(\"deviceZoneURI\", \"zoneUri\"),\n+                                entry(\"sourceTranslatedZoneExternalID\", \"sourceExtId\"),\n+                                entry(\"agentTranslatedAddress\", \"10.0.0.1\"),\n+                                entry(\"requestCookies\", \"cookies\"),\n+                                entry(\"deviceCustomIPv6Address3\", \"2001:db8::3\"),\n+                                entry(\"oldFilePath\", \"/old/path\"),\n+                                entry(\"deviceCustomIPv6Address2\", \"2001:db8::2\"),\n+                                entry(\"deviceCustomIPv6Address1\", \"2001:db8::1\"),\n+                                entry(\"oldFileId\", \"oldId\"),\n+                                entry(\"deviceTranslatedZoneExternalID\", \"transExtId\"),\n+                                entry(\"deviceCustomFloatingPoint2Label\", \"cfp2Label\"),\n+                                entry(\"deviceTranslatedZoneURI\", \"transUri\"),\n+                                entry(\"deviceCustomIPv6Address4Label\", \"c6a4Label\"),\n+                                entry(\"agentTranslatedZoneURI\", \"uri\"),\n+                                entry(\"oldFilePermission\", \"rw-r--r--\"),\n+                                entry(\"deviceCustomIPv6Address4\", \"2001:db8::4\"),\n+                                entry(\"sourceZoneURI\", \"sourceZoneUri\"),\n+                                entry(\"deviceCustomFloatingPoint3Label\", \"cfp3Label\"),\n+                                entry(\"agentTranslatedZoneExternalID\", \"ext123\"),\n+                                entry(\"destinationZoneURI\", \"destZoneUri\"),\n+                                entry(\"flexDate1Label\", \"flexDate1Label\"),\n+                                entry(\"agentNtDomain\", \"example.org\"),\n+                                entry(\"deviceCustomDate2\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                                entry(\"deviceCustomDate1\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                                entry(\"deviceCustomString3Label\", \"cs3Label\"),\n+                                entry(\"deviceCustomDate1Label\", \"customDate1Label\"),\n+                                entry(\"destinationTranslatedZoneURI\", \"destUri\"),\n+                                entry(\"oldFileModificationTime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                                entry(\"deviceCustomFloatingPoint1Label\", \"cfp1Label\"),\n+                                entry(\"deviceCustomIPv6Address3Label\", \"c6a3Label\"),\n+                                entry(\"deviceCustomFloatingPoint4Label\", \"cfp4Label\"),\n+                                entry(\"oldFileSize\", 2048),\n+                                entry(\"externalId\", \"extId\"),\n+                                entry(\"baseEventCount\", 1234),\n+                                entry(\"flexString2\", \"flexString2\"),\n+                                entry(\"deviceCustomNumber3Label\", \"cn3Label\"),\n+                                entry(\"flexString1\", \"flexString1\"),\n+                                entry(\"deviceCustomString4Label\", \"cs4Label\"),\n+                                entry(\"flexString2Label\", \"flexString2Label\"),\n+                                entry(\"deviceCustomString3\", \"customString3\"),\n+                                entry(\"deviceCustomString2\", \"customString2\"),\n+                                entry(\"deviceCustomString1Label\", \"cs1Label\"),\n+                                entry(\"deviceCustomString5\", \"customString5\"),\n+                                entry(\"deviceCustomString4\", \"customString4\"),\n+                                entry(\"deviceZoneExternalID\", \"zoneExtId\"),\n+                                entry(\"deviceCustomString6\", \"customString6\"),\n+                                entry(\"oldFileName\", \"oldFile\"),\n+                                entry(\"sourceZoneExternalID\", \"sourceZoneExtId\"),\n+                                entry(\"oldFileHash\", \"oldHash\"),\n+                                entry(\"sourceTranslatedZoneURI\", \"sourceUri\"),\n+                                entry(\"oldFileCreateTime\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\"))\n+                            )\n+                        )\n+                    )\n+                ),\n+                entry(\"host\", Map.of(\"nat\", Map.of(\"ip\", \"10.0.0.3\"))),\n+                entry(\"log\", Map.of(\"syslog\", Map.of(\"facility\", Map.of(\"code\", 16L)))),\n+                entry(\n+                    \"observer\",\n+                    Map.ofEntries(\n+                        entry(\"ingress\", Map.of(\"interface\", Map.of(\"name\", \"eth0\"))),\n+                        entry(\"registered_domain\", \"example.com\"),\n+                        entry(\"product\", \"threatmanager\"),\n+                        entry(\"hostname\", \"host1\"),\n+                        entry(\"vendor\", \"security\"),\n+                        entry(\"ip\", \"192.168.0.3\"),\n+                        entry(\"name\", \"extId\"),\n+                        entry(\"version\", \"1.0\"),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\"),\n+                        entry(\"egress\", Map.of(\"interface\", Map.of(\"name\", \"eth1\")))\n+                    )\n+                ),\n+                entry(\n+                    \"agent\",\n+                    Map.ofEntries(\n+                        entry(\"ip\", \"192.168.0.1\"),\n+                        entry(\"name\", \"example.com\"),\n+                        entry(\"id\", \"agentId\"),\n+                        entry(\"type\", \"agentType\"),\n+                        entry(\"version\", \"1.0\"),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\"process\", Map.of(\"name\", \"procName\", \"pid\", 5678L)),\n+                entry(\n+                    \"destination\",\n+                    Map.ofEntries(\n+                        entry(\"nat\", Map.of(\"port\", 8080, \"ip\", \"10.0.0.2\")),\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n+                        entry(\"registered_domain\", \"destNtDomain\"),\n+                        entry(\"process\", Map.of(\"name\", \"destProc\", \"pid\", 1234L)),\n+                        entry(\"port\", 80),\n+                        entry(\"bytes\", 91011L),\n+                        entry(\"service\", Map.of(\"name\", \"destService\")),\n+                        entry(\"domain\", \"destHost\"),\n+                        entry(\"ip\", \"192.168.0.2\"),\n+                        entry(\"user\", Map.of(\"name\", \"destUser\", \"id\", \"destUserId\", \"group\", Map.of(\"name\", \"admin\"))),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\n+                    \"source\",\n+                    Map.ofEntries(\n+                        entry(\"geo\", Map.of(\"location\", Map.of(\"lon\", -122.4194, \"lat\", 37.7749))),\n+                        entry(\"nat\", Map.of(\"port\", 8081, \"ip\", \"10.0.0.4\")),\n+                        entry(\"registered_domain\", \"sourceNtDomain\"),\n+                        entry(\"process\", Map.of(\"name\", \"sourceProc\", \"pid\", 1234L)),\n+                        entry(\"port\", 443),\n+                        entry(\"service\", Map.of(\"name\", \"sourceService\")),\n+                        entry(\"bytes\", 5678L),\n+                        entry(\"ip\", \"192.168.0.4\"),\n+                        entry(\"domain\", \"sourceDomain\"),\n+                        entry(\"user\", Map.of(\"name\", \"sourceUser\", \"id\", \"sourceUserId\", \"group\", Map.of(\"name\", \"sourcePriv\"))),\n+                        entry(\"mac\", \"00:0a:95:9d:68:16\")\n+                    )\n+                ),\n+                entry(\"message\", \"message\"),\n+                entry(\"url\", Map.of(\"original\", \"url\")),\n+                entry(\"network\", Map.of(\"protocol\", \"HTTP\", \"transport\", \"TCP\", \"direction\", \"inbound\")),\n+                entry(\n+                    \"file\",\n+                    Map.ofEntries(\n+                        entry(\"inode\", \"5678\"),\n+                        entry(\"path\", \"/path/to/file\"),\n+                        entry(\"size\", 1024L),\n+                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"name\", \"file.txt\"),\n+                        entry(\"mtime\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                        entry(\"type\", \"txt\"),\n+                        entry(\"hash\", \"abcd1234\"),\n+                        entry(\"group\", \"rw-r--r--\")\n+                    )\n+                ),\n+                entry(\"@timestamp\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                entry(\"organization\", Map.of(\"name\", \"custUri\", \"id\", \"custExtId\")),\n+                entry(\n+                    \"event\",\n+                    Map.ofEntries(\n+                        entry(\"action\", \"blocked\"),\n+                        entry(\"timezone\", \"UTC\"),\n+                        entry(\"end\", ZonedDateTime.parse(\"2021-06-01T11:45Z\")),\n+                        entry(\"id\", \"evt123\"),\n+                        entry(\"outcome\", \"success\"),\n+                        entry(\"start\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"reason\", \"reason\"),\n+                        entry(\"ingested\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"kind\", 1),\n+                        entry(\"original\", \"rawEvent\"),\n+                        entry(\"created\", ZonedDateTime.parse(\"2021-06-01T11:43:20Z\")),\n+                        entry(\"code\", \"100\")\n+                    )\n+                ),\n+                entry(\"user_agent\", Map.of(\"original\", \"Mozilla\")),\n+                entry(\"http\", Map.of(\"request\", Map.of(\"referrer\", \"referrer\", \"method\", \"GET\")))\n+            )\n+        );\n+    }\n+\n+    // Date parsing tests\n+    public void testToTimestampWithUnixTimestamp() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String unixTimestamp = \"1633072800000\"; // Example Unix timestamp in milliseconds\n+        ZonedDateTime expected = ZonedDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(unixTimestamp)), ZoneId.of(\"UTC\"));\n+        ZonedDateTime result = parser.toTimestamp(unixTimestamp);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDate() {\n+        CefParser parser = new CefParser(ZoneId.of(\"Europe/Stockholm\"), false);\n+        String formattedDate = \"Oct 01 2021 12:00:00 UTC\"; // Example formatted date\n+        ZonedDateTime expected = ZonedDateTime.parse(\"2021-10-01T14:00+02:00[Europe/Stockholm]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDateWithoutYear() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String formattedDate = \"Oct 01 12:00:00 UTC\"; // Example formatted date without year\n+        int currentYear = ZonedDateTime.now(ZoneId.of(\"UTC\")).getYear();\n+        ZonedDateTime expected = ZonedDateTime.parse(currentYear + \"-10-01T12:00:00Z[UTC]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithFormattedDateWithoutTimezone() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String formattedDate = \"Sep 07 2018 14:50:39\"; // Example formatted date without year\n+        ZonedDateTime expected = ZonedDateTime.parse(\"2018-09-07T14:50:39Z[UTC]\");\n+        ZonedDateTime result = parser.toTimestamp(formattedDate);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testToTimestampWithInvalidDate() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String invalidDate = \"invalid date\";\n+        assertThrows(IllegalArgumentException.class, () -> parser.toTimestamp(invalidDate));\n+    }\n+\n+    public void testToMacAddressWithSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        List<String> macAddresses = List.of(\n+            // EUI-48 (with separators).\n+            \"00:0D:60:AF:1B:61\",\n+            \"00-0D-60-AF-1B-61\",\n+            \"000D.60AF.1B61\",\n+\n+            // EUI-64 (with separators).\n+            \"00:0D:60:FF:FE:AF:1B:61\",\n+            \"00-0D-60-FF-FE-AF-1B-61\",\n+            \"000D.60FF.FEAF.1B61\"\n+        );\n+        macAddresses.forEach(macAddress -> {\n+            String result = parser.toMACAddress(macAddress);\n+            assertEquals(macAddress, result);\n+        });\n+    }\n+\n+    public void testEUI48ToMacAddressWithOutSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String macAddress = \"000D60AF1B61\";\n+        String result = parser.toMACAddress(macAddress);\n+        assertEquals(\"00:0D:60:AF:1B:61\", result);\n+    }\n+\n+    public void testEUI64ToMacAddressWithOutSeparators() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), false);\n+        String macAddress = \"000D60FFFEAF1B61\";\n+        String result = parser.toMACAddress(macAddress);\n+        assertEquals(\"00:0D:60:FF:FE:AF:1B:61\", result);\n+    }\n+\n+    public void toIP_validIPv4Address() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        String result = parser.toIP(\"192.168.1.1\");\n+        assertEquals(\"192.168.1.1\", result);\n+    }\n+\n+    public void toIP_validIPv6Address() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        String result = parser.toIP(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\");\n+        assertEquals(\"2001:db8:85a3::8a2e:370:7334\", result);\n+    }\n+\n+    public void toIP_invalidIPAddress() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"invalid_ip\"));\n+        assertEquals(\"Invalid IP address format\", exception.getMessage());\n+    }\n+\n+    public void toIP_emptyString() {\n+        CefParser parser = new CefParser(ZoneId.of(\"UTC\"), true);\n+        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> parser.toIP(\"\"));\n+        assertEquals(\"Invalid IP address format\", exception.getMessage());\n+    }\n+\n+    public void toIP_nullString() {",
        "comment_created_at": "2025-04-04T07:02:32+00:00",
        "comment_author": "bhapas",
        "comment_body": "https://github.com/elastic/elasticsearch/pull/122491/commits/2b5bfd2ce93a8a8e1d043a6fd7f073585f70945b fixes this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1192216195",
    "pr_number": 95836,
    "pr_file": "build-tools-internal/src/main/java/org/elasticsearch/gradle/internal/transportversion/BumpTransportVersionTask.java",
    "created_at": "2023-05-12T10:51:18+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\npackage org.elasticsearch.gradle.internal.transportversion;\n\nimport org.gradle.api.DefaultTask;\nimport org.gradle.api.tasks.TaskAction;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.UUID;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class BumpTransportVersionTask extends DefaultTask {",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "1192216195",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 95836,
        "pr_file": "build-tools-internal/src/main/java/org/elasticsearch/gradle/internal/transportversion/BumpTransportVersionTask.java",
        "discussion_id": "1192216195",
        "commented_code": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License\n+ * 2.0 and the Server Side Public License, v 1; you may not use this file except\n+ * in compliance with, at your election, the Elastic License 2.0 or the Server\n+ * Side Public License, v 1.\n+ */\n+\n+package org.elasticsearch.gradle.internal.transportversion;\n+\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.tasks.TaskAction;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class BumpTransportVersionTask extends DefaultTask {",
        "comment_created_at": "2023-05-12T10:51:18+00:00",
        "comment_author": "thecoop",
        "comment_body": "Maybe 'NewTransportVersionTask' to match with the rest?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2180389078",
    "pr_number": 130410,
    "pr_file": "x-pack/plugin/esql/src/internalClusterTest/java/org/elasticsearch/xpack/esql/action/LookupJoinTypesIT.java",
    "created_at": "2025-07-02T15:40:51+00:00",
    "commented_code": "return existing.stream().anyMatch(c -> c.exists(indexName));\n    }\n\n    public void testOutputSupportedTypes() throws Exception {\n        Map<List<DataType>, DataType> signatures = new LinkedHashMap<>();\n        for (TestConfigs configs : testConfigurations.values()) {\n            if (configs.group.equals(\"unsupported\") || configs.group.equals(\"union-types\")) {",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2180389078",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130410,
        "pr_file": "x-pack/plugin/esql/src/internalClusterTest/java/org/elasticsearch/xpack/esql/action/LookupJoinTypesIT.java",
        "discussion_id": "2180389078",
        "commented_code": "@@ -265,6 +268,21 @@ private static boolean existingIndex(Collection<TestConfigs> existing, DataType\n         return existing.stream().anyMatch(c -> c.exists(indexName));\n     }\n \n+    public void testOutputSupportedTypes() throws Exception {\n+        Map<List<DataType>, DataType> signatures = new LinkedHashMap<>();\n+        for (TestConfigs configs : testConfigurations.values()) {\n+            if (configs.group.equals(\"unsupported\") || configs.group.equals(\"union-types\")) {",
        "comment_created_at": "2025-07-02T15:40:51+00:00",
        "comment_author": "alex-spies",
        "comment_body": "maybe we should use static string constants rather than typing out `unsupported` and `union-types` verbatim.",
        "pr_file_module": null
      },
      {
        "comment_id": "2180425537",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130410,
        "pr_file": "x-pack/plugin/esql/src/internalClusterTest/java/org/elasticsearch/xpack/esql/action/LookupJoinTypesIT.java",
        "discussion_id": "2180389078",
        "commented_code": "@@ -265,6 +268,21 @@ private static boolean existingIndex(Collection<TestConfigs> existing, DataType\n         return existing.stream().anyMatch(c -> c.exists(indexName));\n     }\n \n+    public void testOutputSupportedTypes() throws Exception {\n+        Map<List<DataType>, DataType> signatures = new LinkedHashMap<>();\n+        for (TestConfigs configs : testConfigurations.values()) {\n+            if (configs.group.equals(\"unsupported\") || configs.group.equals(\"union-types\")) {",
        "comment_created_at": "2025-07-02T15:56:00+00:00",
        "comment_author": "craigtaverner",
        "comment_body": "Good idea, but perhaps out of scope, since this test uses string literals like this in many places and I think they could all be fixed together. Perhaps moved into an enum, and use a switch somewhere to assert none are left out?",
        "pr_file_module": null
      }
    ]
  }
]