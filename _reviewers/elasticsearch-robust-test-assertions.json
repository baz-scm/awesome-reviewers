[
  {
    "discussion_id": "967030927",
    "pr_number": 89112,
    "pr_file": "server/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java",
    "created_at": "2022-09-09T12:46:36+00:00",
    "commented_code": "List<String> wordList = Analysis.getWordList(env, nodeSettings, \"foo.bar\");\n        assertEquals(Arrays.asList(\"hello\", \"world\"), wordList);\n    }\n\n    public void testCustomAnalyzerWithNotSupportKey() {\n        Settings analyzerSettings = Settings.builder().put(\"tokenizer\", \"standard\").put(\"foo\", \"bar\").put(\"type\", \"custom\").build();\n\n        try {\n            createComponents(\"my_analyzer\", analyzerSettings, testAnalysis.tokenizer, testAnalysis.charFilter, testAnalysis.tokenFilter);\n            fail(\"expected failure\");\n        } catch (IllegalArgumentException e) {",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "967030927",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 89112,
        "pr_file": "server/src/test/java/org/elasticsearch/index/analysis/AnalysisTests.java",
        "discussion_id": "967030927",
        "commented_code": "@@ -103,4 +116,15 @@ public void testParseWordList() throws IOException {\n         List<String> wordList = Analysis.getWordList(env, nodeSettings, \"foo.bar\");\n         assertEquals(Arrays.asList(\"hello\", \"world\"), wordList);\n     }\n+\n+    public void testCustomAnalyzerWithNotSupportKey() {\n+        Settings analyzerSettings = Settings.builder().put(\"tokenizer\", \"standard\").put(\"foo\", \"bar\").put(\"type\", \"custom\").build();\n+\n+        try {\n+            createComponents(\"my_analyzer\", analyzerSettings, testAnalysis.tokenizer, testAnalysis.charFilter, testAnalysis.tokenFilter);\n+            fail(\"expected failure\");\n+        } catch (IllegalArgumentException e) {",
        "comment_created_at": "2022-09-09T12:46:36+00:00",
        "comment_author": "javanna",
        "comment_body": "you can use expectThrows instead .",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142767556",
    "pr_number": 129320,
    "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/action/filter/ShardBulkInferenceActionFilterTests.java",
    "created_at": "2025-06-12T13:36:52+00:00",
    "commented_code": "IndexingPressure.Coordinating coordinatingIndexingPressure = indexingPressure.getCoordinating();\n                assertThat(coordinatingIndexingPressure, notNullValue());\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0Source));\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1Source));\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc2Source));\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc3Source));\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc4Source));\n                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0UpdateSource));\n                verify(coordinatingIndexingPressure, times(6)).increment(eq(1), longThat(l -> l > 0));\n                if (useLegacyFormat == false) {\n                    verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1UpdateSource));\n                    verify(coordinatingIndexingPressure).increment(1, longThat(l -> l > bytesUsed(doc1UpdateSource)));",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2142767556",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129320,
        "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/action/filter/ShardBulkInferenceActionFilterTests.java",
        "discussion_id": "2142767556",
        "commented_code": "@@ -616,20 +616,13 @@ public void testIndexingPressure() throws Exception {\n \n                 IndexingPressure.Coordinating coordinatingIndexingPressure = indexingPressure.getCoordinating();\n                 assertThat(coordinatingIndexingPressure, notNullValue());\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc2Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc3Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc4Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0UpdateSource));\n+                verify(coordinatingIndexingPressure, times(6)).increment(eq(1), longThat(l -> l > 0));\n                 if (useLegacyFormat == false) {\n-                    verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1UpdateSource));\n+                    verify(coordinatingIndexingPressure).increment(1, longThat(l -> l > bytesUsed(doc1UpdateSource)));",
        "comment_created_at": "2025-06-12T13:36:52+00:00",
        "comment_author": "Mikep86",
        "comment_body": "If we're not checking for calls to `increment` with exact counts of bytes allocated, we can simplify this to:\r\n\r\n```\r\nverify(coordinatingIndexingPressure, times(useLegacyFormat ? 6 : 7)).increment(eq(1), longThat(l -> l > 0));\r\n```\r\n\r\nThis also makes the test more robust, as the fact that we allocate more bytes than `doc1UpdateSource` size is only because `_inference_fields`, with all of its internal data structures, happens to be much larger than the small original test source. This is not of consequence to the behavior we wish to verify.",
        "pr_file_module": null
      },
      {
        "comment_id": "2143764343",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129320,
        "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/action/filter/ShardBulkInferenceActionFilterTests.java",
        "discussion_id": "2142767556",
        "commented_code": "@@ -616,20 +616,13 @@ public void testIndexingPressure() throws Exception {\n \n                 IndexingPressure.Coordinating coordinatingIndexingPressure = indexingPressure.getCoordinating();\n                 assertThat(coordinatingIndexingPressure, notNullValue());\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc2Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc3Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc4Source));\n-                verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc0UpdateSource));\n+                verify(coordinatingIndexingPressure, times(6)).increment(eq(1), longThat(l -> l > 0));\n                 if (useLegacyFormat == false) {\n-                    verify(coordinatingIndexingPressure).increment(1, bytesUsed(doc1UpdateSource));\n+                    verify(coordinatingIndexingPressure).increment(1, longThat(l -> l > bytesUsed(doc1UpdateSource)));",
        "comment_created_at": "2025-06-12T22:36:34+00:00",
        "comment_author": "jimczi",
        "comment_body": "thanks, https://github.com/elastic/elasticsearch/pull/129320/commits/c85718d22a7da9f137b3ebc75f5b8699f8aabd3e",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2170079489",
    "pr_number": 130041,
    "pr_file": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/xcontent/XContentUtilsTests.java",
    "created_at": "2025-06-26T21:47:28+00:00",
    "commented_code": "assertThat(json, equalTo(\"{\\\"authorization\\\":{\\\"api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\",\\\"name\\\":\\\"\" + apiKeyName + \"\\\"}}}\"));\n    }\n\n    public void testAddAuthorizationInfoWithCloudApiKey() throws IOException {\n        String apiKeyId = randomAlphaOfLength(20);\n        Authentication authentication = AuthenticationTestHelper.randomCloudApiKeyAuthentication(apiKeyId);\n        String json = generateJson(Map.of(AuthenticationField.AUTHENTICATION_KEY, authentication.encode()));\n        assertThat(json, containsString(\"{\\\"authorization\\\":{\\\"cloud_api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\"\"));",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2170079489",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130041,
        "pr_file": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/xcontent/XContentUtilsTests.java",
        "discussion_id": "2170079489",
        "commented_code": "@@ -62,6 +63,13 @@ public void testAddAuthorizationInfoWithApiKey() throws IOException {\n         assertThat(json, equalTo(\"{\\\"authorization\\\":{\\\"api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\",\\\"name\\\":\\\"\" + apiKeyName + \"\\\"}}}\"));\n     }\n \n+    public void testAddAuthorizationInfoWithCloudApiKey() throws IOException {\n+        String apiKeyId = randomAlphaOfLength(20);\n+        Authentication authentication = AuthenticationTestHelper.randomCloudApiKeyAuthentication(apiKeyId);\n+        String json = generateJson(Map.of(AuthenticationField.AUTHENTICATION_KEY, authentication.encode()));\n+        assertThat(json, containsString(\"{\\\"authorization\\\":{\\\"cloud_api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\"\"));",
        "comment_created_at": "2025-06-26T21:47:28+00:00",
        "comment_author": "slobodanadamovic",
        "comment_body": "Test only asserts `id` field. Using `randomCloudApiKeyAuthentication(apiKeyId)` may not be quite suitable here. Probably it's better to randomize `User` then call `randomCloudApiKeyAuthentication(user)`. This way you can assert all fields as you control user's principal (API key `id`), metadata (`name` and `internal`) and `roles`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2172474348",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130041,
        "pr_file": "x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/xcontent/XContentUtilsTests.java",
        "discussion_id": "2170079489",
        "commented_code": "@@ -62,6 +63,13 @@ public void testAddAuthorizationInfoWithApiKey() throws IOException {\n         assertThat(json, equalTo(\"{\\\"authorization\\\":{\\\"api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\",\\\"name\\\":\\\"\" + apiKeyName + \"\\\"}}}\"));\n     }\n \n+    public void testAddAuthorizationInfoWithCloudApiKey() throws IOException {\n+        String apiKeyId = randomAlphaOfLength(20);\n+        Authentication authentication = AuthenticationTestHelper.randomCloudApiKeyAuthentication(apiKeyId);\n+        String json = generateJson(Map.of(AuthenticationField.AUTHENTICATION_KEY, authentication.encode()));\n+        assertThat(json, containsString(\"{\\\"authorization\\\":{\\\"cloud_api_key\\\":{\\\"id\\\":\\\"\" + apiKeyId + \"\\\"\"));",
        "comment_created_at": "2025-06-27T17:00:11+00:00",
        "comment_author": "ankit--sethi",
        "comment_body": "refactored the test and some helper methods to assert on a fully randomized user",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2150623161",
    "pr_number": 129146,
    "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/request/IbmWatsonxChatCompletionRequestTests.java",
    "created_at": "2025-06-16T18:37:42+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0; you may not use this file except in compliance with the Elastic License\n * 2.0.\n */\n\npackage org.elasticsearch.xpack.inference.services.ibmwatsonx.request;\n\nimport org.apache.http.HttpHeaders;\nimport org.apache.http.client.methods.HttpPost;\nimport org.elasticsearch.core.Nullable;\nimport org.elasticsearch.test.ESTestCase;\nimport org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\nimport org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModelTests;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.elasticsearch.xpack.inference.external.http.Utils.entityAsMap;\nimport static org.hamcrest.Matchers.aMapWithSize;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\n\npublic class IbmWatsonxChatCompletionRequestTests extends ESTestCase {\n    private static final String AUTH_HEADER_VALUE = \"foo\";\n    private static final String API_COMPLETIONS_PATH = \"https://abc.com/ml/v1/text/chat?version=apiVersion\";\n\n    public void testCreateRequest_WithStreaming() throws IOException, URISyntaxException {\n        var request = createRequest(\"secret\", randomAlphaOfLength(15), \"model\", true);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2150623161",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/request/IbmWatsonxChatCompletionRequestTests.java",
        "discussion_id": "2150623161",
        "commented_code": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License\n+ * 2.0; you may not use this file except in compliance with the Elastic License\n+ * 2.0.\n+ */\n+\n+package org.elasticsearch.xpack.inference.services.ibmwatsonx.request;\n+\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.client.methods.HttpPost;\n+import org.elasticsearch.core.Nullable;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModelTests;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.inference.external.http.Utils.entityAsMap;\n+import static org.hamcrest.Matchers.aMapWithSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+\n+public class IbmWatsonxChatCompletionRequestTests extends ESTestCase {\n+    private static final String AUTH_HEADER_VALUE = \"foo\";\n+    private static final String API_COMPLETIONS_PATH = \"https://abc.com/ml/v1/text/chat?version=apiVersion\";\n+\n+    public void testCreateRequest_WithStreaming() throws IOException, URISyntaxException {\n+        var request = createRequest(\"secret\", randomAlphaOfLength(15), \"model\", true);",
        "comment_created_at": "2025-06-16T18:37:42+00:00",
        "comment_author": "dan-rubinstein",
        "comment_body": "Can we use randomized strings when possible? (ex. \"secret\", \"model\", etc)",
        "pr_file_module": null
      },
      {
        "comment_id": "2156405897",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129146,
        "pr_file": "x-pack/plugin/inference/src/test/java/org/elasticsearch/xpack/inference/services/ibmwatsonx/request/IbmWatsonxChatCompletionRequestTests.java",
        "discussion_id": "2150623161",
        "commented_code": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the Elastic License\n+ * 2.0; you may not use this file except in compliance with the Elastic License\n+ * 2.0.\n+ */\n+\n+package org.elasticsearch.xpack.inference.services.ibmwatsonx.request;\n+\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.client.methods.HttpPost;\n+import org.elasticsearch.core.Nullable;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.xpack.inference.external.http.sender.UnifiedChatInput;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModel;\n+import org.elasticsearch.xpack.inference.services.ibmwatsonx.completion.IbmWatsonxChatCompletionModelTests;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.elasticsearch.xpack.inference.external.http.Utils.entityAsMap;\n+import static org.hamcrest.Matchers.aMapWithSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+\n+public class IbmWatsonxChatCompletionRequestTests extends ESTestCase {\n+    private static final String AUTH_HEADER_VALUE = \"foo\";\n+    private static final String API_COMPLETIONS_PATH = \"https://abc.com/ml/v1/text/chat?version=apiVersion\";\n+\n+    public void testCreateRequest_WithStreaming() throws IOException, URISyntaxException {\n+        var request = createRequest(\"secret\", randomAlphaOfLength(15), \"model\", true);",
        "comment_created_at": "2025-06-19T08:06:18+00:00",
        "comment_author": "Evgenii-Kazannik",
        "comment_body": "I used randomAlphaOfLength in order to generate other values. Thank you",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2169402115",
    "pr_number": 130019,
    "pr_file": "x-pack/plugin/esql/qa/server/multi-clusters/src/javaRestTest/java/org/elasticsearch/xpack/esql/ccq/MultiClustersIT.java",
    "created_at": "2025-06-26T15:59:32+00:00",
    "commented_code": "assertThat(remoteClusterShards.keySet(), equalTo(Set.of(\"total\", \"successful\", \"skipped\", \"failed\")));\n        assertThat((Integer) remoteClusterShards.get(\"total\"), greaterThanOrEqualTo(0));\n        assertThat((Integer) remoteClusterShards.get(\"successful\"), equalTo((Integer) remoteClusterShards.get(\"total\")));\n        assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));\n        // assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2169402115",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130019,
        "pr_file": "x-pack/plugin/esql/qa/server/multi-clusters/src/javaRestTest/java/org/elasticsearch/xpack/esql/ccq/MultiClustersIT.java",
        "discussion_id": "2169402115",
        "commented_code": "@@ -254,7 +255,7 @@ private void assertClusterDetailsMap(Map<String, Object> result, boolean remoteO\n         assertThat(remoteClusterShards.keySet(), equalTo(Set.of(\"total\", \"successful\", \"skipped\", \"failed\")));\n         assertThat((Integer) remoteClusterShards.get(\"total\"), greaterThanOrEqualTo(0));\n         assertThat((Integer) remoteClusterShards.get(\"successful\"), equalTo((Integer) remoteClusterShards.get(\"total\")));\n-        assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));\n+        // assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));",
        "comment_created_at": "2025-06-26T15:59:32+00:00",
        "comment_author": "julian-elastic",
        "comment_body": "Do you agree this check should be removed? The new test cases we added have both local and remote to start with and later we filter local or remote",
        "pr_file_module": null
      },
      {
        "comment_id": "2175130811",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130019,
        "pr_file": "x-pack/plugin/esql/qa/server/multi-clusters/src/javaRestTest/java/org/elasticsearch/xpack/esql/ccq/MultiClustersIT.java",
        "discussion_id": "2169402115",
        "commented_code": "@@ -254,7 +255,7 @@ private void assertClusterDetailsMap(Map<String, Object> result, boolean remoteO\n         assertThat(remoteClusterShards.keySet(), equalTo(Set.of(\"total\", \"successful\", \"skipped\", \"failed\")));\n         assertThat((Integer) remoteClusterShards.get(\"total\"), greaterThanOrEqualTo(0));\n         assertThat((Integer) remoteClusterShards.get(\"successful\"), equalTo((Integer) remoteClusterShards.get(\"total\")));\n-        assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));\n+        // assertThat((Integer) remoteClusterShards.get(\"skipped\"), equalTo(0));",
        "comment_created_at": "2025-06-30T13:49:29+00:00",
        "comment_author": "nik9000",
        "comment_body": "I changed it to `greaterThanOrEqualTo(0)` - it's not assertion a whole lot and that's ok with me.",
        "pr_file_module": null
      }
    ]
  }
]