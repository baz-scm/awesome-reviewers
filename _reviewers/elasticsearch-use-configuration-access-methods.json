[
  {
    "discussion_id": "2171109662",
    "pr_number": 129684,
    "pr_file": "server/src/main/java/org/elasticsearch/index/IndexService.java",
    "created_at": "2025-06-27T07:57:12+00:00",
    "commented_code": "mapperMetrics\n            );\n            this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, circuitBreakerService);\n            boolean sourceOnly = Boolean.parseBoolean(indexSettings.getSettings().get(\"index.source_only\"));\n            boolean sourceOnly = isSourceOnly(indexSettings);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2171109662",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "server/src/main/java/org/elasticsearch/index/IndexService.java",
        "discussion_id": "2171109662",
        "commented_code": "@@ -246,7 +247,7 @@ public IndexService(\n                 mapperMetrics\n             );\n             this.indexFieldData = new IndexFieldDataService(indexSettings, indicesFieldDataCache, circuitBreakerService);\n-            boolean sourceOnly = Boolean.parseBoolean(indexSettings.getSettings().get(\"index.source_only\"));\n+            boolean sourceOnly = isSourceOnly(indexSettings);",
        "comment_created_at": "2025-06-27T07:57:12+00:00",
        "comment_author": "mosche",
        "comment_body": "I had a closer look at this, this can actually be \r\n```suggestion\r\n            boolean sourceOnly = indexSettings.getAsBoolean(\"index.source_only\", false);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171136090",
    "pr_number": 129684,
    "pr_file": "server/src/main/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexAction.java",
    "created_at": "2025-06-27T08:05:11+00:00",
    "commented_code": "if (ia.isSystem()) {\n                            attributes.add(Attribute.SYSTEM);\n                        }\n                        final boolean isFrozen = Boolean.parseBoolean(writeIndex.getSettings().get(\"index.frozen\"));\n                        final boolean isFrozen = isFrozen(writeIndex);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2171136090",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "server/src/main/java/org/elasticsearch/action/admin/indices/resolve/ResolveIndexAction.java",
        "discussion_id": "2171136090",
        "commented_code": "@@ -629,7 +630,7 @@ private static void enrichIndexAbstraction(\n                         if (ia.isSystem()) {\n                             attributes.add(Attribute.SYSTEM);\n                         }\n-                        final boolean isFrozen = Boolean.parseBoolean(writeIndex.getSettings().get(\"index.frozen\"));\n+                        final boolean isFrozen = isFrozen(writeIndex);",
        "comment_created_at": "2025-06-27T08:05:11+00:00",
        "comment_author": "mosche",
        "comment_body": "I had a closer look at this, this can actually be \r\n```suggestion\r\n                        final boolean isFrozen = writeIndex.getSettings().getAsBoolean(\"index.frozen\", false);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174997550",
    "pr_number": 129684,
    "pr_file": "x-pack/qa/kerberos-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosAuthenticationIT.java",
    "created_at": "2025-06-30T12:49:40+00:00",
    "commented_code": "public void testLoginByKeytab() throws IOException, PrivilegedActionException {\n        final String keytabPath = krb5Fixture.getKeytab().toString();\n        final boolean enabledDebugLogs = Boolean.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);\n        final boolean enabledDebugLogs = Booleans.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2174997550",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "x-pack/qa/kerberos-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosAuthenticationIT.java",
        "discussion_id": "2174997550",
        "commented_code": "@@ -141,7 +142,7 @@ public void setupRoleMapping() throws IOException {\n \n     public void testLoginByKeytab() throws IOException, PrivilegedActionException {\n         final String keytabPath = krb5Fixture.getKeytab().toString();\n-        final boolean enabledDebugLogs = Boolean.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);\n+        final boolean enabledDebugLogs = Booleans.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);",
        "comment_created_at": "2025-06-30T12:49:40+00:00",
        "comment_author": "mosche",
        "comment_body": "```suggestion\r\n        final boolean enabledDebugLogs = Booleans.parseBoolean(System.getProperty(ENABLE_KERBEROS_DEBUG_LOGS_KEY), false);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2174999003",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "x-pack/qa/kerberos-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosAuthenticationIT.java",
        "discussion_id": "2174997550",
        "commented_code": "@@ -141,7 +142,7 @@ public void setupRoleMapping() throws IOException {\n \n     public void testLoginByKeytab() throws IOException, PrivilegedActionException {\n         final String keytabPath = krb5Fixture.getKeytab().toString();\n-        final boolean enabledDebugLogs = Boolean.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);\n+        final boolean enabledDebugLogs = Booleans.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);",
        "comment_created_at": "2025-06-30T12:50:25+00:00",
        "comment_author": "mosche",
        "comment_body": "The tests below also need to default to `false`",
        "pr_file_module": null
      },
      {
        "comment_id": "2176671414",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129684,
        "pr_file": "x-pack/qa/kerberos-tests/src/javaRestTest/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosAuthenticationIT.java",
        "discussion_id": "2174997550",
        "commented_code": "@@ -141,7 +142,7 @@ public void setupRoleMapping() throws IOException {\n \n     public void testLoginByKeytab() throws IOException, PrivilegedActionException {\n         final String keytabPath = krb5Fixture.getKeytab().toString();\n-        final boolean enabledDebugLogs = Boolean.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);\n+        final boolean enabledDebugLogs = Booleans.parseBoolean(ENABLE_KERBEROS_DEBUG_LOGS_KEY);",
        "comment_created_at": "2025-07-01T07:40:01+00:00",
        "comment_author": "M12b4",
        "comment_body": "Why",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138277505",
    "pr_number": 129128,
    "pr_file": "server/src/main/java/org/elasticsearch/action/admin/indices/readonly/RemoveIndexBlockRequest.java",
    "created_at": "2025-06-10T15:59:54+00:00",
    "commented_code": "/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the \"Elastic License\n * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n * Public License v 1\"; you may not use this file except in compliance with, at\n * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n * License v3.0 only\", or the \"Server Side Public License, v 1\".\n */\n\npackage org.elasticsearch.action.admin.indices.readonly;\n\nimport org.elasticsearch.action.ActionRequestValidationException;\nimport org.elasticsearch.action.IndicesRequest;\nimport org.elasticsearch.action.support.IndicesOptions;\nimport org.elasticsearch.action.support.master.AcknowledgedRequest;\nimport org.elasticsearch.cluster.metadata.IndexMetadata.APIBlock;\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.io.stream.StreamOutput;\nimport org.elasticsearch.common.util.CollectionUtils;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Objects;\n\nimport static org.elasticsearch.action.ValidateActions.addValidationError;\n\n/**\n * A request to remove a block from an index.\n */\npublic class RemoveIndexBlockRequest extends AcknowledgedRequest<RemoveIndexBlockRequest> implements IndicesRequest.Replaceable {\n\n    private final APIBlock block;\n    private String[] indices;\n    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();\n\n    public RemoveIndexBlockRequest(StreamInput in) throws IOException {\n        super(in);\n        indices = in.readStringArray();\n        indicesOptions = IndicesOptions.readIndicesOptions(in);\n        block = APIBlock.readFrom(in);\n    }\n\n    /**\n     * Constructs a new request for the specified block and indices\n     */\n    public RemoveIndexBlockRequest(APIBlock block, String... indices) {\n        super(TRAPPY_IMPLICIT_DEFAULT_MASTER_NODE_TIMEOUT, DEFAULT_ACK_TIMEOUT);",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2138277505",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 129128,
        "pr_file": "server/src/main/java/org/elasticsearch/action/admin/indices/readonly/RemoveIndexBlockRequest.java",
        "discussion_id": "2138277505",
        "commented_code": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n+ * or more contributor license agreements. Licensed under the \"Elastic License\n+ * 2.0\", the \"GNU Affero General Public License v3.0 only\", and the \"Server Side\n+ * Public License v 1\"; you may not use this file except in compliance with, at\n+ * your election, the \"Elastic License 2.0\", the \"GNU Affero General Public\n+ * License v3.0 only\", or the \"Server Side Public License, v 1\".\n+ */\n+\n+package org.elasticsearch.action.admin.indices.readonly;\n+\n+import org.elasticsearch.action.ActionRequestValidationException;\n+import org.elasticsearch.action.IndicesRequest;\n+import org.elasticsearch.action.support.IndicesOptions;\n+import org.elasticsearch.action.support.master.AcknowledgedRequest;\n+import org.elasticsearch.cluster.metadata.IndexMetadata.APIBlock;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.util.CollectionUtils;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import static org.elasticsearch.action.ValidateActions.addValidationError;\n+\n+/**\n+ * A request to remove a block from an index.\n+ */\n+public class RemoveIndexBlockRequest extends AcknowledgedRequest<RemoveIndexBlockRequest> implements IndicesRequest.Replaceable {\n+\n+    private final APIBlock block;\n+    private String[] indices;\n+    private IndicesOptions indicesOptions = IndicesOptions.strictExpandOpen();\n+\n+    public RemoveIndexBlockRequest(StreamInput in) throws IOException {\n+        super(in);\n+        indices = in.readStringArray();\n+        indicesOptions = IndicesOptions.readIndicesOptions(in);\n+        block = APIBlock.readFrom(in);\n+    }\n+\n+    /**\n+     * Constructs a new request for the specified block and indices\n+     */\n+    public RemoveIndexBlockRequest(APIBlock block, String... indices) {\n+        super(TRAPPY_IMPLICIT_DEFAULT_MASTER_NODE_TIMEOUT, DEFAULT_ACK_TIMEOUT);",
        "comment_created_at": "2025-06-10T15:59:54+00:00",
        "comment_author": "nielsbauman",
        "comment_body": "I know this is what the add block request does, but we shouldn't use the implicit default master node timeout here. \r\n```suggestion\r\n    public RemoveIndexBlockRequest(TimeValue masterTimeout, TimeValue ackTimeout, APIBlock block, String... indices) {\r\n        super(masterTimeout, ackTimeout);\r\n```\r\nYou'll have to propagate this change to the callers. In the REST class, you can simply pass the two timeouts to the constructor instead of using the setters. In the `RemoveIndexBlockRequestBuilder`, you'll have to propagate the two parameters as well. In all the usages in tests, you can use `TEST_REQUEST_TIMEOUT` for both timeouts.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167359107",
    "pr_number": 130033,
    "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/huggingface/rerank/HuggingFaceRerankServiceSettings.java",
    "created_at": "2025-06-25T18:34:59+00:00",
    "commented_code": "return TransportVersions.ML_INFERENCE_HUGGING_FACE_RERANK_ADDED;\n    }\n\n    @Override\n    public boolean supportsVersion(TransportVersion version) {\n        return ServiceSettings.super.supportsVersion(version)",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "2167359107",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130033,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/huggingface/rerank/HuggingFaceRerankServiceSettings.java",
        "discussion_id": "2167359107",
        "commented_code": "@@ -118,6 +118,12 @@ public TransportVersion getMinimalSupportedVersion() {\n         return TransportVersions.ML_INFERENCE_HUGGING_FACE_RERANK_ADDED;\n     }\n \n+    @Override\n+    public boolean supportsVersion(TransportVersion version) {\n+        return ServiceSettings.super.supportsVersion(version)",
        "comment_created_at": "2025-06-25T18:34:59+00:00",
        "comment_author": "nik9000",
        "comment_body": "I think it'd be more clear to do `version.onOrAfter(ML_INFERENCE_HUGGING_FACE_RERANK_ADDED) || version.isPatchFrom(ML_INFERENCE_HUGGING_FACE_RERANK_ADDED_8_19)`. Something like that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2167360875",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 130033,
        "pr_file": "x-pack/plugin/inference/src/main/java/org/elasticsearch/xpack/inference/services/huggingface/rerank/HuggingFaceRerankServiceSettings.java",
        "discussion_id": "2167359107",
        "commented_code": "@@ -118,6 +118,12 @@ public TransportVersion getMinimalSupportedVersion() {\n         return TransportVersions.ML_INFERENCE_HUGGING_FACE_RERANK_ADDED;\n     }\n \n+    @Override\n+    public boolean supportsVersion(TransportVersion version) {\n+        return ServiceSettings.super.supportsVersion(version)",
        "comment_created_at": "2025-06-25T18:36:01+00:00",
        "comment_author": "nik9000",
        "comment_body": "It's the same thing - but it's easier to scan it and make *sure* it's the same thing.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "967029501",
    "pr_number": 89112,
    "pr_file": "server/src/main/java/org/elasticsearch/index/analysis/AnalyzerComponents.java",
    "created_at": "2022-09-09T12:44:59+00:00",
    "commented_code": "final Map<String, CharFilterFactory> charFilters,\n        final Map<String, TokenFilterFactory> tokenFilters\n    ) {\n        for (String key : analyzerSettings.keySet()) {\n            switch (key) {\n                case \"tokenizer\", \"char_filter\", \"filter\", \"type\", \"position_increment_gap\" -> {}",
    "repo_full_name": "elastic/elasticsearch",
    "discussion_comments": [
      {
        "comment_id": "967029501",
        "repo_full_name": "elastic/elasticsearch",
        "pr_number": 89112,
        "pr_file": "server/src/main/java/org/elasticsearch/index/analysis/AnalyzerComponents.java",
        "discussion_id": "967029501",
        "commented_code": "@@ -44,6 +44,12 @@ static AnalyzerComponents createComponents(\n         final Map<String, CharFilterFactory> charFilters,\n         final Map<String, TokenFilterFactory> tokenFilters\n     ) {\n+        for (String key : analyzerSettings.keySet()) {\n+            switch (key) {\n+                case \"tokenizer\", \"char_filter\", \"filter\", \"type\", \"position_increment_gap\" -> {}",
        "comment_created_at": "2022-09-09T12:44:59+00:00",
        "comment_author": "javanna",
        "comment_body": "another way of doing this, without deduplicating the expected analyzer keys, would be to duplicate the settings into a mutable map, which we'd remove from every time we read a certain setting. At the end, if any item is left in the map it means that some unsupported param has been provided.",
        "pr_file_module": null
      }
    ]
  }
]