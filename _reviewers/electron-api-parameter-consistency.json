[
  {
    "discussion_id": "2221108816",
    "pr_number": 47838,
    "pr_file": "shell/browser/api/electron_api_tray.cc",
    "created_at": "2025-07-22T04:45:07+00:00",
    "commented_code": "#if BUILDFLAG(IS_WIN)",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2221108816",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "shell/browser/api/electron_api_tray.cc",
        "discussion_id": "2221108816",
        "commented_code": "@@ -72,7 +74,7 @@ gin::Handle<Tray> Tray::New(gin_helper::ErrorThrower thrower,\n \n #if BUILDFLAG(IS_WIN)",
        "comment_created_at": "2025-07-22T04:45:07+00:00",
        "comment_author": "itsananderson",
        "comment_body": "Looks like we're only checking this in Windows, but the parameter is typed as a UUID regardless. I think that means on Mac we'd get  a null value for a non-GUID string even though it sounds like Cocoa would allow a non-GUID identifier.",
        "pr_file_module": null
      },
      {
        "comment_id": "2221170139",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "shell/browser/api/electron_api_tray.cc",
        "discussion_id": "2221108816",
        "commented_code": "@@ -72,7 +74,7 @@ gin::Handle<Tray> Tray::New(gin_helper::ErrorThrower thrower,\n \n #if BUILDFLAG(IS_WIN)",
        "comment_created_at": "2025-07-22T05:08:34+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "> Cocoa would allow a non-GUID\r\n\r\nCocoa might, but IMO for ease of API across platforms it should just be a GUID on both. Then folks can even use the _same_ GUID which is nice. Saying \"this is a GUID on windows and on macOS can be any string have fun\" just feels bad. So GUID everywhere is right IMO",
        "pr_file_module": null
      },
      {
        "comment_id": "2221738084",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "shell/browser/api/electron_api_tray.cc",
        "discussion_id": "2221108816",
        "commented_code": "@@ -72,7 +74,7 @@ gin::Handle<Tray> Tray::New(gin_helper::ErrorThrower thrower,\n \n #if BUILDFLAG(IS_WIN)",
        "comment_created_at": "2025-07-22T08:42:54+00:00",
        "comment_author": "codebytere",
        "comment_body": "I'm in agreement with @MarshallOfSound here - unless there's a strong use case for non-guid identifiers we can point to on macOS, platform parity and consistency should take precedence here. That'll also make it easier to maintain and reduce platform specific parsing etc we need to do.",
        "pr_file_module": null
      },
      {
        "comment_id": "2225915723",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "shell/browser/api/electron_api_tray.cc",
        "discussion_id": "2221108816",
        "commented_code": "@@ -72,7 +74,7 @@ gin::Handle<Tray> Tray::New(gin_helper::ErrorThrower thrower,\n \n #if BUILDFLAG(IS_WIN)",
        "comment_created_at": "2025-07-23T15:13:23+00:00",
        "comment_author": "itsananderson",
        "comment_body": "Hypothetically if a Mac app that managed their icon natively (or used a native module to set the identifier) wanted to migrate to use the Electron API, then they might be unable to adopt this API without resetting the tray icon position for all their users. However, that's a sufficiently obscure use case that I'm OK with the tradeoff if we want to err on the side of API simplicity.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "49862538",
    "pr_number": 4112,
    "pr_file": "atom/browser/native_window.h",
    "created_at": "2016-01-15T15:07:16+00:00",
    "commented_code": "virtual bool IsMinimized() = 0;\n   virtual void SetFullScreen(bool fullscreen) = 0;\n   virtual bool IsFullscreen() const = 0;\n-  virtual void SetBounds(const gfx::Rect& bounds) = 0;\n+  virtual void SetBounds(const gfx::Rect& bounds, bool animate) = 0;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "49862538",
        "repo_full_name": "electron/electron",
        "pr_number": 4112,
        "pr_file": "atom/browser/native_window.h",
        "discussion_id": "49862538",
        "commented_code": "@@ -105,13 +105,13 @@ class NativeWindow : public base::SupportsUserData,\n   virtual bool IsMinimized() = 0;\n   virtual void SetFullScreen(bool fullscreen) = 0;\n   virtual bool IsFullscreen() const = 0;\n-  virtual void SetBounds(const gfx::Rect& bounds) = 0;\n+  virtual void SetBounds(const gfx::Rect& bounds, bool animate) = 0;",
        "comment_created_at": "2016-01-15T15:07:16+00:00",
        "comment_author": "zcbenz",
        "comment_body": "We should add default value for `animate` so we don't have to pass `false` in every call. Apparently only user would like to resize window with animation and all calls in Electron's code would just pass `false`.\n\n``` c++\nvoid SetBounds(const gfx::Rect& bounds, bool animate = false);\nvoid SetSize(const gfx::Size&, bool animate = false);\nvoid SetPosition(const gfx::Point& position, bool animate = false);\nvoid SetContentSize(const gfx::Size&, bool animate = false);\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2057043845",
    "pr_number": 46749,
    "pr_file": "shell/browser/native_window_mac.mm",
    "created_at": "2025-04-23T23:43:25+00:00",
    "commented_code": "// Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2057043845",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2057043845",
        "commented_code": "@@ -284,7 +284,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);",
        "comment_created_at": "2025-04-23T23:43:25+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "By spec these should have an enforced minimum of 100\r\n\r\n> Specifies the width of the content area, including scrollbars. The minimum required value is 100.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059120554",
    "pr_number": 46749,
    "pr_file": "shell/browser/native_window_mac.mm",
    "created_at": "2025-04-24T19:46:23+00:00",
    "commented_code": "// Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2059120554",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2059120554",
        "commented_code": "@@ -291,7 +291,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
        "comment_created_at": "2025-04-24T19:46:23+00:00",
        "comment_author": "ckerr",
        "comment_body": "1. Better to use `foo = std::max(100, inner_foo)` here\r\n\r\n2. We're still allowing a value of <100 to be inherited from either `width` or `height` via `options::kWidth`. Is that OK?\r\n\r\n3. Maybe we should update the docs to point out that a minimum of 100 is required?",
        "pr_file_module": null
      },
      {
        "comment_id": "2059838416",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2059120554",
        "commented_code": "@@ -291,7 +291,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
        "comment_created_at": "2025-04-25T08:53:23+00:00",
        "comment_author": "codebytere",
        "comment_body": "It's also not clear to me _why_ 100 is being used here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2060239503",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2059120554",
        "commented_code": "@@ -291,7 +291,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
        "comment_created_at": "2025-04-25T13:24:49+00:00",
        "comment_author": "ckerr",
        "comment_body": "@codebytere it's in the spec:\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/open#width\r\n\r\n> Specifies the width of the content area, including scrollbars. The minimum required value is 100.\r\n\r\nBut you're right, that's  not clear unless one reads the spec or this thread. Maybe a symbolic constant name could be used to make it clearer, e.g.\r\n\r\n```objc++\r\nconstexpr int kMinSizeReqdBySpec = 100;\r\n```\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2060314690",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2059120554",
        "commented_code": "@@ -291,7 +291,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
        "comment_created_at": "2025-04-25T14:06:48+00:00",
        "comment_author": "codebytere",
        "comment_body": "ah cool - ty! perhaps a comment with spec link?",
        "pr_file_module": null
      },
      {
        "comment_id": "2067471118",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "2059120554",
        "commented_code": "@@ -291,7 +291,19 @@ static bool FromV8(v8::Isolate* isolate,\n \n   // Resize to content bounds.\n   bool use_content_size = false;\n+  int inner_width = 0;\n+  int inner_height = 0;\n   options.Get(options::kUseContentSize, &use_content_size);\n+  options.Get(options::kinnerWidth, &inner_width);\n+  options.Get(options::kinnerHeight, &inner_height);\n+  if (inner_width || inner_height) {\n+    use_content_size = true;\n+    if (inner_width)\n+      width = (inner_width < 100) ? 100 : inner_width;\n+    if (inner_height)\n+      height = (inner_height < 100) ? 100 : inner_height;",
        "comment_created_at": "2025-04-29T21:41:00+00:00",
        "comment_author": "mlaurencin",
        "comment_body": "I think since this is supposed to be inline with the window.open spec, our docs do not need to also state that it adheres to this requirement specifically. Although, I think linking to the spec in the code is helpful to understand what might seem like an arbitrary value at first glance.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1866619980",
    "pr_number": 44692,
    "pr_file": "shell/browser/api/electron_api_web_request.cc",
    "created_at": "2024-12-02T21:09:39+00:00",
    "commented_code": "gin::Arguments* args) {\n   v8::Local<v8::Value> arg;\n \n-  // { urls, types }.\n-  std::set<std::string> filter_patterns, filter_types;\n+  // { urls, excludeUrls, types }.\n+  std::set<std::string> filter_include_patterns, filter_exclude_patterns,\n+      filter_types;\n+  RequestFilter filter;\n+\n   gin::Dictionary dict(args->isolate());\n   if (args->GetNext(&arg) && !arg->IsFunction()) {\n     // Note that gin treats Function as Dictionary when doing conversions, so we\n     // have to explicitly check if the argument is Function before trying to\n     // convert it to Dictionary.\n     if (gin::ConvertFromV8(args->isolate(), arg, &dict)) {\n-      if (!dict.Get(\"urls\", &filter_patterns)) {\n+      if (!dict.Get(\"urls\", &filter_include_patterns)) {\n         args->ThrowTypeError(\"Parameter 'filter' must have property 'urls'.\");\n         return;\n       }\n+\n+      if (filter_include_patterns.empty()) {\n+        util::EmitWarning(\n+            \"The urls array in WebRequestFilter is empty, which is deprecated. \"\n+            \"Please use '<all_urls>' to match all URLs.\",\n+            \"DeprecationWarning\");\n+        filter_include_patterns.insert(\"<all_urls>\");\n+      }\n+\n+      dict.Get(\"excludeUrls\", &filter_exclude_patterns);\n       dict.Get(\"types\", &filter_types);\n       args->GetNext(&arg);\n+      filter.SetFilterDefined(true);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1866619980",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "shell/browser/api/electron_api_web_request.cc",
        "discussion_id": "1866619980",
        "commented_code": "@@ -617,37 +659,39 @@ void WebRequest::SetListener(Event event,\n                              gin::Arguments* args) {\n   v8::Local<v8::Value> arg;\n \n-  // { urls, types }.\n-  std::set<std::string> filter_patterns, filter_types;\n+  // { urls, excludeUrls, types }.\n+  std::set<std::string> filter_include_patterns, filter_exclude_patterns,\n+      filter_types;\n+  RequestFilter filter;\n+\n   gin::Dictionary dict(args->isolate());\n   if (args->GetNext(&arg) && !arg->IsFunction()) {\n     // Note that gin treats Function as Dictionary when doing conversions, so we\n     // have to explicitly check if the argument is Function before trying to\n     // convert it to Dictionary.\n     if (gin::ConvertFromV8(args->isolate(), arg, &dict)) {\n-      if (!dict.Get(\"urls\", &filter_patterns)) {\n+      if (!dict.Get(\"urls\", &filter_include_patterns)) {\n         args->ThrowTypeError(\"Parameter 'filter' must have property 'urls'.\");\n         return;\n       }\n+\n+      if (filter_include_patterns.empty()) {\n+        util::EmitWarning(\n+            \"The urls array in WebRequestFilter is empty, which is deprecated. \"\n+            \"Please use '<all_urls>' to match all URLs.\",\n+            \"DeprecationWarning\");\n+        filter_include_patterns.insert(\"<all_urls>\");\n+      }\n+\n+      dict.Get(\"excludeUrls\", &filter_exclude_patterns);\n       dict.Get(\"types\", &filter_types);\n       args->GetNext(&arg);\n+      filter.SetFilterDefined(true);",
        "comment_created_at": "2024-12-02T21:09:39+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "If no filter object is provided, my understanding is that the intended behavior is to allow all URLs to be processed. Is that still the case?\r\n\r\nI think if no filter object is provided by the JS args, we might need to append `<all_urls>`. That would also allow removing `SetFilterDefined()`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1919016140",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "shell/browser/api/electron_api_web_request.cc",
        "discussion_id": "1866619980",
        "commented_code": "@@ -617,37 +659,39 @@ void WebRequest::SetListener(Event event,\n                              gin::Arguments* args) {\n   v8::Local<v8::Value> arg;\n \n-  // { urls, types }.\n-  std::set<std::string> filter_patterns, filter_types;\n+  // { urls, excludeUrls, types }.\n+  std::set<std::string> filter_include_patterns, filter_exclude_patterns,\n+      filter_types;\n+  RequestFilter filter;\n+\n   gin::Dictionary dict(args->isolate());\n   if (args->GetNext(&arg) && !arg->IsFunction()) {\n     // Note that gin treats Function as Dictionary when doing conversions, so we\n     // have to explicitly check if the argument is Function before trying to\n     // convert it to Dictionary.\n     if (gin::ConvertFromV8(args->isolate(), arg, &dict)) {\n-      if (!dict.Get(\"urls\", &filter_patterns)) {\n+      if (!dict.Get(\"urls\", &filter_include_patterns)) {\n         args->ThrowTypeError(\"Parameter 'filter' must have property 'urls'.\");\n         return;\n       }\n+\n+      if (filter_include_patterns.empty()) {\n+        util::EmitWarning(\n+            \"The urls array in WebRequestFilter is empty, which is deprecated. \"\n+            \"Please use '<all_urls>' to match all URLs.\",\n+            \"DeprecationWarning\");\n+        filter_include_patterns.insert(\"<all_urls>\");\n+      }\n+\n+      dict.Get(\"excludeUrls\", &filter_exclude_patterns);\n       dict.Get(\"types\", &filter_types);\n       args->GetNext(&arg);\n+      filter.SetFilterDefined(true);",
        "comment_created_at": "2025-01-16T18:34:17+00:00",
        "comment_author": "alicelovescake",
        "comment_body": "Good call! Made the change you suggested and [added a test here](https://github.com/electron/electron/pull/44692/files#diff-a4a9a60890e12e8709f1483f5b56063e733ffc1f759cb605c66a9635b5de209dR104) for matching all requests when no filters are passed. \ud83e\udd1e CI passes!",
        "pr_file_module": null
      },
      {
        "comment_id": "1944989185",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "shell/browser/api/electron_api_web_request.cc",
        "discussion_id": "1866619980",
        "commented_code": "@@ -617,37 +659,39 @@ void WebRequest::SetListener(Event event,\n                              gin::Arguments* args) {\n   v8::Local<v8::Value> arg;\n \n-  // { urls, types }.\n-  std::set<std::string> filter_patterns, filter_types;\n+  // { urls, excludeUrls, types }.\n+  std::set<std::string> filter_include_patterns, filter_exclude_patterns,\n+      filter_types;\n+  RequestFilter filter;\n+\n   gin::Dictionary dict(args->isolate());\n   if (args->GetNext(&arg) && !arg->IsFunction()) {\n     // Note that gin treats Function as Dictionary when doing conversions, so we\n     // have to explicitly check if the argument is Function before trying to\n     // convert it to Dictionary.\n     if (gin::ConvertFromV8(args->isolate(), arg, &dict)) {\n-      if (!dict.Get(\"urls\", &filter_patterns)) {\n+      if (!dict.Get(\"urls\", &filter_include_patterns)) {\n         args->ThrowTypeError(\"Parameter 'filter' must have property 'urls'.\");\n         return;\n       }\n+\n+      if (filter_include_patterns.empty()) {\n+        util::EmitWarning(\n+            \"The urls array in WebRequestFilter is empty, which is deprecated. \"\n+            \"Please use '<all_urls>' to match all URLs.\",\n+            \"DeprecationWarning\");\n+        filter_include_patterns.insert(\"<all_urls>\");\n+      }\n+\n+      dict.Get(\"excludeUrls\", &filter_exclude_patterns);\n       dict.Get(\"types\", &filter_types);\n       args->GetNext(&arg);\n+      filter.SetFilterDefined(true);",
        "comment_created_at": "2025-02-06T16:00:57+00:00",
        "comment_author": "alicelovescake",
        "comment_body": "FYI [this line has the updated change](https://github.com/electron/electron/pull/44692/files#diff-8ed5a3e4dc084295f7e869c92b0bd6575a3a4f5a63835381350da2f9debd2a15R682)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "587823594",
    "pr_number": 27917,
    "pr_file": "shell/browser/api/electron_api_session.h",
    "created_at": "2021-03-04T21:04:09+00:00",
    "commented_code": "v8::Global<v8::Value> service_worker_context_;\n   v8::Global<v8::Value> web_request_;\n \n+#if BUILDFLAG(ENABLE_ELECTRON_EXTENSIONS)\n+  using GetTabHandler =\n+      base::RepeatingCallback<v8::Local<v8::Value>(gin::Handle<WebContents>)>;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "587823594",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_session.h",
        "discussion_id": "587823594",
        "commented_code": "@@ -178,6 +208,16 @@ class Session : public gin::Wrappable<Session>,\n   v8::Global<v8::Value> service_worker_context_;\n   v8::Global<v8::Value> web_request_;\n \n+#if BUILDFLAG(ENABLE_ELECTRON_EXTENSIONS)\n+  using GetTabHandler =\n+      base::RepeatingCallback<v8::Local<v8::Value>(gin::Handle<WebContents>)>;",
        "comment_created_at": "2021-03-04T21:04:09+00:00",
        "comment_author": "nornagon",
        "comment_body": "No need to explicitly wrap with `gin::Handle`, the gin converters will handle that automatically.\r\n```suggestion\r\n      base::RepeatingCallback<v8::Local<v8::Value>(WebContents*)>;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "594290241",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_session.h",
        "discussion_id": "587823594",
        "commented_code": "@@ -178,6 +208,16 @@ class Session : public gin::Wrappable<Session>,\n   v8::Global<v8::Value> service_worker_context_;\n   v8::Global<v8::Value> web_request_;\n \n+#if BUILDFLAG(ENABLE_ELECTRON_EXTENSIONS)\n+  using GetTabHandler =\n+      base::RepeatingCallback<v8::Local<v8::Value>(gin::Handle<WebContents>)>;",
        "comment_created_at": "2021-03-15T12:25:37+00:00",
        "comment_author": "sentialx",
        "comment_body": "I think I got these errors by this:\r\n![image](https://user-images.githubusercontent.com/11065386/111153181-eb568480-8591-11eb-9888-2ba19a6ba751.png)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191787163",
    "pr_number": 37986,
    "pr_file": "shell/browser/api/electron_api_session.cc",
    "created_at": "2023-05-11T23:57:27+00:00",
    "commented_code": "std::move(auth_dynamic_params));\n }\n \n-void Session::SetUserAgent(const std::string& user_agent,\n-                           gin::Arguments* args) {\n-  browser_context_->SetUserAgent(user_agent);\n-  auto* network_context =\n-      browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n-  network_context->SetUserAgent(user_agent);\n+void Session::SetUserAgent(gin::Arguments* gin_args) {\n+  gin_helper::Arguments* args = static_cast<gin_helper::Arguments*>(gin_args);\n \n+  std::string user_agent;\n   std::string accept_lang;\n-  if (args->GetNext(&accept_lang)) {\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+  bool has_user_agent = false;\n+  bool has_ua_metadata = false;\n+  bool has_accept_lang = false;\n+\n+  gin_helper::Dictionary opts;\n+\n+  if (args->GetNext(&user_agent)) {\n+    has_user_agent = true;\n+  } else if (args->GetNext(&opts)) {\n+    has_user_agent = opts.Get(\"userAgent\", &user_agent);\n+    has_ua_metadata = opts.Get(\"userAgentMetadata\", &ua_metadata);\n+    has_accept_lang = opts.Get(\"acceptLanguages\", &accept_lang);\n+  }\n+  if (!has_accept_lang) {\n+    has_accept_lang = args->GetNext(&accept_lang);\n+  }\n+\n+  auto* network_context =\n+    browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n+  if (has_user_agent) {\n+    browser_context_->SetUserAgent(user_agent);\n+    network_context->SetUserAgent(user_agent);\n+  }\n+\n+  if (has_ua_metadata) {\n+    browser_context_->SetUserAgentMetadata(ua_metadata);\n+  }\n+  if (has_accept_lang) {\n     network_context->SetAcceptLanguage(\n-        net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n+      net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n   }\n }\n \n std::string Session::GetUserAgent() {\n   return browser_context_->GetUserAgent();\n }\n \n+void Session::SetUserAgentMetadata(absl::optional<blink::UserAgentMetadata> ua_metadata) {\n+  browser_context_->SetUserAgentMetadata(ua_metadata);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1191787163",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "1191787163",
        "commented_code": "@@ -752,24 +755,57 @@ void Session::AllowNTLMCredentialsForDomains(const std::string& domains) {\n       std::move(auth_dynamic_params));\n }\n \n-void Session::SetUserAgent(const std::string& user_agent,\n-                           gin::Arguments* args) {\n-  browser_context_->SetUserAgent(user_agent);\n-  auto* network_context =\n-      browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n-  network_context->SetUserAgent(user_agent);\n+void Session::SetUserAgent(gin::Arguments* gin_args) {\n+  gin_helper::Arguments* args = static_cast<gin_helper::Arguments*>(gin_args);\n \n+  std::string user_agent;\n   std::string accept_lang;\n-  if (args->GetNext(&accept_lang)) {\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+  bool has_user_agent = false;\n+  bool has_ua_metadata = false;\n+  bool has_accept_lang = false;\n+\n+  gin_helper::Dictionary opts;\n+\n+  if (args->GetNext(&user_agent)) {\n+    has_user_agent = true;\n+  } else if (args->GetNext(&opts)) {\n+    has_user_agent = opts.Get(\"userAgent\", &user_agent);\n+    has_ua_metadata = opts.Get(\"userAgentMetadata\", &ua_metadata);\n+    has_accept_lang = opts.Get(\"acceptLanguages\", &accept_lang);\n+  }\n+  if (!has_accept_lang) {\n+    has_accept_lang = args->GetNext(&accept_lang);\n+  }\n+\n+  auto* network_context =\n+    browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n+  if (has_user_agent) {\n+    browser_context_->SetUserAgent(user_agent);\n+    network_context->SetUserAgent(user_agent);\n+  }\n+\n+  if (has_ua_metadata) {\n+    browser_context_->SetUserAgentMetadata(ua_metadata);\n+  }\n+  if (has_accept_lang) {\n     network_context->SetAcceptLanguage(\n-        net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n+      net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n   }\n }\n \n std::string Session::GetUserAgent() {\n   return browser_context_->GetUserAgent();\n }\n \n+void Session::SetUserAgentMetadata(absl::optional<blink::UserAgentMetadata> ua_metadata) {\n+  browser_context_->SetUserAgentMetadata(ua_metadata);",
        "comment_created_at": "2023-05-11T23:57:27+00:00",
        "comment_author": "zcbenz",
        "comment_body": "```suggestion\r\n  browser_context_->SetUserAgentMetadata(std::move(ua_metadata));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1193124473",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "1191787163",
        "commented_code": "@@ -752,24 +755,57 @@ void Session::AllowNTLMCredentialsForDomains(const std::string& domains) {\n       std::move(auth_dynamic_params));\n }\n \n-void Session::SetUserAgent(const std::string& user_agent,\n-                           gin::Arguments* args) {\n-  browser_context_->SetUserAgent(user_agent);\n-  auto* network_context =\n-      browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n-  network_context->SetUserAgent(user_agent);\n+void Session::SetUserAgent(gin::Arguments* gin_args) {\n+  gin_helper::Arguments* args = static_cast<gin_helper::Arguments*>(gin_args);\n \n+  std::string user_agent;\n   std::string accept_lang;\n-  if (args->GetNext(&accept_lang)) {\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+  bool has_user_agent = false;\n+  bool has_ua_metadata = false;\n+  bool has_accept_lang = false;\n+\n+  gin_helper::Dictionary opts;\n+\n+  if (args->GetNext(&user_agent)) {\n+    has_user_agent = true;\n+  } else if (args->GetNext(&opts)) {\n+    has_user_agent = opts.Get(\"userAgent\", &user_agent);\n+    has_ua_metadata = opts.Get(\"userAgentMetadata\", &ua_metadata);\n+    has_accept_lang = opts.Get(\"acceptLanguages\", &accept_lang);\n+  }\n+  if (!has_accept_lang) {\n+    has_accept_lang = args->GetNext(&accept_lang);\n+  }\n+\n+  auto* network_context =\n+    browser_context_->GetDefaultStoragePartition()->GetNetworkContext();\n+  if (has_user_agent) {\n+    browser_context_->SetUserAgent(user_agent);\n+    network_context->SetUserAgent(user_agent);\n+  }\n+\n+  if (has_ua_metadata) {\n+    browser_context_->SetUserAgentMetadata(ua_metadata);\n+  }\n+  if (has_accept_lang) {\n     network_context->SetAcceptLanguage(\n-        net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n+      net::HttpUtil::GenerateAcceptLanguageHeader(accept_lang));\n   }\n }\n \n std::string Session::GetUserAgent() {\n   return browser_context_->GetUserAgent();\n }\n \n+void Session::SetUserAgentMetadata(absl::optional<blink::UserAgentMetadata> ua_metadata) {\n+  browser_context_->SetUserAgentMetadata(ua_metadata);",
        "comment_created_at": "2023-05-14T11:05:37+00:00",
        "comment_author": "zeeker999",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191787352",
    "pr_number": 37986,
    "pr_file": "shell/browser/api/electron_api_web_contents.cc",
    "created_at": "2023-05-11T23:58:01+00:00",
    "commented_code": "}\n \n   std::string user_agent;\n-  if (options.Get(\"userAgent\", &user_agent))\n-    SetUserAgent(user_agent);\n+  if (options.Get(\"userAgent\", &user_agent)) {\n+    absl::optional<blink::UserAgentMetadata> ua_metadata;\n+    options.Get(\"userAgentMetadata\", &ua_metadata);\n+    SetUserAgent(user_agent, ua_metadata);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1191787352",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "1191787352",
        "commented_code": "@@ -2321,8 +2321,11 @@ void WebContents::LoadURL(const GURL& url,\n   }\n \n   std::string user_agent;\n-  if (options.Get(\"userAgent\", &user_agent))\n-    SetUserAgent(user_agent);\n+  if (options.Get(\"userAgent\", &user_agent)) {\n+    absl::optional<blink::UserAgentMetadata> ua_metadata;\n+    options.Get(\"userAgentMetadata\", &ua_metadata);\n+    SetUserAgent(user_agent, ua_metadata);",
        "comment_created_at": "2023-05-11T23:58:01+00:00",
        "comment_author": "zcbenz",
        "comment_body": "```suggestion\r\n    SetUserAgent(user_agent, std::move(ua_metadata));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191787449",
    "pr_number": 37986,
    "pr_file": "shell/browser/api/electron_api_web_contents.cc",
    "created_at": "2023-05-11T23:58:15+00:00",
    "commented_code": "}\n }\n \n-void WebContents::SetUserAgent(const std::string& user_agent) {\n+void WebContents::SetUserAgentForJS(gin_helper::Arguments* args) {\n+  std::string user_agent;\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+\n+  gin_helper::Dictionary opts;\n+  if (args->GetNext(&user_agent)) {\n+  } else if (args->GetNext(&opts)) {\n+    opts.Get(\"userAgent\", &user_agent);\n+    opts.Get(\"userAgentMetadata\", &ua_metadata);\n+  } else {\n+    gin_helper::ErrorThrower thrower(args->isolate());\n+    thrower.ThrowError(\n+      \"Expected options to be a string or an object contains a 'userAgent' string property.\");\n+    return;\n+  }\n+  SetUserAgent(user_agent, ua_metadata);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1191787449",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "1191787449",
        "commented_code": "@@ -2536,11 +2539,32 @@ void WebContents::ForcefullyCrashRenderer() {\n   }\n }\n \n-void WebContents::SetUserAgent(const std::string& user_agent) {\n+void WebContents::SetUserAgentForJS(gin_helper::Arguments* args) {\n+  std::string user_agent;\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+\n+  gin_helper::Dictionary opts;\n+  if (args->GetNext(&user_agent)) {\n+  } else if (args->GetNext(&opts)) {\n+    opts.Get(\"userAgent\", &user_agent);\n+    opts.Get(\"userAgentMetadata\", &ua_metadata);\n+  } else {\n+    gin_helper::ErrorThrower thrower(args->isolate());\n+    thrower.ThrowError(\n+      \"Expected options to be a string or an object contains a 'userAgent' string property.\");\n+    return;\n+  }\n+  SetUserAgent(user_agent, ua_metadata);",
        "comment_created_at": "2023-05-11T23:58:15+00:00",
        "comment_author": "zcbenz",
        "comment_body": "```suggestion\r\n  SetUserAgent(user_agent, std::move(ua_metadata));\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1191787668",
    "pr_number": 37986,
    "pr_file": "shell/browser/api/electron_api_web_contents.cc",
    "created_at": "2023-05-11T23:58:54+00:00",
    "commented_code": "}\n }\n \n-void WebContents::SetUserAgent(const std::string& user_agent) {\n+void WebContents::SetUserAgentForJS(gin_helper::Arguments* args) {\n+  std::string user_agent;\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+\n+  gin_helper::Dictionary opts;\n+  if (args->GetNext(&user_agent)) {\n+  } else if (args->GetNext(&opts)) {\n+    opts.Get(\"userAgent\", &user_agent);\n+    opts.Get(\"userAgentMetadata\", &ua_metadata);\n+  } else {\n+    gin_helper::ErrorThrower thrower(args->isolate());\n+    thrower.ThrowError(\n+      \"Expected options to be a string or an object contains a 'userAgent' string property.\");\n+    return;\n+  }\n+  SetUserAgent(user_agent, ua_metadata);\n+}\n+\n+void WebContents::SetUserAgent(const std::string& user_agent, absl::optional<blink::UserAgentMetadata> ua_metadata) {\n   blink::UserAgentOverride ua_override;\n   ua_override.ua_string_override = user_agent;\n-  if (!user_agent.empty())\n-    ua_override.ua_metadata_override = embedder_support::GetUserAgentMetadata();\n+  if (ua_metadata) {\n+    ua_override.ua_metadata_override = ua_metadata;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1191787668",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "1191787668",
        "commented_code": "@@ -2536,11 +2539,32 @@ void WebContents::ForcefullyCrashRenderer() {\n   }\n }\n \n-void WebContents::SetUserAgent(const std::string& user_agent) {\n+void WebContents::SetUserAgentForJS(gin_helper::Arguments* args) {\n+  std::string user_agent;\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+\n+  gin_helper::Dictionary opts;\n+  if (args->GetNext(&user_agent)) {\n+  } else if (args->GetNext(&opts)) {\n+    opts.Get(\"userAgent\", &user_agent);\n+    opts.Get(\"userAgentMetadata\", &ua_metadata);\n+  } else {\n+    gin_helper::ErrorThrower thrower(args->isolate());\n+    thrower.ThrowError(\n+      \"Expected options to be a string or an object contains a 'userAgent' string property.\");\n+    return;\n+  }\n+  SetUserAgent(user_agent, ua_metadata);\n+}\n+\n+void WebContents::SetUserAgent(const std::string& user_agent, absl::optional<blink::UserAgentMetadata> ua_metadata) {\n   blink::UserAgentOverride ua_override;\n   ua_override.ua_string_override = user_agent;\n-  if (!user_agent.empty())\n-    ua_override.ua_metadata_override = embedder_support::GetUserAgentMetadata();\n+  if (ua_metadata) {\n+    ua_override.ua_metadata_override = ua_metadata;",
        "comment_created_at": "2023-05-11T23:58:54+00:00",
        "comment_author": "zcbenz",
        "comment_body": "```suggestion\r\n    ua_override.ua_metadata_override = std::move(ua_metadata);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1193124516",
        "repo_full_name": "electron/electron",
        "pr_number": 37986,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "1191787668",
        "commented_code": "@@ -2536,11 +2539,32 @@ void WebContents::ForcefullyCrashRenderer() {\n   }\n }\n \n-void WebContents::SetUserAgent(const std::string& user_agent) {\n+void WebContents::SetUserAgentForJS(gin_helper::Arguments* args) {\n+  std::string user_agent;\n+  absl::optional<blink::UserAgentMetadata> ua_metadata;\n+\n+  gin_helper::Dictionary opts;\n+  if (args->GetNext(&user_agent)) {\n+  } else if (args->GetNext(&opts)) {\n+    opts.Get(\"userAgent\", &user_agent);\n+    opts.Get(\"userAgentMetadata\", &ua_metadata);\n+  } else {\n+    gin_helper::ErrorThrower thrower(args->isolate());\n+    thrower.ThrowError(\n+      \"Expected options to be a string or an object contains a 'userAgent' string property.\");\n+    return;\n+  }\n+  SetUserAgent(user_agent, ua_metadata);\n+}\n+\n+void WebContents::SetUserAgent(const std::string& user_agent, absl::optional<blink::UserAgentMetadata> ua_metadata) {\n   blink::UserAgentOverride ua_override;\n   ua_override.ua_string_override = user_agent;\n-  if (!user_agent.empty())\n-    ua_override.ua_metadata_override = embedder_support::GetUserAgentMetadata();\n+  if (ua_metadata) {\n+    ua_override.ua_metadata_override = ua_metadata;",
        "comment_created_at": "2023-05-14T11:05:56+00:00",
        "comment_author": "zeeker999",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1634221353",
    "pr_number": 34466,
    "pr_file": "shell/browser/electron_javascript_dialog_manager.cc",
    "created_at": "2024-06-11T05:42:57+00:00",
    "commented_code": "std::move(callback).Run(code == 0, std::u16string());\n }\n \n+bool ElectronJavaScriptDialogManager::EmitEvent(\n+    content::WebContents* web_contents,\n+    content::RenderFrameHost* rfh,\n+    content::JavaScriptDialogType dialog_type,\n+    const std::u16string& message_text,\n+    const std::u16string& default_prompt_text,\n+    DialogClosedCallback callback) {\n+  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n+  v8::HandleScope scope(isolate);\n+  auto details = gin::Dictionary::CreateEmpty(isolate);\n+  details.Set(\"message\", message_text);\n+  details.Set(\"frame\", rfh);\n+\n+  if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_ALERT)\n+    details.Set(\"type\", \"alert\");\n+  else if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_CONFIRM)\n+    details.Set(\"type\", \"confirm\");\n+  else if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_PROMPT) {\n+    details.Set(\"type\", \"prompt\");\n+    details.Set(\"defaultValue\", default_prompt_text);\n+  } else\n+    details.Set(\"type\", \"\");",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1634221353",
        "repo_full_name": "electron/electron",
        "pr_number": 34466,
        "pr_file": "shell/browser/electron_javascript_dialog_manager.cc",
        "discussion_id": "1634221353",
        "commented_code": "@@ -134,4 +152,34 @@ void ElectronJavaScriptDialogManager::OnMessageBoxCallback(\n   std::move(callback).Run(code == 0, std::u16string());\n }\n \n+bool ElectronJavaScriptDialogManager::EmitEvent(\n+    content::WebContents* web_contents,\n+    content::RenderFrameHost* rfh,\n+    content::JavaScriptDialogType dialog_type,\n+    const std::u16string& message_text,\n+    const std::u16string& default_prompt_text,\n+    DialogClosedCallback callback) {\n+  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n+  v8::HandleScope scope(isolate);\n+  auto details = gin::Dictionary::CreateEmpty(isolate);\n+  details.Set(\"message\", message_text);\n+  details.Set(\"frame\", rfh);\n+\n+  if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_ALERT)\n+    details.Set(\"type\", \"alert\");\n+  else if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_CONFIRM)\n+    details.Set(\"type\", \"confirm\");\n+  else if (dialog_type == JavaScriptDialogType::JAVASCRIPT_DIALOG_TYPE_PROMPT) {\n+    details.Set(\"type\", \"prompt\");\n+    details.Set(\"defaultValue\", default_prompt_text);\n+  } else\n+    details.Set(\"type\", \"\");",
        "comment_created_at": "2024-06-11T05:42:57+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Typically Electron APIs fallback to \"unknown\".\r\n```suggestion\r\n    details.Set(\"type\", \"unknown\");\r\n```\r\nThis will need to be reflected in the docs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1849637490",
    "pr_number": 44750,
    "pr_file": "shell/browser/api/electron_api_session.cc",
    "created_at": "2024-11-20T06:41:48+00:00",
    "commented_code": "return prefs->preloads();\n }\n \n+/**\n+ * Exposes the network service's ClearSharedDictionaryCacheForIsolationKey\n+ * method, allowing clearing the Shared Dictionary cache for a given isolation\n+ * key. Details about the feature available at\n+ * https://developer.chrome.com/blog/shared-dictionary-compression\n+ */\n+v8::Local<v8::Promise> Session::ClearSharedDictionaryCacheForIsolationKey(\n+    const gin_helper::Dictionary& options) {\n+  gin_helper::Promise<void> promise(isolate_);\n+  auto handle = promise.GetHandle();\n+\n+  std::string frame_origin_str, top_frame_site_str;\n+  if (!options.Get(\"frameOrigin\", &frame_origin_str) ||\n+      !options.Get(\"topFrameSite\", &top_frame_site_str)) {\n+    promise.RejectWithErrorMessage(\n+        \"Must provide frameOrigin and topFrameSite strings\");\n+    return handle;\n+  }\n+\n+  GURL frame_origin_url(frame_origin_str);\n+  GURL top_frame_site_url(top_frame_site_str);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1849637490",
        "repo_full_name": "electron/electron",
        "pr_number": 44750,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "1849637490",
        "commented_code": "@@ -1074,6 +1076,181 @@ std::vector<base::FilePath> Session::GetPreloads() const {\n   return prefs->preloads();\n }\n \n+/**\n+ * Exposes the network service's ClearSharedDictionaryCacheForIsolationKey\n+ * method, allowing clearing the Shared Dictionary cache for a given isolation\n+ * key. Details about the feature available at\n+ * https://developer.chrome.com/blog/shared-dictionary-compression\n+ */\n+v8::Local<v8::Promise> Session::ClearSharedDictionaryCacheForIsolationKey(\n+    const gin_helper::Dictionary& options) {\n+  gin_helper::Promise<void> promise(isolate_);\n+  auto handle = promise.GetHandle();\n+\n+  std::string frame_origin_str, top_frame_site_str;\n+  if (!options.Get(\"frameOrigin\", &frame_origin_str) ||\n+      !options.Get(\"topFrameSite\", &top_frame_site_str)) {\n+    promise.RejectWithErrorMessage(\n+        \"Must provide frameOrigin and topFrameSite strings\");\n+    return handle;\n+  }\n+\n+  GURL frame_origin_url(frame_origin_str);\n+  GURL top_frame_site_url(top_frame_site_str);",
        "comment_created_at": "2024-11-20T06:41:48+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "Are we deliberately double-converting to give better error messages? You should be able to pull these out of the `Dictionary` immediately as `GURL` via the gin converter ",
        "pr_file_module": null
      },
      {
        "comment_id": "1853013001",
        "repo_full_name": "electron/electron",
        "pr_number": 44750,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "1849637490",
        "commented_code": "@@ -1074,6 +1076,181 @@ std::vector<base::FilePath> Session::GetPreloads() const {\n   return prefs->preloads();\n }\n \n+/**\n+ * Exposes the network service's ClearSharedDictionaryCacheForIsolationKey\n+ * method, allowing clearing the Shared Dictionary cache for a given isolation\n+ * key. Details about the feature available at\n+ * https://developer.chrome.com/blog/shared-dictionary-compression\n+ */\n+v8::Local<v8::Promise> Session::ClearSharedDictionaryCacheForIsolationKey(\n+    const gin_helper::Dictionary& options) {\n+  gin_helper::Promise<void> promise(isolate_);\n+  auto handle = promise.GetHandle();\n+\n+  std::string frame_origin_str, top_frame_site_str;\n+  if (!options.Get(\"frameOrigin\", &frame_origin_str) ||\n+      !options.Get(\"topFrameSite\", &top_frame_site_str)) {\n+    promise.RejectWithErrorMessage(\n+        \"Must provide frameOrigin and topFrameSite strings\");\n+    return handle;\n+  }\n+\n+  GURL frame_origin_url(frame_origin_str);\n+  GURL top_frame_site_url(top_frame_site_str);",
        "comment_created_at": "2024-11-21T22:32:51+00:00",
        "comment_author": "felixrieseberg",
        "comment_body": "True and done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "993308677",
    "pr_number": 35987,
    "pr_file": "shell/browser/native_window_mac.mm",
    "created_at": "2022-10-12T10:58:34+00:00",
    "commented_code": "original_frame_ = [window_ frame];\n }\n \n-void NativeWindowMac::SetVibrancy(const std::string& type) {\n+void NativeWindowMac::SetVibrancy(const std::string& type, bool animate) {\n   NSVisualEffectView* vibrantView = [window_ vibrantView];\n \n   if (type.empty()) {\n     if (vibrantView == nil)\n       return;\n \n-    [vibrantView removeFromSuperview];\n-    [window_ setVibrantView:nil];\n+    vibrancy_type_ = type;\n+\n+    if (animate) {\n+      __weak auto weak_delegate = window_delegate_.get();\n+      [NSAnimationContext\n+          runAnimationGroup:^(NSAnimationContext* context) {\n+            context.duration = 0.3;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "993308677",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "993308677",
        "commented_code": "@@ -1403,15 +1403,35 @@ void ViewDidMoveToSuperview(NSView* self, SEL _cmd) {\n   original_frame_ = [window_ frame];\n }\n \n-void NativeWindowMac::SetVibrancy(const std::string& type) {\n+void NativeWindowMac::SetVibrancy(const std::string& type, bool animate) {\n   NSVisualEffectView* vibrantView = [window_ vibrantView];\n \n   if (type.empty()) {\n     if (vibrantView == nil)\n       return;\n \n-    [vibrantView removeFromSuperview];\n-    [window_ setVibrantView:nil];\n+    vibrancy_type_ = type;\n+\n+    if (animate) {\n+      __weak auto weak_delegate = window_delegate_.get();\n+      [NSAnimationContext\n+          runAnimationGroup:^(NSAnimationContext* context) {\n+            context.duration = 0.3;",
        "comment_created_at": "2022-10-12T10:58:34+00:00",
        "comment_author": "zcbenz",
        "comment_body": "A hard coded value might not be enough for all apps, some apps might want a slow fading in animation for startup effect, and some might want a short animation for things like notifications.",
        "pr_file_module": null
      },
      {
        "comment_id": "1021596465",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "shell/browser/native_window_mac.mm",
        "discussion_id": "993308677",
        "commented_code": "@@ -1403,15 +1403,35 @@ void ViewDidMoveToSuperview(NSView* self, SEL _cmd) {\n   original_frame_ = [window_ frame];\n }\n \n-void NativeWindowMac::SetVibrancy(const std::string& type) {\n+void NativeWindowMac::SetVibrancy(const std::string& type, bool animate) {\n   NSVisualEffectView* vibrantView = [window_ vibrantView];\n \n   if (type.empty()) {\n     if (vibrantView == nil)\n       return;\n \n-    [vibrantView removeFromSuperview];\n-    [window_ setVibrantView:nil];\n+    vibrancy_type_ = type;\n+\n+    if (animate) {\n+      __weak auto weak_delegate = window_delegate_.get();\n+      [NSAnimationContext\n+          runAnimationGroup:^(NSAnimationContext* context) {\n+            context.duration = 0.3;",
        "comment_created_at": "2022-11-14T14:16:54+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "added an `animationDuration` prop to the options object on the API",
        "pr_file_module": null
      }
    ]
  }
]