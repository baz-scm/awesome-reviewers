[
  {
    "discussion_id": "2138568210",
    "pr_number": 47435,
    "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
    "created_at": "2025-06-10T18:48:19+00:00",
    "commented_code": "frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2138568210",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-10T18:48:19+00:00",
        "comment_author": "deepak1556",
        "comment_body": "why make this async ? Isn't the issue that the dispatcher receives events even after the webcontent got destroyed and swapping the order of their would be good to cover that case ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2144588244",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-13T09:23:56+00:00",
        "comment_author": "codebytere",
        "comment_body": "Unfortunately no -\r\n\r\nIf `managed_devtools_web_contents_.reset()` is not async, despite moving `embedder_message_dispatcher_.reset()` up, we get this crash:\r\n```\r\n[47767:0613/111815.512592:FATAL:content/browser/web_contents/web_contents_impl.cc:1479] Check failed: !observers_.is_notifying_observers(). \r\n0   Electron Framework                  0x0000000123bbab64 base::debug::CollectStackTrace(base::span<void const*, 18446744073709551615ul, void const**>) + 28\r\n1   Electron Framework                  0x0000000123bab060 base::debug::StackTrace::StackTrace(unsigned long) + 224\r\n2   Electron Framework                  0x0000000123acdef8 logging::LogMessage::Flush() + 152\r\n3   Electron Framework                  0x0000000123acdde0 logging::LogMessage::~LogMessage() + 36\r\n4   Electron Framework                  0x0000000123ab906c logging::(anonymous namespace)::CheckLogMessage::~CheckLogMessage() + 76\r\n5   Electron Framework                  0x0000000123ab8d34 logging::CheckNoreturnError::~CheckNoreturnError() + 16\r\n6   Electron Framework                  0x0000000123ab8d44 logging::CheckNoreturnError::PCheck(char const*, base::Location const&) + 0\r\n7   Electron Framework                  0x00000001225ed1d8 content::WebContentsImpl::~WebContentsImpl() + 3932\r\n8   Electron Framework                  0x00000001225edad8 content::WebContentsImpl::~WebContentsImpl() + 12\r\n9   Electron Framework                  0x000000011dfabefc electron::InspectableWebContents::CloseDevTools() + 100\r\n10  Electron Framework                  0x000000011dee0668 electron::api::WebContents::CloseDevTools() + 96\r\n11  Electron Framework                  0x000000011de038e0 base::RepeatingCallback<void (std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&)>::Run(std::__Cr::basic_string<char, std::__Cr::char_traits<char>, std::__Cr::allocator<char>> const&) const & + 136\r\n12  Electron Framework                  0x000000011de13488 gin_helper::Invoker<std::__Cr::integer_sequence<unsigned long, 0ul>, gin::Arguments*>::DispatchToCallback(base::RepeatingCallback<void (gin::Arguments*)>) + 228\r\n13  Electron Framework                  0x000000011def6bf4 gin_helper::Dispatcher<void (electron::api::WebContents*)>::DispatchToCallbackImpl(gin::Arguments*) + 132\r\n14  Electron Framework                  0x000000011def6af8 gin_helper::Dispatcher<void (electron::api::WebContents*)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) + 44\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2144776482",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-13T10:58:26+00:00",
        "comment_author": "deepak1556",
        "comment_body": "`InspectableWebContents` is the observer of `managed_devtools_web_contents_` which gets set via https://github.com/electron/electron/blob/3c9b8475a2bc4a74fa7e5d37d494852167f0af1f/shell/browser/ui/inspectable_web_contents.cc#L431\r\n\r\n\r\nWe could remove the observer via `Observe(nullptr)` before `managed_devtools_web_contents_.reset()` to keep it sync, does that work ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2145265576",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-13T14:49:50+00:00",
        "comment_author": "codebytere",
        "comment_body": "It does not unfortunately (i tried this initially) - same error `FATAL:content/browser/web_contents/web_contents_impl.cc:1479] Check failed: !observers_.is_notifying_observers(). `",
        "pr_file_module": null
      },
      {
        "comment_id": "2145480789",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-13T16:29:18+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Oh interesting, I am just worried that async destruction can bring in reentrancy bugs from events. Lets make `managed_web_contents_ = nullptr` after moving it to the async task so that current sequence expects it is destroyed ?\r\n\r\n```\r\nif (managed_devtools_web_contents_) {\r\n      Observe(nullptr);\r\n      view_->CloseDevTools();\r\n      content::GetUIThreadTaskRunner({})->PostTask(\r\n          FROM_HERE,\r\n          base::BindOnce(\r\n              [](std::unique_ptr<content::WebContents> web_contents) {},\r\n              std::move(managed_devtools_web_contents_)));\r\n      managed_devtools_web_contents_ = nullptr;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2151922651",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138568210",
        "commented_code": "@@ -441,9 +441,13 @@ void InspectableWebContents::CloseDevTools() {\n     frontend_loaded_ = false;\n     if (managed_devtools_web_contents_) {\n       view_->CloseDevTools();\n-      managed_devtools_web_contents_.reset();\n+      embedder_message_dispatcher_.reset();\n+      content::GetUIThreadTaskRunner({})->PostTask(\n+          FROM_HERE,\n+          base::BindOnce(\n+              [](std::unique_ptr<content::WebContents> web_contents) {},\n+              std::move(managed_devtools_web_contents_)));",
        "comment_created_at": "2025-06-17T10:32:32+00:00",
        "comment_author": "codebytere",
        "comment_body": "looks like this may cause the ci crashes - i'll look later",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2138569183",
    "pr_number": 47435,
    "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
    "created_at": "2025-06-10T18:49:01+00:00",
    "commented_code": "DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n \n   frontend_loaded_ = true;\n+\n+  if (!GetDevToolsWebContents())\n+    return;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2138569183",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138569183",
        "commented_code": "@@ -533,6 +537,10 @@ void InspectableWebContents::LoadCompleted() {\n   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n \n   frontend_loaded_ = true;\n+\n+  if (!GetDevToolsWebContents())\n+    return;",
        "comment_created_at": "2025-06-10T18:49:01+00:00",
        "comment_author": "deepak1556",
        "comment_body": "if the destruction of `managed_devtools_web_contents_` is sync then this shouldn't be needed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2139406324",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138569183",
        "commented_code": "@@ -533,6 +537,10 @@ void InspectableWebContents::LoadCompleted() {\n   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n \n   frontend_loaded_ = true;\n+\n+  if (!GetDevToolsWebContents())\n+    return;",
        "comment_created_at": "2025-06-11T07:25:18+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Maybe not, what is order of the events in this case does the focus event comes in before the load completion ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2144589827",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138569183",
        "commented_code": "@@ -533,6 +537,10 @@ void InspectableWebContents::LoadCompleted() {\n   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n \n   frontend_loaded_ = true;\n+\n+  if (!GetDevToolsWebContents())\n+    return;",
        "comment_created_at": "2025-06-13T09:24:27+00:00",
        "comment_author": "codebytere",
        "comment_body": "Focus comes before load, yes!",
        "pr_file_module": null
      },
      {
        "comment_id": "2144742261",
        "repo_full_name": "electron/electron",
        "pr_number": 47435,
        "pr_file": "shell/browser/ui/inspectable_web_contents.cc",
        "discussion_id": "2138569183",
        "commented_code": "@@ -533,6 +537,10 @@ void InspectableWebContents::LoadCompleted() {\n   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n \n   frontend_loaded_ = true;\n+\n+  if (!GetDevToolsWebContents())\n+    return;",
        "comment_created_at": "2025-06-13T10:40:34+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Cool, lets move this check before `frontend_loaded_`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1661432926",
    "pr_number": 42727,
    "pr_file": "shell/browser/browser_linux.cc",
    "created_at": "2024-07-01T18:58:48+00:00",
    "commented_code": "}\n }\n \n-void Browser::SetLoginItemSettings(LoginItemSettings settings) {}\n+void Browser::SetLoginItemSettings(LoginItemSettings settings) {\n+  dbus::Bus::Options options;\n+  auto bus = base::MakeRefCounted<dbus::Bus>(options);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1661432926",
        "repo_full_name": "electron/electron",
        "pr_number": 42727,
        "pr_file": "shell/browser/browser_linux.cc",
        "discussion_id": "1661432926",
        "commented_code": "@@ -139,7 +151,35 @@ bool Browser::SetBadgeCount(std::optional<int> count) {\n   }\n }\n \n-void Browser::SetLoginItemSettings(LoginItemSettings settings) {}\n+void Browser::SetLoginItemSettings(LoginItemSettings settings) {\n+  dbus::Bus::Options options;\n+  auto bus = base::MakeRefCounted<dbus::Bus>(options);",
        "comment_created_at": "2024-07-01T18:58:48+00:00",
        "comment_author": "codebytere",
        "comment_body": "We'll need effective lifetime management here - per [Chromium](https://source.chromium.org/chromium/chromium/src/+/main:dbus/bus.h;l=72-74):\r\n\r\n> The Bus object must be shut down manually by ShutdownAndBlock() and friends. We require the manual shutdown to make the operation explicit rather than doing it silently in the destructor.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1661856266",
        "repo_full_name": "electron/electron",
        "pr_number": 42727,
        "pr_file": "shell/browser/browser_linux.cc",
        "discussion_id": "1661432926",
        "commented_code": "@@ -139,7 +151,35 @@ bool Browser::SetBadgeCount(std::optional<int> count) {\n   }\n }\n \n-void Browser::SetLoginItemSettings(LoginItemSettings settings) {}\n+void Browser::SetLoginItemSettings(LoginItemSettings settings) {\n+  dbus::Bus::Options options;\n+  auto bus = base::MakeRefCounted<dbus::Bus>(options);",
        "comment_created_at": "2024-07-02T05:31:30+00:00",
        "comment_author": "ckerr",
        "comment_body": "Agree, the `Bus::~Bus()` destructor has DCHECKS that I think could fail for us here? We need to make sure to call `ShutdownAndBlock()` before `bus` goes out-of-scope",
        "pr_file_module": null
      },
      {
        "comment_id": "1676205957",
        "repo_full_name": "electron/electron",
        "pr_number": 42727,
        "pr_file": "shell/browser/browser_linux.cc",
        "discussion_id": "1661432926",
        "commented_code": "@@ -139,7 +151,35 @@ bool Browser::SetBadgeCount(std::optional<int> count) {\n   }\n }\n \n-void Browser::SetLoginItemSettings(LoginItemSettings settings) {}\n+void Browser::SetLoginItemSettings(LoginItemSettings settings) {\n+  dbus::Bus::Options options;\n+  auto bus = base::MakeRefCounted<dbus::Bus>(options);",
        "comment_created_at": "2024-07-12T17:00:16+00:00",
        "comment_author": "quexten",
        "comment_body": "Added the `ShutdownAndBlock()` call!",
        "pr_file_module": null
      }
    ]
  }
]