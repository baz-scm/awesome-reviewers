[
  {
    "discussion_id": "595539744",
    "pr_number": 28223,
    "pr_file": "docs/tutorial/quick-start.md",
    "created_at": "2021-03-16T21:05:28+00:00",
    "commented_code": "##### Node.js API\n \n-> NOTE: To access the Node.js API from the Renderer process, you need to set the `nodeIntegration` preference to `true`.\n+> NOTE: To access the Node.js API from the Renderer process, you need to set the `nodeIntegration` preference to `true` and the `contextIsolation` preference to `false`.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "595539744",
        "repo_full_name": "electron/electron",
        "pr_number": 28223,
        "pr_file": "docs/tutorial/quick-start.md",
        "discussion_id": "595539744",
        "commented_code": "@@ -283,7 +312,7 @@ ipcRenderer.invoke('perform-action', ...args)\n \n ##### Node.js API\n \n-> NOTE: To access the Node.js API from the Renderer process, you need to set the `nodeIntegration` preference to `true`.\n+> NOTE: To access the Node.js API from the Renderer process, you need to set the `nodeIntegration` preference to `true` and the `contextIsolation` preference to `false`.",
        "comment_created_at": "2021-03-16T21:05:28+00:00",
        "comment_author": "jkleinsc",
        "comment_body": "```suggestion\r\n> NOTE: To access the Node.js API from the Renderer process, you need to set the `nodeIntegration` preference to `true` and the `contextIsolation` preference to `false`.  Please note that access to the Node.js API in any renderer that loads remote content is not recommended for [security reasons](../tutorial/security.md#2-do-not-enable-nodejs-integration-for-remote-content).\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1709461049",
    "pr_number": 43247,
    "pr_file": "docs/tutorial/security.md",
    "created_at": "2024-08-08T13:07:39+00:00",
    "commented_code": "### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1709461049",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-08T13:07:39+00:00",
        "comment_author": "erikian",
        "comment_body": "Per the Electron 20 PR that introduced that change (https://github.com/electron/electron/pull/32869):\r\n\r\n> Renderers are now sandboxed by default **unless nodeIntegration: true or sandbox: false is specified**.\r\n\r\nSo I think we should make it clear that sandboxing will _not_ be enabled by default if the user sets `nodeIntegration` to `true`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1710737163",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-09T04:50:39+00:00",
        "comment_author": "LeUser111",
        "comment_body": "@erikian Thank you very much for your feedback :)\r\n\r\nI'm currently re-reading the documentation and I will submit an updated pull request. The way I understand it, it would also make sense to make small adjustments to _Context isolation_ and _Process sandboxing_. \r\n\r\nI will try to phrase things as clearly as possible and reference the related chapters where necessary.\r\n\r\nEdit:\r\nI've made some adjustments and incorporated your advice. I'm not sure about the placement of the information,  yet. Please let me know what you think!\r\n\r\nShould we mention the issue with process isolation in https://www.electronjs.org/docs/latest/tutorial/sandbox as well? There it says in the last paragraph of the opening section: \r\n_\"Starting from Electron 20, the sandbox is enabled for renderer processes without any further configuration. If you want to disable the sandbox for a process, see [...]\"_\r\n\r\nThat's where I had gathered my information from, hence the original commit.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1713751632",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-12T13:16:21+00:00",
        "comment_author": "erikian",
        "comment_body": "> Should we mention the issue with process isolation in https://www.electronjs.org/docs/latest/tutorial/sandbox as well? There it says in the last paragraph of the opening section: _\"Starting from Electron 20, the sandbox is enabled for renderer processes without any further configuration. If you want to disable the sandbox for a process, see [...]\"_\r\n> \r\n> That's where I had gathered my information from, hence the original commit.\r\n\r\nAh fair enough. We do mention the `nodeIntegration` caveat under [Disabling the sandbox for a single process](https://www.electronjs.org/docs/latest/tutorial/sandbox#disabling-the-sandbox-for-a-single-process) (\"Sandboxing is also disabled whenever Node.js integration is enabled in the renderer\"), but looks like the intro paragraph you quoted is assuming that the default options are used; I think we could add a clarification about the effects of `nodeIntegration: true` to that paragraph as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "1714759495",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-13T06:50:53+00:00",
        "comment_author": "LeUser111",
        "comment_body": "I've updated the paragraph. I hope it's concise enough and doesn't add too much clutter.\r\n\r\nUnder [2 Do not enable Node.js integration for remote content](https://www.electronjs.org/docs/latest/tutorial/security#2-do-not-enable-nodejs-integration-for-remote-content) I've also found another way to enable node integration - I've added that possibility to [Disabling the sandbox for a single process](https://www.electronjs.org/docs/latest/tutorial/sandbox#disabling-the-sandbox-for-a-single-process).\r\n\r\nThere's also another, seemingly related flag: `nodeIntegrationInWorker: true`. Is that also related to the sandbox feature?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1718299566",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-15T11:47:59+00:00",
        "comment_author": "erikian",
        "comment_body": "> There's also another, seemingly related flag: `nodeIntegrationInWorker: true`. Is that also related to the sandbox feature?\r\n\r\nAccording to https://www.electronjs.org/docs/latest/tutorial/multithreading (there's a link to that page in the docs for `nodeIntegrationInWorker` under [`BrowserWindow`](https://www.electronjs.org/docs/latest/api/browser-window)), it is:\r\n\r\n> The `nodeIntegrationInWorker` can be used independent of `nodeIntegration`, but `sandbox` must not be set to `true`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1722678784",
        "repo_full_name": "electron/electron",
        "pr_number": 43247,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1709461049",
        "commented_code": "@@ -250,6 +250,10 @@ see our dedicated [Context Isolation](context-isolation.md) document.\n \n ### 4. Enable process sandboxing\n \n+:::info\n+This recommendation is the default behavior in Electron since 20.0.0.",
        "comment_created_at": "2024-08-20T04:44:36+00:00",
        "comment_author": "LeUser111",
        "comment_body": "Thank you for digging that up :) \r\n\r\nIf I understand it correctly, `sandbox: true` prevents using  `nodeIntegrationInWorker`, not the other way around, as it is with `nodeIntegration`.\r\n\r\nThat would be perfectly fine from the standpoint of our security recommendation and we wouldn't have to mention it.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921573562",
    "pr_number": 45241,
    "pr_file": "docs/tutorial/security.md",
    "created_at": "2025-01-19T14:59:12+00:00",
    "commented_code": "}\n ```\n \n-### 18. Avoid usage of the `file://` protocol and prefer usage of custom protocols\n+### 18. Do not expose Electron's APIs to untrusted web content\n+\n+You should not directly expose Electron's APIs, especially IPC, to untrusted web content in your",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1921573562",
        "repo_full_name": "electron/electron",
        "pr_number": 45241,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1921573562",
        "commented_code": "@@ -761,7 +762,47 @@ function validateSender (frame) {\n }\n ```\n \n-### 18. Avoid usage of the `file://` protocol and prefer usage of custom protocols\n+### 18. Do not expose Electron's APIs to untrusted web content\n+\n+You should not directly expose Electron's APIs, especially IPC, to untrusted web content in your",
        "comment_created_at": "2025-01-19T14:59:12+00:00",
        "comment_author": "nikwen",
        "comment_body": "```suggestion\r\n### 18. Do not expose Electron APIs to untrusted web content\r\n\r\nYou should not directly expose Electron APIs, especially IPC, to untrusted web content in your\r\n```\r\n\r\nThis might be simpler. That said, I'm fine with both versions.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921574043",
    "pr_number": 45241,
    "pr_file": "docs/tutorial/security.md",
    "created_at": "2025-01-19T15:01:58+00:00",
    "commented_code": "}\n ```\n \n-### 18. Avoid usage of the `file://` protocol and prefer usage of custom protocols\n+### 18. Do not expose Electron's APIs to untrusted web content\n+\n+You should not directly expose Electron's APIs, especially IPC, to untrusted web content in your\n+preload scripts.\n+\n+### Why?\n+\n+Exposing raw APIs like `ipcRenderer.on` is dangerous because it gives renderer processes direct\n+access to the entire IPC event system, allowing them to listen for any IPC events, not just the ones\n+intended for them. To avoid that exposure, we also cannot pass callbacks directly through: The first",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1921574043",
        "repo_full_name": "electron/electron",
        "pr_number": 45241,
        "pr_file": "docs/tutorial/security.md",
        "discussion_id": "1921574043",
        "commented_code": "@@ -761,7 +762,47 @@ function validateSender (frame) {\n }\n ```\n \n-### 18. Avoid usage of the `file://` protocol and prefer usage of custom protocols\n+### 18. Do not expose Electron's APIs to untrusted web content\n+\n+You should not directly expose Electron's APIs, especially IPC, to untrusted web content in your\n+preload scripts.\n+\n+### Why?\n+\n+Exposing raw APIs like `ipcRenderer.on` is dangerous because it gives renderer processes direct\n+access to the entire IPC event system, allowing them to listen for any IPC events, not just the ones\n+intended for them. To avoid that exposure, we also cannot pass callbacks directly through: The first",
        "comment_created_at": "2025-01-19T15:01:58+00:00",
        "comment_author": "nikwen",
        "comment_body": "Can we break the callback issue into a separate paragraph?\r\n\r\nWhat I dislike about the current docs (pre this PR) is that the callback issue is hidden in a small side note. It's easy to miss. I first did.\r\n\r\nI think it should be very prominent here so that people don't miss it. It isn't trivial for someone to figure out on their own if they aren't familiar with Electron's internals. So it's easy for this to slip through unless it's really prominent in the docs.",
        "pr_file_module": null
      }
    ]
  }
]