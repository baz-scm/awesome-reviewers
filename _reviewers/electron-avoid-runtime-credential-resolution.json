[
  {
    "discussion_id": "2226277281",
    "pr_number": 47819,
    "pr_file": ".github/actions/ssh-debug/setup-ssh.sh",
    "created_at": "2025-07-23T17:55:43+00:00",
    "commented_code": "+#!/bin/bash -e\n+\n+get_authorized_keys() {\n+    if [ -z \"$AUTHORIZED_USERS\" ] || ! echo \"$AUTHORIZED_USERS\" | grep -q \"\\b$GITHUB_ACTOR\\b\"; then\n+        return 1\n+    fi\n+\n+    api_response=$(curl -s \"https://api.github.com/users/$GITHUB_ACTOR/keys\")\n+\n+    if echo \"$api_response\" | jq -e 'type == \"object\" and has(\"message\")' >/dev/null; then\n+        error_msg=$(echo \"$api_response\" | jq -r '.message')\n+        echo \"Error: $error_msg\"\n+        return 1\n+    else\n+        echo \"$api_response\" | jq -r '.[].key'\n+    fi\n+}",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2226277281",
        "repo_full_name": "electron/electron",
        "pr_number": 47819,
        "pr_file": ".github/actions/ssh-debug/setup-ssh.sh",
        "discussion_id": "2226277281",
        "commented_code": "@@ -0,0 +1,140 @@\n+#!/bin/bash -e\n+\n+get_authorized_keys() {\n+    if [ -z \"$AUTHORIZED_USERS\" ] || ! echo \"$AUTHORIZED_USERS\" | grep -q \"\\b$GITHUB_ACTOR\\b\"; then\n+        return 1\n+    fi\n+\n+    api_response=$(curl -s \"https://api.github.com/users/$GITHUB_ACTOR/keys\")\n+\n+    if echo \"$api_response\" | jq -e 'type == \"object\" and has(\"message\")' >/dev/null; then\n+        error_msg=$(echo \"$api_response\" | jq -r '.message')\n+        echo \"Error: $error_msg\"\n+        return 1\n+    else\n+        echo \"$api_response\" | jq -r '.[].key'\n+    fi\n+}",
        "comment_created_at": "2025-07-23T17:55:43+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "I think the secret should actually contain the SSH keys. And those should be fetched from the infra repo.\r\n\r\nWe can in terraform use a github_secret resource and folks should have to hardcode the SSH key they want to use to connect there. That avoids the API call here and avoids any risk around `GITHUB_ACTOR` somehow being an injection vector.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2226283257",
    "pr_number": 47819,
    "pr_file": ".github/actions/ssh-debug/setup-ssh.sh",
    "created_at": "2025-07-23T17:59:04+00:00",
    "commented_code": "+#!/bin/bash -e\n+\n+get_authorized_keys() {\n+    if [ -z \"$AUTHORIZED_USERS\" ] || ! echo \"$AUTHORIZED_USERS\" | grep -q \"\\b$GITHUB_ACTOR\\b\"; then\n+        return 1\n+    fi\n+\n+    api_response=$(curl -s \"https://api.github.com/users/$GITHUB_ACTOR/keys\")\n+\n+    if echo \"$api_response\" | jq -e 'type == \"object\" and has(\"message\")' >/dev/null; then\n+        error_msg=$(echo \"$api_response\" | jq -r '.message')\n+        echo \"Error: $error_msg\"\n+        return 1\n+    else\n+        echo \"$api_response\" | jq -r '.[].key'\n+    fi\n+}\n+\n+authorized_keys=$(get_authorized_keys \"$GITHUB_ACTOR\")\n+\n+if [ -n \"$authorized_keys\" ]; then\n+    echo \"Configured SSH key(s) for user: $GITHUB_ACTOR\"\n+else\n+    echo \"Error: User '$GITHUB_ACTOR' is not authorized to access this debug session.\"\n+    echo \"Authorized users: $AUTHORIZED_USERS\"\n+    exit 1\n+fi\n+\n+if [ \"$TUNNEL\" != \"true\" ]; then\n+    echo \"SSH tunneling is disabled. Set enable-tunnel: true to enable remote access.\"\n+    echo \"Local SSH server would be available on localhost:2222 if this were a local environment.\"\n+    exit 0\n+fi\n+\n+echo \"SSH tunneling enabled. Setting up remote access...\"\n+\n+EXTERNAL_DEPS=\"curl jq ssh-keygen\"\n+\n+for dep in $EXTERNAL_DEPS; do\n+    if ! command -v \"$dep\" > /dev/null 2>&1; then\n+       echo \"Command $dep not installed on the system!\" >&2\n+       exit 1\n+    fi\n+done\n+\n+cd \"$GITHUB_ACTION_PATH\"\n+\n+bashrc_path=$(pwd)/bashrc\n+\n+# Source `bashrc` to auto start tmux on SSH login.\n+if ! grep -q \"$bashrc_path\" ~/.bash_profile; then\n+    echo >> ~/.bash_profile # On macOS runner there's no newline at the end of the file\n+    echo \"source \\\"$bashrc_path\\\"\" >> ~/.bash_profile\n+fi\n+\n+OS=$(uname -s | tr '[:upper:]' '[:lower:]')\n+ARCH=$(uname -m)\n+\n+if [ \"$ARCH\" = \"x86_64\" ]; then\n+    ARCH=\"amd64\"\n+elif [ \"$ARCH\" = \"aarch64\" ]; then\n+    ARCH=\"arm64\"\n+fi\n+\n+# Install tmux on macOS runners if not present.\n+if [ \"$OS\" = \"darwin\" ] && ! command -v tmux > /dev/null 2>&1; then\n+    echo \"Installing tmux...\"\n+    brew install tmux\n+fi\n+\n+if [ \"$OS\" = \"darwin\" ]; then\n+    cloudflared_url=\"https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-${OS}-${ARCH}.tgz\"\n+    echo \"Downloading \\`cloudflared\\` from <$cloudflared_url>...\"\n+    curl --location --silent --output cloudflared.tgz \"$cloudflared_url\"\n+    tar xf cloudflared.tgz\n+    rm cloudflared.tgz\n+else\n+    cloudflared_url=\"https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-${OS}-${ARCH}\"\n+    echo \"Downloading \\`cloudflared\\` from <$cloudflared_url>...\"\n+    curl --location --silent --output cloudflared \"$cloudflared_url\"\n+fi\n+\n+chmod +x cloudflared\n+\n+echo \"Setting up SSH key for authorized user: $GITHUB_ACTOR\"\n+echo \"$authorized_keys\" > authorized_keys\n+\n+echo 'Creating SSH server key...'\n+ssh-keygen -q -f ssh_host_rsa_key -N ''\n+\n+echo 'Creating SSH server config...'\n+sed \"s,\\$PWD,$PWD,;s,\\$USER,$USER,\" sshd_config.template > sshd_config\n+\n+echo 'Starting SSH server...'\n+/usr/sbin/sshd -f sshd_config -D &\n+sshd_pid=$!\n+\n+echo 'Starting tmux session...'\n+(cd \"$GITHUB_WORKSPACE\" && tmux new-session -d -s debug)\n+\n+#if no cloudflare tunnel token is provided, exit\n+if [ -z \"$CLOUDFLARE_TUNNEL_TOKEN\" ]; then\n+    echo \"Error: required CLOUDFLARE_TUNNEL_TOKEN not found\"\n+    exit 1\n+fi\n+\n+echo 'Starting Cloudflare tunnel...'\n+\n+./cloudflared tunnel --no-autoupdate run --token \"$CLOUDFLARE_TUNNEL_TOKEN\" 2>&1 | tee cloudflared.log | sed -u 's/^/cloudflared: /' &",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2226283257",
        "repo_full_name": "electron/electron",
        "pr_number": 47819,
        "pr_file": ".github/actions/ssh-debug/setup-ssh.sh",
        "discussion_id": "2226283257",
        "commented_code": "@@ -0,0 +1,140 @@\n+#!/bin/bash -e\n+\n+get_authorized_keys() {\n+    if [ -z \"$AUTHORIZED_USERS\" ] || ! echo \"$AUTHORIZED_USERS\" | grep -q \"\\b$GITHUB_ACTOR\\b\"; then\n+        return 1\n+    fi\n+\n+    api_response=$(curl -s \"https://api.github.com/users/$GITHUB_ACTOR/keys\")\n+\n+    if echo \"$api_response\" | jq -e 'type == \"object\" and has(\"message\")' >/dev/null; then\n+        error_msg=$(echo \"$api_response\" | jq -r '.message')\n+        echo \"Error: $error_msg\"\n+        return 1\n+    else\n+        echo \"$api_response\" | jq -r '.[].key'\n+    fi\n+}\n+\n+authorized_keys=$(get_authorized_keys \"$GITHUB_ACTOR\")\n+\n+if [ -n \"$authorized_keys\" ]; then\n+    echo \"Configured SSH key(s) for user: $GITHUB_ACTOR\"\n+else\n+    echo \"Error: User '$GITHUB_ACTOR' is not authorized to access this debug session.\"\n+    echo \"Authorized users: $AUTHORIZED_USERS\"\n+    exit 1\n+fi\n+\n+if [ \"$TUNNEL\" != \"true\" ]; then\n+    echo \"SSH tunneling is disabled. Set enable-tunnel: true to enable remote access.\"\n+    echo \"Local SSH server would be available on localhost:2222 if this were a local environment.\"\n+    exit 0\n+fi\n+\n+echo \"SSH tunneling enabled. Setting up remote access...\"\n+\n+EXTERNAL_DEPS=\"curl jq ssh-keygen\"\n+\n+for dep in $EXTERNAL_DEPS; do\n+    if ! command -v \"$dep\" > /dev/null 2>&1; then\n+       echo \"Command $dep not installed on the system!\" >&2\n+       exit 1\n+    fi\n+done\n+\n+cd \"$GITHUB_ACTION_PATH\"\n+\n+bashrc_path=$(pwd)/bashrc\n+\n+# Source `bashrc` to auto start tmux on SSH login.\n+if ! grep -q \"$bashrc_path\" ~/.bash_profile; then\n+    echo >> ~/.bash_profile # On macOS runner there's no newline at the end of the file\n+    echo \"source \\\"$bashrc_path\\\"\" >> ~/.bash_profile\n+fi\n+\n+OS=$(uname -s | tr '[:upper:]' '[:lower:]')\n+ARCH=$(uname -m)\n+\n+if [ \"$ARCH\" = \"x86_64\" ]; then\n+    ARCH=\"amd64\"\n+elif [ \"$ARCH\" = \"aarch64\" ]; then\n+    ARCH=\"arm64\"\n+fi\n+\n+# Install tmux on macOS runners if not present.\n+if [ \"$OS\" = \"darwin\" ] && ! command -v tmux > /dev/null 2>&1; then\n+    echo \"Installing tmux...\"\n+    brew install tmux\n+fi\n+\n+if [ \"$OS\" = \"darwin\" ]; then\n+    cloudflared_url=\"https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-${OS}-${ARCH}.tgz\"\n+    echo \"Downloading \\`cloudflared\\` from <$cloudflared_url>...\"\n+    curl --location --silent --output cloudflared.tgz \"$cloudflared_url\"\n+    tar xf cloudflared.tgz\n+    rm cloudflared.tgz\n+else\n+    cloudflared_url=\"https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-${OS}-${ARCH}\"\n+    echo \"Downloading \\`cloudflared\\` from <$cloudflared_url>...\"\n+    curl --location --silent --output cloudflared \"$cloudflared_url\"\n+fi\n+\n+chmod +x cloudflared\n+\n+echo \"Setting up SSH key for authorized user: $GITHUB_ACTOR\"\n+echo \"$authorized_keys\" > authorized_keys\n+\n+echo 'Creating SSH server key...'\n+ssh-keygen -q -f ssh_host_rsa_key -N ''\n+\n+echo 'Creating SSH server config...'\n+sed \"s,\\$PWD,$PWD,;s,\\$USER,$USER,\" sshd_config.template > sshd_config\n+\n+echo 'Starting SSH server...'\n+/usr/sbin/sshd -f sshd_config -D &\n+sshd_pid=$!\n+\n+echo 'Starting tmux session...'\n+(cd \"$GITHUB_WORKSPACE\" && tmux new-session -d -s debug)\n+\n+#if no cloudflare tunnel token is provided, exit\n+if [ -z \"$CLOUDFLARE_TUNNEL_TOKEN\" ]; then\n+    echo \"Error: required CLOUDFLARE_TUNNEL_TOKEN not found\"\n+    exit 1\n+fi\n+\n+echo 'Starting Cloudflare tunnel...'\n+\n+./cloudflared tunnel --no-autoupdate run --token \"$CLOUDFLARE_TUNNEL_TOKEN\" 2>&1 | tee cloudflared.log | sed -u 's/^/cloudflared: /' &",
        "comment_created_at": "2025-07-23T17:59:04+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "Separate to this, maybe we shouldn't use authorized_keys at all and instead should rely on cloudflare access zero trust rules for protecting our ssh access. We can configure this hostname as an SSH target in cloudflare zero trust and then assign IDP roles (wg-infra) as having access to that hostname.",
        "pr_file_module": null
      }
    ]
  }
]