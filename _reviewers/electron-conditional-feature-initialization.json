[
  {
    "discussion_id": "2173563286",
    "pr_number": 47425,
    "pr_file": "shell/browser/native_window.cc",
    "created_at": "2025-06-29T00:51:12+00:00",
    "commented_code": "options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2173563286",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "shell/browser/native_window.cc",
        "discussion_id": "2173563286",
        "commented_code": "@@ -114,6 +121,17 @@ NativeWindow::NativeWindow(const gin_helper::Dictionary& options,\n   options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())",
        "comment_created_at": "2025-06-29T00:51:12+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "This is going to result in the default BrowserContext _always_ getting written to disk regardless of whether it is actually used. i.e. if an app entirely uses off-the-record contexts then there is no reason for this context to be created.\r\n\r\nThis will also result in these per-window data slots being stored in a per-context directory, which for apps that reset sessions by literally `rm -rf path/to/context/dir` will result in unexpected wipes of this data.\r\n\r\nCan we make our own prefs factory for this using a path separate to the per-session storage path. This will (a) give us a more distinct on-disk file path to the per-session prefs store and (b) ensure we don't erroneously create the default context in cases we do not need it",
        "pr_file_module": null
      },
      {
        "comment_id": "2174260768",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "shell/browser/native_window.cc",
        "discussion_id": "2173563286",
        "commented_code": "@@ -114,6 +121,17 @@ NativeWindow::NativeWindow(const gin_helper::Dictionary& options,\n   options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())",
        "comment_created_at": "2025-06-30T05:41:13+00:00",
        "comment_author": "nilayarya",
        "comment_body": "Thank you so much for pointing this out! I've moved the saving location from per-context Preferences files to application-level Local State in [65106d4](https://github.com/electron/electron/pull/47425/commits/65106d4cecc9052c6d63203bf41e7572d5945c6f)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2173563419",
    "pr_number": 47425,
    "pr_file": "shell/browser/native_window.cc",
    "created_at": "2025-06-29T00:51:38+00:00",
    "commented_code": "options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())\n+    prefs_ = browser_context->prefs();\n+\n+  if (gin_helper::Dictionary restore_options;\n+      options.Get(options::kWindowStateRestoreOptions, &restore_options)) {\n+    // Initialize window_state_id_\n+    restore_options.Get(options::kStateId, &window_state_id_);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2173563419",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "shell/browser/native_window.cc",
        "discussion_id": "2173563419",
        "commented_code": "@@ -114,6 +121,17 @@ NativeWindow::NativeWindow(const gin_helper::Dictionary& options,\n   options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())\n+    prefs_ = browser_context->prefs();\n+\n+  if (gin_helper::Dictionary restore_options;\n+      options.Get(options::kWindowStateRestoreOptions, &restore_options)) {\n+    // Initialize window_state_id_\n+    restore_options.Get(options::kStateId, &window_state_id_);",
        "comment_created_at": "2025-06-29T00:51:38+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "We should flip the order here, only get or create the prefs factory when this `stateId` property is set.",
        "pr_file_module": null
      },
      {
        "comment_id": "2174274062",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "shell/browser/native_window.cc",
        "discussion_id": "2173563419",
        "commented_code": "@@ -114,6 +121,17 @@ NativeWindow::NativeWindow(const gin_helper::Dictionary& options,\n   options.Get(options::kVibrancyType, &vibrancy_);\n #endif\n \n+  // Initialize prefs_ to save/restore window bounds\n+  if (auto* browser_context =\n+          electron::ElectronBrowserContext::GetDefaultBrowserContext())\n+    prefs_ = browser_context->prefs();\n+\n+  if (gin_helper::Dictionary restore_options;\n+      options.Get(options::kWindowStateRestoreOptions, &restore_options)) {\n+    // Initialize window_state_id_\n+    restore_options.Get(options::kStateId, &window_state_id_);",
        "comment_created_at": "2025-06-30T05:50:50+00:00",
        "comment_author": "nilayarya",
        "comment_body": "Done in [52acb42](https://github.com/electron/electron/pull/47425/commits/52acb42efd22f845715a9de4f421af3ef9d81267). Further refactored it in [65106d4](https://github.com/electron/electron/pull/47425/commits/65106d4cecc9052c6d63203bf41e7572d5945c6f).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1685644036",
    "pr_number": 42953,
    "pr_file": "shell/browser/api/electron_api_web_contents.cc",
    "created_at": "2024-07-21T05:22:33+00:00",
    "commented_code": "return type_ == Type::kOffScreen;\n }\n \n-void WebContents::OnPaint(const gfx::Rect& dirty_rect, const SkBitmap& bitmap) {\n-  Emit(\"paint\", dirty_rect, gfx::Image::CreateFrom1xBitmap(bitmap));\n+void WebContents::OnPaint(const gfx::Rect& dirty_rect,\n+                          const SkBitmap& bitmap,\n+                          const OffscreenSharedTexture& tex) {\n+  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n+  v8::HandleScope handle_scope(isolate);\n+\n+  gin::Handle<gin_helper::internal::Event> event =\n+      gin_helper::internal::Event::New(isolate);\n+  v8::Local<v8::Object> event_object = event.ToV8().As<v8::Object>();\n+\n+  gin_helper::Dictionary dict(isolate, event_object);\n+  dict.Set(\"texture\", tex);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1685644036",
        "repo_full_name": "electron/electron",
        "pr_number": 42953,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "1685644036",
        "commented_code": "@@ -3525,8 +3529,21 @@ bool WebContents::IsOffScreen() const {\n   return type_ == Type::kOffScreen;\n }\n \n-void WebContents::OnPaint(const gfx::Rect& dirty_rect, const SkBitmap& bitmap) {\n-  Emit(\"paint\", dirty_rect, gfx::Image::CreateFrom1xBitmap(bitmap));\n+void WebContents::OnPaint(const gfx::Rect& dirty_rect,\n+                          const SkBitmap& bitmap,\n+                          const OffscreenSharedTexture& tex) {\n+  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n+  v8::HandleScope handle_scope(isolate);\n+\n+  gin::Handle<gin_helper::internal::Event> event =\n+      gin_helper::internal::Event::New(isolate);\n+  v8::Local<v8::Object> event_object = event.ToV8().As<v8::Object>();\n+\n+  gin_helper::Dictionary dict(isolate, event_object);\n+  dict.Set(\"texture\", tex);",
        "comment_created_at": "2024-07-21T05:22:33+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Only set if enabled maybe? This would align with the docs about it being optional.\r\n```suggestion\r\n  if (offscreen_use_shared_texture_)\r\n      dict.Set(\"texture\", tex);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1984762654",
    "pr_number": 45824,
    "pr_file": "shell/browser/electron_browser_main_parts_mac.mm",
    "created_at": "2025-03-07T09:46:57+00:00",
    "commented_code": "setObject:@\"NO\"\n          forKey:@\"NSTreatUnknownArgumentsAsOpen\"];\n \n-  if (!device::GeolocationSystemPermissionManager::GetInstance()) {\n-    device::GeolocationSystemPermissionManager::SetInstance(\n-        device::SystemGeolocationSourceApple::\n-            CreateGeolocationSystemPermissionManager());\n+  bool hasLocationPermissionKeys = false;\n+\n+  NSDictionary* infoPlist = [[NSBundle mainBundle] infoDictionary];\n+\n+  // Added keys I thought were relevant from the docs\n+  // https://developer.apple.com/documentation/bundleresources/choosing-the-location-services-authorization-to-request\n+  NSArray* locationKeys = @[\n+    @\"NSLocationWhenInUseUsageDescription\",\n+    @\"NSLocationAlwaysAndWhenInUseUsageDescription\",\n+    @\"NSLocationUsageDescription\",\n+    @\"NSLocationTemporaryUsageDescriptionDictionary\",\n+    @\"NSWidgetWantsLocation\",\n+  ];",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1984762654",
        "repo_full_name": "electron/electron",
        "pr_number": 45824,
        "pr_file": "shell/browser/electron_browser_main_parts_mac.mm",
        "discussion_id": "1984762654",
        "commented_code": "@@ -32,10 +32,34 @@\n       setObject:@\"NO\"\n          forKey:@\"NSTreatUnknownArgumentsAsOpen\"];\n \n-  if (!device::GeolocationSystemPermissionManager::GetInstance()) {\n-    device::GeolocationSystemPermissionManager::SetInstance(\n-        device::SystemGeolocationSourceApple::\n-            CreateGeolocationSystemPermissionManager());\n+  bool hasLocationPermissionKeys = false;\n+\n+  NSDictionary* infoPlist = [[NSBundle mainBundle] infoDictionary];\n+\n+  // Added keys I thought were relevant from the docs\n+  // https://developer.apple.com/documentation/bundleresources/choosing-the-location-services-authorization-to-request\n+  NSArray* locationKeys = @[\n+    @\"NSLocationWhenInUseUsageDescription\",\n+    @\"NSLocationAlwaysAndWhenInUseUsageDescription\",\n+    @\"NSLocationUsageDescription\",\n+    @\"NSLocationTemporaryUsageDescriptionDictionary\",\n+    @\"NSWidgetWantsLocation\",\n+  ];",
        "comment_created_at": "2025-03-07T09:46:57+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Are apps configuring these keys today ? Otherwise this will be a breaking change.\r\n\r\nBased on the upstream recommendation https://chromium-review.googlesource.com/c/chromium/src/+/6326053/comments/dad58067_2119df00\r\n\r\nWe just want a single custom key or a command line flag to opt-out, rather than having to loop all keys to determine opt-in.\r\n\r\nEither should be possible, main entry point runs in `PostEarlyInitialization` while the `GeolocationSystemPermissionManager` happens later in `PreCreateMainMessageLoop` so we can respect command line flags set via `app.commandLine` in this case.\r\n\r\nIf we want to avoid a flag then an electron specific key in `Info.plist` ?\r\n\r\nAlso, this PR should be marked as feat so that wg-api can chime in.",
        "pr_file_module": null
      },
      {
        "comment_id": "1986096452",
        "repo_full_name": "electron/electron",
        "pr_number": 45824,
        "pr_file": "shell/browser/electron_browser_main_parts_mac.mm",
        "discussion_id": "1984762654",
        "commented_code": "@@ -32,10 +32,34 @@\n       setObject:@\"NO\"\n          forKey:@\"NSTreatUnknownArgumentsAsOpen\"];\n \n-  if (!device::GeolocationSystemPermissionManager::GetInstance()) {\n-    device::GeolocationSystemPermissionManager::SetInstance(\n-        device::SystemGeolocationSourceApple::\n-            CreateGeolocationSystemPermissionManager());\n+  bool hasLocationPermissionKeys = false;\n+\n+  NSDictionary* infoPlist = [[NSBundle mainBundle] infoDictionary];\n+\n+  // Added keys I thought were relevant from the docs\n+  // https://developer.apple.com/documentation/bundleresources/choosing-the-location-services-authorization-to-request\n+  NSArray* locationKeys = @[\n+    @\"NSLocationWhenInUseUsageDescription\",\n+    @\"NSLocationAlwaysAndWhenInUseUsageDescription\",\n+    @\"NSLocationUsageDescription\",\n+    @\"NSLocationTemporaryUsageDescriptionDictionary\",\n+    @\"NSWidgetWantsLocation\",\n+  ];",
        "comment_created_at": "2025-03-08T14:51:52+00:00",
        "comment_author": "nilayarya",
        "comment_body": "Ahh okay. I thought it was mandatory to have these keys. \r\nGeolocation requests crash electron for me without these keys. \r\n\r\nBut I'm not sure if apps use it or not these days.\r\nBest to avoid it I guess as it might be a breaking change like you mentioned.\r\n\r\nI\u2019ll get back to you with a simple command line approach to opt-out as a feature request in a different PR.\r\n(Electron special keys seem unintuitive to me)\r\n\r\nThanks for taking the time out to review.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "646187488",
    "pr_number": 27917,
    "pr_file": "shell/browser/api/electron_api_session.h",
    "created_at": "2021-06-06T21:06:09+00:00",
    "commented_code": "v8::Global<v8::Value> service_worker_context_;\n   v8::Global<v8::Value> web_request_;\n \n+  bool has_emitted_chrome_tabs_get_warning_ = false;\n+  bool has_emitted_active_tab_warning_ = false;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "646187488",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_session.h",
        "discussion_id": "646187488",
        "commented_code": "@@ -179,6 +208,19 @@ class Session : public gin::Wrappable<Session>,\n   v8::Global<v8::Value> service_worker_context_;\n   v8::Global<v8::Value> web_request_;\n \n+  bool has_emitted_chrome_tabs_get_warning_ = false;\n+  bool has_emitted_active_tab_warning_ = false;",
        "comment_created_at": "2021-06-06T21:06:09+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "These should probably be behind the `ENABLE_ELECTRON_EXTENSIONS` buildflag below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "646187618",
    "pr_number": 27917,
    "pr_file": "shell/browser/api/electron_api_web_contents.cc",
    "created_at": "2021-06-06T21:07:03+00:00",
    "commented_code": "#include \"shell/browser/electron_browser_main_parts.h\"\n #include \"shell/browser/electron_javascript_dialog_manager.h\"\n #include \"shell/browser/electron_navigation_throttle.h\"\n+#include \"shell/browser/extensions/extension_tab_util.h\"",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "646187618",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_web_contents.cc",
        "discussion_id": "646187618",
        "commented_code": "@@ -88,6 +89,7 @@\n #include \"shell/browser/electron_browser_main_parts.h\"\n #include \"shell/browser/electron_javascript_dialog_manager.h\"\n #include \"shell/browser/electron_navigation_throttle.h\"\n+#include \"shell/browser/extensions/extension_tab_util.h\"",
        "comment_created_at": "2021-06-06T21:07:03+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Should be behind `ENABLE_ELECTRON_EXTENSIONS` buildflag.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "646188000",
    "pr_number": 27917,
    "pr_file": "shell/browser/api/electron_api_session.cc",
    "created_at": "2021-06-06T21:09:58+00:00",
    "commented_code": "}\n };\n \n+template <>\n+struct Converter<electron::api::ExtensionTabDetails> {\n+  static bool FromV8(v8::Isolate* isolate,\n+                     v8::Local<v8::Value> val,\n+                     electron::api::ExtensionTabDetails* out) {\n+    gin_helper::Dictionary options;\n+    if (!ConvertFromV8(isolate, val, &options))\n+      return false;\n+\n+    *out = electron::api::ExtensionTabDetails();\n+    auto tmp = electron::api::ExtensionTabDetails();\n+\n+    options.Get(\"windowId\", &out->window_id);\n+    options.Get(\"active\", &out->active);\n+    options.Get(\"highlighted\", &out->highlighted);\n+    options.Get(\"pinned\", &out->pinned);\n+    options.Get(\"groupId\", &out->group_id);\n+    options.Get(\"index\", &out->index);\n+    options.Get(\"discarded\", &out->discarded);\n+    options.Get(\"autoDiscardable\", &out->auto_discardable);\n+    options.Get(\"openerTabId\", &out->opener_tab_id);\n+    options.Get(\"mutedReason\", &out->muted_reason);\n+    options.Get(\"mutedExtensionId\", &out->muted_extension_id);\n+\n+    return true;\n+  }\n+};",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "646188000",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "646188000",
        "commented_code": "@@ -182,6 +183,34 @@ struct Converter<ClearStorageDataOptions> {\n   }\n };\n \n+template <>\n+struct Converter<electron::api::ExtensionTabDetails> {\n+  static bool FromV8(v8::Isolate* isolate,\n+                     v8::Local<v8::Value> val,\n+                     electron::api::ExtensionTabDetails* out) {\n+    gin_helper::Dictionary options;\n+    if (!ConvertFromV8(isolate, val, &options))\n+      return false;\n+\n+    *out = electron::api::ExtensionTabDetails();\n+    auto tmp = electron::api::ExtensionTabDetails();\n+\n+    options.Get(\"windowId\", &out->window_id);\n+    options.Get(\"active\", &out->active);\n+    options.Get(\"highlighted\", &out->highlighted);\n+    options.Get(\"pinned\", &out->pinned);\n+    options.Get(\"groupId\", &out->group_id);\n+    options.Get(\"index\", &out->index);\n+    options.Get(\"discarded\", &out->discarded);\n+    options.Get(\"autoDiscardable\", &out->auto_discardable);\n+    options.Get(\"openerTabId\", &out->opener_tab_id);\n+    options.Get(\"mutedReason\", &out->muted_reason);\n+    options.Get(\"mutedExtensionId\", &out->muted_extension_id);\n+\n+    return true;\n+  }\n+};",
        "comment_created_at": "2021-06-06T21:09:58+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Should be behind the `ENABLE_ELECTRON_EXTENSIONS` buildflag or moved into shell/common/gin_converters/extension_converter.h",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "646188035",
    "pr_number": 27917,
    "pr_file": "shell/browser/api/electron_api_session.cc",
    "created_at": "2021-06-06T21:10:09+00:00",
    "commented_code": "namespace api {\n \n+ExtensionTabDetails::ExtensionTabDetails() = default;\n+ExtensionTabDetails::ExtensionTabDetails(const ExtensionTabDetails& other) =\n+    default;\n+ExtensionTabDetails::~ExtensionTabDetails() = default;",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "646188035",
        "repo_full_name": "electron/electron",
        "pr_number": 27917,
        "pr_file": "shell/browser/api/electron_api_session.cc",
        "discussion_id": "646188035",
        "commented_code": "@@ -248,6 +277,11 @@ namespace electron {\n \n namespace api {\n \n+ExtensionTabDetails::ExtensionTabDetails() = default;\n+ExtensionTabDetails::ExtensionTabDetails(const ExtensionTabDetails& other) =\n+    default;\n+ExtensionTabDetails::~ExtensionTabDetails() = default;",
        "comment_created_at": "2021-06-06T21:10:09+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Should be behind the `ENABLE_ELECTRON_EXTENSIONS` buildflag",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1593399644",
    "pr_number": 42045,
    "pr_file": "shell/browser/ui/select_file_policy.cc",
    "created_at": "2024-05-08T05:23:09+00:00",
    "commented_code": "+// Copyright (c) 2024 Microsoft, GmbH\n+// Use of this source code is governed by the MIT license that can be\n+// found in the LICENSE file.\n+\n+#include \"shell/browser/ui/select_file_policy.h\"\n+\n+#include \"base/logging.h\"\n+#include \"shell/browser/web_contents_preferences.h\"\n+\n+ElectronSelectFilePolicy::ElectronSelectFilePolicy(\n+    content::WebContents* web_contents)\n+    : web_contents_(web_contents) {}\n+\n+ElectronSelectFilePolicy::~ElectronSelectFilePolicy() = default;\n+\n+bool ElectronSelectFilePolicy::CanOpenSelectFileDialog() {\n+  auto* web_preferences = electron::WebContentsPreferences::From(web_contents_);\n+  if (!web_preferences)\n+    return true;\n+\n+  return !web_preferences->ShouldDisableDialogs();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1593399644",
        "repo_full_name": "electron/electron",
        "pr_number": 42045,
        "pr_file": "shell/browser/ui/select_file_policy.cc",
        "discussion_id": "1593399644",
        "commented_code": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2024 Microsoft, GmbH\n+// Use of this source code is governed by the MIT license that can be\n+// found in the LICENSE file.\n+\n+#include \"shell/browser/ui/select_file_policy.h\"\n+\n+#include \"base/logging.h\"\n+#include \"shell/browser/web_contents_preferences.h\"\n+\n+ElectronSelectFilePolicy::ElectronSelectFilePolicy(\n+    content::WebContents* web_contents)\n+    : web_contents_(web_contents) {}\n+\n+ElectronSelectFilePolicy::~ElectronSelectFilePolicy() = default;\n+\n+bool ElectronSelectFilePolicy::CanOpenSelectFileDialog() {\n+  auto* web_preferences = electron::WebContentsPreferences::From(web_contents_);\n+  if (!web_preferences)\n+    return true;\n+\n+  return !web_preferences->ShouldDisableDialogs();",
        "comment_created_at": "2024-05-08T05:23:09+00:00",
        "comment_author": "deepak1556",
        "comment_body": "`disableDialogs` options is not meant for file dialogs so relying on that value here seems incorrect. Also, `SelectFilePolicy` is optional in the upstream code, can we just set a `nullptr` during dialog creation if we are not planning to add a new file dialog disabling web preference ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1593720733",
        "repo_full_name": "electron/electron",
        "pr_number": 42045,
        "pr_file": "shell/browser/ui/select_file_policy.cc",
        "discussion_id": "1593399644",
        "commented_code": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2024 Microsoft, GmbH\n+// Use of this source code is governed by the MIT license that can be\n+// found in the LICENSE file.\n+\n+#include \"shell/browser/ui/select_file_policy.h\"\n+\n+#include \"base/logging.h\"\n+#include \"shell/browser/web_contents_preferences.h\"\n+\n+ElectronSelectFilePolicy::ElectronSelectFilePolicy(\n+    content::WebContents* web_contents)\n+    : web_contents_(web_contents) {}\n+\n+ElectronSelectFilePolicy::~ElectronSelectFilePolicy() = default;\n+\n+bool ElectronSelectFilePolicy::CanOpenSelectFileDialog() {\n+  auto* web_preferences = electron::WebContentsPreferences::From(web_contents_);\n+  if (!web_preferences)\n+    return true;\n+\n+  return !web_preferences->ShouldDisableDialogs();",
        "comment_created_at": "2024-05-08T09:23:55+00:00",
        "comment_author": "codebytere",
        "comment_body": "yes, removed :)",
        "pr_file_module": null
      }
    ]
  }
]