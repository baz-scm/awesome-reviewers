[
  {
    "discussion_id": "1130266691",
    "pr_number": 37535,
    "pr_file": "default_app/preload.ts",
    "created_at": "2023-03-09T01:22:23+00:00",
    "commented_code": "-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1130266691",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1130266691",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
        "comment_created_at": "2023-03-09T01:22:23+00:00",
        "comment_author": "clavin",
        "comment_body": "\ud83e\udd28 `import` -> `require` in the preload script here? I believe the default app has the sandbox turned off, so I don't see why `require` must be used here. What am I missing?",
        "pr_file_module": null
      },
      {
        "comment_id": "1130353810",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1130266691",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
        "comment_created_at": "2023-03-09T03:13:34+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "`default_app/tsconfig.json` now has `module: esnext` which means that import statements aren't translated into require calls when tsc is run.  Sandboxed preload scripts do not (as noted elsewhere) support ESM so we have to use `require` here",
        "pr_file_module": null
      },
      {
        "comment_id": "1130356230",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1130266691",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
        "comment_created_at": "2023-03-09T03:16:23+00:00",
        "comment_author": "jakebailey",
        "comment_body": "FYI the syntax you likely want here if this is to be CJS is to write the lesser known:\r\n\r\n```ts\r\nimport { ipcRenderer, contextBridge } = require('electron/renderer');\r\n```\r\n\r\nWriting `const ... = require(...)` will just give you a bunch of `any` which doesn't sound desirable.\r\n\r\nIn general you might benefit from some of the new resolution modes and `verbatimModuleSyntax` features in the upcoming TS 5.0, but, that's next week.",
        "pr_file_module": null
      },
      {
        "comment_id": "1130371371",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1130266691",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
        "comment_created_at": "2023-03-09T03:35:03+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "> Writing const ... = require(...) will just give you a bunch of any which doesn't sound desirable.\r\n\r\nThis was giving me types when I was in my editor at least \ud83e\udd14 Will try the funky syntax instead though \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "1130375055",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1130266691",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';\n+const { ipcRenderer, contextBridge } = require('electron/renderer');",
        "comment_created_at": "2023-03-09T03:39:46+00:00",
        "comment_author": "jakebailey",
        "comment_body": "Oh, you're using esnext. Not sure what happens to `require` in that circumstance actually given there's _technically_ no require. Maybe `NodeNext` or `Node16` is closer to what you need? (Have not looked too deeply; forgive my drive by commentary and carry on!)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1131440343",
    "pr_number": 37535,
    "pr_file": "default_app/main.ts",
    "created_at": "2023-03-09T18:31:26+00:00",
    "commented_code": "if (fs.existsSync(packageJsonPath)) {\n       let packageJson;\n       try {\n-        packageJson = require(packageJsonPath);\n+        packageJson = (await import(packageJsonPath, {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1131440343",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/main.ts",
        "discussion_id": "1131440343",
        "commented_code": "@@ -90,7 +89,11 @@ function loadApplicationPackage (packagePath: string) {\n     if (fs.existsSync(packageJsonPath)) {\n       let packageJson;\n       try {\n-        packageJson = require(packageJsonPath);\n+        packageJson = (await import(packageJsonPath, {",
        "comment_created_at": "2023-03-09T18:31:26+00:00",
        "comment_author": "nornagon",
        "comment_body": "Why do we `import` this rather than just reading it and calling `JSON.parse`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1131506806",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/main.ts",
        "discussion_id": "1131440343",
        "commented_code": "@@ -90,7 +89,11 @@ function loadApplicationPackage (packagePath: string) {\n     if (fs.existsSync(packageJsonPath)) {\n       let packageJson;\n       try {\n-        packageJson = require(packageJsonPath);\n+        packageJson = (await import(packageJsonPath, {",
        "comment_created_at": "2023-03-09T19:36:51+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "We could read it and parse but I want to remain consistent with node's loading of JSON files with things like character encoding etc.  I could copy-paste but it seemed safer to just use `import`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1228750905",
    "pr_number": 37535,
    "pr_file": "default_app/preload.ts",
    "created_at": "2023-06-13T22:10:03+00:00",
    "commented_code": "-import { ipcRenderer, contextBridge } from 'electron/renderer';",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1228750905",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1228750905",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';",
        "comment_created_at": "2023-06-13T22:10:03+00:00",
        "comment_author": "VerteDinde",
        "comment_body": "Is there anything we'd need to document in Breaking Changes for apps made using Fiddle & Forge about the switch from import -> const in preload here? \r\n\r\nReading the code and your PR summary, it looks like this will only affect 1) apps using esbuild that 2) also have sandboxed preload scripts, just want to make sure my read there is accurate.",
        "pr_file_module": null
      },
      {
        "comment_id": "1228789856",
        "repo_full_name": "electron/electron",
        "pr_number": 37535,
        "pr_file": "default_app/preload.ts",
        "discussion_id": "1228750905",
        "commented_code": "@@ -1,4 +1,4 @@\n-import { ipcRenderer, contextBridge } from 'electron/renderer';",
        "comment_created_at": "2023-06-13T23:05:42+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "This change isn't actually anything that will impact apps, i.e. there are no breaking changes in this PR.  Every app that currently works should continue to work the exact same way.\r\n\r\nThis change is required because `default_app/package.json` now has `type: module` which means that tsc no longer replaces import with require when it builds the files.  Sandboxed preloads don't support import though so we have to the replacement instead.",
        "pr_file_module": null
      }
    ]
  }
]