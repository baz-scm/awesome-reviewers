[
  {
    "discussion_id": "2059796843",
    "pr_number": 46749,
    "pr_file": "spec/chromium-spec.ts",
    "created_at": "2025-04-25T08:27:21+00:00",
    "commented_code": "expect(eventData).to.equal('size: 350 450');\n     });\n \n+    it('window opened with innerWidth option has the same innerWidth', async () => {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2059796843",
        "repo_full_name": "electron/electron",
        "pr_number": 46749,
        "pr_file": "spec/chromium-spec.ts",
        "discussion_id": "2059796843",
        "commented_code": "@@ -1459,6 +1459,33 @@ describe('chromium features', () => {\n       expect(eventData).to.equal('size: 350 450');\n     });\n \n+    it('window opened with innerWidth option has the same innerWidth', async () => {",
        "comment_created_at": "2025-04-25T08:27:21+00:00",
        "comment_author": "codebytere",
        "comment_body": "We should also be testing this against `win.getContentSize()` ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2065327781",
    "pr_number": 46849,
    "pr_file": "spec/api-browser-window-spec.ts",
    "created_at": "2025-04-29T03:07:30+00:00",
    "commented_code": "});\n       });\n     });\n+\n+    describe('native window title', () => {\n+      describe('with properties', () => {\n+        it('can be set with title constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.title).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.title).to.eql('Electron Test Main');\n+          w.title = 'NEW TITLE';\n+          expect(w.title).to.eql('NEW TITLE');\n+        });\n+      });\n+\n+      describe('with functions', () => {\n+        it('can be set with minimizable constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.getTitle()).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.getTitle()).to.eql('Electron Test Main');\n+          w.setTitle('NEW TITLE');\n+          expect(w.getTitle()).to.eql('NEW TITLE');\n+        });",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2065327781",
        "repo_full_name": "electron/electron",
        "pr_number": 46849,
        "pr_file": "spec/api-browser-window-spec.ts",
        "discussion_id": "2065327781",
        "commented_code": "@@ -5428,6 +5428,36 @@ describe('BrowserWindow module', () => {\n         });\n       });\n     });\n+\n+    describe('native window title', () => {\n+      describe('with properties', () => {\n+        it('can be set with title constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.title).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.title).to.eql('Electron Test Main');\n+          w.title = 'NEW TITLE';\n+          expect(w.title).to.eql('NEW TITLE');\n+        });\n+      });\n+\n+      describe('with functions', () => {\n+        it('can be set with minimizable constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.getTitle()).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.getTitle()).to.eql('Electron Test Main');\n+          w.setTitle('NEW TITLE');\n+          expect(w.getTitle()).to.eql('NEW TITLE');\n+        });",
        "comment_created_at": "2025-04-29T03:07:30+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Should we have a test that confirms title values are reflected when changed from the renderer via `document.title` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2065383958",
        "repo_full_name": "electron/electron",
        "pr_number": 46849,
        "pr_file": "spec/api-browser-window-spec.ts",
        "discussion_id": "2065327781",
        "commented_code": "@@ -5428,6 +5428,36 @@ describe('BrowserWindow module', () => {\n         });\n       });\n     });\n+\n+    describe('native window title', () => {\n+      describe('with properties', () => {\n+        it('can be set with title constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.title).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.title).to.eql('Electron Test Main');\n+          w.title = 'NEW TITLE';\n+          expect(w.title).to.eql('NEW TITLE');\n+        });\n+      });\n+\n+      describe('with functions', () => {\n+        it('can be set with minimizable constructor option', () => {\n+          const w = new BrowserWindow({ show: false, title: 'mYtItLe' });\n+          expect(w.getTitle()).to.eql('mYtItLe');\n+        });\n+\n+        it('can be changed', () => {\n+          const w = new BrowserWindow({ show: false });\n+          expect(w.getTitle()).to.eql('Electron Test Main');\n+          w.setTitle('NEW TITLE');\n+          expect(w.getTitle()).to.eql('NEW TITLE');\n+        });",
        "comment_created_at": "2025-04-29T03:50:50+00:00",
        "comment_author": "ckerr",
        "comment_body": "Good call. Added in e768a564235a2fac467aad8dd88c38d795e125ab",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1846433775",
    "pr_number": 44698,
    "pr_file": "spec/api-utility-process-spec.ts",
    "created_at": "2024-11-18T11:33:48+00:00",
    "commented_code": "});\n       await once(child, 'spawn');\n       expect(child.kill()).to.be.true();\n-      await once(child, 'exit');\n+      const [code] = await once(child, 'exit');\n+      expect(code).to.equal(0);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1846433775",
        "repo_full_name": "electron/electron",
        "pr_number": 44698,
        "pr_file": "spec/api-utility-process-spec.ts",
        "discussion_id": "1846433775",
        "commented_code": "@@ -215,7 +215,8 @@ describe('utilityProcess module', () => {\n       });\n       await once(child, 'spawn');\n       expect(child.kill()).to.be.true();\n-      await once(child, 'exit');\n+      const [code] = await once(child, 'exit');\n+      expect(code).to.equal(0);",
        "comment_created_at": "2024-11-18T11:33:48+00:00",
        "comment_author": "nikwen",
        "comment_body": "Can we get a test for non-zero exit codes via `process.exit(42)` or similar?",
        "pr_file_module": null
      },
      {
        "comment_id": "1846543446",
        "repo_full_name": "electron/electron",
        "pr_number": 44698,
        "pr_file": "spec/api-utility-process-spec.ts",
        "discussion_id": "1846433775",
        "commented_code": "@@ -215,7 +215,8 @@ describe('utilityProcess module', () => {\n       });\n       await once(child, 'spawn');\n       expect(child.kill()).to.be.true();\n-      await once(child, 'exit');\n+      const [code] = await once(child, 'exit');\n+      expect(code).to.equal(0);",
        "comment_created_at": "2024-11-18T12:59:10+00:00",
        "comment_author": "deepak1556",
        "comment_body": "It should be covered in https://github.com/electron/electron/blob/dd50afa8c2d82f4a448bd66675fcde2d64642031/spec/api-utility-process-spec.ts#L123-L128",
        "pr_file_module": null
      },
      {
        "comment_id": "1846545215",
        "repo_full_name": "electron/electron",
        "pr_number": 44698,
        "pr_file": "spec/api-utility-process-spec.ts",
        "discussion_id": "1846433775",
        "commented_code": "@@ -215,7 +215,8 @@ describe('utilityProcess module', () => {\n       });\n       await once(child, 'spawn');\n       expect(child.kill()).to.be.true();\n-      await once(child, 'exit');\n+      const [code] = await once(child, 'exit');\n+      expect(code).to.equal(0);",
        "comment_created_at": "2024-11-18T13:00:22+00:00",
        "comment_author": "nikwen",
        "comment_body": "Thanks, I missed that!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1861380030",
    "pr_number": 44411,
    "pr_file": "spec/api-context-bridge-spec.ts",
    "created_at": "2024-11-28T00:49:18+00:00",
    "commented_code": "});\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1861380030",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "spec/api-context-bridge-spec.ts",
        "discussion_id": "1861380030",
        "commented_code": "@@ -1290,6 +1290,115 @@ describe('contextBridge', () => {\n           });\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
        "comment_created_at": "2024-11-28T00:49:18+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "Can you please update `generateTests` so the same \"it doesn't leak X\" tests run in a service worker environment too. They current run for sandbox + unsandbox. They should run for sandbox + unsandbox + service workers.",
        "pr_file_module": null
      },
      {
        "comment_id": "1870443093",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "spec/api-context-bridge-spec.ts",
        "discussion_id": "1861380030",
        "commented_code": "@@ -1290,6 +1290,115 @@ describe('contextBridge', () => {\n           });\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
        "comment_created_at": "2024-12-05T00:08:48+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "This is a considerable amount of work to refactor these tests. Do you think this should block the PR or can it be done in a follow up?",
        "pr_file_module": null
      },
      {
        "comment_id": "1912424729",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "spec/api-context-bridge-spec.ts",
        "discussion_id": "1861380030",
        "commented_code": "@@ -1290,6 +1290,115 @@ describe('contextBridge', () => {\n           });\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
        "comment_created_at": "2025-01-12T11:07:37+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "I don't think we should release this to stable without such tests, security has to come first. I'd be OK landing this PR in exchange for raising an issue that blocks stable for adding / updating this test suite to cover the SW case.",
        "pr_file_module": null
      },
      {
        "comment_id": "1912489448",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "spec/api-context-bridge-spec.ts",
        "discussion_id": "1861380030",
        "commented_code": "@@ -1290,6 +1290,115 @@ describe('contextBridge', () => {\n           });\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
        "comment_created_at": "2025-01-12T16:40:50+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Happy to add these tests as a fast follow up \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "1913850744",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "spec/api-context-bridge-spec.ts",
        "discussion_id": "1861380030",
        "commented_code": "@@ -1290,6 +1290,115 @@ describe('contextBridge', () => {\n           });\n         });\n       });\n+\n+      describe('executeInMainWorld', () => {",
        "comment_created_at": "2025-01-13T21:50:45+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Created https://github.com/electron/electron/issues/45188 and added post-merge todo to this PR's description.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1846413324",
    "pr_number": 44700,
    "pr_file": "spec/api-browser-window-spec.ts",
    "created_at": "2024-11-18T11:17:59+00:00",
    "commented_code": "expectBoundsEqual(w.getSize(), size);\n       });\n \n+      it('emits the resize event for single-pixel size changes', async () => {\n+        const [width, height] = w.getSize();\n+        const size = [width + 1, height + 1];",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1846413324",
        "repo_full_name": "electron/electron",
        "pr_number": 44700,
        "pr_file": "spec/api-browser-window-spec.ts",
        "discussion_id": "1846413324",
        "commented_code": "@@ -1557,6 +1567,17 @@ describe('BrowserWindow module', () => {\n         expectBoundsEqual(w.getSize(), size);\n       });\n \n+      it('emits the resize event for single-pixel size changes', async () => {\n+        const [width, height] = w.getSize();\n+        const size = [width + 1, height + 1];",
        "comment_created_at": "2024-11-18T11:17:59+00:00",
        "comment_author": "nikwen",
        "comment_body": "What do you think about testing `- 1`, too?\r\n\r\n```suggestion\r\n        const size = [width + 1, height - 1];\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1765399317",
    "pr_number": 43775,
    "pr_file": "spec/guest-window-manager-spec.ts",
    "created_at": "2024-09-18T16:47:24+00:00",
    "commented_code": "expect(childWindow.title).to.equal(browserWindowTitle);\n     });\n \n+    it('should be able to access the child window document when createWindow is provided', async () => {\n+      browserWindow.webContents.setWindowOpenHandler(() => {\n+        return {\n+          action: 'allow',\n+          createWindow: (options) => {\n+            const child = new BrowserWindow(options);\n+            return child.webContents;\n+          }\n+        };\n+      });\n+\n+      const title = await browserWindow.webContents.executeJavaScript(`\n+        const win = window.open('about:blank', '', 'show=no');\n+        win.document.title = 'child-win-title';\n+        win.document.title;\n+      `);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1765399317",
        "repo_full_name": "electron/electron",
        "pr_number": 43775,
        "pr_file": "spec/guest-window-manager-spec.ts",
        "discussion_id": "1765399317",
        "commented_code": "@@ -303,6 +303,25 @@ describe('webContents.setWindowOpenHandler', () => {\n       expect(childWindow.title).to.equal(browserWindowTitle);\n     });\n \n+    it('should be able to access the child window document when createWindow is provided', async () => {\n+      browserWindow.webContents.setWindowOpenHandler(() => {\n+        return {\n+          action: 'allow',\n+          createWindow: (options) => {\n+            const child = new BrowserWindow(options);\n+            return child.webContents;\n+          }\n+        };\n+      });\n+\n+      const title = await browserWindow.webContents.executeJavaScript(`\n+        const win = window.open('about:blank', '', 'show=no');\n+        win.document.title = 'child-win-title';\n+        win.document.title;\n+      `);",
        "comment_created_at": "2024-09-18T16:47:24+00:00",
        "comment_author": "nornagon-openai",
        "comment_body": "Do we already have a test that this still works correctly for non-`about:blank` urls?",
        "pr_file_module": null
      },
      {
        "comment_id": "1765451827",
        "repo_full_name": "electron/electron",
        "pr_number": 43775,
        "pr_file": "spec/guest-window-manager-spec.ts",
        "discussion_id": "1765399317",
        "commented_code": "@@ -303,6 +303,25 @@ describe('webContents.setWindowOpenHandler', () => {\n       expect(childWindow.title).to.equal(browserWindowTitle);\n     });\n \n+    it('should be able to access the child window document when createWindow is provided', async () => {\n+      browserWindow.webContents.setWindowOpenHandler(() => {\n+        return {\n+          action: 'allow',\n+          createWindow: (options) => {\n+            const child = new BrowserWindow(options);\n+            return child.webContents;\n+          }\n+        };\n+      });\n+\n+      const title = await browserWindow.webContents.executeJavaScript(`\n+        const win = window.open('about:blank', '', 'show=no');\n+        win.document.title = 'child-win-title';\n+        win.document.title;\n+      `);",
        "comment_created_at": "2024-09-18T17:30:42+00:00",
        "comment_author": "codebytere",
        "comment_body": "@nornagon-openai i can add a test for a local server url!",
        "pr_file_module": null
      },
      {
        "comment_id": "1765668444",
        "repo_full_name": "electron/electron",
        "pr_number": 43775,
        "pr_file": "spec/guest-window-manager-spec.ts",
        "discussion_id": "1765399317",
        "commented_code": "@@ -303,6 +303,25 @@ describe('webContents.setWindowOpenHandler', () => {\n       expect(childWindow.title).to.equal(browserWindowTitle);\n     });\n \n+    it('should be able to access the child window document when createWindow is provided', async () => {\n+      browserWindow.webContents.setWindowOpenHandler(() => {\n+        return {\n+          action: 'allow',\n+          createWindow: (options) => {\n+            const child = new BrowserWindow(options);\n+            return child.webContents;\n+          }\n+        };\n+      });\n+\n+      const title = await browserWindow.webContents.executeJavaScript(`\n+        const win = window.open('about:blank', '', 'show=no');\n+        win.document.title = 'child-win-title';\n+        win.document.title;\n+      `);",
        "comment_created_at": "2024-09-18T20:18:21+00:00",
        "comment_author": "codebytere",
        "comment_body": "done in [0143a46](https://github.com/electron/electron/pull/43775/commits/0143a46d99d07be210698685bbdd6646e61f5002)",
        "pr_file_module": null
      }
    ]
  }
]