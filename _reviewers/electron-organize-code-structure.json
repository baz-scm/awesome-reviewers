[
  {
    "discussion_id": "1942001522",
    "pr_number": 45433,
    "pr_file": "lib/browser/api/web-contents.ts",
    "created_at": "2025-02-04T22:48:23+00:00",
    "commented_code": "type LoadError = { errorCode: number, errorDescription: string, url: string };\n \n-WebContents.prototype.loadURL = function (url, options) {\n-  const p = new Promise<void>((resolve, reject) => {\n+WebContents.prototype._awaitNextLoad = function (navigationUrl: string) {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1942001522",
        "repo_full_name": "electron/electron",
        "pr_number": 45433,
        "pr_file": "lib/browser/api/web-contents.ts",
        "discussion_id": "1942001522",
        "commented_code": "@@ -343,8 +343,8 @@ WebContents.prototype.loadFile = function (filePath, options = {}) {\n \n type LoadError = { errorCode: number, errorDescription: string, url: string };\n \n-WebContents.prototype.loadURL = function (url, options) {\n-  const p = new Promise<void>((resolve, reject) => {\n+WebContents.prototype._awaitNextLoad = function (navigationUrl: string) {",
        "comment_created_at": "2025-02-04T22:48:23+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "To avoid _abuse_ can we make this truly private. i.e.\r\n\r\n`function awaitNextLoad(...`\r\n\r\n```\r\nreturn awaitNextLoad.call(this)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1866157255",
    "pr_number": 44692,
    "pr_file": "lib/browser/api/web-request.ts",
    "created_at": "2024-12-02T16:23:07+00:00",
    "commented_code": "+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1866157255",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "lib/browser/api/web-request.ts",
        "discussion_id": "1866157255",
        "commented_code": "@@ -0,0 +1,62 @@\n+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
        "comment_created_at": "2024-12-02T16:23:07+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "We should consider moving this into C++ if possible.\r\n\r\nHere's an example usage of `electron::utils::EmitWarning` for how we can do deprecation warnings there\r\n\r\nhttps://github.com/electron/electron/blob/493e3c4537bfa70405a2da998503e82594eada14/shell/browser/native_window_mac.mm#L182-L184",
        "pr_file_module": null
      },
      {
        "comment_id": "1866398743",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "lib/browser/api/web-request.ts",
        "discussion_id": "1866157255",
        "commented_code": "@@ -0,0 +1,62 @@\n+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
        "comment_created_at": "2024-12-02T18:40:11+00:00",
        "comment_author": "alicelovescake",
        "comment_body": "ohhh this would make my implementation a lot simpler if I add the deprecation message to C++. I will try this out!",
        "pr_file_module": null
      },
      {
        "comment_id": "1866400995",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "lib/browser/api/web-request.ts",
        "discussion_id": "1866157255",
        "commented_code": "@@ -0,0 +1,62 @@\n+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
        "comment_created_at": "2024-12-02T18:41:49+00:00",
        "comment_author": "alicelovescake",
        "comment_body": "Just for my own learning, what's the rule of thumb when you do the modification in C++ vs Typescript wrapper?",
        "pr_file_module": null
      },
      {
        "comment_id": "1866415287",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "lib/browser/api/web-request.ts",
        "discussion_id": "1866157255",
        "commented_code": "@@ -0,0 +1,62 @@\n+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
        "comment_created_at": "2024-12-02T18:50:23+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "I'd say in this case, I'm making the recommendation as it's easier to maintain. Less code spread over less files. It's also more efficient as there's less JavaScript to parse.\r\n\r\nI think we tend to write deprecations in JS if existing JS code exists for the class.",
        "pr_file_module": null
      },
      {
        "comment_id": "1866594079",
        "repo_full_name": "electron/electron",
        "pr_number": 44692,
        "pr_file": "lib/browser/api/web-request.ts",
        "discussion_id": "1866157255",
        "commented_code": "@@ -0,0 +1,62 @@\n+import * as deprecate from '@electron/internal/common/deprecate';\n+\n+const { WebRequest } = process._linkedBinding('electron_browser_web_request');\n+\n+const urlsDeprecated = deprecate.warnOnce('Empty url array in WebRequestFilter', '<all_urls> to match all URLs');\n+function modifyArgs (args: any[]) {\n+  if (args.length < 2) return;\n+  const filter = args[0];\n+\n+  if (filter.urls.length === 0) {\n+    urlsDeprecated();\n+    filter.urls = ['<all_urls>'];\n+  }\n+}",
        "comment_created_at": "2024-12-02T20:48:54+00:00",
        "comment_author": "alicelovescake",
        "comment_body": "Thanks! Makes sense! I was able to delete a bunch of JS code! New deprecation message!\r\n![image](https://github.com/user-attachments/assets/3cdc0fc4-c28c-46e7-a6f5-fa1a489a0b34)\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1634203279",
    "pr_number": 41281,
    "pr_file": "spec/api-browser-window-spec.ts",
    "created_at": "2024-06-11T05:17:00+00:00",
    "commented_code": "expect(image.isEmpty()).to.equal(true);\n     });\n \n+    describe('when `outputSize` is provided', () => {\n+      describe('when both dimensions of`outputSize` are smaller than dimensions of the captured area', () => {\n+        it('returns image with requested size', async () => {\n+          const w = new BrowserWindow({ show: false });\n+          w.loadFile(path.join(fixtures, 'pages', 'a.html'));\n+          await once(w, 'ready-to-show');\n+          w.show();\n+          const image = await w.capturePage({\n+            x: 0,\n+            y: 0,\n+            width: 100,\n+            height: 100\n+          }, {\n+            outputSize: {\n+              width: 20,\n+              height: 20\n+            }\n+          });\n+\n+          expect(image.getSize()).to.deep.equal({ width: 20, height: 20 });\n+        });\n+      });\n+\n+      describe('when one dimension of `outputSize` is bigger than one dimension of the captured area', () => {\n+        it('returns image with requested size', async () => {\n+          const w = new BrowserWindow({ show: false });\n+          w.loadFile(path.join(fixtures, 'pages', 'a.html'));\n+          await once(w, 'ready-to-show');\n+          w.show();\n+          w.setBounds({ width: 200, height: 200 });\n+          const image = await w.capturePage({\n+            x: 0,\n+            y: 0,\n+            width: 100,\n+            height: 100\n+          }, {\n+            outputSize: {\n+              width: 150,\n+              height: 1500\n+            }\n+          });\n+\n+          expect(image.getSize()).to.deep.equal({ width: 150, height: 1500 });\n+        });\n+      });\n+\n+      describe('when both dimensions of `outputSize` are bigger than both dimensions of the captured area', () => {\n+        it('returns image with requested size', async () => {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1634203279",
        "repo_full_name": "electron/electron",
        "pr_number": 41281,
        "pr_file": "spec/api-browser-window-spec.ts",
        "discussion_id": "1634203279",
        "commented_code": "@@ -2307,6 +2307,76 @@ describe('BrowserWindow module', () => {\n       expect(image.isEmpty()).to.equal(true);\n     });\n \n+    describe('when `outputSize` is provided', () => {\n+      describe('when both dimensions of`outputSize` are smaller than dimensions of the captured area', () => {\n+        it('returns image with requested size', async () => {\n+          const w = new BrowserWindow({ show: false });\n+          w.loadFile(path.join(fixtures, 'pages', 'a.html'));\n+          await once(w, 'ready-to-show');\n+          w.show();\n+          const image = await w.capturePage({\n+            x: 0,\n+            y: 0,\n+            width: 100,\n+            height: 100\n+          }, {\n+            outputSize: {\n+              width: 20,\n+              height: 20\n+            }\n+          });\n+\n+          expect(image.getSize()).to.deep.equal({ width: 20, height: 20 });\n+        });\n+      });\n+\n+      describe('when one dimension of `outputSize` is bigger than one dimension of the captured area', () => {\n+        it('returns image with requested size', async () => {\n+          const w = new BrowserWindow({ show: false });\n+          w.loadFile(path.join(fixtures, 'pages', 'a.html'));\n+          await once(w, 'ready-to-show');\n+          w.show();\n+          w.setBounds({ width: 200, height: 200 });\n+          const image = await w.capturePage({\n+            x: 0,\n+            y: 0,\n+            width: 100,\n+            height: 100\n+          }, {\n+            outputSize: {\n+              width: 150,\n+              height: 1500\n+            }\n+          });\n+\n+          expect(image.getSize()).to.deep.equal({ width: 150, height: 1500 });\n+        });\n+      });\n+\n+      describe('when both dimensions of `outputSize` are bigger than both dimensions of the captured area', () => {\n+        it('returns image with requested size', async () => {",
        "comment_created_at": "2024-06-11T05:17:00+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "It's fine as is, but this should probably just use one `it` like\r\n```suggestion\r\n      it('returns image with requested size when both dimensions of `outputSize` are bigger than both dimensions of the captured area', async () => {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]