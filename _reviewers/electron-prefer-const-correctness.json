[
  {
    "discussion_id": "1321736965",
    "pr_number": 39792,
    "pr_file": "shell/browser/electron_browser_main_parts_linux.cc",
    "created_at": "2023-09-11T15:35:30+00:00",
    "commented_code": "}  // namespace\n \n void ElectronBrowserMainParts::DetectOzonePlatform() {\n+  auto env = base::Environment::Create();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1321736965",
        "repo_full_name": "electron/electron",
        "pr_number": 39792,
        "pr_file": "shell/browser/electron_browser_main_parts_linux.cc",
        "discussion_id": "1321736965",
        "commented_code": "@@ -115,17 +118,21 @@ std::string MaybeFixPlatformName(const std::string& ozone_platform_hint) {\n }  // namespace\n \n void ElectronBrowserMainParts::DetectOzonePlatform() {\n+  auto env = base::Environment::Create();",
        "comment_created_at": "2023-09-11T15:35:30+00:00",
        "comment_author": "ckerr",
        "comment_body": "_(nitpick)_ this can be `const`",
        "pr_file_module": null
      },
      {
        "comment_id": "1321786141",
        "repo_full_name": "electron/electron",
        "pr_number": 39792,
        "pr_file": "shell/browser/electron_browser_main_parts_linux.cc",
        "discussion_id": "1321736965",
        "commented_code": "@@ -115,17 +118,21 @@ std::string MaybeFixPlatformName(const std::string& ozone_platform_hint) {\n }  // namespace\n \n void ElectronBrowserMainParts::DetectOzonePlatform() {\n+  auto env = base::Environment::Create();",
        "comment_created_at": "2023-09-11T16:17:34+00:00",
        "comment_author": "vially",
        "comment_body": "Fixed in latest commit (although I'm not sure if `auto const` or `const auto` is preferred).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141178480",
    "pr_number": 47425,
    "pr_file": "shell/browser/native_window.cc",
    "created_at": "2025-06-11T21:56:47+00:00",
    "commented_code": "return false;\n }\n \n+void NativeWindow::SaveWindowState() {\n+  if (!prefs_ || window_state_id_.empty())\n+    return;\n+\n+  gfx::Rect bounds = GetBounds();\n+\n+  base::Value::Dict window_preferences;\n+  window_preferences.Set(electron::kLeft, bounds.x());\n+  window_preferences.Set(electron::kTop, bounds.y());\n+  window_preferences.Set(electron::kRight, bounds.right());\n+  window_preferences.Set(electron::kBottom, bounds.bottom());\n+\n+  window_preferences.Set(electron::kMaximized, IsMaximized());\n+  window_preferences.Set(electron::kFullscreen, IsFullscreen());\n+\n+  display::Screen* screen = display::Screen::GetScreen();\n+  display::Display display = screen->GetDisplayMatching(bounds);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2141178480",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "shell/browser/native_window.cc",
        "discussion_id": "2141178480",
        "commented_code": "@@ -830,6 +855,34 @@ bool NativeWindow::IsTranslucent() const {\n   return false;\n }\n \n+void NativeWindow::SaveWindowState() {\n+  if (!prefs_ || window_state_id_.empty())\n+    return;\n+\n+  gfx::Rect bounds = GetBounds();\n+\n+  base::Value::Dict window_preferences;\n+  window_preferences.Set(electron::kLeft, bounds.x());\n+  window_preferences.Set(electron::kTop, bounds.y());\n+  window_preferences.Set(electron::kRight, bounds.right());\n+  window_preferences.Set(electron::kBottom, bounds.bottom());\n+\n+  window_preferences.Set(electron::kMaximized, IsMaximized());\n+  window_preferences.Set(electron::kFullscreen, IsFullscreen());\n+\n+  display::Screen* screen = display::Screen::GetScreen();\n+  display::Display display = screen->GetDisplayMatching(bounds);",
        "comment_created_at": "2025-06-11T21:56:47+00:00",
        "comment_author": "ckerr",
        "comment_body": "These can be const\r\n\r\n```suggestion\r\n  const display::Screen* screen = display::Screen::GetScreen();\r\n  const display::Display display = screen->GetDisplayMatching(bounds);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070962909",
    "pr_number": 44413,
    "pr_file": "shell/common/api/electron_api_testing.cc",
    "created_at": "2025-05-02T00:37:26+00:00",
    "commented_code": "}\n }\n \n+std::string GetLoggingDestination() {\n+  auto* command_line = base::CommandLine::ForCurrentProcess();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2070962909",
        "repo_full_name": "electron/electron",
        "pr_number": 44413,
        "pr_file": "shell/common/api/electron_api_testing.cc",
        "discussion_id": "2070962909",
        "commented_code": "@@ -34,12 +36,18 @@ void Log(int severity, std::string text) {\n   }\n }\n \n+std::string GetLoggingDestination() {\n+  auto* command_line = base::CommandLine::ForCurrentProcess();",
        "comment_created_at": "2025-05-02T00:37:26+00:00",
        "comment_author": "ckerr",
        "comment_body": "_(nit)_ const correctness\r\n\r\n```suggestion\r\n  const auto* command_line = base::CommandLine::ForCurrentProcess();\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1962068784",
    "pr_number": 45671,
    "pr_file": "shell/browser/serial/serial_chooser_controller.h",
    "created_at": "2025-02-19T17:09:32+00:00",
    "commented_code": "void OnPermissionRevoked(const url::Origin& origin) override {}\n   void OnSerialChooserContextShutdown() override;\n \n+  // BluetoothAdapter::Observer\n+  void AdapterPoweredChanged(device::BluetoothAdapter* adapter,\n+                             bool powered) override;\n+\n  private:\n   api::Session* GetSession();\n+  void GetDevices();\n   void OnGetDevices(std::vector<device::mojom::SerialPortInfoPtr> ports);\n   bool DisplayDevice(const device::mojom::SerialPortInfo& port) const;\n   void RunCallback(device::mojom::SerialPortInfoPtr port);\n   void OnDeviceChosen(const std::string& port_id);\n+  void OnGetAdapter(base::OnceClosure callback,\n+                    scoped_refptr<device::BluetoothAdapter> adapter);\n+  // Whether it will only show ports from bluetooth devices.\n+  bool IsWirelessSerialPortOnly();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1962068784",
        "repo_full_name": "electron/electron",
        "pr_number": 45671,
        "pr_file": "shell/browser/serial/serial_chooser_controller.h",
        "discussion_id": "1962068784",
        "commented_code": "@@ -55,12 +57,21 @@ class SerialChooserController final\n   void OnPermissionRevoked(const url::Origin& origin) override {}\n   void OnSerialChooserContextShutdown() override;\n \n+  // BluetoothAdapter::Observer\n+  void AdapterPoweredChanged(device::BluetoothAdapter* adapter,\n+                             bool powered) override;\n+\n  private:\n   api::Session* GetSession();\n+  void GetDevices();\n   void OnGetDevices(std::vector<device::mojom::SerialPortInfoPtr> ports);\n   bool DisplayDevice(const device::mojom::SerialPortInfo& port) const;\n   void RunCallback(device::mojom::SerialPortInfoPtr port);\n   void OnDeviceChosen(const std::string& port_id);\n+  void OnGetAdapter(base::OnceClosure callback,\n+                    scoped_refptr<device::BluetoothAdapter> adapter);\n+  // Whether it will only show ports from bluetooth devices.\n+  bool IsWirelessSerialPortOnly();",
        "comment_created_at": "2025-02-19T17:09:32+00:00",
        "comment_author": "ckerr",
        "comment_body": "_(nit)_ this method can be `const`\r\n\r\n```suggestion\r\n  [[nodiscard]] bool IsWirelessSerialPortOnly() const;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1960173163",
    "pr_number": 45609,
    "pr_file": "shell/browser/api/electron_api_web_frame_main.cc",
    "created_at": "2025-02-18T17:15:41+00:00",
    "commented_code": "namespace {\n \n+using LifecycleState = content::RenderFrameHostImpl::LifecycleStateImpl;\n+\n+// RenderFrameCreated is called for speculative frames which may not be\n+// used in certain cross-origin navigations. Invoking\n+// RenderFrameHost::GetLifecycleState currently crashes when called for\n+// speculative frames so we need to filter it out for now. Check\n+// https://crbug.com/1183639 for details on when this can be removed.\n+[[nodiscard]] LifecycleState GetLifecycleState(content::RenderFrameHost* rfh) {\n+  auto* rfh_impl = static_cast<content::RenderFrameHostImpl*>(rfh);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1960173163",
        "repo_full_name": "electron/electron",
        "pr_number": 45609,
        "pr_file": "shell/browser/api/electron_api_web_frame_main.cc",
        "discussion_id": "1960173163",
        "commented_code": "@@ -37,31 +37,33 @@\n \n namespace {\n \n+using LifecycleState = content::RenderFrameHostImpl::LifecycleStateImpl;\n+\n+// RenderFrameCreated is called for speculative frames which may not be\n+// used in certain cross-origin navigations. Invoking\n+// RenderFrameHost::GetLifecycleState currently crashes when called for\n+// speculative frames so we need to filter it out for now. Check\n+// https://crbug.com/1183639 for details on when this can be removed.\n+[[nodiscard]] LifecycleState GetLifecycleState(content::RenderFrameHost* rfh) {\n+  auto* rfh_impl = static_cast<content::RenderFrameHostImpl*>(rfh);",
        "comment_created_at": "2025-02-18T17:15:41+00:00",
        "comment_author": "ckerr",
        "comment_body": "_nit_ `rfh` doesn't have to be mutable here\r\n```suggestion\r\n[[nodiscard]] LifecycleState GetLifecycleState(const content::RenderFrameHost* rfh) {\r\n  const auto* rfh_impl = static_cast<const content::RenderFrameHostImpl*>(rfh);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1960173431",
    "pr_number": 45609,
    "pr_file": "shell/browser/api/electron_api_web_frame_main.cc",
    "created_at": "2025-02-18T17:15:52+00:00",
    "commented_code": "namespace {\n \n+using LifecycleState = content::RenderFrameHostImpl::LifecycleStateImpl;\n+\n+// RenderFrameCreated is called for speculative frames which may not be\n+// used in certain cross-origin navigations. Invoking\n+// RenderFrameHost::GetLifecycleState currently crashes when called for\n+// speculative frames so we need to filter it out for now. Check\n+// https://crbug.com/1183639 for details on when this can be removed.\n+[[nodiscard]] LifecycleState GetLifecycleState(content::RenderFrameHost* rfh) {\n+  auto* rfh_impl = static_cast<content::RenderFrameHostImpl*>(rfh);\n+  return rfh_impl->lifecycle_state();\n+}\n+\n // RenderFrameHost (RFH) exists as a child of a FrameTreeNode. When a\n // cross-origin navigation occurs, the FrameTreeNode swaps RFHs. After\n // swapping, the old RFH will be marked for deletion and run any unload\n // listeners. If an IPC is sent during an unload/beforeunload listener,\n // it's possible that it arrives after the RFH swap and has been\n // detached from the FrameTreeNode.\n-bool IsDetachedFrameHost(content::RenderFrameHost* rfh) {\n+[[nodiscard]] bool IsDetachedFrameHost(content::RenderFrameHost* rfh) {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1960173431",
        "repo_full_name": "electron/electron",
        "pr_number": 45609,
        "pr_file": "shell/browser/api/electron_api_web_frame_main.cc",
        "discussion_id": "1960173431",
        "commented_code": "@@ -37,31 +37,33 @@\n \n namespace {\n \n+using LifecycleState = content::RenderFrameHostImpl::LifecycleStateImpl;\n+\n+// RenderFrameCreated is called for speculative frames which may not be\n+// used in certain cross-origin navigations. Invoking\n+// RenderFrameHost::GetLifecycleState currently crashes when called for\n+// speculative frames so we need to filter it out for now. Check\n+// https://crbug.com/1183639 for details on when this can be removed.\n+[[nodiscard]] LifecycleState GetLifecycleState(content::RenderFrameHost* rfh) {\n+  auto* rfh_impl = static_cast<content::RenderFrameHostImpl*>(rfh);\n+  return rfh_impl->lifecycle_state();\n+}\n+\n // RenderFrameHost (RFH) exists as a child of a FrameTreeNode. When a\n // cross-origin navigation occurs, the FrameTreeNode swaps RFHs. After\n // swapping, the old RFH will be marked for deletion and run any unload\n // listeners. If an IPC is sent during an unload/beforeunload listener,\n // it's possible that it arrives after the RFH swap and has been\n // detached from the FrameTreeNode.\n-bool IsDetachedFrameHost(content::RenderFrameHost* rfh) {\n+[[nodiscard]] bool IsDetachedFrameHost(content::RenderFrameHost* rfh) {",
        "comment_created_at": "2025-02-18T17:15:52+00:00",
        "comment_author": "ckerr",
        "comment_body": "```suggestion\r\n[[nodiscard]] bool IsDetachedFrameHost(const content::RenderFrameHost* rfh) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1960217024",
    "pr_number": 45609,
    "pr_file": "shell/browser/api/electron_api_web_frame_main.h",
    "created_at": "2025-02-18T17:41:56+00:00",
    "commented_code": "std::vector<content::RenderFrameHost*> Frames() const;\n   std::vector<content::RenderFrameHost*> FramesInSubtree() const;\n \n+  std::string LifecycleStateForTest();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1960217024",
        "repo_full_name": "electron/electron",
        "pr_number": 45609,
        "pr_file": "shell/browser/api/electron_api_web_frame_main.h",
        "discussion_id": "1960217024",
        "commented_code": "@@ -139,6 +137,8 @@ class WebFrameMain final : public gin::Wrappable<WebFrameMain>,\n   std::vector<content::RenderFrameHost*> Frames() const;\n   std::vector<content::RenderFrameHost*> FramesInSubtree() const;\n \n+  std::string LifecycleStateForTest();",
        "comment_created_at": "2025-02-18T17:41:56+00:00",
        "comment_author": "ckerr",
        "comment_body": "_(nit)_\r\n\r\nThese nits are pretty minor, especially since this isn't a user-visible method, but FWIW:\r\n\r\n- can be `const`\r\n- can return a `const char*` to match better with  `RenderFrameHostImpl::LifecycleStateImplToString()`?\r\n\r\n```suggestion\r\n  const char* LifecycleStateForTest() const;\r\n```\r\n\r\n_edit_: I don't think I've ever returned a `const char*`  into a gin converter before, so I'm not positive this suggestion will work :thinking: ",
        "pr_file_module": null
      }
    ]
  }
]