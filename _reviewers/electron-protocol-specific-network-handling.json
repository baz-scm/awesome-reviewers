[
  {
    "discussion_id": "2196816989",
    "pr_number": 47703,
    "pr_file": "patches/chromium/feat_add_streaming-protocol_registry_to_multibuffer_data_source.patch",
    "created_at": "2025-07-10T07:14:19+00:00",
    "commented_code": "// A data source capable of loading URLs and buffering the data using an\n  // in-memory sliding window.\n  //\n+diff --git a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+index e0c0f0f90885f293f11ed7d58b72cb1d23d365a8..20877c949eb85e30cc17e4b571e046b9401ebc89 100644\n+--- a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n++++ b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+@@ -309,6 +309,7 @@ void ResourceMultiBufferDataProvider::DidReceiveResponse(\n+       do_fail = true;\n+     }\n+   } else {\n++    destination_url_data->set_range_supported();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2196816989",
        "repo_full_name": "electron/electron",
        "pr_number": 47703,
        "pr_file": "patches/chromium/feat_add_streaming-protocol_registry_to_multibuffer_data_source.patch",
        "discussion_id": "2196816989",
        "commented_code": "@@ -85,3 +85,15 @@ index 8c92f1c0c5028069cdad967b5be2bccf8005ed43..40217c27a4cfc43d3143c7eeb2b1e54d\n  // A data source capable of loading URLs and buffering the data using an\n  // in-memory sliding window.\n  //\n+diff --git a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+index e0c0f0f90885f293f11ed7d58b72cb1d23d365a8..20877c949eb85e30cc17e4b571e046b9401ebc89 100644\n+--- a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n++++ b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+@@ -309,6 +309,7 @@ void ResourceMultiBufferDataProvider::DidReceiveResponse(\n+       do_fail = true;\n+     }\n+   } else {\n++    destination_url_data->set_range_supported();",
        "comment_created_at": "2025-07-10T07:14:19+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Can you explain why this only applies to stream protocol and not http(s) ? Wondering if this can be upstreamed to be set always ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2199960718",
        "repo_full_name": "electron/electron",
        "pr_number": 47703,
        "pr_file": "patches/chromium/feat_add_streaming-protocol_registry_to_multibuffer_data_source.patch",
        "discussion_id": "2196816989",
        "commented_code": "@@ -85,3 +85,15 @@ index 8c92f1c0c5028069cdad967b5be2bccf8005ed43..40217c27a4cfc43d3143c7eeb2b1e54d\n  // A data source capable of loading URLs and buffering the data using an\n  // in-memory sliding window.\n  //\n+diff --git a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+index e0c0f0f90885f293f11ed7d58b72cb1d23d365a8..20877c949eb85e30cc17e4b571e046b9401ebc89 100644\n+--- a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n++++ b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+@@ -309,6 +309,7 @@ void ResourceMultiBufferDataProvider::DidReceiveResponse(\n+       do_fail = true;\n+     }\n+   } else {\n++    destination_url_data->set_range_supported();",
        "comment_created_at": "2025-07-11T07:57:16+00:00",
        "comment_author": "codebytere",
        "comment_body": "@deepak1556 here's the CL that removed it: https://chromium-review.googlesource.com/c/chromium/src/+/6431846 with their motivation:\r\n\r\n> Don't set range-requests-supported on non-http protocols.\r\n\r\n> This ends up breaking buffering assumptions around file:// based\r\nURLs and causes us to defer them when MultiBufferNeverDefer is\r\nenabled.",
        "pr_file_module": null
      },
      {
        "comment_id": "2201395313",
        "repo_full_name": "electron/electron",
        "pr_number": 47703,
        "pr_file": "patches/chromium/feat_add_streaming-protocol_registry_to_multibuffer_data_source.patch",
        "discussion_id": "2196816989",
        "commented_code": "@@ -85,3 +85,15 @@ index 8c92f1c0c5028069cdad967b5be2bccf8005ed43..40217c27a4cfc43d3143c7eeb2b1e54d\n  // A data source capable of loading URLs and buffering the data using an\n  // in-memory sliding window.\n  //\n+diff --git a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+index e0c0f0f90885f293f11ed7d58b72cb1d23d365a8..20877c949eb85e30cc17e4b571e046b9401ebc89 100644\n+--- a/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n++++ b/third_party/blink/renderer/platform/media/resource_multi_buffer_data_provider.cc\n+@@ -309,6 +309,7 @@ void ResourceMultiBufferDataProvider::DidReceiveResponse(\n+       do_fail = true;\n+     }\n+   } else {\n++    destination_url_data->set_range_supported();",
        "comment_created_at": "2025-07-11T17:24:54+00:00",
        "comment_author": "deepak1556",
        "comment_body": "Great, thanks for the context!\r\n\r\n1) Please include the CL and the context in the patch file for future changes\r\n2) Can we restrict this block to streaming custom protocols since that is the one supporting ranges and not others. Would love to keep the behavior aligned with upstream and only create exception for the interested type of custom protocols.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1506501877",
    "pr_number": 41450,
    "pr_file": "shell/browser/net/system_network_context_manager.cc",
    "created_at": "2024-02-28T19:45:15+00:00",
    "commented_code": "return g_system_network_context_manager;\n }\n \n+// static\n+bool SystemNetworkContextManager::HasInstance() {\n+  return !!g_system_network_context_manager;\n+}\n+\n // static\n SystemNetworkContextManager* SystemNetworkContextManager::GetInstance() {\n+  if (!g_system_network_context_manager) {\n+    // Initialize the network service, which will trigger\n+    // ElectronBrowserClient::OnNetworkServiceCreated(), which calls\n+    // CreateInstance() to initialize |g_system_network_context_manager|.\n+    content::GetNetworkService();",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1506501877",
        "repo_full_name": "electron/electron",
        "pr_number": 41450,
        "pr_file": "shell/browser/net/system_network_context_manager.cc",
        "discussion_id": "1506501877",
        "commented_code": "@@ -214,15 +214,28 @@ SystemNetworkContextManager* SystemNetworkContextManager::CreateInstance(\n   return g_system_network_context_manager;\n }\n \n+// static\n+bool SystemNetworkContextManager::HasInstance() {\n+  return !!g_system_network_context_manager;\n+}\n+\n // static\n SystemNetworkContextManager* SystemNetworkContextManager::GetInstance() {\n+  if (!g_system_network_context_manager) {\n+    // Initialize the network service, which will trigger\n+    // ElectronBrowserClient::OnNetworkServiceCreated(), which calls\n+    // CreateInstance() to initialize |g_system_network_context_manager|.\n+    content::GetNetworkService();",
        "comment_created_at": "2024-02-28T19:45:15+00:00",
        "comment_author": "nornagon",
        "comment_body": "```suggestion\r\n    content::GetNetworkService();\r\n    DCHECK(g_system_network_context_manager);\r\n```\r\n\r\nperhaps?",
        "pr_file_module": null
      }
    ]
  }
]