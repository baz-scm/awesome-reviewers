[
  {
    "discussion_id": "2153388954",
    "pr_number": 47493,
    "pr_file": "docs/api/desktop-capturer.md",
    "created_at": "2025-06-18T00:34:14+00:00",
    "commented_code": "[`navigator.mediaDevices.getUserMedia`]: https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia\n [`systemPreferences.getMediaAccessStatus`]: system-preferences.md#systempreferencesgetmediaaccessstatusmediatype-windows-macos\n \n+## Loopback Audio on macOS 13/14/15\n+\n+On macOS 13 and macOS 14, `navigator.mediaDevices.getDisplayMedia` may be used to capture loopback audio if the [`setDisplayMediaRequestHandler`](./session.md#sessetdisplaymediarequesthandlerhandler-opts) callback is returned with `audio: 'loopback'`.\n+\n+For macOS 15+, loopback audio is only supported if the following experimental command line switches are appended:\n+\n+```js\n+// main.js\n+app.commandLine.appendSwitch('enable-features', 'MacLoopbackAudioForScreenShare,MacSckSystemAudioLoopbackOverride');\n+```\n+\n+> [!NOTE]\n+> Loopback audio is not supported on any macOS version in `navigator.mediaDevices.getUserMedia`.\n+\n ## Caveats\n \n `navigator.mediaDevices.getUserMedia` does not work on macOS for audio capture due to a fundamental limitation whereby apps that want to access the system's audio require a [signed kernel extension](https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/KernelExtensions/KernelExtensions.html). Chromium, and by extension Electron, does not provide this.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2153388954",
        "repo_full_name": "electron/electron",
        "pr_number": 47493,
        "pr_file": "docs/api/desktop-capturer.md",
        "discussion_id": "2153388954",
        "commented_code": "@@ -100,6 +99,20 @@ Returns `Promise<DesktopCapturerSource[]>` - Resolves with an array of [`Desktop\n [`navigator.mediaDevices.getUserMedia`]: https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia\n [`systemPreferences.getMediaAccessStatus`]: system-preferences.md#systempreferencesgetmediaaccessstatusmediatype-windows-macos\n \n+## Loopback Audio on macOS 13/14/15\n+\n+On macOS 13 and macOS 14, `navigator.mediaDevices.getDisplayMedia` may be used to capture loopback audio if the [`setDisplayMediaRequestHandler`](./session.md#sessetdisplaymediarequesthandlerhandler-opts) callback is returned with `audio: 'loopback'`.\n+\n+For macOS 15+, loopback audio is only supported if the following experimental command line switches are appended:\n+\n+```js\n+// main.js\n+app.commandLine.appendSwitch('enable-features', 'MacLoopbackAudioForScreenShare,MacSckSystemAudioLoopbackOverride');\n+```\n+\n+> [!NOTE]\n+> Loopback audio is not supported on any macOS version in `navigator.mediaDevices.getUserMedia`.\n+\n ## Caveats\n \n `navigator.mediaDevices.getUserMedia` does not work on macOS for audio capture due to a fundamental limitation whereby apps that want to access the system's audio require a [signed kernel extension](https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/KernelExtensions/KernelExtensions.html). Chromium, and by extension Electron, does not provide this.",
        "comment_created_at": "2025-06-18T00:34:14+00:00",
        "comment_author": "nikwen",
        "comment_body": "Should we get rid of the old docs here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2153394134",
        "repo_full_name": "electron/electron",
        "pr_number": 47493,
        "pr_file": "docs/api/desktop-capturer.md",
        "discussion_id": "2153388954",
        "commented_code": "@@ -100,6 +99,20 @@ Returns `Promise<DesktopCapturerSource[]>` - Resolves with an array of [`Desktop\n [`navigator.mediaDevices.getUserMedia`]: https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia\n [`systemPreferences.getMediaAccessStatus`]: system-preferences.md#systempreferencesgetmediaaccessstatusmediatype-windows-macos\n \n+## Loopback Audio on macOS 13/14/15\n+\n+On macOS 13 and macOS 14, `navigator.mediaDevices.getDisplayMedia` may be used to capture loopback audio if the [`setDisplayMediaRequestHandler`](./session.md#sessetdisplaymediarequesthandlerhandler-opts) callback is returned with `audio: 'loopback'`.\n+\n+For macOS 15+, loopback audio is only supported if the following experimental command line switches are appended:\n+\n+```js\n+// main.js\n+app.commandLine.appendSwitch('enable-features', 'MacLoopbackAudioForScreenShare,MacSckSystemAudioLoopbackOverride');\n+```\n+\n+> [!NOTE]\n+> Loopback audio is not supported on any macOS version in `navigator.mediaDevices.getUserMedia`.\n+\n ## Caveats\n \n `navigator.mediaDevices.getUserMedia` does not work on macOS for audio capture due to a fundamental limitation whereby apps that want to access the system's audio require a [signed kernel extension](https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/KernelExtensions/KernelExtensions.html). Chromium, and by extension Electron, does not provide this.",
        "comment_created_at": "2025-06-18T00:39:46+00:00",
        "comment_author": "alectrocute",
        "comment_body": "I stared blankly at my screen for what had to be ten minutes, pondering wether this is still relevant or not. I think it is, but for macOS 12.3 and below\u2014the macOS operating systems which don't support the `ScreenCaptureKit` API: https://developer.apple.com/documentation/screencapturekit/\r\n\r\nI'll add a small paragraph at the beginning of Caveats scoping it to 12.3 or below. It's still relevant\u2014developers may have to fallback to installing third-party drivers in their Electron app if the user is on 12.3 or below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2169960417",
    "pr_number": 47425,
    "pr_file": "docs/api/structures/window-state-restore-options.md",
    "created_at": "2025-06-26T20:38:04+00:00",
    "commented_code": "+# WindowStateRestoreOptions Object",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2169960417",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "docs/api/structures/window-state-restore-options.md",
        "discussion_id": "2169960417",
        "commented_code": "@@ -0,0 +1,3 @@\n+# WindowStateRestoreOptions Object",
        "comment_created_at": "2025-06-26T20:38:04+00:00",
        "comment_author": "georgexu99",
        "comment_body": "can we add a blurb explaining when/how window states are saved (ie. on move/resize) and provide users with more context",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1916344093",
    "pr_number": 44947,
    "pr_file": "docs/api/command-line-switches.md",
    "created_at": "2025-01-15T10:49:36+00:00",
    "commented_code": "The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1916344093",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T10:49:36+00:00",
        "comment_author": "codebytere",
        "comment_body": "The wording here is a bit unclear - can we clean it up a little bit? Also, I don't think we should reference an arbitrary list on another website as it can quickly get out of date. We could potentially instead link to [Chromium's flag metadata page](https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/flag-metadata.json)?\r\n\r\n```suggestion\r\nThere isn't a documented list of all Chromium switches, but there are a few ways to find them.\r\n\r\nThe easiest way is through Chromium's flags page, which you can access at `about://flags`. These flags don't directly match switch names, but they show up in the process's command-line arguments.\r\n\r\nTo see these arguments, enable a flag in` about://flags`, then go to about://version` in Chromium.  There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\r\n\r\nMost flags are included as part of `--enable-features=`, but some are standalone switches, like `--enable-experimental-web-platform-features`.\r\n\r\nKeep in mind that standalone switches can sometimes be split into individual features, so there's no fully complete list of switches.\r\n\r\nFinally, you'll need to ensure make sure the version of Chromium in Electron matches the version of the browser you're using to cross-reference the flags.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1916377887",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T11:14:36+00:00",
        "comment_author": "ThaUnknown",
        "comment_body": "> through Google Chrome's flags\r\n\r\nI don't agree with this, I bet there will be some account or chrome related flags which don't exist in chromium, but do in chrome, and by relation dont exist in electron",
        "pr_file_module": null
      },
      {
        "comment_id": "1916378744",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T11:15:21+00:00",
        "comment_author": "ThaUnknown",
        "comment_body": "> including something like\r\n\r\nintroduces ambiguity, this is unnecessary, as this is consistent, not a \"maybe\"",
        "pr_file_module": null
      },
      {
        "comment_id": "1916379804",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T11:16:12+00:00",
        "comment_author": "codebytere",
        "comment_body": "@ThaUnknown you're correct, that was an error on my part. I've corrected it in my suggestion.",
        "pr_file_module": null
      },
      {
        "comment_id": "1916383156",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T11:18:47+00:00",
        "comment_author": "ThaUnknown",
        "comment_body": "I agree my wording is.... incosistent, as I tried to keep it in impersonal form, but the suggested edit is also quite... inconsistent?\r\n\r\nI added the \"3rd party website\" at the suggestion of another electron org member, I also don't believe it should be there.",
        "pr_file_module": null
      },
      {
        "comment_id": "1916402008",
        "repo_full_name": "electron/electron",
        "pr_number": 44947,
        "pr_file": "docs/api/command-line-switches.md",
        "discussion_id": "1916344093",
        "commented_code": "@@ -313,6 +313,20 @@ Set the default value of the `verbatim` parameter in the Node.js [`dns.lookup()`\n \n The default is `verbatim` and `dns.setDefaultResultOrder()` have higher priority than `--dns-result-order`.\n \n+## Chromium Flags\n+\n+While a list of all available Chromium switches doesn't exist, there are a few ways of discovering them.\n+\n+The easiest method is Chromium's flags, via `about://flags`, while those flags don't translate 1:1 to their switch names, they are listed in the process's Command Line argument.\n+\n+You can enable a flag, then navigate to `about://version` in your Chromium browser, where you can find the list of Command Line arguments. There you can find `--flag-switches-begin --your --list --of --switches --flag-switches-end`.\n+\n+While most flags are an argument to `--enable-features=`, some are standalone, such as `--enable-experimental-web-platform-features` some of which can be found at https://peter.sh/experiments/chromium-command-line-switches/. That list however is not version locked and non-exhaustive.\n+\n+Do note that many standalone switches can be split up into individual features, so this list is non-exhaustive as well.\n+\n+While adding Chromium switches, make sure the Chromium version of Electron and the browser you're discovering said flags on are the same.",
        "comment_created_at": "2025-01-15T11:33:40+00:00",
        "comment_author": "ThaUnknown",
        "comment_body": "@codebytere how about this? it's still not exactly what you suggested, I think people might be confused by the \"flags vs switches\", flags are switches but switches arent flags, there's no list of all switches, but there is a list of flags... for example --inspect-port is a switch, but not a flag",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1685641450",
    "pr_number": 42953,
    "pr_file": "docs/api/web-contents.md",
    "created_at": "2024-07-21T05:07:06+00:00",
    "commented_code": "Returns:\n \n-* `event` Event\n+* `details` Event\\<\\>\n+  * `texture` [OffscreenSharedTexture](structures/offscreen-shared-texture.md) (optional) _Experimental_ - The GPU shared texture of the frame, when `webPreferences.offscreenUseSharedTexture` is `true`.\n * `dirtyRect` [Rectangle](structures/rectangle.md)\n * `image` [NativeImage](native-image.md) - The image data of the whole frame.\n \n-Emitted when a new frame is generated. Only the dirty area is passed in the\n-buffer.\n+Emitted when a new frame is generated. Only the dirty area is passed in the buffer.\n+\n+When using shared texture, it is possible to pass texture to other processes through IPC, or handle the event in async handler.\n+It is important to call `texture.release()` when the texture is no longer needed as soon as possible, before the underlying\n+frame pool is drained. By managing the lifecycle by yourself, you can safely pass the `texture.textureInfo` to other processes.\n \n ```js\n const { BrowserWindow } = require('electron')\n \n-const win = new BrowserWindow({ webPreferences: { offscreen: true } })\n-win.webContents.on('paint', (event, dirty, image) => {\n-  // updateBitmap(dirty, image.getBitmap())\n+const win = new BrowserWindow({ webPreferences: { offscreen: true, offscreenUseSharedTexture: true } })\n+win.webContents.on('paint', async (e, dirty, image) => {\n+  if (e.texture) {\n+    // You can handle the event in async handler\n+    await new Promise(resolve => setTimeout(resolve, 50))\n+    // importTextureHandle(dirty, e.texture.textureInfo)\n+    // You can also pass the `textureInfo` to other processes (not `texture`, the `release` function is not passable)\n+    // You have to release the texture at this process when you are done with it\n+    e.texture.release()\n+  } else {\n+    // details.texture will be null when offscreenUseSharedTexture is false\n+    // importBitmap(dirty, image.getBitmap())\n+  }",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1685641450",
        "repo_full_name": "electron/electron",
        "pr_number": 42953,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "1685641450",
        "commented_code": "@@ -869,19 +869,33 @@ app.whenReady().then(() => {\n \n Returns:\n \n-* `event` Event\n+* `details` Event\\<\\>\n+  * `texture` [OffscreenSharedTexture](structures/offscreen-shared-texture.md) (optional) _Experimental_ - The GPU shared texture of the frame, when `webPreferences.offscreenUseSharedTexture` is `true`.\n * `dirtyRect` [Rectangle](structures/rectangle.md)\n * `image` [NativeImage](native-image.md) - The image data of the whole frame.\n \n-Emitted when a new frame is generated. Only the dirty area is passed in the\n-buffer.\n+Emitted when a new frame is generated. Only the dirty area is passed in the buffer.\n+\n+When using shared texture, it is possible to pass texture to other processes through IPC, or handle the event in async handler.\n+It is important to call `texture.release()` when the texture is no longer needed as soon as possible, before the underlying\n+frame pool is drained. By managing the lifecycle by yourself, you can safely pass the `texture.textureInfo` to other processes.\n \n ```js\n const { BrowserWindow } = require('electron')\n \n-const win = new BrowserWindow({ webPreferences: { offscreen: true } })\n-win.webContents.on('paint', (event, dirty, image) => {\n-  // updateBitmap(dirty, image.getBitmap())\n+const win = new BrowserWindow({ webPreferences: { offscreen: true, offscreenUseSharedTexture: true } })\n+win.webContents.on('paint', async (e, dirty, image) => {\n+  if (e.texture) {\n+    // You can handle the event in async handler\n+    await new Promise(resolve => setTimeout(resolve, 50))\n+    // importTextureHandle(dirty, e.texture.textureInfo)\n+    // You can also pass the `textureInfo` to other processes (not `texture`, the `release` function is not passable)\n+    // You have to release the texture at this process when you are done with it\n+    e.texture.release()\n+  } else {\n+    // details.texture will be null when offscreenUseSharedTexture is false\n+    // importBitmap(dirty, image.getBitmap())\n+  }",
        "comment_created_at": "2024-07-21T05:07:06+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "I think it might make sense to split up these two examples. First the existing example, then one for when `offscreenUseSharedTexture` is enabled. Most applications will choose either one or the other so having the code separate might be more intuitive.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058826686",
    "pr_number": 46760,
    "pr_file": "docs/api/image-view.md",
    "created_at": "2025-04-24T16:25:22+00:00",
    "commented_code": "+# ImageView\n+\n+> A View that displays an image.\n+\n+Process: [Main](../glossary.md#main-process)\n+\n+This module cannot be used until the `ready` event of the `app`\n+module is emitted.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2058826686",
        "repo_full_name": "electron/electron",
        "pr_number": 46760,
        "pr_file": "docs/api/image-view.md",
        "discussion_id": "2058826686",
        "commented_code": "@@ -0,0 +1,53 @@\n+# ImageView\n+\n+> A View that displays an image.\n+\n+Process: [Main](../glossary.md#main-process)\n+\n+This module cannot be used until the `ready` event of the `app`\n+module is emitted.",
        "comment_created_at": "2025-04-24T16:25:22+00:00",
        "comment_author": "nikwen",
        "comment_body": "```suggestion\r\nmodule is emitted.\r\n\r\nUseful for showing splash screens that will be swapped for `WebContentsView`s\r\nwhen the content finishes loading.\r\n```\r\n\r\nI think it would be useful to document why someone would use an `ImageView`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1945244673",
    "pr_number": 45433,
    "pr_file": "docs/api/navigation-history.md",
    "created_at": "2025-02-06T18:38:06+00:00",
    "commented_code": "#### `navigationHistory.getAllEntries()`\n \n Returns [`NavigationEntry[]`](structures/navigation-entry.md) - WebContents complete history.\n+\n+#### `navigationHistory.restore(index, entries)`\n+\n+Restores navigation history. Will make a best effort to restore not just the navigation stack but\n+also the state of the individual pages - for instance including HTML form values or the scroll\n+position. It's recommended to call this API before any navigation entries are created, so ideally\n+before you call `loadURL()` or `loadFile()` on the `webContents` object.\n+\n+This API allows you to create common flows that aim to restore, recreate, or clone other webContents.\n+\n+* `offset` Integer\n+* `entries` [NavigationEntry[]](structures/navigation-entry.md)",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1945244673",
        "repo_full_name": "electron/electron",
        "pr_number": 45433,
        "pr_file": "docs/api/navigation-history.md",
        "discussion_id": "1945244673",
        "commented_code": "@@ -74,3 +74,20 @@ Returns `boolean` - Whether the navigation entry was removed from the webContent\n #### `navigationHistory.getAllEntries()`\n \n Returns [`NavigationEntry[]`](structures/navigation-entry.md) - WebContents complete history.\n+\n+#### `navigationHistory.restore(index, entries)`\n+\n+Restores navigation history. Will make a best effort to restore not just the navigation stack but\n+also the state of the individual pages - for instance including HTML form values or the scroll\n+position. It's recommended to call this API before any navigation entries are created, so ideally\n+before you call `loadURL()` or `loadFile()` on the `webContents` object.\n+\n+This API allows you to create common flows that aim to restore, recreate, or clone other webContents.\n+\n+* `offset` Integer\n+* `entries` [NavigationEntry[]](structures/navigation-entry.md)",
        "comment_created_at": "2025-02-06T18:38:06+00:00",
        "comment_author": "erickzhao",
        "comment_body": "We should clarify in the usage examples that we usually grab these by storing the result of some previous `getAllEntries()` call.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "971347885",
    "pr_number": 34418,
    "pr_file": "docs/api/web-contents.md",
    "created_at": "2022-09-14T22:25:56+00:00",
    "commented_code": "Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `details` Object\n+  * `isMainFrame` boolean\n+  * `frame` WebFrameMain\n+\n+Emitted when a user or the page wants to start navigation in any frame. It can happen when\n+the `window.location` object is changed or a user clicks a link in the page.\n+\n+Unlike `will-navigate`, `will-frame-navigate` is fired when the main frame or any of its subframes attempts to navigate. When the navigation event comes from the main frame, `isMainFrame` will be `true`.\n+\n+This event will not emit when the navigation is started programmatically with\n+APIs like `webContents.loadURL` and `webContents.back`.\n+\n+It is also not emitted for in-page navigations, such as clicking anchor links\n+or updating the `window.location.hash`. Use `did-navigate-in-page` event for\n+this purpose.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "971347885",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "971347885",
        "commented_code": "@@ -207,6 +207,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `details` Object\n+  * `isMainFrame` boolean\n+  * `frame` WebFrameMain\n+\n+Emitted when a user or the page wants to start navigation in any frame. It can happen when\n+the `window.location` object is changed or a user clicks a link in the page.\n+\n+Unlike `will-navigate`, `will-frame-navigate` is fired when the main frame or any of its subframes attempts to navigate. When the navigation event comes from the main frame, `isMainFrame` will be `true`.\n+\n+This event will not emit when the navigation is started programmatically with\n+APIs like `webContents.loadURL` and `webContents.back`.\n+\n+It is also not emitted for in-page navigations, such as clicking anchor links\n+or updating the `window.location.hash`. Use `did-navigate-in-page` event for\n+this purpose.",
        "comment_created_at": "2022-09-14T22:25:56+00:00",
        "comment_author": "ckerr",
        "comment_body": "I feel like an app developer is going to need to know about & understand the nuances between `did-navigate-in-page`, `will-navigate`, and `will-frame-navigate` now. Maybe there should be a standalone section that discusses this so that all  three events can link to that in the documentation?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1854561033",
    "pr_number": 44787,
    "pr_file": "docs/api/auto-updater.md",
    "created_at": "2024-11-22T19:42:46+00:00",
    "commented_code": "### Event: 'checking-for-update'\n \n-Emitted when checking if an update has started.\n+Emitted when checking if an update is available has started.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1854561033",
        "repo_full_name": "electron/electron",
        "pr_number": 44787,
        "pr_file": "docs/api/auto-updater.md",
        "discussion_id": "1854561033",
        "commented_code": "@@ -68,7 +68,7 @@ Emitted when there is an error while updating.\n \n ### Event: 'checking-for-update'\n \n-Emitted when checking if an update has started.\n+Emitted when checking if an update is available has started.",
        "comment_created_at": "2024-11-22T19:42:46+00:00",
        "comment_author": "VerteDinde",
        "comment_body": "Not trying to bikeshed too much, but I think this wording is still a little confusing. What do you think of?:\r\n```suggestion\r\nEmitted when checking for an available update has started.\r\n```\r\n\r\nI like clarifying the check is for available updates and not for updating itself though \ud83d\ude42 ",
        "pr_file_module": null
      },
      {
        "comment_id": "1854564040",
        "repo_full_name": "electron/electron",
        "pr_number": 44787,
        "pr_file": "docs/api/auto-updater.md",
        "discussion_id": "1854561033",
        "commented_code": "@@ -68,7 +68,7 @@ Emitted when there is an error while updating.\n \n ### Event: 'checking-for-update'\n \n-Emitted when checking if an update has started.\n+Emitted when checking if an update is available has started.",
        "comment_created_at": "2024-11-22T19:45:50+00:00",
        "comment_author": "nikwen",
        "comment_body": "Works for me! I see what you mean. Thanks for the comment!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1840080402",
    "pr_number": 44598,
    "pr_file": "docs/api/base-window.md",
    "created_at": "2024-11-13T11:23:24+00:00",
    "commented_code": "Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` Event\n+* `reasons` string[]",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1840080402",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "docs/api/base-window.md",
        "discussion_id": "1840080402",
        "commented_code": "@@ -144,10 +144,27 @@ _**Note**: There is a subtle difference between the behaviors of `window.onbefor\n Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` Event\n+* `reasons` string[]",
        "comment_created_at": "2024-11-13T11:23:24+00:00",
        "comment_author": "codebytere",
        "comment_body": "These reasons should be explicitly documented, and we should also link likely to https://learn.microsoft.com/en-us/windows/win32/shutdown/wm-queryendsession beneath the description of the event.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1840083912",
    "pr_number": 44598,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2024-11-13T11:26:16+00:00",
    "commented_code": "Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` Event\n+* `reasons` string[]\n+\n+Emitted when window session is going to end due to shutdown, machine\n+restart or session log off. Calling `event.preventDefault()` will delay\n+system shutdown, however it's not recommended, because it's a good practice to\n+respect user's choice. You can use it if user is risking to lose data.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1840083912",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1840083912",
        "commented_code": "@@ -207,10 +207,27 @@ _**Note**: There is a subtle difference between the behaviors of `window.onbefor\n Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` Event\n+* `reasons` string[]\n+\n+Emitted when window session is going to end due to shutdown, machine\n+restart or session log off. Calling `event.preventDefault()` will delay\n+system shutdown, however it's not recommended, because it's a good practice to\n+respect user's choice. You can use it if user is risking to lose data.",
        "comment_created_at": "2024-11-13T11:26:16+00:00",
        "comment_author": "codebytere",
        "comment_body": "For clarity/flow, this should be reworded to something more like:\r\n```suggestion\r\nEmitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling `event.preventDefault(`) can delay the system shutdown, though it\u2019s generally best to respect the user\u2019s choice to end the session. However, you may choose to use it if ending the session puts the user at risk of losing data.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848546853",
    "pr_number": 44598,
    "pr_file": "docs/api/base-window.md",
    "created_at": "2024-11-19T15:12:24+00:00",
    "commented_code": "Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when a session is about to end due to a shutdown, machine restart, or user log-off.\n+Calling `event.preventDefault()` can delay the system shutdown, though it\u2019s generally best\n+to respect the user\u2019s choice to end the session. However, you may choose to use it if\n+ending the session puts the user at risk of losing data.\n+\n #### Event: 'session-end' _Windows_\n \n-Emitted when window session is going to end due to force shutdown or machine restart\n-or session log off.\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when system is in the process of shutting down after successfully handling 'query-session-end' event.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1848546853",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "docs/api/base-window.md",
        "discussion_id": "1848546853",
        "commented_code": "@@ -144,10 +144,24 @@ _**Note**: There is a subtle difference between the behaviors of `window.onbefor\n Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when a session is about to end due to a shutdown, machine restart, or user log-off.\n+Calling `event.preventDefault()` can delay the system shutdown, though it\u2019s generally best\n+to respect the user\u2019s choice to end the session. However, you may choose to use it if\n+ending the session puts the user at risk of losing data.\n+\n #### Event: 'session-end' _Windows_\n \n-Emitted when window session is going to end due to force shutdown or machine restart\n-or session log off.\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when system is in the process of shutting down after successfully handling 'query-session-end' event.",
        "comment_created_at": "2024-11-19T15:12:24+00:00",
        "comment_author": "itsananderson",
        "comment_body": "Wording suggestion. \"after successfully handling\" doesn't seem quite right, because the user can still force a shutdown even if you `event.preventDefault()` the `query-session-end` event.\r\n\r\n```suggestion\r\nEmitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event fires, there is no way to prevent the session from ending.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1848547161",
    "pr_number": 44598,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2024-11-19T15:12:33+00:00",
    "commented_code": "Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when a session is about to end due to a shutdown, machine restart, or user log-off.\n+Calling `event.preventDefault()` can delay the system shutdown, though it\u2019s generally best\n+to respect the user\u2019s choice to end the session. However, you may choose to use it if\n+ending the session puts the user at risk of losing data.\n+\n #### Event: 'session-end' _Windows_\n \n-Emitted when window session is going to end due to force shutdown or machine restart\n-or session log off.\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when system is in the process of shutting down after successfully handling 'query-session-end' event.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1848547161",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1848547161",
        "commented_code": "@@ -207,10 +207,24 @@ _**Note**: There is a subtle difference between the behaviors of `window.onbefor\n Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when a session is about to end due to a shutdown, machine restart, or user log-off.\n+Calling `event.preventDefault()` can delay the system shutdown, though it\u2019s generally best\n+to respect the user\u2019s choice to end the session. However, you may choose to use it if\n+ending the session puts the user at risk of losing data.\n+\n #### Event: 'session-end' _Windows_\n \n-Emitted when window session is going to end due to force shutdown or machine restart\n-or session log off.\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when system is in the process of shutting down after successfully handling 'query-session-end' event.",
        "comment_created_at": "2024-11-19T15:12:33+00:00",
        "comment_author": "itsananderson",
        "comment_body": "Wording suggestion\r\n\r\n```suggestion\r\nEmitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event fires, there is no way to prevent the session from ending.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1848577266",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1848547161",
        "commented_code": "@@ -207,10 +207,24 @@ _**Note**: There is a subtle difference between the behaviors of `window.onbefor\n Emitted when the window is closed. After you have received this event you should\n remove the reference to the window and avoid using it any more.\n \n+#### Event: 'query-session-end' _Windows_\n+\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when a session is about to end due to a shutdown, machine restart, or user log-off.\n+Calling `event.preventDefault()` can delay the system shutdown, though it\u2019s generally best\n+to respect the user\u2019s choice to end the session. However, you may choose to use it if\n+ending the session puts the user at risk of losing data.\n+\n #### Event: 'session-end' _Windows_\n \n-Emitted when window session is going to end due to force shutdown or machine restart\n-or session log off.\n+Returns:\n+\n+* `event` [WindowSessionEndEvent][window-session-end-event]\n+\n+Emitted when system is in the process of shutting down after successfully handling 'query-session-end' event.",
        "comment_created_at": "2024-11-19T15:28:23+00:00",
        "comment_author": "savely-krasovsky",
        "comment_body": "Thanks for the suggesion, looks definitely better. Commited changes.",
        "pr_file_module": null
      }
    ]
  }
]