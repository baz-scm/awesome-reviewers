[
  {
    "discussion_id": "2226273298",
    "pr_number": 47819,
    "pr_file": ".github/workflows/pipeline-segment-electron-test.yml",
    "created_at": "2025-07-23T17:53:49+00:00",
    "commented_code": "CHROMIUM_GIT_COOKIE_WINDOWS_STRING: ${{ secrets.CHROMIUM_GIT_COOKIE_WINDOWS_STRING }}\n   ELECTRON_OUT_DIR: Default\n   ELECTRON_RBE_JWT: ${{ secrets.ELECTRON_RBE_JWT }}\n+  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2226273298",
        "repo_full_name": "electron/electron",
        "pr_number": 47819,
        "pr_file": ".github/workflows/pipeline-segment-electron-test.yml",
        "discussion_id": "2226273298",
        "commented_code": "@@ -40,6 +40,7 @@ env:\n   CHROMIUM_GIT_COOKIE_WINDOWS_STRING: ${{ secrets.CHROMIUM_GIT_COOKIE_WINDOWS_STRING }}\n   ELECTRON_OUT_DIR: Default\n   ELECTRON_RBE_JWT: ${{ secrets.ELECTRON_RBE_JWT }}\n+  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}",
        "comment_created_at": "2025-07-23T17:53:49+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "This is going to enable debugging for **all** pipelines, instead of just one. I think this secret should be a branch name or something so that the check is `current_branch == secrets.debug_branch_name` or something.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844957438",
    "pr_number": 44679,
    "pr_file": ".github/workflows/issue-opened.yml",
    "created_at": "2024-11-16T11:04:50+00:00",
    "commented_code": "const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1844957438",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-16T11:04:50+00:00",
        "comment_author": "nikwen",
        "comment_body": "```suggestion\r\n                    labels.push(versionLabel);\r\n\r\n                    // Prevent excessive tags / tag spam\r\n                    if (labels.length >= 5) {\r\n                      break;\r\n                    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1845650010",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-17T21:06:58+00:00",
        "comment_author": "codebytere",
        "comment_body": "Our supported versions cap at 4, so I don't think we'd ever end up with too many!",
        "pr_file_module": null
      },
      {
        "comment_id": "1845651816",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-17T21:10:01+00:00",
        "comment_author": "nikwen",
        "comment_body": "~Ah, Great! \ud83d\udc4d~",
        "pr_file_module": null
      },
      {
        "comment_id": "1845654884",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-17T21:21:38+00:00",
        "comment_author": "nikwen",
        "comment_body": "Looking at the code, all versions seem to be added as tags, no matter if supported or not.\r\n\r\nJust if there's at least one unsupported version, the `blocked/need-info \u274c` label will get added.\r\n\r\nSo I think a cap could still make sense.\r\n\r\nPotential future improvement: Add the `blocked/need-info \u274c` label only if no supported version is listed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1846127192",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-18T09:04:06+00:00",
        "comment_author": "codebytere",
        "comment_body": "Oh yeah i see what you mean now - missed that! Yes, I agree - i think we should add all labels that are supported (inherently capping at ~4), and `blocked/need-info \u274c` if none are.",
        "pr_file_module": null
      },
      {
        "comment_id": "1846136545",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-18T09:10:30+00:00",
        "comment_author": "codebytere",
        "comment_body": "Done in [58dd5f1](https://github.com/electron/electron/pull/44679/commits/58dd5f18961c373d5279ee6e4d2f3a801c5976f5)",
        "pr_file_module": null
      },
      {
        "comment_id": "1846430127",
        "repo_full_name": "electron/electron",
        "pr_number": 44679,
        "pr_file": ".github/workflows/issue-opened.yml",
        "discussion_id": "1844957438",
        "commented_code": "@@ -57,32 +57,37 @@ jobs:\n \n             const electronVersion = select('heading:has(> text[value=\"Electron Version\"]) + paragraph > text', tree)?.value.trim();\n             if (electronVersion !== undefined) {\n-              const major = semver.parse(electronVersion)?.major;\n-              if (major) {\n-                const versionLabel = `${major}-x-y`;\n-                let labelExists = false;\n-\n-                try {\n-                  await github.rest.issues.getLabel({\n-                    owner,\n-                    repo,\n-                    name: versionLabel,\n-                  });\n-                  labelExists = true;\n-                } catch {}\n-\n-                if (labelExists) {\n-                  // Check if it's an unsupported major\n-                  const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n-                  const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n-\n-                  const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n-                  if (!validVersions.includes(major)) {\n-                    core.setOutput('unsupportedMajor', true);\n-                    labels.push('blocked/need-info \u274c');\n+              // It's possible for multiple versions to be listed -\n+              // for now check for comma or space separated version.\n+              const versions = electronVersion.split(/, | /);\n+              for (const version of versions) {\n+                const major = semver.parse(version)?.major;\n+                if (major) {\n+                  const versionLabel = `${major}-x-y`;\n+                  let labelExists = false;\n+\n+                  try {\n+                    await github.rest.issues.getLabel({\n+                      owner,\n+                      repo,\n+                      name: versionLabel,\n+                    });\n+                    labelExists = true;\n+                  } catch {}\n+\n+                  if (labelExists) {\n+                    // Check if it's an unsupported major\n+                    const { ElectronVersions } = await import('${{ github.workspace }}/node_modules/@electron/fiddle-core/dist/index.js');\n+                    const versions = await ElectronVersions.create(undefined, { ignoreCache: true });\n+\n+                    const validVersions = [...versions.supportedMajors, ...versions.prereleaseMajors];\n+                    if (!validVersions.includes(major)) {\n+                      core.setOutput('unsupportedMajor', true);\n+                      labels.push('blocked/need-info \u274c');\n+                    }\n+\n+                    labels.push(versionLabel);",
        "comment_created_at": "2024-11-18T11:31:02+00:00",
        "comment_author": "nikwen",
        "comment_body": "That works for me. Thanks!\r\n\r\nBenefit: If someone opens an issue and adds an outdated version number, then updates it, the issue will no longer forever be stuck with an `17-x-y` version label.",
        "pr_file_module": null
      }
    ]
  }
]