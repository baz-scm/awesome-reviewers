[
  {
    "discussion_id": "2183313289",
    "pr_number": 47628,
    "pr_file": "shell/common/api/electron_bindings.cc",
    "created_at": "2025-07-03T17:17:15+00:00",
    "commented_code": "#endif\n   dict.Set(\"free\", free);\n \n+#if BUILDFLAG(IS_MAC)\n+  dict.Set(\"cached\", mem_info.file_backed);",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2183313289",
        "repo_full_name": "electron/electron",
        "pr_number": 47628,
        "pr_file": "shell/common/api/electron_bindings.cc",
        "discussion_id": "2183313289",
        "commented_code": "@@ -183,8 +183,11 @@ v8::Local<v8::Value> ElectronBindings::GetSystemMemoryInfo(\n #endif\n   dict.Set(\"free\", free);\n \n+#if BUILDFLAG(IS_MAC)\n+  dict.Set(\"cached\", mem_info.file_backed);",
        "comment_created_at": "2025-07-03T17:17:15+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Should this be named `fileBacked` instead? I see another property named `cached` and want to make sure this won't conflict in the future.\r\nhttps://source.chromium.org/chromium/chromium/src/+/main:base/process/process_metrics.h;l=365;drc=17b4c42cfb3512836655464b0d41d319e819c0b6",
        "pr_file_module": null
      },
      {
        "comment_id": "2184074828",
        "repo_full_name": "electron/electron",
        "pr_number": 47628,
        "pr_file": "shell/common/api/electron_bindings.cc",
        "discussion_id": "2183313289",
        "commented_code": "@@ -183,8 +183,11 @@ v8::Local<v8::Value> ElectronBindings::GetSystemMemoryInfo(\n #endif\n   dict.Set(\"free\", free);\n \n+#if BUILDFLAG(IS_MAC)\n+  dict.Set(\"cached\", mem_info.file_backed);",
        "comment_created_at": "2025-07-04T01:18:49+00:00",
        "comment_author": "cucbin",
        "comment_body": "Yes, this field name might be better, I have considered using this name before.\r\nOriginally I wanted to make the name of this field consistent with what is displayed in the Activity Monitor.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167732788",
    "pr_number": 47569,
    "pr_file": "shell/browser/browser_win.cc",
    "created_at": "2025-06-25T22:16:17+00:00",
    "commented_code": "// attempt to update launch_item.enabled if there is a matching key\n         // value entry in the StartupApproved registry\n+        const HKEY scope_key =\n+            scope == L\"user\" ? HKEY_CURRENT_USER : HKEY_LOCAL_MACHINE;\n         HKEY hkey;\n-        // StartupApproved registry path\n-        LPCTSTR path = TEXT(\n-            \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\StartupApp\"",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2167732788",
        "repo_full_name": "electron/electron",
        "pr_number": 47569,
        "pr_file": "shell/browser/browser_win.cc",
        "discussion_id": "2167732788",
        "commented_code": "@@ -193,19 +202,11 @@ std::vector<LaunchItem> GetLoginItemSettingsHelper(\n \n         // attempt to update launch_item.enabled if there is a matching key\n         // value entry in the StartupApproved registry\n+        const HKEY scope_key =\n+            scope == L\"user\" ? HKEY_CURRENT_USER : HKEY_LOCAL_MACHINE;\n         HKEY hkey;\n-        // StartupApproved registry path\n-        LPCTSTR path = TEXT(\n-            \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\StartupApp\"",
        "comment_created_at": "2025-06-25T22:16:17+00:00",
        "comment_author": "ckerr",
        "comment_body": "Note: keys are case-insensitive. The old value of `SOFTWARE\\Foo\\Bar` here is inconsistent with the other code in the file that used `Software\\Foo\\Bar` instead, but it's functionally equivalent.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1993586658",
    "pr_number": 46004,
    "pr_file": "shell/common/api/electron_api_command_line.cc",
    "created_at": "2025-03-13T13:57:04+00:00",
    "commented_code": "namespace {\n \n-bool HasSwitch(const std::string& name) {\n-  return base::CommandLine::ForCurrentProcess()->HasSwitch(name);\n+// Chromium will hard CHECK if the switch name is not lowercase.\n+bool IsSwitchNameValid(std::string_view switch_name) {\n+  return base::ToLowerASCII(switch_name) == switch_name;\n }",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1993586658",
        "repo_full_name": "electron/electron",
        "pr_number": 46004,
        "pr_file": "shell/common/api/electron_api_command_line.cc",
        "discussion_id": "1993586658",
        "commented_code": "@@ -12,18 +13,40 @@\n \n namespace {\n \n-bool HasSwitch(const std::string& name) {\n-  return base::CommandLine::ForCurrentProcess()->HasSwitch(name);\n+// Chromium will hard CHECK if the switch name is not lowercase.\n+bool IsSwitchNameValid(std::string_view switch_name) {\n+  return base::ToLowerASCII(switch_name) == switch_name;\n }",
        "comment_created_at": "2025-03-13T13:57:04+00:00",
        "comment_author": "ckerr",
        "comment_body": "Couplea suggestions here:\r\n\r\n- It's better to put the \"Switch name must be lowercase\" idea here so that the other methods don't have to know what this function's internal logic is\r\n- We can test for lowercase without making a new `std::string`\r\n\r\n\r\n```suggestion\r\nstd::optional<std::string_view> CheckSwitchNameValid(std::string_view key) {\r\n  // Chromium will hard CHECK if the switch name is not lowercase.\r\n  if (!std::ranges::none_of(key, absl::ascii_isupper))\r\n    return \"Switch name must be lowercase\";\r\n\r\n  return {};\r\n }\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1993595418",
        "repo_full_name": "electron/electron",
        "pr_number": 46004,
        "pr_file": "shell/common/api/electron_api_command_line.cc",
        "discussion_id": "1993586658",
        "commented_code": "@@ -12,18 +13,40 @@\n \n namespace {\n \n-bool HasSwitch(const std::string& name) {\n-  return base::CommandLine::ForCurrentProcess()->HasSwitch(name);\n+// Chromium will hard CHECK if the switch name is not lowercase.\n+bool IsSwitchNameValid(std::string_view switch_name) {\n+  return base::ToLowerASCII(switch_name) == switch_name;\n }",
        "comment_created_at": "2025-03-13T14:00:49+00:00",
        "comment_author": "codebytere",
        "comment_body": "@ckerr fwiw I copied that helper from upstream for direct parity: https://source.chromium.org/chromium/chromium/src/+/main:base/command_line.cc;l=68-70?q=%22bool%20IsSwitchNameValid(st%22&sq=package:chromium\r\n\r\nHappy to do this though, I agree it's a little cleaner!",
        "pr_file_module": null
      },
      {
        "comment_id": "1993603987",
        "repo_full_name": "electron/electron",
        "pr_number": 46004,
        "pr_file": "shell/common/api/electron_api_command_line.cc",
        "discussion_id": "1993586658",
        "commented_code": "@@ -12,18 +13,40 @@\n \n namespace {\n \n-bool HasSwitch(const std::string& name) {\n-  return base::CommandLine::ForCurrentProcess()->HasSwitch(name);\n+// Chromium will hard CHECK if the switch name is not lowercase.\n+bool IsSwitchNameValid(std::string_view switch_name) {\n+  return base::ToLowerASCII(switch_name) == switch_name;\n }",
        "comment_created_at": "2025-03-13T14:04:54+00:00",
        "comment_author": "ckerr",
        "comment_body": "Either way is fine. I agree upstream parity is important, regardless of the code :smile_cat: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1840085434",
    "pr_number": 44598,
    "pr_file": "shell/browser/api/electron_api_base_window.cc",
    "created_at": "2024-11-13T11:27:31+00:00",
    "commented_code": "FROM_HERE, GetDestroyClosure());\n }\n \n-void BaseWindow::OnWindowEndSession() {\n-  Emit(\"session-end\");\n+void BaseWindow::OnWindowQueryEndSession(const std::vector<std::string> reason,\n+                                         bool* prevent_default) {\n+  if (Emit(\"query-session-end\", reason)) {\n+    *prevent_default = true;\n+  }\n+}\n+\n+void BaseWindow::OnWindowEndSession(const std::vector<std::string> reason) {",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1840085434",
        "repo_full_name": "electron/electron",
        "pr_number": 44598,
        "pr_file": "shell/browser/api/electron_api_base_window.cc",
        "discussion_id": "1840085434",
        "commented_code": "@@ -177,8 +177,15 @@ void BaseWindow::OnWindowClosed() {\n       FROM_HERE, GetDestroyClosure());\n }\n \n-void BaseWindow::OnWindowEndSession() {\n-  Emit(\"session-end\");\n+void BaseWindow::OnWindowQueryEndSession(const std::vector<std::string> reason,\n+                                         bool* prevent_default) {\n+  if (Emit(\"query-session-end\", reason)) {\n+    *prevent_default = true;\n+  }\n+}\n+\n+void BaseWindow::OnWindowEndSession(const std::vector<std::string> reason) {",
        "comment_created_at": "2024-11-13T11:27:31+00:00",
        "comment_author": "codebytere",
        "comment_body": "nit: the variable name should be plural as this is a list of potential reasons\r\n\r\n```suggestion\r\nvoid BaseWindow::OnWindowEndSession(const std::vector<std::string> reasons) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1826251137",
    "pr_number": 44498,
    "pr_file": "shell/common/options_switches.h",
    "created_at": "2024-11-01T20:07:12+00:00",
    "commented_code": "#ifndef ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n #define ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n \n-#include \"electron/buildflags/buildflags.h\"\n+#include <string_view>\n+\n+#include \"base/strings/cstring_view.h\"\n \n namespace electron {\n \n namespace options {\n \n-extern const char kTitle[];\n-extern const char kIcon[];\n-extern const char kFrame[];\n-extern const char kShow[];\n-extern const char kCenter[];\n-extern const char kX[];\n-extern const char kY[];\n-extern const char kWidth[];\n-extern const char kHeight[];\n-extern const char kMinWidth[];\n-extern const char kMinHeight[];\n-extern const char kMaxWidth[];\n-extern const char kMaxHeight[];\n-extern const char kResizable[];\n-extern const char kMovable[];\n-extern const char kMinimizable[];\n-extern const char kMaximizable[];\n-extern const char kFullScreenable[];\n-extern const char kClosable[];\n-extern const char kHiddenInMissionControl[];\n-extern const char kFullscreen[];\n-extern const char kSkipTaskbar[];\n-extern const char kKiosk[];\n-extern const char kSimpleFullScreen[];\n-extern const char kAlwaysOnTop[];\n-extern const char kAcceptFirstMouse[];\n-extern const char kUseContentSize[];\n-extern const char kZoomToPageWidth[];\n-extern const char kTitleBarStyle[];\n-extern const char kTabbingIdentifier[];\n-extern const char kAutoHideMenuBar[];\n-extern const char kEnableLargerThanScreen[];\n-extern const char kDarkTheme[];\n-extern const char kTransparent[];\n-extern const char kType[];\n-extern const char kDisableAutoHideCursor[];\n-extern const char kBackgroundColor[];\n-extern const char kHasShadow[];\n-extern const char kOpacity[];\n-extern const char kFocusable[];\n-extern const char kWebPreferences[];\n-extern const char kVibrancyType[];\n-extern const char kBackgroundMaterial[];\n-extern const char kVisualEffectState[];\n-extern const char kTrafficLightPosition[];\n-extern const char kRoundedCorners[];\n-extern const char ktitleBarOverlay[];\n-extern const char kOverlayButtonColor[];\n-extern const char kOverlaySymbolColor[];\n-extern const char kOverlayHeight[];\n-\n-// WebPreferences.\n-extern const char kZoomFactor[];\n-extern const char kPreloadScript[];\n-extern const char kNodeIntegration[];\n-extern const char kContextIsolation[];\n-extern const char kExperimentalFeatures[];\n-extern const char kScrollBounce[];\n-extern const char kEnableBlinkFeatures[];\n-extern const char kDisableBlinkFeatures[];\n-extern const char kNodeIntegrationInWorker[];\n-extern const char kWebviewTag[];\n-extern const char kCustomArgs[];\n-extern const char kPlugins[];\n-extern const char kSandbox[];\n-extern const char kWebSecurity[];\n-extern const char kAllowRunningInsecureContent[];\n-extern const char kOffscreen[];\n-extern const char kUseSharedTexture[];\n-extern const char kNodeIntegrationInSubFrames[];\n-extern const char kDisableHtmlFullscreenWindowResize[];\n-extern const char kJavaScript[];\n-extern const char kImages[];\n-extern const char kTextAreasAreResizable[];\n-extern const char kWebGL[];\n-extern const char kNavigateOnDragDrop[];\n-extern const char kEnablePreferredSizeMode[];\n-\n-extern const char kHiddenPage[];\n-\n-#if BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER)\n-extern const char kSpellcheck[];\n-#endif\n+inline constexpr std::string_view kTitle = \"title\";\n+inline constexpr std::string_view kIcon = \"icon\";\n+inline constexpr std::string_view kFrame = \"frame\";\n+inline constexpr std::string_view kShow = \"show\";\n+inline constexpr std::string_view kCenter = \"center\";\n+inline constexpr std::string_view kX = \"x\";\n+inline constexpr std::string_view kY = \"y\";\n+inline constexpr std::string_view kWidth = \"width\";\n+inline constexpr std::string_view kHeight = \"height\";\n+inline constexpr std::string_view kMinWidth = \"minWidth\";\n+inline constexpr std::string_view kMinHeight = \"minHeight\";\n+inline constexpr std::string_view kMaxWidth = \"maxWidth\";\n+inline constexpr std::string_view kMaxHeight = \"maxHeight\";\n+inline constexpr std::string_view kResizable = \"resizable\";\n+inline constexpr std::string_view kMovable = \"movable\";\n+inline constexpr std::string_view kMinimizable = \"minimizable\";\n+inline constexpr std::string_view kMaximizable = \"maximizable\";\n+inline constexpr std::string_view kFullScreenable = \"fullscreenable\";\n+inline constexpr std::string_view kClosable = \"closable\";\n+\n+// whether to keep the window out of mission control\n+inline constexpr std::string_view kHiddenInMissionControl =\n+    \"hiddenInMissionControl\";\n+\n+inline constexpr std::string_view kFullscreen = \"fullscreen\";\n+\n+// Whether the window should show in taskbar.\n+inline constexpr std::string_view kSkipTaskbar = \"skipTaskbar\";\n+\n+// Start with the kiosk mode, see Opera's page for description:\n+// http://www.opera.com/support/mastering/kiosk/\n+inline constexpr std::string_view kKiosk = \"kiosk\";\n+\n+inline constexpr std::string_view kSimpleFullScreen = \"simpleFullscreen\";",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1826251137",
        "repo_full_name": "electron/electron",
        "pr_number": 44498,
        "pr_file": "shell/common/options_switches.h",
        "discussion_id": "1826251137",
        "commented_code": "@@ -5,127 +5,289 @@\n #ifndef ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n #define ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n \n-#include \"electron/buildflags/buildflags.h\"\n+#include <string_view>\n+\n+#include \"base/strings/cstring_view.h\"\n \n namespace electron {\n \n namespace options {\n \n-extern const char kTitle[];\n-extern const char kIcon[];\n-extern const char kFrame[];\n-extern const char kShow[];\n-extern const char kCenter[];\n-extern const char kX[];\n-extern const char kY[];\n-extern const char kWidth[];\n-extern const char kHeight[];\n-extern const char kMinWidth[];\n-extern const char kMinHeight[];\n-extern const char kMaxWidth[];\n-extern const char kMaxHeight[];\n-extern const char kResizable[];\n-extern const char kMovable[];\n-extern const char kMinimizable[];\n-extern const char kMaximizable[];\n-extern const char kFullScreenable[];\n-extern const char kClosable[];\n-extern const char kHiddenInMissionControl[];\n-extern const char kFullscreen[];\n-extern const char kSkipTaskbar[];\n-extern const char kKiosk[];\n-extern const char kSimpleFullScreen[];\n-extern const char kAlwaysOnTop[];\n-extern const char kAcceptFirstMouse[];\n-extern const char kUseContentSize[];\n-extern const char kZoomToPageWidth[];\n-extern const char kTitleBarStyle[];\n-extern const char kTabbingIdentifier[];\n-extern const char kAutoHideMenuBar[];\n-extern const char kEnableLargerThanScreen[];\n-extern const char kDarkTheme[];\n-extern const char kTransparent[];\n-extern const char kType[];\n-extern const char kDisableAutoHideCursor[];\n-extern const char kBackgroundColor[];\n-extern const char kHasShadow[];\n-extern const char kOpacity[];\n-extern const char kFocusable[];\n-extern const char kWebPreferences[];\n-extern const char kVibrancyType[];\n-extern const char kBackgroundMaterial[];\n-extern const char kVisualEffectState[];\n-extern const char kTrafficLightPosition[];\n-extern const char kRoundedCorners[];\n-extern const char ktitleBarOverlay[];\n-extern const char kOverlayButtonColor[];\n-extern const char kOverlaySymbolColor[];\n-extern const char kOverlayHeight[];\n-\n-// WebPreferences.\n-extern const char kZoomFactor[];\n-extern const char kPreloadScript[];\n-extern const char kNodeIntegration[];\n-extern const char kContextIsolation[];\n-extern const char kExperimentalFeatures[];\n-extern const char kScrollBounce[];\n-extern const char kEnableBlinkFeatures[];\n-extern const char kDisableBlinkFeatures[];\n-extern const char kNodeIntegrationInWorker[];\n-extern const char kWebviewTag[];\n-extern const char kCustomArgs[];\n-extern const char kPlugins[];\n-extern const char kSandbox[];\n-extern const char kWebSecurity[];\n-extern const char kAllowRunningInsecureContent[];\n-extern const char kOffscreen[];\n-extern const char kUseSharedTexture[];\n-extern const char kNodeIntegrationInSubFrames[];\n-extern const char kDisableHtmlFullscreenWindowResize[];\n-extern const char kJavaScript[];\n-extern const char kImages[];\n-extern const char kTextAreasAreResizable[];\n-extern const char kWebGL[];\n-extern const char kNavigateOnDragDrop[];\n-extern const char kEnablePreferredSizeMode[];\n-\n-extern const char kHiddenPage[];\n-\n-#if BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER)\n-extern const char kSpellcheck[];\n-#endif\n+inline constexpr std::string_view kTitle = \"title\";\n+inline constexpr std::string_view kIcon = \"icon\";\n+inline constexpr std::string_view kFrame = \"frame\";\n+inline constexpr std::string_view kShow = \"show\";\n+inline constexpr std::string_view kCenter = \"center\";\n+inline constexpr std::string_view kX = \"x\";\n+inline constexpr std::string_view kY = \"y\";\n+inline constexpr std::string_view kWidth = \"width\";\n+inline constexpr std::string_view kHeight = \"height\";\n+inline constexpr std::string_view kMinWidth = \"minWidth\";\n+inline constexpr std::string_view kMinHeight = \"minHeight\";\n+inline constexpr std::string_view kMaxWidth = \"maxWidth\";\n+inline constexpr std::string_view kMaxHeight = \"maxHeight\";\n+inline constexpr std::string_view kResizable = \"resizable\";\n+inline constexpr std::string_view kMovable = \"movable\";\n+inline constexpr std::string_view kMinimizable = \"minimizable\";\n+inline constexpr std::string_view kMaximizable = \"maximizable\";\n+inline constexpr std::string_view kFullScreenable = \"fullscreenable\";\n+inline constexpr std::string_view kClosable = \"closable\";\n+\n+// whether to keep the window out of mission control\n+inline constexpr std::string_view kHiddenInMissionControl =\n+    \"hiddenInMissionControl\";\n+\n+inline constexpr std::string_view kFullscreen = \"fullscreen\";\n+\n+// Whether the window should show in taskbar.\n+inline constexpr std::string_view kSkipTaskbar = \"skipTaskbar\";\n+\n+// Start with the kiosk mode, see Opera's page for description:\n+// http://www.opera.com/support/mastering/kiosk/\n+inline constexpr std::string_view kKiosk = \"kiosk\";\n+\n+inline constexpr std::string_view kSimpleFullScreen = \"simpleFullscreen\";",
        "comment_created_at": "2024-11-01T20:07:12+00:00",
        "comment_author": "mlaurencin",
        "comment_body": "Is it possible to have the casing of kFullscreen and kSimpleFullScreen (and their subsequently set strings) be more in line with one another? So either kFullscreen and kSimpleFullscreen, or kFullScreen and kSimpleFullScreen.",
        "pr_file_module": null
      },
      {
        "comment_id": "1827903264",
        "repo_full_name": "electron/electron",
        "pr_number": 44498,
        "pr_file": "shell/common/options_switches.h",
        "discussion_id": "1826251137",
        "commented_code": "@@ -5,127 +5,289 @@\n #ifndef ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n #define ELECTRON_SHELL_COMMON_OPTIONS_SWITCHES_H_\n \n-#include \"electron/buildflags/buildflags.h\"\n+#include <string_view>\n+\n+#include \"base/strings/cstring_view.h\"\n \n namespace electron {\n \n namespace options {\n \n-extern const char kTitle[];\n-extern const char kIcon[];\n-extern const char kFrame[];\n-extern const char kShow[];\n-extern const char kCenter[];\n-extern const char kX[];\n-extern const char kY[];\n-extern const char kWidth[];\n-extern const char kHeight[];\n-extern const char kMinWidth[];\n-extern const char kMinHeight[];\n-extern const char kMaxWidth[];\n-extern const char kMaxHeight[];\n-extern const char kResizable[];\n-extern const char kMovable[];\n-extern const char kMinimizable[];\n-extern const char kMaximizable[];\n-extern const char kFullScreenable[];\n-extern const char kClosable[];\n-extern const char kHiddenInMissionControl[];\n-extern const char kFullscreen[];\n-extern const char kSkipTaskbar[];\n-extern const char kKiosk[];\n-extern const char kSimpleFullScreen[];\n-extern const char kAlwaysOnTop[];\n-extern const char kAcceptFirstMouse[];\n-extern const char kUseContentSize[];\n-extern const char kZoomToPageWidth[];\n-extern const char kTitleBarStyle[];\n-extern const char kTabbingIdentifier[];\n-extern const char kAutoHideMenuBar[];\n-extern const char kEnableLargerThanScreen[];\n-extern const char kDarkTheme[];\n-extern const char kTransparent[];\n-extern const char kType[];\n-extern const char kDisableAutoHideCursor[];\n-extern const char kBackgroundColor[];\n-extern const char kHasShadow[];\n-extern const char kOpacity[];\n-extern const char kFocusable[];\n-extern const char kWebPreferences[];\n-extern const char kVibrancyType[];\n-extern const char kBackgroundMaterial[];\n-extern const char kVisualEffectState[];\n-extern const char kTrafficLightPosition[];\n-extern const char kRoundedCorners[];\n-extern const char ktitleBarOverlay[];\n-extern const char kOverlayButtonColor[];\n-extern const char kOverlaySymbolColor[];\n-extern const char kOverlayHeight[];\n-\n-// WebPreferences.\n-extern const char kZoomFactor[];\n-extern const char kPreloadScript[];\n-extern const char kNodeIntegration[];\n-extern const char kContextIsolation[];\n-extern const char kExperimentalFeatures[];\n-extern const char kScrollBounce[];\n-extern const char kEnableBlinkFeatures[];\n-extern const char kDisableBlinkFeatures[];\n-extern const char kNodeIntegrationInWorker[];\n-extern const char kWebviewTag[];\n-extern const char kCustomArgs[];\n-extern const char kPlugins[];\n-extern const char kSandbox[];\n-extern const char kWebSecurity[];\n-extern const char kAllowRunningInsecureContent[];\n-extern const char kOffscreen[];\n-extern const char kUseSharedTexture[];\n-extern const char kNodeIntegrationInSubFrames[];\n-extern const char kDisableHtmlFullscreenWindowResize[];\n-extern const char kJavaScript[];\n-extern const char kImages[];\n-extern const char kTextAreasAreResizable[];\n-extern const char kWebGL[];\n-extern const char kNavigateOnDragDrop[];\n-extern const char kEnablePreferredSizeMode[];\n-\n-extern const char kHiddenPage[];\n-\n-#if BUILDFLAG(ENABLE_BUILTIN_SPELLCHECKER)\n-extern const char kSpellcheck[];\n-#endif\n+inline constexpr std::string_view kTitle = \"title\";\n+inline constexpr std::string_view kIcon = \"icon\";\n+inline constexpr std::string_view kFrame = \"frame\";\n+inline constexpr std::string_view kShow = \"show\";\n+inline constexpr std::string_view kCenter = \"center\";\n+inline constexpr std::string_view kX = \"x\";\n+inline constexpr std::string_view kY = \"y\";\n+inline constexpr std::string_view kWidth = \"width\";\n+inline constexpr std::string_view kHeight = \"height\";\n+inline constexpr std::string_view kMinWidth = \"minWidth\";\n+inline constexpr std::string_view kMinHeight = \"minHeight\";\n+inline constexpr std::string_view kMaxWidth = \"maxWidth\";\n+inline constexpr std::string_view kMaxHeight = \"maxHeight\";\n+inline constexpr std::string_view kResizable = \"resizable\";\n+inline constexpr std::string_view kMovable = \"movable\";\n+inline constexpr std::string_view kMinimizable = \"minimizable\";\n+inline constexpr std::string_view kMaximizable = \"maximizable\";\n+inline constexpr std::string_view kFullScreenable = \"fullscreenable\";\n+inline constexpr std::string_view kClosable = \"closable\";\n+\n+// whether to keep the window out of mission control\n+inline constexpr std::string_view kHiddenInMissionControl =\n+    \"hiddenInMissionControl\";\n+\n+inline constexpr std::string_view kFullscreen = \"fullscreen\";\n+\n+// Whether the window should show in taskbar.\n+inline constexpr std::string_view kSkipTaskbar = \"skipTaskbar\";\n+\n+// Start with the kiosk mode, see Opera's page for description:\n+// http://www.opera.com/support/mastering/kiosk/\n+inline constexpr std::string_view kKiosk = \"kiosk\";\n+\n+inline constexpr std::string_view kSimpleFullScreen = \"simpleFullscreen\";",
        "comment_created_at": "2024-11-04T15:15:58+00:00",
        "comment_author": "ckerr",
        "comment_body": "Yes.  Chromium uses \"Fullscreen\" as one word; so  we should, too. Nice catch! That's been in there for years since ba5fa2c8b1a98278dce864d525036add0bba4d3a without anyone noticing!\r\n\r\nUpdated in 46ce0640d1a7416638087d39dd37e2db46095b24",
        "pr_file_module": null
      }
    ]
  }
]