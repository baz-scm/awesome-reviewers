[
  {
    "discussion_id": "2173564301",
    "pr_number": 47425,
    "pr_file": "docs/api/structures/window-state-restore-options.md",
    "created_at": "2025-06-29T00:58:23+00:00",
    "commented_code": "+# WindowStateRestoreOptions Object\n+\n+* `stateId` string - A unique identifier used for saving and restoring window state.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2173564301",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "docs/api/structures/window-state-restore-options.md",
        "discussion_id": "2173564301",
        "commented_code": "@@ -0,0 +1,3 @@\n+# WindowStateRestoreOptions Object\n+\n+* `stateId` string - A unique identifier used for saving and restoring window state.",
        "comment_created_at": "2025-06-29T00:58:23+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "Can we make this something more friendly, don't change immediately this is meant to start a discussion thread here.\r\n\r\nI'd be in favour of just a generic `BaseWindow` constructor option for a window \"name\" which we can document as a unique identifier that apps can use to identify windows, and Electron can use internally for things like this state persistance.\r\n\r\nThen change this options object to be just `enabled: true/false`.\r\n\r\nApologies if this option has already been discussed or bikeshed elsewhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "2174434363",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "docs/api/structures/window-state-restore-options.md",
        "discussion_id": "2173564301",
        "commented_code": "@@ -0,0 +1,3 @@\n+# WindowStateRestoreOptions Object\n+\n+* `stateId` string - A unique identifier used for saving and restoring window state.",
        "comment_created_at": "2025-06-30T07:42:32+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "@erickzhao interested in your opinions here",
        "pr_file_module": null
      },
      {
        "comment_id": "2178957202",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "docs/api/structures/window-state-restore-options.md",
        "discussion_id": "2173564301",
        "commented_code": "@@ -0,0 +1,3 @@\n+# WindowStateRestoreOptions Object\n+\n+* `stateId` string - A unique identifier used for saving and restoring window state.",
        "comment_created_at": "2025-07-02T04:03:15+00:00",
        "comment_author": "nilayarya",
        "comment_body": "> I'd be in favour of just a generic `BaseWindow` constructor option for a window \"name\" which we can document as a unique identifier that apps can use to identify windows, and Electron can use internally for things like this state persistance.\r\n\r\nMakes sense! Moving \"name\" out helps future-proof things.\r\n\r\n> Then change this options object to be just `enabled: true/false`.\r\n\r\nWe could have it take either boolean/object to let this behavior be configurable.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2185784942",
        "repo_full_name": "electron/electron",
        "pr_number": 47425,
        "pr_file": "docs/api/structures/window-state-restore-options.md",
        "discussion_id": "2173564301",
        "commented_code": "@@ -0,0 +1,3 @@\n+# WindowStateRestoreOptions Object\n+\n+* `stateId` string - A unique identifier used for saving and restoring window state.",
        "comment_created_at": "2025-07-04T16:58:07+00:00",
        "comment_author": "erickzhao",
        "comment_body": "Yeah, I'm a fan of `name` as a top-level thing \ud83d\udc4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1702202462",
    "pr_number": 42953,
    "pr_file": "docs/api/structures/web-preferences.md",
    "created_at": "2024-08-02T18:47:37+00:00",
    "commented_code": "window. Defaults to `false`. See the\n   [offscreen rendering tutorial](../../tutorial/offscreen-rendering.md) for\n   more details.\n+* `offscreenUseSharedTexture` boolean (optional) _Experimental_ - Whether to use GPU shared texture for accelerated",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1702202462",
        "repo_full_name": "electron/electron",
        "pr_number": 42953,
        "pr_file": "docs/api/structures/web-preferences.md",
        "discussion_id": "1702202462",
        "commented_code": "@@ -83,6 +83,10 @@\n   window. Defaults to `false`. See the\n   [offscreen rendering tutorial](../../tutorial/offscreen-rendering.md) for\n   more details.\n+* `offscreenUseSharedTexture` boolean (optional) _Experimental_ - Whether to use GPU shared texture for accelerated",
        "comment_created_at": "2024-08-02T18:47:37+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Since we haven't introduced new options for offscreen rendering prior to this PR, we're thinking of changing the `offscreen` property itself to accept an object or boolean.\r\n\r\n* `offscreen` Object | Boolean (optional)\r\n   * `useSharedTexture` boolean (optional) _Experimental_ - Whether to use GPU shared texture for accelerated color.\r\n\r\nThis would allow for future options to more easily be added.\r\n\r\nWe have precedence for this with the [`titleBarOverlay`](https://www.electronjs.org/docs/latest/api/browser-window#:~:text=titleBarOverlay%20Object%20%7C%20Boolean) options if you're looking for a code reference.\r\n\r\nhttps://github.com/electron/electron/blob/5b18cc46bc4ef293a5cfe54c52b94447bd7dc11c/shell/browser/native_window.cc#L111-L125",
        "pr_file_module": null
      },
      {
        "comment_id": "1702204825",
        "repo_full_name": "electron/electron",
        "pr_number": 42953,
        "pr_file": "docs/api/structures/web-preferences.md",
        "discussion_id": "1702202462",
        "commented_code": "@@ -83,6 +83,10 @@\n   window. Defaults to `false`. See the\n   [offscreen rendering tutorial](../../tutorial/offscreen-rendering.md) for\n   more details.\n+* `offscreenUseSharedTexture` boolean (optional) _Experimental_ - Whether to use GPU shared texture for accelerated",
        "comment_created_at": "2024-08-02T18:49:41+00:00",
        "comment_author": "reitowo",
        "comment_body": "Good idea!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1843073596",
    "pr_number": 44411,
    "pr_file": "docs/api/context-bridge.md",
    "created_at": "2024-11-15T01:21:35+00:00",
    "commented_code": "* `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `evaluationScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to evaluate. This function will be serialized which means\n+      that any bound parameters and execution context will be lost.\n+  * `args` any[] (optional) - The arguments to pass to the provided function. These arguments must\n+      be JSON-serializable.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1843073596",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1843073596",
        "commented_code": "@@ -61,6 +61,19 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `evaluationScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to evaluate. This function will be serialized which means\n+      that any bound parameters and execution context will be lost.\n+  * `args` any[] (optional) - The arguments to pass to the provided function. These arguments must\n+      be JSON-serializable.",
        "comment_created_at": "2024-11-15T01:21:35+00:00",
        "comment_author": "itsananderson",
        "comment_body": "I've been trying to think of a scenario where it'd be backward incompatible to initially implementing this with JSON and then later using `contextBridge` to send the values, but unless someone explicitly relied on an argument *not* JSON serializing well, I think it should be fine to start with JSON serialization and enhance it later.",
        "pr_file_module": null
      },
      {
        "comment_id": "1845704945",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1843073596",
        "commented_code": "@@ -61,6 +61,19 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `evaluationScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to evaluate. This function will be serialized which means\n+      that any bound parameters and execution context will be lost.\n+  * `args` any[] (optional) - The arguments to pass to the provided function. These arguments must\n+      be JSON-serializable.",
        "comment_created_at": "2024-11-18T00:14:18+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "I should be able to give the context-bridged arguments a try so I'll update how that goes soon enough. Since it's an experimental API though, I think it's safe if we have to alter its behavior.",
        "pr_file_module": null
      },
      {
        "comment_id": "1861352640",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1843073596",
        "commented_code": "@@ -61,6 +61,19 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `evaluationScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to evaluate. This function will be serialized which means\n+      that any bound parameters and execution context will be lost.\n+  * `args` any[] (optional) - The arguments to pass to the provided function. These arguments must\n+      be JSON-serializable.",
        "comment_created_at": "2024-11-27T23:51:23+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Proxied arguments are now implemented in https://github.com/electron/electron/pull/44411/commits/7200ef9eee2b9e97ef73809f7be8268d40b211fb which removes the JSON-serializable limitation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1861363268",
    "pr_number": 44411,
    "pr_file": "docs/api/context-bridge.md",
    "created_at": "2024-11-28T00:14:17+00:00",
    "commented_code": "* `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.executeInMainWorld(executionScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `executionScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to execute. This function will be serialized which means",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1861363268",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1861363268",
        "commented_code": "@@ -61,6 +61,20 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.executeInMainWorld(executionScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `executionScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to execute. This function will be serialized which means",
        "comment_created_at": "2024-11-28T00:14:17+00:00",
        "comment_author": "MarshallOfSound",
        "comment_body": "Is the `func` naming here consistent with something else? We can't use `function` because _reserved_ but I think this could be a case where matching `spawn(thing, args)` might be nice. E.g. `exec(fn, args, { ...opts })`",
        "pr_file_module": null
      },
      {
        "comment_id": "1863994755",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1861363268",
        "commented_code": "@@ -61,6 +61,20 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n+### `contextBridge.executeInMainWorld(executionScript)` _Experimental_\n+\n+<!-- TODO(samuelmaddock): add generics to map the `args` types to the `func` params  -->\n+\n+* `executionScript` Object\n+  * `func` (...args: any[]) => any - A JavaScript function to execute. This function will be serialized which means",
        "comment_created_at": "2024-11-29T23:41:06+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "This is consistent with the Chrome extension's [ScriptInjection struct](https://developer.chrome.com/docs/extensions/reference/api/scripting#type-ScriptInjection) from `chrome.scripting.executeScript`. I chose to accept an object to also allow this to be easier to [extend in the future.](https://github.com/electron/governance/blob/main/wg-api/best-practices.md#how-will-this-api-be-extended-in-the-future) As an example, we could add a `useGesture` property if it became necessary.\r\n\r\nPlaywright's [page.evaluate](https://playwright.dev/docs/api/class-page#page-evaluate) is similar to your suggestion except it uses variadic arguments. We'll want to consider extra options though so that's probably not the best.\r\n\r\n[ControlledFrame also support script injection.](https://wicg.github.io/controlled-frame/#dom-controlledframe-executescript) It supports an object with `code` and `file` properties.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "477798648",
    "pr_number": 25128,
    "pr_file": "docs/api/web-contents.md",
    "created_at": "2020-08-27T00:42:53+00:00",
    "commented_code": "Emitted when the navigation is done, i.e. the spinner of the tab has stopped\n spinning, and the `onload` event was dispatched.\n \n+#### Event: 'will-fail-load'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isInPlace` Boolean\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer\n+* `errorCode` Integer\n+* `errorDescription` String\n+\n+This event will be emitted after `did-start-loading` and always before the\n+`did-fail-load` event for the same navigation.\n+\n+Settings `event.returnValue` to an HTML string will result in a custom error page being",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "477798648",
        "repo_full_name": "electron/electron",
        "pr_number": 25128,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "477798648",
        "commented_code": "@@ -57,6 +57,25 @@ Process: [Main](../glossary.md#main-process)\n Emitted when the navigation is done, i.e. the spinner of the tab has stopped\n spinning, and the `onload` event was dispatched.\n \n+#### Event: 'will-fail-load'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isInPlace` Boolean\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer\n+* `errorCode` Integer\n+* `errorDescription` String\n+\n+This event will be emitted after `did-start-loading` and always before the\n+`did-fail-load` event for the same navigation.\n+\n+Settings `event.returnValue` to an HTML string will result in a custom error page being",
        "comment_created_at": "2020-08-27T00:42:53+00:00",
        "comment_author": "zcbenz",
        "comment_body": "Since this API is essentially a wrapper of `NavigationThrottle`, I wonder if it would be more future proof by returning an Object instead:\r\n\r\n```js\r\n{ action: 'cancel', error: errorCode, errorPage: 'html' }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "969832456",
    "pr_number": 34466,
    "pr_file": "docs/api/structures/message-dialog-details.md",
    "created_at": "2022-09-13T16:14:44+00:00",
    "commented_code": "+# MessageDialogDetails Object\n+\n+* `type` string - Can be `alert` or `confirm`.\n+* `message` string - Dialog message text.\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "969832456",
        "repo_full_name": "electron/electron",
        "pr_number": 34466,
        "pr_file": "docs/api/structures/message-dialog-details.md",
        "discussion_id": "969832456",
        "commented_code": "@@ -0,0 +1,6 @@\n+# MessageDialogDetails Object\n+\n+* `type` string - Can be `alert` or `confirm`.\n+* `message` string - Dialog message text.\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-09-13T16:14:44+00:00",
        "comment_author": "nornagon",
        "comment_body": "We should expose a `WebFrameMain` reference here instead of the IDs; see the `context-menu` event which passes a `frame` parameter.",
        "pr_file_module": null
      },
      {
        "comment_id": "1009954908",
        "repo_full_name": "electron/electron",
        "pr_number": 34466,
        "pr_file": "docs/api/structures/message-dialog-details.md",
        "discussion_id": "969832456",
        "commented_code": "@@ -0,0 +1,6 @@\n+# MessageDialogDetails Object\n+\n+* `type` string - Can be `alert` or `confirm`.\n+* `message` string - Dialog message text.\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-10-31T23:32:10+00:00",
        "comment_author": "nornagon",
        "comment_body": "This comment seems unaddressed.",
        "pr_file_module": null
      },
      {
        "comment_id": "1057936259",
        "repo_full_name": "electron/electron",
        "pr_number": 34466,
        "pr_file": "docs/api/structures/message-dialog-details.md",
        "discussion_id": "969832456",
        "commented_code": "@@ -0,0 +1,6 @@\n+# MessageDialogDetails Object\n+\n+* `type` string - Can be `alert` or `confirm`.\n+* `message` string - Dialog message text.\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-12-27T22:09:55+00:00",
        "comment_author": "vitekcerny",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "888094650",
    "pr_number": 34418,
    "pr_file": "docs/api/web-contents.md",
    "created_at": "2022-06-02T15:38:06+00:00",
    "commented_code": "Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "888094650",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-02T15:38:06+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "The design of the `will-navigate` API was arguably an extensibility mistake. I wonder whether we should be repeating the same here. Our API design best practices goes over this: https://github.com/electron/governance/blob/main/wg-api/best-practices.md#how-will-this-api-be-extended-in-the-future\r\n\r\nI'd like to start a discussion as to whether we should break from consistency and instead make this an extensible design.\r\n```ts\r\ninterface WebContents {\r\n  on(eventName: 'will-frame-navigate', (e: Event, details: WillNavigateDetails) => void); \r\n}\r\n\r\ninterface WillNavigateDetails {\r\n  url: string;\r\n  frame: WebFrameMain;\r\n};\r\n```\r\n\r\nUsing an instance of `WebFrameMain` would provide each of the frame-specific details.",
        "pr_file_module": null
      },
      {
        "comment_id": "888098261",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-02T15:40:32+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "The downside of this approach is that `WebFrameMain` would not be available in the renderer for the `<webview>`'s equivalent event. I thought we had a solution for this with another event which @miniak fixed, do you recall what that was?",
        "pr_file_module": null
      },
      {
        "comment_id": "890376403",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-06T17:33:39+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Following up here, I think I'd be comfortable with an API like the following:\r\n```ts\r\ninterface WebContents {\r\n  on(eventName: 'will-frame-navigate', (e: Event, url: string, details: WillFrameNavigateDetails) => void); \r\n}\r\n\r\ninterface WillFrameNavigateDetails {\r\n  frame: WebFrameMain;\r\n};\r\n```\r\n\r\nThis way we can extend details in the future while keeping it similar to the \"will-navigate\" event.",
        "pr_file_module": null
      },
      {
        "comment_id": "890447734",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-06T18:58:27+00:00",
        "comment_author": "itsananderson",
        "comment_body": "I like the idea of keeping the URL as a positional parameter for consistency. What if we kept the `WillFrameNavigateDetails` object similar to the parameters of other navigation events, just as an object rather than positional args? That way it could still have the same shape for `<webview>`, and it's easy to enough to use `webFrameMain.fromId` to retrieve the actual `WebFrameMain` object.\r\n\r\n```typescript\r\ninterface WebContents {\r\n  on(eventName: 'will-frame-navigate', (e: Event, url: string, details: WillFrameNavigateDetails) => void); \r\n}\r\n\r\ninterface WillFrameNavigateDetails {\r\n  isMainFrame: boolean;\r\n  frameProcessId: number;\r\n  frameRoutingId: number;\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "896049068",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-13T19:11:08+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Would it be possible to transform the details before emitting on the `<webview>`? I'm fine with keeping the originally proposed API on the webview since WebFrameMain isn't available there anyway.",
        "pr_file_module": null
      },
      {
        "comment_id": "896078053",
        "repo_full_name": "electron/electron",
        "pr_number": 34418,
        "pr_file": "docs/api/web-contents.md",
        "discussion_id": "888094650",
        "commented_code": "@@ -265,6 +265,30 @@ this purpose.\n \n Calling `event.preventDefault()` will prevent the navigation.\n \n+#### Event: 'will-frame-navigate'\n+\n+Returns:\n+\n+* `event` Event\n+* `url` String\n+* `isMainFrame` Boolean\n+* `frameProcessId` Integer\n+* `frameRoutingId` Integer",
        "comment_created_at": "2022-06-13T19:48:59+00:00",
        "comment_author": "itsananderson",
        "comment_body": "I'll take a look. It was easy to just forward parameters by adding an entry in `web-view-events.ts` but I can dig around under the hood and see if I can do a more custom transformation instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "993310473",
    "pr_number": 35987,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2022-10-12T11:00:10+00:00",
    "commented_code": "Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, animate])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `animate` boolean (optional)",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "993310473",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "993310473",
        "commented_code": "@@ -1810,14 +1810,16 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, animate])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `animate` boolean (optional)",
        "comment_created_at": "2022-10-12T11:00:10+00:00",
        "comment_author": "zcbenz",
        "comment_body": "An options object might be better since there are lots of other vibrancy related things that could be added in future.",
        "pr_file_module": null
      },
      {
        "comment_id": "993514092",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "993310473",
        "commented_code": "@@ -1810,14 +1810,16 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, animate])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `animate` boolean (optional)",
        "comment_created_at": "2022-10-12T14:06:53+00:00",
        "comment_author": "jkleinsc",
        "comment_body": "I agree with @zcbenz.  This should be an options object for future proofing.",
        "pr_file_module": null
      },
      {
        "comment_id": "1021596158",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "993310473",
        "commented_code": "@@ -1810,14 +1810,16 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, animate])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `animate` boolean (optional)",
        "comment_created_at": "2022-11-14T14:16:39+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "refactored API to use options object",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1021884663",
    "pr_number": 35987,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2022-11-14T17:55:26+00:00",
    "commented_code": "Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in seconds.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1021884663",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1021884663",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in seconds.",
        "comment_created_at": "2022-11-14T17:55:26+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "As far as I know, this is the first introduction of an API accepting a unit of time in Electron. I think it would be best to use milliseconds\u2014as commonly used in DOM APIs\u2014and possibly update our [best practices guidelines](https://github.com/electron/governance/blob/main/wg-api/best-practices.md) to reflect this.",
        "pr_file_module": null
      },
      {
        "comment_id": "1022567456",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1021884663",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in seconds.",
        "comment_created_at": "2022-11-15T09:46:47+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "got it, refactored to milliseconds",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1023243670",
    "pr_number": 35987,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2022-11-15T20:47:14+00:00",
    "commented_code": "Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1023243670",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1023243670",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.",
        "comment_created_at": "2022-11-15T20:47:14+00:00",
        "comment_author": "nornagon",
        "comment_body": "Perhaps this could be consolidated?\r\n```suggestion\r\n  * `animationDuration` number (optional) - if nonzero, the change to vibrancy will be animated over the given duration (in milliseconds).\r\n```\r\n\r\nThis allows us not to specify any default duration.",
        "pr_file_module": null
      },
      {
        "comment_id": "1045280160",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1023243670",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.",
        "comment_created_at": "2022-12-11T18:49:14+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "[fixed](https://github.com/electron/electron/pull/35987/commits/310ca9f9516497f81849c4ae56afbb19f8805213)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1023244115",
    "pr_number": 35987,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2022-11-15T20:47:44+00:00",
    "commented_code": "Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.\n \n Adds a vibrancy effect to the browser window. Passing `null` or an empty string\n-will remove the vibrancy effect on the window.\n+will remove the vibrancy effect on the window. The `animate` parameter only\n+animates fading in or fading out the vibrancy effect not between types of vibrancy.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1023244115",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1023244115",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.\n \n Adds a vibrancy effect to the browser window. Passing `null` or an empty string\n-will remove the vibrancy effect on the window.\n+will remove the vibrancy effect on the window. The `animate` parameter only\n+animates fading in or fading out the vibrancy effect not between types of vibrancy.",
        "comment_created_at": "2022-11-15T20:47:44+00:00",
        "comment_author": "nornagon",
        "comment_body": "```suggestion\r\nanimates fading in or fading out the vibrancy effect. Animating between\r\ndifferent types of vibrancy is not supported.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1045280098",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1023244115",
        "commented_code": "@@ -1821,14 +1821,18 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - The duration of the animation in milliseconds.\n \n Adds a vibrancy effect to the browser window. Passing `null` or an empty string\n-will remove the vibrancy effect on the window.\n+will remove the vibrancy effect on the window. The `animate` parameter only\n+animates fading in or fading out the vibrancy effect not between types of vibrancy.",
        "comment_created_at": "2022-12-11T18:48:45+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "[fixed](https://github.com/electron/electron/pull/35987/commits/310ca9f9516497f81849c4ae56afbb19f8805213)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1046461168",
    "pr_number": 35987,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2022-12-12T22:37:52+00:00",
    "commented_code": "Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - if nonzero, the change to vibrancy will be animated over the given duration (in milliseconds).",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1046461168",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1046461168",
        "commented_code": "@@ -1828,14 +1828,19 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - if nonzero, the change to vibrancy will be animated over the given duration (in milliseconds).",
        "comment_created_at": "2022-12-12T22:37:52+00:00",
        "comment_author": "nornagon",
        "comment_body": "Sorry, I was unclear\u2014I meant to remove the `animate` parameter altogether and take the cue only from whether `animationDuration` is specified and non-zero.",
        "pr_file_module": null
      },
      {
        "comment_id": "1053544122",
        "repo_full_name": "electron/electron",
        "pr_number": 35987,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "1046461168",
        "commented_code": "@@ -1828,14 +1828,19 @@ there is only one tab in the current window.\n \n Adds a window as a tab on this window, after the tab for the window instance.\n \n-#### `win.setVibrancy(type)` _macOS_\n+#### `win.setVibrancy(type[, options])` _macOS_\n \n * `type` string | null - Can be `appearance-based`, `light`, `dark`, `titlebar`,\n   `selection`, `menu`, `popover`, `sidebar`, `medium-light`, `ultra-dark`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`, `tooltip`, `content`, `under-window`, or `under-page`. See\n   the [macOS documentation][vibrancy-docs] for more details.\n+* `options` boolean (optional)\n+  * `animate` boolean (optional) - Whether to animate or not the vibrancy toggle.\n+  * `animationDuration` number (optional) - if nonzero, the change to vibrancy will be animated over the given duration (in milliseconds).",
        "comment_created_at": "2022-12-20T17:00:14+00:00",
        "comment_author": "gerhardberger",
        "comment_body": "makes sense, removed it!",
        "pr_file_module": null
      }
    ]
  }
]