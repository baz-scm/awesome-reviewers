[
  {
    "discussion_id": "2221101761",
    "pr_number": 47838,
    "pr_file": "docs/api/tray.md",
    "created_at": "2025-07-22T04:41:25+00:00",
    "commented_code": "### `new Tray(image, [guid])`\n \n * `image` ([NativeImage](native-image.md) | string)\n-* `guid` string (optional) _Windows_ - Assigns a GUID to the tray icon. If the executable is signed and the signature contains an organization in the subject line then the GUID is permanently associated with that signature. OS level settings like the position of the tray icon in the system tray will persist even if the path to the executable changes. If the executable is not code-signed then the GUID is permanently associated with the path to the executable. Changing the path to the executable will break the creation of the tray icon and a new GUID must be used. However, it is highly recommended to use the GUID parameter only in conjunction with code-signed executable. If an App defines multiple tray icons then each icon must use a separate GUID.\n+* `guid` string (optional) _Windows_ _macOS_ - A unique string used to identify the tray icon.",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "2221101761",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "docs/api/tray.md",
        "discussion_id": "2221101761",
        "commented_code": "@@ -79,7 +79,15 @@ app.whenReady().then(() => {\n ### `new Tray(image, [guid])`\n \n * `image` ([NativeImage](native-image.md) | string)\n-* `guid` string (optional) _Windows_ - Assigns a GUID to the tray icon. If the executable is signed and the signature contains an organization in the subject line then the GUID is permanently associated with that signature. OS level settings like the position of the tray icon in the system tray will persist even if the path to the executable changes. If the executable is not code-signed then the GUID is permanently associated with the path to the executable. Changing the path to the executable will break the creation of the tray icon and a new GUID must be used. However, it is highly recommended to use the GUID parameter only in conjunction with code-signed executable. If an App defines multiple tray icons then each icon must use a separate GUID.\n+* `guid` string (optional) _Windows_ _macOS_ - A unique string used to identify the tray icon.",
        "comment_created_at": "2025-07-22T04:41:25+00:00",
        "comment_author": "itsananderson",
        "comment_body": "Since up until now this has only been a positional parameter, it seems like we could rename the param without introducing a breaking change. I would suggest calling this `identifier`, because a GUID is a specific type of string, and it sounds like only the Windows API specifically requires that the identifier be a GUID.",
        "pr_file_module": null
      },
      {
        "comment_id": "2226990983",
        "repo_full_name": "electron/electron",
        "pr_number": 47838,
        "pr_file": "docs/api/tray.md",
        "discussion_id": "2221101761",
        "commented_code": "@@ -79,7 +79,15 @@ app.whenReady().then(() => {\n ### `new Tray(image, [guid])`\n \n * `image` ([NativeImage](native-image.md) | string)\n-* `guid` string (optional) _Windows_ - Assigns a GUID to the tray icon. If the executable is signed and the signature contains an organization in the subject line then the GUID is permanently associated with that signature. OS level settings like the position of the tray icon in the system tray will persist even if the path to the executable changes. If the executable is not code-signed then the GUID is permanently associated with the path to the executable. Changing the path to the executable will break the creation of the tray icon and a new GUID must be used. However, it is highly recommended to use the GUID parameter only in conjunction with code-signed executable. If an App defines multiple tray icons then each icon must use a separate GUID.\n+* `guid` string (optional) _Windows_ _macOS_ - A unique string used to identify the tray icon.",
        "comment_created_at": "2025-07-24T00:15:48+00:00",
        "comment_author": "erickzhao",
        "comment_body": "Agreed here. On first read, I don't think it was clear that the macOS string can just be a unique string rather than a GUID based on the name.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "568257100",
    "pr_number": 27572,
    "pr_file": "docs/api/browser-window.md",
    "created_at": "2021-02-02T01:22:58+00:00",
    "commented_code": "experimental.\n   * `trafficLightPosition` [Point](structures/point.md) (optional) - Set a\n     custom position for the traffic light buttons in frameless windows.\n+  * `roundedCorner` Boolean (optional) - Whether frameless window should have",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "568257100",
        "repo_full_name": "electron/electron",
        "pr_number": 27572,
        "pr_file": "docs/api/browser-window.md",
        "discussion_id": "568257100",
        "commented_code": "@@ -228,6 +228,8 @@ It creates a new `BrowserWindow` with native properties as set by the `options`.\n       experimental.\n   * `trafficLightPosition` [Point](structures/point.md) (optional) - Set a\n     custom position for the traffic light buttons in frameless windows.\n+  * `roundedCorner` Boolean (optional) - Whether frameless window should have",
        "comment_created_at": "2021-02-02T01:22:58+00:00",
        "comment_author": "miniak",
        "comment_body": "wouldn't `roundedCorners` be a better name?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1844364871",
    "pr_number": 44411,
    "pr_file": "docs/api/context-bridge.md",
    "created_at": "2024-11-15T19:34:25+00:00",
    "commented_code": "* `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n-### `contextBridge.evaluateInMainWorld(code)` _Experimental_\n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_",
    "repo_full_name": "electron/electron",
    "discussion_comments": [
      {
        "comment_id": "1844364871",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1844364871",
        "commented_code": "@@ -61,11 +61,17 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n-### `contextBridge.evaluateInMainWorld(code)` _Experimental_\n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_",
        "comment_created_at": "2024-11-15T19:34:25+00:00",
        "comment_author": "jkleinsc",
        "comment_body": "Should this be called `contextBridge.executeInMainWorld` instead?  Using `evaluate` in the name makes it seem like we are using `eval()`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1845703225",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1844364871",
        "commented_code": "@@ -61,11 +61,17 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n-### `contextBridge.evaluateInMainWorld(code)` _Experimental_\n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_",
        "comment_created_at": "2024-11-18T00:06:52+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Initially I was using [ShadowRealm.prototype.evaluate](https://tc39.es/proposal-shadowrealm/#sec-shadowrealm.prototype.evaluate) as the inspiration for naming.\r\n\r\nI'm open to changing this. Especially since it's been revised to accept func/arg params.\r\n\r\nMaybe executeScriptInMainWorld?",
        "pr_file_module": null
      },
      {
        "comment_id": "1848678321",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1844364871",
        "commented_code": "@@ -61,11 +61,17 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n-### `contextBridge.evaluateInMainWorld(code)` _Experimental_\n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_",
        "comment_created_at": "2024-11-19T16:26:36+00:00",
        "comment_author": "jkleinsc",
        "comment_body": "@samuelmaddock I think that `executeScriptInMainWorld` is fine but a bit long but I don't think its a deal breaker either way.",
        "pr_file_module": null
      },
      {
        "comment_id": "1857789280",
        "repo_full_name": "electron/electron",
        "pr_number": 44411,
        "pr_file": "docs/api/context-bridge.md",
        "discussion_id": "1844364871",
        "commented_code": "@@ -61,11 +61,17 @@ The `contextBridge` module has the following methods:\n * `apiKey` string - The key to inject the API onto `window` with.  The API will be accessible on `window[apiKey]`.\n * `api` any - Your API, more information on what this API can be and how it works is available below.\n \n-### `contextBridge.evaluateInMainWorld(code)` _Experimental_\n+### `contextBridge.evaluateInMainWorld(evaluationScript)` _Experimental_",
        "comment_created_at": "2024-11-26T05:22:23+00:00",
        "comment_author": "samuelmaddock",
        "comment_body": "Renamed in [d014f5c](https://github.com/electron/electron/pull/44411/commits/d014f5c06a602b9f6b62fae118a0f886cbbdb202)",
        "pr_file_module": null
      }
    ]
  }
]