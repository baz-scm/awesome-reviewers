[
  {
    "discussion_id": "647196549",
    "pr_number": 1313,
    "pr_file": "internal/bundler/bundler_dce_test.go",
    "created_at": "2021-06-08T07:45:29+00:00",
    "commented_code": "},\n \t})\n }\n+\n+func TestPackageJsonSideEffectsFalsePluginResolver(t *testing.T) {\n+\tpk2Index := `\n+\t\texport {default as Cmp1} from './cmp1.vue';\n+\t\texport {default as Cmp2} from './cmp2';\n+\t`\n+\n+\ttestPackageJsonSideEffectsFalsePluginResolver(t, pk2Index)\n+}\n+\n+func TestPackageJsonSideEffectsFalseNoPlugins(t *testing.T) {\n+\tpk2Index := `\n+\t\texport {default as Cmp1} from './cmp1';\n+\t\texport {default as Cmp2} from './cmp2';\n+\t`\n+\n+\ttestPackageJsonSideEffectsFalsePluginResolver(t, pk2Index)\n+}\n+\n+func testPackageJsonSideEffectsFalsePluginResolver(t *testing.T, pkg2Index string) {\n+\tt.Helper()\n+\n+\tmockFiles := map[string]string{\n+\t\t\"/Users/user/project/src/entry.js\": `\n+\t\t\timport {Cmp2} from \"demo-pkg2\"\n+\t\t\tconsole.log(Cmp2);\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/cmp1.js\": `\n+\t\t\timport {__decorate} from './helper';\n+\t\t\tlet Something = {}\n+\t\t\t__decorate(Something);\n+\t\t\texport default Something;\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/cmp2.js\": `\n+\t\t\timport {__decorate} from './helper';\n+\t\t\tclass Something2 {}\n+\t\t\t__decorate(Something2);\n+\t\t\texport default Something2;\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/helper.js\": `\n+\t\t\texport function __decorate(s) {\n+\t\t\t}\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/package.json\": `\n+\t\t\t{\n+\t\t\t\t\"sideEffects\": false\n+\t\t\t}\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/index.js\": pkg2Index,\n+\t}\n+\n+\tdce_suite.expectBundled(t, bundled{\n+\t\tfiles:      mockFiles,\n+\t\tentryPaths: []string{\"/Users/user/project/src/entry.js\"},\n+\t\toptions: config.Options{\n+\t\t\tMode:          config.ModeBundle,\n+\t\t\tAbsOutputFile: \"/out.js\",\n+\t\t\tPlugins: []config.Plugin{",
    "repo_full_name": "evanw/esbuild",
    "discussion_comments": [
      {
        "comment_id": "647196549",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 1313,
        "pr_file": "internal/bundler/bundler_dce_test.go",
        "discussion_id": "647196549",
        "commented_code": "@@ -1655,3 +1657,78 @@ func TestTreeShakingInESMWrapper(t *testing.T) {\n \t\t},\n \t})\n }\n+\n+func TestPackageJsonSideEffectsFalsePluginResolver(t *testing.T) {\n+\tpk2Index := `\n+\t\texport {default as Cmp1} from './cmp1.vue';\n+\t\texport {default as Cmp2} from './cmp2';\n+\t`\n+\n+\ttestPackageJsonSideEffectsFalsePluginResolver(t, pk2Index)\n+}\n+\n+func TestPackageJsonSideEffectsFalseNoPlugins(t *testing.T) {\n+\tpk2Index := `\n+\t\texport {default as Cmp1} from './cmp1';\n+\t\texport {default as Cmp2} from './cmp2';\n+\t`\n+\n+\ttestPackageJsonSideEffectsFalsePluginResolver(t, pk2Index)\n+}\n+\n+func testPackageJsonSideEffectsFalsePluginResolver(t *testing.T, pkg2Index string) {\n+\tt.Helper()\n+\n+\tmockFiles := map[string]string{\n+\t\t\"/Users/user/project/src/entry.js\": `\n+\t\t\timport {Cmp2} from \"demo-pkg2\"\n+\t\t\tconsole.log(Cmp2);\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/cmp1.js\": `\n+\t\t\timport {__decorate} from './helper';\n+\t\t\tlet Something = {}\n+\t\t\t__decorate(Something);\n+\t\t\texport default Something;\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/cmp2.js\": `\n+\t\t\timport {__decorate} from './helper';\n+\t\t\tclass Something2 {}\n+\t\t\t__decorate(Something2);\n+\t\t\texport default Something2;\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/helper.js\": `\n+\t\t\texport function __decorate(s) {\n+\t\t\t}\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/package.json\": `\n+\t\t\t{\n+\t\t\t\t\"sideEffects\": false\n+\t\t\t}\n+\t\t`,\n+\t\t\"/Users/user/project/node_modules/demo-pkg2/index.js\": pkg2Index,\n+\t}\n+\n+\tdce_suite.expectBundled(t, bundled{\n+\t\tfiles:      mockFiles,\n+\t\tentryPaths: []string{\"/Users/user/project/src/entry.js\"},\n+\t\toptions: config.Options{\n+\t\t\tMode:          config.ModeBundle,\n+\t\t\tAbsOutputFile: \"/out.js\",\n+\t\t\tPlugins: []config.Plugin{",
        "comment_created_at": "2021-06-08T07:45:29+00:00",
        "comment_author": "evanw",
        "comment_body": "I'm going to remove this Go plugin test. There aren't really any Go-based plugin tests at the moment because they are essentially already covered by the end-to-end JavaScript plugin tests, since the API calls in each JavaScript plugin are forwarded through a Go plugin. Writing the tests in both JS and Go is duplicated effort.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "432286120",
    "pr_number": 135,
    "pr_file": "internal/bundler/bundler_test.go",
    "created_at": "2020-05-29T06:45:50+00:00",
    "commented_code": "package bundler\n \n import (\n+\t\"fmt\"\n \t\"path\"\n+\t\"strings\"\n \t\"testing\"\n \n \t\"github.com/evanw/esbuild/internal/fs\"\n \t\"github.com/evanw/esbuild/internal/logging\"\n \t\"github.com/evanw/esbuild/internal/parser\"\n \t\"github.com/evanw/esbuild/internal/printer\"\n \t\"github.com/evanw/esbuild/internal/resolver\"\n+\t\"github.com/kylelemons/godebug/diff\"\n )\n \n func assertEqual(t *testing.T, a interface{}, b interface{}) {\n \tif a != b {\n-\t\tt.Fatalf(\"%s != %s\", a, b)\n+\t\tstringA := fmt.Sprintf(\"%v\", a)\n+\t\tstringB := fmt.Sprintf(\"%v\", b)\n+\t\tif strings.Contains(stringA, \"\n\") {\n+\t\t\tt.Fatal(diff.Diff(stringA, stringB))",
    "repo_full_name": "evanw/esbuild",
    "discussion_comments": [
      {
        "comment_id": "432286120",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 135,
        "pr_file": "internal/bundler/bundler_test.go",
        "discussion_id": "432286120",
        "commented_code": "@@ -1,19 +1,28 @@\n package bundler\n \n import (\n+\t\"fmt\"\n \t\"path\"\n+\t\"strings\"\n \t\"testing\"\n \n \t\"github.com/evanw/esbuild/internal/fs\"\n \t\"github.com/evanw/esbuild/internal/logging\"\n \t\"github.com/evanw/esbuild/internal/parser\"\n \t\"github.com/evanw/esbuild/internal/printer\"\n \t\"github.com/evanw/esbuild/internal/resolver\"\n+\t\"github.com/kylelemons/godebug/diff\"\n )\n \n func assertEqual(t *testing.T, a interface{}, b interface{}) {\n \tif a != b {\n-\t\tt.Fatalf(\"%s != %s\", a, b)\n+\t\tstringA := fmt.Sprintf(\"%v\", a)\n+\t\tstringB := fmt.Sprintf(\"%v\", b)\n+\t\tif strings.Contains(stringA, \"\\n\") {\n+\t\t\tt.Fatal(diff.Diff(stringA, stringB))",
        "comment_created_at": "2020-05-29T06:45:50+00:00",
        "comment_author": "evanw",
        "comment_body": "I understand why you did this, but this is going to make it harder to update tests since I've been copying and pasting the output of the tests to accept the new output, and this interleaves the old and new output. Luckily it's easy to disable by just commenting out a few lines, so I don't think it's a big problem.\r\n\r\nReally I should figure out some system of doing snapshot-style testing so that test output can be updated automatically...\r\n",
        "pr_file_module": null
      }
    ]
  }
]