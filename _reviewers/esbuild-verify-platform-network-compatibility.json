[
  {
    "discussion_id": "914418111",
    "pr_number": 2373,
    "pr_file": "Makefile",
    "created_at": "2022-07-06T05:03:54+00:00",
    "commented_code": "platform-linux-s390x:\n \t@$(MAKE) --no-print-directory GOOS=linux GOARCH=s390x NPMDIR=npm/esbuild-linux-s390x platform-unixlike\n \n+platform-linux-loong64:\n+\t@$(MAKE) --no-print-directory GOOS=linux GOARCH=loong64 NPMDIR=npm/esbuild-linux-loong64 platform-unixlike",
    "repo_full_name": "evanw/esbuild",
    "discussion_comments": [
      {
        "comment_id": "914418111",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 2373,
        "pr_file": "Makefile",
        "discussion_id": "914418111",
        "commented_code": "@@ -339,6 +340,9 @@ platform-linux-riscv64:\n platform-linux-s390x:\n \t@$(MAKE) --no-print-directory GOOS=linux GOARCH=s390x NPMDIR=npm/esbuild-linux-s390x platform-unixlike\n \n+platform-linux-loong64:\n+\t@$(MAKE) --no-print-directory GOOS=linux GOARCH=loong64 NPMDIR=npm/esbuild-linux-loong64 platform-unixlike",
        "comment_created_at": "2022-07-06T05:03:54+00:00",
        "comment_author": "evanw",
        "comment_body": "> * For now, only `Go@1.18.2` and newer suppoort Loongarch.\r\n\r\nWhen I try to run this command, I get this error:\r\n\r\n```\r\ngo: unsupported GOOS/GOARCH pair linux/loong64\r\n```\r\n\r\nMy `go version`:\r\n\r\n```\r\ngo version go1.18.3 darwin/arm64\r\n```\r\n\r\nThat implies that Go 1.18.2 and newer do not support this architecture. This makes sense because it's [supposed to only be supported in Go 1.19 and up](https://tip.golang.org/doc/go1.19):\r\n\r\n>  Go 1.19 adds support for the Loongson 64-bit architecture LoongArch on Linux (`GOOS=linux`, `GOARCH=loong64`). \r\n\r\nSee also: #1804",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "704350988",
    "pr_number": 1578,
    "pr_file": "Makefile",
    "created_at": "2021-09-08T12:02:04+00:00",
    "commented_code": "platform-android-arm64:\n \tmake GOOS=android GOARCH=arm64 NPMDIR=npm/esbuild-android-arm64 platform-unixlike\n \n+platform-android-arm:\n+\tmake GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike",
    "repo_full_name": "evanw/esbuild",
    "discussion_comments": [
      {
        "comment_id": "704350988",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 1578,
        "pr_file": "Makefile",
        "discussion_id": "704350988",
        "commented_code": "@@ -150,6 +151,9 @@ platform-unixlike:\n platform-android-arm64:\n \tmake GOOS=android GOARCH=arm64 NPMDIR=npm/esbuild-android-arm64 platform-unixlike\n \n+platform-android-arm:\n+\tmake GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike",
        "comment_created_at": "2021-09-08T12:02:04+00:00",
        "comment_author": "evanw",
        "comment_body": "I am unable to run this on my computer. I get this:\r\n\r\n```\r\n$ make GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike\r\ntest -n \"android\" && test -n \"arm\" && test -n \"npm/esbuild-android-arm\"\r\nmkdir -p \"npm/esbuild-android-arm/bin\"\r\ncd \"npm/esbuild-android-arm\" && npm version \"0.12.25\" --allow-same-version\r\nv0.12.25\r\nCGO_ENABLED=0 GOOS=\"android\" GOARCH=\"arm\" go build \"-ldflags=-s -w\" -trimpath -o \"npm/esbuild-android-arm/bin/esbuild\" ./cmd/esbuild\r\n# github.com/evanw/esbuild/cmd/esbuild\r\nloadinternal: cannot find runtime/cgo\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: warning: option -s is obsolete and being ignored\r\nld: unknown option: -z\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\nmake: *** [platform-unixlike] Error 2\r\n```\r\n\r\nThis is on macOS 11.5.1. I don't understand why cgo is apparently enabled despite CGO_ENABLED=0. Here is a reduced reproduction:\r\n\r\n```\r\n$ cat main.go \r\npackage main\r\n\r\nimport \"runtime/debug\"\r\n\r\nfunc main() {\r\n\tdebug.SetGCPercent(-1)\r\n}\r\n\r\n$ CGO_ENABLED=0 GOOS=\"android\" GOARCH=\"arm\" go build main.go\r\n# command-line-arguments\r\nloadinternal: cannot find runtime/cgo\r\n/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: unknown option: -z\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\n\r\nThis appears to be a bug in Go.\r\n\r\nEdit: I have filed this bug as https://github.com/golang/go/issues/48246.",
        "pr_file_module": null
      },
      {
        "comment_id": "704582218",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 1578,
        "pr_file": "Makefile",
        "discussion_id": "704350988",
        "commented_code": "@@ -150,6 +151,9 @@ platform-unixlike:\n platform-android-arm64:\n \tmake GOOS=android GOARCH=arm64 NPMDIR=npm/esbuild-android-arm64 platform-unixlike\n \n+platform-android-arm:\n+\tmake GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike",
        "comment_created_at": "2021-09-08T16:26:10+00:00",
        "comment_author": "thunder-coding",
        "comment_body": "Did you try compiling with older Golang versions?\n\nDon't know why but I feel it's somehow related to wrong dynamic linker path when cross compiling issue (not mentioning the issue here since it may be unrelated)",
        "pr_file_module": null
      },
      {
        "comment_id": "705362857",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 1578,
        "pr_file": "Makefile",
        "discussion_id": "704350988",
        "commented_code": "@@ -150,6 +151,9 @@ platform-unixlike:\n platform-android-arm64:\n \tmake GOOS=android GOARCH=arm64 NPMDIR=npm/esbuild-android-arm64 platform-unixlike\n \n+platform-android-arm:\n+\tmake GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike",
        "comment_created_at": "2021-09-09T14:00:04+00:00",
        "comment_author": "evanw",
        "comment_body": "The Go team said that \"internal linking\" is unsupported with Android ARM and building this requires a C toolchain to build. Maybe this means I need to build this on a 32-bit Android ARM device?\r\n\r\nAre you able to build esbuild using this command? If so, what OS version, CPU architecture, and Go version are you on?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "705506035",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 1578,
        "pr_file": "Makefile",
        "discussion_id": "704350988",
        "commented_code": "@@ -150,6 +151,9 @@ platform-unixlike:\n platform-android-arm64:\n \tmake GOOS=android GOARCH=arm64 NPMDIR=npm/esbuild-android-arm64 platform-unixlike\n \n+platform-android-arm:\n+\tmake GOOS=android GOARCH=arm NPMDIR=npm/esbuild-android-arm platform-unixlike",
        "comment_created_at": "2021-09-09T16:25:59+00:00",
        "comment_author": "thunder-coding",
        "comment_body": "I was able to build on Android ARM 7.0 using on Termux using\n```\ngo build ./cmd/esbuild\n```\n\nThe Golang version I had was the latest in official Termux repository as of writing this comment.\n\n`go version` output\n\n```\ngo version go1.16.7 android/arm\n```\n\nand I have a `esbuild` binary.\n\nAnd about cross compiling, you need to get the C compiler from Android SDK.\n\nIf you need some example on how to do it see termux/termux-packages\n\nUnder `scripts/build/termux_step_setup_toolchain.sh`, you can see how it's setting up CC, CXX and other environment variables (along with some other changes which might not be needed here)\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "577170674",
    "pr_number": 820,
    "pr_file": "npm/esbuild-wasm/bin/esbuild",
    "created_at": "2021-02-16T22:04:16+00:00",
    "commented_code": "};\n \n const argv = ['node', wasm_exec, esbuild_wasm].concat(process.argv.slice(2));\n-wrapper(require, require.main, Object.assign(Object.create(process), { argv }), { instantiate });\n+wrapper(require, require.main, Object.assign(Object.create(process), { argv }), Object.assign(Object.create(WebAssembly), { instantiate }));",
    "repo_full_name": "evanw/esbuild",
    "discussion_comments": [
      {
        "comment_id": "577170674",
        "repo_full_name": "evanw/esbuild",
        "pr_number": 820,
        "pr_file": "npm/esbuild-wasm/bin/esbuild",
        "discussion_id": "577170674",
        "commented_code": "@@ -81,4 +81,4 @@ fs.read = function () {\n };\n \n const argv = ['node', wasm_exec, esbuild_wasm].concat(process.argv.slice(2));\n-wrapper(require, require.main, Object.assign(Object.create(process), { argv }), { instantiate });\n+wrapper(require, require.main, Object.assign(Object.create(process), { argv }), Object.assign(Object.create(WebAssembly), { instantiate }));",
        "comment_created_at": "2021-02-16T22:04:16+00:00",
        "comment_author": "rtsao",
        "comment_body": "As of [Golang 1.16.0](https://github.com/golang/go/commit/7be8358f70ff858f28b9aefe11986da25f1762bc), the wasm_exec.js `run` function now has this check:\r\n```js\r\nif (!(instance instanceof WebAssembly.Instance)) {\r\n  throw new Error(\"Go.run: WebAssembly.Instance expected\");\r\n}\r\n```\r\n\r\nThis seemed like the simplest solution as opposed to patching the generated code like in https://github.com/evanw/esbuild/blob/add2790afd5f72b39c7eea9e48b2022e56f4cfe3/scripts/esbuild.js#L61\r\n",
        "pr_file_module": null
      }
    ]
  }
]