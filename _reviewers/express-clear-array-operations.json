[
  {
    "discussion_id": "30373092",
    "pr_number": 2649,
    "pr_file": "lib/application.js",
    "created_at": "2015-05-14T23:14:50+00:00",
    "commented_code": "* See the Router#param() docs for more details.\n  *\n  * @param {String|Array} name\n- * @param {Function} fn\n+ * @param {Function|Array} fn\n  * @return {app} for chaining\n  * @api public\n  */\n \n app.param = function(name, fn){\n+  var args = slice.apply(arguments);\n+  var name = args[0];\n+  var fns = args.slice(1);\n+\n   this.lazyrouter();\n \n   if (Array.isArray(name)) {\n     name.forEach(function(key) {\n-      this.param(key, fn);\n+      var params = [key].concat(fns);",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "30373092",
        "repo_full_name": "expressjs/express",
        "pr_number": 2649,
        "pr_file": "lib/application.js",
        "discussion_id": "30373092",
        "commented_code": "@@ -300,22 +300,34 @@ app.engine = function(ext, fn){\n  * See the Router#param() docs for more details.\n  *\n  * @param {String|Array} name\n- * @param {Function} fn\n+ * @param {Function|Array} fn\n  * @return {app} for chaining\n  * @api public\n  */\n \n app.param = function(name, fn){\n+  var args = slice.apply(arguments);\n+  var name = args[0];\n+  var fns = args.slice(1);\n+\n   this.lazyrouter();\n \n   if (Array.isArray(name)) {\n     name.forEach(function(key) {\n-      this.param(key, fn);\n+      var params = [key].concat(fns);",
        "comment_created_at": "2015-05-14T23:14:50+00:00",
        "comment_author": "dougwilson",
        "comment_body": "`[key].concat(fns)` will inadvertinately allow for the arguments to be arrays, because it'll flatten in certain cases, i.e.:\n\n``` js\n$ node -pe '[2].concat([1,2])'\n[ 2, 1, 2 ]\n```\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "800235293",
    "pr_number": 4814,
    "pr_file": "examples/web-service/index.js",
    "created_at": "2022-02-06T21:26:57+00:00",
    "commented_code": "if (!key) return next(error(400, 'api key required'));\n \n   // key is invalid\n-  if (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n+  if (apiKeys.indexOf(key)<0) return next(error(401, 'invalid api key'));",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "800235293",
        "repo_full_name": "expressjs/express",
        "pr_number": 4814,
        "pr_file": "examples/web-service/index.js",
        "discussion_id": "800235293",
        "commented_code": "@@ -34,7 +34,7 @@ app.use('/api', function(req, res, next){\n   if (!key) return next(error(400, 'api key required'));\n \n   // key is invalid\n-  if (!~apiKeys.indexOf(key)) return next(error(401, 'invalid api key'));\n+  if (apiKeys.indexOf(key)<0) return next(error(401, 'invalid api key'));",
        "comment_created_at": "2022-02-06T21:26:57+00:00",
        "comment_author": "LinusU",
        "comment_body": "I personally would use `=== -1` here since `-1` is the value returned by `indexOf` if no match is found?\r\n\r\n```suggestion\r\n  if (apiKeys.indexOf(key) === -1) return next(error(401, 'invalid api key'));\r\n```",
        "pr_file_module": null
      }
    ]
  }
]