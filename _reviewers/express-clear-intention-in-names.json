[
  {
    "discussion_id": "912975004",
    "pr_number": 4946,
    "pr_file": "examples/clean-architecture/use-cases/notes/index.js",
    "created_at": "2022-07-04T12:52:50+00:00",
    "commented_code": "+/**\n+ * Since this is just a simple CRUD, I'm only calling the underlying repository methods.\n+ * In a real world application, in the same use-case method, you will insert the entire business logic.\n+ */\n+\n+function NotesUseCase(notesRepository) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "912975004",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/use-cases/notes/index.js",
        "discussion_id": "912975004",
        "commented_code": "@@ -0,0 +1,31 @@\n+/**\n+ * Since this is just a simple CRUD, I'm only calling the underlying repository methods.\n+ * In a real world application, in the same use-case method, you will insert the entire business logic.\n+ */\n+\n+function NotesUseCase(notesRepository) {",
        "comment_created_at": "2022-07-04T12:52:50+00:00",
        "comment_author": "bozzelliandrea",
        "comment_body": "Can you call that NotesService or NotesBusinessService and also the paramter in the controller? \r\njust for maintain the classic architecture naming convention Controller-Service-Repository.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "854261718",
    "pr_number": 4893,
    "pr_file": "lib/response.js",
    "created_at": "2022-04-20T15:15:48+00:00",
    "commented_code": "var generateETag = !this.get('ETag') && typeof etagFn === 'function'\n \n   // populate Content-Length\n-  var len\n-  if (chunk !== undefined) {\n+  // Because Content-Length and Transfer-Encoding can't be present in the response headers together,\n+  // Content-Length should be added only if there is no Transfer-Encoding header\n+  var len;\n+  if (chunk !== undefined && !this.getHeader(\"transfer-encoding\")) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "854261718",
        "repo_full_name": "expressjs/express",
        "pr_number": 4893,
        "pr_file": "lib/response.js",
        "discussion_id": "854261718",
        "commented_code": "@@ -176,8 +176,10 @@ res.send = function send(body) {\n   var generateETag = !this.get('ETag') && typeof etagFn === 'function'\n \n   // populate Content-Length\n-  var len\n-  if (chunk !== undefined) {\n+  // Because Content-Length and Transfer-Encoding can't be present in the response headers together,\n+  // Content-Length should be added only if there is no Transfer-Encoding header\n+  var len;\n+  if (chunk !== undefined && !this.getHeader(\"transfer-encoding\")) {",
        "comment_created_at": "2022-04-20T15:15:48+00:00",
        "comment_author": "dougwilson",
        "comment_body": "`this.getHeader(\"transfer-encoding\")` should be `this.get(\"Transfer-Encoding\")`",
        "pr_file_module": null
      },
      {
        "comment_id": "854265213",
        "repo_full_name": "expressjs/express",
        "pr_number": 4893,
        "pr_file": "lib/response.js",
        "discussion_id": "854261718",
        "commented_code": "@@ -176,8 +176,10 @@ res.send = function send(body) {\n   var generateETag = !this.get('ETag') && typeof etagFn === 'function'\n \n   // populate Content-Length\n-  var len\n-  if (chunk !== undefined) {\n+  // Because Content-Length and Transfer-Encoding can't be present in the response headers together,\n+  // Content-Length should be added only if there is no Transfer-Encoding header\n+  var len;\n+  if (chunk !== undefined && !this.getHeader(\"transfer-encoding\")) {",
        "comment_created_at": "2022-04-20T15:18:43+00:00",
        "comment_author": "YuryShkoda",
        "comment_body": "It feels that `getHeader` method should be case insensitive.",
        "pr_file_module": null
      },
      {
        "comment_id": "854267013",
        "repo_full_name": "expressjs/express",
        "pr_number": 4893,
        "pr_file": "lib/response.js",
        "discussion_id": "854261718",
        "commented_code": "@@ -176,8 +176,10 @@ res.send = function send(body) {\n   var generateETag = !this.get('ETag') && typeof etagFn === 'function'\n \n   // populate Content-Length\n-  var len\n-  if (chunk !== undefined) {\n+  // Because Content-Length and Transfer-Encoding can't be present in the response headers together,\n+  // Content-Length should be added only if there is no Transfer-Encoding header\n+  var len;\n+  if (chunk !== undefined && !this.getHeader(\"transfer-encoding\")) {",
        "comment_created_at": "2022-04-20T15:20:23+00:00",
        "comment_author": "dougwilson",
        "comment_body": "It is, but the change here is to use `this.get`, not `this.getHeader`. In addition, they are both case-insensitive, but we use the standard header casing in the code (as you can see from all the other parts).",
        "pr_file_module": null
      },
      {
        "comment_id": "854268832",
        "repo_full_name": "expressjs/express",
        "pr_number": 4893,
        "pr_file": "lib/response.js",
        "discussion_id": "854261718",
        "commented_code": "@@ -176,8 +176,10 @@ res.send = function send(body) {\n   var generateETag = !this.get('ETag') && typeof etagFn === 'function'\n \n   // populate Content-Length\n-  var len\n-  if (chunk !== undefined) {\n+  // Because Content-Length and Transfer-Encoding can't be present in the response headers together,\n+  // Content-Length should be added only if there is no Transfer-Encoding header\n+  var len;\n+  if (chunk !== undefined && !this.getHeader(\"transfer-encoding\")) {",
        "comment_created_at": "2022-04-20T15:22:05+00:00",
        "comment_author": "YuryShkoda",
        "comment_body": "Makes sense.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "829321749",
    "pr_number": 4861,
    "pr_file": "lib/application.js",
    "created_at": "2022-03-17T17:36:26+00:00",
    "commented_code": "app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "829321749",
        "repo_full_name": "expressjs/express",
        "pr_number": 4861,
        "pr_file": "lib/application.js",
        "discussion_id": "829321749",
        "commented_code": "@@ -54,9 +54,9 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
        "comment_created_at": "2022-03-17T17:36:26+00:00",
        "comment_author": "EvanHahn",
        "comment_body": "These properties seem undocumented and untested so I didn't update tests. Let me know if you want me to add some.",
        "pr_file_module": null
      },
      {
        "comment_id": "829394910",
        "repo_full_name": "expressjs/express",
        "pr_number": 4861,
        "pr_file": "lib/application.js",
        "discussion_id": "829321749",
        "commented_code": "@@ -54,9 +54,9 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
        "comment_created_at": "2022-03-17T18:55:50+00:00",
        "comment_author": "dougwilson",
        "comment_body": "They are private, which is why they are not documented and the testing for them is tested though the public APIs that utilize them üëç ",
        "pr_file_module": null
      },
      {
        "comment_id": "829471844",
        "repo_full_name": "expressjs/express",
        "pr_number": 4861,
        "pr_file": "lib/application.js",
        "discussion_id": "829321749",
        "commented_code": "@@ -54,9 +54,9 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
        "comment_created_at": "2022-03-17T20:25:06+00:00",
        "comment_author": "EvanHahn",
        "comment_body": "Sounds good.\r\n\r\nOut of curiosity, why aren't they prefixed with underscores to indicate that they aren't meant to be used publicly? Not related to this PR at all.",
        "pr_file_module": null
      },
      {
        "comment_id": "829478174",
        "repo_full_name": "expressjs/express",
        "pr_number": 4861,
        "pr_file": "lib/application.js",
        "discussion_id": "829321749",
        "commented_code": "@@ -54,9 +54,9 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
        "comment_created_at": "2022-03-17T20:32:55+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Yes, it is curious üòÄ They are before my time so cannot answer the why, lol. Even an underscore doesn't actually stop folks from using stuff, and a large project even ends up needing to be csreful modifying those things. Really only way to protect is an inside out obect, clever usage of closures, or the newer private class members. Idk if 5.x will change it, as it is late in the dev on it and probably need to scout round for the usages to make sure they are still provided in some way and truely private them in like 6.\r\n\r\nI bet people are accessing settings directly, at least. Perhaps too cache if they wanted to clear it since there is no API to do so.",
        "pr_file_module": null
      },
      {
        "comment_id": "829539027",
        "repo_full_name": "expressjs/express",
        "pr_number": 4861,
        "pr_file": "lib/application.js",
        "discussion_id": "829321749",
        "commented_code": "@@ -54,9 +54,9 @@ var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\n app.init = function init() {\n   var router = null;\n \n-  this.cache = {};\n-  this.engines = {};\n-  this.settings = {};\n+  this.cache = Object.create(null);\n+  this.engines = Object.create(null);\n+  this.settings = Object.create(null);",
        "comment_created_at": "2022-03-17T21:48:07+00:00",
        "comment_author": "EvanHahn",
        "comment_body": "Great answer. Thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "55070135",
    "pr_number": 2926,
    "pr_file": "lib/response.js",
    "created_at": "2016-03-04T18:41:07+00:00",
    "commented_code": "};\n \n   // render\n-  app.render(view, opts, done);\n+  app.render(view, varStack, done);\n };\n \n+/**\n+ * Add `options` to the top of the reponse's template variables stack.\n+ * Creates the stack the first time called.\n+ *\n+ * @public\n+ */\n+res.addTmplVars = function addTmplVars(options) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "55070135",
        "repo_full_name": "expressjs/express",
        "pr_number": 2926,
        "pr_file": "lib/response.js",
        "discussion_id": "55070135",
        "commented_code": "@@ -958,9 +959,24 @@ res.render = function render(view, options, callback) {\n   };\n \n   // render\n-  app.render(view, opts, done);\n+  app.render(view, varStack, done);\n };\n \n+/**\n+ * Add `options` to the top of the reponse's template variables stack.\n+ * Creates the stack the first time called.\n+ *\n+ * @public\n+ */\n+res.addTmplVars = function addTmplVars(options) {",
        "comment_created_at": "2016-03-04T18:41:07+00:00",
        "comment_author": "Knighton910",
        "comment_body": "As a place holder, it's good, but yeah, that doesn't track for the long haul. \n\n+1   We'll probably want to think of a better method name than addTmplVars\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "20203459",
    "pr_number": 2437,
    "pr_file": "lib/application.js",
    "created_at": "2014-11-12T06:39:56+00:00",
    "commented_code": "return server.listen.apply(server, arguments);\n };\n \n+/*\n+ * Set a tracer at the application level. Tracer will be activated on\n+ * The tracer function must have the following signature:\n+ *\n+ *  function (app, req, res, event, date, args) ...\n+ *\n+ * @param {function} The tracer to set.\n+ * @return {app} for chaining.\n+ * @api public\n+ */\n+\n+app.instrument = function(tracer){\n+  if (tracer === undefined || typeof tracer  !== 'function')\n+    throw new Error('instrument expects a function');\n+  this.tracers.push(tracer);\n+  return this;\n+};\n+\n+/*\n+ * Dispatch an event to all tracers set on the application. Add context\n+ * information: running app, request, response and date.\n+ *\n+ * @param {Response} Response that fires the tracing event.\n+ * @param {Event} The event to trace.\n+ * @param {Array} Arguments to transmit to the tracker.\n+ *\n+ * @api private\n+ */\n+\n+app.dispatch = function(res, event, args){",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "20203459",
        "repo_full_name": "expressjs/express",
        "pr_number": 2437,
        "pr_file": "lib/application.js",
        "discussion_id": "20203459",
        "commented_code": "@@ -559,6 +560,43 @@ app.listen = function(){\n   return server.listen.apply(server, arguments);\n };\n \n+/*\n+ * Set a tracer at the application level. Tracer will be activated on\n+ * The tracer function must have the following signature:\n+ *\n+ *  function (app, req, res, event, date, args) ...\n+ *\n+ * @param {function} The tracer to set.\n+ * @return {app} for chaining.\n+ * @api public\n+ */\n+\n+app.instrument = function(tracer){\n+  if (tracer === undefined || typeof tracer  !== 'function')\n+    throw new Error('instrument expects a function');\n+  this.tracers.push(tracer);\n+  return this;\n+};\n+\n+/*\n+ * Dispatch an event to all tracers set on the application. Add context\n+ * information: running app, request, response and date.\n+ *\n+ * @param {Response} Response that fires the tracing event.\n+ * @param {Event} The event to trace.\n+ * @param {Array} Arguments to transmit to the tracker.\n+ *\n+ * @api private\n+ */\n+\n+app.dispatch = function(res, event, args){",
        "comment_created_at": "2014-11-12T06:39:56+00:00",
        "comment_author": "dougwilson",
        "comment_body": "This should probably have a different name, otherwise people will try to `app.dispatch(req, res)` with it.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "10108429",
    "pr_number": 1936,
    "pr_file": "lib/router/index.js",
    "created_at": "2014-02-27T01:16:22+00:00",
    "commented_code": ", parseUrl = utils.parseUrl;\n \n /**\n- * Expose `Router` constructor.\n- */\n-\n-exports = module.exports = Router;\n-\n-/**\n  * Initialize a new `Router` with the given `options`.\n  *\n  * @param {Object} options\n- * @api private\n+ * @return {Router} which is an callable function\n+ * @api public\n  */\n \n-function Router(options) {\n+var proto = module.exports = function(options) {\n   options = options || {};\n-  var self = this;\n+\n+  var self = function(req, res, next) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "10108429",
        "repo_full_name": "expressjs/express",
        "pr_number": 1936,
        "pr_file": "lib/router/index.js",
        "discussion_id": "10108429",
        "commented_code": "@@ -10,21 +10,22 @@ var Route = require('./route')\n   , parseUrl = utils.parseUrl;\n \n /**\n- * Expose `Router` constructor.\n- */\n-\n-exports = module.exports = Router;\n-\n-/**\n  * Initialize a new `Router` with the given `options`.\n  *\n  * @param {Object} options\n- * @api private\n+ * @return {Router} which is an callable function\n+ * @api public\n  */\n \n-function Router(options) {\n+var proto = module.exports = function(options) {\n   options = options || {};\n-  var self = this;\n+\n+  var self = function(req, res, next) {",
        "comment_created_at": "2014-02-27T01:16:22+00:00",
        "comment_author": "jonathanong",
        "comment_body": "haha why use expression here? i'd rather actually name the function. `function router(req, res, next) {}`\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "9212980",
    "pr_number": 1909,
    "pr_file": "lib/application.js",
    "created_at": "2014-01-28T00:26:01+00:00",
    "commented_code": "this.set('views', process.cwd() + '/views');\n   this.set('jsonp callback name', 'callback');\n \n-  if (this.get('env') === 'production') {\n+  if (env === 'production') {\n     this.enable('view cache');\n   }\n };\n \n /**\n- * Proxy `connect#use()` to apply settings to\n- * mounted applications.\n+ * lazily adds the base router if it has not yet been added.\n+ *\n+ * We cannot add the base router in the defaultConfiguration because\n+ * it reads app settings which might be set after that has run.\n+ *\n+ * @api private\n+ */\n+app.lazyrouter = function() {\n+  if (!this._router) {\n+    this._router = new Router({\n+      caseSensitive: this.enabled('case sensitive routing'),\n+      strict: this.enabled('strict routing')\n+    });\n+\n+    this._router.use(connect.query());\n+    this._router.use(middleware.init(this));\n+  }\n+};\n+\n+/**\n+ * Dispatch a req, res pair into the application. Starts pipeline processing.\n+ *\n+ * If no _done_ callback is provided, then default error handlers will respond\n+ * in the event of an error bubbling through the stack.\n+ *\n+ * @api private\n+ */\n+\n+app.handle = function(req, res, done) {\n+  var env = this.get('env');\n+\n+  this._router.handle(req, res, function(err) {\n+    if (done) {\n+      return done(err);\n+    }\n+\n+    // unhandled error\n+    if (err) {\n+      // default to 500\n+      if (res.statusCode < 400) res.statusCode = 500;\n+      debug('default %s', res.statusCode);\n+\n+      // respect err.status\n+      if (err.status) res.statusCode = err.status;\n+\n+      // production gets a basic error message\n+      var msg = 'production' == env\n+        ? http.STATUS_CODES[res.statusCode]\n+        : err.stack || err.toString();\n+      msg = escapeHtml(msg);\n+\n+      // log to stderr in a non-test env\n+      if ('test' != env) console.error(err.stack || err.toString());\n+      if (res.headerSent) return req.socket.destroy();\n+      res.setHeader('Content-Type', 'text/html');\n+      res.setHeader('Content-Length', Buffer.byteLength(msg));\n+      if ('HEAD' == req.method) return res.end();\n+      res.end(msg);\n+      return;\n+    }\n+\n+    // 404\n+    debug('default 404');\n+    res.statusCode = 404;\n+    res.setHeader('Content-Type', 'text/html');\n+    if ('HEAD' == req.method) return res.end();\n+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\n');\n+  });\n+};\n+\n+/**\n+ * Return the app router.\n+ *\n+ * This is the router which receives all the app.VERB, app.param, and app.use calls.\n+ *\n+ * @return {Router}\n+ * @api public\n+ */\n+\n+app.router = function(){",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "9212980",
        "repo_full_name": "expressjs/express",
        "pr_number": 1909,
        "pr_file": "lib/application.js",
        "discussion_id": "9212980",
        "commented_code": "@@ -82,14 +74,101 @@ app.defaultConfiguration = function(){\n   this.set('views', process.cwd() + '/views');\n   this.set('jsonp callback name', 'callback');\n \n-  if (this.get('env') === 'production') {\n+  if (env === 'production') {\n     this.enable('view cache');\n   }\n };\n \n /**\n- * Proxy `connect#use()` to apply settings to\n- * mounted applications.\n+ * lazily adds the base router if it has not yet been added.\n+ *\n+ * We cannot add the base router in the defaultConfiguration because\n+ * it reads app settings which might be set after that has run.\n+ *\n+ * @api private\n+ */\n+app.lazyrouter = function() {\n+  if (!this._router) {\n+    this._router = new Router({\n+      caseSensitive: this.enabled('case sensitive routing'),\n+      strict: this.enabled('strict routing')\n+    });\n+\n+    this._router.use(connect.query());\n+    this._router.use(middleware.init(this));\n+  }\n+};\n+\n+/**\n+ * Dispatch a req, res pair into the application. Starts pipeline processing.\n+ *\n+ * If no _done_ callback is provided, then default error handlers will respond\n+ * in the event of an error bubbling through the stack.\n+ *\n+ * @api private\n+ */\n+\n+app.handle = function(req, res, done) {\n+  var env = this.get('env');\n+\n+  this._router.handle(req, res, function(err) {\n+    if (done) {\n+      return done(err);\n+    }\n+\n+    // unhandled error\n+    if (err) {\n+      // default to 500\n+      if (res.statusCode < 400) res.statusCode = 500;\n+      debug('default %s', res.statusCode);\n+\n+      // respect err.status\n+      if (err.status) res.statusCode = err.status;\n+\n+      // production gets a basic error message\n+      var msg = 'production' == env\n+        ? http.STATUS_CODES[res.statusCode]\n+        : err.stack || err.toString();\n+      msg = escapeHtml(msg);\n+\n+      // log to stderr in a non-test env\n+      if ('test' != env) console.error(err.stack || err.toString());\n+      if (res.headerSent) return req.socket.destroy();\n+      res.setHeader('Content-Type', 'text/html');\n+      res.setHeader('Content-Length', Buffer.byteLength(msg));\n+      if ('HEAD' == req.method) return res.end();\n+      res.end(msg);\n+      return;\n+    }\n+\n+    // 404\n+    debug('default 404');\n+    res.statusCode = 404;\n+    res.setHeader('Content-Type', 'text/html');\n+    if ('HEAD' == req.method) return res.end();\n+    res.end('Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl) + '\\n');\n+  });\n+};\n+\n+/**\n+ * Return the app router.\n+ *\n+ * This is the router which receives all the app.VERB, app.param, and app.use calls.\n+ *\n+ * @return {Router}\n+ * @api public\n+ */\n+\n+app.router = function(){",
        "comment_created_at": "2014-01-28T00:26:01+00:00",
        "comment_author": "jonathanong",
        "comment_body": "yeah i think tj had an issue for that. i'm not sure if it's necessary though. i just think it's bad if we use the same name for a property but use it completely differently. better to just have a completely different name. even a public `._router` is okay to me as it tells me \"it's internal so i shouldn't have to touch it, but it's there\". \n",
        "pr_file_module": null
      }
    ]
  }
]