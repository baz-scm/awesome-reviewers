[
  {
    "discussion_id": "921524527",
    "pr_number": 4946,
    "pr_file": "test/acceptance/clean-architecture.js",
    "created_at": "2022-07-14T20:00:01+00:00",
    "commented_code": "+var app = require(\"../../examples/clean-architecture\");\n+var request = require(\"supertest\");\n+\n+describe(\"clean-architecture-crud\", function () {\n+  describe(\"GET /\", function () {\n+    it(\"should return empty array\", function (done) {\n+      request(app).get(\"/notes\").expect(200, [], done);\n+    });\n+\n+    it(\"list after creation\", function (done) {\n+      request(app)\n+        .post(\"/notes\")\n+        .set(\"Content-Type\", \"application/json\")\n+        .send('{\"title\": \"Text\"}')\n+        .expect(201, function (err, _res) {\n+          if (err) return done(err);\n+          request(app)\n+            .get(\"/notes\")\n+            .expect(200, function (err, res) {\n+              if (err) return done(err);\n+              if (res.body.length === 1 && res.body[0].title === \"Text\") {\n+                done();\n+              }",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "921524527",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "test/acceptance/clean-architecture.js",
        "discussion_id": "921524527",
        "commented_code": "@@ -0,0 +1,133 @@\n+var app = require(\"../../examples/clean-architecture\");\n+var request = require(\"supertest\");\n+\n+describe(\"clean-architecture-crud\", function () {\n+  describe(\"GET /\", function () {\n+    it(\"should return empty array\", function (done) {\n+      request(app).get(\"/notes\").expect(200, [], done);\n+    });\n+\n+    it(\"list after creation\", function (done) {\n+      request(app)\n+        .post(\"/notes\")\n+        .set(\"Content-Type\", \"application/json\")\n+        .send('{\"title\": \"Text\"}')\n+        .expect(201, function (err, _res) {\n+          if (err) return done(err);\n+          request(app)\n+            .get(\"/notes\")\n+            .expect(200, function (err, res) {\n+              if (err) return done(err);\n+              if (res.body.length === 1 && res.body[0].title === \"Text\") {\n+                done();\n+              }",
        "comment_created_at": "2022-07-14T20:00:01+00:00",
        "comment_author": "dougwilson",
        "comment_body": "without an `else` here, a failure of the check leaves the test suite hanging. if you are testing the body contents, just use supertest to do it rather than manually checking res.body which would simplify it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1164645691",
    "pr_number": 5162,
    "pr_file": "test/app.listen.js",
    "created_at": "2023-04-12T20:56:07+00:00",
    "commented_code": "'use strict'\n \n+var net = require('net')\n var express = require('../')\n+var http = require('http');\n+var assert = require('assert');\n \n describe('app.listen()', function(){\n+  function getOpenPort(cb) {\n+    var server = net.createServer();\n+    server.once('error', function(error) {\n+      cb(error, null);\n+    });\n+    server.listen(0, function(){\n+      server.close(cb.bind(null, null, server.address().port));\n+    });\n+  }\n+\n+  function makeGetRequest(port, cb){\n+    http\n+      .get('http://localhost:' + port, function(res){\n+        var data = ''\n+        res.on('data', function(chunk){\n+          data += chunk;\n+        });\n+\n+        res.on('end', function(){\n+          cb(null, data);\n+        });\n+      })\n+      .on('error', function(error) {\n+        cb(error, null);\n+      });\n+  }\n+\n   it('should wrap with an HTTP server', function(done){\n     var app = express();\n \n-    var server = app.listen(9999, function(){\n+    var server = app.listen(0, function(){\n       server.close();\n       done();\n     });\n   })\n+\n+  it('should listened to the requested port', function(done){\n+    var expectedResponseBody = 'hello world';\n+    var server;\n+    var app = express()\n+      .get('/', function(req, res){\n+        res.send(expectedResponseBody);\n+      });\n+\n+    getOpenPort(function(openPortError, port){\n+      if(openPortError !== null) {\n+        return done(openPortError);\n+      }\n+\n+      server = app.listen(port, function(){\n+        makeGetRequest(port, function(getError, responseBody) {\n+          try {\n+            assert.strictEqual(getError, null);\n+            assert.strictEqual(responseBody, expectedResponseBody)\n+          } catch (error) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1164645691",
        "repo_full_name": "expressjs/express",
        "pr_number": 5162,
        "pr_file": "test/app.listen.js",
        "discussion_id": "1164645691",
        "commented_code": "@@ -1,14 +1,72 @@\n 'use strict'\n \n+var net = require('net')\n var express = require('../')\n+var http = require('http');\n+var assert = require('assert');\n \n describe('app.listen()', function(){\n+  function getOpenPort(cb) {\n+    var server = net.createServer();\n+    server.once('error', function(error) {\n+      cb(error, null);\n+    });\n+    server.listen(0, function(){\n+      server.close(cb.bind(null, null, server.address().port));\n+    });\n+  }\n+\n+  function makeGetRequest(port, cb){\n+    http\n+      .get('http://localhost:' + port, function(res){\n+        var data = ''\n+        res.on('data', function(chunk){\n+          data += chunk;\n+        });\n+\n+        res.on('end', function(){\n+          cb(null, data);\n+        });\n+      })\n+      .on('error', function(error) {\n+        cb(error, null);\n+      });\n+  }\n+\n   it('should wrap with an HTTP server', function(done){\n     var app = express();\n \n-    var server = app.listen(9999, function(){\n+    var server = app.listen(0, function(){\n       server.close();\n       done();\n     });\n   })\n+\n+  it('should listened to the requested port', function(done){\n+    var expectedResponseBody = 'hello world';\n+    var server;\n+    var app = express()\n+      .get('/', function(req, res){\n+        res.send(expectedResponseBody);\n+      });\n+\n+    getOpenPort(function(openPortError, port){\n+      if(openPortError !== null) {\n+        return done(openPortError);\n+      }\n+\n+      server = app.listen(port, function(){\n+        makeGetRequest(port, function(getError, responseBody) {\n+          try {\n+            assert.strictEqual(getError, null);\n+            assert.strictEqual(responseBody, expectedResponseBody)\n+          } catch (error) {",
        "comment_created_at": "2023-04-12T20:56:07+00:00",
        "comment_author": "krzysdz",
        "comment_body": "Shouldn't there be a `done()` call at the end? It's asynchronous code.\r\n```suggestion\r\n          try {\r\n            assert.strictEqual(getError, null);\r\n            assert.strictEqual(responseBody, expectedResponseBody)\r\n            done()\r\n          } catch (error) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1165083798",
        "repo_full_name": "expressjs/express",
        "pr_number": 5162,
        "pr_file": "test/app.listen.js",
        "discussion_id": "1164645691",
        "commented_code": "@@ -1,14 +1,72 @@\n 'use strict'\n \n+var net = require('net')\n var express = require('../')\n+var http = require('http');\n+var assert = require('assert');\n \n describe('app.listen()', function(){\n+  function getOpenPort(cb) {\n+    var server = net.createServer();\n+    server.once('error', function(error) {\n+      cb(error, null);\n+    });\n+    server.listen(0, function(){\n+      server.close(cb.bind(null, null, server.address().port));\n+    });\n+  }\n+\n+  function makeGetRequest(port, cb){\n+    http\n+      .get('http://localhost:' + port, function(res){\n+        var data = ''\n+        res.on('data', function(chunk){\n+          data += chunk;\n+        });\n+\n+        res.on('end', function(){\n+          cb(null, data);\n+        });\n+      })\n+      .on('error', function(error) {\n+        cb(error, null);\n+      });\n+  }\n+\n   it('should wrap with an HTTP server', function(done){\n     var app = express();\n \n-    var server = app.listen(9999, function(){\n+    var server = app.listen(0, function(){\n       server.close();\n       done();\n     });\n   })\n+\n+  it('should listened to the requested port', function(done){\n+    var expectedResponseBody = 'hello world';\n+    var server;\n+    var app = express()\n+      .get('/', function(req, res){\n+        res.send(expectedResponseBody);\n+      });\n+\n+    getOpenPort(function(openPortError, port){\n+      if(openPortError !== null) {\n+        return done(openPortError);\n+      }\n+\n+      server = app.listen(port, function(){\n+        makeGetRequest(port, function(getError, responseBody) {\n+          try {\n+            assert.strictEqual(getError, null);\n+            assert.strictEqual(responseBody, expectedResponseBody)\n+          } catch (error) {",
        "comment_created_at": "2023-04-13T06:55:47+00:00",
        "comment_author": "rluvaton",
        "comment_body": "Yes, you are absolutely right",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "847003100",
    "pr_number": 4887,
    "pr_file": "test/Router.js",
    "created_at": "2022-04-11T07:00:57+00:00",
    "commented_code": "})\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "847003100",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-11T07:00:57+00:00",
        "comment_author": "grisu48",
        "comment_body": "I just run some tests and can confirm that this change solves the issue on my local `aarch64` test system, However run into a different timeout:\r\n\r\n      1) app.all()\r\n           should add a router per method:\r\n         Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/express/test/app.all.js)\r\n          at listOnTimeout (node:internal/timers:557:17)\r\n          at processTimers (node:internal/timers:500:7)\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "847802272",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-11T22:53:23+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Darn. That particular tests doesn't do much at all. It seems like you likely just need to blanket increase the timeout for the environment you're running in. Are you about to run the test suite like the following? `npm test -- --timeout 7500` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "848178299",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-12T09:00:50+00:00",
        "comment_author": "grisu48",
        "comment_body": "Jep that works. I tested to run `npm test` (failing) vs `npm test -- --timeout 7500` (passes). Any suggestion how to pass a custom timeout to `npm run test-ci`? If I run `npm run test-ci -- --timeout 7500` then it complains:\r\n\r\n    > express@4.17.3 test\r\n    > mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/ \"7500\"\r\n    \r\n    /opt/express/node_modules/mocha/lib/cli/options.js:113\r\n          const pair = arg.split('=');\r\n                           ^\r\n\r\nIf we can pass a specific timeout on the affected architecture, I guess that would be the best outcome. Seeing that this is really an isolated corner case on rare hardware might not motivate unnecessary timeout increases for everyone, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "849401270",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-13T12:01:16+00:00",
        "comment_author": "grisu48",
        "comment_body": "@dougwilson I've run some test on real aarch64 hardware. While the test passes there, that particular step is very close to it's maxmimum:\r\n\r\n      Router\r\n        \u2714 should return a function with router methods\r\n        \u2714 should support .use of other routers\r\n        \u2714 should support dynamic routes\r\n        \u2714 should handle blank URL\r\n        \u2714 should handle missing URL\r\n        \u2714 should not stack overflow with many registered routes (1209ms)\r\n        .handle\r\n\r\n1209ms for a maximum of 2000ms timeout, so apart from the problem on really low end emulated \"hardware\" I think your suggestion of setting the timeout to a higher value for that test is very well motivated.\r\n\r\nYou find the full output at https://paste.opensuse.org/89914697\r\n\r\nThe test machine was a Cavium ThunderX, an I created a VM there with host CPU passthrough and 2 GB of RAM using an openSUSE Leap JeOS image.",
        "pr_file_module": null
      },
      {
        "comment_id": "850056041",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-14T03:34:25+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Ah, I see, there is a an issue with npm passing arguments around. Any reason you are using `npm run test-ci` ? That is meant just for the usage of the GitHub Actions CI here. Why not just use `npm test` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "850277315",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-14T09:46:27+00:00",
        "comment_author": "grisu48",
        "comment_body": "No particular reasons, `npm test` should work just fine.",
        "pr_file_module": null
      },
      {
        "comment_id": "850367750",
        "repo_full_name": "expressjs/express",
        "pr_number": 4887,
        "pr_file": "test/Router.js",
        "discussion_id": "847003100",
        "commented_code": "@@ -62,6 +62,8 @@ describe('Router', function(){\n   })\n \n   it('should not stack overflow with many registered routes', function(done){\n+    this.timeout(7500) // extra time for set up & run",
        "comment_created_at": "2022-04-14T11:53:55+00:00",
        "comment_author": "grisu48",
        "comment_body": "Ok, I've run some more performance tests using your suggestion. It looks fine here - 5 test runs, 100% passing on the aarch64 VM. The fix is still required, as the affected test requires more then `2000ms`:\r\n\r\n        \u2714 should not stack overflow with many registered routes (2459ms)\r\n        \u2714 should not stack overflow with many registered routes (2312ms)\r\n        \u2714 should not stack overflow with many registered routes (2275ms)\r\n        \u2714 should not stack overflow with many registered routes (2435ms)\r\n        \u2714 should not stack overflow with many registered routes (2265ms)\r\n\r\nI adapt your suggestion in this PR and would mark this thread as resolved?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "181735087",
    "pr_number": 3622,
    "pr_file": "test/app.createRouter.js",
    "created_at": "2018-04-16T13:34:44+00:00",
    "commented_code": "+var express = require('../');\n+\n+describe('app.createRouter()', function(){\n+\n+  it('should create a router that inherits settings from app.settings', function(done){",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "181735087",
        "repo_full_name": "expressjs/express",
        "pr_number": 3622,
        "pr_file": "test/app.createRouter.js",
        "discussion_id": "181735087",
        "commented_code": "@@ -0,0 +1,37 @@\n+var express = require('../');\n+\n+describe('app.createRouter()', function(){\n+\n+  it('should create a router that inherits settings from app.settings', function(done){",
        "comment_created_at": "2018-04-16T13:34:44+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Since this is not an async test, you don't need to use `done` here and just throw the errors",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "16177417",
    "pr_number": 2298,
    "pr_file": "test/res.sendFile.js",
    "created_at": "2014-08-13T14:17:54+00:00",
    "commented_code": ".get('/')\n       .expect(200, 'got it', done);\n     })\n+\n+    it('should throw a TypeError if path is null', function(done){\n+      var app = express();\n+\n+      app.use(function (req, res) {\n+        try {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "16177417",
        "repo_full_name": "expressjs/express",
        "pr_number": 2298,
        "pr_file": "test/res.sendFile.js",
        "discussion_id": "16177417",
        "commented_code": "@@ -151,6 +151,23 @@ describe('res', function(){\n       .get('/')\n       .expect(200, 'got it', done);\n     })\n+\n+    it('should throw a TypeError if path is null', function(done){\n+      var app = express();\n+\n+      app.use(function (req, res) {\n+        try {",
        "comment_created_at": "2014-08-13T14:17:54+00:00",
        "comment_author": "dougwilson",
        "comment_body": "use mocha, not try-catch\n",
        "pr_file_module": null
      }
    ]
  }
]