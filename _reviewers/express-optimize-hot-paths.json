[
  {
    "discussion_id": "1184572746",
    "pr_number": 5139,
    "pr_file": "lib/response.js",
    "created_at": "2023-05-04T06:01:16+00:00",
    "commented_code": "this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      /**\n+       * @type {http.ServerResponse}\n+       */\n+      var _this = this;\n+      /**\n+       * @type {Blob}\n+       */\n+      var blob = chunk;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1184572746",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1184572746",
        "commented_code": "@@ -229,7 +236,39 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      /**\n+       * @type {http.ServerResponse}\n+       */\n+      var _this = this;\n+      /**\n+       * @type {Blob}\n+       */\n+      var blob = chunk;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;",
        "comment_created_at": "2023-05-04T06:01:16+00:00",
        "comment_author": "dougwilson",
        "comment_body": "For any Node.js version where `require('stream/web')` doesn't work, this is going to cause a sync walk of the file system every time, since a `require()` failure is not added to the module cache like a success is. This would ideally be moved to only happen on the loading of this module, not on every single response write.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1589870469",
    "pr_number": 4212,
    "pr_file": "lib/response.js",
    "created_at": "2024-05-04T03:30:08+00:00",
    "commented_code": "});\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1589870469",
        "repo_full_name": "expressjs/express",
        "pr_number": 4212,
        "pr_file": "lib/response.js",
        "discussion_id": "1589870469",
        "commented_code": "@@ -847,7 +872,7 @@ res.redirect = function redirect(url) {\n   });\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
        "comment_created_at": "2024-05-04T03:30:08+00:00",
        "comment_author": "blakeembrey",
        "comment_body": "Any reason for these changes? Since it's internal, presumably we already trust and can use the fast path to just assign?",
        "pr_file_module": null
      },
      {
        "comment_id": "1590096541",
        "repo_full_name": "expressjs/express",
        "pr_number": 4212,
        "pr_file": "lib/response.js",
        "discussion_id": "1589870469",
        "commented_code": "@@ -847,7 +872,7 @@ res.redirect = function redirect(url) {\n   });\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
        "comment_created_at": "2024-05-04T19:21:10+00:00",
        "comment_author": "jonchurch",
        "comment_body": "this part of the diff is lifted from the original work to land this in v4\n\ni didn't really consider that we should drop it\n\nthis diff in v4 was largely bc we accept status as optional param (I think) in a few public methods so wanted to lock it down\n\n\nwill take a closer look, open to your suggestion",
        "pr_file_module": null
      },
      {
        "comment_id": "1594769556",
        "repo_full_name": "expressjs/express",
        "pr_number": 4212,
        "pr_file": "lib/response.js",
        "discussion_id": "1589870469",
        "commented_code": "@@ -847,7 +872,7 @@ res.redirect = function redirect(url) {\n   });\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
        "comment_created_at": "2024-05-08T22:28:43+00:00",
        "comment_author": "blakeembrey",
        "comment_body": "Sounds good, this case is reasonable. The other one is static but I don't have a strong opinion either way, go for it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1602011039",
        "repo_full_name": "expressjs/express",
        "pr_number": 4212,
        "pr_file": "lib/response.js",
        "discussion_id": "1589870469",
        "commented_code": "@@ -847,7 +872,7 @@ res.redirect = function redirect(url) {\n   });\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
        "comment_created_at": "2024-05-15T17:29:38+00:00",
        "comment_author": "wesleytodd",
        "comment_body": "I agree when we can easily have the fast path we should take it. In this case I doubt it is very meaningfully different but longer term it would be great to have better benchmarks in place to track how changes like this could impact the bigger perf picture.",
        "pr_file_module": null
      },
      {
        "comment_id": "1627848550",
        "repo_full_name": "expressjs/express",
        "pr_number": 4212,
        "pr_file": "lib/response.js",
        "discussion_id": "1589870469",
        "commented_code": "@@ -847,7 +872,7 @@ res.redirect = function redirect(url) {\n   });\n \n   // Respond\n-  this.statusCode = status;\n+  this.status(status);",
        "comment_created_at": "2024-06-05T13:59:25+00:00",
        "comment_author": "jonchurch",
        "comment_body": "In this specific case, we still have varaitic inputs for this method, `res.redirect` which accept status. \r\n\r\nSo doing the validation is useful when user provided status codes are in the mix.\r\n\r\nIdk that we have a task tracking reducing the instances of methods having wonky signatures in v5.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "22909152",
    "pr_number": 2437,
    "pr_file": "lib/application.js",
    "created_at": "2015-01-14T00:51:27+00:00",
    "commented_code": "return server.listen.apply(server, arguments);\n };\n \n+/*\n+ * Set a tracer at the application level. Tracer will be activated on\n+ * The tracer function must have the following signature:\n+ *\n+ *  function (app, req, res, event, date, args) ...\n+ *\n+ * @param {function} The tracer to set.\n+ * @return {app} for chaining.\n+ * @api public\n+ */\n+\n+app.instrument = function(tracer){\n+  if (tracer === undefined || typeof tracer  !== 'function')\n+    throw new Error('instrument expects a function');\n+  this.tracers.push(tracer);\n+  return this;\n+};\n+\n+/*\n+ * Call all tracers set on the application. Add context information:\n+ * running app, request, response and date.\n+ *\n+ * @param {Response} Response that fires the tracing event.\n+ * @param {Event} The event to trace.\n+ * @param {Array} Arguments to transmit to the tracker.\n+ *\n+ * @api private\n+ */\n+\n+app._callTracers = function(res, event, args){\n+  var date = new Date();\n+  var app = this;\n+  this.tracers.forEach(function(tracer){",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "22909152",
        "repo_full_name": "expressjs/express",
        "pr_number": 2437,
        "pr_file": "lib/application.js",
        "discussion_id": "22909152",
        "commented_code": "@@ -559,6 +560,43 @@ app.listen = function(){\n   return server.listen.apply(server, arguments);\n };\n \n+/*\n+ * Set a tracer at the application level. Tracer will be activated on\n+ * The tracer function must have the following signature:\n+ *\n+ *  function (app, req, res, event, date, args) ...\n+ *\n+ * @param {function} The tracer to set.\n+ * @return {app} for chaining.\n+ * @api public\n+ */\n+\n+app.instrument = function(tracer){\n+  if (tracer === undefined || typeof tracer  !== 'function')\n+    throw new Error('instrument expects a function');\n+  this.tracers.push(tracer);\n+  return this;\n+};\n+\n+/*\n+ * Call all tracers set on the application. Add context information:\n+ * running app, request, response and date.\n+ *\n+ * @param {Response} Response that fires the tracing event.\n+ * @param {Event} The event to trace.\n+ * @param {Array} Arguments to transmit to the tracker.\n+ *\n+ * @api private\n+ */\n+\n+app._callTracers = function(res, event, args){\n+  var date = new Date();\n+  var app = this;\n+  this.tracers.forEach(function(tracer){",
        "comment_created_at": "2015-01-14T00:51:27+00:00",
        "comment_author": "raymondfeng",
        "comment_body": "I suggest that we use for loop to avoid the performance penalty of closures. See http://jsperf.com/array-foreach-vs-for-loop.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "16668899",
    "pr_number": 2320,
    "pr_file": "lib/view.js",
    "created_at": "2014-08-25T17:47:23+00:00",
    "commented_code": "View.prototype.lookup = function(path){\n   var ext = this.ext;\n+  \n+  if (this.root instanceof Array) {\n+    var context;\n+    var match;\n+    for (var i = 0; i < this.root.length; i++) {\n+      context = { root: this.root[ i ] };\n+      match = this.lookup.call( context , path );",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "16668899",
        "repo_full_name": "expressjs/express",
        "pr_number": 2320,
        "pr_file": "lib/view.js",
        "discussion_id": "16668899",
        "commented_code": "@@ -54,14 +54,25 @@ function View(name, options) {\n \n View.prototype.lookup = function(path){\n   var ext = this.ext;\n+  \n+  if (this.root instanceof Array) {\n+    var context;\n+    var match;\n+    for (var i = 0; i < this.root.length; i++) {\n+      context = { root: this.root[ i ] };\n+      match = this.lookup.call( context , path );",
        "comment_created_at": "2014-08-25T17:47:23+00:00",
        "comment_author": "dougwilson",
        "comment_body": "this creating fake contexts is expensive; could use refactoring somewhere to not need to do this.\n",
        "pr_file_module": null
      }
    ]
  }
]