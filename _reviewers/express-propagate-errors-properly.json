[
  {
    "discussion_id": "1922551031",
    "pr_number": 6286,
    "pr_file": "examples/online/index.js",
    "created_at": "2025-01-20T15:14:24+00:00",
    "commented_code": "// activity tracking, in this case using\n // the UA string, you would use req.user.id etc\n \n-app.use(function(req, res, next){\n-  // fire-and-forget\n-  online.add(req.headers['user-agent']);\n+app.use(async (req, res, next) => {\n+  try {\n+    // fire-and-forget",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1922551031",
        "repo_full_name": "expressjs/express",
        "pr_number": 6286,
        "pr_file": "examples/online/index.js",
        "discussion_id": "1922551031",
        "commented_code": "@@ -27,9 +27,13 @@ var app = express();\n // activity tracking, in this case using\n // the UA string, you would use req.user.id etc\n \n-app.use(function(req, res, next){\n-  // fire-and-forget\n-  online.add(req.headers['user-agent']);\n+app.use(async (req, res, next) => {\n+  try {\n+    // fire-and-forget",
        "comment_created_at": "2025-01-20T15:14:24+00:00",
        "comment_author": "wesleytodd",
        "comment_body": "It is not fire and forget with an `await` and `try/catch`. The original design of this was because they didn't want to fail the request if the write failed and still fall back to the response handling.\r\n\r\nThat said, as an example goes I would prefer we just handle this type of error more robustly to show how. So I would suggest you change the `catch` to not pass the error to next, just `console.error(err)` it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1132468021",
    "pr_number": 5139,
    "pr_file": "lib/response.js",
    "created_at": "2023-03-10T14:44:10+00:00",
    "commented_code": "this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      var response = this;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;\n+        chunk.stream().pipeTo(new WritableStream({\n+          write: function(chunk) {\n+            response.write(chunk,encoding);\n+          },\n+          close: function() {\n+            response.end();\n+          }\n+        }))\n+      } catch(error) {\n+        chunk.arrayBuffer().then(function (result) {\n+          response.end(Buffer.from(result), encoding);\n+        }).catch(function (err) {\n+          response.end();",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1132468021",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1132468021",
        "commented_code": "@@ -229,7 +241,28 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      var response = this;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;\n+        chunk.stream().pipeTo(new WritableStream({\n+          write: function(chunk) {\n+            response.write(chunk,encoding);\n+          },\n+          close: function() {\n+            response.end();\n+          }\n+        }))\n+      } catch(error) {\n+        chunk.arrayBuffer().then(function (result) {\n+          response.end(Buffer.from(result), encoding);\n+        }).catch(function (err) {\n+          response.end();",
        "comment_created_at": "2023-03-10T14:44:10+00:00",
        "comment_author": "dougwilson",
        "comment_body": "If there is an error, it should ideally be forwarded to the error handling pipeline rather than swallow and just ending the response wirh no info.",
        "pr_file_module": null
      },
      {
        "comment_id": "1132494956",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1132468021",
        "commented_code": "@@ -229,7 +241,28 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      var response = this;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;\n+        chunk.stream().pipeTo(new WritableStream({\n+          write: function(chunk) {\n+            response.write(chunk,encoding);\n+          },\n+          close: function() {\n+            response.end();\n+          }\n+        }))\n+      } catch(error) {\n+        chunk.arrayBuffer().then(function (result) {\n+          response.end(Buffer.from(result), encoding);\n+        }).catch(function (err) {\n+          response.end();",
        "comment_created_at": "2023-03-10T15:06:09+00:00",
        "comment_author": "debadutta98",
        "comment_body": "done \ud83d\udc4d",
        "pr_file_module": null
      },
      {
        "comment_id": "1132509937",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1132468021",
        "commented_code": "@@ -229,7 +241,28 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      var response = this;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;\n+        chunk.stream().pipeTo(new WritableStream({\n+          write: function(chunk) {\n+            response.write(chunk,encoding);\n+          },\n+          close: function() {\n+            response.end();\n+          }\n+        }))\n+      } catch(error) {\n+        chunk.arrayBuffer().then(function (result) {\n+          response.end(Buffer.from(result), encoding);\n+        }).catch(function (err) {\n+          response.end();",
        "comment_created_at": "2023-03-10T15:17:57+00:00",
        "comment_author": "dougwilson",
        "comment_body": "It should forward the error to the error handling pipeline, not just output the error directly. May sites what users to see a customized error page and have the error written to their logs, not displayed to the end user. The error pipeline (through error handling middlewares) allows this to be customized.",
        "pr_file_module": null
      },
      {
        "comment_id": "1132649192",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1132468021",
        "commented_code": "@@ -229,7 +241,28 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      var response = this;\n+      try {\n+        var WritableStream = require('stream/web').WritableStream;\n+        chunk.stream().pipeTo(new WritableStream({\n+          write: function(chunk) {\n+            response.write(chunk,encoding);\n+          },\n+          close: function() {\n+            response.end();\n+          }\n+        }))\n+      } catch(error) {\n+        chunk.arrayBuffer().then(function (result) {\n+          response.end(Buffer.from(result), encoding);\n+        }).catch(function (err) {\n+          response.end();",
        "comment_created_at": "2023-03-10T17:23:47+00:00",
        "comment_author": "debadutta98",
        "comment_body": "@dougwilson sorry to misunderstand you please check the current code where I pass the error through `req.next(err)`. I don't know whether I am right or wrong. if I am wrong please let me know the right way to do this.\r\n\r\nThank you \ud83d\ude0a",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1234015098",
    "pr_number": 5139,
    "pr_file": "lib/response.js",
    "created_at": "2023-06-19T12:48:17+00:00",
    "commented_code": "this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      /**\n+       * @type {http.ServerResponse}\n+       */\n+      var res = this;\n+      /**\n+       * @type {Blob}\n+       */\n+      var blob = chunk;\n+\n+      if(typeof blob.stream === 'function') {\n+        var inputStream = Readable.from(blob.stream());\n+        inputStream.on('error', req.next)\n+        res.on('error', req.next)",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1234015098",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1234015098",
        "commented_code": "@@ -229,7 +237,31 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      /**\n+       * @type {http.ServerResponse}\n+       */\n+      var res = this;\n+      /**\n+       * @type {Blob}\n+       */\n+      var blob = chunk;\n+\n+      if(typeof blob.stream === 'function') {\n+        var inputStream = Readable.from(blob.stream());\n+        inputStream.on('error', req.next)\n+        res.on('error', req.next)",
        "comment_created_at": "2023-06-19T12:48:17+00:00",
        "comment_author": "dougwilson",
        "comment_body": "You probably need to remove this handlers before proceeding. The error handler itself that `next` may try to write to `res` and cause an error, and this would end up involing `next` a second time.",
        "pr_file_module": null
      },
      {
        "comment_id": "1234033856",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "lib/response.js",
        "discussion_id": "1234015098",
        "commented_code": "@@ -229,7 +237,31 @@ res.send = function send(body) {\n     this.end();\n   } else {\n     // respond\n-    this.end(chunk, encoding);\n+    if (isChunkBlob) {\n+      /**\n+       * @type {http.ServerResponse}\n+       */\n+      var res = this;\n+      /**\n+       * @type {Blob}\n+       */\n+      var blob = chunk;\n+\n+      if(typeof blob.stream === 'function') {\n+        var inputStream = Readable.from(blob.stream());\n+        inputStream.on('error', req.next)\n+        res.on('error', req.next)",
        "comment_created_at": "2023-06-19T13:02:50+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Also on this res error, it probably means we need to stop the pipe from the blob so it doesn't keep writing to res. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "921511901",
    "pr_number": 4946,
    "pr_file": "examples/clean-architecture/controllers/note.controller.js",
    "created_at": "2022-07-14T19:42:59+00:00",
    "commented_code": "+var path = require(\"path\");\n+var Note = require(path.join(__dirname, \"..\", \"entities\", \"note.entity\"));\n+\n+/**\n+ * Please, note that here I'm not using ES6 classes just for compatibility purposes\n+ * In a real-world application, you should use ES6 classes\n+ */\n+function NoteController(noteUseCase) {\n+  this.noteUseCase = noteUseCase;\n+}\n+\n+NoteController.prototype.getAll = function (req, res) {\n+  var notes = this.noteUseCase.getAll();\n+  res.json(notes);\n+};\n+\n+NoteController.prototype.getById = function (req, res) {\n+  try {\n+    var noteId = parseInt(req.params.id);\n+    var note = this.noteUseCase.getById(noteId);\n+    res.json(note);\n+  } catch (error) {\n+    res.status(404).json(error.message);",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "921511901",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/controllers/note.controller.js",
        "discussion_id": "921511901",
        "commented_code": "@@ -0,0 +1,57 @@\n+var path = require(\"path\");\n+var Note = require(path.join(__dirname, \"..\", \"entities\", \"note.entity\"));\n+\n+/**\n+ * Please, note that here I'm not using ES6 classes just for compatibility purposes\n+ * In a real-world application, you should use ES6 classes\n+ */\n+function NoteController(noteUseCase) {\n+  this.noteUseCase = noteUseCase;\n+}\n+\n+NoteController.prototype.getAll = function (req, res) {\n+  var notes = this.noteUseCase.getAll();\n+  res.json(notes);\n+};\n+\n+NoteController.prototype.getById = function (req, res) {\n+  try {\n+    var noteId = parseInt(req.params.id);\n+    var note = this.noteUseCase.getById(noteId);\n+    res.json(note);\n+  } catch (error) {\n+    res.status(404).json(error.message);",
        "comment_created_at": "2022-07-14T19:42:59+00:00",
        "comment_author": "dougwilson",
        "comment_body": "I'm not sure if the examples should demonstrate that any possible error above should result in a 400. What if the data source to get the note has an issue (like cannot connect to db)? One would normally expect it to 500 rather than 400. I also wonder if these should be using the Express error handling mechanism to respond rather than demo putting a try...catch in every single handler (except `getAll` that doesn't need one for some reason)? The reason I ask is because ideally we want to demo using Express.js and it's features in our demo apps as much as possible.",
        "pr_file_module": null
      },
      {
        "comment_id": "921839482",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/controllers/note.controller.js",
        "discussion_id": "921511901",
        "commented_code": "@@ -0,0 +1,57 @@\n+var path = require(\"path\");\n+var Note = require(path.join(__dirname, \"..\", \"entities\", \"note.entity\"));\n+\n+/**\n+ * Please, note that here I'm not using ES6 classes just for compatibility purposes\n+ * In a real-world application, you should use ES6 classes\n+ */\n+function NoteController(noteUseCase) {\n+  this.noteUseCase = noteUseCase;\n+}\n+\n+NoteController.prototype.getAll = function (req, res) {\n+  var notes = this.noteUseCase.getAll();\n+  res.json(notes);\n+};\n+\n+NoteController.prototype.getById = function (req, res) {\n+  try {\n+    var noteId = parseInt(req.params.id);\n+    var note = this.noteUseCase.getById(noteId);\n+    res.json(note);\n+  } catch (error) {\n+    res.status(404).json(error.message);",
        "comment_created_at": "2022-07-15T06:01:25+00:00",
        "comment_author": "alfonsograziano",
        "comment_body": "In a production environment we will of course differenciate between 400 and 500 errorrs. Since this is a in-memory datastore just to show the pattern the db connection cannot fail and I don't want to add more boilerplate to \"simulate\" db connection failures (since this is not the goal of the example). \r\n\r\nI had used the try/catch also in the getAll but since the getAll function is sync and is not a real call to db cannot fail (at most returns an empty array) so, in order to mantain the code coverage, I have removed the try/catch block from here.\r\n\r\n\"ideally we want to demo using Express.js and it's features in our demo apps as much as possible\" I think it is a great idea! I'll update the code accordingly :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "16327362",
    "pr_number": 2300,
    "pr_file": "lib/response.js",
    "created_at": "2014-08-17T00:03:33+00:00",
    "commented_code": "throw new TypeError('path must be absolute or specify root to res.sendFile');\n   }\n \n-  // socket errors\n-  req.socket.on('error', onerror);\n+  // @todo find a good way to test if request was aborted\n+  if (!req.socket.writable) onabort();\n+  req.on('aborted', onabort);\n+\n+  // abort\n+  function onabort () {\n+    onerror(new Error('Request aborted'));",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "16327362",
        "repo_full_name": "expressjs/express",
        "pr_number": 2300,
        "pr_file": "lib/response.js",
        "discussion_id": "16327362",
        "commented_code": "@@ -364,17 +364,20 @@ res.sendFile = function sendFile(path, options, fn) {\n     throw new TypeError('path must be absolute or specify root to res.sendFile');\n   }\n \n-  // socket errors\n-  req.socket.on('error', onerror);\n+  // @todo find a good way to test if request was aborted\n+  if (!req.socket.writable) onabort();\n+  req.on('aborted', onabort);\n+\n+  // abort\n+  function onabort () {\n+    onerror(new Error('Request aborted'));",
        "comment_created_at": "2014-08-17T00:03:33+00:00",
        "comment_author": "dougwilson",
        "comment_body": "the aborted error should only go to `fn` if there is one; never to `next`. just change it so it doesn't go to `next` :)\n",
        "pr_file_module": null
      }
    ]
  }
]