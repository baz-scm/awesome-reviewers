[
  {
    "discussion_id": "912972253",
    "pr_number": 4946,
    "pr_file": "examples/clean-architecture/routes/notes.route.js",
    "created_at": "2022-07-04T12:49:38+00:00",
    "commented_code": "+var path = require(\"path\")\n+var router = require('../../..').Router();\n+\n+//Database connection (you can change it to use a different database)\n+var NotesRepository = require(path.join(__dirname, '..', 'repositories', 'note.repository'));\n+\n+//Controller class to handle express requests\n+var NotesController = require(path.join(__dirname, '..', 'controllers', 'note.controller'));\n+\n+//Business logic class\n+var NotesUseCase = require(path.join(__dirname, '..', 'use-cases', 'notes'));\n+\n+var db = new NotesRepository()\n+var businessLogic = new NotesUseCase(db)\n+var controller = new NotesController(businessLogic)\n+\n+\n+router.get('/', controller.getAll.bind(controller));\n+router.get('/:id', controller.getById.bind(controller));\n+router.post('/', controller.create.bind(controller));\n+router.patch('/:id', controller.update.bind(controller));",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "912972253",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/routes/notes.route.js",
        "discussion_id": "912972253",
        "commented_code": "@@ -0,0 +1,25 @@\n+var path = require(\"path\")\n+var router = require('../../..').Router();\n+\n+//Database connection (you can change it to use a different database)\n+var NotesRepository = require(path.join(__dirname, '..', 'repositories', 'note.repository'));\n+\n+//Controller class to handle express requests\n+var NotesController = require(path.join(__dirname, '..', 'controllers', 'note.controller'));\n+\n+//Business logic class\n+var NotesUseCase = require(path.join(__dirname, '..', 'use-cases', 'notes'));\n+\n+var db = new NotesRepository()\n+var businessLogic = new NotesUseCase(db)\n+var controller = new NotesController(businessLogic)\n+\n+\n+router.get('/', controller.getAll.bind(controller));\n+router.get('/:id', controller.getById.bind(controller));\n+router.post('/', controller.create.bind(controller));\n+router.patch('/:id', controller.update.bind(controller));",
        "comment_created_at": "2022-07-04T12:49:38+00:00",
        "comment_author": "bozzelliandrea",
        "comment_body": "HI @lokk3d \r\nIt's probably better a PUT http verb here? or just for the example you can consider  to implement both, so a patch with only a field update and a put for update the entire entity (or the exposed properties).",
        "pr_file_module": null
      },
      {
        "comment_id": "913056675",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/routes/notes.route.js",
        "discussion_id": "912972253",
        "commented_code": "@@ -0,0 +1,25 @@\n+var path = require(\"path\")\n+var router = require('../../..').Router();\n+\n+//Database connection (you can change it to use a different database)\n+var NotesRepository = require(path.join(__dirname, '..', 'repositories', 'note.repository'));\n+\n+//Controller class to handle express requests\n+var NotesController = require(path.join(__dirname, '..', 'controllers', 'note.controller'));\n+\n+//Business logic class\n+var NotesUseCase = require(path.join(__dirname, '..', 'use-cases', 'notes'));\n+\n+var db = new NotesRepository()\n+var businessLogic = new NotesUseCase(db)\n+var controller = new NotesController(businessLogic)\n+\n+\n+router.get('/', controller.getAll.bind(controller));\n+router.get('/:id', controller.getById.bind(controller));\n+router.post('/', controller.create.bind(controller));\n+router.patch('/:id', controller.update.bind(controller));",
        "comment_created_at": "2022-07-04T14:26:27+00:00",
        "comment_author": "alfonsograziano",
        "comment_body": "Hi, thanks for the advice! I have made the changes suggested :) ",
        "pr_file_module": null
      },
      {
        "comment_id": "913071812",
        "repo_full_name": "expressjs/express",
        "pr_number": 4946,
        "pr_file": "examples/clean-architecture/routes/notes.route.js",
        "discussion_id": "912972253",
        "commented_code": "@@ -0,0 +1,25 @@\n+var path = require(\"path\")\n+var router = require('../../..').Router();\n+\n+//Database connection (you can change it to use a different database)\n+var NotesRepository = require(path.join(__dirname, '..', 'repositories', 'note.repository'));\n+\n+//Controller class to handle express requests\n+var NotesController = require(path.join(__dirname, '..', 'controllers', 'note.controller'));\n+\n+//Business logic class\n+var NotesUseCase = require(path.join(__dirname, '..', 'use-cases', 'notes'));\n+\n+var db = new NotesRepository()\n+var businessLogic = new NotesUseCase(db)\n+var controller = new NotesController(businessLogic)\n+\n+\n+router.get('/', controller.getAll.bind(controller));\n+router.get('/:id', controller.getById.bind(controller));\n+router.post('/', controller.create.bind(controller));\n+router.patch('/:id', controller.update.bind(controller));",
        "comment_created_at": "2022-07-04T14:45:37+00:00",
        "comment_author": "bozzelliandrea",
        "comment_body": "Nice!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1209523782",
    "pr_number": 5139,
    "pr_file": "test/res.send.js",
    "created_at": "2023-05-29T19:28:34+00:00",
    "commented_code": "})\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "1209523782",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-05-29T19:28:34+00:00",
        "comment_author": "jimmywarting",
        "comment_body": "I would not have assumed that it would append `charset=utf-8`\r\n\r\nthat's not what happens if you would do it with `Response()`\r\n\r\n```js\r\nonfetch = evt => evt.respondWith(\r\n  new Response(\r\n    new Blob(['<p>'], { type: 'text/html' })\r\n  ) // .headers.get('content-type') === 'text/html'\r\n)\r\n```\r\nif you intend to have charset added then the type should have been set to it when constructing the blob\r\n```js\r\nnew Blob([str], { type: 'text/html; charset=utf-8' });\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1209525193",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-05-29T19:32:43+00:00",
        "comment_author": "dougwilson",
        "comment_body": "I agree. The `Blob` is just a byte stream, so whatever the `type` is shouldn't be touched, as Express has no way to know what the charset is of the bytestream.",
        "pr_file_module": null
      },
      {
        "comment_id": "1209541927",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-05-29T20:21:04+00:00",
        "comment_author": "jimmywarting",
        "comment_body": "Another thing that the `XMLHttpRequest` and `fetch` api dose is that you are able to override the `content-type` header. \r\n\r\n`content-type` is only added from `blob`s type if `content-type` haven't been set\r\n\r\nso by doing this:\r\n```js\r\nconst blob = new Blob([], { type: 'text/plain '})\r\nconst xhr = new XMLHttpRequest()\r\nxhr.setRequestHeader('content-type', 'text/html')\r\nxhr.open('POST', url)\r\nxhr.send()\r\n```\r\n...would result in a `content-type` request header being set to `text/html` (not the blob's own type)\r\ntwo `content-type` headers would not have been sent.\r\n\r\nSo with that said i would like to also mention that if somebody where to write / set a `content-type` header themself manually. then express should not try to add `content-type` header originating from the blob's own `type`",
        "pr_file_module": null
      },
      {
        "comment_id": "1209543208",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-05-29T20:24:18+00:00",
        "comment_author": "dougwilson",
        "comment_body": "Makes sense. I think that is what this pr is already doing, but if not, it shouldn't set the type if already set, which is what all the other arguments to send do.",
        "pr_file_module": null
      },
      {
        "comment_id": "1209714112",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-05-30T05:13:38+00:00",
        "comment_author": "debadutta98",
        "comment_body": "> Makes sense. I think that is what this pr is already doing, but if not, it shouldn't set the type if already set, which is what all the other arguments to send do.\r\n\r\n@dougwilson Yes, it is already there",
        "pr_file_module": null
      },
      {
        "comment_id": "1229627355",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-06-14T13:31:14+00:00",
        "comment_author": "dougwilson",
        "comment_body": "I'm not sure why this was marked resolved, as nothing was fixed and the issue @jimmywarting mentioned with adding charset is still there.",
        "pr_file_module": null
      },
      {
        "comment_id": "1229824514",
        "repo_full_name": "expressjs/express",
        "pr_number": 5139,
        "pr_file": "test/res.send.js",
        "discussion_id": "1209523782",
        "commented_code": "@@ -250,6 +250,77 @@ describe('res', function(){\n     })\n   })\n \n+  describe('.send(Blob)', function(){\n+    var Blob = require('buffer').Blob;\n+\n+    it('should send as blob type', function (done) {\n+      if (Blob) {\n+        var str = '<h1>express app</h1>';\n+        var blob = new Blob([str], { type: 'text/html' });\n+        var app = express();\n+        app.use(function (req, res) {\n+          res.send(blob);\n+        });\n+\n+        request(app)\n+        .get('/')\n+        .expect('Content-Type','text/html; charset=utf-8')",
        "comment_created_at": "2023-06-14T15:37:05+00:00",
        "comment_author": "debadutta98",
        "comment_body": "hi @dougwilson, sorry to miss this point by @jimmywarting. now it is fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "34324048",
    "pr_number": 2619,
    "pr_file": "lib/response.js",
    "created_at": "2015-07-10T02:35:48+00:00",
    "commented_code": "*      last: 'http://api.example.com/users?page=5'\n  *    });\n  *\n- * @param {Object} links\n+ *    res.links([{\n+ *          href: 'http://api.example.com/users?page=2',\n+ *          rel: 'next',\n+ *          title: 'next chapter',\n+ *          type: 'text/plain;charset=UTF-8'\n+ *      }, {\n+ *          href: 'http://api.example.com/users?page=5',\n+ *          rel: 'last',\n+ *          title: 'last chapter',\n+ *          type: 'text/plain;charset=UTF-8'\n+ *      }]);\n+ *\n+ *\n+ * @param {Object|Array} links\n  * @return {ServerResponse}\n  * @api public\n  */\n \n-res.links = function(links){\n+res.links = function(links) {\n   var link = this.get('Link') || '';\n   if (link) link += ', ';\n-  return this.set('Link', link + Object.keys(links).map(function(rel){\n-    return '<' + links[rel] + '>; rel=\"' + rel + '\"';\n-  }).join(', '));\n-};\n+  if (Array.isArray(links)) { \n+    for (var i = 0; i < links.length; i++) { \n+      if (i !== 0) link += ', '; // do not prepend ', ' if it's the first link\n+      link += '<' + links[i].href + '>; ';\n+      delete links[i].href; // already appended\n+      link += Object.keys(links[i]).map(function(key) { return key + '=\"' + links[i][key] + '\"'; }).join('; ');",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "34324048",
        "repo_full_name": "expressjs/express",
        "pr_number": 2619,
        "pr_file": "lib/response.js",
        "discussion_id": "34324048",
        "commented_code": "@@ -61,18 +61,41 @@ res.status = function(code){\n  *      last: 'http://api.example.com/users?page=5'\n  *    });\n  *\n- * @param {Object} links\n+ *    res.links([{\n+ *          href: 'http://api.example.com/users?page=2',\n+ *          rel: 'next',\n+ *          title: 'next chapter',\n+ *          type: 'text/plain;charset=UTF-8'\n+ *      }, {\n+ *          href: 'http://api.example.com/users?page=5',\n+ *          rel: 'last',\n+ *          title: 'last chapter',\n+ *          type: 'text/plain;charset=UTF-8'\n+ *      }]);\n+ *\n+ *\n+ * @param {Object|Array} links\n  * @return {ServerResponse}\n  * @api public\n  */\n \n-res.links = function(links){\n+res.links = function(links) {\n   var link = this.get('Link') || '';\n   if (link) link += ', ';\n-  return this.set('Link', link + Object.keys(links).map(function(rel){\n-    return '<' + links[rel] + '>; rel=\"' + rel + '\"';\n-  }).join(', '));\n-};\n+  if (Array.isArray(links)) { \n+    for (var i = 0; i < links.length; i++) { \n+      if (i !== 0) link += ', '; // do not prepend ', ' if it's the first link\n+      link += '<' + links[i].href + '>; ';\n+      delete links[i].href; // already appended\n+      link += Object.keys(links[i]).map(function(key) { return key + '=\"' + links[i][key] + '\"'; }).join('; ');",
        "comment_created_at": "2015-07-10T02:35:48+00:00",
        "comment_author": "dougwilson",
        "comment_body": "We cal always be more restrictive than the spec and then loosen up later (but not the other way around), so alphanumerics would at least be a start :)\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "16258664",
    "pr_number": 2297,
    "pr_file": "lib/response.js",
    "created_at": "2014-08-14T18:58:50+00:00",
    "commented_code": "};\n \n /**\n+ * Send given HTTP status code.\n+ *\n+ * Sets the response status to `statusCode` and the body of the\n+ * response to the standard description from node's http.STATUS_CODES.\n+ * \n+ * Examples:\n+ *\n+ *     res.sendStatus(200);\n+ *\n+ * @param {number} statusCode\n+ * @api public\n+ */\n+\n+res.sendStatus = function sendStatus(statusCode) {\n+  this.status(statusCode).end(http.STATUS_CODES[statusCode]);",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "16258664",
        "repo_full_name": "expressjs/express",
        "pr_number": 2297,
        "pr_file": "lib/response.js",
        "discussion_id": "16258664",
        "commented_code": "@@ -303,6 +303,24 @@ res.jsonp = function jsonp(obj) {\n };\n \n /**\n+ * Send given HTTP status code.\n+ *\n+ * Sets the response status to `statusCode` and the body of the\n+ * response to the standard description from node's http.STATUS_CODES.\n+ * \n+ * Examples:\n+ *\n+ *     res.sendStatus(200);\n+ *\n+ * @param {number} statusCode\n+ * @api public\n+ */\n+\n+res.sendStatus = function sendStatus(statusCode) {\n+  this.status(statusCode).end(http.STATUS_CODES[statusCode]);",
        "comment_created_at": "2014-08-14T18:58:50+00:00",
        "comment_author": "ritch",
        "comment_body": "Should probably use `res.send()` instead of `res.end()`.\n\n`res.send()` will set the `Content-Type` header, remove unused headers, and maintain the same behavior as `res.send(status)`.\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "686089",
    "pr_number": 1020,
    "pr_file": "lib/request.js",
    "created_at": "2012-04-15T17:07:47+00:00",
    "commented_code": "// normalize extensions \".json\" -> \"json\"\n   if (type && '.' == type[0]) type = type.substr(1);\n \n-  // when Accept does not exist, or is '*/*' return true \n-  if (!accept || '*/*' == accept) {\n+  // when Accept does not exist, or contains '*/*' return true\n+  if (!accept || ~accept.indexOf('*/*')) {",
    "repo_full_name": "expressjs/express",
    "discussion_comments": [
      {
        "comment_id": "686089",
        "repo_full_name": "expressjs/express",
        "pr_number": 1020,
        "pr_file": "lib/request.js",
        "discussion_id": "686089",
        "commented_code": "@@ -135,8 +135,8 @@ req.accepts = function(type){\n   // normalize extensions \".json\" -> \"json\"\n   if (type && '.' == type[0]) type = type.substr(1);\n \n-  // when Accept does not exist, or is '*/*' return true \n-  if (!accept || '*/*' == accept) {\n+  // when Accept does not exist, or contains '*/*' return true\n+  if (!accept || ~accept.indexOf('*/*')) {",
        "comment_created_at": "2012-04-15T17:07:47+00:00",
        "comment_author": "tj",
        "comment_body": "in 3x you can also now do `req.accepts(['json', 'html'])` which returns the acceptable type (if any) which is probably more what you're looking for, this variant will not return a random value even with _/_, that's up to the user to default\n",
        "pr_file_module": null
      }
    ]
  }
]