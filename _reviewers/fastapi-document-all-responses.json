[
  {
    "discussion_id": "1961096750",
    "pr_number": 13366,
    "pr_file": "docs/en/docs/tutorial/body.md",
    "created_at": "2025-02-19T07:24:26+00:00",
    "commented_code": "## Create your data model\n \n-Then you declare your data model as a class that inherits from `BaseModel`.\n+Then you declare your data model as a class that inherits from `BaseModel`. These classes will be the containers for the various requests and responses you intend to implement.\n \n-Use standard Python types for all the attributes:\n+`BaseModel` will handle the data validation of all requests and responses for you.  All you do is declare what type each attribute is supposed to have.  Use standard Python types for the attributes:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1961096750",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13366,
        "pr_file": "docs/en/docs/tutorial/body.md",
        "discussion_id": "1961096750",
        "commented_code": "@@ -26,9 +26,9 @@ First, you need to import `BaseModel` from `pydantic`:\n \n ## Create your data model\n \n-Then you declare your data model as a class that inherits from `BaseModel`.\n+Then you declare your data model as a class that inherits from `BaseModel`. These classes will be the containers for the various requests and responses you intend to implement.\n \n-Use standard Python types for all the attributes:\n+`BaseModel` will handle the data validation of all requests and responses for you.  All you do is declare what type each attribute is supposed to have.  Use standard Python types for the attributes:",
        "comment_created_at": "2025-02-19T07:24:26+00:00",
        "comment_author": "svlandeg",
        "comment_body": "```suggestion\r\n`BaseModel` will handle the data validation of all requests and responses for you.  All you have to do is declare what type each attribute is supposed to have.  Use standard Python types for the attributes:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1981087561",
    "pr_number": 13407,
    "pr_file": "docs/vi/docs/deployment/cloud.md",
    "created_at": "2025-03-05T10:07:38+00:00",
    "commented_code": "+# Triển khai FastAPI trên các Dịch vụ Cloud\n+\n+Bạn có thể sử dụng **bất kỳ nhà cung cấp dịch vụ cloud** nào để triển khai ứng dụng FastAPI của mình.\n+\n+Trong hầu hết các trường hợp, các nhà cung cấp dịch vụ cloud có hướng dẫn để triển khai FastAPI với chúng.\n+\n+## Nhà cung cấp dịch vụ Cloud - Nhà tài trợ\n+Một vài nhà cung cấp dịch vụ cloud ✨ [**tài trợ FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, điều này đảm bảo sự phát triển liên tục và khỏe mạnh của FastAPI và hệ sinh thái của nó.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1981087561",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13407,
        "pr_file": "docs/vi/docs/deployment/cloud.md",
        "discussion_id": "1981087561",
        "commented_code": "@@ -0,0 +1,17 @@\n+# Triển khai FastAPI trên các Dịch vụ Cloud\n+\n+Bạn có thể sử dụng **bất kỳ nhà cung cấp dịch vụ cloud** nào để triển khai ứng dụng FastAPI của mình.\n+\n+Trong hầu hết các trường hợp, các nhà cung cấp dịch vụ cloud có hướng dẫn để triển khai FastAPI với chúng.\n+\n+## Nhà cung cấp dịch vụ Cloud - Nhà tài trợ\n+Một vài nhà cung cấp dịch vụ cloud ✨ [**tài trợ FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, điều này đảm bảo sự phát triển liên tục và khỏe mạnh của FastAPI và hệ sinh thái của nó.",
        "comment_created_at": "2025-03-05T10:07:38+00:00",
        "comment_author": "MrL8199",
        "comment_body": "```suggestion\r\nMột vài nhà cung cấp dịch vụ cloud ✨ [**tài trợ cho FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, điều này giúp đảm bảo sự phát triển liên tục và khỏe mạnh của FastAPI và hệ sinh thái của nó.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1746833642",
    "pr_number": 12137,
    "pr_file": "docs/es/docs/advanced/additional-responses.md",
    "created_at": "2024-09-06T09:36:42+00:00",
    "commented_code": "+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si apenas estas empezando con **FastAPI**, Puede que no necesites esto.\n+\n+///\n+\n+\n+Tú puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones y varias cosas adicionales.\n+\n+Ten en cuenta que estas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional con un `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de Open Api.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda retornar un objeto JSON (con el tipo de medio `application/json`) or una imagen PNG:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1746833642",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12137,
        "pr_file": "docs/es/docs/advanced/additional-responses.md",
        "discussion_id": "1746833642",
        "commented_code": "@@ -0,0 +1,257 @@\n+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si apenas estas empezando con **FastAPI**, Puede que no necesites esto.\n+\n+///\n+\n+\n+Tú puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones y varias cosas adicionales.\n+\n+Ten en cuenta que estas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional con un `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de Open Api.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda retornar un objeto JSON (con el tipo de medio `application/json`) or una imagen PNG:",
        "comment_created_at": "2024-09-06T09:36:42+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nPor ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1748051711",
    "pr_number": 12137,
    "pr_file": "docs/es/docs/advanced/additional-responses.md",
    "created_at": "2024-09-07T11:14:36+00:00",
    "commented_code": "+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1748051711",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12137,
        "pr_file": "docs/es/docs/advanced/additional-responses.md",
        "discussion_id": "1748051711",
        "commented_code": "@@ -0,0 +1,257 @@\n+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.",
        "comment_created_at": "2024-09-07T11:14:36+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nPero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto `JSONResponse` directamente, el cual debe incluir el código de estado y el contenido.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1748052126",
    "pr_number": 12137,
    "pr_file": "docs/es/docs/advanced/additional-responses.md",
    "created_at": "2024-09-07T11:16:47+00:00",
    "commented_code": "+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1748052126",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12137,
        "pr_file": "docs/es/docs/advanced/additional-responses.md",
        "discussion_id": "1748052126",
        "commented_code": "@@ -0,0 +1,257 @@\n+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.",
        "comment_created_at": "2024-09-07T11:16:47+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nCada uno de estos `dict`s soporta una key `model`, la cual contiene un modelo de Pydantic, de forma similar al parámetro `response_model`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1748062857",
    "pr_number": 12137,
    "pr_file": "docs/es/docs/advanced/additional-responses.md",
    "created_at": "2024-09-07T11:58:06+00:00",
    "commented_code": "+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model` no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de OpenAPI.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1748062857",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12137,
        "pr_file": "docs/es/docs/advanced/additional-responses.md",
        "discussion_id": "1748062857",
        "commented_code": "@@ -0,0 +1,257 @@\n+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model` no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de OpenAPI.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:",
        "comment_created_at": "2024-09-07T11:58:06+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nPor ejemplo, puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1107858970",
    "pr_number": 5466,
    "pr_file": "docs/es/docs/tutorial/response-status-code.md",
    "created_at": "2023-02-15T23:50:41+00:00",
    "commented_code": "+# Response Status Code\n+\n+De la misma manera que puedes especificar un modelo de respuesta, también puedes declarar codigos de estado HTTP\n+usados para la respuesta con el parametro `status_code` en cualquiera de los *path operations*:\n+\n+- `@app.get()`\n+- `@app.post()`\n+- `@app.put()`\n+- `@app.delete()`\n+- etc.\n+\n+```Python hl_lines=\"6\"\n+{!../../../docs_src/response_status_code/tutorial001.py!}\n+```\n+\n+!!! note\n+    Toma en cuenta que `status_code` es un parámetro del método del \"decorador\" (`get`, `post`, etc)-\n+No de la función de tu *path operation*, como todos los parámetros y cuerpo.\n+\n+\n+El parámetro `status_code` recibe un número con el código del estado HTTP.\n+\n+!!! info\n+   `status_code` puede alternamente recibir un `IntEnum`, como <a href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" class=\"external-link\" target=\"_blank\">`http.HTTPStatus`</a> de Python.\n+\n+Será:\n+\n+- Retorna ese código de estado en la respuesta.\n+- Documentado como en el OpenAPI \"schema\" (además, en la interfaz de usuario):\n+\n+<img src=\"../../../en/docs/img/tutorial/response-status-code/image01.png\">\n+\n+\n+!!! note\n+    Algunos códigos de respuesta (ve la siguiente sección) indica que la respuesta no tiene body.\n+\n+```\n+FastAPI sabe esto, y producirá documentatión OpenAPI diciendo que no hay body en la respuesta.\n+```\n+\n+# Acerca de los códigos de estado HTTP.\n+\n+!!! note\n+    Si ya sabes lo que son los códigos de estado HTTP, salta a la siguiente sección.\n+\n+En HTTP, tu envías un código de estado de tres dígitos como parte de la respuesta.\n+\n+Estos códigos de estado tienen un nombre asociado para reconocerlos, pero lo más importante es el número.\n+\n+En resumen:\n+\n+ - `100` en adelante son para \"Información\". Rara vez los usas directamente. Las respuestas con estos códigos de estado no tienen body.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1107858970",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 5466,
        "pr_file": "docs/es/docs/tutorial/response-status-code.md",
        "discussion_id": "1107858970",
        "commented_code": "@@ -0,0 +1,105 @@\n+# Response Status Code\n+\n+De la misma manera que puedes especificar un modelo de respuesta, también puedes declarar codigos de estado HTTP\n+usados para la respuesta con el parametro `status_code` en cualquiera de los *path operations*:\n+\n+- `@app.get()`\n+- `@app.post()`\n+- `@app.put()`\n+- `@app.delete()`\n+- etc.\n+\n+```Python hl_lines=\"6\"\n+{!../../../docs_src/response_status_code/tutorial001.py!}\n+```\n+\n+!!! note\n+    Toma en cuenta que `status_code` es un parámetro del método del \"decorador\" (`get`, `post`, etc)-\n+No de la función de tu *path operation*, como todos los parámetros y cuerpo.\n+\n+\n+El parámetro `status_code` recibe un número con el código del estado HTTP.\n+\n+!!! info\n+   `status_code` puede alternamente recibir un `IntEnum`, como <a href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" class=\"external-link\" target=\"_blank\">`http.HTTPStatus`</a> de Python.\n+\n+Será:\n+\n+- Retorna ese código de estado en la respuesta.\n+- Documentado como en el OpenAPI \"schema\" (además, en la interfaz de usuario):\n+\n+<img src=\"../../../en/docs/img/tutorial/response-status-code/image01.png\">\n+\n+\n+!!! note\n+    Algunos códigos de respuesta (ve la siguiente sección) indica que la respuesta no tiene body.\n+\n+```\n+FastAPI sabe esto, y producirá documentatión OpenAPI diciendo que no hay body en la respuesta.\n+```\n+\n+# Acerca de los códigos de estado HTTP.\n+\n+!!! note\n+    Si ya sabes lo que son los códigos de estado HTTP, salta a la siguiente sección.\n+\n+En HTTP, tu envías un código de estado de tres dígitos como parte de la respuesta.\n+\n+Estos códigos de estado tienen un nombre asociado para reconocerlos, pero lo más importante es el número.\n+\n+En resumen:\n+\n+ - `100` en adelante son para \"Información\". Rara vez los usas directamente. Las respuestas con estos códigos de estado no tienen body.",
        "comment_created_at": "2023-02-15T23:50:41+00:00",
        "comment_author": "erudin",
        "comment_body": "```suggestion\r\n - `100` en adelante son para \"Información\". Rara vez los usas directamente. Las respuestas con estos códigos de estado no tienen cuerpo.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1748062997",
    "pr_number": 12137,
    "pr_file": "docs/es/docs/advanced/additional-responses.md",
    "created_at": "2024-09-07T11:59:00+00:00",
    "commented_code": "+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model` no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de OpenAPI.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:\n+\n+```Python hl_lines=\"19-24  28\"\n+{!../../../docs_src/additional_responses/tutorial002.py!}\n+```\n+\n+/// note\n+\n+Nota que debes retornar la imagen usando una `FileResponse` directamente.\n+\n+///\n+\n+\n+/// info\n+\n+Amenos que especifiques explícitamente en tu parámetro `responses` un tipo de medio diferente, FastAPI asumirá que la respuesta tiene el mismo tipo de medio que las clase de respuesta principal (por defecto `application/json`).",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1748062997",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12137,
        "pr_file": "docs/es/docs/advanced/additional-responses.md",
        "discussion_id": "1748062997",
        "commented_code": "@@ -0,0 +1,257 @@\n+# Respuestas adicionales en OpenAPI\n+\n+/// warning\n+\n+Este es un tema bastante avanzado.\n+\n+Si estás comenzando con **FastAPI**, es posible que no lo necesites.\n+\n+///\n+\n+\n+Puedes declarar respuestas adicionales, que contengan códigos de estado, tipos de medio, descripciones, etc.\n+\n+Esas respuestas adicionales se incluirán en el esquema OpenAPI, por lo que también aparecerán en la documentación de la API.\n+\n+Pero para que esas respuestas adicionales funcionen, tienes que asegurarte de que devuelves un `Response` como un objeto`JSONResponse` directamente, el cual debe incluir código de estado y contenido.\n+\n+## Respuesta Adicional usando `model`\n+\n+Puedes pasar un parámetro `responses` a los *path operation decorators*.\n+\n+Este parámetro recibe un objeto `dict`, cuyas keys son los códigos de estado para cada respuesta, por ejemplo 200, y  sus valores son otro `dict` con la información necesaria para cada una de las respuestas.\n+\n+Cada uno de estos `dict`s soporta una key `model`, la cual contenga un modelo de Pydantic, de forma similar al parámetro `response_model`.\n+\n+**FastAPI** utilizará ese modelo, para generar su propio JSON Schema y lo incluirá en el lugar correcto dentro de OpenAPI.\n+\n+Por ejemplo, al declarar otra respuesta con un código de estado `404` y un modelo de Pydantic `Message`, lo puedes escribir de esta forma:\n+\n+```Python hl_lines=\"18  22\"\n+{!../../../docs_src/additional_responses/tutorial001.py!}\n+```\n+\n+/// note\n+\n+Mantén en mente debes retornar el objeto `JSONResponse` directamente.\n+\n+///\n+\n+/// info\n+\n+La key `model` no es parte de OpenAPI.\n+\n+**FastAPI** lo tomará desde el modelo de Pydantic para generar el JSON Schema, y colocarlo en el lugar correcto.\n+\n+El lugar correcto es:\n+\n+* Dentro de la key `content`, cuyo valor es otro objeto tipo JSON (`dict`), compuesto de:\n+    * Una key con el tipo de medio, e.j. `application/json`, el cual contenga como valor otro objeto JSON, con la siguiente estructura:\n+        * Una key `schema`, cuyo valor es el esquema JSON para el modelo, este es el lugar correcto.\n+            *  **FastAPI** añade una referencia en este lugar hacia el esquema global JSON ubicado en otro sitio dentro de tu OpenAPI en lugar de incluirlo directamente, proveyendo una mejor herramienta de generación de código.\n+\n+///\n+\n+Las respuestas generadas en OpenAPI para este *path operation* serán:\n+\n+```JSON hl_lines=\"3-12\"\n+{\n+    \"responses\": {\n+        \"404\": {\n+            \"description\": \"Additional Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Message\"\n+                    }\n+                }\n+            }\n+        },\n+        \"200\": {\n+            \"description\": \"Successful Response\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/Item\"\n+                    }\n+                }\n+            }\n+        },\n+        \"422\": {\n+            \"description\": \"Validation Error\",\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+Los schemas están referenciados a otro lugar dentro del esquema de OpenAPI.\n+\n+```JSON hl_lines=\"4-16\"\n+{\n+    \"components\": {\n+        \"schemas\": {\n+            \"Message\": {\n+                \"title\": \"Message\",\n+                \"required\": [\n+                    \"message\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"message\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\n+                    \"id\",\n+                    \"value\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\n+                        \"title\": \"Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"value\": {\n+                        \"title\": \"Value\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\n+                    \"loc\",\n+                    \"msg\",\n+                    \"type\"\n+                ],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    }\n+                }\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+## Tipos de medio adicionales para la respuesta principal\n+\n+Puedes utilizar los mismos parámetros en tus `responses` para añadir diferentes tipos de medio en la misma respuesta principal.\n+\n+Por ejemplo, Puedes añadir un tipo de medio adicional de `image/png`, declarando que tu *path operation* pueda devolver un objeto JSON (con el tipo de medio `application/json`) o una imagen PNG:\n+\n+```Python hl_lines=\"19-24  28\"\n+{!../../../docs_src/additional_responses/tutorial002.py!}\n+```\n+\n+/// note\n+\n+Nota que debes retornar la imagen usando una `FileResponse` directamente.\n+\n+///\n+\n+\n+/// info\n+\n+Amenos que especifiques explícitamente en tu parámetro `responses` un tipo de medio diferente, FastAPI asumirá que la respuesta tiene el mismo tipo de medio que las clase de respuesta principal (por defecto `application/json`).",
        "comment_created_at": "2024-09-07T11:59:00+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nA menos que especifiques explícitamente en tu parámetro `responses` un tipo de medio diferente, FastAPI asumirá que la respuesta tiene el mismo tipo de medio que la clase de respuesta principal (por defecto `application/json`).\r\n```",
        "pr_file_module": null
      }
    ]
  }
]