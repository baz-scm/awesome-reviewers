[
  {
    "discussion_id": "2156652035",
    "pr_number": 11207,
    "pr_file": "docs/tr/docs/tutorial/body-fields.md",
    "created_at": "2025-06-19T10:14:32+00:00",
    "commented_code": "+# Gövde - Alanlar\n+\n+*Yol operasyon fonksiyonlarındaki* parametreler için `Query`, `Path` ve `Body` ifadeleri ile ek doğrulama ve üstveri tanımlayabileceğiniz gibi Pydantic'in `Field` ifadesini kullanarak Pydantic modelleri içerisinde de doğrulama ve üstveri tanımı yapabilirsiniz.\n+\n+## `Field` İfadesini İçeri Aktaralım\n+\n+Öncelikle, ifadeyi içeri aktarmamız gerekir:\n+\n+{* ../../docs_src/body_fields/tutorial001_an_py310.py hl[4] *}\n+\n+/// warning | Uyarı\n+\n+Fark ettiyseniz, `Field` ifadesi diğer ifadelerin (`Query`, `Path`, `Body`, vb) aksine `fastapi` paketinden değil direkt olarak `pydantic` paketinden içeri aktarılmıştır.\n+\n+///\n+\n+## Model Özellikleri Tanımları\n+\n+Sonrasında, `Field` ifadesini model özellikleri ile kullanabilirsiniz:\n+\n+{* ../../docs_src/body_fields/tutorial001_an_py310.py hl[11:14] *}\n+\n+`Field` ifadesi `Query`, `Path` ve `Body` ifadeleri gibi çalışır ve aynı parametrelere sahiptir vb.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2156652035",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11207,
        "pr_file": "docs/tr/docs/tutorial/body-fields.md",
        "discussion_id": "2156652035",
        "commented_code": "@@ -0,0 +1,61 @@\n+# Gövde - Alanlar\n+\n+*Yol operasyon fonksiyonlarındaki* parametreler için `Query`, `Path` ve `Body` ifadeleri ile ek doğrulama ve üstveri tanımlayabileceğiniz gibi Pydantic'in `Field` ifadesini kullanarak Pydantic modelleri içerisinde de doğrulama ve üstveri tanımı yapabilirsiniz.\n+\n+## `Field` İfadesini İçeri Aktaralım\n+\n+Öncelikle, ifadeyi içeri aktarmamız gerekir:\n+\n+{* ../../docs_src/body_fields/tutorial001_an_py310.py hl[4] *}\n+\n+/// warning | Uyarı\n+\n+Fark ettiyseniz, `Field` ifadesi diğer ifadelerin (`Query`, `Path`, `Body`, vb) aksine `fastapi` paketinden değil direkt olarak `pydantic` paketinden içeri aktarılmıştır.\n+\n+///\n+\n+## Model Özellikleri Tanımları\n+\n+Sonrasında, `Field` ifadesini model özellikleri ile kullanabilirsiniz:\n+\n+{* ../../docs_src/body_fields/tutorial001_an_py310.py hl[11:14] *}\n+\n+`Field` ifadesi `Query`, `Path` ve `Body` ifadeleri gibi çalışır ve aynı parametrelere sahiptir vb.",
        "comment_created_at": "2025-06-19T10:14:32+00:00",
        "comment_author": "Rekl0w",
        "comment_body": "This sentence needs examples for the `vb` word. Like `(örneğin title, description, example, gt, max_length gibi).`. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921020493",
    "pr_number": 11889,
    "pr_file": "docs/ja/docs/tutorial/bigger-applications.md",
    "created_at": "2025-01-18T08:25:16+00:00",
    "commented_code": "+# より大きなアプリケーションの構造 <!-- # Bigger Applications - Multiple Files -->\n+\n+<!-- If you are building an application or a web API, it's rarely the case that you can put everything on a single file. -->\n+\n+アプリケーションや Web API を構築するとき、コードを 1 つのファイルにまとめることはまずありません。\n+\n+<!-- _FastAPI_provides a convenience tool to structure your application while keeping all the flexibility. -->\n+\n+_FastAPI_ は、柔軟性を保ちつつ、アプリケーションを構築できる便利なツールです。\n+\n+/// info | \"情報\"\n+\n+<!-- If you come from Flask, this would be the equivalent of Flask's Blueprints. -->\n+\n+Flask を知っているなら、これは Flask の Blueprint に相当するものです。\n+\n+///\n+\n+<!-- ## An example file structure -->\n+\n+## ファイル構成例\n+\n+<!-- Let's say you have a file structure like this: -->\n+\n+例えば、以下のようなファイル構成があるとします:\n+\n+```\n+.\n+├── app\n+│   ├── __init__.py\n+│   ├── main.py\n+│   ├── dependencies.py\n+│   └── routers\n+│   │   ├── __init__.py\n+│   │   ├── items.py\n+│   │   └── users.py\n+│   └── internal\n+│       ├── __init__.py\n+│       └── admin.py\n+```\n+\n+/// tip | \"豆知識\"\n+\n+<!-- There are several `__init__.py` files: one in each directory or subdirectory. -->\n+\n+`__init__.py`ファイルが、各ディレクトリ、サブディレクトリに 1 つずつ配置されています。\n+\n+<!-- This is what allows importing code from one file into another. -->\n+\n+こうすることで、ほかのファイルからファイルをインポートすることができるようになります。\n+\n+<!-- For example, in `app/main.py` you could have a line like: -->\n+\n+例えば、`app/main.py`に、以下のようにファイルをインポートすることができます。\n+\n+```\n+from app.routers import items\n+```\n+\n+///\n+\n+<!--\n+* It contains an `app/main.py` file. As it is inside a Python package (a directory with a file `__init__.py`), it is a \"module\" of that package: `app.main`.\n+* There's also an `app/dependencies.py` file, just like `app/main.py`, it is a \"module\": `app.dependencies`.\n+* There's a subdirectory `app/routers/` with another file `__init__.py`, so it's a \"Python subpackage\": `app.routers`.\n+* The file `app/routers/items.py` is inside a package, `app/routers/`, so, it's a submodule: `app.routers.items`.\n+* The same with `app/routers/users.py`, it's another submodule: `app.routers.users`.\n+* There's also a subdirectory `app/internal/` with another file `__init__.py`, so it's another \"Python subpackage\": `app.internal`.\n+* And the file `app/internal/admin.py` is another submodule: `app.internal.admin`.\n+-->\n+\n+- `app/main.py`ファイルは、Python パッケージ( `__init__.py`ファイルがあるディレクトリ)の中にあり、`app.main`という \"モジュール\" になります。\n+- `app/main.py`と同じように、`app/dependencies.py`ファイルがあり、`app.dependencies`という \"モジュール\" になります。\n+- `app/routers/`サブディレクトリには、`__init__.py`ファイルがあり、`app.routers`という \"Python サブパッケージ\" になります。\n+- `app/routers/items.py`ファイルは、`app/routers/`パッケージの中にあるので、`app.routers.items`というサブモジュールになります。\n+- `app/outers/users.py`ファイルも、`app/routers/`パッケージの中にあるので、`app.routers.items`というサブモジュールになります。\n+- `app/internal/`サブディレクトリにも`__init__.py`というファイルがあるので、これも`app.internal`という \"Python サブパッケージ\" になります。\n+- `app/internal/admin.py`と`app.internal.admin`もサブモジュールになります。\n+\n+<img src=\"/img/tutorial/bigger-applications/package.svg\">\n+\n+<!-- Let's say you have a file structure like this: -->\n+\n+ファイル構成をコメント付きで表すと、以下のようになります:\n+\n+```\n+.\n+├── app                  # \"app\"はPythonパッケージ\n+│   ├── __init__.py      # \"app\"を\"Pythonパッケージにするファイル\n+│   ├── main.py          # \"main\"モジュール 例. import app.main\n+│   ├── dependencies.py  # \"dependencies\"モジュール。 例. import app.dependencies\n+│   └── routers          # \"routers\"は\"Pythonサブパッケージ\"\n+│   │   ├── __init__.py  # \"routers\"を\"Pythonサブパッケージ\"にするファイル\n+│   │   ├── items.py     # \"items\"サブモジュール 例. import app.routers.items\n+│   │   └── users.py     # \"users\"サブモジュール 例. import app.routers.users\n+│   └── internal         # \"internal\"は\"Pythonサブパッケージ\"\n+│       ├── __init__.py  # \"internal\"を\"Pythonサブパッケージ\"にするファイル\n+│       └── admin.py     # \"admin\"サブモジュール 例. import app.internal.admin\n+```\n+\n+## `APIRouter`\n+\n+<!-- Let's say the file dedicated to handling just users is the submodule at `/app/routers/users.py`. -->\n+\n+`/app/routers/users.py`サブモジュールは、ユーザーだけを扱う専用のファイルにするとします。\n+\n+<!-- You want to have the *path operations* related to your users separated from the rest of the code, to keep it organized. -->\n+\n+ユーザーに関する _path operation_ を、他のコードから分離して整理した状態にしたいのです。\n+\n+<!-- But it's still part of the same _FastAPI_application/web API (it's part of the same \"Python Package\"). -->\n+\n+しかし、分離したとしても、この部分はいまだ *FastAPI*アプリケーション/Web API の一部のままとなるのです(同じ「Python パッケージ」の一部となります)。\n+\n+<!-- You can create the *path operations* for that module using `APIRouter`. -->\n+\n+`APIRouter`を使用して、このモジュールを _path operation_ として作成します。\n+\n+<!-- ### Import `APIRouter` -->\n+\n+### `APIRouter`のインポート\n+\n+<!-- You import it and create an \"instance\" the same way you would with the class `FastAPI`: -->\n+\n+APIRouter をインポートして、`FastAPI`クラスと同じように\"インスタンス\"化します:\n+\n+```Python hl_lines=\"1  3\" title=\"app/routers/users.py\"\n+{!../../../docs_src/bigger_applications/app/routers/users.py!}\n+```\n+\n+<!-- ### *Path operations* with `APIRouter` -->\n+\n+### `APIRouter`と _path operation_\n+\n+<!-- And then you use it to declare your *path operations*. -->\n+\n+APIRouter を使用して _path operation_ を宣言します。\n+\n+<!-- Use it the same way you would use the `FastAPI` class: -->\n+\n+これは`FastAPI`クラスの使い方と同じ使い方になります:\n+\n+```Python hl_lines=\"6  11  16\" title=\"app/routers/users.py\"\n+{!../../../docs_src/bigger_applications/app/routers/users.py!}\n+```\n+\n+<!-- You can think of `APIRouter` as a \"mini `FastAPI`\" class. -->\n+\n+`APIRouter`を\"小さな`FastAPI`\"クラスと考えることができます。\n+\n+<!-- All the same options are supported. -->\n+\n+すべて同じオプションがサポートされます。\n+\n+<!-- All the same `parameters`, `responses`, `dependencies`, `tags`, etc. -->\n+\n+`parameters`、`responses`、`dependencies`、`tags`など、すべて同じオプションになります。\n+\n+/// tip | \"豆知識\"\n+\n+<!-- In this example, the variable is called `router`, but you can name it however you want. -->\n+\n+この例では、`router`という変数名にしていますが、好きな名前をつけることができます。\n+\n+///\n+\n+<!-- We are going to include this `APIRouter` in the main `FastAPI` app, but first, let's check the dependencies and another `APIRouter`. -->\n+\n+この`APIRouter`をメインの`FastAPI`アプリに組み込む前に、依存関係と他の`APIRouter`を確認してみましょう。\n+\n+<!-- ## Dependencies -->\n+\n+## 依存関係\n+\n+<!-- We see that we are going to need some dependencies used in several places of the application. -->\n+\n+アプリケーションのいくつかの場所では、依存関係が必要となることがあります。\n+\n+<!-- So we put them in their own `dependencies` module (`app/dependencies.py`). -->\n+\n+そこで、依存関係を`dependencies`モジュール(`app/dependencies.py`)にまとめてみました。\n+\n+<!-- We will now use a simple dependency to read a custom `X-Token` header: -->\n+\n+ここでは、カスタムの`X-Token`ヘッダーを読み込むために、シンプルな依存関係を使用してみましょう：\n+\n+//// tab | \"Python 3.9+\"\n+\n+    ```Python hl_lines=\"3  6-8\" title=\"app/dependencies.py\"\n+    {!> ../../../docs_src/bigger_applications/app_an_py39/dependencies.py!}\n+    ```\n+\n+////",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1921020493",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11889,
        "pr_file": "docs/ja/docs/tutorial/bigger-applications.md",
        "discussion_id": "1921020493",
        "commented_code": "@@ -0,0 +1,871 @@\n+# より大きなアプリケーションの構造 <!-- # Bigger Applications - Multiple Files -->\n+\n+<!-- If you are building an application or a web API, it's rarely the case that you can put everything on a single file. -->\n+\n+アプリケーションや Web API を構築するとき、コードを 1 つのファイルにまとめることはまずありません。\n+\n+<!-- _FastAPI_provides a convenience tool to structure your application while keeping all the flexibility. -->\n+\n+_FastAPI_ は、柔軟性を保ちつつ、アプリケーションを構築できる便利なツールです。\n+\n+/// info | \"情報\"\n+\n+<!-- If you come from Flask, this would be the equivalent of Flask's Blueprints. -->\n+\n+Flask を知っているなら、これは Flask の Blueprint に相当するものです。\n+\n+///\n+\n+<!-- ## An example file structure -->\n+\n+## ファイル構成例\n+\n+<!-- Let's say you have a file structure like this: -->\n+\n+例えば、以下のようなファイル構成があるとします:\n+\n+```\n+.\n+├── app\n+│   ├── __init__.py\n+│   ├── main.py\n+│   ├── dependencies.py\n+│   └── routers\n+│   │   ├── __init__.py\n+│   │   ├── items.py\n+│   │   └── users.py\n+│   └── internal\n+│       ├── __init__.py\n+│       └── admin.py\n+```\n+\n+/// tip | \"豆知識\"\n+\n+<!-- There are several `__init__.py` files: one in each directory or subdirectory. -->\n+\n+`__init__.py`ファイルが、各ディレクトリ、サブディレクトリに 1 つずつ配置されています。\n+\n+<!-- This is what allows importing code from one file into another. -->\n+\n+こうすることで、ほかのファイルからファイルをインポートすることができるようになります。\n+\n+<!-- For example, in `app/main.py` you could have a line like: -->\n+\n+例えば、`app/main.py`に、以下のようにファイルをインポートすることができます。\n+\n+```\n+from app.routers import items\n+```\n+\n+///\n+\n+<!--\n+* It contains an `app/main.py` file. As it is inside a Python package (a directory with a file `__init__.py`), it is a \"module\" of that package: `app.main`.\n+* There's also an `app/dependencies.py` file, just like `app/main.py`, it is a \"module\": `app.dependencies`.\n+* There's a subdirectory `app/routers/` with another file `__init__.py`, so it's a \"Python subpackage\": `app.routers`.\n+* The file `app/routers/items.py` is inside a package, `app/routers/`, so, it's a submodule: `app.routers.items`.\n+* The same with `app/routers/users.py`, it's another submodule: `app.routers.users`.\n+* There's also a subdirectory `app/internal/` with another file `__init__.py`, so it's another \"Python subpackage\": `app.internal`.\n+* And the file `app/internal/admin.py` is another submodule: `app.internal.admin`.\n+-->\n+\n+- `app/main.py`ファイルは、Python パッケージ( `__init__.py`ファイルがあるディレクトリ)の中にあり、`app.main`という \"モジュール\" になります。\n+- `app/main.py`と同じように、`app/dependencies.py`ファイルがあり、`app.dependencies`という \"モジュール\" になります。\n+- `app/routers/`サブディレクトリには、`__init__.py`ファイルがあり、`app.routers`という \"Python サブパッケージ\" になります。\n+- `app/routers/items.py`ファイルは、`app/routers/`パッケージの中にあるので、`app.routers.items`というサブモジュールになります。\n+- `app/outers/users.py`ファイルも、`app/routers/`パッケージの中にあるので、`app.routers.items`というサブモジュールになります。\n+- `app/internal/`サブディレクトリにも`__init__.py`というファイルがあるので、これも`app.internal`という \"Python サブパッケージ\" になります。\n+- `app/internal/admin.py`と`app.internal.admin`もサブモジュールになります。\n+\n+<img src=\"/img/tutorial/bigger-applications/package.svg\">\n+\n+<!-- Let's say you have a file structure like this: -->\n+\n+ファイル構成をコメント付きで表すと、以下のようになります:\n+\n+```\n+.\n+├── app                  # \"app\"はPythonパッケージ\n+│   ├── __init__.py      # \"app\"を\"Pythonパッケージにするファイル\n+│   ├── main.py          # \"main\"モジュール 例. import app.main\n+│   ├── dependencies.py  # \"dependencies\"モジュール。 例. import app.dependencies\n+│   └── routers          # \"routers\"は\"Pythonサブパッケージ\"\n+│   │   ├── __init__.py  # \"routers\"を\"Pythonサブパッケージ\"にするファイル\n+│   │   ├── items.py     # \"items\"サブモジュール 例. import app.routers.items\n+│   │   └── users.py     # \"users\"サブモジュール 例. import app.routers.users\n+│   └── internal         # \"internal\"は\"Pythonサブパッケージ\"\n+│       ├── __init__.py  # \"internal\"を\"Pythonサブパッケージ\"にするファイル\n+│       └── admin.py     # \"admin\"サブモジュール 例. import app.internal.admin\n+```\n+\n+## `APIRouter`\n+\n+<!-- Let's say the file dedicated to handling just users is the submodule at `/app/routers/users.py`. -->\n+\n+`/app/routers/users.py`サブモジュールは、ユーザーだけを扱う専用のファイルにするとします。\n+\n+<!-- You want to have the *path operations* related to your users separated from the rest of the code, to keep it organized. -->\n+\n+ユーザーに関する _path operation_ を、他のコードから分離して整理した状態にしたいのです。\n+\n+<!-- But it's still part of the same _FastAPI_application/web API (it's part of the same \"Python Package\"). -->\n+\n+しかし、分離したとしても、この部分はいまだ *FastAPI*アプリケーション/Web API の一部のままとなるのです(同じ「Python パッケージ」の一部となります)。\n+\n+<!-- You can create the *path operations* for that module using `APIRouter`. -->\n+\n+`APIRouter`を使用して、このモジュールを _path operation_ として作成します。\n+\n+<!-- ### Import `APIRouter` -->\n+\n+### `APIRouter`のインポート\n+\n+<!-- You import it and create an \"instance\" the same way you would with the class `FastAPI`: -->\n+\n+APIRouter をインポートして、`FastAPI`クラスと同じように\"インスタンス\"化します:\n+\n+```Python hl_lines=\"1  3\" title=\"app/routers/users.py\"\n+{!../../../docs_src/bigger_applications/app/routers/users.py!}\n+```\n+\n+<!-- ### *Path operations* with `APIRouter` -->\n+\n+### `APIRouter`と _path operation_\n+\n+<!-- And then you use it to declare your *path operations*. -->\n+\n+APIRouter を使用して _path operation_ を宣言します。\n+\n+<!-- Use it the same way you would use the `FastAPI` class: -->\n+\n+これは`FastAPI`クラスの使い方と同じ使い方になります:\n+\n+```Python hl_lines=\"6  11  16\" title=\"app/routers/users.py\"\n+{!../../../docs_src/bigger_applications/app/routers/users.py!}\n+```\n+\n+<!-- You can think of `APIRouter` as a \"mini `FastAPI`\" class. -->\n+\n+`APIRouter`を\"小さな`FastAPI`\"クラスと考えることができます。\n+\n+<!-- All the same options are supported. -->\n+\n+すべて同じオプションがサポートされます。\n+\n+<!-- All the same `parameters`, `responses`, `dependencies`, `tags`, etc. -->\n+\n+`parameters`、`responses`、`dependencies`、`tags`など、すべて同じオプションになります。\n+\n+/// tip | \"豆知識\"\n+\n+<!-- In this example, the variable is called `router`, but you can name it however you want. -->\n+\n+この例では、`router`という変数名にしていますが、好きな名前をつけることができます。\n+\n+///\n+\n+<!-- We are going to include this `APIRouter` in the main `FastAPI` app, but first, let's check the dependencies and another `APIRouter`. -->\n+\n+この`APIRouter`をメインの`FastAPI`アプリに組み込む前に、依存関係と他の`APIRouter`を確認してみましょう。\n+\n+<!-- ## Dependencies -->\n+\n+## 依存関係\n+\n+<!-- We see that we are going to need some dependencies used in several places of the application. -->\n+\n+アプリケーションのいくつかの場所では、依存関係が必要となることがあります。\n+\n+<!-- So we put them in their own `dependencies` module (`app/dependencies.py`). -->\n+\n+そこで、依存関係を`dependencies`モジュール(`app/dependencies.py`)にまとめてみました。\n+\n+<!-- We will now use a simple dependency to read a custom `X-Token` header: -->\n+\n+ここでは、カスタムの`X-Token`ヘッダーを読み込むために、シンプルな依存関係を使用してみましょう：\n+\n+//// tab | \"Python 3.9+\"\n+\n+    ```Python hl_lines=\"3  6-8\" title=\"app/dependencies.py\"\n+    {!> ../../../docs_src/bigger_applications/app_an_py39/dependencies.py!}\n+    ```\n+\n+////",
        "comment_created_at": "2025-01-18T08:25:16+00:00",
        "comment_author": "k94-ishi",
        "comment_body": "tab内が私の方ではうまく表示されないのですが、確認いただけますか？\r\nソースの方を確認すると、インデントが入っていない＋ファイルパス　に違いがあったので、ソースに合わせると正常に表示されるようになりました。他のコード部分も確認必要かと思います。\r\nhttps://github.com/fastapi/fastapi/blob/ea0cdd120c39b34aca6ea592832d7fa43944d34d/docs/en/docs/tutorial/bigger-applications.md?plain=1#L124-L130",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946357772",
    "pr_number": 13327,
    "pr_file": "docs/ru/docs/advanced/response-cookies.md",
    "created_at": "2025-02-07T11:03:51+00:00",
    "commented_code": "+\n+# Cookies в ответе\n+\n+## Использование параметра Response\n+\n+Вы можете объявить параметр типа `Response` в вашей функции обработки маршрута.\n+\n+Затем вы можете установить cookies в этом временном объекте ответа.\n+\n+{* ../../docs_src/response_cookies/tutorial002.py hl[1, 8:9] *}\n+\n+После этого можно вернуть любой объект, как и раньше (например, `dict`, объект модели базы данных и так далее).\n+\n+Если вы указали `response_model`, он всё равно будет использоваться для фильтрации и преобразования возвращаемого объекта.\n+\n+**FastAPI** создаст временный ответ, чтобы добавить cookies (а также заголовки и коды состояния), и включит их в окончательный ответ, содержащий ваше возвращаемое значение, отфильтрованное через `response_model`.\n+\n+Вы также можете объявить `Response` в качестве зависимости и устанавливать cookies (и заголовки) в этом объекте.\n+\n+## Возвращение Response напрямую\n+\n+Вы также можете установить cookies, если возвращаете `Response` напрямую в вашем коде.\n+\n+Для этого создайте объект `Response`, как описано в разделе [Возвращение ответа напрямую](response-directly.md){.target=_blank}.\n+\n+Затем установите cookies и верните этот объект:\n+\n+{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}\n+\n+/// **Подсказка**",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1946357772",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13327,
        "pr_file": "docs/ru/docs/advanced/response-cookies.md",
        "discussion_id": "1946357772",
        "commented_code": "@@ -0,0 +1,48 @@\n+\n+# Cookies в ответе\n+\n+## Использование параметра Response\n+\n+Вы можете объявить параметр типа `Response` в вашей функции обработки маршрута.\n+\n+Затем вы можете установить cookies в этом временном объекте ответа.\n+\n+{* ../../docs_src/response_cookies/tutorial002.py hl[1, 8:9] *}\n+\n+После этого можно вернуть любой объект, как и раньше (например, `dict`, объект модели базы данных и так далее).\n+\n+Если вы указали `response_model`, он всё равно будет использоваться для фильтрации и преобразования возвращаемого объекта.\n+\n+**FastAPI** создаст временный ответ, чтобы добавить cookies (а также заголовки и коды состояния), и включит их в окончательный ответ, содержащий ваше возвращаемое значение, отфильтрованное через `response_model`.\n+\n+Вы также можете объявить `Response` в качестве зависимости и устанавливать cookies (и заголовки) в этом объекте.\n+\n+## Возвращение Response напрямую\n+\n+Вы также можете установить cookies, если возвращаете `Response` напрямую в вашем коде.\n+\n+Для этого создайте объект `Response`, как описано в разделе [Возвращение ответа напрямую](response-directly.md){.target=_blank}.\n+\n+Затем установите cookies и верните этот объект:\n+\n+{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}\n+\n+/// **Подсказка**",
        "comment_created_at": "2025-02-07T11:03:51+00:00",
        "comment_author": "Rishat-F",
        "comment_body": "Для этих \"информационных окошек\" есть четкое правило как переводить:\r\n\r\n> You can translate info boxes like /// warning with for example /// warning | Achtung. But do not change the word immediately after the ///, it determines the color of the info box.\r\n\r\n[FastAPI Development - Contributing](https://fastapi.tiangolo.com/contributing/#translation-specific-tips-and-guidelines)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946358714",
    "pr_number": 13327,
    "pr_file": "docs/ru/docs/advanced/response-cookies.md",
    "created_at": "2025-02-07T11:04:37+00:00",
    "commented_code": "+\n+# Cookies в ответе\n+\n+## Использование параметра Response\n+\n+Вы можете объявить параметр типа `Response` в вашей функции обработки маршрута.\n+\n+Затем вы можете установить cookies в этом временном объекте ответа.\n+\n+{* ../../docs_src/response_cookies/tutorial002.py hl[1, 8:9] *}\n+\n+После этого можно вернуть любой объект, как и раньше (например, `dict`, объект модели базы данных и так далее).\n+\n+Если вы указали `response_model`, он всё равно будет использоваться для фильтрации и преобразования возвращаемого объекта.\n+\n+**FastAPI** создаст временный ответ, чтобы добавить cookies (а также заголовки и коды состояния), и включит их в окончательный ответ, содержащий ваше возвращаемое значение, отфильтрованное через `response_model`.\n+\n+Вы также можете объявить `Response` в качестве зависимости и устанавливать cookies (и заголовки) в этом объекте.\n+\n+## Возвращение Response напрямую\n+\n+Вы также можете установить cookies, если возвращаете `Response` напрямую в вашем коде.\n+\n+Для этого создайте объект `Response`, как описано в разделе [Возвращение ответа напрямую](response-directly.md){.target=_blank}.\n+\n+Затем установите cookies и верните этот объект:\n+\n+{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}\n+\n+/// **Подсказка**\n+Имейте в виду, что если вы возвращаете ответ напрямую, вместо использования параметра `Response`, **FastAPI** отправит его без дополнительной обработки.\n+\n+Убедитесь, что ваши данные имеют корректный тип. Например, они должны быть совместимы с JSON, если вы используете `JSONResponse`.\n+\n+Также убедитесь, что вы не отправляете данные, которые должны были быть отфильтрованы через `response_model`.\n+///\n+\n+### Дополнительная информация\n+\n+/// **Подсказка | Технические детали**",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1946358714",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13327,
        "pr_file": "docs/ru/docs/advanced/response-cookies.md",
        "discussion_id": "1946358714",
        "commented_code": "@@ -0,0 +1,48 @@\n+\n+# Cookies в ответе\n+\n+## Использование параметра Response\n+\n+Вы можете объявить параметр типа `Response` в вашей функции обработки маршрута.\n+\n+Затем вы можете установить cookies в этом временном объекте ответа.\n+\n+{* ../../docs_src/response_cookies/tutorial002.py hl[1, 8:9] *}\n+\n+После этого можно вернуть любой объект, как и раньше (например, `dict`, объект модели базы данных и так далее).\n+\n+Если вы указали `response_model`, он всё равно будет использоваться для фильтрации и преобразования возвращаемого объекта.\n+\n+**FastAPI** создаст временный ответ, чтобы добавить cookies (а также заголовки и коды состояния), и включит их в окончательный ответ, содержащий ваше возвращаемое значение, отфильтрованное через `response_model`.\n+\n+Вы также можете объявить `Response` в качестве зависимости и устанавливать cookies (и заголовки) в этом объекте.\n+\n+## Возвращение Response напрямую\n+\n+Вы также можете установить cookies, если возвращаете `Response` напрямую в вашем коде.\n+\n+Для этого создайте объект `Response`, как описано в разделе [Возвращение ответа напрямую](response-directly.md){.target=_blank}.\n+\n+Затем установите cookies и верните этот объект:\n+\n+{* ../../docs_src/response_cookies/tutorial001.py hl[10:12] *}\n+\n+/// **Подсказка**\n+Имейте в виду, что если вы возвращаете ответ напрямую, вместо использования параметра `Response`, **FastAPI** отправит его без дополнительной обработки.\n+\n+Убедитесь, что ваши данные имеют корректный тип. Например, они должны быть совместимы с JSON, если вы используете `JSONResponse`.\n+\n+Также убедитесь, что вы не отправляете данные, которые должны были быть отфильтрованы через `response_model`.\n+///\n+\n+### Дополнительная информация\n+\n+/// **Подсказка | Технические детали**",
        "comment_created_at": "2025-02-07T11:04:37+00:00",
        "comment_author": "Rishat-F",
        "comment_body": "Для этих \"информационных окошек\" есть четкое правило как переводить:\r\n\r\n> You can translate info boxes like /// warning with for example /// warning | Achtung. But do not change the word immediately after the ///, it determines the color of the info box.\r\n\r\n[FastAPI Development - Contributing](https://fastapi.tiangolo.com/contributing/#translation-specific-tips-and-guidelines)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946663731",
    "pr_number": 13327,
    "pr_file": "docs/en/docs/advanced/response-cookies.md",
    "created_at": "2025-02-07T14:57:18+00:00",
    "commented_code": "And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.\n \n ///\n-\n+Технические детали",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1946663731",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13327,
        "pr_file": "docs/en/docs/advanced/response-cookies.md",
        "discussion_id": "1946663731",
        "commented_code": "@@ -47,5 +47,5 @@ You could also use `from starlette.responses import Response` or `from starlette\n And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.\n \n ///\n-\n+Технические детали",
        "comment_created_at": "2025-02-07T14:57:18+00:00",
        "comment_author": "Rishat-F",
        "comment_body": "En документацию при переводе не стоит трогать",
        "pr_file_module": null
      },
      {
        "comment_id": "1947249184",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13327,
        "pr_file": "docs/en/docs/advanced/response-cookies.md",
        "discussion_id": "1946663731",
        "commented_code": "@@ -47,5 +47,5 @@ You could also use `from starlette.responses import Response` or `from starlette\n And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.\n \n ///\n-\n+Технические детали",
        "comment_created_at": "2025-02-07T21:59:22+00:00",
        "comment_author": "alejsdev",
        "comment_body": "Hi @Stepakinoyan, please revert this change. :sweat_smile: ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1946545671",
    "pr_number": 13265,
    "pr_file": "docs/ko/docs/advanced/custom-response.md",
    "created_at": "2025-02-07T13:43:38+00:00",
    "commented_code": "+# 사용자 정의 응답 - HTML, Stream, 파일, 기타\n+\n+기본적으로, **FastAPI** 응답을 `JSONResponse`를 사용하여 반환합니다.\n+\n+이를 재정의 하려면 [응답을 직접 반환하기](response-directly.md){.internal-link target=_blank}에서 본 것처럼 `Response`를 직접 반환하면 됩니다.\n+\n+그러나 `Response` (또는 `JSONResponse`와 같은 하위 클래스)를 직접 반환하면, 데이터가 자동으로 변환되지 않으며 (심지어 `response_model`을 선언했더라도), 문서화가 자동으로 생성되지 않습니다(예를 들어, 생성된 OpenAPI의 일부로 HTTP 헤더 `Content-Type`에 특정 \"미디어 타입\"을 포함하는 경우).\n+\n+하지만 *경로 작업 데코레이터*에서 `response_class` 매개변수를 사용하여 원하는 `Response`(예: 모든 `Response` 하위 클래스)를 선언할 수도 있습니다.\n+\n+*경로 작업 함수*에서 반환하는 내용은 해당 `Response`안에 포함됩니다.\n+\n+그리고 만약 그 `Response`가 `JSONResponse`와 `UJSONResponse`의 경우 처럼 JSON 미디어 타입(`application/json`)을 가지고 있다면, *경로 작업 데코레이터*에서 선언한 Pydantic의 `response_model`을 사용해 자동으로 변환(및 필터링) 됩니다.\n+\n+/// note | 참고\n+\n+미디어 타입이 없는 응답 클래스를 사용하는 경우, FastAPI는 응답에 내용이 없을 것으로 예상하므로 생성된 OpenAPI 문서에서 응답 형식을 문서화하지 않습니다.\n+\n+///\n+\n+## `ORJSONResponse` 사용하기\n+\n+예를 들어, 성능을 극대화하려는 경우, <a href=\"https://github.com/ijl/orjson\" class=\"external-link\" target=\"_blank\">orjson</a>을 설치하여 사용하고 응답을 `ORJSONResponse`로 설정 할수 있습니다.\n+\n+사용하고자 하는 `Response` 클래스(하위 클래스)를 가져와서 **경로 작동 테코레이터*에서 선언하세요.\n+\n+대규모 응답의 경우, 사전을 반환하는 것보다 `Response`를 반환하는 것이 훨씬 빠릅니다.\n+\n+이유는 기본적으로, FastAPI가 내부의 모든 항목을 검사하고 JSON으로 직렬화할 수 있는지 확인하기 때문입니다. 이는 사용자 안내서에서 설명된 [JSON 호환 가능 인코더](../tutorial/encoder.md){.internal-link target=_blank}를 사용하는 방식과 동일합니다. 이를 통해 데이터베이스 모델과 같은 **임의의 객체**를 반환할 수 있습니다.\n+\n+하지만 반환하는 내용이 **JSON으로 직렬화 가능**하다고 확신하는 경우, 해당 내용을 응답 클래스에 직접 전달할 수 있으며, FastAPI가 반환 내용을 `jsonable_encoder`를 통해 처리한 뒤 응답 클래스에 전달하는 추가적인 시간을 피할 수 있습니다.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1946545671",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13265,
        "pr_file": "docs/ko/docs/advanced/custom-response.md",
        "discussion_id": "1946545671",
        "commented_code": "@@ -0,0 +1,313 @@\n+# 사용자 정의 응답 - HTML, Stream, 파일, 기타\n+\n+기본적으로, **FastAPI** 응답을 `JSONResponse`를 사용하여 반환합니다.\n+\n+이를 재정의 하려면 [응답을 직접 반환하기](response-directly.md){.internal-link target=_blank}에서 본 것처럼 `Response`를 직접 반환하면 됩니다.\n+\n+그러나 `Response` (또는 `JSONResponse`와 같은 하위 클래스)를 직접 반환하면, 데이터가 자동으로 변환되지 않으며 (심지어 `response_model`을 선언했더라도), 문서화가 자동으로 생성되지 않습니다(예를 들어, 생성된 OpenAPI의 일부로 HTTP 헤더 `Content-Type`에 특정 \"미디어 타입\"을 포함하는 경우).\n+\n+하지만 *경로 작업 데코레이터*에서 `response_class` 매개변수를 사용하여 원하는 `Response`(예: 모든 `Response` 하위 클래스)를 선언할 수도 있습니다.\n+\n+*경로 작업 함수*에서 반환하는 내용은 해당 `Response`안에 포함됩니다.\n+\n+그리고 만약 그 `Response`가 `JSONResponse`와 `UJSONResponse`의 경우 처럼 JSON 미디어 타입(`application/json`)을 가지고 있다면, *경로 작업 데코레이터*에서 선언한 Pydantic의 `response_model`을 사용해 자동으로 변환(및 필터링) 됩니다.\n+\n+/// note | 참고\n+\n+미디어 타입이 없는 응답 클래스를 사용하는 경우, FastAPI는 응답에 내용이 없을 것으로 예상하므로 생성된 OpenAPI 문서에서 응답 형식을 문서화하지 않습니다.\n+\n+///\n+\n+## `ORJSONResponse` 사용하기\n+\n+예를 들어, 성능을 극대화하려는 경우, <a href=\"https://github.com/ijl/orjson\" class=\"external-link\" target=\"_blank\">orjson</a>을 설치하여 사용하고 응답을 `ORJSONResponse`로 설정 할수 있습니다.\n+\n+사용하고자 하는 `Response` 클래스(하위 클래스)를 가져와서 **경로 작동 테코레이터*에서 선언하세요.\n+\n+대규모 응답의 경우, 사전을 반환하는 것보다 `Response`를 반환하는 것이 훨씬 빠릅니다.\n+\n+이유는 기본적으로, FastAPI가 내부의 모든 항목을 검사하고 JSON으로 직렬화할 수 있는지 확인하기 때문입니다. 이는 사용자 안내서에서 설명된 [JSON 호환 가능 인코더](../tutorial/encoder.md){.internal-link target=_blank}를 사용하는 방식과 동일합니다. 이를 통해 데이터베이스 모델과 같은 **임의의 객체**를 반환할 수 있습니다.\n+\n+하지만 반환하는 내용이 **JSON으로 직렬화 가능**하다고 확신하는 경우, 해당 내용을 응답 클래스에 직접 전달할 수 있으며, FastAPI가 반환 내용을 `jsonable_encoder`를 통해 처리한 뒤 응답 클래스에 전달하는 추가적인 시간을 피할 수 있습니다.",
        "comment_created_at": "2025-02-07T13:43:38+00:00",
        "comment_author": "timothy-jeong",
        "comment_body": "In my opinion, translating \"overhead\" simply as \"추가적인 시간\" is a somewhat limited interpretation. Generally, \"overhead\" doesn't refer solely to time but to the extra processing cost (e.g., time, memory, computation, etc.) incurred when performing a particular task or process.\r\n\r\nCurrently, there isn't an established translation for \"overhead\" in the Korean version of the documentation. Moreover, in [the German translation of the FastAPI benchmarks document](https://fastapi.tiangolo.com/de/benchmarks/)—which is one of the most frequently referenced sources for this term—\"overhead\" is left unchanged. Considering these examples, it might be best for us to use \"overhead\" as is in our translation, to avoid any confusion and to convey the original meaning accurately.\r\n\r\nTherefore, instead of translating \"overhead\" as \"추가적인 시간,\" it's preferable to leave it as \"오버헤드.\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "619585421",
    "pr_number": 3125,
    "pr_file": "docs/es/docs/tutorial/query-params-str-validations.md",
    "created_at": "2021-04-24T04:19:47+00:00",
    "commented_code": "}\n ```\n \n-#### Using `list`\n+#### Usando `list`\n \n-You can also use `list` directly instead of `List[str]`:\n+También puedes usar `list` directamente en lugar de `List[str]`:\n \n ```Python hl_lines=\"7\"\n {!../../../docs_src/query_params_str_validations/tutorial013.py!}\n ```\n \n-!!! note\n-    Have in mind that in this case, FastAPI won't check the contents of the list.\n+!!! nota\n+    Ten en cuenta que, en este caso, FastAPI no comprobará el contenido de la lista\n \n-    For example, `List[int]` would check (and document) that the contents of the list are integers. But `list` alone wouldn't.\n+    Por ejemplo, `List[int]` comprobaría (y documentaria) que el contenido de la lista son números enteros. Pero la `list` sola no lo haría.\n \n-## Declare more metadata\n+## Declare más metadatos\n \n-You can add more information about the parameter.\n+Puede agregar más información sobre el parámetro.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "619585421",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3125,
        "pr_file": "docs/es/docs/tutorial/query-params-str-validations.md",
        "discussion_id": "619585421",
        "commented_code": "@@ -207,97 +208,97 @@ the default of `q` will be: `[\"foo\", \"bar\"]` and your response will be:\n }\n ```\n \n-#### Using `list`\n+#### Usando `list`\n \n-You can also use `list` directly instead of `List[str]`:\n+También puedes usar `list` directamente en lugar de `List[str]`:\n \n ```Python hl_lines=\"7\"\n {!../../../docs_src/query_params_str_validations/tutorial013.py!}\n ```\n \n-!!! note\n-    Have in mind that in this case, FastAPI won't check the contents of the list.\n+!!! nota\n+    Ten en cuenta que, en este caso, FastAPI no comprobará el contenido de la lista\n \n-    For example, `List[int]` would check (and document) that the contents of the list are integers. But `list` alone wouldn't.\n+    Por ejemplo, `List[int]` comprobaría (y documentaria) que el contenido de la lista son números enteros. Pero la `list` sola no lo haría.\n \n-## Declare more metadata\n+## Declare más metadatos\n \n-You can add more information about the parameter.\n+Puede agregar más información sobre el parámetro.",
        "comment_created_at": "2021-04-24T04:19:47+00:00",
        "comment_author": "psaezc",
        "comment_body": "-- Puede\r\n++ Puedes\r\n\r\n(Revisar este punto en el texto general; todo el texto trata al lector de manera informal. Eso debe mantenerse a lo largo de toda la documentación).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1877852914",
    "pr_number": 13030,
    "pr_file": "docs/pt/docs/advanced/generate-clients.md",
    "created_at": "2024-12-10T10:43:46+00:00",
    "commented_code": "+# Generate Clients\n+\n+Como o **FastAPI** é baseado na especificação **OpenAPI**, você obtém compatibilidade automática com muitas ferramentas, incluindo a documentação automática da API (fornecida pelo Swagger UI).\n+\n+Uma vantagem particular que nem sempre é óbvia é que você pode **gerar clientes** (às vezes chamados de <abbr title=\"Software Development Kits\">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programação** diferentes.\n+\n+## Geradores de Clientes OpenAPI\n+\n+Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.\n+\n+Uma ferramenta comum é o <a href=\"https://openapi-generator.tech/\" class=\"external-link\" target=\"_blank\">OpenAPI Generator</a>.\n+\n+Se voce está construindo um **frontend**, uma alternativa muito interessante é o <a href=\"https://github.com/hey-api/openapi-ts\" class=\"external-link\" target=\"_blank\">openapi-ts</a>.\n+\n+## Geradores de Clientes e SDKs - Patrocinadores\n+\n+Existem também alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** além de SDKs/clientes gerados de alta qualidade.\n+\n+Alguns deles também ✨ [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, isso garante o **desenvolvimento** contínuo e saudável do FastAPI e seu **ecossistema**.\n+\n+E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (você), pois eles não apenas querem fornecer um **bom serviço**, mas também querem garantir que você tenha um **framework bom e saudável**, o FastAPI. 🙇\n+\n+Por exemplo, você pode querer experimentar:\n+\n+* <a href=\"https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship\" class=\"external-link\" target=\"_blank\">Speakeasy</a>\n+* <a href=\"https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral\" class=\"external-link\" target=\"_blank\">Stainless</a>\n+* <a href=\"https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi\" class=\"external-link\" target=\"_blank\">liblab</a>\n+\n+Existem também várias outras empresas que oferecem serviços semelhantes que você pode pesquisar e encontrar online. 🤓\n+\n+## Gerar um Cliente Frontend TypeScript\n+\n+Vamos começar com um aplicativo **FastAPI** simples:\n+\n+{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}\n+\n+Note que as *operações de rota* definem os modelos que usam para o corpo da requisição e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.\n+\n+### Documentação da API\n+\n+Se você acessar a documentação da API, verá que ela tem os **schemas** para os dados a serem enviados nas requisições e recebidos nas respostas:\n+\n+<img src=\"/img/tutorial/generate-clients/image01.png\">\n+\n+Você pode ver esses schemas porque eles foram declarados com os modelos no app.\n+\n+Essas informações estão disponíveis no **OpenAPI schema** do app e são mostradas na documentação da API (pelo Swagger UI).\n+\n+E essas mesmas informações dos modelos que estão incluídas no OpenAPI são o que pode ser usado para **gerar o código do cliente**.\n+\n+### Gerar um Cliente TypeScript\n+\n+Agora que temos o app com os modelos, podemos gerar o código do cliente para o frontend.\n+\n+#### Instalar o `openapi-ts`\n+\n+Você pode instalar o `openapi-ts` no seu código frontend com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm install @hey-api/openapi-ts --save-dev\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+#### Gerar o Código do Cliente\n+\n+Para gerar o código do cliente, você pode usar a aplicação de linha de comando `openapi-ts` que agora está instalada.\n+\n+Como ela está instalada no projeto local, você provavelmente não conseguiria chamar esse comando diretamente, mas você o colocaria no seu arquivo `package.json`.\n+\n+Poderia ser assim:\n+\n+```JSON  hl_lines=\"7\"\n+{\n+  \"name\": \"frontend-app\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"\",\n+  \"devDependencies\": {\n+    \"@hey-api/openapi-ts\": \"^0.27.38\",\n+    \"typescript\": \"^4.6.2\"\n+  }\n+}\n+```\n+\n+Depois de ter esse script NPM `generate-client` lá, você pode executá-lo com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm run generate-client\n+\n+frontend-app@1.0.0 generate-client /home/user/code/frontend-app\n+> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n+```\n+\n+</div>\n+\n+Esse comando gerará o código em `./src/client` e usará o `axios` (a biblioteca HTTP frontend) internamente.\n+\n+### Experimente o Código do Cliente\n+\n+Agora você pode importar e usar o código do cliente, ele poderia ser assim, observe que você obtém preenchimento automático para os métodos:\n+\n+<img src=\"/img/tutorial/generate-clients/image02.png\">\n+\n+Você também obterá preenchimento automático para o corpo a ser enviado:\n+\n+<img src=\"/img/tutorial/generate-clients/image03.png\">\n+\n+/// Dica",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1877852914",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13030,
        "pr_file": "docs/pt/docs/advanced/generate-clients.md",
        "discussion_id": "1877852914",
        "commented_code": "@@ -0,0 +1,261 @@\n+# Generate Clients\n+\n+Como o **FastAPI** é baseado na especificação **OpenAPI**, você obtém compatibilidade automática com muitas ferramentas, incluindo a documentação automática da API (fornecida pelo Swagger UI).\n+\n+Uma vantagem particular que nem sempre é óbvia é que você pode **gerar clientes** (às vezes chamados de <abbr title=\"Software Development Kits\">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programação** diferentes.\n+\n+## Geradores de Clientes OpenAPI\n+\n+Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.\n+\n+Uma ferramenta comum é o <a href=\"https://openapi-generator.tech/\" class=\"external-link\" target=\"_blank\">OpenAPI Generator</a>.\n+\n+Se voce está construindo um **frontend**, uma alternativa muito interessante é o <a href=\"https://github.com/hey-api/openapi-ts\" class=\"external-link\" target=\"_blank\">openapi-ts</a>.\n+\n+## Geradores de Clientes e SDKs - Patrocinadores\n+\n+Existem também alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** além de SDKs/clientes gerados de alta qualidade.\n+\n+Alguns deles também ✨ [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, isso garante o **desenvolvimento** contínuo e saudável do FastAPI e seu **ecossistema**.\n+\n+E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (você), pois eles não apenas querem fornecer um **bom serviço**, mas também querem garantir que você tenha um **framework bom e saudável**, o FastAPI. 🙇\n+\n+Por exemplo, você pode querer experimentar:\n+\n+* <a href=\"https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship\" class=\"external-link\" target=\"_blank\">Speakeasy</a>\n+* <a href=\"https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral\" class=\"external-link\" target=\"_blank\">Stainless</a>\n+* <a href=\"https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi\" class=\"external-link\" target=\"_blank\">liblab</a>\n+\n+Existem também várias outras empresas que oferecem serviços semelhantes que você pode pesquisar e encontrar online. 🤓\n+\n+## Gerar um Cliente Frontend TypeScript\n+\n+Vamos começar com um aplicativo **FastAPI** simples:\n+\n+{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}\n+\n+Note que as *operações de rota* definem os modelos que usam para o corpo da requisição e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.\n+\n+### Documentação da API\n+\n+Se você acessar a documentação da API, verá que ela tem os **schemas** para os dados a serem enviados nas requisições e recebidos nas respostas:\n+\n+<img src=\"/img/tutorial/generate-clients/image01.png\">\n+\n+Você pode ver esses schemas porque eles foram declarados com os modelos no app.\n+\n+Essas informações estão disponíveis no **OpenAPI schema** do app e são mostradas na documentação da API (pelo Swagger UI).\n+\n+E essas mesmas informações dos modelos que estão incluídas no OpenAPI são o que pode ser usado para **gerar o código do cliente**.\n+\n+### Gerar um Cliente TypeScript\n+\n+Agora que temos o app com os modelos, podemos gerar o código do cliente para o frontend.\n+\n+#### Instalar o `openapi-ts`\n+\n+Você pode instalar o `openapi-ts` no seu código frontend com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm install @hey-api/openapi-ts --save-dev\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+#### Gerar o Código do Cliente\n+\n+Para gerar o código do cliente, você pode usar a aplicação de linha de comando `openapi-ts` que agora está instalada.\n+\n+Como ela está instalada no projeto local, você provavelmente não conseguiria chamar esse comando diretamente, mas você o colocaria no seu arquivo `package.json`.\n+\n+Poderia ser assim:\n+\n+```JSON  hl_lines=\"7\"\n+{\n+  \"name\": \"frontend-app\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"\",\n+  \"devDependencies\": {\n+    \"@hey-api/openapi-ts\": \"^0.27.38\",\n+    \"typescript\": \"^4.6.2\"\n+  }\n+}\n+```\n+\n+Depois de ter esse script NPM `generate-client` lá, você pode executá-lo com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm run generate-client\n+\n+frontend-app@1.0.0 generate-client /home/user/code/frontend-app\n+> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n+```\n+\n+</div>\n+\n+Esse comando gerará o código em `./src/client` e usará o `axios` (a biblioteca HTTP frontend) internamente.\n+\n+### Experimente o Código do Cliente\n+\n+Agora você pode importar e usar o código do cliente, ele poderia ser assim, observe que você obtém preenchimento automático para os métodos:\n+\n+<img src=\"/img/tutorial/generate-clients/image02.png\">\n+\n+Você também obterá preenchimento automático para o corpo a ser enviado:\n+\n+<img src=\"/img/tutorial/generate-clients/image03.png\">\n+\n+/// Dica",
        "comment_created_at": "2024-12-10T10:43:46+00:00",
        "comment_author": "ceb10n",
        "comment_body": "you don't translate the admonitions directly.\r\n\r\nThe right way to translate it is to keep the admonition, and then add a pipe + the translation.\r\n\r\nYou can check the docs for this at: [Translation specific tips and guidelines](https://fastapi.tiangolo.com/contributing/#translation-specific-tips-and-guidelines)\r\n\r\nSo, it would be:\r\n\r\n/// tip | Dica\r\n...\r\n///",
        "pr_file_module": null
      },
      {
        "comment_id": "1878456518",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13030,
        "pr_file": "docs/pt/docs/advanced/generate-clients.md",
        "discussion_id": "1877852914",
        "commented_code": "@@ -0,0 +1,261 @@\n+# Generate Clients\n+\n+Como o **FastAPI** é baseado na especificação **OpenAPI**, você obtém compatibilidade automática com muitas ferramentas, incluindo a documentação automática da API (fornecida pelo Swagger UI).\n+\n+Uma vantagem particular que nem sempre é óbvia é que você pode **gerar clientes** (às vezes chamados de <abbr title=\"Software Development Kits\">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programação** diferentes.\n+\n+## Geradores de Clientes OpenAPI\n+\n+Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.\n+\n+Uma ferramenta comum é o <a href=\"https://openapi-generator.tech/\" class=\"external-link\" target=\"_blank\">OpenAPI Generator</a>.\n+\n+Se voce está construindo um **frontend**, uma alternativa muito interessante é o <a href=\"https://github.com/hey-api/openapi-ts\" class=\"external-link\" target=\"_blank\">openapi-ts</a>.\n+\n+## Geradores de Clientes e SDKs - Patrocinadores\n+\n+Existem também alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** além de SDKs/clientes gerados de alta qualidade.\n+\n+Alguns deles também ✨ [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, isso garante o **desenvolvimento** contínuo e saudável do FastAPI e seu **ecossistema**.\n+\n+E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (você), pois eles não apenas querem fornecer um **bom serviço**, mas também querem garantir que você tenha um **framework bom e saudável**, o FastAPI. 🙇\n+\n+Por exemplo, você pode querer experimentar:\n+\n+* <a href=\"https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship\" class=\"external-link\" target=\"_blank\">Speakeasy</a>\n+* <a href=\"https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral\" class=\"external-link\" target=\"_blank\">Stainless</a>\n+* <a href=\"https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi\" class=\"external-link\" target=\"_blank\">liblab</a>\n+\n+Existem também várias outras empresas que oferecem serviços semelhantes que você pode pesquisar e encontrar online. 🤓\n+\n+## Gerar um Cliente Frontend TypeScript\n+\n+Vamos começar com um aplicativo **FastAPI** simples:\n+\n+{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}\n+\n+Note que as *operações de rota* definem os modelos que usam para o corpo da requisição e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.\n+\n+### Documentação da API\n+\n+Se você acessar a documentação da API, verá que ela tem os **schemas** para os dados a serem enviados nas requisições e recebidos nas respostas:\n+\n+<img src=\"/img/tutorial/generate-clients/image01.png\">\n+\n+Você pode ver esses schemas porque eles foram declarados com os modelos no app.\n+\n+Essas informações estão disponíveis no **OpenAPI schema** do app e são mostradas na documentação da API (pelo Swagger UI).\n+\n+E essas mesmas informações dos modelos que estão incluídas no OpenAPI são o que pode ser usado para **gerar o código do cliente**.\n+\n+### Gerar um Cliente TypeScript\n+\n+Agora que temos o app com os modelos, podemos gerar o código do cliente para o frontend.\n+\n+#### Instalar o `openapi-ts`\n+\n+Você pode instalar o `openapi-ts` no seu código frontend com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm install @hey-api/openapi-ts --save-dev\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+#### Gerar o Código do Cliente\n+\n+Para gerar o código do cliente, você pode usar a aplicação de linha de comando `openapi-ts` que agora está instalada.\n+\n+Como ela está instalada no projeto local, você provavelmente não conseguiria chamar esse comando diretamente, mas você o colocaria no seu arquivo `package.json`.\n+\n+Poderia ser assim:\n+\n+```JSON  hl_lines=\"7\"\n+{\n+  \"name\": \"frontend-app\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"\",\n+  \"devDependencies\": {\n+    \"@hey-api/openapi-ts\": \"^0.27.38\",\n+    \"typescript\": \"^4.6.2\"\n+  }\n+}\n+```\n+\n+Depois de ter esse script NPM `generate-client` lá, você pode executá-lo com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm run generate-client\n+\n+frontend-app@1.0.0 generate-client /home/user/code/frontend-app\n+> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n+```\n+\n+</div>\n+\n+Esse comando gerará o código em `./src/client` e usará o `axios` (a biblioteca HTTP frontend) internamente.\n+\n+### Experimente o Código do Cliente\n+\n+Agora você pode importar e usar o código do cliente, ele poderia ser assim, observe que você obtém preenchimento automático para os métodos:\n+\n+<img src=\"/img/tutorial/generate-clients/image02.png\">\n+\n+Você também obterá preenchimento automático para o corpo a ser enviado:\n+\n+<img src=\"/img/tutorial/generate-clients/image03.png\">\n+\n+/// Dica",
        "comment_created_at": "2024-12-10T16:46:38+00:00",
        "comment_author": "vitumenezes",
        "comment_body": "Perfect! I'll fix it. Thanks 🫂",
        "pr_file_module": null
      },
      {
        "comment_id": "1878965371",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13030,
        "pr_file": "docs/pt/docs/advanced/generate-clients.md",
        "discussion_id": "1877852914",
        "commented_code": "@@ -0,0 +1,261 @@\n+# Generate Clients\n+\n+Como o **FastAPI** é baseado na especificação **OpenAPI**, você obtém compatibilidade automática com muitas ferramentas, incluindo a documentação automática da API (fornecida pelo Swagger UI).\n+\n+Uma vantagem particular que nem sempre é óbvia é que você pode **gerar clientes** (às vezes chamados de <abbr title=\"Software Development Kits\">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programação** diferentes.\n+\n+## Geradores de Clientes OpenAPI\n+\n+Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.\n+\n+Uma ferramenta comum é o <a href=\"https://openapi-generator.tech/\" class=\"external-link\" target=\"_blank\">OpenAPI Generator</a>.\n+\n+Se voce está construindo um **frontend**, uma alternativa muito interessante é o <a href=\"https://github.com/hey-api/openapi-ts\" class=\"external-link\" target=\"_blank\">openapi-ts</a>.\n+\n+## Geradores de Clientes e SDKs - Patrocinadores\n+\n+Existem também alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** além de SDKs/clientes gerados de alta qualidade.\n+\n+Alguns deles também ✨ [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, isso garante o **desenvolvimento** contínuo e saudável do FastAPI e seu **ecossistema**.\n+\n+E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (você), pois eles não apenas querem fornecer um **bom serviço**, mas também querem garantir que você tenha um **framework bom e saudável**, o FastAPI. 🙇\n+\n+Por exemplo, você pode querer experimentar:\n+\n+* <a href=\"https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship\" class=\"external-link\" target=\"_blank\">Speakeasy</a>\n+* <a href=\"https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral\" class=\"external-link\" target=\"_blank\">Stainless</a>\n+* <a href=\"https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi\" class=\"external-link\" target=\"_blank\">liblab</a>\n+\n+Existem também várias outras empresas que oferecem serviços semelhantes que você pode pesquisar e encontrar online. 🤓\n+\n+## Gerar um Cliente Frontend TypeScript\n+\n+Vamos começar com um aplicativo **FastAPI** simples:\n+\n+{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}\n+\n+Note que as *operações de rota* definem os modelos que usam para o corpo da requisição e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.\n+\n+### Documentação da API\n+\n+Se você acessar a documentação da API, verá que ela tem os **schemas** para os dados a serem enviados nas requisições e recebidos nas respostas:\n+\n+<img src=\"/img/tutorial/generate-clients/image01.png\">\n+\n+Você pode ver esses schemas porque eles foram declarados com os modelos no app.\n+\n+Essas informações estão disponíveis no **OpenAPI schema** do app e são mostradas na documentação da API (pelo Swagger UI).\n+\n+E essas mesmas informações dos modelos que estão incluídas no OpenAPI são o que pode ser usado para **gerar o código do cliente**.\n+\n+### Gerar um Cliente TypeScript\n+\n+Agora que temos o app com os modelos, podemos gerar o código do cliente para o frontend.\n+\n+#### Instalar o `openapi-ts`\n+\n+Você pode instalar o `openapi-ts` no seu código frontend com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm install @hey-api/openapi-ts --save-dev\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+#### Gerar o Código do Cliente\n+\n+Para gerar o código do cliente, você pode usar a aplicação de linha de comando `openapi-ts` que agora está instalada.\n+\n+Como ela está instalada no projeto local, você provavelmente não conseguiria chamar esse comando diretamente, mas você o colocaria no seu arquivo `package.json`.\n+\n+Poderia ser assim:\n+\n+```JSON  hl_lines=\"7\"\n+{\n+  \"name\": \"frontend-app\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"\",\n+  \"devDependencies\": {\n+    \"@hey-api/openapi-ts\": \"^0.27.38\",\n+    \"typescript\": \"^4.6.2\"\n+  }\n+}\n+```\n+\n+Depois de ter esse script NPM `generate-client` lá, você pode executá-lo com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm run generate-client\n+\n+frontend-app@1.0.0 generate-client /home/user/code/frontend-app\n+> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n+```\n+\n+</div>\n+\n+Esse comando gerará o código em `./src/client` e usará o `axios` (a biblioteca HTTP frontend) internamente.\n+\n+### Experimente o Código do Cliente\n+\n+Agora você pode importar e usar o código do cliente, ele poderia ser assim, observe que você obtém preenchimento automático para os métodos:\n+\n+<img src=\"/img/tutorial/generate-clients/image02.png\">\n+\n+Você também obterá preenchimento automático para o corpo a ser enviado:\n+\n+<img src=\"/img/tutorial/generate-clients/image03.png\">\n+\n+/// Dica",
        "comment_created_at": "2024-12-10T22:06:40+00:00",
        "comment_author": "ceb10n",
        "comment_body": "I'm not with my pc to test it right now, but the t in tip is lowercase. I don't know if it will work with a capital letter",
        "pr_file_module": null
      },
      {
        "comment_id": "1880628727",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13030,
        "pr_file": "docs/pt/docs/advanced/generate-clients.md",
        "discussion_id": "1877852914",
        "commented_code": "@@ -0,0 +1,261 @@\n+# Generate Clients\n+\n+Como o **FastAPI** é baseado na especificação **OpenAPI**, você obtém compatibilidade automática com muitas ferramentas, incluindo a documentação automática da API (fornecida pelo Swagger UI).\n+\n+Uma vantagem particular que nem sempre é óbvia é que você pode **gerar clientes** (às vezes chamados de <abbr title=\"Software Development Kits\">**SDKs**</abbr>) para a sua API, para muitas **linguagens de programação** diferentes.\n+\n+## Geradores de Clientes OpenAPI\n+\n+Existem muitas ferramentas para gerar clientes a partir do **OpenAPI**.\n+\n+Uma ferramenta comum é o <a href=\"https://openapi-generator.tech/\" class=\"external-link\" target=\"_blank\">OpenAPI Generator</a>.\n+\n+Se voce está construindo um **frontend**, uma alternativa muito interessante é o <a href=\"https://github.com/hey-api/openapi-ts\" class=\"external-link\" target=\"_blank\">openapi-ts</a>.\n+\n+## Geradores de Clientes e SDKs - Patrocinadores\n+\n+Existem também alguns geradores de clientes e SDKs baseados na OpenAPI (FastAPI) **patrocinados por empresas**, em alguns casos eles podem oferecer **recursos adicionais** além de SDKs/clientes gerados de alta qualidade.\n+\n+Alguns deles também ✨ [**patrocinam o FastAPI**](../help-fastapi.md#sponsor-the-author){.internal-link target=_blank} ✨, isso garante o **desenvolvimento** contínuo e saudável do FastAPI e seu **ecossistema**.\n+\n+E isso mostra o verdadeiro compromisso deles com o FastAPI e sua **comunidade** (você), pois eles não apenas querem fornecer um **bom serviço**, mas também querem garantir que você tenha um **framework bom e saudável**, o FastAPI. 🙇\n+\n+Por exemplo, você pode querer experimentar:\n+\n+* <a href=\"https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship\" class=\"external-link\" target=\"_blank\">Speakeasy</a>\n+* <a href=\"https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral\" class=\"external-link\" target=\"_blank\">Stainless</a>\n+* <a href=\"https://developers.liblab.com/tutorials/sdk-for-fastapi/?utm_source=fastapi\" class=\"external-link\" target=\"_blank\">liblab</a>\n+\n+Existem também várias outras empresas que oferecem serviços semelhantes que você pode pesquisar e encontrar online. 🤓\n+\n+## Gerar um Cliente Frontend TypeScript\n+\n+Vamos começar com um aplicativo **FastAPI** simples:\n+\n+{* ../../docs_src/generate_clients/tutorial001_py39.py hl[7:9,12:13,16:17,21] *}\n+\n+Note que as *operações de rota* definem os modelos que usam para o corpo da requisição e o corpo da resposta, usando os modelos `Item` e `ResponseMessage`.\n+\n+### Documentação da API\n+\n+Se você acessar a documentação da API, verá que ela tem os **schemas** para os dados a serem enviados nas requisições e recebidos nas respostas:\n+\n+<img src=\"/img/tutorial/generate-clients/image01.png\">\n+\n+Você pode ver esses schemas porque eles foram declarados com os modelos no app.\n+\n+Essas informações estão disponíveis no **OpenAPI schema** do app e são mostradas na documentação da API (pelo Swagger UI).\n+\n+E essas mesmas informações dos modelos que estão incluídas no OpenAPI são o que pode ser usado para **gerar o código do cliente**.\n+\n+### Gerar um Cliente TypeScript\n+\n+Agora que temos o app com os modelos, podemos gerar o código do cliente para o frontend.\n+\n+#### Instalar o `openapi-ts`\n+\n+Você pode instalar o `openapi-ts` no seu código frontend com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm install @hey-api/openapi-ts --save-dev\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+#### Gerar o Código do Cliente\n+\n+Para gerar o código do cliente, você pode usar a aplicação de linha de comando `openapi-ts` que agora está instalada.\n+\n+Como ela está instalada no projeto local, você provavelmente não conseguiria chamar esse comando diretamente, mas você o colocaria no seu arquivo `package.json`.\n+\n+Poderia ser assim:\n+\n+```JSON  hl_lines=\"7\"\n+{\n+  \"name\": \"frontend-app\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"\",\n+  \"main\": \"index.js\",\n+  \"scripts\": {\n+    \"generate-client\": \"openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\"\n+  },\n+  \"author\": \"\",\n+  \"license\": \"\",\n+  \"devDependencies\": {\n+    \"@hey-api/openapi-ts\": \"^0.27.38\",\n+    \"typescript\": \"^4.6.2\"\n+  }\n+}\n+```\n+\n+Depois de ter esse script NPM `generate-client` lá, você pode executá-lo com:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ npm run generate-client\n+\n+frontend-app@1.0.0 generate-client /home/user/code/frontend-app\n+> openapi-ts --input http://localhost:8000/openapi.json --output ./src/client --client axios\n+```\n+\n+</div>\n+\n+Esse comando gerará o código em `./src/client` e usará o `axios` (a biblioteca HTTP frontend) internamente.\n+\n+### Experimente o Código do Cliente\n+\n+Agora você pode importar e usar o código do cliente, ele poderia ser assim, observe que você obtém preenchimento automático para os métodos:\n+\n+<img src=\"/img/tutorial/generate-clients/image02.png\">\n+\n+Você também obterá preenchimento automático para o corpo a ser enviado:\n+\n+<img src=\"/img/tutorial/generate-clients/image03.png\">\n+\n+/// Dica",
        "comment_created_at": "2024-12-11T17:35:13+00:00",
        "comment_author": "vitumenezes",
        "comment_body": "eeeerrr, lack of attention 🤦🏼. will fix it! ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1803537277",
    "pr_number": 12467,
    "pr_file": "docs/zh-hant/docs/tutorial/first-steps.md",
    "created_at": "2024-10-16T17:32:49+00:00",
    "commented_code": "+# 第一步\n+\n+最簡單的 FastAPI 文件可能看起來像這樣：\n+\n+```Python\n+{!../../docs_src/first_steps/tutorial001.py!}\n+```\n+\n+將其複製到一個名為 `main.py` 的文件中。\n+\n+執行 live server：\n+\n+<div class=\"termy\">\n+\n+```console\n+$ <font color=\"#4E9A06\">fastapi</font> dev <u style=\"text-decoration-style:single\">main.py</u>\n+<font color=\"#3465A4\">INFO    </font> Using path <font color=\"#3465A4\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Resolved absolute path <font color=\"#75507B\">/home/user/code/awesomeapp/</font><font color=\"#AD7FA8\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Searching for package file structure from directories with <font color=\"#3465A4\">__init__.py</font> files\n+<font color=\"#3465A4\">INFO    </font> Importing from <font color=\"#75507B\">/home/user/code/</font><font color=\"#AD7FA8\">awesomeapp</font>\n+\n+ ╭─ <font color=\"#8AE234\"><b>Python module file</b></font> ─╮\n+ │                      │\n+ │  🐍 main.py          │\n+ │                      │\n+ ╰──────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Importing module <font color=\"#4E9A06\">main</font>\n+<font color=\"#3465A4\">INFO    </font> Found importable FastAPI app\n+\n+ ╭─ <font color=\"#8AE234\"><b>Importable FastAPI app</b></font> ─╮\n+ │                          │\n+ │  <span style=\"background-color:#272822\"><font color=\"#FF4689\">from</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> main </font></span><span style=\"background-color:#272822\"><font color=\"#FF4689\">import</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> app</font></span><span style=\"background-color:#272822\">  </span>  │\n+ │                          │\n+ ╰──────────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Using import string <font color=\"#8AE234\"><b>main:app</b></font>\n+\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╭────────── FastAPI CLI - Development mode ───────────╮</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Serving at: http://127.0.0.1:8000                  │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  API docs: http://127.0.0.1:8000/docs               │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Running in development mode, for production use:   │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  </font></span><span style=\"background-color:#C4A000\"><font color=\"#555753\"><b>fastapi run</b></font></span><span style=\"background-color:#C4A000\"><font color=\"#2E3436\">                                        │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╰─────────────────────────────────────────────────────╯</font></span>\n+\n+<font color=\"#4E9A06\">INFO</font>:     Will watch for changes in these directories: [&apos;/home/user/code/awesomeapp&apos;]\n+<font color=\"#4E9A06\">INFO</font>:     Uvicorn running on <b>http://127.0.0.1:8000</b> (Press CTRL+C to quit)\n+<font color=\"#4E9A06\">INFO</font>:     Started reloader process [<font color=\"#34E2E2\"><b>2265862</b></font>] using <font color=\"#34E2E2\"><b>WatchFiles</b></font>\n+<font color=\"#4E9A06\">INFO</font>:     Started server process [<font color=\"#06989A\">2265873</font>]\n+<font color=\"#4E9A06\">INFO</font>:     Waiting for application startup.\n+<font color=\"#4E9A06\">INFO</font>:     Application startup complete.\n+```\n+\n+</div>\n+\n+在輸出中，有一列類似於：\n+\n+```hl_lines=\"4\"\n+INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n+```\n+\n+那列顯示了你的應用程式正在本地端機器上運行的 URL。\n+\n+### 查看它\n+\n+在瀏覽器中打開 <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n+\n+你將看到如下的 JSON 回應：\n+\n+```JSON\n+{\"message\": \"Hello World\"}\n+```\n+\n+### 互動式 API 文件\n+\n+現在，前往 <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n+\n+你將看到自動的互動式 API 文件（由 <a href=\"https://github.com/swagger-api/swagger-ui\" class=\"external-link\" target=\"_blank\">Swagger UI</a> 提供）：\n+\n+![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n+\n+### 替代 API 文件\n+\n+現在，前往 <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n+\n+你將看到替代自動文件（由 <a href=\"https://github.com/Rebilly/ReDoc\" class=\"external-link\" target=\"_blank\">ReDoc</a> 提供）：\n+\n+![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n+\n+### OpenAPI\n+\n+**FastAPI** 使用 **OpenAPI** 標準生成一個 「schema」 與所有你的 API。\n+\n+#### 「Schema」\n+\n+「schema」是對某個事物的定義或描述。它並不是實現該事物的程式碼，而僅僅是一個抽象的描述。",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1803537277",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12467,
        "pr_file": "docs/zh-hant/docs/tutorial/first-steps.md",
        "discussion_id": "1803537277",
        "commented_code": "@@ -0,0 +1,345 @@\n+# 第一步\n+\n+最簡單的 FastAPI 文件可能看起來像這樣：\n+\n+```Python\n+{!../../docs_src/first_steps/tutorial001.py!}\n+```\n+\n+將其複製到一個名為 `main.py` 的文件中。\n+\n+執行 live server：\n+\n+<div class=\"termy\">\n+\n+```console\n+$ <font color=\"#4E9A06\">fastapi</font> dev <u style=\"text-decoration-style:single\">main.py</u>\n+<font color=\"#3465A4\">INFO    </font> Using path <font color=\"#3465A4\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Resolved absolute path <font color=\"#75507B\">/home/user/code/awesomeapp/</font><font color=\"#AD7FA8\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Searching for package file structure from directories with <font color=\"#3465A4\">__init__.py</font> files\n+<font color=\"#3465A4\">INFO    </font> Importing from <font color=\"#75507B\">/home/user/code/</font><font color=\"#AD7FA8\">awesomeapp</font>\n+\n+ ╭─ <font color=\"#8AE234\"><b>Python module file</b></font> ─╮\n+ │                      │\n+ │  🐍 main.py          │\n+ │                      │\n+ ╰──────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Importing module <font color=\"#4E9A06\">main</font>\n+<font color=\"#3465A4\">INFO    </font> Found importable FastAPI app\n+\n+ ╭─ <font color=\"#8AE234\"><b>Importable FastAPI app</b></font> ─╮\n+ │                          │\n+ │  <span style=\"background-color:#272822\"><font color=\"#FF4689\">from</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> main </font></span><span style=\"background-color:#272822\"><font color=\"#FF4689\">import</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> app</font></span><span style=\"background-color:#272822\">  </span>  │\n+ │                          │\n+ ╰──────────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Using import string <font color=\"#8AE234\"><b>main:app</b></font>\n+\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╭────────── FastAPI CLI - Development mode ───────────╮</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Serving at: http://127.0.0.1:8000                  │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  API docs: http://127.0.0.1:8000/docs               │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Running in development mode, for production use:   │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  </font></span><span style=\"background-color:#C4A000\"><font color=\"#555753\"><b>fastapi run</b></font></span><span style=\"background-color:#C4A000\"><font color=\"#2E3436\">                                        │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╰─────────────────────────────────────────────────────╯</font></span>\n+\n+<font color=\"#4E9A06\">INFO</font>:     Will watch for changes in these directories: [&apos;/home/user/code/awesomeapp&apos;]\n+<font color=\"#4E9A06\">INFO</font>:     Uvicorn running on <b>http://127.0.0.1:8000</b> (Press CTRL+C to quit)\n+<font color=\"#4E9A06\">INFO</font>:     Started reloader process [<font color=\"#34E2E2\"><b>2265862</b></font>] using <font color=\"#34E2E2\"><b>WatchFiles</b></font>\n+<font color=\"#4E9A06\">INFO</font>:     Started server process [<font color=\"#06989A\">2265873</font>]\n+<font color=\"#4E9A06\">INFO</font>:     Waiting for application startup.\n+<font color=\"#4E9A06\">INFO</font>:     Application startup complete.\n+```\n+\n+</div>\n+\n+在輸出中，有一列類似於：\n+\n+```hl_lines=\"4\"\n+INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n+```\n+\n+那列顯示了你的應用程式正在本地端機器上運行的 URL。\n+\n+### 查看它\n+\n+在瀏覽器中打開 <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n+\n+你將看到如下的 JSON 回應：\n+\n+```JSON\n+{\"message\": \"Hello World\"}\n+```\n+\n+### 互動式 API 文件\n+\n+現在，前往 <a href=\"http://127.0.0.1:8000/docs\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/docs</a>.\n+\n+你將看到自動的互動式 API 文件（由 <a href=\"https://github.com/swagger-api/swagger-ui\" class=\"external-link\" target=\"_blank\">Swagger UI</a> 提供）：\n+\n+![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)\n+\n+### 替代 API 文件\n+\n+現在，前往 <a href=\"http://127.0.0.1:8000/redoc\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000/redoc</a>.\n+\n+你將看到替代自動文件（由 <a href=\"https://github.com/Rebilly/ReDoc\" class=\"external-link\" target=\"_blank\">ReDoc</a> 提供）：\n+\n+![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)\n+\n+### OpenAPI\n+\n+**FastAPI** 使用 **OpenAPI** 標準生成一個 「schema」 與所有你的 API。\n+\n+#### 「Schema」\n+\n+「schema」是對某個事物的定義或描述。它並不是實現該事物的程式碼，而僅僅是一個抽象的描述。",
        "comment_created_at": "2024-10-16T17:32:49+00:00",
        "comment_author": "mattwang44",
        "comment_body": "```suggestion\r\n「schema」是對某個事物的定義或描述。它並不是實作它的程式碼，而僅僅是一個抽象的描述。\r\n```",
        "pr_file_module": null
      }
    ]
  }
]