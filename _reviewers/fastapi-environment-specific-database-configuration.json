[
  {
    "discussion_id": "1886678010",
    "pr_number": 13079,
    "pr_file": "docs/ru/docs/tutorial/sql-databases.md",
    "created_at": "2024-12-16T11:45:46+00:00",
    "commented_code": "+# SQL (реляционные) базы данных\n+\n+**FastAPI** не требует использования реляционной базы данных. Вы можете воспользоваться любой базой данных, которой хотите.\n+\n+В этом разделе мы продемонстрируем, как работать с <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel</a>.\n+\n+Библиотека **SQLModel** построена на основе <a href=\"https://www.sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a> и Pydantic. Она была разработана автором **FastAPI** специально для приложений на основе FastAPI, которые используют **реляционные базы данных**.\n+\n+/// tip | Подсказка\n+\n+Вы можете воспользоваться любой библиотекой для работы с реляционными (SQL) или нереляционными (NoSQL) базами данных. (Их ещё называют <abbr title=\"ORM = Object Relational Mapper, этот термин для библиотеки, в которой классы представляют SQL-таблицы, а экземпляры классов представляют строки в этих таблицах.\">**ORM**</abbr> библиотеками). FastAPI не принуждает вас к использованию чего-либо конкретного. 😎\n+\n+///\n+\n+В основе SQLModel лежит SQLAlchemy, поэтому вы спокойно можете использовать любую базу данных, поддерживаемую SQLAlchemy (и соответственно поддерживаемую SQLModel), например:\n+\n+* PostgreSQL\n+* MySQL\n+* SQLite\n+* Oracle\n+* Microsoft SQL Server, и т.д.\n+\n+В данном примере мы будем использовать базу данных **SQLite**, т.к. она состоит из единственного файла и поддерживается встроенными библиотеками Python. Таким образом, вы сможете скопировать данный пример и запустить его как он есть.\n+\n+В дальнейшем, для своего продуктового приложения, вы можете воспользоваться сервером баз данных, например, **PostgreSQL**.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1886678010",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13079,
        "pr_file": "docs/ru/docs/tutorial/sql-databases.md",
        "discussion_id": "1886678010",
        "commented_code": "@@ -0,0 +1,358 @@\n+# SQL (реляционные) базы данных\n+\n+**FastAPI** не требует использования реляционной базы данных. Вы можете воспользоваться любой базой данных, которой хотите.\n+\n+В этом разделе мы продемонстрируем, как работать с <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel</a>.\n+\n+Библиотека **SQLModel** построена на основе <a href=\"https://www.sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a> и Pydantic. Она была разработана автором **FastAPI** специально для приложений на основе FastAPI, которые используют **реляционные базы данных**.\n+\n+/// tip | Подсказка\n+\n+Вы можете воспользоваться любой библиотекой для работы с реляционными (SQL) или нереляционными (NoSQL) базами данных. (Их ещё называют <abbr title=\"ORM = Object Relational Mapper, этот термин для библиотеки, в которой классы представляют SQL-таблицы, а экземпляры классов представляют строки в этих таблицах.\">**ORM**</abbr> библиотеками). FastAPI не принуждает вас к использованию чего-либо конкретного. 😎\n+\n+///\n+\n+В основе SQLModel лежит SQLAlchemy, поэтому вы спокойно можете использовать любую базу данных, поддерживаемую SQLAlchemy (и соответственно поддерживаемую SQLModel), например:\n+\n+* PostgreSQL\n+* MySQL\n+* SQLite\n+* Oracle\n+* Microsoft SQL Server, и т.д.\n+\n+В данном примере мы будем использовать базу данных **SQLite**, т.к. она состоит из единственного файла и поддерживается встроенными библиотеками Python. Таким образом, вы сможете скопировать данный пример и запустить его как он есть.\n+\n+В дальнейшем, для своего продуктового приложения, вы можете воспользоваться сервером баз данных, например, **PostgreSQL**.",
        "comment_created_at": "2024-12-16T11:45:46+00:00",
        "comment_author": "gitgernit",
        "comment_body": "```suggestion\r\nВ дальнейшем, для продакшн-версии вашего приложения, возможно, вам стоит использовать серверную базу данных, например, **PostgreSQL**.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1891027954",
    "pr_number": 13093,
    "pr_file": "docs/ko/docs/tutorial/sql-databases.md",
    "created_at": "2024-12-19T01:42:44+00:00",
    "commented_code": "+# SQL (관계형) 데이터베이스\n+\n+**FastAPI**에서 SQL(관계형) 데이터베이스 사용은 필수가 아닙니다. 여러분이 원하는 **어떤 데이터베이스든** 사용할 수 있습니다.\n+\n+여기서는 <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel</a>을 사용하는 예제를 살펴보겠습니다.\n+\n+**SQLModel**은 <a href=\"https://www.sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a>와 Pydantic을 기반으로 구축되었습니다.SQLModel은 **SQL 데이터베이스**를 사용하는 FastAPI 애플리케이션에 완벽히 어울리도록 **FastAPI**의 제작자가 설계한 도구입니다.\n+\n+/// 팁\n+\n+다른 SQL 또는 NoSQL 데이터베이스 라이브러리를 사용할 수도 있습니다 (일부는 <abbr title=\"객체 관계 매퍼(Object Relational Mapper), SQL 테이블을 나타내는 클래스를 제공하고 테이블의 행을 인스턴스로 표현하는 라이브러리를 지칭하는 용어\">\"ORM\"</abbr>이라고도 불립니다), FastAPI는 특정 라이브러리의 사용을 강요하지 않습니다. 😎\n+\n+///\n+\n+SQLModel은 SQLAlchemy를 기반으로 하므로, SQLAlchemy에서 **지원하는 모든 데이터베이스**를 손쉽게 사용할 수 있습니다(SQLModel에서도 동일하게 지원됩니다). 예를 들면:\n+\n+* PostgreSQL\n+* MySQL\n+* SQLite\n+* Oracle\n+* Microsoft SQL Server 등.\n+\n+이 예제에서는 SQLite를 사용합니다. **SQLite**는 단일 파일을 사용하고 Python에서 기본적으로 지원하기 때문입니다. 따라서 이 예제를 그대로 복사하여 실행할 수 있습니다.\n+\n+나중에 실제 프로덕션 애플리케이션에서는 **PostgreSQL**과 같은 데이터베이스 서버를 사용하는 것이 좋습니다.\n+\n+/// 팁\n+\n+**FastAPI**와 **PostgreSQL**를 포함하여 프론트엔드와 다양한 도구를 제공하는 공식 프로젝트 생성기가 있습니다: <a href=\"https://github.com/fastapi/full-stack-fastapi-template\" class=\"external-link\" target=\"_blank\">https://github.com/fastapi/full-stack-fastapi-template</a>\n+\n+///\n+\n+이 튜토리얼은 매우 간단하고 짧습니다. 데이터베이스 기본 개념, SQL, 또는 더 복잡한 기능에 대해 배우고 싶다면, <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel 문서</a>를 참고하세요.\n+\n+## `SQLModel` 설치하기\n+\n+먼저, [가상 환경](../virtual-environments.md){.internal-link target=_blank}을 생성하고 활성화한 다음, `sqlmodel`을 설치하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install sqlmodel\n+---> 100%\n+```\n+\n+</div>\n+\n+## 단일 모델로 애플리케이션 생성하기\n+\n+우선 단일 **SQLModel** 모델을 사용하여 애플리케이션의 가장 간단한 첫 번째 버전을 생성해보겠습니다.\n+\n+이후 **다중 모델**을 추가하여 보안과 유연성을 강화할 것입니다. 🤓\n+\n+### 모델 생성하기\n+\n+`SQLModel`을 가져오고 데이터베이스 모델을 생성합니다:\n+\n+{* ../../docs_src/sql_databases/tutorial001_an_py310.py ln[1:11] hl[7:11] *}\n+\n+`Hero` 클래스는 Pydantic 모델과 매우 유사합니다 (실제로 내부적으로 *Pydantic model이기도 합니다*).\n+\n+몇 가지 차이점이 있습니다:\n+\n+* `table=True`는 SQLModel에 이 모델이 *테이블 모델*이며, 단순한 데이터 모델이 아니라 SQL 데이터베이스의 **테이블**을 나타낸다는 것을 알려줍니다. (다른 일반적인 Pydantic 클래스처럼) 단순한 *데이터 모델*이 아닙니다.\n+\n+* `Field(primary_key=True)`는 SQLModel에 `id`가 SQL 데이터베이스의 **기본 키**임을 알려줍니다 (SQL 기본 키에 대한 자세한 내용은 SQLModel 문서를 참고하세요).\n+\n+    `int | None` 유형으로 설정하면, SQLModel은 해당 열이 SQL 데이터베이스에서 `INTEGER` 유형이며 `NULL` 값을 허용해야 한다는 것을 알 수 있습니다.\n+\n+* `Field(index=True)`는 SQLModel에 해당 컬럼에 대해 **SQL 인덱스**를 생성하도록 지시합니다. 이를 통해 데이터베이스에서 이 컬럼으로 필터링된 데이터를 읽을 때 더 빠르게 조회할 수 있습니다.\n+\n+    SQLModel은 `str`으로 선언된 항목이 SQL 데이터베이스에서 `TEXT` (또는 데이터베이스에 따라 `VARCHAR`) 유형의 열로 저장된다는 것을 인식합니다.\n+\n+### 엔진 생성하기\n+\n+SQLModel의 `engine` (내부적으로는 SQLAlchemy `engine`)은 데이터베이스에 대한 **연결을 유지**하는 역할을 합니다.\n+\n+**하나의 단일 engine 객체**를 통해 코드 전체에서 동일한 데이터베이스에 연결할 수 있습니다.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1891027954",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13093,
        "pr_file": "docs/ko/docs/tutorial/sql-databases.md",
        "discussion_id": "1891027954",
        "commented_code": "@@ -0,0 +1,361 @@\n+# SQL (관계형) 데이터베이스\n+\n+**FastAPI**에서 SQL(관계형) 데이터베이스 사용은 필수가 아닙니다. 여러분이 원하는 **어떤 데이터베이스든** 사용할 수 있습니다.\n+\n+여기서는 <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel</a>을 사용하는 예제를 살펴보겠습니다.\n+\n+**SQLModel**은 <a href=\"https://www.sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a>와 Pydantic을 기반으로 구축되었습니다.SQLModel은 **SQL 데이터베이스**를 사용하는 FastAPI 애플리케이션에 완벽히 어울리도록 **FastAPI**의 제작자가 설계한 도구입니다.\n+\n+/// 팁\n+\n+다른 SQL 또는 NoSQL 데이터베이스 라이브러리를 사용할 수도 있습니다 (일부는 <abbr title=\"객체 관계 매퍼(Object Relational Mapper), SQL 테이블을 나타내는 클래스를 제공하고 테이블의 행을 인스턴스로 표현하는 라이브러리를 지칭하는 용어\">\"ORM\"</abbr>이라고도 불립니다), FastAPI는 특정 라이브러리의 사용을 강요하지 않습니다. 😎\n+\n+///\n+\n+SQLModel은 SQLAlchemy를 기반으로 하므로, SQLAlchemy에서 **지원하는 모든 데이터베이스**를 손쉽게 사용할 수 있습니다(SQLModel에서도 동일하게 지원됩니다). 예를 들면:\n+\n+* PostgreSQL\n+* MySQL\n+* SQLite\n+* Oracle\n+* Microsoft SQL Server 등.\n+\n+이 예제에서는 SQLite를 사용합니다. **SQLite**는 단일 파일을 사용하고 Python에서 기본적으로 지원하기 때문입니다. 따라서 이 예제를 그대로 복사하여 실행할 수 있습니다.\n+\n+나중에 실제 프로덕션 애플리케이션에서는 **PostgreSQL**과 같은 데이터베이스 서버를 사용하는 것이 좋습니다.\n+\n+/// 팁\n+\n+**FastAPI**와 **PostgreSQL**를 포함하여 프론트엔드와 다양한 도구를 제공하는 공식 프로젝트 생성기가 있습니다: <a href=\"https://github.com/fastapi/full-stack-fastapi-template\" class=\"external-link\" target=\"_blank\">https://github.com/fastapi/full-stack-fastapi-template</a>\n+\n+///\n+\n+이 튜토리얼은 매우 간단하고 짧습니다. 데이터베이스 기본 개념, SQL, 또는 더 복잡한 기능에 대해 배우고 싶다면, <a href=\"https://sqlmodel.tiangolo.com/\" class=\"external-link\" target=\"_blank\">SQLModel 문서</a>를 참고하세요.\n+\n+## `SQLModel` 설치하기\n+\n+먼저, [가상 환경](../virtual-environments.md){.internal-link target=_blank}을 생성하고 활성화한 다음, `sqlmodel`을 설치하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install sqlmodel\n+---> 100%\n+```\n+\n+</div>\n+\n+## 단일 모델로 애플리케이션 생성하기\n+\n+우선 단일 **SQLModel** 모델을 사용하여 애플리케이션의 가장 간단한 첫 번째 버전을 생성해보겠습니다.\n+\n+이후 **다중 모델**을 추가하여 보안과 유연성을 강화할 것입니다. 🤓\n+\n+### 모델 생성하기\n+\n+`SQLModel`을 가져오고 데이터베이스 모델을 생성합니다:\n+\n+{* ../../docs_src/sql_databases/tutorial001_an_py310.py ln[1:11] hl[7:11] *}\n+\n+`Hero` 클래스는 Pydantic 모델과 매우 유사합니다 (실제로 내부적으로 *Pydantic model이기도 합니다*).\n+\n+몇 가지 차이점이 있습니다:\n+\n+* `table=True`는 SQLModel에 이 모델이 *테이블 모델*이며, 단순한 데이터 모델이 아니라 SQL 데이터베이스의 **테이블**을 나타낸다는 것을 알려줍니다. (다른 일반적인 Pydantic 클래스처럼) 단순한 *데이터 모델*이 아닙니다.\n+\n+* `Field(primary_key=True)`는 SQLModel에 `id`가 SQL 데이터베이스의 **기본 키**임을 알려줍니다 (SQL 기본 키에 대한 자세한 내용은 SQLModel 문서를 참고하세요).\n+\n+    `int | None` 유형으로 설정하면, SQLModel은 해당 열이 SQL 데이터베이스에서 `INTEGER` 유형이며 `NULL` 값을 허용해야 한다는 것을 알 수 있습니다.\n+\n+* `Field(index=True)`는 SQLModel에 해당 컬럼에 대해 **SQL 인덱스**를 생성하도록 지시합니다. 이를 통해 데이터베이스에서 이 컬럼으로 필터링된 데이터를 읽을 때 더 빠르게 조회할 수 있습니다.\n+\n+    SQLModel은 `str`으로 선언된 항목이 SQL 데이터베이스에서 `TEXT` (또는 데이터베이스에 따라 `VARCHAR`) 유형의 열로 저장된다는 것을 인식합니다.\n+\n+### 엔진 생성하기\n+\n+SQLModel의 `engine` (내부적으로는 SQLAlchemy `engine`)은 데이터베이스에 대한 **연결을 유지**하는 역할을 합니다.\n+\n+**하나의 단일 engine 객체**를 통해 코드 전체에서 동일한 데이터베이스에 연결할 수 있습니다.",
        "comment_created_at": "2024-12-19T01:42:44+00:00",
        "comment_author": "hard-coders",
        "comment_body": "```suggestion\r\n**하나의 단일 `engine` 객체**를 통해 코드 전체에서 동일한 데이터베이스에 연결할 수 있습니다.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]