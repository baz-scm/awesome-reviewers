[
  {
    "discussion_id": "2160019825",
    "pr_number": 12168,
    "pr_file": "docs/fr/docs/environment-variables.md",
    "created_at": "2025-06-21T12:08:45+00:00",
    "commented_code": "+# Variables d'environnement\n+\n+/// tip\n+\n+Si vous savez déjà ce que sont les \"variables d'environnement\" et comment les utiliser, vous pouvez passer cette partie.\n+\n+///\n+\n+Une variable d'environnement (aussi appelée \"**env var**\") est une variable qui existe **en dehors** du code Python, au niveau du **système d'exploitation**, et qui peut être lue par votre code Python (ainsi que par d'autres programmes).\n+\n+Les variables d'environnement sont utiles pour gérer les **paramètres** de l'application, dans le cadre de **l'installation** de Python, etc.\n+\n+## Créer et utiliser les variables d'environnements\n+\n+Il est possible de créer et d'utiliser les variables d'environnement dans un **shell (terminal)**, sans avoir à utiliser Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Vous pouvez créer une variable d'environnement MY_NAME avec\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis vous pouvez l'utiliser dans d'autre programmes, comme\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Utilisez-la dans d'autres programmes, comme\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lire les variables d'environnement en Python\n+\n+Vous avez aussi la possibilité de créer une variable d'environnement **en dehors** de Python, dans le terminal (ou avec n'importe quelle autre méthode), puis la **lire en Python**.\n+\n+Par exemple, vous pouvez avoir un fichier `main.py` avec:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+Le second argument de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> est la valeur par défaut à retourner.\n+\n+Si elle n'est pas fournie, ce sera `None` par defaut. Ici, on passe `\"World\"` comme valeur par défaut à utiliser.\n+\n+///\n+\n+Vous pouvez ensuite appeler ce programme Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Comme les variables d'environnement peuvent être fixées à l'extérieur du code, mais peuvent être lues par le code, et n'ont pas à être stockées (commitées sur `git`) avec les autres fichiers, il est commun de les utiliser pour les configurations ou les **paramètres**.\n+\n+Vous pouvez aussi créer une variable d'environnement pour **l'invocation d'un programme spécifique**. Elle ne sera utilisable que pour ce programme, et seulement pour sa durée d'exécution.\n+\n+Pour ce faire, créez-la en amont du programme lui-même, sur la même ligne:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME sur la même ligne que l'appel du programme\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Maintenant il peut lire cette variable d'environnement\n+\n+Hello Wade Wilson from Python\n+\n+// La variable d'environnement n'existe plus ensuite\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Pour en savoir plus, consultez <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Types et Validation\n+\n+Ces variables d'environnement ne peuvent que traiter des **chaînes de texte**, car elles sont externes à Python et doivent être compatibles avec d'autres programmes et le reste du système (voire même avec différents systèmes d'exploitations, comme Linux, Windows, macOS).",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2160019825",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12168,
        "pr_file": "docs/fr/docs/environment-variables.md",
        "discussion_id": "2160019825",
        "commented_code": "@@ -0,0 +1,300 @@\n+# Variables d'environnement\n+\n+/// tip\n+\n+Si vous savez déjà ce que sont les \"variables d'environnement\" et comment les utiliser, vous pouvez passer cette partie.\n+\n+///\n+\n+Une variable d'environnement (aussi appelée \"**env var**\") est une variable qui existe **en dehors** du code Python, au niveau du **système d'exploitation**, et qui peut être lue par votre code Python (ainsi que par d'autres programmes).\n+\n+Les variables d'environnement sont utiles pour gérer les **paramètres** de l'application, dans le cadre de **l'installation** de Python, etc.\n+\n+## Créer et utiliser les variables d'environnements\n+\n+Il est possible de créer et d'utiliser les variables d'environnement dans un **shell (terminal)**, sans avoir à utiliser Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Vous pouvez créer une variable d'environnement MY_NAME avec\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis vous pouvez l'utiliser dans d'autre programmes, comme\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Utilisez-la dans d'autres programmes, comme\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lire les variables d'environnement en Python\n+\n+Vous avez aussi la possibilité de créer une variable d'environnement **en dehors** de Python, dans le terminal (ou avec n'importe quelle autre méthode), puis la **lire en Python**.\n+\n+Par exemple, vous pouvez avoir un fichier `main.py` avec:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+Le second argument de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> est la valeur par défaut à retourner.\n+\n+Si elle n'est pas fournie, ce sera `None` par defaut. Ici, on passe `\"World\"` comme valeur par défaut à utiliser.\n+\n+///\n+\n+Vous pouvez ensuite appeler ce programme Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Comme les variables d'environnement peuvent être fixées à l'extérieur du code, mais peuvent être lues par le code, et n'ont pas à être stockées (commitées sur `git`) avec les autres fichiers, il est commun de les utiliser pour les configurations ou les **paramètres**.\n+\n+Vous pouvez aussi créer une variable d'environnement pour **l'invocation d'un programme spécifique**. Elle ne sera utilisable que pour ce programme, et seulement pour sa durée d'exécution.\n+\n+Pour ce faire, créez-la en amont du programme lui-même, sur la même ligne:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME sur la même ligne que l'appel du programme\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Maintenant il peut lire cette variable d'environnement\n+\n+Hello Wade Wilson from Python\n+\n+// La variable d'environnement n'existe plus ensuite\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Pour en savoir plus, consultez <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Types et Validation\n+\n+Ces variables d'environnement ne peuvent que traiter des **chaînes de texte**, car elles sont externes à Python et doivent être compatibles avec d'autres programmes et le reste du système (voire même avec différents systèmes d'exploitations, comme Linux, Windows, macOS).",
        "comment_created_at": "2025-06-21T12:08:45+00:00",
        "comment_author": "nymous",
        "comment_body": "Translated as \"chaînes de *caractères*\" in other parts of the docs\r\n```suggestion\r\nCes variables d'environnement ne peuvent que traiter des **chaînes de caractères**, car elles sont externes à Python et doivent être compatibles avec d'autres programmes et le reste du système (voire même avec différents systèmes d'exploitation, comme Linux, Windows, macOS).\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160020816",
    "pr_number": 12168,
    "pr_file": "docs/fr/docs/environment-variables.md",
    "created_at": "2025-06-21T12:14:23+00:00",
    "commented_code": "+# Variables d'environnement\n+\n+/// tip\n+\n+Si vous savez déjà ce que sont les \"variables d'environnement\" et comment les utiliser, vous pouvez passer cette partie.\n+\n+///\n+\n+Une variable d'environnement (aussi appelée \"**env var**\") est une variable qui existe **en dehors** du code Python, au niveau du **système d'exploitation**, et qui peut être lue par votre code Python (ainsi que par d'autres programmes).\n+\n+Les variables d'environnement sont utiles pour gérer les **paramètres** de l'application, dans le cadre de **l'installation** de Python, etc.\n+\n+## Créer et utiliser les variables d'environnements\n+\n+Il est possible de créer et d'utiliser les variables d'environnement dans un **shell (terminal)**, sans avoir à utiliser Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Vous pouvez créer une variable d'environnement MY_NAME avec\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis vous pouvez l'utiliser dans d'autre programmes, comme\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Utilisez-la dans d'autres programmes, comme\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lire les variables d'environnement en Python\n+\n+Vous avez aussi la possibilité de créer une variable d'environnement **en dehors** de Python, dans le terminal (ou avec n'importe quelle autre méthode), puis la **lire en Python**.\n+\n+Par exemple, vous pouvez avoir un fichier `main.py` avec:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+Le second argument de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> est la valeur par défaut à retourner.\n+\n+Si elle n'est pas fournie, ce sera `None` par defaut. Ici, on passe `\"World\"` comme valeur par défaut à utiliser.\n+\n+///\n+\n+Vous pouvez ensuite appeler ce programme Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Comme les variables d'environnement peuvent être fixées à l'extérieur du code, mais peuvent être lues par le code, et n'ont pas à être stockées (commitées sur `git`) avec les autres fichiers, il est commun de les utiliser pour les configurations ou les **paramètres**.\n+\n+Vous pouvez aussi créer une variable d'environnement pour **l'invocation d'un programme spécifique**. Elle ne sera utilisable que pour ce programme, et seulement pour sa durée d'exécution.\n+\n+Pour ce faire, créez-la en amont du programme lui-même, sur la même ligne:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME sur la même ligne que l'appel du programme\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Maintenant il peut lire cette variable d'environnement\n+\n+Hello Wade Wilson from Python\n+\n+// La variable d'environnement n'existe plus ensuite\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Pour en savoir plus, consultez <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Types et Validation\n+\n+Ces variables d'environnement ne peuvent que traiter des **chaînes de texte**, car elles sont externes à Python et doivent être compatibles avec d'autres programmes et le reste du système (voire même avec différents systèmes d'exploitations, comme Linux, Windows, macOS).\n+\n+Cela signifie que **chaque valeur** lue en Python d'une variable d'environnement **sera un `str`**, et toute conversion vers un type différent ou toute validation doit être faite dans le code.\n+\n+Le [Guide de l'utilisateur avancé - Paramètres et Variables d'environnement](./advanced/settings.md){.internal-link target=_blank} vous permettra d'en savoir plus sur les variables d'environnement pour gérer les paramètres de l'application.\n+\n+\n+## La variable d'environnement `PATH`\n+\n+Il existe une variable d'environnement **spéciale** appelée **`PATH`** utilisée par les systèmes d'exploitation (Linux, macOS, Windows) pour trouver les programmes à exécuter.\n+\n+La valeur de la variable `PATH` est une longue chaîne de caractères, composée de répertoires séparés par un `:` sur Linux et macOS, et par un point-virgule `;` sur Windows.\n+\n+Par exemple, la variable d'environnement `PATH` peut se présenter de la manière suivante:\n+\n+//// tab | Linux, macOS\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+```\n+\n+Cela signifie que le système doit rechercher des programmes dans les répertoires:\n+\n+* `/usr/local/bin`\n+* `/usr/bin`\n+* `/bin`\n+* `/usr/sbin`\n+* `/sbin`\n+\n+////\n+\n+//// tab | Windows\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n+```\n+\n+Cela signifie que le système doit rechercher des programmes dans les répertoires:\n+\n+* `C:\\Program Files\\Python312\\Scripts`\n+* `C:\\Program Files\\Python312`\n+* `C:\\Windows\\System32`\n+\n+////\n+\n+Lorsque vous tapez une **commande** dans le terminal, le système d'exploitation **recherche** le programme dans **chaque répertoire** répertorié dans la variable d'environnement `PATH`.\n+\n+Par exemple, si vous tapez `python` dans le terminal, le système d'exploitation recherche un programme nommé `python` dans le **premier répertoire** de cette liste.\n+\n+S'il le trouve, alors il **l'utilisera**. Autrement, il continue de chercher dans les **autres répertoires**.\n+\n+### Installer Python and modifier the `PATH`\n+\n+Lorsque vous installez Python, il peut vous être demandé de modifier la variable d'environnement `PATH`.\n+\n+//// tab | Linux, macOS\n+\n+Disons que vous installez Python, et qu'il finisse dans le répertoire `/opt/custompython/bin`.\n+\n+Si vous acceptez de mettre à jour la variable d'environnement `PATH`, l'installateur inclura alors `/opt/custompython/bin` à la variable d'environnement `PATH`.\n+\n+Ce qui pourrait donner:\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n+```\n+\n+En tapant `python` dans le terminal, le système trouvera le programme Python dans `/opt/custompython/bin` (le dernier répertoire) et utilisera celui-ci.\n+\n+////\n+\n+//// tab | Windows\n+\n+Disons que vous installez Python, et il finis dans le répertoire `C:\\opt\\custompython\\bin`.\n+\n+Si vous acceptez de mettre à jour la variable d'environnement `PATH`, l'installateur inclura alors `C:\\opt\\custompython\\bin` à la variable d'environnement `PATH`.\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n+```\n+\n+En tapant `python` dans le terminal, le système trouvera le programme Python dans `/opt/custompython/bin` (le dernier répertoire) et utilisera celui-ci.\n+\n+////\n+\n+\n+Donc, si vous tapez:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python\n+```\n+\n+</div>\n+\n+//// tab | Linux, macOS\n+\n+Le système **trouvera** le programme `python` dans `/opt/custompython/bin` et le lancera.\n+\n+Ce serait à peu près équivalent à taper:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ /opt/custompython/bin/python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows\n+\n+Le système **trouvera** le programme `python` dans `C:\\opt\\custompython\\bin` et le lancera.\n+\n+Ce serait à peut près équivalent à taper:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ C:\\opt\\custompython\\bin\\python\n+```\n+\n+</div>\n+\n+////\n+\n+Cette information vous sera utile, quand vous apprendrez les [Environnements virtuels](virtual-environments.md){.internal-link target=_blank}.\n+\n+## Conclusion\n+\n+Maintenant, vous devriez avoir une compréhension basique des variables d'environnement, et leurs utilisation en Python.\n+\n+Vous pouvez aussi en apprendre plus sur elles sur <a href=\"https://fr.wikipedia.org/wiki/Environment_variable\" class=\"external-link\" target=\"_blank\">Wikipedia pour les variables d'environnements</a>.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2160020816",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12168,
        "pr_file": "docs/fr/docs/environment-variables.md",
        "discussion_id": "2160020816",
        "commented_code": "@@ -0,0 +1,300 @@\n+# Variables d'environnement\n+\n+/// tip\n+\n+Si vous savez déjà ce que sont les \"variables d'environnement\" et comment les utiliser, vous pouvez passer cette partie.\n+\n+///\n+\n+Une variable d'environnement (aussi appelée \"**env var**\") est une variable qui existe **en dehors** du code Python, au niveau du **système d'exploitation**, et qui peut être lue par votre code Python (ainsi que par d'autres programmes).\n+\n+Les variables d'environnement sont utiles pour gérer les **paramètres** de l'application, dans le cadre de **l'installation** de Python, etc.\n+\n+## Créer et utiliser les variables d'environnements\n+\n+Il est possible de créer et d'utiliser les variables d'environnement dans un **shell (terminal)**, sans avoir à utiliser Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Vous pouvez créer une variable d'environnement MY_NAME avec\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis vous pouvez l'utiliser dans d'autre programmes, comme\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Utilisez-la dans d'autres programmes, comme\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lire les variables d'environnement en Python\n+\n+Vous avez aussi la possibilité de créer une variable d'environnement **en dehors** de Python, dans le terminal (ou avec n'importe quelle autre méthode), puis la **lire en Python**.\n+\n+Par exemple, vous pouvez avoir un fichier `main.py` avec:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+Le second argument de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> est la valeur par défaut à retourner.\n+\n+Si elle n'est pas fournie, ce sera `None` par defaut. Ici, on passe `\"World\"` comme valeur par défaut à utiliser.\n+\n+///\n+\n+Vous pouvez ensuite appeler ce programme Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Ici la variable d'environnement n'est pas encore fixée\n+$ python main.py\n+\n+// Comme nous n'avons pas fixé la variable d'environnement, nous obtenons la valeur par défaut\n+\n+Hello World from Python\n+\n+// Mais si nous créons d'abord une variable d'environnement\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Puis que l'on rappelle le programme\n+$ python main.py\n+\n+// Maintenant il peut lire la variable d'environnement\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Comme les variables d'environnement peuvent être fixées à l'extérieur du code, mais peuvent être lues par le code, et n'ont pas à être stockées (commitées sur `git`) avec les autres fichiers, il est commun de les utiliser pour les configurations ou les **paramètres**.\n+\n+Vous pouvez aussi créer une variable d'environnement pour **l'invocation d'un programme spécifique**. Elle ne sera utilisable que pour ce programme, et seulement pour sa durée d'exécution.\n+\n+Pour ce faire, créez-la en amont du programme lui-même, sur la même ligne:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Créez une variable d'environnement MY_NAME sur la même ligne que l'appel du programme\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Maintenant il peut lire cette variable d'environnement\n+\n+Hello Wade Wilson from Python\n+\n+// La variable d'environnement n'existe plus ensuite\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Pour en savoir plus, consultez <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Types et Validation\n+\n+Ces variables d'environnement ne peuvent que traiter des **chaînes de texte**, car elles sont externes à Python et doivent être compatibles avec d'autres programmes et le reste du système (voire même avec différents systèmes d'exploitations, comme Linux, Windows, macOS).\n+\n+Cela signifie que **chaque valeur** lue en Python d'une variable d'environnement **sera un `str`**, et toute conversion vers un type différent ou toute validation doit être faite dans le code.\n+\n+Le [Guide de l'utilisateur avancé - Paramètres et Variables d'environnement](./advanced/settings.md){.internal-link target=_blank} vous permettra d'en savoir plus sur les variables d'environnement pour gérer les paramètres de l'application.\n+\n+\n+## La variable d'environnement `PATH`\n+\n+Il existe une variable d'environnement **spéciale** appelée **`PATH`** utilisée par les systèmes d'exploitation (Linux, macOS, Windows) pour trouver les programmes à exécuter.\n+\n+La valeur de la variable `PATH` est une longue chaîne de caractères, composée de répertoires séparés par un `:` sur Linux et macOS, et par un point-virgule `;` sur Windows.\n+\n+Par exemple, la variable d'environnement `PATH` peut se présenter de la manière suivante:\n+\n+//// tab | Linux, macOS\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+```\n+\n+Cela signifie que le système doit rechercher des programmes dans les répertoires:\n+\n+* `/usr/local/bin`\n+* `/usr/bin`\n+* `/bin`\n+* `/usr/sbin`\n+* `/sbin`\n+\n+////\n+\n+//// tab | Windows\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n+```\n+\n+Cela signifie que le système doit rechercher des programmes dans les répertoires:\n+\n+* `C:\\Program Files\\Python312\\Scripts`\n+* `C:\\Program Files\\Python312`\n+* `C:\\Windows\\System32`\n+\n+////\n+\n+Lorsque vous tapez une **commande** dans le terminal, le système d'exploitation **recherche** le programme dans **chaque répertoire** répertorié dans la variable d'environnement `PATH`.\n+\n+Par exemple, si vous tapez `python` dans le terminal, le système d'exploitation recherche un programme nommé `python` dans le **premier répertoire** de cette liste.\n+\n+S'il le trouve, alors il **l'utilisera**. Autrement, il continue de chercher dans les **autres répertoires**.\n+\n+### Installer Python and modifier the `PATH`\n+\n+Lorsque vous installez Python, il peut vous être demandé de modifier la variable d'environnement `PATH`.\n+\n+//// tab | Linux, macOS\n+\n+Disons que vous installez Python, et qu'il finisse dans le répertoire `/opt/custompython/bin`.\n+\n+Si vous acceptez de mettre à jour la variable d'environnement `PATH`, l'installateur inclura alors `/opt/custompython/bin` à la variable d'environnement `PATH`.\n+\n+Ce qui pourrait donner:\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin\n+```\n+\n+En tapant `python` dans le terminal, le système trouvera le programme Python dans `/opt/custompython/bin` (le dernier répertoire) et utilisera celui-ci.\n+\n+////\n+\n+//// tab | Windows\n+\n+Disons que vous installez Python, et il finis dans le répertoire `C:\\opt\\custompython\\bin`.\n+\n+Si vous acceptez de mettre à jour la variable d'environnement `PATH`, l'installateur inclura alors `C:\\opt\\custompython\\bin` à la variable d'environnement `PATH`.\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32;C:\\opt\\custompython\\bin\n+```\n+\n+En tapant `python` dans le terminal, le système trouvera le programme Python dans `/opt/custompython/bin` (le dernier répertoire) et utilisera celui-ci.\n+\n+////\n+\n+\n+Donc, si vous tapez:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python\n+```\n+\n+</div>\n+\n+//// tab | Linux, macOS\n+\n+Le système **trouvera** le programme `python` dans `/opt/custompython/bin` et le lancera.\n+\n+Ce serait à peu près équivalent à taper:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ /opt/custompython/bin/python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows\n+\n+Le système **trouvera** le programme `python` dans `C:\\opt\\custompython\\bin` et le lancera.\n+\n+Ce serait à peut près équivalent à taper:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ C:\\opt\\custompython\\bin\\python\n+```\n+\n+</div>\n+\n+////\n+\n+Cette information vous sera utile, quand vous apprendrez les [Environnements virtuels](virtual-environments.md){.internal-link target=_blank}.\n+\n+## Conclusion\n+\n+Maintenant, vous devriez avoir une compréhension basique des variables d'environnement, et leurs utilisation en Python.\n+\n+Vous pouvez aussi en apprendre plus sur elles sur <a href=\"https://fr.wikipedia.org/wiki/Environment_variable\" class=\"external-link\" target=\"_blank\">Wikipedia pour les variables d'environnements</a>.",
        "comment_created_at": "2025-06-21T12:14:23+00:00",
        "comment_author": "nymous",
        "comment_body": "```suggestion\r\nVous pouvez aussi en apprendre plus sur elles sur <a href=\"https://fr.wikipedia.org/wiki/Variable_d%27environnement\" class=\"external-link\" target=\"_blank\">Wikipedia pour les variables d'environnements</a>.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149253546",
    "pr_number": 11820,
    "pr_file": "docs/tr/docs/tutorial/index.md",
    "created_at": "2025-06-16T07:39:52+00:00",
    "commented_code": "+# Rehber - Kullanıcı Kılavuzu\n+\n+Bu rehber, **FastAPI** birçok özelliğini adım adım nasıl kullanacağınızı gösteriyor.\n+\n+Her bölüm kademeli olarak bir öncekinin üzerine inşa edilir, ancak ayrı konulara göre yapılandırılmıştır, böylece belirli API ihtiyaçlarınızı çözmek için doğrudan belirli bir bölüme gidebilirsiniz.\n+\n+Ayrıca gelecekte referans olarak kullanılmak üzere tasarlanmıştır.\n+\n+Böylece geri gelebilir ve tam olarak neye ihtiyacınız olduğunu görebilirsiniz.\n+\n+## Kodu çalıştır\n+\n+Tüm kod blokları kopyalanabilir ve doğrudan kullanılabilir (bunlar aslında test edilmiş Python dosyalarıdır).\n+\n+Örneklerden herhangi birini çalıştırmak için kodu `main.py` dosyasına kopyalayın ve `fastapi dev` ile başlatın:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ <font color=\"#4E9A06\">fastapi</font> dev <u style=\"text-decoration-style:single\">main.py</u>\n+<font color=\"#3465A4\">INFO    </font> Using path <font color=\"#3465A4\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Resolved absolute path <font color=\"#75507B\">/home/user/code/awesomeapp/</font><font color=\"#AD7FA8\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Searching for package file structure from directories with <font color=\"#3465A4\">__init__.py</font> files\n+<font color=\"#3465A4\">INFO    </font> Importing from <font color=\"#75507B\">/home/user/code/</font><font color=\"#AD7FA8\">awesomeapp</font>\n+\n+ ╭─ <font color=\"#8AE234\"><b>Python module file</b></font> ─╮\n+ │                      │\n+ │  🐍 main.py          │\n+ │                      │\n+ ╰──────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Importing module <font color=\"#4E9A06\">main</font>\n+<font color=\"#3465A4\">INFO    </font> Found importable FastAPI app\n+\n+ ╭─ <font color=\"#8AE234\"><b>Importable FastAPI app</b></font> ─╮\n+ │                          │\n+ │  <span style=\"background-color:#272822\"><font color=\"#FF4689\">from</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> main </font></span><span style=\"background-color:#272822\"><font color=\"#FF4689\">import</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> app</font></span><span style=\"background-color:#272822\">  </span>  │\n+ │                          │\n+ ╰──────────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Using import string <font color=\"#8AE234\"><b>main:app</b></font>\n+\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╭────────── FastAPI CLI - Development mode ───────────╮</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Serving at: http://127.0.0.1:8000                  │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  API docs: http://127.0.0.1:8000/docs               │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Running in development mode, for production use:   │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  </font></span><span style=\"background-color:#C4A000\"><font color=\"#555753\"><b>fastapi run</b></font></span><span style=\"background-color:#C4A000\"><font color=\"#2E3436\">                                        │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╰─────────────────────────────────────────────────────╯</font></span>\n+\n+<font color=\"#4E9A06\">INFO</font>:     Will watch for changes in these directories: [&apos;/home/user/code/awesomeapp&apos;]\n+<font color=\"#4E9A06\">INFO</font>:     Uvicorn running on <b>http://127.0.0.1:8000</b> (Press CTRL+C to quit)\n+<font color=\"#4E9A06\">INFO</font>:     Started reloader process [<font color=\"#34E2E2\"><b>2265862</b></font>] using <font color=\"#34E2E2\"><b>WatchFiles</b></font>\n+<font color=\"#4E9A06\">INFO</font>:     Started server process [<font color=\"#06989A\">2265873</font>]\n+<font color=\"#4E9A06\">INFO</font>:     Waiting for application startup.\n+<font color=\"#4E9A06\">INFO</font>:     Application startup complete.\n+</pre>\n+```\n+\n+</div>\n+\n+Kodu yazmanız veya kopyalamanız, düzenlemeniz ve yerel olarak çalıştırmanız **ŞİDDETLE** tavsiye edilir.\n+\n+Editörünüzde kullanmak, FastAPI'ın faydalarını size gerçekten gösteren şeydir, ne kadar az kod yazmanız gerektiğini, tüm tip kontrollerini, otomatik tamamlamayı vb. görürsünüz.\n+\n+---\n+\n+## FastAPI'ı Yükleme\n+\n+FastAPI'ı yüklemenin ilk adımı:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install fastapi\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+/// note\n+`pip install fastapi` ile kurulum yaptığınızda, bazı varsayılan isteğe bağlı standart bağımlılıklarla birlikte gelir.\n+\n+Bu isteğe bağlı bağımlılıklara sahip olmak istemiyorsanız, bunun yerine `pip install fastapi-slim` ile yükleyebilirsiniz.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2149253546",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11820,
        "pr_file": "docs/tr/docs/tutorial/index.md",
        "discussion_id": "2149253546",
        "commented_code": "@@ -0,0 +1,101 @@\n+# Rehber - Kullanıcı Kılavuzu\n+\n+Bu rehber, **FastAPI** birçok özelliğini adım adım nasıl kullanacağınızı gösteriyor.\n+\n+Her bölüm kademeli olarak bir öncekinin üzerine inşa edilir, ancak ayrı konulara göre yapılandırılmıştır, böylece belirli API ihtiyaçlarınızı çözmek için doğrudan belirli bir bölüme gidebilirsiniz.\n+\n+Ayrıca gelecekte referans olarak kullanılmak üzere tasarlanmıştır.\n+\n+Böylece geri gelebilir ve tam olarak neye ihtiyacınız olduğunu görebilirsiniz.\n+\n+## Kodu çalıştır\n+\n+Tüm kod blokları kopyalanabilir ve doğrudan kullanılabilir (bunlar aslında test edilmiş Python dosyalarıdır).\n+\n+Örneklerden herhangi birini çalıştırmak için kodu `main.py` dosyasına kopyalayın ve `fastapi dev` ile başlatın:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ <font color=\"#4E9A06\">fastapi</font> dev <u style=\"text-decoration-style:single\">main.py</u>\n+<font color=\"#3465A4\">INFO    </font> Using path <font color=\"#3465A4\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Resolved absolute path <font color=\"#75507B\">/home/user/code/awesomeapp/</font><font color=\"#AD7FA8\">main.py</font>\n+<font color=\"#3465A4\">INFO    </font> Searching for package file structure from directories with <font color=\"#3465A4\">__init__.py</font> files\n+<font color=\"#3465A4\">INFO    </font> Importing from <font color=\"#75507B\">/home/user/code/</font><font color=\"#AD7FA8\">awesomeapp</font>\n+\n+ ╭─ <font color=\"#8AE234\"><b>Python module file</b></font> ─╮\n+ │                      │\n+ │  🐍 main.py          │\n+ │                      │\n+ ╰──────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Importing module <font color=\"#4E9A06\">main</font>\n+<font color=\"#3465A4\">INFO    </font> Found importable FastAPI app\n+\n+ ╭─ <font color=\"#8AE234\"><b>Importable FastAPI app</b></font> ─╮\n+ │                          │\n+ │  <span style=\"background-color:#272822\"><font color=\"#FF4689\">from</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> main </font></span><span style=\"background-color:#272822\"><font color=\"#FF4689\">import</font></span><span style=\"background-color:#272822\"><font color=\"#F8F8F2\"> app</font></span><span style=\"background-color:#272822\">  </span>  │\n+ │                          │\n+ ╰──────────────────────────╯\n+\n+<font color=\"#3465A4\">INFO    </font> Using import string <font color=\"#8AE234\"><b>main:app</b></font>\n+\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╭────────── FastAPI CLI - Development mode ───────────╮</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Serving at: http://127.0.0.1:8000                  │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  API docs: http://127.0.0.1:8000/docs               │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  Running in development mode, for production use:   │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│  </font></span><span style=\"background-color:#C4A000\"><font color=\"#555753\"><b>fastapi run</b></font></span><span style=\"background-color:#C4A000\"><font color=\"#2E3436\">                                        │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">│                                                     │</font></span>\n+ <span style=\"background-color:#C4A000\"><font color=\"#2E3436\">╰─────────────────────────────────────────────────────╯</font></span>\n+\n+<font color=\"#4E9A06\">INFO</font>:     Will watch for changes in these directories: [&apos;/home/user/code/awesomeapp&apos;]\n+<font color=\"#4E9A06\">INFO</font>:     Uvicorn running on <b>http://127.0.0.1:8000</b> (Press CTRL+C to quit)\n+<font color=\"#4E9A06\">INFO</font>:     Started reloader process [<font color=\"#34E2E2\"><b>2265862</b></font>] using <font color=\"#34E2E2\"><b>WatchFiles</b></font>\n+<font color=\"#4E9A06\">INFO</font>:     Started server process [<font color=\"#06989A\">2265873</font>]\n+<font color=\"#4E9A06\">INFO</font>:     Waiting for application startup.\n+<font color=\"#4E9A06\">INFO</font>:     Application startup complete.\n+</pre>\n+```\n+\n+</div>\n+\n+Kodu yazmanız veya kopyalamanız, düzenlemeniz ve yerel olarak çalıştırmanız **ŞİDDETLE** tavsiye edilir.\n+\n+Editörünüzde kullanmak, FastAPI'ın faydalarını size gerçekten gösteren şeydir, ne kadar az kod yazmanız gerektiğini, tüm tip kontrollerini, otomatik tamamlamayı vb. görürsünüz.\n+\n+---\n+\n+## FastAPI'ı Yükleme\n+\n+FastAPI'ı yüklemenin ilk adımı:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install fastapi\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+/// note\n+`pip install fastapi` ile kurulum yaptığınızda, bazı varsayılan isteğe bağlı standart bağımlılıklarla birlikte gelir.\n+\n+Bu isteğe bağlı bağımlılıklara sahip olmak istemiyorsanız, bunun yerine `pip install fastapi-slim` ile yükleyebilirsiniz.",
        "comment_created_at": "2025-06-16T07:39:52+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "This part was updated in original (En) document:\r\n\r\n```\r\nWhen you install with `pip install \"fastapi[standard]\"` it comes with some default optional standard dependencies.\r\n\r\nIf you don't want to have those optional dependencies, you can instead install `pip install fastapi`.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1553951690",
    "pr_number": 11411,
    "pr_file": "docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md",
    "created_at": "2024-04-05T16:09:57+00:00",
    "commented_code": "{!> ../../../docs_src/dependencies/tutorial006_an.py!}\n     ```\n \n-=== \"Python 3.8 non-Annotated\"\n+=== \"Python 3.8 без Annotated\"\n \n-    !!! tip\n-        Prefer to use the `Annotated` version if possible.\n+    !!! Подсказка\n+        Рекомендуется использовать версию с Annotated если возможно.\n \n     ```Python hl_lines=\"9  14\"\n     {!> ../../../docs_src/dependencies/tutorial006.py!}\n     ```\n \n-## Dependencies for a group of *path operations*\n+## Dependencies для группы *операторов путей*\n \n-Later, when reading about how to structure bigger applications ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), possibly with multiple files, you will learn how to declare a single `dependencies` parameter for a group of *path operations*.\n+Позже, читая о том как структурировать большие приложения ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), возможно, с несколькими файлами, вы узнаете как объявить один параметр `dependencies` для группы *операций путей*.\n \n-## Global Dependencies\n+## Глобальный Dependencies",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1553951690",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11411,
        "pr_file": "docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md",
        "discussion_id": "1553951690",
        "commented_code": "@@ -121,19 +121,19 @@ So, you can re-use a normal dependency (that returns a value) you already use so\n     {!> ../../../docs_src/dependencies/tutorial006_an.py!}\n     ```\n \n-=== \"Python 3.8 non-Annotated\"\n+=== \"Python 3.8 без Annotated\"\n \n-    !!! tip\n-        Prefer to use the `Annotated` version if possible.\n+    !!! Подсказка\n+        Рекомендуется использовать версию с Annotated если возможно.\n \n     ```Python hl_lines=\"9  14\"\n     {!> ../../../docs_src/dependencies/tutorial006.py!}\n     ```\n \n-## Dependencies for a group of *path operations*\n+## Dependencies для группы *операторов путей*\n \n-Later, when reading about how to structure bigger applications ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), possibly with multiple files, you will learn how to declare a single `dependencies` parameter for a group of *path operations*.\n+Позже, читая о том как структурировать большие приложения ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), возможно, с несколькими файлами, вы узнаете как объявить один параметр `dependencies` для группы *операций путей*.\n \n-## Global Dependencies\n+## Глобальный Dependencies",
        "comment_created_at": "2024-04-05T16:09:57+00:00",
        "comment_author": "s111d",
        "comment_body": "ГлобальныЕ ? Или это один объект?",
        "pr_file_module": null
      },
      {
        "comment_id": "1554553984",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11411,
        "pr_file": "docs/ru/docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md",
        "discussion_id": "1553951690",
        "commented_code": "@@ -121,19 +121,19 @@ So, you can re-use a normal dependency (that returns a value) you already use so\n     {!> ../../../docs_src/dependencies/tutorial006_an.py!}\n     ```\n \n-=== \"Python 3.8 non-Annotated\"\n+=== \"Python 3.8 без Annotated\"\n \n-    !!! tip\n-        Prefer to use the `Annotated` version if possible.\n+    !!! Подсказка\n+        Рекомендуется использовать версию с Annotated если возможно.\n \n     ```Python hl_lines=\"9  14\"\n     {!> ../../../docs_src/dependencies/tutorial006.py!}\n     ```\n \n-## Dependencies for a group of *path operations*\n+## Dependencies для группы *операторов путей*\n \n-Later, when reading about how to structure bigger applications ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), possibly with multiple files, you will learn how to declare a single `dependencies` parameter for a group of *path operations*.\n+Позже, читая о том как структурировать большие приложения ([Bigger Applications - Multiple Files](../../tutorial/bigger-applications.md){.internal-link target=_blank}), возможно, с несколькими файлами, вы узнаете как объявить один параметр `dependencies` для группы *операций путей*.\n \n-## Global Dependencies\n+## Глобальный Dependencies",
        "comment_created_at": "2024-04-06T09:13:25+00:00",
        "comment_author": "anton2yakovlev",
        "comment_body": "Речь про один объект, который единожды задается при создании всего FastAPI приложения, пример:\r\n`app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059438136",
    "pr_number": 13630,
    "pr_file": "docs/ko/docs/virtual-environments.md",
    "created_at": "2025-04-25T01:35:13+00:00",
    "commented_code": "+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2059438136",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13630,
        "pr_file": "docs/ko/docs/virtual-environments.md",
        "discussion_id": "2059438136",
        "commented_code": "@@ -0,0 +1,854 @@\n+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.",
        "comment_created_at": "2025-04-25T01:35:13+00:00",
        "comment_author": "sodaMelon",
        "comment_body": "```suggestion\r\n**패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)은 **(매우) 좋은 습관**입니다.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059445446",
    "pr_number": 13630,
    "pr_file": "docs/ko/docs/virtual-environments.md",
    "created_at": "2025-04-25T01:49:04+00:00",
    "commented_code": "+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.\n+\n+///\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install \"fastapi[standard]\"\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install \"fastapi[standard]\"\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+### `requirements.txt`에서 설치하기\n+\n+`requirements.txt` 파일이 있다면, 그 안에 명시된 패키지들을 한 번에 설치할 수 있습니다.\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+/// details | `requirements.txt`\n+\n+다음은 몇 가지 패키지가 포함된 `requirements.txt`의 예시입니다:\n+\n+```requirements.txt\n+fastapi[standard]==0.113.0\n+pydantic==2.8.0\n+```\n+\n+///\n+\n+## 프로그램 실행하기\n+\n+가상 환경을 활성화한 후에는 프로그램을 실행할 수 있습니다. 이때, 해당 가상 환경에 설치한 Python과 패키지들이 사용됩니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python main.py\n+\n+Hello World\n+```\n+\n+</div>\n+\n+## 에디터 설정하기\n+\n+에디터를 사용할 경우, 앞서 만든 가상 환경을 사용하도록 설정하는 것이 좋습니다. (대부분의 에디터는 자동으로 감지하기도 합니다.)\n+이렇게 하면 자동 완성 기능이나 코드 내 오류 표시 기능을 제대로 사용할 수 있습니다.\n+\n+예시:\n+\n+* <a href=\"https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment\" class=\"external-link\" target=\"_blank\">VS Code</a>\n+* <a href=\"https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html\" class=\"external-link\" target=\"_blank\">PyCharm</a>\n+\n+/// tip\n+\n+보통 이 설정은 가상 환경을 **처음 만들었을 때 한 번만** 해주면 됩니다.\n+\n+///\n+\n+## 가상 환경 비활성화하기\n+\n+프로젝트 작업이 끝났다면, 가상 환경을 **비활성화**할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ deactivate\n+```\n+\n+</div>\n+\n+이렇게 하면 이후에 `python` 명령어를 실행해도, 가상 환경의 Python이나 그 안에 설치된 패키지들을 사용하지 않게 됩니다.\n+\n+## 이제 작업할 준비가 되었습니다\n+\n+이제 프로젝트 작업을 시작할 준비가 완료되었습니다.\n+\n+\n+/// tip\n+\n+위에서 설명한 내용이 **왜 그런지** 더 깊이 이해하고 싶으신가요?\n+\n+계속 읽어주세요. 👇🤓\n+\n+///\n+\n+## 가상 환경을 왜 사용하는가\n+\n+FastAPI를 사용하려면 먼저 <a href=\"https://www.python.org/\" class=\"external-link\" target=\"_blank\">Python</a>을 설치해야 합니다.\n+\n+그 다음에는 FastAPI와 함께 사용할 **기타 패키지들**을 **설치**해야 합니다.\n+\n+패키지를 설치할 때는 보통 Python에 기본 포함된 `pip` 명령어(또는 유사한 도구)를 사용합니다.\n+\n+하지만 `pip`을 그냥 직접 사용하면, 해당 패키지들은 **전역 Python 환경**(Python이 전체 시스템에 설치된 위치)에 설치됩니다.\n+\n+### 문제점\n+\n+그렇다면, 전역 Python 환경에 패키지를 설치하는 것의 문제는 무엇일까요?\n+\n+어느 시점이 되면, 여러분은 아마 **서로 다른 패키지들**에 의존하는 여러 개의 프로그램을 작성하게 될 것입니다. 그리고 이들 중 일부는 **같은 패키지의 서로 다른 버전**을 필요로 할 수 있습니다. 😱",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2059445446",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13630,
        "pr_file": "docs/ko/docs/virtual-environments.md",
        "discussion_id": "2059445446",
        "commented_code": "@@ -0,0 +1,854 @@\n+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.\n+\n+///\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install \"fastapi[standard]\"\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install \"fastapi[standard]\"\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+### `requirements.txt`에서 설치하기\n+\n+`requirements.txt` 파일이 있다면, 그 안에 명시된 패키지들을 한 번에 설치할 수 있습니다.\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+/// details | `requirements.txt`\n+\n+다음은 몇 가지 패키지가 포함된 `requirements.txt`의 예시입니다:\n+\n+```requirements.txt\n+fastapi[standard]==0.113.0\n+pydantic==2.8.0\n+```\n+\n+///\n+\n+## 프로그램 실행하기\n+\n+가상 환경을 활성화한 후에는 프로그램을 실행할 수 있습니다. 이때, 해당 가상 환경에 설치한 Python과 패키지들이 사용됩니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python main.py\n+\n+Hello World\n+```\n+\n+</div>\n+\n+## 에디터 설정하기\n+\n+에디터를 사용할 경우, 앞서 만든 가상 환경을 사용하도록 설정하는 것이 좋습니다. (대부분의 에디터는 자동으로 감지하기도 합니다.)\n+이렇게 하면 자동 완성 기능이나 코드 내 오류 표시 기능을 제대로 사용할 수 있습니다.\n+\n+예시:\n+\n+* <a href=\"https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment\" class=\"external-link\" target=\"_blank\">VS Code</a>\n+* <a href=\"https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html\" class=\"external-link\" target=\"_blank\">PyCharm</a>\n+\n+/// tip\n+\n+보통 이 설정은 가상 환경을 **처음 만들었을 때 한 번만** 해주면 됩니다.\n+\n+///\n+\n+## 가상 환경 비활성화하기\n+\n+프로젝트 작업이 끝났다면, 가상 환경을 **비활성화**할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ deactivate\n+```\n+\n+</div>\n+\n+이렇게 하면 이후에 `python` 명령어를 실행해도, 가상 환경의 Python이나 그 안에 설치된 패키지들을 사용하지 않게 됩니다.\n+\n+## 이제 작업할 준비가 되었습니다\n+\n+이제 프로젝트 작업을 시작할 준비가 완료되었습니다.\n+\n+\n+/// tip\n+\n+위에서 설명한 내용이 **왜 그런지** 더 깊이 이해하고 싶으신가요?\n+\n+계속 읽어주세요. 👇🤓\n+\n+///\n+\n+## 가상 환경을 왜 사용하는가\n+\n+FastAPI를 사용하려면 먼저 <a href=\"https://www.python.org/\" class=\"external-link\" target=\"_blank\">Python</a>을 설치해야 합니다.\n+\n+그 다음에는 FastAPI와 함께 사용할 **기타 패키지들**을 **설치**해야 합니다.\n+\n+패키지를 설치할 때는 보통 Python에 기본 포함된 `pip` 명령어(또는 유사한 도구)를 사용합니다.\n+\n+하지만 `pip`을 그냥 직접 사용하면, 해당 패키지들은 **전역 Python 환경**(Python이 전체 시스템에 설치된 위치)에 설치됩니다.\n+\n+### 문제점\n+\n+그렇다면, 전역 Python 환경에 패키지를 설치하는 것의 문제는 무엇일까요?\n+\n+어느 시점이 되면, 여러분은 아마 **서로 다른 패키지들**에 의존하는 여러 개의 프로그램을 작성하게 될 것입니다. 그리고 이들 중 일부는 **같은 패키지의 서로 다른 버전**을 필요로 할 수 있습니다. 😱",
        "comment_created_at": "2025-04-25T01:49:04+00:00",
        "comment_author": "sodaMelon",
        "comment_body": "```suggestion\r\n어느 시점이 되면, **서로 다른 패키지들**에 의존하는 여러 개의 프로그램을 작성하게 될 것입니다. 그리고 이들 중 일부는 **같은 패키지의 서로 다른 버전**을 필요로 할 수 있습니다. 😱\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2059458107",
    "pr_number": 13630,
    "pr_file": "docs/ko/docs/virtual-environments.md",
    "created_at": "2025-04-25T02:07:10+00:00",
    "commented_code": "+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.\n+\n+///\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install \"fastapi[standard]\"\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install \"fastapi[standard]\"\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+### `requirements.txt`에서 설치하기\n+\n+`requirements.txt` 파일이 있다면, 그 안에 명시된 패키지들을 한 번에 설치할 수 있습니다.\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+/// details | `requirements.txt`\n+\n+다음은 몇 가지 패키지가 포함된 `requirements.txt`의 예시입니다:\n+\n+```requirements.txt\n+fastapi[standard]==0.113.0\n+pydantic==2.8.0\n+```\n+\n+///\n+\n+## 프로그램 실행하기\n+\n+가상 환경을 활성화한 후에는 프로그램을 실행할 수 있습니다. 이때, 해당 가상 환경에 설치한 Python과 패키지들이 사용됩니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python main.py\n+\n+Hello World\n+```\n+\n+</div>\n+\n+## 에디터 설정하기\n+\n+에디터를 사용할 경우, 앞서 만든 가상 환경을 사용하도록 설정하는 것이 좋습니다. (대부분의 에디터는 자동으로 감지하기도 합니다.)\n+이렇게 하면 자동 완성 기능이나 코드 내 오류 표시 기능을 제대로 사용할 수 있습니다.\n+\n+예시:\n+\n+* <a href=\"https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment\" class=\"external-link\" target=\"_blank\">VS Code</a>\n+* <a href=\"https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html\" class=\"external-link\" target=\"_blank\">PyCharm</a>\n+\n+/// tip\n+\n+보통 이 설정은 가상 환경을 **처음 만들었을 때 한 번만** 해주면 됩니다.\n+\n+///\n+\n+## 가상 환경 비활성화하기\n+\n+프로젝트 작업이 끝났다면, 가상 환경을 **비활성화**할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ deactivate\n+```\n+\n+</div>\n+\n+이렇게 하면 이후에 `python` 명령어를 실행해도, 가상 환경의 Python이나 그 안에 설치된 패키지들을 사용하지 않게 됩니다.\n+\n+## 이제 작업할 준비가 되었습니다\n+\n+이제 프로젝트 작업을 시작할 준비가 완료되었습니다.\n+\n+\n+/// tip\n+\n+위에서 설명한 내용이 **왜 그런지** 더 깊이 이해하고 싶으신가요?\n+\n+계속 읽어주세요. 👇🤓\n+\n+///\n+\n+## 가상 환경을 왜 사용하는가\n+\n+FastAPI를 사용하려면 먼저 <a href=\"https://www.python.org/\" class=\"external-link\" target=\"_blank\">Python</a>을 설치해야 합니다.\n+\n+그 다음에는 FastAPI와 함께 사용할 **기타 패키지들**을 **설치**해야 합니다.\n+\n+패키지를 설치할 때는 보통 Python에 기본 포함된 `pip` 명령어(또는 유사한 도구)를 사용합니다.\n+\n+하지만 `pip`을 그냥 직접 사용하면, 해당 패키지들은 **전역 Python 환경**(Python이 전체 시스템에 설치된 위치)에 설치됩니다.\n+\n+### 문제점\n+\n+그렇다면, 전역 Python 환경에 패키지를 설치하는 것의 문제는 무엇일까요?\n+\n+어느 시점이 되면, 여러분은 아마 **서로 다른 패키지들**에 의존하는 여러 개의 프로그램을 작성하게 될 것입니다. 그리고 이들 중 일부는 **같은 패키지의 서로 다른 버전**을 필요로 할 수 있습니다. 😱\n+\n+예를 들어, `philosophers-stone`이라는 프로젝트를 만들었다고 가정해봅시다. 이 프로그램은 `harry`라는 패키지의 **버전 1**에 의존합니다. 따라서 `harry`를 설치해야 합니다.\n+\n+\n+```mermaid\n+flowchart LR\n+    stone(philosophers-stone) -->|requires| harry-1[harry v1]\n+```\n+\n+그런데 나중에 prisoner-of-azkaban이라는 또 다른 프로젝트를 만들게 되었고, 이 프로젝트도 harry 패키지에 의존하지만 버전 3이 필요합니다.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2059458107",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13630,
        "pr_file": "docs/ko/docs/virtual-environments.md",
        "discussion_id": "2059458107",
        "commented_code": "@@ -0,0 +1,854 @@\n+# 가상 환경\n+\n+Python 프로젝트를 작업할 때는 보통 **가상 환경** (또는 이와 유사한 도구)을 사용하는 것이 좋습니다.\n+각 프로젝트 마다 설치하는 패키지를 분리하여 관리할 수 있습니다.\n+\n+/// info\n+\n+이미 가상 환경에 대해 알고 있다면 이 섹션은 건너 뛰어도 괜찮습니다.\n+\n+///\n+\n+/// tip\n+\n+**가상 환경(Virtual Environment)** 은 **환경 변수(Environment Variable)** 와 다릅니다.\n+\n+**환경 변수**는 시스템에 존재하며, 프로그램이 사용할 수 있는 변수입니다.\n+\n+**가상 환경**은 몇 개의 파일로 구성된 하나의 디렉터리입니다.\n+\n+///\n+\n+/// info\n+\n+이 페이지에서는 **가상 환경** 사용 방법과 작동 방식을 설명합니다.\n+\n+만약 **모든 것을 관리해주는 도구** (Python 설치까지 포함)를 사용하고 싶다면 <a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">uv</a>를 사용해보세요.\n+\n+///\n+\n+## 프로젝트 생성\n+\n+우선, 프로젝트를 위한 디렉터리를 하나 만드세요.\n+\n+보통 저는 사용자 홈 디렉터리 안에 `code`라는 디렉터리를 만들고, 그 안에 프로젝트마다 하나씩 디렉터리를 생성합니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+// 홈 디렉터리로 이동\n+$ cd\n+// 모든 코드 프로젝트를 위한 디렉터리 생성\n+$ mkdir code\n+// code 디렉터리로 이동\n+$ cd code\n+// 이번 프로젝트를 위한 디렉터리 생성\n+$ mkdir awesome-project\n+// 해당 프로젝트 디렉터리로 이동\n+$ cd awesome-project\n+```\n+\n+</div>\n+\n+## 가상 환경 생성\n+\n+Python 프로젝트를 **처음 시작할 때**, 가상 환경을 **<abbr title=\"다른 방법들도 있지만, 이건 간단한 가이드라인입니다\">프로젝트 내부</abbr>**에 생성하세요.\n+\n+/// tip\n+\n+이 작업은 **프로젝트 당 한 번만** 하면 됩니다. 매번 작업할 때마다 할 필요는 없습니다.\n+\n+///\n+\n+//// tab | `venv`\n+\n+가상 환경을 만들기 위해 Python에 기본 포함된 `venv` 모듈을 사용할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m venv .venv\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `python`: `python`이라는 프로그램을 사용합니다.\n+* `-m`: 모듈을 스크립트처럼 실행하겠다는 의미입니다. 어떤 모듈인지 바로 뒤에 지정합니다.\n+* `venv`: 보통 Python에 기본으로 포함된 `venv` 모듈을 사용합니다.\n+* `.venv`: `.venv`라는 새 디렉터리에 가상 환경을 생성합니다.\n+\n+///\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>가 설치되어 있다면, uv를 통해 가상 환경을 생성할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv venv\n+```\n+\n+</div>\n+\n+/// tip\n+\n+기본적으로 `uv`는 `.venv`라는 디렉터리에 가상 환경을 생성합니다.\n+\n+하지만 원하는 디렉터리 이름을 추가 인자로 넘겨주면 경로를 커스터마이징할 수 있습니다.\n+\n+///\n+\n+////\n+\n+해당 명령은 `.venv`라는 디렉터리에 새로운 가상 환경을 생성합니다.\n+\n+/// details | `.venv` 또는 다른 이름\n+\n+가상 환경을 다른 디렉터리에 생성할 수도 있지만, `.venv`라고 이름 짓는 것이 일반적인 관례입니다.\n+\n+///\n+\n+## 가상 환경 활성화\n+\n+가상 환경을 활성화하면 이후 실행되는 Python 명령어나 설치되는 패키지가 이 환경을 사용하게 됩니다.\n+\n+/// tip\n+\n+프로젝트를 작업할 때마다, **터미널을 새로 열었을 때마다** 이 작업을 꼭 해주세요.\n+\n+///\n+\n+//// tab | Linux, macOS\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/bin/activate\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ .venv\\Scripts\\Activate.ps1\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows Bash\n+\n+Windows에서 Bash(예: <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>)를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ source .venv/Scripts/activate\n+```\n+\n+</div>\n+\n+////\n+\n+/// tip\n+\n+가상 환경에서 **새로운 패키지**를 설치할 때마다, 해당 환경을 **다시 활성화**하세요.\n+\n+이렇게 하면 해당 패키지에 의해 설치된 **터미널(<abbr title=\"command line interface\">CLI</abbr>) 프로그램**을 사용할 때, 전역에 설치된 다른 버전이 아니라, 가상 환경 안에 설치된 정확한 버전을 사용하게 됩니다.\n+\n+///\n+\n+## 가상 환경이 활성화되었는지 확인하기\n+\n+이전 명령어가 제대로 작동했는지 확인하고, 현재 가상 환경이 활성화된 상태인지 점검하세요.\n+\n+/// tip\n+\n+이 단계는 **선택 사항**이지만, 모든 것이 제대로 작동하고 있는지 그리고 의도한 가상 환경이 활성화되어 있는지를 **확인**하는 좋은 방법입니다.\n+\n+///\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+$ which python\n+\n+/home/user/code/awesome-project/.venv/bin/python\n+```\n+\n+</div>\n+\n+`python` 위치가 `.venv/bin/python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+$ Get-Command python\n+\n+C:\\Users\\user\\code\\awesome-project\\.venv\\Scripts\\python\n+```\n+\n+</div>\n+\n+`python` 바이너리가 `.venv\\Scripts\\python` 경로로 표시된다면, 즉 프로젝트 내부(이 예시에서는 `awesome-project`)에 위치한 경로라면 성공입니다. 🎉\n+////\n+\n+## pip 업그레이드\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용한다면, `pip` 대신 `uv`로 패키지를 설치하게 되므로 `pip`을 업그레이드할 필요가 없습니다. 😎\n+\n+///\n+\n+`pip`을 사용하여 패키지를 설치하는 경우 (Python에는 기본으로 포함되어 있습니다), **최신 버전으로 업그레이드**하는 것이 좋습니다.\n+\n+패키지 설치 중 발생하는 다양한 특이한 에러는 단순히 `pip`을 먼저 업그레이드함으로써 해결되는 경우가 많습니다.\n+\n+/// tip\n+\n+이 작업은 보통 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+가상 환경이 활성화된 상태인지 확인한 후(앞서 설명한 명령어 사용), 아래 명령어를 실행하세요:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python -m pip install --upgrade pip\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## `.gitignore` 추가하기\n+\n+**Git**을 사용하고 있다면 (사용하는 것이 좋습니다), `.gitignore` 파일을 추가해서 `.venv` 디렉터리 전체를 Git에서 제외하세요.\n+\n+/// tip\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용해 가상 환경을 생성했다면, 이미 이 작업이 자동으로 처리되어 있으므로 이 단계는 건너뛰어도 됩니다. 😎\n+\n+///\n+\n+/// tip\n+\n+이 작업도 마찬가지로, 가상 환경을 생성한 **직후 한 번만** 하면 됩니다.\n+\n+///\n+\n+<div class=\"termy\">\n+\n+```console\n+$ echo \"*\" > .venv/.gitignore\n+```\n+\n+</div>\n+\n+/// details | 명령어 상세 설명\n+\n+* `echo \"*\"`: 터미널에 `*`라는 텍스트를 \"출력\"합니다 (다음 설명에서 조금 바뀝니다)\n+* `>`: 왼쪽 명령어가 터미널에 출력할 내용을 터미널에 출력하지 않고,\n+       오른쪽에 지정된 파일로 **기록(write)** 하라는 의미입니다\n+* `.gitignore`: 출력된 텍스트를 기록할 파일 이름입니다\n+\n+그리고 Git에서 `*`는 \"모든 것\"을 의미합니다. 따라서 `.venv` 디렉터리 안의 모든 파일을 무시하게 됩니다.\n+\n+이 명령어는 다음과 같은 내용을 가진 `.gitignore` 파일을 생성합니다:\n+\n+\n+```gitignore\n+*\n+```\n+\n+///\n+\n+## 패키지 설치하기\n+\n+가상 환경을 활성화한 후, 그 안에 필요한 패키지들을 설치할 수 있습니다.\n+\n+/// tip\n+\n+프로젝트에서 필요한 패키지를 설치하거나 업그레이드할 때는 이 작업을 **한 번만** 하면 됩니다.\n+\n+만약 특정 패키지의 버전을 업그레이드하거나, 새로운 패키지를 추가할 필요가 생기면 **다시 이 작업을 반복**하면 됩니다.\n+\n+///\n+\n+### 패키지 직접 설치하기\n+\n+급하게 작업하거나, 프로젝트에 필요한 패키지 목록을 따로 파일로 정의하고 싶지 않은 경우에는 패키지를 직접 설치할 수 있습니다.\n+\n+/// tip\n+\n+여전히 **패키지 이름과 버전 정보를 파일에 정리해두는 것**(예: `requirements.txt` 또는 `pyproject.toml`)이 **(매우) 좋은 습관**입니다.\n+\n+///\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install \"fastapi[standard]\"\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install \"fastapi[standard]\"\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+### `requirements.txt`에서 설치하기\n+\n+`requirements.txt` 파일이 있다면, 그 안에 명시된 패키지들을 한 번에 설치할 수 있습니다.\n+\n+//// tab | `pip`\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | `uv`\n+\n+<a href=\"https://github.com/astral-sh/uv\" class=\"external-link\" target=\"_blank\">`uv`</a>를 사용하는 경우:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uv pip install -r requirements.txt\n+---> 100%\n+```\n+\n+</div>\n+\n+////\n+\n+/// details | `requirements.txt`\n+\n+다음은 몇 가지 패키지가 포함된 `requirements.txt`의 예시입니다:\n+\n+```requirements.txt\n+fastapi[standard]==0.113.0\n+pydantic==2.8.0\n+```\n+\n+///\n+\n+## 프로그램 실행하기\n+\n+가상 환경을 활성화한 후에는 프로그램을 실행할 수 있습니다. 이때, 해당 가상 환경에 설치한 Python과 패키지들이 사용됩니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ python main.py\n+\n+Hello World\n+```\n+\n+</div>\n+\n+## 에디터 설정하기\n+\n+에디터를 사용할 경우, 앞서 만든 가상 환경을 사용하도록 설정하는 것이 좋습니다. (대부분의 에디터는 자동으로 감지하기도 합니다.)\n+이렇게 하면 자동 완성 기능이나 코드 내 오류 표시 기능을 제대로 사용할 수 있습니다.\n+\n+예시:\n+\n+* <a href=\"https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment\" class=\"external-link\" target=\"_blank\">VS Code</a>\n+* <a href=\"https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html\" class=\"external-link\" target=\"_blank\">PyCharm</a>\n+\n+/// tip\n+\n+보통 이 설정은 가상 환경을 **처음 만들었을 때 한 번만** 해주면 됩니다.\n+\n+///\n+\n+## 가상 환경 비활성화하기\n+\n+프로젝트 작업이 끝났다면, 가상 환경을 **비활성화**할 수 있습니다.\n+\n+<div class=\"termy\">\n+\n+```console\n+$ deactivate\n+```\n+\n+</div>\n+\n+이렇게 하면 이후에 `python` 명령어를 실행해도, 가상 환경의 Python이나 그 안에 설치된 패키지들을 사용하지 않게 됩니다.\n+\n+## 이제 작업할 준비가 되었습니다\n+\n+이제 프로젝트 작업을 시작할 준비가 완료되었습니다.\n+\n+\n+/// tip\n+\n+위에서 설명한 내용이 **왜 그런지** 더 깊이 이해하고 싶으신가요?\n+\n+계속 읽어주세요. 👇🤓\n+\n+///\n+\n+## 가상 환경을 왜 사용하는가\n+\n+FastAPI를 사용하려면 먼저 <a href=\"https://www.python.org/\" class=\"external-link\" target=\"_blank\">Python</a>을 설치해야 합니다.\n+\n+그 다음에는 FastAPI와 함께 사용할 **기타 패키지들**을 **설치**해야 합니다.\n+\n+패키지를 설치할 때는 보통 Python에 기본 포함된 `pip` 명령어(또는 유사한 도구)를 사용합니다.\n+\n+하지만 `pip`을 그냥 직접 사용하면, 해당 패키지들은 **전역 Python 환경**(Python이 전체 시스템에 설치된 위치)에 설치됩니다.\n+\n+### 문제점\n+\n+그렇다면, 전역 Python 환경에 패키지를 설치하는 것의 문제는 무엇일까요?\n+\n+어느 시점이 되면, 여러분은 아마 **서로 다른 패키지들**에 의존하는 여러 개의 프로그램을 작성하게 될 것입니다. 그리고 이들 중 일부는 **같은 패키지의 서로 다른 버전**을 필요로 할 수 있습니다. 😱\n+\n+예를 들어, `philosophers-stone`이라는 프로젝트를 만들었다고 가정해봅시다. 이 프로그램은 `harry`라는 패키지의 **버전 1**에 의존합니다. 따라서 `harry`를 설치해야 합니다.\n+\n+\n+```mermaid\n+flowchart LR\n+    stone(philosophers-stone) -->|requires| harry-1[harry v1]\n+```\n+\n+그런데 나중에 prisoner-of-azkaban이라는 또 다른 프로젝트를 만들게 되었고, 이 프로젝트도 harry 패키지에 의존하지만 버전 3이 필요합니다.",
        "comment_created_at": "2025-04-25T02:07:10+00:00",
        "comment_author": "sodaMelon",
        "comment_body": "```suggestion\r\n그런데 나중에 `prisoner-of-azkaban`이라는 또 다른 프로젝트를 만들게 되었고, 이 프로젝트도 `harry` 패키지에 의존합니다. 그런데 이 프로젝트는 `harry`의  버전 `3`이 필요합니다.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1766888953",
    "pr_number": 12211,
    "pr_file": "docs/es/docs/environment-variables.md",
    "created_at": "2024-09-19T13:56:25+00:00",
    "commented_code": "+# Variables de Entorno\n+\n+/// tip\n+\n+Si ya conoces sobre \"variables de entorno\" y cómo usarlas, siéntete libre de saltarte esta parte.\n+\n+///\n+\n+Una variable de entorno (también conocida como \"**env var**\") es una variable que existe **por fuera** del código de Python, en el **sistema operativo**, y puede ser leída por tu código Python (o por otros programas también).\n+\n+Las variables de entorno pueden ser útiles para manejar **configuraciones** de aplicaciones, como parte de la **instalación** de Python, etc.\n+\n+## Crear y Usar Variables de Entorno\n+\n+Puedes **crear** y usar variables de entorno en la **shell (terminal)**, sin necesidad de utilizar Python:\n+\n+////tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Puedes crear una variable de entorno llamada MY_NAME con\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Luego, podrías usarla con otros programas, como\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Crea un variable de entorno llamada MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Usala con otros programas, como\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lee Variables de Entorno en Python\n+\n+También puedes crear variables de entorno **por fuera** de Python, en la terminal (o por cualquier otro método), y luego **leerlas en Python**.\n+\n+Por ejemplo, podrías tener un archivo `main.py` con:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+El segundo argumento de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> es el valor por defecto que se devuelve.\n+\n+Si no se proporciona, el valor predeterminado es `None`. En este caso, proporcionamos `\"World\"` como valor por defecto para usar.\n+\n+///\n+\n+Luego, podrías ejecutar ese programa en Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Aquí aún no hemos establecido la variable de entorno\n+$ python main.py\n+\n+// Como no establecimos la variable de entorno, obtenemos el valor predeterminado\n+\n+Hello World from Python\n+\n+// Pero si primero creamos una variable de entorno\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Y luego ejecutamos el programa nuevamente\n+$ python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Aquí aún no hemos establecido la variable de entorno\n+$ python main.py\n+\n+// Como no establecimos la variable de entorno, obtenemos el valor predeterminado\n+\n+Hello World from Python\n+\n+// Pero si primero creamos una variable de entorno\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Y luego ejecutamos el programa nuevamente\n+$ python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Como las variables de entorno se pueden establecer fuera del código, pero pueden ser leídas por el código y no tienen que ser almacenadas (o enviadas a `git`) con el resto de los archivos, es común usarlas para configuraciones o **ajustes**.\n+\n+También puedes crear una variable de entorno solo para una **invocación específica de un programa**, que estará disponible únicamente para ese programa y solo durante su ejecución.\n+\n+Para hacer eso, créala justo antes de llamar al programa, en la misma línea:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Crear una variable de entorno MY_NAME en la misma línea para esta ejecución del programa\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+\n+// La variable de entorno ya no existe después\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Puedes leer más sobre esto en <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Tipos y Validación\n+\n+Estas variables de entorno solo pueden manejar **cadenas de texto**, ya que son externas a Python y deben ser compatibles con otros programas y el resto del sistema (incluso con diferentes sistemas operativos como Linux, Windows, macOS).\n+\n+Esto significa que **cualquier valor** leído en Python desde una variable de entorno **será un `str`**, y cualquier conversión a un tipo diferente o validación debe hacerse en el código.\n+\n+Aprenderás más sobre cómo usar las variables de entorno para manejar **ajustes de aplicación** en la [Guía de Usuario Avanzado - Ajustes y Variables de Entorno](./advanced/settings.md){.internal-link target=_blank}.\n+\n+## Variable de Entorno `PATH`\n+\n+Existe una variable de entorno **especial** llamada **`PATH`** que es usada por los sistemas operativos (Linux, macOS, Windows) para encontrar los programas que deben ejecutarse.\n+\n+El valor de la variable `PATH` es una cadena de texto larga formada por directorios separados por dos puntos `:` en Linux y macOS, y por un punto y coma `;` en Windows.\n+\n+Por ejemplo, la variable de entorno `PATH` podría verse así:\n+\n+//// tab | Linux, macOS\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+```\n+\n+Esto significa que el sistema deberia buscar programas en los directorios:\n+\n+* `/usr/local/bin`\n+* `/usr/bin`\n+* `/bin`\n+* `/usr/sbin`\n+* `/sbin`\n+\n+////\n+\n+//// tab | Windows\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n+```\n+\n+Esto significa que el sistema deberia buscar programas en los directorios:\n+\n+* `C:\\Program Files\\Python312\\Scripts`\n+* `C:\\Program Files\\Python312`\n+* `C:\\Windows\\System32`\n+\n+////\n+\n+Cuando escribes un **comando** en la terminal, el sistema operativo **busca** el programa en **cada uno de los directorios** listados en la variable de entorno `PATH`.\n+\n+Por ejemplo, cuando escribes `python` en la terminal, el sistema operativo busca un programa llamado `python` en el **primer directorio** de esa lista.\n+\n+Si lo encuentra, entonces lo **utilizara**. De lo contrario, seguira buscando en los **otros directorios**.\n+\n+### Instalando Python y Actualizando el `PATH`\n+\n+Cuando instalas Python, es posible que te pregunten si deseas actualizar la variable de entorno `PATH`.\n+\n+//// tab | Linux, macOS\n+\n+Supongamos que instalas Python y termina en un directorio como `/opt/custompython/bin`.\n+\n+Si dices que si al actualización de la variable de entorno `PATH`, entonces el instalador agregará `/opt/custompython/bin` a la variable de entorno `PATH`.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1766888953",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12211,
        "pr_file": "docs/es/docs/environment-variables.md",
        "discussion_id": "1766888953",
        "commented_code": "@@ -0,0 +1,300 @@\n+# Variables de Entorno\n+\n+/// tip\n+\n+Si ya conoces sobre \"variables de entorno\" y cómo usarlas, siéntete libre de saltarte esta parte.\n+\n+///\n+\n+Una variable de entorno (también conocida como \"**env var**\") es una variable que existe **por fuera** del código de Python, en el **sistema operativo**, y puede ser leída por tu código Python (o por otros programas también).\n+\n+Las variables de entorno pueden ser útiles para manejar **configuraciones** de aplicaciones, como parte de la **instalación** de Python, etc.\n+\n+## Crear y Usar Variables de Entorno\n+\n+Puedes **crear** y usar variables de entorno en la **shell (terminal)**, sin necesidad de utilizar Python:\n+\n+////tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Puedes crear una variable de entorno llamada MY_NAME con\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Luego, podrías usarla con otros programas, como\n+$ echo \"Hello $MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Crea un variable de entorno llamada MY_NAME\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Usala con otros programas, como\n+$ echo \"Hello $Env:MY_NAME\"\n+\n+Hello Wade Wilson\n+```\n+\n+</div>\n+\n+////\n+\n+## Lee Variables de Entorno en Python\n+\n+También puedes crear variables de entorno **por fuera** de Python, en la terminal (o por cualquier otro método), y luego **leerlas en Python**.\n+\n+Por ejemplo, podrías tener un archivo `main.py` con:\n+\n+```Python hl_lines=\"3\"\n+import os\n+\n+name = os.getenv(\"MY_NAME\", \"World\")\n+print(f\"Hello {name} from Python\")\n+```\n+\n+/// tip\n+\n+El segundo argumento de <a href=\"https://docs.python.org/3.8/library/os.html#os.getenv\" class=\"external-link\" target=\"_blank\">`os.getenv()`</a> es el valor por defecto que se devuelve.\n+\n+Si no se proporciona, el valor predeterminado es `None`. En este caso, proporcionamos `\"World\"` como valor por defecto para usar.\n+\n+///\n+\n+Luego, podrías ejecutar ese programa en Python:\n+\n+//// tab | Linux, macOS, Windows Bash\n+\n+<div class=\"termy\">\n+\n+```console\n+// Aquí aún no hemos establecido la variable de entorno\n+$ python main.py\n+\n+// Como no establecimos la variable de entorno, obtenemos el valor predeterminado\n+\n+Hello World from Python\n+\n+// Pero si primero creamos una variable de entorno\n+$ export MY_NAME=\"Wade Wilson\"\n+\n+// Y luego ejecutamos el programa nuevamente\n+$ python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+//// tab | Windows PowerShell\n+\n+<div class=\"termy\">\n+\n+```console\n+// Aquí aún no hemos establecido la variable de entorno\n+$ python main.py\n+\n+// Como no establecimos la variable de entorno, obtenemos el valor predeterminado\n+\n+Hello World from Python\n+\n+// Pero si primero creamos una variable de entorno\n+$ $Env:MY_NAME = \"Wade Wilson\"\n+\n+// Y luego ejecutamos el programa nuevamente\n+$ python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+```\n+\n+</div>\n+\n+////\n+\n+Como las variables de entorno se pueden establecer fuera del código, pero pueden ser leídas por el código y no tienen que ser almacenadas (o enviadas a `git`) con el resto de los archivos, es común usarlas para configuraciones o **ajustes**.\n+\n+También puedes crear una variable de entorno solo para una **invocación específica de un programa**, que estará disponible únicamente para ese programa y solo durante su ejecución.\n+\n+Para hacer eso, créala justo antes de llamar al programa, en la misma línea:\n+\n+<div class=\"termy\">\n+\n+```console\n+// Crear una variable de entorno MY_NAME en la misma línea para esta ejecución del programa\n+$ MY_NAME=\"Wade Wilson\" python main.py\n+\n+// Ahora puede leer la variable de entorno\n+\n+Hello Wade Wilson from Python\n+\n+// La variable de entorno ya no existe después\n+$ python main.py\n+\n+Hello World from Python\n+```\n+\n+</div>\n+\n+/// tip\n+\n+Puedes leer más sobre esto en <a href=\"https://12factor.net/config\" class=\"external-link\" target=\"_blank\">The Twelve-Factor App: Config</a>.\n+\n+///\n+\n+## Tipos y Validación\n+\n+Estas variables de entorno solo pueden manejar **cadenas de texto**, ya que son externas a Python y deben ser compatibles con otros programas y el resto del sistema (incluso con diferentes sistemas operativos como Linux, Windows, macOS).\n+\n+Esto significa que **cualquier valor** leído en Python desde una variable de entorno **será un `str`**, y cualquier conversión a un tipo diferente o validación debe hacerse en el código.\n+\n+Aprenderás más sobre cómo usar las variables de entorno para manejar **ajustes de aplicación** en la [Guía de Usuario Avanzado - Ajustes y Variables de Entorno](./advanced/settings.md){.internal-link target=_blank}.\n+\n+## Variable de Entorno `PATH`\n+\n+Existe una variable de entorno **especial** llamada **`PATH`** que es usada por los sistemas operativos (Linux, macOS, Windows) para encontrar los programas que deben ejecutarse.\n+\n+El valor de la variable `PATH` es una cadena de texto larga formada por directorios separados por dos puntos `:` en Linux y macOS, y por un punto y coma `;` en Windows.\n+\n+Por ejemplo, la variable de entorno `PATH` podría verse así:\n+\n+//// tab | Linux, macOS\n+\n+```plaintext\n+/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n+```\n+\n+Esto significa que el sistema deberia buscar programas en los directorios:\n+\n+* `/usr/local/bin`\n+* `/usr/bin`\n+* `/bin`\n+* `/usr/sbin`\n+* `/sbin`\n+\n+////\n+\n+//// tab | Windows\n+\n+```plaintext\n+C:\\Program Files\\Python312\\Scripts;C:\\Program Files\\Python312;C:\\Windows\\System32\n+```\n+\n+Esto significa que el sistema deberia buscar programas en los directorios:\n+\n+* `C:\\Program Files\\Python312\\Scripts`\n+* `C:\\Program Files\\Python312`\n+* `C:\\Windows\\System32`\n+\n+////\n+\n+Cuando escribes un **comando** en la terminal, el sistema operativo **busca** el programa en **cada uno de los directorios** listados en la variable de entorno `PATH`.\n+\n+Por ejemplo, cuando escribes `python` en la terminal, el sistema operativo busca un programa llamado `python` en el **primer directorio** de esa lista.\n+\n+Si lo encuentra, entonces lo **utilizara**. De lo contrario, seguira buscando en los **otros directorios**.\n+\n+### Instalando Python y Actualizando el `PATH`\n+\n+Cuando instalas Python, es posible que te pregunten si deseas actualizar la variable de entorno `PATH`.\n+\n+//// tab | Linux, macOS\n+\n+Supongamos que instalas Python y termina en un directorio como `/opt/custompython/bin`.\n+\n+Si dices que si al actualización de la variable de entorno `PATH`, entonces el instalador agregará `/opt/custompython/bin` a la variable de entorno `PATH`.",
        "comment_created_at": "2024-09-19T13:56:25+00:00",
        "comment_author": "JavierSanchezCastro",
        "comment_body": "```suggestion\r\nSi aceptas actualizar la variable de entorno `PATH`, el instalador agregará `/opt/custompython/bin` a la variable de entorno `PATH`.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]