[
  {
    "discussion_id": "2162519671",
    "pr_number": 9425,
    "pr_file": "tests/test_return_none_future_annotations.py",
    "created_at": "2025-06-23T20:56:47+00:00",
    "commented_code": "+from __future__ import annotations\n+\n+import http\n+import logging\n+\n+from fastapi import APIRouter, FastAPI\n+from fastapi.testclient import TestClient\n+\n+router = APIRouter()\n+\n+app = FastAPI()\n+\n+\n+@router.get(\"/no-content\", status_code=http.HTTPStatus.NO_CONTENT)\n+def return_no_content() -> None:\n+    logging.info(\"endpoint called\")\n+\n+\n+app.include_router(router)\n+\n+client = TestClient(app)\n+\n+\n+def test_no_content():\n+    response = client.get(\"/no-content\")\n+    assert response.status_code == http.HTTPStatus.NO_CONTENT, response.text",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2162519671",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 9425,
        "pr_file": "tests/test_return_none_future_annotations.py",
        "discussion_id": "2162519671",
        "commented_code": "@@ -0,0 +1,26 @@\n+from __future__ import annotations\n+\n+import http\n+import logging\n+\n+from fastapi import APIRouter, FastAPI\n+from fastapi.testclient import TestClient\n+\n+router = APIRouter()\n+\n+app = FastAPI()\n+\n+\n+@router.get(\"/no-content\", status_code=http.HTTPStatus.NO_CONTENT)\n+def return_no_content() -> None:\n+    logging.info(\"endpoint called\")\n+\n+\n+app.include_router(router)\n+\n+client = TestClient(app)\n+\n+\n+def test_no_content():\n+    response = client.get(\"/no-content\")\n+    assert response.status_code == http.HTTPStatus.NO_CONTENT, response.text",
        "comment_created_at": "2025-06-23T20:56:47+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "```suggestion\r\n    assert response.status_code == http.HTTPStatus.NO_CONTENT, response.text\r\n    assert not response.content\r\n```\r\nHow about adding this assertion?",
        "pr_file_module": null
      },
      {
        "comment_id": "2171136837",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 9425,
        "pr_file": "tests/test_return_none_future_annotations.py",
        "discussion_id": "2162519671",
        "commented_code": "@@ -0,0 +1,26 @@\n+from __future__ import annotations\n+\n+import http\n+import logging\n+\n+from fastapi import APIRouter, FastAPI\n+from fastapi.testclient import TestClient\n+\n+router = APIRouter()\n+\n+app = FastAPI()\n+\n+\n+@router.get(\"/no-content\", status_code=http.HTTPStatus.NO_CONTENT)\n+def return_no_content() -> None:\n+    logging.info(\"endpoint called\")\n+\n+\n+app.include_router(router)\n+\n+client = TestClient(app)\n+\n+\n+def test_no_content():\n+    response = client.get(\"/no-content\")\n+    assert response.status_code == http.HTTPStatus.NO_CONTENT, response.text",
        "comment_created_at": "2025-06-27T08:05:29+00:00",
        "comment_author": "hofrob",
        "comment_body": "Thanks! added",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "906371555",
    "pr_number": 5044,
    "pr_file": "docs_src/security/tutorial004.py",
    "created_at": "2022-06-24T20:03:15+00:00",
    "commented_code": "async def get_current_active_user(current_user: User = Depends(get_current_user)):\n     if current_user.disabled:\n-        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\"\n+        )",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "906371555",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 5044,
        "pr_file": "docs_src/security/tutorial004.py",
        "discussion_id": "906371555",
        "commented_code": "@@ -108,7 +108,9 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n \n async def get_current_active_user(current_user: User = Depends(get_current_user)):\n     if current_user.disabled:\n-        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\"\n+        )",
        "comment_created_at": "2022-06-24T20:03:15+00:00",
        "comment_author": "JarroVGIT",
        "comment_body": "Same as previous comment\r\n\r\n----\r\nI would disagree here.\r\n\r\n400 definition:\r\n`The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).` That is not the case here, it is not a client error.\r\n\r\nI would reckon that 403 is more appropriate, especially because the authentication passed but the user is not allowed: `The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server.`",
        "pr_file_module": null
      },
      {
        "comment_id": "907216771",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 5044,
        "pr_file": "docs_src/security/tutorial004.py",
        "discussion_id": "906371555",
        "commented_code": "@@ -108,7 +108,9 @@ async def get_current_user(token: str = Depends(oauth2_scheme)):\n \n async def get_current_active_user(current_user: User = Depends(get_current_user)):\n     if current_user.disabled:\n-        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+        raise HTTPException(\n+            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Inactive user\"\n+        )",
        "comment_created_at": "2022-06-27T10:11:36+00:00",
        "comment_author": "haasal",
        "comment_body": "sftm",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "818190708",
    "pr_number": 4488,
    "pr_file": "tests/test_extra_routes.py",
    "created_at": "2022-03-02T23:31:52+00:00",
    "commented_code": "@app.head(\"/items/{item_id}\")\n def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "818190708",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4488,
        "pr_file": "tests/test_extra_routes.py",
        "discussion_id": "818190708",
        "commented_code": "@@ -32,12 +32,12 @@ def delete_item(item_id: str, item: Item):\n \n @app.head(\"/items/{item_id}\")\n def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})",
        "comment_created_at": "2022-03-02T23:31:52+00:00",
        "comment_author": "paulo-raca",
        "comment_body": "If there is no body, it shouldn't be a JSONResponse:\r\n\r\n```suggestion\r\n    return Response(headers={\"x-fastapi-item-id\": item_id})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "818361399",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4488,
        "pr_file": "tests/test_extra_routes.py",
        "discussion_id": "818190708",
        "commented_code": "@@ -32,12 +32,12 @@ def delete_item(item_id: str, item: Item):\n \n @app.head(\"/items/{item_id}\")\n def head_item(item_id: str):\n-    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+    return JSONResponse(None, headers={\"x-fastapi-item-id\": item_id})",
        "comment_created_at": "2022-03-03T06:51:49+00:00",
        "comment_author": "Kludex",
        "comment_body": "I'm not changing the behavior of the test.",
        "pr_file_module": null
      }
    ]
  }
]