[
  {
    "discussion_id": "1257338326",
    "pr_number": 9829,
    "pr_file": "docs/en/docs/tutorial/cors.md",
    "created_at": "2023-07-08T19:07:13+00:00",
    "commented_code": "* `allow_origin_regex` - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. `'https://.*\\.example\\.org'`.\n * `allow_methods` - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to `['GET']`. You can use `['*']` to allow all standard methods.\n * `allow_headers` - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to `[]`. You can use `['*']` to allow all headers. The `Accept`, `Accept-Language`, `Content-Language` and `Content-Type` headers are always allowed for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">simple CORS requests</a>.\n-* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, `allow_origins` cannot be set to `['*']` for credentials to be allowed, origins must be specified.\n+* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, none of `allow_origins`, `allow_methods` and `allow_headers` can be set to `['*']` if `allow_credentials` is set to `True`. All of them must be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#credentialed_requests_and_wildcards\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">explicitly specified</a>.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1257338326",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 9829,
        "pr_file": "docs/en/docs/tutorial/cors.md",
        "discussion_id": "1257338326",
        "commented_code": "@@ -58,7 +58,7 @@ The following arguments are supported:\n * `allow_origin_regex` - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. `'https://.*\\.example\\.org'`.\n * `allow_methods` - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to `['GET']`. You can use `['*']` to allow all standard methods.\n * `allow_headers` - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to `[]`. You can use `['*']` to allow all headers. The `Accept`, `Accept-Language`, `Content-Language` and `Content-Type` headers are always allowed for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">simple CORS requests</a>.\n-* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, `allow_origins` cannot be set to `['*']` for credentials to be allowed, origins must be specified.\n+* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, none of `allow_origins`, `allow_methods` and `allow_headers` can be set to `['*']` if `allow_credentials` is set to `True`. All of them must be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#credentialed_requests_and_wildcards\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">explicitly specified</a>.",
        "comment_created_at": "2023-07-08T19:07:13+00:00",
        "comment_author": "mikeedjones",
        "comment_body": "```suggestion\r\n* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. \r\n\r\nNone of `allow_origins`, `allow_methods` and `allow_headers` can be set to `['*']` if `allow_credentials` is set to `True`. All of them must be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#credentialed_requests_and_wildcards\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">explicitly specified</a>.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1739129550",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 9829,
        "pr_file": "docs/en/docs/tutorial/cors.md",
        "discussion_id": "1257338326",
        "commented_code": "@@ -58,7 +58,7 @@ The following arguments are supported:\n * `allow_origin_regex` - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. `'https://.*\\.example\\.org'`.\n * `allow_methods` - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to `['GET']`. You can use `['*']` to allow all standard methods.\n * `allow_headers` - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to `[]`. You can use `['*']` to allow all headers. The `Accept`, `Accept-Language`, `Content-Language` and `Content-Type` headers are always allowed for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">simple CORS requests</a>.\n-* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, `allow_origins` cannot be set to `['*']` for credentials to be allowed, origins must be specified.\n+* `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, none of `allow_origins`, `allow_methods` and `allow_headers` can be set to `['*']` if `allow_credentials` is set to `True`. All of them must be <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#credentialed_requests_and_wildcards\" class=\"external-link\" rel=\"noopener\" target=\"_blank\">explicitly specified</a>.",
        "comment_created_at": "2024-08-30T16:54:13+00:00",
        "comment_author": "alejsdev",
        "comment_body": "Thank you @mikeedjones, I think this way is slightly better for readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1969472102",
    "pr_number": 13412,
    "pr_file": "docs/ru/docs/tutorial/middleware.md",
    "created_at": "2025-02-25T10:18:24+00:00",
    "commented_code": "+# Middleware (Промежуточный слой)\n+\n+Вы можете добавить промежуточный слой (middleware) в ваши **FastAPI** приложения.\n+\n+\"Middleware\" это функция, которая выполняется с каждым запросом до его обработки *функцией эндпоинта*.\n+А также с каждым ответом перед его возвращением.\n+\n+\n+* Она берёт поступающий **запрос**\n+* Делает что-то с этим **запросом** или выполняет некий нужный код.\n+* Затем она передает запрос для последующей обработки в *функцию эндпоинта*\n+* Получает **ответ** от *функции эндпоинта*\n+* Что-то делает с этим **ответом** или выполняет некий нужный код\n+* И возвращает **ответ**\n+\n+/// note | Технические детали\n+\n+Если у вас зависимости с `yield`, то код выхода (exit code) будет выполняться *после* middleware.\n+\n+Если у вас выполняются некие фоновые задачи (см. документацию), то они будут запущены после middleware.\n+\n+///\n+\n+## Создание middleware\n+\n+Для создания middleware используйте декоратор `@app.middleware(\"http\")`.\n+\n+Функция middleware получает:\n+\n+* `request` (объект запроса).\n+* Функцию `call_next`, которая получает `request` в качестве параметра.\n+    * Эта функция передаёт `request` соответствующей *функции эндпоинта*.\n+    * Затем она возвращает ответ `response`, сгенерированный *функцией эндпоинта*.\n+* Также имеется возможность обработать `response`, перед тем как его вернуть.\n+\n+{* ../../docs_src/middleware/tutorial001.py hl[8:9,11,14] *}\n+\n+/// tip | Подсказка\n+\n+Имейте в виду, что можно добавлять свои собственные заголовки <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" class=\"external-link\" target=\"_blank\">с 'X-' префиксом</a>.\n+\n+Если же вы хотите добавить собственные заголовки, которые клиент сможет увидеть в браузере, то вам потребуется добавить их в настройки CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}), используя параметр expose_headers`, см. документацию <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">Starlette's CORS docs</a>.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1969472102",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13412,
        "pr_file": "docs/ru/docs/tutorial/middleware.md",
        "discussion_id": "1969472102",
        "commented_code": "@@ -0,0 +1,74 @@\n+# Middleware (Промежуточный слой)\n+\n+Вы можете добавить промежуточный слой (middleware) в ваши **FastAPI** приложения.\n+\n+\"Middleware\" это функция, которая выполняется с каждым запросом до его обработки *функцией эндпоинта*.\n+А также с каждым ответом перед его возвращением.\n+\n+\n+* Она берёт поступающий **запрос**\n+* Делает что-то с этим **запросом** или выполняет некий нужный код.\n+* Затем она передает запрос для последующей обработки в *функцию эндпоинта*\n+* Получает **ответ** от *функции эндпоинта*\n+* Что-то делает с этим **ответом** или выполняет некий нужный код\n+* И возвращает **ответ**\n+\n+/// note | Технические детали\n+\n+Если у вас зависимости с `yield`, то код выхода (exit code) будет выполняться *после* middleware.\n+\n+Если у вас выполняются некие фоновые задачи (см. документацию), то они будут запущены после middleware.\n+\n+///\n+\n+## Создание middleware\n+\n+Для создания middleware используйте декоратор `@app.middleware(\"http\")`.\n+\n+Функция middleware получает:\n+\n+* `request` (объект запроса).\n+* Функцию `call_next`, которая получает `request` в качестве параметра.\n+    * Эта функция передаёт `request` соответствующей *функции эндпоинта*.\n+    * Затем она возвращает ответ `response`, сгенерированный *функцией эндпоинта*.\n+* Также имеется возможность обработать `response`, перед тем как его вернуть.\n+\n+{* ../../docs_src/middleware/tutorial001.py hl[8:9,11,14] *}\n+\n+/// tip | Подсказка\n+\n+Имейте в виду, что можно добавлять свои собственные заголовки <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" class=\"external-link\" target=\"_blank\">с 'X-' префиксом</a>.\n+\n+Если же вы хотите добавить собственные заголовки, которые клиент сможет увидеть в браузере, то вам потребуется добавить их в настройки CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}), используя параметр expose_headers`, см. документацию <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">Starlette's CORS docs</a>.",
        "comment_created_at": "2025-02-25T10:18:24+00:00",
        "comment_author": "Rishat-F",
        "comment_body": "Но если вы хотите, чтобы клиент в браузере смог увидеть ваши собственные заголовки, то потребуется добавить их в настройки CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}), используя параметр `expose_headers`, см. документацию <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">Starlette's CORS docs</a>.",
        "pr_file_module": null
      },
      {
        "comment_id": "1969602360",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13412,
        "pr_file": "docs/ru/docs/tutorial/middleware.md",
        "discussion_id": "1969472102",
        "commented_code": "@@ -0,0 +1,74 @@\n+# Middleware (Промежуточный слой)\n+\n+Вы можете добавить промежуточный слой (middleware) в ваши **FastAPI** приложения.\n+\n+\"Middleware\" это функция, которая выполняется с каждым запросом до его обработки *функцией эндпоинта*.\n+А также с каждым ответом перед его возвращением.\n+\n+\n+* Она берёт поступающий **запрос**\n+* Делает что-то с этим **запросом** или выполняет некий нужный код.\n+* Затем она передает запрос для последующей обработки в *функцию эндпоинта*\n+* Получает **ответ** от *функции эндпоинта*\n+* Что-то делает с этим **ответом** или выполняет некий нужный код\n+* И возвращает **ответ**\n+\n+/// note | Технические детали\n+\n+Если у вас зависимости с `yield`, то код выхода (exit code) будет выполняться *после* middleware.\n+\n+Если у вас выполняются некие фоновые задачи (см. документацию), то они будут запущены после middleware.\n+\n+///\n+\n+## Создание middleware\n+\n+Для создания middleware используйте декоратор `@app.middleware(\"http\")`.\n+\n+Функция middleware получает:\n+\n+* `request` (объект запроса).\n+* Функцию `call_next`, которая получает `request` в качестве параметра.\n+    * Эта функция передаёт `request` соответствующей *функции эндпоинта*.\n+    * Затем она возвращает ответ `response`, сгенерированный *функцией эндпоинта*.\n+* Также имеется возможность обработать `response`, перед тем как его вернуть.\n+\n+{* ../../docs_src/middleware/tutorial001.py hl[8:9,11,14] *}\n+\n+/// tip | Подсказка\n+\n+Имейте в виду, что можно добавлять свои собственные заголовки <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" class=\"external-link\" target=\"_blank\">с 'X-' префиксом</a>.\n+\n+Если же вы хотите добавить собственные заголовки, которые клиент сможет увидеть в браузере, то вам потребуется добавить их в настройки CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}), используя параметр expose_headers`, см. документацию <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">Starlette's CORS docs</a>.",
        "comment_created_at": "2025-02-25T11:43:52+00:00",
        "comment_author": "alv2017",
        "comment_body": "здесь оставлю как есть",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "776553859",
    "pr_number": 3257,
    "pr_file": "docs/es/docs/tutorial/middleware.md",
    "created_at": "2021-12-30T03:06:50+00:00",
    "commented_code": "+# Middleware\n+\n+Puedes añadir middlewares a tus aplicaciones de **FastAPI**.\n+\n+Un \"middleware\" es una función que se ejecuta con cada **petición** antes de que se procesada por cualquier <abbr title=\"path operation\">*operación de ruta*</abbr>. Y antes de devolver cada **respuesta**.\n+\n+* Toma cada **petición** que llega a tu aplicación.\n+* Luego puede hacer algo con esa **petición** o ejecutar cualquier código necesario.\n+* Posteriormente toma la **petición** para ser procesada por el resto de la aplicación (por alguna *operación de path*).\n+* Luego toma la **respuesta** generada por la aplicación (por alguna *operación de path*).\n+* Puede realizar algo con esa **respuesta** o ejecutar cualquier código necesario.\n+* Y por ultimo, retornar la **respuesta**.\n+\n+!!! note \" Detalles Técnicos \"\n+    Si tienes dependencias que utilicen `yield`, el código de salida se ejecutara *después* del middleware.\n+\n+    Si existen tareas ejecutándose en segundo plano (documentadas posteriormente), se ejecutaran *después* del middleware.\n+\n+## Crear un middleware\n+\n+Para crear un middleware debemos utilizar el decorador `@app.middleware(\"http\")` encima de la función.\n+\n+La función del middleware recibe:\n+\n+* La `petición`.\n+* Una función <abbr title=\"para llamar después\">`call_next`</abbr> que recibirá la `petición` como parámetro.\n+    * Esta función pasará la `petición` a la correspondiente <abbr title=\"path operation\">*operación de path*</abbr>.\n+    * Posteriormente retorna la `respuesta` generada por la *operación de path*.\n+* Luego, puedes modificar aun más la `respuesta` antes de devolverla.\n+\n+```Python hl_lines=\"8-9  11  14\"\n+{!../../../docs_src/middleware/tutorial001.py!}\n+```\n+\n+!!! tip\n+    Ten en cuenta que puedes añadir <abbr title=\"encabezados\">headers</abbr> personalizados <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" class=\"external-link\" target=\"_blank\">utilizando el prefijo 'X-' </a>.\n+\n+    Pero, si tienes headers personalizados que deseas que un cliente pueda visualizar en un navegador, debes agregarlos a tus configuraciones de CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}) usando el parámetro `expose_headers`, puedes consultar más en <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">la documentación de Starlette acerca de CORS</a>.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "776553859",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3257,
        "pr_file": "docs/es/docs/tutorial/middleware.md",
        "discussion_id": "776553859",
        "commented_code": "@@ -0,0 +1,61 @@\n+# Middleware\n+\n+Puedes añadir middlewares a tus aplicaciones de **FastAPI**.\n+\n+Un \"middleware\" es una función que se ejecuta con cada **petición** antes de que se procesada por cualquier <abbr title=\"path operation\">*operación de ruta*</abbr>. Y antes de devolver cada **respuesta**.\n+\n+* Toma cada **petición** que llega a tu aplicación.\n+* Luego puede hacer algo con esa **petición** o ejecutar cualquier código necesario.\n+* Posteriormente toma la **petición** para ser procesada por el resto de la aplicación (por alguna *operación de path*).\n+* Luego toma la **respuesta** generada por la aplicación (por alguna *operación de path*).\n+* Puede realizar algo con esa **respuesta** o ejecutar cualquier código necesario.\n+* Y por ultimo, retornar la **respuesta**.\n+\n+!!! note \" Detalles Técnicos \"\n+    Si tienes dependencias que utilicen `yield`, el código de salida se ejecutara *después* del middleware.\n+\n+    Si existen tareas ejecutándose en segundo plano (documentadas posteriormente), se ejecutaran *después* del middleware.\n+\n+## Crear un middleware\n+\n+Para crear un middleware debemos utilizar el decorador `@app.middleware(\"http\")` encima de la función.\n+\n+La función del middleware recibe:\n+\n+* La `petición`.\n+* Una función <abbr title=\"para llamar después\">`call_next`</abbr> que recibirá la `petición` como parámetro.\n+    * Esta función pasará la `petición` a la correspondiente <abbr title=\"path operation\">*operación de path*</abbr>.\n+    * Posteriormente retorna la `respuesta` generada por la *operación de path*.\n+* Luego, puedes modificar aun más la `respuesta` antes de devolverla.\n+\n+```Python hl_lines=\"8-9  11  14\"\n+{!../../../docs_src/middleware/tutorial001.py!}\n+```\n+\n+!!! tip\n+    Ten en cuenta que puedes añadir <abbr title=\"encabezados\">headers</abbr> personalizados <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\" class=\"external-link\" target=\"_blank\">utilizando el prefijo 'X-' </a>.\n+\n+    Pero, si tienes headers personalizados que deseas que un cliente pueda visualizar en un navegador, debes agregarlos a tus configuraciones de CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}) usando el parámetro `expose_headers`, puedes consultar más en <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">la documentación de Starlette acerca de CORS</a>.",
        "comment_created_at": "2021-12-30T03:06:50+00:00",
        "comment_author": "israteneda",
        "comment_body": "```suggestion\r\n    Pero, si tienes headers personalizados que deseas que un cliente pueda visualizar en un navegador, debes agregarlos a tus configuraciones de CORS ([CORS (Cross-Origin Resource Sharing)](cors.md){.internal-link target=_blank}) empleando el parámetro `expose_headers`, puedes consultar más en <a href=\"https://www.starlette.io/middleware/#corsmiddleware\" class=\"external-link\" target=\"_blank\">la documentación de Starlette acerca de CORS</a>.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1107867753",
    "pr_number": 5466,
    "pr_file": "docs/es/docs/tutorial/response-status-code.md",
    "created_at": "2023-02-15T23:59:29+00:00",
    "commented_code": "+# Response Status Code\n+\n+De la misma manera que puedes especificar un modelo de respuesta, también puedes declarar codigos de estado HTTP\n+usados para la respuesta con el parametro `status_code` en cualquiera de los *path operations*:\n+\n+- `@app.get()`\n+- `@app.post()`\n+- `@app.put()`\n+- `@app.delete()`\n+- etc.\n+\n+```Python hl_lines=\"6\"\n+{!../../../docs_src/response_status_code/tutorial001.py!}\n+```\n+\n+!!! note\n+    Toma en cuenta que `status_code` es un parámetro del método del \"decorador\" (`get`, `post`, etc)-\n+No de la función de tu *path operation*, como todos los parámetros y cuerpo.\n+\n+\n+El parámetro `status_code` recibe un número con el código del estado HTTP.\n+\n+!!! info\n+   `status_code` puede alternamente recibir un `IntEnum`, como <a href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" class=\"external-link\" target=\"_blank\">`http.HTTPStatus`</a> de Python.\n+\n+Será:\n+\n+- Retorna ese código de estado en la respuesta.\n+- Documentado como en el OpenAPI \"schema\" (además, en la interfaz de usuario):\n+\n+<img src=\"../../../en/docs/img/tutorial/response-status-code/image01.png\">\n+\n+\n+!!! note\n+    Algunos códigos de respuesta (ve la siguiente sección) indica que la respuesta no tiene body.\n+\n+```\n+FastAPI sabe esto, y producirá documentatión OpenAPI diciendo que no hay body en la respuesta.\n+```\n+\n+# Acerca de los códigos de estado HTTP.\n+\n+!!! note\n+    Si ya sabes lo que son los códigos de estado HTTP, salta a la siguiente sección.\n+\n+En HTTP, tu envías un código de estado de tres dígitos como parte de la respuesta.\n+\n+Estos códigos de estado tienen un nombre asociado para reconocerlos, pero lo más importante es el número.\n+\n+En resumen:\n+\n+ - `100` en adelante son para \"Información\". Rara vez los usas directamente. Las respuestas con estos códigos de estado no tienen body.\n+ - `200` en adelante son para respuestas \"Exitosas\". Esta son las que se usan con mayor frecuencia.\n+      - `200` código  de estado por defecto, el cual significa que todo estuvo \"OK\".\n+      - Otro ejemplo sería `201`, \"Creado\". Es comúnmente usado después de crear una observación en la base de datos.\n+      - `204` es un caso especial, \"Sin contenido\". Esta respuesta es usada cuando no hay contenido de retorno por parte del cliente,\n+      y la respuesta no debe tener cuerpo.\n+\n+- `300` en adelante son para \"Redirección\". Respuestas con estos códigos de estado pueden o no tener body, excepto para `304`, \"No Modificado\",\n+  el cual no debe tener body.\n+\n+- `400` en adelante son para respuestas para `Error del Cliente`. Estos son el segundo tipo de codigós que más usarás.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1107867753",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 5466,
        "pr_file": "docs/es/docs/tutorial/response-status-code.md",
        "discussion_id": "1107867753",
        "commented_code": "@@ -0,0 +1,105 @@\n+# Response Status Code\n+\n+De la misma manera que puedes especificar un modelo de respuesta, también puedes declarar codigos de estado HTTP\n+usados para la respuesta con el parametro `status_code` en cualquiera de los *path operations*:\n+\n+- `@app.get()`\n+- `@app.post()`\n+- `@app.put()`\n+- `@app.delete()`\n+- etc.\n+\n+```Python hl_lines=\"6\"\n+{!../../../docs_src/response_status_code/tutorial001.py!}\n+```\n+\n+!!! note\n+    Toma en cuenta que `status_code` es un parámetro del método del \"decorador\" (`get`, `post`, etc)-\n+No de la función de tu *path operation*, como todos los parámetros y cuerpo.\n+\n+\n+El parámetro `status_code` recibe un número con el código del estado HTTP.\n+\n+!!! info\n+   `status_code` puede alternamente recibir un `IntEnum`, como <a href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" class=\"external-link\" target=\"_blank\">`http.HTTPStatus`</a> de Python.\n+\n+Será:\n+\n+- Retorna ese código de estado en la respuesta.\n+- Documentado como en el OpenAPI \"schema\" (además, en la interfaz de usuario):\n+\n+<img src=\"../../../en/docs/img/tutorial/response-status-code/image01.png\">\n+\n+\n+!!! note\n+    Algunos códigos de respuesta (ve la siguiente sección) indica que la respuesta no tiene body.\n+\n+```\n+FastAPI sabe esto, y producirá documentatión OpenAPI diciendo que no hay body en la respuesta.\n+```\n+\n+# Acerca de los códigos de estado HTTP.\n+\n+!!! note\n+    Si ya sabes lo que son los códigos de estado HTTP, salta a la siguiente sección.\n+\n+En HTTP, tu envías un código de estado de tres dígitos como parte de la respuesta.\n+\n+Estos códigos de estado tienen un nombre asociado para reconocerlos, pero lo más importante es el número.\n+\n+En resumen:\n+\n+ - `100` en adelante son para \"Información\". Rara vez los usas directamente. Las respuestas con estos códigos de estado no tienen body.\n+ - `200` en adelante son para respuestas \"Exitosas\". Esta son las que se usan con mayor frecuencia.\n+      - `200` código  de estado por defecto, el cual significa que todo estuvo \"OK\".\n+      - Otro ejemplo sería `201`, \"Creado\". Es comúnmente usado después de crear una observación en la base de datos.\n+      - `204` es un caso especial, \"Sin contenido\". Esta respuesta es usada cuando no hay contenido de retorno por parte del cliente,\n+      y la respuesta no debe tener cuerpo.\n+\n+- `300` en adelante son para \"Redirección\". Respuestas con estos códigos de estado pueden o no tener body, excepto para `304`, \"No Modificado\",\n+  el cual no debe tener body.\n+\n+- `400` en adelante son para respuestas para `Error del Cliente`. Estos son el segundo tipo de codigós que más usarás.",
        "comment_created_at": "2023-02-15T23:59:29+00:00",
        "comment_author": "erudin",
        "comment_body": "```suggestion\r\n- `400` en adelante son para respuestas de `Error del Cliente`. Estos son el segundo tipo de codigós que probablemente más usarás.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "624641267",
    "pr_number": 3134,
    "pr_file": "docs/es/docs/advanced/websockets.md",
    "created_at": "2021-05-02T06:41:14+00:00",
    "commented_code": "+# WebSockets\n+\n+Puedes utilizar <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\" class=\"external-link\" target=\"_blank\"> <abbr>WebSockets</abbr> </a> con **FastAPI**.\n+\n+## Cliente de WebSockets \n+\n+### En producción\n+\n+En tu sistema de producción , posiblemente tienes un <abbr>frontend</abbr> creado con algún <abbr>framework</abbr> moderno como lo puede ser React , Vue.js o Angular.\n+\n+Y si utilizas <abbr>WebSockets</abbr> para comunicarte con tu <abbr>backend</abbr> muy probablemente utilices las <abbr>utilities</abbr> de tú <abbr>frontend</abbr>. \n+\n+O posiblemente cuentes con una aplicación móvil nativa que se comunique con el <abbr>WebSocket</abbr> de tu <abbr>backend</abbr> directamente , utilizando código nativo. \n+\n+O posiblemente cuentes con otra manera de comunicarte con el <abbr>WebSocket</abbr> del <abbr>endpoint</abbr>.\n+\n+---\n+\n+Pero para este ejemplo , utilizaremos un documento muy simple de HTML con un poco de Javascript , todo dentro de un largo string. \n+\n+Esto , por supuesto , no es óptimo y tampoco deberías utilizarlo para producción. \n+\n+En producción tendrás una de las opciones anteriormente comentadas. \n+\n+Pero es la forma más simple de enfocarnos en el lado del servidor de los <abbr>WebSockets</abbr> y tener un ejemplo práctico: \n+\n+```Python hl_lines=\"2  6-38  41-43\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+## Creando un `websocket`\n+\n+En tu aplicación de **FastAPI** , crea un <abbr>`websocket`</abbr> :\n+\n+```Python hl_lines=\"1  46-47\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+!!! note \"Detalles Técnicos\"\n+    También puedes utilizar `from starlette.websockets import WebSocket`.\n+\n+    **FastAPI** proporciona el mismo <abbr>`WebSocket`</abbr> directamente solo como una conveniencia para ti , el desarrollador. Pero viene directamente de Starlette. \n+\n+## Esperar por mensajes y enviar mensajes \n+\n+En la ruta de tu <abbr>WebSocket</abbr> puedes `esperar` por mensajes y enviar mensajes.\n+\n+```Python hl_lines=\"48-52\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+Puedes enviar y recibir archivos binarios , textos e información en formato JSON.\n+\n+## Pruébalo\n+\n+Si el nombre de tu archivo es `main.py`, ejecuta tu aplicación utilizando:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uvicorn main:app --reload\n+\n+<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n+```\n+\n+</div>\n+\n+Abre tu navegador en <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n+ \n+Verás una simple pagina parecida a esto: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image01.png\">\n+\n+Puedes escribir mensajes en la caja de entrada , y luego enviarlos: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image02.png\">\n+\n+Y tú aplicación de **FastAPI** con <abbr>WebSockets</abbr> te responderá:\n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image03.png\">\n+\n+Puedes enviar ( y recibir ) muchos mensajes: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image04.png\">\n+\n+Y todos ellos utilizaran la misma conexión de <abbr>WebSocket</abbr>.\n+\n+## Usando `Depends` y otros\n+\n+En los <abbr>endpoints</abbr> del <abbr>WebSocket</abbr> puedes importar desde `fastapi` y utilizar: \n+\n+* `Depends`\n+* `Security`\n+* `Cookie`\n+* `Header`\n+* `Path`\n+* `Query`\n+\n+Trabajan de las misma manera que otros <abbr>endpoints</abbr>/*operaciones de <abbr>path</abbr>* en FastAPI:\n+\n+```Python hl_lines=\"58-65  68-83\"\n+{!../../../docs_src/websockets/tutorial002.py!}\n+```\n+\n+!!! info\n+    En un <abbr>WebSocket</abbr> realmente no vale la pena causar un <abbr>`HTTPException`</abbr>. Por lo tanto es mejor cerrar directamente la conexión al <abbr>WebSocket</abbr>.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "624641267",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3134,
        "pr_file": "docs/es/docs/advanced/websockets.md",
        "discussion_id": "624641267",
        "commented_code": "@@ -0,0 +1,172 @@\n+# WebSockets\n+\n+Puedes utilizar <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\" class=\"external-link\" target=\"_blank\"> <abbr>WebSockets</abbr> </a> con **FastAPI**.\n+\n+## Cliente de WebSockets \n+\n+### En producción\n+\n+En tu sistema de producción , posiblemente tienes un <abbr>frontend</abbr> creado con algún <abbr>framework</abbr> moderno como lo puede ser React , Vue.js o Angular.\n+\n+Y si utilizas <abbr>WebSockets</abbr> para comunicarte con tu <abbr>backend</abbr> muy probablemente utilices las <abbr>utilities</abbr> de tú <abbr>frontend</abbr>. \n+\n+O posiblemente cuentes con una aplicación móvil nativa que se comunique con el <abbr>WebSocket</abbr> de tu <abbr>backend</abbr> directamente , utilizando código nativo. \n+\n+O posiblemente cuentes con otra manera de comunicarte con el <abbr>WebSocket</abbr> del <abbr>endpoint</abbr>.\n+\n+---\n+\n+Pero para este ejemplo , utilizaremos un documento muy simple de HTML con un poco de Javascript , todo dentro de un largo string. \n+\n+Esto , por supuesto , no es óptimo y tampoco deberías utilizarlo para producción. \n+\n+En producción tendrás una de las opciones anteriormente comentadas. \n+\n+Pero es la forma más simple de enfocarnos en el lado del servidor de los <abbr>WebSockets</abbr> y tener un ejemplo práctico: \n+\n+```Python hl_lines=\"2  6-38  41-43\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+## Creando un `websocket`\n+\n+En tu aplicación de **FastAPI** , crea un <abbr>`websocket`</abbr> :\n+\n+```Python hl_lines=\"1  46-47\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+!!! note \"Detalles Técnicos\"\n+    También puedes utilizar `from starlette.websockets import WebSocket`.\n+\n+    **FastAPI** proporciona el mismo <abbr>`WebSocket`</abbr> directamente solo como una conveniencia para ti , el desarrollador. Pero viene directamente de Starlette. \n+\n+## Esperar por mensajes y enviar mensajes \n+\n+En la ruta de tu <abbr>WebSocket</abbr> puedes `esperar` por mensajes y enviar mensajes.\n+\n+```Python hl_lines=\"48-52\"\n+{!../../../docs_src/websockets/tutorial001.py!}\n+```\n+\n+Puedes enviar y recibir archivos binarios , textos e información en formato JSON.\n+\n+## Pruébalo\n+\n+Si el nombre de tu archivo es `main.py`, ejecuta tu aplicación utilizando:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uvicorn main:app --reload\n+\n+<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n+```\n+\n+</div>\n+\n+Abre tu navegador en <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n+ \n+Verás una simple pagina parecida a esto: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image01.png\">\n+\n+Puedes escribir mensajes en la caja de entrada , y luego enviarlos: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image02.png\">\n+\n+Y tú aplicación de **FastAPI** con <abbr>WebSockets</abbr> te responderá:\n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image03.png\">\n+\n+Puedes enviar ( y recibir ) muchos mensajes: \n+\n+<img src=\"https://fastapi.tiangolo.com/img/tutorial/websockets/image04.png\">\n+\n+Y todos ellos utilizaran la misma conexión de <abbr>WebSocket</abbr>.\n+\n+## Usando `Depends` y otros\n+\n+En los <abbr>endpoints</abbr> del <abbr>WebSocket</abbr> puedes importar desde `fastapi` y utilizar: \n+\n+* `Depends`\n+* `Security`\n+* `Cookie`\n+* `Header`\n+* `Path`\n+* `Query`\n+\n+Trabajan de las misma manera que otros <abbr>endpoints</abbr>/*operaciones de <abbr>path</abbr>* en FastAPI:\n+\n+```Python hl_lines=\"58-65  68-83\"\n+{!../../../docs_src/websockets/tutorial002.py!}\n+```\n+\n+!!! info\n+    En un <abbr>WebSocket</abbr> realmente no vale la pena causar un <abbr>`HTTPException`</abbr>. Por lo tanto es mejor cerrar directamente la conexión al <abbr>WebSocket</abbr>.",
        "comment_created_at": "2021-05-02T06:41:14+00:00",
        "comment_author": "anthonycepeda",
        "comment_body": "Debido a que en un <abbr>WebSocket</abbr> no es necesario lanzar un <abbr>`HTTPException`</abbr>, lo mejor sería cerrar directamente la conexión al <abbr>WebSocket</abbr>.",
        "pr_file_module": null
      }
    ]
  }
]