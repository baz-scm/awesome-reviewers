[
  {
    "discussion_id": "2173168795",
    "pr_number": 13803,
    "pr_file": "fastapi/encoders.py",
    "created_at": "2025-06-28T08:11:36+00:00",
    "commented_code": "from pathlib import Path, PurePath\n from re import Pattern\n from types import GeneratorType\n-from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n+from typing import (\n+    Any,\n+    Callable,\n+    Dict,\n+    List,\n+    Mapping,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Type,\n+    Union,\n+)\n from uuid import UUID\n \n from fastapi.types import IncEx\n from pydantic import BaseModel\n-from pydantic.color import Color\n from pydantic.networks import AnyUrl, NameEmail\n from pydantic.types import SecretBytes, SecretStr\n+from pydantic_extra_types.color import Color",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2173168795",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13803,
        "pr_file": "fastapi/encoders.py",
        "discussion_id": "2173168795",
        "commented_code": "@@ -14,14 +14,26 @@\n from pathlib import Path, PurePath\n from re import Pattern\n from types import GeneratorType\n-from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\n+from typing import (\n+    Any,\n+    Callable,\n+    Dict,\n+    List,\n+    Mapping,\n+    Optional,\n+    Sequence,\n+    Tuple,\n+    Type,\n+    Union,\n+)\n from uuid import UUID\n \n from fastapi.types import IncEx\n from pydantic import BaseModel\n-from pydantic.color import Color\n from pydantic.networks import AnyUrl, NameEmail\n from pydantic.types import SecretBytes, SecretStr\n+from pydantic_extra_types.color import Color",
        "comment_created_at": "2025-06-28T08:11:36+00:00",
        "comment_author": "dolfinus",
        "comment_body": "This package supports pydantic 2.x only",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049283068",
    "pr_number": 12534,
    "pr_file": "tests/utils.py",
    "created_at": "2025-04-17T16:21:22+00:00",
    "commented_code": "import pytest\n from fastapi._compat import PYDANTIC_V2\n+from inline_snapshot import Snapshot\n \n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n     sys.version_info < (3, 10), reason=\"requires python3.10+\"\n )\n needs_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\n needs_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n+\n+\n+def pydantic_snapshot(\n+    *,\n+    v2: Snapshot,\n+    v1: Snapshot,  # Remove v1 argument when deprecating Pydantic v1",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2049283068",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12534,
        "pr_file": "tests/utils.py",
        "discussion_id": "2049283068",
        "commented_code": "@@ -2,10 +2,33 @@\n \n import pytest\n from fastapi._compat import PYDANTIC_V2\n+from inline_snapshot import Snapshot\n \n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n     sys.version_info < (3, 10), reason=\"requires python3.10+\"\n )\n needs_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\n needs_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n+\n+\n+def pydantic_snapshot(\n+    *,\n+    v2: Snapshot,\n+    v1: Snapshot,  # Remove v1 argument when deprecating Pydantic v1",
        "comment_created_at": "2025-04-17T16:21:22+00:00",
        "comment_author": "svlandeg",
        "comment_body": "```suggestion\r\n    v1: Snapshot,  #TODO: remove v1 argument when deprecating Pydantic v1\r\n```\r\n(in same format as other TODO's to facilitate simple ctrl-F'ing \ud83d\ude09 )",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2049290915",
    "pr_number": 12534,
    "pr_file": "tests/utils.py",
    "created_at": "2025-04-17T16:23:26+00:00",
    "commented_code": "import pytest\n from fastapi._compat import PYDANTIC_V2\n+from inline_snapshot import Snapshot\n \n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n     sys.version_info < (3, 10), reason=\"requires python3.10+\"\n )\n needs_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\n needs_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n+\n+\n+def pydantic_snapshot(\n+    *,\n+    v2: Snapshot,\n+    v1: Snapshot,  #TODO: remove v1 argument when deprecating Pydantic v1",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2049290915",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12534,
        "pr_file": "tests/utils.py",
        "discussion_id": "2049290915",
        "commented_code": "@@ -2,10 +2,33 @@\n \n import pytest\n from fastapi._compat import PYDANTIC_V2\n+from inline_snapshot import Snapshot\n \n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n     sys.version_info < (3, 10), reason=\"requires python3.10+\"\n )\n needs_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\n needs_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n+\n+\n+def pydantic_snapshot(\n+    *,\n+    v2: Snapshot,\n+    v1: Snapshot,  #TODO: remove v1 argument when deprecating Pydantic v1",
        "comment_created_at": "2025-04-17T16:23:26+00:00",
        "comment_author": "svlandeg",
        "comment_body": "```suggestion\r\n    v1: Snapshot,  # TODO: remove v1 argument when deprecating Pydantic v1\r\n```",
        "pr_file_module": null
      }
    ]
  }
]