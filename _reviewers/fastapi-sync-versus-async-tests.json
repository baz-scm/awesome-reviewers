[
  {
    "discussion_id": "2149188337",
    "pr_number": 12261,
    "pr_file": "docs/fr/docs/advanced/async-tests.md",
    "created_at": "2025-06-16T07:01:38+00:00",
    "commented_code": "+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2149188337",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12261,
        "pr_file": "docs/fr/docs/advanced/async-tests.md",
        "discussion_id": "2149188337",
        "commented_code": "@@ -0,0 +1,107 @@\n+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
        "comment_created_at": "2025-06-16T07:01:38+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "```suggestion\r\n{* ../../docs_src/async_tests/test_main.py *}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149189300",
    "pr_number": 12261,
    "pr_file": "docs/fr/docs/advanced/async-tests.md",
    "created_at": "2025-06-16T07:02:18+00:00",
    "commented_code": "+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+## Lancez les\n+\n+Comme d'habitude, vous pouvez lancer vos tests en utilisant :\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pytest\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## En D\u00e9tail\n+\n+Le marqueur `@pytest.mark.anyio` informe pytest que la fonction de test doit \u00eatre appel\u00e9e de mani\u00e8re asynchrone:\n+\n+```Python hl_lines=\"7\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2149189300",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12261,
        "pr_file": "docs/fr/docs/advanced/async-tests.md",
        "discussion_id": "2149189300",
        "commented_code": "@@ -0,0 +1,107 @@\n+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+## Lancez les\n+\n+Comme d'habitude, vous pouvez lancer vos tests en utilisant :\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pytest\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## En D\u00e9tail\n+\n+Le marqueur `@pytest.mark.anyio` informe pytest que la fonction de test doit \u00eatre appel\u00e9e de mani\u00e8re asynchrone:\n+\n+```Python hl_lines=\"7\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
        "comment_created_at": "2025-06-16T07:02:18+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "```suggestion\r\n{* ../../docs_src/async_tests/test_main.py hl[7] *}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149190287",
    "pr_number": 12261,
    "pr_file": "docs/fr/docs/advanced/async-tests.md",
    "created_at": "2025-06-16T07:03:01+00:00",
    "commented_code": "+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+## Lancez les\n+\n+Comme d'habitude, vous pouvez lancer vos tests en utilisant :\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pytest\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## En D\u00e9tail\n+\n+Le marqueur `@pytest.mark.anyio` informe pytest que la fonction de test doit \u00eatre appel\u00e9e de mani\u00e8re asynchrone:\n+\n+```Python hl_lines=\"7\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+/// tip\n+\n+Notez que la fonction de test est maintenant une `async def` plut\u00f4t qu'une simple `def` comme pr\u00e9c\u00e9demment lorsqu'on utilisait `TestClient`.\n+\n+///\n+\n+Puis on cr\u00e9e un `AsyncClient` avec l'application, et on lui envoie des requ\u00eates, en utilisant `await`.\n+\n+```Python hl_lines=\"9-12\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2149190287",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12261,
        "pr_file": "docs/fr/docs/advanced/async-tests.md",
        "discussion_id": "2149190287",
        "commented_code": "@@ -0,0 +1,107 @@\n+# Tests Asynchrones\n+\n+Vous avez d\u00e9j\u00e0 vu comment tester vos applications **FastAPI** en utilisant le `TestClient` fourni. Jusqu'\u00e0 pr\u00e9sent, vous avez seulement vu comment \u00e9crire des tests synchrones, sans utiliser des fonctions `async`.\n+\n+\u00catre capable d'utiliser des fonctions asynchrones dans vos tests peut \u00eatre utile, par exemple, lorsque vous requ\u00eatez de mani\u00e8re asynchrone votre base de donn\u00e9es. Imaginez que vous vouliez tester l'envoi de requ\u00eate \u00e0 votre application FastAPI, puis v\u00e9rifier que votre backend a bien \u00e9crit la bonne donn\u00e9e dans la base de donn\u00e9es, tout en utilisant une librairie de base de donn\u00e9es asynchrone.\n+\n+Voyons comment faire.\n+\n+## pytest.mark.anyio\n+\n+Afin de permettre l'appel de fonctions asynchrones dans nos tests, il est essentiel que nos fonctions de tests soient asynchrones. AnyIO propose un plugin soigneusement con\u00e7u pour cela, qui nous permet de sp\u00e9cifier que certaines fonctions de test doivent \u00eatre appel\u00e9es de mani\u00e8re asynchrone.\n+\n+## HTTPX\n+\n+M\u00eame si votre application **FastAPI** utilise des fonctions `def` normales plut\u00f4t que des `async def`, elle reste une application `async` application en dessous.\n+\n+`TestClient` utilise de la magie \u00e0 l'int\u00e9rieur pour appeler l'application FastAPI dans vos fonctions de test `def` normales, en utilisant un standard pytest. Mais cette magie ne marche plus lorsque vous l'utilisez dans une fonction asynchrone. En lan\u00e7ant nos tests de mani\u00e8re asynchrone, `TestClient` ne peut plus \u00eatre utilis\u00e9 dans nos fonctions de tests.\n+\n+`TestClient` repose <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, et par chance, on peut l'utiliser directement pour tester l'API.\n+\n+## Exemple\n+\n+Prenons un exemple simple, on consid\u00e8re une structure de fichier similaire \u00e0 celle d\u00e9crite dans [Applications plus grandes](../tutorial/bigger-applications.md){.internal-link target=_blank} et [Testing](../tutorial/testing.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n+\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_main.py\n+```\n+\n+Dans le fichier `main.py` il y aurait:\n+\n+```Python\n+{!../../../docs_src/async_tests/main.py!}\n+```\n+\n+Le fichier `test_main.py` contiendrait les tests pour `main.py`, et pourrait d\u00e9sormais ressembler \u00e0 :\n+\n+```Python\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+## Lancez les\n+\n+Comme d'habitude, vous pouvez lancer vos tests en utilisant :\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pytest\n+\n+---> 100%\n+```\n+\n+</div>\n+\n+## En D\u00e9tail\n+\n+Le marqueur `@pytest.mark.anyio` informe pytest que la fonction de test doit \u00eatre appel\u00e9e de mani\u00e8re asynchrone:\n+\n+```Python hl_lines=\"7\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```\n+\n+/// tip\n+\n+Notez que la fonction de test est maintenant une `async def` plut\u00f4t qu'une simple `def` comme pr\u00e9c\u00e9demment lorsqu'on utilisait `TestClient`.\n+\n+///\n+\n+Puis on cr\u00e9e un `AsyncClient` avec l'application, et on lui envoie des requ\u00eates, en utilisant `await`.\n+\n+```Python hl_lines=\"9-12\"\n+{!../../../docs_src/async_tests/test_main.py!}\n+```",
        "comment_created_at": "2025-06-16T07:03:01+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "```suggestion\r\n{* ../../docs_src/async_tests/test_main.py hl[9:12] *}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149165665",
    "pr_number": 12201,
    "pr_file": "docs/fr/docs/tutorial/testing.md",
    "created_at": "2025-06-16T06:46:20+00:00",
    "commented_code": "+# Testing\n+\n+<a href=\"https://www.starlette.io/testclient/\" class=\"external-link\" target=\"_blank\">Starlette</a> rend le test des applications **FastAPI** facile et agr\u00e9able.\n+\n+Il est bas\u00e9 sur <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, qui est lui-m\u00eame bas\u00e9 sur Request, ce qui le rend tr\u00e8s compr\u00e9hensible et intuitif.\n+\n+Cela vous permet d'utiliser directement <a href=\"https://docs.pytest.org/\" class=\"external-link\" target=\"_blank\">pytest</a> avec **FastAPI**.\n+\n+## Utiliser `TestClient`\n+\n+/// info\n+\n+Pour utiliser `TestClient`, installez d'abord <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">`httpx`</a>.\n+\n+Assurez-vous de cr\u00e9ez un [environnement virtuel](../virtual-environments.md){.internal-link target=_blank}, activez-le, puis installez-le, par exemple:\n+\n+```console\n+$ pip install httpx\n+```\n+\n+///\n+\n+Importez `TestClient`.\n+\n+Cr\u00e9ez un `TestClient` en y passant votre application **FastAPI**.\n+\n+Cr\u00e9ez des fonctions ayant un nom commen\u00e7ant par `test_` (c'est une convention standard de `pytest`).\n+\n+Utilisez l'objet `TestClient` comme vous le faites avec `httpx`.\n+\n+R\u00e9digez des `assert` simples avec les expressions Python standards que vous devez v\u00e9rifier (encore une fois, un standard `pytest`).\n+\n+```Python hl_lines=\"2  12  15-18\"\n+{!../../../docs_src/app_testing/tutorial001.py!}\n+```\n+\n+/// tip\n+\n+Remarquez que les fonctions de test sont des `def` normaux, pas des `async def`.\n+\n+Et que les appels au client sont \u00e9galement des appels normaux, n'utilisant pas `await`.\n+\n+Cela vous permet d'utiliser `pytest` directement sans complications.\n+\n+///\n+\n+/// note | \"Technical Details\"\n+\n+Vous pouvez \u00e9galement utiliser `from starlette.testclient import TestClient`.\n+\n+**FastAPI** fournit \u00e0 la fois `starlette.testclient` ainsi que `fastapi.testclient` par commodit\u00e9 pour vous, le d\u00e9veloppeur. Mais il vient directement de Starlette.\n+\n+///\n+\n+/// tip\n+\n+Si vous souhaitez appeler des fonctions `async` dans vos tests en plus des requ\u00eates \u00e0 votre application **FastAPI** (comme par exemple des fonctions de base de donn\u00e9es asynchrones), jetez un coup d'\u0153il \u00e0 [Tests Asynchrones](../advanced/async-tests.md){.internal-link target=_blank} dans le tutoriel avanc\u00e9.\n+\n+///\n+\n+## S\u00e9parer les tests\n+\n+Dans une application r\u00e9elle, il est probable que vous aurez vos tests dans des fichiers distincts.\n+\n+Et votre application **FastAPI** pourrait aussi \u00eatre compos\u00e9e de plusieurs fichiers/modules, etc.\n+\n+### Fichier de l'application **FastAPI**\n+\n+Disons que vous avez une structure de fichier comme d\u00e9crite dans [Applications plus grandes](bigger-applications.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502   \u251c\u2500\u2500 __init__.py\n+\u2502   \u2514\u2500\u2500 main.py\n+```\n+\n+Dans le fichier `main.py` vous avez votre app **FastAPI**:\n+\n+\n+```Python\n+{!../../../docs_src/app_testing/main.py!}\n+```",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2149165665",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 12201,
        "pr_file": "docs/fr/docs/tutorial/testing.md",
        "discussion_id": "2149165665",
        "commented_code": "@@ -0,0 +1,250 @@\n+# Testing\n+\n+<a href=\"https://www.starlette.io/testclient/\" class=\"external-link\" target=\"_blank\">Starlette</a> rend le test des applications **FastAPI** facile et agr\u00e9able.\n+\n+Il est bas\u00e9 sur <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">HTTPX</a>, qui est lui-m\u00eame bas\u00e9 sur Request, ce qui le rend tr\u00e8s compr\u00e9hensible et intuitif.\n+\n+Cela vous permet d'utiliser directement <a href=\"https://docs.pytest.org/\" class=\"external-link\" target=\"_blank\">pytest</a> avec **FastAPI**.\n+\n+## Utiliser `TestClient`\n+\n+/// info\n+\n+Pour utiliser `TestClient`, installez d'abord <a href=\"https://www.python-httpx.org\" class=\"external-link\" target=\"_blank\">`httpx`</a>.\n+\n+Assurez-vous de cr\u00e9ez un [environnement virtuel](../virtual-environments.md){.internal-link target=_blank}, activez-le, puis installez-le, par exemple:\n+\n+```console\n+$ pip install httpx\n+```\n+\n+///\n+\n+Importez `TestClient`.\n+\n+Cr\u00e9ez un `TestClient` en y passant votre application **FastAPI**.\n+\n+Cr\u00e9ez des fonctions ayant un nom commen\u00e7ant par `test_` (c'est une convention standard de `pytest`).\n+\n+Utilisez l'objet `TestClient` comme vous le faites avec `httpx`.\n+\n+R\u00e9digez des `assert` simples avec les expressions Python standards que vous devez v\u00e9rifier (encore une fois, un standard `pytest`).\n+\n+```Python hl_lines=\"2  12  15-18\"\n+{!../../../docs_src/app_testing/tutorial001.py!}\n+```\n+\n+/// tip\n+\n+Remarquez que les fonctions de test sont des `def` normaux, pas des `async def`.\n+\n+Et que les appels au client sont \u00e9galement des appels normaux, n'utilisant pas `await`.\n+\n+Cela vous permet d'utiliser `pytest` directement sans complications.\n+\n+///\n+\n+/// note | \"Technical Details\"\n+\n+Vous pouvez \u00e9galement utiliser `from starlette.testclient import TestClient`.\n+\n+**FastAPI** fournit \u00e0 la fois `starlette.testclient` ainsi que `fastapi.testclient` par commodit\u00e9 pour vous, le d\u00e9veloppeur. Mais il vient directement de Starlette.\n+\n+///\n+\n+/// tip\n+\n+Si vous souhaitez appeler des fonctions `async` dans vos tests en plus des requ\u00eates \u00e0 votre application **FastAPI** (comme par exemple des fonctions de base de donn\u00e9es asynchrones), jetez un coup d'\u0153il \u00e0 [Tests Asynchrones](../advanced/async-tests.md){.internal-link target=_blank} dans le tutoriel avanc\u00e9.\n+\n+///\n+\n+## S\u00e9parer les tests\n+\n+Dans une application r\u00e9elle, il est probable que vous aurez vos tests dans des fichiers distincts.\n+\n+Et votre application **FastAPI** pourrait aussi \u00eatre compos\u00e9e de plusieurs fichiers/modules, etc.\n+\n+### Fichier de l'application **FastAPI**\n+\n+Disons que vous avez une structure de fichier comme d\u00e9crite dans [Applications plus grandes](bigger-applications.md){.internal-link target=_blank}:\n+\n+```\n+.\n+\u251c\u2500\u2500 app\n+\u2502   \u251c\u2500\u2500 __init__.py\n+\u2502   \u2514\u2500\u2500 main.py\n+```\n+\n+Dans le fichier `main.py` vous avez votre app **FastAPI**:\n+\n+\n+```Python\n+{!../../../docs_src/app_testing/main.py!}\n+```",
        "comment_created_at": "2025-06-16T06:46:20+00:00",
        "comment_author": "YuriiMotov",
        "comment_body": "```suggestion\r\n{* ../../docs_src/app_testing/main.py *}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1909417220",
    "pr_number": 13163,
    "pr_file": "docs/en/docs/advanced/async-tests.md",
    "created_at": "2025-01-09T20:52:16+00:00",
    "commented_code": "## In Detail\n \n-The marker `@pytest.mark.anyio` tells pytest that this test function should be called asynchronously:\n+The lifespan function demonstrates how to manage the lifecycle of application-wide resources. During the app's lifespan, we open a resource (`some_state_open`) at startup and clean it up (`some_state_close`) during shutdown.\n \n-{* ../../docs_src/async_tests/test_main.py hl[7] *}\n+We use **ASGITransport** from **HTTPX** to interact directly with the **FastAPI** app in an async test environment.\n \n-/// tip\n-\n-Note that the test function is now `async def` instead of just `def` as before when using the `TestClient`.\n-\n-///\n-\n-Then we can create an `AsyncClient` with the app, and send async requests to it, using `await`.\n+When testing **FastAPI** apps with a custom lifespan, it's critical to manually trigger it in the test context to ensure proper setup and teardown of resources.\n \n-{* ../../docs_src/async_tests/test_main.py hl[9:12] *}\n+If you observe issues with state initialization or teardown in your tests, ensure that the lifespan is correctly invoked, and verify the app's state before and after requests.\n \n-This is the equivalent to:\n \n-```Python\n-response = client.get('/')\n-```\n+## Other Asynchronous Function Calls\n \n-...that we used to make our requests with the `TestClient`.\n+As the testing function is now asynchronous, you can now also call (and await) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code.\n \n /// tip\n \n-Note that we're using async/await with the new `AsyncClient` - the request is asynchronous.\n-\n-///\n-\n-/// warning\n+If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests, you can override the default pytest event loop using the following fixture:\n \n-If your application relies on lifespan events, the `AsyncClient` won't trigger these events. To ensure they are triggered, use `LifespanManager` from <a href=\"https://github.com/florimondmanca/asgi-lifespan#usage\" class=\"external-link\" target=\"_blank\">florimondmanca/asgi-lifespan</a>.\n+```python\n+import asyncio\n+import pytest\n+from collections.abc import Generator\n \n-///\n+@pytest.fixture(scope=\"session\")\n+def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1909417220",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13163,
        "pr_file": "docs/en/docs/advanced/async-tests.md",
        "discussion_id": "1909417220",
        "commented_code": "@@ -54,46 +59,34 @@ $ pytest\n \n ## In Detail\n \n-The marker `@pytest.mark.anyio` tells pytest that this test function should be called asynchronously:\n+The lifespan function demonstrates how to manage the lifecycle of application-wide resources. During the app's lifespan, we open a resource (`some_state_open`) at startup and clean it up (`some_state_close`) during shutdown.\n \n-{* ../../docs_src/async_tests/test_main.py hl[7] *}\n+We use **ASGITransport** from **HTTPX** to interact directly with the **FastAPI** app in an async test environment.\n \n-/// tip\n-\n-Note that the test function is now `async def` instead of just `def` as before when using the `TestClient`.\n-\n-///\n-\n-Then we can create an `AsyncClient` with the app, and send async requests to it, using `await`.\n+When testing **FastAPI** apps with a custom lifespan, it's critical to manually trigger it in the test context to ensure proper setup and teardown of resources.\n \n-{* ../../docs_src/async_tests/test_main.py hl[9:12] *}\n+If you observe issues with state initialization or teardown in your tests, ensure that the lifespan is correctly invoked, and verify the app's state before and after requests.\n \n-This is the equivalent to:\n \n-```Python\n-response = client.get('/')\n-```\n+## Other Asynchronous Function Calls\n \n-...that we used to make our requests with the `TestClient`.\n+As the testing function is now asynchronous, you can now also call (and await) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code.\n \n /// tip\n \n-Note that we're using async/await with the new `AsyncClient` - the request is asynchronous.\n-\n-///\n-\n-/// warning\n+If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests, you can override the default pytest event loop using the following fixture:\n \n-If your application relies on lifespan events, the `AsyncClient` won't trigger these events. To ensure they are triggered, use `LifespanManager` from <a href=\"https://github.com/florimondmanca/asgi-lifespan#usage\" class=\"external-link\" target=\"_blank\">florimondmanca/asgi-lifespan</a>.\n+```python\n+import asyncio\n+import pytest\n+from collections.abc import Generator\n \n-///\n+@pytest.fixture(scope=\"session\")\n+def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:",
        "comment_created_at": "2025-01-09T20:52:16+00:00",
        "comment_author": "graingert",
        "comment_body": "This just scopes the same loop for the whole session, each test function should get a fresh loop. The only way to fix this issue is to fix the underlying code that uses a global database connection to make it in lifespan_context",
        "pr_file_module": null
      },
      {
        "comment_id": "1909477574",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13163,
        "pr_file": "docs/en/docs/advanced/async-tests.md",
        "discussion_id": "1909417220",
        "commented_code": "@@ -54,46 +59,34 @@ $ pytest\n \n ## In Detail\n \n-The marker `@pytest.mark.anyio` tells pytest that this test function should be called asynchronously:\n+The lifespan function demonstrates how to manage the lifecycle of application-wide resources. During the app's lifespan, we open a resource (`some_state_open`) at startup and clean it up (`some_state_close`) during shutdown.\n \n-{* ../../docs_src/async_tests/test_main.py hl[7] *}\n+We use **ASGITransport** from **HTTPX** to interact directly with the **FastAPI** app in an async test environment.\n \n-/// tip\n-\n-Note that the test function is now `async def` instead of just `def` as before when using the `TestClient`.\n-\n-///\n-\n-Then we can create an `AsyncClient` with the app, and send async requests to it, using `await`.\n+When testing **FastAPI** apps with a custom lifespan, it's critical to manually trigger it in the test context to ensure proper setup and teardown of resources.\n \n-{* ../../docs_src/async_tests/test_main.py hl[9:12] *}\n+If you observe issues with state initialization or teardown in your tests, ensure that the lifespan is correctly invoked, and verify the app's state before and after requests.\n \n-This is the equivalent to:\n \n-```Python\n-response = client.get('/')\n-```\n+## Other Asynchronous Function Calls\n \n-...that we used to make our requests with the `TestClient`.\n+As the testing function is now asynchronous, you can now also call (and await) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code.\n \n /// tip\n \n-Note that we're using async/await with the new `AsyncClient` - the request is asynchronous.\n-\n-///\n-\n-/// warning\n+If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests, you can override the default pytest event loop using the following fixture:\n \n-If your application relies on lifespan events, the `AsyncClient` won't trigger these events. To ensure they are triggered, use `LifespanManager` from <a href=\"https://github.com/florimondmanca/asgi-lifespan#usage\" class=\"external-link\" target=\"_blank\">florimondmanca/asgi-lifespan</a>.\n+```python\n+import asyncio\n+import pytest\n+from collections.abc import Generator\n \n-///\n+@pytest.fixture(scope=\"session\")\n+def event_loop() -> Generator[asyncio.AbstractEventLoop, None, None]:",
        "comment_created_at": "2025-01-09T21:56:45+00:00",
        "comment_author": "oleg-korshunov",
        "comment_body": "Yes, you are absolutely right, I specifically used this option as it is simpler, I made the code in accordance with your review, and also added a note about a simpler setup",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921052593",
    "pr_number": 13227,
    "pr_file": "docs/ru/docs/advanced/async-tests.md",
    "created_at": "2025-01-18T12:03:13+00:00",
    "commented_code": "+# \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n+\n+\u0412\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438 \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c **FastAPI** \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `TestClient`. \u041a \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u043c\u0435\u043d\u0442\u0443 \u0432\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `async` \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n+\n+\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1921052593",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13227,
        "pr_file": "docs/ru/docs/advanced/async-tests.md",
        "discussion_id": "1921052593",
        "commented_code": "@@ -0,0 +1,99 @@\n+# \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n+\n+\u0412\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438 \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c **FastAPI** \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `TestClient`. \u041a \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u043c\u0435\u043d\u0442\u0443 \u0432\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `async` \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n+\n+\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.",
        "comment_created_at": "2025-01-18T12:03:13+00:00",
        "comment_author": "alv2017",
        "comment_body": "```suggestion\r\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043da, \u043a\u043e\u0433\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1929679235",
    "pr_number": 13227,
    "pr_file": "docs/ru/docs/advanced/async-tests.md",
    "created_at": "2025-01-26T07:13:40+00:00",
    "commented_code": "+# \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n+\n+\u0412\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438 \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c **FastAPI** \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `TestClient`. \u041a \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u043c\u0435\u043d\u0442\u0443 \u0432\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `async` \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n+\n+\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043da, \u043a\u043e\u0433\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n+\n+\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c.\n+\n+## pytest.mark.anyio",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1929679235",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13227,
        "pr_file": "docs/ru/docs/advanced/async-tests.md",
        "discussion_id": "1929679235",
        "commented_code": "@@ -0,0 +1,99 @@\n+# \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n+\n+\u0412\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438 \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c **FastAPI** \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `TestClient`. \u041a \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u043c\u0435\u043d\u0442\u0443 \u0432\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `async` \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n+\n+\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043da, \u043a\u043e\u0433\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n+\n+\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c.\n+\n+## pytest.mark.anyio",
        "comment_created_at": "2025-01-26T07:13:40+00:00",
        "comment_author": "Xewus",
        "comment_body": "\u041a\u0430\u043a\u0430\u044f-\u0442\u043e \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f. \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043a\u0430\u043a-\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043c\u0435\u0447\u0430\u0442\u044c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b...",
        "pr_file_module": null
      },
      {
        "comment_id": "1929769035",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13227,
        "pr_file": "docs/ru/docs/advanced/async-tests.md",
        "discussion_id": "1929679235",
        "commented_code": "@@ -0,0 +1,99 @@\n+# \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n+\n+\u0412\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u0435\u043b\u0438 \u043a\u0430\u043a \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c **FastAPI** \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `TestClient`. \u041a \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u043c\u0435\u043d\u0442\u0443 \u0432\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435 \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f `async` \u0444\u0443\u043d\u043a\u0446\u0438\u0439.\n+\n+\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u0430\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043da, \u043a\u043e\u0433\u0434\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u0442\u0435\u0441\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0432\u0430\u0448\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0432\u0430\u0448 \u0431\u0435\u043a\u044d\u043d\u0434 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.\n+\n+\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c.\n+\n+## pytest.mark.anyio",
        "comment_created_at": "2025-01-26T13:08:36+00:00",
        "comment_author": "alv2017",
        "comment_body": "\u0415\u0441\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b \u043d\u0435 \u043f\u043e\u043c\u0435\u0447\u0430\u0442\u044c, \u0442\u043e \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f:\r\n\r\n```\r\nPytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.\r\n  You need to install a suitable plugin for your async framework, for example:\r\n    - anyio\r\n    - pytest-asyncio\r\n    - pytest-tornasync\r\n    - pytest-trio\r\n    - pytest-twisted\r\n    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n\r\n```\r\n\r\nPytest \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432. \u0414\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0434\u043e\u043f. \u043f\u043b\u0430\u0433\u0438\u043d\u044b (\u0441\u043c. \u0432\u044b\u0448\u0435), \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043b\u0430\u0433\u0438\u043d \u043d\u0443\u0436\u043d\u044b \u0441\u0432\u043e\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438. \u0414\u043b\u044f `anyio` \u044d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u043e\u043f\u0446\u0438\u0439.\r\n",
        "pr_file_module": null
      }
    ]
  }
]