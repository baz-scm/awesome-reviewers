[
  {
    "discussion_id": "784290354",
    "pr_number": 4416,
    "pr_file": "fastapi/routing.py",
    "created_at": "2022-01-13T20:11:14+00:00",
    "commented_code": "is_coroutine: bool = True,\n ) -> Any:\n     if field:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "784290354",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4416,
        "pr_file": "fastapi/routing.py",
        "discussion_id": "784290354",
        "commented_code": "@@ -116,25 +117,28 @@ async def serialize_response(\n     is_coroutine: bool = True,\n ) -> Any:\n     if field:",
        "comment_created_at": "2022-01-13T20:11:14+00:00",
        "comment_author": "cikay",
        "comment_body": "```py\r\nif not field:\r\n    return jsonable_encoder(response_content)\r\n```\r\nTo decrease the indentation level. The pattern is called early return.",
        "pr_file_module": null
      },
      {
        "comment_id": "784464553",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4416,
        "pr_file": "fastapi/routing.py",
        "discussion_id": "784290354",
        "commented_code": "@@ -116,25 +117,28 @@ async def serialize_response(\n     is_coroutine: bool = True,\n ) -> Any:\n     if field:",
        "comment_created_at": "2022-01-14T02:22:57+00:00",
        "comment_author": "kaiix",
        "comment_body": "good point",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "785338837",
    "pr_number": 4416,
    "pr_file": "fastapi/routing.py",
    "created_at": "2022-01-15T18:15:49+00:00",
    "commented_code": "exclude_none: bool = False,\n     is_coroutine: bool = True,\n ) -> Any:\n-    if field:\n-        if type(response_content) is not response_model:\n-            errors = []\n-            response_content = _prepare_response_content(\n-                response_content,\n-                exclude_unset=exclude_unset,\n-                exclude_defaults=exclude_defaults,\n-                exclude_none=exclude_none,\n-            )\n-            if is_coroutine:\n-                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n-            else:\n-                value, errors_ = await run_in_threadpool(\n-                    field.validate, response_content, {}, loc=(\"response\",)\n-                )\n-            if isinstance(errors_, ErrorWrapper):\n-                errors.append(errors_)\n-            elif isinstance(errors_, list):\n-                errors.extend(errors_)\n-            if errors:\n-                raise ValidationError(errors, field.type_)\n-        else:\n-            value = response_content\n-        return jsonable_encoder(\n-            value,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n+    if not field:\n+        return jsonable_encoder(response_content)\n+\n+    if type(response_content) is not response_model:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "785338837",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4416,
        "pr_file": "fastapi/routing.py",
        "discussion_id": "785338837",
        "commented_code": "@@ -116,40 +116,41 @@ async def serialize_response(\n     exclude_none: bool = False,\n     is_coroutine: bool = True,\n ) -> Any:\n-    if field:\n-        if type(response_content) is not response_model:\n-            errors = []\n-            response_content = _prepare_response_content(\n-                response_content,\n-                exclude_unset=exclude_unset,\n-                exclude_defaults=exclude_defaults,\n-                exclude_none=exclude_none,\n-            )\n-            if is_coroutine:\n-                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n-            else:\n-                value, errors_ = await run_in_threadpool(\n-                    field.validate, response_content, {}, loc=(\"response\",)\n-                )\n-            if isinstance(errors_, ErrorWrapper):\n-                errors.append(errors_)\n-            elif isinstance(errors_, list):\n-                errors.extend(errors_)\n-            if errors:\n-                raise ValidationError(errors, field.type_)\n-        else:\n-            value = response_content\n-        return jsonable_encoder(\n-            value,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n+    if not field:\n+        return jsonable_encoder(response_content)\n+\n+    if type(response_content) is not response_model:",
        "comment_created_at": "2022-01-15T18:15:49+00:00",
        "comment_author": "cikay",
        "comment_body": "Reverse the condition and return early.\r\n\r\n```py\r\nif type(response_content) is response_model:\r\n    return jsonable_encoder(\r\n        response_content,\r\n        include=include,\r\n        exclude=exclude,\r\n        by_alias=by_alias,\r\n        exclude_unset=exclude_unset,\r\n        exclude_defaults=exclude_defaults,\r\n        exclude_none=exclude_none,\r\n    )\r\n\r\n# put all logics that are in your if statement implementation here.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "785435067",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4416,
        "pr_file": "fastapi/routing.py",
        "discussion_id": "785338837",
        "commented_code": "@@ -116,40 +116,41 @@ async def serialize_response(\n     exclude_none: bool = False,\n     is_coroutine: bool = True,\n ) -> Any:\n-    if field:\n-        if type(response_content) is not response_model:\n-            errors = []\n-            response_content = _prepare_response_content(\n-                response_content,\n-                exclude_unset=exclude_unset,\n-                exclude_defaults=exclude_defaults,\n-                exclude_none=exclude_none,\n-            )\n-            if is_coroutine:\n-                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n-            else:\n-                value, errors_ = await run_in_threadpool(\n-                    field.validate, response_content, {}, loc=(\"response\",)\n-                )\n-            if isinstance(errors_, ErrorWrapper):\n-                errors.append(errors_)\n-            elif isinstance(errors_, list):\n-                errors.extend(errors_)\n-            if errors:\n-                raise ValidationError(errors, field.type_)\n-        else:\n-            value = response_content\n-        return jsonable_encoder(\n-            value,\n-            include=include,\n-            exclude=exclude,\n-            by_alias=by_alias,\n+    if not field:\n+        return jsonable_encoder(response_content)\n+\n+    if type(response_content) is not response_model:",
        "comment_created_at": "2022-01-16T12:35:39+00:00",
        "comment_author": "kaiix",
        "comment_body": " Put this case together with `type(response_content) is not response_model` is more clear, they should share the same encoding (`jsonable_encoder`) process.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "780701936",
    "pr_number": 2939,
    "pr_file": "fastapi/security/http.py",
    "created_at": "2022-01-08T19:35:40+00:00",
    "commented_code": "else:\n                 return None\n         if scheme.lower() != \"digest\":\n-            raise HTTPException(\n-                status_code=HTTP_403_FORBIDDEN,\n-                detail=\"Invalid authentication credentials\",\n-            )\n+            if self.auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_403_FORBIDDEN,\n+                    detail=\"Invalid authentication credentials\",\n+                )\n+            else:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "780701936",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 2939,
        "pr_file": "fastapi/security/http.py",
        "discussion_id": "780701936",
        "commented_code": "@@ -158,8 +158,11 @@ async def __call__(\n             else:\n                 return None\n         if scheme.lower() != \"digest\":\n-            raise HTTPException(\n-                status_code=HTTP_403_FORBIDDEN,\n-                detail=\"Invalid authentication credentials\",\n-            )\n+            if self.auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_403_FORBIDDEN,\n+                    detail=\"Invalid authentication credentials\",\n+                )\n+            else:",
        "comment_created_at": "2022-01-08T19:35:40+00:00",
        "comment_author": "cikay",
        "comment_body": "No need the statement `else` here.",
        "pr_file_module": null
      },
      {
        "comment_id": "780702414",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 2939,
        "pr_file": "fastapi/security/http.py",
        "discussion_id": "780701936",
        "commented_code": "@@ -158,8 +158,11 @@ async def __call__(\n             else:\n                 return None\n         if scheme.lower() != \"digest\":\n-            raise HTTPException(\n-                status_code=HTTP_403_FORBIDDEN,\n-                detail=\"Invalid authentication credentials\",\n-            )\n+            if self.auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_403_FORBIDDEN,\n+                    detail=\"Invalid authentication credentials\",\n+                )\n+            else:",
        "comment_created_at": "2022-01-08T19:40:59+00:00",
        "comment_author": "arthurio",
        "comment_body": "Good point, I removed the extra statements in the rest of the file as well.",
        "pr_file_module": null
      },
      {
        "comment_id": "1971170455",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 2939,
        "pr_file": "fastapi/security/http.py",
        "discussion_id": "780701936",
        "commented_code": "@@ -158,8 +158,11 @@ async def __call__(\n             else:\n                 return None\n         if scheme.lower() != \"digest\":\n-            raise HTTPException(\n-                status_code=HTTP_403_FORBIDDEN,\n-                detail=\"Invalid authentication credentials\",\n-            )\n+            if self.auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_403_FORBIDDEN,\n+                    detail=\"Invalid authentication credentials\",\n+                )\n+            else:",
        "comment_created_at": "2025-02-26T08:46:23+00:00",
        "comment_author": "svlandeg",
        "comment_body": "While I see the point, let's stick to the original code formatting throughout this file. Mostly this is a matter of personal preference: while the `else` is technically unnecessary, writing it out may provide more code clarity and robustness against future changes (image ever removing the `raise` statement from the `if` part). \r\n\r\nEither way, not making this additional change in this PR makes the contribution more minimal and easier to review 🙏 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "720244175",
    "pr_number": 3144,
    "pr_file": "fastapi/openapi/utils.py",
    "created_at": "2021-10-01T13:26:26+00:00",
    "commented_code": "for param in all_route_params:\n         field_info = param.field_info\n         field_info = cast(Param, field_info)\n-        parameter = {\n-            \"name\": param.alias,\n-            \"in\": field_info.in_.value,\n-            \"required\": param.required,\n-            \"schema\": field_schema(\n-                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n-            )[0],\n-        }\n-        if field_info.description:\n-            parameter[\"description\"] = field_info.description\n-        if field_info.examples:\n-            parameter[\"examples\"] = jsonable_encoder(field_info.examples)\n-        elif field_info.example != Undefined:\n-            parameter[\"example\"] = jsonable_encoder(field_info.example)\n-        if field_info.deprecated:\n-            parameter[\"deprecated\"] = field_info.deprecated\n-        parameters.append(parameter)\n+        if field_info.include_in_schema:",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "720244175",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3144,
        "pr_file": "fastapi/openapi/utils.py",
        "discussion_id": "720244175",
        "commented_code": "@@ -91,23 +91,24 @@ def get_openapi_operation_parameters(\n     for param in all_route_params:\n         field_info = param.field_info\n         field_info = cast(Param, field_info)\n-        parameter = {\n-            \"name\": param.alias,\n-            \"in\": field_info.in_.value,\n-            \"required\": param.required,\n-            \"schema\": field_schema(\n-                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n-            )[0],\n-        }\n-        if field_info.description:\n-            parameter[\"description\"] = field_info.description\n-        if field_info.examples:\n-            parameter[\"examples\"] = jsonable_encoder(field_info.examples)\n-        elif field_info.example != Undefined:\n-            parameter[\"example\"] = jsonable_encoder(field_info.example)\n-        if field_info.deprecated:\n-            parameter[\"deprecated\"] = field_info.deprecated\n-        parameters.append(parameter)\n+        if field_info.include_in_schema:",
        "comment_created_at": "2021-10-01T13:26:26+00:00",
        "comment_author": "tokikanno",
        "comment_body": "Maybe \r\n\r\n```python\r\nif not field_info.include_in_schema:\r\n    continue\r\n```\r\n\r\nThis will decrease 1 indent level to the rest of codes in loop.\r\nAlso people can skip finding the `else` block of this if while reading these codes",
        "pr_file_module": null
      },
      {
        "comment_id": "722859672",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3144,
        "pr_file": "fastapi/openapi/utils.py",
        "discussion_id": "720244175",
        "commented_code": "@@ -91,23 +91,24 @@ def get_openapi_operation_parameters(\n     for param in all_route_params:\n         field_info = param.field_info\n         field_info = cast(Param, field_info)\n-        parameter = {\n-            \"name\": param.alias,\n-            \"in\": field_info.in_.value,\n-            \"required\": param.required,\n-            \"schema\": field_schema(\n-                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n-            )[0],\n-        }\n-        if field_info.description:\n-            parameter[\"description\"] = field_info.description\n-        if field_info.examples:\n-            parameter[\"examples\"] = jsonable_encoder(field_info.examples)\n-        elif field_info.example != Undefined:\n-            parameter[\"example\"] = jsonable_encoder(field_info.example)\n-        if field_info.deprecated:\n-            parameter[\"deprecated\"] = field_info.deprecated\n-        parameters.append(parameter)\n+        if field_info.include_in_schema:",
        "comment_created_at": "2021-10-06T03:35:44+00:00",
        "comment_author": "astraldawn",
        "comment_body": "I personally prefer your suggestion but felt it was better to be consistent with the rest of the file, e.g.\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/cf8b080cf9392babefd905c166c1b7aa8145f1b9/fastapi/openapi/utils.py#L182\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/cf8b080cf9392babefd905c166c1b7aa8145f1b9/fastapi/openapi/utils.py#L320",
        "pr_file_module": null
      },
      {
        "comment_id": "790293246",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 3144,
        "pr_file": "fastapi/openapi/utils.py",
        "discussion_id": "720244175",
        "commented_code": "@@ -91,23 +91,24 @@ def get_openapi_operation_parameters(\n     for param in all_route_params:\n         field_info = param.field_info\n         field_info = cast(Param, field_info)\n-        parameter = {\n-            \"name\": param.alias,\n-            \"in\": field_info.in_.value,\n-            \"required\": param.required,\n-            \"schema\": field_schema(\n-                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n-            )[0],\n-        }\n-        if field_info.description:\n-            parameter[\"description\"] = field_info.description\n-        if field_info.examples:\n-            parameter[\"examples\"] = jsonable_encoder(field_info.examples)\n-        elif field_info.example != Undefined:\n-            parameter[\"example\"] = jsonable_encoder(field_info.example)\n-        if field_info.deprecated:\n-            parameter[\"deprecated\"] = field_info.deprecated\n-        parameters.append(parameter)\n+        if field_info.include_in_schema:",
        "comment_created_at": "2022-01-23T15:36:07+00:00",
        "comment_author": "tiangolo",
        "comment_body": "Thanks for the discussion! Yep, agreed it makes sense to switch it around. I just did in a commit on top. Thanks!",
        "pr_file_module": null
      }
    ]
  }
]