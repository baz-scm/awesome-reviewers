[
  {
    "discussion_id": "2005481524",
    "pr_number": 13505,
    "pr_file": "tests/test_tutorial/test_settings/test_tutorial001.py",
    "created_at": "2025-03-20T12:05:13+00:00",
    "commented_code": "+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n from pytest import MonkeyPatch\n \n-from ...utils import needs_pydanticv2\n+from ...utils import needs_pydanticv1, needs_pydanticv2\n+\n+\n+@pytest.fixture(\n+    params=[\n+        pytest.param(\"tutorial001\", marks=needs_pydanticv2),\n+        pytest.param(\"tutorial001_pv1\", marks=needs_pydanticv1),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    def app_wrapper():\n+        mod = importlib.import_module(f\"docs_src.settings.{request.param}\")\n+        return mod.app\n+\n+    return app_wrapper",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "2005481524",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13505,
        "pr_file": "tests/test_tutorial/test_settings/test_tutorial001.py",
        "discussion_id": "2005481524",
        "commented_code": "@@ -1,14 +1,30 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n from pytest import MonkeyPatch\n \n-from ...utils import needs_pydanticv2\n+from ...utils import needs_pydanticv1, needs_pydanticv2\n+\n+\n+@pytest.fixture(\n+    params=[\n+        pytest.param(\"tutorial001\", marks=needs_pydanticv2),\n+        pytest.param(\"tutorial001_pv1\", marks=needs_pydanticv1),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    def app_wrapper():\n+        mod = importlib.import_module(f\"docs_src.settings.{request.param}\")\n+        return mod.app\n+\n+    return app_wrapper",
        "comment_created_at": "2025-03-20T12:05:13+00:00",
        "comment_author": "alv2017",
        "comment_body": "I think that it is better to monkeypatch `get_app()`, instead of test_settings:\r\n\r\n```python\r\n\r\n@pytest.fixture(\r\n    name=\"app\",\r\n    params=[\r\n        pytest.param(\"tutorial001\", marks=needs_pydanticv2),\r\n        pytest.param(\"tutorial001_pv1\", marks=needs_pydanticv1),\r\n    ],\r\n)\r\ndef get_app(request: pytest.FixtureRequest, monkeypatch: MonkeyPatch):\r\n    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\r\n    mod = importlib.import_module(f\"docs_src.settings.{request.param}\")\r\n    return mod.app\r\n\r\n\r\ndef test_settings(app):\r\n    client = TestClient(app)\r\n    response = client.get(\"/info\")\r\n    assert response.status_code == 200, response.text\r\n    assert response.json() == {\r\n        \"app_name\": \"Awesome API\",\r\n        \"admin_email\": \"admin@example.com\",\r\n        \"items_per_user\": 50,\r\n    }\r\n\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2005560949",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13505,
        "pr_file": "tests/test_tutorial/test_settings/test_tutorial001.py",
        "discussion_id": "2005481524",
        "commented_code": "@@ -1,14 +1,30 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n from pytest import MonkeyPatch\n \n-from ...utils import needs_pydanticv2\n+from ...utils import needs_pydanticv1, needs_pydanticv2\n+\n+\n+@pytest.fixture(\n+    params=[\n+        pytest.param(\"tutorial001\", marks=needs_pydanticv2),\n+        pytest.param(\"tutorial001_pv1\", marks=needs_pydanticv1),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    def app_wrapper():\n+        mod = importlib.import_module(f\"docs_src.settings.{request.param}\")\n+        return mod.app\n+\n+    return app_wrapper",
        "comment_created_at": "2025-03-20T12:45:34+00:00",
        "comment_author": "valentinDruzhinin",
        "comment_body": "agree, fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1585943204",
    "pr_number": 4089,
    "pr_file": "tests/test_dependency_cache.py",
    "created_at": "2024-05-01T06:44:08+00:00",
    "commented_code": "from fastapi import Depends, FastAPI, Security\n+from fastapi._compat import PYDANTIC_V2\n from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n \n app = FastAPI()\n \n-counter_holder = {\"counter\": 0}\n+counter_holder = {\"counter\": 0, \"parsing_counter\": 0}",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1585943204",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 4089,
        "pr_file": "tests/test_dependency_cache.py",
        "discussion_id": "1585943204",
        "commented_code": "@@ -1,9 +1,31 @@\n from fastapi import Depends, FastAPI, Security\n+from fastapi._compat import PYDANTIC_V2\n from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n \n app = FastAPI()\n \n-counter_holder = {\"counter\": 0}\n+counter_holder = {\"counter\": 0, \"parsing_counter\": 0}",
        "comment_created_at": "2024-05-01T06:44:08+00:00",
        "comment_author": "Jaza",
        "comment_body": "IMHO this should be set in pytest session-level context or similar, it shouldn't just be a global variable, I feel that there's too high a risk that the test could end up running with the counter initialised to a non-zero value (e.g. if for some reason the same test runs twice in one pytest invocation, if we end up adding another test in the future that depends on the same counter, etc).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1959504779",
    "pr_number": 13319,
    "pr_file": "tests/test_custom_logo_docs.py",
    "created_at": "2025-02-18T10:51:47+00:00",
    "commented_code": "+from pathlib import Path\n+\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+TEST_HTTP_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+TEST_HTTPS_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+DEFAULT_FASTAPI_FAVICON = \"https://fastapi.tiangolo.com/img/favicon.png\"\n+\n+\n+def get_client_with_custom_docs_logo(favicon_url):\n+    app = FastAPI(favicon_url=favicon_url)\n+\n+    @app.get(\"/items/\")\n+    async def read_items():\n+        return {\"id\": \"foo\"}\n+\n+    return TestClient(app)",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1959504779",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13319,
        "pr_file": "tests/test_custom_logo_docs.py",
        "discussion_id": "1959504779",
        "commented_code": "@@ -0,0 +1,59 @@\n+from pathlib import Path\n+\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+TEST_HTTP_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+TEST_HTTPS_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+DEFAULT_FASTAPI_FAVICON = \"https://fastapi.tiangolo.com/img/favicon.png\"\n+\n+\n+def get_client_with_custom_docs_logo(favicon_url):\n+    app = FastAPI(favicon_url=favicon_url)\n+\n+    @app.get(\"/items/\")\n+    async def read_items():\n+        return {\"id\": \"foo\"}\n+\n+    return TestClient(app)",
        "comment_created_at": "2025-02-18T10:51:47+00:00",
        "comment_author": "alv2017",
        "comment_body": "It would be good to get rid of this, and use a pytest fixture. (I do not insist on that though)",
        "pr_file_module": null
      },
      {
        "comment_id": "1960741838",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 13319,
        "pr_file": "tests/test_custom_logo_docs.py",
        "discussion_id": "1959504779",
        "commented_code": "@@ -0,0 +1,59 @@\n+from pathlib import Path\n+\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+TEST_HTTP_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+TEST_HTTPS_FAVICON_URL = \"http://favicon-url.com/favicon.png\"\n+DEFAULT_FASTAPI_FAVICON = \"https://fastapi.tiangolo.com/img/favicon.png\"\n+\n+\n+def get_client_with_custom_docs_logo(favicon_url):\n+    app = FastAPI(favicon_url=favicon_url)\n+\n+    @app.get(\"/items/\")\n+    async def read_items():\n+        return {\"id\": \"foo\"}\n+\n+    return TestClient(app)",
        "comment_created_at": "2025-02-18T23:42:35+00:00",
        "comment_author": "valentinDruzhinin",
        "comment_body": "wrapped `get_client_with_custom_docs_logo` as fixture, thanks",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1658448029",
    "pr_number": 11560,
    "pr_file": "tests/test_security_oauth2_authorization_client_credentials_description.py",
    "created_at": "2024-06-28T09:52:43+00:00",
    "commented_code": "+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2ClientCredentials\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2ClientCredentials(\n+    tokenUrl=\"token\",\n+    description=\"OAuth2 Client Credentials Flow\",\n+    auto_error=True,\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})",
    "repo_full_name": "fastapi/fastapi",
    "discussion_comments": [
      {
        "comment_id": "1658448029",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11560,
        "pr_file": "tests/test_security_oauth2_authorization_client_credentials_description.py",
        "discussion_id": "1658448029",
        "commented_code": "@@ -0,0 +1,77 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2ClientCredentials\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2ClientCredentials(\n+    tokenUrl=\"token\",\n+    description=\"OAuth2 Client Credentials Flow\",\n+    auto_error=True,\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})",
        "comment_created_at": "2024-06-28T09:52:43+00:00",
        "comment_author": "GDemay",
        "comment_body": "Why are we not setting the `testtoken` in a const file instead of duplicating it everywhere?",
        "pr_file_module": null
      },
      {
        "comment_id": "1713321188",
        "repo_full_name": "fastapi/fastapi",
        "pr_number": 11560,
        "pr_file": "tests/test_security_oauth2_authorization_client_credentials_description.py",
        "discussion_id": "1658448029",
        "commented_code": "@@ -0,0 +1,77 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2ClientCredentials\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2ClientCredentials(\n+    tokenUrl=\"token\",\n+    description=\"OAuth2 Client Credentials Flow\",\n+    auto_error=True,\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})",
        "comment_created_at": "2024-08-12T08:04:58+00:00",
        "comment_author": "rhysrevans3",
        "comment_body": "I followed the existing structure of the other oauth2 tests. I agree `test_token` and possibly the `test_client` should probably be move into fixtures but I think that is beyond the scope of this pull request. I could create a new issue for \"reducing code duplication in tests\"?",
        "pr_file_module": null
      }
    ]
  }
]