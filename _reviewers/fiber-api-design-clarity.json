[
  {
    "discussion_id": "2150347884",
    "pr_number": 3518,
    "pr_file": "docs/middleware/timeout.md",
    "created_at": "2025-06-16T15:53:39+00:00",
    "commented_code": "return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2150347884",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-16T15:53:39+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "not sure if we should allow this feature\r\nsince the middleware hangs on a certain route, the route is already handled with a timeout config\r\n\r\nto have further configurations of the routes in there I see as wrong\r\n\r\nalso people will want the routes to work with wildcard and other route specific matchings\r\n\r\ndon't know if we should allow this feature in the middleware config which itself is bound to a route if it already works\r\n\r\nf.e.\r\n```go\r\napp.Get(\"/reports\", timeout.New(handler, timeout.Config{\r\n    Timeout: 5 * time.Second,\r\n    Routes: map[string]time.Duration{\r\n        \"/reports\": 30 * time.Second,\r\n    },\r\n}))\r\n```\r\nwhat added value does the timeout value have if the actual value is in the routes map\r\n\r\n\r\nsame with the skip feature\r\nfor this we have the skip middleware \r\nhttps://docs.gofiber.io/next/middleware/skip",
        "pr_file_module": null
      },
      {
        "comment_id": "2151033608",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-16T23:01:29+00:00",
        "comment_author": "Andrei-hub11",
        "comment_body": "@ReneWerner87 I understand your points, but I believe the value of this feature lies in the convenience it provides. I prefer configuring everything in a single place rather than spreading it across multiple routes. If the framework itself offered this support natively, even better.\r\nAs for the Timeout property, the intention was for it to serve as the default value for routes that don\u2019t specify one. If we decide to move forward with this, we can simply rename it to DefaultTimeout if you think that would make it clearer.",
        "pr_file_module": null
      },
      {
        "comment_id": "2151119663",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-17T00:50:02+00:00",
        "comment_author": "gaby",
        "comment_body": "@ReneWerner87 What if we remove the handler param, and require the middleware to be used with `app.Use()` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2151146151",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-17T01:26:59+00:00",
        "comment_author": "Andrei-hub11",
        "comment_body": "Now I understand better. I thought we were already planning to use it in app.Use() instead of on individual routes, based on the suggested idea:\r\n\r\n```\r\napp.Use(timeout.NewWithConfig(timeout.Config{\r\n    Timeout: 5 * time.Second,\r\n    PerRoute: map[string]time.Duration{\r\n        \"/api/reports\": 30 * time.Second,\r\n        \"/api/uploads\": 60 * time.Second,\r\n    },\r\n}))\r\n```\r\n\r\n@gaby, wouldn\u2019t it be better to keep the original usage below unchanged and just create a separate method, preserving backward compatibility?\r\n\r\n```\r\napp.Get(\"/foo/:sleepTime\", timeout.New(h, 2*time.Second))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2151153745",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-17T01:36:53+00:00",
        "comment_author": "gaby",
        "comment_body": "@Andrei-hub11 The `main` branch is tracking the new major version of `GoFiber`. Breaking changes are `allowed`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2151508626",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-17T07:17:03+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "would like to separate route and middleware logic\r\nthat didn't work well with the health middleware back then and caused countless bug reports\r\n\r\nwhere the route is defined, the timeout middleware can be defined with a specific time or globally\r\n\r\nyou can specify a route in app.use and also operate handler chaining\r\n\r\n```go\r\napp.Get(\"/api/reports\", timeout.NewWithConfig(timeout.Config{\r\n    Timeout: 30 * time.Second,\r\n}), myHanlderLogic)\r\n```\r\n\r\nor \r\n\r\n```go\r\napp.Use(\"/api/reports\", timeout.NewWithConfig(timeout.Config{\r\n    Timeout: 30 * time.Second,\r\n})\r\napp.Get(\"/api/reports\", myHanlderLogic)\r\n```\r\n\r\nor\r\n\r\n```go\r\napp.Route(\"/api/reports\").Use(timeout.NewWithConfig(timeout.Config{\r\n    Timeout: 30 * time.Second,\r\n}).Get(myHanlderLogic)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2158293501",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-20T08:00:18+00:00",
        "comment_author": "Andrei-hub11",
        "comment_body": "@ReneWerner87, I think using timeout.NewWithConfig() in the same place where a route is defined would feel a bit awkward, as it creates a conceptual ambiguity.\r\n\r\nSince changes can be made, and if we ever need specific adjustments for individual route usage, we can simply refactor timeout.New() so that timeout.NewWithConfig() can be used independently with app.Use().\r\n\r\n### Clarity of purpose:\r\n\r\ntimeout.New() = \"This specific route needs X seconds\"\r\n\r\n```\r\napp.Get(\"/api/reports\", timeout.New(30*time.Second))\r\n```\r\n\r\ntimeout.NewWithConfig() = \"I'm configuring timeouts for the entire application\"\r\n\r\n```\r\napp.Use(timeout.NewWithConfig(timeout.Config{\r\n    DefaultTimeout: 5 * time.Second,\r\n    Routes: map[string]time.Duration{\r\n        \"/api/videos\": 30 * time.Second,\r\n        \"/api/uploads\": 60 * time.Second,\r\n    },\r\n    SkipPaths: []string{\"/health\"},\r\n}))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2168832598",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-26T11:21:36+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "the one with the routes will not work well, people will then think they can also define dynamic routes not just completely static ones like `\u201c/api/user/:userId\u201d`",
        "pr_file_module": null
      },
      {
        "comment_id": "2172963892",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-27T23:06:15+00:00",
        "comment_author": "Andrei-hub11",
        "comment_body": "@ReneWerner87 Man, how about making it handle /api/user/ as matching /api/user/123 and similar paths? That would solve it and be intuitive, as long as it's documented.\r\n\r\n```\r\napp.Use(timeout.NewWithConfig(timeout.Config{\r\n    DefaultTimeout: 5 * time.Second,\r\n    RoutePrefixes: map[string]time.Duration{\r\n        \"/api/users/\":    15 * time.Second, // matches: /api/users/123, /api/users/456/profile\r\n        \"/api/reports/\":  30 * time.Second, // matches: /api/reports/daily, /api/reports/monthly/2024\r\n        \"/api/uploads/\":  60 * time.Second, // matches: /api/uploads/images, /api/uploads/documents/pdf\r\n        \"/admin/\":        10 * time.Second, // matches: /admin/dashboard, /admin/users/edit\r\n    },\r\n    SkipPaths: []string{\"/health\", \"/metrics\"},\r\n}))\r\n\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2172966193",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-27T23:11:15+00:00",
        "comment_author": "gaby",
        "comment_body": "It is not that simple to implement, it requires using the router within the handler.",
        "pr_file_module": null
      },
      {
        "comment_id": "2172990733",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3518,
        "pr_file": "docs/middleware/timeout.md",
        "discussion_id": "2150347884",
        "commented_code": "@@ -129,7 +129,42 @@ func main() {\n         return nil\n     }\n \n-    app.Get(\"/foo\", timeout.New(handler, 10*time.Second))\n+    app.Get(\"/foo\", timeout.New(handler, timeout.Config{Timeout: 10 * time.Second}))\n     log.Fatal(app.Listen(\":3000\"))\n }\n ```\n+\n+## Config\n+\n+### Config\n+\n+| Property   | Type                                | Description                                                               | Default |\n+|:-----------|:------------------------------------|:--------------------------------------------------------------------------|:-------|\n+| Next       | `func(fiber.Ctx) bool`              | Function to skip the middleware.                                         | `nil`  |\n+| Timeout    | `time.Duration`                     | Default timeout for routes.                                              | `0`    |\n+| OnTimeout  | `fiber.Handler`                     | Handler executed when a timeout occurs.                                  | `nil`  |\n+| SkipPaths  | `[]string`                          | Paths that should not have a timeout enforced.                            | `nil`  |\n+| Routes     | `map[string]time.Duration`          | Specific timeout values per route path.                                  | `nil`  |",
        "comment_created_at": "2025-06-28T00:06:11+00:00",
        "comment_author": "Andrei-hub11",
        "comment_body": "Apologies \u2014 I think I may have misunderstood something. Are you saying that something like strings.HasPrefix(c.Path(), prefix) wouldn't be sufficient? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1485828883",
    "pr_number": 2850,
    "pr_file": "docs/api/ctx.md",
    "created_at": "2024-02-12T07:51:23+00:00",
    "commented_code": "> _Returned value is only valid within the handler. Do not store any references.  \n > Make copies or use the_ [_**`Immutable`**_](ctx.md) _setting instead._ [_Read more..._](../#zero-allocation)\n \n+\n+In certain scenarios, it can be useful to have an alternative approach to handle different types of parameters, not \n+just strings. This can be achieved using a generic Query function known as `Params[V genericType](c Ctx, key string, defaultValue ...V) V`. \n+This function is capable of parsing a query string and returning a value of a type that is assumed and specified by `V genericType`.\n+\n+```go title=\"Signature\"\n+func Params[v genericType](c Ctx, key string, default value ...V) V\n+```\n+\n+```go title=\"Example\"\n+\n+// Get http://example.com/user/114\n+app.Get(\"/user/:id\", func(c fiber.Ctx) error{\n+  fiber.Params[string](c, \"id\") // returns \"114\" as string.\n+  fiber.Params[int](c, \"id\") // returns 114 as integer\n+  fiber.Params[string](c, \"number\") // retunrs \"\" (default string type)\n+  fiber.Params[int](c, \"number\") // returns 0 (default integer value type)\n+})\n+```\n+\n+The generic Params function supports returning the following data types based on V genericType:\n+- Integer: int, int8, int16, int32, int64\n+- Unsigned integer: uint, uint8, uint16, uint32, uint64\n+- Floating-point numbers: float32, float64\n+- Boolean: bool\n+- String: string\n+- Byte array: []byte\n+\n ## ParamsInt",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1485828883",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2850,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "1485828883",
        "commented_code": "@@ -1197,6 +1197,34 @@ app.Get(\"/v1/*/shop/*\", func(c fiber.Ctx) error {\n > _Returned value is only valid within the handler. Do not store any references.  \n > Make copies or use the_ [_**`Immutable`**_](ctx.md) _setting instead._ [_Read more..._](../#zero-allocation)\n \n+\n+In certain scenarios, it can be useful to have an alternative approach to handle different types of parameters, not \n+just strings. This can be achieved using a generic Query function known as `Params[V genericType](c Ctx, key string, defaultValue ...V) V`. \n+This function is capable of parsing a query string and returning a value of a type that is assumed and specified by `V genericType`.\n+\n+```go title=\"Signature\"\n+func Params[v genericType](c Ctx, key string, default value ...V) V\n+```\n+\n+```go title=\"Example\"\n+\n+// Get http://example.com/user/114\n+app.Get(\"/user/:id\", func(c fiber.Ctx) error{\n+  fiber.Params[string](c, \"id\") // returns \"114\" as string.\n+  fiber.Params[int](c, \"id\") // returns 114 as integer\n+  fiber.Params[string](c, \"number\") // retunrs \"\" (default string type)\n+  fiber.Params[int](c, \"number\") // returns 0 (default integer value type)\n+})\n+```\n+\n+The generic Params function supports returning the following data types based on V genericType:\n+- Integer: int, int8, int16, int32, int64\n+- Unsigned integer: uint, uint8, uint16, uint32, uint64\n+- Floating-point numbers: float32, float64\n+- Boolean: bool\n+- String: string\n+- Byte array: []byte\n+\n ## ParamsInt",
        "comment_created_at": "2024-02-12T07:51:23+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "remove ParamsInt documentation and function",
        "pr_file_module": null
      },
      {
        "comment_id": "1485974523",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2850,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "1485828883",
        "commented_code": "@@ -1197,6 +1197,34 @@ app.Get(\"/v1/*/shop/*\", func(c fiber.Ctx) error {\n > _Returned value is only valid within the handler. Do not store any references.  \n > Make copies or use the_ [_**`Immutable`**_](ctx.md) _setting instead._ [_Read more..._](../#zero-allocation)\n \n+\n+In certain scenarios, it can be useful to have an alternative approach to handle different types of parameters, not \n+just strings. This can be achieved using a generic Query function known as `Params[V genericType](c Ctx, key string, defaultValue ...V) V`. \n+This function is capable of parsing a query string and returning a value of a type that is assumed and specified by `V genericType`.\n+\n+```go title=\"Signature\"\n+func Params[v genericType](c Ctx, key string, default value ...V) V\n+```\n+\n+```go title=\"Example\"\n+\n+// Get http://example.com/user/114\n+app.Get(\"/user/:id\", func(c fiber.Ctx) error{\n+  fiber.Params[string](c, \"id\") // returns \"114\" as string.\n+  fiber.Params[int](c, \"id\") // returns 114 as integer\n+  fiber.Params[string](c, \"number\") // retunrs \"\" (default string type)\n+  fiber.Params[int](c, \"number\") // returns 0 (default integer value type)\n+})\n+```\n+\n+The generic Params function supports returning the following data types based on V genericType:\n+- Integer: int, int8, int16, int32, int64\n+- Unsigned integer: uint, uint8, uint16, uint32, uint64\n+- Floating-point numbers: float32, float64\n+- Boolean: bool\n+- String: string\n+- Byte array: []byte\n+\n ## ParamsInt",
        "comment_created_at": "2024-02-12T10:15:00+00:00",
        "comment_author": "dozheiny",
        "comment_body": "Users may have problems when migrating from v2 to v3. How about I use the generic Params function in `ParamsInt` and other similar functions?  Add a DEPRECATED flag in the comment section.",
        "pr_file_module": null
      },
      {
        "comment_id": "1488606082",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2850,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "1485828883",
        "commented_code": "@@ -1197,6 +1197,34 @@ app.Get(\"/v1/*/shop/*\", func(c fiber.Ctx) error {\n > _Returned value is only valid within the handler. Do not store any references.  \n > Make copies or use the_ [_**`Immutable`**_](ctx.md) _setting instead._ [_Read more..._](../#zero-allocation)\n \n+\n+In certain scenarios, it can be useful to have an alternative approach to handle different types of parameters, not \n+just strings. This can be achieved using a generic Query function known as `Params[V genericType](c Ctx, key string, defaultValue ...V) V`. \n+This function is capable of parsing a query string and returning a value of a type that is assumed and specified by `V genericType`.\n+\n+```go title=\"Signature\"\n+func Params[v genericType](c Ctx, key string, default value ...V) V\n+```\n+\n+```go title=\"Example\"\n+\n+// Get http://example.com/user/114\n+app.Get(\"/user/:id\", func(c fiber.Ctx) error{\n+  fiber.Params[string](c, \"id\") // returns \"114\" as string.\n+  fiber.Params[int](c, \"id\") // returns 114 as integer\n+  fiber.Params[string](c, \"number\") // retunrs \"\" (default string type)\n+  fiber.Params[int](c, \"number\") // returns 0 (default integer value type)\n+})\n+```\n+\n+The generic Params function supports returning the following data types based on V genericType:\n+- Integer: int, int8, int16, int32, int64\n+- Unsigned integer: uint, uint8, uint16, uint32, uint64\n+- Floating-point numbers: float32, float64\n+- Boolean: bool\n+- String: string\n+- Byte array: []byte\n+\n ## ParamsInt",
        "comment_created_at": "2024-02-13T21:29:32+00:00",
        "comment_author": "dozheiny",
        "comment_body": "I thought about it. ParamsInt returns an error if can't parse it. So if we rewrite the function with new Params, it returns an empty error always. so I'll remove it.",
        "pr_file_module": null
      },
      {
        "comment_id": "1490013395",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2850,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "1485828883",
        "commented_code": "@@ -1197,6 +1197,34 @@ app.Get(\"/v1/*/shop/*\", func(c fiber.Ctx) error {\n > _Returned value is only valid within the handler. Do not store any references.  \n > Make copies or use the_ [_**`Immutable`**_](ctx.md) _setting instead._ [_Read more..._](../#zero-allocation)\n \n+\n+In certain scenarios, it can be useful to have an alternative approach to handle different types of parameters, not \n+just strings. This can be achieved using a generic Query function known as `Params[V genericType](c Ctx, key string, defaultValue ...V) V`. \n+This function is capable of parsing a query string and returning a value of a type that is assumed and specified by `V genericType`.\n+\n+```go title=\"Signature\"\n+func Params[v genericType](c Ctx, key string, default value ...V) V\n+```\n+\n+```go title=\"Example\"\n+\n+// Get http://example.com/user/114\n+app.Get(\"/user/:id\", func(c fiber.Ctx) error{\n+  fiber.Params[string](c, \"id\") // returns \"114\" as string.\n+  fiber.Params[int](c, \"id\") // returns 114 as integer\n+  fiber.Params[string](c, \"number\") // retunrs \"\" (default string type)\n+  fiber.Params[int](c, \"number\") // returns 0 (default integer value type)\n+})\n+```\n+\n+The generic Params function supports returning the following data types based on V genericType:\n+- Integer: int, int8, int16, int32, int64\n+- Unsigned integer: uint, uint8, uint16, uint32, uint64\n+- Floating-point numbers: float32, float64\n+- Boolean: bool\n+- String: string\n+- Byte array: []byte\n+\n ## ParamsInt",
        "comment_created_at": "2024-02-14T20:19:15+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "the aim was to replace these functions with the generics\r\nso let's stick to it ",
        "pr_file_module": null
      }
    ]
  }
]