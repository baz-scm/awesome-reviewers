[
  {
    "discussion_id": "2007354879",
    "pr_number": 3359,
    "pr_file": "docs/middleware/logger.md",
    "created_at": "2025-03-21T11:09:45+00:00",
    "commented_code": "### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2007354879",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T11:09:45+00:00",
        "comment_author": "efectn",
        "comment_body": "I don't think `CustomFormat` is explanative enough. I would prefer to rename this property to `PredefinedFormat` or sth. like",
        "pr_file_module": null
      },
      {
        "comment_id": "2007406391",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T11:41:49+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "`PredefinedFormat` sound better\r\nas it is not a fixed list of formats and cannot be customised\r\nagreed",
        "pr_file_module": null
      },
      {
        "comment_id": "2007406989",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T11:42:16+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "@gaby ok with this ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2007445320",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T11:59:34+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "@edvardsanta we had consulted internally and think an extra property is not necessary, as it can also be set directly via the format\r\nwe should just point this out in the documentation \r\n```go\r\napp.Use(logger.New(logger.Config{\r\n    Format: logger.FormatCommon,\r\n}))\r\n```\r\n\r\npls change this",
        "pr_file_module": null
      },
      {
        "comment_id": "2007449651",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T12:02:55+00:00",
        "comment_author": "gaby",
        "comment_body": "Agree, the `Format` field is enough to provide predefined formats and user can provide a custom format through it. So there's no need for 2 fields.",
        "pr_file_module": null
      },
      {
        "comment_id": "2007572118",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T13:22:49+00:00",
        "comment_author": "edvardsanta",
        "comment_body": "Based on our discussion, it seems like the **Format** field is enough to handle both predefined and custom formats. Do you want me to completely remove **CustomFormat/PredefinedFormat** and just rely on **Format**?",
        "pr_file_module": null
      },
      {
        "comment_id": "2007574163",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "docs/middleware/logger.md",
        "discussion_id": "2007354879",
        "commented_code": "@@ -136,37 +172,51 @@ Writing to os.File is goroutine-safe, but if you are using a custom Stream that\n \n ### Config\n \n-| Property         | Type                       | Description                                                                                                                      | Default                                                               |\n-|:-----------------|:---------------------------|:---------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------|\n-| Next             | `func(fiber.Ctx) bool`     | Next defines a function to skip this middleware when returned true.                                                               | `nil`                                                                 |\n-| Skip             | `func(fiber.Ctx) bool`     | Skip is a function to determine if logging is skipped or written to Stream.                                                       | `nil`                                                                 |\n-| Done             | `func(fiber.Ctx, []byte)`  | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.  | `nil`                                                                 |\n-| CustomTags       | `map[string]LogFunc`       | tagFunctions defines the custom tag action.                                                                                      | `map[string]LogFunc`                                                  |\n-| Format           | `string`                   | Format defines the logging tags.                                                                                                 | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n-| TimeFormat       | `string`                   | TimeFormat defines the time format for log timestamps.                                                                           | `15:04:05`                                                            |\n-| TimeZone         | `string`                   | TimeZone can be specified, such as \"UTC\" and \"America/New_York\" and \"Asia/Chongqing\", etc                                        | `\"Local\"`                                                             |\n-| TimeInterval     | `time.Duration`            | TimeInterval is the delay before the timestamp is updated.                                                                       | `500 * time.Millisecond`                                              |\n-| Stream           | `io.Writer`                | Stream is a writer where logs are written.                                                                                       | `os.Stdout`                                                           |\n-| LoggerFunc | `func(c fiber.Ctx, data *Data, cfg Config) error` | Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined. | `see default_logger.go defaultLoggerInstance` |\n-| DisableColors    | `bool`                     | DisableColors defines if the logs output should be colorized.                                                                    | `false`                                                               |\n+| Property      | Type                                              | Description                                                                                                                                   | Default                                                               |\n+| :------------ | :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------- |\n+| Next          | `func(fiber.Ctx) bool`                            | Next defines a function to skip this middleware when returned true.                                                                           | `nil`                                                                 |\n+| Skip          | `func(fiber.Ctx) bool`                            | Skip is a function to determine if logging is skipped or written to Stream.                                                                   | `nil`                                                                 |\n+| Done          | `func(fiber.Ctx, []byte)`                         | Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter.              | `nil`                                                                 |\n+| CustomTags    | `map[string]LogFunc`                              | tagFunctions defines the custom tag action.                                                                                                   | `map[string]LogFunc`                                                  |\n+| Format        | `string`                                          | Format defines the logging tags.                                         | `[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n` |\n+| CustomFormat  |  `string`  | Predefined format for log.                                                                                                                    | `default`, `common`, `combined`, `json`, `ecs`                                                                 |",
        "comment_created_at": "2025-03-21T13:24:02+00:00",
        "comment_author": "gaby",
        "comment_body": "@edvardsanta Yes, the `Format` field is enough. Will keep things simple/easy to use.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1632311751",
    "pr_number": 3027,
    "pr_file": "docs/api/middleware/keyauth.md",
    "created_at": "2024-06-09T14:23:05+00:00",
    "commented_code": "| SuccessHandler | `fiber.Handler`                          | SuccessHandler defines a function which is executed for a valid key.                                 | `nil`                         |\n | ErrorHandler   | `fiber.ErrorHandler`                     | ErrorHandler defines a function which is executed for an invalid key.                                | `401 Invalid or expired key`  |\n | KeyLookup      | `string`                                 | KeyLookup is a string in the form of \"`<source>:<name>`\" that is used to extract key from the request. | \"header:Authorization\"        |\n+| AdditionalKeyLookups | `[]string` | If additional fallback sources of keys are required, they can be specified here in order of precedence | []string{} (empty) |",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1632311751",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3027,
        "pr_file": "docs/api/middleware/keyauth.md",
        "discussion_id": "1632311751",
        "commented_code": "@@ -219,6 +219,7 @@ curl --header \"Authorization: Bearer my-super-secret-key\"  http://localhost:3000\n | SuccessHandler | `fiber.Handler`                          | SuccessHandler defines a function which is executed for a valid key.                                 | `nil`                         |\n | ErrorHandler   | `fiber.ErrorHandler`                     | ErrorHandler defines a function which is executed for an invalid key.                                | `401 Invalid or expired key`  |\n | KeyLookup      | `string`                                 | KeyLookup is a string in the form of \"`<source>:<name>`\" that is used to extract key from the request. | \"header:Authorization\"        |\n+| AdditionalKeyLookups | `[]string` | If additional fallback sources of keys are required, they can be specified here in order of precedence | []string{} (empty) |",
        "comment_created_at": "2024-06-09T14:23:05+00:00",
        "comment_author": "gaby",
        "comment_body": "I'd probably name this `ExtraKeyLookup`, `ExtraKeyLookups`,  or something like that?",
        "pr_file_module": null
      },
      {
        "comment_id": "1632356652",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3027,
        "pr_file": "docs/api/middleware/keyauth.md",
        "discussion_id": "1632311751",
        "commented_code": "@@ -219,6 +219,7 @@ curl --header \"Authorization: Bearer my-super-secret-key\"  http://localhost:3000\n | SuccessHandler | `fiber.Handler`                          | SuccessHandler defines a function which is executed for a valid key.                                 | `nil`                         |\n | ErrorHandler   | `fiber.ErrorHandler`                     | ErrorHandler defines a function which is executed for an invalid key.                                | `401 Invalid or expired key`  |\n | KeyLookup      | `string`                                 | KeyLookup is a string in the form of \"`<source>:<name>`\" that is used to extract key from the request. | \"header:Authorization\"        |\n+| AdditionalKeyLookups | `[]string` | If additional fallback sources of keys are required, they can be specified here in order of precedence | []string{} (empty) |",
        "comment_created_at": "2024-06-09T17:27:48+00:00",
        "comment_author": "dave-gray101",
        "comment_body": "`FallbackKeyLookups` was the best I could come up with - indicates clearly that they are used _after_ `KeyLookup` in all cases. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1435709488",
    "pr_number": 2509,
    "pr_file": "docs/api/middleware/probechecker.md",
    "created_at": "2023-12-23T21:19:48+00:00",
    "commented_code": "+---\n+id: probecheker\n+title: probecheker\n+---\n+\n+Liveness and readiness probes middleware for [Fiber](https://github.com/gofiber/fiber) that provides two endpoints for checking the health and ready state of any HTTP application.\n+\n+The endpoint values default to `/livez` for liveness and `/readyz` for readiness. Both functions are optional, the liveness endpoint will return `true` right when the server is up and running but the readiness endpoint will not answer any requests if an `IsReady` function isn't provided. \n+\n+The HTTP status returned to the containerized environment are: 200 OK if the checker function returns true and 503 Service Unavailable if the checker function returns false.\n+\n+## Signatures\n+\n+```go\n+func New() fiber.Handler\n+```\n+\n+## Examples\n+\n+Import the middleware package that is part of the Fiber web framework\n+\n+```go\n+import (\n+  \"github.com/gofiber/fiber/v2\"\n+  \"github.com/gofiber/fiber/v2/middleware/probechecker\"\n+)\n+```\n+\n+After you initiate your Fiber app, you can use the following possibilities:\n+\n+```go\n+// Initializing with default config\n+app.Use(probechecker.New())\n+\n+// Initialize with custom config\n+app.Use(\n+    probechecker.New(Config{\n+        IsLive: func(c *fiber.Ctx) bool {\n+            return true\n+        },\n+        IsLiveEndpoint: \"/live\",\n+\t\tIsReady: func (c *fiber.Ctx) bool {\n+            return serviceA.Ready() && serviceB.Ready() && ...\n+        },\n+        IsReadyEndpoint: \"/ready\",\n+}))\n+\n+```\n+\n+## Config\n+\n+```go\n+// Config is the config struct for the probechecker middleware\n+type Config struct {\n+    // Next defines a function to skip this middleware when returned true.\n+    //\n+    // Optional. Default: nil\n+    Next func(c *fiber.Ctx) bool\n+\n+    // Config for liveness probe of the container engine being used\n+    //\n+    // Optional. Default: func(c *Ctx) bool { return true }\n+    IsLive ProbeChecker\n+\n+    // HTTP endpoint of the liveness probe\n+    //\n+    // Optional. Default: /livez\n+    IsLiveEndpoint string",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1435709488",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2509,
        "pr_file": "docs/api/middleware/probechecker.md",
        "discussion_id": "1435709488",
        "commented_code": "@@ -0,0 +1,98 @@\n+---\n+id: probecheker\n+title: probecheker\n+---\n+\n+Liveness and readiness probes middleware for [Fiber](https://github.com/gofiber/fiber) that provides two endpoints for checking the health and ready state of any HTTP application.\n+\n+The endpoint values default to `/livez` for liveness and `/readyz` for readiness. Both functions are optional, the liveness endpoint will return `true` right when the server is up and running but the readiness endpoint will not answer any requests if an `IsReady` function isn't provided. \n+\n+The HTTP status returned to the containerized environment are: 200 OK if the checker function returns true and 503 Service Unavailable if the checker function returns false.\n+\n+## Signatures\n+\n+```go\n+func New() fiber.Handler\n+```\n+\n+## Examples\n+\n+Import the middleware package that is part of the Fiber web framework\n+\n+```go\n+import (\n+  \"github.com/gofiber/fiber/v2\"\n+  \"github.com/gofiber/fiber/v2/middleware/probechecker\"\n+)\n+```\n+\n+After you initiate your Fiber app, you can use the following possibilities:\n+\n+```go\n+// Initializing with default config\n+app.Use(probechecker.New())\n+\n+// Initialize with custom config\n+app.Use(\n+    probechecker.New(Config{\n+        IsLive: func(c *fiber.Ctx) bool {\n+            return true\n+        },\n+        IsLiveEndpoint: \"/live\",\n+\t\tIsReady: func (c *fiber.Ctx) bool {\n+            return serviceA.Ready() && serviceB.Ready() && ...\n+        },\n+        IsReadyEndpoint: \"/ready\",\n+}))\n+\n+```\n+\n+## Config\n+\n+```go\n+// Config is the config struct for the probechecker middleware\n+type Config struct {\n+    // Next defines a function to skip this middleware when returned true.\n+    //\n+    // Optional. Default: nil\n+    Next func(c *fiber.Ctx) bool\n+\n+    // Config for liveness probe of the container engine being used\n+    //\n+    // Optional. Default: func(c *Ctx) bool { return true }\n+    IsLive ProbeChecker\n+\n+    // HTTP endpoint of the liveness probe\n+    //\n+    // Optional. Default: /livez\n+    IsLiveEndpoint string",
        "comment_created_at": "2023-12-23T21:19:48+00:00",
        "comment_author": "gaby",
        "comment_body": "This should be \"LivenessEndpoint\"",
        "pr_file_module": null
      },
      {
        "comment_id": "1435801188",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2509,
        "pr_file": "docs/api/middleware/probechecker.md",
        "discussion_id": "1435709488",
        "commented_code": "@@ -0,0 +1,98 @@\n+---\n+id: probecheker\n+title: probecheker\n+---\n+\n+Liveness and readiness probes middleware for [Fiber](https://github.com/gofiber/fiber) that provides two endpoints for checking the health and ready state of any HTTP application.\n+\n+The endpoint values default to `/livez` for liveness and `/readyz` for readiness. Both functions are optional, the liveness endpoint will return `true` right when the server is up and running but the readiness endpoint will not answer any requests if an `IsReady` function isn't provided. \n+\n+The HTTP status returned to the containerized environment are: 200 OK if the checker function returns true and 503 Service Unavailable if the checker function returns false.\n+\n+## Signatures\n+\n+```go\n+func New() fiber.Handler\n+```\n+\n+## Examples\n+\n+Import the middleware package that is part of the Fiber web framework\n+\n+```go\n+import (\n+  \"github.com/gofiber/fiber/v2\"\n+  \"github.com/gofiber/fiber/v2/middleware/probechecker\"\n+)\n+```\n+\n+After you initiate your Fiber app, you can use the following possibilities:\n+\n+```go\n+// Initializing with default config\n+app.Use(probechecker.New())\n+\n+// Initialize with custom config\n+app.Use(\n+    probechecker.New(Config{\n+        IsLive: func(c *fiber.Ctx) bool {\n+            return true\n+        },\n+        IsLiveEndpoint: \"/live\",\n+\t\tIsReady: func (c *fiber.Ctx) bool {\n+            return serviceA.Ready() && serviceB.Ready() && ...\n+        },\n+        IsReadyEndpoint: \"/ready\",\n+}))\n+\n+```\n+\n+## Config\n+\n+```go\n+// Config is the config struct for the probechecker middleware\n+type Config struct {\n+    // Next defines a function to skip this middleware when returned true.\n+    //\n+    // Optional. Default: nil\n+    Next func(c *fiber.Ctx) bool\n+\n+    // Config for liveness probe of the container engine being used\n+    //\n+    // Optional. Default: func(c *Ctx) bool { return true }\n+    IsLive ProbeChecker\n+\n+    // HTTP endpoint of the liveness probe\n+    //\n+    // Optional. Default: /livez\n+    IsLiveEndpoint string",
        "comment_created_at": "2023-12-24T10:31:33+00:00",
        "comment_author": "efectn",
        "comment_body": "> This should be \"LivenessEndpoint\"\r\n\r\nYou mean renaming config property?",
        "pr_file_module": null
      },
      {
        "comment_id": "1435831509",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2509,
        "pr_file": "docs/api/middleware/probechecker.md",
        "discussion_id": "1435709488",
        "commented_code": "@@ -0,0 +1,98 @@\n+---\n+id: probecheker\n+title: probecheker\n+---\n+\n+Liveness and readiness probes middleware for [Fiber](https://github.com/gofiber/fiber) that provides two endpoints for checking the health and ready state of any HTTP application.\n+\n+The endpoint values default to `/livez` for liveness and `/readyz` for readiness. Both functions are optional, the liveness endpoint will return `true` right when the server is up and running but the readiness endpoint will not answer any requests if an `IsReady` function isn't provided. \n+\n+The HTTP status returned to the containerized environment are: 200 OK if the checker function returns true and 503 Service Unavailable if the checker function returns false.\n+\n+## Signatures\n+\n+```go\n+func New() fiber.Handler\n+```\n+\n+## Examples\n+\n+Import the middleware package that is part of the Fiber web framework\n+\n+```go\n+import (\n+  \"github.com/gofiber/fiber/v2\"\n+  \"github.com/gofiber/fiber/v2/middleware/probechecker\"\n+)\n+```\n+\n+After you initiate your Fiber app, you can use the following possibilities:\n+\n+```go\n+// Initializing with default config\n+app.Use(probechecker.New())\n+\n+// Initialize with custom config\n+app.Use(\n+    probechecker.New(Config{\n+        IsLive: func(c *fiber.Ctx) bool {\n+            return true\n+        },\n+        IsLiveEndpoint: \"/live\",\n+\t\tIsReady: func (c *fiber.Ctx) bool {\n+            return serviceA.Ready() && serviceB.Ready() && ...\n+        },\n+        IsReadyEndpoint: \"/ready\",\n+}))\n+\n+```\n+\n+## Config\n+\n+```go\n+// Config is the config struct for the probechecker middleware\n+type Config struct {\n+    // Next defines a function to skip this middleware when returned true.\n+    //\n+    // Optional. Default: nil\n+    Next func(c *fiber.Ctx) bool\n+\n+    // Config for liveness probe of the container engine being used\n+    //\n+    // Optional. Default: func(c *Ctx) bool { return true }\n+    IsLive ProbeChecker\n+\n+    // HTTP endpoint of the liveness probe\n+    //\n+    // Optional. Default: /livez\n+    IsLiveEndpoint string",
        "comment_created_at": "2023-12-24T14:06:32+00:00",
        "comment_author": "gaby",
        "comment_body": "Yes",
        "pr_file_module": null
      },
      {
        "comment_id": "1435844398",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2509,
        "pr_file": "docs/api/middleware/probechecker.md",
        "discussion_id": "1435709488",
        "commented_code": "@@ -0,0 +1,98 @@\n+---\n+id: probecheker\n+title: probecheker\n+---\n+\n+Liveness and readiness probes middleware for [Fiber](https://github.com/gofiber/fiber) that provides two endpoints for checking the health and ready state of any HTTP application.\n+\n+The endpoint values default to `/livez` for liveness and `/readyz` for readiness. Both functions are optional, the liveness endpoint will return `true` right when the server is up and running but the readiness endpoint will not answer any requests if an `IsReady` function isn't provided. \n+\n+The HTTP status returned to the containerized environment are: 200 OK if the checker function returns true and 503 Service Unavailable if the checker function returns false.\n+\n+## Signatures\n+\n+```go\n+func New() fiber.Handler\n+```\n+\n+## Examples\n+\n+Import the middleware package that is part of the Fiber web framework\n+\n+```go\n+import (\n+  \"github.com/gofiber/fiber/v2\"\n+  \"github.com/gofiber/fiber/v2/middleware/probechecker\"\n+)\n+```\n+\n+After you initiate your Fiber app, you can use the following possibilities:\n+\n+```go\n+// Initializing with default config\n+app.Use(probechecker.New())\n+\n+// Initialize with custom config\n+app.Use(\n+    probechecker.New(Config{\n+        IsLive: func(c *fiber.Ctx) bool {\n+            return true\n+        },\n+        IsLiveEndpoint: \"/live\",\n+\t\tIsReady: func (c *fiber.Ctx) bool {\n+            return serviceA.Ready() && serviceB.Ready() && ...\n+        },\n+        IsReadyEndpoint: \"/ready\",\n+}))\n+\n+```\n+\n+## Config\n+\n+```go\n+// Config is the config struct for the probechecker middleware\n+type Config struct {\n+    // Next defines a function to skip this middleware when returned true.\n+    //\n+    // Optional. Default: nil\n+    Next func(c *fiber.Ctx) bool\n+\n+    // Config for liveness probe of the container engine being used\n+    //\n+    // Optional. Default: func(c *Ctx) bool { return true }\n+    IsLive ProbeChecker\n+\n+    // HTTP endpoint of the liveness probe\n+    //\n+    // Optional. Default: /livez\n+    IsLiveEndpoint string",
        "comment_created_at": "2023-12-24T15:24:36+00:00",
        "comment_author": "gaby",
        "comment_body": "That way its consistent internally and public",
        "pr_file_module": null
      }
    ]
  }
]