[
  {
    "discussion_id": "1838027321",
    "pr_number": 3201,
    "pr_file": "listen.go",
    "created_at": "2024-11-12T12:34:48+00:00",
    "commented_code": "// Attach the tlsHandler to the config\n \t\tapp.SetTLSHandler(tlsHandler)\n+\t} else if cfg.AutoCertManager != nil {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1838027321",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3201,
        "pr_file": "listen.go",
        "discussion_id": "1838027321",
        "commented_code": "@@ -176,6 +184,11 @@ func (app *App) Listen(addr string, config ...ListenConfig) error {\n \n \t\t// Attach the tlsHandler to the config\n \t\tapp.SetTLSHandler(tlsHandler)\n+\t} else if cfg.AutoCertManager != nil {",
        "comment_created_at": "2024-11-12T12:34:48+00:00",
        "comment_author": "gaby",
        "comment_body": "This should use TLSv1.2 min.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1432735497",
    "pr_number": 1986,
    "pr_file": "client/client.go",
    "created_at": "2023-12-20T13:46:32+00:00",
    "commented_code": "+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"crypto/x509\"\n+\t\"encoding/json\"\n+\t\"encoding/xml\"\n+\t\"fmt\"\n+\t\"io\"\n+\turlPkg \"net/url\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"sort\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3/log\"\n+\t\"github.com/gofiber/utils/v2\"\n+\n+\t\"github.com/valyala/fasthttp\"\n+)\n+\n+// Define the logger interface so that users can\n+// use different log implements to output logs.\n+type Logger interface {\n+\t// The log with error level\n+\tErrorf(format string, v ...any)\n+\n+\t// The log with warn level\n+\tWarnf(format string, v ...any)\n+\n+\t// The log with info level\n+\tInfof(format string, v ...any)\n+\n+\t// The log with debug level\n+\tDebugf(format string, v ...any)\n+}\n+\n+var _ (Logger) = (*disableLogger)(nil)\n+\n+// Implement a Logger interface.\n+// All logs are turned off by default.\n+type disableLogger struct{}\n+\n+func (*disableLogger) Errorf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Warnf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Infof(_ string, _ ...any) {}\n+\n+func (*disableLogger) Debugf(_ string, _ ...any) {}\n+\n+// The Client is used to create a Fiber Client with\n+// client-level settings that apply to all requests\n+// raise from the client.\n+//\n+// Fiber Client also provides an option to override\n+// or merge most of the client settings at the request.\n+type Client struct {\n+\tmu sync.RWMutex\n+\n+\tbaseURL   string\n+\tuserAgent string\n+\treferer   string\n+\theader    *Header\n+\tparams    *QueryParam\n+\tcookies   *Cookie\n+\tpath      *PathParam\n+\n+\tdebug  bool\n+\tlogger Logger\n+\n+\ttimeout time.Duration\n+\n+\t// user defined request hooks\n+\tuserRequestHooks []RequestHook\n+\n+\t// client package defined request hooks\n+\tbuiltinRequestHooks []RequestHook\n+\n+\t// user defined response hooks\n+\tuserResponseHooks []ResponseHook\n+\n+\t// client package defined response hooks\n+\tbuiltinResponseHooks []ResponseHook\n+\n+\tjsonMarshal   utils.JSONMarshal\n+\tjsonUnmarshal utils.JSONUnmarshal\n+\txmlMarshal    utils.XMLMarshal\n+\txmlUnmarshal  utils.XMLUnmarshal\n+\n+\tcookieJar *CookieJar\n+\n+\t// tls config\n+\ttlsConfig *tls.Config\n+\n+\t// proxy\n+\tproxyURL string\n+\n+\t// retry\n+\tretryConfig *RetryConfig\n+}\n+\n+// R raise a request from the client.\n+func (c *Client) R() *Request {\n+\treturn AcquireRequest().SetClient(c)\n+}\n+\n+// Request returns user-defined request hooks.\n+func (c *Client) RequestHook() []RequestHook {\n+\treturn c.userRequestHooks\n+}\n+\n+// Add user-defined request hooks.\n+func (c *Client) AddRequestHook(h ...RequestHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userRequestHooks = append(c.userRequestHooks, h...)\n+\treturn c\n+}\n+\n+// ResponseHook return user-define response hooks.\n+func (c *Client) ResponseHook() []ResponseHook {\n+\treturn c.userResponseHooks\n+}\n+\n+// Add user-defined response hooks.\n+func (c *Client) AddResponseHook(h ...ResponseHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userResponseHooks = append(c.userResponseHooks, h...)\n+\treturn c\n+}\n+\n+// JSONMarshal returns json marshal function in Core.\n+func (c *Client) JSONMarshal() utils.JSONMarshal {\n+\treturn c.jsonMarshal\n+}\n+\n+// Set json encoder.\n+func (c *Client) SetJSONMarshal(f utils.JSONMarshal) *Client {\n+\tc.jsonMarshal = f\n+\treturn c\n+}\n+\n+// JSONUnmarshal returns json unmarshal function in Core.\n+func (c *Client) JSONUnmarshal() utils.JSONUnmarshal {\n+\treturn c.jsonUnmarshal\n+}\n+\n+// Set json decoder.\n+func (c *Client) SetJSONUnmarshal(f utils.JSONUnmarshal) *Client {\n+\tc.jsonUnmarshal = f\n+\treturn c\n+}\n+\n+// XMLMarshal returns xml marshal function in Core.\n+func (c *Client) XMLMarshal() utils.XMLMarshal {\n+\treturn c.xmlMarshal\n+}\n+\n+// Set xml encoder.\n+func (c *Client) SetXMLMarshal(f utils.XMLMarshal) *Client {\n+\tc.xmlMarshal = f\n+\treturn c\n+}\n+\n+// XMLUnmarshal returns xml unmarshal function in Core.\n+func (c *Client) XMLUnmarshal() utils.XMLUnmarshal {\n+\treturn c.xmlUnmarshal\n+}\n+\n+// Set xml decoder.\n+func (c *Client) SetXMLUnmarshal(f utils.XMLUnmarshal) *Client {\n+\tc.xmlUnmarshal = f\n+\treturn c\n+}\n+\n+// TLSConfig returns tlsConfig in client.\n+// If client don't have tlsConfig, this function will init it.\n+func (c *Client) TLSConfig() *tls.Config {\n+\tif c.tlsConfig == nil {\n+\t\tc.tlsConfig = &tls.Config{\n+\t\t\tMinVersion: tls.VersionTLS12,\n+\t\t}\n+\t}\n+\n+\treturn c.tlsConfig\n+}\n+\n+// SetTLSConfig sets tlsConfig in client.\n+func (c *Client) SetTLSConfig(config *tls.Config) *Client {\n+\tc.tlsConfig = config\n+\treturn c\n+}\n+\n+// SetCertificates method sets client certificates into client.\n+func (c *Client) SetCertificates(certs ...tls.Certificate) *Client {\n+\tconfig := c.TLSConfig()\n+\tconfig.Certificates = append(config.Certificates, certs...)",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1432735497",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 1986,
        "pr_file": "client/client.go",
        "discussion_id": "1432735497",
        "commented_code": "@@ -0,0 +1,768 @@\n+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"crypto/x509\"\n+\t\"encoding/json\"\n+\t\"encoding/xml\"\n+\t\"fmt\"\n+\t\"io\"\n+\turlPkg \"net/url\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"sort\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3/log\"\n+\t\"github.com/gofiber/utils/v2\"\n+\n+\t\"github.com/valyala/fasthttp\"\n+)\n+\n+// Define the logger interface so that users can\n+// use different log implements to output logs.\n+type Logger interface {\n+\t// The log with error level\n+\tErrorf(format string, v ...any)\n+\n+\t// The log with warn level\n+\tWarnf(format string, v ...any)\n+\n+\t// The log with info level\n+\tInfof(format string, v ...any)\n+\n+\t// The log with debug level\n+\tDebugf(format string, v ...any)\n+}\n+\n+var _ (Logger) = (*disableLogger)(nil)\n+\n+// Implement a Logger interface.\n+// All logs are turned off by default.\n+type disableLogger struct{}\n+\n+func (*disableLogger) Errorf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Warnf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Infof(_ string, _ ...any) {}\n+\n+func (*disableLogger) Debugf(_ string, _ ...any) {}\n+\n+// The Client is used to create a Fiber Client with\n+// client-level settings that apply to all requests\n+// raise from the client.\n+//\n+// Fiber Client also provides an option to override\n+// or merge most of the client settings at the request.\n+type Client struct {\n+\tmu sync.RWMutex\n+\n+\tbaseURL   string\n+\tuserAgent string\n+\treferer   string\n+\theader    *Header\n+\tparams    *QueryParam\n+\tcookies   *Cookie\n+\tpath      *PathParam\n+\n+\tdebug  bool\n+\tlogger Logger\n+\n+\ttimeout time.Duration\n+\n+\t// user defined request hooks\n+\tuserRequestHooks []RequestHook\n+\n+\t// client package defined request hooks\n+\tbuiltinRequestHooks []RequestHook\n+\n+\t// user defined response hooks\n+\tuserResponseHooks []ResponseHook\n+\n+\t// client package defined response hooks\n+\tbuiltinResponseHooks []ResponseHook\n+\n+\tjsonMarshal   utils.JSONMarshal\n+\tjsonUnmarshal utils.JSONUnmarshal\n+\txmlMarshal    utils.XMLMarshal\n+\txmlUnmarshal  utils.XMLUnmarshal\n+\n+\tcookieJar *CookieJar\n+\n+\t// tls config\n+\ttlsConfig *tls.Config\n+\n+\t// proxy\n+\tproxyURL string\n+\n+\t// retry\n+\tretryConfig *RetryConfig\n+}\n+\n+// R raise a request from the client.\n+func (c *Client) R() *Request {\n+\treturn AcquireRequest().SetClient(c)\n+}\n+\n+// Request returns user-defined request hooks.\n+func (c *Client) RequestHook() []RequestHook {\n+\treturn c.userRequestHooks\n+}\n+\n+// Add user-defined request hooks.\n+func (c *Client) AddRequestHook(h ...RequestHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userRequestHooks = append(c.userRequestHooks, h...)\n+\treturn c\n+}\n+\n+// ResponseHook return user-define response hooks.\n+func (c *Client) ResponseHook() []ResponseHook {\n+\treturn c.userResponseHooks\n+}\n+\n+// Add user-defined response hooks.\n+func (c *Client) AddResponseHook(h ...ResponseHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userResponseHooks = append(c.userResponseHooks, h...)\n+\treturn c\n+}\n+\n+// JSONMarshal returns json marshal function in Core.\n+func (c *Client) JSONMarshal() utils.JSONMarshal {\n+\treturn c.jsonMarshal\n+}\n+\n+// Set json encoder.\n+func (c *Client) SetJSONMarshal(f utils.JSONMarshal) *Client {\n+\tc.jsonMarshal = f\n+\treturn c\n+}\n+\n+// JSONUnmarshal returns json unmarshal function in Core.\n+func (c *Client) JSONUnmarshal() utils.JSONUnmarshal {\n+\treturn c.jsonUnmarshal\n+}\n+\n+// Set json decoder.\n+func (c *Client) SetJSONUnmarshal(f utils.JSONUnmarshal) *Client {\n+\tc.jsonUnmarshal = f\n+\treturn c\n+}\n+\n+// XMLMarshal returns xml marshal function in Core.\n+func (c *Client) XMLMarshal() utils.XMLMarshal {\n+\treturn c.xmlMarshal\n+}\n+\n+// Set xml encoder.\n+func (c *Client) SetXMLMarshal(f utils.XMLMarshal) *Client {\n+\tc.xmlMarshal = f\n+\treturn c\n+}\n+\n+// XMLUnmarshal returns xml unmarshal function in Core.\n+func (c *Client) XMLUnmarshal() utils.XMLUnmarshal {\n+\treturn c.xmlUnmarshal\n+}\n+\n+// Set xml decoder.\n+func (c *Client) SetXMLUnmarshal(f utils.XMLUnmarshal) *Client {\n+\tc.xmlUnmarshal = f\n+\treturn c\n+}\n+\n+// TLSConfig returns tlsConfig in client.\n+// If client don't have tlsConfig, this function will init it.\n+func (c *Client) TLSConfig() *tls.Config {\n+\tif c.tlsConfig == nil {\n+\t\tc.tlsConfig = &tls.Config{\n+\t\t\tMinVersion: tls.VersionTLS12,\n+\t\t}\n+\t}\n+\n+\treturn c.tlsConfig\n+}\n+\n+// SetTLSConfig sets tlsConfig in client.\n+func (c *Client) SetTLSConfig(config *tls.Config) *Client {\n+\tc.tlsConfig = config\n+\treturn c\n+}\n+\n+// SetCertificates method sets client certificates into client.\n+func (c *Client) SetCertificates(certs ...tls.Certificate) *Client {\n+\tconfig := c.TLSConfig()\n+\tconfig.Certificates = append(config.Certificates, certs...)",
        "comment_created_at": "2023-12-20T13:46:32+00:00",
        "comment_author": "gaby",
        "comment_body": "Does this enforce ClientCert Auth? We should add an option for setting ClientAuth type https://pkg.go.dev/crypto/tls#ClientAuthType",
        "pr_file_module": null
      },
      {
        "comment_id": "1460991434",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 1986,
        "pr_file": "client/client.go",
        "discussion_id": "1432735497",
        "commented_code": "@@ -0,0 +1,768 @@\n+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"crypto/x509\"\n+\t\"encoding/json\"\n+\t\"encoding/xml\"\n+\t\"fmt\"\n+\t\"io\"\n+\turlPkg \"net/url\"\n+\t\"os\"\n+\t\"path/filepath\"\n+\t\"sort\"\n+\t\"sync\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3/log\"\n+\t\"github.com/gofiber/utils/v2\"\n+\n+\t\"github.com/valyala/fasthttp\"\n+)\n+\n+// Define the logger interface so that users can\n+// use different log implements to output logs.\n+type Logger interface {\n+\t// The log with error level\n+\tErrorf(format string, v ...any)\n+\n+\t// The log with warn level\n+\tWarnf(format string, v ...any)\n+\n+\t// The log with info level\n+\tInfof(format string, v ...any)\n+\n+\t// The log with debug level\n+\tDebugf(format string, v ...any)\n+}\n+\n+var _ (Logger) = (*disableLogger)(nil)\n+\n+// Implement a Logger interface.\n+// All logs are turned off by default.\n+type disableLogger struct{}\n+\n+func (*disableLogger) Errorf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Warnf(_ string, _ ...any) {}\n+\n+func (*disableLogger) Infof(_ string, _ ...any) {}\n+\n+func (*disableLogger) Debugf(_ string, _ ...any) {}\n+\n+// The Client is used to create a Fiber Client with\n+// client-level settings that apply to all requests\n+// raise from the client.\n+//\n+// Fiber Client also provides an option to override\n+// or merge most of the client settings at the request.\n+type Client struct {\n+\tmu sync.RWMutex\n+\n+\tbaseURL   string\n+\tuserAgent string\n+\treferer   string\n+\theader    *Header\n+\tparams    *QueryParam\n+\tcookies   *Cookie\n+\tpath      *PathParam\n+\n+\tdebug  bool\n+\tlogger Logger\n+\n+\ttimeout time.Duration\n+\n+\t// user defined request hooks\n+\tuserRequestHooks []RequestHook\n+\n+\t// client package defined request hooks\n+\tbuiltinRequestHooks []RequestHook\n+\n+\t// user defined response hooks\n+\tuserResponseHooks []ResponseHook\n+\n+\t// client package defined response hooks\n+\tbuiltinResponseHooks []ResponseHook\n+\n+\tjsonMarshal   utils.JSONMarshal\n+\tjsonUnmarshal utils.JSONUnmarshal\n+\txmlMarshal    utils.XMLMarshal\n+\txmlUnmarshal  utils.XMLUnmarshal\n+\n+\tcookieJar *CookieJar\n+\n+\t// tls config\n+\ttlsConfig *tls.Config\n+\n+\t// proxy\n+\tproxyURL string\n+\n+\t// retry\n+\tretryConfig *RetryConfig\n+}\n+\n+// R raise a request from the client.\n+func (c *Client) R() *Request {\n+\treturn AcquireRequest().SetClient(c)\n+}\n+\n+// Request returns user-defined request hooks.\n+func (c *Client) RequestHook() []RequestHook {\n+\treturn c.userRequestHooks\n+}\n+\n+// Add user-defined request hooks.\n+func (c *Client) AddRequestHook(h ...RequestHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userRequestHooks = append(c.userRequestHooks, h...)\n+\treturn c\n+}\n+\n+// ResponseHook return user-define response hooks.\n+func (c *Client) ResponseHook() []ResponseHook {\n+\treturn c.userResponseHooks\n+}\n+\n+// Add user-defined response hooks.\n+func (c *Client) AddResponseHook(h ...ResponseHook) *Client {\n+\tc.mu.Lock()\n+\tdefer c.mu.Unlock()\n+\n+\tc.userResponseHooks = append(c.userResponseHooks, h...)\n+\treturn c\n+}\n+\n+// JSONMarshal returns json marshal function in Core.\n+func (c *Client) JSONMarshal() utils.JSONMarshal {\n+\treturn c.jsonMarshal\n+}\n+\n+// Set json encoder.\n+func (c *Client) SetJSONMarshal(f utils.JSONMarshal) *Client {\n+\tc.jsonMarshal = f\n+\treturn c\n+}\n+\n+// JSONUnmarshal returns json unmarshal function in Core.\n+func (c *Client) JSONUnmarshal() utils.JSONUnmarshal {\n+\treturn c.jsonUnmarshal\n+}\n+\n+// Set json decoder.\n+func (c *Client) SetJSONUnmarshal(f utils.JSONUnmarshal) *Client {\n+\tc.jsonUnmarshal = f\n+\treturn c\n+}\n+\n+// XMLMarshal returns xml marshal function in Core.\n+func (c *Client) XMLMarshal() utils.XMLMarshal {\n+\treturn c.xmlMarshal\n+}\n+\n+// Set xml encoder.\n+func (c *Client) SetXMLMarshal(f utils.XMLMarshal) *Client {\n+\tc.xmlMarshal = f\n+\treturn c\n+}\n+\n+// XMLUnmarshal returns xml unmarshal function in Core.\n+func (c *Client) XMLUnmarshal() utils.XMLUnmarshal {\n+\treturn c.xmlUnmarshal\n+}\n+\n+// Set xml decoder.\n+func (c *Client) SetXMLUnmarshal(f utils.XMLUnmarshal) *Client {\n+\tc.xmlUnmarshal = f\n+\treturn c\n+}\n+\n+// TLSConfig returns tlsConfig in client.\n+// If client don't have tlsConfig, this function will init it.\n+func (c *Client) TLSConfig() *tls.Config {\n+\tif c.tlsConfig == nil {\n+\t\tc.tlsConfig = &tls.Config{\n+\t\t\tMinVersion: tls.VersionTLS12,\n+\t\t}\n+\t}\n+\n+\treturn c.tlsConfig\n+}\n+\n+// SetTLSConfig sets tlsConfig in client.\n+func (c *Client) SetTLSConfig(config *tls.Config) *Client {\n+\tc.tlsConfig = config\n+\treturn c\n+}\n+\n+// SetCertificates method sets client certificates into client.\n+func (c *Client) SetCertificates(certs ...tls.Certificate) *Client {\n+\tconfig := c.TLSConfig()\n+\tconfig.Certificates = append(config.Certificates, certs...)",
        "comment_created_at": "2024-01-21T16:55:23+00:00",
        "comment_author": "efectn",
        "comment_body": "> Does this enforce ClientCert Auth? We should add an option for setting ClientAuth type https://pkg.go.dev/crypto/tls#ClientAuthType\r\n\r\nIt can be set via `TLSConfig()` or `SetTLSConfig(config *tls.Config)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1504896822",
    "pr_number": 1986,
    "pr_file": "client/client_test.go",
    "created_at": "2024-03-02T11:43:51+00:00",
    "commented_code": "+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n+\t\"io\"\n+\t\"net\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3\"\n+\t\"github.com/gofiber/fiber/v3/addon/retry\"\n+\t\"github.com/gofiber/fiber/v3/internal/tlstest\"\n+\t\"github.com/gofiber/utils/v2\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func startTestServerWithPort(t *testing.T, beforeStarting func(app *fiber.App)) (*fiber.App, string) {\n+\tt.Helper()\n+\n+\tapp := fiber.New()\n+\n+\tif beforeStarting != nil {\n+\t\tbeforeStarting(app)\n+\t}\n+\n+\taddrChan := make(chan string)\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listen(\":0\", fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t\tListenerAddrFunc: func(addr net.Addr) {\n+\t\t\t\taddrChan <- addr.String()\n+\t\t\t},\n+\t\t}))\n+\t}()\n+\n+\taddr := <-addrChan\n+\treturn app, addr\n+}\n+\n+func Test_Client_Add_Hook(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add request hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 1)\n+\n+\t\tclient.AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 3)\n+\t})\n+\n+\tt.Run(\"add response hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 1)\n+\n+\t\tclient.AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 3)\n+\t})\n+}\n+\n+func Test_Client_Marshal(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set json marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.JSONMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set json unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty json\")\n+\t\t\t})\n+\n+\t\terr := client.JSONUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty json\"), err)\n+\t})\n+\n+\tt.Run(\"set xml marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.XMLMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set xml unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty xml\")\n+\t\t\t})\n+\n+\t\terr := client.XMLUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty xml\"), err)\n+\t})\n+}\n+\n+func Test_Client_SetBaseURL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tclient := NewClient().SetBaseURL(\"http://example.com\")\n+\n+\trequire.Equal(t, \"http://example.com\", client.BaseURL())\n+}\n+\n+func Test_Client_Invalid_URL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname())\n+\t})\n+\n+\tgo start()\n+\n+\t_, err := NewClient().SetDial(dial).\n+\t\tR().\n+\t\tGet(\"http://example.com\\r\n\\r\nGET /\\r\n\\r\n\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_Unsupported_Protocol(t *testing.T) {\n+\tt.Parallel()\n+\n+\t_, err := NewClient().\n+\t\tR().\n+\t\tGet(\"ftp://example.com\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_ConcurrencyRequests(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\tapp.All(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname() + \" \" + c.Method())\n+\t})\n+\tgo start()\n+\n+\tclient := NewClient().SetDial(dial)\n+\n+\twg := sync.WaitGroup{}\n+\tfor i := 0; i < 5; i++ {\n+\t\tfor _, method := range []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"} {\n+\t\t\twg.Add(1)\n+\t\t\tgo func(m string) {\n+\t\t\t\tdefer wg.Done()\n+\t\t\t\tresp, err := client.Custom(\"http://example.com\", m)\n+\t\t\t\trequire.NoError(t, err)\n+\t\t\t\trequire.Equal(t, \"example.com \"+m, utils.UnsafeString(resp.RawResponse.Body()))\n+\t\t\t}(method)\n+\t\t}\n+\t}\n+\n+\twg.Wait()\n+}\n+\n+func Test_Get(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global get function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client get\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Head(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Head(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global head function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client head\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Post(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Post(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusCreated).\n+\t\t\t\t\tSendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global post function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client post\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Put(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Put(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global put function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client put\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Delete(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Delete(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).\n+\t\t\t\t\tSendString(\"deleted\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global delete function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client delete\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Options(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Options(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).SendString(\"\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global options function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client options\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Patch(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Patch(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global patch function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client patch\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_UserAgent(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Send(c.Request().Header.UserAgent())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"default\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, defaultUserAgent, resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"custom\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tc := NewClient().\n+\t\t\t\tSetUserAgent(\"ua\")\n+\n+\t\t\tresp, err := c.Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"ua\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Header(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").AddHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").SetHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+}\n+\n+func Test_Client_Header_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\tc.Request().Header.VisitAll(func(key, value []byte) {\n+\t\t\tif k := string(key); k == \"K1\" || k == \"K2\" {\n+\t\t\t\t_, _ = c.Write(key)   //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t\t_, _ = c.Write(value) //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t}\n+\t\t})\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetHeader(\"k1\", \"v1\").\n+\t\t\tAddHeader(\"k1\", \"v11\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"k1\": {\"v22\", \"v33\"},\n+\t\t\t}).\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t}).\n+\t\t\tAddHeader(\"k2\", \"v22\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"K1v1K1v11K1v22K1v33K2v2K2v22\")\n+}\n+\n+func Test_Client_Cookie(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set cookie\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookie(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\n+\t\treq.SetCookie(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.SetCookies(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set cookies with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `cookie:\"int\"`\n+\t\t\tCookieString string `cookie:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetCookiesWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.Cookie(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"string\"))\n+\t})\n+\n+\tt.Run(\"del cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.DelCookies(\"foo\")\n+\t\trequire.Equal(t, \"\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_Cookie_With_Server(t *testing.T) {\n+\tt.Parallel()\n+\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\") + c.Cookies(\"k4\"))\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookie(\"k1\", \"v1\").\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t\t\"k3\": \"v3\",\n+\t\t\t\t\"k4\": \"v4\",\n+\t\t\t}).DelCookies(\"k4\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2v3\")\n+}\n+\n+func Test_Client_CookieJar(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t}\n+\n+\tjar := AcquireCookieJar()\n+\tdefer ReleaseCookieJar(jar)\n+\n+\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookieJar(jar)\n+\t}\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_CookieJar_Response(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"without expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k4\",\n+\t\t\t\tValue: \"v4\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 3)\n+\t})\n+\n+\tt.Run(\"with expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:    \"k4\",\n+\t\t\t\tValue:   \"v4\",\n+\t\t\t\tExpires: time.Now().Add(1 * time.Nanosecond),\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 2)\n+\t})\n+\n+\tt.Run(\"override cookie value\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k1\",\n+\t\t\t\tValue: \"v2\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\tfor _, cookie := range jar.getCookiesByHost(\"example.com\") {\n+\t\t\tif string(cookie.Key()) == \"k1\" {\n+\t\t\t\trequire.Equal(t, \"v2\", string(cookie.Value()))\n+\t\t\t}\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Referer(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.Send(c.Request().Header.Referer())\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetReferer(\"http://referer.com\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"http://referer.com\")\n+}\n+\n+func Test_Client_QueryParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").AddParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").SetParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tAddParams(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\ttype args struct {\n+\t\t\tTInt      int\n+\t\t\tTString   string\n+\t\t\tTFloat    float64\n+\t\t\tTBool     bool\n+\t\t\tTSlice    []string\n+\t\t\tTIntSlice []int `param:\"int_slice\"`\n+\t\t}\n+\n+\t\tp := NewClient()\n+\t\tp.SetParamsWithStruct(&args{\n+\t\t\tTInt:      5,\n+\t\t\tTString:   \"string\",\n+\t\t\tTFloat:    3.1,\n+\t\t\tTBool:     true,\n+\t\t\tTSlice:    []string{\"foo\", \"bar\"},\n+\t\t\tTIntSlice: []int{1, 2},\n+\t\t})\n+\n+\t\trequire.Empty(t, p.Param(\"unexport\"))\n+\n+\t\trequire.Len(t, p.Param(\"TInt\"), 1)\n+\t\trequire.Equal(t, \"5\", p.Param(\"TInt\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TString\"), 1)\n+\t\trequire.Equal(t, \"string\", p.Param(\"TString\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TFloat\"), 1)\n+\t\trequire.Equal(t, \"3.1\", p.Param(\"TFloat\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TBool\"), 1)\n+\n+\t\ttslice := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tslice, 2)\n+\t\trequire.Equal(t, \"foo\", tslice[0])\n+\t\trequire.Equal(t, \"bar\", tslice[1])\n+\n+\t\ttint := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tint, 2)\n+\t\trequire.Equal(t, \"foo\", tint[0])\n+\t\trequire.Equal(t, \"bar\", tint[1])\n+\t})\n+\n+\tt.Run(\"del params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t}).DelParams(\"foo\", \"bar\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Empty(t, res)\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Empty(t, res)\n+\t})\n+}\n+\n+func Test_Client_QueryParam_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\t_, _ = c.WriteString(c.Query(\"k1\")) //nolint:errcheck // It is fine to ignore the error here\n+\t\t_, _ = c.WriteString(c.Query(\"k2\")) //nolint:errcheck // It is fine to ignore the error here\n+\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetParam(\"k1\", \"v1\").\n+\t\t\tAddParam(\"k2\", \"v2\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_PathParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set path param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParam(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\n+\t\treq.SetPathParam(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.SetPathParams(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set path params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `path:\"int\"`\n+\t\t\tCookieString string `path:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetPathParamsWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.PathParam(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"string\"))\n+\t})\n+\n+\tt.Run(\"del path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.DelPathParams(\"foo\")\n+\t\trequire.Equal(t, \"\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_PathParam_With_Server(t *testing.T) {\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/test\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"ok\")\n+\t})\n+\n+\tgo start()\n+\n+\tresp, err := NewClient().SetDial(dial).\n+\t\tSetPathParam(\"path\", \"test\").\n+\t\tGet(\"http://example.com/:path\")\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"ok\", resp.String())\n+}\n+\n+func Test_Client_TLS(t *testing.T) {\n+\tt.Parallel()\n+\n+\tserverTLSConf, clientTLSConf, err := tlstest.GetTLSConfigs()\n+\trequire.NoError(t, err)\n+\n+\tln, err := net.Listen(fiber.NetworkTCP4, \"127.0.0.1:0\")\n+\trequire.NoError(t, err)\n+\n+\tln = tls.NewListener(ln, serverTLSConf)\n+\n+\tapp := fiber.New()\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"tls\")\n+\t})\n+\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listener(ln, fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t}))\n+\t}()\n+\n+\tclient := NewClient()\n+\tresp, err := client.SetTLSConfig(clientTLSConf).Get(\"https://\" + ln.Addr().String())\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, clientTLSConf, client.TLSConfig())\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"tls\", resp.String())\n+}",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1509952289",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 1986,
        "pr_file": "client/client_test.go",
        "discussion_id": "1504896822",
        "commented_code": "@@ -0,0 +1,1453 @@\n+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n+\t\"io\"\n+\t\"net\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3\"\n+\t\"github.com/gofiber/fiber/v3/addon/retry\"\n+\t\"github.com/gofiber/fiber/v3/internal/tlstest\"\n+\t\"github.com/gofiber/utils/v2\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func startTestServerWithPort(t *testing.T, beforeStarting func(app *fiber.App)) (*fiber.App, string) {\n+\tt.Helper()\n+\n+\tapp := fiber.New()\n+\n+\tif beforeStarting != nil {\n+\t\tbeforeStarting(app)\n+\t}\n+\n+\taddrChan := make(chan string)\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listen(\":0\", fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t\tListenerAddrFunc: func(addr net.Addr) {\n+\t\t\t\taddrChan <- addr.String()\n+\t\t\t},\n+\t\t}))\n+\t}()\n+\n+\taddr := <-addrChan\n+\treturn app, addr\n+}\n+\n+func Test_Client_Add_Hook(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add request hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 1)\n+\n+\t\tclient.AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 3)\n+\t})\n+\n+\tt.Run(\"add response hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 1)\n+\n+\t\tclient.AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 3)\n+\t})\n+}\n+\n+func Test_Client_Marshal(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set json marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.JSONMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set json unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty json\")\n+\t\t\t})\n+\n+\t\terr := client.JSONUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty json\"), err)\n+\t})\n+\n+\tt.Run(\"set xml marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.XMLMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set xml unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty xml\")\n+\t\t\t})\n+\n+\t\terr := client.XMLUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty xml\"), err)\n+\t})\n+}\n+\n+func Test_Client_SetBaseURL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tclient := NewClient().SetBaseURL(\"http://example.com\")\n+\n+\trequire.Equal(t, \"http://example.com\", client.BaseURL())\n+}\n+\n+func Test_Client_Invalid_URL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname())\n+\t})\n+\n+\tgo start()\n+\n+\t_, err := NewClient().SetDial(dial).\n+\t\tR().\n+\t\tGet(\"http://example.com\\r\\n\\r\\nGET /\\r\\n\\r\\n\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_Unsupported_Protocol(t *testing.T) {\n+\tt.Parallel()\n+\n+\t_, err := NewClient().\n+\t\tR().\n+\t\tGet(\"ftp://example.com\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_ConcurrencyRequests(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\tapp.All(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname() + \" \" + c.Method())\n+\t})\n+\tgo start()\n+\n+\tclient := NewClient().SetDial(dial)\n+\n+\twg := sync.WaitGroup{}\n+\tfor i := 0; i < 5; i++ {\n+\t\tfor _, method := range []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"} {\n+\t\t\twg.Add(1)\n+\t\t\tgo func(m string) {\n+\t\t\t\tdefer wg.Done()\n+\t\t\t\tresp, err := client.Custom(\"http://example.com\", m)\n+\t\t\t\trequire.NoError(t, err)\n+\t\t\t\trequire.Equal(t, \"example.com \"+m, utils.UnsafeString(resp.RawResponse.Body()))\n+\t\t\t}(method)\n+\t\t}\n+\t}\n+\n+\twg.Wait()\n+}\n+\n+func Test_Get(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global get function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client get\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Head(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Head(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global head function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client head\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Post(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Post(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusCreated).\n+\t\t\t\t\tSendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global post function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client post\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Put(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Put(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global put function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client put\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Delete(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Delete(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).\n+\t\t\t\t\tSendString(\"deleted\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global delete function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client delete\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Options(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Options(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).SendString(\"\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global options function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client options\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Patch(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Patch(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global patch function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client patch\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_UserAgent(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Send(c.Request().Header.UserAgent())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"default\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, defaultUserAgent, resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"custom\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tc := NewClient().\n+\t\t\t\tSetUserAgent(\"ua\")\n+\n+\t\t\tresp, err := c.Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"ua\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Header(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").AddHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").SetHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+}\n+\n+func Test_Client_Header_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\tc.Request().Header.VisitAll(func(key, value []byte) {\n+\t\t\tif k := string(key); k == \"K1\" || k == \"K2\" {\n+\t\t\t\t_, _ = c.Write(key)   //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t\t_, _ = c.Write(value) //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t}\n+\t\t})\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetHeader(\"k1\", \"v1\").\n+\t\t\tAddHeader(\"k1\", \"v11\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"k1\": {\"v22\", \"v33\"},\n+\t\t\t}).\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t}).\n+\t\t\tAddHeader(\"k2\", \"v22\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"K1v1K1v11K1v22K1v33K2v2K2v22\")\n+}\n+\n+func Test_Client_Cookie(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set cookie\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookie(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\n+\t\treq.SetCookie(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.SetCookies(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set cookies with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `cookie:\"int\"`\n+\t\t\tCookieString string `cookie:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetCookiesWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.Cookie(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"string\"))\n+\t})\n+\n+\tt.Run(\"del cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.DelCookies(\"foo\")\n+\t\trequire.Equal(t, \"\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_Cookie_With_Server(t *testing.T) {\n+\tt.Parallel()\n+\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\") + c.Cookies(\"k4\"))\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookie(\"k1\", \"v1\").\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t\t\"k3\": \"v3\",\n+\t\t\t\t\"k4\": \"v4\",\n+\t\t\t}).DelCookies(\"k4\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2v3\")\n+}\n+\n+func Test_Client_CookieJar(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t}\n+\n+\tjar := AcquireCookieJar()\n+\tdefer ReleaseCookieJar(jar)\n+\n+\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookieJar(jar)\n+\t}\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_CookieJar_Response(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"without expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k4\",\n+\t\t\t\tValue: \"v4\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 3)\n+\t})\n+\n+\tt.Run(\"with expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:    \"k4\",\n+\t\t\t\tValue:   \"v4\",\n+\t\t\t\tExpires: time.Now().Add(1 * time.Nanosecond),\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 2)\n+\t})\n+\n+\tt.Run(\"override cookie value\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k1\",\n+\t\t\t\tValue: \"v2\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\tfor _, cookie := range jar.getCookiesByHost(\"example.com\") {\n+\t\t\tif string(cookie.Key()) == \"k1\" {\n+\t\t\t\trequire.Equal(t, \"v2\", string(cookie.Value()))\n+\t\t\t}\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Referer(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.Send(c.Request().Header.Referer())\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetReferer(\"http://referer.com\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"http://referer.com\")\n+}\n+\n+func Test_Client_QueryParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").AddParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").SetParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tAddParams(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\ttype args struct {\n+\t\t\tTInt      int\n+\t\t\tTString   string\n+\t\t\tTFloat    float64\n+\t\t\tTBool     bool\n+\t\t\tTSlice    []string\n+\t\t\tTIntSlice []int `param:\"int_slice\"`\n+\t\t}\n+\n+\t\tp := NewClient()\n+\t\tp.SetParamsWithStruct(&args{\n+\t\t\tTInt:      5,\n+\t\t\tTString:   \"string\",\n+\t\t\tTFloat:    3.1,\n+\t\t\tTBool:     true,\n+\t\t\tTSlice:    []string{\"foo\", \"bar\"},\n+\t\t\tTIntSlice: []int{1, 2},\n+\t\t})\n+\n+\t\trequire.Empty(t, p.Param(\"unexport\"))\n+\n+\t\trequire.Len(t, p.Param(\"TInt\"), 1)\n+\t\trequire.Equal(t, \"5\", p.Param(\"TInt\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TString\"), 1)\n+\t\trequire.Equal(t, \"string\", p.Param(\"TString\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TFloat\"), 1)\n+\t\trequire.Equal(t, \"3.1\", p.Param(\"TFloat\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TBool\"), 1)\n+\n+\t\ttslice := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tslice, 2)\n+\t\trequire.Equal(t, \"foo\", tslice[0])\n+\t\trequire.Equal(t, \"bar\", tslice[1])\n+\n+\t\ttint := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tint, 2)\n+\t\trequire.Equal(t, \"foo\", tint[0])\n+\t\trequire.Equal(t, \"bar\", tint[1])\n+\t})\n+\n+\tt.Run(\"del params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t}).DelParams(\"foo\", \"bar\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Empty(t, res)\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Empty(t, res)\n+\t})\n+}\n+\n+func Test_Client_QueryParam_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\t_, _ = c.WriteString(c.Query(\"k1\")) //nolint:errcheck // It is fine to ignore the error here\n+\t\t_, _ = c.WriteString(c.Query(\"k2\")) //nolint:errcheck // It is fine to ignore the error here\n+\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetParam(\"k1\", \"v1\").\n+\t\t\tAddParam(\"k2\", \"v2\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_PathParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set path param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParam(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\n+\t\treq.SetPathParam(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.SetPathParams(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set path params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `path:\"int\"`\n+\t\t\tCookieString string `path:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetPathParamsWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.PathParam(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"string\"))\n+\t})\n+\n+\tt.Run(\"del path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.DelPathParams(\"foo\")\n+\t\trequire.Equal(t, \"\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_PathParam_With_Server(t *testing.T) {\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/test\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"ok\")\n+\t})\n+\n+\tgo start()\n+\n+\tresp, err := NewClient().SetDial(dial).\n+\t\tSetPathParam(\"path\", \"test\").\n+\t\tGet(\"http://example.com/:path\")\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"ok\", resp.String())\n+}\n+\n+func Test_Client_TLS(t *testing.T) {\n+\tt.Parallel()\n+\n+\tserverTLSConf, clientTLSConf, err := tlstest.GetTLSConfigs()\n+\trequire.NoError(t, err)\n+\n+\tln, err := net.Listen(fiber.NetworkTCP4, \"127.0.0.1:0\")\n+\trequire.NoError(t, err)\n+\n+\tln = tls.NewListener(ln, serverTLSConf)\n+\n+\tapp := fiber.New()\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"tls\")\n+\t})\n+\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listener(ln, fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t}))\n+\t}()\n+\n+\tclient := NewClient()\n+\tresp, err := client.SetTLSConfig(clientTLSConf).Get(\"https://\" + ln.Addr().String())\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, clientTLSConf, client.TLSConfig())\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"tls\", resp.String())\n+}",
        "comment_created_at": "2024-03-02T11:43:51+00:00",
        "comment_author": "efectn",
        "comment_body": "There is already Test_Client_TLS_Empty_TLSConfig test",
        "pr_file_module": null
      },
      {
        "comment_id": "1509952683",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 1986,
        "pr_file": "client/client_test.go",
        "discussion_id": "1504896822",
        "commented_code": "@@ -0,0 +1,1453 @@\n+package client\n+\n+import (\n+\t\"context\"\n+\t\"crypto/tls\"\n+\t\"errors\"\n+\t\"io\"\n+\t\"net\"\n+\t\"os\"\n+\t\"reflect\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\t\"github.com/gofiber/fiber/v3\"\n+\t\"github.com/gofiber/fiber/v3/addon/retry\"\n+\t\"github.com/gofiber/fiber/v3/internal/tlstest\"\n+\t\"github.com/gofiber/utils/v2\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func startTestServerWithPort(t *testing.T, beforeStarting func(app *fiber.App)) (*fiber.App, string) {\n+\tt.Helper()\n+\n+\tapp := fiber.New()\n+\n+\tif beforeStarting != nil {\n+\t\tbeforeStarting(app)\n+\t}\n+\n+\taddrChan := make(chan string)\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listen(\":0\", fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t\tListenerAddrFunc: func(addr net.Addr) {\n+\t\t\t\taddrChan <- addr.String()\n+\t\t\t},\n+\t\t}))\n+\t}()\n+\n+\taddr := <-addrChan\n+\treturn app, addr\n+}\n+\n+func Test_Client_Add_Hook(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add request hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 1)\n+\n+\t\tclient.AddRequestHook(func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.RequestHook(), 3)\n+\t})\n+\n+\tt.Run(\"add response hooks\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 1)\n+\n+\t\tclient.AddResponseHook(func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t}, func(_ *Client, _ *Response, _ *Request) error {\n+\t\t\treturn nil\n+\t\t})\n+\n+\t\trequire.Len(t, client.ResponseHook(), 3)\n+\t})\n+}\n+\n+func Test_Client_Marshal(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set json marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.JSONMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set json unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetJSONUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty json\")\n+\t\t\t})\n+\n+\t\terr := client.JSONUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty json\"), err)\n+\t})\n+\n+\tt.Run(\"set xml marshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLMarshal(func(_ any) ([]byte, error) {\n+\t\t\t\treturn []byte(\"hello\"), nil\n+\t\t\t})\n+\t\tval, err := client.XMLMarshal()(nil)\n+\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, []byte(\"hello\"), val)\n+\t})\n+\n+\tt.Run(\"set xml unmarshal\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\tclient := NewClient().\n+\t\t\tSetXMLUnmarshal(func(_ []byte, _ any) error {\n+\t\t\t\treturn errors.New(\"empty xml\")\n+\t\t\t})\n+\n+\t\terr := client.XMLUnmarshal()(nil, nil)\n+\t\trequire.Equal(t, errors.New(\"empty xml\"), err)\n+\t})\n+}\n+\n+func Test_Client_SetBaseURL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tclient := NewClient().SetBaseURL(\"http://example.com\")\n+\n+\trequire.Equal(t, \"http://example.com\", client.BaseURL())\n+}\n+\n+func Test_Client_Invalid_URL(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname())\n+\t})\n+\n+\tgo start()\n+\n+\t_, err := NewClient().SetDial(dial).\n+\t\tR().\n+\t\tGet(\"http://example.com\\r\\n\\r\\nGET /\\r\\n\\r\\n\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_Unsupported_Protocol(t *testing.T) {\n+\tt.Parallel()\n+\n+\t_, err := NewClient().\n+\t\tR().\n+\t\tGet(\"ftp://example.com\")\n+\n+\trequire.ErrorIs(t, err, ErrURLFormat)\n+}\n+\n+func Test_Client_ConcurrencyRequests(t *testing.T) {\n+\tt.Parallel()\n+\n+\tapp, dial, start := createHelperServer(t)\n+\tapp.All(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(c.Hostname() + \" \" + c.Method())\n+\t})\n+\tgo start()\n+\n+\tclient := NewClient().SetDial(dial)\n+\n+\twg := sync.WaitGroup{}\n+\tfor i := 0; i < 5; i++ {\n+\t\tfor _, method := range []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"} {\n+\t\t\twg.Add(1)\n+\t\t\tgo func(m string) {\n+\t\t\t\tdefer wg.Done()\n+\t\t\t\tresp, err := client.Custom(\"http://example.com\", m)\n+\t\t\t\trequire.NoError(t, err)\n+\t\t\t\trequire.Equal(t, \"example.com \"+m, utils.UnsafeString(resp.RawResponse.Body()))\n+\t\t\t}(method)\n+\t\t}\n+\t}\n+\n+\twg.Wait()\n+}\n+\n+func Test_Get(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global get function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client get\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Get(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"0.0.0.0\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Head(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Head(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.Hostname())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global head function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+\n+\tt.Run(\"client head\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tresp, err := NewClient().Head(\"http://\" + addr)\n+\t\trequire.NoError(t, err)\n+\t\trequire.Equal(t, \"\", utils.UnsafeString(resp.RawResponse.Body()))\n+\t})\n+}\n+\n+func Test_Post(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Post(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusCreated).\n+\t\t\t\t\tSendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global post function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client post\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Post(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusCreated, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Put(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Put(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global put function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client put\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Put(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Delete(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Delete(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).\n+\t\t\t\t\tSendString(\"deleted\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global delete function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client delete\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Delete(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Options(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Options(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Status(fiber.StatusNoContent).SendString(\"\")\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global options function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client options\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Options(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusNoContent, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Patch(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Patch(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.SendString(c.FormValue(\"foo\"))\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"global patch function\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\ttime.Sleep(1 * time.Second)\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"client patch\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := NewClient().Patch(\"http://\"+addr, Config{\n+\t\t\t\tFormData: map[string]string{\n+\t\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t},\n+\t\t\t})\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"bar\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_UserAgent(t *testing.T) {\n+\tt.Parallel()\n+\n+\tsetupApp := func() (*fiber.App, string) {\n+\t\tapp, addr := startTestServerWithPort(t, func(app *fiber.App) {\n+\t\t\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\t\t\treturn c.Send(c.Request().Header.UserAgent())\n+\t\t\t})\n+\t\t})\n+\n+\t\treturn app, addr\n+\t}\n+\n+\tt.Run(\"default\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tresp, err := Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, defaultUserAgent, resp.String())\n+\t\t}\n+\t})\n+\n+\tt.Run(\"custom\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\tapp, addr := setupApp()\n+\t\tdefer func() {\n+\t\t\trequire.NoError(t, app.Shutdown())\n+\t\t}()\n+\n+\t\tfor i := 0; i < 5; i++ {\n+\t\t\tc := NewClient().\n+\t\t\t\tSetUserAgent(\"ua\")\n+\n+\t\t\tresp, err := c.Get(\"http://\" + addr)\n+\n+\t\t\trequire.NoError(t, err)\n+\t\t\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\t\t\trequire.Equal(t, \"ua\", resp.String())\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Header(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").AddHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set header\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddHeader(\"foo\", \"bar\").SetHeader(\"foo\", \"fiber\")\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetHeader(\"foo\", \"bar\").\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Header(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Header(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+}\n+\n+func Test_Client_Header_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\tc.Request().Header.VisitAll(func(key, value []byte) {\n+\t\t\tif k := string(key); k == \"K1\" || k == \"K2\" {\n+\t\t\t\t_, _ = c.Write(key)   //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t\t_, _ = c.Write(value) //nolint:errcheck // It is fine to ignore the error here\n+\t\t\t}\n+\t\t})\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetHeader(\"k1\", \"v1\").\n+\t\t\tAddHeader(\"k1\", \"v11\").\n+\t\t\tAddHeaders(map[string][]string{\n+\t\t\t\t\"k1\": {\"v22\", \"v33\"},\n+\t\t\t}).\n+\t\t\tSetHeaders(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t}).\n+\t\t\tAddHeader(\"k2\", \"v22\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"K1v1K1v11K1v22K1v33K2v2K2v22\")\n+}\n+\n+func Test_Client_Cookie(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set cookie\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookie(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\n+\t\treq.SetCookie(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.SetCookies(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set cookies with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `cookie:\"int\"`\n+\t\t\tCookieString string `cookie:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetCookiesWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.Cookie(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"string\"))\n+\t})\n+\n+\tt.Run(\"del cookies\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\n+\t\treq.DelCookies(\"foo\")\n+\t\trequire.Equal(t, \"\", req.Cookie(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.Cookie(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_Cookie_With_Server(t *testing.T) {\n+\tt.Parallel()\n+\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\") + c.Cookies(\"k4\"))\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookie(\"k1\", \"v1\").\n+\t\t\tSetCookies(map[string]string{\n+\t\t\t\t\"k2\": \"v2\",\n+\t\t\t\t\"k3\": \"v3\",\n+\t\t\t\t\"k4\": \"v4\",\n+\t\t\t}).DelCookies(\"k4\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2v3\")\n+}\n+\n+func Test_Client_CookieJar(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\n+\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t}\n+\n+\tjar := AcquireCookieJar()\n+\tdefer ReleaseCookieJar(jar)\n+\n+\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetCookieJar(jar)\n+\t}\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_CookieJar_Response(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"without expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k4\",\n+\t\t\t\tValue: \"v4\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 3)\n+\t})\n+\n+\tt.Run(\"with expiration\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:    \"k4\",\n+\t\t\t\tValue:   \"v4\",\n+\t\t\t\tExpires: time.Now().Add(1 * time.Nanosecond),\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\") + c.Cookies(\"k3\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\t\tjar.SetKeyValue(\"example\", \"k3\", \"v3\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\trequire.Len(t, jar.getCookiesByHost(\"example.com\"), 2)\n+\t})\n+\n+\tt.Run(\"override cookie value\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\thandler := func(c fiber.Ctx) error {\n+\t\t\tc.Cookie(&fiber.Cookie{\n+\t\t\t\tName:  \"k1\",\n+\t\t\t\tValue: \"v2\",\n+\t\t\t})\n+\t\t\treturn c.SendString(\n+\t\t\t\tc.Cookies(\"k1\") + c.Cookies(\"k2\"))\n+\t\t}\n+\n+\t\tjar := AcquireCookieJar()\n+\t\tdefer ReleaseCookieJar(jar)\n+\n+\t\tjar.SetKeyValue(\"example.com\", \"k1\", \"v1\")\n+\t\tjar.SetKeyValue(\"example.com\", \"k2\", \"v2\")\n+\n+\t\twrapAgent := func(c *Client) {\n+\t\t\tc.SetCookieJar(jar)\n+\t\t}\n+\t\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+\n+\t\tfor _, cookie := range jar.getCookiesByHost(\"example.com\") {\n+\t\t\tif string(cookie.Key()) == \"k1\" {\n+\t\t\t\trequire.Equal(t, \"v2\", string(cookie.Value()))\n+\t\t\t}\n+\t\t}\n+\t})\n+}\n+\n+func Test_Client_Referer(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\treturn c.Send(c.Request().Header.Referer())\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetReferer(\"http://referer.com\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"http://referer.com\")\n+}\n+\n+func Test_Client_QueryParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"add param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").AddParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 2)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t})\n+\n+\tt.Run(\"set param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.AddParam(\"foo\", \"bar\").SetParam(\"foo\", \"fiber\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\t})\n+\n+\tt.Run(\"add params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tAddParams(map[string][]string{\n+\t\t\t\t\"foo\": {\"fiber\", \"buaa\"},\n+\t\t\t\t\"bar\": {\"foo\"},\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 3)\n+\t\trequire.Equal(t, \"bar\", res[0])\n+\t\trequire.Equal(t, \"fiber\", res[1])\n+\t\trequire.Equal(t, \"buaa\", res[2])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set headers\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"fiber\", res[0])\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Len(t, res, 1)\n+\t\trequire.Equal(t, \"foo\", res[0])\n+\t})\n+\n+\tt.Run(\"set params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\n+\t\ttype args struct {\n+\t\t\tTInt      int\n+\t\t\tTString   string\n+\t\t\tTFloat    float64\n+\t\t\tTBool     bool\n+\t\t\tTSlice    []string\n+\t\t\tTIntSlice []int `param:\"int_slice\"`\n+\t\t}\n+\n+\t\tp := NewClient()\n+\t\tp.SetParamsWithStruct(&args{\n+\t\t\tTInt:      5,\n+\t\t\tTString:   \"string\",\n+\t\t\tTFloat:    3.1,\n+\t\t\tTBool:     true,\n+\t\t\tTSlice:    []string{\"foo\", \"bar\"},\n+\t\t\tTIntSlice: []int{1, 2},\n+\t\t})\n+\n+\t\trequire.Empty(t, p.Param(\"unexport\"))\n+\n+\t\trequire.Len(t, p.Param(\"TInt\"), 1)\n+\t\trequire.Equal(t, \"5\", p.Param(\"TInt\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TString\"), 1)\n+\t\trequire.Equal(t, \"string\", p.Param(\"TString\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TFloat\"), 1)\n+\t\trequire.Equal(t, \"3.1\", p.Param(\"TFloat\")[0])\n+\n+\t\trequire.Len(t, p.Param(\"TBool\"), 1)\n+\n+\t\ttslice := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tslice, 2)\n+\t\trequire.Equal(t, \"foo\", tslice[0])\n+\t\trequire.Equal(t, \"bar\", tslice[1])\n+\n+\t\ttint := p.Param(\"TSlice\")\n+\t\trequire.Len(t, tint, 2)\n+\t\trequire.Equal(t, \"foo\", tint[0])\n+\t\trequire.Equal(t, \"bar\", tint[1])\n+\t})\n+\n+\tt.Run(\"del params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient()\n+\t\treq.SetParam(\"foo\", \"bar\").\n+\t\t\tSetParams(map[string]string{\n+\t\t\t\t\"foo\": \"fiber\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t}).DelParams(\"foo\", \"bar\")\n+\n+\t\tres := req.Param(\"foo\")\n+\t\trequire.Empty(t, res)\n+\n+\t\tres = req.Param(\"bar\")\n+\t\trequire.Empty(t, res)\n+\t})\n+}\n+\n+func Test_Client_QueryParam_With_Server(t *testing.T) {\n+\thandler := func(c fiber.Ctx) error {\n+\t\t_, _ = c.WriteString(c.Query(\"k1\")) //nolint:errcheck // It is fine to ignore the error here\n+\t\t_, _ = c.WriteString(c.Query(\"k2\")) //nolint:errcheck // It is fine to ignore the error here\n+\n+\t\treturn nil\n+\t}\n+\n+\twrapAgent := func(c *Client) {\n+\t\tc.SetParam(\"k1\", \"v1\").\n+\t\t\tAddParam(\"k2\", \"v2\")\n+\t}\n+\n+\ttestClient(t, handler, wrapAgent, \"v1v2\")\n+}\n+\n+func Test_Client_PathParam(t *testing.T) {\n+\tt.Parallel()\n+\n+\tt.Run(\"set path param\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParam(\"foo\", \"bar\")\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\n+\t\treq.SetPathParam(\"foo\", \"bar1\")\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t})\n+\n+\tt.Run(\"set path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.SetPathParams(map[string]string{\n+\t\t\t\"foo\": \"bar1\",\n+\t\t})\n+\t\trequire.Equal(t, \"bar1\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+\n+\tt.Run(\"set path params with struct\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\ttype args struct {\n+\t\t\tCookieInt    int    `path:\"int\"`\n+\t\t\tCookieString string `path:\"string\"`\n+\t\t}\n+\n+\t\treq := NewClient().SetPathParamsWithStruct(&args{\n+\t\t\tCookieInt:    5,\n+\t\t\tCookieString: \"foo\",\n+\t\t})\n+\n+\t\trequire.Equal(t, \"5\", req.PathParam(\"int\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"string\"))\n+\t})\n+\n+\tt.Run(\"del path params\", func(t *testing.T) {\n+\t\tt.Parallel()\n+\t\treq := NewClient().\n+\t\t\tSetPathParams(map[string]string{\n+\t\t\t\t\"foo\": \"bar\",\n+\t\t\t\t\"bar\": \"foo\",\n+\t\t\t})\n+\t\trequire.Equal(t, \"bar\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\n+\t\treq.DelPathParams(\"foo\")\n+\t\trequire.Equal(t, \"\", req.PathParam(\"foo\"))\n+\t\trequire.Equal(t, \"foo\", req.PathParam(\"bar\"))\n+\t})\n+}\n+\n+func Test_Client_PathParam_With_Server(t *testing.T) {\n+\tapp, dial, start := createHelperServer(t)\n+\n+\tapp.Get(\"/test\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"ok\")\n+\t})\n+\n+\tgo start()\n+\n+\tresp, err := NewClient().SetDial(dial).\n+\t\tSetPathParam(\"path\", \"test\").\n+\t\tGet(\"http://example.com/:path\")\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"ok\", resp.String())\n+}\n+\n+func Test_Client_TLS(t *testing.T) {\n+\tt.Parallel()\n+\n+\tserverTLSConf, clientTLSConf, err := tlstest.GetTLSConfigs()\n+\trequire.NoError(t, err)\n+\n+\tln, err := net.Listen(fiber.NetworkTCP4, \"127.0.0.1:0\")\n+\trequire.NoError(t, err)\n+\n+\tln = tls.NewListener(ln, serverTLSConf)\n+\n+\tapp := fiber.New()\n+\tapp.Get(\"/\", func(c fiber.Ctx) error {\n+\t\treturn c.SendString(\"tls\")\n+\t})\n+\n+\tgo func() {\n+\t\trequire.NoError(t, app.Listener(ln, fiber.ListenConfig{\n+\t\t\tDisableStartupMessage: true,\n+\t\t}))\n+\t}()\n+\n+\tclient := NewClient()\n+\tresp, err := client.SetTLSConfig(clientTLSConf).Get(\"https://\" + ln.Addr().String())\n+\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, clientTLSConf, client.TLSConfig())\n+\trequire.Equal(t, fiber.StatusOK, resp.StatusCode())\n+\trequire.Equal(t, \"tls\", resp.String())\n+}",
        "comment_created_at": "2024-03-02T11:47:27+00:00",
        "comment_author": "gaby",
        "comment_body": "@efectn What it is talking about is for example:\r\n\r\nFiber Server ONLY allows TLSv1.3\r\nFiber Client tries to connect using only TLSv1.2\r\n\r\n^ This is not covered by the tests and should result in a handshake failure. ",
        "pr_file_module": null
      }
    ]
  }
]