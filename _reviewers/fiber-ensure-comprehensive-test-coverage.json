[
  {
    "discussion_id": "2091628604",
    "pr_number": 3457,
    "pr_file": "redirect.go",
    "created_at": "2025-05-16T10:58:11+00:00",
    "commented_code": "// parseAndClearFlashMessages is a method to get flash messages before they are getting removed\n func (r *Redirect) parseAndClearFlashMessages() {\n \t// parse flash messages\n-\tcookieValue := r.c.Cookies(FlashCookieName)\n+\tcookieValue, err := hex.DecodeString(r.c.Cookies(FlashCookieName))\n+\tif err != nil {\n+\t\treturn\n+\t}",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2092830435",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3457,
        "pr_file": "redirect.go",
        "discussion_id": "2091628604",
        "commented_code": "@@ -296,9 +297,12 @@\n // parseAndClearFlashMessages is a method to get flash messages before they are getting removed\n func (r *Redirect) parseAndClearFlashMessages() {\n \t// parse flash messages\n-\tcookieValue := r.c.Cookies(FlashCookieName)\n+\tcookieValue, err := hex.DecodeString(r.c.Cookies(FlashCookieName))\n+\tif err != nil {\n+\t\treturn\n+\t}",
        "comment_created_at": "2025-05-16T10:58:11+00:00",
        "comment_author": "efectn",
        "comment_body": "can you create a unit test to cover this case",
        "pr_file_module": null
      },
      {
        "comment_id": "2092945224",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3457,
        "pr_file": "redirect.go",
        "discussion_id": "2091628604",
        "commented_code": "@@ -296,9 +297,12 @@\n // parseAndClearFlashMessages is a method to get flash messages before they are getting removed\n func (r *Redirect) parseAndClearFlashMessages() {\n \t// parse flash messages\n-\tcookieValue := r.c.Cookies(FlashCookieName)\n+\tcookieValue, err := hex.DecodeString(r.c.Cookies(FlashCookieName))\n+\tif err != nil {\n+\t\treturn\n+\t}",
        "comment_created_at": "2025-05-16T12:23:05+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "@efectn can you add this test\r\n\r\n```go\r\n// Verify that no flash messages are processed (should be empty) \r\nif len(r.c.flashMessages) != 0 {\r\nt.Errorf(\"Expected no flash messages to be processed, but got %d\", len(r.c.flashMessages))\r\n}\r\n```\r\n\r\nmaybe you can use https://pkg.go.dev/github.com/stretchr/testify/assert#Len instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2118061749",
    "pr_number": 3495,
    "pr_file": "ctx_test.go",
    "created_at": "2025-05-31T17:00:42+00:00",
    "commented_code": "require.Equal(t, []string{\"john\", \"doe\"}, c.Subdomains(4))\n \n \tc.Request().URI().SetHost(\"localhost:3000\")\n-\trequire.Equal(t, []string{\"localhost:3000\"}, c.Subdomains())\n+\trequire.Empty(t, c.Subdomains())\n+}\n+\n+// go test -run Test_Ctx_Subdomains_OffsetTooHigh\n+func Test_Ctx_Subdomains_OffsetTooHigh(t *testing.T) {\n+\tt.Parallel()\n+\tapp := New()\n+\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\n+\tc.Request().URI().SetHost(\"john.doe.is.awesome.google.com\")\n+\trequire.Empty(t, c.Subdomains(10))",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2118061749",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3495,
        "pr_file": "ctx_test.go",
        "discussion_id": "2118061749",
        "commented_code": "@@ -3023,7 +3023,17 @@ func Test_Ctx_Subdomains(t *testing.T) {\n \trequire.Equal(t, []string{\"john\", \"doe\"}, c.Subdomains(4))\n \n \tc.Request().URI().SetHost(\"localhost:3000\")\n-\trequire.Equal(t, []string{\"localhost:3000\"}, c.Subdomains())\n+\trequire.Empty(t, c.Subdomains())\n+}\n+\n+// go test -run Test_Ctx_Subdomains_OffsetTooHigh\n+func Test_Ctx_Subdomains_OffsetTooHigh(t *testing.T) {\n+\tt.Parallel()\n+\tapp := New()\n+\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\n+\tc.Request().URI().SetHost(\"john.doe.is.awesome.google.com\")\n+\trequire.Empty(t, c.Subdomains(10))",
        "comment_created_at": "2025-05-31T17:00:42+00:00",
        "comment_author": "sixcolors",
        "comment_body": "The PR summary mentions handling negative offsets, but the new test only covers a large positive offset (c.Subdomains(10)). While the logic handles negative offsets correctly (since l < 0 triggers the same []string{} return), there\u2019s no explicit test for this case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2118061989",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3495,
        "pr_file": "ctx_test.go",
        "discussion_id": "2118061749",
        "commented_code": "@@ -3023,7 +3023,17 @@ func Test_Ctx_Subdomains(t *testing.T) {\n \trequire.Equal(t, []string{\"john\", \"doe\"}, c.Subdomains(4))\n \n \tc.Request().URI().SetHost(\"localhost:3000\")\n-\trequire.Equal(t, []string{\"localhost:3000\"}, c.Subdomains())\n+\trequire.Empty(t, c.Subdomains())\n+}\n+\n+// go test -run Test_Ctx_Subdomains_OffsetTooHigh\n+func Test_Ctx_Subdomains_OffsetTooHigh(t *testing.T) {\n+\tt.Parallel()\n+\tapp := New()\n+\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\n+\tc.Request().URI().SetHost(\"john.doe.is.awesome.google.com\")\n+\trequire.Empty(t, c.Subdomains(10))",
        "comment_created_at": "2025-05-31T17:01:14+00:00",
        "comment_author": "sixcolors",
        "comment_body": "Maybe add `Test_Ctx_Subdomains_OffsetNegative`\r\n\r\n```go\r\nc.Request().URI().SetHost(\"john.doe.google.com\")\r\nrequire.Empty(t, c.Subdomains(-1), \"negative offset should return empty slice\")\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2118069848",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3495,
        "pr_file": "ctx_test.go",
        "discussion_id": "2118061749",
        "commented_code": "@@ -3023,7 +3023,17 @@ func Test_Ctx_Subdomains(t *testing.T) {\n \trequire.Equal(t, []string{\"john\", \"doe\"}, c.Subdomains(4))\n \n \tc.Request().URI().SetHost(\"localhost:3000\")\n-\trequire.Equal(t, []string{\"localhost:3000\"}, c.Subdomains())\n+\trequire.Empty(t, c.Subdomains())\n+}\n+\n+// go test -run Test_Ctx_Subdomains_OffsetTooHigh\n+func Test_Ctx_Subdomains_OffsetTooHigh(t *testing.T) {\n+\tt.Parallel()\n+\tapp := New()\n+\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\n+\tc.Request().URI().SetHost(\"john.doe.is.awesome.google.com\")\n+\trequire.Empty(t, c.Subdomains(10))",
        "comment_created_at": "2025-05-31T17:09:59+00:00",
        "comment_author": "gaby",
        "comment_body": "Makes sense, will add that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2118070881",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3495,
        "pr_file": "ctx_test.go",
        "discussion_id": "2118061749",
        "commented_code": "@@ -3023,7 +3023,17 @@ func Test_Ctx_Subdomains(t *testing.T) {\n \trequire.Equal(t, []string{\"john\", \"doe\"}, c.Subdomains(4))\n \n \tc.Request().URI().SetHost(\"localhost:3000\")\n-\trequire.Equal(t, []string{\"localhost:3000\"}, c.Subdomains())\n+\trequire.Empty(t, c.Subdomains())\n+}\n+\n+// go test -run Test_Ctx_Subdomains_OffsetTooHigh\n+func Test_Ctx_Subdomains_OffsetTooHigh(t *testing.T) {\n+\tt.Parallel()\n+\tapp := New()\n+\tc := app.AcquireCtx(&fasthttp.RequestCtx{})\n+\n+\tc.Request().URI().SetHost(\"john.doe.is.awesome.google.com\")\n+\trequire.Empty(t, c.Subdomains(10))",
        "comment_created_at": "2025-05-31T17:12:12+00:00",
        "comment_author": "gaby",
        "comment_body": "Added test for -1 and 0",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108042920",
    "pr_number": 3482,
    "pr_file": "middleware/keyauth/keyauth_test.go",
    "created_at": "2025-05-27T03:07:57+00:00",
    "commented_code": "require.Equal(t, http.StatusOK, res.StatusCode)\n \trequire.Equal(t, \"API key is valid\", string(body))\n }\n+\n+func Test_HeaderSchemeCaseInsensitive(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, key string) (bool, error) {\n+\t\t\tif key == CorrectKey {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"bearer \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n+\trequire.Equal(t, \"OK\", string(body))\n+}\n+\n+func Test_DefaultErrorHandlerChallenge(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\tres, err := app.Test(httptest.NewRequest(fiber.MethodGet, \"/\", nil))\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, \"Bearer realm=\\\"Restricted\\\"\", res.Header.Get(\"WWW-Authenticate\"))\n+}\n+\n+func Test_DefaultErrorHandlerInvalid(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\t\treturn false, errors.New(\"invalid\")\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, \"Invalid or expired API Key\", string(body))\n+\trequire.Equal(t, \"Bearer realm=\\\"Restricted\\\"\", res.Header.Get(\"WWW-Authenticate\"))\n+}\n+\n+func Test_HeaderSchemeMultipleSpaces(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, key string) (bool, error) {\n+\t\t\tif key == CorrectKey {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer    \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n+\trequire.Equal(t, \"OK\", string(body))\n+}\n+\n+func Test_HeaderSchemeMissingSpace(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{Validator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t}}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer\"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, ErrMissingOrMalformedAPIKey.Error(), string(body))\n+}\n+\n+func Test_HeaderSchemeNoToken(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{Validator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t}}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer \")\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, ErrMissingOrMalformedAPIKey.Error(), string(body))\n+}",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2108069768",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3482,
        "pr_file": "middleware/keyauth/keyauth_test.go",
        "discussion_id": "2108042920",
        "commented_code": "@@ -614,3 +615,116 @@ func Test_AuthSchemeBasic(t *testing.T) {\n \trequire.Equal(t, http.StatusOK, res.StatusCode)\n \trequire.Equal(t, \"API key is valid\", string(body))\n }\n+\n+func Test_HeaderSchemeCaseInsensitive(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, key string) (bool, error) {\n+\t\t\tif key == CorrectKey {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"bearer \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n+\trequire.Equal(t, \"OK\", string(body))\n+}\n+\n+func Test_DefaultErrorHandlerChallenge(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\tres, err := app.Test(httptest.NewRequest(fiber.MethodGet, \"/\", nil))\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, \"Bearer realm=\\\"Restricted\\\"\", res.Header.Get(\"WWW-Authenticate\"))\n+}\n+\n+func Test_DefaultErrorHandlerInvalid(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\t\treturn false, errors.New(\"invalid\")\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, \"Invalid or expired API Key\", string(body))\n+\trequire.Equal(t, \"Bearer realm=\\\"Restricted\\\"\", res.Header.Get(\"WWW-Authenticate\"))\n+}\n+\n+func Test_HeaderSchemeMultipleSpaces(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{\n+\t\tValidator: func(_ fiber.Ctx, key string) (bool, error) {\n+\t\t\tif key == CorrectKey {\n+\t\t\t\treturn true, nil\n+\t\t\t}\n+\t\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t\t},\n+\t}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer    \"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusOK, res.StatusCode)\n+\trequire.Equal(t, \"OK\", string(body))\n+}\n+\n+func Test_HeaderSchemeMissingSpace(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{Validator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t}}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer\"+CorrectKey)\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, ErrMissingOrMalformedAPIKey.Error(), string(body))\n+}\n+\n+func Test_HeaderSchemeNoToken(t *testing.T) {\n+\tapp := fiber.New()\n+\tapp.Use(New(Config{Validator: func(_ fiber.Ctx, _ string) (bool, error) {\n+\t\treturn false, ErrMissingOrMalformedAPIKey\n+\t}}))\n+\tapp.Get(\"/\", func(c fiber.Ctx) error { return c.SendString(\"OK\") })\n+\n+\treq := httptest.NewRequest(fiber.MethodGet, \"/\", nil)\n+\treq.Header.Add(\"Authorization\", \"Bearer \")\n+\tres, err := app.Test(req)\n+\trequire.NoError(t, err)\n+\tbody, err := io.ReadAll(res.Body)\n+\trequire.NoError(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, res.StatusCode)\n+\trequire.Equal(t, ErrMissingOrMalformedAPIKey.Error(), string(body))\n+}",
        "comment_created_at": "2025-05-27T03:07:57+00:00",
        "comment_author": "gaby",
        "comment_body": "@coderabbitai Great, now write a unit-test for when token is \"\".\r\n\r\nAdded lines #L148 - L149 were not covered by tests",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1793036764",
    "pr_number": 3153,
    "pr_file": "middleware/logger/logger_test.go",
    "created_at": "2024-10-09T07:46:28+00:00",
    "commented_code": "require.Equal(t, fiber.StatusNotFound, resp.StatusCode)\n }\n \n+// go test -run Test_Logger_Fiber_Logger\n+func Test_Logger_Fiber_Logger(t *testing.T) {\n+\tt.Parallel()\n+\tapp := fiber.New()\n+\n+\tbuf := bytebufferpool.Get()\n+\tdefer bytebufferpool.Put(buf)\n+\n+\tcustomLoggerFunc := func(_ fiber.Ctx, data *Data, cfg Config) error {\n+\t\tcfg.Logger.SetOutput(cfg.Output)\n+\t\tcfg.Logger.SetFlags(0)\n+\t\tcfg.Logger.Error(data.ChainErr.Error())\n+\t\treturn nil\n+\t}\n+\n+\tapp.Use(New(Config{\n+\t\tOutput:     buf,\n+\t\tLogger:     fiberlog.DefaultLogger(),",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1793036764",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3153,
        "pr_file": "middleware/logger/logger_test.go",
        "discussion_id": "1793036764",
        "commented_code": "@@ -181,6 +182,37 @@ func Test_Logger_ErrorTimeZone(t *testing.T) {\n \trequire.Equal(t, fiber.StatusNotFound, resp.StatusCode)\n }\n \n+// go test -run Test_Logger_Fiber_Logger\n+func Test_Logger_Fiber_Logger(t *testing.T) {\n+\tt.Parallel()\n+\tapp := fiber.New()\n+\n+\tbuf := bytebufferpool.Get()\n+\tdefer bytebufferpool.Put(buf)\n+\n+\tcustomLoggerFunc := func(_ fiber.Ctx, data *Data, cfg Config) error {\n+\t\tcfg.Logger.SetOutput(cfg.Output)\n+\t\tcfg.Logger.SetFlags(0)\n+\t\tcfg.Logger.Error(data.ChainErr.Error())\n+\t\treturn nil\n+\t}\n+\n+\tapp.Use(New(Config{\n+\t\tOutput:     buf,\n+\t\tLogger:     fiberlog.DefaultLogger(),",
        "comment_created_at": "2024-10-09T07:46:28+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "please add a second test where you inject another logger and show that it receives the data",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835884608",
    "pr_number": 3173,
    "pr_file": "client/client_test.go",
    "created_at": "2024-11-11T02:28:57+00:00",
    "commented_code": "require.Equal(t, errors.New(\"empty xml\"), err)\n \t})",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1835884608",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3173,
        "pr_file": "client/client_test.go",
        "discussion_id": "1835884608",
        "commented_code": "@@ -202,6 +203,33 @@ func Test_Client_Marshal(t *testing.T) {\n \t\trequire.Equal(t, errors.New(\"empty xml\"), err)\n \t})\n ",
        "comment_created_at": "2024-11-11T02:28:57+00:00",
        "comment_author": "gaby",
        "comment_body": "This is missing a test using the default CBOR Marshall and UnMarshall functions as noted by `codecov` below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835884794",
    "pr_number": 3173,
    "pr_file": "client/hooks.go",
    "created_at": "2024-11-11T02:29:23+00:00",
    "commented_code": "return err\n \t\t}\n \t\treq.RawRequest.SetBody(body)\n+\tcase cborBody:",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1835884794",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3173,
        "pr_file": "client/hooks.go",
        "discussion_id": "1835884794",
        "commented_code": "@@ -189,6 +192,12 @@ func parserRequestBody(c *Client, req *Request) error {\n \t\t\treturn err\n \t\t}\n \t\treq.RawRequest.SetBody(body)\n+\tcase cborBody:",
        "comment_created_at": "2024-11-11T02:29:23+00:00",
        "comment_author": "gaby",
        "comment_body": "Missing hook test for `cbor`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1835885264",
    "pr_number": 3173,
    "pr_file": "binder/cbor.go",
    "created_at": "2024-11-11T02:30:20+00:00",
    "commented_code": "+package binder\n+\n+import (\n+\t\"github.com/gofiber/utils/v2\"\n+)\n+\n+type cborBinding struct{}\n+\n+func (*cborBinding) Name() string {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1835885264",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3173,
        "pr_file": "binder/cbor.go",
        "discussion_id": "1835885264",
        "commented_code": "@@ -0,0 +1,15 @@\n+package binder\n+\n+import (\n+\t\"github.com/gofiber/utils/v2\"\n+)\n+\n+type cborBinding struct{}\n+\n+func (*cborBinding) Name() string {",
        "comment_created_at": "2024-11-11T02:30:20+00:00",
        "comment_author": "gaby",
        "comment_body": "This whole file is missing tests",
        "pr_file_module": null
      },
      {
        "comment_id": "1863103180",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3173,
        "pr_file": "binder/cbor.go",
        "discussion_id": "1835885264",
        "commented_code": "@@ -0,0 +1,15 @@\n+package binder\n+\n+import (\n+\t\"github.com/gofiber/utils/v2\"\n+)\n+\n+type cborBinding struct{}\n+\n+func (*cborBinding) Name() string {",
        "comment_created_at": "2024-11-29T08:02:24+00:00",
        "comment_author": "efectn",
        "comment_body": "> This whole file is missing tests\r\n\r\nNone of the binders in bind/ folder is tested. I suppose we have to create separate test-cases for them since codecov shows lower coverage. I can create another PR for that",
        "pr_file_module": null
      },
      {
        "comment_id": "1863579400",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3173,
        "pr_file": "binder/cbor.go",
        "discussion_id": "1835885264",
        "commented_code": "@@ -0,0 +1,15 @@\n+package binder\n+\n+import (\n+\t\"github.com/gofiber/utils/v2\"\n+)\n+\n+type cborBinding struct{}\n+\n+func (*cborBinding) Name() string {",
        "comment_created_at": "2024-11-29T14:10:10+00:00",
        "comment_author": "gaby",
        "comment_body": "Agree",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1518631618",
    "pr_number": 2908,
    "pr_file": "middleware/cors/cors_test.go",
    "created_at": "2024-03-09T17:37:36+00:00",
    "commented_code": "}\n }\n \n+// The Enhancement for issue #2804\n+func Test_CORS_AllowPrivateNetworkAccess(t *testing.T) {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1518631618",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2908,
        "pr_file": "middleware/cors/cors_test.go",
        "discussion_id": "1518631618",
        "commented_code": "@@ -689,6 +689,43 @@ func Test_CORS_AllowCredentials(t *testing.T) {\n \t}\n }\n \n+// The Enhancement for issue #2804\n+func Test_CORS_AllowPrivateNetworkAccess(t *testing.T) {",
        "comment_created_at": "2024-03-09T17:37:36+00:00",
        "comment_author": "gaby",
        "comment_body": "We should add a test were the flag is set to False, and make sure the Header is not present.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1161013352",
    "pr_number": 2407,
    "pr_file": "app.go",
    "created_at": "2023-04-07T23:01:08+00:00",
    "commented_code": "func (app *App) ShutdownWithTimeout(timeout time.Duration) error {\n \tctx, cancelFunc := context.WithTimeout(context.Background(), timeout)\n \tdefer cancelFunc()\n-\treturn app.shutdownWithContext(ctx)\n+\treturn app.ShutdownWithContext(ctx)\n }\n \n-// shutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n-func (app *App) shutdownWithContext(ctx context.Context) error {\n+// ShutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n+//\n+// Make sure the program doesn't exit and waits instead for ShutdownWithTimeout to return.\n+//\n+// ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n+func (app *App) ShutdownWithContext(ctx context.Context) error {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1161013352",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2407,
        "pr_file": "app.go",
        "discussion_id": "1161013352",
        "commented_code": "@@ -860,11 +860,15 @@ func (app *App) Shutdown() error {\n func (app *App) ShutdownWithTimeout(timeout time.Duration) error {\n \tctx, cancelFunc := context.WithTimeout(context.Background(), timeout)\n \tdefer cancelFunc()\n-\treturn app.shutdownWithContext(ctx)\n+\treturn app.ShutdownWithContext(ctx)\n }\n \n-// shutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n-func (app *App) shutdownWithContext(ctx context.Context) error {\n+// ShutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n+//\n+// Make sure the program doesn't exit and waits instead for ShutdownWithTimeout to return.\n+//\n+// ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n+func (app *App) ShutdownWithContext(ctx context.Context) error {",
        "comment_created_at": "2023-04-07T23:01:08+00:00",
        "comment_author": "gaby",
        "comment_body": "If the function is public, we may need to add a test.",
        "pr_file_module": null
      },
      {
        "comment_id": "1161038332",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2407,
        "pr_file": "app.go",
        "discussion_id": "1161013352",
        "commented_code": "@@ -860,11 +860,15 @@ func (app *App) Shutdown() error {\n func (app *App) ShutdownWithTimeout(timeout time.Duration) error {\n \tctx, cancelFunc := context.WithTimeout(context.Background(), timeout)\n \tdefer cancelFunc()\n-\treturn app.shutdownWithContext(ctx)\n+\treturn app.ShutdownWithContext(ctx)\n }\n \n-// shutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n-func (app *App) shutdownWithContext(ctx context.Context) error {\n+// ShutdownWithContext shuts down the server including by force if the context's deadline is exceeded.\n+//\n+// Make sure the program doesn't exit and waits instead for ShutdownWithTimeout to return.\n+//\n+// ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n+func (app *App) ShutdownWithContext(ctx context.Context) error {",
        "comment_created_at": "2023-04-08T00:55:59+00:00",
        "comment_author": "jcyamacho",
        "comment_body": "done! the test is almost equal to `Test_App_ShutdownWithTimeout` \ud83d\ude05 ",
        "pr_file_module": null
      }
    ]
  }
]