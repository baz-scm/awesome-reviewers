[
  {
    "discussion_id": "2054839368",
    "pr_number": 3402,
    "pr_file": "ctx.go",
    "created_at": "2025-04-22T20:39:30+00:00",
    "commented_code": "}\n \n func (*Ctx) parseToStruct(aliasTag string, out interface{}, data map[string][]string) error {\n+\t// fast return\n+\tif len(data) == 0 {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2054839368",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3402,
        "pr_file": "ctx.go",
        "discussion_id": "2054839368",
        "commented_code": "@@ -1308,6 +1314,10 @@ func (c *Ctx) ReqHeaderParser(out interface{}) error {\n }\n \n func (*Ctx) parseToStruct(aliasTag string, out interface{}, data map[string][]string) error {\n+\t// fast return\n+\tif len(data) == 0 {",
        "comment_created_at": "2025-04-22T20:39:30+00:00",
        "comment_author": "efectn",
        "comment_body": "can you check whether the data map is nil",
        "pr_file_module": null
      },
      {
        "comment_id": "2055177029",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3402,
        "pr_file": "ctx.go",
        "discussion_id": "2054839368",
        "commented_code": "@@ -1308,6 +1314,10 @@ func (c *Ctx) ReqHeaderParser(out interface{}) error {\n }\n \n func (*Ctx) parseToStruct(aliasTag string, out interface{}, data map[string][]string) error {\n+\t// fast return\n+\tif len(data) == 0 {",
        "comment_created_at": "2025-04-23T03:08:52+00:00",
        "comment_author": "billyplus",
        "comment_body": "As stated in the documentation https://pkg.go.dev/builtin#len. If data is nil, then len(data) is 0.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1855187613",
    "pr_number": 3214,
    "pr_file": "client/client.go",
    "created_at": "2024-11-23T17:24:57+00:00",
    "commented_code": "// trie to use a pool to reduce the cost of memory allocation\n \t// for the fiber client and the fasthttp client\n \t// if possible also for other structs -> request header, cookie, query param, path param...\n+\treturn NewWithClient(&fasthttp.Client{})\n+}\n+\n+// NewWithClient creates and returns a new Client object from an existing client.\n+func NewWithClient(c *fasthttp.Client) *Client {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1855230768",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3214,
        "pr_file": "client/client.go",
        "discussion_id": "1855187613",
        "commented_code": "@@ -680,8 +680,13 @@ func New() *Client {\n \t// trie to use a pool to reduce the cost of memory allocation\n \t// for the fiber client and the fasthttp client\n \t// if possible also for other structs -> request header, cookie, query param, path param...\n+\treturn NewWithClient(&fasthttp.Client{})\n+}\n+\n+// NewWithClient creates and returns a new Client object from an existing client.\n+func NewWithClient(c *fasthttp.Client) *Client {",
        "comment_created_at": "2024-11-23T17:24:57+00:00",
        "comment_author": "gaby",
        "comment_body": "@mitulagr2 Can you add the nil check suggested including the panic.",
        "pr_file_module": null
      },
      {
        "comment_id": "1855231187",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3214,
        "pr_file": "client/client.go",
        "discussion_id": "1855187613",
        "commented_code": "@@ -680,8 +680,13 @@ func New() *Client {\n \t// trie to use a pool to reduce the cost of memory allocation\n \t// for the fiber client and the fasthttp client\n \t// if possible also for other structs -> request header, cookie, query param, path param...\n+\treturn NewWithClient(&fasthttp.Client{})\n+}\n+\n+// NewWithClient creates and returns a new Client object from an existing client.\n+func NewWithClient(c *fasthttp.Client) *Client {",
        "comment_created_at": "2024-11-23T17:27:31+00:00",
        "comment_author": "gaby",
        "comment_body": "Also add a test where you call the function with `nil`, and test that it panics. We use testify you can check this with:\r\n\r\n```go\r\nrequire.Panics(t, func(){\r\n    // create client with nil here to throw panic\r\n})\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1855231915",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3214,
        "pr_file": "client/client.go",
        "discussion_id": "1855187613",
        "commented_code": "@@ -680,8 +680,13 @@ func New() *Client {\n \t// trie to use a pool to reduce the cost of memory allocation\n \t// for the fiber client and the fasthttp client\n \t// if possible also for other structs -> request header, cookie, query param, path param...\n+\treturn NewWithClient(&fasthttp.Client{})\n+}\n+\n+// NewWithClient creates and returns a new Client object from an existing client.\n+func NewWithClient(c *fasthttp.Client) *Client {",
        "comment_created_at": "2024-11-23T17:32:01+00:00",
        "comment_author": "mitulagr2",
        "comment_body": "Sure! I'll do that right away",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1512216996",
    "pr_number": 2892,
    "pr_file": "client/response.go",
    "created_at": "2024-03-05T06:57:23+00:00",
    "commented_code": "// JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1512216996",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "client/response.go",
        "discussion_id": "1512216996",
        "commented_code": "@@ -73,11 +73,17 @@ func (r *Response) String() string {\n \n // JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
        "comment_created_at": "2024-03-05T06:57:23+00:00",
        "comment_author": "leonklingele",
        "comment_body": "When will this be the case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1512714734",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "client/response.go",
        "discussion_id": "1512216996",
        "commented_code": "@@ -73,11 +73,17 @@ func (r *Response) String() string {\n \n // JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
        "comment_created_at": "2024-03-05T12:09:27+00:00",
        "comment_author": "gaby",
        "comment_body": "Missing safety check found by https://github.com/uber-go/nilaway",
        "pr_file_module": null
      },
      {
        "comment_id": "1513975548",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "client/response.go",
        "discussion_id": "1512216996",
        "commented_code": "@@ -73,11 +73,17 @@ func (r *Response) String() string {\n \n // JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
        "comment_created_at": "2024-03-06T07:47:52+00:00",
        "comment_author": "leonklingele",
        "comment_body": "Are you sure it's not a false positive? When is `(*Response).JSON()` called without a `client`?\r\n`nilaway` isn't really yet ready for productive use due to the many false-positives.",
        "pr_file_module": null
      },
      {
        "comment_id": "1514516706",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "client/response.go",
        "discussion_id": "1512216996",
        "commented_code": "@@ -73,11 +73,17 @@ func (r *Response) String() string {\n \n // JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
        "comment_created_at": "2024-03-06T13:48:10+00:00",
        "comment_author": "gaby",
        "comment_body": "Will remove",
        "pr_file_module": null
      },
      {
        "comment_id": "1514541376",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "client/response.go",
        "discussion_id": "1512216996",
        "commented_code": "@@ -73,11 +73,17 @@ func (r *Response) String() string {\n \n // JSON method will unmarshal body to json.\n func (r *Response) JSON(v any) error {\n+\tif r.client == nil {",
        "comment_created_at": "2024-03-06T14:04:16+00:00",
        "comment_author": "gaby",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1512219092",
    "pr_number": 2892,
    "pr_file": "middleware/session/session.go",
    "created_at": "2024-03-05T06:59:15+00:00",
    "commented_code": "}\n \n func (s *Session) delSession() {\n+\tif s.config == nil {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1512219092",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "middleware/session/session.go",
        "discussion_id": "1512219092",
        "commented_code": "@@ -246,6 +250,9 @@ func (s *Session) setSession() {\n }\n \n func (s *Session) delSession() {\n+\tif s.config == nil {",
        "comment_created_at": "2024-03-05T06:59:15+00:00",
        "comment_author": "leonklingele",
        "comment_body": "When will this be the case?",
        "pr_file_module": null
      },
      {
        "comment_id": "1512715504",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2892,
        "pr_file": "middleware/session/session.go",
        "discussion_id": "1512219092",
        "commented_code": "@@ -246,6 +250,9 @@ func (s *Session) setSession() {\n }\n \n func (s *Session) delSession() {\n+\tif s.config == nil {",
        "comment_created_at": "2024-03-05T12:10:08+00:00",
        "comment_author": "gaby",
        "comment_body": "Missing safety check found by https://github.com/uber-go/nilaway",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1424323914",
    "pr_number": 2760,
    "pr_file": "utils/zero.go",
    "created_at": "2023-12-12T17:09:31+00:00",
    "commented_code": "+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1424323914",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T17:09:31+00:00",
        "comment_author": "efectn",
        "comment_body": "```go\r\ntype test string\r\n\r\nfunc main() {\r\n\tx := []test{}\r\n\tfmt.Print(IsZeroValue(x))\r\n}\r\n```\r\nwill print false due to DeepEqual is pretty strict. Maybe this part should be adjusted?",
        "pr_file_module": null
      },
      {
        "comment_id": "1424333240",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T17:16:26+00:00",
        "comment_author": "efectn",
        "comment_body": "maybe this check is OK?\r\n```go\r\nval := reflect.ValueOf(x)\r\nif (val.Kind() == reflect.Slice || val.Kind() == reflect.Map) && val.Len() == 0 {\r\n\treturn true\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1424365743",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T17:42:08+00:00",
        "comment_author": "sixcolors",
        "comment_body": "AFAIK in Go, a zero value for a slice is nil. An empty slice (like `x := []test{}` in your example) is not considered a zero value; it's just an empty slice.",
        "pr_file_module": null
      },
      {
        "comment_id": "1424377649",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T17:47:28+00:00",
        "comment_author": "sixcolors",
        "comment_body": "I already considered empty slices zero in the fast path. So that would have to be the same... I'll fix.",
        "pr_file_module": null
      },
      {
        "comment_id": "1424378652",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T17:48:26+00:00",
        "comment_author": "efectn",
        "comment_body": "> AFAIK in Go, a zero value for a slice is nil. An empty slice (like `x := []test{}` in your example) is not considered a zero value; it's just an empty slice.\r\n\r\nThen we need to adjust switch-case part, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1424406976",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T18:15:56+00:00",
        "comment_author": "sixcolors",
        "comment_body": "> > AFAIK in Go, a zero value for a slice is nil. An empty slice (like `x := []test{}` in your example) is not considered a zero value; it's just an empty slice.\r\n> \r\n> Then we need to adjust switch-case part, right?\r\n\r\nCorrect.\r\n\r\n[cdb2885](https://github.com/gofiber/fiber/pull/2760/commits/cdb288542b077ecf5bb764d1d0033ba659c7a1dc) handles edge cases such as `x:= []test{}` and improves test/bench.\r\n\r\nIf we are going to consider those cases ZeroValues we can keep it, otherwise we can revert to using DeepEqual and remove the zero length slice cases.",
        "pr_file_module": null
      },
      {
        "comment_id": "1424451341",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T18:56:17+00:00",
        "comment_author": "efectn",
        "comment_body": "> > > AFAIK in Go, a zero value for a slice is nil. An empty slice (like `x := []test{}` in your example) is not considered a zero value; it's just an empty slice.\r\n> > \r\n> > \r\n> > Then we need to adjust switch-case part, right?\r\n> \r\n> Correct.\r\n> \r\n> [cdb2885](https://github.com/gofiber/fiber/pull/2760/commits/cdb288542b077ecf5bb764d1d0033ba659c7a1dc) handles edge cases such as `x:= []test{}` and improves test/bench.\r\n> \r\n> If we are going to consider those cases ZeroValues we can keep it, otherwise we can revert to using DeepEqual and remove the zero length slice cases.\r\n\r\nThat's OK to me but not sure `[]string{}` etc. is zero value according to Go. Should we either make switch case behavior same as reflect's zerovalue or make zero length slices zero value?",
        "pr_file_module": null
      },
      {
        "comment_id": "1424471230",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2760,
        "pr_file": "utils/zero.go",
        "discussion_id": "1424323914",
        "commented_code": "@@ -0,0 +1,88 @@\n+package utils\n+\n+import (\n+\t\"reflect\"\n+)\n+\n+// IsZeroValue reports whether x is the zero value for its type.\n+//\n+// For basic types and slices of basic types, it uses a fast path without reflection.\n+// For other types, it uses reflection.\n+func IsZeroValue(x interface{}) bool {\n+\t// Fast path for basic types\n+\tswitch v := x.(type) {\n+\tcase nil:\n+\t\treturn true\n+\tcase bool:\n+\t\treturn !v\n+\tcase int:\n+\t\treturn v == 0\n+\tcase int8:\n+\t\treturn v == 0\n+\tcase int16:\n+\t\treturn v == 0\n+\tcase int32:\n+\t\treturn v == 0\n+\tcase int64:\n+\t\treturn v == 0\n+\tcase uint:\n+\t\treturn v == 0\n+\tcase uint8:\n+\t\treturn v == 0\n+\tcase uint16:\n+\t\treturn v == 0\n+\tcase uint32:\n+\t\treturn v == 0\n+\tcase uint64:\n+\t\treturn v == 0\n+\tcase uintptr:\n+\t\treturn v == 0\n+\tcase float32:\n+\t\treturn v == 0.0\n+\tcase float64:\n+\t\treturn v == 0.0\n+\tcase complex64:\n+\t\treturn v == 0+0i\n+\tcase complex128:\n+\t\treturn v == 0+0i\n+\tcase string:\n+\t\treturn v == \"\"\n+\tcase []bool:\n+\t\treturn len(v) == 0\n+\tcase []int:\n+\t\treturn len(v) == 0\n+\tcase []int8:\n+\t\treturn len(v) == 0\n+\tcase []int16:\n+\t\treturn len(v) == 0\n+\tcase []int32:\n+\t\treturn len(v) == 0\n+\tcase []int64:\n+\t\treturn len(v) == 0\n+\tcase []uint:\n+\t\treturn len(v) == 0\n+\tcase []uint8:\n+\t\treturn len(v) == 0\n+\tcase []uint16:\n+\t\treturn len(v) == 0\n+\tcase []uint32:\n+\t\treturn len(v) == 0\n+\tcase []uint64:\n+\t\treturn len(v) == 0\n+\tcase []uintptr:\n+\t\treturn len(v) == 0\n+\tcase []float32:\n+\t\treturn len(v) == 0\n+\tcase []float64:\n+\t\treturn len(v) == 0\n+\tcase []complex64:\n+\t\treturn len(v) == 0\n+\tcase []complex128:\n+\t\treturn len(v) == 0\n+\tcase []string:\n+\t\treturn len(v) == 0\n+\tdefault:\n+\t\t// Slow path using reflection\n+\t\treturn reflect.DeepEqual(x, reflect.Zero(reflect.TypeOf(x)).Interface())",
        "comment_created_at": "2023-12-12T19:16:49+00:00",
        "comment_author": "sixcolors",
        "comment_body": "https://github.com/gofiber/fiber/pull/2760/commits/c228dbd3c4c1fcc05c4508e568e31594bafa3446 aligns switch case with go conventions by removing slice cases and updating tests.",
        "pr_file_module": null
      }
    ]
  }
]