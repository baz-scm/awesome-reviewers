[
  {
    "discussion_id": "1624792829",
    "pr_number": 3021,
    "pr_file": "middleware/csrf/csrf.go",
    "created_at": "2024-06-03T17:08:36+00:00",
    "commented_code": "ErrRefererNoMatch  = errors.New(\"referer does not match host and is not a trusted origin\")\n \tErrOriginInvalid   = errors.New(\"origin invalid\")\n \tErrOriginNoMatch   = errors.New(\"origin does not match host and is not a trusted origin\")\n-\terrOriginNotFound  = errors.New(\"origin not supplied or is null\") // internal error, will not be returned to the user\n-\tdummyValue         = []byte{'+'}\n+\tErrNotGetStorage   = errors.New(\"unable to retrieve data from CSRF storage\")",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1624792829",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3021,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1624792829",
        "commented_code": "@@ -18,8 +19,10 @@ var (\n \tErrRefererNoMatch  = errors.New(\"referer does not match host and is not a trusted origin\")\n \tErrOriginInvalid   = errors.New(\"origin invalid\")\n \tErrOriginNoMatch   = errors.New(\"origin does not match host and is not a trusted origin\")\n-\terrOriginNotFound  = errors.New(\"origin not supplied or is null\") // internal error, will not be returned to the user\n-\tdummyValue         = []byte{'+'}\n+\tErrNotGetStorage   = errors.New(\"unable to retrieve data from CSRF storage\")",
        "comment_created_at": "2024-06-03T17:08:36+00:00",
        "comment_author": "sixcolors",
        "comment_body": "We need to ensure error naming continuity and also consider including an error for when the token cannot be saved to storage.\n\nError naming continuity: Err + [Subject] + [Error Condition]\n\n```suggestion\n\tErrStorageRetrievalFailed = errors.New(\"unable to retrieve data from CSRF storage\")\n\tErrStorageSaveFailed      = errors.New(\"unable to save data to CSRF storage\")\n```\n\nAdditionally, make sure to apply these changes in the relevant *.manager.go file(s).",
        "pr_file_module": null
      },
      {
        "comment_id": "1628106369",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3021,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1624792829",
        "commented_code": "@@ -18,8 +19,10 @@ var (\n \tErrRefererNoMatch  = errors.New(\"referer does not match host and is not a trusted origin\")\n \tErrOriginInvalid   = errors.New(\"origin invalid\")\n \tErrOriginNoMatch   = errors.New(\"origin does not match host and is not a trusted origin\")\n-\terrOriginNotFound  = errors.New(\"origin not supplied or is null\") // internal error, will not be returned to the user\n-\tdummyValue         = []byte{'+'}\n+\tErrNotGetStorage   = errors.New(\"unable to retrieve data from CSRF storage\")",
        "comment_created_at": "2024-06-05T16:47:31+00:00",
        "comment_author": "renanbastos93",
        "comment_body": "done in local.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2086661416",
    "pr_number": 3434,
    "pr_file": "services_benchmark_test.go",
    "created_at": "2025-05-13T12:06:06+00:00",
    "commented_code": "+package fiber\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func BenchmarkStartServices(b *testing.B) {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2086661416",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3434,
        "pr_file": "services_benchmark_test.go",
        "discussion_id": "2086661416",
        "commented_code": "@@ -0,0 +1,261 @@\n+package fiber\n+\n+import (\n+\t\"context\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func BenchmarkStartServices(b *testing.B) {",
        "comment_created_at": "2025-05-13T12:06:06+00:00",
        "comment_author": "gaby",
        "comment_body": "All the benchmarks and tests should have an underscore \"Benchmark_\" and \"Test_\" for consistency with the other files.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2007577669",
    "pr_number": 3359,
    "pr_file": "middleware/logger/format.go",
    "created_at": "2025-03-21T13:25:51+00:00",
    "commented_code": "+package logger\n+\n+const (\n+\t// Fiber's default logger\n+\tFormatDefault = \"[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\n\"",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2007577669",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3359,
        "pr_file": "middleware/logger/format.go",
        "discussion_id": "2007577669",
        "commented_code": "@@ -0,0 +1,25 @@\n+package logger\n+\n+const (\n+\t// Fiber's default logger\n+\tFormatDefault = \"[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n\"",
        "comment_created_at": "2025-03-21T13:25:51+00:00",
        "comment_author": "gaby",
        "comment_body": "The naming here could use some help:\r\n\r\n- DefaultFormat\r\n- CommonLogFormat (CLF)\r\n- CombinedLogFormat\r\n- JSONFormat\r\n- ECSFormat",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1988147966",
    "pr_number": 3339,
    "pr_file": "middleware/session/session.go",
    "created_at": "2025-03-10T23:25:03+00:00",
    "commented_code": "func (s *Session) setAbsExpiration(absExpiration time.Time) {\n \ts.Set(absExpirationKey, absExpiration)\n }\n+\n+// FromGoContext returns the Session from the go context.\n+// If there is no session, nil is returned.\n+func FromGoContext(ctx context.Context) *Session {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1988147966",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3339,
        "pr_file": "middleware/session/session.go",
        "discussion_id": "1988147966",
        "commented_code": "@@ -511,3 +521,15 @@ func (s *Session) isAbsExpired() bool {\n func (s *Session) setAbsExpiration(absExpiration time.Time) {\n \ts.Set(absExpirationKey, absExpiration)\n }\n+\n+// FromGoContext returns the Session from the go context.\n+// If there is no session, nil is returned.\n+func FromGoContext(ctx context.Context) *Session {",
        "comment_created_at": "2025-03-10T23:25:03+00:00",
        "comment_author": "gaby",
        "comment_body": "We should probably rename this to `FromContext()`",
        "pr_file_module": null
      },
      {
        "comment_id": "1988148711",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3339,
        "pr_file": "middleware/session/session.go",
        "discussion_id": "1988147966",
        "commented_code": "@@ -511,3 +521,15 @@ func (s *Session) isAbsExpired() bool {\n func (s *Session) setAbsExpiration(absExpiration time.Time) {\n \ts.Set(absExpirationKey, absExpiration)\n }\n+\n+// FromGoContext returns the Session from the go context.\n+// If there is no session, nil is returned.\n+func FromGoContext(ctx context.Context) *Session {",
        "comment_created_at": "2025-03-10T23:26:01+00:00",
        "comment_author": "gaby",
        "comment_body": "Thoughts? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1988778710",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3339,
        "pr_file": "middleware/session/session.go",
        "discussion_id": "1988147966",
        "commented_code": "@@ -511,3 +521,15 @@ func (s *Session) isAbsExpired() bool {\n func (s *Session) setAbsExpiration(absExpiration time.Time) {\n \ts.Set(absExpirationKey, absExpiration)\n }\n+\n+// FromGoContext returns the Session from the go context.\n+// If there is no session, nil is returned.\n+func FromGoContext(ctx context.Context) *Session {",
        "comment_created_at": "2025-03-11T09:22:34+00:00",
        "comment_author": "JIeJaitt",
        "comment_body": "@gaby ok, i will change it\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1871447376",
    "pr_number": 3228,
    "pr_file": "client/request.go",
    "created_at": "2024-12-05T14:06:26+00:00",
    "commented_code": "return res\n }\n \n+// FormDatas method returns all form datas in request instance.\n+// You can use maps.Collect() to collect all cookies into a map.\n+//\n+// The returned value is valid until the request object is released.\n+// Any future calls to FormDatas method will return the modified value. Do not store references to returned value. Make copies instead.\n+func (r *Request) FormDatas() iter.Seq2[string, []string] {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1871447376",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3228,
        "pr_file": "client/request.go",
        "discussion_id": "1871447376",
        "commented_code": "@@ -376,6 +454,33 @@ func (r *Request) FormData(key string) []string {\n \treturn res\n }\n \n+// FormDatas method returns all form datas in request instance.\n+// You can use maps.Collect() to collect all cookies into a map.\n+//\n+// The returned value is valid until the request object is released.\n+// Any future calls to FormDatas method will return the modified value. Do not store references to returned value. Make copies instead.\n+func (r *Request) FormDatas() iter.Seq2[string, []string] {",
        "comment_created_at": "2024-12-05T14:06:26+00:00",
        "comment_author": "gaby",
        "comment_body": "We should rename this since `Datas` is not an english word. An option is `AllFormData()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1864270324",
    "pr_number": 3153,
    "pr_file": "log/default.go",
    "created_at": "2024-11-30T14:29:18+00:00",
    "commented_code": "l.stdlog.SetOutput(writer)\n }\n \n+// GetLoggerInstance returns the logger instance. It can be used to adjust the logger configurations in case of need.\n+func (l *defaultLogger) GetLoggerInstance() any {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1864270324",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3153,
        "pr_file": "log/default.go",
        "discussion_id": "1864270324",
        "commented_code": "@@ -210,6 +210,11 @@ func (l *defaultLogger) SetOutput(writer io.Writer) {\n \tl.stdlog.SetOutput(writer)\n }\n \n+// GetLoggerInstance returns the logger instance. It can be used to adjust the logger configurations in case of need.\n+func (l *defaultLogger) GetLoggerInstance() any {",
        "comment_created_at": "2024-11-30T14:29:18+00:00",
        "comment_author": "gaby",
        "comment_body": "We should rename this to `GetLogger()` or `Logger()` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1864271416",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3153,
        "pr_file": "log/default.go",
        "discussion_id": "1864270324",
        "commented_code": "@@ -210,6 +210,11 @@ func (l *defaultLogger) SetOutput(writer io.Writer) {\n \tl.stdlog.SetOutput(writer)\n }\n \n+// GetLoggerInstance returns the logger instance. It can be used to adjust the logger configurations in case of need.\n+func (l *defaultLogger) GetLoggerInstance() any {",
        "comment_created_at": "2024-11-30T14:33:30+00:00",
        "comment_author": "gaby",
        "comment_body": "Probably `Logger()`  to match `ControlLogger`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1641987844",
    "pr_number": 3028,
    "pr_file": "middleware/keyauth/config.go",
    "created_at": "2024-06-16T21:46:49+00:00",
    "commented_code": "\"github.com/gofiber/fiber/v3\"\n )\n \n+type KeyauthKeyLookupFunc func(c fiber.Ctx) (string, error)",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1641987844",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3028,
        "pr_file": "middleware/keyauth/config.go",
        "discussion_id": "1641987844",
        "commented_code": "@@ -6,6 +6,8 @@ import (\n \t\"github.com/gofiber/fiber/v3\"\n )\n \n+type KeyauthKeyLookupFunc func(c fiber.Ctx) (string, error)",
        "comment_created_at": "2024-06-16T21:46:49+00:00",
        "comment_author": "sixcolors",
        "comment_body": "Since its package is keylookup, there's no need to repeat it in the typedef.\n```suggestion\ntype KeyLookupFunc func(c fiber.Ctx) (string, error)\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1463380443",
    "pr_number": 2807,
    "pr_file": "app.go",
    "created_at": "2024-01-23T14:38:46+00:00",
    "commented_code": "app.newCtxFunc = function\n }\n \n+// RegisterCustomConstraint allows to register custom constraint.\n+func (app *App) RegisterCustomConstraint(constraint CustomConstraint) {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1463380443",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2807,
        "pr_file": "app.go",
        "discussion_id": "1463380443",
        "commented_code": "@@ -588,6 +590,11 @@ func (app *App) NewCtxFunc(function func(app *App) CustomCtx) {\n \tapp.newCtxFunc = function\n }\n \n+// RegisterCustomConstraint allows to register custom constraint.\n+func (app *App) RegisterCustomConstraint(constraint CustomConstraint) {",
        "comment_created_at": "2024-01-23T14:38:46+00:00",
        "comment_author": "gaby",
        "comment_body": "Consider renaming this to `RegisterConstraint()` like the original issue suggested.",
        "pr_file_module": null
      },
      {
        "comment_id": "1463632169",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2807,
        "pr_file": "app.go",
        "discussion_id": "1463380443",
        "commented_code": "@@ -588,6 +590,11 @@ func (app *App) NewCtxFunc(function func(app *App) CustomCtx) {\n \tapp.newCtxFunc = function\n }\n \n+// RegisterCustomConstraint allows to register custom constraint.\n+func (app *App) RegisterCustomConstraint(constraint CustomConstraint) {",
        "comment_created_at": "2024-01-23T16:59:43+00:00",
        "comment_author": "sixcolors",
        "comment_body": "The submitted func name seems to follow convention of other funcs like `RegisterCustomBinder()`, thoughts?",
        "pr_file_module": null
      },
      {
        "comment_id": "1467176405",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2807,
        "pr_file": "app.go",
        "discussion_id": "1463380443",
        "commented_code": "@@ -588,6 +590,11 @@ func (app *App) NewCtxFunc(function func(app *App) CustomCtx) {\n \tapp.newCtxFunc = function\n }\n \n+// RegisterCustomConstraint allows to register custom constraint.\n+func (app *App) RegisterCustomConstraint(constraint CustomConstraint) {",
        "comment_created_at": "2024-01-26T02:50:37+00:00",
        "comment_author": "gaby",
        "comment_body": "Yeah,  fair if we have functions with that convention to keep it as `RegisterCustomConstraint()`",
        "pr_file_module": null
      },
      {
        "comment_id": "1468906810",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2807,
        "pr_file": "app.go",
        "discussion_id": "1463380443",
        "commented_code": "@@ -588,6 +590,11 @@ func (app *App) NewCtxFunc(function func(app *App) CustomCtx) {\n \tapp.newCtxFunc = function\n }\n \n+// RegisterCustomConstraint allows to register custom constraint.\n+func (app *App) RegisterCustomConstraint(constraint CustomConstraint) {",
        "comment_created_at": "2024-01-28T17:27:52+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "ok, then lets keep it",
        "pr_file_module": null
      }
    ]
  }
]