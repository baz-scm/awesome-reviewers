[
  {
    "discussion_id": "1871441980",
    "pr_number": 3228,
    "pr_file": "docs/client/request.md",
    "created_at": "2024-12-05T14:02:47+00:00",
    "commented_code": "func (r *Request) Header(key string) []string\n ```\n \n+### Headers",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1871441980",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3228,
        "pr_file": "docs/client/request.md",
        "discussion_id": "1871441980",
        "commented_code": "@@ -211,6 +211,37 @@ Header method returns header value via key, this method will visit all field in\n func (r *Request) Header(key string) []string\n ```\n \n+### Headers",
        "comment_created_at": "2024-12-05T14:02:47+00:00",
        "comment_author": "gaby",
        "comment_body": "General comment for docs:\r\n\r\nWe mention in multiple places the usage of `maps.Collect()` but never provide an example. Probably worth adding an example to avoid follow-on questions from users.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1780001251",
    "pr_number": 3016,
    "pr_file": "docs/middleware/session.md",
    "created_at": "2024-09-29T09:46:45+00:00",
    "commented_code": "id: session\n ---\n \n-# Session\n+# Session Middleware for [Fiber](https://github.com/gofiber/fiber)\n \n-Session middleware for [Fiber](https://github.com/gofiber/fiber).\n+The `session` middleware provides session management for Fiber applications, utilizing the [Storage](https://github.com/gofiber/storage) package for multi-database support via a unified interface. By default, session data is stored in memory, but custom storage options are easily configurable (see examples below).\n+\n+As of v3, we recommend using the middleware handler for session management. However, for backward compatibility, v2's session methods are still available, allowing you to continue using the session management techniques from earlier versions of Fiber. Both methods are demonstrated in the examples.\n+\n+## Table of Contents\n+\n+- [Migration Guide](#migration-guide)\n+  - [v2 to v3](#v2-to-v3)\n+- [Types](#types)\n+  - [Config](#config)\n+  - [Middleware](#middleware)\n+  - [Session](#session)\n+  - [Store](#store)\n+- [Signatures](#signatures)\n+  - [Session Package Functions](#session-package-functions)\n+  - [Config Methods](#config-methods)\n+  - [Middleware Methods](#middleware-methods)\n+  - [Session Methods](#session-methods)\n+  - [Store Methods](#store-methods)\n+- [Examples](#examples)\n+  - [Middleware Handler (Recommended)](#middleware-handler-recommended)\n+  - [Custom Storage Example](#custom-storage-example)\n+  - [Session Without Middleware Handler](#session-without-middleware-handler)\n+  - [Custom Types in Session Data](#custom-types-in-session-data)\n+- [Config](#config)\n+- [Default Config](#default-config)\n+\n+## Migration Guide\n+\n+### v2 to v3\n+\n+- **Function Signature Change**: In v3, the `New` function now returns a middleware handler instead of a `*Store`. To access the store, use the `Store` method on `*Middleware` (obtained from `session.FromContext(c)` in a handler) or use `NewStore` or `NewWithStore`.\n+\n+- **Session Lifecycle Management**: The `*Store.Save` method no longer releases the instance automatically. You must manually call `sess.Release()` after using the session to manage its lifecycle properly.\n+\n+- **Expiration Handling**: Previously, the `Expiration` field represented the maximum session duration before expiration. However, it would extend every time the session was saved, making its behavior a mix between session duration and session idle timeout. The `Expiration` field has been removed and replaced with `IdleTimeout` and `AbsoluteTimeout` fields, which explicitly defines the session's idle and absolute timeout periods.\n+\n+For more details about Fiber v3, see [What\u2019s New](https://github.com/gofiber/fiber/blob/main/docs/whats_new.md).\n+\n+### Migrating v2 to v3 Example (Legacy Approach)\n+\n+To convert a v2 example to use the v3 legacy approach, follow these steps:\n+\n+1. **Initialize with Store**: Use `session.NewStore()` to obtain a store.\n+2. **Retrieve Session**: Access the session store using the `store.Get(c)` method.\n+3. **Release Session**: Ensure that you call `sess.Release()` after you are done with the session to manage its lifecycle.\n \n :::note\n-This middleware uses our [Storage](https://github.com/gofiber/storage) package to support various databases through a single interface. The default configuration for this middleware saves data to memory, see the examples below for other databases.\n+When using the legacy approach, the IdleTimeout will be updated when the session is saved.\n :::\n \n+#### Example Conversion\n+\n+**v2 Example:**\n+\n+```go\n+store := session.New()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+**v3 Legacy Approach:**\n+\n+```go\n+store := session.NewStore()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+    defer sess.Release() // Important: Release the session\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+### v3 Example (Recommended Middleware Handler)\n+\n+Do not call `sess.Release()` when using the middleware handler. `sess.Save()` is also not required, as the middleware automatically saves the session data.\n+\n+For the recommended approach, use the middleware handler. See the [Middleware Handler (Recommended)](#middleware-handler-recommended) section for details.\n+\n+## Types\n+\n+### Config\n+\n+Defines the configuration options for the session middleware.\n+\n+```go\n+type Config struct {\n+    Storage           fiber.Storage\n+    Next              func(c *fiber.Ctx) bool\n+    Store             *Store\n+    ErrorHandler      func(*fiber.Ctx, error)\n+    KeyGenerator      func() string\n+    KeyLookup         string\n+    CookieDomain      string\n+    CookiePath        string\n+    CookieSameSite    string\n+    IdleTimeout       time.Duration\n+    AbsoluteTimeout   time.Duration",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1780001251",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3016,
        "pr_file": "docs/middleware/session.md",
        "discussion_id": "1780001251",
        "commented_code": "@@ -2,142 +2,453 @@\n id: session\n ---\n \n-# Session\n+# Session Middleware for [Fiber](https://github.com/gofiber/fiber)\n \n-Session middleware for [Fiber](https://github.com/gofiber/fiber).\n+The `session` middleware provides session management for Fiber applications, utilizing the [Storage](https://github.com/gofiber/storage) package for multi-database support via a unified interface. By default, session data is stored in memory, but custom storage options are easily configurable (see examples below).\n+\n+As of v3, we recommend using the middleware handler for session management. However, for backward compatibility, v2's session methods are still available, allowing you to continue using the session management techniques from earlier versions of Fiber. Both methods are demonstrated in the examples.\n+\n+## Table of Contents\n+\n+- [Migration Guide](#migration-guide)\n+  - [v2 to v3](#v2-to-v3)\n+- [Types](#types)\n+  - [Config](#config)\n+  - [Middleware](#middleware)\n+  - [Session](#session)\n+  - [Store](#store)\n+- [Signatures](#signatures)\n+  - [Session Package Functions](#session-package-functions)\n+  - [Config Methods](#config-methods)\n+  - [Middleware Methods](#middleware-methods)\n+  - [Session Methods](#session-methods)\n+  - [Store Methods](#store-methods)\n+- [Examples](#examples)\n+  - [Middleware Handler (Recommended)](#middleware-handler-recommended)\n+  - [Custom Storage Example](#custom-storage-example)\n+  - [Session Without Middleware Handler](#session-without-middleware-handler)\n+  - [Custom Types in Session Data](#custom-types-in-session-data)\n+- [Config](#config)\n+- [Default Config](#default-config)\n+\n+## Migration Guide\n+\n+### v2 to v3\n+\n+- **Function Signature Change**: In v3, the `New` function now returns a middleware handler instead of a `*Store`. To access the store, use the `Store` method on `*Middleware` (obtained from `session.FromContext(c)` in a handler) or use `NewStore` or `NewWithStore`.\n+\n+- **Session Lifecycle Management**: The `*Store.Save` method no longer releases the instance automatically. You must manually call `sess.Release()` after using the session to manage its lifecycle properly.\n+\n+- **Expiration Handling**: Previously, the `Expiration` field represented the maximum session duration before expiration. However, it would extend every time the session was saved, making its behavior a mix between session duration and session idle timeout. The `Expiration` field has been removed and replaced with `IdleTimeout` and `AbsoluteTimeout` fields, which explicitly defines the session's idle and absolute timeout periods.\n+\n+For more details about Fiber v3, see [What\u2019s New](https://github.com/gofiber/fiber/blob/main/docs/whats_new.md).\n+\n+### Migrating v2 to v3 Example (Legacy Approach)\n+\n+To convert a v2 example to use the v3 legacy approach, follow these steps:\n+\n+1. **Initialize with Store**: Use `session.NewStore()` to obtain a store.\n+2. **Retrieve Session**: Access the session store using the `store.Get(c)` method.\n+3. **Release Session**: Ensure that you call `sess.Release()` after you are done with the session to manage its lifecycle.\n \n :::note\n-This middleware uses our [Storage](https://github.com/gofiber/storage) package to support various databases through a single interface. The default configuration for this middleware saves data to memory, see the examples below for other databases.\n+When using the legacy approach, the IdleTimeout will be updated when the session is saved.\n :::\n \n+#### Example Conversion\n+\n+**v2 Example:**\n+\n+```go\n+store := session.New()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+**v3 Legacy Approach:**\n+\n+```go\n+store := session.NewStore()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+    defer sess.Release() // Important: Release the session\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+### v3 Example (Recommended Middleware Handler)\n+\n+Do not call `sess.Release()` when using the middleware handler. `sess.Save()` is also not required, as the middleware automatically saves the session data.\n+\n+For the recommended approach, use the middleware handler. See the [Middleware Handler (Recommended)](#middleware-handler-recommended) section for details.\n+\n+## Types\n+\n+### Config\n+\n+Defines the configuration options for the session middleware.\n+\n+```go\n+type Config struct {\n+    Storage           fiber.Storage\n+    Next              func(c *fiber.Ctx) bool\n+    Store             *Store\n+    ErrorHandler      func(*fiber.Ctx, error)\n+    KeyGenerator      func() string\n+    KeyLookup         string\n+    CookieDomain      string\n+    CookiePath        string\n+    CookieSameSite    string\n+    IdleTimeout       time.Duration\n+    AbsoluteTimeout   time.Duration",
        "comment_created_at": "2024-09-29T09:46:45+00:00",
        "comment_author": "efectn",
        "comment_body": "An example in session.md docs would be cool to demonstrate difference between absolute and idle timeouts",
        "pr_file_module": null
      },
      {
        "comment_id": "1780001316",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3016,
        "pr_file": "docs/middleware/session.md",
        "discussion_id": "1780001251",
        "commented_code": "@@ -2,142 +2,453 @@\n id: session\n ---\n \n-# Session\n+# Session Middleware for [Fiber](https://github.com/gofiber/fiber)\n \n-Session middleware for [Fiber](https://github.com/gofiber/fiber).\n+The `session` middleware provides session management for Fiber applications, utilizing the [Storage](https://github.com/gofiber/storage) package for multi-database support via a unified interface. By default, session data is stored in memory, but custom storage options are easily configurable (see examples below).\n+\n+As of v3, we recommend using the middleware handler for session management. However, for backward compatibility, v2's session methods are still available, allowing you to continue using the session management techniques from earlier versions of Fiber. Both methods are demonstrated in the examples.\n+\n+## Table of Contents\n+\n+- [Migration Guide](#migration-guide)\n+  - [v2 to v3](#v2-to-v3)\n+- [Types](#types)\n+  - [Config](#config)\n+  - [Middleware](#middleware)\n+  - [Session](#session)\n+  - [Store](#store)\n+- [Signatures](#signatures)\n+  - [Session Package Functions](#session-package-functions)\n+  - [Config Methods](#config-methods)\n+  - [Middleware Methods](#middleware-methods)\n+  - [Session Methods](#session-methods)\n+  - [Store Methods](#store-methods)\n+- [Examples](#examples)\n+  - [Middleware Handler (Recommended)](#middleware-handler-recommended)\n+  - [Custom Storage Example](#custom-storage-example)\n+  - [Session Without Middleware Handler](#session-without-middleware-handler)\n+  - [Custom Types in Session Data](#custom-types-in-session-data)\n+- [Config](#config)\n+- [Default Config](#default-config)\n+\n+## Migration Guide\n+\n+### v2 to v3\n+\n+- **Function Signature Change**: In v3, the `New` function now returns a middleware handler instead of a `*Store`. To access the store, use the `Store` method on `*Middleware` (obtained from `session.FromContext(c)` in a handler) or use `NewStore` or `NewWithStore`.\n+\n+- **Session Lifecycle Management**: The `*Store.Save` method no longer releases the instance automatically. You must manually call `sess.Release()` after using the session to manage its lifecycle properly.\n+\n+- **Expiration Handling**: Previously, the `Expiration` field represented the maximum session duration before expiration. However, it would extend every time the session was saved, making its behavior a mix between session duration and session idle timeout. The `Expiration` field has been removed and replaced with `IdleTimeout` and `AbsoluteTimeout` fields, which explicitly defines the session's idle and absolute timeout periods.\n+\n+For more details about Fiber v3, see [What\u2019s New](https://github.com/gofiber/fiber/blob/main/docs/whats_new.md).\n+\n+### Migrating v2 to v3 Example (Legacy Approach)\n+\n+To convert a v2 example to use the v3 legacy approach, follow these steps:\n+\n+1. **Initialize with Store**: Use `session.NewStore()` to obtain a store.\n+2. **Retrieve Session**: Access the session store using the `store.Get(c)` method.\n+3. **Release Session**: Ensure that you call `sess.Release()` after you are done with the session to manage its lifecycle.\n \n :::note\n-This middleware uses our [Storage](https://github.com/gofiber/storage) package to support various databases through a single interface. The default configuration for this middleware saves data to memory, see the examples below for other databases.\n+When using the legacy approach, the IdleTimeout will be updated when the session is saved.\n :::\n \n+#### Example Conversion\n+\n+**v2 Example:**\n+\n+```go\n+store := session.New()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+**v3 Legacy Approach:**\n+\n+```go\n+store := session.NewStore()\n+\n+app.Get(\"/\", func(c *fiber.Ctx) error {\n+    sess, err := store.Get(c)\n+    if err != nil {\n+        return err\n+    }\n+    defer sess.Release() // Important: Release the session\n+\n+    key, ok := sess.Get(\"key\").(string)\n+    if !ok {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    sess.Set(\"key\", \"value\")\n+\n+    err = sess.Save()\n+    if err != nil {\n+        return c.SendStatus(fiber.StatusInternalServerError)\n+    }\n+\n+    return nil\n+})\n+```\n+\n+### v3 Example (Recommended Middleware Handler)\n+\n+Do not call `sess.Release()` when using the middleware handler. `sess.Save()` is also not required, as the middleware automatically saves the session data.\n+\n+For the recommended approach, use the middleware handler. See the [Middleware Handler (Recommended)](#middleware-handler-recommended) section for details.\n+\n+## Types\n+\n+### Config\n+\n+Defines the configuration options for the session middleware.\n+\n+```go\n+type Config struct {\n+    Storage           fiber.Storage\n+    Next              func(c *fiber.Ctx) bool\n+    Store             *Store\n+    ErrorHandler      func(*fiber.Ctx, error)\n+    KeyGenerator      func() string\n+    KeyLookup         string\n+    CookieDomain      string\n+    CookiePath        string\n+    CookieSameSite    string\n+    IdleTimeout       time.Duration\n+    AbsoluteTimeout   time.Duration",
        "comment_created_at": "2024-09-29T09:47:07+00:00",
        "comment_author": "efectn",
        "comment_body": "Like what's new docs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1597578207",
    "pr_number": 2991,
    "pr_file": "docs/client/response.md",
    "created_at": "2024-05-12T08:10:49+00:00",
    "commented_code": "+---\n+id: response\n+title: \ud83d\udce5 Response\n+description: >-\n+  Response methods of Gofiber HTTP client.\n+sidebar_position: 3\n+---\n+\n+The `Response` structure in Gofiber's HTTP client represents the server's response to an HTTP request. It contains all the necessary information received from the server. This includes:\n+\n+- **Status Code**: The HTTP status code returned by the server (e.g., 200 OK, 404 Not Found).\n+- **Headers**: HTTP headers received from the server that provide additional information about the response.\n+- **Body**: The data received from the server, typically in the form of a JSON, XML, or plain text format.\n+- **Cookies**: Any cookies sent by the server along with the response.\n+\n+This structure allows users to easily access and manage the data returned by the server, facilitating efficient handling of HTTP responses.\n+\n+```go\n+type Response struct {\n+\tclient  *Client\n+\trequest *Request\n+\tcookie  []*fasthttp.Cookie\n+\n+\tRawResponse *fasthttp.Response\n+}\n+```\n+\n+## AcquireResponse\n+\n+AcquireResponse returns an empty response object from the pool.\n+The returned response may be returned to the pool with ReleaseResponse when no longer needed.\n+This allows reducing GC load.\n+\n+```go title=\"Signature\"\n+func AcquireResponse() *Response\n+```\n+\n+## ReleaseResponse\n+\n+ReleaseResponse returns the object acquired via AcquireResponse to the pool.\n+Do not access the released Response object, otherwise, data races may occur.\n+\n+```go title=\"Signature\"\n+func ReleaseResponse(resp *Response)\n+```\n+\n+## Status",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1597578207",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2991,
        "pr_file": "docs/client/response.md",
        "discussion_id": "1597578207",
        "commented_code": "@@ -0,0 +1,141 @@\n+---\n+id: response\n+title: \ud83d\udce5 Response\n+description: >-\n+  Response methods of Gofiber HTTP client.\n+sidebar_position: 3\n+---\n+\n+The `Response` structure in Gofiber's HTTP client represents the server's response to an HTTP request. It contains all the necessary information received from the server. This includes:\n+\n+- **Status Code**: The HTTP status code returned by the server (e.g., 200 OK, 404 Not Found).\n+- **Headers**: HTTP headers received from the server that provide additional information about the response.\n+- **Body**: The data received from the server, typically in the form of a JSON, XML, or plain text format.\n+- **Cookies**: Any cookies sent by the server along with the response.\n+\n+This structure allows users to easily access and manage the data returned by the server, facilitating efficient handling of HTTP responses.\n+\n+```go\n+type Response struct {\n+\tclient  *Client\n+\trequest *Request\n+\tcookie  []*fasthttp.Cookie\n+\n+\tRawResponse *fasthttp.Response\n+}\n+```\n+\n+## AcquireResponse\n+\n+AcquireResponse returns an empty response object from the pool.\n+The returned response may be returned to the pool with ReleaseResponse when no longer needed.\n+This allows reducing GC load.\n+\n+```go title=\"Signature\"\n+func AcquireResponse() *Response\n+```\n+\n+## ReleaseResponse\n+\n+ReleaseResponse returns the object acquired via AcquireResponse to the pool.\n+Do not access the released Response object, otherwise, data races may occur.\n+\n+```go title=\"Signature\"\n+func ReleaseResponse(resp *Response)\n+```\n+\n+## Status",
        "comment_created_at": "2024-05-12T08:10:49+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "examples for the use of some methods (everywhere) would be cool ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1512712127",
    "pr_number": 2900,
    "pr_file": "docs/api/middleware/proxy.md",
    "created_at": "2024-03-05T13:02:09+00:00",
    "commented_code": "| ReadBufferSize  | `int`                                          | Per-connection buffer size for requests' reading. This also limits the maximum header size. Increase this buffer if your clients send multi-KB RequestURIs and/or multi-KB headers (for example, BIG cookies). | (Not specified) |\n | WriteBufferSize | `int`                                          | Per-connection buffer size for responses' writing.                                                                                                                                                             | (Not specified) |\n | TlsConfig       | `*tls.Config` (or `*fasthttp.TLSConfig` in v3) | TLS config for the HTTP client.                                                                                                                                                                                | `nil`           |\n+| DialDualStack       | `bool`                                     | Client will attempt to connect to both ipv4 and ipv6 host addresses if set to true.                                                                                                                            | `false`           |",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1512791481",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2900,
        "pr_file": "docs/api/middleware/proxy.md",
        "discussion_id": "1512712127",
        "commented_code": "@@ -151,6 +151,7 @@ app.Use(proxy.BalancerForward([]string{\n | ReadBufferSize  | `int`                                          | Per-connection buffer size for requests' reading. This also limits the maximum header size. Increase this buffer if your clients send multi-KB RequestURIs and/or multi-KB headers (for example, BIG cookies). | (Not specified) |\n | WriteBufferSize | `int`                                          | Per-connection buffer size for responses' writing.                                                                                                                                                             | (Not specified) |\n | TlsConfig       | `*tls.Config` (or `*fasthttp.TLSConfig` in v3) | TLS config for the HTTP client.                                                                                                                                                                                | `nil`           |\n+| DialDualStack       | `bool`                                     | Client will attempt to connect to both ipv4 and ipv6 host addresses if set to true.                                                                                                                            | `false`           |",
        "comment_created_at": "2024-03-05T13:02:09+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "@negrel \r\n> Consider adding a practical example or a more detailed explanation of the DialDualStack option's impact on proxy behavior to aid user understanding.\r\n\r\nis a good hint, could you do this\r\n\r\nonly a feature that is understandable and well documented will be found and used",
        "pr_file_module": null
      },
      {
        "comment_id": "1512813645",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2900,
        "pr_file": "docs/api/middleware/proxy.md",
        "discussion_id": "1512712127",
        "commented_code": "@@ -151,6 +151,7 @@ app.Use(proxy.BalancerForward([]string{\n | ReadBufferSize  | `int`                                          | Per-connection buffer size for requests' reading. This also limits the maximum header size. Increase this buffer if your clients send multi-KB RequestURIs and/or multi-KB headers (for example, BIG cookies). | (Not specified) |\n | WriteBufferSize | `int`                                          | Per-connection buffer size for responses' writing.                                                                                                                                                             | (Not specified) |\n | TlsConfig       | `*tls.Config` (or `*fasthttp.TLSConfig` in v3) | TLS config for the HTTP client.                                                                                                                                                                                | `nil`           |\n+| DialDualStack       | `bool`                                     | Client will attempt to connect to both ipv4 and ipv6 host addresses if set to true.                                                                                                                            | `false`           |",
        "comment_created_at": "2024-03-05T13:19:23+00:00",
        "comment_author": "negrel",
        "comment_body": "@ReneWerner87 I've added an example. Let me know if that suits you!",
        "pr_file_module": null
      }
    ]
  }
]