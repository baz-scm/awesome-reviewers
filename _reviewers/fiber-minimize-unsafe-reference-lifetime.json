[
  {
    "discussion_id": "2293024508",
    "pr_number": 3703,
    "pr_file": "docs/api/ctx.md",
    "created_at": "2025-08-22T08:02:59+00:00",
    "commented_code": "```\n \n :::info\n-Returned value is only valid within the handler. Do not store any references.  \n+Returned value is only valid within the handler. Do not store any references.\n Make copies or use the [**`Immutable`**](./ctx.md) setting instead. [Read more...](../#zero-allocation)\n :::\n \n+### CopyBytes\n+\n+Conditionally returns a safe copy of `b`. When the application is configured\n+with [`Immutable`](./ctx.md), the original slice is already safe to use and is\n+returned unchanged. Otherwise, a new copy is allocated.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyBytes(b []byte) []byte\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  body := c.Body()\n+  safe := c.CopyBytes(body)\n+  // ...\n+  return c.Send(safe)\n+})\n+```\n+\n+### CopyString\n+\n+Conditionally returns a safe copy of `s`. When [`Immutable`](./ctx.md) is\n+enabled, the string is returned as-is; otherwise a new copy is made.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyString(s string) string\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  name := c.Cookies(\"name\")\n+  safe := c.CopyString(name)",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2293024508",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3703,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "2293024508",
        "commented_code": "@@ -626,10 +626,47 @@ app.Get(\"/\", func(c fiber.Ctx) error {\n ```\n \n :::info\n-Returned value is only valid within the handler. Do not store any references.  \n+Returned value is only valid within the handler. Do not store any references.\n Make copies or use the [**`Immutable`**](./ctx.md) setting instead. [Read more...](../#zero-allocation)\n :::\n \n+### CopyBytes\n+\n+Conditionally returns a safe copy of `b`. When the application is configured\n+with [`Immutable`](./ctx.md), the original slice is already safe to use and is\n+returned unchanged. Otherwise, a new copy is allocated.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyBytes(b []byte) []byte\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  body := c.Body()\n+  safe := c.CopyBytes(body)\n+  // ...\n+  return c.Send(safe)\n+})\n+```\n+\n+### CopyString\n+\n+Conditionally returns a safe copy of `s`. When [`Immutable`](./ctx.md) is\n+enabled, the string is returned as-is; otherwise a new copy is made.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyString(s string) string\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  name := c.Cookies(\"name\")\n+  safe := c.CopyString(name)",
        "comment_created_at": "2025-08-22T08:02:59+00:00",
        "comment_author": "gaby",
        "comment_body": "This should probably be: `safe := c.CopyString(c.Cookies(\"name\"))`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2293026126",
    "pr_number": 3703,
    "pr_file": "docs/api/ctx.md",
    "created_at": "2025-08-22T08:03:50+00:00",
    "commented_code": "```\n \n :::info\n-Returned value is only valid within the handler. Do not store any references.  \n+Returned value is only valid within the handler. Do not store any references.\n Make copies or use the [**`Immutable`**](./ctx.md) setting instead. [Read more...](../#zero-allocation)\n :::\n \n+### CopyBytes\n+\n+Conditionally returns a safe copy of `b`. When the application is configured\n+with [`Immutable`](./ctx.md), the original slice is already safe to use and is\n+returned unchanged. Otherwise, a new copy is allocated.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyBytes(b []byte) []byte\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  body := c.Body()\n+  safe := c.CopyBytes(body)",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2293026126",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3703,
        "pr_file": "docs/api/ctx.md",
        "discussion_id": "2293026126",
        "commented_code": "@@ -626,10 +626,47 @@ app.Get(\"/\", func(c fiber.Ctx) error {\n ```\n \n :::info\n-Returned value is only valid within the handler. Do not store any references.  \n+Returned value is only valid within the handler. Do not store any references.\n Make copies or use the [**`Immutable`**](./ctx.md) setting instead. [Read more...](../#zero-allocation)\n :::\n \n+### CopyBytes\n+\n+Conditionally returns a safe copy of `b`. When the application is configured\n+with [`Immutable`](./ctx.md), the original slice is already safe to use and is\n+returned unchanged. Otherwise, a new copy is allocated.\n+\n+```go title=\"Signature\"\n+func (c fiber.Ctx) CopyBytes(b []byte) []byte\n+```\n+\n+```go title=\"Example\"\n+app.Get(\"/\", func(c fiber.Ctx) error {\n+  body := c.Body()\n+  safe := c.CopyBytes(body)",
        "comment_created_at": "2025-08-22T08:03:50+00:00",
        "comment_author": "gaby",
        "comment_body": "This should probably be: safe := c.CopyBytes(c.Body())`",
        "pr_file_module": null
      }
    ]
  }
]