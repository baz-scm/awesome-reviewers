[
  {
    "discussion_id": "957657121",
    "pr_number": 2006,
    "pr_file": "ctx.go",
    "created_at": "2022-08-29T18:12:20+00:00",
    "commented_code": "return body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "957657121",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2006,
        "pr_file": "ctx.go",
        "discussion_id": "957657121",
        "commented_code": "@@ -246,6 +264,14 @@ func (c *DefaultCtx) Body() []byte {\n \treturn body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
        "comment_created_at": "2022-08-29T18:12:20+00:00",
        "comment_author": "efectn",
        "comment_body": "I think these methods can be a part of Bind() by chaining",
        "pr_file_module": null
      },
      {
        "comment_id": "957665448",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2006,
        "pr_file": "ctx.go",
        "discussion_id": "957657121",
        "commented_code": "@@ -246,6 +264,14 @@ func (c *DefaultCtx) Body() []byte {\n \treturn body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
        "comment_created_at": "2022-08-29T18:22:39+00:00",
        "comment_author": "trim21",
        "comment_body": "Binds already have json and XML method with extra content-type header checking",
        "pr_file_module": null
      },
      {
        "comment_id": "959734521",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2006,
        "pr_file": "ctx.go",
        "discussion_id": "957657121",
        "commented_code": "@@ -246,6 +264,14 @@ func (c *DefaultCtx) Body() []byte {\n \treturn body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
        "comment_created_at": "2022-08-31T15:33:16+00:00",
        "comment_author": "efectn",
        "comment_body": "I think you can add them into the Bind(). And you can check content type by Should/Must",
        "pr_file_module": null
      },
      {
        "comment_id": "959741467",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2006,
        "pr_file": "ctx.go",
        "discussion_id": "957657121",
        "commented_code": "@@ -246,6 +264,14 @@ func (c *DefaultCtx) Body() []byte {\n \treturn body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
        "comment_created_at": "2022-08-31T15:39:34+00:00",
        "comment_author": "trim21",
        "comment_body": "should we rename `Should/Must` to `Strict`?",
        "pr_file_module": null
      },
      {
        "comment_id": "959816663",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2006,
        "pr_file": "ctx.go",
        "discussion_id": "957657121",
        "commented_code": "@@ -246,6 +264,14 @@ func (c *DefaultCtx) Body() []byte {\n \treturn body\n }\n \n+func (c *DefaultCtx) BodyJSON(v any) error {",
        "comment_created_at": "2022-08-31T16:55:16+00:00",
        "comment_author": "efectn",
        "comment_body": "Sounds good",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894594910",
    "pr_number": 3231,
    "pr_file": "binder/binder.go",
    "created_at": "2024-12-21T09:57:42+00:00",
    "commented_code": "ErrMapNotConvertable       = errors.New(\"binder: map is not convertable to map[string]string or map[string][]string\")\n )\n \n-// Init default binders for Fiber\n-var (\n-\tHeaderBinder     = &headerBinding{}\n-\tRespHeaderBinder = &respHeaderBinding{}\n-\tCookieBinder     = &cookieBinding{}\n-\tQueryBinder      = &queryBinding{}\n-\tFormBinder       = &formBinding{}\n-\tURIBinder        = &uriBinding{}\n-\tXMLBinder        = &xmlBinding{}\n-\tJSONBinder       = &jsonBinding{}\n-\tCBORBinder       = &cborBinding{}\n-)\n+var HeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &HeaderBinding{}\n+\t},\n+}\n+\n+var RespHeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &RespHeaderBinding{}\n+\t},\n+}\n+\n+var CookieBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CookieBinding{}\n+\t},\n+}\n+\n+var QueryBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &QueryBinding{}\n+\t},\n+}\n+\n+var FormBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &FormBinding{}\n+\t},\n+}\n+\n+var URIBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &URIBinding{}\n+\t},\n+}\n+\n+var XMLBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &XMLBinding{}\n+\t},\n+}\n+\n+var JSONBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &JSONBinding{}\n+\t},\n+}\n+\n+var CBORBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CBORBinding{}\n+\t},\n+}\n+\n+func GetFromThePool[T any](pool *sync.Pool) T {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1894594910",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3231,
        "pr_file": "binder/binder.go",
        "discussion_id": "1894594910",
        "commented_code": "@@ -10,15 +11,69 @@ var (\n \tErrMapNotConvertable       = errors.New(\"binder: map is not convertable to map[string]string or map[string][]string\")\n )\n \n-// Init default binders for Fiber\n-var (\n-\tHeaderBinder     = &headerBinding{}\n-\tRespHeaderBinder = &respHeaderBinding{}\n-\tCookieBinder     = &cookieBinding{}\n-\tQueryBinder      = &queryBinding{}\n-\tFormBinder       = &formBinding{}\n-\tURIBinder        = &uriBinding{}\n-\tXMLBinder        = &xmlBinding{}\n-\tJSONBinder       = &jsonBinding{}\n-\tCBORBinder       = &cborBinding{}\n-)\n+var HeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &HeaderBinding{}\n+\t},\n+}\n+\n+var RespHeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &RespHeaderBinding{}\n+\t},\n+}\n+\n+var CookieBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CookieBinding{}\n+\t},\n+}\n+\n+var QueryBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &QueryBinding{}\n+\t},\n+}\n+\n+var FormBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &FormBinding{}\n+\t},\n+}\n+\n+var URIBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &URIBinding{}\n+\t},\n+}\n+\n+var XMLBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &XMLBinding{}\n+\t},\n+}\n+\n+var JSONBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &JSONBinding{}\n+\t},\n+}\n+\n+var CBORBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CBORBinding{}\n+\t},\n+}\n+\n+func GetFromThePool[T any](pool *sync.Pool) T {",
        "comment_created_at": "2024-12-21T09:57:42+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "can we have an interface with the basic functions of a binder instead of any\r\n\r\n`Name`, `Reset`, `Bind` if possible",
        "pr_file_module": null
      },
      {
        "comment_id": "1895355939",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3231,
        "pr_file": "binder/binder.go",
        "discussion_id": "1894594910",
        "commented_code": "@@ -10,15 +11,69 @@ var (\n \tErrMapNotConvertable       = errors.New(\"binder: map is not convertable to map[string]string or map[string][]string\")\n )\n \n-// Init default binders for Fiber\n-var (\n-\tHeaderBinder     = &headerBinding{}\n-\tRespHeaderBinder = &respHeaderBinding{}\n-\tCookieBinder     = &cookieBinding{}\n-\tQueryBinder      = &queryBinding{}\n-\tFormBinder       = &formBinding{}\n-\tURIBinder        = &uriBinding{}\n-\tXMLBinder        = &xmlBinding{}\n-\tJSONBinder       = &jsonBinding{}\n-\tCBORBinder       = &cborBinding{}\n-)\n+var HeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &HeaderBinding{}\n+\t},\n+}\n+\n+var RespHeaderBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &RespHeaderBinding{}\n+\t},\n+}\n+\n+var CookieBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CookieBinding{}\n+\t},\n+}\n+\n+var QueryBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &QueryBinding{}\n+\t},\n+}\n+\n+var FormBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &FormBinding{}\n+\t},\n+}\n+\n+var URIBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &URIBinding{}\n+\t},\n+}\n+\n+var XMLBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &XMLBinding{}\n+\t},\n+}\n+\n+var JSONBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &JSONBinding{}\n+\t},\n+}\n+\n+var CBORBinderPool = sync.Pool{\n+\tNew: func() any {\n+\t\treturn &CBORBinding{}\n+\t},\n+}\n+\n+func GetFromThePool[T any](pool *sync.Pool) T {",
        "comment_created_at": "2024-12-23T07:30:38+00:00",
        "comment_author": "efectn",
        "comment_body": "> can we have an interface with the basic functions of a binder instead of any\r\n> \r\n> `Name`, `Reset`, `Bind` if possible\r\n\r\nWe could but some binders have different `Bind()` scheme such as URI vs Cookie etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894595068",
    "pr_number": 3231,
    "pr_file": "binder/form.go",
    "created_at": "2024-12-21T09:59:21+00:00",
    "commented_code": "}\n \n // BindMultipart parses the request body and returns the result.\n-func (b *formBinding) BindMultipart(reqCtx *fasthttp.RequestCtx, out any) error {\n-\tdata, err := reqCtx.MultipartForm()\n+func (b *FormBinding) BindMultipart(req *fasthttp.Request, out any) error {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1894595068",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3231,
        "pr_file": "binder/form.go",
        "discussion_id": "1894595068",
        "commented_code": "@@ -51,8 +53,8 @@ func (b *formBinding) Bind(reqCtx *fasthttp.RequestCtx, out any) error {\n }\n \n // BindMultipart parses the request body and returns the result.\n-func (b *formBinding) BindMultipart(reqCtx *fasthttp.RequestCtx, out any) error {\n-\tdata, err := reqCtx.MultipartForm()\n+func (b *FormBinding) BindMultipart(req *fasthttp.Request, out any) error {",
        "comment_created_at": "2024-12-21T09:59:21+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "maybe 2 different binders, then you could make a unified binder interface and the formMultipart binder could have a `Bind` method",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1384505253",
    "pr_number": 2704,
    "pr_file": "client.go",
    "created_at": "2023-11-07T07:51:27+00:00",
    "commented_code": "return a\n }\n \n+// CustomJSON sends a JSON request with the content header\n+// set to the given ctype string.\n+func (a *Agent) CustomJSON(v interface{}, ctype string) *Agent {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1384505253",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "client.go",
        "discussion_id": "1384505253",
        "commented_code": "@@ -476,6 +476,24 @@ func (a *Agent) JSON(v interface{}) *Agent {\n \treturn a\n }\n \n+// CustomJSON sends a JSON request with the content header\n+// set to the given ctype string.\n+func (a *Agent) CustomJSON(v interface{}, ctype string) *Agent {",
        "comment_created_at": "2023-11-07T07:51:27+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "why not do something like this ?\r\n\r\n```go\r\nfunc (a *Agent) CustomJSON(v interface{}, ctype string) *Agent {\r\n     a.JSON(v)\r\n     a.req.Header.SetContentType(ctype)\r\n     return a\r\n}\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1386603012",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "client.go",
        "discussion_id": "1384505253",
        "commented_code": "@@ -476,6 +476,24 @@ func (a *Agent) JSON(v interface{}) *Agent {\n \treturn a\n }\n \n+// CustomJSON sends a JSON request with the content header\n+// set to the given ctype string.\n+func (a *Agent) CustomJSON(v interface{}, ctype string) *Agent {",
        "comment_created_at": "2023-11-08T13:14:31+00:00",
        "comment_author": "rhburt",
        "comment_body": "That works. I wasn't sure if we wanted to set the Content-Header twice, once within `JSON` and once within `CustomJSON`, but this would definitely simplify things. Changed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1384506713",
    "pr_number": 2704,
    "pr_file": "ctx.go",
    "created_at": "2023-11-07T07:53:01+00:00",
    "commented_code": "return nil\n }\n \n+// CustomJSON converts any interface or string to JSON,\n+// similar to the JSON method.\n+// This method also sets the content header to the given\n+// ctype string.\n+func (c *Ctx) CustomJSON(data interface{}, ctype string) error {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1384506713",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "ctx.go",
        "discussion_id": "1384506713",
        "commented_code": "@@ -894,6 +901,20 @@ func (c *Ctx) JSON(data interface{}) error {\n \treturn nil\n }\n \n+// CustomJSON converts any interface or string to JSON,\n+// similar to the JSON method.\n+// This method also sets the content header to the given\n+// ctype string.\n+func (c *Ctx) CustomJSON(data interface{}, ctype string) error {",
        "comment_created_at": "2023-11-07T07:53:01+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "why not do something like this ?\r\n\r\n```go\r\nfunc (c *Ctx) CustomJSON(data interface{}, ctype string) error {\r\n    err := c.JSON(data)\r\n    if err != nil {\r\n\treturn err\r\n    }\r\n    c.fasthttp.Response.Header.SetContentType(ctype)\r\n    return nil\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1384511195",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "ctx.go",
        "discussion_id": "1384506713",
        "commented_code": "@@ -894,6 +901,20 @@ func (c *Ctx) JSON(data interface{}) error {\n \treturn nil\n }\n \n+// CustomJSON converts any interface or string to JSON,\n+// similar to the JSON method.\n+// This method also sets the content header to the given\n+// ctype string.\n+func (c *Ctx) CustomJSON(data interface{}, ctype string) error {",
        "comment_created_at": "2023-11-07T07:57:54+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "can you also test a signature with variadic params\r\n\r\n```go\r\nfunc (c *Ctx) JSON(data interface{}, ctype ...string) error {\r\n    raw, err := c.app.config.JSONEncoder(data)\r\n    if err != nil {\r\n        return err\r\n    }\r\n    c.fasthttp.Response.SetBodyRaw(raw)\r\n\t\r\n    if len(ctype) > 0 {\r\n        c.fasthttp.Response.Header.SetContentType(ctype[0])\r\n    } else {\r\n        c.fasthttp.Response.Header.SetContentType(MIMEApplicationJSON)\r\n    }\r\n    return nil\r\n}\r\n```\r\nif this does not affect the performance we prefer this",
        "pr_file_module": null
      },
      {
        "comment_id": "1386121444",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "ctx.go",
        "discussion_id": "1384506713",
        "commented_code": "@@ -894,6 +901,20 @@ func (c *Ctx) JSON(data interface{}) error {\n \treturn nil\n }\n \n+// CustomJSON converts any interface or string to JSON,\n+// similar to the JSON method.\n+// This method also sets the content header to the given\n+// ctype string.\n+func (c *Ctx) CustomJSON(data interface{}, ctype string) error {",
        "comment_created_at": "2023-11-08T07:27:51+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "@rhburt ",
        "pr_file_module": null
      },
      {
        "comment_id": "1386604956",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2704,
        "pr_file": "ctx.go",
        "discussion_id": "1384506713",
        "commented_code": "@@ -894,6 +901,20 @@ func (c *Ctx) JSON(data interface{}) error {\n \treturn nil\n }\n \n+// CustomJSON converts any interface or string to JSON,\n+// similar to the JSON method.\n+// This method also sets the content header to the given\n+// ctype string.\n+func (c *Ctx) CustomJSON(data interface{}, ctype string) error {",
        "comment_created_at": "2023-11-08T13:16:01+00:00",
        "comment_author": "rhburt",
        "comment_body": "I've changed all the signatures to accept variadic ctype parameters and have included the relevant benchmark numbers. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1038752835",
    "pr_number": 2253,
    "pr_file": "middleware/idempotency/storage.go",
    "created_at": "2022-12-03T09:08:18+00:00",
    "commented_code": "+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1038752835",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2253,
        "pr_file": "middleware/idempotency/storage.go",
        "discussion_id": "1038752835",
        "commented_code": "@@ -0,0 +1,87 @@\n+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
        "comment_created_at": "2022-12-03T09:08:18+00:00",
        "comment_author": "efectn",
        "comment_body": "Why did you create new storage interface? I think you can make this like csrf, cache middlewares ",
        "pr_file_module": null
      },
      {
        "comment_id": "1038775801",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2253,
        "pr_file": "middleware/idempotency/storage.go",
        "discussion_id": "1038752835",
        "commented_code": "@@ -0,0 +1,87 @@\n+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
        "comment_created_at": "2022-12-03T13:13:54+00:00",
        "comment_author": "leonklingele",
        "comment_body": "We don't need the following `fiber.Storage` methods:\r\n\r\n- `Delete(key string) error`\r\n- `Reset() error`\r\n- `Close() error`\r\n\r\nAll types satisfying the `fiber.Storage` interface also implement the `idempotency.Storage` interface.",
        "pr_file_module": null
      },
      {
        "comment_id": "1038777989",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2253,
        "pr_file": "middleware/idempotency/storage.go",
        "discussion_id": "1038752835",
        "commented_code": "@@ -0,0 +1,87 @@\n+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
        "comment_created_at": "2022-12-03T13:34:50+00:00",
        "comment_author": "efectn",
        "comment_body": "Storage is generic interface for various fiber middlewares. I think we shouldnt create new interface. I can't see any desadvantage of using fiber.Storage. We should make code as simple as possible and we should avoid much copying i think.",
        "pr_file_module": null
      },
      {
        "comment_id": "1038919642",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2253,
        "pr_file": "middleware/idempotency/storage.go",
        "discussion_id": "1038752835",
        "commented_code": "@@ -0,0 +1,87 @@\n+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
        "comment_created_at": "2022-12-04T07:08:02+00:00",
        "comment_author": "GalvinGao",
        "comment_body": "Would suggest the same here, and maybe also document it as something like:\r\n\r\n> Those methods are unused so simply put a `panic(\"unexpected call\")` would be sufficient.",
        "pr_file_module": null
      },
      {
        "comment_id": "1039002903",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2253,
        "pr_file": "middleware/idempotency/storage.go",
        "discussion_id": "1038752835",
        "commented_code": "@@ -0,0 +1,87 @@\n+package idempotency\n+\n+import (\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+type Storage interface {",
        "comment_created_at": "2022-12-04T17:14:44+00:00",
        "comment_author": "leonklingele",
        "comment_body": "Using a `fiber.Storage` now.",
        "pr_file_module": null
      }
    ]
  }
]