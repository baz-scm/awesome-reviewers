[
  {
    "discussion_id": "2111444561",
    "pr_number": 3490,
    "pr_file": "client/request.go",
    "created_at": "2025-05-28T10:33:51+00:00",
    "commented_code": "// SetCookies sets multiple cookies from a map.\n func (c Cookie) SetCookies(m map[string]string) {\n-\tfor k, v := range m {\n-\t\tc[k] = v\n-\t}\n+\tmaps.Copy(c, m)",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2111520110",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3490,
        "pr_file": "client/request.go",
        "discussion_id": "2111444561",
        "commented_code": "@@ -748,9 +749,7 @@ func (c Cookie) SetCookie(key, val string) {\n \n // SetCookies sets multiple cookies from a map.\n func (c Cookie) SetCookies(m map[string]string) {\n-\tfor k, v := range m {\n-\t\tc[k] = v\n-\t}\n+\tmaps.Copy(c, m)",
        "comment_created_at": "2025-05-28T10:33:51+00:00",
        "comment_author": "alexandear",
        "comment_body": "False positive. Here is a simple program to check:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"maps\"\r\n)\r\n\r\ntype Cookie map[string]string\r\n\r\nfunc (c Cookie) SetCookies(m map[string]string) {\r\n\tmaps.Copy(c, m)\r\n}\r\n\r\nfunc main() {\r\n\tcookie := Cookie{\"a\": \"1\", \"b\": \"2\"}\r\n\tfmt.Println(\"cookie before:\", cookie) // cookie before: map[a:1 b:2]\r\n\tstrCookie := map[string]string{\"a\": \"3\", \"c\": \"4\"}\r\n\tcookie.SetCookies(strCookie)\r\n\tfmt.Println(\"cookie after:\", cookie) // cookie after: map[a:3 b:2 c:4]\r\n}\r\n```\r\n\r\nhttps://go.dev/play/p/yfdL-E467WN",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1536899125",
    "pr_number": 2925,
    "pr_file": "middleware/csrf/csrf.go",
    "created_at": "2024-03-24T19:45:52+00:00",
    "commented_code": "return ErrOriginInvalid\n \t}\n \n-\tif originURL.Host != c.Host() {\n-\t\tfor _, trustedOrigin := range trustedOrigins {\n-\t\t\tif isTrustedSchemeAndDomain(trustedOrigin, origin) {\n-\t\t\t\treturn nil\n-\t\t\t}\n+\tif originURL.Scheme == c.Scheme() && originURL.Host == c.Host() {\n+\t\treturn nil\n+\t}\n+\n+\tfor _, trustedOrigin := range trustedOrigins {\n+\t\tif origin == trustedOrigin {\n+\t\t\treturn nil\n \t\t}\n-\t\treturn ErrOriginNoMatch\n \t}\n \n-\treturn nil\n+\tfor _, trustedSubOrigin := range trustedSubOrigins {\n+\t\tif trustedSubOrigin.match(origin) {\n+\t\t\treturn nil\n+\t\t}\n+\t}\n+\n+\treturn ErrOriginNoMatch\n }\n \n // refererMatchesHost checks that the referer header matches the host header\n // returns an error if the referer header is not present or is invalid\n // returns nil if the referer header is valid\n-func refererMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\treferer := c.Get(fiber.HeaderReferer)\n+func refererMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\treferer := strings.ToLower(c.Get(fiber.HeaderReferer))",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1536899125",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2925,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1536899125",
        "commented_code": "@@ -273,23 +294,31 @@ func originMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n \t\treturn ErrOriginInvalid\n \t}\n \n-\tif originURL.Host != c.Host() {\n-\t\tfor _, trustedOrigin := range trustedOrigins {\n-\t\t\tif isTrustedSchemeAndDomain(trustedOrigin, origin) {\n-\t\t\t\treturn nil\n-\t\t\t}\n+\tif originURL.Scheme == c.Scheme() && originURL.Host == c.Host() {\n+\t\treturn nil\n+\t}\n+\n+\tfor _, trustedOrigin := range trustedOrigins {\n+\t\tif origin == trustedOrigin {\n+\t\t\treturn nil\n \t\t}\n-\t\treturn ErrOriginNoMatch\n \t}\n \n-\treturn nil\n+\tfor _, trustedSubOrigin := range trustedSubOrigins {\n+\t\tif trustedSubOrigin.match(origin) {\n+\t\t\treturn nil\n+\t\t}\n+\t}\n+\n+\treturn ErrOriginNoMatch\n }\n \n // refererMatchesHost checks that the referer header matches the host header\n // returns an error if the referer header is not present or is invalid\n // returns nil if the referer header is valid\n-func refererMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\treferer := c.Get(fiber.HeaderReferer)\n+func refererMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\treferer := strings.ToLower(c.Get(fiber.HeaderReferer))",
        "comment_created_at": "2024-03-24T19:45:52+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "can you try https://github.com/gofiber/utils/blob/master/strings.go#L8",
        "pr_file_module": null
      },
      {
        "comment_id": "1537689818",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2925,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1536899125",
        "commented_code": "@@ -273,23 +294,31 @@ func originMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n \t\treturn ErrOriginInvalid\n \t}\n \n-\tif originURL.Host != c.Host() {\n-\t\tfor _, trustedOrigin := range trustedOrigins {\n-\t\t\tif isTrustedSchemeAndDomain(trustedOrigin, origin) {\n-\t\t\t\treturn nil\n-\t\t\t}\n+\tif originURL.Scheme == c.Scheme() && originURL.Host == c.Host() {\n+\t\treturn nil\n+\t}\n+\n+\tfor _, trustedOrigin := range trustedOrigins {\n+\t\tif origin == trustedOrigin {\n+\t\t\treturn nil\n \t\t}\n-\t\treturn ErrOriginNoMatch\n \t}\n \n-\treturn nil\n+\tfor _, trustedSubOrigin := range trustedSubOrigins {\n+\t\tif trustedSubOrigin.match(origin) {\n+\t\t\treturn nil\n+\t\t}\n+\t}\n+\n+\treturn ErrOriginNoMatch\n }\n \n // refererMatchesHost checks that the referer header matches the host header\n // returns an error if the referer header is not present or is invalid\n // returns nil if the referer header is valid\n-func refererMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\treferer := c.Get(fiber.HeaderReferer)\n+func refererMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\treferer := strings.ToLower(c.Get(fiber.HeaderReferer))",
        "comment_created_at": "2024-03-25T14:29:21+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "standard lib is faster if it is already lower case, which should be the case in most cases",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1536899150",
    "pr_number": 2925,
    "pr_file": "middleware/csrf/csrf.go",
    "created_at": "2024-03-24T19:46:06+00:00",
    "commented_code": "// originMatchesHost checks that the origin header matches the host header\n // returns an error if the origin header is not present or is invalid\n // returns nil if the origin header is valid\n-func originMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\torigin := c.Get(fiber.HeaderOrigin)\n+func originMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\torigin := strings.ToLower(c.Get(fiber.HeaderOrigin))",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1536899150",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2925,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1536899150",
        "commented_code": "@@ -262,8 +283,8 @@ func isFromCookie(extractor any) bool {\n // originMatchesHost checks that the origin header matches the host header\n // returns an error if the origin header is not present or is invalid\n // returns nil if the origin header is valid\n-func originMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\torigin := c.Get(fiber.HeaderOrigin)\n+func originMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\torigin := strings.ToLower(c.Get(fiber.HeaderOrigin))",
        "comment_created_at": "2024-03-24T19:46:06+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "can you try https://github.com/gofiber/utils/blob/master/strings.go#L8",
        "pr_file_module": null
      },
      {
        "comment_id": "1537689964",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 2925,
        "pr_file": "middleware/csrf/csrf.go",
        "discussion_id": "1536899150",
        "commented_code": "@@ -262,8 +283,8 @@ func isFromCookie(extractor any) bool {\n // originMatchesHost checks that the origin header matches the host header\n // returns an error if the origin header is not present or is invalid\n // returns nil if the origin header is valid\n-func originMatchesHost(c fiber.Ctx, trustedOrigins []string) error {\n-\torigin := c.Get(fiber.HeaderOrigin)\n+func originMatchesHost(c fiber.Ctx, trustedOrigins []string, trustedSubOrigins []subdomain) error {\n+\torigin := strings.ToLower(c.Get(fiber.HeaderOrigin))",
        "comment_created_at": "2024-03-25T14:29:25+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "standard lib is faster if it is already lower case, which should be the case in most cases",
        "pr_file_module": null
      }
    ]
  }
]