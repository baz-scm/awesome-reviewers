[
  {
    "discussion_id": "1795802734",
    "pr_number": 3162,
    "pr_file": "app.go",
    "created_at": "2024-10-10T16:53:31+00:00",
    "commented_code": "//\n // ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n func (app *App) ShutdownWithContext(ctx context.Context) error {\n-\tif app.hooks != nil {\n-\t\t// TODO: check should be defered?\n-\t\tapp.hooks.executeOnShutdownHooks()\n-\t}\n-\n \tapp.mutex.Lock()\n \tdefer app.mutex.Unlock()\n+\n \tif app.server == nil {\n \t\treturn ErrNotRunning\n \t}\n+\n+\t// Execute shutdown hooks in a deferred function\n+\tif app.hooks != nil {\n+\t\tdefer app.hooks.executeOnShutdownHooks()",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1795802734",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3162,
        "pr_file": "app.go",
        "discussion_id": "1795802734",
        "commented_code": "@@ -841,16 +841,18 @@ func (app *App) ShutdownWithTimeout(timeout time.Duration) error {\n //\n // ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n func (app *App) ShutdownWithContext(ctx context.Context) error {\n-\tif app.hooks != nil {\n-\t\t// TODO: check should be defered?\n-\t\tapp.hooks.executeOnShutdownHooks()\n-\t}\n-\n \tapp.mutex.Lock()\n \tdefer app.mutex.Unlock()\n+\n \tif app.server == nil {\n \t\treturn ErrNotRunning\n \t}\n+\n+\t// Execute shutdown hooks in a deferred function\n+\tif app.hooks != nil {\n+\t\tdefer app.hooks.executeOnShutdownHooks()",
        "comment_created_at": "2024-10-10T16:53:31+00:00",
        "comment_author": "efectn",
        "comment_body": "It would be nice to update the docs to explain shutdown & hook execution order",
        "pr_file_module": null
      },
      {
        "comment_id": "1797716540",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3162,
        "pr_file": "app.go",
        "discussion_id": "1795802734",
        "commented_code": "@@ -841,16 +841,18 @@ func (app *App) ShutdownWithTimeout(timeout time.Duration) error {\n //\n // ShutdownWithContext does not close keepalive connections so its recommended to set ReadTimeout to something else than 0.\n func (app *App) ShutdownWithContext(ctx context.Context) error {\n-\tif app.hooks != nil {\n-\t\t// TODO: check should be defered?\n-\t\tapp.hooks.executeOnShutdownHooks()\n-\t}\n-\n \tapp.mutex.Lock()\n \tdefer app.mutex.Unlock()\n+\n \tif app.server == nil {\n \t\treturn ErrNotRunning\n \t}\n+\n+\t// Execute shutdown hooks in a deferred function\n+\tif app.hooks != nil {\n+\t\tdefer app.hooks.executeOnShutdownHooks()",
        "comment_created_at": "2024-10-12T15:07:29+00:00",
        "comment_author": "JIeJaitt",
        "comment_body": "> It would be nice to update the docs to explain shutdown & hook execution order\r\n\r\ndone",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1952815966",
    "pr_number": 3162,
    "pr_file": "app.go",
    "created_at": "2025-02-12T14:55:01+00:00",
    "commented_code": "//\n // Make sure the program doesn't exit and waits instead for Shutdown to return.\n //\n+// Important: app.Listen() must be called in a separate goroutine, otherwise shutdown hooks will not work\n+// as Listen() is a blocking operation. Example:\n+//\n+//\tgo app.Listen(\":3000\")\n+//\t// ...",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1952815966",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3162,
        "pr_file": "app.go",
        "discussion_id": "1952815966",
        "commented_code": "@@ -894,6 +894,13 @@ func (app *App) HandlersCount() uint32 {\n //\n // Make sure the program doesn't exit and waits instead for Shutdown to return.\n //\n+// Important: app.Listen() must be called in a separate goroutine, otherwise shutdown hooks will not work\n+// as Listen() is a blocking operation. Example:\n+//\n+//\tgo app.Listen(\":3000\")\n+//\t// ...",
        "comment_created_at": "2025-02-12T14:55:01+00:00",
        "comment_author": "efectn",
        "comment_body": "Nice warning. Can you update main docs to warn about this case, too?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1893610874",
    "pr_number": 3257,
    "pr_file": "ctx.go",
    "created_at": "2024-12-20T08:13:36+00:00",
    "commented_code": "func (c *DefaultCtx) setRoute(route *Route) {\n \tc.route = route\n }\n+\n+func (c *DefaultCtx) Drop() error {",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "1893610874",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3257,
        "pr_file": "ctx.go",
        "discussion_id": "1893610874",
        "commented_code": "@@ -1978,3 +1978,8 @@ func (c *DefaultCtx) setMatched(matched bool) {\n func (c *DefaultCtx) setRoute(route *Route) {\n \tc.route = route\n }\n+\n+func (c *DefaultCtx) Drop() error {",
        "comment_created_at": "2024-12-20T08:13:36+00:00",
        "comment_author": "grivera64",
        "comment_body": "Please add a doc comment here explaining what `Drop()` does. You can use the same description you wrote for the feature in `docs/api/ctx.md`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1894035320",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3257,
        "pr_file": "ctx.go",
        "discussion_id": "1893610874",
        "commented_code": "@@ -1978,3 +1978,8 @@ func (c *DefaultCtx) setMatched(matched bool) {\n func (c *DefaultCtx) setRoute(route *Route) {\n \tc.route = route\n }\n+\n+func (c *DefaultCtx) Drop() error {",
        "comment_created_at": "2024-12-20T14:52:59+00:00",
        "comment_author": "ryanbekhen",
        "comment_body": "Ok i'll make the changes later",
        "pr_file_module": null
      }
    ]
  }
]