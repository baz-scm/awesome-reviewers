[
  {
    "discussion_id": "2009110003",
    "pr_number": 3360,
    "pr_file": "docs/api/state.md",
    "created_at": "2025-03-23T13:00:54+00:00",
    "commented_code": "+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key-value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map` ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key-value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread-safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key-value store for Fiber's app in order to be used as a global storage for the app's dependencies.\n+// It's a thread-safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key-value pair in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, ok bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\n\", ratio)\n+}\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key-value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset resets the State by removing all keys.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\n\", app.State().Len())\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type-safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the casted value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(app.State(), \"requestCount\", 0)\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(c.App().State(), \"requestCount\", 0)\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment-Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+    app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2009110003",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3360,
        "pr_file": "docs/api/state.md",
        "discussion_id": "2009110003",
        "commented_code": "@@ -0,0 +1,429 @@\n+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key-value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map` ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key-value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread-safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key-value store for Fiber's app in order to be used as a global storage for the app's dependencies.\n+// It's a thread-safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key-value pair in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, ok bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\\n\", ratio)\n+}\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key-value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset resets the State by removing all keys.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\\n\", app.State().Len())\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type-safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the casted value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(app.State(), \"requestCount\", 0)\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(c.App().State(), \"requestCount\", 0)\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment-Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+    app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
        "comment_created_at": "2025-03-23T13:00:54+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "can you use https://docs.gofiber.io/api/ctx#app\r\nin the examples \r\n\r\nthink in a flat file this state management makes no sense, only if you have a deep structure and separate server initialization and controller with handler where you no longer have the app\r\nthat's why we should structure the examples so that you recognize the need to use this feature\r\nmaybe simulate several files in the example itself",
        "pr_file_module": null
      },
      {
        "comment_id": "2020259170",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3360,
        "pr_file": "docs/api/state.md",
        "discussion_id": "2009110003",
        "commented_code": "@@ -0,0 +1,429 @@\n+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key-value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map` ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key-value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread-safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key-value store for Fiber's app in order to be used as a global storage for the app's dependencies.\n+// It's a thread-safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key-value pair in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, ok bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\\n\", ratio)\n+}\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key-value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset resets the State by removing all keys.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\\n\", app.State().Len())\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type-safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the casted value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(app.State(), \"requestCount\", 0)\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count := fiber.GetStateWithDefault(c.App().State(), \"requestCount\", 0)\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment-Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+    app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
        "comment_created_at": "2025-03-30T21:40:11+00:00",
        "comment_author": "gaby",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020526151",
    "pr_number": 3360,
    "pr_file": "docs/api/state.md",
    "created_at": "2025-03-31T07:29:02+00:00",
    "commented_code": "+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2020526151",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3360,
        "pr_file": "docs/api/state.md",
        "discussion_id": "2020526151",
        "commented_code": "@@ -0,0 +1,640 @@\n+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),",
        "comment_created_at": "2025-03-31T07:29:02+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "```suggestion\r\n    app.Get(\"/config\", func(c fiber.Ctx) error {\r\n        config := map[string]any{\r\n            \"environment\": environment,\r\n            \"apiUrl\":      fiber.GetStateWithDefault(c.App().State(), \"apiUrl\", \"\"),\r\n            \"debug\":       fiber.GetStateWithDefault(c.App().State(), \"debug\", false),\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020526697",
    "pr_number": 3360,
    "pr_file": "docs/api/state.md",
    "created_at": "2025-03-31T07:29:32+00:00",
    "commented_code": "+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2020526697",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3360,
        "pr_file": "docs/api/state.md",
        "discussion_id": "2020526697",
        "commented_code": "@@ -0,0 +1,640 @@\n+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
        "comment_created_at": "2025-03-31T07:29:32+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "```suggestion\r\n        rdb, ok := fiber.GetState[*redis.Client](c.App().State(), \"redis\")\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020527039",
    "pr_number": 3360,
    "pr_file": "docs/api/state.md",
    "created_at": "2025-03-31T07:29:50+00:00",
    "commented_code": "+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")\n+        if !ok {\n+            return c.Status(fiber.StatusInternalServerError).SendString(\"Redis client not found\")\n+        }\n+\n+        // Save the user to the database.\n+        key := fmt.Sprintf(\"user:%d\", user.ID)\n+        err := rdb.HSet(ctx, key, \"name\", user.Name, \"email\", user.Email).Err()\n+        if err != nil {\n+            return c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n+        }\n+\n+        return c.JSON(user)\n+    })\n+\n+    app.Get(\"/user/:id\", func(c fiber.Ctx) error {\n+        id := c.Params(\"id\")\n+\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
    "repo_full_name": "gofiber/fiber",
    "discussion_comments": [
      {
        "comment_id": "2020527039",
        "repo_full_name": "gofiber/fiber",
        "pr_number": 3360,
        "pr_file": "docs/api/state.md",
        "discussion_id": "2020527039",
        "commented_code": "@@ -0,0 +1,640 @@\n+# State Management\n+\n+This document details the state management functionality provided by Fiber, a thread-safe global key\u2013value store used to store application dependencies and runtime data. The implementation is based on Go's `sync.Map`, ensuring concurrency safety.\n+\n+Below is the detailed description of all public methods and usage examples.\n+\n+## State Type\n+\n+`State` is a key\u2013value store built on top of `sync.Map`. It allows storage and retrieval of dependencies and configurations in a Fiber application as well as thread\u2013safe access to runtime data.\n+\n+### Definition\n+\n+```go\n+// State is a key\u2013value store for Fiber's app, used as a global storage for the app's dependencies.\n+// It is a thread\u2013safe implementation of a map[string]any, using sync.Map.\n+type State struct {\n+    dependencies sync.Map\n+}\n+```\n+\n+## Methods on State\n+\n+### Set\n+\n+Set adds or updates a key\u2013value pair in the State.\n+\n+```go\n+// Set adds or updates a key\u2013value pair in the State.\n+func (s *State) Set(key string, value any)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Set(\"appName\", \"My Fiber App\")\n+```\n+\n+### Get\n+\n+Get retrieves a value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Get(key string) (any, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+value, ok := app.State().Get(\"appName\")\n+if ok {\n+    fmt.Println(\"App Name:\", value)\n+}\n+```\n+\n+### MustGet\n+\n+MustGet retrieves a value from the State and panics if the key is not found.\n+\n+```go title=\"Signature\"\n+func (s *State) MustGet(key string) any\n+```\n+\n+**Usage Example:**\n+\n+```go\n+appName := app.State().MustGet(\"appName\")\n+fmt.Println(\"App Name:\", appName)\n+```\n+\n+### Has\n+\n+Has checks if a key exists in the State.\n+\n+```go title=\"Signature\"s\n+func (s *State) Has(key string) bool\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if app.State().Has(\"appName\") {\n+    fmt.Println(\"App Name is set.\")\n+}\n+```\n+\n+### Delete\n+\n+Delete removes a key\u2013value pair from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Delete(key string)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Delete(\"obsoleteKey\")\n+```\n+\n+### Reset\n+\n+Reset removes all keys from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Reset()\n+```\n+\n+**Usage Example:**\n+\n+```go\n+app.State().Reset()\n+```\n+\n+### Keys\n+\n+Keys returns a slice containing all keys present in the State.\n+\n+```go title=\"Signature\"\n+func (s *State) Keys() []string\n+```\n+\n+**Usage Example:**\n+\n+```go\n+keys := app.State().Keys()\n+fmt.Println(\"State Keys:\", keys)\n+```\n+\n+### Len\n+\n+Len returns the number of keys in the State.\n+\n+```go\n+// Len returns the number of keys in the State.\n+func (s *State) Len() int\n+```\n+\n+**Usage Example:**\n+\n+```go\n+fmt.Printf(\"Total State Entries: %d\\n\", app.State().Len())\n+```\n+\n+### GetString\n+\n+GetString retrieves a string value from the State. It returns the string and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetString(key string) (string, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if appName, ok := app.State().GetString(\"appName\"); ok {\n+    fmt.Println(\"App Name:\", appName)\n+}\n+```\n+\n+### GetInt\n+\n+GetInt retrieves an integer value from the State. It returns the int and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt(key string) (int, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if count, ok := app.State().GetInt(\"userCount\"); ok {\n+    fmt.Printf(\"User Count: %d\\n\", count)\n+}\n+```\n+\n+### GetBool\n+\n+GetBool retrieves a boolean value from the State. It returns the bool and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetBool(key string) (value, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if debug, ok := app.State().GetBool(\"debugMode\"); ok {\n+    fmt.Printf(\"Debug Mode: %v\\n\", debug)\n+}\n+```\n+\n+### GetFloat64\n+\n+GetFloat64 retrieves a float64 value from the State. It returns the float64 and a boolean indicating a successful type assertion.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat64(key string) (float64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go title=\"Signature\"\n+if ratio, ok := app.State().GetFloat64(\"scalingFactor\"); ok {\n+    fmt.Printf(\"Scaling Factor: %f\\n\", ratio)\n+}\n+```\n+\n+### GetUint\n+\n+GetUint retrieves a `uint` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint(key string) (uint, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint(\"maxConnections\"); ok {\n+    fmt.Printf(\"Max Connections: %d\\n\", val)\n+}\n+```\n+\n+### GetInt8\n+\n+GetInt8 retrieves an `int8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt8(key string) (int8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt8(\"threshold\"); ok {\n+    fmt.Printf(\"Threshold: %d\\n\", val)\n+}\n+```\n+\n+### GetInt16\n+\n+GetInt16 retrieves an `int16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt16(key string) (int16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt16(\"minValue\"); ok {\n+    fmt.Printf(\"Minimum Value: %d\\n\", val)\n+}\n+```\n+\n+### GetInt32\n+\n+GetInt32 retrieves an `int32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt32(key string) (int32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt32(\"portNumber\"); ok {\n+    fmt.Printf(\"Port Number: %d\\n\", val)\n+}\n+```\n+\n+### GetInt64\n+\n+GetInt64 retrieves an `int64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetInt64(key string) (int64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetInt64(\"fileSize\"); ok {\n+    fmt.Printf(\"File Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUint8\n+\n+GetUint8 retrieves a `uint8` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint8(key string) (uint8, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint8(\"byteValue\"); ok {\n+    fmt.Printf(\"Byte Value: %d\\n\", val)\n+}\n+```\n+\n+### GetUint16\n+\n+GetUint16 retrieves a `uint16` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint16(key string) (uint16, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint16(\"limit\"); ok {\n+    fmt.Printf(\"Limit: %d\\n\", val)\n+}\n+```\n+\n+### GetUint32\n+\n+GetUint32 retrieves a `uint32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint32(key string) (uint32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint32(\"timeout\"); ok {\n+    fmt.Printf(\"Timeout: %d\\n\", val)\n+}\n+```\n+\n+### GetUint64\n+\n+GetUint64 retrieves a `uint64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUint64(key string) (uint64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUint64(\"maxSize\"); ok {\n+    fmt.Printf(\"Max Size: %d\\n\", val)\n+}\n+```\n+\n+### GetUintptr\n+\n+GetUintptr retrieves a `uintptr` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetUintptr(key string) (uintptr, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetUintptr(\"pointerValue\"); ok {\n+    fmt.Printf(\"Pointer Value: %d\\n\", val)\n+}\n+```\n+\n+### GetFloat32\n+\n+GetFloat32 retrieves a `float32` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetFloat32(key string) (float32, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetFloat32(\"scalingFactor32\"); ok {\n+    fmt.Printf(\"Scaling Factor (float32): %f\\n\", val)\n+}\n+```\n+\n+### GetComplex64\n+\n+GetComplex64 retrieves a `complex64` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex64(key string) (complex64, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex64(\"complexVal\"); ok {\n+    fmt.Printf(\"Complex Value (complex64): %v\\n\", val)\n+}\n+```\n+\n+### GetComplex128\n+\n+GetComplex128 retrieves a `complex128` value from the State.\n+\n+```go title=\"Signature\"\n+func (s *State) GetComplex128(key string) (complex128, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+if val, ok := app.State().GetComplex128(\"complexVal128\"); ok {\n+    fmt.Printf(\"Complex Value (complex128): %v\\n\", val)\n+}\n+```\n+\n+## Generic Functions\n+\n+Fiber provides generic functions to retrieve state values with type safety and fallback options.\n+\n+### GetState\n+\n+GetState retrieves a value from the State and casts it to the desired type. It returns the cast value and a boolean indicating if the cast was successful.\n+\n+```go title=\"Signature\"\n+func GetState[T any](s *State, key string) (T, bool)\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve an integer value safely.\n+userCount, ok := GetState[int](app.State(), \"userCount\")\n+if ok {\n+    fmt.Printf(\"User Count: %d\\n\", userCount)\n+}\n+```\n+\n+### MustGetState\n+\n+MustGetState retrieves a value from the State and casts it to the desired type. It panics if the key is not found or if the type assertion fails.\n+\n+```go title=\"Signature\"\n+func MustGetState[T any](s *State, key string) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve the value or panic if it is not present.\n+config := MustGetState[string](app.State(), \"configFile\")\n+fmt.Println(\"Config File:\", config)\n+```\n+\n+### GetStateWithDefault\n+\n+GetStateWithDefault retrieves a value from the State, casting it to the desired type. If the key is not present, it returns the provided default value.\n+\n+```go title=\"Signature\"\n+func GetStateWithDefault[T any](s *State, key string, defaultVal T) T\n+```\n+\n+**Usage Example:**\n+\n+```go\n+// Retrieve a value with a default fallback.\n+requestCount := GetStateWithDefault[int](app.State(), \"requestCount\", 0)\n+fmt.Printf(\"Request Count: %d\\n\", requestCount)\n+```\n+\n+## Comprehensive Examples\n+\n+### Example: Request Counter\n+\n+This example demonstrates how to track the number of requests using the State.\n+\n+```go\n+package main\n+\n+import (\n+    \"fmt\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Initialize state with a counter.\n+    app.State().Set(\"requestCount\", 0)\n+\n+    // Middleware: Increase counter for every request.\n+    app.Use(func(c fiber.Ctx) error {\n+        count, _ := c.App().State().GetInt(\"requestCount\")\n+        app.State().Set(\"requestCount\", count+1)\n+        return c.Next()\n+    })\n+\n+    app.Get(\"/\", func(c fiber.Ctx) error {\n+        return c.SendString(\"Hello World!\")\n+    })\n+\n+    app.Get(\"/stats\", func(c fiber.Ctx) error {\n+        count, _ := c.App().State().Get(\"requestCount\")\n+        return c.SendString(fmt.Sprintf(\"Total requests: %d\", count))\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Environment\u2013Specific Configuration\n+\n+This example shows how to configure different settings based on the environment.\n+\n+```go\n+package main\n+\n+import (\n+    \"os\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+)\n+\n+func main() {\n+    app := fiber.New()\n+\n+    // Determine environment.\n+    environment := os.Getenv(\"ENV\")\n+    if environment == \"\" {\n+        environment = \"development\"\n+    }\n+    app.State().Set(\"environment\", environment)\n+\n+    // Set environment-specific configurations.\n+    if environment == \"development\" {\n+        app.State().Set(\"apiUrl\", \"http://localhost:8080/api\")\n+        app.State().Set(\"debug\", true)\n+    } else {\n+        app.State().Set(\"apiUrl\", \"https://api.production.com\")\n+        app.State().Set(\"debug\", false)\n+    }\n+\n+    app.Get(\"/config\", func(c fiber.Ctx) error {\n+        config := map[string]any{\n+            \"environment\": environment,\n+            \"apiUrl\":      fiber.GetStateWithDefault(app.State(), \"apiUrl\", \"\"),\n+            \"debug\":       fiber.GetStateWithDefault(app.State(), \"debug\", false),\n+        }\n+        return c.JSON(config)\n+    })\n+\n+    app.Listen(\":3000\")\n+}\n+```\n+\n+### Example: Dependency Injection with State Management\n+\n+This example demonstrates how to use the State for dependency injection in a Fiber application.\n+\n+```go\n+package main\n+\n+import (\n+    \"context\"\n+    \"fmt\"\n+    \"log\"\n+\n+    \"github.com/gofiber/fiber/v3\"\n+    \"github.com/redis/go-redis/v9\"\n+)\n+\n+type User struct {\n+    ID    int    `query:\"id\"`\n+    Name  string `query:\"name\"`\n+    Email string `query:\"email\"`\n+}\n+\n+func main() {\n+    app := fiber.New()\n+    ctx := context.Background()\n+\n+    // Initialize Redis client.\n+    rdb := redis.NewClient(&redis.Options{\n+        Addr:     \"localhost:6379\",\n+        Password: \"\",\n+        DB:       0,\n+    })\n+\n+    // Check the Redis connection.\n+    if err := rdb.Ping(ctx).Err(); err != nil {\n+        log.Fatalf(\"Could not connect to Redis: %v\", err)\n+    }\n+\n+    // Inject the Redis client into Fiber's State for dependency injection.\n+    app.State().Set(\"redis\", rdb)\n+\n+    app.Get(\"/user/create\", func(c fiber.Ctx) error {\n+        var user User\n+        if err := c.Bind().Query(&user); err != nil {\n+            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n+        }\n+\n+        // Save the user to the database.\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")\n+        if !ok {\n+            return c.Status(fiber.StatusInternalServerError).SendString(\"Redis client not found\")\n+        }\n+\n+        // Save the user to the database.\n+        key := fmt.Sprintf(\"user:%d\", user.ID)\n+        err := rdb.HSet(ctx, key, \"name\", user.Name, \"email\", user.Email).Err()\n+        if err != nil {\n+            return c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n+        }\n+\n+        return c.JSON(user)\n+    })\n+\n+    app.Get(\"/user/:id\", func(c fiber.Ctx) error {\n+        id := c.Params(\"id\")\n+\n+        rdb, ok := fiber.GetState[*redis.Client](app.State(), \"redis\")",
        "comment_created_at": "2025-03-31T07:29:50+00:00",
        "comment_author": "ReneWerner87",
        "comment_body": "```suggestion\r\n        rdb, ok := fiber.GetState[*redis.Client](c.App().State(), \"redis\")\r\n```",
        "pr_file_module": null
      }
    ]
  }
]