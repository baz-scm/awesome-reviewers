[
  {
    "discussion_id": "1963113941",
    "pr_number": 1193,
    "pr_file": "apps/api/src/search/searxng.ts",
    "created_at": "2025-02-20T08:57:04+00:00",
    "commented_code": "+import axios from \"axios\";\n+import dotenv from \"dotenv\";\n+import { SearchResult } from \"../../src/lib/entities\";\n+\n+dotenv.config();\n+\n+interface SearchOptions {\n+  tbs?: string;\n+  filter?: string;\n+  lang?: string;\n+  country?: string;\n+  location?: string;\n+  num_results: number;\n+  page?: number;\n+}\n+\n+export async function searxng_search(\n+  q: string,\n+  options: SearchOptions,\n+): Promise<SearchResult[]> {\n+  const params = {\n+    q: q,\n+    language: options.lang,\n+    // gl: options.country, //not possible with SearXNG\n+    // location: options.location, //not possible with SearXNG\n+    // num: options.num_results, //not possible with SearXNG\n+    engines: process.env.SEARXNG_ENGINES || \"\",\n+    categories: process.env.SEARXNG_CATEGORIES || \"general\",\n+    pageno: options.page ?? 1,\n+    format: \"json\"\n+  };\n+\n+  const url = process.env.SEARXNG_ENDPOINT as string;\n+  if (!url) {\n+    console.error(`SEARXNG_ENDPOINT environment variable is not set`);\n+  }\n+  // Remove trailing slash if it exists\n+  const cleanedUrl = url.endsWith('/') ? url.slice(0, -1) : url;\n+\n+  // Concatenate \"/search\" to the cleaned URL\n+  const finalUrl = cleanedUrl + \"/search\";\n+\n+  try {\n+    const response = await axios.get(finalUrl, {\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      params: params,\n+    });\n+\n+    const data = response.data;\n+\n+    if (data && Array.isArray(data.results)) {\n+      return data.results.map((a: any) => ({\n+        url: a.url,\n+        title: a.title,\n+        description: a.content,\n+      }));\n+    } else {\n+      return [];\n+    }\n+  } catch (error) {\n+    console.error(`There was an error searching for content: ${error.message}`);",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "1963113941",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1193,
        "pr_file": "apps/api/src/search/searxng.ts",
        "discussion_id": "1963113941",
        "commented_code": "@@ -0,0 +1,66 @@\n+import axios from \"axios\";\n+import dotenv from \"dotenv\";\n+import { SearchResult } from \"../../src/lib/entities\";\n+\n+dotenv.config();\n+\n+interface SearchOptions {\n+  tbs?: string;\n+  filter?: string;\n+  lang?: string;\n+  country?: string;\n+  location?: string;\n+  num_results: number;\n+  page?: number;\n+}\n+\n+export async function searxng_search(\n+  q: string,\n+  options: SearchOptions,\n+): Promise<SearchResult[]> {\n+  const params = {\n+    q: q,\n+    language: options.lang,\n+    // gl: options.country, //not possible with SearXNG\n+    // location: options.location, //not possible with SearXNG\n+    // num: options.num_results, //not possible with SearXNG\n+    engines: process.env.SEARXNG_ENGINES || \"\",\n+    categories: process.env.SEARXNG_CATEGORIES || \"general\",\n+    pageno: options.page ?? 1,\n+    format: \"json\"\n+  };\n+\n+  const url = process.env.SEARXNG_ENDPOINT as string;\n+  if (!url) {\n+    console.error(`SEARXNG_ENDPOINT environment variable is not set`);\n+  }\n+  // Remove trailing slash if it exists\n+  const cleanedUrl = url.endsWith('/') ? url.slice(0, -1) : url;\n+\n+  // Concatenate \"/search\" to the cleaned URL\n+  const finalUrl = cleanedUrl + \"/search\";\n+\n+  try {\n+    const response = await axios.get(finalUrl, {\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      params: params,\n+    });\n+\n+    const data = response.data;\n+\n+    if (data && Array.isArray(data.results)) {\n+      return data.results.map((a: any) => ({\n+        url: a.url,\n+        title: a.title,\n+        description: a.content,\n+      }));\n+    } else {\n+      return [];\n+    }\n+  } catch (error) {\n+    console.error(`There was an error searching for content: ${error.message}`);",
        "comment_created_at": "2025-02-20T08:57:04+00:00",
        "comment_author": "mogery",
        "comment_body": "```suggestion\r\n    logger.error(`There was an error searching for content`, { error });\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898942168",
    "pr_number": 1019,
    "pr_file": "apps/api/src/scraper/scrapeURL/transformers/index.ts",
    "created_at": "2024-12-28T15:26:56+00:00",
    "commented_code": "return document;\n }\n \n+export function encodeRawHTML(_meta: Meta, document: Document): Document {\n+  if (document.rawHtml === undefined) {\n+    throw new Error(\n+      \"rawHtml is undefined -- this transformer is being called out of order\",\n+    );\n+  }\n+\n+  const data: Uint8Array = new TextEncoder().encode(document.rawHtml);\n+\n+  const charsetMatch = document.rawHtml.match(\n+    /<meta[^>]+charset=[\"']?([^\"'>]+)/i,\n+  );\n+  const charset = charsetMatch ? charsetMatch[1] : \"UTF-8\";\n+\n+  try {\n+    // Convert the response data if charset is not UTF-8\n+    if (charset.toUpperCase() !== \"UTF-8\") {\n+      const decoder = new TextDecoder(charset);\n+      document.rawHtml = decoder.decode(data);\n+      \n+      return document;\n+    }\n+  } catch (error) {\n+    throw new Error(\"Failed to convert rawHtml to UTF-8\");",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "1898942168",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1019,
        "pr_file": "apps/api/src/scraper/scrapeURL/transformers/index.ts",
        "discussion_id": "1898942168",
        "commented_code": "@@ -31,6 +31,35 @@ export function deriveMetadataFromRawHTML(\n   return document;\n }\n \n+export function encodeRawHTML(_meta: Meta, document: Document): Document {\n+  if (document.rawHtml === undefined) {\n+    throw new Error(\n+      \"rawHtml is undefined -- this transformer is being called out of order\",\n+    );\n+  }\n+\n+  const data: Uint8Array = new TextEncoder().encode(document.rawHtml);\n+\n+  const charsetMatch = document.rawHtml.match(\n+    /<meta[^>]+charset=[\"']?([^\"'>]+)/i,\n+  );\n+  const charset = charsetMatch ? charsetMatch[1] : \"UTF-8\";\n+\n+  try {\n+    // Convert the response data if charset is not UTF-8\n+    if (charset.toUpperCase() !== \"UTF-8\") {\n+      const decoder = new TextDecoder(charset);\n+      document.rawHtml = decoder.decode(data);\n+      \n+      return document;\n+    }\n+  } catch (error) {\n+    throw new Error(\"Failed to convert rawHtml to UTF-8\");",
        "comment_created_at": "2024-12-28T15:26:56+00:00",
        "comment_author": "mogery",
        "comment_body": "Always add the source error to the error object, so we can see the true error in the logs.\r\n```suggestion\r\n    throw new Error(\"Failed to convert rawHtml to UTF-8\", { cause: error });\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1739128079",
    "pr_number": 586,
    "pr_file": "apps/api/src/services/queue-worker.ts",
    "created_at": "2024-08-30T16:53:04+00:00",
    "commented_code": "job,\n       token,\n     });\n+\n+    // Better if we throw here so we capture with the correct error\n+    if(!success) {",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "1739128079",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 586,
        "pr_file": "apps/api/src/services/queue-worker.ts",
        "discussion_id": "1739128079",
        "commented_code": "@@ -192,6 +192,11 @@ async function processJob(job: Job, token: string) {\n       job,\n       token,\n     });\n+\n+    // Better if we throw here so we capture with the correct error\n+    if(!success) {",
        "comment_created_at": "2024-08-30T16:53:04+00:00",
        "comment_author": "nickscamara",
        "comment_body": "@mogery added this here. because when success was false we were just continueing, throwing type errors when it was actually other errors in runWebScraper. Is this okay?",
        "pr_file_module": null
      }
    ]
  }
]