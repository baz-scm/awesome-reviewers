[
  {
    "discussion_id": "2127189078",
    "pr_number": 1632,
    "pr_file": "apps/api/src/controllers/v1/types.ts",
    "created_at": "2025-06-04T18:22:35+00:00",
    "commented_code": "} from \"../../lib/entities\";\n import { InternalOptions } from \"../../scraper/scrapeURL\";\n \n+export enum IntegrationEnum {\n+  DIFY = \"dify\",\n+  ZAPIER = \"zapier\",\n+  PIPEDREAM = \"pipedream\",\n+  RAYCAST = \"raycast\",\n+  LANGCHAIN = \"langchain\",\n+  CREWAI = \"crewai\",\n+  LLAMAINDEX = \"llamaindex\",\n+  N8N = \"n8n\",\n+  CAMELAI = \"camelai\",\n+  MAKE = \"make\",\n+  FLOWISE = \"flowise\",\n+  METAGPT = \"metagpt\",\n+  UNKNOWN = \"unknown\",",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "2127189078",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1632,
        "pr_file": "apps/api/src/controllers/v1/types.ts",
        "discussion_id": "2127189078",
        "commented_code": "@@ -10,6 +10,22 @@ import {\n } from \"../../lib/entities\";\n import { InternalOptions } from \"../../scraper/scrapeURL\";\n \n+export enum IntegrationEnum {\n+  DIFY = \"dify\",\n+  ZAPIER = \"zapier\",\n+  PIPEDREAM = \"pipedream\",\n+  RAYCAST = \"raycast\",\n+  LANGCHAIN = \"langchain\",\n+  CREWAI = \"crewai\",\n+  LLAMAINDEX = \"llamaindex\",\n+  N8N = \"n8n\",\n+  CAMELAI = \"camelai\",\n+  MAKE = \"make\",\n+  FLOWISE = \"flowise\",\n+  METAGPT = \"metagpt\",\n+  UNKNOWN = \"unknown\",",
        "comment_created_at": "2025-06-04T18:22:35+00:00",
        "comment_author": "mogery",
        "comment_body": "unknown should be null to avoid storing a bunch of text in the db for nothing",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1997610416",
    "pr_number": 1346,
    "pr_file": "apps/js-sdk/firecrawl/src/index.ts",
    "created_at": "2025-03-16T13:20:45+00:00",
    "commented_code": "/**\n    * Extracts information from URLs using the Firecrawl API.\n    * Currently in Beta. Expect breaking changes on future minor versions.\n-   * @param url - The URL to extract information from.\n+   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n    * @param params - Additional parameters for the extract request.\n    * @returns The response from the extract operation.\n    */\n-  async extract<T extends zt.ZodSchema = any>(urls: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n+  async extract<T extends zt.ZodSchema = any>(urls?: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n     const headers = this.prepareHeaders();\n \n-    let jsonData: { urls: string[] } & ExtractParams<T> = { urls,  ...params };\n+    let jsonData: { urls?: string[] } & ExtractParams<T> = { urls: urls || [],  ...params };",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "1997610416",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1346,
        "pr_file": "apps/js-sdk/firecrawl/src/index.ts",
        "discussion_id": "1997610416",
        "commented_code": "@@ -1119,14 +1119,14 @@ export default class FirecrawlApp {\n   /**\n    * Extracts information from URLs using the Firecrawl API.\n    * Currently in Beta. Expect breaking changes on future minor versions.\n-   * @param url - The URL to extract information from.\n+   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n    * @param params - Additional parameters for the extract request.\n    * @returns The response from the extract operation.\n    */\n-  async extract<T extends zt.ZodSchema = any>(urls: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n+  async extract<T extends zt.ZodSchema = any>(urls?: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n     const headers = this.prepareHeaders();\n \n-    let jsonData: { urls: string[] } & ExtractParams<T> = { urls,  ...params };\n+    let jsonData: { urls?: string[] } & ExtractParams<T> = { urls: urls || [],  ...params };",
        "comment_created_at": "2025-03-16T13:20:45+00:00",
        "comment_author": "mogery",
        "comment_body": "i'd prefer if we just sent in undefined here but that's just me nitpicking\r\n```suggestion\r\n    let jsonData: { urls?: string[] } & ExtractParams<T> = { urls,  ...params };\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1997846307",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1346,
        "pr_file": "apps/js-sdk/firecrawl/src/index.ts",
        "discussion_id": "1997610416",
        "commented_code": "@@ -1119,14 +1119,14 @@ export default class FirecrawlApp {\n   /**\n    * Extracts information from URLs using the Firecrawl API.\n    * Currently in Beta. Expect breaking changes on future minor versions.\n-   * @param url - The URL to extract information from.\n+   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n    * @param params - Additional parameters for the extract request.\n    * @returns The response from the extract operation.\n    */\n-  async extract<T extends zt.ZodSchema = any>(urls: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n+  async extract<T extends zt.ZodSchema = any>(urls?: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n     const headers = this.prepareHeaders();\n \n-    let jsonData: { urls: string[] } & ExtractParams<T> = { urls,  ...params };\n+    let jsonData: { urls?: string[] } & ExtractParams<T> = { urls: urls || [],  ...params };",
        "comment_created_at": "2025-03-17T02:28:12+00:00",
        "comment_author": "nickscamara",
        "comment_body": "agreed",
        "pr_file_module": null
      },
      {
        "comment_id": "1997846883",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1346,
        "pr_file": "apps/js-sdk/firecrawl/src/index.ts",
        "discussion_id": "1997610416",
        "commented_code": "@@ -1119,14 +1119,14 @@ export default class FirecrawlApp {\n   /**\n    * Extracts information from URLs using the Firecrawl API.\n    * Currently in Beta. Expect breaking changes on future minor versions.\n-   * @param url - The URL to extract information from.\n+   * @param urls - The URLs to extract information from. Optional if using other methods for data extraction.\n    * @param params - Additional parameters for the extract request.\n    * @returns The response from the extract operation.\n    */\n-  async extract<T extends zt.ZodSchema = any>(urls: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n+  async extract<T extends zt.ZodSchema = any>(urls?: string[], params?: ExtractParams<T>): Promise<ExtractResponse<zt.infer<T>> | ErrorResponse> {\n     const headers = this.prepareHeaders();\n \n-    let jsonData: { urls: string[] } & ExtractParams<T> = { urls,  ...params };\n+    let jsonData: { urls?: string[] } & ExtractParams<T> = { urls: urls || [],  ...params };",
        "comment_created_at": "2025-03-17T02:29:23+00:00",
        "comment_author": "nickscamara",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]