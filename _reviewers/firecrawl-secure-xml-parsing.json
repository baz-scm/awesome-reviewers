[
  {
    "discussion_id": "2229682326",
    "pr_number": 1842,
    "pr_file": "apps/api/sharedLibs/crawler/src/lib.rs",
    "created_at": "2025-07-24T22:17:43+00:00",
    "commented_code": "}\n \n fn _parse_sitemap_xml(xml_content: &str) -> Result<ParsedSitemap, Box<dyn std::error::Error>> {\n-    let doc = roxmltree::Document::parse(xml_content)?;\n+    let doc = roxmltree::Document::parse_with_options(\n+        xml_content,\n+        roxmltree::ParsingOptions { allow_dtd: true, ..Default::default() },",
    "repo_full_name": "firecrawl/firecrawl",
    "discussion_comments": [
      {
        "comment_id": "2229694458",
        "repo_full_name": "firecrawl/firecrawl",
        "pr_number": 1842,
        "pr_file": "apps/api/sharedLibs/crawler/src/lib.rs",
        "discussion_id": "2229682326",
        "commented_code": "@@ -220,7 +220,10 @@ pub unsafe extern \"C\" fn filter_links(data: *const libc::c_char) -> *mut libc::c\n }\n \n fn _parse_sitemap_xml(xml_content: &str) -> Result<ParsedSitemap, Box<dyn std::error::Error>> {\n-    let doc = roxmltree::Document::parse(xml_content)?;\n+    let doc = roxmltree::Document::parse_with_options(\n+        xml_content,\n+        roxmltree::ParsingOptions { allow_dtd: true, ..Default::default() },",
        "comment_created_at": "2025-07-24T22:17:43+00:00",
        "comment_author": "mogery",
        "comment_body": "@cubic-dev-ai I'm enabling it because there were errors on prod about DTD, and roxmltree has built-in defense mechanisms against these attack vectors.",
        "pr_file_module": null
      }
    ]
  }
]