[
  {
    "discussion_id": "2289608585",
    "pr_number": 173610,
    "pr_file": "engine/src/flutter/shell/common/shell.cc",
    "created_at": "2025-08-21T00:52:12+00:00",
    "commented_code": "});\n }\n \n+bool Shell::ValidateViewportMetrics(const ViewportMetrics& metrics) {\n+  // Pixel ratio cannot be zero.\n+  if (metrics.device_pixel_ratio <= 0) {\n+    return false;\n+  }\n+\n+  // If negative values are passed in.\n+  if (metrics.physical_width < 0 || metrics.physical_height < 0 ||\n+      metrics.physical_min_width_constraint < 0 ||\n+      metrics.physical_max_width_constraint < 0 ||\n+      metrics.physical_min_height_constraint < 0 ||\n+      metrics.physical_max_height_constraint < 0) {\n+    return false;\n+  }\n+\n+  // If width is zero and the constraints are tight.\n+  if (metrics.physical_width == 0 &&\n+      metrics.physical_min_width_constraint ==\n+          metrics.physical_max_width_constraint) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2289608585",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173610,
        "pr_file": "engine/src/flutter/shell/common/shell.cc",
        "discussion_id": "2289608585",
        "commented_code": "@@ -1072,15 +1072,65 @@ void Shell::OnPlatformViewScheduleFrame() {\n                                     });\n }\n \n+bool Shell::ValidateViewportMetrics(const ViewportMetrics& metrics) {\n+  // Pixel ratio cannot be zero.\n+  if (metrics.device_pixel_ratio <= 0) {\n+    return false;\n+  }\n+\n+  // If negative values are passed in.\n+  if (metrics.physical_width < 0 || metrics.physical_height < 0 ||\n+      metrics.physical_min_width_constraint < 0 ||\n+      metrics.physical_max_width_constraint < 0 ||\n+      metrics.physical_min_height_constraint < 0 ||\n+      metrics.physical_max_height_constraint < 0) {\n+    return false;\n+  }\n+\n+  // If width is zero and the constraints are tight.\n+  if (metrics.physical_width == 0 &&\n+      metrics.physical_min_width_constraint ==\n+          metrics.physical_max_width_constraint) {",
        "comment_created_at": "2025-08-21T00:52:12+00:00",
        "comment_author": "vashworth",
        "comment_body": "Is it possible for all of them to be 0? And if so, is that a valid metric?",
        "pr_file_module": null
      },
      {
        "comment_id": "2291679714",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173610,
        "pr_file": "engine/src/flutter/shell/common/shell.cc",
        "discussion_id": "2289608585",
        "commented_code": "@@ -1072,15 +1072,65 @@ void Shell::OnPlatformViewScheduleFrame() {\n                                     });\n }\n \n+bool Shell::ValidateViewportMetrics(const ViewportMetrics& metrics) {\n+  // Pixel ratio cannot be zero.\n+  if (metrics.device_pixel_ratio <= 0) {\n+    return false;\n+  }\n+\n+  // If negative values are passed in.\n+  if (metrics.physical_width < 0 || metrics.physical_height < 0 ||\n+      metrics.physical_min_width_constraint < 0 ||\n+      metrics.physical_max_width_constraint < 0 ||\n+      metrics.physical_min_height_constraint < 0 ||\n+      metrics.physical_max_height_constraint < 0) {\n+    return false;\n+  }\n+\n+  // If width is zero and the constraints are tight.\n+  if (metrics.physical_width == 0 &&\n+      metrics.physical_min_width_constraint ==\n+          metrics.physical_max_width_constraint) {",
        "comment_created_at": "2025-08-21T17:11:35+00:00",
        "comment_author": "mboetger",
        "comment_body": "It's possible for them to all be zero - but that should not be a valid metric.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292276398",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173610,
        "pr_file": "engine/src/flutter/shell/common/shell.cc",
        "discussion_id": "2289608585",
        "commented_code": "@@ -1072,15 +1072,65 @@ void Shell::OnPlatformViewScheduleFrame() {\n                                     });\n }\n \n+bool Shell::ValidateViewportMetrics(const ViewportMetrics& metrics) {\n+  // Pixel ratio cannot be zero.\n+  if (metrics.device_pixel_ratio <= 0) {\n+    return false;\n+  }\n+\n+  // If negative values are passed in.\n+  if (metrics.physical_width < 0 || metrics.physical_height < 0 ||\n+      metrics.physical_min_width_constraint < 0 ||\n+      metrics.physical_max_width_constraint < 0 ||\n+      metrics.physical_min_height_constraint < 0 ||\n+      metrics.physical_max_height_constraint < 0) {\n+    return false;\n+  }\n+\n+  // If width is zero and the constraints are tight.\n+  if (metrics.physical_width == 0 &&\n+      metrics.physical_min_width_constraint ==\n+          metrics.physical_max_width_constraint) {",
        "comment_created_at": "2025-08-21T22:38:39+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "(Fun fact, the framework has an optimization where it does a \"warm up frame\" of size 0x0 - so the framework supports size 0x0 even if the engine rejects such metrics)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2293026225",
    "pr_number": 172850,
    "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
    "created_at": "2025-08-22T08:03:53+00:00",
    "commented_code": "},\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2293026225",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-08-22T08:03:53+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "Instead of `split`, use `currentLabel.substring(baseLabel.length)`, which is IMO clearer and also avoids a (not-yet-existing) problem where `baseLabel` appears for multiple times.",
        "pr_file_module": null
      },
      {
        "comment_id": "2293028312",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-08-22T08:04:55+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "Also, add a comment that we only support the case where `baseLabel` is a prefix of (or equal to) `currentLabel`, since we haven't observed other cases.",
        "pr_file_module": null
      },
      {
        "comment_id": "2293035594",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-08-22T08:08:37+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "Also, if you want to be super safe, instead of showing `baseLabel` as the prefix, show `currentLabel.substring(0, baseLabel.length)` to avoid the (not-yet-existing) problem where `baseLabel` is not a prefix.",
        "pr_file_module": null
      },
      {
        "comment_id": "2304773642",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-08-27T17:23:02+00:00",
        "comment_author": "MaironLucas",
        "comment_body": "I'm thinking about this approach using the `substring` function. Is it safe to use this here? If there exists a scenario (or idiom) where the `currentLabel.length < baseLabel.length`,  the code could break and show nothing on the screen.\r\nThe split approach, on the other hand, will work even if this unexpected scenario occurs.",
        "pr_file_module": null
      },
      {
        "comment_id": "2314357432",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-09-01T16:59:22+00:00",
        "comment_author": "MaironLucas",
        "comment_body": "I was looking into the intl folder to see if there is such a scenario as I described above, and I think I found one:\r\nAt `cupertino_cs`:\r\n``` json\r\n  \"timerPickerHourLabelOne\": \"hodina\",\r\n  \"timerPickerHourLabelOther\": \"hodin\",\r\n```\r\nWhich means that there is a scenario where `currentLabel` could be larger than `baseLabel`, correct?",
        "pr_file_module": null
      },
      {
        "comment_id": "2316769481",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2293026225",
        "commented_code": "@@ -2526,14 +2530,80 @@ class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n           },\n           child: _buildHourPicker(additionalPadding, selectionOverlay),\n         ),\n-        _buildLabel(\n-          localizations.timerPickerHourLabel(lastSelectedHour ?? selectedHour!) ?? '',\n-          additionalPadding,\n+        _buildAnimatedLabel(\n+          labelBuilder: (int value) => localizations.timerPickerHourLabel(value) ?? '',\n+          currentValue: lastSelectedHour ?? selectedHour!,\n+          baseValue: 1,\n+          additionalPadding: additionalPadding,\n         ),\n       ],\n     );\n   }\n \n+  /// Builds a label with animated suffix that changes when the value changes.\n+  ///\n+  /// [labelBuilder] is a function that takes a value and returns the full label text.\n+  /// [currentValue] is the current value to display.\n+  /// [baseValue] is the value used to split the label into prefix and suffix.\n+  /// [additionalPadding] is the padding to apply to the label.\n+  Widget _buildAnimatedLabel({\n+    required String Function(int) labelBuilder,\n+    required int currentValue,\n+    required int baseValue,\n+    required EdgeInsetsDirectional additionalPadding,\n+  }) {\n+    final String baseLabel = labelBuilder(baseValue);\n+    final String currentLabel = labelBuilder(currentValue);\n+    final List<String> parts = currentLabel.split(baseLabel);",
        "comment_created_at": "2025-09-02T17:47:40+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Yes, we can assume so.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2279729688",
    "pr_number": 173426,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/occlusion_map.dart",
    "created_at": "2025-08-15T19:22:23+00:00",
    "commented_code": "+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:math' as math;\n+\n+import 'package:ui/ui.dart' as ui;\n+\n+sealed class OcclusionMapNode {\n+  bool overlaps(ui.Rect rect);\n+  OcclusionMapNode insert(ui.Rect rect);\n+  ui.Rect get boundingBox;\n+}\n+\n+class OcclusionMapEmpty implements OcclusionMapNode {\n+  @override\n+  ui.Rect get boundingBox => ui.Rect.zero;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect rect) => OcclusionMapLeaf(rect);\n+\n+  @override\n+  bool overlaps(ui.Rect rect) => false;\n+}\n+\n+class OcclusionMapLeaf implements OcclusionMapNode {\n+  OcclusionMapLeaf(this.rect);\n+\n+  final ui.Rect rect;\n+\n+  @override\n+  ui.Rect get boundingBox => rect;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect other) => OcclusionMapBranch(this, OcclusionMapLeaf(other));\n+\n+  @override\n+  bool overlaps(ui.Rect other) => rect.overlaps(other);\n+}\n+\n+class OcclusionMapBranch implements OcclusionMapNode {\n+  OcclusionMapBranch(this.left, this.right)\n+    : boundingBox = left.boundingBox.expandToInclude(right.boundingBox);\n+\n+  final OcclusionMapNode left;\n+  final OcclusionMapNode right;\n+\n+  @override\n+  final ui.Rect boundingBox;\n+\n+  double _areaOfUnion(ui.Rect first, ui.Rect second) {\n+    return (math.max(first.right, second.right) - math.min(first.left, second.left)) *\n+        (math.max(first.bottom, second.bottom) - math.max(first.top, second.top));\n+  }",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2279729688",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173426,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/occlusion_map.dart",
        "discussion_id": "2279729688",
        "commented_code": "@@ -0,0 +1,89 @@\n+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:math' as math;\n+\n+import 'package:ui/ui.dart' as ui;\n+\n+sealed class OcclusionMapNode {\n+  bool overlaps(ui.Rect rect);\n+  OcclusionMapNode insert(ui.Rect rect);\n+  ui.Rect get boundingBox;\n+}\n+\n+class OcclusionMapEmpty implements OcclusionMapNode {\n+  @override\n+  ui.Rect get boundingBox => ui.Rect.zero;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect rect) => OcclusionMapLeaf(rect);\n+\n+  @override\n+  bool overlaps(ui.Rect rect) => false;\n+}\n+\n+class OcclusionMapLeaf implements OcclusionMapNode {\n+  OcclusionMapLeaf(this.rect);\n+\n+  final ui.Rect rect;\n+\n+  @override\n+  ui.Rect get boundingBox => rect;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect other) => OcclusionMapBranch(this, OcclusionMapLeaf(other));\n+\n+  @override\n+  bool overlaps(ui.Rect other) => rect.overlaps(other);\n+}\n+\n+class OcclusionMapBranch implements OcclusionMapNode {\n+  OcclusionMapBranch(this.left, this.right)\n+    : boundingBox = left.boundingBox.expandToInclude(right.boundingBox);\n+\n+  final OcclusionMapNode left;\n+  final OcclusionMapNode right;\n+\n+  @override\n+  final ui.Rect boundingBox;\n+\n+  double _areaOfUnion(ui.Rect first, ui.Rect second) {\n+    return (math.max(first.right, second.right) - math.min(first.left, second.left)) *\n+        (math.max(first.bottom, second.bottom) - math.max(first.top, second.top));\n+  }",
        "comment_created_at": "2025-08-15T19:22:23+00:00",
        "comment_author": "mdebbar",
        "comment_body": "I know this was copied from existing code, but I think it should be:\r\n```suggestion\r\n  double _areaOfUnion(ui.Rect first, ui.Rect second) {\r\n    return (math.max(first.right, second.right) - math.min(first.left, second.left)) *\r\n        (math.max(first.bottom, second.bottom) - math.min(first.top, second.top));\r\n  }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2279937731",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173426,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/occlusion_map.dart",
        "discussion_id": "2279729688",
        "commented_code": "@@ -0,0 +1,89 @@\n+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:math' as math;\n+\n+import 'package:ui/ui.dart' as ui;\n+\n+sealed class OcclusionMapNode {\n+  bool overlaps(ui.Rect rect);\n+  OcclusionMapNode insert(ui.Rect rect);\n+  ui.Rect get boundingBox;\n+}\n+\n+class OcclusionMapEmpty implements OcclusionMapNode {\n+  @override\n+  ui.Rect get boundingBox => ui.Rect.zero;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect rect) => OcclusionMapLeaf(rect);\n+\n+  @override\n+  bool overlaps(ui.Rect rect) => false;\n+}\n+\n+class OcclusionMapLeaf implements OcclusionMapNode {\n+  OcclusionMapLeaf(this.rect);\n+\n+  final ui.Rect rect;\n+\n+  @override\n+  ui.Rect get boundingBox => rect;\n+\n+  @override\n+  OcclusionMapNode insert(ui.Rect other) => OcclusionMapBranch(this, OcclusionMapLeaf(other));\n+\n+  @override\n+  bool overlaps(ui.Rect other) => rect.overlaps(other);\n+}\n+\n+class OcclusionMapBranch implements OcclusionMapNode {\n+  OcclusionMapBranch(this.left, this.right)\n+    : boundingBox = left.boundingBox.expandToInclude(right.boundingBox);\n+\n+  final OcclusionMapNode left;\n+  final OcclusionMapNode right;\n+\n+  @override\n+  final ui.Rect boundingBox;\n+\n+  double _areaOfUnion(ui.Rect first, ui.Rect second) {\n+    return (math.max(first.right, second.right) - math.min(first.left, second.left)) *\n+        (math.max(first.bottom, second.bottom) - math.max(first.top, second.top));\n+  }",
        "comment_created_at": "2025-08-15T21:44:58+00:00",
        "comment_author": "harryterkelsen",
        "comment_body": "Good catch!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274822039",
    "pr_number": 171067,
    "pr_file": "packages/flutter/lib/src/cupertino/slider.dart",
    "created_at": "2025-08-13T23:07:31+00:00",
    "commented_code": "/// If null, the slider is continuous.\n   final int? divisions;\n \n+\t/// Whether to round division to avoid floating-point precision errors.\n+\t///\n+\t/// Only takes effect when [divisions] is not null. Has no effect on continuous sliders.",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2274822039",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171067,
        "pr_file": "packages/flutter/lib/src/cupertino/slider.dart",
        "discussion_id": "2274822039",
        "commented_code": "@@ -210,6 +211,13 @@ class CupertinoSlider extends StatefulWidget {\n   /// If null, the slider is continuous.\n   final int? divisions;\n \n+\t/// Whether to round division to avoid floating-point precision errors.\n+\t///\n+\t/// Only takes effect when [divisions] is not null. Has no effect on continuous sliders.",
        "comment_created_at": "2025-08-13T23:07:31+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "I suggest adding more details. Here's my proposal. What do you think?\r\n```suggestion\r\n  /// Whether to automatically align all division points to integer values.\r\n  /// \r\n  /// When [divisions] is non-null, setting this to true ensures that each\r\n  /// division point corresponds exactly to an integer value. This is useful\r\n  /// when the divisions are intended to correspond to whole numbers, as\r\n  /// standard floating-point math can sometimes produce imprecise values (e.g.,\r\n  /// 4.999... instead of 5.0), leading to unexpected behavior.\r\n  /// \r\n  /// This property has no effect if [divisions] is null.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274839034",
    "pr_number": 171067,
    "pr_file": "packages/flutter/lib/src/cupertino/slider.dart",
    "created_at": "2025-08-13T23:20:48+00:00",
    "commented_code": "class _CupertinoSliderState extends State<CupertinoSlider> with TickerProviderStateMixin {\n   void _handleChanged(double value, bool isFastDrag) {\n     assert(widget.onChanged != null);\n-    final double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    if (widget.integralDivisions && widget.divisions != null) {\n+      lerpValue = (lerpValue * widget.divisions!).round() / widget.divisions!;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2274839034",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171067,
        "pr_file": "packages/flutter/lib/src/cupertino/slider.dart",
        "discussion_id": "2274839034",
        "commented_code": "@@ -235,7 +243,10 @@ class CupertinoSlider extends StatefulWidget {\n class _CupertinoSliderState extends State<CupertinoSlider> with TickerProviderStateMixin {\n   void _handleChanged(double value, bool isFastDrag) {\n     assert(widget.onChanged != null);\n-    final double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    if (widget.integralDivisions && widget.divisions != null) {\n+      lerpValue = (lerpValue * widget.divisions!).round() / widget.divisions!;",
        "comment_created_at": "2025-08-13T23:20:48+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "Shouldn't we simply round it? The round-with-divisions has been done at the render object level.\r\n```suggestion\r\n      lerpValue = lerpValue.round();\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2297715362",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171067,
        "pr_file": "packages/flutter/lib/src/cupertino/slider.dart",
        "discussion_id": "2274839034",
        "commented_code": "@@ -235,7 +243,10 @@ class CupertinoSlider extends StatefulWidget {\n class _CupertinoSliderState extends State<CupertinoSlider> with TickerProviderStateMixin {\n   void _handleChanged(double value, bool isFastDrag) {\n     assert(widget.onChanged != null);\n-    final double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    double lerpValue = lerpDouble(widget.min, widget.max, value)!;\n+    if (widget.integralDivisions && widget.divisions != null) {\n+      lerpValue = (lerpValue * widget.divisions!).round() / widget.divisions!;",
        "comment_created_at": "2025-08-25T10:19:17+00:00",
        "comment_author": "lucaantonelli",
        "comment_body": "I choose your version, mine was covering more cases also for non integer values but wasn't perfect in some edge cases. I just wonder if an assert could be useful, since if someone enables integralDivisions but put a non integer value could lead to assert error only at runtime, with something like that at widget level we could prevent this:\r\n\r\n```\r\nassert(\r\n  !integralDivisions || divisions == null || (max - min) % divisions == 0.0,\r\n  'When integralDivisions is true, (max - min) must be exactly divisible by divisions. ',\r\n)\r\n```\r\n\r\nI don't know if putting an operations in assert is not a good standard, or at all we don't want to catch this error and let the user face it by himself. \r\n\r\nExample to explain me better: if i put 5 divisions and than min = 0 and max = 20.5, the last value of the slider will be 21 if integralDivisions is true so throwing assert error when moving slider to the end, let me know what do you think :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2283571733",
    "pr_number": 165323,
    "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
    "created_at": "2025-08-18T21:49:39+00:00",
    "commented_code": "event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2283571733",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165323,
        "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
        "discussion_id": "2283571733",
        "commented_code": "@@ -642,6 +651,13 @@ void FlutterWindowsView::SendPointerEventWithData(\n   event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;",
        "comment_created_at": "2025-08-18T21:49:39+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Do we need to divide this by 359 here? If we do, please introduce a `kMaxPenRotation` constant.",
        "pr_file_module": null
      },
      {
        "comment_id": "2286113136",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165323,
        "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
        "discussion_id": "2283571733",
        "commented_code": "@@ -642,6 +651,13 @@ void FlutterWindowsView::SendPointerEventWithData(\n   event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;",
        "comment_created_at": "2025-08-19T19:11:18+00:00",
        "comment_author": "Demohstens",
        "comment_body": "Good question - from the docs it seems we have to convert to radians here.  \r\n```suggestion\r\n  event.rotation = (double)state->rotation * (M_PI / 180);\r\n``` \r\nWould this be sufficient here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2289384724",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165323,
        "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
        "discussion_id": "2283571733",
        "commented_code": "@@ -642,6 +651,13 @@ void FlutterWindowsView::SendPointerEventWithData(\n   event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;",
        "comment_created_at": "2025-08-20T21:53:09+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Ah yup, looks like this is radians: https://api.flutter.dev/flutter/dart-ui/PointerData/rotation.html\r\n\r\nThat looks good to me, thanks!",
        "pr_file_module": null
      }
    ]
  }
]