[
  {
    "discussion_id": "2245996993",
    "pr_number": 172997,
    "pr_file": "packages/flutter/lib/src/material/autocomplete.dart",
    "created_at": "2025-07-31T17:33:50+00:00",
    "commented_code": "this.onSelected,\n     this.optionsMaxHeight = 200.0,\n     this.optionsViewBuilder,\n-    this.optionsViewOpenDirection = OptionsViewOpenDirection.down,\n+    this.optionsViewOpenDirection = OptionsViewOpenDirection.auto,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2245996993",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172997,
        "pr_file": "packages/flutter/lib/src/material/autocomplete.dart",
        "discussion_id": "2245996993",
        "commented_code": "@@ -67,7 +67,7 @@ class Autocomplete<T extends Object> extends StatelessWidget {\n     this.onSelected,\n     this.optionsMaxHeight = 200.0,\n     this.optionsViewBuilder,\n-    this.optionsViewOpenDirection = OptionsViewOpenDirection.down,\n+    this.optionsViewOpenDirection = OptionsViewOpenDirection.auto,",
        "comment_created_at": "2025-07-31T17:33:50+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Changing the default value is a breaking change, can we keep the previous default and just add the new option?",
        "pr_file_module": null
      },
      {
        "comment_id": "2249579395",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172997,
        "pr_file": "packages/flutter/lib/src/material/autocomplete.dart",
        "discussion_id": "2245996993",
        "commented_code": "@@ -67,7 +67,7 @@ class Autocomplete<T extends Object> extends StatelessWidget {\n     this.onSelected,\n     this.optionsMaxHeight = 200.0,\n     this.optionsViewBuilder,\n-    this.optionsViewOpenDirection = OptionsViewOpenDirection.down,\n+    this.optionsViewOpenDirection = OptionsViewOpenDirection.auto,",
        "comment_created_at": "2025-08-03T06:10:34+00:00",
        "comment_author": "SalehTZ",
        "comment_body": "Yes, I agree. But isn't it better to be `automatic`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2261143314",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172997,
        "pr_file": "packages/flutter/lib/src/material/autocomplete.dart",
        "discussion_id": "2245996993",
        "commented_code": "@@ -67,7 +67,7 @@ class Autocomplete<T extends Object> extends StatelessWidget {\n     this.onSelected,\n     this.optionsMaxHeight = 200.0,\n     this.optionsViewBuilder,\n-    this.optionsViewOpenDirection = OptionsViewOpenDirection.down,\n+    this.optionsViewOpenDirection = OptionsViewOpenDirection.auto,",
        "comment_created_at": "2025-08-07T18:40:01+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Not necessarily, we want to be careful not to assume user behavior, while also preventing breaking changes.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277084059",
    "pr_number": 169715,
    "pr_file": "packages/flutter/lib/src/cupertino/desktop_text_selection.dart",
    "created_at": "2025-08-14T16:14:52+00:00",
    "commented_code": "/// Gets the position for the text selection handles, but desktop has none.\n   @override\n-  Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n+  Offset getHandleAnchor(\n+    TextSelectionHandleType type,\n+    double textLineHeight, {\n+    required double cursorWidth,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2277084059",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169715,
        "pr_file": "packages/flutter/lib/src/cupertino/desktop_text_selection.dart",
        "discussion_id": "2277084059",
        "commented_code": "@@ -70,7 +70,11 @@ class CupertinoDesktopTextSelectionControls extends TextSelectionControls {\n \n   /// Gets the position for the text selection handles, but desktop has none.\n   @override\n-  Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n+  Offset getHandleAnchor(\n+    TextSelectionHandleType type,\n+    double textLineHeight, {\n+    required double cursorWidth,",
        "comment_created_at": "2025-08-14T16:14:52+00:00",
        "comment_author": "justinmc",
        "comment_body": "This could be a breaking change. Maybe make it not required and include the default 2.0 value here if it's not provided?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2229795717",
    "pr_number": 172669,
    "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
    "created_at": "2025-07-24T23:26:16+00:00",
    "commented_code": "/// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n   ///\n   static Future<void> announce(\n+    int viewId,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2229795717",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2229795717",
        "commented_code": "@@ -45,11 +45,13 @@ abstract final class SemanticsService {\n   /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n   ///\n   static Future<void> announce(\n+    int viewId,",
        "comment_created_at": "2025-07-24T23:26:16+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "This is a hard breaking change. A package that uses this API won't be able to support both a Flutter SDK before and after this change.\r\n\r\nInstead, I would deprecate this API in favor of a new API (maybe `sendAnnouncement`?) which accepts a view ID.\r\n\r\nThis will also need a breaking change migration guide. See: https://github.com/flutter/flutter/blob/9f90740c2681ec15d27bcb576f948a7740e30a3a/docs/contributing/Tree-hygiene.md#handling-breaking-changes",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2231759898",
    "pr_number": 172669,
    "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
    "created_at": "2025-07-25T18:21:50+00:00",
    "commented_code": "/// trigger announcements.\n   ///\n   /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n+  /// {@endtemplate}\n   ///\n+  @Deprecated('Use sendAnnouncement instead.')",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2231759898",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2231759898",
        "commented_code": "@@ -43,7 +46,9 @@ abstract final class SemanticsService {\n   /// trigger announcements.\n   ///\n   /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n+  /// {@endtemplate}\n   ///\n+  @Deprecated('Use sendAnnouncement instead.')",
        "comment_created_at": "2025-07-25T18:21:50+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "We tag the current beta version so that folks know when an API was first deprecated. Also, I'd recommend adding a quick explanation why we deprecated the API as deprecations are annoying for customers if they don't have a good reason :)\r\n\r\nSee: https://github.com/flutter/flutter/blob/9f90740c2681ec15d27bcb576f948a7740e30a3a/docs/contributing/Tree-hygiene.md#deprecations\r\n\r\n```suggestion\r\n  @Deprecated(\r\n    'Use sendAnnouncement instead. '\r\n    'This API is incompatible with multiple windows. '\r\n    'This feature was deprecated after 3.35.0-0.1.pre.'\r\n  )\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2248675869",
    "pr_number": 172669,
    "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
    "created_at": "2025-08-01T19:01:17+00:00",
    "commented_code": "await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2248675869",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-01T19:01:17+00:00",
        "comment_author": "chunhtai",
        "comment_body": "Feels weird about forcing people to give an id, even for non-multiview case\r\n\r\nCan we choose one of the following?\r\n\r\n1. use kImplicitViewId if not provided\r\n\r\n2. let SemanticsService to be a per View object instead of a global singleton, and use SemanticsService.of(context).annonce() instead, or View.of(context).semanticsService.announce\r\n\r\nI slightly more leaning toward 2 since i imagine we may have more method added into this class in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "2248753823",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-01T19:47:23+00:00",
        "comment_author": "mattkae",
        "comment_body": "I am leaning towards 1 because it allows `SemanticsService` to continue to be a static service, rather than needing to maintain global instances of it. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2248798575",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-01T20:15:06+00:00",
        "comment_author": "chunhtai",
        "comment_body": "I am ok with that. if that is the case, we should reuse the original announce with an optional view_id parameter so that we don't need a breaking change",
        "pr_file_module": null
      },
      {
        "comment_id": "2252251142",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-04T18:10:32+00:00",
        "comment_author": "mattkae",
        "comment_body": "@chunhtai I've updated per your feedback. This is much simpler now, no deprecation is necessary :)",
        "pr_file_module": null
      },
      {
        "comment_id": "2254820882",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-05T16:41:26+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Sorry, I missed this conversation. I don't like option 1. Long-term, **Flutter must not make any implicit view assumptions**. All actions that are view-specific should somehow indicate which view they act on. This is necessary as desktop embedders will not have an implicit view - instead, the Dart app will create and own all windows it uses. IMO, option 1 makes it too easy to omit the view ID, thereby making it too easy to add implicit view assumptions.\r\n\r\nLong-term, I prefer a variant of option 2 (see the ideal solution below). However, I didn't suggest this as I think it is too much work. I recommend we go back to the PR's previous solution - in my mind that is the pragmatic change that does not make it harder to land the ideal solution later, while also making it clear that the view ID is now required. What do y'all think?\r\n\r\n# Ideal solution\r\n\r\nTaking a step back - the accessibility service uses platform channels. This is not ideal. Instead, ideally accessibility announcements would use the \"golden path\" of a concrete `dart:ui` API that is piped through to a concrete embedder API. Something like:\r\n\r\n<details>\r\n<summary>Ideal API...</summary>\r\n\r\n`engine/src/flutter/lib/ui/window.dart`:\r\n\r\n```dart\r\nclass FlutterView {\r\n  /* ... */\r\n\r\n  void sendAccessibilityAnnouncement(\r\n    String message,\r\n    TextDirection textDirection, {\r\n    Assertiveness assertiveness = Assertiveness.polite,\r\n  }) {\r\n    /* ... */\r\n  }\r\n}\r\n```\r\n\r\n`engine/src/flutter/shell/platform/embedder/embedder.h`:\r\n\r\n```cpp\r\ntypedef struct {\r\n  size_t struct_size;\r\n  FlutterViewId view_id;\r\n  const string* message;\r\n  FlutterTextDirection text_direction;\r\n  FlutterAccessibilityAssertiveness assertiveness;\r\n} FlutterAccessibilityAnnouncement;\r\n\r\ntypedef void (*FlutterAccessibilityAnnouncementCallback)(\r\n    const FlutterAccessibilityAnnouncement* /* announcement */,\r\n    void* /* user data*/);\r\n    \r\ntypedef struct {\r\n  /* ... */\r\n\r\n  FlutterAccessibilityAnnouncementCallback on_accessibility_announcement;\r\n} FlutterProjectArgs;\r\n```\r\n\r\n</details>\r\n\r\nI didn't suggest this as this is significantly more work to land. We would also need to figure out the migration story for out-of-tree embedders that support accessibility announcements, if any.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2260214442",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-07T12:46:54+00:00",
        "comment_author": "mattkae",
        "comment_body": "@loic-sharma Do you mean that we should revert to the previous iteration of this PR where we deprecated the old non-multi-view method in favor of the new multi-view method? I am okay with doing that as well given what you say here. \r\n\r\n@chunhtai Do you have any strong opinions against deprecation?",
        "pr_file_module": null
      },
      {
        "comment_id": "2268210251",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_service.dart",
        "discussion_id": "2248675869",
        "commented_code": "@@ -57,6 +66,25 @@ abstract final class SemanticsService {\n     await SystemChannels.accessibility.send(event.toMap());\n   }\n \n+\n+  /// Sends a semantic announcement for a particular view.\n+  ///\n+  /// {@macro flutter.semantics.service.announce}\n+  static Future<void> sendAnnouncement(\n+    int viewId,",
        "comment_created_at": "2025-08-11T23:20:53+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "> Do you mean that we should revert to the previous iteration of this PR where we deprecated the old non-multi-view method in favor of the new multi-view method? \r\n\r\nYup that's right, but I'll defer to @chunhtai :)",
        "pr_file_module": null
      }
    ]
  }
]