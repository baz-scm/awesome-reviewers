[
  {
    "discussion_id": "2279412702",
    "pr_number": 172915,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/safe_browser_api.dart",
    "created_at": "2025-08-15T16:17:26+00:00",
    "commented_code": "return fontSize;\n }\n \n+/// Parses the given style property [attributeName] of [element] and returns the\n+/// value without a unit.\n+num? parseStyleProperty(DomElement element, String attributeName) {\n+  num? styleProperty;\n+\n+  if (element.has('computedStyleMap')) {\n+    final JSAny? rawStyleProperty = element\n+        .computedStyleMap()\n+        .get(attributeName)\n+        ?.getProperty<JSAny>('value'.toJS);\n+    // If the captured rawStyleProperty is not a JSNumber we should fallback\n+    // to `getComputedStyle`. This covers cases when the style property\n+    // maybe be set to keywords like 'normal', the `computedStyleMap` does\n+    // not capture these as absolute values.\n+    if (rawStyleProperty != null && rawStyleProperty.isA<JSNumber>()) {\n+      styleProperty = (rawStyleProperty as JSNumber).toDartDouble;\n+    }\n+  }\n+\n+  // Fallback to `getComputedStyle` if the first attempt fails.\n+  if (styleProperty == null) {\n+    final String stylePropertyString = domWindow\n+        .getComputedStyle(element)\n+        .getPropertyValue(attributeName);\n+\n+    final num? parsed = parseFloat(stylePropertyString);\n+    if (parsed != null && !parsed.isNaN) {\n+      styleProperty = parsed;\n+    }",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2279412702",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/safe_browser_api.dart",
        "discussion_id": "2279412702",
        "commented_code": "@@ -56,6 +56,40 @@ num? parseFontSize(DomElement element) {\n   return fontSize;\n }\n \n+/// Parses the given style property [attributeName] of [element] and returns the\n+/// value without a unit.\n+num? parseStyleProperty(DomElement element, String attributeName) {\n+  num? styleProperty;\n+\n+  if (element.has('computedStyleMap')) {\n+    final JSAny? rawStyleProperty = element\n+        .computedStyleMap()\n+        .get(attributeName)\n+        ?.getProperty<JSAny>('value'.toJS);\n+    // If the captured rawStyleProperty is not a JSNumber we should fallback\n+    // to `getComputedStyle`. This covers cases when the style property\n+    // maybe be set to keywords like 'normal', the `computedStyleMap` does\n+    // not capture these as absolute values.\n+    if (rawStyleProperty != null && rawStyleProperty.isA<JSNumber>()) {\n+      styleProperty = (rawStyleProperty as JSNumber).toDartDouble;\n+    }\n+  }\n+\n+  // Fallback to `getComputedStyle` if the first attempt fails.\n+  if (styleProperty == null) {\n+    final String stylePropertyString = domWindow\n+        .getComputedStyle(element)\n+        .getPropertyValue(attributeName);\n+\n+    final num? parsed = parseFloat(stylePropertyString);\n+    if (parsed != null && !parsed.isNaN) {\n+      styleProperty = parsed;\n+    }",
        "comment_created_at": "2025-08-15T16:17:26+00:00",
        "comment_author": "mdebbar",
        "comment_body": "```suggestion\r\n    styleProperty = parsed;\r\n```\r\nThe extra checks are not necessary. `parseFloat()` already handles the `isNaN` case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1698816257",
    "pr_number": 152330,
    "pr_file": "packages/flutter/lib/src/widgets/navigator.dart",
    "created_at": "2024-07-31T16:45:33+00:00",
    "commented_code": "),\n       ),\n     );\n+\n+    // If this is a nested Navigator, handle system backs here so that the root\n+    // Navigator doesn't get all of them.\n+    if (widget.handlesBacksWhenNested && Navigator.maybeOf(context, rootNavigator: true) != this) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "1698816257",
        "repo_full_name": "flutter/flutter",
        "pr_number": 152330,
        "pr_file": "packages/flutter/lib/src/widgets/navigator.dart",
        "discussion_id": "1698816257",
        "commented_code": "@@ -5665,6 +5668,22 @@ class NavigatorState extends State<Navigator> with TickerProviderStateMixin, Res\n         ),\n       ),\n     );\n+\n+    // If this is a nested Navigator, handle system backs here so that the root\n+    // Navigator doesn't get all of them.\n+    if (widget.handlesBacksWhenNested && Navigator.maybeOf(context, rootNavigator: true) != this) {",
        "comment_created_at": "2024-07-31T16:45:33+00:00",
        "comment_author": "chunhtai",
        "comment_body": "Navigator.maybeOf may be costly in this situation since this will walk ancestor chain every rebuild, I will probably put the check in didChangeDependencies",
        "pr_file_module": null
      },
      {
        "comment_id": "1747791179",
        "repo_full_name": "flutter/flutter",
        "pr_number": 152330,
        "pr_file": "packages/flutter/lib/src/widgets/navigator.dart",
        "discussion_id": "1698816257",
        "commented_code": "@@ -5665,6 +5668,22 @@ class NavigatorState extends State<Navigator> with TickerProviderStateMixin, Res\n         ),\n       ),\n     );\n+\n+    // If this is a nested Navigator, handle system backs here so that the root\n+    // Navigator doesn't get all of them.\n+    if (widget.handlesBacksWhenNested && Navigator.maybeOf(context, rootNavigator: true) != this) {",
        "comment_created_at": "2024-09-06T22:49:17+00:00",
        "comment_author": "justinmc",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2283800016",
    "pr_number": 173715,
    "pr_file": "packages/flutter/lib/src/widgets/_window_win32.dart",
    "created_at": "2025-08-19T01:12:02+00:00",
    "commented_code": "+// Copyright 2014 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+// Do not import this file in production applications or packages published\n+// to pub.dev. Flutter will make breaking changes to this file, even in patch\n+// versions.\n+//\n+// All APIs in this file must be private or must:\n+//\n+// 1. Have the `@internal` attribute.\n+// 2. Throw an `UnsupportedError` if `isWindowingEnabled`\n+//    is `false.\n+//\n+// See: https://github.com/flutter/flutter/issues/30701.\n+\n+import 'dart:ffi' as ffi;\n+import 'dart:io';\n+import 'dart:typed_data';\n+import 'dart:ui' show Display, FlutterView;\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/rendering.dart';\n+\n+import '_window.dart';\n+\n+/// A Win32 window handle.\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+@internal\n+typedef HWND = ffi.Pointer<ffi.Void>;\n+\n+const int _WM_SIZE = 0x0005;\n+const int _WM_ACTIVATE = 0x0006;\n+const int _WM_CLOSE = 0x0010;\n+\n+const int _SW_RESTORE = 9;\n+const int _SW_MAXIMIZE = 3;\n+const int _SW_MINIMIZE = 6;\n+\n+/// Abstract handler class for Windows messages.\n+///\n+/// Implementations of this class should register with\n+/// [WindowingOwnerWin32.addMessageHandler] to begin receiving messages.\n+/// When finished handling messages, implementations should deregister\n+/// themselves with [WindowingOwnerWin32.removeMessageHandler].\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+///\n+/// See also:\n+///\n+///  * [WindowingOwnerWin32], the class that manages these handlers.\n+@internal\n+abstract class WindowsMessageHandler {\n+  /// Handles a window message.\n+  ///\n+  /// Returned value, if not null will be returned to the system as LRESULT\n+  /// and will stop all other handlers from being called. See\n+  /// https://learn.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-wndproc\n+  /// for more information.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  @internal\n+  int? handleWindowsMessage(\n+    FlutterView view,\n+    HWND windowHandle,\n+    int message,\n+    int wParam,\n+    int lParam,\n+  );\n+}\n+\n+/// [WindowingOwner] implementation for Windows.\n+///\n+/// If [Platform.isWindows] is false, then the constructor will throw an\n+/// [UnsupportedError].\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+///\n+/// See also:\n+///\n+///  * [WindowingOwner], the abstract class that manages native windows.\n+@internal\n+class WindowingOwnerWin32 extends WindowingOwner {\n+  /// Creates a new [WindowingOwnerWin32] instance.\n+  ///\n+  /// If [Platform.isWindows] is false, then this constructor will throw an\n+  /// [UnsupportedError]\n+  ///\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowingOwner], the abstract class that manages native windows.\n+  @internal\n+  WindowingOwnerWin32() : allocator = _CallocAllocator._() {\n+    if (!Platform.isWindows) {\n+      throw UnsupportedError('Only available on the Win32 platform');\n+    }\n+\n+    final ffi.Pointer<_WindowingInitRequest> request = allocator<_WindowingInitRequest>()\n+      ..ref.onMessage =\n+          ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_WindowsMessage>)>.isolateLocal(\n+            _onMessage,\n+          ).nativeFunction;\n+    _Win32PlatformInterface.initializeWindowing(PlatformDispatcher.instance.engineId!, request);\n+    allocator.free(request);\n+  }\n+\n+  final List<WindowsMessageHandler> _messageHandlers = <WindowsMessageHandler>[];\n+\n+  /// The [Allocator] used for allocating native memory in this owner.\n+  ///\n+  /// This can be overridden via the [WindowingOwnerWin32.test] constructor.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  @internal\n+  final ffi.Allocator allocator;\n+\n+  @internal\n+  @override\n+  RegularWindowController createRegularWindowController({\n+    Size? preferredSize,\n+    BoxConstraints? preferredConstraints,\n+    String? title,\n+    required RegularWindowControllerDelegate delegate,\n+  }) {\n+    return RegularWindowControllerWin32(\n+      owner: this,\n+      delegate: delegate,\n+      preferredSize: preferredSize,\n+      preferredConstraints: preferredConstraints,\n+      title: title,\n+    );\n+  }\n+\n+  /// Register a new [WindowsMessageHandler].\n+  ///\n+  /// The handler will be triggered for unhandled messages for all top level\n+  /// windows.\n+  ///\n+  /// Adding a handler multiple times has no effect.\n+  ///\n+  /// Handlers are called in the order that they are added.\n+  ///\n+  /// Callers must remove their message handlers using\n+  /// [WindowingOwnerWin32.removeMessageHandler].\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowsMessageHandler], the interface for message handlers.\n+  ///  * [WindowingOwnerWin32.removeMessageHandler], to remove message handlers.\n+  @internal\n+  void addMessageHandler(WindowsMessageHandler handler) {\n+    if (_messageHandlers.contains(handler)) {\n+      return;\n+    }\n+\n+    _messageHandlers.add(handler);\n+  }\n+\n+  /// Unregister a [WindowsMessageHandler].\n+  ///\n+  /// If the handler has not been registered, this method has no effect.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowsMessageHandler], the interface for message handlers.\n+  ///  * [WindowingOwnerWin32.addMessageHandler], to register message handlers.\n+  @internal\n+  void removeMessageHandler(WindowsMessageHandler handler) {\n+    _messageHandlers.remove(handler);\n+  }\n+\n+  void _onMessage(ffi.Pointer<_WindowsMessage> message) {\n+    final List<WindowsMessageHandler> handlers = List<WindowsMessageHandler>.from(_messageHandlers);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2283800016",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173715,
        "pr_file": "packages/flutter/lib/src/widgets/_window_win32.dart",
        "discussion_id": "2283800016",
        "commented_code": "@@ -0,0 +1,760 @@\n+// Copyright 2014 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+// Do not import this file in production applications or packages published\n+// to pub.dev. Flutter will make breaking changes to this file, even in patch\n+// versions.\n+//\n+// All APIs in this file must be private or must:\n+//\n+// 1. Have the `@internal` attribute.\n+// 2. Throw an `UnsupportedError` if `isWindowingEnabled`\n+//    is `false.\n+//\n+// See: https://github.com/flutter/flutter/issues/30701.\n+\n+import 'dart:ffi' as ffi;\n+import 'dart:io';\n+import 'dart:typed_data';\n+import 'dart:ui' show Display, FlutterView;\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/rendering.dart';\n+\n+import '_window.dart';\n+\n+/// A Win32 window handle.\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+@internal\n+typedef HWND = ffi.Pointer<ffi.Void>;\n+\n+const int _WM_SIZE = 0x0005;\n+const int _WM_ACTIVATE = 0x0006;\n+const int _WM_CLOSE = 0x0010;\n+\n+const int _SW_RESTORE = 9;\n+const int _SW_MAXIMIZE = 3;\n+const int _SW_MINIMIZE = 6;\n+\n+/// Abstract handler class for Windows messages.\n+///\n+/// Implementations of this class should register with\n+/// [WindowingOwnerWin32.addMessageHandler] to begin receiving messages.\n+/// When finished handling messages, implementations should deregister\n+/// themselves with [WindowingOwnerWin32.removeMessageHandler].\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+///\n+/// See also:\n+///\n+///  * [WindowingOwnerWin32], the class that manages these handlers.\n+@internal\n+abstract class WindowsMessageHandler {\n+  /// Handles a window message.\n+  ///\n+  /// Returned value, if not null will be returned to the system as LRESULT\n+  /// and will stop all other handlers from being called. See\n+  /// https://learn.microsoft.com/en-us/windows/win32/api/winuser/nc-winuser-wndproc\n+  /// for more information.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  @internal\n+  int? handleWindowsMessage(\n+    FlutterView view,\n+    HWND windowHandle,\n+    int message,\n+    int wParam,\n+    int lParam,\n+  );\n+}\n+\n+/// [WindowingOwner] implementation for Windows.\n+///\n+/// If [Platform.isWindows] is false, then the constructor will throw an\n+/// [UnsupportedError].\n+///\n+/// {@macro flutter.widgets.windowing.experimental}\n+///\n+/// See also:\n+///\n+///  * [WindowingOwner], the abstract class that manages native windows.\n+@internal\n+class WindowingOwnerWin32 extends WindowingOwner {\n+  /// Creates a new [WindowingOwnerWin32] instance.\n+  ///\n+  /// If [Platform.isWindows] is false, then this constructor will throw an\n+  /// [UnsupportedError]\n+  ///\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowingOwner], the abstract class that manages native windows.\n+  @internal\n+  WindowingOwnerWin32() : allocator = _CallocAllocator._() {\n+    if (!Platform.isWindows) {\n+      throw UnsupportedError('Only available on the Win32 platform');\n+    }\n+\n+    final ffi.Pointer<_WindowingInitRequest> request = allocator<_WindowingInitRequest>()\n+      ..ref.onMessage =\n+          ffi.NativeCallable<ffi.Void Function(ffi.Pointer<_WindowsMessage>)>.isolateLocal(\n+            _onMessage,\n+          ).nativeFunction;\n+    _Win32PlatformInterface.initializeWindowing(PlatformDispatcher.instance.engineId!, request);\n+    allocator.free(request);\n+  }\n+\n+  final List<WindowsMessageHandler> _messageHandlers = <WindowsMessageHandler>[];\n+\n+  /// The [Allocator] used for allocating native memory in this owner.\n+  ///\n+  /// This can be overridden via the [WindowingOwnerWin32.test] constructor.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  @internal\n+  final ffi.Allocator allocator;\n+\n+  @internal\n+  @override\n+  RegularWindowController createRegularWindowController({\n+    Size? preferredSize,\n+    BoxConstraints? preferredConstraints,\n+    String? title,\n+    required RegularWindowControllerDelegate delegate,\n+  }) {\n+    return RegularWindowControllerWin32(\n+      owner: this,\n+      delegate: delegate,\n+      preferredSize: preferredSize,\n+      preferredConstraints: preferredConstraints,\n+      title: title,\n+    );\n+  }\n+\n+  /// Register a new [WindowsMessageHandler].\n+  ///\n+  /// The handler will be triggered for unhandled messages for all top level\n+  /// windows.\n+  ///\n+  /// Adding a handler multiple times has no effect.\n+  ///\n+  /// Handlers are called in the order that they are added.\n+  ///\n+  /// Callers must remove their message handlers using\n+  /// [WindowingOwnerWin32.removeMessageHandler].\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowsMessageHandler], the interface for message handlers.\n+  ///  * [WindowingOwnerWin32.removeMessageHandler], to remove message handlers.\n+  @internal\n+  void addMessageHandler(WindowsMessageHandler handler) {\n+    if (_messageHandlers.contains(handler)) {\n+      return;\n+    }\n+\n+    _messageHandlers.add(handler);\n+  }\n+\n+  /// Unregister a [WindowsMessageHandler].\n+  ///\n+  /// If the handler has not been registered, this method has no effect.\n+  ///\n+  /// {@macro flutter.widgets.windowing.experimental}\n+  ///\n+  /// See also:\n+  ///\n+  ///  * [WindowsMessageHandler], the interface for message handlers.\n+  ///  * [WindowingOwnerWin32.addMessageHandler], to register message handlers.\n+  @internal\n+  void removeMessageHandler(WindowsMessageHandler handler) {\n+    _messageHandlers.remove(handler);\n+  }\n+\n+  void _onMessage(ffi.Pointer<_WindowsMessage> message) {\n+    final List<WindowsMessageHandler> handlers = List<WindowsMessageHandler>.from(_messageHandlers);",
        "comment_created_at": "2025-08-19T01:12:02+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "It doesn't seem ideal for us to be allocating a list on every win32 message.\r\n\r\nCould we instead add debug assertions that the message handlers list is not modified while we're processing a message?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2301946073",
    "pr_number": 174456,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/scene_view.dart",
    "created_at": "2025-08-26T19:31:54+00:00",
    "commented_code": "// It is optionally asynchronous. It is required for the `EngineSceneView` to\n // composite pictures into the canvases in the DOM tree it builds.\n abstract class PictureRenderer {\n-  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture);\n+  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture, int width, int height);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2301946073",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174456,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/scene_view.dart",
        "discussion_id": "2301946073",
        "commented_code": "@@ -19,7 +19,7 @@ typedef RenderResult = ({\n // It is optionally asynchronous. It is required for the `EngineSceneView` to\n // composite pictures into the canvases in the DOM tree it builds.\n abstract class PictureRenderer {\n-  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture);\n+  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture, int width, int height);",
        "comment_created_at": "2025-08-26T19:31:54+00:00",
        "comment_author": "eyebrowsoffire",
        "comment_body": "I think with this change, you can remove the code paths that use the `clipPicture` stuff. Basically if the `cullRect` of any picture is beyond the bounds of the screen, we redraw the picture, clipping it to the screen. But since you're rendering this way where you are setting the width/height explicitly, I don't think any of that clipping stuff is necessary anymore.",
        "pr_file_module": null
      },
      {
        "comment_id": "2302020575",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174456,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/scene_view.dart",
        "discussion_id": "2301946073",
        "commented_code": "@@ -19,7 +19,7 @@ typedef RenderResult = ({\n // It is optionally asynchronous. It is required for the `EngineSceneView` to\n // composite pictures into the canvases in the DOM tree it builds.\n abstract class PictureRenderer {\n-  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture);\n+  FutureOr<RenderResult> renderPictures(List<ScenePicture> picture, int width, int height);",
        "comment_created_at": "2025-08-26T20:04:39+00:00",
        "comment_author": "harryterkelsen",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211107028",
    "pr_number": 171067,
    "pr_file": "packages/flutter/lib/src/material/range_slider.dart",
    "created_at": "2025-07-16T17:45:11+00:00",
    "commented_code": "// Returns a number between min and max, proportional to value, which must\n   // be between 0.0 and 1.0.\n-  double _lerp(double value) => ui.lerpDouble(widget.min, widget.max, value)!;\n+  double _lerp(double value) {\n+    double lerpValue = ui.lerpDouble(widget.min, widget.max, value)!;\n+    if (widget.divisions != null) {\n+      lerpValue = (lerpValue * widget.divisions!).round() / widget.divisions!;\n+    }",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2211107028",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171067,
        "pr_file": "packages/flutter/lib/src/material/range_slider.dart",
        "discussion_id": "2211107028",
        "commented_code": "@@ -573,7 +573,13 @@ class _RangeSliderState extends State<RangeSlider> with TickerProviderStateMixin\n \n   // Returns a number between min and max, proportional to value, which must\n   // be between 0.0 and 1.0.\n-  double _lerp(double value) => ui.lerpDouble(widget.min, widget.max, value)!;\n+  double _lerp(double value) {\n+    double lerpValue = ui.lerpDouble(widget.min, widget.max, value)!;\n+    if (widget.divisions != null) {\n+      lerpValue = (lerpValue * widget.divisions!).round() / widget.divisions!;\n+    }",
        "comment_created_at": "2025-07-16T17:45:11+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "Rather than computing `lerpValue` twice, maybe put it in a `if...else` statement with two returns?",
        "pr_file_module": null
      }
    ]
  }
]