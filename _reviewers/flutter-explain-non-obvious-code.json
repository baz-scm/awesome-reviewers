[
  {
    "discussion_id": "2261168460",
    "pr_number": 172850,
    "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
    "created_at": "2025-08-07T18:54:02+00:00",
    "commented_code": "State<StatefulWidget> createState() => _CupertinoTimerPickerState();\n }\n \n-class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n+class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> with TickerProviderStateMixin {\n+  // Animation configuration\n+  static const Duration _kLabelAnimationDuration = Duration(milliseconds: 200);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2261168460",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2261168460",
        "commented_code": "@@ -2264,7 +2264,10 @@ class CupertinoTimerPicker extends StatefulWidget {\n   State<StatefulWidget> createState() => _CupertinoTimerPickerState();\n }\n \n-class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> {\n+class _CupertinoTimerPickerState extends State<CupertinoTimerPicker> with TickerProviderStateMixin {\n+  // Animation configuration\n+  static const Duration _kLabelAnimationDuration = Duration(milliseconds: 200);",
        "comment_created_at": "2025-08-07T18:54:02+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Instead of defining this here, can we define it outside the class at the top of the file? Also add a comment explaining how the value was derived (there are multiple examples in the cupertino library to draw from).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2305373235",
    "pr_number": 173364,
    "pr_file": "engine/src/flutter/shell/platform/android/platform_view_android_delegate/platform_view_android_delegate.h",
    "created_at": "2025-08-27T21:54:33+00:00",
    "commented_code": "class PlatformViewAndroidDelegate {\n  public:\n-  static constexpr size_t kBytesPerNode = 50 * sizeof(int32_t);\n+  static constexpr size_t kBytesPerNode = 51 * sizeof(int32_t);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2305373235",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173364,
        "pr_file": "engine/src/flutter/shell/platform/android/platform_view_android_delegate/platform_view_android_delegate.h",
        "discussion_id": "2305373235",
        "commented_code": "@@ -16,11 +16,12 @@ namespace flutter {\n \n class PlatformViewAndroidDelegate {\n  public:\n-  static constexpr size_t kBytesPerNode = 50 * sizeof(int32_t);\n+  static constexpr size_t kBytesPerNode = 51 * sizeof(int32_t);",
        "comment_created_at": "2025-08-27T21:54:33+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "Having a comment where 51 comes from would really help.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2294391465",
    "pr_number": 174234,
    "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.h",
    "created_at": "2025-08-22T18:23:17+00:00",
    "commented_code": "// UITextInputTraits\n @property(nonatomic) UITextAutocapitalizationType autocapitalizationType;\n+@property(nonatomic) UITextAutocapitalizationType originalAutocapitalizationType;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2294391465",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174234,
        "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.h",
        "discussion_id": "2294391465",
        "commented_code": "@@ -150,6 +150,7 @@ FLUTTER_DARWIN_EXPORT\n \n // UITextInputTraits\n @property(nonatomic) UITextAutocapitalizationType autocapitalizationType;\n+@property(nonatomic) UITextAutocapitalizationType originalAutocapitalizationType;",
        "comment_created_at": "2025-08-22T18:23:17+00:00",
        "comment_author": "hellohuanlin",
        "comment_body": "can add a comment explaining why adding this? (why not just use `autocapitalizationType`?)",
        "pr_file_module": null
      },
      {
        "comment_id": "2301674126",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174234,
        "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.h",
        "discussion_id": "2294391465",
        "commented_code": "@@ -150,6 +150,7 @@ FLUTTER_DARWIN_EXPORT\n \n // UITextInputTraits\n @property(nonatomic) UITextAutocapitalizationType autocapitalizationType;\n+@property(nonatomic) UITextAutocapitalizationType originalAutocapitalizationType;",
        "comment_created_at": "2025-08-26T17:33:46+00:00",
        "comment_author": "okorohelijah",
        "comment_body": "Done. \r\n\r\nWe can't use autocapitalizationType for our check because our fix dynamically changes its value between Words and None to control the keyboard. If we checked against autocapitalizationType, the logic would break after the first time it runs and sets the type to None. We need originalAutocapitalizationType to remember the developer's original goal which is UITextAutocapitalizationTypeWords.",
        "pr_file_module": null
      },
      {
        "comment_id": "2301810066",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174234,
        "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.h",
        "discussion_id": "2294391465",
        "commented_code": "@@ -150,6 +150,7 @@ FLUTTER_DARWIN_EXPORT\n \n // UITextInputTraits\n @property(nonatomic) UITextAutocapitalizationType autocapitalizationType;\n+@property(nonatomic) UITextAutocapitalizationType originalAutocapitalizationType;",
        "comment_created_at": "2025-08-26T18:34:22+00:00",
        "comment_author": "hellohuanlin",
        "comment_body": ">  dynamically changes its value between Words and None to control the keyboard. \r\n\r\ncan you put this info in the comment too? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2301814947",
    "pr_number": 174234,
    "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.mm",
    "created_at": "2025-08-26T18:36:53+00:00",
    "commented_code": "_selectedTextRange = [selectedTextRange copy];\n     }\n   }\n+\n+  if (self.originalAutocapitalizationType == UITextAutocapitalizationTypeWords) {\n+    NSRange selection = ((FlutterTextRange*)_selectedTextRange).range;\n+    BOOL shouldCapitalize = NO;\n+    if (selection.location == 0) {\n+      shouldCapitalize = YES;\n+    } else if (selection.location <= self.text.length) {\n+      unichar previousChar = [self.text characterAtIndex:selection.location - 1];\n+      shouldCapitalize =",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2301814947",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174234,
        "pr_file": "engine/src/flutter/shell/platform/darwin/ios/framework/Source/FlutterTextInputPlugin.mm",
        "discussion_id": "2301814947",
        "commented_code": "@@ -1402,6 +1403,26 @@ - (void)setSelectedTextRangeLocal:(UITextRange*)selectedTextRange {\n       _selectedTextRange = [selectedTextRange copy];\n     }\n   }\n+\n+  if (self.originalAutocapitalizationType == UITextAutocapitalizationTypeWords) {\n+    NSRange selection = ((FlutterTextRange*)_selectedTextRange).range;\n+    BOOL shouldCapitalize = NO;\n+    if (selection.location == 0) {\n+      shouldCapitalize = YES;\n+    } else if (selection.location <= self.text.length) {\n+      unichar previousChar = [self.text characterAtIndex:selection.location - 1];\n+      shouldCapitalize =",
        "comment_created_at": "2025-08-26T18:36:53+00:00",
        "comment_author": "hellohuanlin",
        "comment_body": "can you add a comment here to say that this is to fix a wrong capitalization issue (and add github issue link too)? it's hard to understand the intention when reading the code without additional context. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2308442363",
    "pr_number": 174659,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/occlusion_map.dart",
    "created_at": "2025-08-28T20:15:49+00:00",
    "commented_code": "@override\n   OcclusionMapNode insert(ui.Rect other) {\n+    if (rectContainsOther(other, boundingBox)) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2308442363",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174659,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/occlusion_map.dart",
        "discussion_id": "2308442363",
        "commented_code": "@@ -55,17 +65,28 @@ class OcclusionMapBranch implements OcclusionMapNode {\n \n   @override\n   OcclusionMapNode insert(ui.Rect other) {\n+    if (rectContainsOther(other, boundingBox)) {",
        "comment_created_at": "2025-08-28T20:15:49+00:00",
        "comment_author": "harryterkelsen",
        "comment_body": "Add a comment saying something like \"If `other` contains the entire bounding box of the left and right branch, then replace this branch with a leaf that just contains `other`\". I think this line is a bit too clever to go without a comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2304660085",
    "pr_number": 174463,
    "pr_file": "engine/src/flutter/impeller/entity/contents/host_buffer_unittests.cc",
    "created_at": "2025-08-27T16:50:11+00:00",
    "commented_code": "auto mock_idle_waiter = std::make_shared<MockIdleWaiter>();\n   {\n     auto buffer = HostBuffer::Create(GetContext()->GetResourceAllocator(),\n-                                     mock_idle_waiter, 256);\n+                                     mock_idle_waiter, 256, false);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2304660085",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174463,
        "pr_file": "engine/src/flutter/impeller/entity/contents/host_buffer_unittests.cc",
        "discussion_id": "2304660085",
        "commented_code": "@@ -28,7 +28,7 @@ TEST_P(HostBufferTest, IdleWaiter) {\n   auto mock_idle_waiter = std::make_shared<MockIdleWaiter>();\n   {\n     auto buffer = HostBuffer::Create(GetContext()->GetResourceAllocator(),\n-                                     mock_idle_waiter, 256);\n+                                     mock_idle_waiter, 256, false);",
        "comment_created_at": "2025-08-27T16:50:11+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "You should have an argument comment when passing in literals as rvalues.\r\n\r\n```suggestion\r\n                                     mock_idle_waiter, 256, /*partition_by_category=*/false);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127495258",
    "pr_number": 169715,
    "pr_file": "packages/flutter/lib/src/material/text_selection.dart",
    "created_at": "2025-06-04T21:47:29+00:00",
    "commented_code": "@override\n   Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n     return switch (type) {\n-      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2, -4),\n+      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2.18, -4.5),",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2127495258",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169715,
        "pr_file": "packages/flutter/lib/src/material/text_selection.dart",
        "discussion_id": "2127495258",
        "commented_code": "@@ -112,7 +112,7 @@ class MaterialTextSelectionControls extends TextSelectionControls {\n   @override\n   Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n     return switch (type) {\n-      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2, -4),\n+      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2.18, -4.5),",
        "comment_created_at": "2025-06-04T21:47:29+00:00",
        "comment_author": "justinmc",
        "comment_body": "Can you add a comment explaining how you came up with these values? Something like:\r\n\r\n```\r\n// These values were eyeballed to match a physical Pixel 9 Running Android 16.\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167559395",
    "pr_number": 169715,
    "pr_file": "packages/flutter/lib/src/material/text_selection.dart",
    "created_at": "2025-06-25T20:22:12+00:00",
    "commented_code": "@override\n   Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n     return switch (type) {\n-      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2, -4),\n+      TextSelectionHandleType.collapsed => const Offset((_kHandleSize - 2) / 2, -4.6),",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2167559395",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169715,
        "pr_file": "packages/flutter/lib/src/material/text_selection.dart",
        "discussion_id": "2167559395",
        "commented_code": "@@ -112,7 +112,7 @@ class MaterialTextSelectionControls extends TextSelectionControls {\n   @override\n   Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n     return switch (type) {\n-      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2, -4),\n+      TextSelectionHandleType.collapsed => const Offset((_kHandleSize - 2) / 2, -4.6),",
        "comment_created_at": "2025-06-25T20:22:12+00:00",
        "comment_author": "justinmc",
        "comment_body": "I still think you should add a comment here explaining where these values come from. See https://github.com/flutter/flutter/pull/169715#discussion_r2127495258.",
        "pr_file_module": null
      },
      {
        "comment_id": "2169986772",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169715,
        "pr_file": "packages/flutter/lib/src/material/text_selection.dart",
        "discussion_id": "2167559395",
        "commented_code": "@@ -112,7 +112,7 @@ class MaterialTextSelectionControls extends TextSelectionControls {\n   @override\n   Offset getHandleAnchor(TextSelectionHandleType type, double textLineHeight) {\n     return switch (type) {\n-      TextSelectionHandleType.collapsed => const Offset(_kHandleSize / 2, -4),\n+      TextSelectionHandleType.collapsed => const Offset((_kHandleSize - 2) / 2, -4.6),",
        "comment_created_at": "2025-06-26T20:51:35+00:00",
        "comment_author": "justinmc",
        "comment_body": "Ok based on your comments above like https://github.com/flutter/flutter/pull/169715#issuecomment-3009214569, it sounds like a comment like this would be good:\r\n\r\n > Eyeballed to match a physical Pixel 9 running Android 16, which horizontally centers the anchor 1 pixel below the cursor.\r\n\r\nI can confirm that that's what my Pixel 9 seems to do.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2308467349",
    "pr_number": 174608,
    "pr_file": "packages/flutter_test/test/matchers_test.dart",
    "created_at": "2025-08-28T20:29:40+00:00",
    "commented_code": "handle.dispose();\n     });\n+    testWidgets('can match validation result', (WidgetTester tester) async {\n+      final SemanticsHandle handle = tester.ensureSemantics();\n+      const Key key = Key('a');\n+      await tester.pumpWidget(\n+        Semantics(\n+          key: key,\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+      final SemanticsNode node = tester.getSemantics(find.byKey(key));\n+\n+      expect(\n+        node,\n+        containsSemantics(\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+\n+      handle.dispose();\n+    });\n+\n+    testWidgets('can ignore validation result', (WidgetTester tester) async {\n+      final SemanticsHandle handle = tester.ensureSemantics();\n+      const Key key = Key('a');\n+      await tester.pumpWidget(\n+        Semantics(\n+          key: key,\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+      final SemanticsNode node = tester.getSemantics(find.byKey(key));\n+\n+      expect(node, containsSemantics(label: 'Foo', textDirection: TextDirection.ltr));",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2308467349",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174608,
        "pr_file": "packages/flutter_test/test/matchers_test.dart",
        "discussion_id": "2308467349",
        "commented_code": "@@ -1348,6 +1348,48 @@ void main() {\n \n       handle.dispose();\n     });\n+    testWidgets('can match validation result', (WidgetTester tester) async {\n+      final SemanticsHandle handle = tester.ensureSemantics();\n+      const Key key = Key('a');\n+      await tester.pumpWidget(\n+        Semantics(\n+          key: key,\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+      final SemanticsNode node = tester.getSemantics(find.byKey(key));\n+\n+      expect(\n+        node,\n+        containsSemantics(\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+\n+      handle.dispose();\n+    });\n+\n+    testWidgets('can ignore validation result', (WidgetTester tester) async {\n+      final SemanticsHandle handle = tester.ensureSemantics();\n+      const Key key = Key('a');\n+      await tester.pumpWidget(\n+        Semantics(\n+          key: key,\n+          label: 'Foo',\n+          validationResult: SemanticsValidationResult.valid,\n+          textDirection: TextDirection.ltr,\n+        ),\n+      );\n+      final SemanticsNode node = tester.getSemantics(find.byKey(key));\n+\n+      expect(node, containsSemantics(label: 'Foo', textDirection: TextDirection.ltr));",
        "comment_created_at": "2025-08-28T20:29:40+00:00",
        "comment_author": "yjbanov",
        "comment_body": "Consider adding a comment along these lines:\r\n\r\n```\r\n// It is important that validationResult is passed as null to containsSemantics,\r\n// because this is testing that null means \"ignore the validation result value\".\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2170330270",
    "pr_number": 171242,
    "pr_file": "packages/flutter/lib/src/cupertino/text_field.dart",
    "created_at": "2025-06-27T00:06:19+00:00",
    "commented_code": "BuildContext context,\n     EditableTextState editableTextState,\n   ) {\n-    if (defaultTargetPlatform == TargetPlatform.iOS && SystemContextMenu.isSupported(context)) {\n+    if (defaultTargetPlatform == TargetPlatform.iOS &&\n+        SystemContextMenu.isSupported(context) &&\n+        !editableTextState.widget.readOnly) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2170330270",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171242,
        "pr_file": "packages/flutter/lib/src/cupertino/text_field.dart",
        "discussion_id": "2170330270",
        "commented_code": "@@ -815,7 +815,9 @@ class CupertinoTextField extends StatefulWidget {\n     BuildContext context,\n     EditableTextState editableTextState,\n   ) {\n-    if (defaultTargetPlatform == TargetPlatform.iOS && SystemContextMenu.isSupported(context)) {\n+    if (defaultTargetPlatform == TargetPlatform.iOS &&\n+        SystemContextMenu.isSupported(context) &&\n+        !editableTextState.widget.readOnly) {",
        "comment_created_at": "2025-06-27T00:06:19+00:00",
        "comment_author": "Renzo-Olivares",
        "comment_body": "It might be helpful to have a comment here on why the system context menu is not supported with `readOnly` set to true (here and in other files/ or a centralized place).",
        "pr_file_module": null
      },
      {
        "comment_id": "2191096660",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171242,
        "pr_file": "packages/flutter/lib/src/cupertino/text_field.dart",
        "discussion_id": "2170330270",
        "commented_code": "@@ -815,7 +815,9 @@ class CupertinoTextField extends StatefulWidget {\n     BuildContext context,\n     EditableTextState editableTextState,\n   ) {\n-    if (defaultTargetPlatform == TargetPlatform.iOS && SystemContextMenu.isSupported(context)) {\n+    if (defaultTargetPlatform == TargetPlatform.iOS &&\n+        SystemContextMenu.isSupported(context) &&\n+        !editableTextState.widget.readOnly) {",
        "comment_created_at": "2025-07-07T22:23:28+00:00",
        "comment_author": "justinmc",
        "comment_body": "Added on SystemContextMenu.isSupportedByField.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2191304176",
    "pr_number": 171242,
    "pr_file": "packages/flutter/test/widgets/system_context_menu_test.dart",
    "created_at": "2025-07-08T01:39:57+00:00",
    "commented_code": "expect(diagnosticsNodes.first.name, 'title');\n     expect(diagnosticsNodes.first.value, title);\n   });\n+\n+  testWidgets(\n+    'when supportsShowingSystemContextMenu is false, isSupported is false',\n+    (WidgetTester tester) async {\n+      final TextEditingController controller = TextEditingController(text: 'one two three');\n+      addTearDown(controller.dispose);\n+      late BuildContext buildContext;\n+      await tester.pumpWidget(\n+        Builder(\n+          builder: (BuildContext context) {\n+            final MediaQueryData mediaQueryData = MediaQuery.of(context);\n+            return MediaQuery(\n+              data: mediaQueryData.copyWith(supportsShowingSystemContextMenu: false),\n+              child: MaterialApp(\n+                home: Scaffold(\n+                  body: Builder(\n+                    builder: (BuildContext context) {\n+                      buildContext = context;\n+                      return TextField(\n+                        controller: controller,\n+                        contextMenuBuilder: (\n+                          BuildContext context,\n+                          EditableTextState editableTextState,\n+                        ) {\n+                          return SystemContextMenu.editableText(\n+                            editableTextState: editableTextState,\n+                          );\n+                        },\n+                      );\n+                    },\n+                  ),\n+                ),\n+              ),\n+            );\n+          },\n+        ),\n+      );\n+\n+      expect(SystemContextMenu.isSupported(buildContext), isFalse);\n+    },\n+    skip: kIsWeb, // [intended]",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2191304176",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171242,
        "pr_file": "packages/flutter/test/widgets/system_context_menu_test.dart",
        "discussion_id": "2191304176",
        "commented_code": "@@ -728,4 +728,164 @@ void main() {\n     expect(diagnosticsNodes.first.name, 'title');\n     expect(diagnosticsNodes.first.value, title);\n   });\n+\n+  testWidgets(\n+    'when supportsShowingSystemContextMenu is false, isSupported is false',\n+    (WidgetTester tester) async {\n+      final TextEditingController controller = TextEditingController(text: 'one two three');\n+      addTearDown(controller.dispose);\n+      late BuildContext buildContext;\n+      await tester.pumpWidget(\n+        Builder(\n+          builder: (BuildContext context) {\n+            final MediaQueryData mediaQueryData = MediaQuery.of(context);\n+            return MediaQuery(\n+              data: mediaQueryData.copyWith(supportsShowingSystemContextMenu: false),\n+              child: MaterialApp(\n+                home: Scaffold(\n+                  body: Builder(\n+                    builder: (BuildContext context) {\n+                      buildContext = context;\n+                      return TextField(\n+                        controller: controller,\n+                        contextMenuBuilder: (\n+                          BuildContext context,\n+                          EditableTextState editableTextState,\n+                        ) {\n+                          return SystemContextMenu.editableText(\n+                            editableTextState: editableTextState,\n+                          );\n+                        },\n+                      );\n+                    },\n+                  ),\n+                ),\n+              ),\n+            );\n+          },\n+        ),\n+      );\n+\n+      expect(SystemContextMenu.isSupported(buildContext), isFalse);\n+    },\n+    skip: kIsWeb, // [intended]",
        "comment_created_at": "2025-07-08T01:39:57+00:00",
        "comment_author": "Renzo-Olivares",
        "comment_body": "nit: add reason for skipping like `// [intended] on web the browser handles the context menu.` here and below.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2165769593",
    "pr_number": 171058,
    "pr_file": "packages/flutter/test/material/input_decorator_test.dart",
    "created_at": "2025-06-25T04:59:12+00:00",
    "commented_code": "});\n   });\n \n+  group('Material3 - InputDecoration isDense', () {\n+    // M3 extra horizontal padding.\n+    const double kInputExtraPadding = 4.0;\n+\n+    testWidgets('Dense layout for an outlined decoration', (WidgetTester tester) async {\n+      await tester.pumpWidget(\n+        buildInputDecorator(\n+          decoration: const InputDecoration(\n+            border: OutlineInputBorder(),\n+            labelText: labelText,\n+            isDense: true,\n+          ),\n+        ),\n+      );\n+\n+      final Rect containerRect = getContainerRect(tester);\n+      final Rect inputRect = getInputRect(tester);\n+      expect(containerRect.height, 48.0);\n+      expect(inputRect.center.dy, containerRect.center.dy);\n+      expect(inputRect.left, containerRect.left + 12.0 + kInputExtraPadding);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2165769593",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171058,
        "pr_file": "packages/flutter/test/material/input_decorator_test.dart",
        "discussion_id": "2165769593",
        "commented_code": "@@ -7579,6 +7579,77 @@ void main() {\n     });\n   });\n \n+  group('Material3 - InputDecoration isDense', () {\n+    // M3 extra horizontal padding.\n+    const double kInputExtraPadding = 4.0;\n+\n+    testWidgets('Dense layout for an outlined decoration', (WidgetTester tester) async {\n+      await tester.pumpWidget(\n+        buildInputDecorator(\n+          decoration: const InputDecoration(\n+            border: OutlineInputBorder(),\n+            labelText: labelText,\n+            isDense: true,\n+          ),\n+        ),\n+      );\n+\n+      final Rect containerRect = getContainerRect(tester);\n+      final Rect inputRect = getInputRect(tester);\n+      expect(containerRect.height, 48.0);\n+      expect(inputRect.center.dy, containerRect.center.dy);\n+      expect(inputRect.left, containerRect.left + 12.0 + kInputExtraPadding);",
        "comment_created_at": "2025-06-25T04:59:12+00:00",
        "comment_author": "QuncCccccc",
        "comment_body": "nit: Can we add a comment to clarify what 12.0 represent? Just think it would be easier to understand:)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2283509225",
    "pr_number": 165323,
    "pr_file": "engine/src/flutter/shell/platform/windows/flutter_window.cc",
    "created_at": "2025-08-18T21:18:42+00:00",
    "commented_code": "case WM_PAINT:\n       OnPaint();\n       break;\n-    case WM_TOUCH: {\n-      UINT num_points = LOWORD(wparam);\n-      touch_points_.resize(num_points);\n-      auto touch_input_handle = reinterpret_cast<HTOUCHINPUT>(lparam);\n-      if (GetTouchInputInfo(touch_input_handle, num_points,\n-                            touch_points_.data(), sizeof(TOUCHINPUT))) {\n-        for (const auto& touch : touch_points_) {\n-          // Generate a mapped ID for the Windows-provided touch ID\n-          auto touch_id = touch_id_generator_.GetGeneratedId(touch.dwID);\n-\n-          POINT pt = {TOUCH_COORD_TO_PIXEL(touch.x),\n-                      TOUCH_COORD_TO_PIXEL(touch.y)};\n-          ScreenToClient(window_handle_, &pt);\n-          auto x = static_cast<double>(pt.x);\n-          auto y = static_cast<double>(pt.y);\n-\n-          if (touch.dwFlags & TOUCHEVENTF_DOWN) {\n-            OnPointerDown(x, y, kFlutterPointerDeviceKindTouch, touch_id,\n-                          WM_LBUTTONDOWN);\n-          } else if (touch.dwFlags & TOUCHEVENTF_MOVE) {\n-            OnPointerMove(x, y, kFlutterPointerDeviceKindTouch, touch_id, 0);\n-          } else if (touch.dwFlags & TOUCHEVENTF_UP) {\n-            OnPointerUp(x, y, kFlutterPointerDeviceKindTouch, touch_id,\n-                        WM_LBUTTONDOWN);\n-            OnPointerLeave(x, y, kFlutterPointerDeviceKindTouch, touch_id);\n-            touch_id_generator_.ReleaseNumber(touch.dwID);\n+    case WM_POINTERDOWN:\n+    case WM_POINTERUPDATE:\n+    case WM_POINTERUP:\n+    case WM_POINTERLEAVE: {\n+      xPos = GET_X_LPARAM(lparam);\n+      yPos = GET_Y_LPARAM(lparam);\n+      auto x = static_cast<double>(xPos);\n+      auto y = static_cast<double>(yPos);\n+      auto pointerId = GET_POINTERID_WPARAM(wparam);\n+      POINTER_INFO pointerInfo;\n+      if (windows_proc_table_->GetPointerInfo(pointerId, &pointerInfo)) {\n+        UINT32 pressure = 0;\n+        UINT32 rotation = 0;\n+        if (pointerInfo.pointerType == PT_PEN) {\n+          POINTER_PEN_INFO penInfo;\n+          if (windows_proc_table_->GetPointerPenInfo(pointerId, &penInfo)) {\n+            pressure = penInfo.pressure;\n+            rotation = penInfo.rotation;\n           }\n         }\n-        CloseTouchInputHandle(touch_input_handle);\n+        auto touch_id = touch_id_generator_.GetGeneratedId(pointerId);\n+        FlutterPointerDeviceKind device_kind = kFlutterPointerDeviceKindMouse;\n+        switch (pointerInfo.pointerType) {\n+          case PT_TOUCH:\n+            device_kind = kFlutterPointerDeviceKindTouch;\n+            break;\n+          case PT_PEN:\n+            device_kind = kFlutterPointerDeviceKindStylus;\n+            break;\n+          case PT_MOUSE:\n+            device_kind = kFlutterPointerDeviceKindMouse;\n+            break;\n+        }\n+        if (message == WM_POINTERDOWN) {\n+          OnPointerDown(x, y, device_kind, touch_id, WM_LBUTTONDOWN, rotation,\n+                        pressure);\n+        } else if (message == WM_POINTERUPDATE) {\n+          // POINTER_FLAG_INCONTACT indicates the stylus is touching the screen\n+          // When not set, it means the stylus is hovering\n+          OnPointerMove(x, y, device_kind, touch_id, rotation, pressure, 0);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2283509225",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165323,
        "pr_file": "engine/src/flutter/shell/platform/windows/flutter_window.cc",
        "discussion_id": "2283509225",
        "commented_code": "@@ -524,37 +528,56 @@ FlutterWindow::HandleMessage(UINT const message,\n     case WM_PAINT:\n       OnPaint();\n       break;\n-    case WM_TOUCH: {\n-      UINT num_points = LOWORD(wparam);\n-      touch_points_.resize(num_points);\n-      auto touch_input_handle = reinterpret_cast<HTOUCHINPUT>(lparam);\n-      if (GetTouchInputInfo(touch_input_handle, num_points,\n-                            touch_points_.data(), sizeof(TOUCHINPUT))) {\n-        for (const auto& touch : touch_points_) {\n-          // Generate a mapped ID for the Windows-provided touch ID\n-          auto touch_id = touch_id_generator_.GetGeneratedId(touch.dwID);\n-\n-          POINT pt = {TOUCH_COORD_TO_PIXEL(touch.x),\n-                      TOUCH_COORD_TO_PIXEL(touch.y)};\n-          ScreenToClient(window_handle_, &pt);\n-          auto x = static_cast<double>(pt.x);\n-          auto y = static_cast<double>(pt.y);\n-\n-          if (touch.dwFlags & TOUCHEVENTF_DOWN) {\n-            OnPointerDown(x, y, kFlutterPointerDeviceKindTouch, touch_id,\n-                          WM_LBUTTONDOWN);\n-          } else if (touch.dwFlags & TOUCHEVENTF_MOVE) {\n-            OnPointerMove(x, y, kFlutterPointerDeviceKindTouch, touch_id, 0);\n-          } else if (touch.dwFlags & TOUCHEVENTF_UP) {\n-            OnPointerUp(x, y, kFlutterPointerDeviceKindTouch, touch_id,\n-                        WM_LBUTTONDOWN);\n-            OnPointerLeave(x, y, kFlutterPointerDeviceKindTouch, touch_id);\n-            touch_id_generator_.ReleaseNumber(touch.dwID);\n+    case WM_POINTERDOWN:\n+    case WM_POINTERUPDATE:\n+    case WM_POINTERUP:\n+    case WM_POINTERLEAVE: {\n+      xPos = GET_X_LPARAM(lparam);\n+      yPos = GET_Y_LPARAM(lparam);\n+      auto x = static_cast<double>(xPos);\n+      auto y = static_cast<double>(yPos);\n+      auto pointerId = GET_POINTERID_WPARAM(wparam);\n+      POINTER_INFO pointerInfo;\n+      if (windows_proc_table_->GetPointerInfo(pointerId, &pointerInfo)) {\n+        UINT32 pressure = 0;\n+        UINT32 rotation = 0;\n+        if (pointerInfo.pointerType == PT_PEN) {\n+          POINTER_PEN_INFO penInfo;\n+          if (windows_proc_table_->GetPointerPenInfo(pointerId, &penInfo)) {\n+            pressure = penInfo.pressure;\n+            rotation = penInfo.rotation;\n           }\n         }\n-        CloseTouchInputHandle(touch_input_handle);\n+        auto touch_id = touch_id_generator_.GetGeneratedId(pointerId);\n+        FlutterPointerDeviceKind device_kind = kFlutterPointerDeviceKindMouse;\n+        switch (pointerInfo.pointerType) {\n+          case PT_TOUCH:\n+            device_kind = kFlutterPointerDeviceKindTouch;\n+            break;\n+          case PT_PEN:\n+            device_kind = kFlutterPointerDeviceKindStylus;\n+            break;\n+          case PT_MOUSE:\n+            device_kind = kFlutterPointerDeviceKindMouse;\n+            break;\n+        }\n+        if (message == WM_POINTERDOWN) {\n+          OnPointerDown(x, y, device_kind, touch_id, WM_LBUTTONDOWN, rotation,\n+                        pressure);\n+        } else if (message == WM_POINTERUPDATE) {\n+          // POINTER_FLAG_INCONTACT indicates the stylus is touching the screen\n+          // When not set, it means the stylus is hovering\n+          OnPointerMove(x, y, device_kind, touch_id, rotation, pressure, 0);",
        "comment_created_at": "2025-08-18T21:18:42+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "For these non-obvious default values, could you add a comment like `/*argument_name=*/` to make these a little more obvious? For example:\r\n\r\n```suggestion\r\n          OnPointerMove(x, y, device_kind, touch_id, rotation, pressure, /* modifiers_state=*/0);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2283526503",
    "pr_number": 165323,
    "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
    "created_at": "2025-08-18T21:43:39+00:00",
    "commented_code": "event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;\n+  event.pressure = state->pressure;\n+  if (event.pressure != 0) {\n+    event.pressure_min = 0;\n+    // The maximum value of the POINTER_PEN_INFO pressure value\n+    event.pressure_max = 1024;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2283562852",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165323,
        "pr_file": "engine/src/flutter/shell/platform/windows/flutter_windows_view.cc",
        "discussion_id": "2283526503",
        "commented_code": "@@ -642,6 +651,13 @@ void FlutterWindowsView::SendPointerEventWithData(\n   event.device = state->pointer_id;\n   event.buttons = state->buttons;\n   event.view_id = view_id_;\n+  event.rotation = state->rotation;\n+  event.pressure = state->pressure;\n+  if (event.pressure != 0) {\n+    event.pressure_min = 0;\n+    // The maximum value of the POINTER_PEN_INFO pressure value\n+    event.pressure_max = 1024;",
        "comment_created_at": "2025-08-18T21:43:39+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Ah this is good feedback! Could you add a `kMaxPenPressure` constant with link to the relevant docs: https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-pointer_pen_info",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2285627414",
    "pr_number": 174019,
    "pr_file": "bin/internal/shared.bat",
    "created_at": "2025-08-19T15:28:58+00:00",
    "commented_code": "SETLOCAL\n \n-REM Ensure we are runnng on 64-bit windows (32-bit is not supported)\n+REM Ensure we are running on 64-bit windows (32-bit is not supported)",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2285627414",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174019,
        "pr_file": "bin/internal/shared.bat",
        "discussion_id": "2285627414",
        "commented_code": "@@ -13,10 +13,12 @@ REM --------------------------------------------------------------------------\n \n SETLOCAL\n \n-REM Ensure we are runnng on 64-bit windows (32-bit is not supported)\n+REM Ensure we are running on 64-bit windows (32-bit is not supported)",
        "comment_created_at": "2025-08-19T15:28:58+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Why this is necessary isn't immediately obvious. Consider adding a quick comment to explain this\r\n\r\n```suggestion\r\nREM Ensure we are running on 64-bit Windows (32-bit is not supported).\r\nREM If this is a 32-bit process emulated by WOW64,\r\nREM PROCESSOR_ARCHITECTURE is the process architecture and\r\nREM PROCESSOR_ARCHITEW6432 is the processor architecture.\r\n```",
        "pr_file_module": null
      }
    ]
  }
]