[
  {
    "discussion_id": "2283543373",
    "pr_number": 171334,
    "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
    "created_at": "2025-08-18T21:31:50+00:00",
    "commented_code": "mode == CupertinoDatePickerMode.dateAndTime ||\n              mode == CupertinoDatePickerMode.time,\n          'showTimeSeparator is only supported in time or dateAndTime modes',\n+       ),\n+       assert(\n+         selectableDayPredicate == null ||\n+             selectableDayPredicate(initialDateTime ?? DateTime.now()),",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2283543373",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2283543373",
        "commented_code": "@@ -363,6 +364,11 @@ class CupertinoDatePicker extends StatefulWidget {\n              mode == CupertinoDatePickerMode.dateAndTime ||\n              mode == CupertinoDatePickerMode.time,\n          'showTimeSeparator is only supported in time or dateAndTime modes',\n+       ),\n+       assert(\n+         selectableDayPredicate == null ||\n+             selectableDayPredicate(initialDateTime ?? DateTime.now()),",
        "comment_created_at": "2025-08-18T21:31:50+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Not sure `DateTime.now()` should be used here. What about\r\n\r\n```dart\r\nselectableDayPredicate == null || initialDate == null || selectableDayPredicate!(this.initialDate!)\r\n```\r\n\r\nlike in `DatePicker`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220469664",
    "pr_number": 170931,
    "pr_file": "packages/flutter/lib/src/rendering/sliver_fixed_extent_list.dart",
    "created_at": "2025-07-21T22:16:05+00:00",
    "commented_code": ") {\n     if (itemExtentBuilder == null) {\n       itemExtent = this.itemExtent!;\n-      if (itemExtent > 0.0) {\n+      if (itemExtent > 0.0 && scrollOffset.isFinite && itemExtent.isFinite) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2220469664",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170931,
        "pr_file": "packages/flutter/lib/src/rendering/sliver_fixed_extent_list.dart",
        "discussion_id": "2220469664",
        "commented_code": "@@ -113,8 +113,11 @@ abstract class RenderSliverFixedExtentBoxAdaptor extends RenderSliverMultiBoxAda\n   ) {\n     if (itemExtentBuilder == null) {\n       itemExtent = this.itemExtent!;\n-      if (itemExtent > 0.0) {\n+      if (itemExtent > 0.0 && scrollOffset.isFinite && itemExtent.isFinite) {",
        "comment_created_at": "2025-07-21T22:16:05+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "Does it make sense for either `scrollOffset` or `itemExtent` to be `nan`? If not I don't think we should always fail silently.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2210987791",
    "pr_number": 171825,
    "pr_file": "packages/flutter/lib/src/services/text_input.dart",
    "created_at": "2025-07-16T17:00:47+00:00",
    "commented_code": "/// Returns true if a scribble interaction is currently happening.\n   bool get scribbleInProgress => _scribbleInProgress;\n \n+  void _handleCustomAction(String actionId) {\n+    // Support dynamic callbacks (new API)\n+    final VoidCallback? callback = SystemContextMenuController._customActionCallbacks[actionId];\n+    if (callback != null) {\n+      callback();\n+      return;\n+    }",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2210987791",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171825,
        "pr_file": "packages/flutter/lib/src/services/text_input.dart",
        "discussion_id": "2210987791",
        "commented_code": "@@ -1968,6 +1968,23 @@ class TextInput {\n   /// Returns true if a scribble interaction is currently happening.\n   bool get scribbleInProgress => _scribbleInProgress;\n \n+  void _handleCustomAction(String actionId) {\n+    // Support dynamic callbacks (new API)\n+    final VoidCallback? callback = SystemContextMenuController._customActionCallbacks[actionId];\n+    if (callback != null) {\n+      callback();\n+      return;\n+    }",
        "comment_created_at": "2025-07-16T17:00:47+00:00",
        "comment_author": "justinmc",
        "comment_body": "Can you also assert that the callback is not null so that developers can be aware that something is wrong?",
        "pr_file_module": null
      },
      {
        "comment_id": "2211726799",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171825,
        "pr_file": "packages/flutter/lib/src/services/text_input.dart",
        "discussion_id": "2210987791",
        "commented_code": "@@ -1968,6 +1968,23 @@ class TextInput {\n   /// Returns true if a scribble interaction is currently happening.\n   bool get scribbleInProgress => _scribbleInProgress;\n \n+  void _handleCustomAction(String actionId) {\n+    // Support dynamic callbacks (new API)\n+    final VoidCallback? callback = SystemContextMenuController._customActionCallbacks[actionId];\n+    if (callback != null) {\n+      callback();\n+      return;\n+    }",
        "comment_created_at": "2025-07-16T22:26:37+00:00",
        "comment_author": "justinmc",
        "comment_body": "Not sure if this is testable or not, but it would be nice if we can test it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2231752462",
    "pr_number": 172669,
    "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
    "created_at": "2025-07-25T18:17:14+00:00",
    "commented_code": "/// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the implicit view\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId = 0,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2231752462",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
        "discussion_id": "2231752462",
        "commented_code": "@@ -93,13 +93,18 @@ abstract class SemanticsEvent {\n /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the implicit view\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId = 0,",
        "comment_created_at": "2025-07-25T18:17:14+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "The platform can use a different ID than `0` for the implicit view ID (AFAIK no one does this today, but this is possible). That could cause problems. Could we make this arg null by default, make `getDataMap` omit `viewId` if it is `null`, and update `SemanticsService.announce` to use `viewId: PlatformDispatcher.instance.implicitView?.viewId`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2252326883",
    "pr_number": 172669,
    "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
    "created_at": "2025-08-04T18:51:53+00:00",
    "commented_code": "return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2252326883",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2252326883",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
        "comment_created_at": "2025-08-04T18:51:53+00:00",
        "comment_author": "chunhtai",
        "comment_body": "if the viewId is null from framework side, what will be read out of this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2254823848",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2252326883",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
        "comment_created_at": "2025-08-05T16:42:47+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "This will fall back to announcing on the implicit view, if it exists.\r\n\r\n@mattkae Could we add a test for this scenario? Historically, optional platform channel message values are a frequent source of crashes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2255263425",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2252326883",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
        "comment_created_at": "2025-08-05T20:23:20+00:00",
        "comment_author": "chunhtai",
        "comment_body": "i meant if this map is encoded and decoded by standardcodec\r\n```dart\r\n{\r\n  \"viewId\": null\r\n}\r\n```\r\nwill windows translate to\r\n{\r\n   \"viewId\": 0\r\n}\r\n\r\nor\r\n{\r\n  \"viewId\": nullptr\r\n}\r\n\r\nor just empty",
        "pr_file_module": null
      },
      {
        "comment_id": "2258289810",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2252326883",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
        "comment_created_at": "2025-08-06T21:00:48+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Oh I see. `EncodableValue` in C++ is a `std::variant` discriminated union. It does support a concept of null, though it represents it as `std::monostate`. If `null` is passed, `std::get_if<FlutterViewId>` below should return `nullptr`, thereby causing u to fallback to the implicit view.\r\n\r\nSee: https://github.com/flutter/flutter/blob/417f69cf94be018ca7b0469cd0983f21f05d536b/engine/src/flutter/shell/platform/common/client_wrapper/include/flutter/encodable_value.h#L151-L164",
        "pr_file_module": null
      },
      {
        "comment_id": "2285237745",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2252326883",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    FlutterViewId view_id = kImplicitViewId;\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});",
        "comment_created_at": "2025-08-19T13:13:08+00:00",
        "comment_author": "mattkae",
        "comment_body": "\r\n\r\nWith the new implementation, this can no longer be null, so we should enforce that it is present instead\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2252331663",
    "pr_number": 172669,
    "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
    "created_at": "2025-08-04T18:54:32+00:00",
    "commented_code": "/// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the provided [viewId].\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId,\n   }) : super('announce');\n \n+  /// The id of the view that this announcement is on.\n+  final int? viewId;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2252331663",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
        "discussion_id": "2252331663",
        "commented_code": "@@ -93,13 +93,18 @@ abstract class SemanticsEvent {\n /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the provided [viewId].\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId,\n   }) : super('announce');\n \n+  /// The id of the view that this announcement is on.\n+  final int? viewId;",
        "comment_created_at": "2025-08-04T18:54:32+00:00",
        "comment_author": "chunhtai",
        "comment_body": "can this ever be null? I won't worry too much about breaking this class's API since this is an internal class. would still be good to have some doc around how one would get viewId if they really want to use this class",
        "pr_file_module": null
      },
      {
        "comment_id": "2279076128",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
        "discussion_id": "2252331663",
        "commented_code": "@@ -93,13 +93,18 @@ abstract class SemanticsEvent {\n /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the provided [viewId].\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId,\n   }) : super('announce');\n \n+  /// The id of the view that this announcement is on.\n+  final int? viewId;",
        "comment_created_at": "2025-08-15T14:17:30+00:00",
        "comment_author": "mattkae",
        "comment_body": "I made it so it can truly be null, which will accomodate `SemanticsService.announce`",
        "pr_file_module": null
      },
      {
        "comment_id": "2279543092",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
        "discussion_id": "2252331663",
        "commented_code": "@@ -93,13 +93,18 @@ abstract class SemanticsEvent {\n /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the provided [viewId].\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId,\n   }) : super('announce');\n \n+  /// The id of the view that this announcement is on.\n+  final int? viewId;",
        "comment_created_at": "2025-08-15T17:25:45+00:00",
        "comment_author": "chunhtai",
        "comment_body": "make this non nullable?",
        "pr_file_module": null
      },
      {
        "comment_id": "2283450681",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "packages/flutter/lib/src/semantics/semantics_event.dart",
        "discussion_id": "2252331663",
        "commented_code": "@@ -93,13 +93,18 @@ abstract class SemanticsEvent {\n /// [1]: https://developer.android.com/reference/android/view/View#announceForAccessibility(java.lang.CharSequence)\n ///\n class AnnounceSemanticsEvent extends SemanticsEvent {\n-  /// Constructs an event that triggers an announcement by the platform.\n+  /// Constructs an event that triggers an announcement by the platform\n+  /// on the provided [viewId].\n   const AnnounceSemanticsEvent(\n     this.message,\n     this.textDirection, {\n     this.assertiveness = Assertiveness.polite,\n+    this.viewId,\n   }) : super('announce');\n \n+  /// The id of the view that this announcement is on.\n+  final int? viewId;",
        "comment_created_at": "2025-08-18T20:57:50+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "I'm also leaning towards making this non-nullable. We've had TONS of crashes due to a message's shape changing (for example if an embedder incorrectly assumes this will always be a non-null integer).\r\n\r\nI'd consider making `SemanticsService.announce` do something like:\r\n\r\n```dart\r\nFlutterView? view = PlatformDispatcher.instance.implicitView;\r\nassert(\r\n  view != null,\r\n  'SemanticsService.announce is incompatible with multiple windows. '\r\n  'Use SemanticsService.sendAnnouncement instead.',\r\n);\r\n// Pass view.viewId down to the SemanticsEvent\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]