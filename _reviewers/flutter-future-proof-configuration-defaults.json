[
  {
    "discussion_id": "2308736448",
    "pr_number": 173324,
    "pr_file": "packages/flutter/lib/src/material/slider_theme.dart",
    "created_at": "2025-08-28T23:12:19+00:00",
    "commented_code": "properties.add(\n       DiagnosticsProperty<bool>('year2023', year2023, defaultValue: defaultData.year2023),\n     );\n+    properties.add(\n+      DiagnosticsProperty<ValueIndicatorMultilineConfig?>(\n+        'valueIndicatorMultilineConfig',\n+        valueIndicatorMultilineConfig,\n+        defaultValue: defaultData.valueIndicatorMultilineConfig,\n+      ),\n+    );\n+  }\n+}\n+\n+/// Configuration for value indicator multiline behavior.\n+///\n+/// Used with [SliderThemeData.valueIndicatorMultilineConfig] to control\n+/// how multiline text is handled in slider value indicators.\n+///\n+/// See also:\n+///\n+///  * [SliderThemeData], which uses this to configure multiline behavior.\n+///  * [Slider.label], which can contain newline characters for multiline text.\n+@immutable\n+class ValueIndicatorMultilineConfig with Diagnosticable {\n+  /// Creates a configuration for multiline value indicators.\n+  const ValueIndicatorMultilineConfig({this.enabled = true, this.maxLines, this.cornerPadding});\n+\n+  /// Whether multiline value indicators are enabled.\n+  ///\n+  /// When true, value indicators will dynamically size to accommodate\n+  /// multiline text (text containing '\n' characters). When false,\n+  /// all text will be treated as single-line for backward compatibility.",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2308736448",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173324,
        "pr_file": "packages/flutter/lib/src/material/slider_theme.dart",
        "discussion_id": "2308736448",
        "commented_code": "@@ -1140,6 +1161,113 @@ class SliderThemeData with Diagnosticable {\n     properties.add(\n       DiagnosticsProperty<bool>('year2023', year2023, defaultValue: defaultData.year2023),\n     );\n+    properties.add(\n+      DiagnosticsProperty<ValueIndicatorMultilineConfig?>(\n+        'valueIndicatorMultilineConfig',\n+        valueIndicatorMultilineConfig,\n+        defaultValue: defaultData.valueIndicatorMultilineConfig,\n+      ),\n+    );\n+  }\n+}\n+\n+/// Configuration for value indicator multiline behavior.\n+///\n+/// Used with [SliderThemeData.valueIndicatorMultilineConfig] to control\n+/// how multiline text is handled in slider value indicators.\n+///\n+/// See also:\n+///\n+///  * [SliderThemeData], which uses this to configure multiline behavior.\n+///  * [Slider.label], which can contain newline characters for multiline text.\n+@immutable\n+class ValueIndicatorMultilineConfig with Diagnosticable {\n+  /// Creates a configuration for multiline value indicators.\n+  const ValueIndicatorMultilineConfig({this.enabled = true, this.maxLines, this.cornerPadding});\n+\n+  /// Whether multiline value indicators are enabled.\n+  ///\n+  /// When true, value indicators will dynamically size to accommodate\n+  /// multiline text (text containing '\\n' characters). When false,\n+  /// all text will be treated as single-line for backward compatibility.",
        "comment_created_at": "2025-08-28T23:12:19+00:00",
        "comment_author": "justinmc",
        "comment_body": "Nit: Do you know of any cases where someone would actually want the original behavior? Maybe we could simplify things by not supporting the original behavior, unless someone opens an issue asking for it?\n\nI'm assuming that the default behavior looks broken in most cases and so most people don't want it, but I could be wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "2309658929",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173324,
        "pr_file": "packages/flutter/lib/src/material/slider_theme.dart",
        "discussion_id": "2308736448",
        "commented_code": "@@ -1140,6 +1161,113 @@ class SliderThemeData with Diagnosticable {\n     properties.add(\n       DiagnosticsProperty<bool>('year2023', year2023, defaultValue: defaultData.year2023),\n     );\n+    properties.add(\n+      DiagnosticsProperty<ValueIndicatorMultilineConfig?>(\n+        'valueIndicatorMultilineConfig',\n+        valueIndicatorMultilineConfig,\n+        defaultValue: defaultData.valueIndicatorMultilineConfig,\n+      ),\n+    );\n+  }\n+}\n+\n+/// Configuration for value indicator multiline behavior.\n+///\n+/// Used with [SliderThemeData.valueIndicatorMultilineConfig] to control\n+/// how multiline text is handled in slider value indicators.\n+///\n+/// See also:\n+///\n+///  * [SliderThemeData], which uses this to configure multiline behavior.\n+///  * [Slider.label], which can contain newline characters for multiline text.\n+@immutable\n+class ValueIndicatorMultilineConfig with Diagnosticable {\n+  /// Creates a configuration for multiline value indicators.\n+  const ValueIndicatorMultilineConfig({this.enabled = true, this.maxLines, this.cornerPadding});\n+\n+  /// Whether multiline value indicators are enabled.\n+  ///\n+  /// When true, value indicators will dynamically size to accommodate\n+  /// multiline text (text containing '\\n' characters). When false,\n+  /// all text will be treated as single-line for backward compatibility.",
        "comment_created_at": "2025-08-29T09:23:03+00:00",
        "comment_author": "huycozy",
        "comment_body": "> Do you know of any cases where someone would actually want the original behavior? \r\n\r\nI haven't seen anyone wanting that behavior; it looks broken to me as well. However, if anyone expects that, they can definitely turn it off by marking `enabled` as false in the configuration. Furthermore, similar to `year2023` flag, I think we can deprecate `enabled` flag in the future if no one reports a similar report.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2311100577",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173324,
        "pr_file": "packages/flutter/lib/src/material/slider_theme.dart",
        "discussion_id": "2308736448",
        "commented_code": "@@ -1140,6 +1161,113 @@ class SliderThemeData with Diagnosticable {\n     properties.add(\n       DiagnosticsProperty<bool>('year2023', year2023, defaultValue: defaultData.year2023),\n     );\n+    properties.add(\n+      DiagnosticsProperty<ValueIndicatorMultilineConfig?>(\n+        'valueIndicatorMultilineConfig',\n+        valueIndicatorMultilineConfig,\n+        defaultValue: defaultData.valueIndicatorMultilineConfig,\n+      ),\n+    );\n+  }\n+}\n+\n+/// Configuration for value indicator multiline behavior.\n+///\n+/// Used with [SliderThemeData.valueIndicatorMultilineConfig] to control\n+/// how multiline text is handled in slider value indicators.\n+///\n+/// See also:\n+///\n+///  * [SliderThemeData], which uses this to configure multiline behavior.\n+///  * [Slider.label], which can contain newline characters for multiline text.\n+@immutable\n+class ValueIndicatorMultilineConfig with Diagnosticable {\n+  /// Creates a configuration for multiline value indicators.\n+  const ValueIndicatorMultilineConfig({this.enabled = true, this.maxLines, this.cornerPadding});\n+\n+  /// Whether multiline value indicators are enabled.\n+  ///\n+  /// When true, value indicators will dynamically size to accommodate\n+  /// multiline text (text containing '\\n' characters). When false,\n+  /// all text will be treated as single-line for backward compatibility.",
        "comment_created_at": "2025-08-29T20:13:31+00:00",
        "comment_author": "justinmc",
        "comment_body": "Sounds good.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2261662476",
    "pr_number": 172915,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/platform_dispatcher.dart",
    "created_at": "2025-08-07T23:54:17+00:00",
    "commented_code": "_fontSizeObserver = null;\n   }\n \n+  /// Watches for resize changes on an off-screen invisible element to\n+  /// recalculate [typographySettings].\n+  ///\n+  /// Updates [typographySettings] with the new value.\n+  DomResizeObserver? _typographySettingsObserver;\n+  DomElement? _typographyMeasurementElement;\n+\n+  /// Updates [typographySettings] and invokes [onPlatformConfigurationChanged] and\n+  /// [onMetricsChanged] callbacks if [typographySettings] changed.\n+  void _updateTypographySettings(ui.TypographySettings? value) {\n+    if (configuration.typographySettings != value) {\n+      configuration = configuration.copyWith(typographySettings: value);\n+      invokeOnPlatformConfigurationChanged();\n+      invokeOnMetricsChanged();\n+    }\n+  }\n+\n+  ui.TypographySettings? _computeTypographySettings() {\n+    final double? lineHeight = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'line-height',\n+    )?.toDouble();\n+    final double? wordSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'word-spacing',\n+    )?.toDouble();\n+    final double? letterSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'letter-spacing',\n+    )?.toDouble();\n+    // There is no direct CSS property for paragraph spacing,\n+    // so on the web this feature is usually implemented\n+    // by extension authors by leveraging `margin-bottom` on\n+    // the `p` element.\n+    final double? paragraphSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'margin-bottom',\n+    )?.toDouble();\n+    if (lineHeight == null &&\n+        wordSpacing == null &&\n+        letterSpacing == null &&\n+        paragraphSpacing == null) {\n+      return null;\n+    }\n+    return ui.TypographySettings(\n+      lineHeight: lineHeight,\n+      letterSpacing: letterSpacing,\n+      wordSpacing: wordSpacing,\n+      paragraphSpacing: paragraphSpacing,\n+    );\n+  }\n+\n+  /// Set the callback function for updating [typographySettings] based on\n+  /// the sizing changes of an off-screen element with text.\n+  void _addTypographySettingsObserver() {\n+    _typographyMeasurementElement = createDomHTMLParagraphElement();\n+    _typographyMeasurementElement!.text = 'flutter typography measurement';\n+    // The element should be hidden from screen readers.\n+    _typographyMeasurementElement!.setAttribute('aria-hidden', 'true');\n+    final DomCSSStyleDeclaration style = _typographyMeasurementElement!.style;\n+    style.position = 'absolute';\n+    // The element should be off-screen and not visible.\n+    style.top = '-9999px';\n+    style.left = '-9999px';\n+    style.visibility = 'hidden';\n+    // The element should be sensitive to letter-spacing, word-spacing,\n+    // and line-height changes.\n+    style.width = 'auto';\n+    style.height = 'auto';\n+    style.whiteSpace = 'nowrap';\n+    // Set text spacing properties defaults.\n+    const double spacingDefault = 100.0;\n+    style.lineHeight = '${spacingDefault}px';\n+    style.letterSpacing = '${spacingDefault}px';\n+    style.wordSpacing = '${spacingDefault}px';\n+    style.margin = '0px 0px ${spacingDefault}px 0px';\n+    domDocument.body!.append(_typographyMeasurementElement!);\n+\n+    _typographySettingsObserver = createDomResizeObserver((\n+      List<DomResizeObserverEntry> entries,\n+      DomResizeObserver observer,\n+    ) {\n+      final ui.TypographySettings? computedTypographySettings = _computeTypographySettings();\n+      if (computedTypographySettings != null &&\n+          computedTypographySettings.lineHeight == spacingDefault &&\n+          computedTypographySettings.wordSpacing == spacingDefault &&\n+          computedTypographySettings.letterSpacing == spacingDefault &&\n+          computedTypographySettings.paragraphSpacing == spacingDefault) {\n+        // Ignore initial resize event if computed values match default ones.\n+        if (typographySettings == null) {\n+          return;\n+        }\n+        // Disable text spacing properties.\n+        _updateTypographySettings(const ui.TypographySettings());",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2261662476",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/platform_dispatcher.dart",
        "discussion_id": "2261662476",
        "commented_code": "@@ -1013,6 +1022,117 @@ class EnginePlatformDispatcher extends ui.PlatformDispatcher {\n     _fontSizeObserver = null;\n   }\n \n+  /// Watches for resize changes on an off-screen invisible element to\n+  /// recalculate [typographySettings].\n+  ///\n+  /// Updates [typographySettings] with the new value.\n+  DomResizeObserver? _typographySettingsObserver;\n+  DomElement? _typographyMeasurementElement;\n+\n+  /// Updates [typographySettings] and invokes [onPlatformConfigurationChanged] and\n+  /// [onMetricsChanged] callbacks if [typographySettings] changed.\n+  void _updateTypographySettings(ui.TypographySettings? value) {\n+    if (configuration.typographySettings != value) {\n+      configuration = configuration.copyWith(typographySettings: value);\n+      invokeOnPlatformConfigurationChanged();\n+      invokeOnMetricsChanged();\n+    }\n+  }\n+\n+  ui.TypographySettings? _computeTypographySettings() {\n+    final double? lineHeight = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'line-height',\n+    )?.toDouble();\n+    final double? wordSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'word-spacing',\n+    )?.toDouble();\n+    final double? letterSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'letter-spacing',\n+    )?.toDouble();\n+    // There is no direct CSS property for paragraph spacing,\n+    // so on the web this feature is usually implemented\n+    // by extension authors by leveraging `margin-bottom` on\n+    // the `p` element.\n+    final double? paragraphSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'margin-bottom',\n+    )?.toDouble();\n+    if (lineHeight == null &&\n+        wordSpacing == null &&\n+        letterSpacing == null &&\n+        paragraphSpacing == null) {\n+      return null;\n+    }\n+    return ui.TypographySettings(\n+      lineHeight: lineHeight,\n+      letterSpacing: letterSpacing,\n+      wordSpacing: wordSpacing,\n+      paragraphSpacing: paragraphSpacing,\n+    );\n+  }\n+\n+  /// Set the callback function for updating [typographySettings] based on\n+  /// the sizing changes of an off-screen element with text.\n+  void _addTypographySettingsObserver() {\n+    _typographyMeasurementElement = createDomHTMLParagraphElement();\n+    _typographyMeasurementElement!.text = 'flutter typography measurement';\n+    // The element should be hidden from screen readers.\n+    _typographyMeasurementElement!.setAttribute('aria-hidden', 'true');\n+    final DomCSSStyleDeclaration style = _typographyMeasurementElement!.style;\n+    style.position = 'absolute';\n+    // The element should be off-screen and not visible.\n+    style.top = '-9999px';\n+    style.left = '-9999px';\n+    style.visibility = 'hidden';\n+    // The element should be sensitive to letter-spacing, word-spacing,\n+    // and line-height changes.\n+    style.width = 'auto';\n+    style.height = 'auto';\n+    style.whiteSpace = 'nowrap';\n+    // Set text spacing properties defaults.\n+    const double spacingDefault = 100.0;\n+    style.lineHeight = '${spacingDefault}px';\n+    style.letterSpacing = '${spacingDefault}px';\n+    style.wordSpacing = '${spacingDefault}px';\n+    style.margin = '0px 0px ${spacingDefault}px 0px';\n+    domDocument.body!.append(_typographyMeasurementElement!);\n+\n+    _typographySettingsObserver = createDomResizeObserver((\n+      List<DomResizeObserverEntry> entries,\n+      DomResizeObserver observer,\n+    ) {\n+      final ui.TypographySettings? computedTypographySettings = _computeTypographySettings();\n+      if (computedTypographySettings != null &&\n+          computedTypographySettings.lineHeight == spacingDefault &&\n+          computedTypographySettings.wordSpacing == spacingDefault &&\n+          computedTypographySettings.letterSpacing == spacingDefault &&\n+          computedTypographySettings.paragraphSpacing == spacingDefault) {\n+        // Ignore initial resize event if computed values match default ones.\n+        if (typographySettings == null) {\n+          return;\n+        }\n+        // Disable text spacing properties.\n+        _updateTypographySettings(const ui.TypographySettings());",
        "comment_created_at": "2025-08-07T23:54:17+00:00",
        "comment_author": "Renzo-Olivares",
        "comment_body": "I'm not a fan of setting this to an empty `TypographySettings` to disable this but I don't see another way since `configuration.copyWith(typographySettings:null)` won't work. I could build a method that makes a new `PlatformConfiguration` with `TypographySettings` cleared but it wouldn't be very maintainable if we keep adding members to `PlatformConfiguration`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277172467",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/platform_dispatcher.dart",
        "discussion_id": "2261662476",
        "commented_code": "@@ -1013,6 +1022,117 @@ class EnginePlatformDispatcher extends ui.PlatformDispatcher {\n     _fontSizeObserver = null;\n   }\n \n+  /// Watches for resize changes on an off-screen invisible element to\n+  /// recalculate [typographySettings].\n+  ///\n+  /// Updates [typographySettings] with the new value.\n+  DomResizeObserver? _typographySettingsObserver;\n+  DomElement? _typographyMeasurementElement;\n+\n+  /// Updates [typographySettings] and invokes [onPlatformConfigurationChanged] and\n+  /// [onMetricsChanged] callbacks if [typographySettings] changed.\n+  void _updateTypographySettings(ui.TypographySettings? value) {\n+    if (configuration.typographySettings != value) {\n+      configuration = configuration.copyWith(typographySettings: value);\n+      invokeOnPlatformConfigurationChanged();\n+      invokeOnMetricsChanged();\n+    }\n+  }\n+\n+  ui.TypographySettings? _computeTypographySettings() {\n+    final double? lineHeight = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'line-height',\n+    )?.toDouble();\n+    final double? wordSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'word-spacing',\n+    )?.toDouble();\n+    final double? letterSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'letter-spacing',\n+    )?.toDouble();\n+    // There is no direct CSS property for paragraph spacing,\n+    // so on the web this feature is usually implemented\n+    // by extension authors by leveraging `margin-bottom` on\n+    // the `p` element.\n+    final double? paragraphSpacing = parseStyleProperty(\n+      _typographyMeasurementElement!,\n+      'margin-bottom',\n+    )?.toDouble();\n+    if (lineHeight == null &&\n+        wordSpacing == null &&\n+        letterSpacing == null &&\n+        paragraphSpacing == null) {\n+      return null;\n+    }\n+    return ui.TypographySettings(\n+      lineHeight: lineHeight,\n+      letterSpacing: letterSpacing,\n+      wordSpacing: wordSpacing,\n+      paragraphSpacing: paragraphSpacing,\n+    );\n+  }\n+\n+  /// Set the callback function for updating [typographySettings] based on\n+  /// the sizing changes of an off-screen element with text.\n+  void _addTypographySettingsObserver() {\n+    _typographyMeasurementElement = createDomHTMLParagraphElement();\n+    _typographyMeasurementElement!.text = 'flutter typography measurement';\n+    // The element should be hidden from screen readers.\n+    _typographyMeasurementElement!.setAttribute('aria-hidden', 'true');\n+    final DomCSSStyleDeclaration style = _typographyMeasurementElement!.style;\n+    style.position = 'absolute';\n+    // The element should be off-screen and not visible.\n+    style.top = '-9999px';\n+    style.left = '-9999px';\n+    style.visibility = 'hidden';\n+    // The element should be sensitive to letter-spacing, word-spacing,\n+    // and line-height changes.\n+    style.width = 'auto';\n+    style.height = 'auto';\n+    style.whiteSpace = 'nowrap';\n+    // Set text spacing properties defaults.\n+    const double spacingDefault = 100.0;\n+    style.lineHeight = '${spacingDefault}px';\n+    style.letterSpacing = '${spacingDefault}px';\n+    style.wordSpacing = '${spacingDefault}px';\n+    style.margin = '0px 0px ${spacingDefault}px 0px';\n+    domDocument.body!.append(_typographyMeasurementElement!);\n+\n+    _typographySettingsObserver = createDomResizeObserver((\n+      List<DomResizeObserverEntry> entries,\n+      DomResizeObserver observer,\n+    ) {\n+      final ui.TypographySettings? computedTypographySettings = _computeTypographySettings();\n+      if (computedTypographySettings != null &&\n+          computedTypographySettings.lineHeight == spacingDefault &&\n+          computedTypographySettings.wordSpacing == spacingDefault &&\n+          computedTypographySettings.letterSpacing == spacingDefault &&\n+          computedTypographySettings.paragraphSpacing == spacingDefault) {\n+        // Ignore initial resize event if computed values match default ones.\n+        if (typographySettings == null) {\n+          return;\n+        }\n+        // Disable text spacing properties.\n+        _updateTypographySettings(const ui.TypographySettings());",
        "comment_created_at": "2025-08-14T16:47:53+00:00",
        "comment_author": "chunhtai",
        "comment_body": "I vaguely remember somewhere we do something like\r\n```\r\nvoid copyWith({SomeClass? object = _somePivateStaticObject}) {\r\n  if (object != _somePivateStaticObject) {\r\n     // do replace\r\n  }\r\n}\r\n```\r\n\r\nis assigning `typographySettings` an empty `TypographySettings` or null the same thing? if so we should only pick one of them to avoid this ambiguous. For example just make typographySettings to be not nullable and default to a static/const empty value.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2316711400",
    "pr_number": 174839,
    "pr_file": "packages/flutter_tools/lib/src/commands/run.dart",
    "created_at": "2025-09-02T17:18:44+00:00",
    "commented_code": "FlutterOptions.kWebWasmFlag,\n         help: 'Compile to WebAssembly rather than JavaScript.\n$kWasmMoreInfo',\n         negatable: false,\n+      )\n+      ..addFlag(\n+        'enable-gradle-managed-install',\n+        negatable: false,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2316711400",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174839,
        "pr_file": "packages/flutter_tools/lib/src/commands/run.dart",
        "discussion_id": "2316711400",
        "commented_code": "@@ -222,6 +222,11 @@ abstract class RunCommandBase extends FlutterCommand with DeviceBasedDevelopment\n         FlutterOptions.kWebWasmFlag,\n         help: 'Compile to WebAssembly rather than JavaScript.\\n$kWasmMoreInfo',\n         negatable: false,\n+      )\n+      ..addFlag(\n+        'enable-gradle-managed-install',\n+        negatable: false,",
        "comment_created_at": "2025-09-02T17:18:44+00:00",
        "comment_author": "reidbaker",
        "comment_body": "I think we want this to be negatable so that we can modify the default later if we choose to and let people opt out. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2027738352",
    "pr_number": 165173,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/semantics/progress_bar.dart",
    "created_at": "2025-04-03T21:02:33+00:00",
    "commented_code": "+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+import 'label_and_value.dart';\n+import 'semantics.dart';\n+\n+/// Indicates a progress bar element.\n+///\n+/// Uses aria progressbar role to convey this semantic information to the element.\n+///\n+/// Screen-readers take advantage of \"aria-label\" to describe the visual.\n+class SementicsProgressBar extends SemanticRole {\n+  SementicsProgressBar(SemanticsObject semanticsObject)\n+    : super.withBasics(\n+        EngineSemanticsRole.progressBar,\n+        semanticsObject,\n+        preferredLabelRepresentation: LabelRepresentation.ariaLabel,\n+      ) {\n+    setAriaRole('progressbar');\n+\n+    // Progress indicators in Flutter use values between 0.0 and 1.0\n+    setAttribute('aria-valuemin', \"0\");",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2027738352",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165173,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/semantics/progress_bar.dart",
        "discussion_id": "2027738352",
        "commented_code": "@@ -0,0 +1,42 @@\n+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+import 'label_and_value.dart';\n+import 'semantics.dart';\n+\n+/// Indicates a progress bar element.\n+///\n+/// Uses aria progressbar role to convey this semantic information to the element.\n+///\n+/// Screen-readers take advantage of \"aria-label\" to describe the visual.\n+class SementicsProgressBar extends SemanticRole {\n+  SementicsProgressBar(SemanticsObject semanticsObject)\n+    : super.withBasics(\n+        EngineSemanticsRole.progressBar,\n+        semanticsObject,\n+        preferredLabelRepresentation: LabelRepresentation.ariaLabel,\n+      ) {\n+    setAriaRole('progressbar');\n+\n+    // Progress indicators in Flutter use values between 0.0 and 1.0\n+    setAttribute('aria-valuemin', \"0\");",
        "comment_created_at": "2025-04-03T21:02:33+00:00",
        "comment_author": "chunhtai",
        "comment_body": "we may need a a new property for maxValue and minValue to propergate the value range. Hardcoded to 0 and 100 may be too opinionated",
        "pr_file_module": null
      },
      {
        "comment_id": "2029635812",
        "repo_full_name": "flutter/flutter",
        "pr_number": 165173,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/src/engine/semantics/progress_bar.dart",
        "discussion_id": "2027738352",
        "commented_code": "@@ -0,0 +1,42 @@\n+// Copyright 2013 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+import 'label_and_value.dart';\n+import 'semantics.dart';\n+\n+/// Indicates a progress bar element.\n+///\n+/// Uses aria progressbar role to convey this semantic information to the element.\n+///\n+/// Screen-readers take advantage of \"aria-label\" to describe the visual.\n+class SementicsProgressBar extends SemanticRole {\n+  SementicsProgressBar(SemanticsObject semanticsObject)\n+    : super.withBasics(\n+        EngineSemanticsRole.progressBar,\n+        semanticsObject,\n+        preferredLabelRepresentation: LabelRepresentation.ariaLabel,\n+      ) {\n+    setAriaRole('progressbar');\n+\n+    // Progress indicators in Flutter use values between 0.0 and 1.0\n+    setAttribute('aria-valuemin', \"0\");",
        "comment_created_at": "2025-04-05T01:31:44+00:00",
        "comment_author": "rkishan516",
        "comment_body": "Add new properties maxValue and minValue.",
        "pr_file_module": null
      }
    ]
  }
]