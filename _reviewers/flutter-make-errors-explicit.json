[
  {
    "discussion_id": "2305361301",
    "pr_number": 173364,
    "pr_file": "engine/src/flutter/lib/ui/semantics/semantics_update_builder_unittests.cc",
    "created_at": "2025-08-27T21:45:37+00:00",
    "commented_code": "DestroyShell(std::move(shell), task_runners);\n }\n \n+TEST_F(SemanticsUpdateBuilderTest, CanHandleSemanticsLocale) {\n+  auto message_latch = std::make_shared<fml::AutoResetWaitableEvent>();\n+\n+  auto nativeSemanticsUpdate = [message_latch](Dart_NativeArguments args) {\n+    auto handle = Dart_GetNativeArgument(args, 0);\n+    intptr_t peer = 0;\n+    Dart_Handle result = Dart_GetNativeInstanceField(\n+        handle, tonic::DartWrappable::kPeerIndex, &peer);\n+    ASSERT_FALSE(Dart_IsError(result));\n+    SemanticsUpdate* update = reinterpret_cast<SemanticsUpdate*>(peer);\n+    SemanticsNodeUpdates nodes = update->takeNodes();\n+    ASSERT_EQ(nodes.size(), (size_t)1);\n+    auto node = nodes.find(0)->second;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2305361301",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173364,
        "pr_file": "engine/src/flutter/lib/ui/semantics/semantics_update_builder_unittests.cc",
        "discussion_id": "2305361301",
        "commented_code": "@@ -131,5 +131,48 @@ TEST_F(SemanticsUpdateBuilderTest, CanHandleSemanticsRole) {\n   DestroyShell(std::move(shell), task_runners);\n }\n \n+TEST_F(SemanticsUpdateBuilderTest, CanHandleSemanticsLocale) {\n+  auto message_latch = std::make_shared<fml::AutoResetWaitableEvent>();\n+\n+  auto nativeSemanticsUpdate = [message_latch](Dart_NativeArguments args) {\n+    auto handle = Dart_GetNativeArgument(args, 0);\n+    intptr_t peer = 0;\n+    Dart_Handle result = Dart_GetNativeInstanceField(\n+        handle, tonic::DartWrappable::kPeerIndex, &peer);\n+    ASSERT_FALSE(Dart_IsError(result));\n+    SemanticsUpdate* update = reinterpret_cast<SemanticsUpdate*>(peer);\n+    SemanticsNodeUpdates nodes = update->takeNodes();\n+    ASSERT_EQ(nodes.size(), (size_t)1);\n+    auto node = nodes.find(0)->second;",
        "comment_created_at": "2025-08-27T21:45:37+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "nit: worth checking the find result.  if the find fails you'll crash the whole test runner.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220472545",
    "pr_number": 170931,
    "pr_file": "packages/flutter/lib/src/rendering/sliver_fixed_extent_list.dart",
    "created_at": "2025-07-21T22:18:40+00:00",
    "commented_code": ") {\n     if (itemExtentBuilder == null) {\n       itemExtent = this.itemExtent!;\n-      if (itemExtent > 0.0) {\n+      if (itemExtent > 0.0 && scrollOffset.isFinite && itemExtent.isFinite) {\n         final double actual = scrollOffset / itemExtent;\n+        if (!actual.isFinite) {\n+          return 0;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2220472545",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170931,
        "pr_file": "packages/flutter/lib/src/rendering/sliver_fixed_extent_list.dart",
        "discussion_id": "2220472545",
        "commented_code": "@@ -113,8 +113,11 @@ abstract class RenderSliverFixedExtentBoxAdaptor extends RenderSliverMultiBoxAda\n   ) {\n     if (itemExtentBuilder == null) {\n       itemExtent = this.itemExtent!;\n-      if (itemExtent > 0.0) {\n+      if (itemExtent > 0.0 && scrollOffset.isFinite && itemExtent.isFinite) {\n         final double actual = scrollOffset / itemExtent;\n+        if (!actual.isFinite) {\n+          return 0;",
        "comment_created_at": "2025-07-21T22:18:40+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Instead of returning 0 and thus 'hiding' an error, we should probably assert that the `scrollOffset` and `itemExtent` are both finite. cc @loic-sharma ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2279400312",
    "pr_number": 173852,
    "pr_file": "packages/flutter_tools/test/integration.shard/test_data/websocket_dwds_test_common.dart",
    "created_at": "2025-08-15T16:12:11+00:00",
    "commented_code": "+// Copyright 2014 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:async';\n+import 'dart:io' as io;\n+\n+import 'package:flutter_tools/src/web/chrome.dart';\n+import 'package:flutter_tools/src/web/web_device.dart' show WebServerDevice;\n+\n+import '../../src/common.dart';\n+import '../test_driver.dart';\n+import '../test_utils.dart';\n+import '../transition_test_utils.dart';\n+\n+/// Configuration for WebSocket DWDS tests.\n+class WebSocketDwdsTestConfig {\n+  const WebSocketDwdsTestConfig({\n+    this.debugUrlTimeout = const Duration(seconds: 20),\n+    this.appStartTimeout = const Duration(seconds: 15),\n+  });\n+\n+  final Duration debugUrlTimeout;\n+  final Duration appStartTimeout;\n+}\n+\n+/// Result of setting up a WebSocket DWDS connection.\n+class WebSocketDwdsTestSetup {\n+  const WebSocketDwdsTestSetup({\n+    required this.stdout,\n+    required this.chromeProcess,\n+    required this.subscription,\n+  });\n+\n+  final StringBuffer stdout;\n+  final io.Process chromeProcess;\n+  final StreamSubscription<String> subscription;\n+}\n+\n+/// Common utilities for WebSocket DWDS tests.\n+class WebSocketDwdsTestUtils {\n+  /// Sets up WebSocket DWDS connection with headless Chrome.\n+  ///\n+  /// This method handles the complete setup flow:\n+  /// 1. Start Flutter app with web-server device\n+  /// 2. Wait for DWDS debug URL\n+  /// 3. Launch headless Chrome to connect to DWDS\n+  /// 4. Wait for app startup after Chrome connection\n+  static Future<WebSocketDwdsTestSetup> setupWebSocketConnection(\n+    FlutterRunTestDriver flutter, {\n+    required List<String> additionalCommandArgs,\n+    WebSocketDwdsTestConfig config = const WebSocketDwdsTestConfig(),\n+  }) async {\n+    debugPrint('Step 1: Starting WebSocket DWDS connection setup...');\n+\n+    // Set up listening for app output before starting\n+    final stdout = StringBuffer();\n+    final sawDebugUrl = Completer<String>();\n+    final StreamSubscription<String> subscription = flutter.stdout.listen((String e) {\n+      stdout.writeln(e);\n+      // Extract the debug connection URL\n+      if (e.contains('Waiting for connection from Dart debug extension at http://')) {\n+        final debugUrlPattern = RegExp(\n+          r'Waiting for connection from Dart debug extension at (http://[^\\s]+)',\n+        );\n+        final Match? match = debugUrlPattern.firstMatch(e);\n+        if (match != null && !sawDebugUrl.isCompleted) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2279400312",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173852,
        "pr_file": "packages/flutter_tools/test/integration.shard/test_data/websocket_dwds_test_common.dart",
        "discussion_id": "2279400312",
        "commented_code": "@@ -0,0 +1,187 @@\n+// Copyright 2014 The Flutter Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:async';\n+import 'dart:io' as io;\n+\n+import 'package:flutter_tools/src/web/chrome.dart';\n+import 'package:flutter_tools/src/web/web_device.dart' show WebServerDevice;\n+\n+import '../../src/common.dart';\n+import '../test_driver.dart';\n+import '../test_utils.dart';\n+import '../transition_test_utils.dart';\n+\n+/// Configuration for WebSocket DWDS tests.\n+class WebSocketDwdsTestConfig {\n+  const WebSocketDwdsTestConfig({\n+    this.debugUrlTimeout = const Duration(seconds: 20),\n+    this.appStartTimeout = const Duration(seconds: 15),\n+  });\n+\n+  final Duration debugUrlTimeout;\n+  final Duration appStartTimeout;\n+}\n+\n+/// Result of setting up a WebSocket DWDS connection.\n+class WebSocketDwdsTestSetup {\n+  const WebSocketDwdsTestSetup({\n+    required this.stdout,\n+    required this.chromeProcess,\n+    required this.subscription,\n+  });\n+\n+  final StringBuffer stdout;\n+  final io.Process chromeProcess;\n+  final StreamSubscription<String> subscription;\n+}\n+\n+/// Common utilities for WebSocket DWDS tests.\n+class WebSocketDwdsTestUtils {\n+  /// Sets up WebSocket DWDS connection with headless Chrome.\n+  ///\n+  /// This method handles the complete setup flow:\n+  /// 1. Start Flutter app with web-server device\n+  /// 2. Wait for DWDS debug URL\n+  /// 3. Launch headless Chrome to connect to DWDS\n+  /// 4. Wait for app startup after Chrome connection\n+  static Future<WebSocketDwdsTestSetup> setupWebSocketConnection(\n+    FlutterRunTestDriver flutter, {\n+    required List<String> additionalCommandArgs,\n+    WebSocketDwdsTestConfig config = const WebSocketDwdsTestConfig(),\n+  }) async {\n+    debugPrint('Step 1: Starting WebSocket DWDS connection setup...');\n+\n+    // Set up listening for app output before starting\n+    final stdout = StringBuffer();\n+    final sawDebugUrl = Completer<String>();\n+    final StreamSubscription<String> subscription = flutter.stdout.listen((String e) {\n+      stdout.writeln(e);\n+      // Extract the debug connection URL\n+      if (e.contains('Waiting for connection from Dart debug extension at http://')) {\n+        final debugUrlPattern = RegExp(\n+          r'Waiting for connection from Dart debug extension at (http://[^\\s]+)',\n+        );\n+        final Match? match = debugUrlPattern.firstMatch(e);\n+        if (match != null && !sawDebugUrl.isCompleted) {",
        "comment_created_at": "2025-08-15T16:12:11+00:00",
        "comment_author": "biggs0125",
        "comment_body": "Is it possible to see the debug URL twice? Seems like something is off if that happens so perhaps we should throw a clear error. Otherwise it'll just look like a timeout.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2229712493",
    "pr_number": 172669,
    "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
    "created_at": "2025-07-24T22:29:35+00:00",
    "commented_code": "return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2229712493",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2229712493",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
        "comment_created_at": "2025-07-24T22:29:35+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Could we add an `FML_LOG(ERROR)` here and on line 71? Both those cases shouldn't happen.",
        "pr_file_module": null
      },
      {
        "comment_id": "2229801139",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2229712493",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
        "comment_created_at": "2025-07-24T23:32:13+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "If we go with the approach in this comment https://github.com/flutter/flutter/pull/172669/files#r2229795717, the error should recommend you switch from `SemanticsService.announce` to `SemanticsService.sendAnnouncement`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2231532762",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2229712493",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
        "comment_created_at": "2025-07-25T16:12:37+00:00",
        "comment_author": "mattkae",
        "comment_body": "\r\n\r\nThe previous announce method will send the implicit view ID by default, so that should still work just fine\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2231539281",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2229712493",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
        "comment_created_at": "2025-07-25T16:15:55+00:00",
        "comment_author": "mattkae",
        "comment_body": "But I will still log here",
        "pr_file_module": null
      },
      {
        "comment_id": "2231742462",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172669,
        "pr_file": "engine/src/flutter/shell/platform/windows/accessibility_plugin.cc",
        "discussion_id": "2229712493",
        "commented_code": "@@ -61,7 +62,16 @@ void HandleMessage(AccessibilityPlugin* plugin, const EncodableValue& message) {\n       return;\n     }\n \n-    plugin->Announce(*message);\n+    const auto& view_itr = data->find(EncodableValue{kViewIdKey});\n+    if (view_itr == data->end()) {\n+      return;",
        "comment_created_at": "2025-07-25T18:10:54+00:00",
        "comment_author": "loic-sharma",
        "comment_body": "Ah that's perfect, thanks!",
        "pr_file_module": null
      }
    ]
  }
]