[
  {
    "discussion_id": "2292260960",
    "pr_number": 174239,
    "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
    "created_at": "2025-08-21T22:26:32+00:00",
    "commented_code": "/// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2292260960",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-21T22:26:32+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "Hmm calling `Overlay.of` doesn't establish a dependency (it's not using an inheritedWidget). So if an OverlayPortal gets reparented to a different subtree where it can't see the old target Overlay, it's not guaranteed that the OverlayPortal's parent will rebuild to update the `targetsOverlay` parameter (e.g., if you cache the widget). ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292262940",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-21T22:27:38+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "See: https://main-api.flutter.dev/flutter/widgets/Overlay/maybeOf.html",
        "pr_file_module": null
      },
      {
        "comment_id": "2292267124",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-21T22:30:06+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "(I thought I had a test for this but apparently all tests are passing) ",
        "pr_file_module": null
      },
      {
        "comment_id": "2292285220",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-21T22:46:38+00:00",
        "comment_author": "chunhtai",
        "comment_body": "In that case, it is the consumer of this widget to ensure it grabs the correct overlay state when it change? (in State.activate)\r\n\r\nnot entirely sure what else we can do. using globalkey is not feasible unless we expose root overlay's globalkey all the way to WidgetsApp\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2292330862",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-21T23:27:45+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": ">  it is the consumer of this widget to ensure it grabs the correct overlay state when it change\r\n\r\nYeah if the creator of the OverlayPortal widget rebuilds. But the problem is what if that widget doesn't rebuild because the user cached the widget, or the widget is a `const` instance? I think we need an alternative version of `Overlay.of` that establishes a dependency (i.e. an InheritedWidget for `Overlay`). To prevent these kind of bugs maybe the new `of` method should use a different type from `OverlayState` so people can't use `Overlay.of` for this API.",
        "pr_file_module": null
      },
      {
        "comment_id": "2294199942",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-22T16:45:33+00:00",
        "comment_author": "chunhtai",
        "comment_body": "Looking at the code, I think the statefulElement will be rebuild when globalkey reparent. but not StatelessWidget. not sure why this is the case.\r\n\r\nhttps://github.com/flutter/flutter/blob/7130981fe1ca12481f0bd5c4bdf6dbcee84afe43/packages/flutter/lib/src/widgets/framework.dart#L6019\r\n\r\nCan the overlay.of create dependency be another pr?",
        "pr_file_module": null
      },
      {
        "comment_id": "2294400215",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-22T18:28:51+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "If you had dependencies before getting reparented, you'll rebuilt on activation (via `didChangeDependencies`):\r\n\r\nhttps://github.com/flutter/flutter/blob/f0f208deae4f50973fd332afcbd55113da46ef3d/packages/flutter/lib/src/widgets/framework.dart#L4758-L4772\r\n\r\n> I think the statefulElement will be rebuild when globalkey reparent.\r\n\r\nLooks like the issue was https://github.com/flutter/flutter/issues/2901, but I'm not sure as to why that was needed (given that elements with dependencies already rebuild on activation, and that both the old parent Element and new parent Element rebuild)?\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2294402047",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-22T18:30:07+00:00",
        "comment_author": "LongCatIsLooong",
        "comment_body": "> Can the overlay.of create dependency be another pr?\r\n\r\nYeah but I think the `Overlay.of` that establishes dependencies a prerequisite for this PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "2294425719",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174239,
        "pr_file": "packages/flutter/lib/src/widgets/overlay.dart",
        "discussion_id": "2292260960",
        "commented_code": "@@ -1723,6 +1727,14 @@ class OverlayPortalController {\n /// widget rebuilds. Stateful descendants in the overlay child subtree may lose\n /// states as a result.\n ///\n+/// {@template flutter.widgets.overlayPortal.targetsOverlay}\n+/// Use [targetsOverlay] to choose which [Overlay] this overlay portal\n+/// attaches to. Consider using [GlobalKey] or [Overlay.of] with appropriate\n+/// [BuildContext] to get the [OverlayState]. One can also use\n+/// `Overlay.of(context, rootOverlay: true)` to pick the root [Overlay]. If",
        "comment_created_at": "2025-08-22T18:43:53+00:00",
        "comment_author": "chunhtai",
        "comment_body": "> that both the old parent Element and new parent Element rebuild)?\r\n\r\nIf you don't have dependecy, but have some specialize logic to update state in activate, then this makes sense. My guess is that since State has access to to activate callback, this is necessary to make it not a footgun.\r\n\r\n> Yeah but I think the Overlay.of that establishes dependencies a prerequisite for this PR?\r\n\r\nsgtm\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2075776511",
    "pr_number": 167806,
    "pr_file": "packages/flutter/lib/src/widgets/raw_menu_anchor.dart",
    "created_at": "2025-05-06T15:52:29+00:00",
    "commented_code": "}\n   }\n \n+  @override\n+  void handleOpenRequest({ui.Offset? position}) {\n+    if (widget.onOpenRequested != null) {\n+      widget.onOpenRequested!(position, open);\n+    } else {\n+      open(position: position);\n+    }\n+  }\n+\n+  @override\n+  void handleCloseRequest() {\n+    if (widget.onCloseRequested != null) {\n+      if (SchedulerBinding.instance.schedulerPhase != SchedulerPhase.persistentCallbacks) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2075776511",
        "repo_full_name": "flutter/flutter",
        "pr_number": 167806,
        "pr_file": "packages/flutter/lib/src/widgets/raw_menu_anchor.dart",
        "discussion_id": "2075776511",
        "commented_code": "@@ -566,6 +677,30 @@ class _RawMenuAnchorState extends State<RawMenuAnchor> with _RawMenuAnchorBaseMi\n     }\n   }\n \n+  @override\n+  void handleOpenRequest({ui.Offset? position}) {\n+    if (widget.onOpenRequested != null) {\n+      widget.onOpenRequested!(position, open);\n+    } else {\n+      open(position: position);\n+    }\n+  }\n+\n+  @override\n+  void handleCloseRequest() {\n+    if (widget.onCloseRequested != null) {\n+      if (SchedulerBinding.instance.schedulerPhase != SchedulerPhase.persistentCallbacks) {",
        "comment_created_at": "2025-05-06T15:52:29+00:00",
        "comment_author": "chunhtai",
        "comment_body": "Why do we need a postframe callback? would be good to have some comments on this",
        "pr_file_module": null
      },
      {
        "comment_id": "2080526597",
        "repo_full_name": "flutter/flutter",
        "pr_number": 167806,
        "pr_file": "packages/flutter/lib/src/widgets/raw_menu_anchor.dart",
        "discussion_id": "2075776511",
        "commented_code": "@@ -566,6 +677,30 @@ class _RawMenuAnchorState extends State<RawMenuAnchor> with _RawMenuAnchorBaseMi\n     }\n   }\n \n+  @override\n+  void handleOpenRequest({ui.Offset? position}) {\n+    if (widget.onOpenRequested != null) {\n+      widget.onOpenRequested!(position, open);\n+    } else {\n+      open(position: position);\n+    }\n+  }\n+\n+  @override\n+  void handleCloseRequest() {\n+    if (widget.onCloseRequested != null) {\n+      if (SchedulerBinding.instance.schedulerPhase != SchedulerPhase.persistentCallbacks) {",
        "comment_created_at": "2025-05-08T22:03:58+00:00",
        "comment_author": "davidhicks980",
        "comment_body": "Changes in MediaQuery.sizeOf(context) cause RawMenuAnchor to close during didChangeDependencies. When this happens, calling setState during the closing sequence (i.e. handleCloseRequest -> onCloseRequested -> hideOverlay) will throw an error, since we're scheduling a build during a build. I think this could be fixed if OverlayPortal is given a declarative API (see https://github.com/flutter/flutter/issues/136769). I'll add comments explaining this.\r\n\r\nWhile I was investigating how to phrase the comments, I realized that we could remove the post-frame callbacks if we used didChangeMetrics instead of MediaQuery, since didChangeMetrics is called during the idle phase. The drawback of this approach is that we would be rebuilding when the screen size changes rather than when the MediaQuery size changes. As a result, if a user modified the size of an ancestor MediaQuery widget, RawMenuAnchor wouldn't close. I submitted an issue about this here: https://github.com/flutter/flutter/issues/168539\r\n\r\n<img width=\"926\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a9d326d5-0cfa-4af6-a079-957ecd856edc\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2082773572",
        "repo_full_name": "flutter/flutter",
        "pr_number": 167806,
        "pr_file": "packages/flutter/lib/src/widgets/raw_menu_anchor.dart",
        "discussion_id": "2075776511",
        "commented_code": "@@ -566,6 +677,30 @@ class _RawMenuAnchorState extends State<RawMenuAnchor> with _RawMenuAnchorBaseMi\n     }\n   }\n \n+  @override\n+  void handleOpenRequest({ui.Offset? position}) {\n+    if (widget.onOpenRequested != null) {\n+      widget.onOpenRequested!(position, open);\n+    } else {\n+      open(position: position);\n+    }\n+  }\n+\n+  @override\n+  void handleCloseRequest() {\n+    if (widget.onCloseRequested != null) {\n+      if (SchedulerBinding.instance.schedulerPhase != SchedulerPhase.persistentCallbacks) {",
        "comment_created_at": "2025-05-10T02:46:06+00:00",
        "comment_author": "davidhicks980",
        "comment_body": "I filed a PR regarding this issue here: https://github.com/flutter/flutter/pull/168623. For now, I'll comment in the explanation.",
        "pr_file_module": null
      },
      {
        "comment_id": "2083026790",
        "repo_full_name": "flutter/flutter",
        "pr_number": 167806,
        "pr_file": "packages/flutter/lib/src/widgets/raw_menu_anchor.dart",
        "discussion_id": "2075776511",
        "commented_code": "@@ -566,6 +677,30 @@ class _RawMenuAnchorState extends State<RawMenuAnchor> with _RawMenuAnchorBaseMi\n     }\n   }\n \n+  @override\n+  void handleOpenRequest({ui.Offset? position}) {\n+    if (widget.onOpenRequested != null) {\n+      widget.onOpenRequested!(position, open);\n+    } else {\n+      open(position: position);\n+    }\n+  }\n+\n+  @override\n+  void handleCloseRequest() {\n+    if (widget.onCloseRequested != null) {\n+      if (SchedulerBinding.instance.schedulerPhase != SchedulerPhase.persistentCallbacks) {",
        "comment_created_at": "2025-05-10T08:24:02+00:00",
        "comment_author": "davidhicks980",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]