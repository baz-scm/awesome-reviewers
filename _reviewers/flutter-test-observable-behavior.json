[
  {
    "discussion_id": "2293046111",
    "pr_number": 172850,
    "pr_file": "packages/flutter/test/cupertino/date_picker_test.dart",
    "created_at": "2025-08-22T08:13:44+00:00",
    "commented_code": "lastOffset = tester.getTopLeft(find.text('11'));\n     expect(tester.getTopLeft(find.text('2022')).dy, lastOffset.dy);\n   });\n+\n+  group('CupertinoTimerPicker hour label animation', () {\n+    testWidgets('animates from plural to singular when scrolling from 2 to 1', (",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2293046111",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172850,
        "pr_file": "packages/flutter/test/cupertino/date_picker_test.dart",
        "discussion_id": "2293046111",
        "commented_code": "@@ -2636,6 +2657,66 @@ void main() {\n     lastOffset = tester.getTopLeft(find.text('11'));\n     expect(tester.getTopLeft(find.text('2022')).dy, lastOffset.dy);\n   });\n+\n+  group('CupertinoTimerPicker hour label animation', () {\n+    testWidgets('animates from plural to singular when scrolling from 2 to 1', (",
        "comment_created_at": "2025-08-22T08:13:44+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "It seems to me that these tests would also pass if the text is not animated. If so, can you think of a way to test it? Maybe find the `FadeTransition` / `RenderAnimatedOpacity` around the `s` text and verify its `opacity`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2226958802",
    "pr_number": 172441,
    "pr_file": "packages/flutter/lib/src/rendering/table_border.dart",
    "created_at": "2025-07-23T23:40:57+00:00",
    "commented_code": "/// Whether all the sides of the border (outside and inside) are identical.\n   /// Uniform borders are typically more efficient to paint.\n   bool get isUniform {\n-    final Color topColor = top.color;\n-    if (right.color != topColor ||\n-        bottom.color != topColor ||\n-        left.color != topColor ||\n-        horizontalInside.color != topColor ||\n-        verticalInside.color != topColor) {\n-      return false;\n-    }\n+    return _allSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _allSidesMatch<double>((BorderSide side) => side.width) &&\n+        _allSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n \n-    final double topWidth = top.width;\n-    if (right.width != topWidth ||\n-        bottom.width != topWidth ||\n-        left.width != topWidth ||\n-        horizontalInside.width != topWidth ||\n-        verticalInside.width != topWidth) {\n-      return false;\n+  /// Whether all the outer sides of the border (excluding the inner sides) are identical.\n+  bool get outerBorderIsUniform {\n+    return _outerSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _outerSidesMatch<double>((BorderSide side) => side.width) &&\n+        _outerSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n+\n+  bool _allSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue &&\n+        selector(horizontalInside) == topValue &&\n+        selector(verticalInside) == topValue;\n+  }\n+\n+  bool _outerSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue;\n+  }\n+\n+  /// Returns the set of distinct visible colors from the outer border sides.\n+  ///\n+  /// Only includes colors from border sides that are not [BorderStyle.none].\n+  @visibleForTesting",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2226958802",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172441,
        "pr_file": "packages/flutter/lib/src/rendering/table_border.dart",
        "discussion_id": "2226958802",
        "commented_code": "@@ -97,34 +97,150 @@ class TableBorder {\n   /// Whether all the sides of the border (outside and inside) are identical.\n   /// Uniform borders are typically more efficient to paint.\n   bool get isUniform {\n-    final Color topColor = top.color;\n-    if (right.color != topColor ||\n-        bottom.color != topColor ||\n-        left.color != topColor ||\n-        horizontalInside.color != topColor ||\n-        verticalInside.color != topColor) {\n-      return false;\n-    }\n+    return _allSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _allSidesMatch<double>((BorderSide side) => side.width) &&\n+        _allSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n \n-    final double topWidth = top.width;\n-    if (right.width != topWidth ||\n-        bottom.width != topWidth ||\n-        left.width != topWidth ||\n-        horizontalInside.width != topWidth ||\n-        verticalInside.width != topWidth) {\n-      return false;\n+  /// Whether all the outer sides of the border (excluding the inner sides) are identical.\n+  bool get outerBorderIsUniform {\n+    return _outerSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _outerSidesMatch<double>((BorderSide side) => side.width) &&\n+        _outerSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n+\n+  bool _allSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue &&\n+        selector(horizontalInside) == topValue &&\n+        selector(verticalInside) == topValue;\n+  }\n+\n+  bool _outerSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue;\n+  }\n+\n+  /// Returns the set of distinct visible colors from the outer border sides.\n+  ///\n+  /// Only includes colors from border sides that are not [BorderStyle.none].\n+  @visibleForTesting",
        "comment_created_at": "2025-07-23T23:40:57+00:00",
        "comment_author": "Piinks",
        "comment_body": "Is there another way that we could test this without public API?\r\nhttps://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#avoid-using-visiblefortesting",
        "pr_file_module": null
      },
      {
        "comment_id": "2227178845",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172441,
        "pr_file": "packages/flutter/lib/src/rendering/table_border.dart",
        "discussion_id": "2226958802",
        "commented_code": "@@ -97,34 +97,150 @@ class TableBorder {\n   /// Whether all the sides of the border (outside and inside) are identical.\n   /// Uniform borders are typically more efficient to paint.\n   bool get isUniform {\n-    final Color topColor = top.color;\n-    if (right.color != topColor ||\n-        bottom.color != topColor ||\n-        left.color != topColor ||\n-        horizontalInside.color != topColor ||\n-        verticalInside.color != topColor) {\n-      return false;\n-    }\n+    return _allSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _allSidesMatch<double>((BorderSide side) => side.width) &&\n+        _allSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n \n-    final double topWidth = top.width;\n-    if (right.width != topWidth ||\n-        bottom.width != topWidth ||\n-        left.width != topWidth ||\n-        horizontalInside.width != topWidth ||\n-        verticalInside.width != topWidth) {\n-      return false;\n+  /// Whether all the outer sides of the border (excluding the inner sides) are identical.\n+  bool get outerBorderIsUniform {\n+    return _outerSidesMatch<Color>((BorderSide side) => side.color) &&\n+        _outerSidesMatch<double>((BorderSide side) => side.width) &&\n+        _outerSidesMatch<BorderStyle>((BorderSide side) => side.style);\n+  }\n+\n+  bool _allSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue &&\n+        selector(horizontalInside) == topValue &&\n+        selector(verticalInside) == topValue;\n+  }\n+\n+  bool _outerSidesMatch<T>(T Function(BorderSide borderSide) selector) {\n+    final T topValue = selector(top);\n+\n+    return selector(right) == topValue &&\n+        selector(bottom) == topValue &&\n+        selector(left) == topValue;\n+  }\n+\n+  /// Returns the set of distinct visible colors from the outer border sides.\n+  ///\n+  /// Only includes colors from border sides that are not [BorderStyle.none].\n+  @visibleForTesting",
        "comment_created_at": "2025-07-24T02:33:41+00:00",
        "comment_author": "korca0220",
        "comment_body": "good point! I can make `distinctVisibleOuterColors()` private (rename to `_distinctVisibleOuterColors()`) and remove the `@visibleForTesting` annotation entirely. \r\n\r\nThe core functionality can be tested through the public API by:\r\n- Testing various `TableBorder` configurations with `borderRadius` \r\n- Verifying that border radius is applied when outer colors are uniform but widths differ\r\n- Ensuring border radius is not applied when outer colors differ\r\n\r\nThis way we test the actual behavior users care about rather than implementation details.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2160643643",
    "pr_number": 170380,
    "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
    "created_at": "2025-06-23T03:16:57+00:00",
    "commented_code": "expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets(\n+    'CircularProgressIndicator & LinearProgressIndicator with custom animation controller (dynamic)',\n+    (WidgetTester tester) async {\n+      Future<void> testCustomAnimationController({\n+        required WidgetTester tester,\n+        required Widget Function(AnimationController? controller) buildWidget,\n+        required AnimationController controller,\n+        required double multiplier,\n+      }) async {\n+        final Duration duration = controller.duration!;\n+        final Duration half = duration ~/ 2;\n+\n+        await tester.pumpWidget(buildWidget(controller));\n+        expect(controller.value, equals(0.0));\n+\n+        controller.forward();\n+        await tester.pump();\n+        expect(controller.status, AnimationStatus.forward);\n+\n+        await tester.pump(half);\n+        expect(controller.value, closeTo(0.5, 0.01));",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2160643643",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2160643643",
        "commented_code": "@@ -564,6 +564,148 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets(\n+    'CircularProgressIndicator & LinearProgressIndicator with custom animation controller (dynamic)',\n+    (WidgetTester tester) async {\n+      Future<void> testCustomAnimationController({\n+        required WidgetTester tester,\n+        required Widget Function(AnimationController? controller) buildWidget,\n+        required AnimationController controller,\n+        required double multiplier,\n+      }) async {\n+        final Duration duration = controller.duration!;\n+        final Duration half = duration ~/ 2;\n+\n+        await tester.pumpWidget(buildWidget(controller));\n+        expect(controller.value, equals(0.0));\n+\n+        controller.forward();\n+        await tester.pump();\n+        expect(controller.status, AnimationStatus.forward);\n+\n+        await tester.pump(half);\n+        expect(controller.value, closeTo(0.5, 0.01));",
        "comment_created_at": "2025-06-23T03:16:57+00:00",
        "comment_author": "dkwingsmt",
        "comment_body": "So this is what I was not satisfied from the original PR: We should not check `controller.value`. Because this check does not verify the connection between `controller` and what the widget draws, but only that the `controller` is connected to the async (i.e. it is forwarded with `pump`). It's possible that the the shape is still drawn with the fallback controller.\r\n\r\nI suggest verifying the resulting shape. For `LinearProgressIndicator`, there are already similar statements in this file such as L123 (if I understand correctly). What the test should do is:\r\n```dart\r\n      await tester.pumpWidget(buildWidget(controller));\r\n      await tester.pump(const Duration(seconds: 1));\r\n      // Without starting the controller, the linear progress should still be at 0\r\n      expect(\r\n        find.byType(LinearProgressIndicator),\r\n        paints\r\n          ..rect(rect: /* the correct rect*/)\r\n          ..rect(rect: /* the correct rect*/)\r\n      );\r\n      await tester.pump(const Duration(seconds: 1));\r\n      controller.value = 0.5;\r\n      expect(\r\n        find.byType(LinearProgressIndicator),\r\n        paints\r\n          ..rect(rect: /* the correct rect*/)\r\n          ..rect(rect: /* the correct rect*/)\r\n      );\r\n```\r\n\r\nWe don't need to pump different durations, because this already proves that `controller.forward` is the what makes the difference.\r\n\r\nFor more detailed testing, we might want to verify the behavior of switching to a different controller and null controller. For example:\r\n\r\n```dart\r\n      /* continuing from above */\r\n\r\n      await tester.pumpWidget(buildWidget(controller2));\r\n      controller2.value = 0.25;\r\n      controller.value = 0.75;\r\n      await tester.pump(const Duration(seconds: 1));\r\n      expect(\r\n        find.byType(LinearProgressIndicator),\r\n        paints\r\n          ..rect(rect: /* the correct rect*/)\r\n          ..rect(rect: /* the correct rect*/)\r\n      );\r\n\r\n      await tester.pumpWidget(buildWidget(null));\r\n      controller2.value = 1;\r\n      controller.value = 1;\r\n      await tester.pump(const Duration(seconds: 1));\r\n      expect(\r\n        find.byType(LinearProgressIndicator),\r\n        paints\r\n          ..rect(rect: /* the correct rect*/)\r\n          ..rect(rect: /* the correct rect*/)\r\n      );\r\n```\r\n\r\nAs for `CircularProgressIndicator`, you can use `..arc()`, which has `startAngle` and `sweepAngle`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2187220588",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2160643643",
        "commented_code": "@@ -564,6 +564,148 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets(\n+    'CircularProgressIndicator & LinearProgressIndicator with custom animation controller (dynamic)',\n+    (WidgetTester tester) async {\n+      Future<void> testCustomAnimationController({\n+        required WidgetTester tester,\n+        required Widget Function(AnimationController? controller) buildWidget,\n+        required AnimationController controller,\n+        required double multiplier,\n+      }) async {\n+        final Duration duration = controller.duration!;\n+        final Duration half = duration ~/ 2;\n+\n+        await tester.pumpWidget(buildWidget(controller));\n+        expect(controller.value, equals(0.0));\n+\n+        controller.forward();\n+        await tester.pump();\n+        expect(controller.status, AnimationStatus.forward);\n+\n+        await tester.pump(half);\n+        expect(controller.value, closeTo(0.5, 0.01));",
        "comment_created_at": "2025-07-05T12:48:54+00:00",
        "comment_author": "stan-at-work",
        "comment_body": "@dkwingsmt Changes are done.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211452634",
    "pr_number": 170380,
    "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
    "created_at": "2025-07-16T20:01:31+00:00",
    "commented_code": "expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2211452634",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:01:31+00:00",
        "comment_author": "victorsanni",
        "comment_body": "I don't see the point of both tests. The controller's value is passed into the progress indicator directly?",
        "pr_file_module": null
      },
      {
        "comment_id": "2211462338",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:05:05+00:00",
        "comment_author": "victorsanni",
        "comment_body": "The PR is adding a new property that increases the API surface. Tests should check that that property is respected (for both progress indicators and `ProgressIndicatorThemeData` as well.).",
        "pr_file_module": null
      },
      {
        "comment_id": "2211485088",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:12:15+00:00",
        "comment_author": "Sten435",
        "comment_body": "In what way should I check that its respected ?\r\nLike check if the hashcode is the same or ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2211487932",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:13:09+00:00",
        "comment_author": "Sten435",
        "comment_body": "> I don't see the point of both tests. The controller's value is passed into the progress indicator directly?\r\n\r\nAny idea's on how you would tackle this, differently ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2211588288",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:53:22+00:00",
        "comment_author": "Sten435",
        "comment_body": "@dkwingsmt What do you think about this ?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2211600976",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-16T20:59:56+00:00",
        "comment_author": "victorsanni",
        "comment_body": "One example I can think of is passing the same animation controller into multiple progress indicators on the same page and verifying at certain points they all have the same value?",
        "pr_file_module": null
      },
      {
        "comment_id": "2213093031",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-17T11:31:46+00:00",
        "comment_author": "stan-at-work",
        "comment_body": "This can't be done because everything is private in the class.\r\nAnd there is no way to access private proprties, not even in tests...",
        "pr_file_module": null
      },
      {
        "comment_id": "2214098382",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-07-17T19:13:28+00:00",
        "comment_author": "victorsanni",
        "comment_body": "> This can't be done because everything is private in the class.\r\n\r\nTesting in the framework focuses on observable behavior, not implementation details. \r\n\r\nIn `progress_indicator_test.dart`, there are tests that check what is painted by the progress indicators. A good test could have multiple progress indicators aligned in a Column, inserted at different times. Then some of them can have the same controller, and the ones with the same controller can be observed to have the same progress (i.e by the same paint extent, indicating a synchronized animation) while the others have a different paint extent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2283564535",
        "repo_full_name": "flutter/flutter",
        "pr_number": 170380,
        "pr_file": "packages/flutter/test/material/progress_indicator_test.dart",
        "discussion_id": "2211452634",
        "commented_code": "@@ -567,6 +567,80 @@ void main() {\n     expect(tester.binding.transientCallbackCount, 0);\n   });\n \n+  testWidgets('LinearProgressIndicator reflects controller value', (WidgetTester tester) async {",
        "comment_created_at": "2025-08-18T21:44:54+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Hi @Sten435, did you run into problems adding a test that fit the description in https://github.com/flutter/flutter/pull/170380/files#r2214098382?",
        "pr_file_module": null
      }
    ]
  }
]