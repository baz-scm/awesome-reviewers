[
  {
    "discussion_id": "2274816199",
    "pr_number": 173324,
    "pr_file": "packages/flutter/lib/src/material/slider_parts.dart",
    "created_at": "2025-08-13T23:01:56+00:00",
    "commented_code": "static const double _upperRectRadius = 4;\n \n   Size getPreferredSize(TextPainter labelPainter, double textScaleFactor) {\n+    // For getPreferredSize, assuming multiline support for sizing estimation.\n+    // The actual rendering decision is made in the paint method based on theme.\n+    final bool hasMultipleLines = labelPainter.text?.toPlainText().contains('\n') ?? false;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2274816199",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173324,
        "pr_file": "packages/flutter/lib/src/material/slider_parts.dart",
        "discussion_id": "2274816199",
        "commented_code": "@@ -848,9 +867,21 @@ class _DropSliderValueIndicatorPathPainter {\n   static const double _upperRectRadius = 4;\n \n   Size getPreferredSize(TextPainter labelPainter, double textScaleFactor) {\n+    // For getPreferredSize, assuming multiline support for sizing estimation.\n+    // The actual rendering decision is made in the paint method based on theme.\n+    final bool hasMultipleLines = labelPainter.text?.toPlainText().contains('\\n') ?? false;",
        "comment_created_at": "2025-08-13T23:01:56+00:00",
        "comment_author": "justinmc",
        "comment_body": "Nit: Would it be more clear to name this something like `hasNewline` since it doesn't depend on layout?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2261664457",
    "pr_number": 172915,
    "pr_file": "engine/src/flutter/lib/ui/window.dart",
    "created_at": "2025-08-07T23:56:08+00:00",
    "commented_code": "void setIsolateDebugName(String name) => PlatformDispatcher.instance.setIsolateDebugName(name);\n }\n \n+/// The system-reported typography settings if any.\n+//\n+// When changes are made to this class, the equivalent APIs in each of the\n+// embedders *must* be updated.\n+final class TypographySettings {\n+  /// Creates a new [TypographySettings].\n+  const TypographySettings({\n+    this.lineHeight,\n+    this.letterSpacing,\n+    this.wordSpacing,\n+    this.paragraphSpacing,\n+  });\n+\n+  /// The height of the text, as a multiple of the font size.\n+  final double? lineHeight;",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2261664457",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/ui/window.dart",
        "discussion_id": "2261664457",
        "commented_code": "@@ -913,6 +913,47 @@ class SingletonFlutterWindow extends FlutterView {\n   void setIsolateDebugName(String name) => PlatformDispatcher.instance.setIsolateDebugName(name);\n }\n \n+/// The system-reported typography settings if any.\n+//\n+// When changes are made to this class, the equivalent APIs in each of the\n+// embedders *must* be updated.\n+final class TypographySettings {\n+  /// Creates a new [TypographySettings].\n+  const TypographySettings({\n+    this.lineHeight,\n+    this.letterSpacing,\n+    this.wordSpacing,\n+    this.paragraphSpacing,\n+  });\n+\n+  /// The height of the text, as a multiple of the font size.\n+  final double? lineHeight;",
        "comment_created_at": "2025-08-07T23:56:08+00:00",
        "comment_author": "Renzo-Olivares",
        "comment_body": "Should this be `lineHeightFactor` instead? It seems like a more appropriate name. \r\n\r\nIn CSS `line-height` can accept:\r\n- Default: normal\r\n- `Normal` keyword\r\n- Unitless, relative to font size, for example `2`.\r\n- `<length>`, number followed by units `10px`\r\n- `<percentage>`, number followed by % sign `10%`, relative to font size\r\n\r\nbut there seems to be a strong preference for unitless numbers, i.e. numbers relative to font size.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/line-height#prefer_unitless_numbers_for_line-height_values\r\n\r\nIn the extension and bookmarklet I tried both are using unitless values for their CSS.",
        "pr_file_module": null
      },
      {
        "comment_id": "2277130949",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/ui/window.dart",
        "discussion_id": "2261664457",
        "commented_code": "@@ -913,6 +913,47 @@ class SingletonFlutterWindow extends FlutterView {\n   void setIsolateDebugName(String name) => PlatformDispatcher.instance.setIsolateDebugName(name);\n }\n \n+/// The system-reported typography settings if any.\n+//\n+// When changes are made to this class, the equivalent APIs in each of the\n+// embedders *must* be updated.\n+final class TypographySettings {\n+  /// Creates a new [TypographySettings].\n+  const TypographySettings({\n+    this.lineHeight,\n+    this.letterSpacing,\n+    this.wordSpacing,\n+    this.paragraphSpacing,\n+  });\n+\n+  /// The height of the text, as a multiple of the font size.\n+  final double? lineHeight;",
        "comment_created_at": "2025-08-14T16:32:45+00:00",
        "comment_author": "chunhtai",
        "comment_body": "Do we need to support other type of unit? If so, can a double support both unitless and `px` ?",
        "pr_file_module": null
      },
      {
        "comment_id": "2279423923",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/ui/window.dart",
        "discussion_id": "2261664457",
        "commented_code": "@@ -913,6 +913,47 @@ class SingletonFlutterWindow extends FlutterView {\n   void setIsolateDebugName(String name) => PlatformDispatcher.instance.setIsolateDebugName(name);\n }\n \n+/// The system-reported typography settings if any.\n+//\n+// When changes are made to this class, the equivalent APIs in each of the\n+// embedders *must* be updated.\n+final class TypographySettings {\n+  /// Creates a new [TypographySettings].\n+  const TypographySettings({\n+    this.lineHeight,\n+    this.letterSpacing,\n+    this.wordSpacing,\n+    this.paragraphSpacing,\n+  });\n+\n+  /// The height of the text, as a multiple of the font size.\n+  final double? lineHeight;",
        "comment_created_at": "2025-08-15T16:22:46+00:00",
        "comment_author": "mdebbar",
        "comment_body": "IMO it doesn't make sense to set line height to an absolute number for a11y purposes. Percentage makes sense but it's basically the same as unitless, i.e. `150% == 1.5`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2308288631",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172915,
        "pr_file": "engine/src/flutter/lib/ui/window.dart",
        "discussion_id": "2261664457",
        "commented_code": "@@ -913,6 +913,47 @@ class SingletonFlutterWindow extends FlutterView {\n   void setIsolateDebugName(String name) => PlatformDispatcher.instance.setIsolateDebugName(name);\n }\n \n+/// The system-reported typography settings if any.\n+//\n+// When changes are made to this class, the equivalent APIs in each of the\n+// embedders *must* be updated.\n+final class TypographySettings {\n+  /// Creates a new [TypographySettings].\n+  const TypographySettings({\n+    this.lineHeight,\n+    this.letterSpacing,\n+    this.wordSpacing,\n+    this.paragraphSpacing,\n+  });\n+\n+  /// The height of the text, as a multiple of the font size.\n+  final double? lineHeight;",
        "comment_created_at": "2025-08-28T18:59:07+00:00",
        "comment_author": "Renzo-Olivares",
        "comment_body": "I think double can support unitless and `px`, from what I understand and my observations `getComputedStyle` will return `px` values, for `word-spacing`, `letter-spacing`, and `margin-bottom` we can use these 1:1 for their framework counter parts `TextStyle.wordSpacing`, `TextStyle.letterSpacing`, and `Padding`. For `line-height` we can divide it by the font size and get the `lineHeightFactor` which would be 1:1 with the frameworks `TextStyle.height`. So `lineHeight` would be a factor of `fontSize`, similar to the frameworks representation.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2316847985",
    "pr_number": 174735,
    "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
    "created_at": "2025-09-02T18:27:25+00:00",
    "commented_code": "FML_DCHECK(trigs.size() >= 2u);\n \n-      // We use all but the first entry in trigs for each corner.\n-      auto vertex_count = trigs.size() - 1;\n-      // Every other point has a center vertex added.\n-      vertex_count = vertex_count + (vertex_count >> 1);\n-      // The loop also adds 3 points of its own.\n-      vertex_count += 3;\n-      // We do that for each of the 4 corners.\n-      vertex_count = vertex_count * 4;\n-      // We then add 2 more points at the end to close the last edge.\n-      vertex_count += 2;\n+      auto vertex_count = trigs.size() * 4;\n+      if (!interior_filled) {\n+        // If there is a hole in the interior (as with most stroked rects\n+        // unless the stroke width is really really wide) then we need\n+        // to perform some surgery to generate the hollowed-out interior.\n+        vertex_count += 12;\n+      }\n \n       return GeometryResult{\n           .type = PrimitiveType::kTriangleStrip,\n           .vertex_buffer =\n               {\n                   .vertex_buffer = data_host_buffer.Emplace(\n                       vertex_count * sizeof(Point), alignof(Point),\n-                      [hsw = half_stroke_width, &rect, vertex_count,\n-                       &trigs](uint8_t* buffer) {\n+                      [hsw = half_stroke_width, &rect, vertex_count, &trigs,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2316847985",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316847985",
        "commented_code": "@@ -80,46 +83,117 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n \n       FML_DCHECK(trigs.size() >= 2u);\n \n-      // We use all but the first entry in trigs for each corner.\n-      auto vertex_count = trigs.size() - 1;\n-      // Every other point has a center vertex added.\n-      vertex_count = vertex_count + (vertex_count >> 1);\n-      // The loop also adds 3 points of its own.\n-      vertex_count += 3;\n-      // We do that for each of the 4 corners.\n-      vertex_count = vertex_count * 4;\n-      // We then add 2 more points at the end to close the last edge.\n-      vertex_count += 2;\n+      auto vertex_count = trigs.size() * 4;\n+      if (!interior_filled) {\n+        // If there is a hole in the interior (as with most stroked rects\n+        // unless the stroke width is really really wide) then we need\n+        // to perform some surgery to generate the hollowed-out interior.\n+        vertex_count += 12;\n+      }\n \n       return GeometryResult{\n           .type = PrimitiveType::kTriangleStrip,\n           .vertex_buffer =\n               {\n                   .vertex_buffer = data_host_buffer.Emplace(\n                       vertex_count * sizeof(Point), alignof(Point),\n-                      [hsw = half_stroke_width, &rect, vertex_count,\n-                       &trigs](uint8_t* buffer) {\n+                      [hsw = half_stroke_width, &rect, vertex_count, &trigs,",
        "comment_created_at": "2025-09-02T18:27:25+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "No abbreviations (\"hsw\")\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules",
        "pr_file_module": null
      },
      {
        "comment_id": "2316858712",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316847985",
        "commented_code": "@@ -80,46 +83,117 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n \n       FML_DCHECK(trigs.size() >= 2u);\n \n-      // We use all but the first entry in trigs for each corner.\n-      auto vertex_count = trigs.size() - 1;\n-      // Every other point has a center vertex added.\n-      vertex_count = vertex_count + (vertex_count >> 1);\n-      // The loop also adds 3 points of its own.\n-      vertex_count += 3;\n-      // We do that for each of the 4 corners.\n-      vertex_count = vertex_count * 4;\n-      // We then add 2 more points at the end to close the last edge.\n-      vertex_count += 2;\n+      auto vertex_count = trigs.size() * 4;\n+      if (!interior_filled) {\n+        // If there is a hole in the interior (as with most stroked rects\n+        // unless the stroke width is really really wide) then we need\n+        // to perform some surgery to generate the hollowed-out interior.\n+        vertex_count += 12;\n+      }\n \n       return GeometryResult{\n           .type = PrimitiveType::kTriangleStrip,\n           .vertex_buffer =\n               {\n                   .vertex_buffer = data_host_buffer.Emplace(\n                       vertex_count * sizeof(Point), alignof(Point),\n-                      [hsw = half_stroke_width, &rect, vertex_count,\n-                       &trigs](uint8_t* buffer) {\n+                      [hsw = half_stroke_width, &rect, vertex_count, &trigs,",
        "comment_created_at": "2025-09-02T18:32:39+00:00",
        "comment_author": "flar",
        "comment_body": "Not going to change this. The following code would become unreadable and unmaintainable.",
        "pr_file_module": null
      },
      {
        "comment_id": "2316871615",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316847985",
        "commented_code": "@@ -80,46 +83,117 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n \n       FML_DCHECK(trigs.size() >= 2u);\n \n-      // We use all but the first entry in trigs for each corner.\n-      auto vertex_count = trigs.size() - 1;\n-      // Every other point has a center vertex added.\n-      vertex_count = vertex_count + (vertex_count >> 1);\n-      // The loop also adds 3 points of its own.\n-      vertex_count += 3;\n-      // We do that for each of the 4 corners.\n-      vertex_count = vertex_count * 4;\n-      // We then add 2 more points at the end to close the last edge.\n-      vertex_count += 2;\n+      auto vertex_count = trigs.size() * 4;\n+      if (!interior_filled) {\n+        // If there is a hole in the interior (as with most stroked rects\n+        // unless the stroke width is really really wide) then we need\n+        // to perform some surgery to generate the hollowed-out interior.\n+        vertex_count += 12;\n+      }\n \n       return GeometryResult{\n           .type = PrimitiveType::kTriangleStrip,\n           .vertex_buffer =\n               {\n                   .vertex_buffer = data_host_buffer.Emplace(\n                       vertex_count * sizeof(Point), alignof(Point),\n-                      [hsw = half_stroke_width, &rect, vertex_count,\n-                       &trigs](uint8_t* buffer) {\n+                      [hsw = half_stroke_width, &rect, vertex_count, &trigs,",
        "comment_created_at": "2025-09-02T18:38:44+00:00",
        "comment_author": "flar",
        "comment_body": "`However, a name should not distract the reader by repeating information that's present in the immediate context. Generally, this means that descriptiveness should be proportional to the name's scope of visibility.`\r\n\r\nhsw has a short scope of visibility and is defined in the calls of each of these lambdas. It also keeps the coordinate equations well-aligned and balanced.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2316853239",
    "pr_number": 174735,
    "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
    "created_at": "2025-09-02T18:30:03+00:00",
    "commented_code": "Scalar right = rect.GetRight();\n                         Scalar bottom = rect.GetBottom();\n                         auto vertices = reinterpret_cast<Point*>(buffer);\n-                        vertices[0] = Point(left, top - hsw);\n-                        vertices[1] = Point(left, top + hsw);\n-                        vertices[2] = Point(right, top - hsw);\n-                        vertices[3] = Point(right, top + hsw);\n-                        vertices[4] = Point(right + hsw, top);\n-                        vertices[5] = Point(right - hsw, top);\n-                        vertices[6] = Point(right + hsw, bottom);\n-                        vertices[7] = Point(right - hsw, bottom);\n-                        vertices[8] = Point(right, bottom + hsw);\n-                        vertices[9] = Point(right, bottom - hsw);\n-                        vertices[10] = Point(left, bottom + hsw);\n-                        vertices[11] = Point(left, bottom - hsw);\n-                        vertices[12] = Point(left - hsw, bottom);\n-                        vertices[13] = Point(left + hsw, bottom);\n-                        vertices[14] = Point(left - hsw, top);\n-                        vertices[15] = Point(left + hsw, top);\n-                        vertices[16] = Point(left, top - hsw);\n+                        vertices[0] = Point(left - hsw, top);\n+                        vertices[1] = Point(left + hsw, top + hsw);\n+                        vertices[2] = Point(left, top - hsw);\n+                        vertices[3] = Point(right - hsw, top + hsw);\n+                        vertices[4] = Point(right, top - hsw);\n+                        vertices[5] = Point(right - hsw, top + hsw);\n+                        vertices[6] = Point(right + hsw, top);\n+                        vertices[7] = Point(right - hsw, bottom - hsw);\n+                        vertices[8] = Point(right + hsw, bottom);\n+                        vertices[9] = Point(right - hsw, bottom - hsw);\n+                        vertices[10] = Point(right, bottom + hsw);\n+                        vertices[11] = Point(left + hsw, bottom - hsw);\n+                        vertices[12] = Point(left, bottom + hsw);\n+                        vertices[13] = Point(left + hsw, bottom - hsw);\n+                        vertices[14] = Point(left - hsw, bottom);\n+                        vertices[15] = Point(left + hsw, top + hsw);\n+                        vertices[16] = Point(left - hsw, top);\n                       }),\n                   .vertex_count = 17u,\n                   .index_type = IndexType::kNone,\n               },\n           .transform = entity.GetShaderTransform(pass),\n+          .mode = GeometryResult::Mode::kNormal,\n       };\n     }\n \n     case Join::kMiter: {\n+      if (interior_filled) {\n+        return GeometryResult{\n+            .type = PrimitiveType::kTriangleStrip,\n+            .vertex_buffer =\n+                {\n+                    .vertex_buffer = data_host_buffer.Emplace(\n+                        4 * sizeof(Point), alignof(Point),\n+                        [hsw = half_stroke_width, &rect](uint8_t* buffer) {\n+                          Scalar left = rect.GetLeft();\n+                          Scalar top = rect.GetTop();\n+                          Scalar right = rect.GetRight();\n+                          Scalar bottom = rect.GetBottom();\n+                          auto vertices = reinterpret_cast<Point*>(buffer);\n+                          // Zig-zag pattern: UL, UR, LL, LR",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2316853239",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316853239",
        "commented_code": "@@ -144,32 +248,59 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n                         Scalar right = rect.GetRight();\n                         Scalar bottom = rect.GetBottom();\n                         auto vertices = reinterpret_cast<Point*>(buffer);\n-                        vertices[0] = Point(left, top - hsw);\n-                        vertices[1] = Point(left, top + hsw);\n-                        vertices[2] = Point(right, top - hsw);\n-                        vertices[3] = Point(right, top + hsw);\n-                        vertices[4] = Point(right + hsw, top);\n-                        vertices[5] = Point(right - hsw, top);\n-                        vertices[6] = Point(right + hsw, bottom);\n-                        vertices[7] = Point(right - hsw, bottom);\n-                        vertices[8] = Point(right, bottom + hsw);\n-                        vertices[9] = Point(right, bottom - hsw);\n-                        vertices[10] = Point(left, bottom + hsw);\n-                        vertices[11] = Point(left, bottom - hsw);\n-                        vertices[12] = Point(left - hsw, bottom);\n-                        vertices[13] = Point(left + hsw, bottom);\n-                        vertices[14] = Point(left - hsw, top);\n-                        vertices[15] = Point(left + hsw, top);\n-                        vertices[16] = Point(left, top - hsw);\n+                        vertices[0] = Point(left - hsw, top);\n+                        vertices[1] = Point(left + hsw, top + hsw);\n+                        vertices[2] = Point(left, top - hsw);\n+                        vertices[3] = Point(right - hsw, top + hsw);\n+                        vertices[4] = Point(right, top - hsw);\n+                        vertices[5] = Point(right - hsw, top + hsw);\n+                        vertices[6] = Point(right + hsw, top);\n+                        vertices[7] = Point(right - hsw, bottom - hsw);\n+                        vertices[8] = Point(right + hsw, bottom);\n+                        vertices[9] = Point(right - hsw, bottom - hsw);\n+                        vertices[10] = Point(right, bottom + hsw);\n+                        vertices[11] = Point(left + hsw, bottom - hsw);\n+                        vertices[12] = Point(left, bottom + hsw);\n+                        vertices[13] = Point(left + hsw, bottom - hsw);\n+                        vertices[14] = Point(left - hsw, bottom);\n+                        vertices[15] = Point(left + hsw, top + hsw);\n+                        vertices[16] = Point(left - hsw, top);\n                       }),\n                   .vertex_count = 17u,\n                   .index_type = IndexType::kNone,\n               },\n           .transform = entity.GetShaderTransform(pass),\n+          .mode = GeometryResult::Mode::kNormal,\n       };\n     }\n \n     case Join::kMiter: {\n+      if (interior_filled) {\n+        return GeometryResult{\n+            .type = PrimitiveType::kTriangleStrip,\n+            .vertex_buffer =\n+                {\n+                    .vertex_buffer = data_host_buffer.Emplace(\n+                        4 * sizeof(Point), alignof(Point),\n+                        [hsw = half_stroke_width, &rect](uint8_t* buffer) {\n+                          Scalar left = rect.GetLeft();\n+                          Scalar top = rect.GetTop();\n+                          Scalar right = rect.GetRight();\n+                          Scalar bottom = rect.GetBottom();\n+                          auto vertices = reinterpret_cast<Point*>(buffer);\n+                          // Zig-zag pattern: UL, UR, LL, LR",
        "comment_created_at": "2025-09-02T18:30:03+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "Upper-left, upper-right, lower-left, lower-right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2316860284",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316853239",
        "commented_code": "@@ -144,32 +248,59 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n                         Scalar right = rect.GetRight();\n                         Scalar bottom = rect.GetBottom();\n                         auto vertices = reinterpret_cast<Point*>(buffer);\n-                        vertices[0] = Point(left, top - hsw);\n-                        vertices[1] = Point(left, top + hsw);\n-                        vertices[2] = Point(right, top - hsw);\n-                        vertices[3] = Point(right, top + hsw);\n-                        vertices[4] = Point(right + hsw, top);\n-                        vertices[5] = Point(right - hsw, top);\n-                        vertices[6] = Point(right + hsw, bottom);\n-                        vertices[7] = Point(right - hsw, bottom);\n-                        vertices[8] = Point(right, bottom + hsw);\n-                        vertices[9] = Point(right, bottom - hsw);\n-                        vertices[10] = Point(left, bottom + hsw);\n-                        vertices[11] = Point(left, bottom - hsw);\n-                        vertices[12] = Point(left - hsw, bottom);\n-                        vertices[13] = Point(left + hsw, bottom);\n-                        vertices[14] = Point(left - hsw, top);\n-                        vertices[15] = Point(left + hsw, top);\n-                        vertices[16] = Point(left, top - hsw);\n+                        vertices[0] = Point(left - hsw, top);\n+                        vertices[1] = Point(left + hsw, top + hsw);\n+                        vertices[2] = Point(left, top - hsw);\n+                        vertices[3] = Point(right - hsw, top + hsw);\n+                        vertices[4] = Point(right, top - hsw);\n+                        vertices[5] = Point(right - hsw, top + hsw);\n+                        vertices[6] = Point(right + hsw, top);\n+                        vertices[7] = Point(right - hsw, bottom - hsw);\n+                        vertices[8] = Point(right + hsw, bottom);\n+                        vertices[9] = Point(right - hsw, bottom - hsw);\n+                        vertices[10] = Point(right, bottom + hsw);\n+                        vertices[11] = Point(left + hsw, bottom - hsw);\n+                        vertices[12] = Point(left, bottom + hsw);\n+                        vertices[13] = Point(left + hsw, bottom - hsw);\n+                        vertices[14] = Point(left - hsw, bottom);\n+                        vertices[15] = Point(left + hsw, top + hsw);\n+                        vertices[16] = Point(left - hsw, top);\n                       }),\n                   .vertex_count = 17u,\n                   .index_type = IndexType::kNone,\n               },\n           .transform = entity.GetShaderTransform(pass),\n+          .mode = GeometryResult::Mode::kNormal,\n       };\n     }\n \n     case Join::kMiter: {\n+      if (interior_filled) {\n+        return GeometryResult{\n+            .type = PrimitiveType::kTriangleStrip,\n+            .vertex_buffer =\n+                {\n+                    .vertex_buffer = data_host_buffer.Emplace(\n+                        4 * sizeof(Point), alignof(Point),\n+                        [hsw = half_stroke_width, &rect](uint8_t* buffer) {\n+                          Scalar left = rect.GetLeft();\n+                          Scalar top = rect.GetTop();\n+                          Scalar right = rect.GetRight();\n+                          Scalar bottom = rect.GetBottom();\n+                          auto vertices = reinterpret_cast<Point*>(buffer);\n+                          // Zig-zag pattern: UL, UR, LL, LR",
        "comment_created_at": "2025-09-02T18:33:23+00:00",
        "comment_author": "flar",
        "comment_body": "Yes.",
        "pr_file_module": null
      },
      {
        "comment_id": "2316996872",
        "repo_full_name": "flutter/flutter",
        "pr_number": 174735,
        "pr_file": "engine/src/flutter/impeller/entity/geometry/rect_geometry.cc",
        "discussion_id": "2316853239",
        "commented_code": "@@ -144,32 +248,59 @@ GeometryResult StrokeRectGeometry::GetPositionBuffer(\n                         Scalar right = rect.GetRight();\n                         Scalar bottom = rect.GetBottom();\n                         auto vertices = reinterpret_cast<Point*>(buffer);\n-                        vertices[0] = Point(left, top - hsw);\n-                        vertices[1] = Point(left, top + hsw);\n-                        vertices[2] = Point(right, top - hsw);\n-                        vertices[3] = Point(right, top + hsw);\n-                        vertices[4] = Point(right + hsw, top);\n-                        vertices[5] = Point(right - hsw, top);\n-                        vertices[6] = Point(right + hsw, bottom);\n-                        vertices[7] = Point(right - hsw, bottom);\n-                        vertices[8] = Point(right, bottom + hsw);\n-                        vertices[9] = Point(right, bottom - hsw);\n-                        vertices[10] = Point(left, bottom + hsw);\n-                        vertices[11] = Point(left, bottom - hsw);\n-                        vertices[12] = Point(left - hsw, bottom);\n-                        vertices[13] = Point(left + hsw, bottom);\n-                        vertices[14] = Point(left - hsw, top);\n-                        vertices[15] = Point(left + hsw, top);\n-                        vertices[16] = Point(left, top - hsw);\n+                        vertices[0] = Point(left - hsw, top);\n+                        vertices[1] = Point(left + hsw, top + hsw);\n+                        vertices[2] = Point(left, top - hsw);\n+                        vertices[3] = Point(right - hsw, top + hsw);\n+                        vertices[4] = Point(right, top - hsw);\n+                        vertices[5] = Point(right - hsw, top + hsw);\n+                        vertices[6] = Point(right + hsw, top);\n+                        vertices[7] = Point(right - hsw, bottom - hsw);\n+                        vertices[8] = Point(right + hsw, bottom);\n+                        vertices[9] = Point(right - hsw, bottom - hsw);\n+                        vertices[10] = Point(right, bottom + hsw);\n+                        vertices[11] = Point(left + hsw, bottom - hsw);\n+                        vertices[12] = Point(left, bottom + hsw);\n+                        vertices[13] = Point(left + hsw, bottom - hsw);\n+                        vertices[14] = Point(left - hsw, bottom);\n+                        vertices[15] = Point(left + hsw, top + hsw);\n+                        vertices[16] = Point(left - hsw, top);\n                       }),\n                   .vertex_count = 17u,\n                   .index_type = IndexType::kNone,\n               },\n           .transform = entity.GetShaderTransform(pass),\n+          .mode = GeometryResult::Mode::kNormal,\n       };\n     }\n \n     case Join::kMiter: {\n+      if (interior_filled) {\n+        return GeometryResult{\n+            .type = PrimitiveType::kTriangleStrip,\n+            .vertex_buffer =\n+                {\n+                    .vertex_buffer = data_host_buffer.Emplace(\n+                        4 * sizeof(Point), alignof(Point),\n+                        [hsw = half_stroke_width, &rect](uint8_t* buffer) {\n+                          Scalar left = rect.GetLeft();\n+                          Scalar top = rect.GetTop();\n+                          Scalar right = rect.GetRight();\n+                          Scalar bottom = rect.GetBottom();\n+                          auto vertices = reinterpret_cast<Point*>(buffer);\n+                          // Zig-zag pattern: UL, UR, LL, LR",
        "comment_created_at": "2025-09-02T19:40:57+00:00",
        "comment_author": "gaaclarke",
        "comment_body": "Please, update the comment to avoid these abbreviations.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2308541954",
    "pr_number": 171334,
    "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
    "created_at": "2025-08-28T21:03:25+00:00",
    "commented_code": ");\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2308541954",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-28T21:03:25+00:00",
        "comment_author": "victorsanni",
        "comment_body": "Is there a better name for this function? The current name doesn't help me understand what the function tries to do.",
        "pr_file_module": null
      },
      {
        "comment_id": "2308542992",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-28T21:03:52+00:00",
        "comment_author": "victorsanni",
        "comment_body": "and possibly add a comment as well",
        "pr_file_module": null
      },
      {
        "comment_id": "2308571331",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-28T21:15:21+00:00",
        "comment_author": "koukibadr",
        "comment_body": "Yes a comment for sure it's important to explain the function\r\nfor the name maybe `checkOnDateSelection`",
        "pr_file_module": null
      },
      {
        "comment_id": "2311531213",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-29T22:45:32+00:00",
        "comment_author": "victorsanni",
        "comment_body": "The check part is not the most important part of the function, the scrolling part is. Basically the function scrolls  the picker to a target date if some condition is met? So the name should be something like `_scrollOn...` or `_scrollTo...`, or even `_scrollIf...`",
        "pr_file_module": null
      },
      {
        "comment_id": "2311905114",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-30T11:16:40+00:00",
        "comment_author": "koukibadr",
        "comment_body": "Yes make sense",
        "pr_file_module": null
      },
      {
        "comment_id": "2312386037",
        "repo_full_name": "flutter/flutter",
        "pr_number": 171334,
        "pr_file": "packages/flutter/lib/src/cupertino/date_picker.dart",
        "discussion_id": "2308541954",
        "commented_code": "@@ -1104,6 +1124,23 @@ class _CupertinoDatePickerDateTimeState extends State<CupertinoDatePicker> {\n     );\n   }\n \n+  void _checkOnCustomDaysDisplay() {",
        "comment_created_at": "2025-08-31T10:05:27+00:00",
        "comment_author": "koukibadr",
        "comment_body": "for the function I've renamed it to `_scrollToFirstSelectableDate` \r\nregarding `minCheck` I found that is unnecessary in this case when scrolling to the first valid date because the scroll is already using the next index so it's removed now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2289610811",
    "pr_number": 173610,
    "pr_file": "engine/src/flutter/shell/common/shell.cc",
    "created_at": "2025-08-21T00:54:41+00:00",
    "commented_code": "return vm_->GetConcurrentWorkerTaskRunner();\n }\n \n-DlISize Shell::ExpectedFrameSize(int64_t view_id) {\n-  auto found = expected_frame_sizes_.find(view_id);\n-  if (found == expected_frame_sizes_.end()) {\n-    return DlISize();\n+BoxConstraints Shell::ExpectedFrameSize(int64_t view_id) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2289610811",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173610,
        "pr_file": "engine/src/flutter/shell/common/shell.cc",
        "discussion_id": "2289610811",
        "commented_code": "@@ -2361,12 +2415,39 @@ Shell::GetConcurrentWorkerTaskRunner() const {\n   return vm_->GetConcurrentWorkerTaskRunner();\n }\n \n-DlISize Shell::ExpectedFrameSize(int64_t view_id) {\n-  auto found = expected_frame_sizes_.find(view_id);\n-  if (found == expected_frame_sizes_.end()) {\n-    return DlISize();\n+BoxConstraints Shell::ExpectedFrameSize(int64_t view_id) {",
        "comment_created_at": "2025-08-21T00:54:41+00:00",
        "comment_author": "vashworth",
        "comment_body": "Rename?\r\n```suggestion\r\nBoxConstraints Shell::ExpectedFrameConstraints(int64_t view_id) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2261096316",
    "pr_number": 173267,
    "pr_file": "packages/flutter/lib/src/material/data_table.dart",
    "created_at": "2025-08-07T18:15:41+00:00",
    "commented_code": "}\n \n class _SortArrow extends StatefulWidget {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2261096316",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173267,
        "pr_file": "packages/flutter/lib/src/material/data_table.dart",
        "discussion_id": "2261096316",
        "commented_code": "@@ -1318,14 +1327,16 @@ class TableRowInkWell extends InkResponse {\n }\n \n class _SortArrow extends StatefulWidget {",
        "comment_created_at": "2025-08-07T18:15:41+00:00",
        "comment_author": "Piinks",
        "comment_body": "This lass name does not quite fit with this change, `_SortIcon`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2261918079",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173267,
        "pr_file": "packages/flutter/lib/src/material/data_table.dart",
        "discussion_id": "2261096316",
        "commented_code": "@@ -1318,14 +1327,16 @@ class TableRowInkWell extends InkResponse {\n }\n \n class _SortArrow extends StatefulWidget {",
        "comment_created_at": "2025-08-08T04:41:46+00:00",
        "comment_author": "thejquest",
        "comment_body": "I opted for a **Widget** parameter instead of an **Icon** to provide greater flexibility. This allows the user to pass not only icons but also other visual elements, such as images, SVGs, or JPEGs, depending on their requirements.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2248941900",
    "pr_number": 173005,
    "pr_file": "engine/src/flutter/lib/web_ui/lib/semantics.dart",
    "created_at": "2025-08-01T22:09:36+00:00",
    "commented_code": "required int platformViewId,\n     required int scrollChildren,\n     required int scrollIndex,\n+    required int? overlayPortalParent,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2248941900",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173005,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/semantics.dart",
        "discussion_id": "2248941900",
        "commented_code": "@@ -683,6 +683,7 @@ class SemanticsUpdateBuilder {\n     required int platformViewId,\n     required int scrollChildren,\n     required int scrollIndex,\n+    required int? overlayPortalParent,",
        "comment_created_at": "2025-08-01T22:09:36+00:00",
        "comment_author": "chunhtai",
        "comment_body": "this needs a better name. something like traversalOwner. overlay is a widget layer concept",
        "pr_file_module": null
      },
      {
        "comment_id": "2302114844",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173005,
        "pr_file": "engine/src/flutter/lib/web_ui/lib/semantics.dart",
        "discussion_id": "2248941900",
        "commented_code": "@@ -683,6 +683,7 @@ class SemanticsUpdateBuilder {\n     required int platformViewId,\n     required int scrollChildren,\n     required int scrollIndex,\n+    required int? overlayPortalParent,",
        "comment_created_at": "2025-08-26T20:49:34+00:00",
        "comment_author": "QuncCccccc",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2274374312",
    "pr_number": 173715,
    "pr_file": "packages/flutter/lib/src/widgets/_window.dart",
    "created_at": "2025-08-13T19:09:06+00:00",
    "commented_code": "@internal\n   @override\n   Widget build(BuildContext context) {\n-    return WindowScope(\n-      controller: controller,\n-      child: View(view: controller.rootView, child: child),\n+    return ListenableBuilder(\n+      listenable: controller,\n+      builder: (BuildContext context, Widget? _) => WindowScope(",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2274374312",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173715,
        "pr_file": "packages/flutter/lib/src/widgets/_window.dart",
        "discussion_id": "2274374312",
        "commented_code": "@@ -507,9 +507,12 @@ class RegularWindow extends StatelessWidget {\n   @internal\n   @override\n   Widget build(BuildContext context) {\n-    return WindowScope(\n-      controller: controller,\n-      child: View(view: controller.rootView, child: child),\n+    return ListenableBuilder(\n+      listenable: controller,\n+      builder: (BuildContext context, Widget? _) => WindowScope(",
        "comment_created_at": "2025-08-13T19:09:06+00:00",
        "comment_author": "justinmc",
        "comment_body": "Avoid anonymous parameter names per the styleguide: https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#avoid-anonymous-parameter-names",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2271511437",
    "pr_number": 173626,
    "pr_file": "packages/flutter/test/widgets/system_context_menu_test.dart",
    "created_at": "2025-08-12T23:00:08+00:00",
    "commented_code": "},\n     skip: kIsWeb, // [intended] SystemContextMenu is not supported on web.\n   );\n+\n+  testWidgets('Default iOS SystemContextMenu includes Share for non-empty selection',\n+      (WidgetTester tester) async {\n+    final controller = TextEditingController(text: 'Hello world');\n+\n+    // Force iOS + tell Flutter we support the iOS system context menu path.\n+    debugDefaultTargetPlatformOverride = TargetPlatform.iOS;\n+\n+    await tester.pumpWidget(\n+      MediaQuery(\n+        data: const MediaQueryData(supportsShowingSystemContextMenu: true),\n+        child: const Directionality(\n+          textDirection: TextDirection.ltr,\n+          child: Material(\n+            child: _HostEditable(), // minimal EditableText wrapper\n+          ),\n+        ),\n+      ),\n+    );\n+\n+    // Setup selection so sharing is meaningful.\n+    final state = tester.state<EditableTextState>(find.byType(EditableText));\n+    state.widget.controller.text = controller.text;\n+    state.widget.controller.selection =\n+        const TextSelection(baseOffset: 0, extentOffset: 5); // \"Hello\"\n+    state.widget.focusNode.requestFocus();\n+    await tester.pump();\n+\n+    // Get iOS SYSTEM menu defaults and assert Share is present.\n+    final items = SystemContextMenu.getDefaultItems(state);\n+    expect(items.any((e) => e is IOSSystemContextMenuItemShare), isTrue);\n+\n+    debugDefaultTargetPlatformOverride = null;\n+  });\n+}\n+\n+class _HostEditable extends StatelessWidget {\n+  const _HostEditable();\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return EditableText(\n+      controller: TextEditingController(),\n+      focusNode: FocusNode(),\n+      style: const TextStyle(fontSize: 14),\n+      cursorColor: Colors.blue,\n+      backgroundCursorColor: Colors.grey,\n+      // Use the system context menu pipeline on iOS.\n+      contextMenuBuilder: (BuildContext _, EditableTextState s) {",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2271511437",
        "repo_full_name": "flutter/flutter",
        "pr_number": 173626,
        "pr_file": "packages/flutter/test/widgets/system_context_menu_test.dart",
        "discussion_id": "2271511437",
        "commented_code": "@@ -895,4 +895,57 @@ void main() {\n     },\n     skip: kIsWeb, // [intended] SystemContextMenu is not supported on web.\n   );\n+\n+  testWidgets('Default iOS SystemContextMenu includes Share for non-empty selection',\n+      (WidgetTester tester) async {\n+    final controller = TextEditingController(text: 'Hello world');\n+\n+    // Force iOS + tell Flutter we support the iOS system context menu path.\n+    debugDefaultTargetPlatformOverride = TargetPlatform.iOS;\n+\n+    await tester.pumpWidget(\n+      MediaQuery(\n+        data: const MediaQueryData(supportsShowingSystemContextMenu: true),\n+        child: const Directionality(\n+          textDirection: TextDirection.ltr,\n+          child: Material(\n+            child: _HostEditable(), // minimal EditableText wrapper\n+          ),\n+        ),\n+      ),\n+    );\n+\n+    // Setup selection so sharing is meaningful.\n+    final state = tester.state<EditableTextState>(find.byType(EditableText));\n+    state.widget.controller.text = controller.text;\n+    state.widget.controller.selection =\n+        const TextSelection(baseOffset: 0, extentOffset: 5); // \"Hello\"\n+    state.widget.focusNode.requestFocus();\n+    await tester.pump();\n+\n+    // Get iOS SYSTEM menu defaults and assert Share is present.\n+    final items = SystemContextMenu.getDefaultItems(state);\n+    expect(items.any((e) => e is IOSSystemContextMenuItemShare), isTrue);\n+\n+    debugDefaultTargetPlatformOverride = null;\n+  });\n+}\n+\n+class _HostEditable extends StatelessWidget {\n+  const _HostEditable();\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return EditableText(\n+      controller: TextEditingController(),\n+      focusNode: FocusNode(),\n+      style: const TextStyle(fontSize: 14),\n+      cursorColor: Colors.blue,\n+      backgroundCursorColor: Colors.grey,\n+      // Use the system context menu pipeline on iOS.\n+      contextMenuBuilder: (BuildContext _, EditableTextState s) {",
        "comment_created_at": "2025-08-12T23:00:08+00:00",
        "comment_author": "justinmc",
        "comment_body": "Don't use underscore for parameter names and don't abbreviate (`s`) per the [styleguide](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2289444669",
    "pr_number": 172314,
    "pr_file": "engine/src/flutter/impeller/display_list/dl_dispatcher.cc",
    "created_at": "2025-08-20T22:34:34+00:00",
    "commented_code": "}\n \n // |flutter::DlOpReceiver|\n-void DlDispatcherBase::drawTextBlob(const sk_sp<SkTextBlob> blob,\n-                                    DlScalar x,\n-                                    DlScalar y) {\n-  // When running with Impeller enabled Skia text blobs are converted to\n-  // Impeller text frames in paragraph_skia.cc\n-  UNIMPLEMENTED;\n-}\n-\n-// |flutter::DlOpReceiver|\n-void DlDispatcherBase::drawTextFrame(\n-    const std::shared_ptr<TextFrame>& text_frame,\n-    DlScalar x,\n-    DlScalar y) {\n+void DlDispatcherBase::drawText(const std::shared_ptr<flutter::DlText>& text,\n+                                DlScalar x,\n+                                DlScalar y) {\n   AUTO_DEPTH_WATCHER(1u);\n \n-  GetCanvas().DrawTextFrame(text_frame,             //\n+  auto textFrame = text->getTextFrame();",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2289444669",
        "repo_full_name": "flutter/flutter",
        "pr_number": 172314,
        "pr_file": "engine/src/flutter/impeller/display_list/dl_dispatcher.cc",
        "discussion_id": "2289444669",
        "commented_code": "@@ -853,22 +854,17 @@ void DlDispatcherBase::drawDisplayList(\n }\n \n // |flutter::DlOpReceiver|\n-void DlDispatcherBase::drawTextBlob(const sk_sp<SkTextBlob> blob,\n-                                    DlScalar x,\n-                                    DlScalar y) {\n-  // When running with Impeller enabled Skia text blobs are converted to\n-  // Impeller text frames in paragraph_skia.cc\n-  UNIMPLEMENTED;\n-}\n-\n-// |flutter::DlOpReceiver|\n-void DlDispatcherBase::drawTextFrame(\n-    const std::shared_ptr<TextFrame>& text_frame,\n-    DlScalar x,\n-    DlScalar y) {\n+void DlDispatcherBase::drawText(const std::shared_ptr<flutter::DlText>& text,\n+                                DlScalar x,\n+                                DlScalar y) {\n   AUTO_DEPTH_WATCHER(1u);\n \n-  GetCanvas().DrawTextFrame(text_frame,             //\n+  auto textFrame = text->getTextFrame();",
        "comment_created_at": "2025-08-20T22:34:34+00:00",
        "comment_author": "flar",
        "comment_body": "C++ style is camel case - text_frame?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243260591",
    "pr_number": 169720,
    "pr_file": "packages/flutter/lib/src/widgets/editable_text.dart",
    "created_at": "2025-07-30T16:30:11+00:00",
    "commented_code": "return true;\n   }\n \n+  // The time when the last call to [hideSystemToolbar] was made.\n+  Duration? _hideSystemToolbarLastTimestamp;\n+  static const Duration _systemToolbarToggleDebounceThreshold = Duration(milliseconds: 100);",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2243260591",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169720,
        "pr_file": "packages/flutter/lib/src/widgets/editable_text.dart",
        "discussion_id": "2243260591",
        "commented_code": "@@ -4979,6 +4979,17 @@ class EditableTextState extends State<EditableText>\n     return true;\n   }\n \n+  // The time when the last call to [hideSystemToolbar] was made.\n+  Duration? _hideSystemToolbarLastTimestamp;\n+  static const Duration _systemToolbarToggleDebounceThreshold = Duration(milliseconds: 100);",
        "comment_created_at": "2025-07-30T16:30:11+00:00",
        "comment_author": "justinmc",
        "comment_body": "Prefix this constant with \"k\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2243301936",
    "pr_number": 169720,
    "pr_file": "packages/flutter/lib/src/widgets/system_context_menu.dart",
    "created_at": "2025-07-30T16:44:50+00:00",
    "commented_code": "),\n       ),\n       items: items ?? getDefaultItems(editableTextState),\n-      onSystemHide: () => editableTextState.hideToolbar(false),\n+      onSystemHide: editableTextState.hideSystemToolbar,",
    "repo_full_name": "flutter/flutter",
    "discussion_comments": [
      {
        "comment_id": "2243301936",
        "repo_full_name": "flutter/flutter",
        "pr_number": 169720,
        "pr_file": "packages/flutter/lib/src/widgets/system_context_menu.dart",
        "discussion_id": "2243301936",
        "commented_code": "@@ -84,7 +84,7 @@ class SystemContextMenu extends StatefulWidget {\n         ),\n       ),\n       items: items ?? getDefaultItems(editableTextState),\n-      onSystemHide: () => editableTextState.hideToolbar(false),\n+      onSystemHide: editableTextState.hideSystemToolbar,",
        "comment_created_at": "2025-07-30T16:44:50+00:00",
        "comment_author": "justinmc",
        "comment_body": "Nit: I think hideSystemToolbar should be named something with \"handle\" in the name, like \"handleSystemHideToolbar\": https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#naming-rules-for-typedefs-and-function-variables",
        "pr_file_module": null
      }
    ]
  }
]