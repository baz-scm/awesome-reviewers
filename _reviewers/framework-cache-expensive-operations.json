[
  {
    "discussion_id": "2152151153",
    "pr_number": 56060,
    "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
    "created_at": "2025-06-17T12:34:12+00:00",
    "commented_code": "return $this;\n    }\n\n    /**\n     * Determine if the given model class is soft deletable.\n     */\n    public static function isSoftDeletable(): bool\n    {\n        return in_array(SoftDeletes::class, class_uses_recursive(static::class));\n    }\n\n    /**\n     * Determine if the given model class is prunable.\n     */\n    protected function isPrunable(): bool\n    {\n        return in_array(Prunable::class, class_uses_recursive(static::class)) || static::isMassPrunable();",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "2152151153",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "2152151153",
        "commented_code": "@@ -2513,6 +2513,30 @@ public function escapeWhenCastingToString($escape = true)\n         return $this;\n     }\n \n+    /**\n+     * Determine if the given model class is soft deletable.\n+     */\n+    public static function isSoftDeletable(): bool\n+    {\n+        return in_array(SoftDeletes::class, class_uses_recursive(static::class));\n+    }\n+\n+    /**\n+     * Determine if the given model class is prunable.\n+     */\n+    protected function isPrunable(): bool\n+    {\n+        return in_array(Prunable::class, class_uses_recursive(static::class)) || static::isMassPrunable();",
        "comment_created_at": "2025-06-17T12:34:12+00:00",
        "comment_author": "cosmastech",
        "comment_body": "**thought:** It would be great if there were a ClassUsesRecursive once helper that would store these values for the lifetime of a request.\r\n\r\nWritten out as you have here, we can see that we're going to loop through all the traits of the class and its parent-classes twice if the class is MassPrunable but not Prunable.",
        "pr_file_module": null
      },
      {
        "comment_id": "2152406875",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "2152151153",
        "commented_code": "@@ -2513,6 +2513,30 @@ public function escapeWhenCastingToString($escape = true)\n         return $this;\n     }\n \n+    /**\n+     * Determine if the given model class is soft deletable.\n+     */\n+    public static function isSoftDeletable(): bool\n+    {\n+        return in_array(SoftDeletes::class, class_uses_recursive(static::class));\n+    }\n+\n+    /**\n+     * Determine if the given model class is prunable.\n+     */\n+    protected function isPrunable(): bool\n+    {\n+        return in_array(Prunable::class, class_uses_recursive(static::class)) || static::isMassPrunable();",
        "comment_created_at": "2025-06-17T14:20:12+00:00",
        "comment_author": "shaedrich",
        "comment_body": "Good point 👍🏻 I had a similar idea—looks like there's an appetite for this 🚀",
        "pr_file_module": null
      },
      {
        "comment_id": "2157457993",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "2152151153",
        "commented_code": "@@ -2513,6 +2513,30 @@ public function escapeWhenCastingToString($escape = true)\n         return $this;\n     }\n \n+    /**\n+     * Determine if the given model class is soft deletable.\n+     */\n+    public static function isSoftDeletable(): bool\n+    {\n+        return in_array(SoftDeletes::class, class_uses_recursive(static::class));\n+    }\n+\n+    /**\n+     * Determine if the given model class is prunable.\n+     */\n+    protected function isPrunable(): bool\n+    {\n+        return in_array(Prunable::class, class_uses_recursive(static::class)) || static::isMassPrunable();",
        "comment_created_at": "2025-06-19T17:51:26+00:00",
        "comment_author": "fgaroby",
        "comment_body": "@cosmastech : [something like this](https://github.com/laravel/framework/pull/56079)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2157698190",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "2152151153",
        "commented_code": "@@ -2513,6 +2513,30 @@ public function escapeWhenCastingToString($escape = true)\n         return $this;\n     }\n \n+    /**\n+     * Determine if the given model class is soft deletable.\n+     */\n+    public static function isSoftDeletable(): bool\n+    {\n+        return in_array(SoftDeletes::class, class_uses_recursive(static::class));\n+    }\n+\n+    /**\n+     * Determine if the given model class is prunable.\n+     */\n+    protected function isPrunable(): bool\n+    {\n+        return in_array(Prunable::class, class_uses_recursive(static::class)) || static::isMassPrunable();",
        "comment_created_at": "2025-06-19T21:55:02+00:00",
        "comment_author": "cosmastech",
        "comment_body": "Yeah! Nice.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2152154653",
    "pr_number": 56060,
    "pr_file": "src/Illuminate/Database/Eloquent/MassPrunable.php",
    "created_at": "2025-06-17T12:35:55+00:00",
    "commented_code": "$total = 0;\n\n        $softDeletable = in_array(SoftDeletes::class, class_uses_recursive(get_class($this)));\n\n        do {\n            $total += $count = $softDeletable\n            $total += $count = static::isSoftDeletable()",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "2152154653",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/MassPrunable.php",
        "discussion_id": "2152154653",
        "commented_code": "@@ -23,10 +26,8 @@ public function pruneAll(int $chunkSize = 1000)\n \n         $total = 0;\n \n-        $softDeletable = in_array(SoftDeletes::class, class_uses_recursive(get_class($this)));\n-\n         do {\n-            $total += $count = $softDeletable\n+            $total += $count = static::isSoftDeletable()",
        "comment_created_at": "2025-06-17T12:35:55+00:00",
        "comment_author": "cosmastech",
        "comment_body": "**note:** This was explicitly moved outside of the loop so we wouldn't have to recursively scan the model again and again. https://github.com/laravel/framework/pull/55274",
        "pr_file_module": null
      },
      {
        "comment_id": "2152409906",
        "repo_full_name": "laravel/framework",
        "pr_number": 56060,
        "pr_file": "src/Illuminate/Database/Eloquent/MassPrunable.php",
        "discussion_id": "2152154653",
        "commented_code": "@@ -23,10 +26,8 @@ public function pruneAll(int $chunkSize = 1000)\n \n         $total = 0;\n \n-        $softDeletable = in_array(SoftDeletes::class, class_uses_recursive(get_class($this)));\n-\n         do {\n-            $total += $count = $softDeletable\n+            $total += $count = static::isSoftDeletable()",
        "comment_created_at": "2025-06-17T14:21:26+00:00",
        "comment_author": "shaedrich",
        "comment_body": "Thanks for the hint—I'll adjust that 👍🏻",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1938570236",
    "pr_number": 54442,
    "pr_file": "src/Illuminate/Bus/PendingBatch.php",
    "created_at": "2025-02-02T20:14:09+00:00",
    "commented_code": "return $batch;\n    }\n\n    private function checkJobIsBatchable(object|array $job): void\n    {\n        foreach (Arr::wrap($job) as $job) {\n            if ($job instanceof PendingBatch) {\n                $this->checkJobIsBatchable($job->jobs->all());\n\n                return;\n            }\n\n            if (! in_array(Batchable::class, class_uses_recursive($job))) {",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1938570236",
        "repo_full_name": "laravel/framework",
        "pr_number": 54442,
        "pr_file": "src/Illuminate/Bus/PendingBatch.php",
        "discussion_id": "1938570236",
        "commented_code": "@@ -414,4 +412,19 @@ protected function store($repository)\n \n         return $batch;\n     }\n+\n+    private function checkJobIsBatchable(object|array $job): void\n+    {\n+        foreach (Arr::wrap($job) as $job) {\n+            if ($job instanceof PendingBatch) {\n+                $this->checkJobIsBatchable($job->jobs->all());\n+\n+                return;\n+            }\n+\n+            if (! in_array(Batchable::class, class_uses_recursive($job))) {",
        "comment_created_at": "2025-02-02T20:14:09+00:00",
        "comment_author": "cosmastech",
        "comment_body": "I wonder if it wouldn't be useful to cache the job's class so you don't have to call class_uses_recursive for multiple instances of the same class.",
        "pr_file_module": null
      },
      {
        "comment_id": "1938615259",
        "repo_full_name": "laravel/framework",
        "pr_number": 54442,
        "pr_file": "src/Illuminate/Bus/PendingBatch.php",
        "discussion_id": "1938570236",
        "commented_code": "@@ -414,4 +412,19 @@ protected function store($repository)\n \n         return $batch;\n     }\n+\n+    private function checkJobIsBatchable(object|array $job): void\n+    {\n+        foreach (Arr::wrap($job) as $job) {\n+            if ($job instanceof PendingBatch) {\n+                $this->checkJobIsBatchable($job->jobs->all());\n+\n+                return;\n+            }\n+\n+            if (! in_array(Batchable::class, class_uses_recursive($job))) {",
        "comment_created_at": "2025-02-02T23:32:52+00:00",
        "comment_author": "shaedrich",
        "comment_body": "While it's not possible with `class_uses_recursive`, this could be taken one step further, by implementing something similar to `class_uses_recursive`: Caching all classes in the recursive chain 🤔 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1714821791",
    "pr_number": 52461,
    "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
    "created_at": "2024-08-13T07:39:12+00:00",
    "commented_code": "*/\n    public function toArray()\n    {\n        return array_merge($this->attributesToArray(), $this->relationsToArray());\n        return $this->once(\n            fn () => array_merge($this->attributesToArray(), $this->relationsToArray()),\n            $this->attributesToArray(),\n        );",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1714821791",
        "repo_full_name": "laravel/framework",
        "pr_number": 52461,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "1714821791",
        "commented_code": "@@ -1644,7 +1647,10 @@ public function callNamedScope($scope, array $parameters = [])\n      */\n     public function toArray()\n     {\n-        return array_merge($this->attributesToArray(), $this->relationsToArray());\n+        return $this->once(\n+            fn () => array_merge($this->attributesToArray(), $this->relationsToArray()),\n+            $this->attributesToArray(),\n+        );",
        "comment_created_at": "2024-08-13T07:39:12+00:00",
        "comment_author": "Tofandel",
        "comment_body": "```suggestion\r\n        $attributes = $this->attributesToArray();\r\n        return $this->once(\r\n            fn () => array_merge($attributes, $this->relationsToArray()),\r\n            $attributes,\r\n        );\r\n```\r\n\r\nThis kind of methods are a bit expensive so I would avoid calling it twice\r\n\r\nIdeally `default` could be a callback",
        "pr_file_module": null
      },
      {
        "comment_id": "1715004249",
        "repo_full_name": "laravel/framework",
        "pr_number": 52461,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "1714821791",
        "commented_code": "@@ -1644,7 +1647,10 @@ public function callNamedScope($scope, array $parameters = [])\n      */\n     public function toArray()\n     {\n-        return array_merge($this->attributesToArray(), $this->relationsToArray());\n+        return $this->once(\n+            fn () => array_merge($this->attributesToArray(), $this->relationsToArray()),\n+            $this->attributesToArray(),\n+        );",
        "comment_created_at": "2024-08-13T09:45:54+00:00",
        "comment_author": "samlev",
        "comment_body": "I've updated the default to accept a callback, and cache that value.\r\n\r\nYour suggested change wouldn't prevent `attributesToArray()` from being called on each recursive call to `toArray()` - it would just ignore the result on subsequent calls.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1669441618",
    "pr_number": 52012,
    "pr_file": "src/Illuminate/Collections/Collection.php",
    "created_at": "2024-07-08T23:32:53+00:00",
    "commented_code": "return new static(array_filter($this->items));\n    }\n\n    /**\n     * Run a map and filter over each of the items.\n     *\n     * @template TMapValue\n     *\n     * @param  callable(TValue, TKey): TMapValue  $callback\n     * @param  (callable(TValue, TKey): bool)|null  $reject\n     * @return static<TKey, TMapValue>\n     */\n    public function filterMap($callable, $filter = null)\n    {\n        $filter = $filter === null\n            ? fn ($value) => (bool) $value\n            : match ((new ReflectionFunction($filter))->getNumberOfParameters()) {",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1669441618",
        "repo_full_name": "laravel/framework",
        "pr_number": 52012,
        "pr_file": "src/Illuminate/Collections/Collection.php",
        "discussion_id": "1669441618",
        "commented_code": "@@ -372,6 +373,35 @@ public function filter(?callable $callback = null)\n         return new static(array_filter($this->items));\n     }\n \n+    /**\n+     * Run a map and filter over each of the items.\n+     *\n+     * @template TMapValue\n+     *\n+     * @param  callable(TValue, TKey): TMapValue  $callback\n+     * @param  (callable(TValue, TKey): bool)|null  $reject\n+     * @return static<TKey, TMapValue>\n+     */\n+    public function filterMap($callable, $filter = null)\n+    {\n+        $filter = $filter === null\n+            ? fn ($value) => (bool) $value\n+            : match ((new ReflectionFunction($filter))->getNumberOfParameters()) {",
        "comment_created_at": "2024-07-08T23:32:53+00:00",
        "comment_author": "Tofandel",
        "comment_body": "This reflection seems unnecessary; why not just use `$filter` as is?",
        "pr_file_module": null
      },
      {
        "comment_id": "1669518971",
        "repo_full_name": "laravel/framework",
        "pr_number": 52012,
        "pr_file": "src/Illuminate/Collections/Collection.php",
        "discussion_id": "1669441618",
        "commented_code": "@@ -372,6 +373,35 @@ public function filter(?callable $callback = null)\n         return new static(array_filter($this->items));\n     }\n \n+    /**\n+     * Run a map and filter over each of the items.\n+     *\n+     * @template TMapValue\n+     *\n+     * @param  callable(TValue, TKey): TMapValue  $callback\n+     * @param  (callable(TValue, TKey): bool)|null  $reject\n+     * @return static<TKey, TMapValue>\n+     */\n+    public function filterMap($callable, $filter = null)\n+    {\n+        $filter = $filter === null\n+            ? fn ($value) => (bool) $value\n+            : match ((new ReflectionFunction($filter))->getNumberOfParameters()) {",
        "comment_created_at": "2024-07-09T01:25:38+00:00",
        "comment_author": "timacdonald",
        "comment_body": "PHP's built-in methods throw an exception when you pass too many arguments to them.\r\n\r\nWe check the number of arguments here to ensure that we don't hit that exception if the function only accepts a single argument (as we pass the value and the key to the filter method).\r\n\r\nWe take a similar approach in the `Collection:map` and `Arr::map` functions:\r\n\r\nhttps://github.com/laravel/framework/blob/0e9053da9d709c544200260cc0be5e223ea8ff93/src/Illuminate/Collections/Arr.php#L600-L610\r\n\r\nHowever, I benchmarked this approach with my approach and found that using reflection was faster than allowing the exception to be thrown and the impact of using reflection is negligible.\r\n\r\nThe tests fail without this work.",
        "pr_file_module": null
      },
      {
        "comment_id": "1669955879",
        "repo_full_name": "laravel/framework",
        "pr_number": 52012,
        "pr_file": "src/Illuminate/Collections/Collection.php",
        "discussion_id": "1669441618",
        "commented_code": "@@ -372,6 +373,35 @@ public function filter(?callable $callback = null)\n         return new static(array_filter($this->items));\n     }\n \n+    /**\n+     * Run a map and filter over each of the items.\n+     *\n+     * @template TMapValue\n+     *\n+     * @param  callable(TValue, TKey): TMapValue  $callback\n+     * @param  (callable(TValue, TKey): bool)|null  $reject\n+     * @return static<TKey, TMapValue>\n+     */\n+    public function filterMap($callable, $filter = null)\n+    {\n+        $filter = $filter === null\n+            ? fn ($value) => (bool) $value\n+            : match ((new ReflectionFunction($filter))->getNumberOfParameters()) {",
        "comment_created_at": "2024-07-09T08:04:01+00:00",
        "comment_author": "Tofandel",
        "comment_body": "Ah yes, the good ol' php inbuilt functions that always destroy all your hopes 😅  I forgot about those\r\n\r\nReflection is indeed better than try, catch, because try catch means you need to call the function which if it had some side effects could be very undesirable, and reflection is always super fast in php (I don't know why this myth came to be that it's slow and needs caching) but the advantage of the try catch is that it works even if you use this kind of things\r\n\r\n`$this->filterMap($callable, fn () => ! $reject(...func_get_args()))`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1642109271",
    "pr_number": 51809,
    "pr_file": "src/Illuminate/Database/Eloquent/Relations/Relation.php",
    "created_at": "2024-06-17T03:40:13+00:00",
    "commented_code": "return static::$morphMap[$alias] ?? null;\n    }\n\n    /**\n     * Get the alias associated with a custom polymorphic class.\n     *\n     * @param  string  $className\n     * @return int|string|null\n     */\n    public static function getMorphAlias(string $className)\n    {\n        foreach (static::$morphMap as $alias => $morphedClass) {\n            if ($morphedClass === $className) {\n                return $alias;\n            }\n        }\n\n        return null;",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1642109271",
        "repo_full_name": "laravel/framework",
        "pr_number": 51809,
        "pr_file": "src/Illuminate/Database/Eloquent/Relations/Relation.php",
        "discussion_id": "1642109271",
        "commented_code": "@@ -501,6 +501,23 @@ public static function getMorphedModel($alias)\n         return static::$morphMap[$alias] ?? null;\n     }\n \n+    /**\n+     * Get the alias associated with a custom polymorphic class.\n+     *\n+     * @param  string  $className\n+     * @return int|string|null\n+     */\n+    public static function getMorphAlias(string $className)\n+    {\n+        foreach (static::$morphMap as $alias => $morphedClass) {\n+            if ($morphedClass === $className) {\n+                return $alias;\n+            }\n+        }\n+\n+        return null;",
        "comment_created_at": "2024-06-17T03:40:13+00:00",
        "comment_author": "calebdw",
        "comment_body": "Would it not be easier to do the following?\r\n\r\n```suggestion\r\n        return array_flip(static::$morphMap)[$className] ?? null;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1642138211",
        "repo_full_name": "laravel/framework",
        "pr_number": 51809,
        "pr_file": "src/Illuminate/Database/Eloquent/Relations/Relation.php",
        "discussion_id": "1642109271",
        "commented_code": "@@ -501,6 +501,23 @@ public static function getMorphedModel($alias)\n         return static::$morphMap[$alias] ?? null;\n     }\n \n+    /**\n+     * Get the alias associated with a custom polymorphic class.\n+     *\n+     * @param  string  $className\n+     * @return int|string|null\n+     */\n+    public static function getMorphAlias(string $className)\n+    {\n+        foreach (static::$morphMap as $alias => $morphedClass) {\n+            if ($morphedClass === $className) {\n+                return $alias;\n+            }\n+        }\n+\n+        return null;",
        "comment_created_at": "2024-06-17T04:15:42+00:00",
        "comment_author": "donnysim",
        "comment_body": "Would it not be easier to use array_search? Flip would create unnecessary garbage and for heavy morph use that's not desirable.",
        "pr_file_module": null
      },
      {
        "comment_id": "1642887423",
        "repo_full_name": "laravel/framework",
        "pr_number": 51809,
        "pr_file": "src/Illuminate/Database/Eloquent/Relations/Relation.php",
        "discussion_id": "1642109271",
        "commented_code": "@@ -501,6 +501,23 @@ public static function getMorphedModel($alias)\n         return static::$morphMap[$alias] ?? null;\n     }\n \n+    /**\n+     * Get the alias associated with a custom polymorphic class.\n+     *\n+     * @param  string  $className\n+     * @return int|string|null\n+     */\n+    public static function getMorphAlias(string $className)\n+    {\n+        foreach (static::$morphMap as $alias => $morphedClass) {\n+            if ($morphedClass === $className) {\n+                return $alias;\n+            }\n+        }\n+\n+        return null;",
        "comment_created_at": "2024-06-17T14:12:24+00:00",
        "comment_author": "calebdw",
        "comment_body": "@taylorotwell, I was mistaken---benchmarking shows that using `array_search` is a good deal faster than having to flip the entire array and then still search through the keys:\r\n\r\n![image](https://github.com/laravel/framework/assets/4176520/58880242-29ac-4a69-b8ad-3280b9190553)\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]