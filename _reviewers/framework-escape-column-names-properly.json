[
  {
    "discussion_id": "1724014845",
    "pr_number": 52535,
    "pr_file": "src/Illuminate/Database/Query/Grammars/MySqlGrammar.php",
    "created_at": "2024-08-20T21:50:45+00:00",
    "commented_code": "return 'json_extract('.$field.$path.')';\n    }\n\n    /**\n     * Apply custom ordering to a query based on a priority array.\n     *\n     * @param  $column\n     * @param  array  $priority\n     * @param  $direction\n     * @return string\n     */\n    public function orderByPriority($column, array $priority, $direction = 'asc')\n    {\n        $placeholders = implode(',', array_fill(0, count($priority), '?'));\n\n        return \"FIELD($column, $placeholders) $direction\";",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1724014845",
        "repo_full_name": "laravel/framework",
        "pr_number": 52535,
        "pr_file": "src/Illuminate/Database/Query/Grammars/MySqlGrammar.php",
        "discussion_id": "1724014845",
        "commented_code": "@@ -524,4 +524,19 @@ protected function wrapJsonBooleanSelector($value)\n \n         return 'json_extract('.$field.$path.')';\n     }\n+\n+    /**\n+     * Apply custom ordering to a query based on a priority array.\n+     *\n+     * @param  $column\n+     * @param  array  $priority\n+     * @param  $direction\n+     * @return string\n+     */\n+    public function orderByPriority($column, array $priority, $direction = 'asc')\n+    {\n+        $placeholders = implode(',', array_fill(0, count($priority), '?'));\n+\n+        return \"FIELD($column, $placeholders) $direction\";",
        "comment_created_at": "2024-08-20T21:50:45+00:00",
        "comment_author": "staudenmeir",
        "comment_body": "The column name needs to be wrapped with `$this->wrap($column)`. This also affects the other grammars.",
        "pr_file_module": null
      },
      {
        "comment_id": "1724361191",
        "repo_full_name": "laravel/framework",
        "pr_number": 52535,
        "pr_file": "src/Illuminate/Database/Query/Grammars/MySqlGrammar.php",
        "discussion_id": "1724014845",
        "commented_code": "@@ -524,4 +524,19 @@ protected function wrapJsonBooleanSelector($value)\n \n         return 'json_extract('.$field.$path.')';\n     }\n+\n+    /**\n+     * Apply custom ordering to a query based on a priority array.\n+     *\n+     * @param  $column\n+     * @param  array  $priority\n+     * @param  $direction\n+     * @return string\n+     */\n+    public function orderByPriority($column, array $priority, $direction = 'asc')\n+    {\n+        $placeholders = implode(',', array_fill(0, count($priority), '?'));\n+\n+        return \"FIELD($column, $placeholders) $direction\";",
        "comment_created_at": "2024-08-21T04:21:26+00:00",
        "comment_author": "Mushood",
        "comment_body": "I have applied the wrap function on all grammars and updated the tests accordingly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898688984",
    "pr_number": 54025,
    "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
    "created_at": "2024-12-27T19:45:49+00:00",
    "commented_code": "*/\n    protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n    {\n        return sprintf('alter table %s add %s %s%s(%s)',\n        $columns = collect($command->columns)->map(function ($column) {\n            // Check if the column contains a functional expression\n            // and return as-is, otherwise wrap\n            return preg_match('/\\(.+\\)/', $column) ? $column : $this->wrap($column);\n        })->implode(', ');\n\n        return sprintf(\n            'alter table %s add %s %s%s(%s)',\n            $this->wrapTable($blueprint),\n            $type,\n            $this->wrap($command->index),\n            $command->algorithm ? ' using '.$command->algorithm : '',\n            $this->columnize($command->columns)\n            $command->algorithm ? ' using ' . $command->algorithm : '',\n            $columns\n        );\n    }",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1898688984",
        "repo_full_name": "laravel/framework",
        "pr_number": 54025,
        "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
        "discussion_id": "1898688984",
        "commented_code": "@@ -492,12 +492,19 @@ public function compileSpatialIndex(Blueprint $blueprint, Fluent $command)\n      */\n     protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n     {\n-        return sprintf('alter table %s add %s %s%s(%s)',\n+        $columns = collect($command->columns)->map(function ($column) {\n+            // Check if the column contains a functional expression\n+            // and return as-is, otherwise wrap\n+            return preg_match('/\\(.+\\)/', $column) ? $column : $this->wrap($column);\n+        })->implode(', ');\n+\n+        return sprintf(\n+            'alter table %s add %s %s%s(%s)',\n             $this->wrapTable($blueprint),\n             $type,\n             $this->wrap($command->index),\n-            $command->algorithm ? ' using '.$command->algorithm : '',\n-            $this->columnize($command->columns)\n+            $command->algorithm ? ' using ' . $command->algorithm : '',\n+            $columns\n         );\n     }\n ",
        "comment_created_at": "2024-12-27T19:45:49+00:00",
        "comment_author": "shaedrich",
        "comment_body": "One possible solution for https://github.com/laravel/framework/pull/54025#discussion_r1898460480\r\n```suggestion\r\n\r\n    protected static function isFunctionalExpression(string $column): bool\r\n    {\r\n        return preg_match('/\\(.+\\)/', $column);\r\n    }\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898689872",
    "pr_number": 54025,
    "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
    "created_at": "2024-12-27T19:48:17+00:00",
    "commented_code": "*/\n    protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n    {\n        return sprintf('alter table %s add %s %s%s(%s)',\n        $columns = collect($command->columns)->map(function ($column) {\n            // Check if the column contains a functional expression\n            // and return as-is, otherwise wrap\n            return preg_match('/\\(.+\\)/', $column) ? $column : $this->wrap($column);",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1898689872",
        "repo_full_name": "laravel/framework",
        "pr_number": 54025,
        "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
        "discussion_id": "1898689872",
        "commented_code": "@@ -492,12 +492,19 @@ public function compileSpatialIndex(Blueprint $blueprint, Fluent $command)\n      */\n     protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n     {\n-        return sprintf('alter table %s add %s %s%s(%s)',\n+        $columns = collect($command->columns)->map(function ($column) {\n+            // Check if the column contains a functional expression\n+            // and return as-is, otherwise wrap\n+            return preg_match('/\\(.+\\)/', $column) ? $column : $this->wrap($column);",
        "comment_created_at": "2024-12-27T19:48:17+00:00",
        "comment_author": "shaedrich",
        "comment_body": "https://github.com/laravel/framework/pull/54025#discussion_r1898688984 can be applied here, then:\r\n```suggestion\r\n            return self::isFunctionalExpression($column) ? $column : $this->wrap($column);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898691810",
    "pr_number": 54025,
    "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
    "created_at": "2024-12-27T19:54:11+00:00",
    "commented_code": "*/\n    protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n    {\n        return sprintf('alter table %s add %s %s%s(%s)',\n        $columns = collect($command->columns)->map(function (string $column) {\n            return self::isFunctionalExpression($column) ? $column : $this->wrap($column);\n        })->implode(', ');",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1898691810",
        "repo_full_name": "laravel/framework",
        "pr_number": 54025,
        "pr_file": "src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php",
        "discussion_id": "1898691810",
        "commented_code": "@@ -492,15 +492,23 @@ public function compileSpatialIndex(Blueprint $blueprint, Fluent $command)\n      */\n     protected function compileKey(Blueprint $blueprint, Fluent $command, $type)\n     {\n-        return sprintf('alter table %s add %s %s%s(%s)',\n+        $columns = collect($command->columns)->map(function (string $column) {\n+            return self::isFunctionalExpression($column) ? $column : $this->wrap($column);\n+        })->implode(', ');",
        "comment_created_at": "2024-12-27T19:54:11+00:00",
        "comment_author": "shaedrich",
        "comment_body": "https://github.com/laravel/framework/pull/54025#discussion_r1898675719 got outdatedâ€”not sure if you still want to change that:\r\n```suggestion\r\n        $columns = collect($command->columns)\r\n            ->map(fn (string $column) => self::isFunctionalExpression($column) ? $column : $this->wrap($column))\r\n            ->implode(', ');\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1682404703",
    "pr_number": 52177,
    "pr_file": "tests/Integration/Database/DatabaseSchemaBlueprintTest.php",
    "created_at": "2024-07-18T08:11:43+00:00",
    "commented_code": "$this->assertEquals($expected, $queries);\n    }\n\n    public function testAddColumnNamedCreateWorks()\n    {\n        DB::connection()->getSchemaBuilder()->create('users', function ($table) {\n            $table->string('name')->nullable();\n        });\n\n        $blueprintMySql = new Blueprint('users', function ($table) {\n            $table->string('create')->nullable(false);\n        });\n\n        $queries = $blueprintMySql->toSql(DB::connection(), new MySqlGrammar);\n\n        $expected = [\n            'alter table `users` add `create` varchar(255) not null',\n        ];\n\n        $this->assertEquals($expected, $queries);\n\n        $blueprintPostgres = new Blueprint('users', function ($table) {\n            $table->string('create')->nullable(false);\n        });\n\n        $queries = $blueprintPostgres->toSql(DB::connection(), new PostgresGrammar);\n\n        $expected = [\n            'alter table \"users\" add column \"create\" varchar(255) not null',\n        ];\n\n        $this->assertEquals($expected, $queries);\n\n        $blueprintSQLite = new Blueprint('users', function ($table) {\n            $table->string('create')->nullable(false);\n        });\n\n        $queries = $blueprintSQLite->toSql(DB::connection(), new SQLiteGrammar);\n\n        $expected = [\n            'alter table \"users\" add column \"create\" varchar not null',\n        ];\n\n        $this->assertEquals($expected, $queries);\n\n        $blueprintSqlServer = new Blueprint('users', function ($table) {\n            $table->string('create')->nullable(false);\n        });\n\n        $queries = $blueprintSqlServer->toSql(DB::connection(), new SqlServerGrammar);\n\n        $expected = [\n            'alter table \"users\" add \"create\" nvarchar(255) not null',\n        ];\n\n        $this->assertEquals($expected, $queries);",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1682404703",
        "repo_full_name": "laravel/framework",
        "pr_number": 52177,
        "pr_file": "tests/Integration/Database/DatabaseSchemaBlueprintTest.php",
        "discussion_id": "1682404703",
        "commented_code": "@@ -507,6 +507,61 @@ public function testAddUniqueIndexWithNameWorks()\n         $this->assertEquals($expected, $queries);\n     }\n \n+    public function testAddColumnNamedCreateWorks()\n+    {\n+        DB::connection()->getSchemaBuilder()->create('users', function ($table) {\n+            $table->string('name')->nullable();\n+        });\n+\n+        $blueprintMySql = new Blueprint('users', function ($table) {\n+            $table->string('create')->nullable(false);\n+        });\n+\n+        $queries = $blueprintMySql->toSql(DB::connection(), new MySqlGrammar);\n+\n+        $expected = [\n+            'alter table `users` add `create` varchar(255) not null',\n+        ];\n+\n+        $this->assertEquals($expected, $queries);\n+\n+        $blueprintPostgres = new Blueprint('users', function ($table) {\n+            $table->string('create')->nullable(false);\n+        });\n+\n+        $queries = $blueprintPostgres->toSql(DB::connection(), new PostgresGrammar);\n+\n+        $expected = [\n+            'alter table \"users\" add column \"create\" varchar(255) not null',\n+        ];\n+\n+        $this->assertEquals($expected, $queries);\n+\n+        $blueprintSQLite = new Blueprint('users', function ($table) {\n+            $table->string('create')->nullable(false);\n+        });\n+\n+        $queries = $blueprintSQLite->toSql(DB::connection(), new SQLiteGrammar);\n+\n+        $expected = [\n+            'alter table \"users\" add column \"create\" varchar not null',\n+        ];\n+\n+        $this->assertEquals($expected, $queries);\n+\n+        $blueprintSqlServer = new Blueprint('users', function ($table) {\n+            $table->string('create')->nullable(false);\n+        });\n+\n+        $queries = $blueprintSqlServer->toSql(DB::connection(), new SqlServerGrammar);\n+\n+        $expected = [\n+            'alter table \"users\" add \"create\" nvarchar(255) not null',\n+        ];\n+\n+        $this->assertEquals($expected, $queries);",
        "comment_created_at": "2024-07-18T08:11:43+00:00",
        "comment_author": "hafezdivandari",
        "comment_body": "```suggestion\r\n        Schema::create('users', function (Blueprint $table) {\r\n            $table->string('name');\r\n        });\r\n\r\n        Schema::table('users', function (Blueprint $table) {\r\n            $table->string('create');\r\n        });\r\n\r\n        $this->assertTrue(Schema::hasColumn('users', 'create'));\r\n```",
        "pr_file_module": null
      }
    ]
  }
]