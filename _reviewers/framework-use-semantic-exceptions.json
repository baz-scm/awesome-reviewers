[
  {
    "discussion_id": "2080817660",
    "pr_number": 55685,
    "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
    "created_at": "2025-05-09T02:51:43+00:00",
    "commented_code": "protected function bootIfNotBooted()\n    {\n        if (! isset(static::$booted[static::class])) {\n            static::$booted[static::class] = true;\n            if (isset(static::$booting[static::class])) {\n                throw new Exception('\"'.__METHOD__.'\" cannot be called on the \"'.static::class.'\" class while it is already being booted.');",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "2080817660",
        "repo_full_name": "laravel/framework",
        "pr_number": 55685,
        "pr_file": "src/Illuminate/Database/Eloquent/Model.php",
        "discussion_id": "2080817660",
        "commented_code": "@@ -286,12 +292,20 @@ public function __construct(array $attributes = [])\n     protected function bootIfNotBooted()\n     {\n         if (! isset(static::$booted[static::class])) {\n-            static::$booted[static::class] = true;\n+            if (isset(static::$booting[static::class])) {\n+                throw new Exception('\"'.__METHOD__.'\" cannot be called on the \"'.static::class.'\" class while it is already being booted.');",
        "comment_created_at": "2025-05-09T02:51:43+00:00",
        "comment_author": "rodrigopedra",
        "comment_body": "Shouldn't it be a `LogicException`?\r\n\r\n>  Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code. \r\n\r\nhttps://www.php.net/manual/en/class.logicexception.php",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009314457",
    "pr_number": 55107,
    "pr_file": "src/Illuminate/Database/Eloquent/Collection.php",
    "created_at": "2025-03-24T00:28:42+00:00",
    "commented_code": "return $model->newModelQuery()->whereKey($this->modelKeys());\n    }\n\n    /**\n     * Create a new resource collection instance for the given resource.\n     *\n     * @param  class-string<JsonResource>|null  $resourceClass\n     * @return ResourceCollection\n     */\n    public function toResourceCollection(?string $resourceClass = null): ResourceCollection\n    {\n        if ($resourceClass === null) {\n            return $this->guessResourceCollection();\n        }\n\n        return $resourceClass::collection($this);\n    }\n\n    /**\n     * Guess the resource collection for the items.\n     *\n     * @return ResourceCollection\n     */\n    protected function guessResourceCollection(): ResourceCollection\n    {\n        if ($this->isEmpty()) {\n            return new ResourceCollection($this);\n        }\n\n        $model = $this->first();\n\n        assert(is_object($model), 'Resource collection guesser expects the collection to contain objects.');",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "2009314457",
        "repo_full_name": "laravel/framework",
        "pr_number": 55107,
        "pr_file": "src/Illuminate/Database/Eloquent/Collection.php",
        "discussion_id": "2009314457",
        "commented_code": "@@ -843,4 +845,44 @@ public function toQuery()\n \n         return $model->newModelQuery()->whereKey($this->modelKeys());\n     }\n+\n+    /**\n+     * Create a new resource collection instance for the given resource.\n+     *\n+     * @param  class-string<JsonResource>|null  $resourceClass\n+     * @return ResourceCollection\n+     */\n+    public function toResourceCollection(?string $resourceClass = null): ResourceCollection\n+    {\n+        if ($resourceClass === null) {\n+            return $this->guessResourceCollection();\n+        }\n+\n+        return $resourceClass::collection($this);\n+    }\n+\n+    /**\n+     * Guess the resource collection for the items.\n+     *\n+     * @return ResourceCollection\n+     */\n+    protected function guessResourceCollection(): ResourceCollection\n+    {\n+        if ($this->isEmpty()) {\n+            return new ResourceCollection($this);\n+        }\n+\n+        $model = $this->first();\n+\n+        assert(is_object($model), 'Resource collection guesser expects the collection to contain objects.');",
        "comment_created_at": "2025-03-24T00:28:42+00:00",
        "comment_author": "mohammadrasoulasghari",
        "comment_body": "Using assertions in production code is risky as they may be disabled in production environments (zend.assertions=-1). When assertions fail in this state, no proper errors are thrown, leading to silent failures or unexpected behavior. Better to use explicit exceptions with meaningful error messages for reliable error handling.\r\n\r\nhttps://www.php.net/manual/en/ini.core.php#ini.zend.assertions\r\n\r\nsee : \\Illuminate\\Database\\Eloquent\\Collection::toQuery",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1973796962",
    "pr_number": 54824,
    "pr_file": "src/Illuminate/Validation/InvalidSoftDeleteQueryException.php",
    "created_at": "2025-02-27T15:13:30+00:00",
    "commented_code": "<?php\n\nnamespace Illuminate\\Validation;\n\nuse RuntimeException;\n\nclass InvalidSoftDeleteQueryException extends RuntimeException",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1973796962",
        "repo_full_name": "laravel/framework",
        "pr_number": 54824,
        "pr_file": "src/Illuminate/Validation/InvalidSoftDeleteQueryException.php",
        "discussion_id": "1973796962",
        "commented_code": "@@ -0,0 +1,10 @@\n+<?php\n+\n+namespace Illuminate\\Validation;\n+\n+use RuntimeException;\n+\n+class InvalidSoftDeleteQueryException extends RuntimeException",
        "comment_created_at": "2025-02-27T15:13:30+00:00",
        "comment_author": "kapersoft",
        "comment_body": "Since it's a logic issue introduces by the developer, extending [LogicException](https://www.php.net/manual/en/class.logicexception.php) suits this exception better.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1667219375",
    "pr_number": 52039,
    "pr_file": "src/Illuminate/Support/Str.php",
    "created_at": "2024-07-06T00:52:34+00:00",
    "commented_code": "return mb_convert_case($string, $mode, $encoding);\n    }\n\n    /**\n     * Compresses a string using gzip compression.\n     *\n     * @param  string  $string  The string to compress.\n     * @param  int  $mode  Compression level (1 to 9, defaults to 5).\n     * @return string|false The compressed string, or false on failure.\n     */\n    public static function compress(string $string, int $mode = 5)\n    {\n        // Ensure compression mode is within valid range",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1667219375",
        "repo_full_name": "laravel/framework",
        "pr_number": 52039,
        "pr_file": "src/Illuminate/Support/Str.php",
        "discussion_id": "1667219375",
        "commented_code": "@@ -341,6 +341,38 @@ public static function convertCase(string $string, int $mode = MB_CASE_FOLD, ?st\n         return mb_convert_case($string, $mode, $encoding);\n     }\n \n+    /**\n+     * Compresses a string using gzip compression.\n+     *\n+     * @param  string  $string  The string to compress.\n+     * @param  int  $mode  Compression level (1 to 9, defaults to 5).\n+     * @return string|false The compressed string, or false on failure.\n+     */\n+    public static function compress(string $string, int $mode = 5)\n+    {\n+        // Ensure compression mode is within valid range",
        "comment_created_at": "2024-07-06T00:52:34+00:00",
        "comment_author": "rodrigopedra",
        "comment_body": "```php\r\n$mode = min(1, max($mode, 9));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1667219605",
        "repo_full_name": "laravel/framework",
        "pr_number": 52039,
        "pr_file": "src/Illuminate/Support/Str.php",
        "discussion_id": "1667219375",
        "commented_code": "@@ -341,6 +341,38 @@ public static function convertCase(string $string, int $mode = MB_CASE_FOLD, ?st\n         return mb_convert_case($string, $mode, $encoding);\n     }\n \n+    /**\n+     * Compresses a string using gzip compression.\n+     *\n+     * @param  string  $string  The string to compress.\n+     * @param  int  $mode  Compression level (1 to 9, defaults to 5).\n+     * @return string|false The compressed string, or false on failure.\n+     */\n+    public static function compress(string $string, int $mode = 5)\n+    {\n+        // Ensure compression mode is within valid range",
        "comment_created_at": "2024-07-06T00:53:28+00:00",
        "comment_author": "rodrigopedra",
        "comment_body": "Although I'd prefer it to throw an `\\OutOfBoundsException`\r\n\r\nhttps://www.php.net/manual/en/class.outofboundsexception.php",
        "pr_file_module": null
      },
      {
        "comment_id": "1667348175",
        "repo_full_name": "laravel/framework",
        "pr_number": 52039,
        "pr_file": "src/Illuminate/Support/Str.php",
        "discussion_id": "1667219375",
        "commented_code": "@@ -341,6 +341,38 @@ public static function convertCase(string $string, int $mode = MB_CASE_FOLD, ?st\n         return mb_convert_case($string, $mode, $encoding);\n     }\n \n+    /**\n+     * Compresses a string using gzip compression.\n+     *\n+     * @param  string  $string  The string to compress.\n+     * @param  int  $mode  Compression level (1 to 9, defaults to 5).\n+     * @return string|false The compressed string, or false on failure.\n+     */\n+    public static function compress(string $string, int $mode = 5)\n+    {\n+        // Ensure compression mode is within valid range",
        "comment_created_at": "2024-07-06T10:52:37+00:00",
        "comment_author": "rmunate",
        "comment_body": "According to you, I adjusted the method.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898695609",
    "pr_number": 54027,
    "pr_file": "src/Illuminate/Support/Number.php",
    "created_at": "2024-12-27T20:05:40+00:00",
    "commented_code": "return static::$currency;\n    }\n\n    /**\n     * Generate a random number of the given length.\n     *\n     * @param  int  $length\n     * @return int\n     */\n    public static function random(int $length = 6): int\n    {\n        $maxLength = strlen((string) PHP_INT_MAX);\n\n        if ($length < 1 || $length > $maxLength) {\n            return 0;",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1898695609",
        "repo_full_name": "laravel/framework",
        "pr_number": 54027,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1898695609",
        "commented_code": "@@ -367,6 +367,30 @@ public static function defaultCurrency()\n         return static::$currency;\n     }\n \n+    /**\n+     * Generate a random number of the given length.\n+     *\n+     * @param  int  $length\n+     * @return int\n+     */\n+    public static function random(int $length = 6): int\n+    {\n+        $maxLength = strlen((string) PHP_INT_MAX);\n+\n+        if ($length < 1 || $length > $maxLength) {\n+            return 0;",
        "comment_created_at": "2024-12-27T20:05:40+00:00",
        "comment_author": "shaedrich",
        "comment_body": "Is `0` helpful here? If I can't generate a _random_ integer, I'd expect to get an exception thrown (maybe [`Random\\RandomException`](https://www.php.net/manual/en/class.random-randomexception.php) or [`Random\\RandomError`](https://www.php.net/manual/en/class.random-randomerror.php) 🤔)",
        "pr_file_module": null
      },
      {
        "comment_id": "1898701582",
        "repo_full_name": "laravel/framework",
        "pr_number": 54027,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1898695609",
        "commented_code": "@@ -367,6 +367,30 @@ public static function defaultCurrency()\n         return static::$currency;\n     }\n \n+    /**\n+     * Generate a random number of the given length.\n+     *\n+     * @param  int  $length\n+     * @return int\n+     */\n+    public static function random(int $length = 6): int\n+    {\n+        $maxLength = strlen((string) PHP_INT_MAX);\n+\n+        if ($length < 1 || $length > $maxLength) {\n+            return 0;",
        "comment_created_at": "2024-12-27T20:24:48+00:00",
        "comment_author": "shaedrich",
        "comment_body": "Also, doesn't `random_int()` handle validation itself?",
        "pr_file_module": null
      },
      {
        "comment_id": "1900456930",
        "repo_full_name": "laravel/framework",
        "pr_number": 54027,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1898695609",
        "commented_code": "@@ -367,6 +367,30 @@ public static function defaultCurrency()\n         return static::$currency;\n     }\n \n+    /**\n+     * Generate a random number of the given length.\n+     *\n+     * @param  int  $length\n+     * @return int\n+     */\n+    public static function random(int $length = 6): int\n+    {\n+        $maxLength = strlen((string) PHP_INT_MAX);\n+\n+        if ($length < 1 || $length > $maxLength) {\n+            return 0;",
        "comment_created_at": "2025-01-01T20:30:17+00:00",
        "comment_author": "dilovanmatini",
        "comment_body": "I hesitated to get an exception or just return 0. Then I checked Str:random it uses `random_int()` without throwing any exception. An that is why I chose to return 0.",
        "pr_file_module": null
      },
      {
        "comment_id": "1900457686",
        "repo_full_name": "laravel/framework",
        "pr_number": 54027,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1898695609",
        "commented_code": "@@ -367,6 +367,30 @@ public static function defaultCurrency()\n         return static::$currency;\n     }\n \n+    /**\n+     * Generate a random number of the given length.\n+     *\n+     * @param  int  $length\n+     * @return int\n+     */\n+    public static function random(int $length = 6): int\n+    {\n+        $maxLength = strlen((string) PHP_INT_MAX);\n+\n+        if ($length < 1 || $length > $maxLength) {\n+            return 0;",
        "comment_created_at": "2025-01-01T20:36:04+00:00",
        "comment_author": "shaedrich",
        "comment_body": "If a function doesn't throw an exception, I'd at least expect it to return `null` or `false`, since `0` is a number but it's not random, so this can be quite confusing",
        "pr_file_module": null
      },
      {
        "comment_id": "1900458031",
        "repo_full_name": "laravel/framework",
        "pr_number": 54027,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1898695609",
        "commented_code": "@@ -367,6 +367,30 @@ public static function defaultCurrency()\n         return static::$currency;\n     }\n \n+    /**\n+     * Generate a random number of the given length.\n+     *\n+     * @param  int  $length\n+     * @return int\n+     */\n+    public static function random(int $length = 6): int\n+    {\n+        $maxLength = strlen((string) PHP_INT_MAX);\n+\n+        if ($length < 1 || $length > $maxLength) {\n+            return 0;",
        "comment_created_at": "2025-01-01T20:39:21+00:00",
        "comment_author": "dilovanmatini",
        "comment_body": "That one is also possible 👍",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1898945139",
    "pr_number": 54033,
    "pr_file": "src/Illuminate/Database/Eloquent/Concerns/HasUniqueStringIds.php",
    "created_at": "2024-12-28T15:52:23+00:00",
    "commented_code": "*/\n    protected function handleInvalidUniqueId($value, $field)\n    {\n        throw (new ModelNotFoundException)->setModel(get_class($this), $value);\n        throw (new ModelNotFoundException)->setModel(get_class($this), $value)->setStatus(422);",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1898945139",
        "repo_full_name": "laravel/framework",
        "pr_number": 54033,
        "pr_file": "src/Illuminate/Database/Eloquent/Concerns/HasUniqueStringIds.php",
        "discussion_id": "1898945139",
        "commented_code": "@@ -103,6 +103,6 @@ public function getIncrementing()\n      */\n     protected function handleInvalidUniqueId($value, $field)\n     {\n-        throw (new ModelNotFoundException)->setModel(get_class($this), $value);\n+        throw (new ModelNotFoundException)->setModel(get_class($this), $value)->setStatus(422);",
        "comment_created_at": "2024-12-28T15:52:23+00:00",
        "comment_author": "shaedrich",
        "comment_body": "Wouldn't it make more sense to throw a different exception (like [`\\Ramsey\\Uuid\\Exception\\InvalidUuidStringException`](https://github.com/ramsey/uuid/blob/4.x/src/Exception/InvalidUuidStringException.php)) as you suggested?\r\n\r\n> Create an entirely new exception for this case. I'd be happy to pivot to this if it makes more sense for the framework.\r\n\r\nI mean, the whole point is, that it's not about that the model isn't found.\r\n\r\n> Throw a ValidationException instead. Something like ValidationException::withMessages([$field => '???']). I'm not sure what the message should be in that case.\r\n\r\nI don't think, we should mix the validation functionality of the framework with the rest of the framework. A dedicated exception like in your first suggestion sounds better",
        "pr_file_module": null
      },
      {
        "comment_id": "1899151726",
        "repo_full_name": "laravel/framework",
        "pr_number": 54033,
        "pr_file": "src/Illuminate/Database/Eloquent/Concerns/HasUniqueStringIds.php",
        "discussion_id": "1898945139",
        "commented_code": "@@ -103,6 +103,6 @@ public function getIncrementing()\n      */\n     protected function handleInvalidUniqueId($value, $field)\n     {\n-        throw (new ModelNotFoundException)->setModel(get_class($this), $value);\n+        throw (new ModelNotFoundException)->setModel(get_class($this), $value)->setStatus(422);",
        "comment_created_at": "2024-12-29T15:32:55+00:00",
        "comment_author": "cosmastech",
        "comment_body": "Sharing ModelNotFoundException doesn't seem like the right approach, I agree. Went with a new exception, `InvalidIdFormatException`.\r\n\r\nThe problem with using `InvalidUuidStringException` is that any time a user requests an endpoint with an invalid UUID, it would be reported (to Sentry, DataDog, et cetera) which isn't desirable.\r\n\r\nThe user (or the framework) could add it to the exception handler's dontReport array, but there may be times where the user does want it reported in parts of the code outside of route model binding.\r\n\r\nIt also would mean that every time a user creates their own unique string ID trait, they would have to cook up their own exception. By creating a more generic exception, it saves users from having to follow the additional steps to avoid eating up their exception reporting limits.",
        "pr_file_module": null
      },
      {
        "comment_id": "1899153828",
        "repo_full_name": "laravel/framework",
        "pr_number": 54033,
        "pr_file": "src/Illuminate/Database/Eloquent/Concerns/HasUniqueStringIds.php",
        "discussion_id": "1898945139",
        "commented_code": "@@ -103,6 +103,6 @@ public function getIncrementing()\n      */\n     protected function handleInvalidUniqueId($value, $field)\n     {\n-        throw (new ModelNotFoundException)->setModel(get_class($this), $value);\n+        throw (new ModelNotFoundException)->setModel(get_class($this), $value)->setStatus(422);",
        "comment_created_at": "2024-12-29T15:45:57+00:00",
        "comment_author": "shaedrich",
        "comment_body": "> Went with a new exception, `InvalidIdFormatException`. The problem with using `InvalidUuidStringException` is that any time a user requests an endpoint with an invalid UUID, it would be reported (to Sentry, DataDog, et cetera) which isn't desirable.\r\n\r\nAgreed. A new exception sounds good 👍🏻  Also, this way, we are less dependent on `ramsey/uuid` (I'm remembering what chaos the introduction of the lazy classes into `ramsey/uuid` caused for some who used the package).\r\n\r\n> By creating a more generic exception, it saves users from having to follow the additional steps to avoid eating up their exception reporting limits.\r\n\r\nMy only problem now with this is that the naming is too generic for the implementation. For the implementation to match the level of genericness the name has, it would have to have some kind of property holding the format or a description of it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1818276038",
    "pr_number": 53318,
    "pr_file": "src/Illuminate/Support/Number.php",
    "created_at": "2024-10-28T01:53:10+00:00",
    "commented_code": "*/\n    protected static $currency = 'USD';\n\n\n    /**\n     * @param string $locale\n     * @return string\n     * @throws \\Exception\n     */\n    public static function validateLocale(string $locale): string\n    {\n        $availableLocales = ResourceBundle::getLocales('');\n\n        if ( ! in_array($locale, $availableLocales, true)){\n            throw new \\Exception(\"Locale is invalid\");",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1818276038",
        "repo_full_name": "laravel/framework",
        "pr_number": 53318,
        "pr_file": "src/Illuminate/Support/Number.php",
        "discussion_id": "1818276038",
        "commented_code": "@@ -24,6 +25,23 @@ class Number\n      */\n     protected static $currency = 'USD';\n \n+\n+    /**\n+     * @param string $locale\n+     * @return string\n+     * @throws \\Exception\n+     */\n+    public static function validateLocale(string $locale): string\n+    {\n+        $availableLocales = ResourceBundle::getLocales('');\n+\n+        if ( ! in_array($locale, $availableLocales, true)){\n+            throw new \\Exception(\"Locale is invalid\");",
        "comment_created_at": "2024-10-28T01:53:10+00:00",
        "comment_author": "crynobone",
        "comment_body": "Should be `InvalidArgumentException`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1681129407",
    "pr_number": 52169,
    "pr_file": "src/Illuminate/Foundation/ViteFileFromManifestNotFoundException.php",
    "created_at": "2024-07-17T14:10:07+00:00",
    "commented_code": "<?php\n\nnamespace Illuminate\\Foundation;\n\nuse Exception;\n\nclass ViteFileFromManifestNotFoundException extends Exception",
    "repo_full_name": "laravel/framework",
    "discussion_comments": [
      {
        "comment_id": "1681129407",
        "repo_full_name": "laravel/framework",
        "pr_number": 52169,
        "pr_file": "src/Illuminate/Foundation/ViteFileFromManifestNotFoundException.php",
        "discussion_id": "1681129407",
        "commented_code": "@@ -0,0 +1,10 @@\n+<?php\n+\n+namespace Illuminate\\Foundation;\n+\n+use Exception;\n+\n+class ViteFileFromManifestNotFoundException extends Exception",
        "comment_created_at": "2024-07-17T14:10:07+00:00",
        "comment_author": "innocenzi",
        "comment_body": "Would be better to extend from some common, Vite-related base exception (eg. `\\Illuminate\\Foundation\\ViteException`). \r\n\r\nThis way, all Vite-related exceptions can be caught/matched by a single class.\r\n\r\n```php\r\ntry {\r\n    // ...\r\n} catch (ViteException $ex) {\r\n    // All Vite-related exceptions\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1681135043",
        "repo_full_name": "laravel/framework",
        "pr_number": 52169,
        "pr_file": "src/Illuminate/Foundation/ViteFileFromManifestNotFoundException.php",
        "discussion_id": "1681129407",
        "commented_code": "@@ -0,0 +1,10 @@\n+<?php\n+\n+namespace Illuminate\\Foundation;\n+\n+use Exception;\n+\n+class ViteFileFromManifestNotFoundException extends Exception",
        "comment_created_at": "2024-07-17T14:13:28+00:00",
        "comment_author": "SamuelWei",
        "comment_body": "I would be fine with that as well.\r\n\r\nShould ViteException just be the new parent, or should there only exists a single ViteException for all three cases?\r\n\r\nShould I change this PR or open an other one instead?\r\n\r\nI could make ViteManifestNotFoundException extend this new ViteException, so that ViteManifestNotFoundException would still work for backward compatibility and at the same time it could be deprecated. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "1681895034",
        "repo_full_name": "laravel/framework",
        "pr_number": 52169,
        "pr_file": "src/Illuminate/Foundation/ViteFileFromManifestNotFoundException.php",
        "discussion_id": "1681129407",
        "commented_code": "@@ -0,0 +1,10 @@\n+<?php\n+\n+namespace Illuminate\\Foundation;\n+\n+use Exception;\n+\n+class ViteFileFromManifestNotFoundException extends Exception",
        "comment_created_at": "2024-07-17T23:39:12+00:00",
        "comment_author": "timacdonald",
        "comment_body": "I'd prefer to see just the single `Illuminate\\Foundation\\ViteException` class for all of these.\r\n\r\nWe don't have a usecase for catching them on an individual basis.",
        "pr_file_module": null
      },
      {
        "comment_id": "1682374900",
        "repo_full_name": "laravel/framework",
        "pr_number": 52169,
        "pr_file": "src/Illuminate/Foundation/ViteFileFromManifestNotFoundException.php",
        "discussion_id": "1681129407",
        "commented_code": "@@ -0,0 +1,10 @@\n+<?php\n+\n+namespace Illuminate\\Foundation;\n+\n+use Exception;\n+\n+class ViteFileFromManifestNotFoundException extends Exception",
        "comment_created_at": "2024-07-18T07:51:27+00:00",
        "comment_author": "SamuelWei",
        "comment_body": "I changed it to the single `Illuminate\\Foundation\\ViteException` but keeping `ViteManifestNotFoundException` for backwards compatibility reasons. Searching in Github i found a few projects that depend on this. \r\n\r\nShould we keep the return type of the manifest method or also change it to the new ViteException?",
        "pr_file_module": null
      }
    ]
  }
]