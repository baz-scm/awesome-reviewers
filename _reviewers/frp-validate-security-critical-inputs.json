[
  {
    "discussion_id": "2181733343",
    "pr_number": 4865,
    "pr_file": "pkg/config/v1/value_source.go",
    "created_at": "2025-07-03T05:03:45+00:00",
    "commented_code": "+// Copyright 2025 The frp Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package v1\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ValueSource provides a way to dynamically resolve configuration values\n+// from various sources like files, environment variables, or external services.\n+type ValueSource struct {\n+\tType string      `json:\"type\"`\n+\tFile *FileSource `json:\"file,omitempty\"`\n+}\n+\n+// FileSource specifies how to load a value from a file.\n+type FileSource struct {\n+\tPath string `json:\"path\"`\n+}\n+\n+// Validate validates the ValueSource configuration.\n+func (v *ValueSource) Validate() error {\n+\tif v == nil {\n+\t\treturn errors.New(\"valueSource cannot be nil\")\n+\t}\n+\n+\tswitch v.Type {\n+\tcase \"file\":\n+\t\tif v.File == nil {\n+\t\t\treturn errors.New(\"file configuration is required when type is 'file'\")\n+\t\t}\n+\t\treturn v.File.Validate()\n+\tdefault:\n+\t\treturn fmt.Errorf(\"unsupported value source type: %s (only 'file' is supported)\", v.Type)\n+\t}\n+}\n+\n+// Resolve resolves the value from the configured source.\n+func (v *ValueSource) Resolve(ctx context.Context) (string, error) {\n+\tif err := v.Validate(); err != nil {\n+\t\treturn \"\", err\n+\t}\n+\n+\tswitch v.Type {\n+\tcase \"file\":\n+\t\treturn v.File.Resolve(ctx)\n+\tdefault:\n+\t\treturn \"\", fmt.Errorf(\"unsupported value source type: %s\", v.Type)\n+\t}\n+}\n+\n+// Validate validates the FileSource configuration.\n+func (f *FileSource) Validate() error {",
    "repo_full_name": "fatedier/frp",
    "discussion_comments": [
      {
        "comment_id": "2181733343",
        "repo_full_name": "fatedier/frp",
        "pr_number": 4865,
        "pr_file": "pkg/config/v1/value_source.go",
        "discussion_id": "2181733343",
        "commented_code": "@@ -0,0 +1,93 @@\n+// Copyright 2025 The frp Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package v1\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"os\"\n+\t\"strings\"\n+)\n+\n+// ValueSource provides a way to dynamically resolve configuration values\n+// from various sources like files, environment variables, or external services.\n+type ValueSource struct {\n+\tType string      `json:\"type\"`\n+\tFile *FileSource `json:\"file,omitempty\"`\n+}\n+\n+// FileSource specifies how to load a value from a file.\n+type FileSource struct {\n+\tPath string `json:\"path\"`\n+}\n+\n+// Validate validates the ValueSource configuration.\n+func (v *ValueSource) Validate() error {\n+\tif v == nil {\n+\t\treturn errors.New(\"valueSource cannot be nil\")\n+\t}\n+\n+\tswitch v.Type {\n+\tcase \"file\":\n+\t\tif v.File == nil {\n+\t\t\treturn errors.New(\"file configuration is required when type is 'file'\")\n+\t\t}\n+\t\treturn v.File.Validate()\n+\tdefault:\n+\t\treturn fmt.Errorf(\"unsupported value source type: %s (only 'file' is supported)\", v.Type)\n+\t}\n+}\n+\n+// Resolve resolves the value from the configured source.\n+func (v *ValueSource) Resolve(ctx context.Context) (string, error) {\n+\tif err := v.Validate(); err != nil {\n+\t\treturn \"\", err\n+\t}\n+\n+\tswitch v.Type {\n+\tcase \"file\":\n+\t\treturn v.File.Resolve(ctx)\n+\tdefault:\n+\t\treturn \"\", fmt.Errorf(\"unsupported value source type: %s\", v.Type)\n+\t}\n+}\n+\n+// Validate validates the FileSource configuration.\n+func (f *FileSource) Validate() error {",
        "comment_created_at": "2025-07-03T05:03:45+00:00",
        "comment_author": "Copilot",
        "comment_body": "The `Validate` method does not prevent path traversal, so inputs like `../../../etc/passwd` will bypass validation. Add checks to reject paths containing `..` or resolve the absolute path against a base directory.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "86763707",
    "pr_number": 152,
    "pr_file": "src/cmd/frps/control.go",
    "created_at": "2016-11-07T12:14:11+00:00",
    "commented_code": "s.HostHeaderRewrite = req.HostHeaderRewrite\n \t\ts.HttpUserName = req.HttpUserName\n \t\ts.HttpPassWord = req.HttpPassWord\n+\t\t// package URL\n+\t\tif req.SubDomain != \"\" {",
    "repo_full_name": "fatedier/frp",
    "discussion_comments": [
      {
        "comment_id": "86763707",
        "repo_full_name": "fatedier/frp",
        "pr_number": 152,
        "pr_file": "src/cmd/frps/control.go",
        "discussion_id": "86763707",
        "commented_code": "@@ -289,6 +289,10 @@ func doLogin(req *msg.ControlReq, c *conn.Conn) (ret int64, info string) {\n \t\ts.HostHeaderRewrite = req.HostHeaderRewrite\n \t\ts.HttpUserName = req.HttpUserName\n \t\ts.HttpPassWord = req.HttpPassWord\n+\t\t// package URL\n+\t\tif req.SubDomain != \"\" {",
        "comment_created_at": "2016-11-07T12:14:11+00:00",
        "comment_author": "fatedier",
        "comment_body": "\u589e\u52a0\u5bf9 subdomain \u7684\u9a8c\u8bc1\uff0c\u4e0d\u80fd\u542b\u6709 \".\" \u4ee5\u53ca \"*\"\u3002\n",
        "pr_file_module": null
      }
    ]
  }
]