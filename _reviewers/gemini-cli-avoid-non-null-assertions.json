[
  {
    "discussion_id": "2227317710",
    "pr_number": 4763,
    "pr_file": "packages/core/src/tools/read-many-files.ts",
    "created_at": "2025-07-24T04:38:36+00:00",
    "commented_code": "this.config.getTargetDir(),\n       );\n \n-      if (fileReadResult.error) {\n-        skippedFiles.push({\n-          path: relativePathForDisplay,\n-          reason: `Read error: ${fileReadResult.error}`,\n-        });\n-      } else {\n-        if (typeof fileReadResult.llmContent === 'string') {\n-          const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(\n-            '{filePath}',\n-            filePath,\n-          );\n-          contentParts.push(`${separator}\n\n${fileReadResult.llmContent}\n\n`);\n+      return {\n+        success: !fileReadResult.error,\n+        filePath,\n+        relativePathForDisplay,\n+        fileReadResult,\n+        reason: fileReadResult.error\n+          ? `Read error: ${fileReadResult.error}`\n+          : undefined,\n+      };\n+    });\n+\n+    // Wait for all file processing to complete\n+    const results = await Promise.allSettled(fileProcessingPromises);\n+\n+    // Process results\n+    for (const result of results) {\n+      if (result.status === 'fulfilled') {\n+        const fileResult = result.value;\n+\n+        if (!fileResult.success) {\n+          // Handle skipped files (images/PDFs not requested or read errors)\n+          skippedFiles.push({\n+            path: fileResult.relativePathForDisplay,\n+            reason: fileResult.reason!,\n+          });\n         } else {\n-          contentParts.push(fileReadResult.llmContent); // This is a Part for image/pdf\n+          // Handle successfully processed files\n+          const { filePath, relativePathForDisplay, fileReadResult } =\n+            fileResult;\n+\n+          if (typeof fileReadResult!.llmContent === 'string') {\n+            const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2227317710",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4763,
        "pr_file": "packages/core/src/tools/read-many-files.ts",
        "discussion_id": "2227317710",
        "commented_code": "@@ -432,34 +434,69 @@ Use this tool when the user's query implies needing the content of several files\n         this.config.getTargetDir(),\n       );\n \n-      if (fileReadResult.error) {\n-        skippedFiles.push({\n-          path: relativePathForDisplay,\n-          reason: `Read error: ${fileReadResult.error}`,\n-        });\n-      } else {\n-        if (typeof fileReadResult.llmContent === 'string') {\n-          const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(\n-            '{filePath}',\n-            filePath,\n-          );\n-          contentParts.push(`${separator}\\n\\n${fileReadResult.llmContent}\\n\\n`);\n+      return {\n+        success: !fileReadResult.error,\n+        filePath,\n+        relativePathForDisplay,\n+        fileReadResult,\n+        reason: fileReadResult.error\n+          ? `Read error: ${fileReadResult.error}`\n+          : undefined,\n+      };\n+    });\n+\n+    // Wait for all file processing to complete\n+    const results = await Promise.allSettled(fileProcessingPromises);\n+\n+    // Process results\n+    for (const result of results) {\n+      if (result.status === 'fulfilled') {\n+        const fileResult = result.value;\n+\n+        if (!fileResult.success) {\n+          // Handle skipped files (images/PDFs not requested or read errors)\n+          skippedFiles.push({\n+            path: fileResult.relativePathForDisplay,\n+            reason: fileResult.reason!,\n+          });\n         } else {\n-          contentParts.push(fileReadResult.llmContent); // This is a Part for image/pdf\n+          // Handle successfully processed files\n+          const { filePath, relativePathForDisplay, fileReadResult } =\n+            fileResult;\n+\n+          if (typeof fileReadResult!.llmContent === 'string') {\n+            const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(",
        "comment_created_at": "2025-07-24T04:38:36+00:00",
        "comment_author": "jacob314",
        "comment_body": "tweak so you don't need the `!` after fileReadResult here and elsewhere. likely you can fix by a union type so fileReadResult is required when success is true. alternately add a case above that should never be it where you report an error if fileReadResult is undefined but success is true with a comment that it shouldn't occur.",
        "pr_file_module": null
      },
      {
        "comment_id": "2227353097",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4763,
        "pr_file": "packages/core/src/tools/read-many-files.ts",
        "discussion_id": "2227317710",
        "commented_code": "@@ -432,34 +434,69 @@ Use this tool when the user's query implies needing the content of several files\n         this.config.getTargetDir(),\n       );\n \n-      if (fileReadResult.error) {\n-        skippedFiles.push({\n-          path: relativePathForDisplay,\n-          reason: `Read error: ${fileReadResult.error}`,\n-        });\n-      } else {\n-        if (typeof fileReadResult.llmContent === 'string') {\n-          const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(\n-            '{filePath}',\n-            filePath,\n-          );\n-          contentParts.push(`${separator}\\n\\n${fileReadResult.llmContent}\\n\\n`);\n+      return {\n+        success: !fileReadResult.error,\n+        filePath,\n+        relativePathForDisplay,\n+        fileReadResult,\n+        reason: fileReadResult.error\n+          ? `Read error: ${fileReadResult.error}`\n+          : undefined,\n+      };\n+    });\n+\n+    // Wait for all file processing to complete\n+    const results = await Promise.allSettled(fileProcessingPromises);\n+\n+    // Process results\n+    for (const result of results) {\n+      if (result.status === 'fulfilled') {\n+        const fileResult = result.value;\n+\n+        if (!fileResult.success) {\n+          // Handle skipped files (images/PDFs not requested or read errors)\n+          skippedFiles.push({\n+            path: fileResult.relativePathForDisplay,\n+            reason: fileResult.reason!,\n+          });\n         } else {\n-          contentParts.push(fileReadResult.llmContent); // This is a Part for image/pdf\n+          // Handle successfully processed files\n+          const { filePath, relativePathForDisplay, fileReadResult } =\n+            fileResult;\n+\n+          if (typeof fileReadResult!.llmContent === 'string') {\n+            const separator = DEFAULT_OUTPUT_SEPARATOR_FORMAT.replace(",
        "comment_created_at": "2025-07-24T05:07:43+00:00",
        "comment_author": "Han5991",
        "comment_body": "@jacob314 \r\nFixed! Replaced non-null assertions with union types for better type safety. TypeScript now properly narrows types based on the `success` field. All tests passing \u2705",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2220176665",
    "pr_number": 4619,
    "pr_file": "packages/core/src/core/client.ts",
    "created_at": "2025-07-21T20:19:33+00:00",
    "commented_code": "}\n \n   getContentGenerator(): ContentGenerator {\n-    if (!this.contentGenerator) {\n-      throw new Error('Content generator not initialized');\n-    }\n-    return this.contentGenerator;\n+    return this.contentGenerator!;",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2220220748",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4619,
        "pr_file": "packages/core/src/core/client.ts",
        "discussion_id": "2220176665",
        "commented_code": "@@ -124,10 +124,7 @@ export class GeminiClient {\n   }\n \n   getContentGenerator(): ContentGenerator {\n-    if (!this.contentGenerator) {\n-      throw new Error('Content generator not initialized');\n-    }\n-    return this.contentGenerator;\n+    return this.contentGenerator!;",
        "comment_created_at": "2025-07-21T20:19:33+00:00",
        "comment_author": "jacob314",
        "comment_body": "this change seems a little unrelated and generally agree with Gemini that it is safer to have this `throw`  unless this.contentGenerator can't possibly be null but the type system just can't figure it out.",
        "pr_file_module": null
      },
      {
        "comment_id": "2223059156",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4619,
        "pr_file": "packages/core/src/core/client.ts",
        "discussion_id": "2220176665",
        "commented_code": "@@ -124,10 +124,7 @@ export class GeminiClient {\n   }\n \n   getContentGenerator(): ContentGenerator {\n-    if (!this.contentGenerator) {\n-      throw new Error('Content generator not initialized');\n-    }\n-    return this.contentGenerator;\n+    return this.contentGenerator!;",
        "comment_created_at": "2025-07-22T16:05:38+00:00",
        "comment_author": "scidomino",
        "comment_body": "Agreed. I reverted the change before it was merge.",
        "pr_file_module": null
      }
    ]
  }
]