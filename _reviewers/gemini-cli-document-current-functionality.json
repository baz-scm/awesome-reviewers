[
  {
    "discussion_id": "2187570884",
    "pr_number": 2978,
    "pr_file": "docs/core/memport.md",
    "created_at": "2025-07-05T18:37:22+00:00",
    "commented_code": "# Memory Import Processor\n \n-The Memory Import Processor is a feature that allows you to modularize your GEMINI.md files by importing content from other markdown files using the `@file.md` syntax.\n+> **Note:** The Memory Import Processor has evolved to support both modern compatibility with CLAUDE.md and the original GEMINI.md modular import philosophy. This dual-mode approach reflects feedback from the community and the need for interoperability, while honoring the strengths and intentions of the original design. We appreciate the contributions and suggestions that have shaped this feature for all users.",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2187570884",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2978,
        "pr_file": "docs/core/memport.md",
        "discussion_id": "2187570884",
        "commented_code": "@@ -1,24 +1,58 @@\n # Memory Import Processor\n \n-The Memory Import Processor is a feature that allows you to modularize your GEMINI.md files by importing content from other markdown files using the `@file.md` syntax.\n+> **Note:** The Memory Import Processor has evolved to support both modern compatibility with CLAUDE.md and the original GEMINI.md modular import philosophy. This dual-mode approach reflects feedback from the community and the need for interoperability, while honoring the strengths and intentions of the original design. We appreciate the contributions and suggestions that have shaped this feature for all users.",
        "comment_created_at": "2025-07-05T18:37:22+00:00",
        "comment_author": "jackpal",
        "comment_body": "I don't think readers of memport.md need to know that memport used to work differently.\r\n\r\nRewrite this to just document the way things work after the pull request is merged.\r\n\r\nIf you feel strongly that you need to document the reasons for the change, move that information to the pull request comment.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2187576362",
    "pr_number": 2978,
    "pr_file": "docs/core/memport.md",
    "created_at": "2025-07-05T18:40:17+00:00",
    "commented_code": "# Memory Import Processor\n \n-The Memory Import Processor is a feature that allows you to modularize your GEMINI.md files by importing content from other markdown files using the `@file.md` syntax.\n+> **Note:** The Memory Import Processor has evolved to support both modern compatibility with CLAUDE.md and the original GEMINI.md modular import philosophy. This dual-mode approach reflects feedback from the community and the need for interoperability, while honoring the strengths and intentions of the original design. We appreciate the contributions and suggestions that have shaped this feature for all users.\n \n-## Overview\n+## Import Modes: CLAUDE.md Compatibility vs. Original GEMINI.md\n \n-This feature enables you to break down large GEMINI.md files into smaller, more manageable components that can be reused across different contexts. The import processor supports both relative and absolute paths, with built-in safety features to prevent circular imports and ensure file access security.\n+The Memory Import Processor now supports two modes of operation:\n \n-## Important Limitations\n+| Feature                        | CLAUDE.md Compatibility Mode (Current Default) | Original GEMINI.md Mode (Legacy) |",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2187576362",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2978,
        "pr_file": "docs/core/memport.md",
        "discussion_id": "2187576362",
        "commented_code": "@@ -1,24 +1,58 @@\n # Memory Import Processor\n \n-The Memory Import Processor is a feature that allows you to modularize your GEMINI.md files by importing content from other markdown files using the `@file.md` syntax.\n+> **Note:** The Memory Import Processor has evolved to support both modern compatibility with CLAUDE.md and the original GEMINI.md modular import philosophy. This dual-mode approach reflects feedback from the community and the need for interoperability, while honoring the strengths and intentions of the original design. We appreciate the contributions and suggestions that have shaped this feature for all users.\n \n-## Overview\n+## Import Modes: CLAUDE.md Compatibility vs. Original GEMINI.md\n \n-This feature enables you to break down large GEMINI.md files into smaller, more manageable components that can be reused across different contexts. The import processor supports both relative and absolute paths, with built-in safety features to prevent circular imports and ensure file access security.\n+The Memory Import Processor now supports two modes of operation:\n \n-## Important Limitations\n+| Feature                        | CLAUDE.md Compatibility Mode (Current Default) | Original GEMINI.md Mode (Legacy) |",
        "comment_created_at": "2025-07-05T18:40:17+00:00",
        "comment_author": "jackpal",
        "comment_body": "You're putting way too much effort into documenting and supporting the old mode, which has been live for less than a week. There can't be enough users of the old mode for supporting it to matter, _at all_. \r\n\r\nI recommend move the full table to the pull request, and here just document how the new version works.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2188448279",
    "pr_number": 2978,
    "pr_file": "docs/core/memport.md",
    "created_at": "2025-07-06T16:15:35+00:00",
    "commented_code": "The tree preserves the order that files were imported and shows the complete import chain for debugging purposes.\n \n+## Comparison to Claude's `/memory` (`claude.md`) Approach\n+\n+Claude's `/memory` feature (as seen in `claude.md`) produces a flat, linear document by concatenating all included files, sometimes with simple comments marking file boundaries. It does **not** track or expose the import hierarchy.\n+\n+**This implementation is inspired by Claude's approach, but adds:**\n+- A hierarchical import tree, showing which files were included and in what order.\n+- More robust code region detection using the `marked` library.",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2188448279",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2978,
        "pr_file": "docs/core/memport.md",
        "discussion_id": "2188448279",
        "commented_code": "@@ -128,6 +128,15 @@ Memory Files\n \n The tree preserves the order that files were imported and shows the complete import chain for debugging purposes.\n \n+## Comparison to Claude's `/memory` (`claude.md`) Approach\n+\n+Claude's `/memory` feature (as seen in `claude.md`) produces a flat, linear document by concatenating all included files, sometimes with simple comments marking file boundaries. It does **not** track or expose the import hierarchy.\n+\n+**This implementation is inspired by Claude's approach, but adds:**\n+- A hierarchical import tree, showing which files were included and in what order.\n+- More robust code region detection using the `marked` library.",
        "comment_created_at": "2025-07-06T16:15:35+00:00",
        "comment_author": "jackpal",
        "comment_body": "I'd remove this statement, unless you know for a fact what the implementation is.\r\n\r\nFWIW, you can check the node dependencies of Claude Code, and see that it has `marked` as one of its dependencies. So it is possible that it is using marked to tokenize CLAUDE.md files.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214453287",
    "pr_number": 4247,
    "pr_file": "README.md",
    "created_at": "2025-07-17T22:56:58+00:00",
    "commented_code": "- Ground your queries with the [Google Search](https://ai.google.dev/gemini-api/docs/grounding)\n   tool, built in to Gemini.\n \n+## Table of Contents",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2214453287",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4247,
        "pr_file": "README.md",
        "discussion_id": "2214453287",
        "commented_code": "@@ -17,6 +17,23 @@ With the Gemini CLI you can:\n - Ground your queries with the [Google Search](https://ai.google.dev/gemini-api/docs/grounding)\n   tool, built in to Gemini.\n \n+## Table of Contents",
        "comment_created_at": "2025-07-17T22:56:58+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "@jackwotherspoon @jkcinouye whatchu think?",
        "pr_file_module": null
      },
      {
        "comment_id": "2214517168",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4247,
        "pr_file": "README.md",
        "discussion_id": "2214453287",
        "commented_code": "@@ -17,6 +17,23 @@ With the Gemini CLI you can:\n - Ground your queries with the [Google Search](https://ai.google.dev/gemini-api/docs/grounding)\n   tool, built in to Gemini.\n \n+## Table of Contents",
        "comment_created_at": "2025-07-17T23:53:46+00:00",
        "comment_author": "jackwotherspoon",
        "comment_body": "@NTaylorMullen \r\n\r\nMy 2 cents: I think a TOC is unnecessary here, the README is pretty short in general. For a longer README it would make sense, but I actually think the TOC on a short README hinders readability.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2175549738",
    "pr_number": 2720,
    "pr_file": "SECURITY.md",
    "created_at": "2025-06-30T17:18:55+00:00",
    "commented_code": "+# Security Policy\n+\n+## Supported Versions\n+\n+Use this section to tell people about which versions of your project are\n+currently being supported with security updates.",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2175554545",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2720,
        "pr_file": "SECURITY.md",
        "discussion_id": "2175549738",
        "commented_code": "@@ -0,0 +1,21 @@\n+# Security Policy\n+\n+## Supported Versions\n+\n+Use this section to tell people about which versions of your project are\n+currently being supported with security updates.",
        "comment_created_at": "2025-06-30T17:18:55+00:00",
        "comment_author": "akabarki76",
        "comment_body": " ## Supported Versions\r\n-Use this section to tell people about which versions of your project are\r\n-currently being supported with security updates.\r\n+The following versions receive security updates:\r\n+\r\n+| Version range       | Supported? |\r\n+| ------------------- | :--------: |\r\n+| >=0.1.0 <0.2.0      |     \u2705     |",
        "pr_file_module": null
      }
    ]
  }
]