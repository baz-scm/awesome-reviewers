[
  {
    "discussion_id": "2173310827",
    "pr_number": 2230,
    "pr_file": "packages/core/src/utils/importProcessor.ts",
    "created_at": "2025-06-28T14:50:46+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import * as fs from 'fs/promises';\n+import * as path from 'path';\n+\n+// Simple console logger for import processing\n+const logger = {\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  debug: (...args: any[]) =>\n+    console.debug('[DEBUG] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  warn: (...args: any[]) => console.warn('[WARN] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  error: (...args: any[]) =>\n+    console.error('[ERROR] [ImportProcessor]', ...args),\n+};\n+\n+/**\n+ * Interface for tracking import processing state to prevent circular imports\n+ */\n+interface ImportState {\n+  processedFiles: Set<string>;\n+  maxDepth: number;\n+  currentDepth: number;\n+  currentFile?: string; // Track the current file being processed\n+}\n+\n+/**\n+ * Processes import statements in GEMINI.md content\n+ * Supports @path/to/file.md syntax for importing content from other files\n+ *\n+ * @param content - The content to process for imports\n+ * @param basePath - The directory path where the current file is located\n+ * @param debugMode - Whether to enable debug logging\n+ * @param importState - State tracking for circular import prevention\n+ * @returns Processed content with imports resolved\n+ */\n+export async function processImports(\n+  content: string,\n+  basePath: string,\n+  debugMode: boolean = false,\n+  importState: ImportState = {\n+    processedFiles: new Set(),\n+    maxDepth: 10,\n+    currentDepth: 0,\n+  },\n+): Promise<string> {\n+  if (importState.currentDepth >= importState.maxDepth) {\n+    if (debugMode) {\n+      logger.warn(\n+        `Maximum import depth (${importState.maxDepth}) reached. Stopping import processing.`,\n+      );\n+    }\n+    return content;\n+  }\n+\n+  // Regex to match @path/to/file.md imports\n+  // Supports both @path/to/file.md and @./path/to/file.md syntax\n+  const importRegex = /@([./]?[^\\s\n]+\\.md)/g;",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2173310827",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2230,
        "pr_file": "packages/core/src/utils/importProcessor.ts",
        "discussion_id": "2173310827",
        "commented_code": "@@ -0,0 +1,185 @@\n+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import * as fs from 'fs/promises';\n+import * as path from 'path';\n+\n+// Simple console logger for import processing\n+const logger = {\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  debug: (...args: any[]) =>\n+    console.debug('[DEBUG] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  warn: (...args: any[]) => console.warn('[WARN] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  error: (...args: any[]) =>\n+    console.error('[ERROR] [ImportProcessor]', ...args),\n+};\n+\n+/**\n+ * Interface for tracking import processing state to prevent circular imports\n+ */\n+interface ImportState {\n+  processedFiles: Set<string>;\n+  maxDepth: number;\n+  currentDepth: number;\n+  currentFile?: string; // Track the current file being processed\n+}\n+\n+/**\n+ * Processes import statements in GEMINI.md content\n+ * Supports @path/to/file.md syntax for importing content from other files\n+ *\n+ * @param content - The content to process for imports\n+ * @param basePath - The directory path where the current file is located\n+ * @param debugMode - Whether to enable debug logging\n+ * @param importState - State tracking for circular import prevention\n+ * @returns Processed content with imports resolved\n+ */\n+export async function processImports(\n+  content: string,\n+  basePath: string,\n+  debugMode: boolean = false,\n+  importState: ImportState = {\n+    processedFiles: new Set(),\n+    maxDepth: 10,\n+    currentDepth: 0,\n+  },\n+): Promise<string> {\n+  if (importState.currentDepth >= importState.maxDepth) {\n+    if (debugMode) {\n+      logger.warn(\n+        `Maximum import depth (${importState.maxDepth}) reached. Stopping import processing.`,\n+      );\n+    }\n+    return content;\n+  }\n+\n+  // Regex to match @path/to/file.md imports\n+  // Supports both @path/to/file.md and @./path/to/file.md syntax\n+  const importRegex = /@([./]?[^\\s\\n]+\\.md)/g;",
        "comment_created_at": "2025-06-28T14:50:46+00:00",
        "comment_author": "allenhutchison",
        "comment_body": "When you add the docs for this, can you make sure to call out clearly that this is scoped only to md files? Also I'd like to see a console.warn for people who are trying to import non-md files. If I have:\r\n\r\n@foo/instructions.txt that would fail and I don't think that would be obvious to a person trying to use this.",
        "pr_file_module": null
      },
      {
        "comment_id": "2173593684",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2230,
        "pr_file": "packages/core/src/utils/importProcessor.ts",
        "discussion_id": "2173310827",
        "commented_code": "@@ -0,0 +1,185 @@\n+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import * as fs from 'fs/promises';\n+import * as path from 'path';\n+\n+// Simple console logger for import processing\n+const logger = {\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  debug: (...args: any[]) =>\n+    console.debug('[DEBUG] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  warn: (...args: any[]) => console.warn('[WARN] [ImportProcessor]', ...args),\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  error: (...args: any[]) =>\n+    console.error('[ERROR] [ImportProcessor]', ...args),\n+};\n+\n+/**\n+ * Interface for tracking import processing state to prevent circular imports\n+ */\n+interface ImportState {\n+  processedFiles: Set<string>;\n+  maxDepth: number;\n+  currentDepth: number;\n+  currentFile?: string; // Track the current file being processed\n+}\n+\n+/**\n+ * Processes import statements in GEMINI.md content\n+ * Supports @path/to/file.md syntax for importing content from other files\n+ *\n+ * @param content - The content to process for imports\n+ * @param basePath - The directory path where the current file is located\n+ * @param debugMode - Whether to enable debug logging\n+ * @param importState - State tracking for circular import prevention\n+ * @returns Processed content with imports resolved\n+ */\n+export async function processImports(\n+  content: string,\n+  basePath: string,\n+  debugMode: boolean = false,\n+  importState: ImportState = {\n+    processedFiles: new Set(),\n+    maxDepth: 10,\n+    currentDepth: 0,\n+  },\n+): Promise<string> {\n+  if (importState.currentDepth >= importState.maxDepth) {\n+    if (debugMode) {\n+      logger.warn(\n+        `Maximum import depth (${importState.maxDepth}) reached. Stopping import processing.`,\n+      );\n+    }\n+    return content;\n+  }\n+\n+  // Regex to match @path/to/file.md imports\n+  // Supports both @path/to/file.md and @./path/to/file.md syntax\n+  const importRegex = /@([./]?[^\\s\\n]+\\.md)/g;",
        "comment_created_at": "2025-06-29T04:28:15+00:00",
        "comment_author": "bniladridas",
        "comment_body": "Thank you for this, I have just ensured it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2223765457",
    "pr_number": 3936,
    "pr_file": "packages/cli/src/ui/commands/vimCommand.ts",
    "created_at": "2025-07-22T20:30:36+00:00",
    "commented_code": "+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import { CommandKind, SlashCommand } from './types.js';\n+\n+export const vimCommand: SlashCommand = {\n+  name: 'vim',\n+  description: 'toggle vim mode on/off',\n+  kind: CommandKind.BUILT_IN,\n+  action: async (context, _args) => {\n+    const { toggleVimMode } = context.ui;\n+\n+    toggleVimMode();\n+\n+    // No message - silent toggle",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2223765457",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 3936,
        "pr_file": "packages/cli/src/ui/commands/vimCommand.ts",
        "discussion_id": "2223765457",
        "commented_code": "@@ -0,0 +1,20 @@\n+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import { CommandKind, SlashCommand } from './types.js';\n+\n+export const vimCommand: SlashCommand = {\n+  name: 'vim',\n+  description: 'toggle vim mode on/off',\n+  kind: CommandKind.BUILT_IN,\n+  action: async (context, _args) => {\n+    const { toggleVimMode } = context.ui;\n+\n+    toggleVimMode();\n+\n+    // No message - silent toggle",
        "comment_created_at": "2025-07-22T20:30:36+00:00",
        "comment_author": "jacob314",
        "comment_body": "I think we should add a message.\nThe message entering vim mode should tell you how to toggle between INSERT and NORMAL modes and the message leaving should clarify that you have left vim mode.",
        "pr_file_module": null
      },
      {
        "comment_id": "2224698521",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 3936,
        "pr_file": "packages/cli/src/ui/commands/vimCommand.ts",
        "discussion_id": "2223765457",
        "commented_code": "@@ -0,0 +1,20 @@\n+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import { CommandKind, SlashCommand } from './types.js';\n+\n+export const vimCommand: SlashCommand = {\n+  name: 'vim',\n+  description: 'toggle vim mode on/off',\n+  kind: CommandKind.BUILT_IN,\n+  action: async (context, _args) => {\n+    const { toggleVimMode } = context.ui;\n+\n+    toggleVimMode();\n+\n+    // No message - silent toggle",
        "comment_created_at": "2025-07-23T07:43:10+00:00",
        "comment_author": "sijieamoy",
        "comment_body": "Added a message when enabling the Vim mode. I agree it's a good idea to show the basics of mode toggling just in case someone accidentally enables it. Didn't add the exit message though given the lower ROI.\r\n<img width=\"614\" height=\"78\" alt=\"image\" src=\"https://github.com/user-attachments/assets/67a2564a-63f6-461e-bb67-bca50e63b718\" />\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2226647713",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 3936,
        "pr_file": "packages/cli/src/ui/commands/vimCommand.ts",
        "discussion_id": "2223765457",
        "commented_code": "@@ -0,0 +1,20 @@\n+/**\n+ * @license\n+ * Copyright 2025 Google LLC\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import { CommandKind, SlashCommand } from './types.js';\n+\n+export const vimCommand: SlashCommand = {\n+  name: 'vim',\n+  description: 'toggle vim mode on/off',\n+  kind: CommandKind.BUILT_IN,\n+  action: async (context, _args) => {\n+    const { toggleVimMode } = context.ui;\n+\n+    toggleVimMode();\n+\n+    // No message - silent toggle",
        "comment_created_at": "2025-07-23T20:43:31+00:00",
        "comment_author": "jacob314",
        "comment_body": "love that this message is shown inline. I would still like to see a slightly longer message in the list of messages as well. that should be trivial to add removing the `// no message` comment and  adding a message with this content plus a reminder to run `/vim` again to leave the mode.\nThe message when leaving could be as simple as \"Exited Vim mode.`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2147350424",
    "pr_number": 1047,
    "pr_file": "packages/core/src/tools/screenshot.ts",
    "created_at": "2025-06-14T21:49:52+00:00",
    "commented_code": "+\n+import { BaseTool, ToolCallConfirmationDetails, ToolResult } from './tools.js';\n+import screenshot from 'screenshot-desktop';\n+import { Blob } from '@google/genai';\n+\n+\n+/**\n+ * Represents a tool that can \"take a screenshot\" of the current CLI output.\n+ * Since a true graphical screenshot is not possible in this environment,\n+ * this tool will return a textual representation or description of the CLI state.\n+ */\n+export class ScreenshotTool extends BaseTool<unknown, ToolResult> {\n+  constructor() {\n+    super(\n+      'screenshot',\n+      'Screenshot',\n+      'Takes a \"screenshot\" of user screen. Screenshots are useful to gather visual context about the user machine.',\n+      {\n+        properties: {},",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2147350424",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1047,
        "pr_file": "packages/core/src/tools/screenshot.ts",
        "discussion_id": "2147350424",
        "commented_code": "@@ -0,0 +1,72 @@\n+\n+import { BaseTool, ToolCallConfirmationDetails, ToolResult } from './tools.js';\n+import screenshot from 'screenshot-desktop';\n+import { Blob } from '@google/genai';\n+\n+\n+/**\n+ * Represents a tool that can \"take a screenshot\" of the current CLI output.\n+ * Since a true graphical screenshot is not possible in this environment,\n+ * this tool will return a textual representation or description of the CLI state.\n+ */\n+export class ScreenshotTool extends BaseTool<unknown, ToolResult> {\n+  constructor() {\n+    super(\n+      'screenshot',\n+      'Screenshot',\n+      'Takes a \"screenshot\" of user screen. Screenshots are useful to gather visual context about the user machine.',\n+      {\n+        properties: {},",
        "comment_created_at": "2025-06-14T21:49:52+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "You may want to consider asking the model to provide a description of why it wants to have a screenshot. You could then surface that in getDescription and the confirmation",
        "pr_file_module": null
      },
      {
        "comment_id": "2147416826",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1047,
        "pr_file": "packages/core/src/tools/screenshot.ts",
        "discussion_id": "2147350424",
        "commented_code": "@@ -0,0 +1,72 @@\n+\n+import { BaseTool, ToolCallConfirmationDetails, ToolResult } from './tools.js';\n+import screenshot from 'screenshot-desktop';\n+import { Blob } from '@google/genai';\n+\n+\n+/**\n+ * Represents a tool that can \"take a screenshot\" of the current CLI output.\n+ * Since a true graphical screenshot is not possible in this environment,\n+ * this tool will return a textual representation or description of the CLI state.\n+ */\n+export class ScreenshotTool extends BaseTool<unknown, ToolResult> {\n+  constructor() {\n+    super(\n+      'screenshot',\n+      'Screenshot',\n+      'Takes a \"screenshot\" of user screen. Screenshots are useful to gather visual context about the user machine.',\n+      {\n+        properties: {},",
        "comment_created_at": "2025-06-15T03:54:20+00:00",
        "comment_author": "rakyll",
        "comment_body": "I expanded the tool description a bit to provide more use cases. Let's iterate on this.\r\n\r\nCurrently, I'm getting the best experience when I ask for a \"screenshot\" explicitly or mention my screen. There is room for improvement.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151241209",
    "pr_number": 1115,
    "pr_file": "packages/core/src/tools/edit.ts",
    "created_at": "2025-06-17T03:20:03+00:00",
    "commented_code": "'Edit',\n       `Replaces text within a file. By default, replaces a single occurrence, but can replace multiple occurrences when \\`expected_replacements\\` is specified. This tool requires providing significant context around the change to ensure precise targeting. Always use the ${ReadFileTool.Name} tool to examine the file's current content before attempting a text replacement.\n \n+      The user has the ability to modify the proposed content. If modified, this will be stated in the tool response.",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2151241209",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1115,
        "pr_file": "packages/core/src/tools/edit.ts",
        "discussion_id": "2151241209",
        "commented_code": "@@ -81,6 +86,8 @@ export class EditTool\n       'Edit',\n       `Replaces text within a file. By default, replaces a single occurrence, but can replace multiple occurrences when \\`expected_replacements\\` is specified. This tool requires providing significant context around the change to ensure precise targeting. Always use the ${ReadFileTool.Name} tool to examine the file's current content before attempting a text replacement.\n \n+      The user has the ability to modify the proposed content. If modified, this will be stated in the tool response.",
        "comment_created_at": "2025-06-17T03:20:03+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "```suggestion\r\nThe user has the ability to modify the \\`new_string\\` content. If modified, this will be stated in the response.\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2153287086",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1115,
        "pr_file": "packages/core/src/tools/edit.ts",
        "discussion_id": "2151241209",
        "commented_code": "@@ -81,6 +86,8 @@ export class EditTool\n       'Edit',\n       `Replaces text within a file. By default, replaces a single occurrence, but can replace multiple occurrences when \\`expected_replacements\\` is specified. This tool requires providing significant context around the change to ensure precise targeting. Always use the ${ReadFileTool.Name} tool to examine the file's current content before attempting a text replacement.\n \n+      The user has the ability to modify the proposed content. If modified, this will be stated in the tool response.",
        "comment_created_at": "2025-06-17T22:44:30+00:00",
        "comment_author": "ngleo",
        "comment_body": "Updated",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217467736",
    "pr_number": 4511,
    "pr_file": "packages/cli/src/ui/commands/types.ts",
    "created_at": "2025-07-19T21:20:59+00:00",
    "commented_code": "| OpenDialogActionReturn\n   | LoadHistoryActionReturn;\n \n+/**\n+ * Metadata describing a command's origin and expected behavior.\n+ */\n+export interface SlashCommandMetadata {\n+  /** The source of the command definition. */\n+  source: 'built-in' | 'file';\n+\n+  /** The primary behavior of the command. 'Custom' is for commands with unique,\n+   * hard-coded logic (e.g., opening a dialog).\n+   */\n+  behavior: 'Custom'; // `| 'Prompt'` will be added in next PR for Custom Commands.\n+\n+  /** The absolute path to the definition file, if applicable. */\n+  // TODO: filePath?: string;\n+}\n+\n+export interface SlashCommandDefinition {\n+  name: string;\n+  altName?: string;\n+  description?: string;",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2217467736",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4511,
        "pr_file": "packages/cli/src/ui/commands/types.ts",
        "discussion_id": "2217467736",
        "commented_code": "@@ -106,12 +106,54 @@ export type SlashCommandActionReturn =\n   | OpenDialogActionReturn\n   | LoadHistoryActionReturn;\n \n+/**\n+ * Metadata describing a command's origin and expected behavior.\n+ */\n+export interface SlashCommandMetadata {\n+  /** The source of the command definition. */\n+  source: 'built-in' | 'file';\n+\n+  /** The primary behavior of the command. 'Custom' is for commands with unique,\n+   * hard-coded logic (e.g., opening a dialog).\n+   */\n+  behavior: 'Custom'; // `| 'Prompt'` will be added in next PR for Custom Commands.\n+\n+  /** The absolute path to the definition file, if applicable. */\n+  // TODO: filePath?: string;\n+}\n+\n+export interface SlashCommandDefinition {\n+  name: string;\n+  altName?: string;\n+  description?: string;",
        "comment_created_at": "2025-07-19T21:20:59+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "Do we have any commands today that don't have a description? I wonder if we can enforce this to ensure the best possible user experience",
        "pr_file_module": null
      },
      {
        "comment_id": "2217515163",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4511,
        "pr_file": "packages/cli/src/ui/commands/types.ts",
        "discussion_id": "2217467736",
        "commented_code": "@@ -106,12 +106,54 @@ export type SlashCommandActionReturn =\n   | OpenDialogActionReturn\n   | LoadHistoryActionReturn;\n \n+/**\n+ * Metadata describing a command's origin and expected behavior.\n+ */\n+export interface SlashCommandMetadata {\n+  /** The source of the command definition. */\n+  source: 'built-in' | 'file';\n+\n+  /** The primary behavior of the command. 'Custom' is for commands with unique,\n+   * hard-coded logic (e.g., opening a dialog).\n+   */\n+  behavior: 'Custom'; // `| 'Prompt'` will be added in next PR for Custom Commands.\n+\n+  /** The absolute path to the definition file, if applicable. */\n+  // TODO: filePath?: string;\n+}\n+\n+export interface SlashCommandDefinition {\n+  name: string;\n+  altName?: string;\n+  description?: string;",
        "comment_created_at": "2025-07-20T00:35:52+00:00",
        "comment_author": "abhipatel12",
        "comment_body": "Agreed, made this change. Will rely on the loader to have a placeholder if a user does not provide a description in the custom command use case.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211830666",
    "pr_number": 4312,
    "pr_file": "packages/core/src/core/client.ts",
    "created_at": "2025-07-16T23:39:30+00:00",
    "commented_code": "if (compressed) {\n       yield { type: GeminiEventType.ChatCompressed, value: compressed };\n     }\n+\n+    if (this.config.getIdeMode()) {\n+      const activeFile = ideContext.getActiveFileContext();\n+      if (activeFile?.filePath) {\n+        let context = `\n+Here is information about the user's current IDE context. Use this if relevant to the user's query:",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2211830666",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4312,
        "pr_file": "packages/core/src/core/client.ts",
        "discussion_id": "2211830666",
        "commented_code": "@@ -303,6 +304,24 @@ export class GeminiClient {\n     if (compressed) {\n       yield { type: GeminiEventType.ChatCompressed, value: compressed };\n     }\n+\n+    if (this.config.getIdeMode()) {\n+      const activeFile = ideContext.getActiveFileContext();\n+      if (activeFile?.filePath) {\n+        let context = `\n+Here is information about the user's current IDE context. Use this if relevant to the user's query:",
        "comment_created_at": "2025-07-16T23:39:30+00:00",
        "comment_author": "anj-s",
        "comment_body": "I would say \"These are the files that the user was most recently looking at:\"  I don't know if the agent actually understands \"IDE context\" and if we have defined that somewhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "2211831882",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4312,
        "pr_file": "packages/core/src/core/client.ts",
        "discussion_id": "2211830666",
        "commented_code": "@@ -303,6 +304,24 @@ export class GeminiClient {\n     if (compressed) {\n       yield { type: GeminiEventType.ChatCompressed, value: compressed };\n     }\n+\n+    if (this.config.getIdeMode()) {\n+      const activeFile = ideContext.getActiveFileContext();\n+      if (activeFile?.filePath) {\n+        let context = `\n+Here is information about the user's current IDE context. Use this if relevant to the user's query:",
        "comment_created_at": "2025-07-16T23:40:24+00:00",
        "comment_author": "anj-s",
        "comment_body": "Also mention that you are providing cursor position.",
        "pr_file_module": null
      }
    ]
  }
]