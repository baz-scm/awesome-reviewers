[
  {
    "discussion_id": "2205949457",
    "pr_number": 2157,
    "pr_file": "packages/cli/src/gemini.tsx",
    "created_at": "2025-07-14T22:49:15+00:00",
    "commented_code": "if (settings.merged.selectedAuthType) {\n         // Validate authentication here because the sandbox will interfere with the Oauth2 web redirect.\n         try {\n+          const authStart = performance.now();\n           const err = validateAuthMethod(settings.merged.selectedAuthType);\n           if (err) {\n             throw new Error(err);\n           }\n           await config.refreshAuth(settings.merged.selectedAuthType);\n+          const authEnd = performance.now();\n+          const authDuration = authEnd - authStart;\n+\n+          // Record authentication performance if monitoring is active\n+          if (isPerformanceMonitoringActive()) {\n+            recordStartupPerformance(config, 'authentication', authDuration, {\n+              auth_type: settings.merged.selectedAuthType,\n+            });\n+          }\n         } catch (err) {\n           console.error('Error authenticating:', err);\n           process.exit(1);\n         }\n       }\n+      const sandboxStart = performance.now();",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2205949457",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2157,
        "pr_file": "packages/cli/src/gemini.tsx",
        "discussion_id": "2205949457",
        "commented_code": "@@ -159,17 +216,38 @@ export async function main() {\n       if (settings.merged.selectedAuthType) {\n         // Validate authentication here because the sandbox will interfere with the Oauth2 web redirect.\n         try {\n+          const authStart = performance.now();\n           const err = validateAuthMethod(settings.merged.selectedAuthType);\n           if (err) {\n             throw new Error(err);\n           }\n           await config.refreshAuth(settings.merged.selectedAuthType);\n+          const authEnd = performance.now();\n+          const authDuration = authEnd - authStart;\n+\n+          // Record authentication performance if monitoring is active\n+          if (isPerformanceMonitoringActive()) {\n+            recordStartupPerformance(config, 'authentication', authDuration, {\n+              auth_type: settings.merged.selectedAuthType,\n+            });\n+          }\n         } catch (err) {\n           console.error('Error authenticating:', err);\n           process.exit(1);\n         }\n       }\n+      const sandboxStart = performance.now();",
        "comment_created_at": "2025-07-14T22:49:15+00:00",
        "comment_author": "jacob314",
        "comment_body": "nit: all of these cases are a bit verbose with repeated logic to track a start time, end time and then compute the duration. An alternate more terse api could be something like\r\n```\r\ntrackStartupPerformance(async () => {\r\n   await start_sandbox(sandboxConfig, memoryArgs);\r\n  },\r\n  'sandbox_startup`\r\n);\r\n```\r\nwhere the trackStartupPerformance method could have a no-op implementation if isPerformanceMonitoringActive()\r\nis false.\r\nAs a bonus that would also make it easy to connect this to the performance.measure API in debug builds so that the times are also visible on the chrome devtools timeline.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178927381",
    "pr_number": 1580,
    "pr_file": "packages/cli/src/ui/components/InputPrompt.test.tsx",
    "created_at": "2025-07-02T03:32:33+00:00",
    "commented_code": "expect(props.onSubmit).toHaveBeenCalledWith('some text');\n     unmount();\n   });\n+\n+  describe('clipboard image paste', () => {\n+    beforeEach(() => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(false);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(null);\n+      vi.mocked(clipboardUtils.cleanupOldClipboardImages).mockResolvedValue(undefined);\n+    });\n+\n+    it('should handle Ctrl+V when clipboard has an image', async () => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(true);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(\n+        '/test/.gemini-clipboard/clipboard-123.png'\n+      );\n+\n+      const { stdin, unmount } = render(<InputPrompt {...props} />);\n+      await wait();\n+\n+      // Send Ctrl+V\n+      stdin.write('\\x16'); // Ctrl+V\n+      await wait(100); // Give async operations time to complete",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2178927381",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1580,
        "pr_file": "packages/cli/src/ui/components/InputPrompt.test.tsx",
        "discussion_id": "2178927381",
        "commented_code": "@@ -184,4 +186,118 @@ describe('InputPrompt', () => {\n     expect(props.onSubmit).toHaveBeenCalledWith('some text');\n     unmount();\n   });\n+\n+  describe('clipboard image paste', () => {\n+    beforeEach(() => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(false);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(null);\n+      vi.mocked(clipboardUtils.cleanupOldClipboardImages).mockResolvedValue(undefined);\n+    });\n+\n+    it('should handle Ctrl+V when clipboard has an image', async () => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(true);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(\n+        '/test/.gemini-clipboard/clipboard-123.png'\n+      );\n+\n+      const { stdin, unmount } = render(<InputPrompt {...props} />);\n+      await wait();\n+\n+      // Send Ctrl+V\n+      stdin.write('\\x16'); // Ctrl+V\n+      await wait(100); // Give async operations time to complete",
        "comment_created_at": "2025-07-02T03:32:33+00:00",
        "comment_author": "jacob314",
        "comment_body": "please avoid timeouts in tests as slow tests slow everyone down. Can you use \r\n`await wait(1)` if a wait is really required for this to pass?",
        "pr_file_module": null
      },
      {
        "comment_id": "2178929290",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 1580,
        "pr_file": "packages/cli/src/ui/components/InputPrompt.test.tsx",
        "discussion_id": "2178927381",
        "commented_code": "@@ -184,4 +186,118 @@ describe('InputPrompt', () => {\n     expect(props.onSubmit).toHaveBeenCalledWith('some text');\n     unmount();\n   });\n+\n+  describe('clipboard image paste', () => {\n+    beforeEach(() => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(false);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(null);\n+      vi.mocked(clipboardUtils.cleanupOldClipboardImages).mockResolvedValue(undefined);\n+    });\n+\n+    it('should handle Ctrl+V when clipboard has an image', async () => {\n+      vi.mocked(clipboardUtils.clipboardHasImage).mockResolvedValue(true);\n+      vi.mocked(clipboardUtils.saveClipboardImage).mockResolvedValue(\n+        '/test/.gemini-clipboard/clipboard-123.png'\n+      );\n+\n+      const { stdin, unmount } = render(<InputPrompt {...props} />);\n+      await wait();\n+\n+      // Send Ctrl+V\n+      stdin.write('\\x16'); // Ctrl+V\n+      await wait(100); // Give async operations time to complete",
        "comment_created_at": "2025-07-02T03:35:29+00:00",
        "comment_author": "jacob314",
        "comment_body": "comment applies to all wait calls added in the file",
        "pr_file_module": null
      }
    ]
  }
]