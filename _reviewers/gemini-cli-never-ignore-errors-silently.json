[
  {
    "discussion_id": "2233253496",
    "pr_number": 4686,
    "pr_file": "packages/cli/src/gemini.tsx",
    "created_at": "2025-07-26T20:41:31+00:00",
    "commented_code": "{ exitOnCtrlC: false },\n     );\n \n+    checkForUpdates().then((info) => {",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2233253496",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4686,
        "pr_file": "packages/cli/src/gemini.tsx",
        "discussion_id": "2233253496",
        "commented_code": "@@ -222,6 +224,10 @@ export async function main() {\n       { exitOnCtrlC: false },\n     );\n \n+    checkForUpdates().then((info) => {",
        "comment_created_at": "2025-07-26T20:41:31+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "You'll want to `.catch` this to ensure we don't have an unobserved exception in the worst case",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2209044668",
    "pr_number": 4107,
    "pr_file": "packages/cli/src/ui/components/InputPrompt.tsx",
    "created_at": "2025-07-16T01:57:38+00:00",
    "commented_code": "}\n       }\n     } catch (error) {\n-      console.error('Error handling clipboard image:', error);\n+      // Ignore clipboard image errors",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2209044668",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4107,
        "pr_file": "packages/cli/src/ui/components/InputPrompt.tsx",
        "discussion_id": "2209044668",
        "commented_code": "@@ -227,7 +229,7 @@ export const InputPrompt: React.FC<InputPromptProps> = ({\n         }\n       }\n     } catch (error) {\n-      console.error('Error handling clipboard image:', error);\n+      // Ignore clipboard image errors",
        "comment_created_at": "2025-07-16T01:57:38+00:00",
        "comment_author": "jacob314",
        "comment_body": "please continue to log errors handling clipboard images so users can understand what went wrong.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2232217051",
    "pr_number": 4417,
    "pr_file": "packages/cli/src/gemini.tsx",
    "created_at": "2025-07-25T23:37:31+00:00",
    "commented_code": "}\n import { runAcpPeer } from './acp/acpPeer.js';\n \n+export function setupUnhandledRejectionHandler() {\n+  let unhandledRejectionOccurred = false;\n+  process.on('unhandledRejection', (reason, _promise) => {\n+    const errorMessage = `=========================================\n+CRITICAL: Unhandled Promise Rejection!\n+=========================================\n+This is an unexpected error. Please file a bug report using the /bug tool.",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2232217051",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4417,
        "pr_file": "packages/cli/src/gemini.tsx",
        "discussion_id": "2232217051",
        "commented_code": "@@ -86,7 +87,30 @@ async function relaunchWithAdditionalArgs(additionalArgs: string[]) {\n }\n import { runAcpPeer } from './acp/acpPeer.js';\n \n+export function setupUnhandledRejectionHandler() {\n+  let unhandledRejectionOccurred = false;\n+  process.on('unhandledRejection', (reason, _promise) => {\n+    const errorMessage = `=========================================\n+CRITICAL: Unhandled Promise Rejection!\n+=========================================\n+This is an unexpected error. Please file a bug report using the /bug tool.",
        "comment_created_at": "2025-07-25T23:37:31+00:00",
        "comment_author": "NTaylorMullen",
        "comment_body": "Can you put this line at the very top of this error so it's the first thing people read (especially the /bug part)",
        "pr_file_module": null
      },
      {
        "comment_id": "2232283502",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4417,
        "pr_file": "packages/cli/src/gemini.tsx",
        "discussion_id": "2232217051",
        "commented_code": "@@ -86,7 +87,30 @@ async function relaunchWithAdditionalArgs(additionalArgs: string[]) {\n }\n import { runAcpPeer } from './acp/acpPeer.js';\n \n+export function setupUnhandledRejectionHandler() {\n+  let unhandledRejectionOccurred = false;\n+  process.on('unhandledRejection', (reason, _promise) => {\n+    const errorMessage = `=========================================\n+CRITICAL: Unhandled Promise Rejection!\n+=========================================\n+This is an unexpected error. Please file a bug report using the /bug tool.",
        "comment_created_at": "2025-07-26T00:31:06+00:00",
        "comment_author": "jacob314",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2217579115",
    "pr_number": 4510,
    "pr_file": "packages/cli/src/ui/components/Footer.tsx",
    "created_at": "2025-07-20T05:41:49+00:00",
    "commented_code": "showMemoryUsage,\n   promptTokenCount,\n   nightly,\n+  display,\n }) => {\n   const limit = tokenLimit(model);\n   const percentage = promptTokenCount / limit;\n \n+  if (display.footer === false) {",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2217579115",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4510,
        "pr_file": "packages/cli/src/ui/components/Footer.tsx",
        "discussion_id": "2217579115",
        "commented_code": "@@ -39,10 +41,15 @@ export const Footer: React.FC<FooterProps> = ({\n   showMemoryUsage,\n   promptTokenCount,\n   nightly,\n+  display,\n }) => {\n   const limit = tokenLimit(model);\n   const percentage = promptTokenCount / limit;\n \n+  if (display.footer === false) {",
        "comment_created_at": "2025-07-20T05:41:49+00:00",
        "comment_author": "jacob314",
        "comment_body": "one concern is that users of this setting will not be able to tell when errors have occurred. I would be more comfortable with the option if we still showed the number of errors that had occurred even when displayFooter is false.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174181083",
    "pr_number": 2641,
    "pr_file": "packages/cli/src/gemini.tsx",
    "created_at": "2025-06-30T04:50:32+00:00",
    "commented_code": "if (config.getCheckpointingEnabled()) {\n     try {\n       await config.getGitService();\n-    } catch {\n-      // For now swallow the error, later log it.\n+    } catch (error) {\n+      console.error('Failed to initialize the Git service for checkpointing. This feature will be disabled for the current session. Reason:', error instanceof Error ? error.stack : error);",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2174216157",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2641,
        "pr_file": "packages/cli/src/gemini.tsx",
        "discussion_id": "2174181083",
        "commented_code": "@@ -118,8 +118,8 @@ export async function main() {\n   if (config.getCheckpointingEnabled()) {\n     try {\n       await config.getGitService();\n-    } catch {\n-      // For now swallow the error, later log it.\n+    } catch (error) {\n+      console.error('Failed to initialize the Git service for checkpointing. This feature will be disabled for the current session. Reason:', error instanceof Error ? error.stack : error);",
        "comment_created_at": "2025-06-30T04:50:32+00:00",
        "comment_author": "mighty-baseplate",
        "comment_body": "Thank you for the suggestion \u2014 that makes a lot of sense.\r\n\r\nI've updated it to show only error.message by default for clarity, and it now includes error.stack only when in debug mode. This should offer a better balance between user-friendliness and developer insight.",
        "pr_file_module": null
      }
    ]
  }
]