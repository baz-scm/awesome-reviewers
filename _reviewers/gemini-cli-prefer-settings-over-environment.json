[
  {
    "discussion_id": "2216707203",
    "pr_number": 4432,
    "pr_file": "packages/cli/src/ui/hooks/useKeypress.ts",
    "created_at": "2025-07-18T18:51:58+00:00",
    "commented_code": "if (key.name === 'return' && key.sequence === '\\x1B\\r') {\n             key.meta = true;\n           }\n+\n+          // readline doesn't set the ctrl flag for byte sequences x7f and x08\n+          // so we need to set it up manually when needed\n+          if (\n+            key.name === 'backspace' &&\n+            !key.ctrl &&\n+            process.env.GEMINI_CLI_CTRL_BACKSPACE_MODE === 'true'",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2216707203",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4432,
        "pr_file": "packages/cli/src/ui/hooks/useKeypress.ts",
        "discussion_id": "2216707203",
        "commented_code": "@@ -87,6 +87,27 @@ export function useKeypress(\n           if (key.name === 'return' && key.sequence === '\\x1B\\r') {\n             key.meta = true;\n           }\n+\n+          // readline doesn't set the ctrl flag for byte sequences x7f and x08\n+          // so we need to set it up manually when needed\n+          if (\n+            key.name === 'backspace' &&\n+            !key.ctrl &&\n+            process.env.GEMINI_CLI_CTRL_BACKSPACE_MODE === 'true'",
        "comment_created_at": "2025-07-18T18:51:58+00:00",
        "comment_author": "jacob314",
        "comment_body": "remove this env variable. I don't think this needs a setting but if it did, we should instead add it to settings.ts rather than checking env variables directly. that is the generally preferred way for us to manage user options that some users might want to opt into.",
        "pr_file_module": null
      },
      {
        "comment_id": "2217028316",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4432,
        "pr_file": "packages/cli/src/ui/hooks/useKeypress.ts",
        "discussion_id": "2216707203",
        "commented_code": "@@ -87,6 +87,27 @@ export function useKeypress(\n           if (key.name === 'return' && key.sequence === '\\x1B\\r') {\n             key.meta = true;\n           }\n+\n+          // readline doesn't set the ctrl flag for byte sequences x7f and x08\n+          // so we need to set it up manually when needed\n+          if (\n+            key.name === 'backspace' &&\n+            !key.ctrl &&\n+            process.env.GEMINI_CLI_CTRL_BACKSPACE_MODE === 'true'",
        "comment_created_at": "2025-07-18T23:18:15+00:00",
        "comment_author": "Rebraws",
        "comment_body": "It would be great to get rid of the env/setting variable, but I'm not sure if it can be done so easily, the main issue I see is the inconsistency between terminals to handle backspace and ctrl+backspace, let's say we have two terminals\r\n\r\n  Terminal 1: Handles backspace as `0x08` and ctr+backspace as `0x17`\r\n  Terminal 2: Handles backspace as `0x7f` and ctrl+backspace as `0x08`\r\n\r\nCurrently ctrl+backspace works on Terminal 1 but it doesn't work on Terminal 2, by enabling the setting we'll make ctrl+backspace work on Terminal 2 but that would break how backspace works on Terminal 1, because we'll be setting the `ctrl` flag to true for `0x08`, if we enable this fix unconditionally, we could break the normal backspace in some terminals (like xterm).\r\n\r\nBy guarding this under a setting we could make the functionality work on both terminals, maybe the name of the setting isn't the best since ctrl+backspace will work by default on certain terminals like the terminal on vscode, perhaps a name like `legacyCtrlBackspaceFix` or `ctrlBackspaceFix` would be better to clarify that this addresses terminal-specific compatibility issues.\r\n\r\n\r\nMoving the environment variable to settings definitely sounds much better.  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2172914343",
    "pr_number": 2278,
    "pr_file": "packages/cli/src/config/config.ts",
    "created_at": "2025-06-27T21:52:02+00:00",
    "commented_code": "description: `Model`,\n       default: process.env.GEMINI_MODEL || DEFAULT_GEMINI_MODEL,\n     })\n+    .option('force-model', {",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2172914343",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2278,
        "pr_file": "packages/cli/src/config/config.ts",
        "discussion_id": "2172914343",
        "commented_code": "@@ -63,6 +64,11 @@ async function parseArguments(): Promise<CliArgs> {\n       description: `Model`,\n       default: process.env.GEMINI_MODEL || DEFAULT_GEMINI_MODEL,\n     })\n+    .option('force-model', {",
        "comment_created_at": "2025-06-27T21:52:02+00:00",
        "comment_author": "jacob314",
        "comment_body": "we should also probably support force-model in \r\nsettings.ts so you can force it in your settings.json rather than via a command line argument",
        "pr_file_module": null
      },
      {
        "comment_id": "2172959486",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2278,
        "pr_file": "packages/cli/src/config/config.ts",
        "discussion_id": "2172914343",
        "commented_code": "@@ -63,6 +64,11 @@ async function parseArguments(): Promise<CliArgs> {\n       description: `Model`,\n       default: process.env.GEMINI_MODEL || DEFAULT_GEMINI_MODEL,\n     })\n+    .option('force-model', {",
        "comment_created_at": "2025-06-27T22:56:52+00:00",
        "comment_author": "jacob314",
        "comment_body": "sorry after some further thinking. Can we make this only be in settings.json to start out with? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216965591",
    "pr_number": 4460,
    "pr_file": "packages/core/src/utils/memoryDiscovery.ts",
    "created_at": "2025-07-18T21:49:55+00:00",
    "commented_code": "console.error('[ERROR] [MemoryDiscovery]', ...args),\n };\n \n-const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY = 200;\n+const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY =\n+  parseInt(process.env.GEMINI_MEMORY_DISCOVERY_MAX_DIRS ?? '', 10) || 200;",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2216965591",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4460,
        "pr_file": "packages/core/src/utils/memoryDiscovery.ts",
        "discussion_id": "2216965591",
        "commented_code": "@@ -29,7 +29,8 @@ const logger = {\n     console.error('[ERROR] [MemoryDiscovery]', ...args),\n };\n \n-const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY = 200;\n+const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY =\n+  parseInt(process.env.GEMINI_MEMORY_DISCOVERY_MAX_DIRS ?? '', 10) || 200;\n ",
        "comment_created_at": "2025-07-18T21:49:55+00:00",
        "comment_author": "jacob314",
        "comment_body": "it would make this a bit more annoying to use as settings.json is in the CLI package but what do you think of making this be in settings.ts rather than an env variable? this kindof seems like something I might want to set in settings.json. For example, maybe my project is really large so I want a specific value for it.\nin general I'm trying to keep most settings in settings.ts where feasible rather than encouraging more env variables or options in config controlled by args unless they strictly have to go that way. Happy to be convinced otherwise for this case.",
        "pr_file_module": null
      },
      {
        "comment_id": "2216972159",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 4460,
        "pr_file": "packages/core/src/utils/memoryDiscovery.ts",
        "discussion_id": "2216965591",
        "commented_code": "@@ -29,7 +29,8 @@ const logger = {\n     console.error('[ERROR] [MemoryDiscovery]', ...args),\n };\n \n-const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY = 200;\n+const MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY =\n+  parseInt(process.env.GEMINI_MEMORY_DISCOVERY_MAX_DIRS ?? '', 10) || 200;\n ",
        "comment_created_at": "2025-07-18T21:56:45+00:00",
        "comment_author": "KeijiBranshi",
        "comment_body": "I like settings.json! I'll migrate this over to that.\r\n\r\nPassing overkill thought: at some point I think it'd be great to have a cascading hierarchy of settings like this made more explicit in the `Config` construction. Something like\r\n\r\nyargs (CLI args) > settings.json (local project + home directory) > environment variables (`.env` + system) > hardcoded default",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174144692",
    "pr_number": 2609,
    "pr_file": "packages/cli/src/config/config.ts",
    "created_at": "2025-06-30T03:34:59+00:00",
    "commented_code": "description:\n         'Enable or disable logging of user prompts for telemetry. Overrides settings files.',\n     })\n+    .option('hide-footer', {",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2174144692",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2609,
        "pr_file": "packages/cli/src/config/config.ts",
        "discussion_id": "2174144692",
        "commented_code": "@@ -122,6 +123,11 @@ async function parseArguments(): Promise<CliArgs> {\n       description:\n         'Enable or disable logging of user prompts for telemetry. Overrides settings files.',\n     })\n+    .option('hide-footer', {",
        "comment_created_at": "2025-06-30T03:34:59+00:00",
        "comment_author": "jacob314",
        "comment_body": "rather than adding this to config can we instead add it to settings.json with a property added to settings.ts.\r\nGenerally settings.json is a bette place for options that are small UI tweaks than command line flags. If there is a use case where a user wants to frequently change between showing the footer and not showing the footer then I would be open to including it in config.ts\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2176142109",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2609,
        "pr_file": "packages/cli/src/config/config.ts",
        "discussion_id": "2174144692",
        "commented_code": "@@ -122,6 +123,11 @@ async function parseArguments(): Promise<CliArgs> {\n       description:\n         'Enable or disable logging of user prompts for telemetry. Overrides settings files.',\n     })\n+    .option('hide-footer', {",
        "comment_created_at": "2025-06-30T23:33:37+00:00",
        "comment_author": "oneness",
        "comment_body": "@jacob314 Thanks for reviewing the change. I am ok with adding it to settings.json though I'd like to point out following so you can weigh the pro and cons before we reach a way forward:\r\n\r\n1. Footer does have important use cases for diagnostics and at a glance information. \r\n2. The ability to turn it on and off could be very useful for cases where one needs the extra screen space while periodically check context window (other info you guys end up putting there). \r\n\r\nLet me know what you think. ",
        "pr_file_module": null
      }
    ]
  }
]