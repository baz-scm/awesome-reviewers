[
  {
    "discussion_id": "2174653826",
    "pr_number": 2672,
    "pr_file": "integration-tests/env-isolation.test.js",
    "created_at": "2025-06-30T09:56:21+00:00",
    "commented_code": "+#!/usr/bin/env node\n+\n+/**\n+ * Integration tests for environment file isolation feature\n+ * Tests the --ignore-local-env flag and ignoreLocalEnv setting\n+ */\n+\n+const { execSync } = require('child_process');\n+const fs = require('fs');\n+const path = require('path');\n+const os = require('os');\n+\n+// Test setup\n+const testDir = path.join(os.tmpdir(), 'gemini-env-isolation-test-' + Date.now());\n+const projectDir = path.join(testDir, 'project');\n+const nestedDir = path.join(projectDir, 'nested', 'deep');\n+const homeDir = os.homedir();\n+const geminiDir = path.join(homeDir, '.gemini');\n+\n+// Store original env file contents to restore later\n+let originalHomeEnv = null;\n+let originalGeminiEnv = null;\n+let hadHomeEnv = false;\n+let hadGeminiEnv = false;\n+\n+function setup() {\n+  // Create test directories\n+  fs.mkdirSync(testDir, { recursive: true });\n+  fs.mkdirSync(projectDir, { recursive: true });\n+  fs.mkdirSync(nestedDir, { recursive: true });\n+  fs.mkdirSync(path.join(projectDir, '.gemini'), { recursive: true });\n+\n+  // Backup existing home .env files\n+  const homeEnvPath = path.join(homeDir, '.env');\n+  const geminiEnvPath = path.join(geminiDir, '.env');\n+\n+  if (fs.existsSync(homeEnvPath)) {\n+    hadHomeEnv = true;\n+    originalHomeEnv = fs.readFileSync(homeEnvPath, 'utf8');\n+  }\n+\n+  if (fs.existsSync(geminiEnvPath)) {\n+    hadGeminiEnv = true;\n+    originalGeminiEnv = fs.readFileSync(geminiEnvPath, 'utf8');\n+  }\n+\n+  // Create test .env files\n+  fs.writeFileSync(\n+    path.join(projectDir, '.env'),\n+    'TEST_VAR=project_root\nMALICIOUS_VAR=injected_from_project'\n+  );\n+\n+  fs.writeFileSync(\n+    path.join(projectDir, '.gemini', '.env'),\n+    'TEST_VAR=project_gemini\nMALICIOUS_VAR=injected_from_gemini'\n+  );\n+\n+  fs.writeFileSync(\n+    path.join(nestedDir, '.env'),\n+    'TEST_VAR=nested_dir\nMALICIOUS_VAR=injected_from_nested'\n+  );\n+\n+  // Create safe home .env files for testing\n+  fs.mkdirSync(geminiDir, { recursive: true });\n+  fs.writeFileSync(\n+    homeEnvPath,\n+    'TEST_VAR=home_global\nSAFE_VAR=from_home'\n+  );\n+\n+  fs.writeFileSync(\n+    geminiEnvPath,\n+    'TEST_VAR=home_gemini\nSAFE_VAR=from_gemini_home'\n+  );\n+}\n+\n+function cleanup() {\n+  // Remove test directories\n+  fs.rmSync(testDir, { recursive: true, force: true });\n+\n+  // Restore original home .env files\n+  const homeEnvPath = path.join(homeDir, '.env');\n+  const geminiEnvPath = path.join(geminiDir, '.env');\n+\n+  if (hadHomeEnv && originalHomeEnv !== null) {\n+    fs.writeFileSync(homeEnvPath, originalHomeEnv);\n+  } else if (!hadHomeEnv) {\n+    fs.rmSync(homeEnvPath, { force: true });\n+  }\n+\n+  if (hadGeminiEnv && originalGeminiEnv !== null) {\n+    fs.writeFileSync(geminiEnvPath, originalGeminiEnv);\n+  } else if (!hadGeminiEnv) {\n+    fs.rmSync(geminiEnvPath, { force: true });\n+  }\n+}\n+\n+function runGeminiCLI(args, cwd) {\n+  try {\n+    // Create a simple test script that prints environment variables\n+    const testScript = `\n+      console.log(JSON.stringify({\n+        TEST_VAR: process.env.TEST_VAR,\n+        MALICIOUS_VAR: process.env.MALICIOUS_VAR,\n+        SAFE_VAR: process.env.SAFE_VAR\n+      }));\n+    `;\n+\n+    const scriptPath = path.join(cwd, 'test-env.js');\n+    fs.writeFileSync(scriptPath, testScript);\n+\n+    // Run the CLI with the test script\n+    const output = execSync(\n+      `node ${scriptPath}`,\n+      {\n+        cwd,\n+        env: {\n+          ...process.env,\n+          NODE_PATH: path.join(__dirname, '..', 'packages', 'cli', 'node_modules')\n+        },\n+        encoding: 'utf8'\n+      }\n+    );\n+\n+    fs.rmSync(scriptPath);\n+    return JSON.parse(output.trim());\n+  } catch (error) {\n+    console.error('Error running CLI:', error.message);\n+    throw error;\n+  }",
    "repo_full_name": "google-gemini/gemini-cli",
    "discussion_comments": [
      {
        "comment_id": "2174691809",
        "repo_full_name": "google-gemini/gemini-cli",
        "pr_number": 2672,
        "pr_file": "integration-tests/env-isolation.test.js",
        "discussion_id": "2174653826",
        "commented_code": "@@ -0,0 +1,224 @@\n+#!/usr/bin/env node\n+\n+/**\n+ * Integration tests for environment file isolation feature\n+ * Tests the --ignore-local-env flag and ignoreLocalEnv setting\n+ */\n+\n+const { execSync } = require('child_process');\n+const fs = require('fs');\n+const path = require('path');\n+const os = require('os');\n+\n+// Test setup\n+const testDir = path.join(os.tmpdir(), 'gemini-env-isolation-test-' + Date.now());\n+const projectDir = path.join(testDir, 'project');\n+const nestedDir = path.join(projectDir, 'nested', 'deep');\n+const homeDir = os.homedir();\n+const geminiDir = path.join(homeDir, '.gemini');\n+\n+// Store original env file contents to restore later\n+let originalHomeEnv = null;\n+let originalGeminiEnv = null;\n+let hadHomeEnv = false;\n+let hadGeminiEnv = false;\n+\n+function setup() {\n+  // Create test directories\n+  fs.mkdirSync(testDir, { recursive: true });\n+  fs.mkdirSync(projectDir, { recursive: true });\n+  fs.mkdirSync(nestedDir, { recursive: true });\n+  fs.mkdirSync(path.join(projectDir, '.gemini'), { recursive: true });\n+\n+  // Backup existing home .env files\n+  const homeEnvPath = path.join(homeDir, '.env');\n+  const geminiEnvPath = path.join(geminiDir, '.env');\n+\n+  if (fs.existsSync(homeEnvPath)) {\n+    hadHomeEnv = true;\n+    originalHomeEnv = fs.readFileSync(homeEnvPath, 'utf8');\n+  }\n+\n+  if (fs.existsSync(geminiEnvPath)) {\n+    hadGeminiEnv = true;\n+    originalGeminiEnv = fs.readFileSync(geminiEnvPath, 'utf8');\n+  }\n+\n+  // Create test .env files\n+  fs.writeFileSync(\n+    path.join(projectDir, '.env'),\n+    'TEST_VAR=project_root\\nMALICIOUS_VAR=injected_from_project'\n+  );\n+\n+  fs.writeFileSync(\n+    path.join(projectDir, '.gemini', '.env'),\n+    'TEST_VAR=project_gemini\\nMALICIOUS_VAR=injected_from_gemini'\n+  );\n+\n+  fs.writeFileSync(\n+    path.join(nestedDir, '.env'),\n+    'TEST_VAR=nested_dir\\nMALICIOUS_VAR=injected_from_nested'\n+  );\n+\n+  // Create safe home .env files for testing\n+  fs.mkdirSync(geminiDir, { recursive: true });\n+  fs.writeFileSync(\n+    homeEnvPath,\n+    'TEST_VAR=home_global\\nSAFE_VAR=from_home'\n+  );\n+\n+  fs.writeFileSync(\n+    geminiEnvPath,\n+    'TEST_VAR=home_gemini\\nSAFE_VAR=from_gemini_home'\n+  );\n+}\n+\n+function cleanup() {\n+  // Remove test directories\n+  fs.rmSync(testDir, { recursive: true, force: true });\n+\n+  // Restore original home .env files\n+  const homeEnvPath = path.join(homeDir, '.env');\n+  const geminiEnvPath = path.join(geminiDir, '.env');\n+\n+  if (hadHomeEnv && originalHomeEnv !== null) {\n+    fs.writeFileSync(homeEnvPath, originalHomeEnv);\n+  } else if (!hadHomeEnv) {\n+    fs.rmSync(homeEnvPath, { force: true });\n+  }\n+\n+  if (hadGeminiEnv && originalGeminiEnv !== null) {\n+    fs.writeFileSync(geminiEnvPath, originalGeminiEnv);\n+  } else if (!hadGeminiEnv) {\n+    fs.rmSync(geminiEnvPath, { force: true });\n+  }\n+}\n+\n+function runGeminiCLI(args, cwd) {\n+  try {\n+    // Create a simple test script that prints environment variables\n+    const testScript = `\n+      console.log(JSON.stringify({\n+        TEST_VAR: process.env.TEST_VAR,\n+        MALICIOUS_VAR: process.env.MALICIOUS_VAR,\n+        SAFE_VAR: process.env.SAFE_VAR\n+      }));\n+    `;\n+\n+    const scriptPath = path.join(cwd, 'test-env.js');\n+    fs.writeFileSync(scriptPath, testScript);\n+\n+    // Run the CLI with the test script\n+    const output = execSync(\n+      `node ${scriptPath}`,\n+      {\n+        cwd,\n+        env: {\n+          ...process.env,\n+          NODE_PATH: path.join(__dirname, '..', 'packages', 'cli', 'node_modules')\n+        },\n+        encoding: 'utf8'\n+      }\n+    );\n+\n+    fs.rmSync(scriptPath);\n+    return JSON.parse(output.trim());\n+  } catch (error) {\n+    console.error('Error running CLI:', error.message);\n+    throw error;\n+  }",
        "comment_created_at": "2025-06-30T09:56:21+00:00",
        "comment_author": "maslinedwin",
        "comment_body": "\r\n  @gemini-code-assist Thank you for the detailed feedback. You're absolutely right that the integration tests should invoke\r\n  the actual `gemini` CLI executable. I've addressed this in the latest commit:\r\n\r\n  1. **Created `env-isolation-cli.test.js`** - A new integration test that:\r\n     - Invokes the actual `gemini` CLI executable via `node packages/cli/index.js`\r\n     - Tests the `--ignore-local-env` flag with real CLI commands\r\n     - Verifies that malicious `.env` files in the project directory are NOT loaded\r\n     - Confirms that global environment variables are still accessible\r\n     - Tests both the CLI flag and `settings.json` configuration\r\n\r\n  2. **Updated the original test** - Now attempts to run the actual CLI first, with a fallback to module-level testing if\r\n  the CLI isn't fully built\r\n\r\n  3. **Test coverage includes**:\r\n     - Default behavior (loads project .env files)\r\n     - `--ignore-local-env` flag behavior (blocks project .env files)\r\n     - `ignoreLocalEnv` in settings.json (blocks project .env files)\r\n\r\n  The tests now properly validate the actual product's security behavior by executing the real CLI and verifying that\r\n  environment isolation works end-to-end.",
        "pr_file_module": null
      }
    ]
  }
]