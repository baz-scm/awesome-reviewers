[
  {
    "discussion_id": "2053249837",
    "pr_number": 7154,
    "pr_file": "src/apprt/gtk/winproto/wayland.zig",
    "created_at": "2025-04-22T02:53:57+00:00",
    "commented_code": "context.kde_slide_manager = slide_manager;\n                     return;\n                 }\n+                if (registryBind(\n+                    xdg.WmDialogV1,\n+                    registry,\n+                    global,\n+                )) |wm_dialog| {\n+                    context.xdg_wm_dialog = wm_dialog;\n+                    return;\n+                }",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2053249837",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7154,
        "pr_file": "src/apprt/gtk/winproto/wayland.zig",
        "discussion_id": "2053249837",
        "commented_code": "@@ -150,6 +163,14 @@ pub const App = struct {\n                     context.kde_slide_manager = slide_manager;\n                     return;\n                 }\n+                if (registryBind(\n+                    xdg.WmDialogV1,\n+                    registry,\n+                    global,\n+                )) |wm_dialog| {\n+                    context.xdg_wm_dialog = wm_dialog;\n+                    return;\n+                }",
        "comment_created_at": "2025-04-22T02:53:57+00:00",
        "comment_author": "pluiedev",
        "comment_body": "We don't really need to bind to this global as we don't use it for anything. A simple match on the result's protocol name would suffice (see how registryBind is implemented). This would also save us from adding more protocols to the Wayland Zig bindings",
        "pr_file_module": null
      },
      {
        "comment_id": "2055320294",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7154,
        "pr_file": "src/apprt/gtk/winproto/wayland.zig",
        "discussion_id": "2053249837",
        "commented_code": "@@ -150,6 +163,14 @@ pub const App = struct {\n                     context.kde_slide_manager = slide_manager;\n                     return;\n                 }\n+                if (registryBind(\n+                    xdg.WmDialogV1,\n+                    registry,\n+                    global,\n+                )) |wm_dialog| {\n+                    context.xdg_wm_dialog = wm_dialog;\n+                    return;\n+                }",
        "comment_created_at": "2025-04-23T06:14:09+00:00",
        "comment_author": "AnthonyZhOon",
        "comment_body": "Makes sense, figured out how to just compare against the name and set a flag instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1988251933",
    "pr_number": 6661,
    "pr_file": "src/os/flatpak.zig",
    "created_at": "2025-03-11T02:07:03+00:00",
    "commented_code": "fn noopCallback(_: ?*anyopaque, _: *xev.Loop, _: *Completion, _: WaitError!u8) void {}\n };\n+\n+/// A struct to help retrive information about the running Flatpak.\n+///\n+/// Requires GLib to be available and linked.\n+pub const FlatpakInfo = struct {\n+    const Self = @This();\n+    const c = @cImport({\n+        @cInclude(\"glib.h\");\n+    });\n+",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "1988251933",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 6661,
        "pr_file": "src/os/flatpak.zig",
        "discussion_id": "1988251933",
        "commented_code": "@@ -501,3 +501,61 @@ pub const FlatpakHostCommand = struct {\n \n     fn noopCallback(_: ?*anyopaque, _: *xev.Loop, _: *Completion, _: WaitError!u8) void {}\n };\n+\n+/// A struct to help retrive information about the running Flatpak.\n+///\n+/// Requires GLib to be available and linked.\n+pub const FlatpakInfo = struct {\n+    const Self = @This();\n+    const c = @cImport({\n+        @cInclude(\"glib.h\");\n+    });\n+",
        "comment_created_at": "2025-03-11T02:07:03+00:00",
        "comment_author": "jcollie",
        "comment_body": "New code that uses the raw C GTK interfaces is a non-starter, _expecially_ outside `src/gtk`. If you're not sure how to implement the interface that Mitchell described let us know and we can help.",
        "pr_file_module": null
      },
      {
        "comment_id": "1988262900",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 6661,
        "pr_file": "src/os/flatpak.zig",
        "discussion_id": "1988251933",
        "commented_code": "@@ -501,3 +501,61 @@ pub const FlatpakHostCommand = struct {\n \n     fn noopCallback(_: ?*anyopaque, _: *xev.Loop, _: *Completion, _: WaitError!u8) void {}\n };\n+\n+/// A struct to help retrive information about the running Flatpak.\n+///\n+/// Requires GLib to be available and linked.\n+pub const FlatpakInfo = struct {\n+    const Self = @This();\n+    const c = @cImport({\n+        @cInclude(\"glib.h\");\n+    });\n+",
        "comment_created_at": "2025-03-11T02:20:35+00:00",
        "comment_author": "jcollie",
        "comment_body": "CI never got a chance to try macOS builds because of other errors, but this is not going to compile on macOS.",
        "pr_file_module": null
      },
      {
        "comment_id": "1988272527",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 6661,
        "pr_file": "src/os/flatpak.zig",
        "discussion_id": "1988251933",
        "commented_code": "@@ -501,3 +501,61 @@ pub const FlatpakHostCommand = struct {\n \n     fn noopCallback(_: ?*anyopaque, _: *xev.Loop, _: *Completion, _: WaitError!u8) void {}\n };\n+\n+/// A struct to help retrive information about the running Flatpak.\n+///\n+/// Requires GLib to be available and linked.\n+pub const FlatpakInfo = struct {\n+    const Self = @This();\n+    const c = @cImport({\n+        @cInclude(\"glib.h\");\n+    });\n+",
        "comment_created_at": "2025-03-11T02:33:11+00:00",
        "comment_author": "alaviss",
        "comment_body": "> If you're not sure how to implement the interface that Mitchell described let us know and we can help.\r\n\r\nI'd love to have some guidance on this.\r\n\r\nWhat has been bugging me is that Flatpak comes with the distinction of host vs. app paths and it is not clear to me how to model this well.\r\n\r\nRight now my solution is basically just more logic into termio, which isn't really great.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1999249438",
    "pr_number": 6775,
    "pr_file": "src/apprt/gtk/winproto/x11.zig",
    "created_at": "2025-03-17T17:02:21+00:00",
    "commented_code": "const build_options = @import(\"build_options\");\n const Allocator = std.mem.Allocator;\n \n+const adw = @import(\"adw\");\n const gdk = @import(\"gdk\");\n+const gdk_x11 = @import(\"gdk_x11\");\n+const glib = @import(\"glib\");\n+const gobject = @import(\"gobject\");\n+const gtk = @import(\"gtk\");\n+const xlib = @import(\"xlib\");\n \n+// This needs to remain because of the legacy X11 API calls\n const c = @import(\"../c.zig\").c;",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "1999249438",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 6775,
        "pr_file": "src/apprt/gtk/winproto/x11.zig",
        "discussion_id": "1999249438",
        "commented_code": "@@ -4,9 +4,17 @@ const builtin = @import(\"builtin\");\n const build_options = @import(\"build_options\");\n const Allocator = std.mem.Allocator;\n \n+const adw = @import(\"adw\");\n const gdk = @import(\"gdk\");\n+const gdk_x11 = @import(\"gdk_x11\");\n+const glib = @import(\"glib\");\n+const gobject = @import(\"gobject\");\n+const gtk = @import(\"gtk\");\n+const xlib = @import(\"xlib\");\n \n+// This needs to remain because of the legacy X11 API calls\n const c = @import(\"../c.zig\").c;",
        "comment_created_at": "2025-03-17T17:02:21+00:00",
        "comment_author": "pluiedev",
        "comment_body": "I wonder if we can just directly use `@cImport` here\r\n```suggestion\r\nconst c = @cImport({\r\n  @cInclude(\"X11/Xlib.h\");\r\n  @cInclude(\"X11/Xatom.h\");\r\n});\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1999318482",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 6775,
        "pr_file": "src/apprt/gtk/winproto/x11.zig",
        "discussion_id": "1999249438",
        "commented_code": "@@ -4,9 +4,17 @@ const builtin = @import(\"builtin\");\n const build_options = @import(\"build_options\");\n const Allocator = std.mem.Allocator;\n \n+const adw = @import(\"adw\");\n const gdk = @import(\"gdk\");\n+const gdk_x11 = @import(\"gdk_x11\");\n+const glib = @import(\"glib\");\n+const gobject = @import(\"gobject\");\n+const gtk = @import(\"gtk\");\n+const xlib = @import(\"xlib\");\n \n+// This needs to remain because of the legacy X11 API calls\n const c = @import(\"../c.zig\").c;",
        "comment_created_at": "2025-03-17T17:41:26+00:00",
        "comment_author": "jcollie",
        "comment_body": "Fixed.",
        "pr_file_module": null
      }
    ]
  }
]