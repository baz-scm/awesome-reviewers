[
  {
    "discussion_id": "2160018169",
    "pr_number": 7634,
    "pr_file": "macos/Sources/Helpers/Extensions/Array+Extension.swift",
    "created_at": "2025-06-21T11:58:52+00:00",
    "commented_code": "return i + 1\n     }\n }\n+\n+extension Array where Element == String {\n+    /// Executes a closure with an array of C string pointers.\n+    func withCStrings<T>(_ body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+        // Handle empty array\n+        if isEmpty {\n+            return try body([])\n+        }\n+\n+        // Recursive helper to process strings\n+        func helper(index: Int, accumulated: [UnsafePointer<Int8>?], body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+            if index == count {\n+                return try body(accumulated)\n+            } else {",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2160018169",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7634,
        "pr_file": "macos/Sources/Helpers/Extensions/Array+Extension.swift",
        "discussion_id": "2160018169",
        "commented_code": "@@ -21,3 +21,28 @@ extension Array {\n         return i + 1\n     }\n }\n+\n+extension Array where Element == String {\n+    /// Executes a closure with an array of C string pointers.\n+    func withCStrings<T>(_ body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+        // Handle empty array\n+        if isEmpty {\n+            return try body([])\n+        }\n+\n+        // Recursive helper to process strings\n+        func helper(index: Int, accumulated: [UnsafePointer<Int8>?], body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+            if index == count {\n+                return try body(accumulated)\n+            } else {",
        "comment_created_at": "2025-06-21T11:58:52+00:00",
        "comment_author": "jparise",
        "comment_body": "Could remove the `else` (or switch to a `guard`) to avoid nesting the next branch given they both `return`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2160041863",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7634,
        "pr_file": "macos/Sources/Helpers/Extensions/Array+Extension.swift",
        "discussion_id": "2160018169",
        "commented_code": "@@ -21,3 +21,28 @@ extension Array {\n         return i + 1\n     }\n }\n+\n+extension Array where Element == String {\n+    /// Executes a closure with an array of C string pointers.\n+    func withCStrings<T>(_ body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+        // Handle empty array\n+        if isEmpty {\n+            return try body([])\n+        }\n+\n+        // Recursive helper to process strings\n+        func helper(index: Int, accumulated: [UnsafePointer<Int8>?], body: ([UnsafePointer<Int8>?]) throws -> T) rethrows -> T {\n+            if index == count {\n+                return try body(accumulated)\n+            } else {",
        "comment_created_at": "2025-06-21T13:42:27+00:00",
        "comment_author": "mitchellh",
        "comment_body": "Thanks, this was AI slop lol",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1385721751",
    "pr_number": 838,
    "pr_file": "macos/Sources/Ghostty/Ghostty.TerminalSplit.swift",
    "created_at": "2023-11-07T23:21:19+00:00",
    "commented_code": "}\n             }\n         }\n+\n+        func onEqualize(notification: SwiftUI.Notification) {\n+            // If there are no splits then there is nothing to do",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "1385721751",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 838,
        "pr_file": "macos/Sources/Ghostty/Ghostty.TerminalSplit.swift",
        "discussion_id": "1385721751",
        "commented_code": "@@ -135,8 +137,18 @@ extension Ghostty {\n                 }\n             }\n         }\n+\n+        func onEqualize(notification: SwiftUI.Notification) {\n+            // If there are no splits then there is nothing to do",
        "comment_created_at": "2023-11-07T23:21:19+00:00",
        "comment_author": "mitchellh",
        "comment_body": "This is fine, but you could also do:\r\n\r\n`guard case .split(let c) = node else { return }`\r\n\r\n(Obviously... /sarcasm lol)",
        "pr_file_module": null
      },
      {
        "comment_id": "1385750762",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 838,
        "pr_file": "macos/Sources/Ghostty/Ghostty.TerminalSplit.swift",
        "discussion_id": "1385721751",
        "commented_code": "@@ -135,8 +137,18 @@ extension Ghostty {\n                 }\n             }\n         }\n+\n+        func onEqualize(notification: SwiftUI.Notification) {\n+            // If there are no splits then there is nothing to do",
        "comment_created_at": "2023-11-07T23:51:37+00:00",
        "comment_author": "gpanders",
        "comment_body": "Oh nice, didn‚Äôt know about that üëç",
        "pr_file_module": null
      }
    ]
  }
]