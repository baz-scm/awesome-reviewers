[
  {
    "discussion_id": "2151290088",
    "pr_number": 7608,
    "pr_file": "src/shell-integration/bash/ghostty.bash",
    "created_at": "2025-06-17T04:25:27+00:00",
    "commented_code": "}\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Wrap `ssh` command to provide Ghostty SSH integration.\n+  #\n+  # This approach supports wrapping an `ssh` alias, but the alias definition\n+  # must come _after_ this function is defined. Otherwise, the alias expansion\n+  # will take precedence over this function, and it won't be wrapped.\n+  function ssh {\n+    case \"$GHOSTTY_SSH_INTEGRATION\" in\n+    \"term-only\")\n+      _ghostty_ssh_term-only \"$@\"\n+      ;;\n+    \"basic\")\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    \"full\")\n+      _ghostty_ssh_full \"$@\"\n+      ;;\n+    *)\n+      # Unknown level, fall back to basic\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    esac\n+  }\n+\n+  # Level: term-only - Just fix TERM compatibility\n+  _ghostty_ssh_term-only() {\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      TERM=xterm-256color command ssh \"$@\"\n+    else\n+      command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: basic - TERM fix + environment variable propagation\n+  _ghostty_ssh_basic() {\n+    local env_vars=()\n+\n+    # Fix TERM compatibility\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      env_vars+=(\"TERM=xterm-256color\")\n+    fi\n+\n+    # Propagate Ghostty shell integration environment variables\n+    [[ -n \"$GHOSTTY_SHELL_FEATURES\" ]] && env_vars+=(\"GHOSTTY_SHELL_FEATURES=$GHOSTTY_SHELL_FEATURES\")\n+    [[ -n \"$GHOSTTY_RESOURCES_DIR\" ]] && env_vars+=(\"GHOSTTY_RESOURCES_DIR=$GHOSTTY_RESOURCES_DIR\")\n+\n+    # Execute with environment variables if any were set\n+    if [[ ${#env_vars[@]} -gt 0 ]]; then\n+      env \"${env_vars[@]}\" ssh \"$@\"\n+    else\n+      builtin command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: full - All features\n+  _ghostty_ssh_full() {\n+    # Full integration: Two-step terminfo installation\n+    if command -v infocmp >/dev/null 2>&1; then\n+      echo \"Installing Ghostty terminfo on remote host...\" >&2\n+\n+      # Step 1: Install terminfo using the same approach that works manually\n+      # This requires authentication but is quick and reliable\n+      if infocmp -x xterm-ghostty 2>/dev/null | command ssh \"$@\" 'mkdir -p ~/.terminfo/x 2>/dev/null && tic -x -o ~/.terminfo /dev/stdin 2>/dev/null'; then",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2151290088",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2151290088",
        "commented_code": "@@ -97,6 +97,94 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Wrap `ssh` command to provide Ghostty SSH integration.\n+  #\n+  # This approach supports wrapping an `ssh` alias, but the alias definition\n+  # must come _after_ this function is defined. Otherwise, the alias expansion\n+  # will take precedence over this function, and it won't be wrapped.\n+  function ssh {\n+    case \"$GHOSTTY_SSH_INTEGRATION\" in\n+    \"term-only\")\n+      _ghostty_ssh_term-only \"$@\"\n+      ;;\n+    \"basic\")\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    \"full\")\n+      _ghostty_ssh_full \"$@\"\n+      ;;\n+    *)\n+      # Unknown level, fall back to basic\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    esac\n+  }\n+\n+  # Level: term-only - Just fix TERM compatibility\n+  _ghostty_ssh_term-only() {\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      TERM=xterm-256color command ssh \"$@\"\n+    else\n+      command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: basic - TERM fix + environment variable propagation\n+  _ghostty_ssh_basic() {\n+    local env_vars=()\n+\n+    # Fix TERM compatibility\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      env_vars+=(\"TERM=xterm-256color\")\n+    fi\n+\n+    # Propagate Ghostty shell integration environment variables\n+    [[ -n \"$GHOSTTY_SHELL_FEATURES\" ]] && env_vars+=(\"GHOSTTY_SHELL_FEATURES=$GHOSTTY_SHELL_FEATURES\")\n+    [[ -n \"$GHOSTTY_RESOURCES_DIR\" ]] && env_vars+=(\"GHOSTTY_RESOURCES_DIR=$GHOSTTY_RESOURCES_DIR\")\n+\n+    # Execute with environment variables if any were set\n+    if [[ ${#env_vars[@]} -gt 0 ]]; then\n+      env \"${env_vars[@]}\" ssh \"$@\"\n+    else\n+      builtin command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: full - All features\n+  _ghostty_ssh_full() {\n+    # Full integration: Two-step terminfo installation\n+    if command -v infocmp >/dev/null 2>&1; then\n+      echo \"Installing Ghostty terminfo on remote host...\" >&2\n+\n+      # Step 1: Install terminfo using the same approach that works manually\n+      # This requires authentication but is quick and reliable\n+      if infocmp -x xterm-ghostty 2>/dev/null | command ssh \"$@\" 'mkdir -p ~/.terminfo/x 2>/dev/null && tic -x -o ~/.terminfo /dev/stdin 2>/dev/null'; then",
        "comment_created_at": "2025-06-17T04:25:27+00:00",
        "comment_author": "00-kat",
        "comment_body": "The command here (and in the other three scripts) seems to be different from the one in [Ghostty's docs]\u2026\r\n\r\n> `mkdir -p ~/.terminfo/x 2>/dev/null`\r\n\r\nIs this actually necessary?  `tic` seems to create it for me.\r\n\r\n> `tic -x -o ~/.terminfo /dev/stdin`\r\n\r\nIs `-o ~/.terminfo` necessary?  `tic` seems to default to that directory for me.\r\n\r\nAnd can't `-` be used instead of `/dev/stdin`?\r\n\r\n[Ghostty's docs]: https://ghostty.org/docs/help/terminfo#copy-ghostty's-terminfo-to-a-remote-machine",
        "pr_file_module": null
      },
      {
        "comment_id": "2155551546",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2151290088",
        "commented_code": "@@ -97,6 +97,94 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Wrap `ssh` command to provide Ghostty SSH integration.\n+  #\n+  # This approach supports wrapping an `ssh` alias, but the alias definition\n+  # must come _after_ this function is defined. Otherwise, the alias expansion\n+  # will take precedence over this function, and it won't be wrapped.\n+  function ssh {\n+    case \"$GHOSTTY_SSH_INTEGRATION\" in\n+    \"term-only\")\n+      _ghostty_ssh_term-only \"$@\"\n+      ;;\n+    \"basic\")\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    \"full\")\n+      _ghostty_ssh_full \"$@\"\n+      ;;\n+    *)\n+      # Unknown level, fall back to basic\n+      _ghostty_ssh_basic \"$@\"\n+      ;;\n+    esac\n+  }\n+\n+  # Level: term-only - Just fix TERM compatibility\n+  _ghostty_ssh_term-only() {\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      TERM=xterm-256color command ssh \"$@\"\n+    else\n+      command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: basic - TERM fix + environment variable propagation\n+  _ghostty_ssh_basic() {\n+    local env_vars=()\n+\n+    # Fix TERM compatibility\n+    if [[ \"$TERM\" == \"xterm-ghostty\" ]]; then\n+      env_vars+=(\"TERM=xterm-256color\")\n+    fi\n+\n+    # Propagate Ghostty shell integration environment variables\n+    [[ -n \"$GHOSTTY_SHELL_FEATURES\" ]] && env_vars+=(\"GHOSTTY_SHELL_FEATURES=$GHOSTTY_SHELL_FEATURES\")\n+    [[ -n \"$GHOSTTY_RESOURCES_DIR\" ]] && env_vars+=(\"GHOSTTY_RESOURCES_DIR=$GHOSTTY_RESOURCES_DIR\")\n+\n+    # Execute with environment variables if any were set\n+    if [[ ${#env_vars[@]} -gt 0 ]]; then\n+      env \"${env_vars[@]}\" ssh \"$@\"\n+    else\n+      builtin command ssh \"$@\"\n+    fi\n+  }\n+\n+  # Level: full - All features\n+  _ghostty_ssh_full() {\n+    # Full integration: Two-step terminfo installation\n+    if command -v infocmp >/dev/null 2>&1; then\n+      echo \"Installing Ghostty terminfo on remote host...\" >&2\n+\n+      # Step 1: Install terminfo using the same approach that works manually\n+      # This requires authentication but is quick and reliable\n+      if infocmp -x xterm-ghostty 2>/dev/null | command ssh \"$@\" 'mkdir -p ~/.terminfo/x 2>/dev/null && tic -x -o ~/.terminfo /dev/stdin 2>/dev/null'; then",
        "comment_created_at": "2025-06-18T21:38:47+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Fixed in https://github.com/ghostty-org/ghostty/pull/7608/commits/0ad566b44cb53171c2661b8ba2c0463edfca719a",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2155833174",
    "pr_number": 7608,
    "pr_file": "src/shell-integration/bash/ghostty.bash",
    "created_at": "2025-06-19T01:25:54+00:00",
    "commented_code": "}\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Cache configuration\n+  _ghostty_cache_dir=\"${XDG_STATE_HOME:-$HOME/.local/state}/ghostty\"\n+  _ghostty_cache_file=\"$_ghostty_cache_dir/terminfo_hosts\"\n+\n+  # Create cache directory with proper permissions\n+  [[ ! -d \"$_ghostty_cache_dir\" ]] && mkdir -p \"$_ghostty_cache_dir\" && chmod 700 \"$_ghostty_cache_dir\"\n+\n+  # Extract SSH target from arguments\n+  _ghostty_get_ssh_target() {\n+    local target=\"\"\n+    local skip_next=false\n+    local args=(\"$@\")\n+\n+    for ((i=0; i<${#args[@]}; i++)); do\n+      local arg=\"${args[i]}\"\n+\n+      # Skip if we're processing a flag's argument\n+      [[ \"$skip_next\" == \"true\" ]] && { skip_next=false; continue; }\n+\n+      # Handle flags that take arguments\n+      if [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw]$ ]]; then\n+        skip_next=true\n+        continue\n+      fi\n+\n+      # Handle combined short flags with values (e.g., -p22)\n+      [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw].+ ]] && continue\n+\n+      # Skip other flags\n+      [[ \"$arg\" =~ ^- ]] && continue\n+\n+      # This should be our target\n+      target=\"$arg\"\n+      break\n+    done\n+\n+    # Handle user@host format\n+    echo \"${target##*@}\"",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2155833174",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2155833174",
        "commented_code": "@@ -95,6 +95,254 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Cache configuration\n+  _ghostty_cache_dir=\"${XDG_STATE_HOME:-$HOME/.local/state}/ghostty\"\n+  _ghostty_cache_file=\"$_ghostty_cache_dir/terminfo_hosts\"\n+\n+  # Create cache directory with proper permissions\n+  [[ ! -d \"$_ghostty_cache_dir\" ]] && mkdir -p \"$_ghostty_cache_dir\" && chmod 700 \"$_ghostty_cache_dir\"\n+\n+  # Extract SSH target from arguments\n+  _ghostty_get_ssh_target() {\n+    local target=\"\"\n+    local skip_next=false\n+    local args=(\"$@\")\n+\n+    for ((i=0; i<${#args[@]}; i++)); do\n+      local arg=\"${args[i]}\"\n+\n+      # Skip if we're processing a flag's argument\n+      [[ \"$skip_next\" == \"true\" ]] && { skip_next=false; continue; }\n+\n+      # Handle flags that take arguments\n+      if [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw]$ ]]; then\n+        skip_next=true\n+        continue\n+      fi\n+\n+      # Handle combined short flags with values (e.g., -p22)\n+      [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw].+ ]] && continue\n+\n+      # Skip other flags\n+      [[ \"$arg\" =~ ^- ]] && continue\n+\n+      # This should be our target\n+      target=\"$arg\"\n+      break\n+    done\n+\n+    # Handle user@host format\n+    echo \"${target##*@}\"",
        "comment_created_at": "2025-06-19T01:25:54+00:00",
        "comment_author": "00-kat",
        "comment_body": "Shouldn't the target include the user too (if present), since tic stores it in `~/.terminfo`, which is user-specific?\r\n\r\nThe SSH manpage seems to say that `-l` can be used to specify a user too, so that may need special handling above too.",
        "pr_file_module": null
      },
      {
        "comment_id": "2164777241",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2155833174",
        "commented_code": "@@ -95,6 +95,254 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH\n+if [[ -n \"$GHOSTTY_SSH_INTEGRATION\" ]]; then\n+  # Cache configuration\n+  _ghostty_cache_dir=\"${XDG_STATE_HOME:-$HOME/.local/state}/ghostty\"\n+  _ghostty_cache_file=\"$_ghostty_cache_dir/terminfo_hosts\"\n+\n+  # Create cache directory with proper permissions\n+  [[ ! -d \"$_ghostty_cache_dir\" ]] && mkdir -p \"$_ghostty_cache_dir\" && chmod 700 \"$_ghostty_cache_dir\"\n+\n+  # Extract SSH target from arguments\n+  _ghostty_get_ssh_target() {\n+    local target=\"\"\n+    local skip_next=false\n+    local args=(\"$@\")\n+\n+    for ((i=0; i<${#args[@]}; i++)); do\n+      local arg=\"${args[i]}\"\n+\n+      # Skip if we're processing a flag's argument\n+      [[ \"$skip_next\" == \"true\" ]] && { skip_next=false; continue; }\n+\n+      # Handle flags that take arguments\n+      if [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw]$ ]]; then\n+        skip_next=true\n+        continue\n+      fi\n+\n+      # Handle combined short flags with values (e.g., -p22)\n+      [[ \"$arg\" =~ ^-[bcDEeFIiJLlmOopQRSWw].+ ]] && continue\n+\n+      # Skip other flags\n+      [[ \"$arg\" =~ ^- ]] && continue\n+\n+      # This should be our target\n+      target=\"$arg\"\n+      break\n+    done\n+\n+    # Handle user@host format\n+    echo \"${target##*@}\"",
        "comment_created_at": "2025-06-24T19:51:26+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Fixed in https://github.com/ghostty-org/ghostty/pull/7608/commits/9660ce5ccc1adb9e3319f756607e205d829743db",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2167809709",
    "pr_number": 7608,
    "pr_file": "src/config/Config.zig",
    "created_at": "2025-06-25T23:36:36+00:00",
    "commented_code": "///\n ///   * `title` - Set the window title via shell integration.\n ///\n-/// Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`\n+///   * `ssh-env` - Enable SSH environment variable compatibility. Automatically\n+///     converts TERM from `xterm-ghostty` to `xterm-256color` when connecting to\n+///     remote hosts and propagates COLORTERM, TERM_PROGRAM, and TERM_PROGRAM_VERSION.\n+///     Whether or not these variables will be accepted by the remote host(s) will\n+///     depend on whether or not the variables are allowed in their sshd_config.\n+///\n+///   * `ssh-terminfo` - Enable automatic terminfo installation on remote hosts.\n+///     Attempts to install Ghostty's terminfo entry using `infocmp` and `tic` when\n+///     connecting to hosts that lack it. Requires `infocmp` and `tic` to be available\n+///     locally. Provides `+list-ssh-cache` and `+clear-ssh-cache` CLI actions for",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2167809709",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/config/Config.zig",
        "discussion_id": "2167809709",
        "commented_code": "@@ -2059,7 +2061,23 @@ keybind: Keybinds = .{},\n ///\n ///   * `title` - Set the window title via shell integration.\n ///\n-/// Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`\n+///   * `ssh-env` - Enable SSH environment variable compatibility. Automatically\n+///     converts TERM from `xterm-ghostty` to `xterm-256color` when connecting to\n+///     remote hosts and propagates COLORTERM, TERM_PROGRAM, and TERM_PROGRAM_VERSION.\n+///     Whether or not these variables will be accepted by the remote host(s) will\n+///     depend on whether or not the variables are allowed in their sshd_config.\n+///\n+///   * `ssh-terminfo` - Enable automatic terminfo installation on remote hosts.\n+///     Attempts to install Ghostty's terminfo entry using `infocmp` and `tic` when\n+///     connecting to hosts that lack it. Requires `infocmp` and `tic` to be available\n+///     locally. Provides `+list-ssh-cache` and `+clear-ssh-cache` CLI actions for",
        "comment_created_at": "2025-06-25T23:36:36+00:00",
        "comment_author": "00-kat",
        "comment_body": "This sentence is misleading, since `infocmp` is needed locally and `tic` is needed on the remote, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2167875364",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/config/Config.zig",
        "discussion_id": "2167809709",
        "commented_code": "@@ -2059,7 +2061,23 @@ keybind: Keybinds = .{},\n ///\n ///   * `title` - Set the window title via shell integration.\n ///\n-/// Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`\n+///   * `ssh-env` - Enable SSH environment variable compatibility. Automatically\n+///     converts TERM from `xterm-ghostty` to `xterm-256color` when connecting to\n+///     remote hosts and propagates COLORTERM, TERM_PROGRAM, and TERM_PROGRAM_VERSION.\n+///     Whether or not these variables will be accepted by the remote host(s) will\n+///     depend on whether or not the variables are allowed in their sshd_config.\n+///\n+///   * `ssh-terminfo` - Enable automatic terminfo installation on remote hosts.\n+///     Attempts to install Ghostty's terminfo entry using `infocmp` and `tic` when\n+///     connecting to hosts that lack it. Requires `infocmp` and `tic` to be available\n+///     locally. Provides `+list-ssh-cache` and `+clear-ssh-cache` CLI actions for",
        "comment_created_at": "2025-06-26T00:51:51+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Yep - good catch, thank you! Fixed in https://github.com/ghostty-org/ghostty/pull/7608/commits/b5372468e46d0aee5ec42c61c567d67c1a0c5ab6",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185402501",
    "pr_number": 7608,
    "pr_file": "src/shell-integration/bash/ghostty.bash",
    "created_at": "2025-07-04T13:40:02+00:00",
    "commented_code": "}\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-(env|terminfo) ]]; then\n+  : \"${GHOSTTY_SSH_CACHE_TIMEOUT:=5}\"\n+  : \"${GHOSTTY_SSH_CHECK_TIMEOUT:=3}\"\n+\n+  # SSH wrapper that preserves Ghostty features across remote connections\n+  ssh() {\n+    local ssh_env=() ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-env ]]; then\n+      local -a ssh_env_vars=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env_vars+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+\n+      # Temporarily export variables for SSH transmission\n+      local -a ssh_exported_vars=()\n+      for ssh_v in \"${ssh_env_vars[@]}\"; do\n+        local ssh_var_name=\"${ssh_v%%=*}\"\n+\n+        if [[ -n \"${!ssh_var_name+x}\" ]]; then\n+          ssh_exported_vars+=(\"$ssh_var_name=${!ssh_var_name}\")\n+        else\n+          ssh_exported_vars+=(\"$ssh_var_name\")\n+        fi\n+\n+        builtin export \"${ssh_v?}\"\n+\n+        # Use both SendEnv and SetEnv for maximum compatibility\n+        ssh_opts+=(-o \"SendEnv $ssh_var_name\")\n+        ssh_opts+=(-o \"SetEnv $ssh_v\")",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2185402501",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2185402501",
        "commented_code": "@@ -95,6 +95,177 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-(env|terminfo) ]]; then\n+  : \"${GHOSTTY_SSH_CACHE_TIMEOUT:=5}\"\n+  : \"${GHOSTTY_SSH_CHECK_TIMEOUT:=3}\"\n+\n+  # SSH wrapper that preserves Ghostty features across remote connections\n+  ssh() {\n+    local ssh_env=() ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-env ]]; then\n+      local -a ssh_env_vars=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env_vars+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+\n+      # Temporarily export variables for SSH transmission\n+      local -a ssh_exported_vars=()\n+      for ssh_v in \"${ssh_env_vars[@]}\"; do\n+        local ssh_var_name=\"${ssh_v%%=*}\"\n+\n+        if [[ -n \"${!ssh_var_name+x}\" ]]; then\n+          ssh_exported_vars+=(\"$ssh_var_name=${!ssh_var_name}\")\n+        else\n+          ssh_exported_vars+=(\"$ssh_var_name\")\n+        fi\n+\n+        builtin export \"${ssh_v?}\"\n+\n+        # Use both SendEnv and SetEnv for maximum compatibility\n+        ssh_opts+=(-o \"SendEnv $ssh_var_name\")\n+        ssh_opts+=(-o \"SetEnv $ssh_v\")",
        "comment_created_at": "2025-07-04T13:40:02+00:00",
        "comment_author": "jparise",
        "comment_body": "I think I'd still like to understand this a little bit more. The main thing that's not connecting for is why we need to mutate the local environment at all.\r\n\r\nBased on my reading of `ssh_config(5)`, both `SendEnv` (forward local to remote) and `SetEnv` (set on remote) require `AcceptEnv` to be set on the server. I would therefore expect that we should use `SetEnv` to set specific values and `SendEnv` when we want to forward a local value as-is. (And `TERM` is always sent and allowed, presumably overridable via `SetEnv`.)\r\n\r\nI haven't run any experiments myself to confirm this though so hoping you could share your actual learned experience here. \ud83d\ude42 ",
        "pr_file_module": null
      },
      {
        "comment_id": "2187754497",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2185402501",
        "commented_code": "@@ -95,6 +95,177 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-(env|terminfo) ]]; then\n+  : \"${GHOSTTY_SSH_CACHE_TIMEOUT:=5}\"\n+  : \"${GHOSTTY_SSH_CHECK_TIMEOUT:=3}\"\n+\n+  # SSH wrapper that preserves Ghostty features across remote connections\n+  ssh() {\n+    local ssh_env=() ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-env ]]; then\n+      local -a ssh_env_vars=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env_vars+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+\n+      # Temporarily export variables for SSH transmission\n+      local -a ssh_exported_vars=()\n+      for ssh_v in \"${ssh_env_vars[@]}\"; do\n+        local ssh_var_name=\"${ssh_v%%=*}\"\n+\n+        if [[ -n \"${!ssh_var_name+x}\" ]]; then\n+          ssh_exported_vars+=(\"$ssh_var_name=${!ssh_var_name}\")\n+        else\n+          ssh_exported_vars+=(\"$ssh_var_name\")\n+        fi\n+\n+        builtin export \"${ssh_v?}\"\n+\n+        # Use both SendEnv and SetEnv for maximum compatibility\n+        ssh_opts+=(-o \"SendEnv $ssh_var_name\")\n+        ssh_opts+=(-o \"SetEnv $ssh_v\")",
        "comment_created_at": "2025-07-05T21:27:31+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "This one's been puzzling me too, as you're right about the theoretical behavior per `ssh_config(5)`. In practice, I've found that `TERM_PROGRAM` and `TERM_PROGRAM_VERSION` don't make it through with `SetEnv` alone, even when the remote is configured to accept those variables. Could be a quirk with my testing environment or something in OpenSSH itself.\r\n\r\nSince the goal is maximum compatibility across different SSH server configurations, using both `SendEnv` and `SetEnv` has been the only consistent approach in my testing. I see it as defensive programming against whatever's causing this behavior, rather than an elegant solution... but it works reliably.\r\n\r\nThe implementation has been cleaned up and simplified a bit in https://github.com/ghostty-org/ghostty/pull/7608/commits/a22074a85ca21ccae413e161766d6bf7f063c596, but I'm open to other suggestions if this approach doesn't sit right with you. I'm a bit stumped at the moment, myself.",
        "pr_file_module": null
      },
      {
        "comment_id": "2188619398",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2185402501",
        "commented_code": "@@ -95,6 +95,177 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-(env|terminfo) ]]; then\n+  : \"${GHOSTTY_SSH_CACHE_TIMEOUT:=5}\"\n+  : \"${GHOSTTY_SSH_CHECK_TIMEOUT:=3}\"\n+\n+  # SSH wrapper that preserves Ghostty features across remote connections\n+  ssh() {\n+    local ssh_env=() ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-env ]]; then\n+      local -a ssh_env_vars=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env_vars+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+\n+      # Temporarily export variables for SSH transmission\n+      local -a ssh_exported_vars=()\n+      for ssh_v in \"${ssh_env_vars[@]}\"; do\n+        local ssh_var_name=\"${ssh_v%%=*}\"\n+\n+        if [[ -n \"${!ssh_var_name+x}\" ]]; then\n+          ssh_exported_vars+=(\"$ssh_var_name=${!ssh_var_name}\")\n+        else\n+          ssh_exported_vars+=(\"$ssh_var_name\")\n+        fi\n+\n+        builtin export \"${ssh_v?}\"\n+\n+        # Use both SendEnv and SetEnv for maximum compatibility\n+        ssh_opts+=(-o \"SendEnv $ssh_var_name\")\n+        ssh_opts+=(-o \"SetEnv $ssh_v\")",
        "comment_created_at": "2025-07-06T21:18:00+00:00",
        "comment_author": "jparise",
        "comment_body": "I think it make sense to forward `TERM_PROGRAM` and `TERM_PROGRAM_VERSION`, but I think we can skip all of the more complex variable handling around them. I think we can safely trust our local Ghostty environment to have set them to reasonable values. Given that, could we use just `SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION` and look at other cases if/when they come up?\r\n\r\nI'm a little stuck on this particular aspect because it accounts for quite a bit of the new code (`ssh_exported_vars`) and also requires us to modify and restore the local shell environment.\r\n\r\nI'll take a closer look at the `TERM` handling soon, but I'm short on time right now. Sorry!",
        "pr_file_module": null
      },
      {
        "comment_id": "2190515001",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2185402501",
        "commented_code": "@@ -95,6 +95,177 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-(env|terminfo) ]]; then\n+  : \"${GHOSTTY_SSH_CACHE_TIMEOUT:=5}\"\n+  : \"${GHOSTTY_SSH_CHECK_TIMEOUT:=3}\"\n+\n+  # SSH wrapper that preserves Ghostty features across remote connections\n+  ssh() {\n+    local ssh_env=() ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" =~ ssh-env ]]; then\n+      local -a ssh_env_vars=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env_vars+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+\n+      # Temporarily export variables for SSH transmission\n+      local -a ssh_exported_vars=()\n+      for ssh_v in \"${ssh_env_vars[@]}\"; do\n+        local ssh_var_name=\"${ssh_v%%=*}\"\n+\n+        if [[ -n \"${!ssh_var_name+x}\" ]]; then\n+          ssh_exported_vars+=(\"$ssh_var_name=${!ssh_var_name}\")\n+        else\n+          ssh_exported_vars+=(\"$ssh_var_name\")\n+        fi\n+\n+        builtin export \"${ssh_v?}\"\n+\n+        # Use both SendEnv and SetEnv for maximum compatibility\n+        ssh_opts+=(-o \"SendEnv $ssh_var_name\")\n+        ssh_opts+=(-o \"SetEnv $ssh_v\")",
        "comment_created_at": "2025-07-07T16:14:34+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Ohh yeah, you're totally right. I missed your main point yesterday, that's my bad. This has been cleaned up in https://github.com/ghostty-org/ghostty/pull/7608/commits/08db61e27e875b1a211867523d72ca414224656b",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190594842",
    "pr_number": 7608,
    "pr_file": "src/shell-integration/bash/ghostty.bash",
    "created_at": "2025-07-07T16:35:19+00:00",
    "commented_code": "}\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]] || [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+  ssh() {\n+    builtin local ssh_env ssh_opts\n+    ssh_env=()\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+\n+      ssh_env+=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"\n+\n+      builtin local ssh_target=\"${ssh_user}@${ssh_hostname}\"\n+\n+      if [[ -n \"$ssh_hostname\" ]]; then\n+        # Check if terminfo is already cached\n+        builtin local ssh_cache_check_success=false\n+        if builtin command -v ghostty >/dev/null 2>&1; then\n+          ghostty +ssh-cache --host=\"$ssh_target\" >/dev/null 2>&1 && ssh_cache_check_success=true\n+        fi\n+\n+        if [[ \"$ssh_cache_check_success\" == \"true\" ]]; then\n+          ssh_env+=(TERM=xterm-ghostty)\n+        elif builtin command -v infocmp >/dev/null 2>&1; then\n+          if ! builtin command -v base64 >/dev/null 2>&1; then\n+            builtin echo \"Warning: base64 command not available for terminfo installation.\" >&2\n+            ssh_env+=(TERM=xterm-256color)\n+          else\n+            builtin local ssh_terminfo ssh_base64_decode_cmd\n+\n+            # BSD vs GNU base64 compatibility\n+            if base64 --help 2>&1 | grep -q GNU; then\n+              ssh_base64_decode_cmd=\"base64 -d\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 -w0 2>/dev/null)\n+            else\n+              ssh_base64_decode_cmd=\"base64 -D\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 2>/dev/null | tr -d '\n')\n+            fi\n+\n+            if [[ -n \"$ssh_terminfo\" ]]; then\n+              builtin echo \"Setting up Ghostty terminfo on $ssh_hostname...\" >&2\n+              builtin local ssh_cpath_dir ssh_cpath\n+\n+              ssh_cpath_dir=$(mktemp -d \"/tmp/ghostty-ssh-$ssh_user.XXXXXX\" 2>/dev/null) || ssh_cpath_dir=\"/tmp/ghostty-ssh-$ssh_user.$$\"\n+              ssh_cpath=\"$ssh_cpath_dir/socket\"\n+\n+              if builtin echo \"$ssh_terminfo\" | $ssh_base64_decode_cmd | builtin command ssh \"${ssh_opts[@]}\" -o ControlMaster=yes -o ControlPath=\"$ssh_cpath\" -o ControlPersist=60s \"$@\" '\n+                infocmp xterm-ghostty >/dev/null 2>&1 && exit 0\n+                command -v tic >/dev/null 2>&1 || exit 1\n+                mkdir -p ~/.terminfo 2>/dev/null && tic -x - 2>/dev/null && exit 0\n+                exit 1\n+              ' 2>/dev/null; then\n+                builtin echo \"Terminfo setup complete on $ssh_hostname.\" >&2\n+                ssh_env+=(TERM=xterm-ghostty)\n+                ssh_opts+=(-o \"ControlPath=$ssh_cpath\")\n+\n+                # Cache successful installation\n+                if [[ -n \"$ssh_target\" ]] && builtin command -v ghostty >/dev/null 2>&1; then\n+                  (\n+                    set +m\n+                    {\n+                      ghostty +ssh-cache --add=\"$ssh_target\" >/dev/null 2>&1 || true\n+                    } &\n+                  )\n+                fi\n+              else\n+                builtin echo \"Warning: Failed to install terminfo.\" >&2\n+                ssh_env+=(TERM=xterm-256color)\n+              fi\n+            else\n+              builtin echo \"Warning: Could not generate terminfo data.\" >&2\n+              ssh_env+=(TERM=xterm-256color)\n+            fi\n+          fi\n+        else\n+          builtin echo \"Warning: ghostty command not available for cache management.\" >&2\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      else\n+        if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      fi\n+    fi\n+\n+    # Execute SSH with environment handling\n+    builtin local ssh_term_override=\"\"\n+    for ssh_v in \"${ssh_env[@]}\"; do\n+      if [[ \"$ssh_v\" =~ ^TERM=(.*)$ ]]; then\n+        ssh_term_override=\"${BASH_REMATCH[1]}\"\n+        break\n+      fi\n+    done\n+\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* && -z \"$ssh_term_override\" ]]; then\n+      ssh_env+=(TERM=xterm-256color)\n+      ssh_term_override=\"xterm-256color\"\n+    fi\n+\n+    if [[ -n \"$ssh_term_override\" ]]; then\n+      builtin local ssh_original_term=\"$TERM\"\n+      builtin export TERM=\"$ssh_term_override\"\n+      builtin command ssh \"${ssh_opts[@]}\" \"$@\"\n+      local ssh_ret=$?\n+      builtin export TERM=\"$ssh_original_term\"",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2190594842",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2190594842",
        "commented_code": "@@ -95,6 +95,142 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]] || [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+  ssh() {\n+    builtin local ssh_env ssh_opts\n+    ssh_env=()\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+\n+      ssh_env+=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"\n+\n+      builtin local ssh_target=\"${ssh_user}@${ssh_hostname}\"\n+\n+      if [[ -n \"$ssh_hostname\" ]]; then\n+        # Check if terminfo is already cached\n+        builtin local ssh_cache_check_success=false\n+        if builtin command -v ghostty >/dev/null 2>&1; then\n+          ghostty +ssh-cache --host=\"$ssh_target\" >/dev/null 2>&1 && ssh_cache_check_success=true\n+        fi\n+\n+        if [[ \"$ssh_cache_check_success\" == \"true\" ]]; then\n+          ssh_env+=(TERM=xterm-ghostty)\n+        elif builtin command -v infocmp >/dev/null 2>&1; then\n+          if ! builtin command -v base64 >/dev/null 2>&1; then\n+            builtin echo \"Warning: base64 command not available for terminfo installation.\" >&2\n+            ssh_env+=(TERM=xterm-256color)\n+          else\n+            builtin local ssh_terminfo ssh_base64_decode_cmd\n+\n+            # BSD vs GNU base64 compatibility\n+            if base64 --help 2>&1 | grep -q GNU; then\n+              ssh_base64_decode_cmd=\"base64 -d\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 -w0 2>/dev/null)\n+            else\n+              ssh_base64_decode_cmd=\"base64 -D\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 2>/dev/null | tr -d '\\n')\n+            fi\n+\n+            if [[ -n \"$ssh_terminfo\" ]]; then\n+              builtin echo \"Setting up Ghostty terminfo on $ssh_hostname...\" >&2\n+              builtin local ssh_cpath_dir ssh_cpath\n+\n+              ssh_cpath_dir=$(mktemp -d \"/tmp/ghostty-ssh-$ssh_user.XXXXXX\" 2>/dev/null) || ssh_cpath_dir=\"/tmp/ghostty-ssh-$ssh_user.$$\"\n+              ssh_cpath=\"$ssh_cpath_dir/socket\"\n+\n+              if builtin echo \"$ssh_terminfo\" | $ssh_base64_decode_cmd | builtin command ssh \"${ssh_opts[@]}\" -o ControlMaster=yes -o ControlPath=\"$ssh_cpath\" -o ControlPersist=60s \"$@\" '\n+                infocmp xterm-ghostty >/dev/null 2>&1 && exit 0\n+                command -v tic >/dev/null 2>&1 || exit 1\n+                mkdir -p ~/.terminfo 2>/dev/null && tic -x - 2>/dev/null && exit 0\n+                exit 1\n+              ' 2>/dev/null; then\n+                builtin echo \"Terminfo setup complete on $ssh_hostname.\" >&2\n+                ssh_env+=(TERM=xterm-ghostty)\n+                ssh_opts+=(-o \"ControlPath=$ssh_cpath\")\n+\n+                # Cache successful installation\n+                if [[ -n \"$ssh_target\" ]] && builtin command -v ghostty >/dev/null 2>&1; then\n+                  (\n+                    set +m\n+                    {\n+                      ghostty +ssh-cache --add=\"$ssh_target\" >/dev/null 2>&1 || true\n+                    } &\n+                  )\n+                fi\n+              else\n+                builtin echo \"Warning: Failed to install terminfo.\" >&2\n+                ssh_env+=(TERM=xterm-256color)\n+              fi\n+            else\n+              builtin echo \"Warning: Could not generate terminfo data.\" >&2\n+              ssh_env+=(TERM=xterm-256color)\n+            fi\n+          fi\n+        else\n+          builtin echo \"Warning: ghostty command not available for cache management.\" >&2\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      else\n+        if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      fi\n+    fi\n+\n+    # Execute SSH with environment handling\n+    builtin local ssh_term_override=\"\"\n+    for ssh_v in \"${ssh_env[@]}\"; do\n+      if [[ \"$ssh_v\" =~ ^TERM=(.*)$ ]]; then\n+        ssh_term_override=\"${BASH_REMATCH[1]}\"\n+        break\n+      fi\n+    done\n+\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* && -z \"$ssh_term_override\" ]]; then\n+      ssh_env+=(TERM=xterm-256color)\n+      ssh_term_override=\"xterm-256color\"\n+    fi\n+\n+    if [[ -n \"$ssh_term_override\" ]]; then\n+      builtin local ssh_original_term=\"$TERM\"\n+      builtin export TERM=\"$ssh_term_override\"\n+      builtin command ssh \"${ssh_opts[@]}\" \"$@\"\n+      local ssh_ret=$?\n+      builtin export TERM=\"$ssh_original_term\"",
        "comment_created_at": "2025-07-07T16:35:19+00:00",
        "comment_author": "jparise",
        "comment_body": "Could we override `TERM` as part of the command invocation instead?\r\n\r\n```bash\r\nbuiltin command TERM=\"$ssh_term_override\" ssh \"${ssh_opts[@]}\" \"$@\"\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2190651924",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2190594842",
        "commented_code": "@@ -95,6 +95,142 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]] || [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+  ssh() {\n+    builtin local ssh_env ssh_opts\n+    ssh_env=()\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+\n+      ssh_env+=(\n+        \"COLORTERM=truecolor\"\n+        \"TERM_PROGRAM=ghostty\"\n+      )\n+      if [[ -n \"$TERM_PROGRAM_VERSION\" ]]; then\n+        ssh_env+=(\"TERM_PROGRAM_VERSION=$TERM_PROGRAM_VERSION\")\n+      fi\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"\n+\n+      builtin local ssh_target=\"${ssh_user}@${ssh_hostname}\"\n+\n+      if [[ -n \"$ssh_hostname\" ]]; then\n+        # Check if terminfo is already cached\n+        builtin local ssh_cache_check_success=false\n+        if builtin command -v ghostty >/dev/null 2>&1; then\n+          ghostty +ssh-cache --host=\"$ssh_target\" >/dev/null 2>&1 && ssh_cache_check_success=true\n+        fi\n+\n+        if [[ \"$ssh_cache_check_success\" == \"true\" ]]; then\n+          ssh_env+=(TERM=xterm-ghostty)\n+        elif builtin command -v infocmp >/dev/null 2>&1; then\n+          if ! builtin command -v base64 >/dev/null 2>&1; then\n+            builtin echo \"Warning: base64 command not available for terminfo installation.\" >&2\n+            ssh_env+=(TERM=xterm-256color)\n+          else\n+            builtin local ssh_terminfo ssh_base64_decode_cmd\n+\n+            # BSD vs GNU base64 compatibility\n+            if base64 --help 2>&1 | grep -q GNU; then\n+              ssh_base64_decode_cmd=\"base64 -d\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 -w0 2>/dev/null)\n+            else\n+              ssh_base64_decode_cmd=\"base64 -D\"\n+              ssh_terminfo=$(infocmp -0 -Q2 -q xterm-ghostty 2>/dev/null | base64 2>/dev/null | tr -d '\\n')\n+            fi\n+\n+            if [[ -n \"$ssh_terminfo\" ]]; then\n+              builtin echo \"Setting up Ghostty terminfo on $ssh_hostname...\" >&2\n+              builtin local ssh_cpath_dir ssh_cpath\n+\n+              ssh_cpath_dir=$(mktemp -d \"/tmp/ghostty-ssh-$ssh_user.XXXXXX\" 2>/dev/null) || ssh_cpath_dir=\"/tmp/ghostty-ssh-$ssh_user.$$\"\n+              ssh_cpath=\"$ssh_cpath_dir/socket\"\n+\n+              if builtin echo \"$ssh_terminfo\" | $ssh_base64_decode_cmd | builtin command ssh \"${ssh_opts[@]}\" -o ControlMaster=yes -o ControlPath=\"$ssh_cpath\" -o ControlPersist=60s \"$@\" '\n+                infocmp xterm-ghostty >/dev/null 2>&1 && exit 0\n+                command -v tic >/dev/null 2>&1 || exit 1\n+                mkdir -p ~/.terminfo 2>/dev/null && tic -x - 2>/dev/null && exit 0\n+                exit 1\n+              ' 2>/dev/null; then\n+                builtin echo \"Terminfo setup complete on $ssh_hostname.\" >&2\n+                ssh_env+=(TERM=xterm-ghostty)\n+                ssh_opts+=(-o \"ControlPath=$ssh_cpath\")\n+\n+                # Cache successful installation\n+                if [[ -n \"$ssh_target\" ]] && builtin command -v ghostty >/dev/null 2>&1; then\n+                  (\n+                    set +m\n+                    {\n+                      ghostty +ssh-cache --add=\"$ssh_target\" >/dev/null 2>&1 || true\n+                    } &\n+                  )\n+                fi\n+              else\n+                builtin echo \"Warning: Failed to install terminfo.\" >&2\n+                ssh_env+=(TERM=xterm-256color)\n+              fi\n+            else\n+              builtin echo \"Warning: Could not generate terminfo data.\" >&2\n+              ssh_env+=(TERM=xterm-256color)\n+            fi\n+          fi\n+        else\n+          builtin echo \"Warning: ghostty command not available for cache management.\" >&2\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      else\n+        if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+          ssh_env+=(TERM=xterm-256color)\n+        fi\n+      fi\n+    fi\n+\n+    # Execute SSH with environment handling\n+    builtin local ssh_term_override=\"\"\n+    for ssh_v in \"${ssh_env[@]}\"; do\n+      if [[ \"$ssh_v\" =~ ^TERM=(.*)$ ]]; then\n+        ssh_term_override=\"${BASH_REMATCH[1]}\"\n+        break\n+      fi\n+    done\n+\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* && -z \"$ssh_term_override\" ]]; then\n+      ssh_env+=(TERM=xterm-256color)\n+      ssh_term_override=\"xterm-256color\"\n+    fi\n+\n+    if [[ -n \"$ssh_term_override\" ]]; then\n+      builtin local ssh_original_term=\"$TERM\"\n+      builtin export TERM=\"$ssh_term_override\"\n+      builtin command ssh \"${ssh_opts[@]}\" \"$@\"\n+      local ssh_ret=$?\n+      builtin export TERM=\"$ssh_original_term\"",
        "comment_created_at": "2025-07-07T17:05:50+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Oooh yeah, that's a much cleaner approach! Updated in https://github.com/ghostty-org/ghostty/pull/7608/commits/c3b14dff71073989e330218d98aeabed292ecd59",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2190701111",
    "pr_number": 7608,
    "pr_file": "src/shell-integration/bash/ghostty.bash",
    "created_at": "2025-07-07T17:36:35+00:00",
    "commented_code": "}\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-* ]]; then\n+  ssh() {\n+    builtin local ssh_term ssh_opts\n+    ssh_term=\"\"\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2190701111",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2190701111",
        "commented_code": "@@ -95,6 +95,113 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-* ]]; then\n+  ssh() {\n+    builtin local ssh_term ssh_opts\n+    ssh_term=\"\"\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"",
        "comment_created_at": "2025-07-07T17:36:35+00:00",
        "comment_author": "jparise",
        "comment_body": "I think we can drop the `ssh_config` intermediate variable.\r\n\r\n```suggestion\r\n      done < <(builtin command ssh -G \"$@\" 2>/dev/null)\r\n```\r\n\r\n(This also avoids the subshell.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2190800954",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/shell-integration/bash/ghostty.bash",
        "discussion_id": "2190701111",
        "commented_code": "@@ -95,6 +95,113 @@ if [[ \"$GHOSTTY_SHELL_FEATURES\" == *\"sudo\"* && -n \"$TERMINFO\" ]]; then\n   }\n fi\n \n+# SSH Integration\n+if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-* ]]; then\n+  ssh() {\n+    builtin local ssh_term ssh_opts\n+    ssh_term=\"\"\n+    ssh_opts=()\n+\n+    # Configure environment variables for remote session\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-env* ]]; then\n+      ssh_opts+=(-o \"SetEnv COLORTERM=truecolor\")\n+      ssh_opts+=(-o \"SendEnv TERM_PROGRAM TERM_PROGRAM_VERSION\")\n+    fi\n+\n+    # Install terminfo on remote host if needed\n+    if [[ \"$GHOSTTY_SHELL_FEATURES\" == *ssh-terminfo* ]]; then\n+      builtin local ssh_config ssh_user ssh_hostname\n+      ssh_config=$(builtin command ssh -G \"$@\" 2>/dev/null)\n+\n+      while IFS=' ' read -r ssh_key ssh_value; do\n+        case \"$ssh_key\" in\n+          user) ssh_user=\"$ssh_value\" ;;\n+          hostname) ssh_hostname=\"$ssh_value\" ;;\n+        esac\n+        [[ -n \"$ssh_user\" && -n \"$ssh_hostname\" ]] && break\n+      done <<< \"$ssh_config\"",
        "comment_created_at": "2025-07-07T18:40:06+00:00",
        "comment_author": "jasonrayne",
        "comment_body": "Done! https://github.com/ghostty-org/ghostty/pull/7608/commits/f27993737794ea60855bb03c6ae07647be56c230",
        "pr_file_module": null
      }
    ]
  }
]