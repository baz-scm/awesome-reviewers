[
  {
    "discussion_id": "1900317050",
    "pr_number": 4226,
    "pr_file": "src/renderer/OpenGL.zig",
    "created_at": "2025-01-01T03:57:09+00:00",
    "commented_code": ");\n }\n \n+fn drawBackgroundImage(\n+    self: *OpenGL,\n+    gl_state: *const GLState,\n+) !void {\n+    // If we don't have a background image, just return\n+    if (self.current_background_image == null) {\n+        return;\n+    }\n+    // Bind our background image program",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "1900317050",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 4226,
        "pr_file": "src/renderer/OpenGL.zig",
        "discussion_id": "1900317050",
        "commented_code": "@@ -2439,6 +2562,46 @@ fn drawCellProgram(\n     );\n }\n \n+fn drawBackgroundImage(\n+    self: *OpenGL,\n+    gl_state: *const GLState,\n+) !void {\n+    // If we don't have a background image, just return\n+    if (self.current_background_image == null) {\n+        return;\n+    }\n+    // Bind our background image program",
        "comment_created_at": "2025-01-01T03:57:09+00:00",
        "comment_author": "jcollie",
        "comment_body": "The Zig way to deal with optionals in a situation like this is to \"strip\" the optional like this:\r\n\r\n```\r\nconst current_background_image = self.current_background_image orelse return;\r\n```\r\nThen you can refer to `current_background_image` without needing the awkward `.?` syntax.",
        "pr_file_module": null
      },
      {
        "comment_id": "1900323865",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 4226,
        "pr_file": "src/renderer/OpenGL.zig",
        "discussion_id": "1900317050",
        "commented_code": "@@ -2439,6 +2562,46 @@ fn drawCellProgram(\n     );\n }\n \n+fn drawBackgroundImage(\n+    self: *OpenGL,\n+    gl_state: *const GLState,\n+) !void {\n+    // If we don't have a background image, just return\n+    if (self.current_background_image == null) {\n+        return;\n+    }\n+    // Bind our background image program",
        "comment_created_at": "2025-01-01T05:12:17+00:00",
        "comment_author": "yunusey",
        "comment_body": "Oops, thanks for catching that! I will fix it!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1900317203",
    "pr_number": 4226,
    "pr_file": "src/renderer/OpenGL.zig",
    "created_at": "2025-01-01T04:00:30+00:00",
    "commented_code": "}\n     }\n \n+    // Check if we need to update our current background image\n+    if (self.current_background_image != null) {\n+        switch (self.current_background_image.?) {\n+            .ready => {},",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "1900317203",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 4226,
        "pr_file": "src/renderer/OpenGL.zig",
        "discussion_id": "1900317203",
        "commented_code": "@@ -2305,6 +2400,31 @@ pub fn drawFrame(self: *OpenGL, surface: *apprt.Surface) !void {\n         }\n     }\n \n+    // Check if we need to update our current background image\n+    if (self.current_background_image != null) {\n+        switch (self.current_background_image.?) {\n+            .ready => {},",
        "comment_created_at": "2025-01-01T04:00:30+00:00",
        "comment_author": "jcollie",
        "comment_body": "I'd recommend:\r\n```\r\nif (self.current_background_image) |current_background_image| {\r\n  switch (current_background_image) {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2119575342",
    "pr_number": 4226,
    "pr_file": "src/renderer/OpenGL.zig",
    "created_at": "2025-06-01T20:43:15+00:00",
    "commented_code": "// Copy our shaders\n         const custom_shaders = try config.@\"custom-shader\".clone(alloc);\n \n+        // Copy our background image\n+        const background_image = try config.@\"background-image\".?.clone(alloc);",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2119575342",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 4226,
        "pr_file": "src/renderer/OpenGL.zig",
        "discussion_id": "2119575342",
        "commented_code": "@@ -302,6 +327,9 @@ pub const DerivedConfig = struct {\n         // Copy our shaders\n         const custom_shaders = try config.@\"custom-shader\".clone(alloc);\n \n+        // Copy our background image\n+        const background_image = try config.@\"background-image\".?.clone(alloc);",
        "comment_created_at": "2025-06-01T20:43:15+00:00",
        "comment_author": "pluiedev",
        "comment_body": "Why is this using `.?`? Looks like it will just crash whenever the user doesn't specify a background image\r\n\r\n```suggestion\r\n        const background_image = if (config.@\"background-image\") |v| try v.clone(alloc) else null;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2119718139",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 4226,
        "pr_file": "src/renderer/OpenGL.zig",
        "discussion_id": "2119575342",
        "commented_code": "@@ -302,6 +327,9 @@ pub const DerivedConfig = struct {\n         // Copy our shaders\n         const custom_shaders = try config.@\"custom-shader\".clone(alloc);\n \n+        // Copy our background image\n+        const background_image = try config.@\"background-image\".?.clone(alloc);",
        "comment_created_at": "2025-06-01T23:24:05+00:00",
        "comment_author": "yunusey",
        "comment_body": "Thanks for catching this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2187987932",
    "pr_number": 7818,
    "pr_file": "src/input/Binding.zig",
    "created_at": "2025-07-06T04:40:31+00:00",
    "commented_code": "};\n     }\n \n+    pub const ParseActionErrors = error{InvalidAction} || ParseParameterErrors;\n+\n+    pub fn parseCLI(input_: ?[]const u8) ParseActionErrors!Action {\n+        const input = input_ orelse return error.InvalidFormat;\n+        return try parse(input);\n+    }\n+\n     /// Parse an action in the format of \"key=value\" where key is the\n     /// action name and value is the action parameter. The parameter\n     /// is optional depending on the action.\n-    pub fn parse(input: []const u8) !Action {\n+    pub fn parse(input: []const u8) ParseActionErrors!Action {\n         // Split our action by colon. A colon may not exist for some\n         // actions so it is optional. The part preceding the colon is the\n         // action name.\n         const colonIdx = std.mem.indexOf(u8, input, \":\");\n         const action = input[0..(colonIdx orelse input.len)];\n+        const param_ = if (colonIdx) |idx| input[idx + 1 ..] else null;\n \n         // An action name is always required\n-        if (action.len == 0) return Error.InvalidFormat;\n+        if (action.len == 0) return error.InvalidFormat;\n \n         const actionInfo = @typeInfo(Action).@\"union\";\n         inline for (actionInfo.fields) |field| {\n             if (std.mem.eql(u8, action, field.name)) {\n                 // If the field type is void we expect no value\n                 switch (field.type) {\n                     void => {\n-                        if (colonIdx != null) return Error.InvalidFormat;\n+                        if (param_) |_| return error.InvalidFormat;",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2187987932",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7818,
        "pr_file": "src/input/Binding.zig",
        "discussion_id": "2187987932",
        "commented_code": "@@ -890,43 +982,50 @@ pub const Action = union(enum) {\n         };\n     }\n \n+    pub const ParseActionErrors = error{InvalidAction} || ParseParameterErrors;\n+\n+    pub fn parseCLI(input_: ?[]const u8) ParseActionErrors!Action {\n+        const input = input_ orelse return error.InvalidFormat;\n+        return try parse(input);\n+    }\n+\n     /// Parse an action in the format of \"key=value\" where key is the\n     /// action name and value is the action parameter. The parameter\n     /// is optional depending on the action.\n-    pub fn parse(input: []const u8) !Action {\n+    pub fn parse(input: []const u8) ParseActionErrors!Action {\n         // Split our action by colon. A colon may not exist for some\n         // actions so it is optional. The part preceding the colon is the\n         // action name.\n         const colonIdx = std.mem.indexOf(u8, input, \":\");\n         const action = input[0..(colonIdx orelse input.len)];\n+        const param_ = if (colonIdx) |idx| input[idx + 1 ..] else null;\n \n         // An action name is always required\n-        if (action.len == 0) return Error.InvalidFormat;\n+        if (action.len == 0) return error.InvalidFormat;\n \n         const actionInfo = @typeInfo(Action).@\"union\";\n         inline for (actionInfo.fields) |field| {\n             if (std.mem.eql(u8, action, field.name)) {\n                 // If the field type is void we expect no value\n                 switch (field.type) {\n                     void => {\n-                        if (colonIdx != null) return Error.InvalidFormat;\n+                        if (param_) |_| return error.InvalidFormat;",
        "comment_created_at": "2025-07-06T04:40:31+00:00",
        "comment_author": "mitchellh",
        "comment_body": "I think it's more idiomatic to do a `!= null` if you're throwing away the value anyways.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2194272777",
    "pr_number": 7608,
    "pr_file": "src/cli/ssh_cache.zig",
    "created_at": "2025-07-09T07:27:26+00:00",
    "commented_code": "+const std = @import(\"std\");\n+const fs = std.fs;\n+const Allocator = std.mem.Allocator;\n+const xdg = @import(\"../os/xdg.zig\");\n+const args = @import(\"args.zig\");\n+const Action = @import(\"action.zig\").Action;\n+\n+pub const CacheError = error{\n+    InvalidCacheKey,\n+    CacheLocked,\n+} || fs.File.OpenError || fs.File.WriteError || Allocator.Error;\n+\n+const MAX_CACHE_SIZE = 512 * 1024; // 512KB - sufficient for approximately 10k entries\n+const NEVER_EXPIRE = 0;\n+\n+pub const Options = struct {\n+    clear: bool = false,\n+    add: ?[]const u8 = null,\n+    remove: ?[]const u8 = null,\n+    host: ?[]const u8 = null,\n+    @\"expire-days\": u32 = NEVER_EXPIRE,",
    "repo_full_name": "ghostty-org/ghostty",
    "discussion_comments": [
      {
        "comment_id": "2194272777",
        "repo_full_name": "ghostty-org/ghostty",
        "pr_number": 7608,
        "pr_file": "src/cli/ssh_cache.zig",
        "discussion_id": "2194272777",
        "commented_code": "@@ -0,0 +1,739 @@\n+const std = @import(\"std\");\n+const fs = std.fs;\n+const Allocator = std.mem.Allocator;\n+const xdg = @import(\"../os/xdg.zig\");\n+const args = @import(\"args.zig\");\n+const Action = @import(\"action.zig\").Action;\n+\n+pub const CacheError = error{\n+    InvalidCacheKey,\n+    CacheLocked,\n+} || fs.File.OpenError || fs.File.WriteError || Allocator.Error;\n+\n+const MAX_CACHE_SIZE = 512 * 1024; // 512KB - sufficient for approximately 10k entries\n+const NEVER_EXPIRE = 0;\n+\n+pub const Options = struct {\n+    clear: bool = false,\n+    add: ?[]const u8 = null,\n+    remove: ?[]const u8 = null,\n+    host: ?[]const u8 = null,\n+    @\"expire-days\": u32 = NEVER_EXPIRE,",
        "comment_created_at": "2025-07-09T07:27:26+00:00",
        "comment_author": "pluiedev",
        "comment_body": "Make this an explicit optional instead of using magic constants",
        "pr_file_module": null
      }
    ]
  }
]