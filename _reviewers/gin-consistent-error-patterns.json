[
  {
    "discussion_id": "680053240",
    "pr_number": 2785,
    "pr_file": "binding/json.go",
    "created_at": "2021-07-30T16:20:04+00:00",
    "commented_code": "func (jsonBinding) Bind(req *http.Request, obj interface{}) error {\n \tif req == nil || req.Body == nil {\n-\t\treturn errors.New(\"invalid request\")\n+\t\treturn InvalidRequest",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "680053240",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2785,
        "pr_file": "binding/json.go",
        "discussion_id": "680053240",
        "commented_code": "@@ -32,7 +37,7 @@ func (jsonBinding) Name() string {\n \n func (jsonBinding) Bind(req *http.Request, obj interface{}) error {\n \tif req == nil || req.Body == nil {\n-\t\treturn errors.New(\"invalid request\")\n+\t\treturn InvalidRequest",
        "comment_created_at": "2021-07-30T16:20:04+00:00",
        "comment_author": "kszafran",
        "comment_body": "How about:\r\n```suggestion\r\n\t\treturn ErrInvalidRequest\r\n```\r\nI think it's a common way to name errors.",
        "pr_file_module": null
      },
      {
        "comment_id": "680336992",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2785,
        "pr_file": "binding/json.go",
        "discussion_id": "680053240",
        "commented_code": "@@ -32,7 +37,7 @@ func (jsonBinding) Name() string {\n \n func (jsonBinding) Bind(req *http.Request, obj interface{}) error {\n \tif req == nil || req.Body == nil {\n-\t\treturn errors.New(\"invalid request\")\n+\t\treturn InvalidRequest",
        "comment_created_at": "2021-07-31T09:42:09+00:00",
        "comment_author": "daheige",
        "comment_body": "ok,thinks @kszafran ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2097646517",
    "pr_number": 4227,
    "pr_file": "context.go",
    "created_at": "2025-05-20T10:49:49+00:00",
    "commented_code": "// It will abort the request with HTTP 400 if any error occurs.\n // See the binding package.\n func (c *Context) MustBindWith(obj any, b binding.Binding) error {\n-\tif err := c.ShouldBindWith(obj, b); err != nil {\n-\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\terr := c.ShouldBindWith(obj, b)\n+\tif err != nil {\n+\t\tmaxBytesErr := &http.MaxBytesError{}\n+\t\tswitch {\n+\t\tcase errors.As(err, &maxBytesErr):\n+\t\t\tc.AbortWithError(http.StatusRequestEntityTooLarge, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\tdefault:\n+\t\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\t}",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2097646517",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4227,
        "pr_file": "context.go",
        "discussion_id": "2097646517",
        "commented_code": "@@ -769,8 +769,15 @@ func (c *Context) BindUri(obj any) error {\n // It will abort the request with HTTP 400 if any error occurs.\n // See the binding package.\n func (c *Context) MustBindWith(obj any, b binding.Binding) error {\n-\tif err := c.ShouldBindWith(obj, b); err != nil {\n-\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\terr := c.ShouldBindWith(obj, b)\n+\tif err != nil {\n+\t\tmaxBytesErr := &http.MaxBytesError{}\n+\t\tswitch {\n+\t\tcase errors.As(err, &maxBytesErr):\n+\t\t\tc.AbortWithError(http.StatusRequestEntityTooLarge, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\tdefault:\n+\t\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\t}",
        "comment_created_at": "2025-05-20T10:49:49+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] The calls to `c.AbortWithError(...).SetType(...)` in each branch are duplicated. You could switch on the status code (413 vs 400) and then call `AbortWithError` once after the switch to reduce duplication.\n```suggestion\n\t\tvar statusCode int\n\t\tswitch {\n\t\tcase errors.As(err, &maxBytesErr):\n\t\t\tstatusCode = http.StatusRequestEntityTooLarge\n\t\tdefault:\n\t\t\tstatusCode = http.StatusBadRequest\n\t\t}\n\t\tc.AbortWithError(statusCode, err).SetType(ErrorTypeBind) //nolint: errcheck\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2098467774",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4227,
        "pr_file": "context.go",
        "discussion_id": "2097646517",
        "commented_code": "@@ -769,8 +769,15 @@ func (c *Context) BindUri(obj any) error {\n // It will abort the request with HTTP 400 if any error occurs.\n // See the binding package.\n func (c *Context) MustBindWith(obj any, b binding.Binding) error {\n-\tif err := c.ShouldBindWith(obj, b); err != nil {\n-\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\terr := c.ShouldBindWith(obj, b)\n+\tif err != nil {\n+\t\tmaxBytesErr := &http.MaxBytesError{}\n+\t\tswitch {\n+\t\tcase errors.As(err, &maxBytesErr):\n+\t\t\tc.AbortWithError(http.StatusRequestEntityTooLarge, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\tdefault:\n+\t\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\t\t}",
        "comment_created_at": "2025-05-20T17:00:44+00:00",
        "comment_author": "ItalyPaleAle",
        "comment_body": "The original code is a lot more readable",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "197316932",
    "pr_number": 1401,
    "pr_file": "examples/grpc/gin/main.go",
    "created_at": "2018-06-22T01:04:35+00:00",
    "commented_code": "+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\t\"net/http\"\n+\n+\t\"github.com/gin-gonic/gin\"\n+\tpb \"github.com/gin-gonic/gin/examples/grpc/pb\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+func main() {\n+\t// Set up a connection to the server.\n+\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n+\tif err != nil {\n+\t\tlog.Fatalf(\"did not connect: %v\", err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := pb.NewGreeterClient(conn)\n+\n+\t// Set up a http setver.\n+\tr := gin.Default()\n+\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n+\t\tname := c.Param(\"name\")\n+\n+\t\t// Contact the server and print out its response.\n+\t\treq := &pb.HelloRequest{Name: name}\n+\t\tres, err := client.SayHello(g, req)\n+\t\tif err != nil {\n+\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n+\t\t\t\t\"error\": err.Error(),\n+\t\t\t})\n+\t\t} else {\n+\t\t\tc.JSON(http.StatusOK, gin.H{\n+\t\t\t\t\"result\": fmt.Sprint(res.Message),\n+\t\t\t})\n+\t\t}",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "197316932",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 1401,
        "pr_file": "examples/grpc/gin/main.go",
        "discussion_id": "197316932",
        "commented_code": "@@ -0,0 +1,45 @@\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"log\"\n+\t\"net/http\"\n+\n+\t\"github.com/gin-gonic/gin\"\n+\tpb \"github.com/gin-gonic/gin/examples/grpc/pb\"\n+\t\"google.golang.org/grpc\"\n+)\n+\n+func main() {\n+\t// Set up a connection to the server.\n+\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n+\tif err != nil {\n+\t\tlog.Fatalf(\"did not connect: %v\", err)\n+\t}\n+\tdefer conn.Close()\n+\tclient := pb.NewGreeterClient(conn)\n+\n+\t// Set up a http setver.\n+\tr := gin.Default()\n+\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n+\t\tname := c.Param(\"name\")\n+\n+\t\t// Contact the server and print out its response.\n+\t\treq := &pb.HelloRequest{Name: name}\n+\t\tres, err := client.SayHello(g, req)\n+\t\tif err != nil {\n+\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n+\t\t\t\t\"error\": err.Error(),\n+\t\t\t})\n+\t\t} else {\n+\t\t\tc.JSON(http.StatusOK, gin.H{\n+\t\t\t\t\"result\": fmt.Sprint(res.Message),\n+\t\t\t})\n+\t\t}",
        "comment_created_at": "2018-06-22T01:04:35+00:00",
        "comment_author": "appleboy",
        "comment_body": "maybe updated as the following for readable.\r\n\r\n```go\r\n\t\tif err != nil {\r\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\r\n\t\t\t\t\"error\": err.Error(),\r\n\t\t\t})\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\tc.JSON(http.StatusOK, gin.H{\r\n\t\t\t\"result\": fmt.Sprint(res.Message),\r\n\t\t})\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "127595934",
    "pr_number": 1022,
    "pr_file": "examples/upload-file/multiple/main.go",
    "created_at": "2017-07-16T00:33:13+00:00",
    "commented_code": "files := form.File[\"files\"]\n \n \t\tfor _, file := range files {\n-\t\t\t// Source\n-\t\t\tsrc, err := file.Open()\n-\t\t\tif err != nil {\n-\t\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"file open err: %s\", err.Error()))\n-\t\t\t\treturn\n+\t\t\tif err := c.SaveUploadedFile(file, file.Filename); err != nil {\n+\t\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "127595934",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 1022,
        "pr_file": "examples/upload-file/multiple/main.go",
        "discussion_id": "127595934",
        "commented_code": "@@ -25,24 +23,9 @@ func main() {\n \t\tfiles := form.File[\"files\"]\n \n \t\tfor _, file := range files {\n-\t\t\t// Source\n-\t\t\tsrc, err := file.Open()\n-\t\t\tif err != nil {\n-\t\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"file open err: %s\", err.Error()))\n-\t\t\t\treturn\n+\t\t\tif err := c.SaveUploadedFile(file, file.Filename); err != nil {\n+\t\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))",
        "comment_created_at": "2017-07-16T00:33:13+00:00",
        "comment_author": "appleboy",
        "comment_body": "missing `return`",
        "pr_file_module": null
      }
    ]
  }
]