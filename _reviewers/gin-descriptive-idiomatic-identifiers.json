[
  {
    "discussion_id": "1898148828",
    "pr_number": 3391,
    "pr_file": "codec/api/json.go",
    "created_at": "2024-12-26T23:43:02+00:00",
    "commented_code": "+// Copyright 2022 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package api\n+\n+import \"io\"\n+\n+// JsonApi the api for json codec.\n+type JsonApi interface {\n+\tMarshal(v any) ([]byte, error)\n+\tUnmarshal(data []byte, v any) error\n+\tMarshalIndent(v any, prefix, indent string) ([]byte, error)\n+\tNewEncoder(writer io.Writer) JsonEncoder\n+\tNewDecoder(reader io.Reader) JsonDecoder\n+}\n+",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "1898148828",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3391,
        "pr_file": "codec/api/json.go",
        "discussion_id": "1898148828",
        "commented_code": "@@ -0,0 +1,54 @@\n+// Copyright 2022 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package api\n+\n+import \"io\"\n+\n+// JsonApi the api for json codec.\n+type JsonApi interface {\n+\tMarshal(v any) ([]byte, error)\n+\tUnmarshal(data []byte, v any) error\n+\tMarshalIndent(v any, prefix, indent string) ([]byte, error)\n+\tNewEncoder(writer io.Writer) JsonEncoder\n+\tNewDecoder(reader io.Reader) JsonDecoder\n+}\n+",
        "comment_created_at": "2024-12-26T23:43:02+00:00",
        "comment_author": "appleboy",
        "comment_body": "1. Should we move the file to `json` folder?\r\n2. Rename the `JsonApi` to `API`.\r\n3. `JsonEncoder` => `Encoder`\r\n4. `JsonDecoder` => `Decoder`",
        "pr_file_module": null
      },
      {
        "comment_id": "1898229054",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3391,
        "pr_file": "codec/api/json.go",
        "discussion_id": "1898148828",
        "commented_code": "@@ -0,0 +1,54 @@\n+// Copyright 2022 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package api\n+\n+import \"io\"\n+\n+// JsonApi the api for json codec.\n+type JsonApi interface {\n+\tMarshal(v any) ([]byte, error)\n+\tUnmarshal(data []byte, v any) error\n+\tMarshalIndent(v any, prefix, indent string) ([]byte, error)\n+\tNewEncoder(writer io.Writer) JsonEncoder\n+\tNewDecoder(reader io.Reader) JsonDecoder\n+}\n+",
        "comment_created_at": "2024-12-27T04:08:24+00:00",
        "comment_author": "timandy",
        "comment_body": "Hi, @appleboy . I have refacted the PR. PTAL, Thanks.",
        "pr_file_module": null
      },
      {
        "comment_id": "1898344272",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3391,
        "pr_file": "codec/api/json.go",
        "discussion_id": "1898148828",
        "commented_code": "@@ -0,0 +1,54 @@\n+// Copyright 2022 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package api\n+\n+import \"io\"\n+\n+// JsonApi the api for json codec.\n+type JsonApi interface {\n+\tMarshal(v any) ([]byte, error)\n+\tUnmarshal(data []byte, v any) error\n+\tMarshalIndent(v any, prefix, indent string) ([]byte, error)\n+\tNewEncoder(writer io.Writer) JsonEncoder\n+\tNewDecoder(reader io.Reader) JsonDecoder\n+}\n+",
        "comment_created_at": "2024-12-27T08:03:49+00:00",
        "comment_author": "appleboy",
        "comment_body": "@timandy LGTM",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1061095253",
    "pr_number": 3460,
    "pr_file": "tree.go",
    "created_at": "2023-01-04T02:38:08+00:00",
    "commented_code": "for l := len(*skippedNodes); l > 0; {",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "1061095253",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3460,
        "pr_file": "tree.go",
        "discussion_id": "1061095253",
        "commented_code": "@@ -462,6 +462,7 @@ walk: // Outer loop for walking the tree\n \t\t\t\t\t\tfor l := len(*skippedNodes); l > 0; {",
        "comment_created_at": "2023-01-04T02:38:08+00:00",
        "comment_author": "thinkerou",
        "comment_body": "use `for l := len(*skippedNodes); l >0; l--)`?\r\n\r\nmaybe rename `l` to `length`, because `l` like `1`",
        "pr_file_module": null
      },
      {
        "comment_id": "1061173749",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3460,
        "pr_file": "tree.go",
        "discussion_id": "1061095253",
        "commented_code": "@@ -462,6 +462,7 @@ walk: // Outer loop for walking the tree\n \t\t\t\t\t\tfor l := len(*skippedNodes); l > 0; {",
        "comment_created_at": "2023-01-04T06:41:48+00:00",
        "comment_author": "kristiansvalland",
        "comment_body": "Much cleaner. Fixed :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "659322066",
    "pr_number": 2767,
    "pr_file": "tree.go",
    "created_at": "2021-06-27T13:28:43+00:00",
    "commented_code": "// made if a handle exists with an extra (without the) trailing slash for the\n // given path.\n func (n *node) getValue(path string, params *Params, unescape bool) (value nodeValue) {\n-\tvar skipped *skip\n+\tvar (\n+\t\tskipped *skip\n+\t\tnroot   = &(*n)                                // not found `level 1 router` use nroot\n+\t\tldi     = len(strings.Split(path, \"/\")[1]) + 1 // level 1 router '/' index\n+\t\tri      int                                    //record index",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "659322066",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2767,
        "pr_file": "tree.go",
        "discussion_id": "659322066",
        "commented_code": "@@ -405,11 +406,30 @@ type nodeValue struct {\n // made if a handle exists with an extra (without the) trailing slash for the\n // given path.\n func (n *node) getValue(path string, params *Params, unescape bool) (value nodeValue) {\n-\tvar skipped *skip\n+\tvar (\n+\t\tskipped *skip\n+\t\tnroot   = &(*n)                                // not found `level 1 router` use nroot\n+\t\tldi     = len(strings.Split(path, \"/\")[1]) + 1 // level 1 router '/' index\n+\t\tri      int                                    //record index",
        "comment_created_at": "2021-06-27T13:28:43+00:00",
        "comment_author": "rw-access",
        "comment_body": "these names are a little too short and cryptic for my taste. mind making them longer? (i.e. `recordIndex`)",
        "pr_file_module": null
      },
      {
        "comment_id": "659414745",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2767,
        "pr_file": "tree.go",
        "discussion_id": "659322066",
        "commented_code": "@@ -405,11 +406,30 @@ type nodeValue struct {\n // made if a handle exists with an extra (without the) trailing slash for the\n // given path.\n func (n *node) getValue(path string, params *Params, unescape bool) (value nodeValue) {\n-\tvar skipped *skip\n+\tvar (\n+\t\tskipped *skip\n+\t\tnroot   = &(*n)                                // not found `level 1 router` use nroot\n+\t\tldi     = len(strings.Split(path, \"/\")[1]) + 1 // level 1 router '/' index\n+\t\tri      int                                    //record index",
        "comment_created_at": "2021-06-28T01:50:05+00:00",
        "comment_author": "qm012",
        "comment_body": "thanks for your review, more comments have been added.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "361326130",
    "pr_number": 2194,
    "pr_file": "binding/binding.go",
    "created_at": "2019-12-25T16:32:04+00:00",
    "commented_code": "BindUri(map[string][]string, interface{}) error\n }\n \n-// StructValidator is the minimal interface which needs to be implemented in\n+// ValidatorImp is the minimal interface which needs to be implemented in\n // order for it to be used as the validator engine for ensuring the correctness\n // of the request. Gin provides a default implementation for this using\n // https://github.com/go-playground/validator/tree/v8.18.2.\n-type StructValidator interface {\n-\t// ValidateStruct can receive any kind of type and it should never panic, even if the configuration is not right.\n+type ValidatorImp interface {",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "361326130",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2194,
        "pr_file": "binding/binding.go",
        "discussion_id": "361326130",
        "commented_code": "@@ -43,17 +43,17 @@ type BindingUri interface {\n \tBindUri(map[string][]string, interface{}) error\n }\n \n-// StructValidator is the minimal interface which needs to be implemented in\n+// ValidatorImp is the minimal interface which needs to be implemented in\n // order for it to be used as the validator engine for ensuring the correctness\n // of the request. Gin provides a default implementation for this using\n // https://github.com/go-playground/validator/tree/v8.18.2.\n-type StructValidator interface {\n-\t// ValidateStruct can receive any kind of type and it should never panic, even if the configuration is not right.\n+type ValidatorImp interface {",
        "comment_created_at": "2019-12-25T16:32:04+00:00",
        "comment_author": "vkd",
        "comment_body": "Please use the Golang [interface naming conversion](https://golang.org/doc/effective_go.html#interface-names).",
        "pr_file_module": null
      }
    ]
  }
]