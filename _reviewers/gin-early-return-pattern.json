[
  {
    "discussion_id": "790190955",
    "pr_number": 2857,
    "pr_file": "gin.go",
    "created_at": "2022-01-22T22:24:04+00:00",
    "commented_code": "return err\n }\n \n+// updateRouteTree do update to the route tree recursively\n+func updateRouteTree(n *node) {\n+\tn.path = strings.ReplaceAll(n.path, escapedColon, colon)\n+\tn.fullPath = strings.ReplaceAll(n.fullPath, escapedColon, colon)\n+\tn.indices = strings.ReplaceAll(n.indices, backslash, colon)\n+\tif n.children != nil {",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "790190955",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2857,
        "pr_file": "gin.go",
        "discussion_id": "790190955",
        "commented_code": "@@ -394,6 +398,25 @@ func (engine *Engine) parseTrustedProxies() error {\n \treturn err\n }\n \n+// updateRouteTree do update to the route tree recursively\n+func updateRouteTree(n *node) {\n+\tn.path = strings.ReplaceAll(n.path, escapedColon, colon)\n+\tn.fullPath = strings.ReplaceAll(n.fullPath, escapedColon, colon)\n+\tn.indices = strings.ReplaceAll(n.indices, backslash, colon)\n+\tif n.children != nil {",
        "comment_created_at": "2022-01-22T22:24:04+00:00",
        "comment_author": "cikay",
        "comment_body": "[Reverse the condition and return early.](https://szymonkrajewski.pl/why-should-you-return-early/)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1533882042",
    "pr_number": 3871,
    "pr_file": "context_test.go",
    "created_at": "2024-03-21T13:12:43+00:00",
    "commented_code": "}\n }\n \n+func TestContextShouldBindBodyWithJSON(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" JSON & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeJSON struct {\n+\t\t\tFoo string `json:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjJSON := typeJSON{}\n+\t\tif tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{}, objJSON)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{\"FOO\"}, objJSON)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithXML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" XML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeXML struct {\n+\t\t\tFoo string `xml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjXML := typeXML{}\n+\t\tif tt.bindingBody != binding.XML {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{}, objXML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{\"FOO\"}, objXML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithYAML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" YAML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeYAML struct {\n+\t\t\tFoo string `yaml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjYAML := typeYAML{}\n+\t\tif tt.bindingBody != binding.YAML && tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{}, objYAML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{\"FOO\"}, objYAML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithTOML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" TOML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo = 'FOO'`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeTOML struct {\n+\t\t\tFoo string `toml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjTOML := typeTOML{}\n+\t\tif tt.bindingBody != binding.TOML {",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "1533882042",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3871,
        "pr_file": "context_test.go",
        "discussion_id": "1533882042",
        "commented_code": "@@ -1975,6 +1975,210 @@ func TestContextShouldBindBodyWith(t *testing.T) {\n \t}\n }\n \n+func TestContextShouldBindBodyWithJSON(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" JSON & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeJSON struct {\n+\t\t\tFoo string `json:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjJSON := typeJSON{}\n+\t\tif tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{}, objJSON)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{\"FOO\"}, objJSON)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithXML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" XML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeXML struct {\n+\t\t\tFoo string `xml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjXML := typeXML{}\n+\t\tif tt.bindingBody != binding.XML {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{}, objXML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{\"FOO\"}, objXML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithYAML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" YAML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeYAML struct {\n+\t\t\tFoo string `yaml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjYAML := typeYAML{}\n+\t\tif tt.bindingBody != binding.YAML && tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{}, objYAML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{\"FOO\"}, objYAML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithTOML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" TOML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo = 'FOO'`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeTOML struct {\n+\t\t\tFoo string `toml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjTOML := typeTOML{}\n+\t\tif tt.bindingBody != binding.TOML {",
        "comment_created_at": "2024-03-21T13:12:43+00:00",
        "comment_author": "appleboy",
        "comment_body": "Chang the coding style from `if` ... `else` to \r\n\r\n```go\r\nif xxx {\r\n  return\r\n}\r\nxxxx\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1535099348",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 3871,
        "pr_file": "context_test.go",
        "discussion_id": "1533882042",
        "commented_code": "@@ -1975,6 +1975,210 @@ func TestContextShouldBindBodyWith(t *testing.T) {\n \t}\n }\n \n+func TestContextShouldBindBodyWithJSON(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" JSON & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" JSON & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeJSON struct {\n+\t\t\tFoo string `json:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjJSON := typeJSON{}\n+\t\tif tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{}, objJSON)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithJSON(&objJSON))\n+\t\t\tassert.Equal(t, typeJSON{\"FOO\"}, objJSON)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithXML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" XML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" XML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeXML struct {\n+\t\t\tFoo string `xml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjXML := typeXML{}\n+\t\tif tt.bindingBody != binding.XML {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{}, objXML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithXML(&objXML))\n+\t\t\tassert.Equal(t, typeXML{\"FOO\"}, objXML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithYAML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" YAML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" YAML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo=FOO`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeYAML struct {\n+\t\t\tFoo string `yaml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjYAML := typeYAML{}\n+\t\tif tt.bindingBody != binding.YAML && tt.bindingBody != binding.JSON {\n+\t\t\tassert.Error(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{}, objYAML)\n+\t\t} else {\n+\t\t\tassert.NoError(t, c.ShouldBindBodyWithYAML(&objYAML))\n+\t\t\tassert.Equal(t, typeYAML{\"FOO\"}, objYAML)\n+\t\t}\n+\t}\n+}\n+\n+func TestContextShouldBindBodyWithTOML(t *testing.T) {\n+\tfor _, tt := range []struct {\n+\t\tname        string\n+\t\tbindingBody binding.BindingBody\n+\t\tbody        string\n+\t}{\n+\t\t{\n+\t\t\tname:        \" TOML & JSON-BODY \",\n+\t\t\tbindingBody: binding.JSON,\n+\t\t\tbody:        `{\"foo\":\"FOO\"}`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & XML-BODY \",\n+\t\t\tbindingBody: binding.XML,\n+\t\t\tbody: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+<foo>FOO</foo>\n+</root>`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & YAML-BODY \",\n+\t\t\tbindingBody: binding.YAML,\n+\t\t\tbody:        `foo: FOO`,\n+\t\t},\n+\t\t{\n+\t\t\tname:        \" TOML & TOM-BODY \",\n+\t\t\tbindingBody: binding.TOML,\n+\t\t\tbody:        `foo = 'FOO'`,\n+\t\t},\n+\t} {\n+\t\tt.Logf(\"testing: %s\", tt.name)\n+\n+\t\tw := httptest.NewRecorder()\n+\t\tc, _ := CreateTestContext(w)\n+\n+\t\tc.Request, _ = http.NewRequest(\"POST\", \"/\", bytes.NewBufferString(tt.body))\n+\n+\t\ttype typeTOML struct {\n+\t\t\tFoo string `toml:\"foo\" binding:\"required\"`\n+\t\t}\n+\t\tobjTOML := typeTOML{}\n+\t\tif tt.bindingBody != binding.TOML {",
        "comment_created_at": "2024-03-22T06:14:59+00:00",
        "comment_author": "RedCrazyGhost",
        "comment_body": "I've changed the code style and clarified the binding type.\r\n\r\nTake JSON as an example:\r\n```go\r\nif tt.bindingBody == binding.JSON{\r\n\tassert.NoError(t, c.ShouldBindBodyWithJSON(&objJSON))\r\n\tassert.Equal(t, typeJSON{\"FOO\"}, objJSON)\r\n}\r\n\r\nif tt.bindingBody == binding.XML {\r\n\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\r\n\tassert.Equal(t, typeJSON{}, objJSON)\r\n}\r\n\r\nif tt.bindingBody == binding.YAML {\r\n\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\r\n\tassert.Equal(t, typeJSON{}, objJSON)\r\n}\r\n\r\nif tt.bindingBody == binding.TOML {\r\n\tassert.Error(t, c.ShouldBindBodyWithJSON(&objJSON))\r\n\tassert.Equal(t, typeJSON{}, objJSON)\r\n}\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1215485128",
    "pr_number": 2337,
    "pr_file": "debug.go",
    "created_at": "2023-06-03T12:26:18+00:00",
    "commented_code": "func debugPrint(format string, values ...interface{}) {\n \tif IsDebugging() {\n-\t\tif !strings.HasSuffix(format, \"\n\") {\n-\t\t\tformat += \"\n\"\n+\t\tif DebugPrintFunc == nil {\n+\t\t\tif !strings.HasSuffix(format, \"\n\") {\n+\t\t\t\tformat += \"\n\"\n+\t\t\t}\n+\t\t\tfmt.Fprintf(DefaultWriter, \"[GIN-debug] \"+format, values...)\n+\t\t} else {\n+\t\t\tDebugPrintFunc(format, values...)\n \t\t}",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "1215485128",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2337,
        "pr_file": "debug.go",
        "discussion_id": "1215485128",
        "commented_code": "@@ -49,10 +52,14 @@ func debugPrintLoadTemplate(tmpl *template.Template) {\n \n func debugPrint(format string, values ...interface{}) {\n \tif IsDebugging() {\n-\t\tif !strings.HasSuffix(format, \"\\n\") {\n-\t\t\tformat += \"\\n\"\n+\t\tif DebugPrintFunc == nil {\n+\t\t\tif !strings.HasSuffix(format, \"\\n\") {\n+\t\t\t\tformat += \"\\n\"\n+\t\t\t}\n+\t\t\tfmt.Fprintf(DefaultWriter, \"[GIN-debug] \"+format, values...)\n+\t\t} else {\n+\t\t\tDebugPrintFunc(format, values...)\n \t\t}",
        "comment_created_at": "2023-06-03T12:26:18+00:00",
        "comment_author": "appleboy",
        "comment_body": "```go\r\n\t\tif !IsDebugging() {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif DebugPrintFunc != nil {\r\n\t\t\tDebugPrintFunc(format, values...)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif !strings.HasSuffix(format, \"\\n\") {\r\n\t\t\tformat += \"\\n\"\r\n\t\t}\r\n\t\tfmt.Fprintf(DefaultWriter, \"[GIN-debug] \"+format, values...)\r\n```\r\n\r\nmore readable?",
        "pr_file_module": null
      },
      {
        "comment_id": "1215676162",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2337,
        "pr_file": "debug.go",
        "discussion_id": "1215485128",
        "commented_code": "@@ -49,10 +52,14 @@ func debugPrintLoadTemplate(tmpl *template.Template) {\n \n func debugPrint(format string, values ...interface{}) {\n \tif IsDebugging() {\n-\t\tif !strings.HasSuffix(format, \"\\n\") {\n-\t\t\tformat += \"\\n\"\n+\t\tif DebugPrintFunc == nil {\n+\t\t\tif !strings.HasSuffix(format, \"\\n\") {\n+\t\t\t\tformat += \"\\n\"\n+\t\t\t}\n+\t\t\tfmt.Fprintf(DefaultWriter, \"[GIN-debug] \"+format, values...)\n+\t\t} else {\n+\t\t\tDebugPrintFunc(format, values...)\n \t\t}",
        "comment_created_at": "2023-06-03T17:29:14+00:00",
        "comment_author": "josegonzalez",
        "comment_body": "Updated!",
        "pr_file_module": null
      }
    ]
  }
]