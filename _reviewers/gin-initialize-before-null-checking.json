[
  {
    "discussion_id": "2097646503",
    "pr_number": 4227,
    "pr_file": "context.go",
    "created_at": "2025-05-20T10:49:49+00:00",
    "commented_code": "// It will abort the request with HTTP 400 if any error occurs.\n // See the binding package.\n func (c *Context) MustBindWith(obj any, b binding.Binding) error {\n-\tif err := c.ShouldBindWith(obj, b); err != nil {\n-\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\terr := c.ShouldBindWith(obj, b)\n+\tif err != nil {\n+\t\tmaxBytesErr := &http.MaxBytesError{}",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2097646503",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4227,
        "pr_file": "context.go",
        "discussion_id": "2097646503",
        "commented_code": "@@ -769,8 +769,15 @@ func (c *Context) BindUri(obj any) error {\n // It will abort the request with HTTP 400 if any error occurs.\n // See the binding package.\n func (c *Context) MustBindWith(obj any, b binding.Binding) error {\n-\tif err := c.ShouldBindWith(obj, b); err != nil {\n-\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) //nolint: errcheck\n+\terr := c.ShouldBindWith(obj, b)\n+\tif err != nil {\n+\t\tmaxBytesErr := &http.MaxBytesError{}",
        "comment_created_at": "2025-05-20T10:49:49+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] Consider declaring the target error variable as `var maxBytesErr *http.MaxBytesError` before the `errors.As` call. This is more idiomatic and avoids creating an unnecessary struct instance.\n```suggestion\n\t\tvar maxBytesErr *http.MaxBytesError\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "78336974",
    "pr_number": 702,
    "pr_file": "context.go",
    "created_at": "2016-09-12T09:02:24+00:00",
    "commented_code": "if c.Keys == nil {\n \t\tc.Keys = make(map[string]interface{})\n \t}\n+\tc.KeysLocker.Lock()",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "78336974",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 702,
        "pr_file": "context.go",
        "discussion_id": "78336974",
        "commented_code": "@@ -160,14 +162,18 @@ func (c *Context) Set(key string, value interface{}) {\n \tif c.Keys == nil {\n \t\tc.Keys = make(map[string]interface{})\n \t}\n+\tc.KeysLocker.Lock()",
        "comment_created_at": "2016-09-12T09:02:24+00:00",
        "comment_author": "cookingkode",
        "comment_body": "I would suggest taking it before nil check to avoid a set being lost..\n",
        "pr_file_module": null
      }
    ]
  }
]