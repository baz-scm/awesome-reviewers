[
  {
    "discussion_id": "2098373490",
    "pr_number": 4145,
    "pr_file": "render/bson.go",
    "created_at": "2025-05-20T16:12:52+00:00",
    "commented_code": "+// Copyright 2018 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package render\n+\n+import (\n+\t\"net/http\"\n+\n+\t\"go.mongodb.org/mongo-driver/bson\"\n+)\n+\n+// BSON contains the given interface object.\n+type BSON struct {\n+\tData any\n+}\n+\n+var bsonContentType = []string{\"application/bson\"}\n+\n+// Render (BSON) marshals the given interface object and writes data with custom ContentType.\n+func (r BSON) Render(w http.ResponseWriter) error {\n+\tr.WriteContentType(w)\n+\n+\tbytes, err := bson.Marshal(&r.Data)",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2098373490",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4145,
        "pr_file": "render/bson.go",
        "discussion_id": "2098373490",
        "commented_code": "@@ -0,0 +1,36 @@\n+// Copyright 2018 Gin Core Team. All rights reserved.\n+// Use of this source code is governed by a MIT style\n+// license that can be found in the LICENSE file.\n+\n+package render\n+\n+import (\n+\t\"net/http\"\n+\n+\t\"go.mongodb.org/mongo-driver/bson\"\n+)\n+\n+// BSON contains the given interface object.\n+type BSON struct {\n+\tData any\n+}\n+\n+var bsonContentType = []string{\"application/bson\"}\n+\n+// Render (BSON) marshals the given interface object and writes data with custom ContentType.\n+func (r BSON) Render(w http.ResponseWriter) error {\n+\tr.WriteContentType(w)\n+\n+\tbytes, err := bson.Marshal(&r.Data)",
        "comment_created_at": "2025-05-20T16:12:52+00:00",
        "comment_author": "Copilot",
        "comment_body": "Consider marshaling r.Data directly instead of taking its address with '&', unless this pattern is intentional for handling interface values. Using bson.Marshal(r.Data) may avoid potential issues with pointer indirection.\n```suggestion\n\tbytes, err := bson.Marshal(r.Data)\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "571702965",
    "pr_number": 2474,
    "pr_file": "context.go",
    "created_at": "2021-02-07T21:29:15+00:00",
    "commented_code": "}\n \t}\n \n-\tif ip, _, err := net.SplitHostPort(strings.TrimSpace(c.Request.RemoteAddr)); err == nil {\n-\t\treturn ip\n+\tip, _ := getTransportPeerIPForRequest(c.Request)\n+\n+\treturn ip\n+}\n+\n+func filterIPsFromUntrustedProxies(XForwardedForHeader string, req *http.Request, e *Engine) []string {\n+\tvar items, out []string\n+\tif XForwardedForHeader != \"\" {\n+\t\titems = strings.Split(XForwardedForHeader, \",\")\n+\t} else {\n+\t\treturn []string{}\n+\t}\n+\tif peerIP, err := getTransportPeerIPForRequest(req); err == nil {\n+\t\titems = append(items, peerIP)\n \t}\n \n-\treturn \"\"\n+\tfor i := len(items) - 1; i >= 0; i-- {\n+\t\titem := strings.TrimSpace(items[i])\n+\t\tip := net.ParseIP(item)\n+\t\tif ip == nil {\n+\t\t\treturn out\n+\t\t}\n+\n+\t\tout = prependString(ip.String(), out)\n+\t\tif !isTrustedProxy(ip, e) {\n+\t\t\treturn out\n+\t\t}\n+\t\t//\t\tout = prependString(ip.String(), out)\n+\t}\n+\treturn out\n+}\n+\n+func isTrustedProxy(ip net.IP, e *Engine) bool {\n+\tfor _, trustedProxy := range e.TrustedProxies {",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "571702965",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2474,
        "pr_file": "context.go",
        "discussion_id": "571702965",
        "commented_code": "@@ -746,11 +744,82 @@ func (c *Context) ClientIP() string {\n \t\t}\n \t}\n \n-\tif ip, _, err := net.SplitHostPort(strings.TrimSpace(c.Request.RemoteAddr)); err == nil {\n-\t\treturn ip\n+\tip, _ := getTransportPeerIPForRequest(c.Request)\n+\n+\treturn ip\n+}\n+\n+func filterIPsFromUntrustedProxies(XForwardedForHeader string, req *http.Request, e *Engine) []string {\n+\tvar items, out []string\n+\tif XForwardedForHeader != \"\" {\n+\t\titems = strings.Split(XForwardedForHeader, \",\")\n+\t} else {\n+\t\treturn []string{}\n+\t}\n+\tif peerIP, err := getTransportPeerIPForRequest(req); err == nil {\n+\t\titems = append(items, peerIP)\n \t}\n \n-\treturn \"\"\n+\tfor i := len(items) - 1; i >= 0; i-- {\n+\t\titem := strings.TrimSpace(items[i])\n+\t\tip := net.ParseIP(item)\n+\t\tif ip == nil {\n+\t\t\treturn out\n+\t\t}\n+\n+\t\tout = prependString(ip.String(), out)\n+\t\tif !isTrustedProxy(ip, e) {\n+\t\t\treturn out\n+\t\t}\n+\t\t//\t\tout = prependString(ip.String(), out)\n+\t}\n+\treturn out\n+}\n+\n+func isTrustedProxy(ip net.IP, e *Engine) bool {\n+\tfor _, trustedProxy := range e.TrustedProxies {",
        "comment_created_at": "2021-02-07T21:29:15+00:00",
        "comment_author": "manucorporat",
        "comment_body": "might be worth it to precompute the array of CIDR on `engine.Run()` and save it to: `engine.trustedCIDR` so we don't need to parse the list of trusted proxies every time, the ClientIP() is called",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "208207005",
    "pr_number": 1447,
    "pr_file": "tree.go",
    "created_at": "2018-08-07T12:17:07+00:00",
    "commented_code": "p[i].Value = val\n \t\t\t\t\t}\n \n+\t\t\t\t\t// replace p.value with p.key (pattern :)\n+\t\t\t\t\trelativePath = strings.Replace(relativePath, p[i].Value, \":\"+p[i].Key, 1)\n+",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "208207005",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 1447,
        "pr_file": "tree.go",
        "discussion_id": "208207005",
        "commented_code": "@@ -415,6 +416,9 @@ walk: // Outer loop for walking the tree\n \t\t\t\t\t\tp[i].Value = val\n \t\t\t\t\t}\n \n+\t\t\t\t\t// replace p.value with p.key (pattern :)\n+\t\t\t\t\trelativePath = strings.Replace(relativePath, p[i].Value, \":\"+p[i].Key, 1)\n+",
        "comment_created_at": "2018-08-07T12:17:07+00:00",
        "comment_author": "isgj",
        "comment_body": "Instead of calculating the `relativePath` on every request, you can save the [fullPath](https://github.com/youngbloood/gin/blob/adbfb90327a9e219af8a3543da29f9f71bd8f5ee/tree.go#L126) in the `node` `method: addRoute` so when you have the node you have also the `relativePath`. This means you have to add a field in the `node srtuct`.",
        "pr_file_module": null
      }
    ]
  }
]