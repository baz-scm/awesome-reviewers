[
  {
    "discussion_id": "510830823",
    "pr_number": 2316,
    "pr_file": "context.go",
    "created_at": "2020-10-23T11:54:45+00:00",
    "commented_code": "return offered[0]\n \t}\n \tfor _, accepted := range c.Accepted {\n+\t\t// According to RFC 2616, media-range = ( \"*/*\" | ( type \"/\" \"*\" ) | ( type \"/\" subtype ) )",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "510830823",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2316,
        "pr_file": "context.go",
        "discussion_id": "510830823",
        "commented_code": "@@ -1047,19 +1047,27 @@ func (c *Context) NegotiateFormat(offered ...string) string {\n \t\treturn offered[0]\n \t}\n \tfor _, accepted := range c.Accepted {\n+\t\t// According to RFC 2616, media-range = ( \"*/*\" | ( type \"/\" \"*\" ) | ( type \"/\" subtype ) )",
        "comment_created_at": "2020-10-23T11:54:45+00:00",
        "comment_author": "rickb777",
        "comment_body": "need to update this to RFC7231 section 5.3.2\r\nhttps://tools.ietf.org/html/rfc7231#section-5.3.2",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "351568431",
    "pr_number": 2155,
    "pr_file": "logger.go",
    "created_at": "2019-11-28T02:21:16+00:00",
    "commented_code": "method := p.Method\n \n \tswitch method {\n-\tcase \"GET\":\n+\tcase http.MethodGet:\n \t\treturn blue\n-\tcase \"POST\":\n+\tcase http.MethodPost:\n \t\treturn cyan\n-\tcase \"PUT\":\n+\tcase http.MethodPut:\n \t\treturn yellow\n-\tcase \"DELETE\":\n+\tcase http.MethodDelete:\n \t\treturn red\n-\tcase \"PATCH\":\n+\tcase http.Patch:",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "351568431",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2155,
        "pr_file": "logger.go",
        "discussion_id": "351568431",
        "commented_code": "@@ -99,19 +99,19 @@ func (p *LogFormatterParams) MethodColor() string {\n \tmethod := p.Method\n \n \tswitch method {\n-\tcase \"GET\":\n+\tcase http.MethodGet:\n \t\treturn blue\n-\tcase \"POST\":\n+\tcase http.MethodPost:\n \t\treturn cyan\n-\tcase \"PUT\":\n+\tcase http.MethodPut:\n \t\treturn yellow\n-\tcase \"DELETE\":\n+\tcase http.MethodDelete:\n \t\treturn red\n-\tcase \"PATCH\":\n+\tcase http.Patch:",
        "comment_created_at": "2019-11-28T02:21:16+00:00",
        "comment_author": "appleboy",
        "comment_body": "http.MethodPatch?",
        "pr_file_module": null
      },
      {
        "comment_id": "351576122",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 2155,
        "pr_file": "logger.go",
        "discussion_id": "351568431",
        "commented_code": "@@ -99,19 +99,19 @@ func (p *LogFormatterParams) MethodColor() string {\n \tmethod := p.Method\n \n \tswitch method {\n-\tcase \"GET\":\n+\tcase http.MethodGet:\n \t\treturn blue\n-\tcase \"POST\":\n+\tcase http.MethodPost:\n \t\treturn cyan\n-\tcase \"PUT\":\n+\tcase http.MethodPut:\n \t\treturn yellow\n-\tcase \"DELETE\":\n+\tcase http.MethodDelete:\n \t\treturn red\n-\tcase \"PATCH\":\n+\tcase http.Patch:",
        "comment_created_at": "2019-11-28T03:08:32+00:00",
        "comment_author": "thinkerou",
        "comment_body": "Yes. typo!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "211065154",
    "pr_number": 1479,
    "pr_file": "context_test.go",
    "created_at": "2018-08-18T04:55:47+00:00",
    "commented_code": "assert.Equal(t, \"application/x-yaml; charset=utf-8\", w.HeaderMap.Get(\"Content-Type\"))\n }\n \n+// TestContextRenderProtoBuf tests that the response is serialized as ProtoBuf\n+// and Content-Type is set to application/x-protobuf\n+// and we just use the example protobuf to check if the response is correct\n+func TestContextRenderProtoBuf(t *testing.T) {\n+\tw := httptest.NewRecorder()\n+\tc, _ := CreateTestContext(w)\n+\n+\treps := []int64{int64(1), int64(2)}\n+\tlabel := \"test\"\n+\tdata := &testdata.Test{\n+\t\tLabel: &label,\n+\t\tReps:  reps,\n+\t}\n+\n+\tc.ProtoBuf(201, data)\n+\n+\tprotoData, err := proto.Marshal(data)\n+\tassert.NoError(t, err)\n+\n+\tassert.Equal(t, 201, w.Code)",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "211065154",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 1479,
        "pr_file": "context_test.go",
        "discussion_id": "211065154",
        "commented_code": "@@ -954,6 +957,30 @@ func TestContextRenderYAML(t *testing.T) {\n \tassert.Equal(t, \"application/x-yaml; charset=utf-8\", w.HeaderMap.Get(\"Content-Type\"))\n }\n \n+// TestContextRenderProtoBuf tests that the response is serialized as ProtoBuf\n+// and Content-Type is set to application/x-protobuf\n+// and we just use the example protobuf to check if the response is correct\n+func TestContextRenderProtoBuf(t *testing.T) {\n+\tw := httptest.NewRecorder()\n+\tc, _ := CreateTestContext(w)\n+\n+\treps := []int64{int64(1), int64(2)}\n+\tlabel := \"test\"\n+\tdata := &testdata.Test{\n+\t\tLabel: &label,\n+\t\tReps:  reps,\n+\t}\n+\n+\tc.ProtoBuf(201, data)\n+\n+\tprotoData, err := proto.Marshal(data)\n+\tassert.NoError(t, err)\n+\n+\tassert.Equal(t, 201, w.Code)",
        "comment_created_at": "2018-08-18T04:55:47+00:00",
        "comment_author": "appleboy",
        "comment_body": "Please change `201` to http status code in `net/http` package.",
        "pr_file_module": null
      }
    ]
  }
]