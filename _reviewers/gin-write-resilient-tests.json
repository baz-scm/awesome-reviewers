[
  {
    "discussion_id": "2097646409",
    "pr_number": 4145,
    "pr_file": "render/render_test.go",
    "created_at": "2025-05-20T10:49:45+00:00",
    "commented_code": "require.Error(t, err)\n }\n \n+func TestRenderBSON(t *testing.T) {\n+\tw := httptest.NewRecorder()\n+\ttype mystruct struct {\n+\t\tLabel string\n+\t\tReps  []int64\n+\t}\n+\tvar data mystruct = mystruct{\n+\t\tLabel: \"test\",\n+\t\tReps:  []int64{int64(1), int64(2)}}\n+\n+\t(BSON{data}).WriteContentType(w)\n+\tbsonData, err := bson.Marshal(data)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, \"application/bson\", w.Header().Get(\"Content-Type\"))\n+\n+\terr = (BSON{data}).Render(w)\n+\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, string(bsonData), w.Body.String())",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2097646409",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4145,
        "pr_file": "render/render_test.go",
        "discussion_id": "2097646409",
        "commented_code": "@@ -352,6 +353,28 @@ func TestRenderProtoBufFail(t *testing.T) {\n \trequire.Error(t, err)\n }\n \n+func TestRenderBSON(t *testing.T) {\n+\tw := httptest.NewRecorder()\n+\ttype mystruct struct {\n+\t\tLabel string\n+\t\tReps  []int64\n+\t}\n+\tvar data mystruct = mystruct{\n+\t\tLabel: \"test\",\n+\t\tReps:  []int64{int64(1), int64(2)}}\n+\n+\t(BSON{data}).WriteContentType(w)\n+\tbsonData, err := bson.Marshal(data)\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, \"application/bson\", w.Header().Get(\"Content-Type\"))\n+\n+\terr = (BSON{data}).Render(w)\n+\n+\trequire.NoError(t, err)\n+\tassert.Equal(t, string(bsonData), w.Body.String())",
        "comment_created_at": "2025-05-20T10:49:45+00:00",
        "comment_author": "Copilot",
        "comment_body": "Comparing BSON output by converting it to a string can be fragile due to potential encoding issues with binary data. Consider comparing the raw byte slices for a more robust test.\n```suggestion\n\tassert.Equal(t, bsonData, w.Body.Bytes())\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2159859904",
    "pr_number": 4272,
    "pr_file": "render/render_test.go",
    "created_at": "2025-06-21T04:28:51+00:00",
    "commented_code": "err := (YAML{data}).Render(w)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, \"|4-\n    a : Easy!\n    b:\n    \\tc: 2\n    \\td: [3, 4]\n    \\t\n\", w.Body.String())\n+\n+\t// With github.com/goccy/go-yaml, the output format is different from gopkg.in/yaml.v3\n+\t// We're checking that the output contains the expected data, not the exact formatting\n+\toutput := w.Body.String()",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2159859904",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4272,
        "pr_file": "render/render_test.go",
        "discussion_id": "2159859904",
        "commented_code": "@@ -285,7 +285,14 @@ b:\n \n \terr := (YAML{data}).Render(w)\n \trequire.NoError(t, err)\n-\tassert.Equal(t, \"|4-\\n    a : Easy!\\n    b:\\n    \\tc: 2\\n    \\td: [3, 4]\\n    \\t\\n\", w.Body.String())\n+\n+\t// With github.com/goccy/go-yaml, the output format is different from gopkg.in/yaml.v3\n+\t// We're checking that the output contains the expected data, not the exact formatting\n+\toutput := w.Body.String()",
        "comment_created_at": "2025-06-21T04:28:51+00:00",
        "comment_author": "Copilot",
        "comment_body": "[nitpick] Rather than relying on brittle string containment checks, consider unmarshaling the YAML output back into a struct and comparing it against the expected data structure to make the test more robust.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2097605809",
    "pr_number": 4240,
    "pr_file": "context_test.go",
    "created_at": "2025-05-20T10:26:45+00:00",
    "commented_code": "assert.True(t, exists)\n \tassert.Equal(t, \"value3\", value)\n }\n+\n+func TestContextSetCookieStruct(t *testing.T) {\n+\tc, _ := CreateTestContext(httptest.NewRecorder())\n+\tc.SetSameSite(http.SameSiteLaxMode)\n+\n+\t// Basic cookie settings\n+\tcookie := &http.Cookie{\n+\t\tName:     \"user\",\n+\t\tValue:    \"gin\",\n+\t\tMaxAge:   1,\n+\t\tPath:     \"/\",\n+\t\tDomain:   \"localhost\",\n+\t\tSecure:   true,\n+\t\tHttpOnly: true,\n+\t}\n+\tc.SetCookieStruct(cookie)\n+\tassert.Equal(t, \"user=gin; Path=/; Domain=localhost; Max-Age=1; HttpOnly; Secure; SameSite=Lax\", c.Writer.Header().Get(\"Set-Cookie\"))\n+",
    "repo_full_name": "gin-gonic/gin",
    "discussion_comments": [
      {
        "comment_id": "2097605809",
        "repo_full_name": "gin-gonic/gin",
        "pr_number": 4240,
        "pr_file": "context_test.go",
        "discussion_id": "2097605809",
        "commented_code": "@@ -3123,3 +3123,76 @@ func TestContextNext(t *testing.T) {\n \tassert.True(t, exists)\n \tassert.Equal(t, \"value3\", value)\n }\n+\n+func TestContextSetCookieStruct(t *testing.T) {\n+\tc, _ := CreateTestContext(httptest.NewRecorder())\n+\tc.SetSameSite(http.SameSiteLaxMode)\n+\n+\t// Basic cookie settings\n+\tcookie := &http.Cookie{\n+\t\tName:     \"user\",\n+\t\tValue:    \"gin\",\n+\t\tMaxAge:   1,\n+\t\tPath:     \"/\",\n+\t\tDomain:   \"localhost\",\n+\t\tSecure:   true,\n+\t\tHttpOnly: true,\n+\t}\n+\tc.SetCookieStruct(cookie)\n+\tassert.Equal(t, \"user=gin; Path=/; Domain=localhost; Max-Age=1; HttpOnly; Secure; SameSite=Lax\", c.Writer.Header().Get(\"Set-Cookie\"))\n+",
        "comment_created_at": "2025-05-20T10:26:45+00:00",
        "comment_author": "Copilot",
        "comment_body": "The direct string equality assertion may be brittle if the order or formatting of cookie attributes changes in future library versions. Consider using a series of assert.Contains checks for each expected attribute to improve test resilience.\n```suggestion\n\tsetCookie := c.Writer.Header().Get(\"Set-Cookie\")\n\tassert.Contains(t, setCookie, \"user=gin\")\n\tassert.Contains(t, setCookie, \"Path=/\")\n\tassert.Contains(t, setCookie, \"Domain=localhost\")\n\tassert.Contains(t, setCookie, \"Max-Age=1\")\n\tassert.Contains(t, setCookie, \"HttpOnly\")\n\tassert.Contains(t, setCookie, \"Secure\")\n\tassert.Contains(t, setCookie, \"SameSite=Lax\")\n```",
        "pr_file_module": null
      }
    ]
  }
]