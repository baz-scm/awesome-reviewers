[
  {
    "discussion_id": "542481704",
    "pr_number": 42768,
    "pr_file": "src/net/unixsock_readmsg_test.go",
    "created_at": "2020-12-14T15:37:53+00:00",
    "commented_code": "+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestUnixConnReadMsgUnixSCMRightsCloseOnExec(t *testing.T) {\n+\tif !testableNetwork(\"unix\") {\n+\t\tt.Skip(\"not unix system\")\n+\t}\n+\n+\tfds, err := syscall.Socketpair(syscall.AF_LOCAL, syscall.SOCK_STREAM, 0)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Socketpair: %v\", err)\n+\t}\n+\twriteFile := os.NewFile(uintptr(fds[0]), \"parent-reads\")",
    "repo_full_name": "golang/go",
    "discussion_comments": [
      {
        "comment_id": "542481704",
        "repo_full_name": "golang/go",
        "pr_number": 42768,
        "pr_file": "src/net/unixsock_readmsg_test.go",
        "discussion_id": "542481704",
        "commented_code": "@@ -0,0 +1,75 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestUnixConnReadMsgUnixSCMRightsCloseOnExec(t *testing.T) {\n+\tif !testableNetwork(\"unix\") {\n+\t\tt.Skip(\"not unix system\")\n+\t}\n+\n+\tfds, err := syscall.Socketpair(syscall.AF_LOCAL, syscall.SOCK_STREAM, 0)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Socketpair: %v\", err)\n+\t}\n+\twriteFile := os.NewFile(uintptr(fds[0]), \"parent-reads\")",
        "comment_created_at": "2020-12-14T15:37:53+00:00",
        "comment_author": "rittneje",
        "comment_body": "You forgot to defer closing `writeFile`.\r\nAlso, you accidentally named `writeFile` as \"parent-reads\". That being said, the notion of \"parent\" here is a holdover from the original syscall unit test that involved a parent process and a child process, so perhaps these should just be named \"write-socket\" and \"read-socket\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "543120694",
        "repo_full_name": "golang/go",
        "pr_number": 42768,
        "pr_file": "src/net/unixsock_readmsg_test.go",
        "discussion_id": "542481704",
        "commented_code": "@@ -0,0 +1,75 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestUnixConnReadMsgUnixSCMRightsCloseOnExec(t *testing.T) {\n+\tif !testableNetwork(\"unix\") {\n+\t\tt.Skip(\"not unix system\")\n+\t}\n+\n+\tfds, err := syscall.Socketpair(syscall.AF_LOCAL, syscall.SOCK_STREAM, 0)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Socketpair: %v\", err)\n+\t}\n+\twriteFile := os.NewFile(uintptr(fds[0]), \"parent-reads\")",
        "comment_created_at": "2020-12-15T07:53:35+00:00",
        "comment_author": "howjmay",
        "comment_body": "Got it. I have updated a fix for this, but I am still thinking how should I write the file of `os.Open(os.DevNull)` to `writeFile`",
        "pr_file_module": null
      },
      {
        "comment_id": "543174811",
        "repo_full_name": "golang/go",
        "pr_number": 42768,
        "pr_file": "src/net/unixsock_readmsg_test.go",
        "discussion_id": "542481704",
        "commented_code": "@@ -0,0 +1,75 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix darwin dragonfly freebsd linux netbsd openbsd solaris\n+\n+package net\n+\n+import (\n+\t\"os\"\n+\t\"syscall\"\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func TestUnixConnReadMsgUnixSCMRightsCloseOnExec(t *testing.T) {\n+\tif !testableNetwork(\"unix\") {\n+\t\tt.Skip(\"not unix system\")\n+\t}\n+\n+\tfds, err := syscall.Socketpair(syscall.AF_LOCAL, syscall.SOCK_STREAM, 0)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Socketpair: %v\", err)\n+\t}\n+\twriteFile := os.NewFile(uintptr(fds[0]), \"parent-reads\")",
        "comment_created_at": "2020-12-15T09:18:55+00:00",
        "comment_author": "howjmay",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "226834011",
    "pr_number": 27971,
    "pr_file": "src/net/http/example_test.go",
    "created_at": "2018-10-20T17:29:34+00:00",
    "commented_code": "log.Fatal(http.ListenAndServe(\":8080\", mux))\n }\n+\n+func ExamplePost() {\n+\tr, e := http.Post(\"http://127.0.0.1/count\", \"text/plain\", strings.NewReader(\"POST data\"))",
    "repo_full_name": "golang/go",
    "discussion_comments": [
      {
        "comment_id": "226834011",
        "repo_full_name": "golang/go",
        "pr_number": 27971,
        "pr_file": "src/net/http/example_test.go",
        "discussion_id": "226834011",
        "commented_code": "@@ -191,3 +192,19 @@ func ExampleNotFoundHandler() {\n \n \tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n }\n+\n+func ExamplePost() {\n+\tr, e := http.Post(\"http://127.0.0.1/count\", \"text/plain\", strings.NewReader(\"POST data\"))",
        "comment_created_at": "2018-10-20T17:29:34+00:00",
        "comment_author": "AnikHasibul",
        "comment_body": "I prefer `err` than `e`, I know, it's an example test but `err` would be better for an example.",
        "pr_file_module": null
      },
      {
        "comment_id": "236944997",
        "repo_full_name": "golang/go",
        "pr_number": 27971,
        "pr_file": "src/net/http/example_test.go",
        "discussion_id": "226834011",
        "commented_code": "@@ -191,3 +192,19 @@ func ExampleNotFoundHandler() {\n \n \tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n }\n+\n+func ExamplePost() {\n+\tr, e := http.Post(\"http://127.0.0.1/count\", \"text/plain\", strings.NewReader(\"POST data\"))",
        "comment_created_at": "2018-11-28T05:33:10+00:00",
        "comment_author": "award28",
        "comment_body": "I agree with @AnikHasibul . It's go convention to use `err` instead of `e`.",
        "pr_file_module": null
      },
      {
        "comment_id": "236945368",
        "repo_full_name": "golang/go",
        "pr_number": 27971,
        "pr_file": "src/net/http/example_test.go",
        "discussion_id": "226834011",
        "commented_code": "@@ -191,3 +192,19 @@ func ExampleNotFoundHandler() {\n \n \tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n }\n+\n+func ExamplePost() {\n+\tr, e := http.Post(\"http://127.0.0.1/count\", \"text/plain\", strings.NewReader(\"POST data\"))",
        "comment_created_at": "2018-11-28T05:36:15+00:00",
        "comment_author": "award28",
        "comment_body": "You should also give all of the variables more meaningful names.\r\n\r\n```suggestion\r\nfunc ExamplePost() {\r\n\treq, err := http.Post(\"http://127.0.0.1/count\", \"text/plain\", strings.NewReader(\"POST data\"))\r\n        defer req.Body.Close()\r\n\tif err != nil {\r\n\t\tfmt.Println(err.Error())\r\n\t}\r\n \tbody, err := ioutil.ReadAll(req.Body)\r\n\tif err != nil {\r\n\t\tfmt.Println(err.Error())\r\n\t}\r\n \tfmt.Printf(\"%s\\n\", body)\r\n }\t\r\n```",
        "pr_file_module": null
      }
    ]
  }
]