[
  {
    "discussion_id": "2134103743",
    "pr_number": 2817,
    "pr_file": "crates/goose-mcp/src/developer/mod.rs",
    "created_at": "2025-06-07T19:33:27+00:00",
    "commented_code": "n = stdout_reader.read_until(b'\n', &mut stdout_buf), if !stdout_done => {\n                         if n? == 0 {\n                             stdout_done = true;\n-                        } else {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2134103743",
        "repo_full_name": "block/goose",
        "pr_number": 2817,
        "pr_file": "crates/goose-mcp/src/developer/mod.rs",
        "discussion_id": "2134103743",
        "commented_code": "@@ -539,57 +627,62 @@ impl DeveloperRouter {\n                     n = stdout_reader.read_until(b'\\n', &mut stdout_buf), if !stdout_done => {\n                         if n? == 0 {\n                             stdout_done = true;\n-                        } else {",
        "comment_created_at": "2025-06-07T19:33:27+00:00",
        "comment_author": "cgwalters",
        "comment_body": "I *think* this was actually a pre-existing race condition where basically we could lose the last hunk of a process output.\r\n\r\nThis is a giant problem in general with `select!`. What would make this code a lot more elegant I think is to iterate over a stream - https://docs.rs/tokio-stream/0.1.17/tokio_stream/wrappers/struct.LinesStream.html\r\n\r\nAnd then we'd unify those two streams into a single stream of `enum Message { Stdout(String), Stderr(String) }` which is one pattern recommended by https://blog.yoshuawuyts.com/futures-concurrency-3 - we then just drive that stream to completion, and don't need to carry these buffers.",
        "pr_file_module": null
      },
      {
        "comment_id": "2134250098",
        "repo_full_name": "block/goose",
        "pr_number": 2817,
        "pr_file": "crates/goose-mcp/src/developer/mod.rs",
        "discussion_id": "2134103743",
        "commented_code": "@@ -539,57 +627,62 @@ impl DeveloperRouter {\n                     n = stdout_reader.read_until(b'\\n', &mut stdout_buf), if !stdout_done => {\n                         if n? == 0 {\n                             stdout_done = true;\n-                        } else {",
        "comment_created_at": "2025-06-08T00:14:57+00:00",
        "comment_author": "cgwalters",
        "comment_body": "OK I went ahead and did this and yeah I think the result is a lot cleaner!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2242279523",
    "pr_number": 3732,
    "pr_file": "crates/goose/src/agents/agent.rs",
    "created_at": "2025-07-30T11:03:41+00:00",
    "commented_code": "})\n             .map_err(|e| ToolError::ExecutionError(e.to_string()));\n \n+        drop(extension_manager);",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2242279523",
        "repo_full_name": "block/goose",
        "pr_number": 3732,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2242279523",
        "commented_code": "@@ -616,9 +564,10 @@ impl Agent {\n             })\n             .map_err(|e| ToolError::ExecutionError(e.to_string()));\n \n+        drop(extension_manager);",
        "comment_created_at": "2025-07-30T11:03:41+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "need to release the lock as later on it uses read lock",
        "pr_file_module": null
      },
      {
        "comment_id": "2243948479",
        "repo_full_name": "block/goose",
        "pr_number": 3732,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2242279523",
        "commented_code": "@@ -616,9 +564,10 @@ impl Agent {\n             })\n             .map_err(|e| ToolError::ExecutionError(e.to_string()));\n \n+        drop(extension_manager);",
        "comment_created_at": "2025-07-30T22:06:47+00:00",
        "comment_author": "wendytang",
        "comment_body": "nice",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228915833",
    "pr_number": 3629,
    "pr_file": "crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs",
    "created_at": "2025-07-24T15:52:42+00:00",
    "commented_code": ".collect();\n \n         let event = TaskExecutionNotificationEvent::tasks_complete(stats, failed_tasks);\n-\n         self.try_send_notification(event, \"tasks complete\");\n+        // Wait for the notification to be recieved and displayed before clearing the tasks\n+        sleep(Duration::from_millis(COMPLETION_NOTIFICATION_DELAY_MS)).await;",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2228915833",
        "repo_full_name": "block/goose",
        "pr_number": 3629,
        "pr_file": "crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs",
        "discussion_id": "2228915833",
        "commented_code": "@@ -309,7 +309,8 @@ impl TaskExecutionTracker {\n             .collect();\n \n         let event = TaskExecutionNotificationEvent::tasks_complete(stats, failed_tasks);\n-\n         self.try_send_notification(event, \"tasks complete\");\n+        // Wait for the notification to be recieved and displayed before clearing the tasks\n+        sleep(Duration::from_millis(COMPLETION_NOTIFICATION_DELAY_MS)).await;",
        "comment_created_at": "2025-07-24T15:52:42+00:00",
        "comment_author": "DOsinga",
        "comment_body": "sounds good, but are you saying the message doesn't get there if we complete here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2229993264",
        "repo_full_name": "block/goose",
        "pr_number": 3629,
        "pr_file": "crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs",
        "discussion_id": "2228915833",
        "commented_code": "@@ -309,7 +309,8 @@ impl TaskExecutionTracker {\n             .collect();\n \n         let event = TaskExecutionNotificationEvent::tasks_complete(stats, failed_tasks);\n-\n         self.try_send_notification(event, \"tasks complete\");\n+        // Wait for the notification to be recieved and displayed before clearing the tasks\n+        sleep(Duration::from_millis(COMPLETION_NOTIFICATION_DELAY_MS)).await;",
        "comment_created_at": "2025-07-25T02:27:45+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "The extra sleep is to handle the race condition.  \r\n\r\nThe notification flow:\r\n  1. TaskExecutionTracker \u2192 try_send \u2192 mpsc channel queue\r\n  2. ReceiverStream reads from queue \u2192 agent's event stream\r\n  3. Session loop processes from agent stream \u2192 CLI display\r\n\r\nWhen the last task completes,  notifications is sent async and the sub agent execution tool completes.  The extra sleep is to ensure the asynchronous notification processing completes before the tool returns its result to the agent.\r\n\r\nWithout sleep:\r\n T=1ms: Notifications queued in channel\r\n  T=2ms: Tool returns immediately (no sleep)\r\n  T=15ms: Agent stream terminates\r\n  T=15ms: Session loop exits\r\n  T=16ms: Channel dropped with notifications inside",
        "pr_file_module": null
      },
      {
        "comment_id": "2230378767",
        "repo_full_name": "block/goose",
        "pr_number": 3629,
        "pr_file": "crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs",
        "discussion_id": "2228915833",
        "commented_code": "@@ -309,7 +309,8 @@ impl TaskExecutionTracker {\n             .collect();\n \n         let event = TaskExecutionNotificationEvent::tasks_complete(stats, failed_tasks);\n-\n         self.try_send_notification(event, \"tasks complete\");\n+        // Wait for the notification to be recieved and displayed before clearing the tasks\n+        sleep(Duration::from_millis(COMPLETION_NOTIFICATION_DELAY_MS)).await;",
        "comment_created_at": "2025-07-25T07:30:52+00:00",
        "comment_author": "michaelneale",
        "comment_body": "I think this could be a future source of bugs - really no other way? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2165148898",
    "pr_number": 2797,
    "pr_file": "crates/goose/src/agents/agent.rs",
    "created_at": "2025-06-24T23:48:36+00:00",
    "commented_code": "prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2165148898",
        "repo_full_name": "block/goose",
        "pr_number": 2797,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2165148898",
        "commented_code": "@@ -44,14 +44,21 @@ use mcp_core::{\n     prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
        "comment_created_at": "2025-06-24T23:48:36+00:00",
        "comment_author": "salman1993",
        "comment_body": "why did we change this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2166966388",
        "repo_full_name": "block/goose",
        "pr_number": 2797,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2165148898",
        "commented_code": "@@ -44,14 +44,21 @@ use mcp_core::{\n     prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
        "comment_created_at": "2025-06-25T15:06:49+00:00",
        "comment_author": "lily-de",
        "comment_body": "i think because we need to carry around the extension manager and the mutex was not working ",
        "pr_file_module": null
      },
      {
        "comment_id": "2167103062",
        "repo_full_name": "block/goose",
        "pr_number": 2797,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2165148898",
        "commented_code": "@@ -44,14 +44,21 @@ use mcp_core::{\n     prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
        "comment_created_at": "2025-06-25T16:11:10+00:00",
        "comment_author": "lily-de",
        "comment_body": "I was getting compile errors with Mutex and changing to RwLock fixed them. I think it was related to the borrow checker and how we're passing the extension manager around to multiple subagents, but RwLock resolved the lifetime/borrowing issues",
        "pr_file_module": null
      },
      {
        "comment_id": "2167115943",
        "repo_full_name": "block/goose",
        "pr_number": 2797,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2165148898",
        "commented_code": "@@ -44,14 +44,21 @@ use mcp_core::{\n     prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
        "comment_created_at": "2025-06-25T16:17:42+00:00",
        "comment_author": "salman1993",
        "comment_body": "my understanding is that RwLock is strictly more demanding than Mutex for compile issues, so surprised you're getting compilation issues with Mutex and not RwLock",
        "pr_file_module": null
      },
      {
        "comment_id": "2167133827",
        "repo_full_name": "block/goose",
        "pr_number": 2797,
        "pr_file": "crates/goose/src/agents/agent.rs",
        "discussion_id": "2165148898",
        "commented_code": "@@ -44,14 +44,21 @@ use mcp_core::{\n     prompt::Prompt, protocol::GetPromptResult, tool::Tool, Content, ToolError, ToolResult,\n };\n \n+use crate::agents::subagent_tools::{\n+    SUBAGENT_CHECK_PROGRESS_TOOL_NAME, SUBAGENT_LIST_TOOL_NAME, SUBAGENT_SEND_MESSAGE_TOOL_NAME,\n+    SUBAGENT_SPAWN_INTERACTIVE_TOOL_NAME,\n+};\n+\n use super::platform_tools;\n use super::router_tools;\n+use super::subagent_manager::SubAgentManager;\n+use super::subagent_tools;\n use super::tool_execution::{ToolCallResult, CHAT_MODE_TOOL_SKIPPED_RESPONSE, DECLINED_RESPONSE};\n \n /// The main goose Agent\n pub struct Agent {\n     pub(super) provider: Mutex<Option<Arc<dyn Provider>>>,\n-    pub(super) extension_manager: Mutex<ExtensionManager>,",
        "comment_created_at": "2025-06-25T16:25:09+00:00",
        "comment_author": "lily-de",
        "comment_body": "i wish i could remember what they were... \r\n\r\nalso i think Mutex will cause issues if we have multiple subagents trying to access the extension manager concurrently (like parallel subagents) -- subagents will block each other even for read-only operations like checking what extensions are available or getting tool definitions with Mutex (I think) ",
        "pr_file_module": null
      }
    ]
  }
]