[
  {
    "discussion_id": "2255567473",
    "pr_number": 3871,
    "pr_file": "crates/goose-cli/src/main.rs",
    "created_at": "2025-08-06T00:04:17+00:00",
    "commented_code": "#[tokio::main]\n async fn main() -> Result<()> {\n-    cli().await\n+    if let Err(e) = goose_cli::logging::setup_logging(None, None) {\n+        eprintln!(\"Warning: Failed to initialize telemetry: {}\", e);\n+    }\n+\n+    let result = cli().await;\n+\n+    // Flush telemetry before exiting\n+    // Give metrics time to be exported\n+    tokio::time::sleep(tokio::time::Duration::from_secs(2)).await;",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2255567473",
        "repo_full_name": "block/goose",
        "pr_number": 3871,
        "pr_file": "crates/goose-cli/src/main.rs",
        "discussion_id": "2255567473",
        "commented_code": "@@ -3,5 +3,18 @@ use goose_cli::cli::cli;\n \n #[tokio::main]\n async fn main() -> Result<()> {\n-    cli().await\n+    if let Err(e) = goose_cli::logging::setup_logging(None, None) {\n+        eprintln!(\"Warning: Failed to initialize telemetry: {}\", e);\n+    }\n+\n+    let result = cli().await;\n+\n+    // Flush telemetry before exiting\n+    // Give metrics time to be exported\n+    tokio::time::sleep(tokio::time::Duration::from_secs(2)).await;",
        "comment_created_at": "2025-08-06T00:04:17+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "Is there any way to check if there is stuff remaining to be flushed rather than only a fixed time (eg. dynamic check with a max timeout)? Also if there is no endpoint setup for otlp we should skip this. \n\nThis delay will add up if people are scripting lots of cli runs.",
        "pr_file_module": null
      },
      {
        "comment_id": "2255839148",
        "repo_full_name": "block/goose",
        "pr_number": 3871,
        "pr_file": "crates/goose-cli/src/main.rs",
        "discussion_id": "2255567473",
        "commented_code": "@@ -3,5 +3,18 @@ use goose_cli::cli::cli;\n \n #[tokio::main]\n async fn main() -> Result<()> {\n-    cli().await\n+    if let Err(e) = goose_cli::logging::setup_logging(None, None) {\n+        eprintln!(\"Warning: Failed to initialize telemetry: {}\", e);\n+    }\n+\n+    let result = cli().await;\n+\n+    // Flush telemetry before exiting\n+    // Give metrics time to be exported\n+    tokio::time::sleep(tokio::time::Duration::from_secs(2)).await;",
        "comment_created_at": "2025-08-06T04:35:04+00:00",
        "comment_author": "Kvadratni",
        "comment_body": "wrapped with a check",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2255572302",
    "pr_number": 3871,
    "pr_file": "crates/goose/src/tracing/otlp_layer.rs",
    "created_at": "2025-08-06T00:10:28+00:00",
    "commented_code": "/// Shutdown OTLP providers gracefully\n pub fn shutdown_otlp() {\n+    // Shutdown the tracer provider and flush any pending spans\n     global::shutdown_tracer_provider();\n \n-    // Note: There's currently no clean way to shutdown the global meter provider\n-    // in the OpenTelemetry Rust SDK. The meter provider will be cleaned up when\n-    // the process exits. Individual meter providers can be shut down if you have\n-    // a direct reference to them.\n+    // Force flush of metrics by waiting a bit\n+    // The meter provider doesn't have a direct shutdown method in the current SDK,\n+    // but we can give it time to export any pending metrics\n+    std::thread::sleep(std::time::Duration::from_millis(500));",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2255572302",
        "repo_full_name": "block/goose",
        "pr_number": 3871,
        "pr_file": "crates/goose/src/tracing/otlp_layer.rs",
        "discussion_id": "2255572302",
        "commented_code": "@@ -220,12 +223,13 @@ pub fn create_otlp_metrics_filter() -> FilterFn<impl Fn(&Metadata<'_>) -> bool>\n \n /// Shutdown OTLP providers gracefully\n pub fn shutdown_otlp() {\n+    // Shutdown the tracer provider and flush any pending spans\n     global::shutdown_tracer_provider();\n \n-    // Note: There's currently no clean way to shutdown the global meter provider\n-    // in the OpenTelemetry Rust SDK. The meter provider will be cleaned up when\n-    // the process exits. Individual meter providers can be shut down if you have\n-    // a direct reference to them.\n+    // Force flush of metrics by waiting a bit\n+    // The meter provider doesn't have a direct shutdown method in the current SDK,\n+    // but we can give it time to export any pending metrics\n+    std::thread::sleep(std::time::Duration::from_millis(500));",
        "comment_created_at": "2025-08-06T00:10:28+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "this is another fixed sleep in addition to the one in the cli, can we just all the sleeps into here, make it conditional on otlp being exported (and ideally dynamic to keep as short as possible)?",
        "pr_file_module": null
      },
      {
        "comment_id": "2255838455",
        "repo_full_name": "block/goose",
        "pr_number": 3871,
        "pr_file": "crates/goose/src/tracing/otlp_layer.rs",
        "discussion_id": "2255572302",
        "commented_code": "@@ -220,12 +223,13 @@ pub fn create_otlp_metrics_filter() -> FilterFn<impl Fn(&Metadata<'_>) -> bool>\n \n /// Shutdown OTLP providers gracefully\n pub fn shutdown_otlp() {\n+    // Shutdown the tracer provider and flush any pending spans\n     global::shutdown_tracer_provider();\n \n-    // Note: There's currently no clean way to shutdown the global meter provider\n-    // in the OpenTelemetry Rust SDK. The meter provider will be cleaned up when\n-    // the process exits. Individual meter providers can be shut down if you have\n-    // a direct reference to them.\n+    // Force flush of metrics by waiting a bit\n+    // The meter provider doesn't have a direct shutdown method in the current SDK,\n+    // but we can give it time to export any pending metrics\n+    std::thread::sleep(std::time::Duration::from_millis(500));",
        "comment_created_at": "2025-08-06T04:34:19+00:00",
        "comment_author": "Kvadratni",
        "comment_body": "literally current limitation of sdk. no way to wait for it as I found. I may be overlooking something obvious tho",
        "pr_file_module": null
      }
    ]
  }
]