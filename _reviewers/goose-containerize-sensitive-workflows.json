[
  {
    "discussion_id": "2295170000",
    "pr_number": 4300,
    "pr_file": "documentation/blog/2025-08-25-goose-became-its-own-watchdog/index.md",
    "created_at": "2025-08-23T05:32:47+00:00",
    "commented_code": "+---\r\n+title: \"When Goose Became Its Own Watchdog\"\r\n+description: Building community trust by having AI analyze AI recipes for safety\r\n+authors: \r\n+    - iand\r\n+---\r\n+\r\n+![Goose Recipe Safety](goose-watchdog.png)\r\n+\r\n+Remember when people shared recipes by passing handwritten cards between neighbors? You trusted Grandma's apple pie recipe because you knew Grandma. But what happens when strangers start sharing recipes online? You need someone to taste-test them first.\r\n+\r\n+That's exactly the challenge we face with Goose recipes. We're building a community cookbook where you can try Goose recipes from other users with confidence that they're safe. (More on that to come!!) But we needed a way to make sure every recipe was safe to run.\r\n+\r\n+<!--truncate-->\r\n+\r\n+## The Headless Solution\r\n+\r\n+I asked Goose: \"Can you build a system to analyze your own recipes?\"\r\n+\r\n+The beautiful irony wasn't lost on me. I'm essentially asking our AI to become its own watchdog.\r\n+\r\n+I gave it a lot more direction: I wanted the scanner to run from GitHub Actions, and I wanted the scanning to be done within a Docker container so we didn't have to worry about accessing anything sensitive.",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2295170000",
        "repo_full_name": "block/goose",
        "pr_number": 4300,
        "pr_file": "documentation/blog/2025-08-25-goose-became-its-own-watchdog/index.md",
        "discussion_id": "2295170000",
        "commented_code": "@@ -0,0 +1,99 @@\n+---\r\n+title: \"When Goose Became Its Own Watchdog\"\r\n+description: Building community trust by having AI analyze AI recipes for safety\r\n+authors: \r\n+    - iand\r\n+---\r\n+\r\n+![Goose Recipe Safety](goose-watchdog.png)\r\n+\r\n+Remember when people shared recipes by passing handwritten cards between neighbors? You trusted Grandma's apple pie recipe because you knew Grandma. But what happens when strangers start sharing recipes online? You need someone to taste-test them first.\r\n+\r\n+That's exactly the challenge we face with Goose recipes. We're building a community cookbook where you can try Goose recipes from other users with confidence that they're safe. (More on that to come!!) But we needed a way to make sure every recipe was safe to run.\r\n+\r\n+<!--truncate-->\r\n+\r\n+## The Headless Solution\r\n+\r\n+I asked Goose: \"Can you build a system to analyze your own recipes?\"\r\n+\r\n+The beautiful irony wasn't lost on me. I'm essentially asking our AI to become its own watchdog.\r\n+\r\n+I gave it a lot more direction: I wanted the scanner to run from GitHub Actions, and I wanted the scanning to be done within a Docker container so we didn't have to worry about accessing anything sensitive.\r",
        "comment_created_at": "2025-08-23T05:32:47+00:00",
        "comment_author": "angiejones",
        "comment_body": "```suggestion\nI gave it a lot more direction: I wanted the scanner to run from GitHub Actions, and I wanted the scanning to be done within a Docker container so it could inspect the recipe in an isolated environment.\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2262000610",
    "pr_number": 3932,
    "pr_file": "documentation/docs/mcp/dagger-container-use.md",
    "created_at": "2025-08-08T05:53:54+00:00",
    "commented_code": "+---\n+title: Dagger Container Use MCP\n+description: Integrate container workflows with Goose using the Dagger Container Use MCP\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+import GooseDesktopInstaller from '@site/src/components/GooseDesktopInstaller';\n+import CLIExtensionInstructions from '@site/src/components/CLIExtensionInstructions';\n+import YouTubeShortEmbed from '@site/src/components/YouTubeShortEmbed';\n+\n+[Dagger's \"Container Use\" MCP](https://container-use.com/) is a powerful extension that brings seamless containerized workflows to your Goose environment. With this integration, you can:\n+\n+- run code in standardized environments\n+- chain build steps using containers\n+- fetch & mutate files in containers\n+- automate development, CI, and DevOps workflows\n+\n+<YouTubeShortEmbed videoUrl=\"https://www.youtube.com/embed/X3tf61_Tak0\" />\n+\n+\n+## Configuration\n+\n+:::info\n+You'll need [Docker](https://www.docker.com/) installed on your system. If you want to use the remote MCP server, you'll also need [Node.js](https://nodejs.org/) installed.\n+:::\n+\n+<Tabs groupId=\"online_offline\">\n+  <TabItem value=\"remote-mcp\" label=\"Remote MCP\" default>\n+\n+    <Tabs groupId=\"interface\">\n+      <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+        <GooseDesktopInstaller\n+            extensionId=\"dagger-container-use\"\n+            extensionName=\"Dagger Container Use MCP\"\n+            extensionDescription=\"Run container automation with Dagger's container-use MCP server\"\n+            command=\"npx\"\n+            args={[\"-y\", \"mcp-remote\", \"https://container-use.com/mcp\"]}\n+            cliCommand=\"npx -y mcp-remote https://container-use.com/mcp\"\n+            timeout={300}\n+            note=\"Requires Node.js and Docker installed; see [container-use.com/quickstart](https://container-use.com/quickstart).\"\n+        />\n+    </TabItem>\n+      <TabItem value=\"cli\" label=\"Goose CLI\">\n+          <CLIExtensionInstructions\n+            name=\"Dagger Container Use MCP\"\n+            command=\"npx -y mcp-remote https://container-use.com/mcp\"\n+            timeout={300}\n+          />\n+      </TabItem>\n+    </Tabs>\n+\n+  </TabItem>\n+  <TabItem value=\"local-mcp\" label=\"Local MCP\">\n+\n+    <Tabs groupId=\"interface\">\n+      <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+        <GooseDesktopInstaller\n+            extensionId=\"dagger-container-use\"\n+            extensionName=\"Dagger Container Use MCP\"\n+            extensionDescription=\"Run container automation with Dagger's container-use MCP server\"\n+            command=\"container-use\"\n+            args={[\"stdio\"]}\n+            cliCommand=\"container-use stdio\"\n+            timeout={300}\n+            note=\"Requires Docker installed; see [container-use.com/quickstart](https://container-use.com/quickstart).\"\n+        />\n+    </TabItem>\n+      <TabItem value=\"cli\" label=\"Goose CLI\">\n+          <CLIExtensionInstructions\n+            name=\"Dagger Container Use MCP\"\n+            command=\"container-use stdio\"\n+            timeout={300}\n+          />\n+      </TabItem>\n+    </Tabs>\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Example Usage\n+\n+Here's a simple example of how to use the Dagger Container Use MCP to update a file-based to-do app to use a SQLite database plus full testing.\n+\n+#### Prompt\n+\n+```\n+( O)> Run a container agent to add a feature to save my to-do list data in sqlite, build and run tests, but use a separate Git branch so my main code stays safe.",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2262000610",
        "repo_full_name": "block/goose",
        "pr_number": 3932,
        "pr_file": "documentation/docs/mcp/dagger-container-use.md",
        "discussion_id": "2262000610",
        "commented_code": "@@ -0,0 +1,194 @@\n+---\n+title: Dagger Container Use MCP\n+description: Integrate container workflows with Goose using the Dagger Container Use MCP\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+import GooseDesktopInstaller from '@site/src/components/GooseDesktopInstaller';\n+import CLIExtensionInstructions from '@site/src/components/CLIExtensionInstructions';\n+import YouTubeShortEmbed from '@site/src/components/YouTubeShortEmbed';\n+\n+[Dagger's \"Container Use\" MCP](https://container-use.com/) is a powerful extension that brings seamless containerized workflows to your Goose environment. With this integration, you can:\n+\n+- run code in standardized environments\n+- chain build steps using containers\n+- fetch & mutate files in containers\n+- automate development, CI, and DevOps workflows\n+\n+<YouTubeShortEmbed videoUrl=\"https://www.youtube.com/embed/X3tf61_Tak0\" />\n+\n+\n+## Configuration\n+\n+:::info\n+You'll need [Docker](https://www.docker.com/) installed on your system. If you want to use the remote MCP server, you'll also need [Node.js](https://nodejs.org/) installed.\n+:::\n+\n+<Tabs groupId=\"online_offline\">\n+  <TabItem value=\"remote-mcp\" label=\"Remote MCP\" default>\n+\n+    <Tabs groupId=\"interface\">\n+      <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+        <GooseDesktopInstaller\n+            extensionId=\"dagger-container-use\"\n+            extensionName=\"Dagger Container Use MCP\"\n+            extensionDescription=\"Run container automation with Dagger's container-use MCP server\"\n+            command=\"npx\"\n+            args={[\"-y\", \"mcp-remote\", \"https://container-use.com/mcp\"]}\n+            cliCommand=\"npx -y mcp-remote https://container-use.com/mcp\"\n+            timeout={300}\n+            note=\"Requires Node.js and Docker installed; see [container-use.com/quickstart](https://container-use.com/quickstart).\"\n+        />\n+    </TabItem>\n+      <TabItem value=\"cli\" label=\"Goose CLI\">\n+          <CLIExtensionInstructions\n+            name=\"Dagger Container Use MCP\"\n+            command=\"npx -y mcp-remote https://container-use.com/mcp\"\n+            timeout={300}\n+          />\n+      </TabItem>\n+    </Tabs>\n+\n+  </TabItem>\n+  <TabItem value=\"local-mcp\" label=\"Local MCP\">\n+\n+    <Tabs groupId=\"interface\">\n+      <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+        <GooseDesktopInstaller\n+            extensionId=\"dagger-container-use\"\n+            extensionName=\"Dagger Container Use MCP\"\n+            extensionDescription=\"Run container automation with Dagger's container-use MCP server\"\n+            command=\"container-use\"\n+            args={[\"stdio\"]}\n+            cliCommand=\"container-use stdio\"\n+            timeout={300}\n+            note=\"Requires Docker installed; see [container-use.com/quickstart](https://container-use.com/quickstart).\"\n+        />\n+    </TabItem>\n+      <TabItem value=\"cli\" label=\"Goose CLI\">\n+          <CLIExtensionInstructions\n+            name=\"Dagger Container Use MCP\"\n+            command=\"container-use stdio\"\n+            timeout={300}\n+          />\n+      </TabItem>\n+    </Tabs>\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Example Usage\n+\n+Here's a simple example of how to use the Dagger Container Use MCP to update a file-based to-do app to use a SQLite database plus full testing.\n+\n+#### Prompt\n+\n+```\n+( O)> Run a container agent to add a feature to save my to-do list data in sqlite, build and run tests, but use a separate Git branch so my main code stays safe.",
        "comment_created_at": "2025-08-08T05:53:54+00:00",
        "comment_author": "angiejones",
        "comment_body": "```suggestion\nRun a container agent to add a feature to save my to-do list data in sqlite, build and run tests, but use a separate Git branch so my main code stays safe.\n```",
        "pr_file_module": null
      }
    ]
  }
]