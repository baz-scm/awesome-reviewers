[
  {
    "discussion_id": "2283172333",
    "pr_number": 4164,
    "pr_file": "ui/desktop/src/components/MCPUIResourceRenderer.tsx",
    "created_at": "2025-08-18T18:45:09+00:00",
    "commented_code": "}\n \n export default function MCPUIResourceRenderer({ content }: MCPUIResourceRendererProps) {\n-  const handleAction = (action: UIActionResult) => {\n-    console.log(\n-      `MCP UI message received (but only handled with a toast notification for now):`,\n-      action\n-    );\n-    toast.info(`${action.type} message sent from MCP UI, refer to console for more info`, {\n-      data: action,\n-    });\n-    return { status: 'handled', message: `${action.type} action logged` };\n+  const handleUnsupportedMessage = (type: string) => {\n+    console.warn(`MCP-UI \"${type}\" message type not supported`);\n+    toast.info(`MCP-UI \"${type}\" message posted, refer to console for more info`);\n   };\n \n   const handleUIAction = useCallback(async (result: UIActionResult) => {\n     switch (result.type) {\n-      case 'intent': {\n-        // TODO: Implement intent handling\n-        handleAction(result);\n+      case 'tool':\n+        handleUnsupportedMessage('tool');\n         break;\n-      }\n-\n-      case 'link': {\n-        // TODO: Implement link handling\n-        handleAction(result);\n+      case 'intent':\n+        handleUnsupportedMessage('intent');\n         break;\n-      }\n-\n-      case 'notify': {\n-        // TODO: Implement notify handling\n-        handleAction(result);\n+      case 'prompt':\n+        handleUnsupportedMessage('prompt');\n         break;\n-      }\n-\n-      case 'prompt': {\n-        // TODO: Implement prompt handling\n-        handleAction(result);\n+      case 'link':\n+        handleUnsupportedMessage('link');\n         break;\n-      }\n-\n-      case 'tool': {\n-        // TODO: Implement tool call handling\n-        handleAction(result);\n+      case 'notify':\n+        handleUnsupportedMessage('notify');\n         break;\n-      }\n-\n-      default: {\n-        console.warn('unsupported message sent from MCP-UI:', result);\n+      default:\n+        console.log(`MCP-UI message received:`, result);\n         break;\n-      }\n     }\n+\n+    // SUPER IMPORTANT: MCP-UIs depend on receiving a response to their message\n+    const response = {\n+      type: 'ui-message-response',\n+      payload: result,\n+    };\n+\n+    console.info(\n+      `Goose posted the following response message back to the MCP-UI request:`,\n+      response\n+    );\n+\n+    return response;\n   }, []);",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2283172333",
        "repo_full_name": "block/goose",
        "pr_number": 4164,
        "pr_file": "ui/desktop/src/components/MCPUIResourceRenderer.tsx",
        "discussion_id": "2283172333",
        "commented_code": "@@ -8,54 +8,45 @@ interface MCPUIResourceRendererProps {\n }\n \n export default function MCPUIResourceRenderer({ content }: MCPUIResourceRendererProps) {\n-  const handleAction = (action: UIActionResult) => {\n-    console.log(\n-      `MCP UI message received (but only handled with a toast notification for now):`,\n-      action\n-    );\n-    toast.info(`${action.type} message sent from MCP UI, refer to console for more info`, {\n-      data: action,\n-    });\n-    return { status: 'handled', message: `${action.type} action logged` };\n+  const handleUnsupportedMessage = (type: string) => {\n+    console.warn(`MCP-UI \"${type}\" message type not supported`);\n+    toast.info(`MCP-UI \"${type}\" message posted, refer to console for more info`);\n   };\n \n   const handleUIAction = useCallback(async (result: UIActionResult) => {\n     switch (result.type) {\n-      case 'intent': {\n-        // TODO: Implement intent handling\n-        handleAction(result);\n+      case 'tool':\n+        handleUnsupportedMessage('tool');\n         break;\n-      }\n-\n-      case 'link': {\n-        // TODO: Implement link handling\n-        handleAction(result);\n+      case 'intent':\n+        handleUnsupportedMessage('intent');\n         break;\n-      }\n-\n-      case 'notify': {\n-        // TODO: Implement notify handling\n-        handleAction(result);\n+      case 'prompt':\n+        handleUnsupportedMessage('prompt');\n         break;\n-      }\n-\n-      case 'prompt': {\n-        // TODO: Implement prompt handling\n-        handleAction(result);\n+      case 'link':\n+        handleUnsupportedMessage('link');\n         break;\n-      }\n-\n-      case 'tool': {\n-        // TODO: Implement tool call handling\n-        handleAction(result);\n+      case 'notify':\n+        handleUnsupportedMessage('notify');\n         break;\n-      }\n-\n-      default: {\n-        console.warn('unsupported message sent from MCP-UI:', result);\n+      default:\n+        console.log(`MCP-UI message received:`, result);\n         break;\n-      }\n     }\n+\n+    // SUPER IMPORTANT: MCP-UIs depend on receiving a response to their message\n+    const response = {\n+      type: 'ui-message-response',\n+      payload: result,\n+    };\n+\n+    console.info(\n+      `Goose posted the following response message back to the MCP-UI request:`,\n+      response\n+    );\n+\n+    return response;\n   }, []);",
        "comment_created_at": "2025-08-18T18:45:09+00:00",
        "comment_author": "aharvard",
        "comment_body": "Hey @idosal, I addressed https://github.com/idosal/mcp-ui/issues/82 by returning `response`.\n\nI'd love to get your feedback if I got this right (I tested against @kentcdodds server and fixed [the one issue](https://github.com/idosal/mcp-ui/issues/82) he reported). \n\nThis fix made me curious. Should @mcp-ui/client have some stronger typing around what the callback should return? It would be cool to see an error on `onUIAction={handleUIAction}` if the returned response is not as expected. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2283742077",
        "repo_full_name": "block/goose",
        "pr_number": 4164,
        "pr_file": "ui/desktop/src/components/MCPUIResourceRenderer.tsx",
        "discussion_id": "2283172333",
        "commented_code": "@@ -8,54 +8,45 @@ interface MCPUIResourceRendererProps {\n }\n \n export default function MCPUIResourceRenderer({ content }: MCPUIResourceRendererProps) {\n-  const handleAction = (action: UIActionResult) => {\n-    console.log(\n-      `MCP UI message received (but only handled with a toast notification for now):`,\n-      action\n-    );\n-    toast.info(`${action.type} message sent from MCP UI, refer to console for more info`, {\n-      data: action,\n-    });\n-    return { status: 'handled', message: `${action.type} action logged` };\n+  const handleUnsupportedMessage = (type: string) => {\n+    console.warn(`MCP-UI \"${type}\" message type not supported`);\n+    toast.info(`MCP-UI \"${type}\" message posted, refer to console for more info`);\n   };\n \n   const handleUIAction = useCallback(async (result: UIActionResult) => {\n     switch (result.type) {\n-      case 'intent': {\n-        // TODO: Implement intent handling\n-        handleAction(result);\n+      case 'tool':\n+        handleUnsupportedMessage('tool');\n         break;\n-      }\n-\n-      case 'link': {\n-        // TODO: Implement link handling\n-        handleAction(result);\n+      case 'intent':\n+        handleUnsupportedMessage('intent');\n         break;\n-      }\n-\n-      case 'notify': {\n-        // TODO: Implement notify handling\n-        handleAction(result);\n+      case 'prompt':\n+        handleUnsupportedMessage('prompt');\n         break;\n-      }\n-\n-      case 'prompt': {\n-        // TODO: Implement prompt handling\n-        handleAction(result);\n+      case 'link':\n+        handleUnsupportedMessage('link');\n         break;\n-      }\n-\n-      case 'tool': {\n-        // TODO: Implement tool call handling\n-        handleAction(result);\n+      case 'notify':\n+        handleUnsupportedMessage('notify');\n         break;\n-      }\n-\n-      default: {\n-        console.warn('unsupported message sent from MCP-UI:', result);\n+      default:\n+        console.log(`MCP-UI message received:`, result);\n         break;\n-      }\n     }\n+\n+    // SUPER IMPORTANT: MCP-UIs depend on receiving a response to their message\n+    const response = {\n+      type: 'ui-message-response',\n+      payload: result,\n+    };\n+\n+    console.info(\n+      `Goose posted the following response message back to the MCP-UI request:`,\n+      response\n+    );\n+\n+    return response;\n   }, []);",
        "comment_created_at": "2025-08-19T00:08:06+00:00",
        "comment_author": "idosal",
        "comment_body": "Thank @aharvard! WDYT about returning the result of the UI Action callback (e.g., the response to the tool call) or some ack that it finished successfully, rather than the UI action itself? I realize `UIActionResult is a confusing name since `result` refers to the event generated by the action and not the result of the action itself.\r\n@kentcdodds what would best serve your use case?\r\n\r\nAdding typing to guide responses is a great idea. I'll tag you in the PR.",
        "pr_file_module": null
      },
      {
        "comment_id": "2288815443",
        "repo_full_name": "block/goose",
        "pr_number": 4164,
        "pr_file": "ui/desktop/src/components/MCPUIResourceRenderer.tsx",
        "discussion_id": "2283172333",
        "commented_code": "@@ -8,54 +8,45 @@ interface MCPUIResourceRendererProps {\n }\n \n export default function MCPUIResourceRenderer({ content }: MCPUIResourceRendererProps) {\n-  const handleAction = (action: UIActionResult) => {\n-    console.log(\n-      `MCP UI message received (but only handled with a toast notification for now):`,\n-      action\n-    );\n-    toast.info(`${action.type} message sent from MCP UI, refer to console for more info`, {\n-      data: action,\n-    });\n-    return { status: 'handled', message: `${action.type} action logged` };\n+  const handleUnsupportedMessage = (type: string) => {\n+    console.warn(`MCP-UI \"${type}\" message type not supported`);\n+    toast.info(`MCP-UI \"${type}\" message posted, refer to console for more info`);\n   };\n \n   const handleUIAction = useCallback(async (result: UIActionResult) => {\n     switch (result.type) {\n-      case 'intent': {\n-        // TODO: Implement intent handling\n-        handleAction(result);\n+      case 'tool':\n+        handleUnsupportedMessage('tool');\n         break;\n-      }\n-\n-      case 'link': {\n-        // TODO: Implement link handling\n-        handleAction(result);\n+      case 'intent':\n+        handleUnsupportedMessage('intent');\n         break;\n-      }\n-\n-      case 'notify': {\n-        // TODO: Implement notify handling\n-        handleAction(result);\n+      case 'prompt':\n+        handleUnsupportedMessage('prompt');\n         break;\n-      }\n-\n-      case 'prompt': {\n-        // TODO: Implement prompt handling\n-        handleAction(result);\n+      case 'link':\n+        handleUnsupportedMessage('link');\n         break;\n-      }\n-\n-      case 'tool': {\n-        // TODO: Implement tool call handling\n-        handleAction(result);\n+      case 'notify':\n+        handleUnsupportedMessage('notify');\n         break;\n-      }\n-\n-      default: {\n-        console.warn('unsupported message sent from MCP-UI:', result);\n+      default:\n+        console.log(`MCP-UI message received:`, result);\n         break;\n-      }\n     }\n+\n+    // SUPER IMPORTANT: MCP-UIs depend on receiving a response to their message\n+    const response = {\n+      type: 'ui-message-response',\n+      payload: result,\n+    };\n+\n+    console.info(\n+      `Goose posted the following response message back to the MCP-UI request:`,\n+      response\n+    );\n+\n+    return response;\n   }, []);",
        "comment_created_at": "2025-08-20T17:14:13+00:00",
        "comment_author": "aharvard",
        "comment_body": "moving convo to https://github.com/block/goose/pull/4164#discussion_r2286941150",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2209868166",
    "pr_number": 3446,
    "pr_file": "ui/desktop/src/components/RecipesView.tsx",
    "created_at": "2025-07-16T10:02:00+00:00",
    "commented_code": "if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2209868166",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-16T10:02:00+00:00",
        "comment_author": "DOsinga",
        "comment_body": "I think if the configBase64 was not url encoded and it does contain a +, this will cause issues",
        "pr_file_module": null
      },
      {
        "comment_id": "2211695041",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-16T22:01:06+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "Yeah I think we should officially document the format of recipe deeplinks so that external integrations know how to use them. I expect we should use the url_safe version and then url-encode. Unless we are going the route of url_safe_no_pad.\r\n\r\nThese changes are backwards incompatible which is why I'm hoping we can make an official/decision statement so we have a position to operate from.",
        "pr_file_module": null
      },
      {
        "comment_id": "2212638159",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T08:13:08+00:00",
        "comment_author": "DOsinga",
        "comment_body": "They are backwards compatible, but since we have both used url-encoded and not url-encoded versions, it doesn't quite fix it.\r\n\r\nis there a point in url-encoding the url_safe version?",
        "pr_file_module": null
      },
      {
        "comment_id": "2212692817",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T08:35:59+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "Seems like even with base64::engine::general_purpose::URL_SAFE we still want to encode it for maximum interoperability. Eg. %3D unencoded is = which would break if this was part of a query url or form submit.\r\n\r\nhttps://docs.rs/base64/latest/base64/#url-safe-alphabet",
        "pr_file_module": null
      },
      {
        "comment_id": "2212717896",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T08:45:14+00:00",
        "comment_author": "DOsinga",
        "comment_body": "I am not sure I follow - the whole point of url safe base64 is that you can use it in, eh, urls. so url safe base64 with the = stripped seems like the most compact and portable way that we can do this\r\n\r\nfor decoding we'd have to put a bunch of safety measures in place probably, so still try to url-decode it if the base64 decode doesn't work etc",
        "pr_file_module": null
      },
      {
        "comment_id": "2212920092",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T10:06:06+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "\ud83d\udc4d yep we can use URL_SAFE_NO_PAD so the `=` are never added into the strings (so no need to url encode). It just means that standard base64 decoding won't work unless you add the NO_PAD option. https://docs.rs/base64/latest/base64/#padding-characters\r\n\r\nWe will still have to have backwards compatible decoding for the old ones we generated, so ultimately won't simplify any code but atleast there will be a standard going forward.",
        "pr_file_module": null
      },
      {
        "comment_id": "2213211534",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T12:31:37+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "I'm working on having the encoding/decoding only done on the server.",
        "pr_file_module": null
      },
      {
        "comment_id": "2213442546",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-17T14:03:43+00:00",
        "comment_author": "DOsinga",
        "comment_body": "great - do you want to do that in this, or merge this first",
        "pr_file_module": null
      },
      {
        "comment_id": "2214646584",
        "repo_full_name": "block/goose",
        "pr_number": 3446,
        "pr_file": "ui/desktop/src/components/RecipesView.tsx",
        "discussion_id": "2209868166",
        "commented_code": "@@ -110,7 +110,8 @@ export default function RecipesView({ onBack }: RecipesViewProps) {\n       if (!configBase64) {\n         throw new Error('No recipe configuration found in deeplink');\n       }\n-      const configJson = Buffer.from(configBase64, 'base64').toString('utf-8');\n+      const urlDecoded = decodeURIComponent(configBase64);",
        "comment_created_at": "2025-07-18T01:23:37+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "Implemented: https://github.com/block/goose/pull/3489",
        "pr_file_module": null
      }
    ]
  }
]