[
  {
    "discussion_id": "2221803263",
    "pr_number": 3530,
    "pr_file": "ui/desktop/src/components/pair.tsx",
    "created_at": "2025-07-22T08:58:30+00:00",
    "commented_code": "messageHistoryIndex: number;\n   messages: Message[];\n   recipeConfig?: Recipe | null; // Add recipe configuration to chat state\n+  recipeParameters?: Record<string, string> | null; // Add recipe parameters to chat state",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2221803263",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/pair.tsx",
        "discussion_id": "2221803263",
        "commented_code": "@@ -43,6 +43,7 @@ export interface ChatType {\n   messageHistoryIndex: number;\n   messages: Message[];\n   recipeConfig?: Recipe | null; // Add recipe configuration to chat state\n+  recipeParameters?: Record<string, string> | null; // Add recipe parameters to chat state",
        "comment_created_at": "2025-07-22T08:58:30+00:00",
        "comment_author": "DOsinga",
        "comment_body": "why are hub and pair having the same diff & code here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2223210139",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/pair.tsx",
        "discussion_id": "2221803263",
        "commented_code": "@@ -43,6 +43,7 @@ export interface ChatType {\n   messageHistoryIndex: number;\n   messages: Message[];\n   recipeConfig?: Recipe | null; // Add recipe configuration to chat state\n+  recipeParameters?: Record<string, string> | null; // Add recipe parameters to chat state",
        "comment_created_at": "2025-07-22T16:48:26+00:00",
        "comment_author": "zanesq",
        "comment_body": "Good catch also, refactored to use a shared ChatType instead \ud83d\udc4d ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2211088137",
    "pr_number": 3250,
    "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
    "created_at": "2025-07-16T17:39:44+00:00",
    "commented_code": "return 'final output';\n \n       case 'computer_control':\n-        return 'poking around...';\n+        return `poking around...`;\n \n       default: {\n-        // Fallback to showing key parameters for unknown tools\n+        // Generic fallback for unknown tools: ToolName + CompactArguments\n+        // This ensures any MCP tool works without explicit handling\n+        const toolDisplayName = snakeToTitleCase(toolName);\n         const entries = Object.entries(args);\n-        if (entries.length === 0) return null;\n+        \n+        if (entries.length === 0) {\n+          return `${toolDisplayName}`;\n+        }\n \n         // For a single parameter, show key and truncated value\n         if (entries.length === 1) {\n           const [key, value] = entries[0];\n           const stringValue = getStringValue(value);\n           const truncatedValue = truncate(stringValue, 30);\n-          return `${key}: ${truncatedValue}`;\n+          return `${toolDisplayName} ${key}: ${truncatedValue}`;\n         }\n \n-        // For multiple parameters, just show the keys\n-        return entries.map(([key]) => key).join(', ');\n+        // For multiple parameters, show tool name and keys\n+        const keys = entries.map(([key]) => key).join(', ');\n+        return `${toolDisplayName} ${keys}`;\n       }\n     }\n \n     return null;\n   };\n \n+  // Get extension tooltip for the current tool\n+  const extensionTooltip = getExtensionTooltip(toolCall.name);\n+\n   return (\n     <ToolCallExpandable\n       isStartExpanded={isRenderingProgress}\n       isForceExpand={isShouldExpand}\n       label={\n         <>\n           <Dot size={2} loadingStatus={loadingStatus} />\n-          <span className=\"ml-[10px]\">\n-            {(() => {\n-              const description = getToolDescription();\n-              if (description) {\n-                return description;\n-              }\n-              // Fallback to the original tool name formatting\n-              return snakeToTitleCase(toolCall.name.substring(toolCall.name.lastIndexOf('__') + 2));\n-            })()}\n-          </span>\n+          {extensionTooltip ? (\n+            <TooltipWrapper tooltipContent={extensionTooltip} side=\"top\" align=\"start\">\n+              <span className=\"ml-[10px] cursor-pointer hover:opacity-80\">\n+                {(() => {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2211088137",
        "repo_full_name": "block/goose",
        "pr_number": 3250,
        "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
        "discussion_id": "2211088137",
        "commented_code": "@@ -289,46 +301,70 @@ function ToolCallView({\n         return 'final output';\n \n       case 'computer_control':\n-        return 'poking around...';\n+        return `poking around...`;\n \n       default: {\n-        // Fallback to showing key parameters for unknown tools\n+        // Generic fallback for unknown tools: ToolName + CompactArguments\n+        // This ensures any MCP tool works without explicit handling\n+        const toolDisplayName = snakeToTitleCase(toolName);\n         const entries = Object.entries(args);\n-        if (entries.length === 0) return null;\n+        \n+        if (entries.length === 0) {\n+          return `${toolDisplayName}`;\n+        }\n \n         // For a single parameter, show key and truncated value\n         if (entries.length === 1) {\n           const [key, value] = entries[0];\n           const stringValue = getStringValue(value);\n           const truncatedValue = truncate(stringValue, 30);\n-          return `${key}: ${truncatedValue}`;\n+          return `${toolDisplayName} ${key}: ${truncatedValue}`;\n         }\n \n-        // For multiple parameters, just show the keys\n-        return entries.map(([key]) => key).join(', ');\n+        // For multiple parameters, show tool name and keys\n+        const keys = entries.map(([key]) => key).join(', ');\n+        return `${toolDisplayName} ${keys}`;\n       }\n     }\n \n     return null;\n   };\n \n+  // Get extension tooltip for the current tool\n+  const extensionTooltip = getExtensionTooltip(toolCall.name);\n+\n   return (\n     <ToolCallExpandable\n       isStartExpanded={isRenderingProgress}\n       isForceExpand={isShouldExpand}\n       label={\n         <>\n           <Dot size={2} loadingStatus={loadingStatus} />\n-          <span className=\"ml-[10px]\">\n-            {(() => {\n-              const description = getToolDescription();\n-              if (description) {\n-                return description;\n-              }\n-              // Fallback to the original tool name formatting\n-              return snakeToTitleCase(toolCall.name.substring(toolCall.name.lastIndexOf('__') + 2));\n-            })()}\n-          </span>\n+          {extensionTooltip ? (\n+            <TooltipWrapper tooltipContent={extensionTooltip} side=\"top\" align=\"start\">\n+              <span className=\"ml-[10px] cursor-pointer hover:opacity-80\">\n+                {(() => {",
        "comment_created_at": "2025-07-16T17:39:44+00:00",
        "comment_author": "jamadeo",
        "comment_body": "You could avoid duplication by extracting the inner part like:\n\n```\nconst toolLabel = (\n      <span className=\"ml-[10px]\">\n        {(() => {\n          const description = getToolDescription();\n          if (description) {\n            return description;\n          }\n          // Fallback tool name formatting\n          return snakeToTitleCase(toolCall.name.substring(toolCall.name.lastIndexOf('__') + 2));\n        })()}\n      </span>\n);\n\n\nreturn (\n    <ToolCallExpandable\n        ...\n        {extensionTooltip ? (\n            <TooltipWrapper ... >{toolLabel}</TooltipWrapper>\n        ) : (\n            {toolLabel}\n        )\n...\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2214059670",
        "repo_full_name": "block/goose",
        "pr_number": 3250,
        "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
        "discussion_id": "2211088137",
        "commented_code": "@@ -289,46 +301,70 @@ function ToolCallView({\n         return 'final output';\n \n       case 'computer_control':\n-        return 'poking around...';\n+        return `poking around...`;\n \n       default: {\n-        // Fallback to showing key parameters for unknown tools\n+        // Generic fallback for unknown tools: ToolName + CompactArguments\n+        // This ensures any MCP tool works without explicit handling\n+        const toolDisplayName = snakeToTitleCase(toolName);\n         const entries = Object.entries(args);\n-        if (entries.length === 0) return null;\n+        \n+        if (entries.length === 0) {\n+          return `${toolDisplayName}`;\n+        }\n \n         // For a single parameter, show key and truncated value\n         if (entries.length === 1) {\n           const [key, value] = entries[0];\n           const stringValue = getStringValue(value);\n           const truncatedValue = truncate(stringValue, 30);\n-          return `${key}: ${truncatedValue}`;\n+          return `${toolDisplayName} ${key}: ${truncatedValue}`;\n         }\n \n-        // For multiple parameters, just show the keys\n-        return entries.map(([key]) => key).join(', ');\n+        // For multiple parameters, show tool name and keys\n+        const keys = entries.map(([key]) => key).join(', ');\n+        return `${toolDisplayName} ${keys}`;\n       }\n     }\n \n     return null;\n   };\n \n+  // Get extension tooltip for the current tool\n+  const extensionTooltip = getExtensionTooltip(toolCall.name);\n+\n   return (\n     <ToolCallExpandable\n       isStartExpanded={isRenderingProgress}\n       isForceExpand={isShouldExpand}\n       label={\n         <>\n           <Dot size={2} loadingStatus={loadingStatus} />\n-          <span className=\"ml-[10px]\">\n-            {(() => {\n-              const description = getToolDescription();\n-              if (description) {\n-                return description;\n-              }\n-              // Fallback to the original tool name formatting\n-              return snakeToTitleCase(toolCall.name.substring(toolCall.name.lastIndexOf('__') + 2));\n-            })()}\n-          </span>\n+          {extensionTooltip ? (\n+            <TooltipWrapper tooltipContent={extensionTooltip} side=\"top\" align=\"start\">\n+              <span className=\"ml-[10px] cursor-pointer hover:opacity-80\">\n+                {(() => {",
        "comment_created_at": "2025-07-17T18:52:13+00:00",
        "comment_author": "LordMelkor",
        "comment_body": "@jamadeo have addressed this in the latest version of the code! Please take a look.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185797387",
    "pr_number": 3240,
    "pr_file": "ui/desktop/src/components/ChatInput.tsx",
    "created_at": "2025-07-04T17:03:36+00:00",
    "commented_code": "const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n     const val = evt.target.value;\n+    const cursorPosition = evt.target.selectionStart;\n+    \n     setDisplayValue(val); // Update display immediately\n     debouncedSetValue(val); // Debounce the actual state update\n+    \n+    // Check for @ mention\n+    checkForMention(val, cursorPosition, evt.target);\n+  };\n+\n+  const checkForMention = (text: string, cursorPosition: number, textArea: HTMLTextAreaElement) => {\n+    // Find the last @ before the cursor\n+    const beforeCursor = text.slice(0, cursorPosition);\n+    const lastAtIndex = beforeCursor.lastIndexOf('@');\n+    \n+    if (lastAtIndex === -1) {\n+      // No @ found, close mention popover\n+      setMentionPopover(prev => ({ ...prev, isOpen: false }));",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2185797387",
        "repo_full_name": "block/goose",
        "pr_number": 3240,
        "pr_file": "ui/desktop/src/components/ChatInput.tsx",
        "discussion_id": "2185797387",
        "commented_code": "@@ -219,8 +234,48 @@ export default function ChatInput({\n \n   const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n     const val = evt.target.value;\n+    const cursorPosition = evt.target.selectionStart;\n+    \n     setDisplayValue(val); // Update display immediately\n     debouncedSetValue(val); // Debounce the actual state update\n+    \n+    // Check for @ mention\n+    checkForMention(val, cursorPosition, evt.target);\n+  };\n+\n+  const checkForMention = (text: string, cursorPosition: number, textArea: HTMLTextAreaElement) => {\n+    // Find the last @ before the cursor\n+    const beforeCursor = text.slice(0, cursorPosition);\n+    const lastAtIndex = beforeCursor.lastIndexOf('@');\n+    \n+    if (lastAtIndex === -1) {\n+      // No @ found, close mention popover\n+      setMentionPopover(prev => ({ ...prev, isOpen: false }));",
        "comment_created_at": "2025-07-04T17:03:36+00:00",
        "comment_author": "DOsinga",
        "comment_body": "we could extract this thing into a named function for clarity and code dedupe:\r\n\r\nconst closeMentionPopover = () => {\r\n  setMentionPopover(prev => ({ ...prev, isOpen: false }));\r\n};\r\n\r\nand then just return that here and below\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]