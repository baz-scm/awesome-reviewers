[
  {
    "discussion_id": "2217721371",
    "pr_number": 3530,
    "pr_file": "ui/desktop/src/hooks/useRecipeManager.ts",
    "created_at": "2025-07-20T09:32:50+00:00",
    "commented_code": "// Otherwise, we are waiting for parameters, so the input should be empty.\n     return '';\n-  }, [recipeConfig, recipeParameters]);\n+  }, [recipeConfig, recipeParameters, messages.length]);\n \n   // Handle parameter submission\n   const handleParameterSubmit = async (inputValues: Record<string, string>) => {\n-    setRecipeParameters(inputValues);\n+    // Store parameters in chat context instead of local state\n+    if (chatContext?.setRecipeParameters) {\n+      chatContext.setRecipeParameters(inputValues);",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2217721371",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/hooks/useRecipeManager.ts",
        "discussion_id": "2217721371",
        "commented_code": "@@ -117,16 +126,19 @@ export const useRecipeManager = (messages: Message[], locationState?: LocationSt\n \n     // Otherwise, we are waiting for parameters, so the input should be empty.\n     return '';\n-  }, [recipeConfig, recipeParameters]);\n+  }, [recipeConfig, recipeParameters, messages.length]);\n \n   // Handle parameter submission\n   const handleParameterSubmit = async (inputValues: Record<string, string>) => {\n-    setRecipeParameters(inputValues);\n+    // Store parameters in chat context instead of local state\n+    if (chatContext?.setRecipeParameters) {\n+      chatContext.setRecipeParameters(inputValues);",
        "comment_created_at": "2025-07-20T09:32:50+00:00",
        "comment_author": "DOsinga",
        "comment_body": "in what case is chatContext undefined here? can we use the type system to make sure it is not?",
        "pr_file_module": null
      },
      {
        "comment_id": "2220290311",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/hooks/useRecipeManager.ts",
        "discussion_id": "2217721371",
        "commented_code": "@@ -117,16 +126,19 @@ export const useRecipeManager = (messages: Message[], locationState?: LocationSt\n \n     // Otherwise, we are waiting for parameters, so the input should be empty.\n     return '';\n-  }, [recipeConfig, recipeParameters]);\n+  }, [recipeConfig, recipeParameters, messages.length]);\n \n   // Handle parameter submission\n   const handleParameterSubmit = async (inputValues: Record<string, string>) => {\n-    setRecipeParameters(inputValues);\n+    // Store parameters in chat context instead of local state\n+    if (chatContext?.setRecipeParameters) {\n+      chatContext.setRecipeParameters(inputValues);",
        "comment_created_at": "2025-07-21T20:47:13+00:00",
        "comment_author": "zanesq",
        "comment_body": "its a provider that we only use for certain cases at runtime so the type system isn't enough to catch it unfortunately",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2216005595",
    "pr_number": 3510,
    "pr_file": "ui/desktop/src/goosed.ts",
    "created_at": "2025-07-18T13:07:28+00:00",
    "commented_code": "return false;\n };\n \n+const connectToExternalBackend = async (\n+  workingDir: string,\n+  port: number = 3000\n+): Promise<[number, string, ChildProcess]> => {\n+  log.info(`Using external goosed backend on port ${port}`);\n+\n+  const isReady = await checkServerStatus(port);\n+  if (!isReady) {\n+    throw new Error(`External goosed server not accessible on port ${port}`);\n+  }\n+\n+  if (process.platform === 'win32') {\n+    throw new Error('External backend process discovery not supported on Windows');\n+  }\n+\n+  let pid: number;\n+  try {\n+    const stdout = execSync(`lsof -ti:${port}`, { encoding: 'utf8' });\n+    const parsedPid = parseInt(stdout.trim());\n+    if (isNaN(parsedPid)) {\n+      throw new Error('Could not parse PID from lsof output');\n+    }\n+    pid = parsedPid;\n+  } catch (error) {\n+    throw new Error(`Could not find process for external backend on port ${port}: ${error}`);\n+  }\n+\n+  const mockProcess = {\n+    pid,",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2216005595",
        "repo_full_name": "block/goose",
        "pr_number": 3510,
        "pr_file": "ui/desktop/src/goosed.ts",
        "discussion_id": "2216005595",
        "commented_code": "@@ -59,8 +59,46 @@ const checkServerStatus = async (\n   return false;\n };\n \n+const connectToExternalBackend = async (\n+  workingDir: string,\n+  port: number = 3000\n+): Promise<[number, string, ChildProcess]> => {\n+  log.info(`Using external goosed backend on port ${port}`);\n+\n+  const isReady = await checkServerStatus(port);\n+  if (!isReady) {\n+    throw new Error(`External goosed server not accessible on port ${port}`);\n+  }\n+\n+  if (process.platform === 'win32') {\n+    throw new Error('External backend process discovery not supported on Windows');\n+  }\n+\n+  let pid: number;\n+  try {\n+    const stdout = execSync(`lsof -ti:${port}`, { encoding: 'utf8' });\n+    const parsedPid = parseInt(stdout.trim());\n+    if (isNaN(parsedPid)) {\n+      throw new Error('Could not parse PID from lsof output');\n+    }\n+    pid = parsedPid;\n+  } catch (error) {\n+    throw new Error(`Could not find process for external backend on port ${port}: ${error}`);\n+  }\n+\n+  const mockProcess = {\n+    pid,",
        "comment_created_at": "2025-07-18T13:07:28+00:00",
        "comment_author": "jamadeo",
        "comment_body": "do we actually need the pid of the backend if we aren't managing the process? maybe it isn't worth unwinding but it would let you skip the whole lsof thing",
        "pr_file_module": null
      },
      {
        "comment_id": "2217249181",
        "repo_full_name": "block/goose",
        "pr_number": 3510,
        "pr_file": "ui/desktop/src/goosed.ts",
        "discussion_id": "2216005595",
        "commented_code": "@@ -59,8 +59,46 @@ const checkServerStatus = async (\n   return false;\n };\n \n+const connectToExternalBackend = async (\n+  workingDir: string,\n+  port: number = 3000\n+): Promise<[number, string, ChildProcess]> => {\n+  log.info(`Using external goosed backend on port ${port}`);\n+\n+  const isReady = await checkServerStatus(port);\n+  if (!isReady) {\n+    throw new Error(`External goosed server not accessible on port ${port}`);\n+  }\n+\n+  if (process.platform === 'win32') {\n+    throw new Error('External backend process discovery not supported on Windows');\n+  }\n+\n+  let pid: number;\n+  try {\n+    const stdout = execSync(`lsof -ti:${port}`, { encoding: 'utf8' });\n+    const parsedPid = parseInt(stdout.trim());\n+    if (isNaN(parsedPid)) {\n+      throw new Error('Could not parse PID from lsof output');\n+    }\n+    pid = parsedPid;\n+  } catch (error) {\n+    throw new Error(`Could not find process for external backend on port ${port}: ${error}`);\n+  }\n+\n+  const mockProcess = {\n+    pid,",
        "comment_created_at": "2025-07-19T09:01:14+00:00",
        "comment_author": "DOsinga",
        "comment_body": "you mean we make the pid nullable and then have ts tell us where we are relying on this? that might be better",
        "pr_file_module": null
      },
      {
        "comment_id": "2220446301",
        "repo_full_name": "block/goose",
        "pr_number": 3510,
        "pr_file": "ui/desktop/src/goosed.ts",
        "discussion_id": "2216005595",
        "commented_code": "@@ -59,8 +59,46 @@ const checkServerStatus = async (\n   return false;\n };\n \n+const connectToExternalBackend = async (\n+  workingDir: string,\n+  port: number = 3000\n+): Promise<[number, string, ChildProcess]> => {\n+  log.info(`Using external goosed backend on port ${port}`);\n+\n+  const isReady = await checkServerStatus(port);\n+  if (!isReady) {\n+    throw new Error(`External goosed server not accessible on port ${port}`);\n+  }\n+\n+  if (process.platform === 'win32') {\n+    throw new Error('External backend process discovery not supported on Windows');\n+  }\n+\n+  let pid: number;\n+  try {\n+    const stdout = execSync(`lsof -ti:${port}`, { encoding: 'utf8' });\n+    const parsedPid = parseInt(stdout.trim());\n+    if (isNaN(parsedPid)) {\n+      throw new Error('Could not parse PID from lsof output');\n+    }\n+    pid = parsedPid;\n+  } catch (error) {\n+    throw new Error(`Could not find process for external backend on port ${port}: ${error}`);\n+  }\n+\n+  const mockProcess = {\n+    pid,",
        "comment_created_at": "2025-07-21T21:58:40+00:00",
        "comment_author": "DOsinga",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]