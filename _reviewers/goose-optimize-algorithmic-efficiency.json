[
  {
    "discussion_id": "2217720248",
    "pr_number": 3530,
    "pr_file": "ui/desktop/src/components/ViewRecipeModal.tsx",
    "created_at": "2025-07-20T09:29:34+00:00",
    "commented_code": "}\n   }, [isOpen, getExtensions, recipeExtensions, extensionsLoaded]);\n \n-  // Use effect to set parameters whenever instructions or prompt changes\n+  // Only auto-parse parameters from instructions if no parameters exist yet\n+  // This prevents overwriting existing parameter configurations\n   useEffect(() => {\n-    const instructionsParams = parseParametersFromInstructions(instructions);\n-    const promptParams = parseParametersFromInstructions(prompt);\n-\n-    // Combine parameters, ensuring no duplicates by key\n-    const allParams = [...instructionsParams];\n-    promptParams.forEach((promptParam) => {\n-      if (!allParams.some((param) => param.key === promptParam.key)) {\n-        allParams.push(promptParam);\n-      }\n-    });\n+    // Only parse parameters if we don't have any existing parameters\n+    if (parameters.length === 0) {\n+      const instructionsParams = parseParametersFromInstructions(instructions);\n+      const promptParams = parseParametersFromInstructions(prompt);\n+\n+      // Combine parameters, ensuring no duplicates by key\n+      const allParams = [...instructionsParams];\n+      promptParams.forEach((promptParam) => {\n+        if (!allParams.some((param) => param.key === promptParam.key)) {\n+          allParams.push(promptParam);\n+        }\n+      });",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2217720248",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/ViewRecipeModal.tsx",
        "discussion_id": "2217720248",
        "commented_code": "@@ -102,28 +101,34 @@ export default function ViewRecipeModal({ isOpen, onClose, config }: ViewRecipeM\n     }\n   }, [isOpen, getExtensions, recipeExtensions, extensionsLoaded]);\n \n-  // Use effect to set parameters whenever instructions or prompt changes\n+  // Only auto-parse parameters from instructions if no parameters exist yet\n+  // This prevents overwriting existing parameter configurations\n   useEffect(() => {\n-    const instructionsParams = parseParametersFromInstructions(instructions);\n-    const promptParams = parseParametersFromInstructions(prompt);\n-\n-    // Combine parameters, ensuring no duplicates by key\n-    const allParams = [...instructionsParams];\n-    promptParams.forEach((promptParam) => {\n-      if (!allParams.some((param) => param.key === promptParam.key)) {\n-        allParams.push(promptParam);\n-      }\n-    });\n+    // Only parse parameters if we don't have any existing parameters\n+    if (parameters.length === 0) {\n+      const instructionsParams = parseParametersFromInstructions(instructions);\n+      const promptParams = parseParametersFromInstructions(prompt);\n+\n+      // Combine parameters, ensuring no duplicates by key\n+      const allParams = [...instructionsParams];\n+      promptParams.forEach((promptParam) => {\n+        if (!allParams.some((param) => param.key === promptParam.key)) {\n+          allParams.push(promptParam);\n+        }\n+      });",
        "comment_created_at": "2025-07-20T09:29:34+00:00",
        "comment_author": "DOsinga",
        "comment_body": "this is O(n^2) - consider using a map to do this more efficiently",
        "pr_file_module": null
      },
      {
        "comment_id": "2220292321",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/ViewRecipeModal.tsx",
        "discussion_id": "2217720248",
        "commented_code": "@@ -102,28 +101,34 @@ export default function ViewRecipeModal({ isOpen, onClose, config }: ViewRecipeM\n     }\n   }, [isOpen, getExtensions, recipeExtensions, extensionsLoaded]);\n \n-  // Use effect to set parameters whenever instructions or prompt changes\n+  // Only auto-parse parameters from instructions if no parameters exist yet\n+  // This prevents overwriting existing parameter configurations\n   useEffect(() => {\n-    const instructionsParams = parseParametersFromInstructions(instructions);\n-    const promptParams = parseParametersFromInstructions(prompt);\n-\n-    // Combine parameters, ensuring no duplicates by key\n-    const allParams = [...instructionsParams];\n-    promptParams.forEach((promptParam) => {\n-      if (!allParams.some((param) => param.key === promptParam.key)) {\n-        allParams.push(promptParam);\n-      }\n-    });\n+    // Only parse parameters if we don't have any existing parameters\n+    if (parameters.length === 0) {\n+      const instructionsParams = parseParametersFromInstructions(instructions);\n+      const promptParams = parseParametersFromInstructions(prompt);\n+\n+      // Combine parameters, ensuring no duplicates by key\n+      const allParams = [...instructionsParams];\n+      promptParams.forEach((promptParam) => {\n+        if (!allParams.some((param) => param.key === promptParam.key)) {\n+          allParams.push(promptParam);\n+        }\n+      });",
        "comment_created_at": "2025-07-21T20:48:03+00:00",
        "comment_author": "zanesq",
        "comment_body": "Good catch, fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185784862",
    "pr_number": 3240,
    "pr_file": "ui/desktop/src/components/ChatInput.tsx",
    "created_at": "2025-07-04T16:58:02+00:00",
    "commented_code": "const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n     const val = evt.target.value;\n+    const cursorPosition = evt.target.selectionStart;\n+    \n     setDisplayValue(val); // Update display immediately\n     debouncedSetValue(val); // Debounce the actual state update\n+    \n+    // Check for @ mention\n+    checkForMention(val, cursorPosition, evt.target);\n+  };\n+\n+  const checkForMention = (text: string, cursorPosition: number, textArea: HTMLTextAreaElement) => {\n+    // Find the last @ before the cursor\n+    const beforeCursor = text.slice(0, cursorPosition);\n+    const lastAtIndex = beforeCursor.lastIndexOf('@');",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2185784862",
        "repo_full_name": "block/goose",
        "pr_number": 3240,
        "pr_file": "ui/desktop/src/components/ChatInput.tsx",
        "discussion_id": "2185784862",
        "commented_code": "@@ -219,8 +234,48 @@ export default function ChatInput({\n \n   const handleChange = (evt: React.ChangeEvent<HTMLTextAreaElement>) => {\n     const val = evt.target.value;\n+    const cursorPosition = evt.target.selectionStart;\n+    \n     setDisplayValue(val); // Update display immediately\n     debouncedSetValue(val); // Debounce the actual state update\n+    \n+    // Check for @ mention\n+    checkForMention(val, cursorPosition, evt.target);\n+  };\n+\n+  const checkForMention = (text: string, cursorPosition: number, textArea: HTMLTextAreaElement) => {\n+    // Find the last @ before the cursor\n+    const beforeCursor = text.slice(0, cursorPosition);\n+    const lastAtIndex = beforeCursor.lastIndexOf('@');",
        "comment_created_at": "2025-07-04T16:58:02+00:00",
        "comment_author": "DOsinga",
        "comment_body": "you can do this in one go: const lastAtIndex = text.lastIndexOf('@', cursorPosition - 1); and avoid the string creation",
        "pr_file_module": null
      }
    ]
  }
]