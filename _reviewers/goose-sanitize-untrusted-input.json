[
  {
    "discussion_id": "2150695101",
    "pr_number": 2948,
    "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
    "created_at": "2025-06-16T19:19:23+00:00",
    "commented_code": "label={<span className=\"pl-[19px] py-1\">Output</span>}\n       isStartExpanded={isStartExpanded}\n     >\n-      <div className=\"bg-bgApp rounded-b pl-[19px] pr-2 py-4\">\n-        {result.type === 'text' && result.text && (\n-          <MarkdownContent\n-            content={result.text}\n-            className=\"whitespace-pre-wrap p-2 max-w-full overflow-x-auto\"\n-          />\n-        )}\n-        {result.type === 'image' && (\n-          <img\n-            src={`data:${result.mimeType};base64,${result.data}`}\n-            alt=\"Tool result\"\n-            className=\"max-w-full h-auto rounded-md my-2\"\n-            onError={(e) => {\n-              console.error('Failed to load image');\n-              e.currentTarget.style.display = 'none';\n-            }}\n-          />\n-        )}\n-      </div>\n+      {result.type === 'resource' && result.resource.uri?.startsWith('ui://') ? (",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2150695101",
        "repo_full_name": "block/goose",
        "pr_number": 2948,
        "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
        "discussion_id": "2150695101",
        "commented_code": "@@ -290,25 +291,29 @@ function ToolResultView({ result, isStartExpanded }: ToolResultViewProps) {\n       label={<span className=\"pl-[19px] py-1\">Output</span>}\n       isStartExpanded={isStartExpanded}\n     >\n-      <div className=\"bg-bgApp rounded-b pl-[19px] pr-2 py-4\">\n-        {result.type === 'text' && result.text && (\n-          <MarkdownContent\n-            content={result.text}\n-            className=\"whitespace-pre-wrap p-2 max-w-full overflow-x-auto\"\n-          />\n-        )}\n-        {result.type === 'image' && (\n-          <img\n-            src={`data:${result.mimeType};base64,${result.data}`}\n-            alt=\"Tool result\"\n-            className=\"max-w-full h-auto rounded-md my-2\"\n-            onError={(e) => {\n-              console.error('Failed to load image');\n-              e.currentTarget.style.display = 'none';\n-            }}\n-          />\n-        )}\n-      </div>\n+      {result.type === 'resource' && result.resource.uri?.startsWith('ui://') ? (",
        "comment_created_at": "2025-06-16T19:19:23+00:00",
        "comment_author": "shellz-n-stuff",
        "comment_body": "Do we HTML escape the result text/data anywhere?",
        "pr_file_module": null
      },
      {
        "comment_id": "2150774396",
        "repo_full_name": "block/goose",
        "pr_number": 2948,
        "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
        "discussion_id": "2150695101",
        "commented_code": "@@ -290,25 +291,29 @@ function ToolResultView({ result, isStartExpanded }: ToolResultViewProps) {\n       label={<span className=\"pl-[19px] py-1\">Output</span>}\n       isStartExpanded={isStartExpanded}\n     >\n-      <div className=\"bg-bgApp rounded-b pl-[19px] pr-2 py-4\">\n-        {result.type === 'text' && result.text && (\n-          <MarkdownContent\n-            content={result.text}\n-            className=\"whitespace-pre-wrap p-2 max-w-full overflow-x-auto\"\n-          />\n-        )}\n-        {result.type === 'image' && (\n-          <img\n-            src={`data:${result.mimeType};base64,${result.data}`}\n-            alt=\"Tool result\"\n-            className=\"max-w-full h-auto rounded-md my-2\"\n-            onError={(e) => {\n-              console.error('Failed to load image');\n-              e.currentTarget.style.display = 'none';\n-            }}\n-          />\n-        )}\n-      </div>\n+      {result.type === 'resource' && result.resource.uri?.startsWith('ui://') ? (",
        "comment_created_at": "2025-06-16T20:03:04+00:00",
        "comment_author": "aharvard",
        "comment_body": "No escaping as of now. Does an MCP server returning a resource open us up to prompt injection even though we send the html content to an iframe? \r\n\r\nI'd love to learn more about how to be safe here.\r\n\r\nAlso, we're supporting more than just HTML strings as text. There are four kinds of data that are passed to [@mcp-ui/client's iframe component](https://github.com/idosal/mcp-ui/blob/main/packages/client/src/components/HtmlResource.tsx) \u2014\u00a0HTML strings are sent to the `srcDoc` attribute and URL strings are sent to the `src` attribute. \r\n\r\n\r\n## HTML string as text\r\n```\r\n{\r\n    \"uri\": \"ui://component-html-as-text\",\r\n    \"mimeType\": \"text/html\",\r\n    \"text\": \"<style>\\n    * {\\n      box-sizing: border-box;\\n    }\\n    body   {\\n      margin: 0;\\n      padding: 0;\\n    }\\n    main {\\n      background: var(--bg, black);\\n      min-height: 100vh;\\n      padding: 20px;\\n    }\\n    main.a {\\n      --bg: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);\\n    }\\n    main.b {\\n      --bg: linear-gradient(to right, #1a1a1a, #2d2d2d, #404040);\\n    }\\n    .wrapper {\\n      background: white;\\n      padding: 20px;\\n      border-radius: 10px;\\n    }\\n    .button {\\n      background: blue;\\n      color: white;\\n      padding: 10px;\\n      border-radius: 5px;\\n      cursor: pointer;\\n    }\\n    .buttons {\\n      display: flex;\\n      gap: 10px;\\n    }\\n    .button-actionA {\\n      background: green;\\n    }\\n    .button-actionB {\\n      background: red;\\n    }\\n    .photo-gallery {\\n      display: grid;\\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n      gap: 10px;\\n    }\\n    .photo-gallery img {\\n      width: 100%;\\n      height: 100%;\\n      object-fit: contain;\\n    }\\n  </style><main class=\\\"a\\\"><div class=\\\"wrapper wrapper-a\\\"><h1>Hello World</h1><p>this HTML is in text format</p><button class=\\\"button button-actionA\\\" onclick=\\\"   \\n    window.parent.postMessage(\\n      { \\n        type: 'tool', \\n        payload: { \\n          toolName: 'some_tool_name', \\n          params: { \\n            value: Date.now() \\n          } \\n        } \\n      }, '*')\\n    \\\">Tool Call</button> <button class=\\\"button button-actionB\\\" onclick=\\\"\\n    window.parent.postMessage(\\n      { \\n        type: 'intent', \\n        payload: {         \\n          intent: 'resizeIframe', \\n          params: {\\n            minHeight: '100vh',\\n            value: Date.now() \\n          }\\n        } \\n      }, '*')\\\">Resize Iframe</button></div></main>\"\r\n}\r\n```\r\n\r\n## HTML string as base64 blob \r\n```\r\n{\r\n    \"uri\": \"ui://component-html-as-blob\",\r\n    \"mimeType\": \"text/html\",\r\n    \"blob\": \"PHN0eWxlPgogICAgKiB7CiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICB9CiAgICBib2R5ICAgewogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDA7CiAgICB9CiAgICBtYWluIHsKICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmcsIGJsYWNrKTsKICAgICAgbWluLWhlaWdodDogMTAwdmg7CiAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICB9CiAgICBtYWluLmEgewogICAgICAtLWJnOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJlZCwgb3JhbmdlLCB5ZWxsb3csIGdyZWVuLCBibHVlLCBpbmRpZ28sIHZpb2xldCk7CiAgICB9CiAgICBtYWluLmIgewogICAgICAtLWJnOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMxYTFhMWEsICMyZDJkMmQsICM0MDQwNDApOwogICAgfQogICAgLndyYXBwZXIgewogICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgcGFkZGluZzogMjBweDsKICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgIH0KICAgIC5idXR0b24gewogICAgICBiYWNrZ3JvdW5kOiBibHVlOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIHBhZGRpbmc6IDEwcHg7CiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgfQogICAgLmJ1dHRvbnMgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBnYXA6IDEwcHg7CiAgICB9CiAgICAuYnV0dG9uLWFjdGlvbkEgewogICAgICBiYWNrZ3JvdW5kOiBncmVlbjsKICAgIH0KICAgIC5idXR0b24tYWN0aW9uQiB7CiAgICAgIGJhY2tncm91bmQ6IHJlZDsKICAgIH0KICAgIC5waG90by1nYWxsZXJ5IHsKICAgICAgZGlzcGxheTogZ3JpZDsKICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMzAwcHgsIDFmcikpOwogICAgICBnYXA6IDEwcHg7CiAgICB9CiAgICAucGhvdG8tZ2FsbGVyeSBpbWcgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICBvYmplY3QtZml0OiBjb250YWluOwogICAgfQogIDwvc3R5bGU+PG1haW4gY2xhc3M9InBob3RvLWdhbGxlcnkiPjxpbWcgc3JjPSJodHRwczovL3BsYWNlaG9sZC5jby84MDB4NjAwL3BuZz90ZXh0PXBob3RvKzEiIGFsdD0icGhvdG8gMSI+PGltZyBzcmM9Imh0dHBzOi8vcGxhY2Vob2xkLmNvLzgwMHg2MDAvcG5nP3RleHQ9cGhvdG8rMiIgYWx0PSJwaG90byAyIj48aW1nIHNyYz0iaHR0cHM6Ly9wbGFjZWhvbGQuY28vODAweDYwMC9wbmc/dGV4dD1waG90byszIiBhbHQ9InBob3RvIDMiPjxpbWcgc3JjPSJodHRwczovL3BsYWNlaG9sZC5jby84MDB4NjAwL3BuZz90ZXh0PXBob3RvKzQiIGFsdD0icGhvdG8gNCI+PGltZyBzcmM9Imh0dHBzOi8vcGxhY2Vob2xkLmNvLzgwMHg2MDAvcG5nP3RleHQ9cGhvdG8rNSIgYWx0PSJwaG90byA1Ij48L21haW4+\"\r\n}\r\n```\r\n\r\n## URL string as text\r\n```\r\n{\r\n    \"uri\": \"ui://website-url-as-text/https://www.wikipedia.com\",\r\n    \"mimeType\": \"text/uri-list\",\r\n    \"text\": \"https://www.wikipedia.com\"\r\n}\r\n```\r\n\r\n## URL string as base64 blob \r\n```\r\n{\r\n    \"uri\": \"ui://website-url-as-blob/https://en.wikipedia.org/wiki/Model_Context_Protocol\",\r\n    \"mimeType\": \"text/uri-list\",\r\n    \"blob\": \"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kZWxfQ29udGV4dF9Qcm90b2NvbA==\"\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2151142473",
        "repo_full_name": "block/goose",
        "pr_number": 2948,
        "pr_file": "ui/desktop/src/components/ToolCallWithResponse.tsx",
        "discussion_id": "2150695101",
        "commented_code": "@@ -290,25 +291,29 @@ function ToolResultView({ result, isStartExpanded }: ToolResultViewProps) {\n       label={<span className=\"pl-[19px] py-1\">Output</span>}\n       isStartExpanded={isStartExpanded}\n     >\n-      <div className=\"bg-bgApp rounded-b pl-[19px] pr-2 py-4\">\n-        {result.type === 'text' && result.text && (\n-          <MarkdownContent\n-            content={result.text}\n-            className=\"whitespace-pre-wrap p-2 max-w-full overflow-x-auto\"\n-          />\n-        )}\n-        {result.type === 'image' && (\n-          <img\n-            src={`data:${result.mimeType};base64,${result.data}`}\n-            alt=\"Tool result\"\n-            className=\"max-w-full h-auto rounded-md my-2\"\n-            onError={(e) => {\n-              console.error('Failed to load image');\n-              e.currentTarget.style.display = 'none';\n-            }}\n-          />\n-        )}\n-      </div>\n+      {result.type === 'resource' && result.resource.uri?.startsWith('ui://') ? (",
        "comment_created_at": "2025-06-17T01:22:16+00:00",
        "comment_author": "shellz-n-stuff",
        "comment_body": "This implementation seems pretty vulnerable to XSS or Redirects via prompt injection with this implementation.\r\n\r\nThe following is an example but there are quite a lot of ways to attack this but the Iframe example I've pasted below (as @michaelneale mentioned the example)\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<body>\r\n  <h1>Iframe XSS Demo</h1>\r\n\r\n  <iframe style=\"width: 100%; height: 200px;\" srcdoc='\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n      <title>Iframe Script</title>\r\n    </head>\r\n    <body>\r\n      <script>\r\n        // Blank script\r\n        alert(\"bad stuff\")\r\n      </script>\r\n    </body>\r\n    </html>\r\n  '></iframe>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\nA much safer implementation would be building a component library (or using an existing one) and then allowing goose to provide input vars to those components (we could expand that component set pretty fast over time)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2174021625",
    "pr_number": 3155,
    "pr_file": "ui/desktop/src/components/ChatView.tsx",
    "created_at": "2025-06-30T00:23:25+00:00",
    "commented_code": "return true;\n };\n \n+const substituteParameters = (prompt: string, params: Record<string, string>): string => {\n+  let substitutedPrompt = prompt;\n+\n+  console.log('Substituting parameters:', { prompt, params });\n+\n+  for (const key in params) {\n+    // Escape special characters in the key (parameter) and match optional whitespace\n+    const regex = new RegExp(`{{\\\\s*${key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*}}`, 'g');\n+    const beforeSubstitution = substitutedPrompt;\n+    substitutedPrompt = substitutedPrompt.replace(regex, params[key]);",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2174021625",
        "repo_full_name": "block/goose",
        "pr_number": 3155,
        "pr_file": "ui/desktop/src/components/ChatView.tsx",
        "discussion_id": "2174021625",
        "commented_code": "@@ -69,6 +71,27 @@ const isUserMessage = (message: Message): boolean => {\n   return true;\n };\n \n+const substituteParameters = (prompt: string, params: Record<string, string>): string => {\n+  let substitutedPrompt = prompt;\n+\n+  console.log('Substituting parameters:', { prompt, params });\n+\n+  for (const key in params) {\n+    // Escape special characters in the key (parameter) and match optional whitespace\n+    const regex = new RegExp(`{{\\\\s*${key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\s*}}`, 'g');\n+    const beforeSubstitution = substitutedPrompt;\n+    substitutedPrompt = substitutedPrompt.replace(regex, params[key]);",
        "comment_created_at": "2025-06-30T00:23:25+00:00",
        "comment_author": "AaronGoldsmith",
        "comment_body": "Treat the parameter as literal text, to avoid regex injection and unintended matching.\r\n\r\nFor example, without santization\r\n```js\r\n// matches {{user_name}}, {{user-name}}, etc\r\nsubstitutedPrompt.replace(new RegExp('{{user.name}}'), value) \r\n```\r\nwith sanitization\r\n```js\r\n// matches exactly {{user.name}}\r\nsubstitutedPrompt.replace(new RegExp('{{user\\.name}}'), value)\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  }
]