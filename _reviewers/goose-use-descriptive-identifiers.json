[
  {
    "discussion_id": "2243950487",
    "pr_number": 3638,
    "pr_file": "crates/goose-mcp/src/developer/mod.rs",
    "created_at": "2025-07-30T22:07:48+00:00",
    "commented_code": "// Get platform-specific shell configuration\n         let shell_config = get_shell_config();\n \n-        // Execute the command using platform-specific shell\n+        // Execute the command using shell with better process cleanup\n+        let wrapped_command = format!(\"setsid {}\", command);\n+\n         let mut child = Command::new(&shell_config.executable)\n             .stdout(Stdio::piped())\n             .stderr(Stdio::piped())\n             .stdin(Stdio::null())\n             .kill_on_drop(true)\n             .args(&shell_config.args)\n-            .arg(command)\n+            .arg(&wrapped_command)\n             .spawn()\n             .map_err(|e| ToolError::ExecutionError(e.to_string()))?;\n \n+        // Store the child PID for cleanup - generate a unique execution ID\n+        let execution_id = format!(\n+            \"exec_{}\",\n+            std::time::SystemTime::now()\n+                .duration_since(std::time::UNIX_EPOCH)",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2243950487",
        "repo_full_name": "block/goose",
        "pr_number": 3638,
        "pr_file": "crates/goose-mcp/src/developer/mod.rs",
        "discussion_id": "2243950487",
        "commented_code": "@@ -633,17 +634,36 @@ impl DeveloperRouter {\n         // Get platform-specific shell configuration\n         let shell_config = get_shell_config();\n \n-        // Execute the command using platform-specific shell\n+        // Execute the command using shell with better process cleanup\n+        let wrapped_command = format!(\"setsid {}\", command);\n+\n         let mut child = Command::new(&shell_config.executable)\n             .stdout(Stdio::piped())\n             .stderr(Stdio::piped())\n             .stdin(Stdio::null())\n             .kill_on_drop(true)\n             .args(&shell_config.args)\n-            .arg(command)\n+            .arg(&wrapped_command)\n             .spawn()\n             .map_err(|e| ToolError::ExecutionError(e.to_string()))?;\n \n+        // Store the child PID for cleanup - generate a unique execution ID\n+        let execution_id = format!(\n+            \"exec_{}\",\n+            std::time::SystemTime::now()\n+                .duration_since(std::time::UNIX_EPOCH)",
        "comment_created_at": "2025-07-30T22:07:48+00:00",
        "comment_author": "DOsinga",
        "comment_body": "don't use time for unique ids",
        "pr_file_module": null
      },
      {
        "comment_id": "2246014401",
        "repo_full_name": "block/goose",
        "pr_number": 3638,
        "pr_file": "crates/goose-mcp/src/developer/mod.rs",
        "discussion_id": "2243950487",
        "commented_code": "@@ -633,17 +634,36 @@ impl DeveloperRouter {\n         // Get platform-specific shell configuration\n         let shell_config = get_shell_config();\n \n-        // Execute the command using platform-specific shell\n+        // Execute the command using shell with better process cleanup\n+        let wrapped_command = format!(\"setsid {}\", command);\n+\n         let mut child = Command::new(&shell_config.executable)\n             .stdout(Stdio::piped())\n             .stderr(Stdio::piped())\n             .stdin(Stdio::null())\n             .kill_on_drop(true)\n             .args(&shell_config.args)\n-            .arg(command)\n+            .arg(&wrapped_command)\n             .spawn()\n             .map_err(|e| ToolError::ExecutionError(e.to_string()))?;\n \n+        // Store the child PID for cleanup - generate a unique execution ID\n+        let execution_id = format!(\n+            \"exec_{}\",\n+            std::time::SystemTime::now()\n+                .duration_since(std::time::UNIX_EPOCH)",
        "comment_created_at": "2025-07-31T17:43:27+00:00",
        "comment_author": "GaryZhous",
        "comment_body": "got it",
        "pr_file_module": null
      },
      {
        "comment_id": "2246022325",
        "repo_full_name": "block/goose",
        "pr_number": 3638,
        "pr_file": "crates/goose-mcp/src/developer/mod.rs",
        "discussion_id": "2243950487",
        "commented_code": "@@ -633,17 +634,36 @@ impl DeveloperRouter {\n         // Get platform-specific shell configuration\n         let shell_config = get_shell_config();\n \n-        // Execute the command using platform-specific shell\n+        // Execute the command using shell with better process cleanup\n+        let wrapped_command = format!(\"setsid {}\", command);\n+\n         let mut child = Command::new(&shell_config.executable)\n             .stdout(Stdio::piped())\n             .stderr(Stdio::piped())\n             .stdin(Stdio::null())\n             .kill_on_drop(true)\n             .args(&shell_config.args)\n-            .arg(command)\n+            .arg(&wrapped_command)\n             .spawn()\n             .map_err(|e| ToolError::ExecutionError(e.to_string()))?;\n \n+        // Store the child PID for cleanup - generate a unique execution ID\n+        let execution_id = format!(\n+            \"exec_{}\",\n+            std::time::SystemTime::now()\n+                .duration_since(std::time::UNIX_EPOCH)",
        "comment_created_at": "2025-07-31T17:47:54+00:00",
        "comment_author": "GaryZhous",
        "comment_body": "I changed it to using UUID instead of time based IDs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2278256043",
    "pr_number": 3933,
    "pr_file": "crates/goose/src/agents/tool_route_manager.rs",
    "created_at": "2025-08-15T05:08:42+00:00",
    "commented_code": "}\n     }\n \n-    pub async fn get_router_tool_selection_strategy(&self) -> Option<RouterToolSelectionStrategy> {\n+    pub async fn is_router_enabled(&self) -> bool {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2278256043",
        "repo_full_name": "block/goose",
        "pr_number": 3933,
        "pr_file": "crates/goose/src/agents/tool_route_manager.rs",
        "discussion_id": "2278256043",
        "commented_code": "@@ -70,21 +67,18 @@ impl ToolRouteManager {\n         }\n     }\n \n-    pub async fn get_router_tool_selection_strategy(&self) -> Option<RouterToolSelectionStrategy> {\n+    pub async fn is_router_enabled(&self) -> bool {",
        "comment_created_at": "2025-08-15T05:08:42+00:00",
        "comment_author": "michaelneale",
        "comment_body": "really should be \"is_tool_router_enabled\" as router is an overloaded term",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2276529432",
    "pr_number": 4085,
    "pr_file": "crates/goose/src/agents/extension_manager.rs",
    "created_at": "2025-08-14T12:45:17+00:00",
    "commented_code": ") -> ExtensionResult<McpClient> {\n     #[cfg(unix)]\n     command.process_group(0);\n+    #[cfg(windows)]\n+    command.creation_flags(0x08000000); // CREATE_NO_WINDOW flag: prevents console window from opening",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2276529432",
        "repo_full_name": "block/goose",
        "pr_number": 4085,
        "pr_file": "crates/goose/src/agents/extension_manager.rs",
        "discussion_id": "2276529432",
        "commented_code": "@@ -111,6 +111,8 @@ async fn child_process_client(\n ) -> ExtensionResult<McpClient> {\n     #[cfg(unix)]\n     command.process_group(0);\n+    #[cfg(windows)]\n+    command.creation_flags(0x08000000); // CREATE_NO_WINDOW flag: prevents console window from opening",
        "comment_created_at": "2025-08-14T12:45:17+00:00",
        "comment_author": "DOsinga",
        "comment_body": "Nice. rather than the comment (he said yelling at the clouds), can we just introduce a named constant that says this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2276921910",
        "repo_full_name": "block/goose",
        "pr_number": 4085,
        "pr_file": "crates/goose/src/agents/extension_manager.rs",
        "discussion_id": "2276529432",
        "commented_code": "@@ -111,6 +111,8 @@ async fn child_process_client(\n ) -> ExtensionResult<McpClient> {\n     #[cfg(unix)]\n     command.process_group(0);\n+    #[cfg(windows)]\n+    command.creation_flags(0x08000000); // CREATE_NO_WINDOW flag: prevents console window from opening",
        "comment_created_at": "2025-08-14T15:13:05+00:00",
        "comment_author": "jamadeo",
        "comment_body": "Yeah that's better. Or maybe even a header file we can import :) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2207870494",
    "pr_number": 3274,
    "pr_file": "crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs",
    "created_at": "2025-07-15T15:37:33+00:00",
    "commented_code": "use crate::agents::sub_recipe_execution_tool::lib::Task;\n use crate::recipe::{Recipe, RecipeParameter, RecipeParameterRequirement, SubRecipe};\n \n+use super::param_utils::prepare_command_params;\n+\n pub const SUB_RECIPE_TASK_TOOL_NAME_PREFIX: &str = \"subrecipe__create_task\";\n+const EXECUTION_MODE_PARALLEL: &str = \"parallel\";\n+const EXECUTION_MODE_SEQUENTIAL: &str = \"sequential\";",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2207870494",
        "repo_full_name": "block/goose",
        "pr_number": 3274,
        "pr_file": "crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs",
        "discussion_id": "2207870494",
        "commented_code": "@@ -7,16 +8,29 @@ use serde_json::{json, Map, Value};\n use crate::agents::sub_recipe_execution_tool::lib::Task;\n use crate::recipe::{Recipe, RecipeParameter, RecipeParameterRequirement, SubRecipe};\n \n+use super::param_utils::prepare_command_params;\n+\n pub const SUB_RECIPE_TASK_TOOL_NAME_PREFIX: &str = \"subrecipe__create_task\";\n+const EXECUTION_MODE_PARALLEL: &str = \"parallel\";\n+const EXECUTION_MODE_SEQUENTIAL: &str = \"sequential\";",
        "comment_created_at": "2025-07-15T15:37:33+00:00",
        "comment_author": "jamadeo",
        "comment_body": "should this be an enum?",
        "pr_file_module": null
      },
      {
        "comment_id": "2209013520",
        "repo_full_name": "block/goose",
        "pr_number": 3274,
        "pr_file": "crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs",
        "discussion_id": "2207870494",
        "commented_code": "@@ -7,16 +8,29 @@ use serde_json::{json, Map, Value};\n use crate::agents::sub_recipe_execution_tool::lib::Task;\n use crate::recipe::{Recipe, RecipeParameter, RecipeParameterRequirement, SubRecipe};\n \n+use super::param_utils::prepare_command_params;\n+\n pub const SUB_RECIPE_TASK_TOOL_NAME_PREFIX: &str = \"subrecipe__create_task\";\n+const EXECUTION_MODE_PARALLEL: &str = \"parallel\";\n+const EXECUTION_MODE_SEQUENTIAL: &str = \"sequential\";",
        "comment_created_at": "2025-07-16T01:25:29+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "good catch, i thought I have refactored, but missed out",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2212365200",
    "pr_number": 3474,
    "pr_file": "crates/goose/src/agents/retry.rs",
    "created_at": "2025-07-17T06:10:22+00:00",
    "commented_code": "+use anyhow::Result;\n+use std::process::Stdio;\n+use std::time::Duration;\n+use tokio::process::Command;\n+use tracing::{debug, info, warn};\n+\n+use crate::agents::types::{\n+    RetryConfig, SuccessCheck, SuccessCheckType, DEFAULT_CLEANUP_TIMEOUT_SECONDS,\n+    DEFAULT_RETRY_TIMEOUT_SECONDS,\n+};\n+use crate::config::Config;\n+\n+/// Environment variable for configuring retry timeout globally\n+const GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS\";\n+\n+/// Environment variable for configuring cleanup timeout globally\n+const GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS\";",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2212365200",
        "repo_full_name": "block/goose",
        "pr_number": 3474,
        "pr_file": "crates/goose/src/agents/retry.rs",
        "discussion_id": "2212365200",
        "commented_code": "@@ -0,0 +1,323 @@\n+use anyhow::Result;\n+use std::process::Stdio;\n+use std::time::Duration;\n+use tokio::process::Command;\n+use tracing::{debug, info, warn};\n+\n+use crate::agents::types::{\n+    RetryConfig, SuccessCheck, SuccessCheckType, DEFAULT_CLEANUP_TIMEOUT_SECONDS,\n+    DEFAULT_RETRY_TIMEOUT_SECONDS,\n+};\n+use crate::config::Config;\n+\n+/// Environment variable for configuring retry timeout globally\n+const GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS\";\n+\n+/// Environment variable for configuring cleanup timeout globally\n+const GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS\";",
        "comment_created_at": "2025-07-17T06:10:22+00:00",
        "comment_author": "jsibbison-square",
        "comment_body": "I think we should stick to the naming we use in the recipe of 'on_failure' rather than adding another concept called 'cleanup' which is a narrower meaning.",
        "pr_file_module": null
      },
      {
        "comment_id": "2215671240",
        "repo_full_name": "block/goose",
        "pr_number": 3474,
        "pr_file": "crates/goose/src/agents/retry.rs",
        "discussion_id": "2212365200",
        "commented_code": "@@ -0,0 +1,323 @@\n+use anyhow::Result;\n+use std::process::Stdio;\n+use std::time::Duration;\n+use tokio::process::Command;\n+use tracing::{debug, info, warn};\n+\n+use crate::agents::types::{\n+    RetryConfig, SuccessCheck, SuccessCheckType, DEFAULT_CLEANUP_TIMEOUT_SECONDS,\n+    DEFAULT_RETRY_TIMEOUT_SECONDS,\n+};\n+use crate::config::Config;\n+\n+/// Environment variable for configuring retry timeout globally\n+const GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS\";\n+\n+/// Environment variable for configuring cleanup timeout globally\n+const GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_CLEANUP_TIMEOUT_SECONDS\";",
        "comment_created_at": "2025-07-18T10:16:03+00:00",
        "comment_author": "cloud-on-prem",
        "comment_body": "yep; cleaned up the naming",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2181930254",
    "pr_number": 3190,
    "pr_file": "crates/goose/src/agents/sub_agent_execution_tool/sub_agent_execute_task_tool.rs",
    "created_at": "2025-07-03T06:05:12+00:00",
    "commented_code": "+use mcp_core::{tool::ToolAnnotations, Content, Tool, ToolError};\n+use serde_json::Value;\n+\n+use crate::agents::{sub_agent_execution_tool::lib::execute_tasks, tool_execution::ToolCallResult};\n+\n+pub const SUB_AGENT_EXECUTE_TASK_TOOL_NAME: &str = \"sub_recipe__execute_task\";",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2181930254",
        "repo_full_name": "block/goose",
        "pr_number": 3190,
        "pr_file": "crates/goose/src/agents/sub_agent_execution_tool/sub_agent_execute_task_tool.rs",
        "discussion_id": "2181930254",
        "commented_code": "@@ -0,0 +1,96 @@\n+use mcp_core::{tool::ToolAnnotations, Content, Tool, ToolError};\n+use serde_json::Value;\n+\n+use crate::agents::{sub_agent_execution_tool::lib::execute_tasks, tool_execution::ToolCallResult};\n+\n+pub const SUB_AGENT_EXECUTE_TASK_TOOL_NAME: &str = \"sub_recipe__execute_task\";",
        "comment_created_at": "2025-07-03T06:05:12+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "At the moment, only name with `sub_recipe` so that it does not conflict with the alpha feature.   Later on, sub agent should be executed with this tool. so it will be renamed to `sub_agent,,,`",
        "pr_file_module": null
      },
      {
        "comment_id": "2183962720",
        "repo_full_name": "block/goose",
        "pr_number": 3190,
        "pr_file": "crates/goose/src/agents/sub_agent_execution_tool/sub_agent_execute_task_tool.rs",
        "discussion_id": "2181930254",
        "commented_code": "@@ -0,0 +1,96 @@\n+use mcp_core::{tool::ToolAnnotations, Content, Tool, ToolError};\n+use serde_json::Value;\n+\n+use crate::agents::{sub_agent_execution_tool::lib::execute_tasks, tool_execution::ToolCallResult};\n+\n+pub const SUB_AGENT_EXECUTE_TASK_TOOL_NAME: &str = \"sub_recipe__execute_task\";",
        "comment_created_at": "2025-07-04T00:10:23+00:00",
        "comment_author": "wendytang",
        "comment_body": "could we rename `SUB_AGENT_EXECUTE_TASK_TOOL_NAME` to `SUB_RECIPE_EXECUTE_TASK_TOOL_NAME`?",
        "pr_file_module": null
      }
    ]
  }
]