[
  {
    "discussion_id": "2292381623",
    "pr_number": 4237,
    "pr_file": "crates/goose/src/security/mod.rs",
    "created_at": "2025-08-22T00:02:30+00:00",
    "commented_code": "+pub mod patterns;\n+pub mod scanner;\n+\n+#[cfg(test)]\n+mod integration_tests;\n+\n+use crate::conversation::message::Message;\n+use crate::permission::permission_judge::PermissionCheckResult;\n+use anyhow::Result;\n+use scanner::PromptInjectionScanner;\n+\n+/// Simple security manager for the POC\n+/// Focuses on tool call analysis with conversation context\n+pub struct SecurityManager {\n+    scanner: Option<PromptInjectionScanner>,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct SecurityResult {\n+    pub is_malicious: bool,\n+    pub confidence: f32,\n+    pub explanation: String,\n+    pub should_ask_user: bool,\n+    pub finding_id: String,\n+}\n+\n+impl SecurityManager {\n+    pub fn new() -> Self {\n+        println!(\"\ud83d\udd12 SecurityManager::new() called - checking if security should be enabled\");",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2292381623",
        "repo_full_name": "block/goose",
        "pr_number": 4237,
        "pr_file": "crates/goose/src/security/mod.rs",
        "discussion_id": "2292381623",
        "commented_code": "@@ -0,0 +1,275 @@\n+pub mod patterns;\n+pub mod scanner;\n+\n+#[cfg(test)]\n+mod integration_tests;\n+\n+use crate::conversation::message::Message;\n+use crate::permission::permission_judge::PermissionCheckResult;\n+use anyhow::Result;\n+use scanner::PromptInjectionScanner;\n+\n+/// Simple security manager for the POC\n+/// Focuses on tool call analysis with conversation context\n+pub struct SecurityManager {\n+    scanner: Option<PromptInjectionScanner>,\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct SecurityResult {\n+    pub is_malicious: bool,\n+    pub confidence: f32,\n+    pub explanation: String,\n+    pub should_ask_user: bool,\n+    pub finding_id: String,\n+}\n+\n+impl SecurityManager {\n+    pub fn new() -> Self {\n+        println!(\"\ud83d\udd12 SecurityManager::new() called - checking if security should be enabled\");",
        "comment_created_at": "2025-08-22T00:02:30+00:00",
        "comment_author": "DOsinga",
        "comment_body": "you should make a call on these prints - probably drop them and if not turn them into logs?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2260978579",
    "pr_number": 3888,
    "pr_file": "crates/goose/src/debug_logger.rs",
    "created_at": "2025-08-07T17:27:29+00:00",
    "commented_code": "+use std::fs::OpenOptions;\n+use std::io::Write;\n+\n+use crate::logging;\n+\n+/// Log a debug event to the goose-debug.log file\n+///\n+/// This function logs timestamped events to a debug log file in the appropriate\n+/// platform-specific logs directory.\n+///\n+/// # Arguments\n+///\n+/// * `event` - The event string to log\n+/// ```\n+pub fn log_debug_event(event: &str) {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2260978579",
        "repo_full_name": "block/goose",
        "pr_number": 3888,
        "pr_file": "crates/goose/src/debug_logger.rs",
        "discussion_id": "2260978579",
        "commented_code": "@@ -0,0 +1,86 @@\n+use std::fs::OpenOptions;\n+use std::io::Write;\n+\n+use crate::logging;\n+\n+/// Log a debug event to the goose-debug.log file\n+///\n+/// This function logs timestamped events to a debug log file in the appropriate\n+/// platform-specific logs directory.\n+///\n+/// # Arguments\n+///\n+/// * `event` - The event string to log\n+/// ```\n+pub fn log_debug_event(event: &str) {",
        "comment_created_at": "2025-08-07T17:27:29+00:00",
        "comment_author": "DOsinga",
        "comment_body": "why are we rolling our own log thing here and not just rely on tracing::debug!() for this? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2261884384",
        "repo_full_name": "block/goose",
        "pr_number": 3888,
        "pr_file": "crates/goose/src/debug_logger.rs",
        "discussion_id": "2260978579",
        "commented_code": "@@ -0,0 +1,86 @@\n+use std::fs::OpenOptions;\n+use std::io::Write;\n+\n+use crate::logging;\n+\n+/// Log a debug event to the goose-debug.log file\n+///\n+/// This function logs timestamped events to a debug log file in the appropriate\n+/// platform-specific logs directory.\n+///\n+/// # Arguments\n+///\n+/// * `event` - The event string to log\n+/// ```\n+pub fn log_debug_event(event: &str) {",
        "comment_created_at": "2025-08-08T04:03:38+00:00",
        "comment_author": "michaelneale",
        "comment_body": "mostly as I don't know how/when that works (but yeah should use it) - trace can be written (unbuffered?) to a file? (really want to avoid buffering in case anything is getting lost) so you can watch it in real time",
        "pr_file_module": null
      },
      {
        "comment_id": "2263241250",
        "repo_full_name": "block/goose",
        "pr_number": 3888,
        "pr_file": "crates/goose/src/debug_logger.rs",
        "discussion_id": "2260978579",
        "commented_code": "@@ -0,0 +1,86 @@\n+use std::fs::OpenOptions;\n+use std::io::Write;\n+\n+use crate::logging;\n+\n+/// Log a debug event to the goose-debug.log file\n+///\n+/// This function logs timestamped events to a debug log file in the appropriate\n+/// platform-specific logs directory.\n+///\n+/// # Arguments\n+///\n+/// * `event` - The event string to log\n+/// ```\n+pub fn log_debug_event(event: &str) {",
        "comment_created_at": "2025-08-08T15:09:44+00:00",
        "comment_author": "DOsinga",
        "comment_body": "tracing is the library meant for this as far as I know. writing a good logger is not trivial, so relying on something that exist and that we already use is probably the way to go\r\n\r\nwhere I think we should focus our attention is on tooling around it; we write json files to the current logs, can we have something that inspects them live? some light python tooling could be super useful",
        "pr_file_module": null
      }
    ]
  }
]