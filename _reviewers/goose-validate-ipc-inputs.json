[
  {
    "discussion_id": "2289705383",
    "pr_number": 4164,
    "pr_file": "ui/desktop/src/main.ts",
    "created_at": "2025-08-21T02:25:04+00:00",
    "commented_code": "console.log('[main] React ready - window is prepared for deep links');\n });\n \n+// Handle external URL opening\n+ipcMain.handle('open-external', async (_event, url: string) => {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2289705383",
        "repo_full_name": "block/goose",
        "pr_number": 4164,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2289705383",
        "commented_code": "@@ -1109,6 +1109,17 @@ ipcMain.on('react-ready', () => {\n   console.log('[main] React ready - window is prepared for deep links');\n });\n \n+// Handle external URL opening\n+ipcMain.handle('open-external', async (_event, url: string) => {",
        "comment_created_at": "2025-08-21T02:25:04+00:00",
        "comment_author": "michaelneale",
        "comment_body": "what functionality does this add that wasn't before - is it for cases where the type is links and it will open it in external browser? (if so - a hyperlink won't do that?)",
        "pr_file_module": null
      },
      {
        "comment_id": "2291475897",
        "repo_full_name": "block/goose",
        "pr_number": 4164,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2289705383",
        "commented_code": "@@ -1109,6 +1109,17 @@ ipcMain.on('react-ready', () => {\n   console.log('[main] React ready - window is prepared for deep links');\n });\n \n+// Handle external URL opening\n+ipcMain.handle('open-external', async (_event, url: string) => {",
        "comment_created_at": "2025-08-21T15:49:48+00:00",
        "comment_author": "aharvard",
        "comment_body": "Since MCP-UI hyperlinks live inside of an iframe, clicking on a typical `<a href=\"\" />` link will refresh the contents inside of the iframe. That might be perfect for some MCP-UIs but not others. \r\n\r\nAlso, I think that Electron brings in some form of protection that may prevent hyperlinks from performing as authored, to protect the app user. (I have a lack of knowledge in this area, I could be wrong) \r\n\r\nFor example, in a typical web browser that has an iframe on the page, the hyperlink author can add an attribute to force a navigation at the parent level. In our Electron app, these attributes do nothing and clicking on a link fails to do what a user might expect it to.  \r\n\r\nThe MCP-UI SDK gives us the [link message type](https://mcpui.dev/guide/embeddable-ui#link) for, I believe, better security hygiene. So adding `open-external` was my attempt at finding the safest execution route. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2255445478",
    "pr_number": 3807,
    "pr_file": "ui/desktop/src/main.ts",
    "created_at": "2025-08-05T22:10:46+00:00",
    "commented_code": "ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2255445478",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-05T22:10:46+00:00",
        "comment_author": "zanesq",
        "comment_body": "Since this is exposed as an IPC the path can be compromised to show any directory on the machine. Maybe we should add an allowlist (or blocklist) so only appropriate files are opened? This and anywhere else that we open directories or list files through an IPC.",
        "pr_file_module": null
      },
      {
        "comment_id": "2255561350",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-05T23:57:09+00:00",
        "comment_author": "michaelneale",
        "comment_body": "it is possible in electron to have ipc only available to the renderer so if so, that isn't an issue (checking)",
        "pr_file_module": null
      },
      {
        "comment_id": "2255564205",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-06T00:00:25+00:00",
        "comment_author": "michaelneale",
        "comment_body": "yep seems ok: Electron's `ipcMain` and `ipcRenderer` communicate through Chromium's internal IPC system\r\n\r\n```\r\n## Security Analysis of Electron IPC Setup\r\n\r\n### \u2705 **Secure Configuration Found:**\r\n\r\n1. **Context Isolation is Enabled** (`contextIsolation: true`)\r\n   - This is the most critical security feature that prevents the renderer process from accessing Node.js APIs or Electron internals directly\r\n   - The renderer can only access what's explicitly exposed through the context bridge\r\n\r\n2. **Node Integration is Disabled** (`nodeIntegration: false`)\r\n   - Prevents the renderer from having direct access to Node.js APIs\r\n   - This is a crucial security measure to prevent arbitrary code execution\r\n\r\n3. **Web Security is Enabled** (`webSecurity: true`)\r\n   - Enforces same-origin policy and other web security features\r\n   - Prevents loading of insecure content\r\n\r\n4. **Preload Script with Context Bridge**\r\n   - All IPC communication is channeled through a preload script (`preload.ts`)\r\n   - Uses `contextBridge.exposeInMainWorld()` to expose only specific, controlled APIs\r\n   - The exposed APIs are well-defined with type safety\r\n\r\n5. **Controlled API Surface**\r\n   - Only specific methods are exposed to the renderer through two APIs:\r\n     - `window.electron`: Contains all IPC methods for file operations, settings, etc.\r\n     - `window.appConfig`: Contains configuration data\r\n   - Each exposed method is explicitly defined and typed\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2255667243",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-06T01:40:39+00:00",
        "comment_author": "zanesq",
        "comment_body": "Good call, I'll add some tests to ensure this never changes down the road also \ud83d\udc4d ",
        "pr_file_module": null
      },
      {
        "comment_id": "2255710045",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-06T02:22:10+00:00",
        "comment_author": "michaelneale",
        "comment_body": "@zanesq oh yeah that would be stellar - as I am sure would be an easy mistake to make",
        "pr_file_module": null
      },
      {
        "comment_id": "2256420527",
        "repo_full_name": "block/goose",
        "pr_number": 3807,
        "pr_file": "ui/desktop/src/main.ts",
        "discussion_id": "2255445478",
        "commented_code": "@@ -2160,6 +2160,15 @@ app.whenReady().then(async () => {\n   ipcMain.on('get-app-version', (event) => {\n     event.returnValue = app.getVersion();\n   });\n+\n+  ipcMain.handle('open-directory-in-explorer', async (_event, path: string) => {",
        "comment_created_at": "2025-08-06T08:46:22+00:00",
        "comment_author": "DOsinga",
        "comment_body": "> Since this is exposed as an IPC the path can be compromised to show any directory on the machine\r\n\r\ncan you help me understand the line of attack here? even if an outside attacker would break into goose (at which point they have full control over the host machine anyway), if they would this trigger this end point, all it would do is start the finder in a particular directory. only the end user would be able to see that, no? not the attacker?\r\n\r\nI'd love to understand security considerations with the electron app better as aI see some checks that I don't quite understand.",
        "pr_file_module": null
      }
    ]
  }
]