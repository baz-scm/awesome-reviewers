[
  {
    "discussion_id": "2217716917",
    "pr_number": 3530,
    "pr_file": "ui/desktop/src/components/ParameterInputModal.tsx",
    "created_at": "2025-07-20T09:21:51+00:00",
    "commented_code": "useEffect(() => {\n     const initialValues: Record<string, string> = {};\n     parameters.forEach((param) => {\n-      if (param.default) {\n-        initialValues[param.key] = param.default;\n+      // Set default value for optional parameters if they have a default value\n+      if (param.requirement === 'optional' && param.default) {\n+        // Validate default value based on parameter type\n+        let defaultValue = param.default;",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2217716917",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/ParameterInputModal.tsx",
        "discussion_id": "2217716917",
        "commented_code": "@@ -21,8 +21,33 @@ const ParameterInputModal: React.FC<ParameterInputModalProps> = ({\n   useEffect(() => {\n     const initialValues: Record<string, string> = {};\n     parameters.forEach((param) => {\n-      if (param.default) {\n-        initialValues[param.key] = param.default;\n+      // Set default value for optional parameters if they have a default value\n+      if (param.requirement === 'optional' && param.default) {\n+        // Validate default value based on parameter type\n+        let defaultValue = param.default;",
        "comment_created_at": "2025-07-20T09:21:51+00:00",
        "comment_author": "DOsinga",
        "comment_body": "hmm, we set the defaultValue here and then check a bunch of things where if we like the values, we set defaultValue to mostly the same value. \r\n\r\nin general we should probably set the validity of the recipe when we read it, not at this point. but here I think we can just leave out everything and just go\r\n```\r\nif (param.requirement === 'optional' && param.default) {\r\n    initialValues[param.key] = param.default\r\n}\r\n```\r\npossibly lowercasing it if param.input_type == 'boolean'",
        "pr_file_module": null
      },
      {
        "comment_id": "2220294528",
        "repo_full_name": "block/goose",
        "pr_number": 3530,
        "pr_file": "ui/desktop/src/components/ParameterInputModal.tsx",
        "discussion_id": "2217716917",
        "commented_code": "@@ -21,8 +21,33 @@ const ParameterInputModal: React.FC<ParameterInputModalProps> = ({\n   useEffect(() => {\n     const initialValues: Record<string, string> = {};\n     parameters.forEach((param) => {\n-      if (param.default) {\n-        initialValues[param.key] = param.default;\n+      // Set default value for optional parameters if they have a default value\n+      if (param.requirement === 'optional' && param.default) {\n+        // Validate default value based on parameter type\n+        let defaultValue = param.default;",
        "comment_created_at": "2025-07-21T20:48:51+00:00",
        "comment_author": "zanesq",
        "comment_body": "Good catch, fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2143127963",
    "pr_number": 2852,
    "pr_file": "ui/desktop/src/components/settings/app/UpdateSection.tsx",
    "created_at": "2025-06-12T15:58:32+00:00",
    "commented_code": "+import { useState, useEffect } from 'react';\n+import { Button } from '../../ui/button';\n+import { Loader2, Download, CheckCircle, AlertCircle } from 'lucide-react';\n+\n+type UpdateStatus =\n+  | 'idle'\n+  | 'checking'\n+  | 'downloading'\n+  | 'installing'\n+  | 'success'\n+  | 'error'\n+  | 'ready';\n+\n+interface UpdateInfo {\n+  currentVersion: string;\n+  latestVersion?: string;\n+  isUpdateAvailable?: boolean;\n+  error?: string;\n+}\n+\n+interface UpdateEventData {\n+  version?: string;\n+  percent?: number;\n+}\n+\n+export default function UpdateSection() {\n+  const [updateStatus, setUpdateStatus] = useState<UpdateStatus>('idle');\n+  const [updateInfo, setUpdateInfo] = useState<UpdateInfo>({\n+    currentVersion: '',\n+  });\n+  const [progress, setProgress] = useState<number>(0);\n+\n+  useEffect(() => {\n+    // Get current version on mount\n+    const currentVersion = window.electron.getVersion();\n+    setUpdateInfo((prev) => ({ ...prev, currentVersion }));",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2143127963",
        "repo_full_name": "block/goose",
        "pr_number": 2852,
        "pr_file": "ui/desktop/src/components/settings/app/UpdateSection.tsx",
        "discussion_id": "2143127963",
        "commented_code": "@@ -0,0 +1,270 @@\n+import { useState, useEffect } from 'react';\n+import { Button } from '../../ui/button';\n+import { Loader2, Download, CheckCircle, AlertCircle } from 'lucide-react';\n+\n+type UpdateStatus =\n+  | 'idle'\n+  | 'checking'\n+  | 'downloading'\n+  | 'installing'\n+  | 'success'\n+  | 'error'\n+  | 'ready';\n+\n+interface UpdateInfo {\n+  currentVersion: string;\n+  latestVersion?: string;\n+  isUpdateAvailable?: boolean;\n+  error?: string;\n+}\n+\n+interface UpdateEventData {\n+  version?: string;\n+  percent?: number;\n+}\n+\n+export default function UpdateSection() {\n+  const [updateStatus, setUpdateStatus] = useState<UpdateStatus>('idle');\n+  const [updateInfo, setUpdateInfo] = useState<UpdateInfo>({\n+    currentVersion: '',\n+  });\n+  const [progress, setProgress] = useState<number>(0);\n+\n+  useEffect(() => {\n+    // Get current version on mount\n+    const currentVersion = window.electron.getVersion();\n+    setUpdateInfo((prev) => ({ ...prev, currentVersion }));",
        "comment_created_at": "2025-06-12T15:58:32+00:00",
        "comment_author": "pkane-block",
        "comment_body": "We may want to guarantee `window.electron` is not undefined in this `useEffect`",
        "pr_file_module": null
      }
    ]
  }
]