[
  {
    "discussion_id": "2252922239",
    "pr_number": 3844,
    "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
    "created_at": "2025-08-05T01:52:13+00:00",
    "commented_code": "### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in two ways:",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2252922239",
        "repo_full_name": "block/goose",
        "pr_number": 3844,
        "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
        "discussion_id": "2252922239",
        "commented_code": "@@ -26,15 +26,15 @@ Sub-recipe sessions run in isolation - they don't share conversation history, me\n \n ### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in two ways:",
        "comment_created_at": "2025-08-05T01:52:13+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "for sub-recipes, they can run by itself.  \r\nSo if they have their own params and used as sub-recipe, we can pass in the main recipe via\r\n\r\n```\r\nvalues:\r\n      content:  content_value\r\n```\r\n\r\nThere is another usage, the parameter value can be passed via session context so that the user does not have to specify. \r\n\r\nI am sorry if I have confused you.  I'll create some example recipe and share with you. \r\n      \r\n   \r\n      \r\n      ",
        "pr_file_module": null
      },
      {
        "comment_id": "2257831688",
        "repo_full_name": "block/goose",
        "pr_number": 3844,
        "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
        "discussion_id": "2252922239",
        "commented_code": "@@ -26,15 +26,15 @@ Sub-recipe sessions run in isolation - they don't share conversation history, me\n \n ### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in two ways:",
        "comment_created_at": "2025-08-06T17:26:31+00:00",
        "comment_author": "dianed-square",
        "comment_body": "\ud83d\ude4f Replaced \"automatic inheritance\" with \"context-based parameters\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2255459427",
    "pr_number": 3844,
    "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
    "created_at": "2025-08-05T22:22:25+00:00",
    "commented_code": "### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in three ways:\n \n 1. **Pre-set values**: Fixed parameter values defined in the `values` field are automatically provided and cannot be overridden at runtime\n-2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime.\n+2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2255459427",
        "repo_full_name": "block/goose",
        "pr_number": 3844,
        "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
        "discussion_id": "2255459427",
        "commented_code": "@@ -26,15 +26,16 @@ Sub-recipe sessions run in isolation - they don't share conversation history, me\n \n ### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in three ways:\n \n 1. **Pre-set values**: Fixed parameter values defined in the `values` field are automatically provided and cannot be overridden at runtime\n-2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime.\n+2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime",
        "comment_created_at": "2025-08-05T22:22:25+00:00",
        "comment_author": "lifeizhou-ap",
        "comment_body": "Hi @dianed-square,\r\n\r\n> Sub-recipes automatically have access to all parameters passed to the main recipe at runtime\r\n> Comment\r\n\r\nSub-recipes will not have access to all parameters passed to the main recipe automatically.  It still requires to pass along via Pre-set values\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2255537727",
        "repo_full_name": "block/goose",
        "pr_number": 3844,
        "pr_file": "documentation/docs/guides/recipes/sub-recipes.md",
        "discussion_id": "2255459427",
        "commented_code": "@@ -26,15 +26,16 @@ Sub-recipe sessions run in isolation - they don't share conversation history, me\n \n ### Parameter Handling\n \n-Sub-recipes receive parameters in two ways:\n+Parameters received by sub-recipes can be used in prompts and instructions using `{{ parameter_name }}` syntax. Sub-recipes receive parameters in three ways:\n \n 1. **Pre-set values**: Fixed parameter values defined in the `values` field are automatically provided and cannot be overridden at runtime\n-2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime.\n+2. **Automatic parameter inheritance**: Sub-recipes automatically have access to all parameters passed to the main recipe at runtime",
        "comment_created_at": "2025-08-05T23:32:28+00:00",
        "comment_author": "dianed-square",
        "comment_body": "Thanks @lifeizhou-ap ! I removed mention of \"automatic inheritance\" (also simplified the context-based parameter example) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2204924287",
    "pr_number": 3402,
    "pr_file": "documentation/docs/guides/environment-variables.md",
    "created_at": "2025-07-14T13:16:39+00:00",
    "commented_code": "| `LANGFUSE_INIT_PROJECT_PUBLIC_KEY` | Alternative public key for Langfuse | String | None |\n | `LANGFUSE_INIT_PROJECT_SECRET_KEY` | Alternative secret key for Langfuse | String | None |\n \n+## Experimental Features\n+\n+These variables enable experimental features that are in active development. These may change or be removed in future releases. Use with caution in production environments.\n+\n+| Variable | Purpose | Values | Default |\n+|----------|---------|---------|---------|\n+| `ALPHA_FEATURES` | Enables experimental alpha features like [subagents](/docs/experimental/subagents) | \"true\", \"1\" (case insensitive) to enable | false |\n+\n+**Examples**\n+\n+```bash\n+# Enable alpha features\n+export ALPHA_FEATURES=true\n+\n+# Or enable for a single session\n+ALPHA_FEATURES=true goose session start",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2204924287",
        "repo_full_name": "block/goose",
        "pr_number": 3402,
        "pr_file": "documentation/docs/guides/environment-variables.md",
        "discussion_id": "2204924287",
        "commented_code": "@@ -269,6 +269,23 @@ These variables configure the [Langfuse integration for observability](/docs/tut\n | `LANGFUSE_INIT_PROJECT_PUBLIC_KEY` | Alternative public key for Langfuse | String | None |\n | `LANGFUSE_INIT_PROJECT_SECRET_KEY` | Alternative secret key for Langfuse | String | None |\n \n+## Experimental Features\n+\n+These variables enable experimental features that are in active development. These may change or be removed in future releases. Use with caution in production environments.\n+\n+| Variable | Purpose | Values | Default |\n+|----------|---------|---------|---------|\n+| `ALPHA_FEATURES` | Enables experimental alpha features like [subagents](/docs/experimental/subagents) | \"true\", \"1\" (case insensitive) to enable | false |\n+\n+**Examples**\n+\n+```bash\n+# Enable alpha features\n+export ALPHA_FEATURES=true\n+\n+# Or enable for a single session\n+ALPHA_FEATURES=true goose session start",
        "comment_created_at": "2025-07-14T13:16:39+00:00",
        "comment_author": "angiejones",
        "comment_body": "`start` is not recognized\n\n```\nerror: unrecognized subcommand 'start'\n```\n\n\n```suggestion\nALPHA_FEATURES=true goose session\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2204938232",
        "repo_full_name": "block/goose",
        "pr_number": 3402,
        "pr_file": "documentation/docs/guides/environment-variables.md",
        "discussion_id": "2204924287",
        "commented_code": "@@ -269,6 +269,23 @@ These variables configure the [Langfuse integration for observability](/docs/tut\n | `LANGFUSE_INIT_PROJECT_PUBLIC_KEY` | Alternative public key for Langfuse | String | None |\n | `LANGFUSE_INIT_PROJECT_SECRET_KEY` | Alternative secret key for Langfuse | String | None |\n \n+## Experimental Features\n+\n+These variables enable experimental features that are in active development. These may change or be removed in future releases. Use with caution in production environments.\n+\n+| Variable | Purpose | Values | Default |\n+|----------|---------|---------|---------|\n+| `ALPHA_FEATURES` | Enables experimental alpha features like [subagents](/docs/experimental/subagents) | \"true\", \"1\" (case insensitive) to enable | false |\n+\n+**Examples**\n+\n+```bash\n+# Enable alpha features\n+export ALPHA_FEATURES=true\n+\n+# Or enable for a single session\n+ALPHA_FEATURES=true goose session start",
        "comment_created_at": "2025-07-14T13:23:15+00:00",
        "comment_author": "blackgirlbytes",
        "comment_body": "thanks for catching. I always accidentally prompt goose to do `goose session start` \ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2153315203",
    "pr_number": 2962,
    "pr_file": "documentation/docs/guides/isolated-development-environments.md",
    "created_at": "2025-06-17T23:16:24+00:00",
    "commented_code": "+---\n+title: Isolated Development Environments\n+sidebar_position: 25\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide shows you how to set up isolated development environments using the **[Container Use MCP](https://github.com/dagger/container-use)** with Goose. With this setup, your development work will be isolated to both git branches and containers, allowing you to experiment freely without affecting your main system state.\n+Note that the container-use MCP is very new and emerging, but offers powerful ways to do isolated development which are very agent friendly (build on tools like Docker, copy on write filesystems and more)\n+\n+## Overview\n+\n+The **[Container Use MCP](https://github.com/dagger/container-use)** server provides containerized development environments that integrate seamlessly with Goose. This allows you to:\n+\n+- Work on changes isolated to git branches\n+- Run code in containers without affecting your local machine\n+- Easily reset and start fresh when needed\n+- Maintain clean separation between different projects and experiments\n+- Work on things in parallel\n+\n+## Prerequisites\n+\n+- Docker installed and running on your system\n+- Git installed and configured\n+- Goose installed and configured\n+\n+## Installation\n+\n+### Step 1: Install Container Use\n+\n+<Tabs groupId=\"platform\">\n+  <TabItem value=\"macos\" label=\"macOS (Homebrew - Recommended)\" default>\n+\n+```bash\n+brew install dagger/tap/container-use\n+```\n+\n+  </TabItem>\n+  <TabItem value=\"universal\" label=\"All Platforms (Shell Script)\">\n+\n+```bash\n+curl -fsSL https://raw.githubusercontent.com/dagger/container-use/main/install.sh | bash\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Adding to Goose\n+\n+### Method 1: Quick Setup Link\n+\n+Click this link to automatically add the extension to Goose:\n+\n+**[Add Container-Use to Goose](goose://extension?cmd=cu&arg=stdio&id=container-use&name=container%20use&description=use%20containers%20with%20dagger%20and%20git%20for%20isolated%20environments)**\n+\n+### Method 2: Manual Configuration\n+\n+<Tabs groupId=\"interface\">\n+  <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+\n+  1. Click `...` in the top right corner of the Goose Desktop.\n+  2. Select `Advanced Settings` from the menu.\n+  3. Under `Extensions`, click `Add custom extension`.\n+  4. Fill in the details:\n+     - **Type**: `Standard IO`\n+     - **ID**: `container-use`\n+     - **Name**: `Container Use`\n+     - **Description**: `Use containers with dagger and git for isolated environments`\n+     - **Command**: `cu`\n+     - **Arguments**: `stdio`\n+  5. Click `Add` button\n+\n+  </TabItem>\n+  <TabItem value=\"cli\" label=\"Goose CLI\">\n+\n+  1. Run the configuration command:\n+  ```bash\n+  goose configure\n+  ```\n+\n+  2. Select `Add Extension` from the menu.\n+\n+  3. Choose `Command-line Extension`.\n+\n+  4. Follow the prompts:\n+     - **Extension name**: `Container Use`\n+     - **Command**: `cu stdio`\n+     - **Timeout**: `300` (or your preferred timeout)\n+     - **Environment variables**: None needed\n+\n+  </TabItem>\n+  <TabItem value=\"config\" label=\"Config File\">\n+\n+Add the following configuration to your `~/.config/goose/config.yaml` file:\n+\n+```yaml\n+extensions:\n+  container-use:\n+    name: container-use\n+    type: stdio\n+    enabled: true\n+    cmd: cu\n+    args:\n+    - stdio\n+    envs: {}\n+    timeout: 300\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Usage\n+\n+Once the extension is enabled in Goose, you can:\n+\n+### Starting Isolated Development\n+\n+Simply mention in your conversation with Goose that you want to work in an isolated environment:\n+\n+```\n+\"I want to experiment with adding a new feature, but I want to do it in an isolated environment so I don't affect my main codebase.\"\n+```\n+\n+Goose will automatically:\n+1. Create a new git branch for your work\n+2. Set up a containerized environment\n+3. Ensure all changes are isolated from your host system\n+\n+### Working with Experiments\n+\n+```\n+\"Let me try a completely different approach to this algorithm. Can you set up an isolated environment where I can experiment?\"\n+```\n+\n+### Learning New Technologies\n+\n+```\n+\"I want to try out this new framework, but I don't want to install all its dependencies on my main system.\"\n+```\n+\n+## Benefits\n+\n+- **Safety**: Experiment without fear of breaking your main development environment\n+- **Reproducibility**: Consistent environments across different machines and team members\n+- **Isolation**: Multiple projects can run simultaneously without conflicts\n+- **Easy cleanup**: Remove containers and branches when done\n+- **Version control**: All changes are tracked in isolated git branches\n+- **Rollback capability**: Easily discard failed experiments\n+\n+## Common Workflows\n+\n+### Feature Development\n+\n+1. Start a conversation with Goose about a new feature\n+2. Request isolated development environment\n+3. Goose creates branch and container\n+4. Develop and test the feature\n+5. If successful, merge the branch; if not, discard it\n+\n+### Dependency Exploration\n+\n+1. Ask Goose to explore a new library or tool\n+2. Work in isolated container with the dependency\n+3. Test compatibility and functionality\n+4. Decide whether to integrate into main project\n+\n+### Refactoring\n+\n+1. Request isolated environment for major refactoring\n+2. Make changes in safety of container and branch\n+3. Test thoroughly before merging\n+4. Easy rollback if issues arise\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+**Docker not running:**\n+- Ensure Docker Desktop is installed and running\n+- Check Docker daemon status: `docker info`\n+\n+**Permission issues:**\n+- Ensure your user has permission to run Docker commands\n+- On Linux, add user to docker group: `sudo usermod -aG docker $USER`\n+\n+**Extension not working:**\n+- Verify Container Use is installed: `cu --version`",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2153315203",
        "repo_full_name": "block/goose",
        "pr_number": 2962,
        "pr_file": "documentation/docs/guides/isolated-development-environments.md",
        "discussion_id": "2153315203",
        "commented_code": "@@ -0,0 +1,223 @@\n+---\n+title: Isolated Development Environments\n+sidebar_position: 25\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide shows you how to set up isolated development environments using the **[Container Use MCP](https://github.com/dagger/container-use)** with Goose. With this setup, your development work will be isolated to both git branches and containers, allowing you to experiment freely without affecting your main system state.\n+Note that the container-use MCP is very new and emerging, but offers powerful ways to do isolated development which are very agent friendly (build on tools like Docker, copy on write filesystems and more)\n+\n+## Overview\n+\n+The **[Container Use MCP](https://github.com/dagger/container-use)** server provides containerized development environments that integrate seamlessly with Goose. This allows you to:\n+\n+- Work on changes isolated to git branches\n+- Run code in containers without affecting your local machine\n+- Easily reset and start fresh when needed\n+- Maintain clean separation between different projects and experiments\n+- Work on things in parallel\n+\n+## Prerequisites\n+\n+- Docker installed and running on your system\n+- Git installed and configured\n+- Goose installed and configured\n+\n+## Installation\n+\n+### Step 1: Install Container Use\n+\n+<Tabs groupId=\"platform\">\n+  <TabItem value=\"macos\" label=\"macOS (Homebrew - Recommended)\" default>\n+\n+```bash\n+brew install dagger/tap/container-use\n+```\n+\n+  </TabItem>\n+  <TabItem value=\"universal\" label=\"All Platforms (Shell Script)\">\n+\n+```bash\n+curl -fsSL https://raw.githubusercontent.com/dagger/container-use/main/install.sh | bash\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Adding to Goose\n+\n+### Method 1: Quick Setup Link\n+\n+Click this link to automatically add the extension to Goose:\n+\n+**[Add Container-Use to Goose](goose://extension?cmd=cu&arg=stdio&id=container-use&name=container%20use&description=use%20containers%20with%20dagger%20and%20git%20for%20isolated%20environments)**\n+\n+### Method 2: Manual Configuration\n+\n+<Tabs groupId=\"interface\">\n+  <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+\n+  1. Click `...` in the top right corner of the Goose Desktop.\n+  2. Select `Advanced Settings` from the menu.\n+  3. Under `Extensions`, click `Add custom extension`.\n+  4. Fill in the details:\n+     - **Type**: `Standard IO`\n+     - **ID**: `container-use`\n+     - **Name**: `Container Use`\n+     - **Description**: `Use containers with dagger and git for isolated environments`\n+     - **Command**: `cu`\n+     - **Arguments**: `stdio`\n+  5. Click `Add` button\n+\n+  </TabItem>\n+  <TabItem value=\"cli\" label=\"Goose CLI\">\n+\n+  1. Run the configuration command:\n+  ```bash\n+  goose configure\n+  ```\n+\n+  2. Select `Add Extension` from the menu.\n+\n+  3. Choose `Command-line Extension`.\n+\n+  4. Follow the prompts:\n+     - **Extension name**: `Container Use`\n+     - **Command**: `cu stdio`\n+     - **Timeout**: `300` (or your preferred timeout)\n+     - **Environment variables**: None needed\n+\n+  </TabItem>\n+  <TabItem value=\"config\" label=\"Config File\">\n+\n+Add the following configuration to your `~/.config/goose/config.yaml` file:\n+\n+```yaml\n+extensions:\n+  container-use:\n+    name: container-use\n+    type: stdio\n+    enabled: true\n+    cmd: cu\n+    args:\n+    - stdio\n+    envs: {}\n+    timeout: 300\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Usage\n+\n+Once the extension is enabled in Goose, you can:\n+\n+### Starting Isolated Development\n+\n+Simply mention in your conversation with Goose that you want to work in an isolated environment:\n+\n+```\n+\"I want to experiment with adding a new feature, but I want to do it in an isolated environment so I don't affect my main codebase.\"\n+```\n+\n+Goose will automatically:\n+1. Create a new git branch for your work\n+2. Set up a containerized environment\n+3. Ensure all changes are isolated from your host system\n+\n+### Working with Experiments\n+\n+```\n+\"Let me try a completely different approach to this algorithm. Can you set up an isolated environment where I can experiment?\"\n+```\n+\n+### Learning New Technologies\n+\n+```\n+\"I want to try out this new framework, but I don't want to install all its dependencies on my main system.\"\n+```\n+\n+## Benefits\n+\n+- **Safety**: Experiment without fear of breaking your main development environment\n+- **Reproducibility**: Consistent environments across different machines and team members\n+- **Isolation**: Multiple projects can run simultaneously without conflicts\n+- **Easy cleanup**: Remove containers and branches when done\n+- **Version control**: All changes are tracked in isolated git branches\n+- **Rollback capability**: Easily discard failed experiments\n+\n+## Common Workflows\n+\n+### Feature Development\n+\n+1. Start a conversation with Goose about a new feature\n+2. Request isolated development environment\n+3. Goose creates branch and container\n+4. Develop and test the feature\n+5. If successful, merge the branch; if not, discard it\n+\n+### Dependency Exploration\n+\n+1. Ask Goose to explore a new library or tool\n+2. Work in isolated container with the dependency\n+3. Test compatibility and functionality\n+4. Decide whether to integrate into main project\n+\n+### Refactoring\n+\n+1. Request isolated environment for major refactoring\n+2. Make changes in safety of container and branch\n+3. Test thoroughly before merging\n+4. Easy rollback if issues arise\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+**Docker not running:**\n+- Ensure Docker Desktop is installed and running\n+- Check Docker daemon status: `docker info`\n+\n+**Permission issues:**\n+- Ensure your user has permission to run Docker commands\n+- On Linux, add user to docker group: `sudo usermod -aG docker $USER`\n+\n+**Extension not working:**\n+- Verify Container Use is installed: `cu --version`",
        "comment_created_at": "2025-06-17T23:16:24+00:00",
        "comment_author": "cwlbraa",
        "comment_body": "```suggestion\r\n- Verify Container Use is installed: `cu version`\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2153316826",
        "repo_full_name": "block/goose",
        "pr_number": 2962,
        "pr_file": "documentation/docs/guides/isolated-development-environments.md",
        "discussion_id": "2153315203",
        "commented_code": "@@ -0,0 +1,223 @@\n+---\n+title: Isolated Development Environments\n+sidebar_position: 25\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide shows you how to set up isolated development environments using the **[Container Use MCP](https://github.com/dagger/container-use)** with Goose. With this setup, your development work will be isolated to both git branches and containers, allowing you to experiment freely without affecting your main system state.\n+Note that the container-use MCP is very new and emerging, but offers powerful ways to do isolated development which are very agent friendly (build on tools like Docker, copy on write filesystems and more)\n+\n+## Overview\n+\n+The **[Container Use MCP](https://github.com/dagger/container-use)** server provides containerized development environments that integrate seamlessly with Goose. This allows you to:\n+\n+- Work on changes isolated to git branches\n+- Run code in containers without affecting your local machine\n+- Easily reset and start fresh when needed\n+- Maintain clean separation between different projects and experiments\n+- Work on things in parallel\n+\n+## Prerequisites\n+\n+- Docker installed and running on your system\n+- Git installed and configured\n+- Goose installed and configured\n+\n+## Installation\n+\n+### Step 1: Install Container Use\n+\n+<Tabs groupId=\"platform\">\n+  <TabItem value=\"macos\" label=\"macOS (Homebrew - Recommended)\" default>\n+\n+```bash\n+brew install dagger/tap/container-use\n+```\n+\n+  </TabItem>\n+  <TabItem value=\"universal\" label=\"All Platforms (Shell Script)\">\n+\n+```bash\n+curl -fsSL https://raw.githubusercontent.com/dagger/container-use/main/install.sh | bash\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Adding to Goose\n+\n+### Method 1: Quick Setup Link\n+\n+Click this link to automatically add the extension to Goose:\n+\n+**[Add Container-Use to Goose](goose://extension?cmd=cu&arg=stdio&id=container-use&name=container%20use&description=use%20containers%20with%20dagger%20and%20git%20for%20isolated%20environments)**\n+\n+### Method 2: Manual Configuration\n+\n+<Tabs groupId=\"interface\">\n+  <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+\n+  1. Click `...` in the top right corner of the Goose Desktop.\n+  2. Select `Advanced Settings` from the menu.\n+  3. Under `Extensions`, click `Add custom extension`.\n+  4. Fill in the details:\n+     - **Type**: `Standard IO`\n+     - **ID**: `container-use`\n+     - **Name**: `Container Use`\n+     - **Description**: `Use containers with dagger and git for isolated environments`\n+     - **Command**: `cu`\n+     - **Arguments**: `stdio`\n+  5. Click `Add` button\n+\n+  </TabItem>\n+  <TabItem value=\"cli\" label=\"Goose CLI\">\n+\n+  1. Run the configuration command:\n+  ```bash\n+  goose configure\n+  ```\n+\n+  2. Select `Add Extension` from the menu.\n+\n+  3. Choose `Command-line Extension`.\n+\n+  4. Follow the prompts:\n+     - **Extension name**: `Container Use`\n+     - **Command**: `cu stdio`\n+     - **Timeout**: `300` (or your preferred timeout)\n+     - **Environment variables**: None needed\n+\n+  </TabItem>\n+  <TabItem value=\"config\" label=\"Config File\">\n+\n+Add the following configuration to your `~/.config/goose/config.yaml` file:\n+\n+```yaml\n+extensions:\n+  container-use:\n+    name: container-use\n+    type: stdio\n+    enabled: true\n+    cmd: cu\n+    args:\n+    - stdio\n+    envs: {}\n+    timeout: 300\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Usage\n+\n+Once the extension is enabled in Goose, you can:\n+\n+### Starting Isolated Development\n+\n+Simply mention in your conversation with Goose that you want to work in an isolated environment:\n+\n+```\n+\"I want to experiment with adding a new feature, but I want to do it in an isolated environment so I don't affect my main codebase.\"\n+```\n+\n+Goose will automatically:\n+1. Create a new git branch for your work\n+2. Set up a containerized environment\n+3. Ensure all changes are isolated from your host system\n+\n+### Working with Experiments\n+\n+```\n+\"Let me try a completely different approach to this algorithm. Can you set up an isolated environment where I can experiment?\"\n+```\n+\n+### Learning New Technologies\n+\n+```\n+\"I want to try out this new framework, but I don't want to install all its dependencies on my main system.\"\n+```\n+\n+## Benefits\n+\n+- **Safety**: Experiment without fear of breaking your main development environment\n+- **Reproducibility**: Consistent environments across different machines and team members\n+- **Isolation**: Multiple projects can run simultaneously without conflicts\n+- **Easy cleanup**: Remove containers and branches when done\n+- **Version control**: All changes are tracked in isolated git branches\n+- **Rollback capability**: Easily discard failed experiments\n+\n+## Common Workflows\n+\n+### Feature Development\n+\n+1. Start a conversation with Goose about a new feature\n+2. Request isolated development environment\n+3. Goose creates branch and container\n+4. Develop and test the feature\n+5. If successful, merge the branch; if not, discard it\n+\n+### Dependency Exploration\n+\n+1. Ask Goose to explore a new library or tool\n+2. Work in isolated container with the dependency\n+3. Test compatibility and functionality\n+4. Decide whether to integrate into main project\n+\n+### Refactoring\n+\n+1. Request isolated environment for major refactoring\n+2. Make changes in safety of container and branch\n+3. Test thoroughly before merging\n+4. Easy rollback if issues arise\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+**Docker not running:**\n+- Ensure Docker Desktop is installed and running\n+- Check Docker daemon status: `docker info`\n+\n+**Permission issues:**\n+- Ensure your user has permission to run Docker commands\n+- On Linux, add user to docker group: `sudo usermod -aG docker $USER`\n+\n+**Extension not working:**\n+- Verify Container Use is installed: `cu --version`",
        "comment_created_at": "2025-06-17T23:18:41+00:00",
        "comment_author": "cwlbraa",
        "comment_body": "another common failure mode is that on MacOS, Taylor UCP lives at `/usr/bin/cu`, and if you have that cached after installing, it'll fail with `cu: version: System not found`. `hash -r` will clear the command cache for that shell, or you can restart goose. if the error persists, your PATH is setup in such a way that `/usr/bin` is always before your intended install location.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2153326817",
    "pr_number": 2962,
    "pr_file": "documentation/docs/guides/isolated-development-environments.md",
    "created_at": "2025-06-17T23:27:53+00:00",
    "commented_code": "+---\n+title: Isolated Development Environments\n+sidebar_position: 25\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide shows you how to set up isolated development environments using the **[Container Use MCP](https://github.com/dagger/container-use)** with Goose. With this setup, your development work will be isolated to both git branches and containers, allowing you to experiment freely without affecting your main system state.\n+Note that the container-use MCP is very new and emerging, but offers powerful ways to do isolated development which are very agent friendly (build on tools like Docker, copy on write filesystems and more)\n+\n+## Overview\n+\n+The **[Container Use MCP](https://github.com/dagger/container-use)** server provides containerized development environments that integrate seamlessly with Goose. This allows you to:\n+\n+- Work on changes isolated to git branches\n+- Run code in containers without affecting your local machine\n+- Easily reset and start fresh when needed\n+- Maintain clean separation between different projects and experiments\n+- Work on things in parallel\n+\n+## Prerequisites\n+\n+- Docker installed and running on your system\n+- Git installed and configured\n+- Goose installed and configured\n+\n+## Installation\n+\n+### Step 1: Install Container Use\n+\n+<Tabs groupId=\"platform\">\n+  <TabItem value=\"macos\" label=\"macOS (Homebrew - Recommended)\" default>\n+\n+```bash\n+brew install dagger/tap/container-use\n+```\n+\n+  </TabItem>\n+  <TabItem value=\"universal\" label=\"All Platforms (Shell Script)\">\n+\n+```bash\n+curl -fsSL https://raw.githubusercontent.com/dagger/container-use/main/install.sh | bash\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Adding to Goose\n+\n+### Method 1: Quick Setup Link\n+\n+Click this link to automatically add the extension to Goose:\n+\n+**[Add Container-Use to Goose](goose://extension?cmd=cu&arg=stdio&id=container-use&name=container%20use&description=use%20containers%20with%20dagger%20and%20git%20for%20isolated%20environments)**\n+\n+### Method 2: Manual Configuration\n+\n+<Tabs groupId=\"interface\">\n+  <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+\n+  1. Click `...` in the top right corner of the Goose Desktop.\n+  2. Select `Advanced Settings` from the menu.\n+  3. Under `Extensions`, click `Add custom extension`.\n+  4. Fill in the details:\n+     - **Type**: `Standard IO`\n+     - **ID**: `container-use`\n+     - **Name**: `Container Use`\n+     - **Description**: `Use containers with dagger and git for isolated environments`\n+     - **Command**: `cu`\n+     - **Arguments**: `stdio`\n+  5. Click `Add` button\n+\n+  </TabItem>\n+  <TabItem value=\"cli\" label=\"Goose CLI\">\n+\n+  1. Run the configuration command:\n+  ```bash\n+  goose configure\n+  ```\n+\n+  2. Select `Add Extension` from the menu.\n+\n+  3. Choose `Command-line Extension`.\n+\n+  4. Follow the prompts:\n+     - **Extension name**: `Container Use`\n+     - **Command**: `cu stdio`\n+     - **Timeout**: `300` (or your preferred timeout)\n+     - **Environment variables**: None needed\n+\n+  </TabItem>\n+  <TabItem value=\"config\" label=\"Config File\">\n+\n+Add the following configuration to your `~/.config/goose/config.yaml` file:\n+\n+```yaml\n+extensions:\n+  container-use:\n+    name: container-use\n+    type: stdio\n+    enabled: true\n+    cmd: cu\n+    args:\n+    - stdio\n+    envs: {}\n+    timeout: 300\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Usage\n+\n+Once the extension is enabled in Goose, you can:\n+\n+### Starting Isolated Development\n+\n+Simply mention in your conversation with Goose that you want to work in an isolated environment:\n+\n+```\n+\"I want to experiment with adding a new feature, but I want to do it in an isolated environment so I don't affect my main codebase.\"\n+```\n+\n+Goose will automatically:\n+1. Create a new git branch for your work\n+2. Set up a containerized environment\n+3. Ensure all changes are isolated from your host system\n+\n+### Working with Experiments\n+\n+```\n+\"Let me try a completely different approach to this algorithm. Can you set up an isolated environment where I can experiment?\"\n+```\n+\n+### Learning New Technologies\n+\n+```\n+\"I want to try out this new framework, but I don't want to install all its dependencies on my main system.\"\n+```\n+\n+## Benefits\n+\n+- **Safety**: Experiment without fear of breaking your main development environment\n+- **Reproducibility**: Consistent environments across different machines and team members\n+- **Isolation**: Multiple projects can run simultaneously without conflicts\n+- **Easy cleanup**: Remove containers and branches when done\n+- **Version control**: All changes are tracked in isolated git branches\n+- **Rollback capability**: Easily discard failed experiments\n+\n+## Common Workflows\n+\n+### Feature Development\n+\n+1. Start a conversation with Goose about a new feature\n+2. Request isolated development environment\n+3. Goose creates branch and container\n+4. Develop and test the feature\n+5. If successful, merge the branch; if not, discard it\n+\n+### Dependency Exploration\n+\n+1. Ask Goose to explore a new library or tool\n+2. Work in isolated container with the dependency\n+3. Test compatibility and functionality\n+4. Decide whether to integrate into main project\n+\n+### Refactoring\n+\n+1. Request isolated environment for major refactoring\n+2. Make changes in safety of container and branch\n+3. Test thoroughly before merging\n+4. Easy rollback if issues arise\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+**Docker not running:**\n+- Ensure Docker Desktop is installed and running\n+- Check Docker daemon status: `docker info`\n+\n+**Permission issues:**\n+- Ensure your user has permission to run Docker commands\n+- On Linux, add user to docker group: `sudo usermod -aG docker $USER`\n+\n+**Extension not working:**\n+- Verify Container Use is installed: `cu --version`\n+- Check your Goose configuration file syntax\n+- Restart Goose after adding the extension\n+\n+**Git issues:**\n+- Ensure Git is properly configured with user name and email\n+- Check that you're in a Git repository when starting isolated work\n+\n+### Getting Help\n+\n+If you encounter issues:\n+\n+1. Check the **[Container Use GitHub repository](https://github.com/dagger/container-use)** for documentation\n+2. Verify all prerequisites are installed and working\n+3. Check Goose logs for error messages\n+4. Join our [Discord community](https://discord.gg/block-opensource) for support\n+\n+## Advanced Configuration\n+\n+### Custom Container Images\n+\n+You can configure container-use to use specific base images for different types of projects by setting environment variables in your extension configuration.\n+\n+### Persistent Volumes\n+\n+For projects that need persistent data across container sessions, you can configure volume mounts in your container-use setup.\n+\n+### Network Configuration\n+\n+If your development requires specific network settings or port mappings, these can be configured through container-use options.",
    "repo_full_name": "block/goose",
    "discussion_comments": [
      {
        "comment_id": "2153326817",
        "repo_full_name": "block/goose",
        "pr_number": 2962,
        "pr_file": "documentation/docs/guides/isolated-development-environments.md",
        "discussion_id": "2153326817",
        "commented_code": "@@ -0,0 +1,223 @@\n+---\n+title: Isolated Development Environments\n+sidebar_position: 25\n+---\n+\n+import Tabs from '@theme/Tabs';\n+import TabItem from '@theme/TabItem';\n+\n+This guide shows you how to set up isolated development environments using the **[Container Use MCP](https://github.com/dagger/container-use)** with Goose. With this setup, your development work will be isolated to both git branches and containers, allowing you to experiment freely without affecting your main system state.\n+Note that the container-use MCP is very new and emerging, but offers powerful ways to do isolated development which are very agent friendly (build on tools like Docker, copy on write filesystems and more)\n+\n+## Overview\n+\n+The **[Container Use MCP](https://github.com/dagger/container-use)** server provides containerized development environments that integrate seamlessly with Goose. This allows you to:\n+\n+- Work on changes isolated to git branches\n+- Run code in containers without affecting your local machine\n+- Easily reset and start fresh when needed\n+- Maintain clean separation between different projects and experiments\n+- Work on things in parallel\n+\n+## Prerequisites\n+\n+- Docker installed and running on your system\n+- Git installed and configured\n+- Goose installed and configured\n+\n+## Installation\n+\n+### Step 1: Install Container Use\n+\n+<Tabs groupId=\"platform\">\n+  <TabItem value=\"macos\" label=\"macOS (Homebrew - Recommended)\" default>\n+\n+```bash\n+brew install dagger/tap/container-use\n+```\n+\n+  </TabItem>\n+  <TabItem value=\"universal\" label=\"All Platforms (Shell Script)\">\n+\n+```bash\n+curl -fsSL https://raw.githubusercontent.com/dagger/container-use/main/install.sh | bash\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Adding to Goose\n+\n+### Method 1: Quick Setup Link\n+\n+Click this link to automatically add the extension to Goose:\n+\n+**[Add Container-Use to Goose](goose://extension?cmd=cu&arg=stdio&id=container-use&name=container%20use&description=use%20containers%20with%20dagger%20and%20git%20for%20isolated%20environments)**\n+\n+### Method 2: Manual Configuration\n+\n+<Tabs groupId=\"interface\">\n+  <TabItem value=\"ui\" label=\"Goose Desktop\" default>\n+\n+  1. Click `...` in the top right corner of the Goose Desktop.\n+  2. Select `Advanced Settings` from the menu.\n+  3. Under `Extensions`, click `Add custom extension`.\n+  4. Fill in the details:\n+     - **Type**: `Standard IO`\n+     - **ID**: `container-use`\n+     - **Name**: `Container Use`\n+     - **Description**: `Use containers with dagger and git for isolated environments`\n+     - **Command**: `cu`\n+     - **Arguments**: `stdio`\n+  5. Click `Add` button\n+\n+  </TabItem>\n+  <TabItem value=\"cli\" label=\"Goose CLI\">\n+\n+  1. Run the configuration command:\n+  ```bash\n+  goose configure\n+  ```\n+\n+  2. Select `Add Extension` from the menu.\n+\n+  3. Choose `Command-line Extension`.\n+\n+  4. Follow the prompts:\n+     - **Extension name**: `Container Use`\n+     - **Command**: `cu stdio`\n+     - **Timeout**: `300` (or your preferred timeout)\n+     - **Environment variables**: None needed\n+\n+  </TabItem>\n+  <TabItem value=\"config\" label=\"Config File\">\n+\n+Add the following configuration to your `~/.config/goose/config.yaml` file:\n+\n+```yaml\n+extensions:\n+  container-use:\n+    name: container-use\n+    type: stdio\n+    enabled: true\n+    cmd: cu\n+    args:\n+    - stdio\n+    envs: {}\n+    timeout: 300\n+```\n+\n+  </TabItem>\n+</Tabs>\n+\n+## Usage\n+\n+Once the extension is enabled in Goose, you can:\n+\n+### Starting Isolated Development\n+\n+Simply mention in your conversation with Goose that you want to work in an isolated environment:\n+\n+```\n+\"I want to experiment with adding a new feature, but I want to do it in an isolated environment so I don't affect my main codebase.\"\n+```\n+\n+Goose will automatically:\n+1. Create a new git branch for your work\n+2. Set up a containerized environment\n+3. Ensure all changes are isolated from your host system\n+\n+### Working with Experiments\n+\n+```\n+\"Let me try a completely different approach to this algorithm. Can you set up an isolated environment where I can experiment?\"\n+```\n+\n+### Learning New Technologies\n+\n+```\n+\"I want to try out this new framework, but I don't want to install all its dependencies on my main system.\"\n+```\n+\n+## Benefits\n+\n+- **Safety**: Experiment without fear of breaking your main development environment\n+- **Reproducibility**: Consistent environments across different machines and team members\n+- **Isolation**: Multiple projects can run simultaneously without conflicts\n+- **Easy cleanup**: Remove containers and branches when done\n+- **Version control**: All changes are tracked in isolated git branches\n+- **Rollback capability**: Easily discard failed experiments\n+\n+## Common Workflows\n+\n+### Feature Development\n+\n+1. Start a conversation with Goose about a new feature\n+2. Request isolated development environment\n+3. Goose creates branch and container\n+4. Develop and test the feature\n+5. If successful, merge the branch; if not, discard it\n+\n+### Dependency Exploration\n+\n+1. Ask Goose to explore a new library or tool\n+2. Work in isolated container with the dependency\n+3. Test compatibility and functionality\n+4. Decide whether to integrate into main project\n+\n+### Refactoring\n+\n+1. Request isolated environment for major refactoring\n+2. Make changes in safety of container and branch\n+3. Test thoroughly before merging\n+4. Easy rollback if issues arise\n+\n+## Troubleshooting\n+\n+### Common Issues\n+\n+**Docker not running:**\n+- Ensure Docker Desktop is installed and running\n+- Check Docker daemon status: `docker info`\n+\n+**Permission issues:**\n+- Ensure your user has permission to run Docker commands\n+- On Linux, add user to docker group: `sudo usermod -aG docker $USER`\n+\n+**Extension not working:**\n+- Verify Container Use is installed: `cu --version`\n+- Check your Goose configuration file syntax\n+- Restart Goose after adding the extension\n+\n+**Git issues:**\n+- Ensure Git is properly configured with user name and email\n+- Check that you're in a Git repository when starting isolated work\n+\n+### Getting Help\n+\n+If you encounter issues:\n+\n+1. Check the **[Container Use GitHub repository](https://github.com/dagger/container-use)** for documentation\n+2. Verify all prerequisites are installed and working\n+3. Check Goose logs for error messages\n+4. Join our [Discord community](https://discord.gg/block-opensource) for support\n+\n+## Advanced Configuration\n+\n+### Custom Container Images\n+\n+You can configure container-use to use specific base images for different types of projects by setting environment variables in your extension configuration.\n+\n+### Persistent Volumes\n+\n+For projects that need persistent data across container sessions, you can configure volume mounts in your container-use setup.\n+\n+### Network Configuration\n+\n+If your development requires specific network settings or port mappings, these can be configured through container-use options.",
        "comment_created_at": "2025-06-17T23:27:53+00:00",
        "comment_author": "cwlbraa",
        "comment_body": "\ud83d\ude04 i don't think either of these exist as configuration surface yet, unless you're referring to something in goose.\r\n\r\nwe do have undocumented secrets support, you can prompt the agent to use secrets in these formats and it'll set up env vars for you without exposing the content of the secret to the LLM at all.\r\n```\r\nenv://ENV_NAME <-- environment variable\r\nfile://PATH <-- secret in a file\r\nop://<PATH> <-- 1Password\r\nvault://<PATH> <-- Vault\r\n```\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]