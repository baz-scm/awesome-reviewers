[
  {
    "discussion_id": "2181035407",
    "pr_number": 107485,
    "pr_file": "packages/grafana-ui/src/components/Table/TableNG/Cells/PillCell.tsx",
    "created_at": "2025-07-02T21:49:38+00:00",
    "commented_code": "+import { css } from '@emotion/css';\n+import { Property } from 'csstype';\n+import { useMemo } from 'react';\n+\n+import { GrafanaTheme2, isDataFrame, classicColors, colorManipulator } from '@grafana/data';\n+import { TablePillCellOptions } from '@grafana/schema';\n+\n+import { useStyles2 } from '../../../../themes/ThemeContext';\n+import { TableCellRendererProps } from '../types';\n+\n+export function PillCell({ value, field, justifyContent, cellOptions }: TableCellRendererProps) {\n+  const styles = useStyles2(getStyles, justifyContent);\n+\n+  const pills = useMemo(() => {\n+    if (!value) {\n+      return [];\n+    }\n+\n+    // Handle DataFrame - not supported for pills\n+    if (isDataFrame(value)) {\n+      return [];\n+    }\n+\n+    // Handle different value types\n+    const stringValue = String(value);\n+\n+    // Try to parse as JSON first\n+    try {\n+      const parsed = JSON.parse(stringValue);\n+      if (Array.isArray(parsed)) {\n+        // JSON array of strings\n+        return parsed\n+          .filter((item) => item != null && item !== '')\n+          .map(String)\n+          .map((text) => text.trim())\n+          .filter((item) => item !== '');\n+      }\n+    } catch {\n+      // Not valid JSON, continue with other parsing\n+    }\n+\n+    // Handle CSV string\n+    if (stringValue.includes(',')) {\n+      return stringValue\n+        .split(',')\n+        .map((text) => text.trim())\n+        .filter((item) => item !== '');\n+    }\n+\n+    // Single value - strip quotes\n+    return [stringValue.replace(/[\"'`]/g, '').trim()];\n+  }, [value]);\n+\n+  if (pills.length === 0) {\n+    return <div className={styles.cell}>-</div>;\n+  }\n+\n+  return (\n+    <div className={styles.cell}>\n+      <div className={styles.pillsContainer}>\n+        {pills.map((pill, index) => {\n+          const bgColor = getPillColor(pill, cellOptions);\n+          const textColor = colorManipulator.getContrastRatio('#FFFFFF', bgColor) >= 4.5 ? '#FFFFFF' : '#000000';\n+\n+          return (\n+            <span\n+              key={`${pill}-${index}`}\n+              className={styles.pill}\n+              style={{\n+                backgroundColor: bgColor,\n+                color: textColor,\n+              }}\n+            >\n+              {pill}\n+            </span>\n+          );\n+        })}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function isPillCellOptions(cellOptions: TableCellRendererProps['cellOptions']): cellOptions is TablePillCellOptions {\n+  return cellOptions?.type === 'pill';\n+}\n+\n+function getPillColor(pill: string, cellOptions: TableCellRendererProps['cellOptions']): string {\n+  if (!isPillCellOptions(cellOptions)) {\n+    return getDeterministicColor(pill);\n+  }\n+\n+  const colorMode = cellOptions.colorMode || 'auto';\n+\n+  // Fixed color mode (highest priority)\n+  if (colorMode === 'fixed' && cellOptions.color) {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2181035407",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107485,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/Cells/PillCell.tsx",
        "discussion_id": "2181035407",
        "commented_code": "@@ -0,0 +1,153 @@\n+import { css } from '@emotion/css';\n+import { Property } from 'csstype';\n+import { useMemo } from 'react';\n+\n+import { GrafanaTheme2, isDataFrame, classicColors, colorManipulator } from '@grafana/data';\n+import { TablePillCellOptions } from '@grafana/schema';\n+\n+import { useStyles2 } from '../../../../themes/ThemeContext';\n+import { TableCellRendererProps } from '../types';\n+\n+export function PillCell({ value, field, justifyContent, cellOptions }: TableCellRendererProps) {\n+  const styles = useStyles2(getStyles, justifyContent);\n+\n+  const pills = useMemo(() => {\n+    if (!value) {\n+      return [];\n+    }\n+\n+    // Handle DataFrame - not supported for pills\n+    if (isDataFrame(value)) {\n+      return [];\n+    }\n+\n+    // Handle different value types\n+    const stringValue = String(value);\n+\n+    // Try to parse as JSON first\n+    try {\n+      const parsed = JSON.parse(stringValue);\n+      if (Array.isArray(parsed)) {\n+        // JSON array of strings\n+        return parsed\n+          .filter((item) => item != null && item !== '')\n+          .map(String)\n+          .map((text) => text.trim())\n+          .filter((item) => item !== '');\n+      }\n+    } catch {\n+      // Not valid JSON, continue with other parsing\n+    }\n+\n+    // Handle CSV string\n+    if (stringValue.includes(',')) {\n+      return stringValue\n+        .split(',')\n+        .map((text) => text.trim())\n+        .filter((item) => item !== '');\n+    }\n+\n+    // Single value - strip quotes\n+    return [stringValue.replace(/[\"'`]/g, '').trim()];\n+  }, [value]);\n+\n+  if (pills.length === 0) {\n+    return <div className={styles.cell}>-</div>;\n+  }\n+\n+  return (\n+    <div className={styles.cell}>\n+      <div className={styles.pillsContainer}>\n+        {pills.map((pill, index) => {\n+          const bgColor = getPillColor(pill, cellOptions);\n+          const textColor = colorManipulator.getContrastRatio('#FFFFFF', bgColor) >= 4.5 ? '#FFFFFF' : '#000000';\n+\n+          return (\n+            <span\n+              key={`${pill}-${index}`}\n+              className={styles.pill}\n+              style={{\n+                backgroundColor: bgColor,\n+                color: textColor,\n+              }}\n+            >\n+              {pill}\n+            </span>\n+          );\n+        })}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function isPillCellOptions(cellOptions: TableCellRendererProps['cellOptions']): cellOptions is TablePillCellOptions {\n+  return cellOptions?.type === 'pill';\n+}\n+\n+function getPillColor(pill: string, cellOptions: TableCellRendererProps['cellOptions']): string {\n+  if (!isPillCellOptions(cellOptions)) {\n+    return getDeterministicColor(pill);\n+  }\n+\n+  const colorMode = cellOptions.colorMode || 'auto';\n+\n+  // Fixed color mode (highest priority)\n+  if (colorMode === 'fixed' && cellOptions.color) {",
        "comment_created_at": "2025-07-02T21:49:38+00:00",
        "comment_author": "leeoniya",
        "comment_body": "how useful is it to have all pills in the column be the same color?\r\n\r\nwe should support value mappings here. possibly even something like key-value pairs with mappings based on key rather than value",
        "pr_file_module": null
      },
      {
        "comment_id": "2182767605",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107485,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/Cells/PillCell.tsx",
        "discussion_id": "2181035407",
        "commented_code": "@@ -0,0 +1,153 @@\n+import { css } from '@emotion/css';\n+import { Property } from 'csstype';\n+import { useMemo } from 'react';\n+\n+import { GrafanaTheme2, isDataFrame, classicColors, colorManipulator } from '@grafana/data';\n+import { TablePillCellOptions } from '@grafana/schema';\n+\n+import { useStyles2 } from '../../../../themes/ThemeContext';\n+import { TableCellRendererProps } from '../types';\n+\n+export function PillCell({ value, field, justifyContent, cellOptions }: TableCellRendererProps) {\n+  const styles = useStyles2(getStyles, justifyContent);\n+\n+  const pills = useMemo(() => {\n+    if (!value) {\n+      return [];\n+    }\n+\n+    // Handle DataFrame - not supported for pills\n+    if (isDataFrame(value)) {\n+      return [];\n+    }\n+\n+    // Handle different value types\n+    const stringValue = String(value);\n+\n+    // Try to parse as JSON first\n+    try {\n+      const parsed = JSON.parse(stringValue);\n+      if (Array.isArray(parsed)) {\n+        // JSON array of strings\n+        return parsed\n+          .filter((item) => item != null && item !== '')\n+          .map(String)\n+          .map((text) => text.trim())\n+          .filter((item) => item !== '');\n+      }\n+    } catch {\n+      // Not valid JSON, continue with other parsing\n+    }\n+\n+    // Handle CSV string\n+    if (stringValue.includes(',')) {\n+      return stringValue\n+        .split(',')\n+        .map((text) => text.trim())\n+        .filter((item) => item !== '');\n+    }\n+\n+    // Single value - strip quotes\n+    return [stringValue.replace(/[\"'`]/g, '').trim()];\n+  }, [value]);\n+\n+  if (pills.length === 0) {\n+    return <div className={styles.cell}>-</div>;\n+  }\n+\n+  return (\n+    <div className={styles.cell}>\n+      <div className={styles.pillsContainer}>\n+        {pills.map((pill, index) => {\n+          const bgColor = getPillColor(pill, cellOptions);\n+          const textColor = colorManipulator.getContrastRatio('#FFFFFF', bgColor) >= 4.5 ? '#FFFFFF' : '#000000';\n+\n+          return (\n+            <span\n+              key={`${pill}-${index}`}\n+              className={styles.pill}\n+              style={{\n+                backgroundColor: bgColor,\n+                color: textColor,\n+              }}\n+            >\n+              {pill}\n+            </span>\n+          );\n+        })}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function isPillCellOptions(cellOptions: TableCellRendererProps['cellOptions']): cellOptions is TablePillCellOptions {\n+  return cellOptions?.type === 'pill';\n+}\n+\n+function getPillColor(pill: string, cellOptions: TableCellRendererProps['cellOptions']): string {\n+  if (!isPillCellOptions(cellOptions)) {\n+    return getDeterministicColor(pill);\n+  }\n+\n+  const colorMode = cellOptions.colorMode || 'auto';\n+\n+  // Fixed color mode (highest priority)\n+  if (colorMode === 'fixed' && cellOptions.color) {",
        "comment_created_at": "2025-07-03T13:19:29+00:00",
        "comment_author": "timlevett",
        "comment_body": "yeah, fixed was an easy one to add, all the components where there so it was an easy win, will it be used, we could track it but its not that much weight really. \r\n\r\nI'm happy to try to add in kv mapping, maybe in next iteration? I did have it at first, but it made it a bit more complicated. I didn't try with kv pairs tho, just a mapping similar to our other kv mapping we have.\r\n\r\nWhat do you think @leeoniya , do we need kv pairs to move forward or is this a good first iteration?",
        "pr_file_module": null
      },
      {
        "comment_id": "2183583860",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107485,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/Cells/PillCell.tsx",
        "discussion_id": "2181035407",
        "commented_code": "@@ -0,0 +1,153 @@\n+import { css } from '@emotion/css';\n+import { Property } from 'csstype';\n+import { useMemo } from 'react';\n+\n+import { GrafanaTheme2, isDataFrame, classicColors, colorManipulator } from '@grafana/data';\n+import { TablePillCellOptions } from '@grafana/schema';\n+\n+import { useStyles2 } from '../../../../themes/ThemeContext';\n+import { TableCellRendererProps } from '../types';\n+\n+export function PillCell({ value, field, justifyContent, cellOptions }: TableCellRendererProps) {\n+  const styles = useStyles2(getStyles, justifyContent);\n+\n+  const pills = useMemo(() => {\n+    if (!value) {\n+      return [];\n+    }\n+\n+    // Handle DataFrame - not supported for pills\n+    if (isDataFrame(value)) {\n+      return [];\n+    }\n+\n+    // Handle different value types\n+    const stringValue = String(value);\n+\n+    // Try to parse as JSON first\n+    try {\n+      const parsed = JSON.parse(stringValue);\n+      if (Array.isArray(parsed)) {\n+        // JSON array of strings\n+        return parsed\n+          .filter((item) => item != null && item !== '')\n+          .map(String)\n+          .map((text) => text.trim())\n+          .filter((item) => item !== '');\n+      }\n+    } catch {\n+      // Not valid JSON, continue with other parsing\n+    }\n+\n+    // Handle CSV string\n+    if (stringValue.includes(',')) {\n+      return stringValue\n+        .split(',')\n+        .map((text) => text.trim())\n+        .filter((item) => item !== '');\n+    }\n+\n+    // Single value - strip quotes\n+    return [stringValue.replace(/[\"'`]/g, '').trim()];\n+  }, [value]);\n+\n+  if (pills.length === 0) {\n+    return <div className={styles.cell}>-</div>;\n+  }\n+\n+  return (\n+    <div className={styles.cell}>\n+      <div className={styles.pillsContainer}>\n+        {pills.map((pill, index) => {\n+          const bgColor = getPillColor(pill, cellOptions);\n+          const textColor = colorManipulator.getContrastRatio('#FFFFFF', bgColor) >= 4.5 ? '#FFFFFF' : '#000000';\n+\n+          return (\n+            <span\n+              key={`${pill}-${index}`}\n+              className={styles.pill}\n+              style={{\n+                backgroundColor: bgColor,\n+                color: textColor,\n+              }}\n+            >\n+              {pill}\n+            </span>\n+          );\n+        })}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function isPillCellOptions(cellOptions: TableCellRendererProps['cellOptions']): cellOptions is TablePillCellOptions {\n+  return cellOptions?.type === 'pill';\n+}\n+\n+function getPillColor(pill: string, cellOptions: TableCellRendererProps['cellOptions']): string {\n+  if (!isPillCellOptions(cellOptions)) {\n+    return getDeterministicColor(pill);\n+  }\n+\n+  const colorMode = cellOptions.colorMode || 'auto';\n+\n+  // Fixed color mode (highest priority)\n+  if (colorMode === 'fixed' && cellOptions.color) {",
        "comment_created_at": "2025-07-03T19:05:58+00:00",
        "comment_author": "timlevett",
        "comment_body": "Added in the latest commits, have a look @leeoniya 😄 , added video to the main PR description.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437177876",
    "pr_number": 76009,
    "pr_file": "public/app/plugins/panel/nodeGraph/editor/RawFieldNameSelect.tsx",
    "created_at": "2023-12-27T17:49:52+00:00",
    "commented_code": "+import React from 'react';\n+\n+import { StandardEditorProps } from '@grafana/data';\n+import { Select } from '@grafana/ui';\n+\n+import { NodeGraphOptions } from '../types';\n+\n+type Settings = { placeholder?: string };\n+type RawFieldNameSelectProps = StandardEditorProps<string, Settings, NodeGraphOptions, undefined>;\n+\n+export const RawFieldSelector = ({ value, onChange, context, item }: RawFieldNameSelectProps) => {\n+  const fieldOptions = [];\n+  for (const frame of context.data) {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1437177876",
        "repo_full_name": "grafana/grafana",
        "pr_number": 76009,
        "pr_file": "public/app/plugins/panel/nodeGraph/editor/RawFieldNameSelect.tsx",
        "discussion_id": "1437177876",
        "commented_code": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+\n+import { StandardEditorProps } from '@grafana/data';\n+import { Select } from '@grafana/ui';\n+\n+import { NodeGraphOptions } from '../types';\n+\n+type Settings = { placeholder?: string };\n+type RawFieldNameSelectProps = StandardEditorProps<string, Settings, NodeGraphOptions, undefined>;\n+\n+export const RawFieldSelector = ({ value, onChange, context, item }: RawFieldNameSelectProps) => {\n+  const fieldOptions = [];\n+  for (const frame of context.data) {",
        "comment_created_at": "2023-12-27T17:49:52+00:00",
        "comment_author": "aocenas",
        "comment_body": "Not exactly sure how this works but it seems like I get all the fields from both node and edge data frame in the options:\r\n<img width=\"368\" alt=\"Screenshot 2023-12-27 at 18 48 30\" src=\"https://github.com/grafana/grafana/assets/1014802/0ca89983-7b04-44d2-a979-7618a333c0df\">\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1465080511",
        "repo_full_name": "grafana/grafana",
        "pr_number": 76009,
        "pr_file": "public/app/plugins/panel/nodeGraph/editor/RawFieldNameSelect.tsx",
        "discussion_id": "1437177876",
        "commented_code": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+\n+import { StandardEditorProps } from '@grafana/data';\n+import { Select } from '@grafana/ui';\n+\n+import { NodeGraphOptions } from '../types';\n+\n+type Settings = { placeholder?: string };\n+type RawFieldNameSelectProps = StandardEditorProps<string, Settings, NodeGraphOptions, undefined>;\n+\n+export const RawFieldSelector = ({ value, onChange, context, item }: RawFieldNameSelectProps) => {\n+  const fieldOptions = [];\n+  for (const frame of context.data) {",
        "comment_created_at": "2024-01-24T15:21:44+00:00",
        "comment_author": "oscarkilhed",
        "comment_body": "Hmm, yes you are right. When the names collide choosing the correct field from the correct dataframe could be problematic.",
        "pr_file_module": null
      },
      {
        "comment_id": "1465132176",
        "repo_full_name": "grafana/grafana",
        "pr_number": 76009,
        "pr_file": "public/app/plugins/panel/nodeGraph/editor/RawFieldNameSelect.tsx",
        "discussion_id": "1437177876",
        "commented_code": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+\n+import { StandardEditorProps } from '@grafana/data';\n+import { Select } from '@grafana/ui';\n+\n+import { NodeGraphOptions } from '../types';\n+\n+type Settings = { placeholder?: string };\n+type RawFieldNameSelectProps = StandardEditorProps<string, Settings, NodeGraphOptions, undefined>;\n+\n+export const RawFieldSelector = ({ value, onChange, context, item }: RawFieldNameSelectProps) => {\n+  const fieldOptions = [];\n+  for (const frame of context.data) {",
        "comment_created_at": "2024-01-24T15:48:25+00:00",
        "comment_author": "oscarkilhed",
        "comment_body": "Hmm, this gets even more complicated. Because if the edge dataframe isn't named edges and there is no field named source, the dataframe cannot be identified as the dataframe containing edges. If we want this to work for any data, you would have to be able to specify the frame to be used as edges, and the frame to be used as nodes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1465295248",
        "repo_full_name": "grafana/grafana",
        "pr_number": 76009,
        "pr_file": "public/app/plugins/panel/nodeGraph/editor/RawFieldNameSelect.tsx",
        "discussion_id": "1437177876",
        "commented_code": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+\n+import { StandardEditorProps } from '@grafana/data';\n+import { Select } from '@grafana/ui';\n+\n+import { NodeGraphOptions } from '../types';\n+\n+type Settings = { placeholder?: string };\n+type RawFieldNameSelectProps = StandardEditorProps<string, Settings, NodeGraphOptions, undefined>;\n+\n+export const RawFieldSelector = ({ value, onChange, context, item }: RawFieldNameSelectProps) => {\n+  const fieldOptions = [];\n+  for (const frame of context.data) {",
        "comment_created_at": "2024-01-24T17:17:45+00:00",
        "comment_author": "oscarkilhed",
        "comment_body": "I've updated the PR so that it's possible to select the frame for nodes and edges. It should also only display fieldnames from the correct frame. However, it feels like this is getting very complicated now :man_shrugging: ",
        "pr_file_module": null
      }
    ]
  }
]