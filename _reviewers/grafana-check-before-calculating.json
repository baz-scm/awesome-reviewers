[
  {
    "discussion_id": "2175221935",
    "pr_number": 107338,
    "pr_file": "packages/grafana-ui/src/components/Table/TableNG/hooks.ts",
    "created_at": "2025-06-30T14:31:00+00:00",
    "commented_code": "\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\";\n     const txtWidth = ctx.measureText(txt).width;\n     const avgCharWidth = txtWidth / txt.length + letterSpacing;\n+    const { count } = varPreLine(ctx);\n+    const calcRowHeight = (text: string, cellWidth: number, defaultHeight: number) => {\n+      const numLines = count(text, cellWidth);\n+      const totalHeight = numLines * TABLE.LINE_HEIGHT + 2 * TABLE.CELL_PADDING;\n+      return Math.max(totalHeight, defaultHeight);\n+    };\n \n     return {\n+      calcRowHeight,\n       ctx,\n       font,\n       avgCharWidth,\n     };\n   }, [theme.typography.fontSize, theme.typography.fontFamily]);\n-  return { ctx, font, avgCharWidth };\n+  return typographyCtx;\n }\n \n-export function useRowHeight(\n-  columnWidths: number[],\n-  fields: Field[],\n-  hasNestedFrames: boolean,\n-  defaultRowHeight: number,\n-  expandedRows: Record<string, boolean>\n-): number | ((row: TableRow) => number) {\n+interface GetLongesCellTextOptions {\n+  fields: Field[];\n+  wrapWidths: number[];\n+  avgCharWidth: number;\n+  wrappedColIdxs: boolean[];\n+  getText: (field: Field) => string | null | undefined;\n+}\n+\n+function getLongestCellText({ fields, wrapWidths, avgCharWidth, wrappedColIdxs, getText }: GetLongesCellTextOptions): {\n+  text: string;\n+  idx: number;\n+  numLines: number;\n+} {\n+  let maxLines = 1;\n+  let maxLinesIdx = -1;\n+  let maxLinesText = '';\n+  const spaceRegex = /[\\s]+/;\n+\n+  for (let i = 0; i < wrapWidths.length; i++) {\n+    if (wrappedColIdxs[i]) {\n+      const cellTextRaw = getText(fields[i]);\n+      if (cellTextRaw != null && spaceRegex.test(cellTextRaw)) {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2175221935",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107338,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/hooks.ts",
        "discussion_id": "2175221935",
        "commented_code": "@@ -322,23 +316,170 @@ export function useTypographyCtx() {\n       \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\";\n     const txtWidth = ctx.measureText(txt).width;\n     const avgCharWidth = txtWidth / txt.length + letterSpacing;\n+    const { count } = varPreLine(ctx);\n+    const calcRowHeight = (text: string, cellWidth: number, defaultHeight: number) => {\n+      const numLines = count(text, cellWidth);\n+      const totalHeight = numLines * TABLE.LINE_HEIGHT + 2 * TABLE.CELL_PADDING;\n+      return Math.max(totalHeight, defaultHeight);\n+    };\n \n     return {\n+      calcRowHeight,\n       ctx,\n       font,\n       avgCharWidth,\n     };\n   }, [theme.typography.fontSize, theme.typography.fontFamily]);\n-  return { ctx, font, avgCharWidth };\n+  return typographyCtx;\n }\n \n-export function useRowHeight(\n-  columnWidths: number[],\n-  fields: Field[],\n-  hasNestedFrames: boolean,\n-  defaultRowHeight: number,\n-  expandedRows: Record<string, boolean>\n-): number | ((row: TableRow) => number) {\n+interface GetLongesCellTextOptions {\n+  fields: Field[];\n+  wrapWidths: number[];\n+  avgCharWidth: number;\n+  wrappedColIdxs: boolean[];\n+  getText: (field: Field) => string | null | undefined;\n+}\n+\n+function getLongestCellText({ fields, wrapWidths, avgCharWidth, wrappedColIdxs, getText }: GetLongesCellTextOptions): {\n+  text: string;\n+  idx: number;\n+  numLines: number;\n+} {\n+  let maxLines = 1;\n+  let maxLinesIdx = -1;\n+  let maxLinesText = '';\n+  const spaceRegex = /[\\s]+/;\n+\n+  for (let i = 0; i < wrapWidths.length; i++) {\n+    if (wrappedColIdxs[i]) {\n+      const cellTextRaw = getText(fields[i]);\n+      if (cellTextRaw != null && spaceRegex.test(cellTextRaw)) {",
        "comment_created_at": "2025-06-30T14:31:00+00:00",
        "comment_author": "fastfrwrd",
        "comment_body": "I want to point out that I added a check here, which is that there's at least one space in the string. I was running into an edge case where this function was selecting the wrong string as the one needing the greatest width to fit because it was selecting a string without spaces (`my_long_column_header`). Since we don't break words, if there are no spaces in a string, it's technically more correct to ignore those strings when calculating these dimensions.\r\n\r\nI did performance profiling on the big IMDB table, and it seems like in that case we spend less time running calculations overall with this check enabled when sorting the or resizing rows, which kinda makes sense - certain strings just never fall into this case now. But I wanted to flag this change since it runs per cell so often, maybe there's a more clever way to check this that's better, or maybe we feel like it's a bad idea or unnecessary optimization (although it did make the column header sizing work more correctly in this case I was testing)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2178407744",
    "pr_number": 107338,
    "pr_file": "packages/grafana-ui/src/components/Table/TableNG/utils.ts",
    "created_at": "2025-07-01T19:47:15+00:00",
    "commented_code": "return TABLE.CELL_PADDING * 2 + bodyFontSize * lineHeight;\n }\n \n+/**\n+ * @internal\n+ * Returns true if cell inspection (hover to see full content) is enabled for the field.\n+ */\n+export function isCellInspectEnabled(field: Field): boolean {\n+  return field.config?.custom?.inspect ?? false;\n+}\n+\n+/**\n+ * @internal\n+ * Returns true if text wrapping should be applied to the cell.\n+ */\n+export function shouldTextWrap(field: Field): boolean {\n+  const cellOptions = getCellOptions(field);\n+  return ('wrapText' in cellOptions && cellOptions.wrapText) ?? false;\n+}\n+\n+// matches characters which CSS\n+const spaceRegex = /[\\s-]/;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2178407744",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107338,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/utils.ts",
        "discussion_id": "2178407744",
        "commented_code": "@@ -69,19 +48,89 @@ export function getDefaultRowHeight(theme: GrafanaTheme2, cellHeight?: TableCell\n   return TABLE.CELL_PADDING * 2 + bodyFontSize * lineHeight;\n }\n \n+/**\n+ * @internal\n+ * Returns true if cell inspection (hover to see full content) is enabled for the field.\n+ */\n+export function isCellInspectEnabled(field: Field): boolean {\n+  return field.config?.custom?.inspect ?? false;\n+}\n+\n+/**\n+ * @internal\n+ * Returns true if text wrapping should be applied to the cell.\n+ */\n+export function shouldTextWrap(field: Field): boolean {\n+  const cellOptions = getCellOptions(field);\n+  return ('wrapText' in cellOptions && cellOptions.wrapText) ?? false;\n+}\n+\n+// matches characters which CSS\n+const spaceRegex = /[\\s-]/;",
        "comment_created_at": "2025-07-01T19:47:15+00:00",
        "comment_author": "fastfrwrd",
        "comment_body": "we're going to remove this and rely on a change to uWrap which adds detection for these characters when counting lines: https://github.com/leeoniya/uWrap/commit/9a4bc8647c5d85353ca2723e90aab82ecce05c63\r\n\r\nleaving it in for now since uWrap still needs to have a release for us to pull it in.",
        "pr_file_module": null
      },
      {
        "comment_id": "2180144207",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107338,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/utils.ts",
        "discussion_id": "2178407744",
        "commented_code": "@@ -69,19 +48,89 @@ export function getDefaultRowHeight(theme: GrafanaTheme2, cellHeight?: TableCell\n   return TABLE.CELL_PADDING * 2 + bodyFontSize * lineHeight;\n }\n \n+/**\n+ * @internal\n+ * Returns true if cell inspection (hover to see full content) is enabled for the field.\n+ */\n+export function isCellInspectEnabled(field: Field): boolean {\n+  return field.config?.custom?.inspect ?? false;\n+}\n+\n+/**\n+ * @internal\n+ * Returns true if text wrapping should be applied to the cell.\n+ */\n+export function shouldTextWrap(field: Field): boolean {\n+  const cellOptions = getCellOptions(field);\n+  return ('wrapText' in cellOptions && cellOptions.wrapText) ?? false;\n+}\n+\n+// matches characters which CSS\n+const spaceRegex = /[\\s-]/;",
        "comment_created_at": "2025-07-02T14:00:21+00:00",
        "comment_author": "leeoniya",
        "comment_body": "i dont think we can remove this check because it's part of the heuristics for determining which field is longest and this has to happen before we send that field to uWrap for actually counting lines.",
        "pr_file_module": null
      },
      {
        "comment_id": "2180222760",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107338,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/utils.ts",
        "discussion_id": "2178407744",
        "commented_code": "@@ -69,19 +48,89 @@ export function getDefaultRowHeight(theme: GrafanaTheme2, cellHeight?: TableCell\n   return TABLE.CELL_PADDING * 2 + bodyFontSize * lineHeight;\n }\n \n+/**\n+ * @internal\n+ * Returns true if cell inspection (hover to see full content) is enabled for the field.\n+ */\n+export function isCellInspectEnabled(field: Field): boolean {\n+  return field.config?.custom?.inspect ?? false;\n+}\n+\n+/**\n+ * @internal\n+ * Returns true if text wrapping should be applied to the cell.\n+ */\n+export function shouldTextWrap(field: Field): boolean {\n+  const cellOptions = getCellOptions(field);\n+  return ('wrapText' in cellOptions && cellOptions.wrapText) ?? false;\n+}\n+\n+// matches characters which CSS\n+const spaceRegex = /[\\s-]/;",
        "comment_created_at": "2025-07-02T14:32:53+00:00",
        "comment_author": "fastfrwrd",
        "comment_body": "oh, very true. all good, I'll leave it here.",
        "pr_file_module": null
      }
    ]
  }
]