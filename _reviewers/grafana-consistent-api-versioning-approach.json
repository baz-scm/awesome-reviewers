[
  {
    "discussion_id": "1596817808",
    "pr_number": 87639,
    "pr_file": "pkg/api/dtos/plugins.go",
    "created_at": "2024-05-10T14:21:16+00:00",
    "commented_code": "SignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1596817808",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87639,
        "pr_file": "pkg/api/dtos/plugins.go",
        "discussion_id": "1596817808",
        "commented_code": "@@ -28,7 +28,7 @@ type PluginSetting struct {\n \tSignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
        "comment_created_at": "2024-05-10T14:21:16+00:00",
        "comment_author": "ryantxu",
        "comment_body": "alternatively we could use the group+version flavor, but I find it super confusing that k8s mixes the use of these eg:\r\n\r\napiVersion = \"v0alpha1\"\r\nor\r\napiVersion = \"prometheus.datasource.grafana.app/v0alpha\"\r\n\r\nsadly k8s uses both all over the place ðŸ¤’ ",
        "pr_file_module": null
      },
      {
        "comment_id": "1598085111",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87639,
        "pr_file": "pkg/api/dtos/plugins.go",
        "discussion_id": "1596817808",
        "commented_code": "@@ -28,7 +28,7 @@ type PluginSetting struct {\n \tSignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
        "comment_created_at": "2024-05-13T08:35:20+00:00",
        "comment_author": "andresmgot",
        "comment_body": "I don't think we need this _yet_? I guess that the idea here is that the frontend would get this api server config and start querying the datasource in the new URL, right? (`/apis/<api_group>/<api_version>/namespaces/stack/connections/<ds_UID>/query` vs `/api/ds/query`).\r\n\r\nSince we already have the `/apis` endpoint, which returns similar information coming from the k8s tooling, do we need to modify this for the \"legacy\" endpoint?",
        "pr_file_module": null
      },
      {
        "comment_id": "1598293656",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87639,
        "pr_file": "pkg/api/dtos/plugins.go",
        "discussion_id": "1596817808",
        "commented_code": "@@ -28,7 +28,7 @@ type PluginSetting struct {\n \tSignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
        "comment_created_at": "2024-05-13T11:10:49+00:00",
        "comment_author": "ryantxu",
        "comment_body": "Alternatively we could remove/hide it entirely entirely for now.  \"apiVersion\" without the group is a bit awkward in this api call.\r\n\r\nBy adding `APIServerInfo` we add enough info to point to everything required for:\r\n`/apis/<api_group>/<api_version>/namespaces/<namespace>/connections/<ds_UID>/query\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1598310211",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87639,
        "pr_file": "pkg/api/dtos/plugins.go",
        "discussion_id": "1596817808",
        "commented_code": "@@ -28,7 +28,7 @@ type PluginSetting struct {\n \tSignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
        "comment_created_at": "2024-05-13T11:25:05+00:00",
        "comment_author": "andresmgot",
        "comment_body": "> Alternatively we could remove/hide it entirely entirely for now. \"apiVersion\" without the group is a bit awkward in this api call.\r\n\r\nI think it's still useful to have just the `apiVersion`, for example to store it in datasource settings and dashboards.\r\n\r\n> By adding APIServerInfo we add enough info to point to everything required for:\r\n`/apis/<api_group>/<api_version>/namespaces//connections/<ds_UID>/query\r\n\r\nYes, but I don't know if this is the best place to have it (also because it's a bit hardcoded). I think a better workflow would be for the frontend to have a map between pluginID -> DS server (e.g. `prometheus: prometheus-url:6443`) and then obtain the apiVersions and groups with a request to the DS server (`prometheus-url:6443/apis`). Isn't that closer to a native workflow?",
        "pr_file_module": null
      },
      {
        "comment_id": "1606484446",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87639,
        "pr_file": "pkg/api/dtos/plugins.go",
        "discussion_id": "1596817808",
        "commented_code": "@@ -28,7 +28,7 @@ type PluginSetting struct {\n \tSignatureType   plugins.SignatureType   `json:\"signatureType\"`\n \tSignatureOrg    string                  `json:\"signatureOrg\"`\n \tAngularDetected bool                    `json:\"angularDetected\"`\n-\tAPIVersion      string                  `json:\"apiVersion\"`",
        "comment_created_at": "2024-05-20T09:10:46+00:00",
        "comment_author": "ryantxu",
        "comment_body": "I'm not sure the best strategy to get from where we are to where we need to be -- long term, the plugins settings will not be there.  It will be a resource managed in an apiserver saying what is available.\r\n\r\nMy concern with setting a single apiversion -- is mainly that people will start to think that is true and depend on it.  The frontend needs to know what apiVersion it is able to talk to if it wants to use the preferredVersion that is fine, we just want to make sure the pattern is clear that a datasource/app can have many versions and the client must know who they are talking to",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154485616",
    "pr_number": 106915,
    "pr_file": "pkg/apis/secret/v0alpha1/secure_value.go",
    "created_at": "2025-06-18T12:34:02+00:00",
    "commented_code": "// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n type SecureValue struct {\n-\tmetav1.TypeMeta `json:\",inline\"`\n-\n-\t// Standard object's metadata. It can only be one of `metav1.ObjectMeta` or `metav1.ListMeta`.\n-\t// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n-\t// +optional\n-\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n+\tmetav1.TypeMeta   `json:\",inline\"`\n+\tmetav1.ObjectMeta `json:\"metadata\"`",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2154485616",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106915,
        "pr_file": "pkg/apis/secret/v0alpha1/secure_value.go",
        "discussion_id": "2154485616",
        "commented_code": "@@ -6,12 +6,8 @@ import (\n \n // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n type SecureValue struct {\n-\tmetav1.TypeMeta `json:\",inline\"`\n-\n-\t// Standard object's metadata. It can only be one of `metav1.ObjectMeta` or `metav1.ListMeta`.\n-\t// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n-\t// +optional\n-\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n+\tmetav1.TypeMeta   `json:\",inline\"`\n+\tmetav1.ObjectMeta `json:\"metadata\"`",
        "comment_created_at": "2025-06-18T12:34:02+00:00",
        "comment_author": "macabu",
        "comment_body": "Did the OpenAPI generation not work for this? ðŸ¤” I see other apps had their file changed",
        "pr_file_module": null
      },
      {
        "comment_id": "2154496779",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106915,
        "pr_file": "pkg/apis/secret/v0alpha1/secure_value.go",
        "discussion_id": "2154485616",
        "commented_code": "@@ -6,12 +6,8 @@ import (\n \n // +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object\n type SecureValue struct {\n-\tmetav1.TypeMeta `json:\",inline\"`\n-\n-\t// Standard object's metadata. It can only be one of `metav1.ObjectMeta` or `metav1.ListMeta`.\n-\t// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n-\t// +optional\n-\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n+\tmetav1.TypeMeta   `json:\",inline\"`\n+\tmetav1.ObjectMeta `json:\"metadata\"`",
        "comment_created_at": "2025-06-18T12:39:44+00:00",
        "comment_author": "ryantxu",
        "comment_body": "Good catch! I ran the generation, *then* removed the \"+optional\" comment -- the codegen would treat either as optional, but in every case it is required for a real resource",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1602904378",
    "pr_number": 87954,
    "pr_file": "pkg/services/ngalert/api/tooling/definitions/provisioning_alert_rules.go",
    "created_at": "2024-05-16T08:54:11+00:00",
    "commented_code": "ForString            *string                              `json:\"-\" yaml:\"-\" hcl:\"for\"`\n \tAnnotations          *map[string]string                   `json:\"annotations,omitempty\" yaml:\"annotations,omitempty\" hcl:\"annotations\"`\n \tLabels               *map[string]string                   `json:\"labels,omitempty\" yaml:\"labels,omitempty\" hcl:\"labels\"`\n-\tIsPaused             bool                                 `json:\"isPaused\" yaml:\"isPaused\" hcl:\"is_paused\"`\n+\tIsPaused             bool                                 `json:\"isPaused,omitempty\" yaml:\"isPaused,omitempty\" hcl:\"is_paused\"`",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1602904378",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87954,
        "pr_file": "pkg/services/ngalert/api/tooling/definitions/provisioning_alert_rules.go",
        "discussion_id": "1602904378",
        "commented_code": "@@ -271,7 +271,7 @@ type AlertRuleExport struct {\n \tForString            *string                              `json:\"-\" yaml:\"-\" hcl:\"for\"`\n \tAnnotations          *map[string]string                   `json:\"annotations,omitempty\" yaml:\"annotations,omitempty\" hcl:\"annotations\"`\n \tLabels               *map[string]string                   `json:\"labels,omitempty\" yaml:\"labels,omitempty\" hcl:\"labels\"`\n-\tIsPaused             bool                                 `json:\"isPaused\" yaml:\"isPaused\" hcl:\"is_paused\"`\n+\tIsPaused             bool                                 `json:\"isPaused,omitempty\" yaml:\"isPaused,omitempty\" hcl:\"is_paused\"`",
        "comment_created_at": "2024-05-16T08:54:11+00:00",
        "comment_author": "theSuess",
        "comment_body": "The OpenAPI Spec has this as not required (= the generated go client has it as `omitempty`) so I'm reflecting the change here",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1602904510",
    "pr_number": 87954,
    "pr_file": "pkg/services/ngalert/api/tooling/definitions/provisioning_alert_rules.go",
    "created_at": "2024-05-16T08:54:16+00:00",
    "commented_code": "type RelativeTimeRangeExport struct {\n \tFromSeconds int64 `json:\"from\" yaml:\"from\" hcl:\"from\"`\n-\tToSeconds   int64 `json:\"to\" yaml:\"to\" hcl:\"to\"`\n+\tToSeconds   int64 `json:\"to,omitempty\" yaml:\"to,omitempty\" hcl:\"to\"`",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1602904510",
        "repo_full_name": "grafana/grafana",
        "pr_number": 87954,
        "pr_file": "pkg/services/ngalert/api/tooling/definitions/provisioning_alert_rules.go",
        "discussion_id": "1602904510",
        "commented_code": "@@ -287,7 +287,7 @@ type AlertQueryExport struct {\n \n type RelativeTimeRangeExport struct {\n \tFromSeconds int64 `json:\"from\" yaml:\"from\" hcl:\"from\"`\n-\tToSeconds   int64 `json:\"to\" yaml:\"to\" hcl:\"to\"`\n+\tToSeconds   int64 `json:\"to,omitempty\" yaml:\"to,omitempty\" hcl:\"to\"`",
        "comment_created_at": "2024-05-16T08:54:16+00:00",
        "comment_author": "theSuess",
        "comment_body": "The OpenAPI Spec has this as not required (= the generated go client has it as `omitempty`) so I'm reflecting the change here",
        "pr_file_module": null
      }
    ]
  }
]