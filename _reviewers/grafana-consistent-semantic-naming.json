[
  {
    "discussion_id": "1884596115",
    "pr_number": 97982,
    "pr_file": "public/app/plugins/panel/stat/common.ts",
    "created_at": "2024-12-13T22:10:03+00:00",
    "commented_code": "},\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1884596115",
        "repo_full_name": "grafana/grafana",
        "pr_number": 97982,
        "pr_file": "public/app/plugins/panel/stat/common.ts",
        "discussion_id": "1884596115",
        "commented_code": "@@ -85,6 +85,21 @@ export function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n       },\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
        "comment_created_at": "2024-12-13T22:10:03+00:00",
        "comment_author": "gelicia",
        "comment_body": "The sort transformation doesn't categorize it like this, there's just the default and a reverse boolean. Maybe I should change to ascending / descending?",
        "pr_file_module": null
      },
      {
        "comment_id": "1925576113",
        "repo_full_name": "grafana/grafana",
        "pr_number": 97982,
        "pr_file": "public/app/plugins/panel/stat/common.ts",
        "discussion_id": "1884596115",
        "commented_code": "@@ -85,6 +85,21 @@ export function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n       },\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
        "comment_created_at": "2025-01-22T16:00:46+00:00",
        "comment_author": "drew08t",
        "comment_body": "Maybe I'm misunderstanding the suggestion, but we want `none` to be default though, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "1925881973",
        "repo_full_name": "grafana/grafana",
        "pr_number": 97982,
        "pr_file": "public/app/plugins/panel/stat/common.ts",
        "discussion_id": "1884596115",
        "commented_code": "@@ -85,6 +85,21 @@ export function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n       },\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
        "comment_created_at": "2025-01-22T19:52:21+00:00",
        "comment_author": "gelicia",
        "comment_body": "@drew08t None is the default, yeah. My question is the sort options being A-Z and Z-A where maybe it should be the more generic ascending or descending. Not changing the implementation, just the labelling. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1925924516",
        "repo_full_name": "grafana/grafana",
        "pr_number": 97982,
        "pr_file": "public/app/plugins/panel/stat/common.ts",
        "discussion_id": "1884596115",
        "commented_code": "@@ -85,6 +85,21 @@ export function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n       },\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
        "comment_created_at": "2025-01-22T20:31:41+00:00",
        "comment_author": "drew08t",
        "comment_body": "Oh! Hah! My bad. Yeah, in that case it makes sense to make it consistent. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1926084123",
        "repo_full_name": "grafana/grafana",
        "pr_number": 97982,
        "pr_file": "public/app/plugins/panel/stat/common.ts",
        "discussion_id": "1884596115",
        "commented_code": "@@ -85,6 +85,21 @@ export function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n       },\n       defaultValue: '',\n     });\n+\n+    builder.addRadio({\n+      path: 'reduceOptions.sort',\n+      name: 'Sort',\n+      description: 'Sort by field display name',\n+      category: valueOptionsCategory,\n+      settings: {\n+        options: [\n+          { value: SortWithReducer.None, label: 'None' },",
        "comment_created_at": "2025-01-22T22:55:13+00:00",
        "comment_author": "gelicia",
        "comment_body": "Okay, updated to use the same options as in tooltip's sorting. Updated the sample dashboard in the description as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070696643",
    "pr_number": 104207,
    "pr_file": "public/app/features/dashboard-scene/utils/interactions.ts",
    "created_at": "2025-05-01T19:25:34+00:00",
    "commented_code": "showMoreVersionsClicked: () => {\n     reportDashboardInteraction('show_more_versions_clicked');\n   },\n+\n+  // Image export interactions\n+  imageGeneration: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_generation', properties);\n+  },\n+  imageDownload: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_download', properties);\n+  },",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2070696643",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/utils/interactions.ts",
        "discussion_id": "2070696643",
        "commented_code": "@@ -124,6 +124,14 @@ export const DashboardInteractions = {\n   showMoreVersionsClicked: () => {\n     reportDashboardInteraction('show_more_versions_clicked');\n   },\n+\n+  // Image export interactions\n+  imageGeneration: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_generation', properties);\n+  },\n+  imageDownload: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_download', properties);\n+  },",
        "comment_created_at": "2025-05-01T19:25:34+00:00",
        "comment_author": "nmarrs",
        "comment_body": "happy with this naming convention for analytics events? cc @danmm-grafana ",
        "pr_file_module": null
      },
      {
        "comment_id": "2071843611",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/utils/interactions.ts",
        "discussion_id": "2070696643",
        "commented_code": "@@ -124,6 +124,14 @@ export const DashboardInteractions = {\n   showMoreVersionsClicked: () => {\n     reportDashboardInteraction('show_more_versions_clicked');\n   },\n+\n+  // Image export interactions\n+  imageGeneration: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_generation', properties);\n+  },\n+  imageDownload: (properties?: Record<string, unknown>) => {\n+    reportDashboardInteraction('image_download', properties);\n+  },",
        "comment_created_at": "2025-05-02T16:11:54+00:00",
        "comment_author": "danmm-grafana",
        "comment_body": "in src/public/reports/ReportFormV2/reportingInteractions.ts Eze used a format more akin to \"image_generated\" and \"image_downloaded\". shall we use the same pattern here too?\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2078381392",
    "pr_number": 104207,
    "pr_file": "packages/grafana-data/src/types/featureToggles.gen.ts",
    "created_at": "2025-05-07T19:55:17+00:00",
    "commented_code": "* @default true\n   */\n   alertingBulkActionsInUI?: boolean;\n+  /**\n+  * Enables image sharing functionality for dashboards and their panels\n+  */\n+  dashboardImageSharing?: boolean;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2078381392",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "packages/grafana-data/src/types/featureToggles.gen.ts",
        "discussion_id": "2078381392",
        "commented_code": "@@ -1031,4 +1031,8 @@ export interface FeatureToggles {\n   * @default true\n   */\n   alertingBulkActionsInUI?: boolean;\n+  /**\n+  * Enables image sharing functionality for dashboards and their panels\n+  */\n+  dashboardImageSharing?: boolean;",
        "comment_created_at": "2025-05-07T19:55:17+00:00",
        "comment_author": "lucychen-grafana",
        "comment_body": "Maybe a better name would be `exportDashboardImage`? 'Sharing' is very general",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2166416983",
    "pr_number": 107089,
    "pr_file": "public/app/features/browse-dashboards/hooks/useProvisionedFolderFormData.ts",
    "created_at": "2025-06-25T10:49:14+00:00",
    "commented_code": "+import { useMemo } from 'react';\n+\n+import { Folder } from 'app/api/clients/folder/v1beta1';\n+import { RepositoryView } from 'app/api/clients/provisioning/v0alpha1';\n+import { AnnoKeySourcePath } from 'app/features/apiserver/types';\n+import { getDefaultWorkflow, getWorkflowOptions } from 'app/features/dashboard-scene/saving/provisioned/defaults';\n+import { useGetResourceRepositoryView } from 'app/features/provisioning/hooks/useGetResourceRepositoryView';\n+\n+import { BaseProvisionedFormData } from '../../dashboard-scene/saving/shared';\n+\n+export interface UseProvisionedFolderFormDataProps {\n+  folderUid?: string;\n+  action: 'create' | 'delete';\n+  title?: string;\n+}\n+\n+export interface ProvisionedFolderFormDataResult {\n+  repository?: RepositoryView;\n+  folder?: Folder;\n+  workflowOptions: Array<{ label: string; value: string }>;\n+  isGitHub: boolean;\n+  initialValues?: BaseProvisionedFormData;\n+}\n+\n+/**\n+ * Hook for managing provisioned folder create/delete form data.\n+ */\n+export function useProvisionedFolderFormData({\n+  folderUid,\n+  action,\n+  title,\n+}: UseProvisionedFolderFormDataProps): ProvisionedFolderFormDataResult {\n+  const { repository, folder, isLoading } = useGetResourceRepositoryView({ folderName: folderUid });\n+\n+  const workflowOptions = getWorkflowOptions(repository);\n+  const isGitHub = Boolean(repository?.type === 'github');\n+\n+  const initialValues = useMemo(() => {\n+    // Only create initial values when we have the data\n+    if (!repository || !folder || isLoading) {\n+      return undefined;\n+    }\n+\n+    return {\n+      title: title || '',\n+      comment: '',\n+      ref: `${action}-folder-${Date.now()}`,",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2166416983",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107089,
        "pr_file": "public/app/features/browse-dashboards/hooks/useProvisionedFolderFormData.ts",
        "discussion_id": "2166416983",
        "commented_code": "@@ -0,0 +1,61 @@\n+import { useMemo } from 'react';\n+\n+import { Folder } from 'app/api/clients/folder/v1beta1';\n+import { RepositoryView } from 'app/api/clients/provisioning/v0alpha1';\n+import { AnnoKeySourcePath } from 'app/features/apiserver/types';\n+import { getDefaultWorkflow, getWorkflowOptions } from 'app/features/dashboard-scene/saving/provisioned/defaults';\n+import { useGetResourceRepositoryView } from 'app/features/provisioning/hooks/useGetResourceRepositoryView';\n+\n+import { BaseProvisionedFormData } from '../../dashboard-scene/saving/shared';\n+\n+export interface UseProvisionedFolderFormDataProps {\n+  folderUid?: string;\n+  action: 'create' | 'delete';\n+  title?: string;\n+}\n+\n+export interface ProvisionedFolderFormDataResult {\n+  repository?: RepositoryView;\n+  folder?: Folder;\n+  workflowOptions: Array<{ label: string; value: string }>;\n+  isGitHub: boolean;\n+  initialValues?: BaseProvisionedFormData;\n+}\n+\n+/**\n+ * Hook for managing provisioned folder create/delete form data.\n+ */\n+export function useProvisionedFolderFormData({\n+  folderUid,\n+  action,\n+  title,\n+}: UseProvisionedFolderFormDataProps): ProvisionedFolderFormDataResult {\n+  const { repository, folder, isLoading } = useGetResourceRepositoryView({ folderName: folderUid });\n+\n+  const workflowOptions = getWorkflowOptions(repository);\n+  const isGitHub = Boolean(repository?.type === 'github');\n+\n+  const initialValues = useMemo(() => {\n+    // Only create initial values when we have the data\n+    if (!repository || !folder || isLoading) {\n+      return undefined;\n+    }\n+\n+    return {\n+      title: title || '',\n+      comment: '',\n+      ref: `${action}-folder-${Date.now()}`,",
        "comment_created_at": "2025-06-25T10:49:14+00:00",
        "comment_author": "Clarity-89",
        "comment_body": "Can we use the same logic for branches here as for dashboards, e.g., ``folder/${generateTimestamp()}``?",
        "pr_file_module": null
      }
    ]
  }
]