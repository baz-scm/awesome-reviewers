[
  {
    "discussion_id": "2139951734",
    "pr_number": 106301,
    "pr_file": "packages/grafana-data/src/text/sanitize.ts",
    "created_at": "2025-06-11T11:59:08+00:00",
    "commented_code": "*/\n export function sanitize(unsanitizedString: string): string {\n   try {\n+    // hook to handle anchor elements with target=\"_blank\"\n+    DOMPurify.addHook('afterSanitizeAttributes', function (node) {\n+      if (node.tagName === 'A' && node.getAttribute('target') === '_blank') {\n+        const currentRel = node.getAttribute('rel') || '';\n+        const relValues = new Set(currentRel.split(/\\s+/).filter(Boolean));\n+\n+        relValues.add('noopener');",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2139951734",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106301,
        "pr_file": "packages/grafana-data/src/text/sanitize.ts",
        "discussion_id": "2139951734",
        "commented_code": "@@ -56,13 +56,29 @@ const sanitizeTextPanelWhitelist = new xss.FilterXSS({\n  */\n export function sanitize(unsanitizedString: string): string {\n   try {\n+    // hook to handle anchor elements with target=\"_blank\"\n+    DOMPurify.addHook('afterSanitizeAttributes', function (node) {\n+      if (node.tagName === 'A' && node.getAttribute('target') === '_blank') {\n+        const currentRel = node.getAttribute('rel') || '';\n+        const relValues = new Set(currentRel.split(/\\s+/).filter(Boolean));\n+\n+        relValues.add('noopener');",
        "comment_created_at": "2025-06-11T11:59:08+00:00",
        "comment_author": "jesdavpet",
        "comment_body": "**comment(non-blocking):** :speech_balloon: My understanding is that `_blank` should provide behaviour equivalent to `noopener` implicitly / by default @adela-almasan .\r\n\r\n- SEE: https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/rel/noopener\r\n\r\nHowever, I think the _\"belt and suspenders\"_ approach of explicitly setting that attribute in this case is very clear _(no HTML trivia knowledge needed)_ and does no harm.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1449230628",
    "pr_number": 80175,
    "pr_file": "public/app/plugins/datasource/influxdb/datasource.ts",
    "created_at": "2024-01-11T18:11:23+00:00",
    "commented_code": "if (typeof value === 'string') {\n     // Check the value is a number. If not run to escape special characters\n     if (isNaN(parseFloat(value))) {\n-      return escapeRegex(value);\n+      //     value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n+      return value.replace(/[\\\\^'$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n     }\n   }\n \n   return value;\n }\n \n export function influxSpecialRegexEscape(value: string | string[]) {\n-  if (typeof value !== 'string') {\n-    return value;\n-  }\n-  value = value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\');\n-  value = value.replace(/[$^*{}\\[\\]\\'+?.()|]/g, '$&');\n-  return value;\n+  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]'+?.()|\\/]/g, '\\\\$&') : value;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1449230628",
        "repo_full_name": "grafana/grafana",
        "pr_number": 80175,
        "pr_file": "public/app/plugins/datasource/influxdb/datasource.ts",
        "discussion_id": "1449230628",
        "commented_code": "@@ -786,18 +788,14 @@\n   if (typeof value === 'string') {\n     // Check the value is a number. If not run to escape special characters\n     if (isNaN(parseFloat(value))) {\n-      return escapeRegex(value);\n+      //     value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n+      return value.replace(/[\\\\^'$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n     }\n   }\n \n   return value;\n }\n \n export function influxSpecialRegexEscape(value: string | string[]) {\n-  if (typeof value !== 'string') {\n-    return value;\n-  }\n-  value = value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\');\n-  value = value.replace(/[$^*{}\\[\\]\\'+?.()|]/g, '$&');\n-  return value;\n+  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]'+?.()|\\/]/g, '\\\\$&') : value;",
        "comment_created_at": "2024-01-11T18:11:23+00:00",
        "comment_author": "github-advanced-security[bot]",
        "comment_body": "## Incomplete string escaping or encoding\n\nThis does not escape backslash characters in the input.\n\n[Show more details](https://github.com/grafana/grafana/security/code-scanning/508)",
        "pr_file_module": null
      }
    ]
  }
]