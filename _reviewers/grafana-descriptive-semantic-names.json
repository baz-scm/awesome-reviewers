[
  {
    "discussion_id": "2167380759",
    "pr_number": 107001,
    "pr_file": "public/app/plugins/panel/canvas/components/connections/Connections2.tsx",
    "created_at": "2025-06-25T18:43:57+00:00",
    "commented_code": "+import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+\n+import { config } from '@grafana/runtime';\n+import { CanvasConnection, ConnectionCoordinates, ConnectionPath } from 'app/features/canvas/element';\n+import { ElementState } from 'app/features/canvas/runtime/element';\n+import { Scene } from 'app/features/canvas/runtime/scene';\n+import { findElementByTarget } from 'app/features/canvas/runtime/sceneElementManagement';\n+\n+import { ConnectionState } from '../../types';\n+import {\n+  calculateAngle,\n+  calculateCoordinates2,\n+  getConnections,\n+  getElementTransformAndDimensions,\n+  getNormalizedRotatedOffset,\n+  getParentBoundingClientRect,\n+  isConnectionSource,\n+  isConnectionTarget,\n+} from '../../utils';\n+\n+import {\n+  CONNECTION_ANCHOR_ALT,\n+  ConnectionAnchors,\n+  CONNECTION_ANCHOR_HIGHLIGHT_OFFSET,\n+  ANCHORS,\n+  ANCHOR_PADDING,\n+  HALF_SIZE,\n+} from './ConnectionAnchors';\n+import { ConnectionSVG } from './ConnectionSVG2';\n+\n+export const CONNECTION_VERTEX_ID = 'vertex';\n+export const CONNECTION_VERTEX_ADD_ID = 'vertexAdd';\n+const CONNECTION_VERTEX_ORTHO_TOLERANCE = 0.05; // Cartesian ratio against vertical or horizontal tolerance\n+const CONNECTION_VERTEX_SNAP_TOLERANCE = (5 / 180) * Math.PI; // Multi-segment snapping angle in radians to trigger vertex removal\n+\n+export class Connections2 {\n+  scene: Scene;\n+  connectionAnchorDiv?: HTMLDivElement;\n+  anchorsDiv?: HTMLDivElement;\n+  connectionLine?: SVGLineElement;\n+  connectionVertexPath?: SVGPathElement;\n+  connectionVertex?: SVGCircleElement;\n+  connectionsSVG?: SVGElement;\n+  connectionSource?: ElementState;\n+  connectionTarget?: ElementState;\n+  isDrawingConnection?: boolean;\n+  selectedVertexIndex?: number;\n+  didConnectionLeaveHighlight?: boolean;\n+  state: ConnectionState[] = [];\n+  readonly selection = new BehaviorSubject<ConnectionState | undefined>(undefined);\n+\n+  constructor(scene: Scene) {\n+    this.scene = scene;\n+    this.updateState();\n+  }\n+\n+  select = (connection: ConnectionState | undefined) => {\n+    if (connection === this.selection.value) {\n+      return;\n+    }\n+    this.selection.next(connection);\n+  };\n+\n+  updateState = () => {\n+    this.state = getConnections(this.scene.byName);\n+\n+    const s = this.selection.value;\n+    if (s) {\n+      for (let c of this.state) {\n+        if (c.source === s.source && c.index === s.index) {\n+          this.selection.next(c);\n+          break;\n+        }\n+      }\n+    }",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2167380759",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107001,
        "pr_file": "public/app/plugins/panel/canvas/components/connections/Connections2.tsx",
        "discussion_id": "2167380759",
        "commented_code": "@@ -0,0 +1,669 @@\n+import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+\n+import { config } from '@grafana/runtime';\n+import { CanvasConnection, ConnectionCoordinates, ConnectionPath } from 'app/features/canvas/element';\n+import { ElementState } from 'app/features/canvas/runtime/element';\n+import { Scene } from 'app/features/canvas/runtime/scene';\n+import { findElementByTarget } from 'app/features/canvas/runtime/sceneElementManagement';\n+\n+import { ConnectionState } from '../../types';\n+import {\n+  calculateAngle,\n+  calculateCoordinates2,\n+  getConnections,\n+  getElementTransformAndDimensions,\n+  getNormalizedRotatedOffset,\n+  getParentBoundingClientRect,\n+  isConnectionSource,\n+  isConnectionTarget,\n+} from '../../utils';\n+\n+import {\n+  CONNECTION_ANCHOR_ALT,\n+  ConnectionAnchors,\n+  CONNECTION_ANCHOR_HIGHLIGHT_OFFSET,\n+  ANCHORS,\n+  ANCHOR_PADDING,\n+  HALF_SIZE,\n+} from './ConnectionAnchors';\n+import { ConnectionSVG } from './ConnectionSVG2';\n+\n+export const CONNECTION_VERTEX_ID = 'vertex';\n+export const CONNECTION_VERTEX_ADD_ID = 'vertexAdd';\n+const CONNECTION_VERTEX_ORTHO_TOLERANCE = 0.05; // Cartesian ratio against vertical or horizontal tolerance\n+const CONNECTION_VERTEX_SNAP_TOLERANCE = (5 / 180) * Math.PI; // Multi-segment snapping angle in radians to trigger vertex removal\n+\n+export class Connections2 {\n+  scene: Scene;\n+  connectionAnchorDiv?: HTMLDivElement;\n+  anchorsDiv?: HTMLDivElement;\n+  connectionLine?: SVGLineElement;\n+  connectionVertexPath?: SVGPathElement;\n+  connectionVertex?: SVGCircleElement;\n+  connectionsSVG?: SVGElement;\n+  connectionSource?: ElementState;\n+  connectionTarget?: ElementState;\n+  isDrawingConnection?: boolean;\n+  selectedVertexIndex?: number;\n+  didConnectionLeaveHighlight?: boolean;\n+  state: ConnectionState[] = [];\n+  readonly selection = new BehaviorSubject<ConnectionState | undefined>(undefined);\n+\n+  constructor(scene: Scene) {\n+    this.scene = scene;\n+    this.updateState();\n+  }\n+\n+  select = (connection: ConnectionState | undefined) => {\n+    if (connection === this.selection.value) {\n+      return;\n+    }\n+    this.selection.next(connection);\n+  };\n+\n+  updateState = () => {\n+    this.state = getConnections(this.scene.byName);\n+\n+    const s = this.selection.value;\n+    if (s) {\n+      for (let c of this.state) {\n+        if (c.source === s.source && c.index === s.index) {\n+          this.selection.next(c);\n+          break;\n+        }\n+      }\n+    }",
        "comment_created_at": "2025-06-25T18:43:57+00:00",
        "comment_author": "jesdavpet",
        "comment_body": "**nit(non-blocking):** I realize this code was copied over from an _existing_ file -- but should we try to fix these variable names to convey more semantic meaning than just `s` or `c` while we're in there?\r\n\r\nFor example:\r\n```suggestion\r\n    const selection = this.selection.value;\r\n    if (selection) {\r\n      for (let connection of this.state) {\r\n        if (connection.source === selection.source && connection.index === selection.index) {\r\n          this.selection.next(connection);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2168658361",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107001,
        "pr_file": "public/app/plugins/panel/canvas/components/connections/Connections2.tsx",
        "discussion_id": "2167380759",
        "commented_code": "@@ -0,0 +1,669 @@\n+import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+\n+import { config } from '@grafana/runtime';\n+import { CanvasConnection, ConnectionCoordinates, ConnectionPath } from 'app/features/canvas/element';\n+import { ElementState } from 'app/features/canvas/runtime/element';\n+import { Scene } from 'app/features/canvas/runtime/scene';\n+import { findElementByTarget } from 'app/features/canvas/runtime/sceneElementManagement';\n+\n+import { ConnectionState } from '../../types';\n+import {\n+  calculateAngle,\n+  calculateCoordinates2,\n+  getConnections,\n+  getElementTransformAndDimensions,\n+  getNormalizedRotatedOffset,\n+  getParentBoundingClientRect,\n+  isConnectionSource,\n+  isConnectionTarget,\n+} from '../../utils';\n+\n+import {\n+  CONNECTION_ANCHOR_ALT,\n+  ConnectionAnchors,\n+  CONNECTION_ANCHOR_HIGHLIGHT_OFFSET,\n+  ANCHORS,\n+  ANCHOR_PADDING,\n+  HALF_SIZE,\n+} from './ConnectionAnchors';\n+import { ConnectionSVG } from './ConnectionSVG2';\n+\n+export const CONNECTION_VERTEX_ID = 'vertex';\n+export const CONNECTION_VERTEX_ADD_ID = 'vertexAdd';\n+const CONNECTION_VERTEX_ORTHO_TOLERANCE = 0.05; // Cartesian ratio against vertical or horizontal tolerance\n+const CONNECTION_VERTEX_SNAP_TOLERANCE = (5 / 180) * Math.PI; // Multi-segment snapping angle in radians to trigger vertex removal\n+\n+export class Connections2 {\n+  scene: Scene;\n+  connectionAnchorDiv?: HTMLDivElement;\n+  anchorsDiv?: HTMLDivElement;\n+  connectionLine?: SVGLineElement;\n+  connectionVertexPath?: SVGPathElement;\n+  connectionVertex?: SVGCircleElement;\n+  connectionsSVG?: SVGElement;\n+  connectionSource?: ElementState;\n+  connectionTarget?: ElementState;\n+  isDrawingConnection?: boolean;\n+  selectedVertexIndex?: number;\n+  didConnectionLeaveHighlight?: boolean;\n+  state: ConnectionState[] = [];\n+  readonly selection = new BehaviorSubject<ConnectionState | undefined>(undefined);\n+\n+  constructor(scene: Scene) {\n+    this.scene = scene;\n+    this.updateState();\n+  }\n+\n+  select = (connection: ConnectionState | undefined) => {\n+    if (connection === this.selection.value) {\n+      return;\n+    }\n+    this.selection.next(connection);\n+  };\n+\n+  updateState = () => {\n+    this.state = getConnections(this.scene.byName);\n+\n+    const s = this.selection.value;\n+    if (s) {\n+      for (let c of this.state) {\n+        if (c.source === s.source && c.index === s.index) {\n+          this.selection.next(c);\n+          break;\n+        }\n+      }\n+    }",
        "comment_created_at": "2025-06-26T09:43:51+00:00",
        "comment_author": "Develer",
        "comment_body": "Yes, good point, there are a lot of places to improve, let's merge this one and address it after as a follow-up. Also, after removing the feature flag, we can make this change in one place instead of two 😁",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2021537150",
    "pr_number": 103064,
    "pr_file": "public/app/features/plugins/extensions/utils.tsx",
    "created_at": "2025-03-31T18:06:32+00:00",
    "commented_code": "loading,\n       value: pluginMeta,\n     } = useAsync(() => getPluginSettings(pluginId, { showErrorAlert: false }));\n+    const { value: isSandboxEnabled } = useAsync(() => isPluginFrontendSandboxEligible({ isAngular: false, pluginId }));",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2021537150",
        "repo_full_name": "grafana/grafana",
        "pr_number": 103064,
        "pr_file": "public/app/features/plugins/extensions/utils.tsx",
        "discussion_id": "2021537150",
        "commented_code": "@@ -73,6 +75,7 @@ export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.Com\n       loading,\n       value: pluginMeta,\n     } = useAsync(() => getPluginSettings(pluginId, { showErrorAlert: false }));\n+    const { value: isSandboxEnabled } = useAsync(() => isPluginFrontendSandboxEligible({ isAngular: false, pluginId }));",
        "comment_created_at": "2025-03-31T18:06:32+00:00",
        "comment_author": "academo",
        "comment_body": "you should be using `shouldLoadPluginInFrontendSandbox` instead.\r\n\r\n`isPluginFrontendSandboxEligible` is much faster since doesn't require extra http calls. if you are ok with this returning true even for plugins with the sandbox disabled you can use it.\r\n\r\nhaving the extension wrapped in the div with the attribute while the sandbox is disabled won't cause any side effect, but in that case we might as well always wrap the extension in the wrapper instead of calling the method",
        "pr_file_module": null
      },
      {
        "comment_id": "2158820725",
        "repo_full_name": "grafana/grafana",
        "pr_number": 103064,
        "pr_file": "public/app/features/plugins/extensions/utils.tsx",
        "discussion_id": "2021537150",
        "commented_code": "@@ -73,6 +75,7 @@ export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.Com\n       loading,\n       value: pluginMeta,\n     } = useAsync(() => getPluginSettings(pluginId, { showErrorAlert: false }));\n+    const { value: isSandboxEnabled } = useAsync(() => isPluginFrontendSandboxEligible({ isAngular: false, pluginId }));",
        "comment_created_at": "2025-06-20T12:13:47+00:00",
        "comment_author": "leventebalogh",
        "comment_body": "Very good point, updated 👍 ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2164907308",
    "pr_number": 107001,
    "pr_file": "public/app/features/canvas/runtime/element.tsx",
    "created_at": "2025-06-24T21:07:20+00:00",
    "commented_code": "case HorizontalConstraint.Left:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.left = `${placement.left}px`;\n+        style.left = `${placement.left}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Right:\n         placement.right = placement.right ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.right = `${placement.right}px`;\n+        style.right = `${placement.right}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.left;\n+        delete placement.left;\n         break;\n       case HorizontalConstraint.LeftRight:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}px`;\n-        // style.right = `${placement.right}px`;\n-        // delete placement.width;\n+        style.left = `${placement.left}px`;\n+        style.right = `${placement.right}px`;\n+        delete placement.width;\n         style.width = '';\n         break;\n       case HorizontalConstraint.Center:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // translate[0] = '-50%';\n-        // style.left = `calc(50% - ${placement.left}px)`;\n+        translate[0] = '-50%';\n+        style.left = `calc(50% - ${placement.left}px)`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Scale:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}%`;\n-        // style.right = `${placement.right}%`;\n-        // delete placement.width;\n+        style.left = `${placement.left}%`;\n+        style.right = `${placement.right}%`;\n+        delete placement.width;\n         style.width = '';\n         break;\n     }\n+\n+    style.transform = `translate(${translate[0]}, ${translate[1]})`;\n     this.options.placement = placement;\n+    this.sizeStyle = style;\n \n-    let transformY = '0px';\n-    if (vertical === VerticalConstraint.Bottom) {\n-      transformY = `${sceneHeight! - (placement.bottom ?? 0) - (placement.height ?? 100)}px`;\n-    } else if (vertical === VerticalConstraint.Top) {\n-      transformY = `${placement.top ?? 0}px`;\n-    } else if (vertical === VerticalConstraint.TopBottom) {\n-      transformY = `${placement.top ?? 0}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) - (placement.bottom ?? 0)}px`;\n-    } else if (vertical === VerticalConstraint.Center) {\n-      transformY = `${sceneHeight! / 2 - (placement.top ?? 0) - (placement.height ?? 0) / 2}px`;\n-    } else if (vertical === VerticalConstraint.Scale) {\n-      transformY = `${(placement.top ?? 0) * (sceneHeight! / 100)}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) * (sceneHeight! / 100) - (placement.bottom ?? 0) * (sceneHeight! / 100)}px`;\n+    if (this.div) {\n+      for (const key in this.sizeStyle) {\n+        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+        this.div.style[key as any] = (this.sizeStyle as any)[key];\n+      }\n+\n+      // TODO: This is a hack, we should have a better way to handle this\n+      const elementType = this.options.type;\n+      if (!SVGElements.has(elementType)) {\n+        // apply styles to div if it's not an SVG element\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = (this.dataStyle as any)[key];\n+        }\n+      } else {\n+        // ELEMENT IS SVG\n+        // clean data styles from div if it's an SVG element; SVG elements have their own data styles;\n+        // this is necessary for changing type of element cases;\n+        // wrapper div element (this.div) doesn't re-render (has static `key` property),\n+        // so we have to clean styles manually;\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = '';\n+        }\n+      }\n     }\n+  }\n+\n+  /** Use the configured options to update CSS style properties directly on the wrapper div **/\n+  applyLayoutStylesToDiv2(disablePointerEvents?: boolean) {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2164907308",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107001,
        "pr_file": "public/app/features/canvas/runtime/element.tsx",
        "discussion_id": "2164907308",
        "commented_code": "@@ -175,76 +177,180 @@ export class ElementState implements LayerElement {\n       case HorizontalConstraint.Left:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.left = `${placement.left}px`;\n+        style.left = `${placement.left}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Right:\n         placement.right = placement.right ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.right = `${placement.right}px`;\n+        style.right = `${placement.right}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.left;\n+        delete placement.left;\n         break;\n       case HorizontalConstraint.LeftRight:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}px`;\n-        // style.right = `${placement.right}px`;\n-        // delete placement.width;\n+        style.left = `${placement.left}px`;\n+        style.right = `${placement.right}px`;\n+        delete placement.width;\n         style.width = '';\n         break;\n       case HorizontalConstraint.Center:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // translate[0] = '-50%';\n-        // style.left = `calc(50% - ${placement.left}px)`;\n+        translate[0] = '-50%';\n+        style.left = `calc(50% - ${placement.left}px)`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Scale:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}%`;\n-        // style.right = `${placement.right}%`;\n-        // delete placement.width;\n+        style.left = `${placement.left}%`;\n+        style.right = `${placement.right}%`;\n+        delete placement.width;\n         style.width = '';\n         break;\n     }\n+\n+    style.transform = `translate(${translate[0]}, ${translate[1]})`;\n     this.options.placement = placement;\n+    this.sizeStyle = style;\n \n-    let transformY = '0px';\n-    if (vertical === VerticalConstraint.Bottom) {\n-      transformY = `${sceneHeight! - (placement.bottom ?? 0) - (placement.height ?? 100)}px`;\n-    } else if (vertical === VerticalConstraint.Top) {\n-      transformY = `${placement.top ?? 0}px`;\n-    } else if (vertical === VerticalConstraint.TopBottom) {\n-      transformY = `${placement.top ?? 0}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) - (placement.bottom ?? 0)}px`;\n-    } else if (vertical === VerticalConstraint.Center) {\n-      transformY = `${sceneHeight! / 2 - (placement.top ?? 0) - (placement.height ?? 0) / 2}px`;\n-    } else if (vertical === VerticalConstraint.Scale) {\n-      transformY = `${(placement.top ?? 0) * (sceneHeight! / 100)}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) * (sceneHeight! / 100) - (placement.bottom ?? 0) * (sceneHeight! / 100)}px`;\n+    if (this.div) {\n+      for (const key in this.sizeStyle) {\n+        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+        this.div.style[key as any] = (this.sizeStyle as any)[key];\n+      }\n+\n+      // TODO: This is a hack, we should have a better way to handle this\n+      const elementType = this.options.type;\n+      if (!SVGElements.has(elementType)) {\n+        // apply styles to div if it's not an SVG element\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = (this.dataStyle as any)[key];\n+        }\n+      } else {\n+        // ELEMENT IS SVG\n+        // clean data styles from div if it's an SVG element; SVG elements have their own data styles;\n+        // this is necessary for changing type of element cases;\n+        // wrapper div element (this.div) doesn't re-render (has static `key` property),\n+        // so we have to clean styles manually;\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = '';\n+        }\n+      }\n     }\n+  }\n+\n+  /** Use the configured options to update CSS style properties directly on the wrapper div **/\n+  applyLayoutStylesToDiv2(disablePointerEvents?: boolean) {",
        "comment_created_at": "2025-06-24T21:07:20+00:00",
        "comment_author": "fastfrwrd",
        "comment_body": "naming question. when the flag is at 100% and the current behavior is deprecated, can this method's `2` be removed? If so, I'm down to call this `2`, but if it will always need the `2` to make sense, I feel like we need a different name.",
        "pr_file_module": null
      },
      {
        "comment_id": "2166502634",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107001,
        "pr_file": "public/app/features/canvas/runtime/element.tsx",
        "discussion_id": "2164907308",
        "commented_code": "@@ -175,76 +177,180 @@ export class ElementState implements LayerElement {\n       case HorizontalConstraint.Left:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.left = `${placement.left}px`;\n+        style.left = `${placement.left}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Right:\n         placement.right = placement.right ?? 0;\n         placement.width = placement.width ?? 100;\n-        // style.right = `${placement.right}px`;\n+        style.right = `${placement.right}px`;\n         style.width = `${placement.width}px`;\n-        // delete placement.left;\n+        delete placement.left;\n         break;\n       case HorizontalConstraint.LeftRight:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}px`;\n-        // style.right = `${placement.right}px`;\n-        // delete placement.width;\n+        style.left = `${placement.left}px`;\n+        style.right = `${placement.right}px`;\n+        delete placement.width;\n         style.width = '';\n         break;\n       case HorizontalConstraint.Center:\n         placement.left = placement.left ?? 0;\n         placement.width = placement.width ?? 100;\n-        // translate[0] = '-50%';\n-        // style.left = `calc(50% - ${placement.left}px)`;\n+        translate[0] = '-50%';\n+        style.left = `calc(50% - ${placement.left}px)`;\n         style.width = `${placement.width}px`;\n-        // delete placement.right;\n+        delete placement.right;\n         break;\n       case HorizontalConstraint.Scale:\n         placement.left = placement.left ?? 0;\n         placement.right = placement.right ?? 0;\n-        // style.left = `${placement.left}%`;\n-        // style.right = `${placement.right}%`;\n-        // delete placement.width;\n+        style.left = `${placement.left}%`;\n+        style.right = `${placement.right}%`;\n+        delete placement.width;\n         style.width = '';\n         break;\n     }\n+\n+    style.transform = `translate(${translate[0]}, ${translate[1]})`;\n     this.options.placement = placement;\n+    this.sizeStyle = style;\n \n-    let transformY = '0px';\n-    if (vertical === VerticalConstraint.Bottom) {\n-      transformY = `${sceneHeight! - (placement.bottom ?? 0) - (placement.height ?? 100)}px`;\n-    } else if (vertical === VerticalConstraint.Top) {\n-      transformY = `${placement.top ?? 0}px`;\n-    } else if (vertical === VerticalConstraint.TopBottom) {\n-      transformY = `${placement.top ?? 0}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) - (placement.bottom ?? 0)}px`;\n-    } else if (vertical === VerticalConstraint.Center) {\n-      transformY = `${sceneHeight! / 2 - (placement.top ?? 0) - (placement.height ?? 0) / 2}px`;\n-    } else if (vertical === VerticalConstraint.Scale) {\n-      transformY = `${(placement.top ?? 0) * (sceneHeight! / 100)}px`;\n-      style.height = `${sceneHeight! - (placement.top ?? 0) * (sceneHeight! / 100) - (placement.bottom ?? 0) * (sceneHeight! / 100)}px`;\n+    if (this.div) {\n+      for (const key in this.sizeStyle) {\n+        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+        this.div.style[key as any] = (this.sizeStyle as any)[key];\n+      }\n+\n+      // TODO: This is a hack, we should have a better way to handle this\n+      const elementType = this.options.type;\n+      if (!SVGElements.has(elementType)) {\n+        // apply styles to div if it's not an SVG element\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = (this.dataStyle as any)[key];\n+        }\n+      } else {\n+        // ELEMENT IS SVG\n+        // clean data styles from div if it's an SVG element; SVG elements have their own data styles;\n+        // this is necessary for changing type of element cases;\n+        // wrapper div element (this.div) doesn't re-render (has static `key` property),\n+        // so we have to clean styles manually;\n+        for (const key in this.dataStyle) {\n+          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n+          this.div.style[key as any] = '';\n+        }\n+      }\n     }\n+  }\n+\n+  /** Use the configured options to update CSS style properties directly on the wrapper div **/\n+  applyLayoutStylesToDiv2(disablePointerEvents?: boolean) {",
        "comment_created_at": "2025-06-25T11:38:15+00:00",
        "comment_author": "Develer",
        "comment_body": "no, this method with `2` will stay after we remove the feature flag, so we're gonna rename it by removing `2` in the end;\r\nat least that's the approach we usually take",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1636918140",
    "pr_number": 89138,
    "pr_file": "public/app/features/alerting/unified/components/rules/central-state-history/CentralAlertHistory.tsx",
    "created_at": "2024-06-12T18:29:47+00:00",
    "commented_code": "} from 'app/types/unified-alerting-dto';\n \n import { stateHistoryApi } from '../../../api/stateHistoryApi';\n-import { GRAFANA_DATASOURCE_NAME } from '../../../utils/datasource';\n+import { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1636918140",
        "repo_full_name": "grafana/grafana",
        "pr_number": 89138,
        "pr_file": "public/app/features/alerting/unified/components/rules/central-state-history/CentralAlertHistory.tsx",
        "discussion_id": "1636918140",
        "commented_code": "@@ -31,7 +31,7 @@ import {\n } from 'app/types/unified-alerting-dto';\n \n import { stateHistoryApi } from '../../../api/stateHistoryApi';\n-import { GRAFANA_DATASOURCE_NAME } from '../../../utils/datasource';\n+import { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';",
        "comment_created_at": "2024-06-12T18:29:47+00:00",
        "comment_author": "tomratcliffe",
        "comment_body": "Using this instead of the other one, as the alert rule URLs were including `-- Grafana --`, and while they worked, it'd be nicer to have them the same as the main `view` URLs",
        "pr_file_module": null
      },
      {
        "comment_id": "1638009937",
        "repo_full_name": "grafana/grafana",
        "pr_number": 89138,
        "pr_file": "public/app/features/alerting/unified/components/rules/central-state-history/CentralAlertHistory.tsx",
        "discussion_id": "1636918140",
        "commented_code": "@@ -31,7 +31,7 @@ import {\n } from 'app/types/unified-alerting-dto';\n \n import { stateHistoryApi } from '../../../api/stateHistoryApi';\n-import { GRAFANA_DATASOURCE_NAME } from '../../../utils/datasource';\n+import { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';",
        "comment_created_at": "2024-06-13T10:55:29+00:00",
        "comment_author": "soniaAguilarPeiron",
        "comment_body": "💯! good catch!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1437178214",
    "pr_number": 76009,
    "pr_file": "public/app/plugins/panel/nodeGraph/module.tsx",
    "created_at": "2023-12-27T17:50:41+00:00",
    "commented_code": "});\n     },\n   });\n+  builder.addNestedOptions({\n+    category: ['Node names'],",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1437178214",
        "repo_full_name": "grafana/grafana",
        "pr_number": 76009,
        "pr_file": "public/app/plugins/panel/nodeGraph/module.tsx",
        "discussion_id": "1437178214",
        "commented_code": "@@ -39,4 +46,150 @@ export const plugin = new PanelPlugin<NodeGraphOptions>(NodeGraphPanel).setPanel\n       });\n     },\n   });\n+  builder.addNestedOptions({\n+    category: ['Node names'],",
        "comment_created_at": "2023-12-27T17:50:41+00:00",
        "comment_author": "aocenas",
        "comment_body": "Would probably give a different name for the section like \"Node field name overrides\". It is a bit lengthy but otherwise, there is not much to indicate what this section is about.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1432677076",
    "pr_number": 79688,
    "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPreviousWrapper.tsx",
    "created_at": "2023-12-20T12:51:15+00:00",
    "commented_code": "+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { useStyles2 } from '@grafana/ui';\n+import { useQueryParams } from 'app/core/hooks/useQueryParams';\n+\n+import { ReturnToPrevious } from './ReturnToPrevious';\n+\n+export const ReturnToPreviousWrapper = () => {\n+  const params = useQueryParams()[0];\n+  const [paramsExist, setParamsExist] = React.useState(params?.returnToTitle && params?.returnToUrl);",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1432677076",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79688,
        "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPreviousWrapper.tsx",
        "discussion_id": "1432677076",
        "commented_code": "@@ -0,0 +1,49 @@\n+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { useStyles2 } from '@grafana/ui';\n+import { useQueryParams } from 'app/core/hooks/useQueryParams';\n+\n+import { ReturnToPrevious } from './ReturnToPrevious';\n+\n+export const ReturnToPreviousWrapper = () => {\n+  const params = useQueryParams()[0];\n+  const [paramsExist, setParamsExist] = React.useState(params?.returnToTitle && params?.returnToUrl);",
        "comment_created_at": "2023-12-20T12:51:15+00:00",
        "comment_author": "torkelo",
        "comment_body": "could be good to use `__returnToTitle`  and `__returnToUrl` to lessen risk of conflict with url params used by the page. \r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1432719429",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79688,
        "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPreviousWrapper.tsx",
        "discussion_id": "1432677076",
        "commented_code": "@@ -0,0 +1,49 @@\n+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { useStyles2 } from '@grafana/ui';\n+import { useQueryParams } from 'app/core/hooks/useQueryParams';\n+\n+import { ReturnToPrevious } from './ReturnToPrevious';\n+\n+export const ReturnToPreviousWrapper = () => {\n+  const params = useQueryParams()[0];\n+  const [paramsExist, setParamsExist] = React.useState(params?.returnToTitle && params?.returnToUrl);",
        "comment_created_at": "2023-12-20T13:31:59+00:00",
        "comment_author": "amy-super",
        "comment_body": "I'm not worried about it working when a new tab is open, so if that makes things better, works for me!",
        "pr_file_module": null
      }
    ]
  }
]