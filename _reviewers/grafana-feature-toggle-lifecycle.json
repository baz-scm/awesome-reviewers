[
  {
    "discussion_id": "2073448506",
    "pr_number": 104638,
    "pr_file": "packages/grafana-prometheus/src/datasource.ts",
    "created_at": "2025-05-05T13:26:55+00:00",
    "commented_code": "utcOffsetSec: utcOffset * 60,\n     };\n \n-    if (config.featureToggles.promQLScope) {\n-      processedTarget.scopes = (request.scopes ?? []).map((scope) => ({\n-        name: scope.metadata.name,\n-        ...scope.spec,\n-      }));\n-    }\n-",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2073448506",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104638,
        "pr_file": "packages/grafana-prometheus/src/datasource.ts",
        "discussion_id": "2073448506",
        "commented_code": "@@ -409,13 +409,6 @@ export class PrometheusDatasource\n       utcOffsetSec: utcOffset * 60,\n     };\n \n-    if (config.featureToggles.promQLScope) {\n-      processedTarget.scopes = (request.scopes ?? []).map((scope) => ({\n-        name: scope.metadata.name,\n-        ...scope.spec,\n-      }));\n-    }\n-",
        "comment_created_at": "2025-05-05T13:26:55+00:00",
        "comment_author": "tskarhed",
        "comment_body": "This change should be undone, as Prometheus never uses `DataSourceWithBackend`'s query method",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171394906",
    "pr_number": 107293,
    "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
    "created_at": "2025-06-27T09:31:12+00:00",
    "commented_code": "* @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2171394906",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-06-27T09:31:12+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "@svennergr @matyax Can you please confirm that this is correct change. That we always want to use `fetchLabelsByLabelsEndpoint` and it does not depend on  `options?.streamSelector`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2171421629",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-06-27T09:41:05+00:00",
        "comment_author": "matyax",
        "comment_body": "Im OOO, but pinging @gtk-grafana to be sure. Thanks for checking!",
        "pr_file_module": null
      },
      {
        "comment_id": "2171447356",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-06-27T09:50:39+00:00",
        "comment_author": "itsmylife",
        "comment_body": "@ivanahuckova I think this is correct. But that means this will never use series endpoint.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "2179495021",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-07-02T08:49:33+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "@matyax whenever you have time, could you please \ud83c\udd97 this one. \ud83d\ude42",
        "pr_file_module": null
      },
      {
        "comment_id": "2179583207",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-07-02T09:29:37+00:00",
        "comment_author": "matyax",
        "comment_body": "I was checking the history of these changes and I remembered this:\r\n\r\nhttps://github.com/grafana/grafana/pull/83044#pullrequestreview-1888542091\r\n\r\nRemoving this would break backwards compatibility with older Loki versions. The feature flag was introduced in this other PR https://github.com/grafana/grafana/pull/97935\r\n\r\nThe workaround for people would be to stick with older Grafana versions. Your call whether to remove this or not. From my point of view, I don't recall anyone having to use this feature flag to keep backwards compatibility.\r\n\r\n@gtk-grafana Pinging you in case I'm forgetting anything.",
        "pr_file_module": null
      },
      {
        "comment_id": "2179620991",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-07-02T09:46:50+00:00",
        "comment_author": "gtk-grafana",
        "comment_body": "So this breaks < 3.1? I imagine we've still got a lot of users on 2.9. but as long as it's documented that this grafana only supports 3.1+ I guess it's fine, but might be nice to wait a bit",
        "pr_file_module": null
      },
      {
        "comment_id": "2179833879",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-07-02T11:39:15+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "https://grafana.com/docs/grafana/latest/datasources/loki/\r\n<img width=\"636\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0ae5d4ba-5ec9-4b3b-aecb-fb15b73a8111\" />\r\n\r\nWhat version do we support? If we follow \"Grafana pattern\", then we should support also the last previous major version. So we should probably not merge this and wait until Loki 4 is released to remove this feature toggle. And we should also update docs to mention Loki 2.9 instead of Loki 2.8, right? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2179845730",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107293,
        "pr_file": "public/app/plugins/datasource/loki/LanguageProvider.ts",
        "discussion_id": "2171394906",
        "commented_code": "@@ -148,13 +148,7 @@ export default class LokiLanguageProvider extends LanguageProvider {\n    * @throws An error if the fetch operation fails.\n    */\n   async fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]> {\n-    // We'll default to use `/labels`. If the flag is disabled, and there's a streamSelector, we'll use the series endpoint.\n-    if (config.featureToggles.lokiLabelNamesQueryApi || !options?.streamSelector) {\n-      return this.fetchLabelsByLabelsEndpoint(options);\n-    } else {\n-      const data = await this.fetchSeriesLabels(options.streamSelector, { timeRange: options.timeRange });\n-      return Object.keys(data ?? {});\n-    }\n+    return this.fetchLabelsByLabelsEndpoint(options);",
        "comment_created_at": "2025-07-02T11:45:38+00:00",
        "comment_author": "gtk-grafana",
        "comment_body": "Great question, yes, yes, and yes.\r\nLet's double check in slack with Loki folks and @JStickler",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1447052668",
    "pr_number": 79902,
    "pr_file": "packages/grafana-runtime/src/utils/DataSourceWithBackend.ts",
    "created_at": "2024-01-10T08:44:07+00:00",
    "commented_code": "}\n \n   /**\n-   * Apply template variables for explore\n+   * Filters out queries that are empty or hidden. Used when running queries through backend.\n+   * @returns `true` if the query is not hidden and its expression is not empty; `false` otherwise.\n    */\n-  interpolateVariablesInQueries(queries: TQuery[], scopedVars: ScopedVars, filters?: AdHocVariableFilter[]): TQuery[] {\n-    return queries.map((q) => this.applyTemplateVariables(q, scopedVars, filters) as TQuery);\n+  filterQuery(query: TQuery): boolean {\n+    if (query.hide) {\n+      return false;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1447052668",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79902,
        "pr_file": "packages/grafana-runtime/src/utils/DataSourceWithBackend.ts",
        "discussion_id": "1447052668",
        "commented_code": "@@ -265,21 +261,26 @@ class DataSourceWithBackend<\n   }\n \n   /**\n-   * Apply template variables for explore\n+   * Filters out queries that are empty or hidden. Used when running queries through backend.\n+   * @returns `true` if the query is not hidden and its expression is not empty; `false` otherwise.\n    */\n-  interpolateVariablesInQueries(queries: TQuery[], scopedVars: ScopedVars, filters?: AdHocVariableFilter[]): TQuery[] {\n-    return queries.map((q) => this.applyTemplateVariables(q, scopedVars, filters) as TQuery);\n+  filterQuery(query: TQuery): boolean {\n+    if (query.hide) {\n+      return false;",
        "comment_created_at": "2024-01-10T08:44:07+00:00",
        "comment_author": "sunker",
        "comment_body": "It's a bit weird that Grafana doesn't filter out hidden queries by default - we should probably have done it a long time ago, so I'm not against this. However, technically this is a breaking change as it would start filtering out queries that were previously hidden because the data source had not implement the `filterQuery` method. \r\n\r\nAgain, I'm not against this but if we're doing this change we need to be very loud about it, provide proper migration guidelines and also do it in a separate PR. ",
        "pr_file_module": null
      }
    ]
  }
]