[
  {
    "discussion_id": "2070724626",
    "pr_number": 104207,
    "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportMenu.tsx",
    "created_at": "2025-05-01T19:54:02+00:00",
    "commented_code": "onClick: () => onMenuItemClick(shareDashboardType.export),\n     });\n \n+    menuItems.push({\n+      shareId: shareDashboardType.image,\n+      testId: newExportButtonSelector.exportAsImage,\n+      icon: 'camera',\n+      label: t('share-dashboard.menu.export-image-title', 'Export as Image'),\n+      renderCondition: Boolean(config.featureToggles.dashboardImageSharing),",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2070724626",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportMenu.tsx",
        "discussion_id": "2070724626",
        "commented_code": "@@ -50,6 +50,15 @@ export default function ExportMenu({ dashboard }: { dashboard: DashboardScene })\n       onClick: () => onMenuItemClick(shareDashboardType.export),\n     });\n \n+    menuItems.push({\n+      shareId: shareDashboardType.image,\n+      testId: newExportButtonSelector.exportAsImage,\n+      icon: 'camera',\n+      label: t('share-dashboard.menu.export-image-title', 'Export as Image'),\n+      renderCondition: Boolean(config.featureToggles.dashboardImageSharing),",
        "comment_created_at": "2025-05-01T19:54:02+00:00",
        "comment_author": "nmarrs",
        "comment_body": "should we also disable this menu option if image renderer is not enabled / configured?",
        "pr_file_module": null
      },
      {
        "comment_id": "2071673280",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportMenu.tsx",
        "discussion_id": "2070724626",
        "commented_code": "@@ -50,6 +50,15 @@ export default function ExportMenu({ dashboard }: { dashboard: DashboardScene })\n       onClick: () => onMenuItemClick(shareDashboardType.export),\n     });\n \n+    menuItems.push({\n+      shareId: shareDashboardType.image,\n+      testId: newExportButtonSelector.exportAsImage,\n+      icon: 'camera',\n+      label: t('share-dashboard.menu.export-image-title', 'Export as Image'),\n+      renderCondition: Boolean(config.featureToggles.dashboardImageSharing),",
        "comment_created_at": "2025-05-02T14:10:48+00:00",
        "comment_author": "AgnesToulet",
        "comment_body": "This is the current behavior of \"Export PDF\" (showing \"Export as PDF\" in the menu and showing a warning in the drawer) and I think it's fine. It allows the user to know why the option is disabled.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071690571",
    "pr_number": 104207,
    "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportAsImage.tsx",
    "created_at": "2025-05-02T14:22:43+00:00",
    "commented_code": "+import { css } from '@emotion/css';\n+import { saveAs } from 'file-saver';\n+import { useState, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { config } from '@grafana/runtime';\n+import { SceneComponentProps } from '@grafana/scenes';\n+import { Button, Field, LoadingBar, RadioButtonGroup, Alert, useStyles2 } from '@grafana/ui';\n+import { t, Trans } from 'app/core/internationalization';\n+import { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\n+import { DashboardInteractions } from 'app/features/dashboard-scene/utils/interactions';\n+import { getDashboardSceneFor } from 'app/features/dashboard-scene/utils/utils';\n+\n+import { ShareExportTab } from '../ShareExportTab';\n+\n+import { generateDashboardImage, ImageGenerationError } from './utils';\n+\n+enum ImageFormat {\n+  PNG = 'png',\n+  JPG = 'jpg',\n+}\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: ImageGenerationError;\n+} | null;\n+\n+export class ExportAsImage extends ShareExportTab {\n+  public tabId = shareDashboardType.image;\n+  static Component = ExportAsImageRenderer;\n+\n+  public getTabLabel() {\n+    return t('share-modal.tab-title.export-image', 'Export image');\n+  }\n+}\n+\n+function ErrorAlert({ error }: { error: ErrorState }) {\n+  if (!error) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert severity=\"error\" title={error.title} data-testid={selectors.components.ExportImage.preview.error.container}>\n+      <div data-testid={selectors.components.ExportImage.preview.error.title}>{error.title}</div>\n+      <div data-testid={selectors.components.ExportImage.preview.error.message}>{error.message}</div>\n+    </Alert>\n+  );\n+}\n+\n+function ImagePreview({ imageBlob, isLoading }: { imageBlob: Blob | null; isLoading: boolean }) {\n+  const styles = useStyles2(getStyles);\n+\n+  if (!imageBlob || isLoading) {\n+    return null;\n+  }\n+\n+  return (\n+    <img\n+      src={URL.createObjectURL(imageBlob)}\n+      alt={t('share-modal.image.preview', 'Preview')}\n+      className={styles.image}\n+      data-testid={selectors.components.ExportImage.preview.image}\n+      aria-label={t('share-modal.image.preview-aria', 'Generated dashboard image preview')}\n+      role=\"img\"\n+    />\n+  );\n+}\n+\n+function RendererAlert() {\n+  if (config.rendererAvailable) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert\n+      severity=\"info\"\n+      title={t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      data-testid={selectors.components.ExportImage.rendererAlert.container}\n+    >\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.title}>\n+        {t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      </div>\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.description}>\n+        <Trans i18nKey=\"share-modal.link.render-instructions\">\n+          To render a panel image, you must install the{' '}\n+          <a\n+            href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"external-link\"\n+          >\n+            Grafana image renderer plugin\n+          </a>\n+          . Please contact your Grafana administrator to install the plugin.\n+        </Trans>\n+      </div>\n+    </Alert>\n+  );\n+}\n+\n+function ExportAsImageRenderer({ model }: SceneComponentProps<ExportAsImage>) {\n+  const [format, setFormat] = useState<ImageFormat>(ImageFormat.PNG);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [imageBlob, setImageBlob] = useState<Blob | null>(null);\n+  const [error, setError] = useState<ErrorState>(null);\n+  const styles = useStyles2(getStyles);\n+  const [ref, { width: loadingBarWidth }] = useMeasure<HTMLDivElement>();\n+\n+  const dashboard = getDashboardSceneFor(model);\n+\n+  // Clean up object URLs when component unmounts\n+  useEffect(() => {\n+    return () => {\n+      if (imageBlob) {\n+        URL.revokeObjectURL(URL.createObjectURL(imageBlob));\n+      }\n+    };\n+  }, [imageBlob]);\n+\n+  const onFormatChange = (value: ImageFormat) => {\n+    setFormat(value);\n+  };\n+\n+  const onExport = async () => {\n+    setIsLoading(true);\n+    setError(null);\n+\n+    try {\n+      const result = await generateDashboardImage({\n+        dashboard,\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+      });\n+\n+      if (result.error) {\n+        throw new Error(result.error);\n+      }\n+\n+      setImageBlob(result.blob);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: true,\n+      });\n+    } catch (error) {\n+      console.error('Error exporting image:', error);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: false,\n+        error: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+      setError({\n+        title: t('share-modal.image.error-title', 'Failed to generate image'),\n+        message: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const onDownload = () => {\n+    if (!imageBlob) {\n+      return;\n+    }\n+\n+    const time = new Date().getTime();\n+    const name = dashboard.state.title;\n+    saveAs(imageBlob, `${name}-${time}.${format}`);\n+\n+    DashboardInteractions.downloadDashboardImageClicked({\n+      format,\n+      fileName: `${name}-${time}.${format}`,\n+      shareResource: 'dashboard',\n+    });\n+  };\n+\n+  return (\n+    <>\n+      <p className={styles.info}>\n+        <Trans i18nKey=\"share-modal.image.info-text\">\n+          Save this dashboard as an image file. The image will be captured at high resolution.\n+        </Trans>\n+      </p>\n+\n+      <Field label={t('share-modal.image.format-label', 'Format')}>\n+        <div data-testid={selectors.components.ExportImage.formatOptions.container}>\n+          <RadioButtonGroup\n+            value={format}\n+            onChange={onFormatChange}\n+            options={[\n+              {\n+                label: 'PNG',\n+                value: ImageFormat.PNG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.png,\n+              },\n+              {\n+                label: 'JPG',\n+                value: ImageFormat.JPG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.jpg,\n+              },\n+            ]}\n+          />\n+        </div>\n+      </Field>\n+\n+      <RendererAlert />",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2071690571",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportAsImage.tsx",
        "discussion_id": "2071690571",
        "commented_code": "@@ -0,0 +1,294 @@\n+import { css } from '@emotion/css';\n+import { saveAs } from 'file-saver';\n+import { useState, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { config } from '@grafana/runtime';\n+import { SceneComponentProps } from '@grafana/scenes';\n+import { Button, Field, LoadingBar, RadioButtonGroup, Alert, useStyles2 } from '@grafana/ui';\n+import { t, Trans } from 'app/core/internationalization';\n+import { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\n+import { DashboardInteractions } from 'app/features/dashboard-scene/utils/interactions';\n+import { getDashboardSceneFor } from 'app/features/dashboard-scene/utils/utils';\n+\n+import { ShareExportTab } from '../ShareExportTab';\n+\n+import { generateDashboardImage, ImageGenerationError } from './utils';\n+\n+enum ImageFormat {\n+  PNG = 'png',\n+  JPG = 'jpg',\n+}\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: ImageGenerationError;\n+} | null;\n+\n+export class ExportAsImage extends ShareExportTab {\n+  public tabId = shareDashboardType.image;\n+  static Component = ExportAsImageRenderer;\n+\n+  public getTabLabel() {\n+    return t('share-modal.tab-title.export-image', 'Export image');\n+  }\n+}\n+\n+function ErrorAlert({ error }: { error: ErrorState }) {\n+  if (!error) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert severity=\"error\" title={error.title} data-testid={selectors.components.ExportImage.preview.error.container}>\n+      <div data-testid={selectors.components.ExportImage.preview.error.title}>{error.title}</div>\n+      <div data-testid={selectors.components.ExportImage.preview.error.message}>{error.message}</div>\n+    </Alert>\n+  );\n+}\n+\n+function ImagePreview({ imageBlob, isLoading }: { imageBlob: Blob | null; isLoading: boolean }) {\n+  const styles = useStyles2(getStyles);\n+\n+  if (!imageBlob || isLoading) {\n+    return null;\n+  }\n+\n+  return (\n+    <img\n+      src={URL.createObjectURL(imageBlob)}\n+      alt={t('share-modal.image.preview', 'Preview')}\n+      className={styles.image}\n+      data-testid={selectors.components.ExportImage.preview.image}\n+      aria-label={t('share-modal.image.preview-aria', 'Generated dashboard image preview')}\n+      role=\"img\"\n+    />\n+  );\n+}\n+\n+function RendererAlert() {\n+  if (config.rendererAvailable) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert\n+      severity=\"info\"\n+      title={t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      data-testid={selectors.components.ExportImage.rendererAlert.container}\n+    >\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.title}>\n+        {t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      </div>\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.description}>\n+        <Trans i18nKey=\"share-modal.link.render-instructions\">\n+          To render a panel image, you must install the{' '}\n+          <a\n+            href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"external-link\"\n+          >\n+            Grafana image renderer plugin\n+          </a>\n+          . Please contact your Grafana administrator to install the plugin.\n+        </Trans>\n+      </div>\n+    </Alert>\n+  );\n+}\n+\n+function ExportAsImageRenderer({ model }: SceneComponentProps<ExportAsImage>) {\n+  const [format, setFormat] = useState<ImageFormat>(ImageFormat.PNG);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [imageBlob, setImageBlob] = useState<Blob | null>(null);\n+  const [error, setError] = useState<ErrorState>(null);\n+  const styles = useStyles2(getStyles);\n+  const [ref, { width: loadingBarWidth }] = useMeasure<HTMLDivElement>();\n+\n+  const dashboard = getDashboardSceneFor(model);\n+\n+  // Clean up object URLs when component unmounts\n+  useEffect(() => {\n+    return () => {\n+      if (imageBlob) {\n+        URL.revokeObjectURL(URL.createObjectURL(imageBlob));\n+      }\n+    };\n+  }, [imageBlob]);\n+\n+  const onFormatChange = (value: ImageFormat) => {\n+    setFormat(value);\n+  };\n+\n+  const onExport = async () => {\n+    setIsLoading(true);\n+    setError(null);\n+\n+    try {\n+      const result = await generateDashboardImage({\n+        dashboard,\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+      });\n+\n+      if (result.error) {\n+        throw new Error(result.error);\n+      }\n+\n+      setImageBlob(result.blob);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: true,\n+      });\n+    } catch (error) {\n+      console.error('Error exporting image:', error);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: false,\n+        error: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+      setError({\n+        title: t('share-modal.image.error-title', 'Failed to generate image'),\n+        message: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const onDownload = () => {\n+    if (!imageBlob) {\n+      return;\n+    }\n+\n+    const time = new Date().getTime();\n+    const name = dashboard.state.title;\n+    saveAs(imageBlob, `${name}-${time}.${format}`);\n+\n+    DashboardInteractions.downloadDashboardImageClicked({\n+      format,\n+      fileName: `${name}-${time}.${format}`,\n+      shareResource: 'dashboard',\n+    });\n+  };\n+\n+  return (\n+    <>\n+      <p className={styles.info}>\n+        <Trans i18nKey=\"share-modal.image.info-text\">\n+          Save this dashboard as an image file. The image will be captured at high resolution.\n+        </Trans>\n+      </p>\n+\n+      <Field label={t('share-modal.image.format-label', 'Format')}>\n+        <div data-testid={selectors.components.ExportImage.formatOptions.container}>\n+          <RadioButtonGroup\n+            value={format}\n+            onChange={onFormatChange}\n+            options={[\n+              {\n+                label: 'PNG',\n+                value: ImageFormat.PNG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.png,\n+              },\n+              {\n+                label: 'JPG',\n+                value: ImageFormat.JPG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.jpg,\n+              },\n+            ]}\n+          />\n+        </div>\n+      </Field>\n+\n+      <RendererAlert />",
        "comment_created_at": "2025-05-02T14:22:43+00:00",
        "comment_author": "AgnesToulet",
        "comment_body": "Maybe we should show only the alert when the image renderer is not available and not the different buttons, WDYT?",
        "pr_file_module": null
      },
      {
        "comment_id": "2085598656",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/ExportButton/ExportAsImage.tsx",
        "discussion_id": "2071690571",
        "commented_code": "@@ -0,0 +1,294 @@\n+import { css } from '@emotion/css';\n+import { saveAs } from 'file-saver';\n+import { useState, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { config } from '@grafana/runtime';\n+import { SceneComponentProps } from '@grafana/scenes';\n+import { Button, Field, LoadingBar, RadioButtonGroup, Alert, useStyles2 } from '@grafana/ui';\n+import { t, Trans } from 'app/core/internationalization';\n+import { shareDashboardType } from 'app/features/dashboard/components/ShareModal/utils';\n+import { DashboardInteractions } from 'app/features/dashboard-scene/utils/interactions';\n+import { getDashboardSceneFor } from 'app/features/dashboard-scene/utils/utils';\n+\n+import { ShareExportTab } from '../ShareExportTab';\n+\n+import { generateDashboardImage, ImageGenerationError } from './utils';\n+\n+enum ImageFormat {\n+  PNG = 'png',\n+  JPG = 'jpg',\n+}\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: ImageGenerationError;\n+} | null;\n+\n+export class ExportAsImage extends ShareExportTab {\n+  public tabId = shareDashboardType.image;\n+  static Component = ExportAsImageRenderer;\n+\n+  public getTabLabel() {\n+    return t('share-modal.tab-title.export-image', 'Export image');\n+  }\n+}\n+\n+function ErrorAlert({ error }: { error: ErrorState }) {\n+  if (!error) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert severity=\"error\" title={error.title} data-testid={selectors.components.ExportImage.preview.error.container}>\n+      <div data-testid={selectors.components.ExportImage.preview.error.title}>{error.title}</div>\n+      <div data-testid={selectors.components.ExportImage.preview.error.message}>{error.message}</div>\n+    </Alert>\n+  );\n+}\n+\n+function ImagePreview({ imageBlob, isLoading }: { imageBlob: Blob | null; isLoading: boolean }) {\n+  const styles = useStyles2(getStyles);\n+\n+  if (!imageBlob || isLoading) {\n+    return null;\n+  }\n+\n+  return (\n+    <img\n+      src={URL.createObjectURL(imageBlob)}\n+      alt={t('share-modal.image.preview', 'Preview')}\n+      className={styles.image}\n+      data-testid={selectors.components.ExportImage.preview.image}\n+      aria-label={t('share-modal.image.preview-aria', 'Generated dashboard image preview')}\n+      role=\"img\"\n+    />\n+  );\n+}\n+\n+function RendererAlert() {\n+  if (config.rendererAvailable) {\n+    return null;\n+  }\n+\n+  return (\n+    <Alert\n+      severity=\"info\"\n+      title={t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      data-testid={selectors.components.ExportImage.rendererAlert.container}\n+    >\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.title}>\n+        {t('share-modal.link.render-alert', 'Image renderer plugin not installed')}\n+      </div>\n+      <div data-testid={selectors.components.ExportImage.rendererAlert.description}>\n+        <Trans i18nKey=\"share-modal.link.render-instructions\">\n+          To render a panel image, you must install the{' '}\n+          <a\n+            href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n+            target=\"_blank\"\n+            rel=\"noopener noreferrer\"\n+            className=\"external-link\"\n+          >\n+            Grafana image renderer plugin\n+          </a>\n+          . Please contact your Grafana administrator to install the plugin.\n+        </Trans>\n+      </div>\n+    </Alert>\n+  );\n+}\n+\n+function ExportAsImageRenderer({ model }: SceneComponentProps<ExportAsImage>) {\n+  const [format, setFormat] = useState<ImageFormat>(ImageFormat.PNG);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [imageBlob, setImageBlob] = useState<Blob | null>(null);\n+  const [error, setError] = useState<ErrorState>(null);\n+  const styles = useStyles2(getStyles);\n+  const [ref, { width: loadingBarWidth }] = useMeasure<HTMLDivElement>();\n+\n+  const dashboard = getDashboardSceneFor(model);\n+\n+  // Clean up object URLs when component unmounts\n+  useEffect(() => {\n+    return () => {\n+      if (imageBlob) {\n+        URL.revokeObjectURL(URL.createObjectURL(imageBlob));\n+      }\n+    };\n+  }, [imageBlob]);\n+\n+  const onFormatChange = (value: ImageFormat) => {\n+    setFormat(value);\n+  };\n+\n+  const onExport = async () => {\n+    setIsLoading(true);\n+    setError(null);\n+\n+    try {\n+      const result = await generateDashboardImage({\n+        dashboard,\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+      });\n+\n+      if (result.error) {\n+        throw new Error(result.error);\n+      }\n+\n+      setImageBlob(result.blob);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: true,\n+      });\n+    } catch (error) {\n+      console.error('Error exporting image:', error);\n+      DashboardInteractions.generateDashboardImageClicked({\n+        format,\n+        scale: config.rendererDefaultImageScale || 1,\n+        shareResource: 'dashboard',\n+        success: false,\n+        error: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+      setError({\n+        title: t('share-modal.image.error-title', 'Failed to generate image'),\n+        message: error instanceof Error ? error.message : 'Failed to generate image',\n+      });\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const onDownload = () => {\n+    if (!imageBlob) {\n+      return;\n+    }\n+\n+    const time = new Date().getTime();\n+    const name = dashboard.state.title;\n+    saveAs(imageBlob, `${name}-${time}.${format}`);\n+\n+    DashboardInteractions.downloadDashboardImageClicked({\n+      format,\n+      fileName: `${name}-${time}.${format}`,\n+      shareResource: 'dashboard',\n+    });\n+  };\n+\n+  return (\n+    <>\n+      <p className={styles.info}>\n+        <Trans i18nKey=\"share-modal.image.info-text\">\n+          Save this dashboard as an image file. The image will be captured at high resolution.\n+        </Trans>\n+      </p>\n+\n+      <Field label={t('share-modal.image.format-label', 'Format')}>\n+        <div data-testid={selectors.components.ExportImage.formatOptions.container}>\n+          <RadioButtonGroup\n+            value={format}\n+            onChange={onFormatChange}\n+            options={[\n+              {\n+                label: 'PNG',\n+                value: ImageFormat.PNG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.png,\n+              },\n+              {\n+                label: 'JPG',\n+                value: ImageFormat.JPG,\n+                'data-testid': selectors.components.ExportImage.formatOptions.jpg,\n+              },\n+            ]}\n+          />\n+        </div>\n+      </Field>\n+\n+      <RendererAlert />",
        "comment_created_at": "2025-05-12T21:59:44+00:00",
        "comment_author": "nmarrs",
        "comment_body": "done - great idea!\r\n<img width=\"753\" alt=\"Screenshot 2025-05-12 at 2 59 25\u202fPM\" src=\"https://github.com/user-attachments/assets/48657b7b-2853-4088-9643-db010e2e717d\" />\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2149407217",
    "pr_number": 106627,
    "pr_file": "public/app/features/auth-config/AuthProvidersListPage.tsx",
    "created_at": "2025-06-16T08:55:42+00:00",
    "commented_code": "configPath={settings.configPath}\n                 />\n               ))}\n+            {config.buildInfo.edition === GrafanaEdition.OpenSource && (",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2149407217",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106627,
        "pr_file": "public/app/features/auth-config/AuthProvidersListPage.tsx",
        "discussion_id": "2149407217",
        "commented_code": "@@ -120,6 +120,12 @@ export const AuthConfigPageUnconnected = ({\n                   configPath={settings.configPath}\n                 />\n               ))}\n+            {config.buildInfo.edition === GrafanaEdition.OpenSource && (",
        "comment_created_at": "2025-06-16T08:55:42+00:00",
        "comment_author": "mjseaman",
        "comment_body": "Would this also appear in un-licensed Grafana Enterprise?",
        "pr_file_module": null
      },
      {
        "comment_id": "2151877750",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106627,
        "pr_file": "public/app/features/auth-config/AuthProvidersListPage.tsx",
        "discussion_id": "2149407217",
        "commented_code": "@@ -120,6 +120,12 @@ export const AuthConfigPageUnconnected = ({\n                   configPath={settings.configPath}\n                 />\n               ))}\n+            {config.buildInfo.edition === GrafanaEdition.OpenSource && (",
        "comment_created_at": "2025-06-17T10:08:28+00:00",
        "comment_author": "linoman",
        "comment_body": "SAML and SCIM are enterprise features. ~~They will show up but be restricted by backend, rendering them useless and confusing.~~",
        "pr_file_module": null
      },
      {
        "comment_id": "2166687682",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106627,
        "pr_file": "public/app/features/auth-config/AuthProvidersListPage.tsx",
        "discussion_id": "2149407217",
        "commented_code": "@@ -120,6 +120,12 @@ export const AuthConfigPageUnconnected = ({\n                   configPath={settings.configPath}\n                 />\n               ))}\n+            {config.buildInfo.edition === GrafanaEdition.OpenSource && (",
        "comment_created_at": "2025-06-25T13:13:06+00:00",
        "comment_author": "torkelo",
        "comment_body": "@mjseaman no, only in the open source build",
        "pr_file_module": null
      }
    ]
  }
]