[
  {
    "discussion_id": "2174532290",
    "pr_number": 107339,
    "pr_file": "pkg/services/pluginsintegration/clientmiddleware/tracing_header_middleware.go",
    "created_at": "2025-06-30T08:35:35+00:00",
    "commented_code": "m.applyHeaders(ctx, req)\n \treturn m.BaseHandler.RunStream(ctx, req, sender)\n }\n+\n+// sanitizeGrpcHeaderValue sanitizes header values according to HTTP/2 gRPC specification.\n+// The spec defines ASCII-Value as 1*( %x20-%x7E ) ; space and printable ASCII\n+// Control characters (0x00-0x1F) are percent-encoded.\n+// Allows printable ASCII (0x20-0x7E) and extended characters (> 0x7F).\n+func sanitizeGrpcHeaderValue(value string) string {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2174532290",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107339,
        "pr_file": "pkg/services/pluginsintegration/clientmiddleware/tracing_header_middleware.go",
        "discussion_id": "2174532290",
        "commented_code": "@@ -102,3 +105,25 @@ func (m *TracingHeaderMiddleware) RunStream(ctx context.Context, req *backend.Ru\n \tm.applyHeaders(ctx, req)\n \treturn m.BaseHandler.RunStream(ctx, req, sender)\n }\n+\n+// sanitizeGrpcHeaderValue sanitizes header values according to HTTP/2 gRPC specification.\n+// The spec defines ASCII-Value as 1*( %x20-%x7E ) ; space and printable ASCII\n+// Control characters (0x00-0x1F) are percent-encoded.\n+// Allows printable ASCII (0x20-0x7E) and extended characters (> 0x7F).\n+func sanitizeGrpcHeaderValue(value string) string {",
        "comment_created_at": "2025-06-30T08:35:35+00:00",
        "comment_author": "wbrowne",
        "comment_body": "Nit: WDYT about renaming this `santizeHTTPHeaderValueForGRPC`? My first thought reading this was that we were dealing with gRPC back to HTTP, rather than the other way around!",
        "pr_file_module": null
      },
      {
        "comment_id": "2174604020",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107339,
        "pr_file": "pkg/services/pluginsintegration/clientmiddleware/tracing_header_middleware.go",
        "discussion_id": "2174532290",
        "commented_code": "@@ -102,3 +105,25 @@ func (m *TracingHeaderMiddleware) RunStream(ctx context.Context, req *backend.Ru\n \tm.applyHeaders(ctx, req)\n \treturn m.BaseHandler.RunStream(ctx, req, sender)\n }\n+\n+// sanitizeGrpcHeaderValue sanitizes header values according to HTTP/2 gRPC specification.\n+// The spec defines ASCII-Value as 1*( %x20-%x7E ) ; space and printable ASCII\n+// Control characters (0x00-0x1F) are percent-encoded.\n+// Allows printable ASCII (0x20-0x7E) and extended characters (> 0x7F).\n+func sanitizeGrpcHeaderValue(value string) string {",
        "comment_created_at": "2025-06-30T09:12:20+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "\ud83d\udc4d sounds good",
        "pr_file_module": null
      },
      {
        "comment_id": "2174609505",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107339,
        "pr_file": "pkg/services/pluginsintegration/clientmiddleware/tracing_header_middleware.go",
        "discussion_id": "2174532290",
        "commented_code": "@@ -102,3 +105,25 @@ func (m *TracingHeaderMiddleware) RunStream(ctx context.Context, req *backend.Ru\n \tm.applyHeaders(ctx, req)\n \treturn m.BaseHandler.RunStream(ctx, req, sender)\n }\n+\n+// sanitizeGrpcHeaderValue sanitizes header values according to HTTP/2 gRPC specification.\n+// The spec defines ASCII-Value as 1*( %x20-%x7E ) ; space and printable ASCII\n+// Control characters (0x00-0x1F) are percent-encoded.\n+// Allows printable ASCII (0x20-0x7E) and extended characters (> 0x7F).\n+func sanitizeGrpcHeaderValue(value string) string {",
        "comment_created_at": "2025-06-30T09:15:12+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "Fixed in https://github.com/grafana/grafana/pull/107339/commits/c3536040f3adaae80b21d1de73d87da1c96bce88",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2071682456",
    "pr_number": 104207,
    "pr_file": "pkg/services/featuremgmt/registry.go",
    "created_at": "2025-05-02T14:17:06+00:00",
    "commented_code": "HideFromDocs:      true,\n \t\t\tExpression:        \"true\", // enabled by default\n \t\t},\n+\t\t{\n+\t\t\tName:         \"dashboardImageSharing\",",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2071682456",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "pkg/services/featuremgmt/registry.go",
        "discussion_id": "2071682456",
        "commented_code": "@@ -1775,6 +1775,14 @@ var (\n \t\t\tHideFromDocs:      true,\n \t\t\tExpression:        \"true\", // enabled by default\n \t\t},\n+\t\t{\n+\t\t\tName:         \"dashboardImageSharing\",",
        "comment_created_at": "2025-05-02T14:17:06+00:00",
        "comment_author": "AgnesToulet",
        "comment_body": "```suggestion\r\n\t\t\tName:         \"sharingDashboardImage\",\r\n```\r\nor `renderDashboardImage`.\r\n\r\nNit, I think it's nice to describe the feature toggle general area in the first word and then add details, it helps when looking for feature toggles and debugging. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2166950535",
    "pr_number": 106924,
    "pr_file": "pkg/registry/apis/iam/models.go",
    "created_at": "2025-06-25T14:59:23+00:00",
    "commented_code": "+package iam\n+\n+import (\n+\t\"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/legacy\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/user\"\n+\t\"github.com/grafana/grafana/pkg/services/apiserver/builder\"\n+\t\"github.com/grafana/grafana/pkg/services/ssosettings\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"k8s.io/apiserver/pkg/authorization/authorizer\"\n+)\n+\n+var _ builder.APIGroupBuilder = (*IdentityAccessManagementAPIBuilder)(nil)\n+var _ builder.APIGroupRouteProvider = (*IdentityAccessManagementAPIBuilder)(nil)\n+\n+// CoreRoleStorageBackend uses the resource.StorageBackend interface to provide storage for core roles.\n+// Used wire to identify the storage backend for core roles.\n+type CoreRoleStorageBackend interface{ resource.StorageBackend }\n+\n+// This is used just so wire has something unique to return\n+type IdentityAccessManagementAPIBuilder struct {\n+\t// Stores\n+\tstore            legacy.LegacyIdentityStore\n+\tcoreRolesStorage CoreRoleStorageBackend\n+\n+\t// Access Control\n+\tauthorizer authorizer.Authorizer\n+\t// legacyAccessClient is used for the identity apis, we need to migrate to the access client\n+\tlegacyAccessClient types.AccessClient",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2166950535",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106924,
        "pr_file": "pkg/registry/apis/iam/models.go",
        "discussion_id": "2166950535",
        "commented_code": "@@ -0,0 +1,44 @@\n+package iam\n+\n+import (\n+\t\"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/legacy\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/user\"\n+\t\"github.com/grafana/grafana/pkg/services/apiserver/builder\"\n+\t\"github.com/grafana/grafana/pkg/services/ssosettings\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"k8s.io/apiserver/pkg/authorization/authorizer\"\n+)\n+\n+var _ builder.APIGroupBuilder = (*IdentityAccessManagementAPIBuilder)(nil)\n+var _ builder.APIGroupRouteProvider = (*IdentityAccessManagementAPIBuilder)(nil)\n+\n+// CoreRoleStorageBackend uses the resource.StorageBackend interface to provide storage for core roles.\n+// Used wire to identify the storage backend for core roles.\n+type CoreRoleStorageBackend interface{ resource.StorageBackend }\n+\n+// This is used just so wire has something unique to return\n+type IdentityAccessManagementAPIBuilder struct {\n+\t// Stores\n+\tstore            legacy.LegacyIdentityStore\n+\tcoreRolesStorage CoreRoleStorageBackend\n+\n+\t// Access Control\n+\tauthorizer authorizer.Authorizer\n+\t// legacyAccessClient is used for the identity apis, we need to migrate to the access client\n+\tlegacyAccessClient types.AccessClient",
        "comment_created_at": "2025-06-25T14:59:23+00:00",
        "comment_author": "forsethc",
        "comment_body": "If `legacyAccessClient` is only used for Identity APIs, could it just be called `identityClient`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2168406883",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106924,
        "pr_file": "pkg/registry/apis/iam/models.go",
        "discussion_id": "2166950535",
        "commented_code": "@@ -0,0 +1,44 @@\n+package iam\n+\n+import (\n+\t\"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/legacy\"\n+\t\"github.com/grafana/grafana/pkg/registry/apis/iam/user\"\n+\t\"github.com/grafana/grafana/pkg/services/apiserver/builder\"\n+\t\"github.com/grafana/grafana/pkg/services/ssosettings\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"k8s.io/apiserver/pkg/authorization/authorizer\"\n+)\n+\n+var _ builder.APIGroupBuilder = (*IdentityAccessManagementAPIBuilder)(nil)\n+var _ builder.APIGroupRouteProvider = (*IdentityAccessManagementAPIBuilder)(nil)\n+\n+// CoreRoleStorageBackend uses the resource.StorageBackend interface to provide storage for core roles.\n+// Used wire to identify the storage backend for core roles.\n+type CoreRoleStorageBackend interface{ resource.StorageBackend }\n+\n+// This is used just so wire has something unique to return\n+type IdentityAccessManagementAPIBuilder struct {\n+\t// Stores\n+\tstore            legacy.LegacyIdentityStore\n+\tcoreRolesStorage CoreRoleStorageBackend\n+\n+\t// Access Control\n+\tauthorizer authorizer.Authorizer\n+\t// legacyAccessClient is used for the identity apis, we need to migrate to the access client\n+\tlegacyAccessClient types.AccessClient",
        "comment_created_at": "2025-06-26T07:39:52+00:00",
        "comment_author": "gamab",
        "comment_body": "Identity APIs need to use the `accessClient` as well. This emphasize that this authorizer should be deprecated.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1333575299",
    "pr_number": 74998,
    "pr_file": "pkg/services/featuremgmt/registry.go",
    "created_at": "2023-09-21T20:36:13+00:00",
    "commented_code": "Stage:        FeatureStageExperimental,\n \t\t\tOwner:        grafanaPluginsPlatformSquad,\n \t\t},\n+\t\t{\n+\t\t\tName:         \"alertingSaveStateAsync\",\n+\t\t\tDescription:  \"Writes the state only on a given interval to database\",",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1333575299",
        "repo_full_name": "grafana/grafana",
        "pr_number": 74998,
        "pr_file": "pkg/services/featuremgmt/registry.go",
        "discussion_id": "1333575299",
        "commented_code": "@@ -766,5 +766,12 @@ var (\n \t\t\tStage:        FeatureStageExperimental,\n \t\t\tOwner:        grafanaPluginsPlatformSquad,\n \t\t},\n+\t\t{\n+\t\t\tName:         \"alertingSaveStateAsync\",\n+\t\t\tDescription:  \"Writes the state only on a given interval to database\",",
        "comment_created_at": "2023-09-21T20:36:13+00:00",
        "comment_author": "stevesg",
        "comment_body": "[nit] I'd call this something like period rather than async, as though the writing is async, the more interesting characteristic arguably is that it's periodic.\r\n\r\n```suggestion\r\n\t\t\tName:         \"alertingSaveStatePeriodic\",\r\n\t\t\tDescription:  \"Writes the state periodically to the database, asynchronous to rule evaluation\",\r\n```",
        "pr_file_module": null
      }
    ]
  }
]