[
  {
    "discussion_id": "2181630788",
    "pr_number": 107515,
    "pr_file": "public/app/features/plugins/components/PluginErrorBoundary.test.tsx",
    "created_at": "2025-07-03T04:16:10+00:00",
    "commented_code": "+import { render, screen } from '@testing-library/react';\n+import * as React from 'react';\n+\n+import { PluginMeta, PluginType, PluginContext } from '@grafana/data';\n+import { getMockPlugin } from '@grafana/data/test';\n+\n+import { PluginErrorBoundary } from './PluginErrorBoundary';\n+\n+const ThrowingComponent = ({ shouldThrow }: { shouldThrow: boolean }) => {\n+  if (shouldThrow) {\n+    throw new Error('Test error message');\n+  }\n+  return <div>Working component</div>;\n+};\n+\n+const TestFallback = ({ error, errorInfo }: { error: Error | null; errorInfo: React.ErrorInfo | null }) => (\n+  <div>\n+    <div>Fallback rendered</div>\n+    <div>Error: {error?.message}</div>\n+    {errorInfo && <div>Error info available</div>}\n+  </div>\n+);\n+\n+const renderWithPluginContext = (\n+  children: React.ReactNode,\n+  pluginMeta?: PluginMeta,\n+  fallback?: React.ComponentType<{ error: Error | null; errorInfo: React.ErrorInfo | null }>,\n+  onError?: (error: Error, info: React.ErrorInfo) => void\n+) => {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2181630788",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107515,
        "pr_file": "public/app/features/plugins/components/PluginErrorBoundary.test.tsx",
        "discussion_id": "2181630788",
        "commented_code": "@@ -0,0 +1,173 @@\n+import { render, screen } from '@testing-library/react';\n+import * as React from 'react';\n+\n+import { PluginMeta, PluginType, PluginContext } from '@grafana/data';\n+import { getMockPlugin } from '@grafana/data/test';\n+\n+import { PluginErrorBoundary } from './PluginErrorBoundary';\n+\n+const ThrowingComponent = ({ shouldThrow }: { shouldThrow: boolean }) => {\n+  if (shouldThrow) {\n+    throw new Error('Test error message');\n+  }\n+  return <div>Working component</div>;\n+};\n+\n+const TestFallback = ({ error, errorInfo }: { error: Error | null; errorInfo: React.ErrorInfo | null }) => (\n+  <div>\n+    <div>Fallback rendered</div>\n+    <div>Error: {error?.message}</div>\n+    {errorInfo && <div>Error info available</div>}\n+  </div>\n+);\n+\n+const renderWithPluginContext = (\n+  children: React.ReactNode,\n+  pluginMeta?: PluginMeta,\n+  fallback?: React.ComponentType<{ error: Error | null; errorInfo: React.ErrorInfo | null }>,\n+  onError?: (error: Error, info: React.ErrorInfo) => void\n+) => {",
        "comment_created_at": "2025-07-03T04:16:10+00:00",
        "comment_author": "hugohaggmark",
        "comment_body": "[nitpick]: could we use an object with these props instead, hard to read and follow the code?\r\n```suggestion\r\nconst renderWithPluginContext = ({\r\nchildren,\r\npluginMeta = getMockPlugin({ id: 'test-plugin', type: PluginType.panel }),\r\nfallback,\r\nonError\r\n}: {\r\n  children: React.ReactNode;\r\n  pluginMeta?: PluginMeta;\r\n  fallback?: React.ComponentType<{ error: Error | null; errorInfo: React.ErrorInfo | null }>;\r\n  onError?: (error: Error, info: React.ErrorInfo) => void;\r\n}) => {\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2181638055",
    "pr_number": 107515,
    "pr_file": "public/app/features/plugins/extensions/utils.tsx",
    "created_at": "2025-07-03T04:24:36+00:00",
    "commented_code": "onDismiss: () => void;\n };\n \n-export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.ComponentType<T>, log: ExtensionsLog) => {\n+export const wrapWithPluginContext = <T,>(\n+  pluginId: string,\n+  extensionTitle: string,\n+  Component: React.ComponentType<T>,\n+  log: ExtensionsLog\n+) => {",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2181638055",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107515,
        "pr_file": "public/app/features/plugins/extensions/utils.tsx",
        "discussion_id": "2181638055",
        "commented_code": "@@ -58,7 +60,12 @@ type ModalWrapperProps = {\n   onDismiss: () => void;\n };\n \n-export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.ComponentType<T>, log: ExtensionsLog) => {\n+export const wrapWithPluginContext = <T,>(\n+  pluginId: string,\n+  extensionTitle: string,\n+  Component: React.ComponentType<T>,\n+  log: ExtensionsLog\n+) => {",
        "comment_created_at": "2025-07-03T04:24:36+00:00",
        "comment_author": "hugohaggmark",
        "comment_body": "Personal preferences maybe but for 3 or more arguments we should use an object instead. WDYT?\r\n```suggestion\r\nexport const wrapWithPluginContext = <T,>(\r\n{\r\npluginId,\r\nextensionTitle,\r\nComponent,\r\nlog\r\n},\r\n{\r\n  pluginId: string;\r\n  extensionTitle: string;\r\n  Component: React.ComponentType<T>;\r\n  log: ExtensionsLog;\r\n}) => {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2181743280",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107515,
        "pr_file": "public/app/features/plugins/extensions/utils.tsx",
        "discussion_id": "2181638055",
        "commented_code": "@@ -58,7 +60,12 @@ type ModalWrapperProps = {\n   onDismiss: () => void;\n };\n \n-export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.ComponentType<T>, log: ExtensionsLog) => {\n+export const wrapWithPluginContext = <T,>(\n+  pluginId: string,\n+  extensionTitle: string,\n+  Component: React.ComponentType<T>,\n+  log: ExtensionsLog\n+) => {",
        "comment_created_at": "2025-07-03T05:14:55+00:00",
        "comment_author": "leventebalogh",
        "comment_body": "Good point @hugohaggmark - totally agree, positional arguments start to get kinda hard to work with at this point. I'll change \ud83d\udc4d (Also for `renderWithPluginContext()` - https://github.com/grafana/grafana/pull/107515#discussion_r2181630788)",
        "pr_file_module": null
      },
      {
        "comment_id": "2184590484",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107515,
        "pr_file": "public/app/features/plugins/extensions/utils.tsx",
        "discussion_id": "2181638055",
        "commented_code": "@@ -58,7 +60,12 @@ type ModalWrapperProps = {\n   onDismiss: () => void;\n };\n \n-export const wrapWithPluginContext = <T,>(pluginId: string, Component: React.ComponentType<T>, log: ExtensionsLog) => {\n+export const wrapWithPluginContext = <T,>(\n+  pluginId: string,\n+  extensionTitle: string,\n+  Component: React.ComponentType<T>,\n+  log: ExtensionsLog\n+) => {",
        "comment_created_at": "2025-07-04T07:11:11+00:00",
        "comment_author": "leventebalogh",
        "comment_body": "Updated in https://github.com/grafana/grafana/pull/107515/commits/82cbd98d36e4c502c04605e8100495e72af32f56.",
        "pr_file_module": null
      }
    ]
  }
]