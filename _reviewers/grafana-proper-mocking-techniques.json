[
  {
    "discussion_id": "2185317877",
    "pr_number": 107596,
    "pr_file": "public/app/features/dashboard-scene/saving/provisioned/PreviewBannerViewPR.test.tsx",
    "created_at": "2025-07-04T13:01:25+00:00",
    "commented_code": "+import { render, screen } from '@testing-library/react';\n+import userEvent from '@testing-library/user-event';\n+\n+import { textUtil } from '@grafana/data';\n+\n+import { PreviewBannerViewPR } from './PreviewBannerViewPR';\n+\n+jest.mock('@grafana/data', () => ({\n+  ...jest.requireActual('@grafana/data'),\n+  textUtil: {\n+    sanitizeUrl: jest.fn(),\n+  },\n+}));\n+\n+const mockTextUtil = jest.mocked(textUtil);\n+\n+function setup(props: { prParam: string; isFolder?: boolean; isNewPr?: boolean } = { prParam: 'test-url' }) {\n+  const defaultProps = {\n+    isFolder: false,\n+    isNewPr: false,\n+    ...props,\n+  };\n+\n+  const renderResult = render(<PreviewBannerViewPR {...defaultProps} />);\n+\n+  return { renderResult, props: defaultProps };\n+}\n+\n+describe('PreviewBannerViewPR', () => {\n+  let openSpy: jest.SpyInstance;\n+\n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+    // @ts-expect-error global.open should return a Window, but is not implemented in js-dom.\n+    openSpy = jest.spyOn(global, 'open').mockReturnValue(true);",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2185317877",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107596,
        "pr_file": "public/app/features/dashboard-scene/saving/provisioned/PreviewBannerViewPR.test.tsx",
        "discussion_id": "2185317877",
        "commented_code": "@@ -0,0 +1,110 @@\n+import { render, screen } from '@testing-library/react';\n+import userEvent from '@testing-library/user-event';\n+\n+import { textUtil } from '@grafana/data';\n+\n+import { PreviewBannerViewPR } from './PreviewBannerViewPR';\n+\n+jest.mock('@grafana/data', () => ({\n+  ...jest.requireActual('@grafana/data'),\n+  textUtil: {\n+    sanitizeUrl: jest.fn(),\n+  },\n+}));\n+\n+const mockTextUtil = jest.mocked(textUtil);\n+\n+function setup(props: { prParam: string; isFolder?: boolean; isNewPr?: boolean } = { prParam: 'test-url' }) {\n+  const defaultProps = {\n+    isFolder: false,\n+    isNewPr: false,\n+    ...props,\n+  };\n+\n+  const renderResult = render(<PreviewBannerViewPR {...defaultProps} />);\n+\n+  return { renderResult, props: defaultProps };\n+}\n+\n+describe('PreviewBannerViewPR', () => {\n+  let openSpy: jest.SpyInstance;\n+\n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+    // @ts-expect-error global.open should return a Window, but is not implemented in js-dom.\n+    openSpy = jest.spyOn(global, 'open').mockReturnValue(true);",
        "comment_created_at": "2025-07-04T13:01:25+00:00",
        "comment_author": "Clarity-89",
        "comment_body": "Can we mock window as described [here](https://github.com/grafana/grafana/blob/6bb74ff56a0d5a8880568c2f92f5919616790195/contribute/style-guides/testing.md#mock-the-window-object-and-its-methods), maybe that won't cause any type issues?",
        "pr_file_module": null
      },
      {
        "comment_id": "2186102934",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107596,
        "pr_file": "public/app/features/dashboard-scene/saving/provisioned/PreviewBannerViewPR.test.tsx",
        "discussion_id": "2185317877",
        "commented_code": "@@ -0,0 +1,110 @@\n+import { render, screen } from '@testing-library/react';\n+import userEvent from '@testing-library/user-event';\n+\n+import { textUtil } from '@grafana/data';\n+\n+import { PreviewBannerViewPR } from './PreviewBannerViewPR';\n+\n+jest.mock('@grafana/data', () => ({\n+  ...jest.requireActual('@grafana/data'),\n+  textUtil: {\n+    sanitizeUrl: jest.fn(),\n+  },\n+}));\n+\n+const mockTextUtil = jest.mocked(textUtil);\n+\n+function setup(props: { prParam: string; isFolder?: boolean; isNewPr?: boolean } = { prParam: 'test-url' }) {\n+  const defaultProps = {\n+    isFolder: false,\n+    isNewPr: false,\n+    ...props,\n+  };\n+\n+  const renderResult = render(<PreviewBannerViewPR {...defaultProps} />);\n+\n+  return { renderResult, props: defaultProps };\n+}\n+\n+describe('PreviewBannerViewPR', () => {\n+  let openSpy: jest.SpyInstance;\n+\n+  beforeEach(() => {\n+    jest.clearAllMocks();\n+    // @ts-expect-error global.open should return a Window, but is not implemented in js-dom.\n+    openSpy = jest.spyOn(global, 'open').mockReturnValue(true);",
        "comment_created_at": "2025-07-04T20:48:09+00:00",
        "comment_author": "ywzheng1",
        "comment_body": "good callout! I instead used `Object.defineProperty + jest.spyOn`, because we want to test if the link is going to open in a new tab. \r\n\r\nUnlike `window.location` which already exists as a getter property in JSDOM (allowing `jest.spyOn(window, 'location', 'get')`), `window.open` needs to be defined before it can be spied upon",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2176468121",
    "pr_number": 107385,
    "pr_file": "public/app/features/plugins/extensions/utils.test.tsx",
    "created_at": "2025-07-01T05:36:14+00:00",
    "commented_code": "getPluginSettings: () => Promise.resolve({ info: { version: '1.0.0' } }),\n }));\n \n-jest.mock('./logs/log', () => {\n-  const { createLogMock } = jest.requireActual('./logs/testUtils');\n-  const original = jest.requireActual('./logs/log');\n+describe('Plugin Extensions / Utils', () => {\n+  beforeEach(() => {\n+    jest.spyOn(log, 'error').mockImplementation(() => {});\n+    jest.spyOn(log, 'warning').mockImplementation(() => {});\n+    jest.spyOn(log, 'debug').mockImplementation(() => {});\n+  });\n \n-  return {\n-    ...original,\n-    log: createLogMock(),\n-  };\n-});\n+  afterEach(() => {\n+    jest.resetAllMocks();\n+  });",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2176468121",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107385,
        "pr_file": "public/app/features/plugins/extensions/utils.test.tsx",
        "discussion_id": "2176468121",
        "commented_code": "@@ -30,17 +29,17 @@ jest.mock('app/features/plugins/pluginSettings', () => ({\n   getPluginSettings: () => Promise.resolve({ info: { version: '1.0.0' } }),\n }));\n \n-jest.mock('./logs/log', () => {\n-  const { createLogMock } = jest.requireActual('./logs/testUtils');\n-  const original = jest.requireActual('./logs/log');\n+describe('Plugin Extensions / Utils', () => {\n+  beforeEach(() => {\n+    jest.spyOn(log, 'error').mockImplementation(() => {});\n+    jest.spyOn(log, 'warning').mockImplementation(() => {});\n+    jest.spyOn(log, 'debug').mockImplementation(() => {});\n+  });\n \n-  return {\n-    ...original,\n-    log: createLogMock(),\n-  };\n-});\n+  afterEach(() => {\n+    jest.resetAllMocks();\n+  });",
        "comment_created_at": "2025-07-01T05:36:14+00:00",
        "comment_author": "hugohaggmark",
        "comment_body": "The previous solution didn't work as expected as tests where passing for `expect(log.warning).toHaveBeen...` when they should have been  `expect(log.error).toHaveBeen...` ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171127570",
    "pr_number": 107242,
    "pr_file": "public/app/features/correlations/CorrelationsPage.test.tsx",
    "created_at": "2025-06-27T08:01:50+00:00",
    "commented_code": "},\n   } as unknown as BackendSrv;\n   const grafanaContext = getGrafanaContextMock({ backend });\n-  setBackendSrv(backend);\n-  setupDataSources(...Object.values(datasources));\n+  const dsServer = new MockDataSourceSrv(datasources) as unknown as DataSourceSrv;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2171127570",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107242,
        "pr_file": "public/app/features/correlations/CorrelationsPage.test.tsx",
        "discussion_id": "2171127570",
        "commented_code": "@@ -90,8 +98,17 @@ const renderWithContext = async (\n     },\n   } as unknown as BackendSrv;\n   const grafanaContext = getGrafanaContextMock({ backend });\n-  setBackendSrv(backend);\n-  setupDataSources(...Object.values(datasources));\n+  const dsServer = new MockDataSourceSrv(datasources) as unknown as DataSourceSrv;",
        "comment_created_at": "2025-06-27T08:01:50+00:00",
        "comment_author": "ivanahuckova",
        "comment_body": "We can't be using `setupDataSources` as it relies on actual import of the module that we add in https://github.com/grafana/grafana/blob/main/public/app/features/plugins/built_in_plugins.ts. Therefore we need use a mock instead. \r\n\r\nBtw this is [based on this PR and original test](https://github.com/grafana/grafana/pull/97748/files) mock before it was (recently) replaced with setupDataSources ",
        "pr_file_module": null
      }
    ]
  }
]