[
  {
    "discussion_id": "2142908357",
    "pr_number": 106441,
    "pr_file": "public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx",
    "created_at": "2025-06-12T14:22:20+00:00",
    "commented_code": "// Prevent forgetting about initial values when switching the integration type and the oncall integration type\n   useEffect(() => {\n-    // Restore values when switching back from a changed integration to the default one\n     const subscription = watch((formValues, { name, type }) => {\n       // @ts-expect-error name is valid key for formValues\n       const value = name ? formValues[name] : '';",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2142908357",
        "repo_full_name": "grafana/grafana",
        "pr_number": 106441,
        "pr_file": "public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx",
        "discussion_id": "2142908357",
        "commented_code": "@@ -79,12 +79,22 @@ export function ChannelSubForm<R extends ChannelValues>({\n \n   // Prevent forgetting about initial values when switching the integration type and the oncall integration type\n   useEffect(() => {\n-    // Restore values when switching back from a changed integration to the default one\n     const subscription = watch((formValues, { name, type }) => {\n       // @ts-expect-error name is valid key for formValues\n       const value = name ? formValues[name] : '';",
        "comment_created_at": "2025-06-12T14:22:20+00:00",
        "comment_author": "soniaAguilarPeiron",
        "comment_body": "it seems that formValues[name] was returning undefined, using get from lodash works correctly (you also need to import from lodash)\r\n```suggestion\r\n      const value = name ? get(formValues, name) : '';\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2154275866",
    "pr_number": 104207,
    "pr_file": "public/app/features/dashboard-scene/sharing/components/ImagePreview.tsx",
    "created_at": "2025-06-18T10:40:32+00:00",
    "commented_code": "+import { css } from '@emotion/css';\n+import { useMemo, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { t } from '@grafana/i18n';\n+import { Alert, LoadingBar, Text, useStyles2 } from '@grafana/ui';\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: string;\n+} | null;\n+\n+interface ImagePreviewProps {\n+  imageBlob: Blob | null;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2154275866",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/components/ImagePreview.tsx",
        "discussion_id": "2154275866",
        "commented_code": "@@ -0,0 +1,119 @@\n+import { css } from '@emotion/css';\n+import { useMemo, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { t } from '@grafana/i18n';\n+import { Alert, LoadingBar, Text, useStyles2 } from '@grafana/ui';\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: string;\n+} | null;\n+\n+interface ImagePreviewProps {\n+  imageBlob: Blob | null;",
        "comment_created_at": "2025-06-18T10:40:32+00:00",
        "comment_author": "juanicabanas",
        "comment_body": "```suggestion\r\n  imageBlob?: Blob;\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2168065372",
        "repo_full_name": "grafana/grafana",
        "pr_number": 104207,
        "pr_file": "public/app/features/dashboard-scene/sharing/components/ImagePreview.tsx",
        "discussion_id": "2154275866",
        "commented_code": "@@ -0,0 +1,119 @@\n+import { css } from '@emotion/css';\n+import { useMemo, useEffect } from 'react';\n+import { useMeasure } from 'react-use';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { selectors } from '@grafana/e2e-selectors';\n+import { t } from '@grafana/i18n';\n+import { Alert, LoadingBar, Text, useStyles2 } from '@grafana/ui';\n+\n+type ErrorState = {\n+  message: string;\n+  title: string;\n+  code?: string;\n+} | null;\n+\n+interface ImagePreviewProps {\n+  imageBlob: Blob | null;",
        "comment_created_at": "2025-06-26T04:14:26+00:00",
        "comment_author": "nmarrs",
        "comment_body": "this needs to stay null as optional prop is `undefined` vs `null` which messes up types",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2033797559",
    "pr_number": 103642,
    "pr_file": "packages/grafana-ui/src/components/Table/TableNG/TableNG.tsx",
    "created_at": "2025-04-08T18:20:56+00:00",
    "commented_code": "return props.data.fields.length;\n   }, [props.data.fields]);\n \n-  const fieldDisplayType = useMemo(() => {\n-    return props.data.fields.reduce(\n-      (acc, { config, name }) => {\n-        if (config?.custom?.cellOptions?.type) {\n-          acc[name] = config.custom.cellOptions.type;\n-        }\n-        return acc;\n-      },\n-      {} as Record<string, TableCellDisplayMode>\n-    );\n+  const fieldDisplayType: Record<string, TableCellDisplayMode> = useMemo(() => {\n+    return props.data.fields.reduce((acc, { config, name }) => {\n+      // @ts-ignore\n+      acc[name] = config.custom.cellOptions.type;",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2033797559",
        "repo_full_name": "grafana/grafana",
        "pr_number": 103642,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/TableNG.tsx",
        "discussion_id": "2033797559",
        "commented_code": "@@ -241,16 +240,12 @@ export function TableNG(props: TableNGProps) {\n     return props.data.fields.length;\n   }, [props.data.fields]);\n \n-  const fieldDisplayType = useMemo(() => {\n-    return props.data.fields.reduce(\n-      (acc, { config, name }) => {\n-        if (config?.custom?.cellOptions?.type) {\n-          acc[name] = config.custom.cellOptions.type;\n-        }\n-        return acc;\n-      },\n-      {} as Record<string, TableCellDisplayMode>\n-    );\n+  const fieldDisplayType: Record<string, TableCellDisplayMode> = useMemo(() => {\n+    return props.data.fields.reduce((acc, { config, name }) => {\n+      // @ts-ignore\n+      acc[name] = config.custom.cellOptions.type;",
        "comment_created_at": "2025-04-08T18:20:56+00:00",
        "comment_author": "leeoniya",
        "comment_body": "@ashharrison90 can we map string back to enum value somehow?",
        "pr_file_module": null
      },
      {
        "comment_id": "2034773372",
        "repo_full_name": "grafana/grafana",
        "pr_number": 103642,
        "pr_file": "packages/grafana-ui/src/components/Table/TableNG/TableNG.tsx",
        "discussion_id": "2033797559",
        "commented_code": "@@ -241,16 +240,12 @@ export function TableNG(props: TableNGProps) {\n     return props.data.fields.length;\n   }, [props.data.fields]);\n \n-  const fieldDisplayType = useMemo(() => {\n-    return props.data.fields.reduce(\n-      (acc, { config, name }) => {\n-        if (config?.custom?.cellOptions?.type) {\n-          acc[name] = config.custom.cellOptions.type;\n-        }\n-        return acc;\n-      },\n-      {} as Record<string, TableCellDisplayMode>\n-    );\n+  const fieldDisplayType: Record<string, TableCellDisplayMode> = useMemo(() => {\n+    return props.data.fields.reduce((acc, { config, name }) => {\n+      // @ts-ignore\n+      acc[name] = config.custom.cellOptions.type;",
        "comment_created_at": "2025-04-09T08:24:19+00:00",
        "comment_author": "ashharrison90",
        "comment_body": "no, but i don't think you need to, you can just type the `.reduce` properly. move your `Record<string, TableCellDisplayMode>` to be a generic on the `.reduce`:\r\n```tsx\r\n  const fieldDisplayType = useMemo(() => {\r\n    return props.data.fields.reduce<Record<string, TableCellDisplayMode>>((acc, { config, name }) => {\r\n        if (config?.custom?.cellOptions?.type) {\r\n          acc[name] = config.custom.cellOptions.type;\r\n        }\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n  }, [props.data.fields]);\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1455908465",
    "pr_number": 80238,
    "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPrevious.tsx",
    "created_at": "2024-01-17T15:48:05+00:00",
    "commented_code": "+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { locationService, setReturnToPrevious } from '@grafana/runtime';\n+import { Button, ButtonGroup, useStyles2 } from '@grafana/ui';\n+import { useGrafana } from 'app/core/context/GrafanaContext';\n+import { Trans, t } from 'app/core/internationalization';\n+\n+export interface ReturnToPreviousProps {\n+  href: string;\n+  title: string;\n+}\n+\n+export const ReturnToPrevious = ({ href, title }: ReturnToPreviousProps) => {\n+  const { chrome } = useGrafana();\n+  const styles = useStyles2(getStyles);\n+  const handleOnClick = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    locationService.push(href);\n+  };\n+  const closeButton = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    chrome.update({ returnToPrevious: { title: '', href: '' } });\n+  };\n+\n+  return (\n+    <ButtonGroup className={styles.wrapper}>\n+      <Button\n+        icon=\"angle-left\"\n+        size=\"sm\"\n+        variant=\"primary\"\n+        fill=\"outline\"\n+        onClick={handleOnClick}\n+        title={title?.toString()}",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1455908465",
        "repo_full_name": "grafana/grafana",
        "pr_number": 80238,
        "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPrevious.tsx",
        "discussion_id": "1455908465",
        "commented_code": "@@ -0,0 +1,68 @@\n+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { locationService, setReturnToPrevious } from '@grafana/runtime';\n+import { Button, ButtonGroup, useStyles2 } from '@grafana/ui';\n+import { useGrafana } from 'app/core/context/GrafanaContext';\n+import { Trans, t } from 'app/core/internationalization';\n+\n+export interface ReturnToPreviousProps {\n+  href: string;\n+  title: string;\n+}\n+\n+export const ReturnToPrevious = ({ href, title }: ReturnToPreviousProps) => {\n+  const { chrome } = useGrafana();\n+  const styles = useStyles2(getStyles);\n+  const handleOnClick = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    locationService.push(href);\n+  };\n+  const closeButton = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    chrome.update({ returnToPrevious: { title: '', href: '' } });\n+  };\n+\n+  return (\n+    <ButtonGroup className={styles.wrapper}>\n+      <Button\n+        icon=\"angle-left\"\n+        size=\"sm\"\n+        variant=\"primary\"\n+        fill=\"outline\"\n+        onClick={handleOnClick}\n+        title={title?.toString()}",
        "comment_created_at": "2024-01-17T15:48:05+00:00",
        "comment_author": "ashharrison90",
        "comment_body": "why do we need optional chaining and `toString`? the types say it's always there, and it's always a string",
        "pr_file_module": null
      },
      {
        "comment_id": "1457112763",
        "repo_full_name": "grafana/grafana",
        "pr_number": 80238,
        "pr_file": "public/app/core/components/AppChrome/ReturnToPrevious/ReturnToPrevious.tsx",
        "discussion_id": "1455908465",
        "commented_code": "@@ -0,0 +1,68 @@\n+import { css } from '@emotion/css';\n+import React from 'react';\n+\n+import { GrafanaTheme2 } from '@grafana/data';\n+import { locationService, setReturnToPrevious } from '@grafana/runtime';\n+import { Button, ButtonGroup, useStyles2 } from '@grafana/ui';\n+import { useGrafana } from 'app/core/context/GrafanaContext';\n+import { Trans, t } from 'app/core/internationalization';\n+\n+export interface ReturnToPreviousProps {\n+  href: string;\n+  title: string;\n+}\n+\n+export const ReturnToPrevious = ({ href, title }: ReturnToPreviousProps) => {\n+  const { chrome } = useGrafana();\n+  const styles = useStyles2(getStyles);\n+  const handleOnClick = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    locationService.push(href);\n+  };\n+  const closeButton = () => {\n+    setReturnToPrevious({ title: '', href: '' });\n+    chrome.update({ returnToPrevious: { title: '', href: '' } });\n+  };\n+\n+  return (\n+    <ButtonGroup className={styles.wrapper}>\n+      <Button\n+        icon=\"angle-left\"\n+        size=\"sm\"\n+        variant=\"primary\"\n+        fill=\"outline\"\n+        onClick={handleOnClick}\n+        title={title?.toString()}",
        "comment_created_at": "2024-01-18T08:49:57+00:00",
        "comment_author": "eledobleefe",
        "comment_body": "Good catch! It should be needed once and then I forgot it was there \ud83d\ude13 ",
        "pr_file_module": null
      }
    ]
  }
]