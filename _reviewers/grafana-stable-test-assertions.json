[
  {
    "discussion_id": "2183051007",
    "pr_number": 107580,
    "pr_file": "e2e-playwright/dashboards-search-suite/dashboards-search.spec.ts",
    "created_at": "2025-07-03T15:14:34+00:00",
    "commented_code": "+import { test, expect } from '@grafana/plugin-e2e';\n+\n+test.describe(\n+  'Dashboard search',\n+  {\n+    tag: ['@dashboards-search'],\n+  },\n+  () => {\n+    test.use({ viewport: { width: 1280, height: 1080 } });\n+\n+    test.beforeEach(async ({ page, selectors }) => {\n+      await page.goto('/dashboards');\n+      await expect(page.getByTestId(selectors.pages.BrowseDashboards.table.row('gdev dashboards'))).toBeVisible();\n+    });\n+\n+    test('Search - Dashboards list', async ({ page, selectors }) => {\n+      await toggleSearchView(page, selectors);\n+      await assertResultsCount(page, 24);\n+    });\n+\n+    test('Search - Filter by search input', async ({ page, selectors }) => {\n+      await toggleSearchView(page, selectors);\n+      await assertResultsCount(page, 24);\n+\n+      const searchInput = await page.getByTestId('input-wrapper');\n+      await searchInput.click();\n+      await page.keyboard.type('Datasource tests - MySQL');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 2);\n+\n+      await page.keyboard.press('ControlOrMeta+A');\n+      await page.keyboard.press('Backspace');\n+      await page.keyboard.type('Datasource tests - MySQL (unittest)');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 1);\n+\n+      await page.keyboard.press('ControlOrMeta+A');\n+      await page.keyboard.press('Backspace');\n+      await page.keyboard.type('- MySQL');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 2);\n+    });\n+  }\n+);\n+\n+async function assertResultsCount(page, length) {\n+  const rowGroup = await page.getByRole('rowgroup');\n+  const groups = await rowGroup.count();\n+  await expect(groups).toBe(1);\n+\n+  const rows = await rowGroup.first().getByRole('row');\n+  const rowCount = await rows.count();\n+  await expect(rowCount).toBe(length);",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2183051007",
        "repo_full_name": "grafana/grafana",
        "pr_number": 107580,
        "pr_file": "e2e-playwright/dashboards-search-suite/dashboards-search.spec.ts",
        "discussion_id": "2183051007",
        "commented_code": "@@ -0,0 +1,68 @@\n+import { test, expect } from '@grafana/plugin-e2e';\n+\n+test.describe(\n+  'Dashboard search',\n+  {\n+    tag: ['@dashboards-search'],\n+  },\n+  () => {\n+    test.use({ viewport: { width: 1280, height: 1080 } });\n+\n+    test.beforeEach(async ({ page, selectors }) => {\n+      await page.goto('/dashboards');\n+      await expect(page.getByTestId(selectors.pages.BrowseDashboards.table.row('gdev dashboards'))).toBeVisible();\n+    });\n+\n+    test('Search - Dashboards list', async ({ page, selectors }) => {\n+      await toggleSearchView(page, selectors);\n+      await assertResultsCount(page, 24);\n+    });\n+\n+    test('Search - Filter by search input', async ({ page, selectors }) => {\n+      await toggleSearchView(page, selectors);\n+      await assertResultsCount(page, 24);\n+\n+      const searchInput = await page.getByTestId('input-wrapper');\n+      await searchInput.click();\n+      await page.keyboard.type('Datasource tests - MySQL');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 2);\n+\n+      await page.keyboard.press('ControlOrMeta+A');\n+      await page.keyboard.press('Backspace');\n+      await page.keyboard.type('Datasource tests - MySQL (unittest)');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 1);\n+\n+      await page.keyboard.press('ControlOrMeta+A');\n+      await page.keyboard.press('Backspace');\n+      await page.keyboard.type('- MySQL');\n+      await page.waitForTimeout(300); // Wait because playwright checks too fast\n+\n+      await assertResultsCount(page, 2);\n+    });\n+  }\n+);\n+\n+async function assertResultsCount(page, length) {\n+  const rowGroup = await page.getByRole('rowgroup');\n+  const groups = await rowGroup.count();\n+  await expect(groups).toBe(1);\n+\n+  const rows = await rowGroup.first().getByRole('row');\n+  const rowCount = await rows.count();\n+  await expect(rowCount).toBe(length);",
        "comment_created_at": "2025-07-03T15:14:34+00:00",
        "comment_author": "ashharrison90",
        "comment_body": "if you make this:\r\n```tsx\r\n  const rowGroup = await page.getByRole('rowgroup');\r\n  await expect(rowGroup).toHaveCount(1);\r\n\r\n  const rows = await rowGroup.first().getByRole('row');\r\n  await expect(rows).toHaveCount(length);\r\n```\r\n\r\nit should auto retry properly and you won't need the `page.waitForTimeout` anywhere \ud83d\ude4f ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1525637206",
    "pr_number": 84512,
    "pr_file": "public/app/features/dashboard-scene/serialization/transformSaveModelToScene.test.ts",
    "created_at": "2024-03-15T00:50:40+00:00",
    "commented_code": "const scene = createDashboardSceneFromDashboardModel(oldModel);\n \n-      expect(scene.state.$behaviors).toHaveLength(6);",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1525637206",
        "repo_full_name": "grafana/grafana",
        "pr_number": 84512,
        "pr_file": "public/app/features/dashboard-scene/serialization/transformSaveModelToScene.test.ts",
        "discussion_id": "1525637206",
        "commented_code": "@@ -144,7 +144,6 @@ describe('transformSaveModelToScene', () => {\n \n       const scene = createDashboardSceneFromDashboardModel(oldModel);\n \n-      expect(scene.state.$behaviors).toHaveLength(6);",
        "comment_created_at": "2024-03-15T00:50:40+00:00",
        "comment_author": "kaydelaney",
        "comment_body": "Removing this assertion since I think the length of the `$behaviors` array is sort of independent of whether or not the cursor sync behavior is actually applied, which is what the next assertion does anyway. Plus it means we don't have to update this test every time we add/remove a behavior to the dashboard scene",
        "pr_file_module": null
      }
    ]
  }
]