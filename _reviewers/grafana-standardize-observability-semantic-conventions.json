[
  {
    "discussion_id": "1629760739",
    "pr_number": 88815,
    "pr_file": "pkg/infra/o11ysemconv/definition.go",
    "created_at": "2024-06-06T15:31:44+00:00",
    "commented_code": "+package o11ysemconv",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1629760739",
        "repo_full_name": "grafana/grafana",
        "pr_number": 88815,
        "pr_file": "pkg/infra/o11ysemconv/definition.go",
        "discussion_id": "1629760739",
        "commented_code": "@@ -0,0 +1,137 @@\n+package o11ysemconv",
        "comment_created_at": "2024-06-06T15:31:44+00:00",
        "comment_author": "diegommm",
        "comment_body": "Can we invert the import direction? The package `o11ysemconv` sounds like a package that is core and closer to the lowest level, providing foundations. It can provide both constants with the conventions and a handful of functions to standardize logging and tracing keys given as plain `string`s. Then, e.g., in `pkg/infra/log` we can import it and use these functions and constants to comply with our conventions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1639561517",
        "repo_full_name": "grafana/grafana",
        "pr_number": 88815,
        "pr_file": "pkg/infra/o11ysemconv/definition.go",
        "discussion_id": "1629760739",
        "commented_code": "@@ -0,0 +1,137 @@\n+package o11ysemconv",
        "comment_created_at": "2024-06-14T09:38:56+00:00",
        "comment_author": "marefr",
        "comment_body": "Thanks. Maybe. Given\r\n\r\n> For specific attributes to certain feature etc I imagine that each feature implements attributes internally to their feature code maybe, but just some random thoughts.\r\n\r\nIn these cases wouldn't make sense to add things to the tracing/log package.",
        "pr_file_module": null
      },
      {
        "comment_id": "1639568796",
        "repo_full_name": "grafana/grafana",
        "pr_number": 88815,
        "pr_file": "pkg/infra/o11ysemconv/definition.go",
        "discussion_id": "1629760739",
        "commented_code": "@@ -0,0 +1,137 @@\n+package o11ysemconv",
        "comment_created_at": "2024-06-14T09:44:27+00:00",
        "comment_author": "marefr",
        "comment_body": "So splitting the core definition support and the actual core attributes in separate packages might be better? Core definition would still depend on otel and the log attributes could potentially live in this package as well not adding a dependency on pkg/infra/log.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1629773406",
    "pr_number": 88815,
    "pr_file": "pkg/services/contexthandler/contexthandler.go",
    "created_at": "2024-06-06T15:40:56+00:00",
    "commented_code": "reqContext.IsRenderCall = identity.IsAuthenticatedBy(login.RenderModule)\n \t\t}\n \n-\t\treqContext.Logger = reqContext.Logger.New(\"userId\", reqContext.UserID, \"orgId\", reqContext.OrgID, \"uname\", reqContext.Login)\n+\t\treqContext.Logger = reqContext.Logger.New(log.Attributes(\n+\t\t\to11ysemconv.UserID.LogKV(reqContext.UserID),\n+\t\t\to11ysemconv.OrgID.LogKV(reqContext.OrgID),\n+\t\t\to11ysemconv.Username.LogKV(reqContext.Login),\n+\t\t))\n \t\tspan.AddEvent(\"user\", trace.WithAttributes(\n-\t\t\tattribute.String(\"uname\", reqContext.Login),\n-\t\t\tattribute.Int64(\"orgId\", reqContext.OrgID),\n-\t\t\tattribute.Int64(\"userId\", reqContext.UserID),\n+\t\t\to11ysemconv.Username.SpanAttribute(reqContext.Login),",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1629773406",
        "repo_full_name": "grafana/grafana",
        "pr_number": 88815,
        "pr_file": "pkg/services/contexthandler/contexthandler.go",
        "discussion_id": "1629773406",
        "commented_code": "@@ -124,11 +124,15 @@ func (h *ContextHandler) Middleware(next http.Handler) http.Handler {\n \t\t\treqContext.IsRenderCall = identity.IsAuthenticatedBy(login.RenderModule)\n \t\t}\n \n-\t\treqContext.Logger = reqContext.Logger.New(\"userId\", reqContext.UserID, \"orgId\", reqContext.OrgID, \"uname\", reqContext.Login)\n+\t\treqContext.Logger = reqContext.Logger.New(log.Attributes(\n+\t\t\to11ysemconv.UserID.LogKV(reqContext.UserID),\n+\t\t\to11ysemconv.OrgID.LogKV(reqContext.OrgID),\n+\t\t\to11ysemconv.Username.LogKV(reqContext.Login),\n+\t\t))\n \t\tspan.AddEvent(\"user\", trace.WithAttributes(\n-\t\t\tattribute.String(\"uname\", reqContext.Login),\n-\t\t\tattribute.Int64(\"orgId\", reqContext.OrgID),\n-\t\t\tattribute.Int64(\"userId\", reqContext.UserID),\n+\t\t\to11ysemconv.Username.SpanAttribute(reqContext.Login),",
        "comment_created_at": "2024-06-06T15:40:56+00:00",
        "comment_author": "diegommm",
        "comment_body": "Conversely, this would look like:\r\n```suggestion\r\n\t\t\ttracing.Username(reqContext.Login),\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1440688774",
    "pr_number": 79936,
    "pr_file": "pkg/services/ngalert/metrics/remote_secondary_forked_alertmanager.go",
    "created_at": "2024-01-03T17:07:14+00:00",
    "commented_code": "+package metrics\n+\n+import (\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n+)\n+\n+type RemoteSecondaryForkedAlertmanager struct {\n+\tSyncsTotal                    *prometheus.CounterVec\n+\tConfigurationSyncsFailedTotal *prometheus.CounterVec\n+\tStateSyncsFailedTotal         *prometheus.CounterVec\n+}\n+\n+func NewRemoteSecondaryForkedAlertmanagerMetrics(r prometheus.Registerer, subsystem string) *RemoteSecondaryForkedAlertmanager {\n+\treturn &RemoteSecondaryForkedAlertmanager{\n+\t\tSyncsTotal: promauto.With(r).NewCounterVec(prometheus.CounterOpts{\n+\t\t\tNamespace: Namespace,\n+\t\t\tSubsystem: subsystem,\n+\t\t\tName:      \"remote_secondary_forked_alertmanager_syncs_total\",",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1440688774",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79936,
        "pr_file": "pkg/services/ngalert/metrics/remote_secondary_forked_alertmanager.go",
        "discussion_id": "1440688774",
        "commented_code": "@@ -0,0 +1,35 @@\n+package metrics\n+\n+import (\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n+)\n+\n+type RemoteSecondaryForkedAlertmanager struct {\n+\tSyncsTotal                    *prometheus.CounterVec\n+\tConfigurationSyncsFailedTotal *prometheus.CounterVec\n+\tStateSyncsFailedTotal         *prometheus.CounterVec\n+}\n+\n+func NewRemoteSecondaryForkedAlertmanagerMetrics(r prometheus.Registerer, subsystem string) *RemoteSecondaryForkedAlertmanager {\n+\treturn &RemoteSecondaryForkedAlertmanager{\n+\t\tSyncsTotal: promauto.With(r).NewCounterVec(prometheus.CounterOpts{\n+\t\t\tNamespace: Namespace,\n+\t\t\tSubsystem: subsystem,\n+\t\t\tName:      \"remote_secondary_forked_alertmanager_syncs_total\",",
        "comment_created_at": "2024-01-03T17:07:14+00:00",
        "comment_author": "alexweav",
        "comment_body": "Do these metrics apply specifically to the remote **secondary** alertmanager? They seem like they'd make sense for any remote alertmanager, even in primary mode.\r\n\r\nIf so, could we consider dropping `secondary` from all the names?\r\n\r\nAlso, `forked` feels like an implementation detail. Could it be `remote_alertmanager_syncs_total` and similar?",
        "pr_file_module": null
      },
      {
        "comment_id": "1442746678",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79936,
        "pr_file": "pkg/services/ngalert/metrics/remote_secondary_forked_alertmanager.go",
        "discussion_id": "1440688774",
        "commented_code": "@@ -0,0 +1,35 @@\n+package metrics\n+\n+import (\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n+)\n+\n+type RemoteSecondaryForkedAlertmanager struct {\n+\tSyncsTotal                    *prometheus.CounterVec\n+\tConfigurationSyncsFailedTotal *prometheus.CounterVec\n+\tStateSyncsFailedTotal         *prometheus.CounterVec\n+}\n+\n+func NewRemoteSecondaryForkedAlertmanagerMetrics(r prometheus.Registerer, subsystem string) *RemoteSecondaryForkedAlertmanager {\n+\treturn &RemoteSecondaryForkedAlertmanager{\n+\t\tSyncsTotal: promauto.With(r).NewCounterVec(prometheus.CounterOpts{\n+\t\t\tNamespace: Namespace,\n+\t\t\tSubsystem: subsystem,\n+\t\t\tName:      \"remote_secondary_forked_alertmanager_syncs_total\",",
        "comment_created_at": "2024-01-05T11:05:30+00:00",
        "comment_author": "santihernandezc",
        "comment_body": "This is only for remote secondary, we won't sync config and state in other modes, but rather redirect writes to the remote Alertmanager. There won't be any time-based convergence.\r\n\r\nI started adding the metrics we care about in all modes in [this PR for the remote Alertmanager struct](https://github.com/grafana/grafana/pull/79835).",
        "pr_file_module": null
      },
      {
        "comment_id": "1442962366",
        "repo_full_name": "grafana/grafana",
        "pr_number": 79936,
        "pr_file": "pkg/services/ngalert/metrics/remote_secondary_forked_alertmanager.go",
        "discussion_id": "1440688774",
        "commented_code": "@@ -0,0 +1,35 @@\n+package metrics\n+\n+import (\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n+)\n+\n+type RemoteSecondaryForkedAlertmanager struct {\n+\tSyncsTotal                    *prometheus.CounterVec\n+\tConfigurationSyncsFailedTotal *prometheus.CounterVec\n+\tStateSyncsFailedTotal         *prometheus.CounterVec\n+}\n+\n+func NewRemoteSecondaryForkedAlertmanagerMetrics(r prometheus.Registerer, subsystem string) *RemoteSecondaryForkedAlertmanager {\n+\treturn &RemoteSecondaryForkedAlertmanager{\n+\t\tSyncsTotal: promauto.With(r).NewCounterVec(prometheus.CounterOpts{\n+\t\t\tNamespace: Namespace,\n+\t\t\tSubsystem: subsystem,\n+\t\t\tName:      \"remote_secondary_forked_alertmanager_syncs_total\",",
        "comment_created_at": "2024-01-05T14:41:18+00:00",
        "comment_author": "gotjosh",
        "comment_body": "Agree with alex and I would take it one step further and and get rid of any sort of attachment to any of the modes. Metrics just exists as-is and are used by whatever mode we're on. \r\n\r\nAs such, everything should be in the remote alertmanager metrics struct.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171473718",
    "pr_number": 105771,
    "pr_file": "pkg/server/distributor_test.go",
    "created_at": "2025-06-27T10:00:18+00:00",
    "commented_code": "+package server\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math/rand\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\tclaims \"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/api\"\n+\t\"github.com/grafana/grafana/pkg/apimachinery/identity\"\n+\t\"github.com/grafana/grafana/pkg/modules\"\n+\t\"github.com/grafana/grafana/pkg/services/featuremgmt\"\n+\t\"github.com/grafana/grafana/pkg/services/sqlstore/sqlutil\"\n+\t\"github.com/grafana/grafana/pkg/setting\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resourcepb\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/search\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/sql\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"go.opentelemetry.io/otel/trace/noop\"\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/credentials/insecure\"\n+\t\"google.golang.org/grpc/health/grpc_health_v1\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"k8s.io/component-base/metrics/legacyregistry\"\n+)\n+\n+var (\n+\ttestIndexFileThreshold  = 200 // just needs to be bigger than max playlist number, so the indexer don't use the filesystem\n+\tnamespaceCount          = 250 // how many stacks we're simulating\n+\tmaxPlaylistPerNamespace = 50  // upper bound on how many playlists we will seed to each stack.\n+)\n+\n+//nolint:gocyclo\n+func TestIntegrationDistributor(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping integration test\")\n+\t}\n+\n+\tdbType := sqlutil.GetTestDBType()\n+\tif dbType != \"mysql\" {\n+\t\tt.Skip()\n+\t}\n+\n+\t// this next line is to avoid double registration when registering sprinkles metrics",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "2171473718",
        "repo_full_name": "grafana/grafana",
        "pr_number": 105771,
        "pr_file": "pkg/server/distributor_test.go",
        "discussion_id": "2171473718",
        "commented_code": "@@ -0,0 +1,475 @@\n+package server\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math/rand\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\tclaims \"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/api\"\n+\t\"github.com/grafana/grafana/pkg/apimachinery/identity\"\n+\t\"github.com/grafana/grafana/pkg/modules\"\n+\t\"github.com/grafana/grafana/pkg/services/featuremgmt\"\n+\t\"github.com/grafana/grafana/pkg/services/sqlstore/sqlutil\"\n+\t\"github.com/grafana/grafana/pkg/setting\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resourcepb\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/search\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/sql\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"go.opentelemetry.io/otel/trace/noop\"\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/credentials/insecure\"\n+\t\"google.golang.org/grpc/health/grpc_health_v1\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"k8s.io/component-base/metrics/legacyregistry\"\n+)\n+\n+var (\n+\ttestIndexFileThreshold  = 200 // just needs to be bigger than max playlist number, so the indexer don't use the filesystem\n+\tnamespaceCount          = 250 // how many stacks we're simulating\n+\tmaxPlaylistPerNamespace = 50  // upper bound on how many playlists we will seed to each stack.\n+)\n+\n+//nolint:gocyclo\n+func TestIntegrationDistributor(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping integration test\")\n+\t}\n+\n+\tdbType := sqlutil.GetTestDBType()\n+\tif dbType != \"mysql\" {\n+\t\tt.Skip()\n+\t}\n+\n+\t// this next line is to avoid double registration when registering sprinkles metrics",
        "comment_created_at": "2025-06-27T10:00:18+00:00",
        "comment_author": "pstibrany",
        "comment_body": "Why do we register sprinkles metrics twice? This looks like a bug to be fixed than worked around.",
        "pr_file_module": null
      },
      {
        "comment_id": "2171965049",
        "repo_full_name": "grafana/grafana",
        "pr_number": 105771,
        "pr_file": "pkg/server/distributor_test.go",
        "discussion_id": "2171473718",
        "commented_code": "@@ -0,0 +1,475 @@\n+package server\n+\n+import (\n+\t\"context\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math/rand\"\n+\t\"net\"\n+\t\"net/http\"\n+\t\"strconv\"\n+\t\"sync\"\n+\t\"testing\"\n+\t\"time\"\n+\n+\tclaims \"github.com/grafana/authlib/types\"\n+\t\"github.com/grafana/grafana/pkg/api\"\n+\t\"github.com/grafana/grafana/pkg/apimachinery/identity\"\n+\t\"github.com/grafana/grafana/pkg/modules\"\n+\t\"github.com/grafana/grafana/pkg/services/featuremgmt\"\n+\t\"github.com/grafana/grafana/pkg/services/sqlstore/sqlutil\"\n+\t\"github.com/grafana/grafana/pkg/setting\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resource\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/resourcepb\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/search\"\n+\t\"github.com/grafana/grafana/pkg/storage/unified/sql\"\n+\t\"github.com/prometheus/client_golang/prometheus\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"go.opentelemetry.io/otel/trace/noop\"\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/credentials/insecure\"\n+\t\"google.golang.org/grpc/health/grpc_health_v1\"\n+\t\"google.golang.org/grpc/metadata\"\n+\t\"k8s.io/component-base/metrics/legacyregistry\"\n+)\n+\n+var (\n+\ttestIndexFileThreshold  = 200 // just needs to be bigger than max playlist number, so the indexer don't use the filesystem\n+\tnamespaceCount          = 250 // how many stacks we're simulating\n+\tmaxPlaylistPerNamespace = 50  // upper bound on how many playlists we will seed to each stack.\n+)\n+\n+//nolint:gocyclo\n+func TestIntegrationDistributor(t *testing.T) {\n+\tif testing.Short() {\n+\t\tt.Skip(\"skipping integration test\")\n+\t}\n+\n+\tdbType := sqlutil.GetTestDBType()\n+\tif dbType != \"mysql\" {\n+\t\tt.Skip()\n+\t}\n+\n+\t// this next line is to avoid double registration when registering sprinkles metrics",
        "comment_created_at": "2025-06-27T12:39:25+00:00",
        "comment_author": "gassiss",
        "comment_body": "sorry, I don't mean we register the sprinkles metrics twice every time, but since we instantiate multiple module servers, each of them will try to register sprinkles metrics causing double registration.\r\n\r\nThe module server calls [InitializeDocumentBuilders](https://github.com/grafana/grafana/blob/main/pkg/server/module_server.go#L172), which will instantiate it's own prometheus registry (in enterprise mode). \r\nIdeally it would take the registry from params so we can pass the same one the module server uses. We have this problem in a few places in the code base, this line is a workaround so this PR can stay on topic",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1637895990",
    "pr_number": 89151,
    "pr_file": "pkg/services/apiserver/standalone/factory.go",
    "created_at": "2024-06-13T09:29:40+00:00",
    "commented_code": "Client: client.NewTestDataClient(),\n \t\t\t},\n \t\t\tclient.NewTestDataRegistry(),\n-\t\t\tnil,                      // legacy lookup\n-\t\t\tprometheus.NewRegistry(), // ???\n+\t\t\tnil, // legacy lookup\n+\t\t\tprometheus.DefaultRegisterer,",
    "repo_full_name": "grafana/grafana",
    "discussion_comments": [
      {
        "comment_id": "1637895990",
        "repo_full_name": "grafana/grafana",
        "pr_number": 89151,
        "pr_file": "pkg/services/apiserver/standalone/factory.go",
        "discussion_id": "1637895990",
        "commented_code": "@@ -86,8 +86,8 @@ func (p *DummyAPIFactory) MakeAPIServer(_ context.Context, tracer tracing.Tracer\n \t\t\t\tClient: client.NewTestDataClient(),\n \t\t\t},\n \t\t\tclient.NewTestDataRegistry(),\n-\t\t\tnil,                      // legacy lookup\n-\t\t\tprometheus.NewRegistry(), // ???\n+\t\t\tnil, // legacy lookup\n+\t\t\tprometheus.DefaultRegisterer,",
        "comment_created_at": "2024-06-13T09:29:40+00:00",
        "comment_author": "marefr",
        "comment_body": "With import of pkg/infra/metrics\r\n\r\n```suggestion\r\n\t\t\tmetrics.ProvideRegisterer(),\r\n```",
        "pr_file_module": null
      }
    ]
  }
]