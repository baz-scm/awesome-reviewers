[
  {
    "discussion_id": "1164632498",
    "pr_number": 2507,
    "pr_file": "book/src/languages.md",
    "created_at": "2023-04-12T20:40:34+00:00",
    "commented_code": "replaced at runtime with the appropriate path separator for the operating\n    system, so this rule would match against `.git\\config` files on Windows.\n \n-### Language Server configuration\n+## Language Server configuration\n+\n+Language servers are configured separately in the table `language-server` in the same file as the languages `languages.toml`\n \n-The `language-server` field takes the following keys:\n+For example:\n \n-| Key           | Description                                                           |\n-| ---           | -----------                                                           |\n-| `command`     | The name of the language server binary to execute. Binaries must be in `$PATH` |\n-| `args`        | A list of arguments to pass to the language server binary             |\n-| `timeout`     | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n-| `language-id` | The language name to pass to the language server. Some language servers support multiple languages and use this field to determine which one is being served in a buffer |\n-| `environment` | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+```toml\n+[language-server.mylang-lsp]\n+command = \"mylang-lsp\"\n+args = [\"--stdio\"]\n+config = { provideFormatter = true }\n+environment = { \"ENV1\" = \"value1\", \"ENV2\" = \"value2\" }\n+\n+[language-server.efm-lsp-prettier]\n+command = \"efm-langserver\"\n+\n+[language-server.efm-lsp-prettier.config]\n+documentFormatting = true\n+languages = { typescript = [ { formatCommand =\"prettier --stdin-filepath ${INPUT}\", formatStdin = true } ] }\n+```\n \n-The top-level `config` field is used to configure the LSP initialization options. A `format`\n-sub-table within `config` can be used to pass extra formatting options to\n-[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-16.md#document-formatting-request--leftwards_arrow_with_hook).\n+These are the available options for a language server.\n+\n+| Key                   | Description                                                                              |\n+| ----                  | -----------                                                                              |\n+| `command`             | The name or path of the language server binary to execute. Binaries must be in `$PATH`   |\n+| `args`                | A list of arguments to pass to the language server binary                                |\n+| `config`              | LSP initialization options                               |\n+| `timeout`             | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n+| `environment`         | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+\n+A `format` sub-table within `config` can be used to pass extra formatting options to\n+[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-17.md#document-formatting-request--leftwards_arrow_with_hook).\n For example with typescript:\n \n ```toml\n-[[language]]\n-name = \"typescript\"\n-auto-format = true\n+[language-server.typescript-language-server]\n # pass format options according to https://github.com/typescript-language-server/typescript-language-server#workspacedidchangeconfiguration omitting the \"[language].format.\" prefix.\n config = { format = { \"semicolons\" = \"insert\", \"insertSpaceBeforeFunctionParenthesis\" = true } }\n ```\n \n+### Configuring Language Servers for a language\n+\n+The `language-servers` attribute in a language tells helix which language servers are used for this language.\n+\n+They have to be defined in the `[language-server]` table as described in the previous section.\n+\n+Different languages can use the same language server instance, e.g. `typescript-language-server` is used for javascript, jsx, tsx and typescript by default.\n+\n+In case multiple language servers are specified in the `language-servers` attribute of a `language`,\n+it's often useful to only enable/disable certain language-server features for these language servers.\n+\n+For example `efm-lsp-prettier` of the previous example is used only with a formatting command `prettier`,\n+so everything else should be handled by the `typescript-language-server` (which is configured by default)\n+The language configuration for typescript could look like this:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"efm-lsp-prettier\", only-features = [ \"format\" ] }, \"typescript-language-server\" ]\n+```\n+\n+or equivalent:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"typescript-language-server\", except-features = [ \"format\" ] }, \"efm-lsp-prettier\" ]\n+```\n+\n+Each requested LSP feature is prioritized in the order of the `language-servers` array.\n+For example the first `goto-definition` supported language server (in this case `typescript-language-server`) will be taken for the relevant LSP request (command `goto_definition`).",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1164632498",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 2507,
        "pr_file": "book/src/languages.md",
        "discussion_id": "1164632498",
        "commented_code": "@@ -92,31 +96,101 @@ with the following priorities:\n    replaced at runtime with the appropriate path separator for the operating\n    system, so this rule would match against `.git\\config` files on Windows.\n \n-### Language Server configuration\n+## Language Server configuration\n+\n+Language servers are configured separately in the table `language-server` in the same file as the languages `languages.toml`\n \n-The `language-server` field takes the following keys:\n+For example:\n \n-| Key           | Description                                                           |\n-| ---           | -----------                                                           |\n-| `command`     | The name of the language server binary to execute. Binaries must be in `$PATH` |\n-| `args`        | A list of arguments to pass to the language server binary             |\n-| `timeout`     | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n-| `language-id` | The language name to pass to the language server. Some language servers support multiple languages and use this field to determine which one is being served in a buffer |\n-| `environment` | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+```toml\n+[language-server.mylang-lsp]\n+command = \"mylang-lsp\"\n+args = [\"--stdio\"]\n+config = { provideFormatter = true }\n+environment = { \"ENV1\" = \"value1\", \"ENV2\" = \"value2\" }\n+\n+[language-server.efm-lsp-prettier]\n+command = \"efm-langserver\"\n+\n+[language-server.efm-lsp-prettier.config]\n+documentFormatting = true\n+languages = { typescript = [ { formatCommand =\"prettier --stdin-filepath ${INPUT}\", formatStdin = true } ] }\n+```\n \n-The top-level `config` field is used to configure the LSP initialization options. A `format`\n-sub-table within `config` can be used to pass extra formatting options to\n-[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-16.md#document-formatting-request--leftwards_arrow_with_hook).\n+These are the available options for a language server.\n+\n+| Key                   | Description                                                                              |\n+| ----                  | -----------                                                                              |\n+| `command`             | The name or path of the language server binary to execute. Binaries must be in `$PATH`   |\n+| `args`                | A list of arguments to pass to the language server binary                                |\n+| `config`              | LSP initialization options                               |\n+| `timeout`             | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n+| `environment`         | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+\n+A `format` sub-table within `config` can be used to pass extra formatting options to\n+[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-17.md#document-formatting-request--leftwards_arrow_with_hook).\n For example with typescript:\n \n ```toml\n-[[language]]\n-name = \"typescript\"\n-auto-format = true\n+[language-server.typescript-language-server]\n # pass format options according to https://github.com/typescript-language-server/typescript-language-server#workspacedidchangeconfiguration omitting the \"[language].format.\" prefix.\n config = { format = { \"semicolons\" = \"insert\", \"insertSpaceBeforeFunctionParenthesis\" = true } }\n ```\n \n+### Configuring Language Servers for a language\n+\n+The `language-servers` attribute in a language tells helix which language servers are used for this language.\n+\n+They have to be defined in the `[language-server]` table as described in the previous section.\n+\n+Different languages can use the same language server instance, e.g. `typescript-language-server` is used for javascript, jsx, tsx and typescript by default.\n+\n+In case multiple language servers are specified in the `language-servers` attribute of a `language`,\n+it's often useful to only enable/disable certain language-server features for these language servers.\n+\n+For example `efm-lsp-prettier` of the previous example is used only with a formatting command `prettier`,\n+so everything else should be handled by the `typescript-language-server` (which is configured by default)\n+The language configuration for typescript could look like this:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"efm-lsp-prettier\", only-features = [ \"format\" ] }, \"typescript-language-server\" ]\n+```\n+\n+or equivalent:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"typescript-language-server\", except-features = [ \"format\" ] }, \"efm-lsp-prettier\" ]\n+```\n+\n+Each requested LSP feature is prioritized in the order of the `language-servers` array.\n+For example the first `goto-definition` supported language server (in this case `typescript-language-server`) will be taken for the relevant LSP request (command `goto_definition`).",
        "comment_created_at": "2023-04-12T20:40:34+00:00",
        "comment_author": "benjamineskola",
        "comment_body": "This line makes it sound like only one language server can be used for each feature. That certainly makes sense for formatting, for example, and it's understandable if it was done that way for every feature, for the sake of simplicity. However, it seems like in practice diagnostics, at least, are used from every configured server. Maybe the documentation could be clarified?",
        "pr_file_module": null
      },
      {
        "comment_id": "1166828716",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 2507,
        "pr_file": "book/src/languages.md",
        "discussion_id": "1164632498",
        "commented_code": "@@ -92,31 +96,101 @@ with the following priorities:\n    replaced at runtime with the appropriate path separator for the operating\n    system, so this rule would match against `.git\\config` files on Windows.\n \n-### Language Server configuration\n+## Language Server configuration\n+\n+Language servers are configured separately in the table `language-server` in the same file as the languages `languages.toml`\n \n-The `language-server` field takes the following keys:\n+For example:\n \n-| Key           | Description                                                           |\n-| ---           | -----------                                                           |\n-| `command`     | The name of the language server binary to execute. Binaries must be in `$PATH` |\n-| `args`        | A list of arguments to pass to the language server binary             |\n-| `timeout`     | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n-| `language-id` | The language name to pass to the language server. Some language servers support multiple languages and use this field to determine which one is being served in a buffer |\n-| `environment` | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+```toml\n+[language-server.mylang-lsp]\n+command = \"mylang-lsp\"\n+args = [\"--stdio\"]\n+config = { provideFormatter = true }\n+environment = { \"ENV1\" = \"value1\", \"ENV2\" = \"value2\" }\n+\n+[language-server.efm-lsp-prettier]\n+command = \"efm-langserver\"\n+\n+[language-server.efm-lsp-prettier.config]\n+documentFormatting = true\n+languages = { typescript = [ { formatCommand =\"prettier --stdin-filepath ${INPUT}\", formatStdin = true } ] }\n+```\n \n-The top-level `config` field is used to configure the LSP initialization options. A `format`\n-sub-table within `config` can be used to pass extra formatting options to\n-[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-16.md#document-formatting-request--leftwards_arrow_with_hook).\n+These are the available options for a language server.\n+\n+| Key                   | Description                                                                              |\n+| ----                  | -----------                                                                              |\n+| `command`             | The name or path of the language server binary to execute. Binaries must be in `$PATH`   |\n+| `args`                | A list of arguments to pass to the language server binary                                |\n+| `config`              | LSP initialization options                               |\n+| `timeout`             | The maximum time a request to the language server may take, in seconds. Defaults to `20` |\n+| `environment`         | Any environment variables that will be used when starting the language server `{ \"KEY1\" = \"Value1\", \"KEY2\" = \"Value2\" }` |\n+\n+A `format` sub-table within `config` can be used to pass extra formatting options to\n+[Document Formatting Requests](https://github.com/microsoft/language-server-protocol/blob/gh-pages/_specifications/specification-3-17.md#document-formatting-request--leftwards_arrow_with_hook).\n For example with typescript:\n \n ```toml\n-[[language]]\n-name = \"typescript\"\n-auto-format = true\n+[language-server.typescript-language-server]\n # pass format options according to https://github.com/typescript-language-server/typescript-language-server#workspacedidchangeconfiguration omitting the \"[language].format.\" prefix.\n config = { format = { \"semicolons\" = \"insert\", \"insertSpaceBeforeFunctionParenthesis\" = true } }\n ```\n \n+### Configuring Language Servers for a language\n+\n+The `language-servers` attribute in a language tells helix which language servers are used for this language.\n+\n+They have to be defined in the `[language-server]` table as described in the previous section.\n+\n+Different languages can use the same language server instance, e.g. `typescript-language-server` is used for javascript, jsx, tsx and typescript by default.\n+\n+In case multiple language servers are specified in the `language-servers` attribute of a `language`,\n+it's often useful to only enable/disable certain language-server features for these language servers.\n+\n+For example `efm-lsp-prettier` of the previous example is used only with a formatting command `prettier`,\n+so everything else should be handled by the `typescript-language-server` (which is configured by default)\n+The language configuration for typescript could look like this:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"efm-lsp-prettier\", only-features = [ \"format\" ] }, \"typescript-language-server\" ]\n+```\n+\n+or equivalent:\n+\n+```toml\n+[[language]]\n+name = \"typescript\"\n+language-servers = [ { name = \"typescript-language-server\", except-features = [ \"format\" ] }, \"efm-lsp-prettier\" ]\n+```\n+\n+Each requested LSP feature is prioritized in the order of the `language-servers` array.\n+For example the first `goto-definition` supported language server (in this case `typescript-language-server`) will be taken for the relevant LSP request (command `goto_definition`).",
        "comment_created_at": "2023-04-14T13:20:45+00:00",
        "comment_author": "Philipp-M",
        "comment_body": "Yeah good point, I added additional documentation in https://github.com/helix-editor/helix/commit/94e238a2c0694d709fa9bce383731e01339dea11,\r\n\r\nThanks for the suggestion.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2009146286",
    "pr_number": 12258,
    "pr_file": "book/src/other-software.md",
    "created_at": "2025-03-23T15:31:01+00:00",
    "commented_code": "+# Helix mode in other software\n+\n+Helix' keymap and interaction model ([Using Helix](#usage.md)) is easier to adopt if it can be used consistently in many editing contexts. Yet, certain use cases cannot easily be addressed directly in Helix. Similar to vim, this leads to the creation of \"Helix mode\" in various other software products, allowing Helix-style editing for a greater variety of use cases.\n+\n+\"Helix mode\" is frequently still in early stages or missing entirely. For such cases, we also link to relevant bugs or discussions.\n+\n+## Other editors\n+\n+| Editor | Plugin or feature providing Helix editing. | Comments\n+| --- | --- | --- |\n+| [Vim](https://www.vim.org/) | [helix.vim](https://github.com/chtenb/helix.vim) config |\n+| [IntelliJ IDEA](https://www.jetbrains.com/idea/) / [Android Studio](https://developer.android.com/studio)| [IdeaVim](https://plugins.jetbrains.com/plugin/164-ideavim) plugin + [helix.idea.vim](https://github.com/chtenb/helix.vim) config | Minimum recommended version is IdeaVim 2.19.0.\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Dance](https://marketplace.visualstudio.com/items?itemName=gregoire.dance) extension, or its [Helix fork](https://marketplace.visualstudio.com/items?itemName=kend.dancehelixkey) | The Helix fork has diverged. You can also use the original Dance and tweak its keybindings directly (try [this config](https://github.com/71/dance/issues/299#issuecomment-1655509531)).\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Helix for VS Code](https://marketplace.visualstudio.com/items?itemName=jasew.vscode-helix-emulation) extension| Seems to work less well than Dance.\n+| [Zed](https://zed.dev/) | native via keybindings ([Bug](https://github.com/zed-industries/zed/issues/4642)) | Still pretty rudimentary.",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2009146286",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 12258,
        "pr_file": "book/src/other-software.md",
        "discussion_id": "2009146286",
        "commented_code": "@@ -0,0 +1,32 @@\n+# Helix mode in other software\n+\n+Helix' keymap and interaction model ([Using Helix](#usage.md)) is easier to adopt if it can be used consistently in many editing contexts. Yet, certain use cases cannot easily be addressed directly in Helix. Similar to vim, this leads to the creation of \"Helix mode\" in various other software products, allowing Helix-style editing for a greater variety of use cases.\n+\n+\"Helix mode\" is frequently still in early stages or missing entirely. For such cases, we also link to relevant bugs or discussions.\n+\n+## Other editors\n+\n+| Editor | Plugin or feature providing Helix editing. | Comments\n+| --- | --- | --- |\n+| [Vim](https://www.vim.org/) | [helix.vim](https://github.com/chtenb/helix.vim) config |\n+| [IntelliJ IDEA](https://www.jetbrains.com/idea/) / [Android Studio](https://developer.android.com/studio)| [IdeaVim](https://plugins.jetbrains.com/plugin/164-ideavim) plugin + [helix.idea.vim](https://github.com/chtenb/helix.vim) config | Minimum recommended version is IdeaVim 2.19.0.\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Dance](https://marketplace.visualstudio.com/items?itemName=gregoire.dance) extension, or its [Helix fork](https://marketplace.visualstudio.com/items?itemName=kend.dancehelixkey) | The Helix fork has diverged. You can also use the original Dance and tweak its keybindings directly (try [this config](https://github.com/71/dance/issues/299#issuecomment-1655509531)).\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Helix for VS Code](https://marketplace.visualstudio.com/items?itemName=jasew.vscode-helix-emulation) extension| Seems to work less well than Dance.\n+| [Zed](https://zed.dev/) | native via keybindings ([Bug](https://github.com/zed-industries/zed/issues/4642)) | Still pretty rudimentary.",
        "comment_created_at": "2025-03-23T15:31:01+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "Some of the commentary is good like the above one about dance. I'd like to avoid commenting on how well the extensions work though like these two lines since the extensions might get better over time (and then this page is out of date) and how well the emulation works might be arguable\r\n\r\n(Same for the shells section below - we can probably drop the \"comments\" column from that table)",
        "pr_file_module": null
      },
      {
        "comment_id": "2010147687",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 12258,
        "pr_file": "book/src/other-software.md",
        "discussion_id": "2009146286",
        "commented_code": "@@ -0,0 +1,32 @@\n+# Helix mode in other software\n+\n+Helix' keymap and interaction model ([Using Helix](#usage.md)) is easier to adopt if it can be used consistently in many editing contexts. Yet, certain use cases cannot easily be addressed directly in Helix. Similar to vim, this leads to the creation of \"Helix mode\" in various other software products, allowing Helix-style editing for a greater variety of use cases.\n+\n+\"Helix mode\" is frequently still in early stages or missing entirely. For such cases, we also link to relevant bugs or discussions.\n+\n+## Other editors\n+\n+| Editor | Plugin or feature providing Helix editing. | Comments\n+| --- | --- | --- |\n+| [Vim](https://www.vim.org/) | [helix.vim](https://github.com/chtenb/helix.vim) config |\n+| [IntelliJ IDEA](https://www.jetbrains.com/idea/) / [Android Studio](https://developer.android.com/studio)| [IdeaVim](https://plugins.jetbrains.com/plugin/164-ideavim) plugin + [helix.idea.vim](https://github.com/chtenb/helix.vim) config | Minimum recommended version is IdeaVim 2.19.0.\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Dance](https://marketplace.visualstudio.com/items?itemName=gregoire.dance) extension, or its [Helix fork](https://marketplace.visualstudio.com/items?itemName=kend.dancehelixkey) | The Helix fork has diverged. You can also use the original Dance and tweak its keybindings directly (try [this config](https://github.com/71/dance/issues/299#issuecomment-1655509531)).\n+| [Visual Studio Code](https://code.visualstudio.com/) | [Helix for VS Code](https://marketplace.visualstudio.com/items?itemName=jasew.vscode-helix-emulation) extension| Seems to work less well than Dance.\n+| [Zed](https://zed.dev/) | native via keybindings ([Bug](https://github.com/zed-industries/zed/issues/4642)) | Still pretty rudimentary.",
        "comment_created_at": "2025-03-24T13:07:17+00:00",
        "comment_author": "sdoerner",
        "comment_body": "Done. ",
        "pr_file_module": null
      }
    ]
  }
]