[
  {
    "discussion_id": "1147103582",
    "pr_number": 6118,
    "pr_file": "runtime/queries/go/context.scm",
    "created_at": "2023-03-24T04:22:22+00:00",
    "commented_code": "+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1147103582",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-24T04:22:22+00:00",
        "comment_author": "erasin",
        "comment_body": "function_declaration and method_declaration \r\n\r\n`result:(_)` --> `body:(_)`\r\n\r\nin my test\r\n```\r\n[\r\n  (function_declaration) \r\n  (method_declaration)\r\n  (if_statement)\r\n  (for_statement)\r\n  (expression_switch_statement)\r\n  ...\r\n]@context\r\n```\r\nhas same result.\r\n\r\n`if_statement`, `for_statement`, `const_declaration`, rendering the contents of the next line, this should be related to the 'non-ascii' mentioned earlier.\r\n\r\nAlso, in golang std library , like `src/strconv/itoa.go` , `if_statement`, `for_statement` render error.",
        "pr_file_module": null
      },
      {
        "comment_id": "1147105207",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-24T04:26:26+00:00",
        "comment_author": "erasin",
        "comment_body": "\r\nhttps://github.com/golang/go/blob/master/src/strconv/itoa.go\r\n![WX20230324-122434](https://user-images.githubusercontent.com/716514/227424045-7b74c775-3da5-4398-9f86-ab593da3602a.png)\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1147312620",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-24T09:26:02+00:00",
        "comment_author": "SoraTenshi",
        "comment_body": "> if_statement, for_statement, const_declaration, rendering the contents of the next line, this should be related to the 'non-ascii' mentioned earlier.\r\n\r\ni don't think this is the case anymore, but i think go context queries might be a bit different.\r\nI will investigate it.\r\nAlso if you have any ideas with how to improve the go queries, feel free to open a pr on my pr-branch :)",
        "pr_file_module": null
      },
      {
        "comment_id": "1147430881",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-24T11:05:47+00:00",
        "comment_author": "erasin",
        "comment_body": "There are still similar errors in the previous test file. I didn't see anything in the log.\r\n\r\nI has delete this branch and re pull this pr.\r\nrev: 4fa00ec6bf48765a30a9ff6b680c1da7ceed42fd\r\ntest file: https://gist.github.com/erasin/a15c4f250beff8c9f7e4aaeae4a1128c\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1147860932",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-24T17:12:36+00:00",
        "comment_author": "SoraTenshi",
        "comment_body": "~~yeah you're right.~~\r\n\r\n~~Investigating now..~~\r\nShould be fixed now.\r\nCan you try it again?",
        "pr_file_module": null
      },
      {
        "comment_id": "1148252392",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-25T02:14:43+00:00",
        "comment_author": "erasin",
        "comment_body": "thank for fix.\r\n\r\nPerformance problem, after using this pr, when the page scrolls(use Zj or mouse), the cpu usage rate is 1-2 times higher.\r\n\r\ndb3e4e8cb1ead6e18d8a9c9328b29904c87257ec \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1148342574",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-25T09:59:52+00:00",
        "comment_author": "SoraTenshi",
        "comment_body": "> Performance problem, after using this pr, when the page scrolls(use Zj or mouse), the cpu usage rate is 1-2 times higher.\r\n\r\nWith mouse the performance issues are kinda expected as the sticky context does a lot of calculations and is rather expensive.\r\nI could think about some more caching ideas, but getting the calculations down to a level in which u barely notice it is gonna be... Difficult. \r\n\r\nhave you compiled it only with `cargo build` ?\r\nOn the optimized build, it's not as laggy, but still after a couple 10k LoC you will still encounter some performance issues...",
        "pr_file_module": null
      },
      {
        "comment_id": "1148368487",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 6118,
        "pr_file": "runtime/queries/go/context.scm",
        "discussion_id": "1147103582",
        "commented_code": "@@ -0,0 +1,17 @@\n+; Credits to nvim-treesitter/nvim-treesitter-context\n+\n+(function_declaration\n+\tresult: (_) @context.end\n+) @context\n+\n+(method_declaration\n+\tresult: (_) @context.end",
        "comment_created_at": "2023-03-25T13:25:44+00:00",
        "comment_author": "erasin",
        "comment_body": "I forgot add `--release`, after using release , it is much better. \r\n\r\nthanks for the work.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185550787",
    "pr_number": 13889,
    "pr_file": "runtime/queries/rust/locals.scm",
    "created_at": "2025-07-04T14:44:05+00:00",
    "commented_code": "; References\n (identifier) @local.reference\n+(scoped_identifier\n+  path: (identifier)? @namespace\n+  name: (identifier) @namespace)",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2185550787",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13889,
        "pr_file": "runtime/queries/rust/locals.scm",
        "discussion_id": "2185550787",
        "commented_code": "@@ -23,3 +23,6 @@\n \n ; References\n (identifier) @local.reference\n+(scoped_identifier\n+  path: (identifier)? @namespace\n+  name: (identifier) @namespace)",
        "comment_created_at": "2025-07-04T14:44:05+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "Capturing the name as a namespace here can lead to some odd highlighting, for example\r\n\r\n```rust\r\nfn fun(param: u32) {\r\n    param::call();\r\n    param\r\n}\r\n```\r\n\r\n`call` is highlighted as `namespace`. Probably the highlighter should recognize that this capture comes from the locals queries and not attach any highlight to it, so that the regular highlights take over.",
        "pr_file_module": null
      },
      {
        "comment_id": "2185842572",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13889,
        "pr_file": "runtime/queries/rust/locals.scm",
        "discussion_id": "2185550787",
        "commented_code": "@@ -23,3 +23,6 @@\n \n ; References\n (identifier) @local.reference\n+(scoped_identifier\n+  path: (identifier)? @namespace\n+  name: (identifier) @namespace)",
        "comment_created_at": "2025-07-04T17:30:39+00:00",
        "comment_author": "CalebLarsen",
        "comment_body": "Good catch. Looking at how locals work now, it looks like a much more involved change than I was expecting. If I understand right, we'd need to rewrite how we handle locals. \r\n\r\nWould the effort be better spent in trying to implement `#has-ancestor?`\r\n\r\nEDIT:\r\nLooks like [tree-sitter still doesn't have an official solution](https://github.com/tree-sitter/tree-sitter/issues/880).\r\nNeovim reports that [`#has-ancestor?` is a known performance problem](https://github.com/neovim/neovim/issues/24965#issuecomment-1738598824) so I think implementing `#has-ancestor?` is definitely wrong.",
        "pr_file_module": null
      },
      {
        "comment_id": "2203459738",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13889,
        "pr_file": "runtime/queries/rust/locals.scm",
        "discussion_id": "2185550787",
        "commented_code": "@@ -23,3 +23,6 @@\n \n ; References\n (identifier) @local.reference\n+(scoped_identifier\n+  path: (identifier)? @namespace\n+  name: (identifier) @namespace)",
        "comment_created_at": "2025-07-13T16:34:29+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "I don't think it would take that large of a change - Query has functions that can be used to tell if the pattern is from the locals file or from the highlights file. I'll look into it.\r\n\r\nI'm a bit surprised that `#has-ancestor?` has poor performance since it should be bounded by the height of the tree. I suppose that can grow to be quite large though. I don't like it because it has you write node names and that is both inflexible (can't use the full pattern matching power of the query language) and error-prone since tree-sitter won't check that it's a valid node during query analysis. So I'd like to avoid adding it if possible. Some day I'll try to understand `query.c` and see if an arbitrary nesting operator is possible.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1918728521",
    "pr_number": 12457,
    "pr_file": "runtime/queries/solidity/highlights.scm",
    "created_at": "2025-01-16T15:08:45+00:00",
    "commented_code": "\"new\"\n ] @keyword.operator\n \n-; TODO: move to top when order swapped\n ; identifiers\n ; -----------\n-((identifier) @variable.builtin\n- (#match? @variable.builtin \"^(this|msg|block|tx)$\"))\n+((identifier) @variable.builtin (#match? @variable.builtin \"^(this|msg|block|tx)$\"))",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1918728521",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 12457,
        "pr_file": "runtime/queries/solidity/highlights.scm",
        "discussion_id": "1918728521",
        "commented_code": "@@ -244,10 +232,9 @@\n   \"new\"\n ] @keyword.operator\n \n-; TODO: move to top when order swapped\n ; identifiers\n ; -----------\n-((identifier) @variable.builtin\n- (#match? @variable.builtin \"^(this|msg|block|tx)$\"))\n+((identifier) @variable.builtin (#match? @variable.builtin \"^(this|msg|block|tx)$\"))",
        "comment_created_at": "2025-01-16T15:08:45+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "```suggestion\r\n((identifier) @variable.builtin (#any-of? @variable.builtin \"this\" \"msg\" \"block\" \"tx\"))\r\n```\r\n\r\nwhen this was originally written I don't think we supported `#any-of?` but now we can replace the `#match?` with the equivalent `#any-of`",
        "pr_file_module": null
      }
    ]
  }
]