[
  {
    "discussion_id": "2202692134",
    "pr_number": 13932,
    "pr_file": "runtime/queries/rust/highlights.scm",
    "created_at": "2025-07-12T14:27:20+00:00",
    "commented_code": "; Functions\n ; -------\n \n+; In here, `bar` is a function, as it is equal to a closure:\n+;\n+; let bar = || 4;",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2202692134",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13932,
        "pr_file": "runtime/queries/rust/highlights.scm",
        "discussion_id": "2202692134",
        "commented_code": "@@ -305,6 +305,153 @@\n ; Functions\n ; -------\n \n+; In here, `bar` is a function, as it is equal to a closure:\n+;\n+; let bar = || 4;",
        "comment_created_at": "2025-07-12T14:27:20+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "Semantically it contains a function but syntactically it's a variable and it should be highlighted as one",
        "pr_file_module": null
      },
      {
        "comment_id": "2202702717",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13932,
        "pr_file": "runtime/queries/rust/highlights.scm",
        "discussion_id": "2202692134",
        "commented_code": "@@ -305,6 +305,153 @@\n ; Functions\n ; -------\n \n+; In here, `bar` is a function, as it is equal to a closure:\n+;\n+; let bar = || 4;",
        "comment_created_at": "2025-07-12T14:38:57+00:00",
        "comment_author": "nik-rev",
        "comment_body": "ok, I'll remove it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2072619771",
    "pr_number": 13449,
    "pr_file": "runtime/queries/slang/highlights.scm",
    "created_at": "2025-05-04T13:32:27+00:00",
    "commented_code": "+; inherits: c\n+\n+; cpp\n+((identifier) @variable.member\n+  (#match? @variable.member \"^m_.*$\"))",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2072619771",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13449,
        "pr_file": "runtime/queries/slang/highlights.scm",
        "discussion_id": "2072619771",
        "commented_code": "@@ -0,0 +1,398 @@\n+; inherits: c\n+\n+; cpp\n+((identifier) @variable.member\n+  (#match? @variable.member \"^m_.*$\"))",
        "comment_created_at": "2025-05-04T13:32:27+00:00",
        "comment_author": "uncenter",
        "comment_body": "```suggestion\r\n((identifier) @variable.other.member\r\n  (#match? @variable.other.member \"^m_.*$\"))\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1831868405",
    "pr_number": 11980,
    "pr_file": "runtime/queries/zig/highlights.scm",
    "created_at": "2024-11-06T23:55:01+00:00",
    "commented_code": "-[\n-  (container_doc_comment)\n-  (doc_comment)\n-] @comment.documentation\n+; Comments\n \n-[\n-  (line_comment)\n-] @comment.line\n+((comment) @comment.block.documentation\n+  (#lua-match? @comment.block.documentation \"^//!\"))\n \n-;; assume TitleCase is a type\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @type\n-  (#match? @type \"^[A-Z]([a-z]+[A-Za-z0-9]*)+$\")\n-)\n-\n-;; assume camelCase is a function\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @function\n-  (#match? @function \"^[a-z]+([A-Z][a-z0-9]*)+$\")\n-)\n-\n-;; assume all CAPS_1 is a constant\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-  ] @constant\n-  (#match? @constant \"^[A-Z][A-Z_0-9]+$\")\n-)\n+(comment) @comment.line\n \n-;; _\n-(\n-  (IDENTIFIER) @variable.builtin\n-  (#eq? @variable.builtin \"_\")\n-)\n+; Punctuation\n \n-;; C Pointers [*c]T\n-(PtrTypeStart \"c\" @variable.builtin)\n+[\n+  \"[\"\n+  \"]\"\n+  \"(\"\n+  \")\"\n+  \"{\"\n+  \"}\"\n+] @punctuation.bracket\n \n [\n-  variable: (IDENTIFIER)\n-  variable_type_function: (IDENTIFIER)\n-] @variable\n+  \";\"\n+  \".\"\n+  \",\"\n+  \":\"\n+  \"=>\"\n+  \"->\"\n+] @punctuation.delimiter\n \n-parameter: (IDENTIFIER) @variable.parameter\n+(payload \"|\" @punctuation.bracket)\n \n-[\n-  field_member: (IDENTIFIER)\n-  field_access: (IDENTIFIER)\n-] @variable.other.member\n+; Literals\n \n-[\n-  function_call: (IDENTIFIER)\n-  function: (IDENTIFIER)\n-] @function\n+(character) @constant.character\n \n-exception: \"!\" @keyword.control.exception\n+([\n+  (string)\n+  (multiline_string)\n+] @string\n+  (#set! \"priority\" 95))\n \n-field_constant: (IDENTIFIER) @constant\n+(integer) @constant.numeric.integer\n \n-(BUILTINIDENTIFIER) @function.builtin\n+(float) @constant.numeric.float\n \n-((BUILTINIDENTIFIER) @keyword.control.import\n-  (#any-of? @keyword.control.import \"@import\" \"@cImport\"))\n+(boolean) @constant.builtin.boolean\n \n-(INTEGER) @constant.numeric.integer\n+(escape_sequence) @constant.character.escape\n \n-(FLOAT) @constant.numeric.float\n+; Operator\n \n [\n-  (LINESTRING)\n-  (STRINGLITERALSINGLE)\n-] @string\n+  \"=\"\n+  \"*=\"\n+  \"*%=\"\n+  \"*|=\"\n+  \"/=\"\n+  \"%=\"\n+  \"+=\"\n+  \"+%=\"\n+  \"+|=\"\n+  \"-=\"\n+  \"-%=\"\n+  \"-|=\"\n+  \"<<=\"\n+  \"<<|=\"\n+  \">>=\"\n+  \"&=\"\n+  \"^=\"\n+  \"|=\"\n+  \"!\"\n+  \"~\"\n+  \"-\"\n+  \"-%\"\n+  \"&\"\n+  \"==\"\n+  \"!=\"\n+  \">\"\n+  \">=\"\n+  \"<=\"\n+  \"<\"\n+  \"&\"\n+  \"^\"\n+  \"|\"\n+  \"<<\"\n+  \">>\"\n+  \"<<|\"\n+  \"+\"\n+  \"++\"\n+  \"+%\"\n+  \"-%\"\n+  \"+|\"\n+  \"-|\"\n+  \"*\"\n+  \"/\"\n+  \"%\"\n+  \"**\"\n+  \"*%\"\n+  \"*|\"\n+  \"||\"\n+  \".*\"\n+  \".?\"\n+  \"?\"\n+  \"..\"\n+] @operator\n \n-(CHAR_LITERAL) @constant.character\n-(EscapeSequence) @constant.character.escape\n-(FormatSequence) @string.special\n+; Keywords\n \n [\n-  \"anytype\"\n-  \"anyframe\"\n-  (BuildinTypeExpr)\n-] @type.builtin\n+  \"asm\"\n+  \"test\"\n+] @keyword\n+\n+[\n+  \"error\"\n+  \"const\"\n+  \"var\"\n+  \"struct\"\n+  \"union\"\n+  \"enum\"\n+  \"opaque\"\n+] @keyword.storage.type\n+\n+; todo: keyword.coroutine\n+[\n+  \"async\"\n+  \"await\"\n+  \"suspend\"\n+  \"nosuspend\"\n+  \"resume\"\n+] @keyword\n \n-(BreakLabel (IDENTIFIER) @label)\n-(BlockLabel (IDENTIFIER) @label)\n+\"fn\" @keyword.function\n \n [\n-  \"true\"\n-  \"false\"\n-] @constant.builtin.boolean\n+  \"and\"\n+  \"or\"\n+  \"orelse\"\n+] @keyword.operator\n \n [\n-  \"undefined\"\n+  \"try\"\n   \"unreachable\"\n-  \"null\"\n-] @constant.builtin\n+  \"return\"\n+] @keyword.control.return\n \n [\n-  \"else\"\n   \"if\"\n+  \"else\"\n   \"switch\"\n+  \"catch\"\n ] @keyword.control.conditional\n \n [\n   \"for\"\n   \"while\"\n+  \"break\"\n+  \"continue\"\n ] @keyword.control.repeat\n \n [\n-  \"or\"\n-  \"and\"\n-  \"orelse\"\n-] @keyword.operator\n-\n-[\n-  \"enum\"\n-] @type.enum\n+  \"usingnamespace\"\n+  \"export\"\n+] @keyword.control.import\n \n [\n-  \"struct\"\n-  \"union\"\n-  \"packed\"\n-  \"opaque\"\n-  \"export\"\n-  \"extern\"\n-  \"linksection\"\n-] @keyword.storage.type\n+  \"defer\"\n+  \"errdefer\"\n+] @keyword.control.exception\n \n [\n-  \"const\"\n-  \"var\"\n-  \"threadlocal\"\n-  \"allowzero\"\n   \"volatile\"\n+  \"allowzero\"\n+  \"noalias\"\n+  \"addrspace\"\n   \"align\"\n+  \"callconv\"\n+  \"linksection\"\n+  \"pub\"\n+  \"inline\"\n+  \"noinline\"\n+  \"extern\"\n+  \"comptime\"\n+  \"packed\"\n+  \"threadlocal\"\n ] @keyword.storage.modifier\n \n-[\n-  \"try\"\n-  \"error\"\n-  \"catch\"\n-] @keyword.control.exception\n+; Builtins\n \n [\n-  \"fn\"\n-] @keyword.function\n+  \"c\"\n+  \"...\"\n+] @variable.builtin\n \n-[\n-  \"test\"\n-] @keyword\n+((identifier) @variable.builtin\n+  (#eq? @variable.builtin \"_\"))\n \n-[\n-  \"pub\"\n-  \"usingnamespace\"\n-] @keyword.control.import\n+(calling_convention\n+  (identifier) @variable.builtin)\n \n-[\n-  \"return\"\n-  \"break\"\n-  \"continue\"\n-] @keyword.control.return\n+; Modules\n \n-[\n-  \"defer\"\n-  \"errdefer\"\n-  \"async\"\n-  \"nosuspend\"\n-  \"await\"\n-  \"suspend\"\n-  \"resume\"\n-] @function.macro\n+(variable_declaration\n+  (identifier) @variable ; TODO: module\n+  (builtin_function\n+    (builtin_identifier) @keyword.control.import\n+    (#any-of? @keyword.control.import \"@import\" \"@cImport\")))\n \n-[\n-  \"comptime\"\n-  \"inline\"\n-  \"noinline\"\n-  \"asm\"\n-  \"callconv\"\n-  \"noalias\"\n-] @keyword.directive\n+; Functions\n \n-[\n-  (CompareOp)\n-  (BitwiseOp)\n-  (BitShiftOp)\n-  (AdditionOp)\n-  (AssignOp)\n-  (MultiplyOp)\n-  (PrefixOp)\n-  \"*\"\n-  \"**\"\n-  \"->\"\n-  \".?\"\n-  \".*\"\n-  \"?\"\n-] @operator\n+(call_expression\n+  function: (field_expression\n+    member: (identifier) @function.method))\n \n-[\n-  \";\"\n-  \".\"\n-  \",\"\n-  \":\"\n-] @punctuation.delimiter\n+(call_expression\n+  function: (identifier) @function)\n+\n+(function_declaration\n+  name: (identifier) @function)\n+\n+(builtin_identifier) @function.builtin\n+\n+; Fields\n+\n+(field_initializer\n+  .\n+  (identifier) @variable.other.member)\n+\n+(field_expression\n+  (_)\n+  member: (identifier) @variable.other.member)\n+\n+(container_field\n+  name: (identifier) @variable.other.member)\n+\n+(initializer_list\n+  (assignment_expression\n+      left: (field_expression\n+              .\n+              member: (identifier) @variable.other.member)))\n+\n+; Labels\n+\n+(block_label (identifier) @label)\n+\n+(break_label (identifier) @label)\n+\n+; Constants\n+\n+((identifier) @constant\n+  (#lua-match? @constant \"^[A-Z][A-Z_0-9]+$\"))",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1831868405",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 11980,
        "pr_file": "runtime/queries/zig/highlights.scm",
        "discussion_id": "1831868405",
        "commented_code": "@@ -1,231 +1,294 @@\n-[\n-  (container_doc_comment)\n-  (doc_comment)\n-] @comment.documentation\n+; Comments\n \n-[\n-  (line_comment)\n-] @comment.line\n+((comment) @comment.block.documentation\n+  (#lua-match? @comment.block.documentation \"^//!\"))\n \n-;; assume TitleCase is a type\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @type\n-  (#match? @type \"^[A-Z]([a-z]+[A-Za-z0-9]*)+$\")\n-)\n-\n-;; assume camelCase is a function\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @function\n-  (#match? @function \"^[a-z]+([A-Z][a-z0-9]*)+$\")\n-)\n-\n-;; assume all CAPS_1 is a constant\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-  ] @constant\n-  (#match? @constant \"^[A-Z][A-Z_0-9]+$\")\n-)\n+(comment) @comment.line\n \n-;; _\n-(\n-  (IDENTIFIER) @variable.builtin\n-  (#eq? @variable.builtin \"_\")\n-)\n+; Punctuation\n \n-;; C Pointers [*c]T\n-(PtrTypeStart \"c\" @variable.builtin)\n+[\n+  \"[\"\n+  \"]\"\n+  \"(\"\n+  \")\"\n+  \"{\"\n+  \"}\"\n+] @punctuation.bracket\n \n [\n-  variable: (IDENTIFIER)\n-  variable_type_function: (IDENTIFIER)\n-] @variable\n+  \";\"\n+  \".\"\n+  \",\"\n+  \":\"\n+  \"=>\"\n+  \"->\"\n+] @punctuation.delimiter\n \n-parameter: (IDENTIFIER) @variable.parameter\n+(payload \"|\" @punctuation.bracket)\n \n-[\n-  field_member: (IDENTIFIER)\n-  field_access: (IDENTIFIER)\n-] @variable.other.member\n+; Literals\n \n-[\n-  function_call: (IDENTIFIER)\n-  function: (IDENTIFIER)\n-] @function\n+(character) @constant.character\n \n-exception: \"!\" @keyword.control.exception\n+([\n+  (string)\n+  (multiline_string)\n+] @string\n+  (#set! \"priority\" 95))\n \n-field_constant: (IDENTIFIER) @constant\n+(integer) @constant.numeric.integer\n \n-(BUILTINIDENTIFIER) @function.builtin\n+(float) @constant.numeric.float\n \n-((BUILTINIDENTIFIER) @keyword.control.import\n-  (#any-of? @keyword.control.import \"@import\" \"@cImport\"))\n+(boolean) @constant.builtin.boolean\n \n-(INTEGER) @constant.numeric.integer\n+(escape_sequence) @constant.character.escape\n \n-(FLOAT) @constant.numeric.float\n+; Operator\n \n [\n-  (LINESTRING)\n-  (STRINGLITERALSINGLE)\n-] @string\n+  \"=\"\n+  \"*=\"\n+  \"*%=\"\n+  \"*|=\"\n+  \"/=\"\n+  \"%=\"\n+  \"+=\"\n+  \"+%=\"\n+  \"+|=\"\n+  \"-=\"\n+  \"-%=\"\n+  \"-|=\"\n+  \"<<=\"\n+  \"<<|=\"\n+  \">>=\"\n+  \"&=\"\n+  \"^=\"\n+  \"|=\"\n+  \"!\"\n+  \"~\"\n+  \"-\"\n+  \"-%\"\n+  \"&\"\n+  \"==\"\n+  \"!=\"\n+  \">\"\n+  \">=\"\n+  \"<=\"\n+  \"<\"\n+  \"&\"\n+  \"^\"\n+  \"|\"\n+  \"<<\"\n+  \">>\"\n+  \"<<|\"\n+  \"+\"\n+  \"++\"\n+  \"+%\"\n+  \"-%\"\n+  \"+|\"\n+  \"-|\"\n+  \"*\"\n+  \"/\"\n+  \"%\"\n+  \"**\"\n+  \"*%\"\n+  \"*|\"\n+  \"||\"\n+  \".*\"\n+  \".?\"\n+  \"?\"\n+  \"..\"\n+] @operator\n \n-(CHAR_LITERAL) @constant.character\n-(EscapeSequence) @constant.character.escape\n-(FormatSequence) @string.special\n+; Keywords\n \n [\n-  \"anytype\"\n-  \"anyframe\"\n-  (BuildinTypeExpr)\n-] @type.builtin\n+  \"asm\"\n+  \"test\"\n+] @keyword\n+\n+[\n+  \"error\"\n+  \"const\"\n+  \"var\"\n+  \"struct\"\n+  \"union\"\n+  \"enum\"\n+  \"opaque\"\n+] @keyword.storage.type\n+\n+; todo: keyword.coroutine\n+[\n+  \"async\"\n+  \"await\"\n+  \"suspend\"\n+  \"nosuspend\"\n+  \"resume\"\n+] @keyword\n \n-(BreakLabel (IDENTIFIER) @label)\n-(BlockLabel (IDENTIFIER) @label)\n+\"fn\" @keyword.function\n \n [\n-  \"true\"\n-  \"false\"\n-] @constant.builtin.boolean\n+  \"and\"\n+  \"or\"\n+  \"orelse\"\n+] @keyword.operator\n \n [\n-  \"undefined\"\n+  \"try\"\n   \"unreachable\"\n-  \"null\"\n-] @constant.builtin\n+  \"return\"\n+] @keyword.control.return\n \n [\n-  \"else\"\n   \"if\"\n+  \"else\"\n   \"switch\"\n+  \"catch\"\n ] @keyword.control.conditional\n \n [\n   \"for\"\n   \"while\"\n+  \"break\"\n+  \"continue\"\n ] @keyword.control.repeat\n \n [\n-  \"or\"\n-  \"and\"\n-  \"orelse\"\n-] @keyword.operator\n-\n-[\n-  \"enum\"\n-] @type.enum\n+  \"usingnamespace\"\n+  \"export\"\n+] @keyword.control.import\n \n [\n-  \"struct\"\n-  \"union\"\n-  \"packed\"\n-  \"opaque\"\n-  \"export\"\n-  \"extern\"\n-  \"linksection\"\n-] @keyword.storage.type\n+  \"defer\"\n+  \"errdefer\"\n+] @keyword.control.exception\n \n [\n-  \"const\"\n-  \"var\"\n-  \"threadlocal\"\n-  \"allowzero\"\n   \"volatile\"\n+  \"allowzero\"\n+  \"noalias\"\n+  \"addrspace\"\n   \"align\"\n+  \"callconv\"\n+  \"linksection\"\n+  \"pub\"\n+  \"inline\"\n+  \"noinline\"\n+  \"extern\"\n+  \"comptime\"\n+  \"packed\"\n+  \"threadlocal\"\n ] @keyword.storage.modifier\n \n-[\n-  \"try\"\n-  \"error\"\n-  \"catch\"\n-] @keyword.control.exception\n+; Builtins\n \n [\n-  \"fn\"\n-] @keyword.function\n+  \"c\"\n+  \"...\"\n+] @variable.builtin\n \n-[\n-  \"test\"\n-] @keyword\n+((identifier) @variable.builtin\n+  (#eq? @variable.builtin \"_\"))\n \n-[\n-  \"pub\"\n-  \"usingnamespace\"\n-] @keyword.control.import\n+(calling_convention\n+  (identifier) @variable.builtin)\n \n-[\n-  \"return\"\n-  \"break\"\n-  \"continue\"\n-] @keyword.control.return\n+; Modules\n \n-[\n-  \"defer\"\n-  \"errdefer\"\n-  \"async\"\n-  \"nosuspend\"\n-  \"await\"\n-  \"suspend\"\n-  \"resume\"\n-] @function.macro\n+(variable_declaration\n+  (identifier) @variable ; TODO: module\n+  (builtin_function\n+    (builtin_identifier) @keyword.control.import\n+    (#any-of? @keyword.control.import \"@import\" \"@cImport\")))\n \n-[\n-  \"comptime\"\n-  \"inline\"\n-  \"noinline\"\n-  \"asm\"\n-  \"callconv\"\n-  \"noalias\"\n-] @keyword.directive\n+; Functions\n \n-[\n-  (CompareOp)\n-  (BitwiseOp)\n-  (BitShiftOp)\n-  (AdditionOp)\n-  (AssignOp)\n-  (MultiplyOp)\n-  (PrefixOp)\n-  \"*\"\n-  \"**\"\n-  \"->\"\n-  \".?\"\n-  \".*\"\n-  \"?\"\n-] @operator\n+(call_expression\n+  function: (field_expression\n+    member: (identifier) @function.method))\n \n-[\n-  \";\"\n-  \".\"\n-  \",\"\n-  \":\"\n-] @punctuation.delimiter\n+(call_expression\n+  function: (identifier) @function)\n+\n+(function_declaration\n+  name: (identifier) @function)\n+\n+(builtin_identifier) @function.builtin\n+\n+; Fields\n+\n+(field_initializer\n+  .\n+  (identifier) @variable.other.member)\n+\n+(field_expression\n+  (_)\n+  member: (identifier) @variable.other.member)\n+\n+(container_field\n+  name: (identifier) @variable.other.member)\n+\n+(initializer_list\n+  (assignment_expression\n+      left: (field_expression\n+              .\n+              member: (identifier) @variable.other.member)))\n+\n+; Labels\n+\n+(block_label (identifier) @label)\n+\n+(break_label (identifier) @label)\n+\n+; Constants\n+\n+((identifier) @constant\n+  (#lua-match? @constant \"^[A-Z][A-Z_0-9]+$\"))",
        "comment_created_at": "2024-11-06T23:55:01+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "Same here and below on L270 about `#lua-match?`",
        "pr_file_module": null
      },
      {
        "comment_id": "1832878795",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 11980,
        "pr_file": "runtime/queries/zig/highlights.scm",
        "discussion_id": "1831868405",
        "commented_code": "@@ -1,231 +1,294 @@\n-[\n-  (container_doc_comment)\n-  (doc_comment)\n-] @comment.documentation\n+; Comments\n \n-[\n-  (line_comment)\n-] @comment.line\n+((comment) @comment.block.documentation\n+  (#lua-match? @comment.block.documentation \"^//!\"))\n \n-;; assume TitleCase is a type\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @type\n-  (#match? @type \"^[A-Z]([a-z]+[A-Za-z0-9]*)+$\")\n-)\n-\n-;; assume camelCase is a function\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-    parameter: (IDENTIFIER)\n-  ] @function\n-  (#match? @function \"^[a-z]+([A-Z][a-z0-9]*)+$\")\n-)\n-\n-;; assume all CAPS_1 is a constant\n-(\n-  [\n-    variable_type_function: (IDENTIFIER)\n-    field_access: (IDENTIFIER)\n-  ] @constant\n-  (#match? @constant \"^[A-Z][A-Z_0-9]+$\")\n-)\n+(comment) @comment.line\n \n-;; _\n-(\n-  (IDENTIFIER) @variable.builtin\n-  (#eq? @variable.builtin \"_\")\n-)\n+; Punctuation\n \n-;; C Pointers [*c]T\n-(PtrTypeStart \"c\" @variable.builtin)\n+[\n+  \"[\"\n+  \"]\"\n+  \"(\"\n+  \")\"\n+  \"{\"\n+  \"}\"\n+] @punctuation.bracket\n \n [\n-  variable: (IDENTIFIER)\n-  variable_type_function: (IDENTIFIER)\n-] @variable\n+  \";\"\n+  \".\"\n+  \",\"\n+  \":\"\n+  \"=>\"\n+  \"->\"\n+] @punctuation.delimiter\n \n-parameter: (IDENTIFIER) @variable.parameter\n+(payload \"|\" @punctuation.bracket)\n \n-[\n-  field_member: (IDENTIFIER)\n-  field_access: (IDENTIFIER)\n-] @variable.other.member\n+; Literals\n \n-[\n-  function_call: (IDENTIFIER)\n-  function: (IDENTIFIER)\n-] @function\n+(character) @constant.character\n \n-exception: \"!\" @keyword.control.exception\n+([\n+  (string)\n+  (multiline_string)\n+] @string\n+  (#set! \"priority\" 95))\n \n-field_constant: (IDENTIFIER) @constant\n+(integer) @constant.numeric.integer\n \n-(BUILTINIDENTIFIER) @function.builtin\n+(float) @constant.numeric.float\n \n-((BUILTINIDENTIFIER) @keyword.control.import\n-  (#any-of? @keyword.control.import \"@import\" \"@cImport\"))\n+(boolean) @constant.builtin.boolean\n \n-(INTEGER) @constant.numeric.integer\n+(escape_sequence) @constant.character.escape\n \n-(FLOAT) @constant.numeric.float\n+; Operator\n \n [\n-  (LINESTRING)\n-  (STRINGLITERALSINGLE)\n-] @string\n+  \"=\"\n+  \"*=\"\n+  \"*%=\"\n+  \"*|=\"\n+  \"/=\"\n+  \"%=\"\n+  \"+=\"\n+  \"+%=\"\n+  \"+|=\"\n+  \"-=\"\n+  \"-%=\"\n+  \"-|=\"\n+  \"<<=\"\n+  \"<<|=\"\n+  \">>=\"\n+  \"&=\"\n+  \"^=\"\n+  \"|=\"\n+  \"!\"\n+  \"~\"\n+  \"-\"\n+  \"-%\"\n+  \"&\"\n+  \"==\"\n+  \"!=\"\n+  \">\"\n+  \">=\"\n+  \"<=\"\n+  \"<\"\n+  \"&\"\n+  \"^\"\n+  \"|\"\n+  \"<<\"\n+  \">>\"\n+  \"<<|\"\n+  \"+\"\n+  \"++\"\n+  \"+%\"\n+  \"-%\"\n+  \"+|\"\n+  \"-|\"\n+  \"*\"\n+  \"/\"\n+  \"%\"\n+  \"**\"\n+  \"*%\"\n+  \"*|\"\n+  \"||\"\n+  \".*\"\n+  \".?\"\n+  \"?\"\n+  \"..\"\n+] @operator\n \n-(CHAR_LITERAL) @constant.character\n-(EscapeSequence) @constant.character.escape\n-(FormatSequence) @string.special\n+; Keywords\n \n [\n-  \"anytype\"\n-  \"anyframe\"\n-  (BuildinTypeExpr)\n-] @type.builtin\n+  \"asm\"\n+  \"test\"\n+] @keyword\n+\n+[\n+  \"error\"\n+  \"const\"\n+  \"var\"\n+  \"struct\"\n+  \"union\"\n+  \"enum\"\n+  \"opaque\"\n+] @keyword.storage.type\n+\n+; todo: keyword.coroutine\n+[\n+  \"async\"\n+  \"await\"\n+  \"suspend\"\n+  \"nosuspend\"\n+  \"resume\"\n+] @keyword\n \n-(BreakLabel (IDENTIFIER) @label)\n-(BlockLabel (IDENTIFIER) @label)\n+\"fn\" @keyword.function\n \n [\n-  \"true\"\n-  \"false\"\n-] @constant.builtin.boolean\n+  \"and\"\n+  \"or\"\n+  \"orelse\"\n+] @keyword.operator\n \n [\n-  \"undefined\"\n+  \"try\"\n   \"unreachable\"\n-  \"null\"\n-] @constant.builtin\n+  \"return\"\n+] @keyword.control.return\n \n [\n-  \"else\"\n   \"if\"\n+  \"else\"\n   \"switch\"\n+  \"catch\"\n ] @keyword.control.conditional\n \n [\n   \"for\"\n   \"while\"\n+  \"break\"\n+  \"continue\"\n ] @keyword.control.repeat\n \n [\n-  \"or\"\n-  \"and\"\n-  \"orelse\"\n-] @keyword.operator\n-\n-[\n-  \"enum\"\n-] @type.enum\n+  \"usingnamespace\"\n+  \"export\"\n+] @keyword.control.import\n \n [\n-  \"struct\"\n-  \"union\"\n-  \"packed\"\n-  \"opaque\"\n-  \"export\"\n-  \"extern\"\n-  \"linksection\"\n-] @keyword.storage.type\n+  \"defer\"\n+  \"errdefer\"\n+] @keyword.control.exception\n \n [\n-  \"const\"\n-  \"var\"\n-  \"threadlocal\"\n-  \"allowzero\"\n   \"volatile\"\n+  \"allowzero\"\n+  \"noalias\"\n+  \"addrspace\"\n   \"align\"\n+  \"callconv\"\n+  \"linksection\"\n+  \"pub\"\n+  \"inline\"\n+  \"noinline\"\n+  \"extern\"\n+  \"comptime\"\n+  \"packed\"\n+  \"threadlocal\"\n ] @keyword.storage.modifier\n \n-[\n-  \"try\"\n-  \"error\"\n-  \"catch\"\n-] @keyword.control.exception\n+; Builtins\n \n [\n-  \"fn\"\n-] @keyword.function\n+  \"c\"\n+  \"...\"\n+] @variable.builtin\n \n-[\n-  \"test\"\n-] @keyword\n+((identifier) @variable.builtin\n+  (#eq? @variable.builtin \"_\"))\n \n-[\n-  \"pub\"\n-  \"usingnamespace\"\n-] @keyword.control.import\n+(calling_convention\n+  (identifier) @variable.builtin)\n \n-[\n-  \"return\"\n-  \"break\"\n-  \"continue\"\n-] @keyword.control.return\n+; Modules\n \n-[\n-  \"defer\"\n-  \"errdefer\"\n-  \"async\"\n-  \"nosuspend\"\n-  \"await\"\n-  \"suspend\"\n-  \"resume\"\n-] @function.macro\n+(variable_declaration\n+  (identifier) @variable ; TODO: module\n+  (builtin_function\n+    (builtin_identifier) @keyword.control.import\n+    (#any-of? @keyword.control.import \"@import\" \"@cImport\")))\n \n-[\n-  \"comptime\"\n-  \"inline\"\n-  \"noinline\"\n-  \"asm\"\n-  \"callconv\"\n-  \"noalias\"\n-] @keyword.directive\n+; Functions\n \n-[\n-  (CompareOp)\n-  (BitwiseOp)\n-  (BitShiftOp)\n-  (AdditionOp)\n-  (AssignOp)\n-  (MultiplyOp)\n-  (PrefixOp)\n-  \"*\"\n-  \"**\"\n-  \"->\"\n-  \".?\"\n-  \".*\"\n-  \"?\"\n-] @operator\n+(call_expression\n+  function: (field_expression\n+    member: (identifier) @function.method))\n \n-[\n-  \";\"\n-  \".\"\n-  \",\"\n-  \":\"\n-] @punctuation.delimiter\n+(call_expression\n+  function: (identifier) @function)\n+\n+(function_declaration\n+  name: (identifier) @function)\n+\n+(builtin_identifier) @function.builtin\n+\n+; Fields\n+\n+(field_initializer\n+  .\n+  (identifier) @variable.other.member)\n+\n+(field_expression\n+  (_)\n+  member: (identifier) @variable.other.member)\n+\n+(container_field\n+  name: (identifier) @variable.other.member)\n+\n+(initializer_list\n+  (assignment_expression\n+      left: (field_expression\n+              .\n+              member: (identifier) @variable.other.member)))\n+\n+; Labels\n+\n+(block_label (identifier) @label)\n+\n+(break_label (identifier) @label)\n+\n+; Constants\n+\n+((identifier) @constant\n+  (#lua-match? @constant \"^[A-Z][A-Z_0-9]+$\"))",
        "comment_created_at": "2024-11-07T15:26:48+00:00",
        "comment_author": "iceghost",
        "comment_body": "```suggestion\r\n  (#match? @constant \"^[A-Z][A-Z_0-9]+$\"))\r\n```",
        "pr_file_module": null
      }
    ]
  }
]