[
  {
    "discussion_id": "1915454788",
    "pr_number": 12527,
    "pr_file": "helix-term/src/commands/typed.rs",
    "created_at": "2025-01-14T19:01:10+00:00",
    "commented_code": "Ok(())\n }\n \n+fn echo(cx: &mut compositor::Context, args: Args, event: PromptEvent) -> anyhow::Result<()> {\n+    if event != PromptEvent::Validate {\n+        return Ok(());\n+    }\n+\n+    let output = args.into_iter().fold(String::new(), |mut acc, arg| {\n+        if !acc.is_empty() {\n+            acc.push(' ');\n+        }\n+        acc.push_str(&arg);\n+        acc\n+    });\n+    cx.editor.set_status(output);\n+\n+    Ok(())\n+}\n+\n+fn noop(_cx: &mut compositor::Context, _args: Args, _event: PromptEvent) -> anyhow::Result<()> {",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1915454788",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 12527,
        "pr_file": "helix-term/src/commands/typed.rs",
        "discussion_id": "1915454788",
        "commented_code": "@@ -2539,132 +2369,225 @@ fn read(cx: &mut compositor::Context, args: &[Cow<str>], event: PromptEvent) ->\n     Ok(())\n }\n \n+fn echo(cx: &mut compositor::Context, args: Args, event: PromptEvent) -> anyhow::Result<()> {\n+    if event != PromptEvent::Validate {\n+        return Ok(());\n+    }\n+\n+    let output = args.into_iter().fold(String::new(), |mut acc, arg| {\n+        if !acc.is_empty() {\n+            acc.push(' ');\n+        }\n+        acc.push_str(&arg);\n+        acc\n+    });\n+    cx.editor.set_status(output);\n+\n+    Ok(())\n+}\n+\n+fn noop(_cx: &mut compositor::Context, _args: Args, _event: PromptEvent) -> anyhow::Result<()> {",
        "comment_created_at": "2025-01-14T19:01:10+00:00",
        "comment_author": "nik-rev",
        "comment_body": "I think `noop` could be potentially misleading, since `no-op` means that nothing happens\r\n\r\nI really liked your idea of calling it `shush`, in a different thread. Perhaps that may be more descriptive? Since we aren't *literally doing nothing*, but rather it's the same as `sh` except silent",
        "pr_file_module": null
      },
      {
        "comment_id": "1915691020",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 12527,
        "pr_file": "helix-term/src/commands/typed.rs",
        "discussion_id": "1915454788",
        "commented_code": "@@ -2539,132 +2369,225 @@ fn read(cx: &mut compositor::Context, args: &[Cow<str>], event: PromptEvent) ->\n     Ok(())\n }\n \n+fn echo(cx: &mut compositor::Context, args: Args, event: PromptEvent) -> anyhow::Result<()> {\n+    if event != PromptEvent::Validate {\n+        return Ok(());\n+    }\n+\n+    let output = args.into_iter().fold(String::new(), |mut acc, arg| {\n+        if !acc.is_empty() {\n+            acc.push(' ');\n+        }\n+        acc.push_str(&arg);\n+        acc\n+    });\n+    cx.editor.set_status(output);\n+\n+    Ok(())\n+}\n+\n+fn noop(_cx: &mut compositor::Context, _args: Args, _event: PromptEvent) -> anyhow::Result<()> {",
        "comment_created_at": "2025-01-14T22:22:42+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "I'll add a note in the command description that it can be used to evaluate arguments with no effect",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1390448856",
    "pr_number": 8675,
    "pr_file": "helix-term/src/commands/engine.rs",
    "created_at": "2023-11-12T17:15:43+00:00",
    "commented_code": "+use helix_core::syntax::Configuration;",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1390448856",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 8675,
        "pr_file": "helix-term/src/commands/engine.rs",
        "discussion_id": "1390448856",
        "commented_code": "@@ -0,0 +1,265 @@\n+use helix_core::syntax::Configuration;",
        "comment_created_at": "2023-11-12T17:15:43+00:00",
        "comment_author": "pascalkuthe",
        "comment_body": "nit: I think the name engine is a bit ambiguous. Could we call it something like `script_engine` to make it clearer what the file actually does",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2017193246",
    "pr_number": 13206,
    "pr_file": "helix-stdx/src/lib.rs",
    "created_at": "2025-03-27T17:11:48+00:00",
    "commented_code": "pub mod path;\n pub mod range;\n pub mod rope;\n+pub mod str;",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2017193246",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13206,
        "pr_file": "helix-stdx/src/lib.rs",
        "discussion_id": "2017193246",
        "commented_code": "@@ -3,5 +3,6 @@ pub mod faccess;\n pub mod path;\n pub mod range;\n pub mod rope;\n+pub mod str;",
        "comment_created_at": "2025-03-27T17:11:48+00:00",
        "comment_author": "nik-rev",
        "comment_body": "perhaps a more descriptive name for this module, like `tinystr`?",
        "pr_file_module": null
      },
      {
        "comment_id": "2017557333",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13206,
        "pr_file": "helix-stdx/src/lib.rs",
        "discussion_id": "2017193246",
        "commented_code": "@@ -3,5 +3,6 @@ pub mod faccess;\n pub mod path;\n pub mod range;\n pub mod rope;\n+pub mod str;",
        "comment_created_at": "2025-03-27T20:27:58+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "This is meant to be generically about strings - we might define other specialized small strings in this module",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2099718258",
    "pr_number": 13565,
    "pr_file": "helix-view/src/editor.rs",
    "created_at": "2025-05-21T08:40:26+00:00",
    "commented_code": "Multiple,\n }\n \n+/// Bufferline filename context modes\n+#[derive(Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub enum BufferLineContextMode {\n+    /// Don't expand filenames to be unique",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2099718258",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13565,
        "pr_file": "helix-view/src/editor.rs",
        "discussion_id": "2099718258",
        "commented_code": "@@ -684,6 +740,18 @@ pub enum BufferLine {\n     Multiple,\n }\n \n+/// Bufferline filename context modes\n+#[derive(Debug, Default, Clone, PartialEq, Eq, Serialize, Deserialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub enum BufferLineContextMode {\n+    /// Don't expand filenames to be unique",
        "comment_created_at": "2025-05-21T08:40:26+00:00",
        "comment_author": "CalebLarsen",
        "comment_body": "Nit: I would rephrase this from what it doesn't do to what it does. For example, \"Only show filename\" or something along those lines",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2031449709",
    "pr_number": 13288,
    "pr_file": "helix-view/src/editor.rs",
    "created_at": "2025-04-07T15:02:41+00:00",
    "commented_code": "pub right: Vec<StatusLineElement>,\n     pub separator: String,\n     pub mode: ModeConfig,\n+    pub diagnostics: Vec<Severity>,\n+    pub w_diagnostics: Vec<Severity>,",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "2031449709",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 13288,
        "pr_file": "helix-view/src/editor.rs",
        "discussion_id": "2031449709",
        "commented_code": "@@ -497,6 +497,8 @@ pub struct StatusLineConfig {\n     pub right: Vec<StatusLineElement>,\n     pub separator: String,\n     pub mode: ModeConfig,\n+    pub diagnostics: Vec<Severity>,\n+    pub w_diagnostics: Vec<Severity>,",
        "comment_created_at": "2025-04-07T15:02:41+00:00",
        "comment_author": "the-mikedavis",
        "comment_body": "```suggestion\r\n    pub workspace_diagnostics: Vec<Severity>,\r\n```\r\n\r\nI would prefer a full name here so it's easy to read",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1894900198",
    "pr_number": 11164,
    "pr_file": "helix-term/src/commands/expansions.rs",
    "created_at": "2024-12-22T11:43:17+00:00",
    "commented_code": "+use std::borrow::Cow;\n+\n+use anyhow::Result;\n+use helix_core::coords_at_pos;\n+use helix_view::Editor;\n+\n+pub fn expand_args<'a>(",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1894900198",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 11164,
        "pr_file": "helix-term/src/commands/expansions.rs",
        "discussion_id": "1894900198",
        "commented_code": "@@ -0,0 +1,196 @@\n+use std::borrow::Cow;\n+\n+use anyhow::Result;\n+use helix_core::coords_at_pos;\n+use helix_view::Editor;\n+\n+pub fn expand_args<'a>(",
        "comment_created_at": "2024-12-22T11:43:17+00:00",
        "comment_author": "RoloEdits",
        "comment_body": "`expand_args` might lead to some confusion about what it does. My previous suggestion of `variables.rs` and `expand` would read `variables::expand(...)`, which to me is more clear what its doing, acting on only variables, not all `args` which it could suggest.",
        "pr_file_module": null
      },
      {
        "comment_id": "1894902996",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 11164,
        "pr_file": "helix-term/src/commands/expansions.rs",
        "discussion_id": "1894900198",
        "commented_code": "@@ -0,0 +1,196 @@\n+use std::borrow::Cow;\n+\n+use anyhow::Result;\n+use helix_core::coords_at_pos;\n+use helix_view::Editor;\n+\n+pub fn expand_args<'a>(",
        "comment_created_at": "2024-12-22T11:53:19+00:00",
        "comment_author": "tdaron",
        "comment_body": "done :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1346090544",
    "pr_number": 8366,
    "pr_file": "helix-term/src/commands/typed.rs",
    "created_at": "2023-10-04T15:40:11+00:00",
    "commented_code": "fun: redraw,\n         signature: CommandSignature::none(),\n     },\n+    TypableCommand {\n+        name: \"trim\",\n+        aliases: &[],\n+        doc: \"Trim whitespace\",",
    "repo_full_name": "helix-editor/helix",
    "discussion_comments": [
      {
        "comment_id": "1346090544",
        "repo_full_name": "helix-editor/helix",
        "pr_number": 8366,
        "pr_file": "helix-term/src/commands/typed.rs",
        "discussion_id": "1346090544",
        "commented_code": "@@ -3008,6 +3105,13 @@ pub const TYPABLE_COMMAND_LIST: &[TypableCommand] = &[\n         fun: redraw,\n         signature: CommandSignature::none(),\n     },\n+    TypableCommand {\n+        name: \"trim\",\n+        aliases: &[],\n+        doc: \"Trim whitespace\",",
        "comment_created_at": "2023-10-04T15:40:11+00:00",
        "comment_author": "lelgenio",
        "comment_body": "The description of the command could be more specific(longer), until you try to use the command it's not clear whether it trims the buffers' content, or just the selection.\r\n\r\nAlso, the word \"trim\" is used with another meaning than in `trim_selection`, how could we differentiate these two?\r\n* trim: to move the selection anchors so that the selection no longer includes undesirable characters, but these characters still exist.\r\n* trim: to delete characters from the buffer, if they are undesirable.",
        "pr_file_module": null
      }
    ]
  }
]