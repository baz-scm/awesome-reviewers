[
  {
    "discussion_id": "2332124776",
    "pr_number": 9303,
    "pr_file": "crates/hyperswitch_connectors/src/connectors/chargebee.rs",
    "created_at": "2025-09-09T06:11:27+00:00",
    "commented_code": "impl api::RefundExecute for Chargebee {}\n impl api::RefundSync for Chargebee {}\n impl api::PaymentToken for Chargebee {}\n+impl api::subscriptions::Subscriptions for Chargebee {}\n #[cfg(all(feature = \"v2\", feature = \"revenue_recovery\"))]\n impl api::revenue_recovery::RevenueRecoveryRecordBack for Chargebee {}\n \n+#[cfg(feature = \"v1\")]\n+impl api::subscriptions::SubscriptionRecordBack for Chargebee {}\n+\n+#[cfg(feature = \"v1\")]\n+impl api::subscriptions::SubscriptionCreate for Chargebee {}\n+\n+#[cfg(feature = \"v1\")]\n+impl\n+    ConnectorIntegration<\n+        SubscriptionRecordBack,\n+        SubscriptionsRecordBackRequest,\n+        RevenueRecoveryRecordBackResponse,\n+    > for Chargebee\n+{\n+    fn get_headers(\n+        &self,\n+        req: &hyperswitch_domain_models::types::SubscriptionRecordBackRouterData,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2332124776",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9303,
        "pr_file": "crates/hyperswitch_connectors/src/connectors/chargebee.rs",
        "discussion_id": "2332124776",
        "commented_code": "@@ -78,9 +91,239 @@ impl api::Refund for Chargebee {}\n impl api::RefundExecute for Chargebee {}\n impl api::RefundSync for Chargebee {}\n impl api::PaymentToken for Chargebee {}\n+impl api::subscriptions::Subscriptions for Chargebee {}\n #[cfg(all(feature = \"v2\", feature = \"revenue_recovery\"))]\n impl api::revenue_recovery::RevenueRecoveryRecordBack for Chargebee {}\n \n+#[cfg(feature = \"v1\")]\n+impl api::subscriptions::SubscriptionRecordBack for Chargebee {}\n+\n+#[cfg(feature = \"v1\")]\n+impl api::subscriptions::SubscriptionCreate for Chargebee {}\n+\n+#[cfg(feature = \"v1\")]\n+impl\n+    ConnectorIntegration<\n+        SubscriptionRecordBack,\n+        SubscriptionsRecordBackRequest,\n+        RevenueRecoveryRecordBackResponse,\n+    > for Chargebee\n+{\n+    fn get_headers(\n+        &self,\n+        req: &hyperswitch_domain_models::types::SubscriptionRecordBackRouterData,",
        "comment_created_at": "2025-09-09T06:11:27+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n        req: &SubscriptionRecordBackRouterData,\r\n```\r\nchange it in other places also",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2332145251",
    "pr_number": 9303,
    "pr_file": "crates/hyperswitch_domain_models/src/types.rs",
    "created_at": "2025-09-09T06:21:25+00:00",
    "commented_code": "ExternalVaultProxyPaymentsData,\n     PaymentsResponseData,\n >;\n+\n+pub type SubscriptionRecordBackRouterData = RouterData<\n+    SubscriptionRecordBack,\n+    SubscriptionsRecordBackRequest,\n+    RevenueRecoveryRecordBackResponse,\n+>;",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2332145251",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9303,
        "pr_file": "crates/hyperswitch_domain_models/src/types.rs",
        "discussion_id": "2332145251",
        "commented_code": "@@ -171,3 +176,12 @@ pub type ExternalVaultProxyPaymentsRouterDataV2 = RouterDataV2<\n     ExternalVaultProxyPaymentsData,\n     PaymentsResponseData,\n >;\n+\n+pub type SubscriptionRecordBackRouterData = RouterData<\n+    SubscriptionRecordBack,\n+    SubscriptionsRecordBackRequest,\n+    RevenueRecoveryRecordBackResponse,\n+>;",
        "comment_created_at": "2025-09-09T06:21:25+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\npub type SubscriptionInvoiceRecordBackRouterData = RouterData<\r\n    SubscriptionInvoiceRecordBack,\r\n    SubscriptionInvoiceRecordBackRequest,\r\n    SubscriptionInvoiceRecordBackResponse,\r\n>;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2340204362",
    "pr_number": 9303,
    "pr_file": "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs",
    "created_at": "2025-09-11T11:06:09+00:00",
    "commented_code": "+use common_enums::enums;\n+use common_utils::types::MinorUnit;\n+use time::PrimitiveDateTime;\n+\n+#[derive(Debug, Clone)]\n+pub struct SubscriptionCreateResponse {\n+    pub subscription_id: String,\n+    pub status: String,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2340204362",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9303,
        "pr_file": "crates/hyperswitch_domain_models/src/router_response_types/subscriptions.rs",
        "discussion_id": "2340204362",
        "commented_code": "@@ -0,0 +1,14 @@\n+use common_enums::enums;\n+use common_utils::types::MinorUnit;\n+use time::PrimitiveDateTime;\n+\n+#[derive(Debug, Clone)]\n+pub struct SubscriptionCreateResponse {\n+    pub subscription_id: String,\n+    pub status: String,",
        "comment_created_at": "2025-09-11T11:06:09+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n    pub status: SubscriptionStatus,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2354798648",
    "pr_number": 9083,
    "pr_file": "crates/api_models/src/payments.rs",
    "created_at": "2025-09-17T08:51:46+00:00",
    "commented_code": "pub amount: PaymentAmountDetailsResponse,\n }\n \n+#[cfg(feature = \"v2\")]\n+#[derive(Default, Debug, serde::Deserialize, serde::Serialize, Clone, ToSchema)]\n+pub struct PaymentsCancelRequest {\n+    /// The reason for the payment cancel\n+    pub cancellation_reason: Option<String>,\n+}\n+\n+#[cfg(feature = \"v2\")]\n+#[derive(Debug, Clone, serde::Serialize, ToSchema)]\n+pub struct PaymentsCancelResponse {\n+    /// The unique identifier for the payment\n+    pub id: id_type::GlobalPaymentId,\n+\n+    /// Status of the payment\n+    #[schema(value_type = IntentStatus, example = \"cancelled\")]\n+    pub status: common_enums::IntentStatus,\n+\n+    /// Cancellation reason for the payment cancellation\n+    #[schema(example = \"Requested by merchant\")]\n+    pub cancellation_reason: Option<String>,\n+\n+    /// Amount details related to the payment\n+    pub amount: PaymentAmountDetailsResponse,\n+\n+    /// The unique identifier for the customer associated with the payment\n+    pub customer_id: Option<id_type::GlobalCustomerId>,\n+\n+    /// The connector used for the payment\n+    #[schema(example = \"stripe\")]\n+    pub connector: Option<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2354798648",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9083,
        "pr_file": "crates/api_models/src/payments.rs",
        "discussion_id": "2354798648",
        "commented_code": "@@ -4873,6 +4873,56 @@ pub struct PaymentsCaptureResponse {\n     pub amount: PaymentAmountDetailsResponse,\n }\n \n+#[cfg(feature = \"v2\")]\n+#[derive(Default, Debug, serde::Deserialize, serde::Serialize, Clone, ToSchema)]\n+pub struct PaymentsCancelRequest {\n+    /// The reason for the payment cancel\n+    pub cancellation_reason: Option<String>,\n+}\n+\n+#[cfg(feature = \"v2\")]\n+#[derive(Debug, Clone, serde::Serialize, ToSchema)]\n+pub struct PaymentsCancelResponse {\n+    /// The unique identifier for the payment\n+    pub id: id_type::GlobalPaymentId,\n+\n+    /// Status of the payment\n+    #[schema(value_type = IntentStatus, example = \"cancelled\")]\n+    pub status: common_enums::IntentStatus,\n+\n+    /// Cancellation reason for the payment cancellation\n+    #[schema(example = \"Requested by merchant\")]\n+    pub cancellation_reason: Option<String>,\n+\n+    /// Amount details related to the payment\n+    pub amount: PaymentAmountDetailsResponse,\n+\n+    /// The unique identifier for the customer associated with the payment\n+    pub customer_id: Option<id_type::GlobalCustomerId>,\n+\n+    /// The connector used for the payment\n+    #[schema(example = \"stripe\")]\n+    pub connector: Option<String>,",
        "comment_created_at": "2025-09-17T08:51:46+00:00",
        "comment_author": "prasunna09",
        "comment_body": "why is this not Connector Enum?",
        "pr_file_module": null
      },
      {
        "comment_id": "2354800230",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9083,
        "pr_file": "crates/api_models/src/payments.rs",
        "discussion_id": "2354798648",
        "commented_code": "@@ -4873,6 +4873,56 @@ pub struct PaymentsCaptureResponse {\n     pub amount: PaymentAmountDetailsResponse,\n }\n \n+#[cfg(feature = \"v2\")]\n+#[derive(Default, Debug, serde::Deserialize, serde::Serialize, Clone, ToSchema)]\n+pub struct PaymentsCancelRequest {\n+    /// The reason for the payment cancel\n+    pub cancellation_reason: Option<String>,\n+}\n+\n+#[cfg(feature = \"v2\")]\n+#[derive(Debug, Clone, serde::Serialize, ToSchema)]\n+pub struct PaymentsCancelResponse {\n+    /// The unique identifier for the payment\n+    pub id: id_type::GlobalPaymentId,\n+\n+    /// Status of the payment\n+    #[schema(value_type = IntentStatus, example = \"cancelled\")]\n+    pub status: common_enums::IntentStatus,\n+\n+    /// Cancellation reason for the payment cancellation\n+    #[schema(example = \"Requested by merchant\")]\n+    pub cancellation_reason: Option<String>,\n+\n+    /// Amount details related to the payment\n+    pub amount: PaymentAmountDetailsResponse,\n+\n+    /// The unique identifier for the customer associated with the payment\n+    pub customer_id: Option<id_type::GlobalCustomerId>,\n+\n+    /// The connector used for the payment\n+    #[schema(example = \"stripe\")]\n+    pub connector: Option<String>,",
        "comment_created_at": "2025-09-17T08:52:23+00:00",
        "comment_author": "prasunna09",
        "comment_body": "also schema value type is Connector",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2339874054",
    "pr_number": 9353,
    "pr_file": "crates/api_models/src/subscription.rs",
    "created_at": "2025-09-11T09:54:39+00:00",
    "commented_code": "+use common_types::payments::CustomerAcceptance;\n+use common_utils::{events::ApiEventMetric, pii, types::MinorUnit};\n+use time::PrimitiveDateTime;\n+\n+use crate::{\n+    customers::{CustomerRequest, CustomerResponse},\n+    enums as api_enums,\n+    payments::{Address, CustomerDetails, CustomerDetailsResponse, PaymentMethodDataRequest},\n+};\n+\n+pub const SUBSCRIPTION_ID_PREFIX: &str = \"sub\";\n+\n+#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]\n+pub struct CreateSubscriptionRequest {\n+    pub subscription_id: Option<String>,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub plan_id: Option<String>,\n+    pub coupon_code: Option<String>,\n+    pub merchant_connector_account_id: Option<common_utils::id_type::MerchantConnectorAccountId>,\n+    pub confirm: bool,\n+    pub customer_id: Option<common_utils::id_type::CustomerId>,\n+    pub customer: Option<CustomerRequest>,\n+}\n+\n+impl CreateSubscriptionRequest {\n+    pub fn get_customer_id(&self) -> Option<&common_utils::id_type::CustomerId> {\n+        self.customer_id\n+            .as_ref()\n+            .or_else(|| self.customer.as_ref()?.customer_id.as_ref())\n+    }\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct CreateSubscriptionResponse {\n+    pub subscription: Subscription,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub client_secret: Option<String>,\n+    pub merchant_id: String,\n+    pub merchant_connector_account_id: Option<common_utils::id_type::MerchantConnectorAccountId>,\n+    pub coupon_code: Option<String>,\n+    pub customer: Option<CustomerDetailsResponse>,\n+    pub invoice: Option<Invoice>,\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct Subscription {\n+    pub id: String,\n+    pub status: SubscriptionStatus,\n+    pub plan_id: Option<String>,\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize, strum::EnumString, strum::Display)]\n+pub enum SubscriptionStatus {\n+    Created,\n+    Active,\n+    InActive,\n+}\n+\n+impl SubscriptionStatus {\n+    pub fn get_status_from_connector_status(status: &str) -> Self {\n+        match status {\n+            \"active\" => Self::Active,\n+            \"inactive\" => Self::InActive,\n+            _ => Self::Created,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct Invoice {\n+    pub id: String,\n+    pub total_amount: u64,\n+    pub currency: common_enums::Currency,\n+}\n+\n+impl Subscription {\n+    pub fn new(id: impl Into<String>, status: SubscriptionStatus, plan_id: Option<String>) -> Self {\n+        Self {\n+            id: id.into(),\n+            status,\n+            plan_id,\n+        }\n+    }\n+}\n+\n+impl Invoice {\n+    pub fn new(id: impl Into<String>, total_amount: u64, currency: common_enums::Currency) -> Self {\n+        Self {\n+            id: id.into(),\n+            total_amount,\n+            currency,\n+        }\n+    }\n+}\n+impl CreateSubscriptionResponse {\n+    #[allow(clippy::too_many_arguments)]\n+    pub fn new(\n+        subscription: Subscription,\n+        profile_id: common_utils::id_type::ProfileId,\n+        merchant_id: impl Into<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2339874054",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9353,
        "pr_file": "crates/api_models/src/subscription.rs",
        "discussion_id": "2339874054",
        "commented_code": "@@ -0,0 +1,194 @@\n+use common_types::payments::CustomerAcceptance;\n+use common_utils::{events::ApiEventMetric, pii, types::MinorUnit};\n+use time::PrimitiveDateTime;\n+\n+use crate::{\n+    customers::{CustomerRequest, CustomerResponse},\n+    enums as api_enums,\n+    payments::{Address, CustomerDetails, CustomerDetailsResponse, PaymentMethodDataRequest},\n+};\n+\n+pub const SUBSCRIPTION_ID_PREFIX: &str = \"sub\";\n+\n+#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]\n+pub struct CreateSubscriptionRequest {\n+    pub subscription_id: Option<String>,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub plan_id: Option<String>,\n+    pub coupon_code: Option<String>,\n+    pub merchant_connector_account_id: Option<common_utils::id_type::MerchantConnectorAccountId>,\n+    pub confirm: bool,\n+    pub customer_id: Option<common_utils::id_type::CustomerId>,\n+    pub customer: Option<CustomerRequest>,\n+}\n+\n+impl CreateSubscriptionRequest {\n+    pub fn get_customer_id(&self) -> Option<&common_utils::id_type::CustomerId> {\n+        self.customer_id\n+            .as_ref()\n+            .or_else(|| self.customer.as_ref()?.customer_id.as_ref())\n+    }\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct CreateSubscriptionResponse {\n+    pub subscription: Subscription,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub client_secret: Option<String>,\n+    pub merchant_id: String,\n+    pub merchant_connector_account_id: Option<common_utils::id_type::MerchantConnectorAccountId>,\n+    pub coupon_code: Option<String>,\n+    pub customer: Option<CustomerDetailsResponse>,\n+    pub invoice: Option<Invoice>,\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct Subscription {\n+    pub id: String,\n+    pub status: SubscriptionStatus,\n+    pub plan_id: Option<String>,\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize, strum::EnumString, strum::Display)]\n+pub enum SubscriptionStatus {\n+    Created,\n+    Active,\n+    InActive,\n+}\n+\n+impl SubscriptionStatus {\n+    pub fn get_status_from_connector_status(status: &str) -> Self {\n+        match status {\n+            \"active\" => Self::Active,\n+            \"inactive\" => Self::InActive,\n+            _ => Self::Created,\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, serde::Serialize)]\n+pub struct Invoice {\n+    pub id: String,\n+    pub total_amount: u64,\n+    pub currency: common_enums::Currency,\n+}\n+\n+impl Subscription {\n+    pub fn new(id: impl Into<String>, status: SubscriptionStatus, plan_id: Option<String>) -> Self {\n+        Self {\n+            id: id.into(),\n+            status,\n+            plan_id,\n+        }\n+    }\n+}\n+\n+impl Invoice {\n+    pub fn new(id: impl Into<String>, total_amount: u64, currency: common_enums::Currency) -> Self {\n+        Self {\n+            id: id.into(),\n+            total_amount,\n+            currency,\n+        }\n+    }\n+}\n+impl CreateSubscriptionResponse {\n+    #[allow(clippy::too_many_arguments)]\n+    pub fn new(\n+        subscription: Subscription,\n+        profile_id: common_utils::id_type::ProfileId,\n+        merchant_id: impl Into<String>,",
        "comment_created_at": "2025-09-11T09:54:39+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n        merchant_id: impl Into<id_type::MerchantId>,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2313090534",
    "pr_number": 9124,
    "pr_file": "crates/injector/src/types.rs",
    "created_at": "2025-09-01T07:17:25+00:00",
    "commented_code": "#[derive(Clone, Debug, Deserialize, Serialize)]\n     pub struct ConnectionConfig {\n         /// Base URL of the connector endpoint\n-        pub base_url: Url,\n+        pub base_url: String,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2313090534",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9124,
        "pr_file": "crates/injector/src/types.rs",
        "discussion_id": "2313090534",
        "commented_code": "@@ -74,15 +73,15 @@ pub mod models {\n     #[derive(Clone, Debug, Deserialize, Serialize)]\n     pub struct ConnectionConfig {\n         /// Base URL of the connector endpoint\n-        pub base_url: Url,\n+        pub base_url: String,",
        "comment_created_at": "2025-09-01T07:17:25+00:00",
        "comment_author": "Sakilmostak",
        "comment_body": "have the url strict type for validation",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2228072260",
    "pr_number": 7062,
    "pr_file": "crates/api_models/src/payments.rs",
    "created_at": "2025-07-24T10:06:43+00:00",
    "commented_code": "pub status_message: String,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, ToSchema)]\n+pub struct AmazonPaySessionTokenResponse {\n+    /// Amazon Pay merchant account identifier\n+    pub merchant_id: String,\n+    /// Ledger currency provided during registration for the given merchant identifier\n+    #[schema(example = \"USD\", value_type = Currency)]\n+    pub ledger_currency: common_enums::Currency,\n+    /// Amazon Pay store ID\n+    pub store_id: String,\n+    /// Payment flow for charging the buyer\n+    pub payment_intent: AmazonPayPaymentIntent,\n+    /// The total shipping costs\n+    #[schema(value_type = String)]\n+    pub total_shipping_amount: StringMajorUnit,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2228072260",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 7062,
        "pr_file": "crates/api_models/src/payments.rs",
        "discussion_id": "2228072260",
        "commented_code": "@@ -7506,6 +7533,137 @@ pub struct ApplepayErrorResponse {\n     pub status_message: String,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, ToSchema)]\n+pub struct AmazonPaySessionTokenResponse {\n+    /// Amazon Pay merchant account identifier\n+    pub merchant_id: String,\n+    /// Ledger currency provided during registration for the given merchant identifier\n+    #[schema(example = \"USD\", value_type = Currency)]\n+    pub ledger_currency: common_enums::Currency,\n+    /// Amazon Pay store ID\n+    pub store_id: String,\n+    /// Payment flow for charging the buyer\n+    pub payment_intent: AmazonPayPaymentIntent,\n+    /// The total shipping costs\n+    #[schema(value_type = String)]\n+    pub total_shipping_amount: StringMajorUnit,",
        "comment_created_at": "2025-07-24T10:06:43+00:00",
        "comment_author": "jarnura",
        "comment_body": "Why here we are using MajorUnit? In other places too? This is not documented anywhere that why we using StringMajorUnit? And we should strictly use MinorUnit",
        "pr_file_module": null
      },
      {
        "comment_id": "2228086273",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 7062,
        "pr_file": "crates/api_models/src/payments.rs",
        "discussion_id": "2228072260",
        "commented_code": "@@ -7506,6 +7533,137 @@ pub struct ApplepayErrorResponse {\n     pub status_message: String,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, ToSchema)]\n+pub struct AmazonPaySessionTokenResponse {\n+    /// Amazon Pay merchant account identifier\n+    pub merchant_id: String,\n+    /// Ledger currency provided during registration for the given merchant identifier\n+    #[schema(example = \"USD\", value_type = Currency)]\n+    pub ledger_currency: common_enums::Currency,\n+    /// Amazon Pay store ID\n+    pub store_id: String,\n+    /// Payment flow for charging the buyer\n+    pub payment_intent: AmazonPayPaymentIntent,\n+    /// The total shipping costs\n+    #[schema(value_type = String)]\n+    pub total_shipping_amount: StringMajorUnit,",
        "comment_created_at": "2025-07-24T10:13:04+00:00",
        "comment_author": "Anurag-05-prog",
        "comment_body": "These values are required on the frontend to render the Amazon Pay SDK, and they must be in string major units. Since performing amount conversion on the frontend is not ideal, we\u2019ve handled the conversion on the backend and included the converted values in the session token response.",
        "pr_file_module": null
      }
    ]
  }
]