[
  {
    "discussion_id": "2328440101",
    "pr_number": 9289,
    "pr_file": "crates/external_services/src/superposition/superposition.rs",
    "created_at": "2025-09-07T01:59:49+00:00",
    "commented_code": "+use masking::{ExposeInterface, Secret};\n+\n+use super::interface::{ConfigContext, SuperpositionError};\n+\n+/// Configuration for Superposition integration\n+#[derive(Debug, Clone, serde::Deserialize)]\n+pub struct SuperpositionClientConfig {\n+    /// Whether Superposition is enabled\n+    pub enabled: bool,\n+    /// Superposition API endpoint\n+    pub endpoint: String,\n+    /// Authentication token for Superposition\n+    pub token: Secret<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2328440101",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9289,
        "pr_file": "crates/external_services/src/superposition/superposition.rs",
        "discussion_id": "2328440101",
        "commented_code": "@@ -0,0 +1,255 @@\n+use masking::{ExposeInterface, Secret};\n+\n+use super::interface::{ConfigContext, SuperpositionError};\n+\n+/// Configuration for Superposition integration\n+#[derive(Debug, Clone, serde::Deserialize)]\n+pub struct SuperpositionClientConfig {\n+    /// Whether Superposition is enabled\n+    pub enabled: bool,\n+    /// Superposition API endpoint\n+    pub endpoint: String,\n+    /// Authentication token for Superposition\n+    pub token: Secret<String>,",
        "comment_created_at": "2025-09-07T01:59:49+00:00",
        "comment_author": "SanchithHegde",
        "comment_body": "Shouldn't this token be stored as a KMS encrypted value preferably? Can you make the required changes in `secrets_transformers.rs` to handle KMS decryption?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2340158535",
    "pr_number": 9358,
    "pr_file": "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs",
    "created_at": "2025-09-11T10:56:11+00:00",
    "commented_code": "#[serde(untagged)]\n pub enum PaysafePaymentMethod {\n     Card { card: PaysafeCard },\n+    Wallet(Box<PaysafeWallet>),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(untagged)]\n+pub enum PaysafeWallet {\n+    ApplePay {\n+        #[serde(rename = \"applePay\")]\n+        apple_pay: PaysafeApplepayPayment,\n+    },\n+    /* TODO:\n+    GooglePay {\n+        #[serde(rename = \"googlePay\")]\n+        google_pay: GooglePayWallet,\n+    },\n+    */\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplepayPayment {\n+    pub label: Option<String>,\n+    pub request_billing_address: Option<bool>,\n+    #[serde(rename = \"applePayPaymentToken\")]\n+    pub apple_pay_payment_token: PaysafeApplePayPaymentToken,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayPaymentToken {\n+    pub token: PaysafeApplePayToken,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub billing_contact: Option<PaysafeApplePayBillingContact>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayToken {\n+    pub payment_data: PaysafeApplePayPaymentData,\n+    pub payment_method: PaysafeApplePayPaymentMethod,\n+    pub transaction_identifier: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(untagged)]\n+pub enum PaysafeApplePayPaymentData {\n+    Encrypted(PaysafeApplePayEncryptedData),\n+    Decrypted(PaysafeApplePayDecryptedDataWrapper),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayEncryptedData {\n+    pub data: Secret<String>,\n+    pub signature: Secret<String>,\n+    pub header: PaysafeApplePayHeader,\n+    pub version: Secret<String>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedDataWrapper {\n+    pub decrypted_data: PaysafeApplePayDecryptedData,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedData {\n+    pub application_primary_account_number: CardNumber,\n+    pub application_expiration_date: Secret<String>,\n+    pub currency_code: Option<Currency>,\n+    pub transaction_amount: Option<MinorUnit>,\n+    pub cardholder_name: Option<Secret<String>>,\n+    pub device_manufacturer_identifier: Option<String>,\n+    pub payment_data_type: Option<String>,\n+    pub payment_data: PaysafeApplePayDecryptedPaymentData,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedPaymentData {\n+    pub online_payment_cryptogram: Secret<String>,\n+    pub eci_indicator: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayHeader {\n+    pub public_key_hash: String,\n+    pub ephemeral_public_key: String,\n+    pub transaction_id: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayPaymentMethod {\n+    pub display_name: Secret<String>,\n+    pub network: Secret<String>,\n+    #[serde(rename = \"type\")]\n+    pub method_type: Secret<String>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayBillingContact {\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub address_lines: Option<Vec<String>>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub administrative_area: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub country: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub country_code: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub family_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub given_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub locality: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub phonetic_family_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub phonetic_given_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub postal_code: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub sub_administrative_area: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub sub_locality: Option<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2340158535",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9358,
        "pr_file": "crates/hyperswitch_connectors/src/connectors/paysafe/transformers.rs",
        "discussion_id": "2340158535",
        "commented_code": "@@ -134,6 +149,135 @@ pub struct PaysafePaymentHandleRequest {\n #[serde(untagged)]\n pub enum PaysafePaymentMethod {\n     Card { card: PaysafeCard },\n+    Wallet(Box<PaysafeWallet>),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(untagged)]\n+pub enum PaysafeWallet {\n+    ApplePay {\n+        #[serde(rename = \"applePay\")]\n+        apple_pay: PaysafeApplepayPayment,\n+    },\n+    /* TODO:\n+    GooglePay {\n+        #[serde(rename = \"googlePay\")]\n+        google_pay: GooglePayWallet,\n+    },\n+    */\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplepayPayment {\n+    pub label: Option<String>,\n+    pub request_billing_address: Option<bool>,\n+    #[serde(rename = \"applePayPaymentToken\")]\n+    pub apple_pay_payment_token: PaysafeApplePayPaymentToken,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayPaymentToken {\n+    pub token: PaysafeApplePayToken,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub billing_contact: Option<PaysafeApplePayBillingContact>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayToken {\n+    pub payment_data: PaysafeApplePayPaymentData,\n+    pub payment_method: PaysafeApplePayPaymentMethod,\n+    pub transaction_identifier: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(untagged)]\n+pub enum PaysafeApplePayPaymentData {\n+    Encrypted(PaysafeApplePayEncryptedData),\n+    Decrypted(PaysafeApplePayDecryptedDataWrapper),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayEncryptedData {\n+    pub data: Secret<String>,\n+    pub signature: Secret<String>,\n+    pub header: PaysafeApplePayHeader,\n+    pub version: Secret<String>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedDataWrapper {\n+    pub decrypted_data: PaysafeApplePayDecryptedData,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedData {\n+    pub application_primary_account_number: CardNumber,\n+    pub application_expiration_date: Secret<String>,\n+    pub currency_code: Option<Currency>,\n+    pub transaction_amount: Option<MinorUnit>,\n+    pub cardholder_name: Option<Secret<String>>,\n+    pub device_manufacturer_identifier: Option<String>,\n+    pub payment_data_type: Option<String>,\n+    pub payment_data: PaysafeApplePayDecryptedPaymentData,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayDecryptedPaymentData {\n+    pub online_payment_cryptogram: Secret<String>,\n+    pub eci_indicator: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayHeader {\n+    pub public_key_hash: String,\n+    pub ephemeral_public_key: String,\n+    pub transaction_id: String,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayPaymentMethod {\n+    pub display_name: Secret<String>,\n+    pub network: Secret<String>,\n+    #[serde(rename = \"type\")]\n+    pub method_type: Secret<String>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaysafeApplePayBillingContact {\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub address_lines: Option<Vec<String>>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub administrative_area: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub country: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub country_code: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub family_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub given_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub locality: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub phonetic_family_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub phonetic_given_name: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub postal_code: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub sub_administrative_area: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub sub_locality: Option<String>,",
        "comment_created_at": "2025-09-11T10:56:11+00:00",
        "comment_author": "deepanshu-iiitu",
        "comment_body": "Make PII fields secret",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2336342461",
    "pr_number": 9348,
    "pr_file": "crates/diesel_models/src/invoice.rs",
    "created_at": "2025-09-10T10:45:03+00:00",
    "commented_code": "+use common_utils::pii::SecretSerdeValue;\n+use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};\n+use serde::{Deserialize, Serialize};\n+\n+use crate::schema::invoices;\n+\n+#[derive(Clone, Debug, Eq, Insertable, PartialEq, Serialize, Deserialize)]\n+#[diesel(table_name = invoices)]\n+pub struct InvoiceNew {\n+    pub invoice_id: String,\n+    pub subscription_id: Option<String>,\n+    pub connector_subscription_id: Option<String>,\n+    pub merchant_id: common_utils::id_type::MerchantId,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub merchant_connector_id: common_utils::id_type::MerchantConnectorAccountId,\n+    pub payment_intent_id: String,\n+    pub payment_method_id: Option<String>,\n+    pub customer_id: common_utils::id_type::CustomerId,\n+    pub amount: i32,\n+    pub currency: String,\n+    pub status: String,\n+    pub provider_name: String,\n+    pub metadata: Option<SecretSerdeValue>,\n+    pub created_at: time::PrimitiveDateTime,\n+    pub modified_at: time::PrimitiveDateTime,\n+}\n+\n+#[derive(\n+    Clone, Debug, Eq, PartialEq, Identifiable, Queryable, Selectable, Deserialize, Serialize,\n+)]\n+#[diesel(\n+    table_name = invoices,\n+    primary_key(invoice_id),\n+    check_for_backend(diesel::pg::Pg)\n+)]\n+pub struct Invoice {\n+    pub invoice_id: String,\n+    pub subscription_id: Option<String>,\n+    pub connector_subscription_id: Option<String>,\n+    pub merchant_id: common_utils::id_type::MerchantId,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub merchant_connector_id: common_utils::id_type::MerchantConnectorAccountId,\n+    pub payment_intent_id: String,\n+    pub payment_method_id: Option<String>,\n+    pub customer_id: common_utils::id_type::CustomerId,\n+    pub amount: i32,\n+    pub currency: String,\n+    pub status: String,\n+    pub provider_name: String,\n+    pub metadata: Option<serde_json::Value>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2336342461",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9348,
        "pr_file": "crates/diesel_models/src/invoice.rs",
        "discussion_id": "2336342461",
        "commented_code": "@@ -0,0 +1,111 @@\n+use common_utils::pii::SecretSerdeValue;\n+use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};\n+use serde::{Deserialize, Serialize};\n+\n+use crate::schema::invoices;\n+\n+#[derive(Clone, Debug, Eq, Insertable, PartialEq, Serialize, Deserialize)]\n+#[diesel(table_name = invoices)]\n+pub struct InvoiceNew {\n+    pub invoice_id: String,\n+    pub subscription_id: Option<String>,\n+    pub connector_subscription_id: Option<String>,\n+    pub merchant_id: common_utils::id_type::MerchantId,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub merchant_connector_id: common_utils::id_type::MerchantConnectorAccountId,\n+    pub payment_intent_id: String,\n+    pub payment_method_id: Option<String>,\n+    pub customer_id: common_utils::id_type::CustomerId,\n+    pub amount: i32,\n+    pub currency: String,\n+    pub status: String,\n+    pub provider_name: String,\n+    pub metadata: Option<SecretSerdeValue>,\n+    pub created_at: time::PrimitiveDateTime,\n+    pub modified_at: time::PrimitiveDateTime,\n+}\n+\n+#[derive(\n+    Clone, Debug, Eq, PartialEq, Identifiable, Queryable, Selectable, Deserialize, Serialize,\n+)]\n+#[diesel(\n+    table_name = invoices,\n+    primary_key(invoice_id),\n+    check_for_backend(diesel::pg::Pg)\n+)]\n+pub struct Invoice {\n+    pub invoice_id: String,\n+    pub subscription_id: Option<String>,\n+    pub connector_subscription_id: Option<String>,\n+    pub merchant_id: common_utils::id_type::MerchantId,\n+    pub profile_id: common_utils::id_type::ProfileId,\n+    pub merchant_connector_id: common_utils::id_type::MerchantConnectorAccountId,\n+    pub payment_intent_id: String,\n+    pub payment_method_id: Option<String>,\n+    pub customer_id: common_utils::id_type::CustomerId,\n+    pub amount: i32,\n+    pub currency: String,\n+    pub status: String,\n+    pub provider_name: String,\n+    pub metadata: Option<serde_json::Value>,",
        "comment_created_at": "2025-09-10T10:45:03+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n    pub metadata: Option<secret<serde_json::Value>>,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2314981320",
    "pr_number": 9133,
    "pr_file": "crates/diesel_models/src/subscription.rs",
    "created_at": "2025-09-02T05:53:38+00:00",
    "commented_code": "+use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};\n+use serde::{Deserialize, Serialize};\n+\n+use crate::schema::subscription;\n+\n+#[derive(Clone, Debug, Eq, Insertable, PartialEq, Serialize, Deserialize)]\n+#[diesel(table_name = subscription)]\n+pub struct SubscriptionNew {\n+    pub id: String,\n+    pub subscription_id: Option<String>,\n+    pub billing_processor: Option<String>,\n+    pub payment_method_id: Option<String>,\n+    pub mca_id: Option<String>,\n+    pub client_secret: Option<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2314981320",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9133,
        "pr_file": "crates/diesel_models/src/subscription.rs",
        "discussion_id": "2314981320",
        "commented_code": "@@ -0,0 +1,86 @@\n+use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};\n+use serde::{Deserialize, Serialize};\n+\n+use crate::schema::subscription;\n+\n+#[derive(Clone, Debug, Eq, Insertable, PartialEq, Serialize, Deserialize)]\n+#[diesel(table_name = subscription)]\n+pub struct SubscriptionNew {\n+    pub id: String,\n+    pub subscription_id: Option<String>,\n+    pub billing_processor: Option<String>,\n+    pub payment_method_id: Option<String>,\n+    pub mca_id: Option<String>,\n+    pub client_secret: Option<String>,",
        "comment_created_at": "2025-09-02T05:53:38+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n    pub client_secret: Option<Secret<String>>,\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2317617367",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9133,
        "pr_file": "crates/diesel_models/src/subscription.rs",
        "discussion_id": "2314981320",
        "commented_code": "@@ -0,0 +1,86 @@\n+use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};\n+use serde::{Deserialize, Serialize};\n+\n+use crate::schema::subscription;\n+\n+#[derive(Clone, Debug, Eq, Insertable, PartialEq, Serialize, Deserialize)]\n+#[diesel(table_name = subscription)]\n+pub struct SubscriptionNew {\n+    pub id: String,\n+    pub subscription_id: Option<String>,\n+    pub billing_processor: Option<String>,\n+    pub payment_method_id: Option<String>,\n+    pub mca_id: Option<String>,\n+    pub client_secret: Option<String>,",
        "comment_created_at": "2025-09-03T02:44:27+00:00",
        "comment_author": "prajjwalkumar17",
        "comment_body": "Why is this required, why to make authentication key a secret?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2315711706",
    "pr_number": 9008,
    "pr_file": "crates/api_models/src/payments.rs",
    "created_at": "2025-09-02T10:49:57+00:00",
    "commented_code": "pub merchant_id: id_type::MerchantId,\n }\n \n-#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize, ToSchema)]\n+#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize, serde::Deserialize, ToSchema)]\n pub struct BoletoVoucherData {\n-    /// The shopper's social security number\n+    /// The shopper's social security number (CPF or CNPJ)\n     #[schema(value_type = Option<String>)]\n     pub social_security_number: Option<Secret<String>>,\n+\n+    /// The shopper's bank account number associated with the boleto\n+    #[schema(value_type = Option<String>)]\n+    pub bank_number: Option<String>,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2315711706",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9008,
        "pr_file": "crates/api_models/src/payments.rs",
        "discussion_id": "2315711706",
        "commented_code": "@@ -4260,11 +4260,44 @@ pub struct RewardData {\n     pub merchant_id: id_type::MerchantId,\n }\n \n-#[derive(Debug, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize, ToSchema)]\n+#[derive(Debug, Clone, PartialEq, Eq, serde::Serialize, serde::Deserialize, ToSchema)]\n pub struct BoletoVoucherData {\n-    /// The shopper's social security number\n+    /// The shopper's social security number (CPF or CNPJ)\n     #[schema(value_type = Option<String>)]\n     pub social_security_number: Option<Secret<String>>,\n+\n+    /// The shopper's bank account number associated with the boleto\n+    #[schema(value_type = Option<String>)]\n+    pub bank_number: Option<String>,",
        "comment_created_at": "2025-09-02T10:49:57+00:00",
        "comment_author": "jagan-jaya",
        "comment_body": "```suggestion\r\n    pub bank_number: Option< Secret <String>>,\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2312168001",
    "pr_number": 9108,
    "pr_file": "crates/external_services/src/grpc_client/unified_connector_service.rs",
    "created_at": "2025-08-31T01:16:55+00:00",
    "commented_code": "pub merchant_id: Secret<String>,\n }\n \n+/// External Vault Proxy Related Metadata\n+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]\n+#[serde(untagged)]\n+pub enum ExternalVaultProxyMetadata {\n+    /// VGS proxy data variant\n+    VgsMetadata(VgsMetadata),\n+}\n+\n+/// VGS proxy data\n+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]\n+pub struct VgsMetadata {\n+    /// External vault url\n+    pub proxy_url: Url,",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2312168001",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 9108,
        "pr_file": "crates/external_services/src/grpc_client/unified_connector_service.rs",
        "discussion_id": "2312168001",
        "commented_code": "@@ -156,6 +156,23 @@ pub struct ConnectorAuthMetadata {\n     pub merchant_id: Secret<String>,\n }\n \n+/// External Vault Proxy Related Metadata\n+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]\n+#[serde(untagged)]\n+pub enum ExternalVaultProxyMetadata {\n+    /// VGS proxy data variant\n+    VgsMetadata(VgsMetadata),\n+}\n+\n+/// VGS proxy data\n+#[derive(Debug, Clone, serde::Deserialize, serde::Serialize)]\n+pub struct VgsMetadata {\n+    /// External vault url\n+    pub proxy_url: Url,",
        "comment_created_at": "2025-08-31T01:16:55+00:00",
        "comment_author": "su-shivanshmathur",
        "comment_body": "Please make this `Secret<String>`, for future purposes please add `external-vault-id` as a field as well ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2013753608",
    "pr_number": 7062,
    "pr_file": "crates/hyperswitch_connectors/src/connectors/amazonpay/transformers.rs",
    "created_at": "2025-03-26T09:48:17+00:00",
    "commented_code": "-use common_enums::enums;\n-use common_utils::types::StringMinorUnit;\n+use std::collections::HashMap;\n+\n+use common_enums::{enums, CaptureMethod};\n+use common_utils::{errors::CustomResult, types::StringMajorUnit};\n use hyperswitch_domain_models::{\n-    payment_method_data::PaymentMethodData,\n     router_data::{ConnectorAuthType, RouterData},\n     router_flow_types::refunds::{Execute, RSync},\n     router_request_types::ResponseId,\n     router_response_types::{PaymentsResponseData, RefundsResponseData},\n     types::{PaymentsAuthorizeRouterData, RefundsRouterData},\n };\n use hyperswitch_interfaces::errors;\n-use masking::Secret;\n+use masking::{PeekInterface, Secret};\n use serde::{Deserialize, Serialize};\n \n-use crate::{\n-    types::{RefundsResponseRouterData, ResponseRouterData},\n-    utils::PaymentsAuthorizeRequestData,\n-};\n+use crate::types::{RefundsResponseRouterData, ResponseRouterData};\n \n-//TODO: Fill the struct with respective fields\n pub struct AmazonpayRouterData<T> {\n-    pub amount: StringMinorUnit, // The type of amount that a connector accepts, for example, String, i64, f64, etc.\n+    pub amount: StringMajorUnit,\n     pub router_data: T,\n }\n \n-impl<T> From<(StringMinorUnit, T)> for AmazonpayRouterData<T> {\n-    fn from((amount, item): (StringMinorUnit, T)) -> Self {\n-        //Todo :  use utils to convert the amount to the type of amount that a connector accepts\n+impl<T> From<(StringMajorUnit, T)> for AmazonpayRouterData<T> {\n+    fn from((amount, item): (StringMajorUnit, T)) -> Self {\n         Self {\n             amount,\n             router_data: item,\n         }\n     }\n }\n \n-//TODO: Fill the struct with respective fields\n #[derive(Default, Debug, Serialize, PartialEq)]\n-pub struct AmazonpayPaymentsRequest {\n-    amount: StringMinorUnit,\n-    card: AmazonpayCard,\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AmazonpayFinalizeRequest {\n+    charge_amount: ChargeAmount,\n+    total_order_amount: Option<TotalOrderAmount>,\n+    shipping_address: AddressDetails,\n+    payment_intent: PaymentIntent,\n }\n \n-#[derive(Default, Debug, Serialize, Eq, PartialEq)]\n-pub struct AmazonpayCard {\n-    number: cards::CardNumber,\n-    expiry_month: Secret<String>,\n-    expiry_year: Secret<String>,\n-    cvc: Secret<String>,\n-    complete: bool,\n+#[derive(Default, Debug, Clone, Serialize, Deserialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ChargeAmount {\n+    amount: StringMajorUnit,\n+    currency_code: common_enums::Currency,\n }\n \n-impl TryFrom<&AmazonpayRouterData<&PaymentsAuthorizeRouterData>> for AmazonpayPaymentsRequest {\n+#[derive(Default, Debug, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct TotalOrderAmount {\n+    amount: Option<StringMajorUnit>,\n+    currency_code: Option<common_enums::Currency>,\n+    can_handle_pending_authorization: Option<bool>,\n+    supplementary_data: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AddressDetails {\n+    name: Option<String>,\n+    address_line_1: Option<String>,\n+    address_line_2: Option<String>,\n+    address_line_3: Option<String>,\n+    city: Option<String>,\n+    state_or_region: Option<String>,\n+    postal_code: Option<String>,\n+    country_code: Option<common_enums::CountryAlpha2>,\n+    phone_number: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Serialize, PartialEq)]\n+pub enum PaymentIntent {\n+    #[default]\n+    AuthorizeWithCapture,\n+}\n+\n+fn get_amazonpay_capture_type(\n+    item: Option<CaptureMethod>,\n+) -> CustomResult<Option<PaymentIntent>, errors::ConnectorError> {\n+    match item {\n+        Some(CaptureMethod::Automatic) => Ok(Some(PaymentIntent::AuthorizeWithCapture)),\n+        Some(_) => Err(errors::ConnectorError::CaptureMethodNotSupported.into()),\n+        None => Err(errors::ConnectorError::MissingRequiredField {\n+            field_name: \"capture_method\",\n+        }\n+        .into()),\n+    }\n+}\n+\n+impl TryFrom<&AmazonpayRouterData<&PaymentsAuthorizeRouterData>> for AmazonpayFinalizeRequest {\n     type Error = error_stack::Report<errors::ConnectorError>;\n     fn try_from(\n         item: &AmazonpayRouterData<&PaymentsAuthorizeRouterData>,\n     ) -> Result<Self, Self::Error> {\n-        match item.router_data.request.payment_method_data.clone() {\n-            PaymentMethodData::Card(req_card) => {\n-                let card = AmazonpayCard {\n-                    number: req_card.card_number,\n-                    expiry_month: req_card.card_exp_month,\n-                    expiry_year: req_card.card_exp_year,\n-                    cvc: req_card.card_cvc,\n-                    complete: item.router_data.request.is_auto_capture()?,\n-                };\n-                Ok(Self {\n-                    amount: item.amount.clone(),\n-                    card,\n-                })\n+        let charge_amount = ChargeAmount {\n+            amount: item.amount.clone(),\n+            currency_code: common_enums::Currency::USD,\n+        };\n+        let shipping_address_details = item.router_data.address.get_shipping();\n+        let shipping_address = if let Some(shipping) = shipping_address_details {\n+            if let Some(address_details) = shipping.address.as_ref() {\n+                AddressDetails {\n+                    name: address_details\n+                        .get_optional_full_name()\n+                        .map(|secret_name| secret_name.peek().to_string()),\n+                    address_line_1: address_details\n+                        .line1\n+                        .clone()\n+                        .map(|l1| l1.peek().to_string()),\n+                    address_line_2: address_details\n+                        .line2\n+                        .clone()\n+                        .map(|l2| l2.peek().to_string()),\n+                    address_line_3: address_details\n+                        .line3\n+                        .clone()\n+                        .map(|l3| l3.peek().to_string()),\n+                    city: address_details.city.clone(),\n+                    state_or_region: address_details\n+                        .state\n+                        .clone()\n+                        .map(|state| state.peek().to_string()),\n+                    postal_code: address_details\n+                        .zip\n+                        .clone()\n+                        .map(|zip| zip.peek().to_string()),\n+                    country_code: address_details.country,\n+                    phone_number: shipping\n+                        .phone\n+                        .as_ref()\n+                        .and_then(|phone| phone.number.as_ref())\n+                        .map(|phone_number| phone_number.peek().to_string()),\n+                }\n+            } else {\n+                AddressDetails::default()\n             }\n-            _ => Err(errors::ConnectorError::NotImplemented(\"Payment method\".to_string()).into()),\n+        } else {\n+            AddressDetails::default()\n+        };\n+        let payment_intent = get_amazonpay_capture_type(item.router_data.request.capture_method)?\n+            .unwrap_or_default();\n+        Ok(Self {\n+            charge_amount,\n+            total_order_amount: None,\n+            shipping_address,\n+            payment_intent,\n+        })\n+    }\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AmazonpayFinalizeResponse {\n+    checkout_session_id: String,\n+    web_checkout_details: WebCheckoutDetails,\n+    product_type: Option<String>,\n+    payment_details: Option<PaymentDetails>,\n+    cart_details: CartDetails,\n+    charge_permission_type: String,\n+    order_type: Option<String>,\n+    recurring_metadata: Option<RecurringMetadata>,\n+    payment_method_on_file_metadata: Option<String>,\n+    processor_specifications: Option<String>,\n+    merchant_details: Option<String>,\n+    merchant_metadata: Option<MerchantMetadata>,\n+    supplementary_data: Option<String>,\n+    buyer: Option<BuyerDetails>,\n+    billing_address: Option<AddressDetails>,\n+    payment_preferences: Option<String>,\n+    status_details: FinalizeStatusDetails,\n+    shipping_address: Option<AddressDetails>,\n+    platform_id: Option<String>,\n+    charge_permission_id: String,\n+    charge_id: String,\n+    constraints: Option<String>,\n+    creation_timestamp: String,\n+    expiration_timestamp: Option<String>,\n+    store_id: Option<String>,\n+    provider_metadata: Option<ProviderMetadata>,\n+    release_environment: Option<ReleaseEnvironment>,\n+    checkout_button_text: Option<String>,\n+    delivery_specifications: Option<DeliverySpecifications>,\n+    tokens: Option<String>,\n+    disbursement_details: Option<String>,\n+    channel_type: Option<String>,\n+    payment_processing_meta_data: PaymentProcessingMetaData,\n+}\n+\n+#[derive(Clone, Default, Debug, Serialize, Deserialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct WebCheckoutDetails {\n+    checkout_review_return_url: Option<String>,\n+    checkout_result_return_url: Option<String>,\n+    amazon_pay_redirect_url: Option<String>,\n+    authorize_result_return_url: Option<String>,\n+    sign_in_return_url: Option<String>,\n+    sign_in_cancel_url: Option<String>,\n+    checkout_error_url: Option<String>,\n+    sign_in_error_url: Option<String>,\n+    amazon_pay_decline_url: Option<String>,\n+    checkout_cancel_url: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaymentDetails {\n+    payment_intent: String,\n+    can_handle_pending_authorization: bool,\n+    charge_amount: ChargeAmount,\n+    total_order_amount: ChargeAmount,\n+    presentment_currency: String,\n+    soft_descriptor: String,\n+    allow_overcharge: bool,\n+    extend_expiration: bool,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct CartDetails {\n+    line_items: Vec<String>,\n+    delivery_options: Vec<DeliveryOptions>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct DeliveryOptions {\n+    id: String,\n+    price: ChargeAmount,\n+    shipping_method: ShippingMethod,\n+    is_default: bool,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ShippingMethod {\n+    shipping_method_name: String,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct RecurringMetadata {\n+    frequency: Frequency,\n+    amount: ChargeAmount,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct Frequency {\n+    unit: String,\n+    value: String,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct BuyerDetails {\n+    buyer_id: String,\n+    name: String,\n+    email: String,\n+    phone_number: String,\n+    prime_membership_types: Vec<String>,\n+}",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2013753608",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 7062,
        "pr_file": "crates/hyperswitch_connectors/src/connectors/amazonpay/transformers.rs",
        "discussion_id": "2013753608",
        "commented_code": "@@ -1,121 +1,457 @@\n-use common_enums::enums;\n-use common_utils::types::StringMinorUnit;\n+use std::collections::HashMap;\n+\n+use common_enums::{enums, CaptureMethod};\n+use common_utils::{errors::CustomResult, types::StringMajorUnit};\n use hyperswitch_domain_models::{\n-    payment_method_data::PaymentMethodData,\n     router_data::{ConnectorAuthType, RouterData},\n     router_flow_types::refunds::{Execute, RSync},\n     router_request_types::ResponseId,\n     router_response_types::{PaymentsResponseData, RefundsResponseData},\n     types::{PaymentsAuthorizeRouterData, RefundsRouterData},\n };\n use hyperswitch_interfaces::errors;\n-use masking::Secret;\n+use masking::{PeekInterface, Secret};\n use serde::{Deserialize, Serialize};\n \n-use crate::{\n-    types::{RefundsResponseRouterData, ResponseRouterData},\n-    utils::PaymentsAuthorizeRequestData,\n-};\n+use crate::types::{RefundsResponseRouterData, ResponseRouterData};\n \n-//TODO: Fill the struct with respective fields\n pub struct AmazonpayRouterData<T> {\n-    pub amount: StringMinorUnit, // The type of amount that a connector accepts, for example, String, i64, f64, etc.\n+    pub amount: StringMajorUnit,\n     pub router_data: T,\n }\n \n-impl<T> From<(StringMinorUnit, T)> for AmazonpayRouterData<T> {\n-    fn from((amount, item): (StringMinorUnit, T)) -> Self {\n-        //Todo :  use utils to convert the amount to the type of amount that a connector accepts\n+impl<T> From<(StringMajorUnit, T)> for AmazonpayRouterData<T> {\n+    fn from((amount, item): (StringMajorUnit, T)) -> Self {\n         Self {\n             amount,\n             router_data: item,\n         }\n     }\n }\n \n-//TODO: Fill the struct with respective fields\n #[derive(Default, Debug, Serialize, PartialEq)]\n-pub struct AmazonpayPaymentsRequest {\n-    amount: StringMinorUnit,\n-    card: AmazonpayCard,\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AmazonpayFinalizeRequest {\n+    charge_amount: ChargeAmount,\n+    total_order_amount: Option<TotalOrderAmount>,\n+    shipping_address: AddressDetails,\n+    payment_intent: PaymentIntent,\n }\n \n-#[derive(Default, Debug, Serialize, Eq, PartialEq)]\n-pub struct AmazonpayCard {\n-    number: cards::CardNumber,\n-    expiry_month: Secret<String>,\n-    expiry_year: Secret<String>,\n-    cvc: Secret<String>,\n-    complete: bool,\n+#[derive(Default, Debug, Clone, Serialize, Deserialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ChargeAmount {\n+    amount: StringMajorUnit,\n+    currency_code: common_enums::Currency,\n }\n \n-impl TryFrom<&AmazonpayRouterData<&PaymentsAuthorizeRouterData>> for AmazonpayPaymentsRequest {\n+#[derive(Default, Debug, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct TotalOrderAmount {\n+    amount: Option<StringMajorUnit>,\n+    currency_code: Option<common_enums::Currency>,\n+    can_handle_pending_authorization: Option<bool>,\n+    supplementary_data: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AddressDetails {\n+    name: Option<String>,\n+    address_line_1: Option<String>,\n+    address_line_2: Option<String>,\n+    address_line_3: Option<String>,\n+    city: Option<String>,\n+    state_or_region: Option<String>,\n+    postal_code: Option<String>,\n+    country_code: Option<common_enums::CountryAlpha2>,\n+    phone_number: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Serialize, PartialEq)]\n+pub enum PaymentIntent {\n+    #[default]\n+    AuthorizeWithCapture,\n+}\n+\n+fn get_amazonpay_capture_type(\n+    item: Option<CaptureMethod>,\n+) -> CustomResult<Option<PaymentIntent>, errors::ConnectorError> {\n+    match item {\n+        Some(CaptureMethod::Automatic) => Ok(Some(PaymentIntent::AuthorizeWithCapture)),\n+        Some(_) => Err(errors::ConnectorError::CaptureMethodNotSupported.into()),\n+        None => Err(errors::ConnectorError::MissingRequiredField {\n+            field_name: \"capture_method\",\n+        }\n+        .into()),\n+    }\n+}\n+\n+impl TryFrom<&AmazonpayRouterData<&PaymentsAuthorizeRouterData>> for AmazonpayFinalizeRequest {\n     type Error = error_stack::Report<errors::ConnectorError>;\n     fn try_from(\n         item: &AmazonpayRouterData<&PaymentsAuthorizeRouterData>,\n     ) -> Result<Self, Self::Error> {\n-        match item.router_data.request.payment_method_data.clone() {\n-            PaymentMethodData::Card(req_card) => {\n-                let card = AmazonpayCard {\n-                    number: req_card.card_number,\n-                    expiry_month: req_card.card_exp_month,\n-                    expiry_year: req_card.card_exp_year,\n-                    cvc: req_card.card_cvc,\n-                    complete: item.router_data.request.is_auto_capture()?,\n-                };\n-                Ok(Self {\n-                    amount: item.amount.clone(),\n-                    card,\n-                })\n+        let charge_amount = ChargeAmount {\n+            amount: item.amount.clone(),\n+            currency_code: common_enums::Currency::USD,\n+        };\n+        let shipping_address_details = item.router_data.address.get_shipping();\n+        let shipping_address = if let Some(shipping) = shipping_address_details {\n+            if let Some(address_details) = shipping.address.as_ref() {\n+                AddressDetails {\n+                    name: address_details\n+                        .get_optional_full_name()\n+                        .map(|secret_name| secret_name.peek().to_string()),\n+                    address_line_1: address_details\n+                        .line1\n+                        .clone()\n+                        .map(|l1| l1.peek().to_string()),\n+                    address_line_2: address_details\n+                        .line2\n+                        .clone()\n+                        .map(|l2| l2.peek().to_string()),\n+                    address_line_3: address_details\n+                        .line3\n+                        .clone()\n+                        .map(|l3| l3.peek().to_string()),\n+                    city: address_details.city.clone(),\n+                    state_or_region: address_details\n+                        .state\n+                        .clone()\n+                        .map(|state| state.peek().to_string()),\n+                    postal_code: address_details\n+                        .zip\n+                        .clone()\n+                        .map(|zip| zip.peek().to_string()),\n+                    country_code: address_details.country,\n+                    phone_number: shipping\n+                        .phone\n+                        .as_ref()\n+                        .and_then(|phone| phone.number.as_ref())\n+                        .map(|phone_number| phone_number.peek().to_string()),\n+                }\n+            } else {\n+                AddressDetails::default()\n             }\n-            _ => Err(errors::ConnectorError::NotImplemented(\"Payment method\".to_string()).into()),\n+        } else {\n+            AddressDetails::default()\n+        };\n+        let payment_intent = get_amazonpay_capture_type(item.router_data.request.capture_method)?\n+            .unwrap_or_default();\n+        Ok(Self {\n+            charge_amount,\n+            total_order_amount: None,\n+            shipping_address,\n+            payment_intent,\n+        })\n+    }\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct AmazonpayFinalizeResponse {\n+    checkout_session_id: String,\n+    web_checkout_details: WebCheckoutDetails,\n+    product_type: Option<String>,\n+    payment_details: Option<PaymentDetails>,\n+    cart_details: CartDetails,\n+    charge_permission_type: String,\n+    order_type: Option<String>,\n+    recurring_metadata: Option<RecurringMetadata>,\n+    payment_method_on_file_metadata: Option<String>,\n+    processor_specifications: Option<String>,\n+    merchant_details: Option<String>,\n+    merchant_metadata: Option<MerchantMetadata>,\n+    supplementary_data: Option<String>,\n+    buyer: Option<BuyerDetails>,\n+    billing_address: Option<AddressDetails>,\n+    payment_preferences: Option<String>,\n+    status_details: FinalizeStatusDetails,\n+    shipping_address: Option<AddressDetails>,\n+    platform_id: Option<String>,\n+    charge_permission_id: String,\n+    charge_id: String,\n+    constraints: Option<String>,\n+    creation_timestamp: String,\n+    expiration_timestamp: Option<String>,\n+    store_id: Option<String>,\n+    provider_metadata: Option<ProviderMetadata>,\n+    release_environment: Option<ReleaseEnvironment>,\n+    checkout_button_text: Option<String>,\n+    delivery_specifications: Option<DeliverySpecifications>,\n+    tokens: Option<String>,\n+    disbursement_details: Option<String>,\n+    channel_type: Option<String>,\n+    payment_processing_meta_data: PaymentProcessingMetaData,\n+}\n+\n+#[derive(Clone, Default, Debug, Serialize, Deserialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct WebCheckoutDetails {\n+    checkout_review_return_url: Option<String>,\n+    checkout_result_return_url: Option<String>,\n+    amazon_pay_redirect_url: Option<String>,\n+    authorize_result_return_url: Option<String>,\n+    sign_in_return_url: Option<String>,\n+    sign_in_cancel_url: Option<String>,\n+    checkout_error_url: Option<String>,\n+    sign_in_error_url: Option<String>,\n+    amazon_pay_decline_url: Option<String>,\n+    checkout_cancel_url: Option<String>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct PaymentDetails {\n+    payment_intent: String,\n+    can_handle_pending_authorization: bool,\n+    charge_amount: ChargeAmount,\n+    total_order_amount: ChargeAmount,\n+    presentment_currency: String,\n+    soft_descriptor: String,\n+    allow_overcharge: bool,\n+    extend_expiration: bool,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct CartDetails {\n+    line_items: Vec<String>,\n+    delivery_options: Vec<DeliveryOptions>,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct DeliveryOptions {\n+    id: String,\n+    price: ChargeAmount,\n+    shipping_method: ShippingMethod,\n+    is_default: bool,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ShippingMethod {\n+    shipping_method_name: String,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct RecurringMetadata {\n+    frequency: Frequency,\n+    amount: ChargeAmount,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct Frequency {\n+    unit: String,\n+    value: String,\n+}\n+\n+#[derive(Default, Debug, Deserialize, Serialize, PartialEq)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct BuyerDetails {\n+    buyer_id: String,\n+    name: String,\n+    email: String,\n+    phone_number: String,\n+    prime_membership_types: Vec<String>,\n+}",
        "comment_created_at": "2025-03-26T09:48:17+00:00",
        "comment_author": "AkshayaFoiger",
        "comment_body": "Make PII data a secret and for email use pii::Email type",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2260142922",
    "pr_number": 8846,
    "pr_file": "crates/router/src/types/storage/revenue_recovery_redis_operation.rs",
    "created_at": "2025-08-07T12:17:01+00:00",
    "commented_code": "+use std::collections::HashMap;\n+\n+use common_enums::enums::CardNetwork;\n+use common_utils::{date_time, errors::CustomResult, id_type};\n+use error_stack::ResultExt;\n+use redis_interface::{DelReply, SetnxReply};\n+use router_env::{instrument, tracing};\n+use serde::{Deserialize, Serialize};\n+use time::{Date, Duration, OffsetDateTime};\n+\n+use crate::{db::errors, types::storage::revenue_recovery::RetryLimitsConfig, SessionState};\n+\n+// Constants for retry window management\n+const RETRY_WINDOW_DAYS: i32 = 30;\n+const INITIAL_RETRY_COUNT: i32 = 0;\n+\n+/// Payment processor token details including card information\n+#[cfg(feature = \"v2\")]\n+#[derive(Debug, Clone, Serialize, Deserialize, Eq, PartialEq)]\n+pub struct PaymentProcessorTokenDetails {\n+    pub payment_processor_token: String,\n+    pub expiry_month: Option<String>,\n+    pub expiry_year: Option<String>,\n+    pub card_issuer: Option<String>,\n+    pub last_four_digits: Option<String>,\n+    pub card_network: Option<CardNetwork>,\n+}",
    "repo_full_name": "juspay/hyperswitch",
    "discussion_comments": [
      {
        "comment_id": "2260142922",
        "repo_full_name": "juspay/hyperswitch",
        "pr_number": 8846,
        "pr_file": "crates/router/src/types/storage/revenue_recovery_redis_operation.rs",
        "discussion_id": "2260142922",
        "commented_code": "@@ -0,0 +1,522 @@\n+use std::collections::HashMap;\n+\n+use common_enums::enums::CardNetwork;\n+use common_utils::{date_time, errors::CustomResult, id_type};\n+use error_stack::ResultExt;\n+use redis_interface::{DelReply, SetnxReply};\n+use router_env::{instrument, tracing};\n+use serde::{Deserialize, Serialize};\n+use time::{Date, Duration, OffsetDateTime};\n+\n+use crate::{db::errors, types::storage::revenue_recovery::RetryLimitsConfig, SessionState};\n+\n+// Constants for retry window management\n+const RETRY_WINDOW_DAYS: i32 = 30;\n+const INITIAL_RETRY_COUNT: i32 = 0;\n+\n+/// Payment processor token details including card information\n+#[cfg(feature = \"v2\")]\n+#[derive(Debug, Clone, Serialize, Deserialize, Eq, PartialEq)]\n+pub struct PaymentProcessorTokenDetails {\n+    pub payment_processor_token: String,\n+    pub expiry_month: Option<String>,\n+    pub expiry_year: Option<String>,\n+    pub card_issuer: Option<String>,\n+    pub last_four_digits: Option<String>,\n+    pub card_network: Option<CardNetwork>,\n+}",
        "comment_created_at": "2025-08-07T12:17:01+00:00",
        "comment_author": "srujanchikke",
        "comment_body": "Can you make them Secret<String> ?",
        "pr_file_module": null
      }
    ]
  }
]