[
  {
    "discussion_id": "2217889007",
    "pr_number": 11117,
    "pr_file": "src/helpers/sync/SyncTimeline.cpp",
    "created_at": "2025-07-20T17:04:16+00:00",
    "commented_code": "#include <sys/eventfd.h>\n using namespace Hyprutils::OS;\n \n+static bool checkDrmSyncobjTimelineSupport(int drmFD) {\n+    uint64_t cap = 0;\n+    int ret = drmGetCap(drmFD, DRM_CAP_SYNCOBJ_TIMELINE, &cap);\n+    return (ret == 0 && cap != 0);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2217889007",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 11117,
        "pr_file": "src/helpers/sync/SyncTimeline.cpp",
        "discussion_id": "2217889007",
        "commented_code": "@@ -6,7 +6,16 @@\n #include <sys/eventfd.h>\n using namespace Hyprutils::OS;\n \n+static bool checkDrmSyncobjTimelineSupport(int drmFD) {\n+    uint64_t cap = 0;\n+    int ret = drmGetCap(drmFD, DRM_CAP_SYNCOBJ_TIMELINE, &cap);\n+    return (ret == 0 && cap != 0);",
        "comment_created_at": "2025-07-20T17:04:16+00:00",
        "comment_author": "vaxerski",
        "comment_body": "this should probably be static. It won't change, and I don't know how expensive drmGetCap is. Furthermore, you're duplicating this here and in protocolmanager. Maybe add a bool to CCompositor that is set in `::initServer`?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2047175943",
    "pr_number": 10094,
    "pr_file": "src/desktop/Subsurface.cpp",
    "created_at": "2025-04-16T15:20:41+00:00",
    "commented_code": "// TODO: should this remove children? Currently it won't, only on .destroy\n }\n \n+void CSubsurface::damageEntireParent() {\n+    CBox box;\n+    if (m_pPopupParent && !m_pPopupParent->inert() && m_pPopupParent->m_pWLSurface)\n+        box = m_pPopupParent->m_pWLSurface->getSurfaceBoxGlobal().value_or(CBox{});\n+    else if (m_pWindowParent)\n+        box = m_pWindowParent->getWindowMainSurfaceBox();\n+\n+    g_pHyprRenderer->damageBox(box);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2047175943",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10094,
        "pr_file": "src/desktop/Subsurface.cpp",
        "discussion_id": "2047175943",
        "commented_code": "@@ -187,6 +182,16 @@ void CSubsurface::onUnmap() {\n     // TODO: should this remove children? Currently it won't, only on .destroy\n }\n \n+void CSubsurface::damageEntireParent() {\n+    CBox box;\n+    if (m_pPopupParent && !m_pPopupParent->inert() && m_pPopupParent->m_pWLSurface)\n+        box = m_pPopupParent->m_pWLSurface->getSurfaceBoxGlobal().value_or(CBox{});\n+    else if (m_pWindowParent)\n+        box = m_pWindowParent->getWindowMainSurfaceBox();\n+\n+    g_pHyprRenderer->damageBox(box);",
        "comment_created_at": "2025-04-16T15:20:41+00:00",
        "comment_author": "vaxerski",
        "comment_body": "can we skip damageBox if box.empty",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1956333620",
    "pr_number": 9368,
    "pr_file": "src/Compositor.cpp",
    "created_at": "2025-02-14T15:32:59+00:00",
    "commented_code": "continue;\n         }\n \n-        WORKSPACEID id     = rule.workspaceId;\n-        std::string wsname = rule.workspaceName;\n-        if (id == WORKSPACE_INVALID) {\n-            const auto R = getWorkspaceIDNameFromString(rule.workspaceString);\n-            id           = R.id;\n-            wsname       = R.name;\n+        PHLWORKSPACE PWORKSPACE = nullptr;\n+        if (pWorkspace) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1956333620",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/Compositor.cpp",
        "discussion_id": "1956333620",
        "commented_code": "@@ -3039,31 +3040,45 @@ void CCompositor::ensurePersistentWorkspacesPresent(const std::vector<SWorkspace\n             continue;\n         }\n \n-        WORKSPACEID id     = rule.workspaceId;\n-        std::string wsname = rule.workspaceName;\n-        if (id == WORKSPACE_INVALID) {\n-            const auto R = getWorkspaceIDNameFromString(rule.workspaceString);\n-            id           = R.id;\n-            wsname       = R.name;\n+        PHLWORKSPACE PWORKSPACE = nullptr;\n+        if (pWorkspace) {",
        "comment_created_at": "2025-02-14T15:32:59+00:00",
        "comment_author": "vaxerski",
        "comment_body": "this check can be moved above PMONITOR finding a monitor for better optimization",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1648334142",
    "pr_number": 6572,
    "pr_file": "src/debug/HyprCtl.cpp",
    "created_at": "2024-06-21T02:20:26+00:00",
    "commented_code": "std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1648334142",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6572,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "1648334142",
        "commented_code": "@@ -1753,7 +1755,6 @@ void runWritingDebugLogThread(const int conn) {\n     std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
        "comment_created_at": "2024-06-21T02:20:26+00:00",
        "comment_author": "Truenya",
        "comment_body": "this change creates unnecessary 100% CPU load when no logs and thread is activated by os scheduler\r\n\r\nif u decided to make configurable sleep, better to do it configurable in both hyprctl and core. and leave the default settings as they are, please",
        "pr_file_module": null
      },
      {
        "comment_id": "1648345824",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6572,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "1648334142",
        "commented_code": "@@ -1753,7 +1755,6 @@ void runWritingDebugLogThread(const int conn) {\n     std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
        "comment_created_at": "2024-06-21T02:41:10+00:00",
        "comment_author": "phonetic112",
        "comment_body": "a 1ms sleep should be good enough here, right? I don't see a point in making both of them configurable",
        "pr_file_module": null
      },
      {
        "comment_id": "1648351433",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6572,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "1648334142",
        "commented_code": "@@ -1753,7 +1755,6 @@ void runWritingDebugLogThread(const int conn) {\n     std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
        "comment_created_at": "2024-06-21T02:52:45+00:00",
        "comment_author": "Truenya",
        "comment_body": "not exactly. quite a lot of users, including me, using linux to reanimate old machines with low capabilities\r\n\r\ni think here we can sleep for similar to code bellow time.\r\n\r\n16.(6) ms is nice speep time (60 checks in second)\r\n\r\nbut it's better to make it customizable imho",
        "pr_file_module": null
      },
      {
        "comment_id": "1648354690",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6572,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "1648334142",
        "commented_code": "@@ -1753,7 +1755,6 @@ void runWritingDebugLogThread(const int conn) {\n     std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
        "comment_created_at": "2024-06-21T02:57:07+00:00",
        "comment_author": "Truenya",
        "comment_body": "in this loop we block 2 mutexes, which slows down the entire system (logs can be anywhere)\r\n\r\nTherefore, ideally, it is necessary to adhere to the idea that the default cycle repetition periods should be sufficiently large.",
        "pr_file_module": null
      },
      {
        "comment_id": "1648371447",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6572,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "1648334142",
        "commented_code": "@@ -1753,7 +1755,6 @@ void runWritingDebugLogThread(const int conn) {\n     std::thread([conn]() {\n         while (Debug::RollingLogFollow::Get().IsRunning()) {\n             if (Debug::RollingLogFollow::Get().isEmpty(conn)) {\n-                std::this_thread::sleep_for(1000ms);",
        "comment_created_at": "2024-06-21T03:31:03+00:00",
        "comment_author": "phonetic112",
        "comment_body": "how about now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1733323001",
    "pr_number": 7546,
    "pr_file": "src/xwayland/XWM.cpp",
    "created_at": "2024-08-27T18:12:53+00:00",
    "commented_code": "return false;\n }\n \n+std::string CXWM::getAtomName(uint32_t atom) {\n+    // Get the name of the atom\n+    auto const atom_name_cookie = xcb_get_atom_name(connection, atom);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1733323001",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7546,
        "pr_file": "src/xwayland/XWM.cpp",
        "discussion_id": "1733323001",
        "commented_code": "@@ -152,18 +152,25 @@ static bool lookupParentExists(SP<CXWaylandSurface> XSURF, SP<CXWaylandSurface>\n     return false;\n }\n \n+std::string CXWM::getAtomName(uint32_t atom) {\n+    // Get the name of the atom\n+    auto const atom_name_cookie = xcb_get_atom_name(connection, atom);",
        "comment_created_at": "2024-08-27T18:12:53+00:00",
        "comment_author": "vaxerski",
        "comment_body": "we should try the cached ones first instead of bothering the X server all the time",
        "pr_file_module": null
      },
      {
        "comment_id": "1739988638",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7546,
        "pr_file": "src/xwayland/XWM.cpp",
        "discussion_id": "1733323001",
        "commented_code": "@@ -152,18 +152,25 @@ static bool lookupParentExists(SP<CXWaylandSurface> XSURF, SP<CXWaylandSurface>\n     return false;\n }\n \n+std::string CXWM::getAtomName(uint32_t atom) {\n+    // Get the name of the atom\n+    auto const atom_name_cookie = xcb_get_atom_name(connection, atom);",
        "comment_created_at": "2024-09-01T06:52:31+00:00",
        "comment_author": "gulafaran",
        "comment_body": "changed, checking cached first, xcb after.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1534885546",
    "pr_number": 5199,
    "pr_file": "src/managers/input/Tablets.cpp",
    "created_at": "2024-03-22T00:18:51+00:00",
    "commented_code": "const auto EVENT = (wlr_tablet_tool_axis_event*)data;\n             const auto PTAB  = (STablet*)owner;\n \n+            // Get tablet active area in mm and calculate bounds\n+            const auto ACTIVE_AREA_SIZE = g_pConfigManager->getDeviceVec(PTAB->name, \"active_area_size\", \"input:tablet:active_area_size\");",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1534885546",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5199,
        "pr_file": "src/managers/input/Tablets.cpp",
        "discussion_id": "1534885546",
        "commented_code": "@@ -36,6 +36,12 @@ void CInputManager::newTabletTool(wlr_input_device* pDevice) {\n             const auto EVENT = (wlr_tablet_tool_axis_event*)data;\n             const auto PTAB  = (STablet*)owner;\n \n+            // Get tablet active area in mm and calculate bounds\n+            const auto ACTIVE_AREA_SIZE = g_pConfigManager->getDeviceVec(PTAB->name, \"active_area_size\", \"input:tablet:active_area_size\");",
        "comment_created_at": "2024-03-22T00:18:51+00:00",
        "comment_author": "vaxerski",
        "comment_body": "Extreme performance kill. Move the variable setting to `setTabletConfigs` and store a copy inside STablet itself.\r\n\r\nUsing `getDevice*` outside `set*Config` is banned",
        "pr_file_module": null
      },
      {
        "comment_id": "1534942532",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5199,
        "pr_file": "src/managers/input/Tablets.cpp",
        "discussion_id": "1534885546",
        "commented_code": "@@ -36,6 +36,12 @@ void CInputManager::newTabletTool(wlr_input_device* pDevice) {\n             const auto EVENT = (wlr_tablet_tool_axis_event*)data;\n             const auto PTAB  = (STablet*)owner;\n \n+            // Get tablet active area in mm and calculate bounds\n+            const auto ACTIVE_AREA_SIZE = g_pConfigManager->getDeviceVec(PTAB->name, \"active_area_size\", \"input:tablet:active_area_size\");",
        "comment_created_at": "2024-03-22T01:54:30+00:00",
        "comment_author": "khalid151",
        "comment_body": "Now that you mention it, I felt I was doing something off. Thanks for the heads-up, that makes much more sense.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1530623357",
    "pr_number": 5164,
    "pr_file": "src/layout/IHyprLayout.cpp",
    "created_at": "2024-03-19T15:33:02+00:00",
    "commented_code": "canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1530623357",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5164,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1530623357",
        "commented_code": "@@ -355,7 +355,7 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n         canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
        "comment_created_at": "2024-03-19T15:33:02+00:00",
        "comment_author": "vaxerski",
        "comment_body": "actually, no need to update if tickdelta is less than 1,1, so can you leave that in?",
        "pr_file_module": null
      },
      {
        "comment_id": "1530644447",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5164,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1530623357",
        "commented_code": "@@ -355,7 +355,7 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n         canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
        "comment_created_at": "2024-03-19T15:44:18+00:00",
        "comment_author": "phonetic112",
        "comment_body": "wdym?",
        "pr_file_module": null
      },
      {
        "comment_id": "1530655282",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5164,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1530623357",
        "commented_code": "@@ -355,7 +355,7 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n         canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
        "comment_created_at": "2024-03-19T15:50:53+00:00",
        "comment_author": "vaxerski",
        "comment_body": "if we are moving, rn, even if delta.x < 1 and delta.y < 1 we still process it, which is redundant",
        "pr_file_module": null
      },
      {
        "comment_id": "1530656531",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5164,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1530623357",
        "commented_code": "@@ -355,7 +355,7 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n         canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
        "comment_created_at": "2024-03-19T15:51:31+00:00",
        "comment_author": "vaxerski",
        "comment_body": "tldr:\r\n```cpp\r\nif (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)\r\n```\r\ninto \r\n```cpp\r\nif ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate && g_pInputManager->dragMode != MBIND_MOVE))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1530663631",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5164,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1530623357",
        "commented_code": "@@ -355,7 +355,7 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n         canSkipUpdate = std::clamp(MSMONITOR - TIMERDELTA, 0.0, MSMONITOR) > totalMs * 1.0 / m_iMouseMoveEventCount;\n     }\n \n-    if ((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate))\n+    if (((abs(TICKDELTA.x) < 1.f && abs(TICKDELTA.y) < 1.f) || (TIMERDELTA < MSMONITOR && canSkipUpdate)) && g_pInputManager->dragMode != MBIND_MOVE)",
        "comment_created_at": "2024-03-19T15:55:40+00:00",
        "comment_author": "phonetic112",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  }
]