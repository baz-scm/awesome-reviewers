[
  {
    "discussion_id": "1921137568",
    "pr_number": 9077,
    "pr_file": "src/xwayland/XWayland.hpp",
    "created_at": "2025-01-18T19:25:12+00:00",
    "commented_code": "class CXWayland {\n   public:\n-    CXWayland(const bool enabled);\n+    CXWayland(const bool wants_enabled);\n \n #ifndef NO_XWAYLAND\n     std::unique_ptr<CXWaylandServer> pServer;\n     std::unique_ptr<CXWM>            pWM;\n #endif\n+    bool enabled();\n \n     void setCursor(unsigned char* pixData, uint32_t stride, const Vector2D& size, const Vector2D& hotspot);\n \n     struct {\n         CSignal newSurface;\n     } events;\n+\n+  private:\n+    bool m_benabled;",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1921137568",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9077,
        "pr_file": "src/xwayland/XWayland.hpp",
        "discussion_id": "1921137568",
        "commented_code": "@@ -17,18 +17,22 @@ class CXWM;\n \n class CXWayland {\n   public:\n-    CXWayland(const bool enabled);\n+    CXWayland(const bool wants_enabled);\n \n #ifndef NO_XWAYLAND\n     std::unique_ptr<CXWaylandServer> pServer;\n     std::unique_ptr<CXWM>            pWM;\n #endif\n+    bool enabled();\n \n     void setCursor(unsigned char* pixData, uint32_t stride, const Vector2D& size, const Vector2D& hotspot);\n \n     struct {\n         CSignal newSurface;\n     } events;\n+\n+  private:\n+    bool m_benabled;",
        "comment_created_at": "2025-01-18T19:25:12+00:00",
        "comment_author": "vaxerski",
        "comment_body": "`m_enabled`. We are moving to drop hungarian see #9061\r\n\r\nalso please initialize it",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1921137619",
    "pr_number": 9077,
    "pr_file": "src/xwayland/XWayland.hpp",
    "created_at": "2025-01-18T19:25:39+00:00",
    "commented_code": "class CXWayland {\n   public:\n-    CXWayland(const bool enabled);\n+    CXWayland(const bool wants_enabled);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1921137619",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9077,
        "pr_file": "src/xwayland/XWayland.hpp",
        "discussion_id": "1921137619",
        "commented_code": "@@ -17,18 +17,22 @@ class CXWM;\n \n class CXWayland {\n   public:\n-    CXWayland(const bool enabled);\n+    CXWayland(const bool wants_enabled);",
        "comment_created_at": "2025-01-18T19:25:39+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no snake. `wantsEnabled`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1767709107",
    "pr_number": 7856,
    "pr_file": "src/xwayland/XWM.hpp",
    "created_at": "2024-09-19T23:44:12+00:00",
    "commented_code": "std::unique_ptr<SXTransfer> transfer;\n };\n \n+class XCBConnection {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1767709107",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7856,
        "pr_file": "src/xwayland/XWM.hpp",
        "discussion_id": "1767709107",
        "commented_code": "@@ -58,6 +57,52 @@ struct SXSelection {\n     std::unique_ptr<SXTransfer> transfer;\n };\n \n+class XCBConnection {",
        "comment_created_at": "2024-09-19T23:44:12+00:00",
        "comment_author": "vaxerski",
        "comment_body": "naming convention: classes have a `C` prefix, so `CXCBConnection`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573723543",
    "pr_number": 5670,
    "pr_file": "src/helpers/Monitor.hpp",
    "created_at": "2024-04-21T11:43:18+00:00",
    "commented_code": "#include \"Region.hpp\"\n #include <optional>\n \n+// Enum for the different types of auto directions, e.g. auto-left, auto-up.\n+enum class AutoDirs {\n+    auto_up,",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1573723543",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5670,
        "pr_file": "src/helpers/Monitor.hpp",
        "discussion_id": "1573723543",
        "commented_code": "@@ -11,7 +11,16 @@\n #include \"Region.hpp\"\n #include <optional>\n \n+// Enum for the different types of auto directions, e.g. auto-left, auto-up.\n+enum class AutoDirs {\n+    auto_up,",
        "comment_created_at": "2024-04-21T11:43:18+00:00",
        "comment_author": "vaxerski",
        "comment_body": "enums in CAPS and with their short name in the beginning, e.g.:\r\n`DIR_AUTO_UP`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573723818",
    "pr_number": 5670,
    "pr_file": "src/helpers/Monitor.hpp",
    "created_at": "2024-04-21T11:44:28+00:00",
    "commented_code": "#include \"Region.hpp\"\n #include <optional>\n \n+// Enum for the different types of auto directions, e.g. auto-left, auto-up.\n+enum class AutoDirs {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1573723818",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5670,
        "pr_file": "src/helpers/Monitor.hpp",
        "discussion_id": "1573723818",
        "commented_code": "@@ -11,7 +11,16 @@\n #include \"Region.hpp\"\n #include <optional>\n \n+// Enum for the different types of auto directions, e.g. auto-left, auto-up.\n+enum class AutoDirs {",
        "comment_created_at": "2024-04-21T11:44:28+00:00",
        "comment_author": "vaxerski",
        "comment_body": "enums prefix `e`: `eAutoDirs`",
        "pr_file_module": null
      },
      {
        "comment_id": "1573942230",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5670,
        "pr_file": "src/helpers/Monitor.hpp",
        "discussion_id": "1573723818",
        "commented_code": "@@ -11,7 +11,16 @@\n #include \"Region.hpp\"\n #include <optional>\n \n+// Enum for the different types of auto directions, e.g. auto-left, auto-up.\n+enum class AutoDirs {",
        "comment_created_at": "2024-04-21T22:35:30+00:00",
        "comment_author": "The-Briel-Deal",
        "comment_body": "I see all of the other classes and structs are prefixed with a capital letter. e.g. SMonitorRule. Is that prefered over lower case? I'll stick with what you said here for now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1564664542",
    "pr_number": 5582,
    "pr_file": "src/helpers/SdDaemon.hpp",
    "created_at": "2024-04-14T12:39:15+00:00",
    "commented_code": "+#pragma once\n+\n+int sd_booted(void);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1564664542",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5582,
        "pr_file": "src/helpers/SdDaemon.hpp",
        "discussion_id": "1564664542",
        "commented_code": "@@ -0,0 +1,4 @@\n+#pragma once\n+\n+int sd_booted(void);",
        "comment_created_at": "2024-04-14T12:39:15+00:00",
        "comment_author": "vaxerski",
        "comment_body": "if we are rewriting this, some style things to consider.\r\n\r\nFirstly, this could be wrapped in a namespace e.g. `namespace Systemd`\r\n\r\nSecondly, no_snake, we use camelCase",
        "pr_file_module": null
      }
    ]
  }
]