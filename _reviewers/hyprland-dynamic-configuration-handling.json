[
  {
    "discussion_id": "2145025161",
    "pr_number": 10702,
    "pr_file": "src/managers/input/InputManager.cpp",
    "created_at": "2025-06-13T12:49:10+00:00",
    "commented_code": "else\n                 libinput_device_config_tap_set_drag_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_ENABLED);\n \n-            if (g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\") == 0)\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_DISABLED);\n-            else\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);\n+            const auto TAP_DRAG_LOCK = static_cast<libinput_config_drag_lock_state>(g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\"));\n+            libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, TAP_DRAG_LOCK);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2145025161",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10702,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "2145025161",
        "commented_code": "@@ -1233,10 +1233,8 @@ void CInputManager::setPointerConfigs() {\n             else\n                 libinput_device_config_tap_set_drag_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_ENABLED);\n \n-            if (g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\") == 0)\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_DISABLED);\n-            else\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);\n+            const auto TAP_DRAG_LOCK = static_cast<libinput_config_drag_lock_state>(g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\"));\n+            libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, TAP_DRAG_LOCK);",
        "comment_created_at": "2025-06-13T12:49:10+00:00",
        "comment_author": "vaxerski",
        "comment_body": "does libinput verify the passed val? I'd clamp it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2145045720",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10702,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "2145025161",
        "commented_code": "@@ -1233,10 +1233,8 @@ void CInputManager::setPointerConfigs() {\n             else\n                 libinput_device_config_tap_set_drag_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_ENABLED);\n \n-            if (g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\") == 0)\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_DISABLED);\n-            else\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);\n+            const auto TAP_DRAG_LOCK = static_cast<libinput_config_drag_lock_state>(g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\"));\n+            libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, TAP_DRAG_LOCK);",
        "comment_created_at": "2025-06-13T13:00:59+00:00",
        "comment_author": "m4rch3n1ng",
        "comment_body": "it does, if you give it an invalid parameter it returns a LIBINPUT_CONFIG_STATUS_INVALID (which hyprland ignores), see:\r\n\r\nhttps://gitlab.freedesktop.org/libinput/libinput/-/blob/ef15d7ed08b7b7af082103f8c2acc2224da59488/src/libinput.c?page=5#L4104\r\n\r\ni can change it to only set the option if it is valid, but i wanted to point out that i just copied the code from like 5 lines under it: https://github.com/hyprwm/Hyprland/blob/d14f81e6ac3debd57f8e3e70ead5bb52606a8c90/src/managers/input/InputManager.cpp#L1256-L1257",
        "pr_file_module": null
      },
      {
        "comment_id": "2145074671",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10702,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "2145025161",
        "commented_code": "@@ -1233,10 +1233,8 @@ void CInputManager::setPointerConfigs() {\n             else\n                 libinput_device_config_tap_set_drag_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_ENABLED);\n \n-            if (g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\") == 0)\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_DISABLED);\n-            else\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);\n+            const auto TAP_DRAG_LOCK = static_cast<libinput_config_drag_lock_state>(g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\"));\n+            libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, TAP_DRAG_LOCK);",
        "comment_created_at": "2025-06-13T13:16:18+00:00",
        "comment_author": "m4rch3n1ng",
        "comment_body": "changed it so i only set the config if the value is >= 0 and <= 2, is that okay?",
        "pr_file_module": null
      },
      {
        "comment_id": "2147509151",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10702,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "2145025161",
        "commented_code": "@@ -1233,10 +1233,8 @@ void CInputManager::setPointerConfigs() {\n             else\n                 libinput_device_config_tap_set_drag_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_ENABLED);\n \n-            if (g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\") == 0)\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_DISABLED);\n-            else\n-                libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, LIBINPUT_CONFIG_DRAG_LOCK_ENABLED);\n+            const auto TAP_DRAG_LOCK = static_cast<libinput_config_drag_lock_state>(g_pConfigManager->getDeviceInt(devname, \"drag_lock\", \"input:touchpad:drag_lock\"));\n+            libinput_device_config_tap_set_drag_lock_enabled(LIBINPUTDEV, TAP_DRAG_LOCK);",
        "comment_created_at": "2025-06-15T09:44:19+00:00",
        "comment_author": "vaxerski",
        "comment_body": "yep",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2029995142",
    "pr_number": 9761,
    "pr_file": "src/debug/HyprCtl.cpp",
    "created_at": "2025-04-05T23:45:26+00:00",
    "commented_code": "if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_bWantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        if (COMMAND.contains('[') && COMMAND.contains(']')) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2029995142",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9761,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "2029995142",
        "commented_code": "@@ -1087,6 +1087,19 @@ static std::string dispatchKeyword(eHyprCtlOutputFormat format, std::string in)\n     if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_bWantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        if (COMMAND.contains('[') && COMMAND.contains(']')) {",
        "comment_created_at": "2025-04-05T23:45:26+00:00",
        "comment_author": "vaxerski",
        "comment_body": "why are we handling this? This is handled by hyprlang, no?!",
        "pr_file_module": null
      },
      {
        "comment_id": "2029997758",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9761,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "2029995142",
        "commented_code": "@@ -1087,6 +1087,19 @@ static std::string dispatchKeyword(eHyprCtlOutputFormat format, std::string in)\n     if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_bWantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        if (COMMAND.contains('[') && COMMAND.contains(']')) {",
        "comment_created_at": "2025-04-06T00:03:57+00:00",
        "comment_author": "UjinT34",
        "comment_body": "Special categories are parsed without any handlers attached. Need a way to trigger a handler after the parsing for a given output.",
        "pr_file_module": null
      },
      {
        "comment_id": "2030188894",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9761,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "2029995142",
        "commented_code": "@@ -1087,6 +1087,19 @@ static std::string dispatchKeyword(eHyprCtlOutputFormat format, std::string in)\n     if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_bWantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        if (COMMAND.contains('[') && COMMAND.contains(']')) {",
        "comment_created_at": "2025-04-06T15:49:46+00:00",
        "comment_author": "vaxerski",
        "comment_body": "I think it's just because this MR has a weird approach. Why not use the approach like for device configs? After a dyncall, or after parsing, recheck monitorv2 stuff. If anything changed, update and reload monitor mode",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2121774178",
    "pr_number": 9761,
    "pr_file": "src/debug/HyprCtl.cpp",
    "created_at": "2025-06-02T17:33:43+00:00",
    "commented_code": "if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_wantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        // Updates configs for every monitorv2 rule\n+        g_pConfigManager->handleMonitorv2();\n+        g_pConfigManager->m_wantsMonitorReload = true;",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2121774178",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9761,
        "pr_file": "src/debug/HyprCtl.cpp",
        "discussion_id": "2121774178",
        "commented_code": "@@ -1109,6 +1109,23 @@ static std::string dispatchKeyword(eHyprCtlOutputFormat format, std::string in)\n     if (COMMAND == \"monitor\" || COMMAND == \"source\")\n         g_pConfigManager->m_wantsMonitorReload = true; // for monitor keywords\n \n+    if (COMMAND.contains(\"monitorv2\")) {\n+        // Updates configs for every monitorv2 rule\n+        g_pConfigManager->handleMonitorv2();\n+        g_pConfigManager->m_wantsMonitorReload = true;",
        "comment_created_at": "2025-06-02T17:33:43+00:00",
        "comment_author": "vaxerski",
        "comment_body": "don't do this. Instead, do `handleMonitorV2` on reload in the reload func. Here, just do:\r\n```cpp\r\ng_pEventLoopManager->doLater([this] {\r\ng_pConfigManager->m_wantsMonitorReload = true;\r\n});\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1581975347",
    "pr_number": 5778,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-04-27T23:59:11+00:00",
    "commented_code": "if (Debug::disableStdout && isFirstLaunch)\n         Debug::log(LOG, \"Disabling stdout logs! Check the log for further logs.\");\n \n+    Debug::coloredLogs = std::any_cast<Hyprlang::INT>(m_pConfig->getConfigValue(\"debug:colored_stdout_logs\"));",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1581975347",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5778,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1581975347",
        "commented_code": "@@ -818,6 +819,8 @@ void CConfigManager::postConfigReload(const Hyprlang::CParseResult& result) {\n     if (Debug::disableStdout && isFirstLaunch)\n         Debug::log(LOG, \"Disabling stdout logs! Check the log for further logs.\");\n \n+    Debug::coloredLogs = std::any_cast<Hyprlang::INT>(m_pConfig->getConfigValue(\"debug:colored_stdout_logs\"));",
        "comment_created_at": "2024-04-27T23:59:11+00:00",
        "comment_author": "vaxerski",
        "comment_body": "this will make it unchangeable dynamically. Why not do the same as with `debug:disable_logs`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1581975997",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5778,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1581975347",
        "commented_code": "@@ -818,6 +819,8 @@ void CConfigManager::postConfigReload(const Hyprlang::CParseResult& result) {\n     if (Debug::disableStdout && isFirstLaunch)\n         Debug::log(LOG, \"Disabling stdout logs! Check the log for further logs.\");\n \n+    Debug::coloredLogs = std::any_cast<Hyprlang::INT>(m_pConfig->getConfigValue(\"debug:colored_stdout_logs\"));",
        "comment_created_at": "2024-04-28T00:07:08+00:00",
        "comment_author": "thejch",
        "comment_body": "i think its the opposite. this is on config reload so it is changeable dynamically. if i put it next to disable_logs it only gets run once and that will be unchangeable",
        "pr_file_module": null
      },
      {
        "comment_id": "1581976051",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5778,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1581975347",
        "commented_code": "@@ -818,6 +819,8 @@ void CConfigManager::postConfigReload(const Hyprlang::CParseResult& result) {\n     if (Debug::disableStdout && isFirstLaunch)\n         Debug::log(LOG, \"Disabling stdout logs! Check the log for further logs.\");\n \n+    Debug::coloredLogs = std::any_cast<Hyprlang::INT>(m_pConfig->getConfigValue(\"debug:colored_stdout_logs\"));",
        "comment_created_at": "2024-04-28T00:08:02+00:00",
        "comment_author": "vaxerski",
        "comment_body": "dynamically means with hyprctl.\r\n\r\n`disable_logs` is a static pointer, not a value copy.",
        "pr_file_module": null
      },
      {
        "comment_id": "1582076498",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5778,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1581975347",
        "commented_code": "@@ -818,6 +819,8 @@ void CConfigManager::postConfigReload(const Hyprlang::CParseResult& result) {\n     if (Debug::disableStdout && isFirstLaunch)\n         Debug::log(LOG, \"Disabling stdout logs! Check the log for further logs.\");\n \n+    Debug::coloredLogs = std::any_cast<Hyprlang::INT>(m_pConfig->getConfigValue(\"debug:colored_stdout_logs\"));",
        "comment_created_at": "2024-04-28T10:05:31+00:00",
        "comment_author": "thejch",
        "comment_body": "changed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573119828",
    "pr_number": 5659,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-04-20T02:51:17+00:00",
    "commented_code": "PANIM->second.overridden = true;\n     PANIM->second.pValues    = &PANIM->second;\n \n-    // on/off\n-    PANIM->second.internalEnabled = ARGS[1] == \"1\";\n-\n-    if (ARGS[1] != \"0\" && ARGS[1] != \"1\")\n+    // If user specifies on/off as \"on\", \"true\", or \"1\" then the animation is enabled.\n+    // If user specifies on/off as \"off\", \"false\", or \"0\", then the animation is disabled.\n+    // Otherwise, we will let the user know that they specified an invalid on/off state.\n+    if (ARGS[1] == \"on\" || ARGS[1] == \"true\" || ARGS[1] == \"1\")",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1573119828",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5659,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1573119828",
        "commented_code": "@@ -1780,10 +1780,14 @@ std::optional<std::string> CConfigManager::handleAnimation(const std::string& co\n     PANIM->second.overridden = true;\n     PANIM->second.pValues    = &PANIM->second;\n \n-    // on/off\n-    PANIM->second.internalEnabled = ARGS[1] == \"1\";\n-\n-    if (ARGS[1] != \"0\" && ARGS[1] != \"1\")\n+    // If user specifies on/off as \"on\", \"true\", or \"1\" then the animation is enabled.\n+    // If user specifies on/off as \"off\", \"false\", or \"0\", then the animation is disabled.\n+    // Otherwise, we will let the user know that they specified an invalid on/off state.\n+    if (ARGS[1] == \"on\" || ARGS[1] == \"true\" || ARGS[1] == \"1\")",
        "comment_created_at": "2024-04-20T02:51:17+00:00",
        "comment_author": "vaxerski",
        "comment_body": "you can use `configStringToInt`, it handles all of these cases and more.\r\n\r\n`PANIM->second.internalEnabled = configStringToInt(ARGS[1]);`",
        "pr_file_module": null
      },
      {
        "comment_id": "1573125110",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5659,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1573119828",
        "commented_code": "@@ -1780,10 +1780,14 @@ std::optional<std::string> CConfigManager::handleAnimation(const std::string& co\n     PANIM->second.overridden = true;\n     PANIM->second.pValues    = &PANIM->second;\n \n-    // on/off\n-    PANIM->second.internalEnabled = ARGS[1] == \"1\";\n-\n-    if (ARGS[1] != \"0\" && ARGS[1] != \"1\")\n+    // If user specifies on/off as \"on\", \"true\", or \"1\" then the animation is enabled.\n+    // If user specifies on/off as \"off\", \"false\", or \"0\", then the animation is disabled.\n+    // Otherwise, we will let the user know that they specified an invalid on/off state.\n+    if (ARGS[1] == \"on\" || ARGS[1] == \"true\" || ARGS[1] == \"1\")",
        "comment_created_at": "2024-04-20T03:07:50+00:00",
        "comment_author": "The-Briel-Deal",
        "comment_body": "Ty! Implementing this now!",
        "pr_file_module": null
      },
      {
        "comment_id": "1573133713",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5659,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1573119828",
        "commented_code": "@@ -1780,10 +1780,14 @@ std::optional<std::string> CConfigManager::handleAnimation(const std::string& co\n     PANIM->second.overridden = true;\n     PANIM->second.pValues    = &PANIM->second;\n \n-    // on/off\n-    PANIM->second.internalEnabled = ARGS[1] == \"1\";\n-\n-    if (ARGS[1] != \"0\" && ARGS[1] != \"1\")\n+    // If user specifies on/off as \"on\", \"true\", or \"1\" then the animation is enabled.\n+    // If user specifies on/off as \"off\", \"false\", or \"0\", then the animation is disabled.\n+    // Otherwise, we will let the user know that they specified an invalid on/off state.\n+    if (ARGS[1] == \"on\" || ARGS[1] == \"true\" || ARGS[1] == \"1\")",
        "comment_created_at": "2024-04-20T03:38:57+00:00",
        "comment_author": "The-Briel-Deal",
        "comment_body": "Implemented! Ty for the suggestion. Lmk if you have further thoughts. Doing some testing now.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1353089685",
    "pr_number": 3544,
    "pr_file": "src/managers/input/InputManager.cpp",
    "created_at": "2023-10-10T18:17:56+00:00",
    "commented_code": "if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1353089685",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-10T18:17:56+00:00",
        "comment_author": "vaxerski",
        "comment_body": "why not use the same `->set` flag here? instead of the entire change to how `deviceConfigExists` works?",
        "pr_file_module": null
      },
      {
        "comment_id": "1353098575",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-10T18:26:14+00:00",
        "comment_author": "pdamianik",
        "comment_body": "1. There is no `getConfigValuePtr()` equivalent for device configurations (at least for a pointer to a configuration value, could be added)\r\n2. I think it is useful to make `deviceConfigExists()` able to optionally check for specific configuration keys.",
        "pr_file_module": null
      },
      {
        "comment_id": "1356597905",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-12T10:09:17+00:00",
        "comment_author": "vaxerski",
        "comment_body": "1. getDeviceConfig()->set\r\n2. I don't think so. If a device config exists, all vars belonging to it exist",
        "pr_file_module": null
      },
      {
        "comment_id": "1356614291",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-12T10:25:34+00:00",
        "comment_author": "pdamianik",
        "comment_body": "1. I cannot find a function named `getDeviceConfig()`, there are `getConfigValueSafeDevice()` which returns the struct not a pointer and `getConfigValuePtrSafe()` which first checks whether the key is for a device and then has to parse the device identifier first. As an alternative to changing the `deviceConfigExists()` function a  `getDeviceConfigValuePtr()` or `getDeviceConfigPtr()` function could be extracted from `getConfigValuePtr()`.\r\n2. Yes, but it is not clear whether a config key has been set by the user.",
        "pr_file_module": null
      },
      {
        "comment_id": "1356630218",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-12T10:40:37+00:00",
        "comment_author": "vaxerski",
        "comment_body": "Again, you can get the struct. We cannot receive ptrs to device configs as they are not static IIRC.\r\n\r\nWhat is your problem? It returns the struct. The struct has a `set` property.",
        "pr_file_module": null
      },
      {
        "comment_id": "1356736649",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-12T12:25:04+00:00",
        "comment_author": "pdamianik",
        "comment_body": "My bad, can't use `getConfigValueSafeDevice()` as it isn't even public and `getConfigValuePtrSafe()` can return a pointer to a device config value. So another alternative besides creating `getDeviceConfigValuePtr()` would be making `getConfigValueSafeDevice()` public. I will add two more commits to give you the choice between all proposed ways to check if a device config value exists and then I can reset it to the one you wish to use.",
        "pr_file_module": null
      },
      {
        "comment_id": "1357217699",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-12T18:14:39+00:00",
        "comment_author": "pdamianik",
        "comment_body": "Now there are three commits:\r\n 1. cec75926ad24d571457d01bf9a478ada2d1c39b2 still uses the modified `deviceConfigExists()`\r\n 2. 0fef48b71c022d3e829c138776727d99f3f0f17f extracts the function `getDeviceConfigValuePtr()` from `getConfigValuePtrSafe()`\r\n 3. 4be9260c8dc09373a55e8476e64b7d632ed22102 makes `getConfigValueSafeDevice()` public\r\n\r\nPlease let me know which of those methods to get at a device configuration value you prefer.",
        "pr_file_module": null
      },
      {
        "comment_id": "1358512933",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-13T16:56:44+00:00",
        "comment_author": "vaxerski",
        "comment_body": "final print of the MR looks good to me.\r\n\r\nI squash everything anyways\r\n\r\nIf there isnt anything else, I am alright with merging this as-is",
        "pr_file_module": null
      },
      {
        "comment_id": "1358648648",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1353089685",
        "commented_code": "@@ -1390,15 +1390,27 @@ void CInputManager::setTouchDeviceConfigs(STouchDevice* dev) {\n         if (wlr_input_device_is_libinput(PTOUCHDEV->pWlrDevice)) {\n             const auto LIBINPUTDEV = (libinput_device*)wlr_libinput_get_device_handle(PTOUCHDEV->pWlrDevice);\n \n-            const int  ROTATION = std::clamp(g_pConfigManager->getDeviceInt(PTOUCHDEV->name, \"transform\", \"input:touchdevice:transform\"), 0, 7);\n-            if (libinput_device_config_calibration_has_matrix(LIBINPUTDEV))\n-                libinput_device_config_calibration_set_matrix(LIBINPUTDEV, MATRICES[ROTATION]);\n-\n-            const auto OUTPUT = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n-            if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY)\n-                PTOUCHDEV->boundOutput = OUTPUT;\n+            const auto OUTPUT             = g_pConfigManager->getDeviceString(PTOUCHDEV->name, \"output\", \"input:touchdevice:output\");\n+            const auto GTRANSFORMSET      = g_pConfigManager->getConfigValuePtr(\"input:touchdevice:transform\")->set;\n+            const auto DEVICEOUTPUTSET    = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"output\");\n+            const auto DEVICETRANSFORMSET = g_pConfigManager->deviceConfigExists(PTOUCHDEV->name, \"transform\");",
        "comment_created_at": "2023-10-13T18:13:20+00:00",
        "comment_author": "pdamianik",
        "comment_body": "Just a functionality test by @Smona",
        "pr_file_module": null
      }
    ]
  }
]