[
  {
    "discussion_id": "1555554248",
    "pr_number": 5495,
    "pr_file": "src/desktop/Workspace.cpp",
    "created_at": "2024-04-08T09:57:06+00:00",
    "commented_code": "Debug::log(LOG, \"Destroying workspace ID {}\", m_iID);\n \n-    g_pHookSystem->unhook(m_pFocusedWindowHook);\n+    // check if g_pHookSystem and g_pEventManager exist, they might be destroyed as in when the compositor is closing.\n+    if(g_pHookSystem) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1555554248",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5495,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1555554248",
        "commented_code": "@@ -57,11 +57,16 @@ CWorkspace::~CWorkspace() {\n \n     Debug::log(LOG, \"Destroying workspace ID {}\", m_iID);\n \n-    g_pHookSystem->unhook(m_pFocusedWindowHook);\n+    // check if g_pHookSystem and g_pEventManager exist, they might be destroyed as in when the compositor is closing.\n+    if(g_pHookSystem) {",
        "comment_created_at": "2024-04-08T09:57:06+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style: no {} around short ifs",
        "pr_file_module": null
      },
      {
        "comment_id": "1555593409",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5495,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1555554248",
        "commented_code": "@@ -57,11 +57,16 @@ CWorkspace::~CWorkspace() {\n \n     Debug::log(LOG, \"Destroying workspace ID {}\", m_iID);\n \n-    g_pHookSystem->unhook(m_pFocusedWindowHook);\n+    // check if g_pHookSystem and g_pEventManager exist, they might be destroyed as in when the compositor is closing.\n+    if(g_pHookSystem) {",
        "comment_created_at": "2024-04-08T10:29:31+00:00",
        "comment_author": "gulafaran",
        "comment_body": "changed. and pushed. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1600205389",
    "pr_number": 5966,
    "pr_file": "src/managers/KeybindManager.cpp",
    "created_at": "2024-05-14T15:02:06+00:00",
    "commented_code": "return 0;\n }\n \n+eMultiKeyCase CKeybindManager::mkKeysymSetMatches(const std::set<xkb_keysym_t> keybindKeysyms, const std::set<xkb_keysym_t> pressedKeysyms) {\n+    // Returns whether two sets of keysyms are equal, partially equal, or not\n+    // matching. (Partially matching means that pressed is a subset of bound)\n+\n+    std::set<xkb_keysym_t> boundKeysNotPressed;\n+    std::set<xkb_keysym_t> pressedKeysNotBound;\n+\n+    std::set_difference(keybindKeysyms.begin(), keybindKeysyms.end(), pressedKeysyms.begin(), pressedKeysyms.end(),\n+                        std::inserter(boundKeysNotPressed, boundKeysNotPressed.begin()));\n+    std::set_difference(pressedKeysyms.begin(), pressedKeysyms.end(), keybindKeysyms.begin(), keybindKeysyms.end(),\n+                        std::inserter(pressedKeysNotBound, pressedKeysNotBound.begin()));\n+\n+    if (boundKeysNotPressed.empty() && pressedKeysNotBound.empty())\n+        return MK_FULL_MATCH;\n+\n+    if (boundKeysNotPressed.size() && pressedKeysNotBound.empty())\n+        return MK_PARTIAL_MATCH;\n+\n+    return MK_NO_MATCH;\n+}\n+\n+eMultiKeyCase CKeybindManager::mkBindMatches(const SKeybind keybind) {\n+    if (mkKeysymSetMatches(keybind.sMkMods, m_sMkMods) != MK_FULL_MATCH)\n+        return MK_NO_MATCH;\n+\n+    return mkKeysymSetMatches(keybind.sMkKeys, m_sMkKeys);\n+}\n+\n bool CKeybindManager::handleKeybinds(const uint32_t modmask, const SPressedKeyWithMods& key, bool pressed) {\n     bool found = false;\n \n+    if (pressed) {\n+        if (keycodeToModifier(key.keycode)) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1600205389",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5966,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1600205389",
        "commented_code": "@@ -536,9 +538,50 @@ int repeatKeyHandler(void* data) {\n     return 0;\n }\n \n+eMultiKeyCase CKeybindManager::mkKeysymSetMatches(const std::set<xkb_keysym_t> keybindKeysyms, const std::set<xkb_keysym_t> pressedKeysyms) {\n+    // Returns whether two sets of keysyms are equal, partially equal, or not\n+    // matching. (Partially matching means that pressed is a subset of bound)\n+\n+    std::set<xkb_keysym_t> boundKeysNotPressed;\n+    std::set<xkb_keysym_t> pressedKeysNotBound;\n+\n+    std::set_difference(keybindKeysyms.begin(), keybindKeysyms.end(), pressedKeysyms.begin(), pressedKeysyms.end(),\n+                        std::inserter(boundKeysNotPressed, boundKeysNotPressed.begin()));\n+    std::set_difference(pressedKeysyms.begin(), pressedKeysyms.end(), keybindKeysyms.begin(), keybindKeysyms.end(),\n+                        std::inserter(pressedKeysNotBound, pressedKeysNotBound.begin()));\n+\n+    if (boundKeysNotPressed.empty() && pressedKeysNotBound.empty())\n+        return MK_FULL_MATCH;\n+\n+    if (boundKeysNotPressed.size() && pressedKeysNotBound.empty())\n+        return MK_PARTIAL_MATCH;\n+\n+    return MK_NO_MATCH;\n+}\n+\n+eMultiKeyCase CKeybindManager::mkBindMatches(const SKeybind keybind) {\n+    if (mkKeysymSetMatches(keybind.sMkMods, m_sMkMods) != MK_FULL_MATCH)\n+        return MK_NO_MATCH;\n+\n+    return mkKeysymSetMatches(keybind.sMkKeys, m_sMkKeys);\n+}\n+\n bool CKeybindManager::handleKeybinds(const uint32_t modmask, const SPressedKeyWithMods& key, bool pressed) {\n     bool found = false;\n \n+    if (pressed) {\n+        if (keycodeToModifier(key.keycode)) {",
        "comment_created_at": "2024-05-14T15:02:06+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no {} around short ifs",
        "pr_file_module": null
      },
      {
        "comment_id": "1602511928",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5966,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1600205389",
        "commented_code": "@@ -536,9 +538,50 @@ int repeatKeyHandler(void* data) {\n     return 0;\n }\n \n+eMultiKeyCase CKeybindManager::mkKeysymSetMatches(const std::set<xkb_keysym_t> keybindKeysyms, const std::set<xkb_keysym_t> pressedKeysyms) {\n+    // Returns whether two sets of keysyms are equal, partially equal, or not\n+    // matching. (Partially matching means that pressed is a subset of bound)\n+\n+    std::set<xkb_keysym_t> boundKeysNotPressed;\n+    std::set<xkb_keysym_t> pressedKeysNotBound;\n+\n+    std::set_difference(keybindKeysyms.begin(), keybindKeysyms.end(), pressedKeysyms.begin(), pressedKeysyms.end(),\n+                        std::inserter(boundKeysNotPressed, boundKeysNotPressed.begin()));\n+    std::set_difference(pressedKeysyms.begin(), pressedKeysyms.end(), keybindKeysyms.begin(), keybindKeysyms.end(),\n+                        std::inserter(pressedKeysNotBound, pressedKeysNotBound.begin()));\n+\n+    if (boundKeysNotPressed.empty() && pressedKeysNotBound.empty())\n+        return MK_FULL_MATCH;\n+\n+    if (boundKeysNotPressed.size() && pressedKeysNotBound.empty())\n+        return MK_PARTIAL_MATCH;\n+\n+    return MK_NO_MATCH;\n+}\n+\n+eMultiKeyCase CKeybindManager::mkBindMatches(const SKeybind keybind) {\n+    if (mkKeysymSetMatches(keybind.sMkMods, m_sMkMods) != MK_FULL_MATCH)\n+        return MK_NO_MATCH;\n+\n+    return mkKeysymSetMatches(keybind.sMkKeys, m_sMkKeys);\n+}\n+\n bool CKeybindManager::handleKeybinds(const uint32_t modmask, const SPressedKeyWithMods& key, bool pressed) {\n     bool found = false;\n \n+    if (pressed) {\n+        if (keycodeToModifier(key.keycode)) {",
        "comment_created_at": "2024-05-16T02:33:53+00:00",
        "comment_author": "The-Briel-Deal",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1797710860",
    "pr_number": 8088,
    "pr_file": "src/layout/IHyprLayout.cpp",
    "created_at": "2024-10-12T14:29:06+00:00",
    "commented_code": "newPos = newPos + Vector2D((m_vBeginDragSizeXY - newSize).x, 0.0);\n \n             CBox wb = {newPos, newSize};\n+            if (*SNAPENABLED) {\n+                if (*SNAPWINDOWGAP) {\n+                    const int  gap  = *SNAPWINDOWGAP;\n+                    const auto PID  = DRAGGINGWINDOW->getPID();\n+                    const auto WSID = DRAGGINGWINDOW->workspaceID();\n+\n+                    for (auto& other : g_pCompositor->m_vWindows) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1797710860",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8088,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1797710860",
        "commented_code": "@@ -505,6 +574,75 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n                 newPos = newPos + Vector2D((m_vBeginDragSizeXY - newSize).x, 0.0);\n \n             CBox wb = {newPos, newSize};\n+            if (*SNAPENABLED) {\n+                if (*SNAPWINDOWGAP) {\n+                    const int  gap  = *SNAPWINDOWGAP;\n+                    const auto PID  = DRAGGINGWINDOW->getPID();\n+                    const auto WSID = DRAGGINGWINDOW->workspaceID();\n+\n+                    for (auto& other : g_pCompositor->m_vWindows) {",
        "comment_created_at": "2024-10-12T14:29:06+00:00",
        "comment_author": "vaxerski",
        "comment_body": "needs to ignore windows that:\r\n - aren't mapped\r\n - are fading out\r\n - are XWayland OR",
        "pr_file_module": null
      },
      {
        "comment_id": "1797733011",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8088,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1797710860",
        "commented_code": "@@ -505,6 +574,75 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n                 newPos = newPos + Vector2D((m_vBeginDragSizeXY - newSize).x, 0.0);\n \n             CBox wb = {newPos, newSize};\n+            if (*SNAPENABLED) {\n+                if (*SNAPWINDOWGAP) {\n+                    const int  gap  = *SNAPWINDOWGAP;\n+                    const auto PID  = DRAGGINGWINDOW->getPID();\n+                    const auto WSID = DRAGGINGWINDOW->workspaceID();\n+\n+                    for (auto& other : g_pCompositor->m_vWindows) {",
        "comment_created_at": "2024-10-12T17:02:49+00:00",
        "comment_author": "myQwil",
        "comment_body": "something like this?\r\n```cpp\r\nif (other->workspaceID() == WSID && other->getPID() != PID\r\n && other->m_bIsMapped\r\n && !other->m_bFadingOut\r\n && !other->m_bIsX11) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1797824980",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8088,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "1797710860",
        "commented_code": "@@ -505,6 +574,75 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n                 newPos = newPos + Vector2D((m_vBeginDragSizeXY - newSize).x, 0.0);\n \n             CBox wb = {newPos, newSize};\n+            if (*SNAPENABLED) {\n+                if (*SNAPWINDOWGAP) {\n+                    const int  gap  = *SNAPWINDOWGAP;\n+                    const auto PID  = DRAGGINGWINDOW->getPID();\n+                    const auto WSID = DRAGGINGWINDOW->workspaceID();\n+\n+                    for (auto& other : g_pCompositor->m_vWindows) {",
        "comment_created_at": "2024-10-12T23:19:34+00:00",
        "comment_author": "vaxerski",
        "comment_body": "prefer guards.\r\n\r\n```cpp\r\nif (bad)\r\n   continue;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1766549781",
    "pr_number": 7851,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-09-19T10:03:32+00:00",
    "commented_code": "if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const char *cfg = getenv(\"HYPRLAND_CONFIG\"); cfg != NULL) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1766549781",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1766549781",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const char *cfg = getenv(\"HYPRLAND_CONFIG\"); cfg != NULL) {",
        "comment_created_at": "2024-09-19T10:03:32+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no {}\r\n\r\nno `!= NULL`\r\n\r\nconst are CAPS\r\n\r\nyou can use auto\r\n\r\n```\r\nif (const auto CFG_ENV = getenv(\"HYPRLAND_CONFIG\"); CFG_ENV)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1767204714",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1766549781",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const char *cfg = getenv(\"HYPRLAND_CONFIG\"); cfg != NULL) {",
        "comment_created_at": "2024-09-19T16:47:19+00:00",
        "comment_author": "amadalusia",
        "comment_body": "~~should be resolved now~~ missed the auto",
        "pr_file_module": null
      },
      {
        "comment_id": "1767224787",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1766549781",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const char *cfg = getenv(\"HYPRLAND_CONFIG\"); cfg != NULL) {",
        "comment_created_at": "2024-09-19T16:52:43+00:00",
        "comment_author": "amadalusia",
        "comment_body": "should actually be resolved now",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1770536478",
    "pr_number": 7851,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-09-22T11:59:59+00:00",
    "commented_code": "if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const auto CFG_ENV = getenv(\"HYPRLAND_CONFIG\"); CFG_ENV) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1770536478",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1770536478",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const auto CFG_ENV = getenv(\"HYPRLAND_CONFIG\"); CFG_ENV) {",
        "comment_created_at": "2024-09-22T11:59:59+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no {} around short ifs",
        "pr_file_module": null
      },
      {
        "comment_id": "1770554634",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1770536478",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const auto CFG_ENV = getenv(\"HYPRLAND_CONFIG\"); CFG_ENV) {",
        "comment_created_at": "2024-09-22T13:25:31+00:00",
        "comment_author": "amadalusia",
        "comment_body": "gotcha, will do both",
        "pr_file_module": null
      },
      {
        "comment_id": "1770556066",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 7851,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1770536478",
        "commented_code": "@@ -683,6 +683,12 @@ std::string CConfigManager::getMainConfigPath() {\n     if (!g_pCompositor->explicitConfigPath.empty())\n         return g_pCompositor->explicitConfigPath;\n \n+    if (const auto CFG_ENV = getenv(\"HYPRLAND_CONFIG\"); CFG_ENV) {",
        "comment_created_at": "2024-09-22T13:31:15+00:00",
        "comment_author": "amadalusia",
        "comment_body": "resolved!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1601976026",
    "pr_number": 6089,
    "pr_file": "src/helpers/MiscFunctions.cpp",
    "created_at": "2024-05-15T16:58:45+00:00",
    "commented_code": "} else if (in.starts_with(\"empty\")) {\n         const bool same_mon = in.substr(5).contains(\"m\");\n         const bool next     = in.substr(5).contains(\"n\");\n-        if (same_mon || next) {\n-            if (!g_pCompositor->m_pLastMonitor) {\n-                Debug::log(ERR, \"Empty monitor workspace on monitor null!\");\n-                return WORKSPACE_INVALID;\n-            }\n+        if ((same_mon || next) && !g_pCompositor->m_pLastMonitor) {\n+            Debug::log(ERR, \"Empty monitor workspace on monitor null!\");\n+            return WORKSPACE_INVALID;\n         }\n+\n+        std::set<int> invalidWSes;\n+        if (same_mon)",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1601976026",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 6089,
        "pr_file": "src/helpers/MiscFunctions.cpp",
        "discussion_id": "1601976026",
        "commented_code": "@@ -284,16 +284,23 @@ int getWorkspaceIDFromString(const std::string& in, std::string& outName) {\n     } else if (in.starts_with(\"empty\")) {\n         const bool same_mon = in.substr(5).contains(\"m\");\n         const bool next     = in.substr(5).contains(\"n\");\n-        if (same_mon || next) {\n-            if (!g_pCompositor->m_pLastMonitor) {\n-                Debug::log(ERR, \"Empty monitor workspace on monitor null!\");\n-                return WORKSPACE_INVALID;\n-            }\n+        if ((same_mon || next) && !g_pCompositor->m_pLastMonitor) {\n+            Debug::log(ERR, \"Empty monitor workspace on monitor null!\");\n+            return WORKSPACE_INVALID;\n         }\n+\n+        std::set<int> invalidWSes;\n+        if (same_mon)",
        "comment_created_at": "2024-05-15T16:58:45+00:00",
        "comment_author": "vaxerski",
        "comment_body": "this is not a short if, please {}",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1573723955",
    "pr_number": 5670,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-04-21T11:45:03+00:00",
    "commented_code": "if (ARGS[2].starts_with(\"auto\")) {\n         newrule.offset = Vector2D(-INT32_MAX, -INT32_MAX);\n+        if (ARGS[2] == \"auto-right\" || ARGS[2] == \"auto\") {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1573723955",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5670,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1573723955",
        "commented_code": "@@ -1641,6 +1641,16 @@ std::optional<std::string> CConfigManager::handleMonitor(const std::string& comm\n \n     if (ARGS[2].starts_with(\"auto\")) {\n         newrule.offset = Vector2D(-INT32_MAX, -INT32_MAX);\n+        if (ARGS[2] == \"auto-right\" || ARGS[2] == \"auto\") {",
        "comment_created_at": "2024-04-21T11:45:03+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style nit: no {} around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1565958513",
    "pr_number": 5597,
    "pr_file": "src/layout/DwindleLayout.cpp",
    "created_at": "2024-04-15T15:10:42+00:00",
    "commented_code": "onWindowCreatedTiling(pWindow);\n \n     m_vOverrideFocalPoint.reset();\n+\n+    // restore focus to the previous position\n+    if (silent) {\n+        const auto PNODETOFOCUS = getClosestNodeOnWorkspace(pWindow->workspaceID(), original_pos);\n+        if (PNODETOFOCUS && PNODETOFOCUS->pWindow) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1565958513",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5597,
        "pr_file": "src/layout/DwindleLayout.cpp",
        "discussion_id": "1565958513",
        "commented_code": "@@ -934,6 +935,14 @@ void CHyprDwindleLayout::moveWindowTo(CWindow* pWindow, const std::string& dir)\n     onWindowCreatedTiling(pWindow);\n \n     m_vOverrideFocalPoint.reset();\n+\n+    // restore focus to the previous position\n+    if (silent) {\n+        const auto PNODETOFOCUS = getClosestNodeOnWorkspace(pWindow->workspaceID(), original_pos);\n+        if (PNODETOFOCUS && PNODETOFOCUS->pWindow) {",
        "comment_created_at": "2024-04-15T15:10:42+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style: here and hereafter, no {} around short ifs",
        "pr_file_module": null
      },
      {
        "comment_id": "1566033134",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5597,
        "pr_file": "src/layout/DwindleLayout.cpp",
        "discussion_id": "1565958513",
        "commented_code": "@@ -934,6 +935,14 @@ void CHyprDwindleLayout::moveWindowTo(CWindow* pWindow, const std::string& dir)\n     onWindowCreatedTiling(pWindow);\n \n     m_vOverrideFocalPoint.reset();\n+\n+    // restore focus to the previous position\n+    if (silent) {\n+        const auto PNODETOFOCUS = getClosestNodeOnWorkspace(pWindow->workspaceID(), original_pos);\n+        if (PNODETOFOCUS && PNODETOFOCUS->pWindow) {",
        "comment_created_at": "2024-04-15T16:04:42+00:00",
        "comment_author": "de-vri-es",
        "comment_body": "Formatted the files, and made sure the workspace before moving the window is used instead of after moving the window.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1527556564",
    "pr_number": 5147,
    "pr_file": "src/managers/input/InputMethodRelay.cpp",
    "created_at": "2024-03-17T16:24:45+00:00",
    "commented_code": "}\n \n STextInput* CInputMethodRelay::getFocusedTextInput() {\n-\n-    for (auto& ti : m_lTextInputs) {\n-        if (focusedSurface(&ti)) {\n-            return &ti;\n-        }\n+    if (m_pFocusedSurface){",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1527556564",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5147,
        "pr_file": "src/managers/input/InputMethodRelay.cpp",
        "discussion_id": "1527556564",
        "commented_code": "@@ -322,23 +312,9 @@ SIMEKbGrab* CInputMethodRelay::getIMEKeyboardGrab(SKeyboard* pKeyboard) {\n }\n \n STextInput* CInputMethodRelay::getFocusedTextInput() {\n-\n-    for (auto& ti : m_lTextInputs) {\n-        if (focusedSurface(&ti)) {\n-            return &ti;\n-        }\n+    if (m_pFocusedSurface){",
        "comment_created_at": "2024-03-17T16:24:45+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style: no {} around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1532558136",
    "pr_number": 5165,
    "pr_file": "src/config/ConfigManager.cpp",
    "created_at": "2024-03-20T17:58:44+00:00",
    "commented_code": "g_pHyprOpenGL->m_bReloadScreenShader = true;\n \n     // parseError will be displayed next frame\n+\n+    if (result.error) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1532558136",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5165,
        "pr_file": "src/config/ConfigManager.cpp",
        "discussion_id": "1532558136",
        "commented_code": "@@ -738,6 +743,13 @@ void CConfigManager::postConfigReload(const Hyprlang::CParseResult& result) {\n         g_pHyprOpenGL->m_bReloadScreenShader = true;\n \n     // parseError will be displayed next frame\n+\n+    if (result.error) {",
        "comment_created_at": "2024-03-20T17:58:44+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no {} around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1451768966",
    "pr_number": 4439,
    "pr_file": "src/Compositor.cpp",
    "created_at": "2024-01-14T16:58:10+00:00",
    "commented_code": "pWorkspace->startAnim(true, true, true);\n \n-        wlr_cursor_warp(m_sWLRCursor, nullptr, pMonitor->vecPosition.x + pMonitor->vecTransformedSize.x / 2, pMonitor->vecPosition.y + pMonitor->vecTransformedSize.y / 2);\n+        if (!noWarpCursor) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1451768966",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4439,
        "pr_file": "src/Compositor.cpp",
        "discussion_id": "1451768966",
        "commented_code": "@@ -2202,7 +2202,9 @@ void CCompositor::moveWorkspaceToMonitor(CWorkspace* pWorkspace, CMonitor* pMoni\n \n         pWorkspace->startAnim(true, true, true);\n \n-        wlr_cursor_warp(m_sWLRCursor, nullptr, pMonitor->vecPosition.x + pMonitor->vecTransformedSize.x / 2, pMonitor->vecPosition.y + pMonitor->vecTransformedSize.y / 2);\n+        if (!noWarpCursor) {",
        "comment_created_at": "2024-01-14T16:58:10+00:00",
        "comment_author": "vaxerski",
        "comment_body": "no {} around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1480007429",
    "pr_number": 4489,
    "pr_file": "src/managers/input/Touch.cpp",
    "created_at": "2024-02-06T15:14:28+00:00",
    "commented_code": "return;\n     }\n \n+    if (*PSWIPETOUCH && (!m_pFoundLSToFocus || m_pFoundLSToFocus->layer == ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND)) {\n+        const auto PWORKSPACE = g_pCompositor->getWorkspaceByID(PMONITOR->activeWorkspace);\n+        const bool VERTANIMS  = PWORKSPACE->m_vRenderOffset.getConfig()->pValues->internalStyle == \"slidevert\" ||\n+            PWORKSPACE->m_vRenderOffset.getConfig()->pValues->internalStyle.starts_with(\"slidefadevert\");\n+        // TODO: support no_gaps_when_only?\n+        const auto target_portion = (*PGAPSOUT + *PBORDERSIZE) / (VERTANIMS ? PMONITOR->vecSize.y : PMONITOR->vecSize.x);\n+        const auto position       = (VERTANIMS ? e->y : e->x);\n+        if (position < target_portion || position > (1 - target_portion)) {\n+            beginWorkspaceSwipe();\n+            // Set the initial direction based on which edge you started from\n+            if (position > 0.5) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1480007429",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4489,
        "pr_file": "src/managers/input/Touch.cpp",
        "discussion_id": "1480007429",
        "commented_code": "@@ -24,6 +28,25 @@ void CInputManager::onTouchDown(wlr_touch_down_event* e) {\n         return;\n     }\n \n+    if (*PSWIPETOUCH && (!m_pFoundLSToFocus || m_pFoundLSToFocus->layer == ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND)) {\n+        const auto PWORKSPACE = g_pCompositor->getWorkspaceByID(PMONITOR->activeWorkspace);\n+        const bool VERTANIMS  = PWORKSPACE->m_vRenderOffset.getConfig()->pValues->internalStyle == \"slidevert\" ||\n+            PWORKSPACE->m_vRenderOffset.getConfig()->pValues->internalStyle.starts_with(\"slidefadevert\");\n+        // TODO: support no_gaps_when_only?\n+        const auto target_portion = (*PGAPSOUT + *PBORDERSIZE) / (VERTANIMS ? PMONITOR->vecSize.y : PMONITOR->vecSize.x);\n+        const auto position       = (VERTANIMS ? e->y : e->x);\n+        if (position < target_portion || position > (1 - target_portion)) {\n+            beginWorkspaceSwipe();\n+            // Set the initial direction based on which edge you started from\n+            if (position > 0.5) {",
        "comment_created_at": "2024-02-06T15:14:28+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style nit: no `{}` around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1527377050",
    "pr_number": 5137,
    "pr_file": "src/managers/KeybindManager.cpp",
    "created_at": "2024-03-17T00:26:03+00:00",
    "commented_code": "if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1527377050",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:26:03+00:00",
        "comment_author": "vaxerski",
        "comment_body": "a) no {} around short ifs\r\nb) `forceFloat != 0 && forceFloat - 1 == !PCURRENT->m_bIsFloating`",
        "pr_file_module": null
      },
      {
        "comment_id": "1527377391",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:26:39+00:00",
        "comment_author": "vaxerski",
        "comment_body": "also why is this even in the if, can be extracted outside of it to avoid duplicating code",
        "pr_file_module": null
      },
      {
        "comment_id": "1527381114",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:33:07+00:00",
        "comment_author": "djvs",
        "comment_body": "It's there twice because it depends on either PWINDOW or PCURRENT, which is defined inside the outer if.  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1527381803",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:34:28+00:00",
        "comment_author": "djvs",
        "comment_body": "You sure you want that shortened version?  Seems way less clear what the logic is.",
        "pr_file_module": null
      },
      {
        "comment_id": "1527383653",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:41:13+00:00",
        "comment_author": "vaxerski",
        "comment_body": "> It's there twice because it depends on either PWINDOW or PCURRENT, which is defined inside the outer if.\r\n\r\nright. The other can be extracted, though.",
        "pr_file_module": null
      },
      {
        "comment_id": "1527383689",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:41:19+00:00",
        "comment_author": "vaxerski",
        "comment_body": "> You sure you want that shortened version? Seems way less clear what the logic is.\r\n\r\nyea",
        "pr_file_module": null
      },
      {
        "comment_id": "1527384960",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:45:28+00:00",
        "comment_author": "djvs",
        "comment_body": "You mean this?\r\n\r\n```// forceFloat: 0 for no force, 1 for force float, 2 for force tile\r\nvoid toggleActiveFloatingCore(std::string args, unsigned char forceFloat) {\r\n    CWindow* PWINDOW = nullptr;\r\n\r\n    if (args != \"active\" && args.length() > 1)\r\n        PWINDOW = g_pCompositor->getWindowByRegex(args);\r\n    else\r\n        PWINDOW = g_pCompositor->m_pLastWindow;\r\n\r\n    if (!PWINDOW)\r\n        return;\r\n\r\n    if (forceFloat != 0 && forceFloat - 1 == !PWINDOW->m_bIsFloating)\r\n        return;\r\n\r\n    if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\r\n        const auto PCURRENT = PWINDOW->getGroupCurrent();\r\n        if (forceFloat != 0 && forceFloat - 1 == !PCURRENT->m_bIsFloating)\r\n            return;\r\n\r\n        // remove drag status\r\n        g_pInputManager->currentlyDraggedWindow = nullptr;\r\n\r\n        PCURRENT->m_bIsFloating = !PCURRENT->m_bIsFloating;\r\n        g_pLayoutManager->getCurrentLayout()->changeWindowFloatingMode(PCURRENT);\r\n\r\n        CWindow* curr = PCURRENT->m_sGroupData.pNextWindow;\r\n        while (curr != PCURRENT) {\r\n            curr->m_bIsFloating = PCURRENT->m_bIsFloating;\r\n            curr->updateDynamicRules();\r\n            curr->updateSpecialRenderData();\r\n            curr = curr->m_sGroupData.pNextWindow;\r\n        }\r\n    } else {\r\n\r\n        // remove drag status\r\n        g_pInputManager->currentlyDraggedWindow = nullptr;\r\n\r\n        PWINDOW->m_bIsFloating = !PWINDOW->m_bIsFloating;\r\n\r\n        PWINDOW->updateDynamicRules();\r\n\r\n        g_pLayoutManager->getCurrentLayout()->changeWindowFloatingMode(PWINDOW);\r\n    }\r\n}\r\n```\r\n\r\nit would then run \r\n```\r\n    if (forceFloat != 0 && forceFloat - 1 == !PWINDOW->m_bIsFloating)\r\n        return;\r\n``` \r\nin both cases... is that correct?",
        "pr_file_module": null
      },
      {
        "comment_id": "1527386012",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:48:40+00:00",
        "comment_author": "vaxerski",
        "comment_body": "yeah tho tbh I don't see why the PCURRENT check is necessary, all windows in a group should have their floating state synced. You can remove the second check mostl ikely",
        "pr_file_module": null
      },
      {
        "comment_id": "1527387613",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:53:37+00:00",
        "comment_author": "djvs",
        "comment_body": "I hadn't tried the group functionality at all before just this moment, but the intention was to preserve the exact behavior that was there except allow for \"make (whatever) floating unless it already is\" and \"make (whatever) tiled unless it already is\".  I think that's how I had it?  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1527387894",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:54:24+00:00",
        "comment_author": "djvs",
        "comment_body": "Oh I see.  So if you had toggled it already using the PCURRENT etc. logic, all of the windows in the group would have the same floating state, that's what you mean?  ",
        "pr_file_module": null
      },
      {
        "comment_id": "1527388073",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:54:54+00:00",
        "comment_author": "djvs",
        "comment_body": "```// forceFloat: 0 for no force, 1 for force float, 2 for force tile\r\nvoid toggleActiveFloatingCore(std::string args, unsigned char forceFloat) {\r\n    CWindow* PWINDOW = nullptr;\r\n\r\n    if (args != \"active\" && args.length() > 1)\r\n        PWINDOW = g_pCompositor->getWindowByRegex(args);\r\n    else\r\n        PWINDOW = g_pCompositor->m_pLastWindow;\r\n\r\n    if (!PWINDOW)\r\n        return;\r\n\r\n    if (forceFloat != 0 && forceFloat - 1 == !PWINDOW->m_bIsFloating)\r\n        return;\r\n\r\n    // remove drag status\r\n    g_pInputManager->currentlyDraggedWindow = nullptr;\r\n\r\n    if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\r\n        const auto PCURRENT = PWINDOW->getGroupCurrent();\r\n\r\n        PCURRENT->m_bIsFloating = !PCURRENT->m_bIsFloating;\r\n        g_pLayoutManager->getCurrentLayout()->changeWindowFloatingMode(PCURRENT);\r\n\r\n        CWindow* curr = PCURRENT->m_sGroupData.pNextWindow;\r\n        while (curr != PCURRENT) {\r\n            curr->m_bIsFloating = PCURRENT->m_bIsFloating;\r\n            curr->updateDynamicRules();\r\n            curr->updateSpecialRenderData();\r\n            curr = curr->m_sGroupData.pNextWindow;\r\n        }\r\n    } else {\r\n        PWINDOW->m_bIsFloating = !PWINDOW->m_bIsFloating;\r\n\r\n        PWINDOW->updateDynamicRules();\r\n\r\n        g_pLayoutManager->getCurrentLayout()->changeWindowFloatingMode(PWINDOW);\r\n    }\r\n}\r\n\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1527389023",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5137,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1527377050",
        "commented_code": "@@ -838,12 +853,15 @@ void CKeybindManager::toggleActiveFloating(std::string args) {\n     if (!PWINDOW)\n         return;\n \n-    // remove drag status\n-    g_pInputManager->currentlyDraggedWindow = nullptr;\n-\n     if (PWINDOW->m_sGroupData.pNextWindow && PWINDOW->m_sGroupData.pNextWindow != PWINDOW) {\n+        const auto PCURRENT = PWINDOW->getGroupCurrent();\n+        if ((forceFloat == 1 && PCURRENT->m_bIsFloating) || (forceFloat == 2 && !PCURRENT->m_bIsFloating)) {",
        "comment_created_at": "2024-03-17T00:58:18+00:00",
        "comment_author": "vaxerski",
        "comment_body": "yea lgtm",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1526377882",
    "pr_number": 5117,
    "pr_file": "src/managers/SessionLockManager.cpp",
    "created_at": "2024-03-15T14:30:13+00:00",
    "commented_code": "void CSessionLockManager::removeSessionLockSurface(SSessionLockSurface* pSLS) {\n     std::erase_if(m_sSessionLock.vSessionLockSurfaces, [&](const auto& other) { return pSLS == other.get(); });\n+\n+    if (g_pCompositor->m_pLastFocus != nullptr)\n+        return;\n+\n+    for (auto& sls : m_sSessionLock.vSessionLockSurfaces) {\n+        if (sls->mapped) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1526377882",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 5117,
        "pr_file": "src/managers/SessionLockManager.cpp",
        "discussion_id": "1526377882",
        "commented_code": "@@ -156,6 +156,16 @@ bool CSessionLockManager::isSurfaceSessionLock(wlr_surface* pSurface) {\n \n void CSessionLockManager::removeSessionLockSurface(SSessionLockSurface* pSLS) {\n     std::erase_if(m_sSessionLock.vSessionLockSurfaces, [&](const auto& other) { return pSLS == other.get(); });\n+\n+    if (g_pCompositor->m_pLastFocus != nullptr)\n+        return;\n+\n+    for (auto& sls : m_sSessionLock.vSessionLockSurfaces) {\n+        if (sls->mapped) {",
        "comment_created_at": "2024-03-15T14:30:13+00:00",
        "comment_author": "vaxerski",
        "comment_body": "prefer guards\r\n```cpp\r\nif (!sls->mapped)\r\n    continue;\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1501714579",
    "pr_number": 3544,
    "pr_file": "src/managers/input/InputManager.cpp",
    "created_at": "2024-02-24T23:38:34+00:00",
    "commented_code": "const auto OUTPUT   = g_pConfigManager->getDeviceString(t.name, \"output\", \"input:tablet:output\");\n             const auto PMONITOR = g_pCompositor->getMonitorFromString(OUTPUT);\n             if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY && PMONITOR) {\n+                Debug::log(LOG, \"Binding tablet {} to output {}\", t.name, PMONITOR->szName);\n                 wlr_cursor_map_input_to_output(g_pCompositor->m_sWLRCursor, t.wlrDevice, PMONITOR->output);\n                 wlr_cursor_map_input_to_region(g_pCompositor->m_sWLRCursor, t.wlrDevice, nullptr);\n+                t.boundOutput = OUTPUT;\n+            } else {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1501714579",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 3544,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1501714579",
        "commented_code": "@@ -1529,8 +1542,12 @@ void CInputManager::setTabletConfigs() {\n             const auto OUTPUT   = g_pConfigManager->getDeviceString(t.name, \"output\", \"input:tablet:output\");\n             const auto PMONITOR = g_pCompositor->getMonitorFromString(OUTPUT);\n             if (!OUTPUT.empty() && OUTPUT != STRVAL_EMPTY && PMONITOR) {\n+                Debug::log(LOG, \"Binding tablet {} to output {}\", t.name, PMONITOR->szName);\n                 wlr_cursor_map_input_to_output(g_pCompositor->m_sWLRCursor, t.wlrDevice, PMONITOR->output);\n                 wlr_cursor_map_input_to_region(g_pCompositor->m_sWLRCursor, t.wlrDevice, nullptr);\n+                t.boundOutput = OUTPUT;\n+            } else {",
        "comment_created_at": "2024-02-24T23:38:34+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style: no {} around short ifs",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1505079182",
    "pr_number": 4851,
    "pr_file": "src/managers/input/InputManager.cpp",
    "created_at": "2024-02-27T22:13:56+00:00",
    "commented_code": "KEYMAP = xkb_keymap_new_from_names(CONTEXT, &rules, XKB_KEYMAP_COMPILE_NO_FLAGS);\n     }\n \n+    if (pKeyboard->xkbTranslationState) {\n+        xkb_state_unref(pKeyboard->xkbTranslationState);",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1505079182",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4851,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1505079182",
        "commented_code": "@@ -906,6 +908,11 @@ void CInputManager::applyConfigToKeyboard(SKeyboard* pKeyboard) {\n         KEYMAP = xkb_keymap_new_from_names(CONTEXT, &rules, XKB_KEYMAP_COMPILE_NO_FLAGS);\n     }\n \n+    if (pKeyboard->xkbTranslationState) {\n+        xkb_state_unref(pKeyboard->xkbTranslationState);",
        "comment_created_at": "2024-02-27T22:13:56+00:00",
        "comment_author": "vaxerski",
        "comment_body": "1: style, no {} around short ifs\r\n2: leak: not destroyed on .destroy",
        "pr_file_module": null
      },
      {
        "comment_id": "1505127533",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4851,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1505079182",
        "commented_code": "@@ -906,6 +908,11 @@ void CInputManager::applyConfigToKeyboard(SKeyboard* pKeyboard) {\n         KEYMAP = xkb_keymap_new_from_names(CONTEXT, &rules, XKB_KEYMAP_COMPILE_NO_FLAGS);\n     }\n \n+    if (pKeyboard->xkbTranslationState) {\n+        xkb_state_unref(pKeyboard->xkbTranslationState);",
        "comment_created_at": "2024-02-27T23:10:16+00:00",
        "comment_author": "Cu3PO42",
        "comment_body": "Of course I would check to make sure the ref counting was correct for the keymap and then forget about a destructor \ud83e\udd26\r\n\r\nI checked and [xkb_state_unref](https://github.com/xkbcommon/libxkbcommon/blob/58d0bdc743f3b63cfc305ec06ad736072d9b7008/src/state.c#L609) does its own null check, so I just removed the if. FYI clang-format did not remove those braces for me. There's a `RemoveBracesLLVM` rule that might give you the behavior you want.\r\n\r\nThanks again for the review!",
        "pr_file_module": null
      },
      {
        "comment_id": "1505131692",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4851,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1505079182",
        "commented_code": "@@ -906,6 +908,11 @@ void CInputManager::applyConfigToKeyboard(SKeyboard* pKeyboard) {\n         KEYMAP = xkb_keymap_new_from_names(CONTEXT, &rules, XKB_KEYMAP_COMPILE_NO_FLAGS);\n     }\n \n+    if (pKeyboard->xkbTranslationState) {\n+        xkb_state_unref(pKeyboard->xkbTranslationState);",
        "comment_created_at": "2024-02-27T23:16:42+00:00",
        "comment_author": "vaxerski",
        "comment_body": "RemoveBracesLLVM IIRC removes too much. We only remove around short ifs.",
        "pr_file_module": null
      },
      {
        "comment_id": "1505145643",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4851,
        "pr_file": "src/managers/input/InputManager.cpp",
        "discussion_id": "1505079182",
        "commented_code": "@@ -906,6 +908,11 @@ void CInputManager::applyConfigToKeyboard(SKeyboard* pKeyboard) {\n         KEYMAP = xkb_keymap_new_from_names(CONTEXT, &rules, XKB_KEYMAP_COMPILE_NO_FLAGS);\n     }\n \n+    if (pKeyboard->xkbTranslationState) {\n+        xkb_state_unref(pKeyboard->xkbTranslationState);",
        "comment_created_at": "2024-02-27T23:34:43+00:00",
        "comment_author": "Cu3PO42",
        "comment_body": "RemoveBracesLLVM does indeed also remove braces around single statement for and while, maybe others. Just to make sure I'm understandig you right for my next PR: you keep braces around the other control-flow statements?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1448053995",
    "pr_number": 4402,
    "pr_file": "src/managers/KeybindManager.cpp",
    "created_at": "2024-01-10T22:21:56+00:00",
    "commented_code": "changeworkspace(PWORKSPACE->getConfigName());\n     }\n \n+    const bool WASFULLSCREEN = g_pCompositor->m_pLastWindow ? g_pCompositor->m_pLastWindow->m_bIsFullscreen : false;\n+    const auto FSMODE        = g_pCompositor->getWorkspaceByID(PWINDOW->m_iWorkspaceID)->m_efFullscreenMode;\n+\n+    if (WASFULLSCREEN) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1448053995",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4402,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1448053995",
        "commented_code": "@@ -1675,8 +1675,18 @@ void CKeybindManager::focusWindow(std::string regexp) {\n         changeworkspace(PWORKSPACE->getConfigName());\n     }\n \n+    const bool WASFULLSCREEN = g_pCompositor->m_pLastWindow ? g_pCompositor->m_pLastWindow->m_bIsFullscreen : false;\n+    const auto FSMODE        = g_pCompositor->getWorkspaceByID(PWINDOW->m_iWorkspaceID)->m_efFullscreenMode;\n+\n+    if (WASFULLSCREEN) {",
        "comment_created_at": "2024-01-10T22:21:56+00:00",
        "comment_author": "vaxerski",
        "comment_body": "style nit: no {} around short ifs",
        "pr_file_module": null
      },
      {
        "comment_id": "1448071844",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4402,
        "pr_file": "src/managers/KeybindManager.cpp",
        "discussion_id": "1448053995",
        "commented_code": "@@ -1675,8 +1675,18 @@ void CKeybindManager::focusWindow(std::string regexp) {\n         changeworkspace(PWORKSPACE->getConfigName());\n     }\n \n+    const bool WASFULLSCREEN = g_pCompositor->m_pLastWindow ? g_pCompositor->m_pLastWindow->m_bIsFullscreen : false;\n+    const auto FSMODE        = g_pCompositor->getWorkspaceByID(PWINDOW->m_iWorkspaceID)->m_efFullscreenMode;\n+\n+    if (WASFULLSCREEN) {",
        "comment_created_at": "2024-01-10T22:43:10+00:00",
        "comment_author": "killown",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  }
]