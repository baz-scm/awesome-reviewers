[
  {
    "discussion_id": "2011088849",
    "pr_number": 9658,
    "pr_file": "src/layout/IHyprLayout.cpp",
    "created_at": "2025-03-25T00:13:03+00:00",
    "commented_code": "if (g_pInputManager->currentlyDraggedWindow.expired())\n         return;\n \n-    const auto DRAGGINGWINDOW = g_pInputManager->currentlyDraggedWindow.lock();\n+    const auto  DRAGGINGWINDOW = g_pInputManager->currentlyDraggedWindow.lock();\n+    static auto PDRAGTHRESHOLD = CConfigValue<Hyprlang::INT>(\"input:drag_threshold\");\n \n     // Window invalid or drag begin size 0,0 meaning we rejected it.\n     if ((!validMapped(DRAGGINGWINDOW) || m_vBeginDragSizeXY == Vector2D())) {\n         g_pKeybindManager->changeMouseBindMode(MBIND_INVALID);\n         return;\n     }\n \n+    // Yoink window here instead if using drag_threshold\n+    if (*PDRAGTHRESHOLD > 0 && !g_pInputManager->m_bDragThresholdReached) {\n+        if (m_vBeginDragXY.distance(mousePos) <= *PDRAGTHRESHOLD && m_vBeginDragXY == m_vLastDragXY)",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2011088849",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9658,
        "pr_file": "src/layout/IHyprLayout.cpp",
        "discussion_id": "2011088849",
        "commented_code": "@@ -548,14 +555,43 @@ void IHyprLayout::onMouseMove(const Vector2D& mousePos) {\n     if (g_pInputManager->currentlyDraggedWindow.expired())\n         return;\n \n-    const auto DRAGGINGWINDOW = g_pInputManager->currentlyDraggedWindow.lock();\n+    const auto  DRAGGINGWINDOW = g_pInputManager->currentlyDraggedWindow.lock();\n+    static auto PDRAGTHRESHOLD = CConfigValue<Hyprlang::INT>(\"input:drag_threshold\");\n \n     // Window invalid or drag begin size 0,0 meaning we rejected it.\n     if ((!validMapped(DRAGGINGWINDOW) || m_vBeginDragSizeXY == Vector2D())) {\n         g_pKeybindManager->changeMouseBindMode(MBIND_INVALID);\n         return;\n     }\n \n+    // Yoink window here instead if using drag_threshold\n+    if (*PDRAGTHRESHOLD > 0 && !g_pInputManager->m_bDragThresholdReached) {\n+        if (m_vBeginDragXY.distance(mousePos) <= *PDRAGTHRESHOLD && m_vBeginDragXY == m_vLastDragXY)",
        "comment_created_at": "2025-03-25T00:13:03+00:00",
        "comment_author": "vaxerski",
        "comment_body": "prefer distanceSq",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949994419",
    "pr_number": 9368,
    "pr_file": "src/desktop/Workspace.cpp",
    "created_at": "2025-02-10T22:30:54+00:00",
    "commented_code": "Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1949994419",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-10T22:30:54+00:00",
        "comment_author": "vaxerski",
        "comment_body": "I meant `CCompositor::ensurePersistentWorkspacesPresent`",
        "pr_file_module": null
      },
      {
        "comment_id": "1950025632",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-10T23:09:07+00:00",
        "comment_author": "hariseldon78",
        "comment_body": "No, that method does not touch the workspace `m_bPersistent` property in any way. If i call it without calling `recheckPersistent` the workspace stays alive after renaming, even when empty and no persistent rule on its name.",
        "pr_file_module": null
      },
      {
        "comment_id": "1951012764",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-11T14:58:11+00:00",
        "comment_author": "vaxerski",
        "comment_body": "well then it should, no?",
        "pr_file_module": null
      },
      {
        "comment_id": "1951046559",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-11T15:17:02+00:00",
        "comment_author": "hariseldon78",
        "comment_body": "hmm, at a first look it would be extremely inefficient: that method doesn't not know which workspace have changed, so it needs to check all of them, against each rule, and we already know there is only one change, so it becomes o(rules * workspaces) instead of o(rules).\r\n\r\nwe could mitigate this by passing an optional workspace argument, so the method can restrict the check only to it. do you like this idea?",
        "pr_file_module": null
      },
      {
        "comment_id": "1951077705",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-11T15:33:32+00:00",
        "comment_author": "hariseldon78",
        "comment_body": "ok, maybe I can try that tonight, let's see how it turns out",
        "pr_file_module": null
      },
      {
        "comment_id": "1951120652",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9368,
        "pr_file": "src/desktop/Workspace.cpp",
        "discussion_id": "1949994419",
        "commented_code": "@@ -648,6 +653,8 @@ void CWorkspace::rename(const std::string& name) {\n     Debug::log(LOG, \"CWorkspace::rename: Renaming workspace {} to '{}'\", m_iID, name);\n     m_szName = name;\n \n+    recheckPersistent();",
        "comment_created_at": "2025-02-11T15:57:03+00:00",
        "comment_author": "vaxerski",
        "comment_body": "that is fine ye",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1900468591",
    "pr_number": 8877,
    "pr_file": "src/render/OpenGL.cpp",
    "created_at": "2025-01-01T22:17:21+00:00",
    "commented_code": "return false;\n }\n \n-void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA) {\n+void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA,",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1900468591",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8877,
        "pr_file": "src/render/OpenGL.cpp",
        "discussion_id": "1900468591",
        "commented_code": "@@ -2045,7 +2045,8 @@ bool CHyprOpenGLImpl::shouldUseNewBlurOptimizations(PHLLS pLayer, PHLWINDOW pWin\n     return false;\n }\n \n-void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA) {\n+void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA,",
        "comment_created_at": "2025-01-01T22:17:21+00:00",
        "comment_author": "vaxerski",
        "comment_body": "why this change? why not just multiply it beforehand?",
        "pr_file_module": null
      },
      {
        "comment_id": "1900469723",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8877,
        "pr_file": "src/render/OpenGL.cpp",
        "discussion_id": "1900468591",
        "commented_code": "@@ -2045,7 +2045,8 @@ bool CHyprOpenGLImpl::shouldUseNewBlurOptimizations(PHLLS pLayer, PHLWINDOW pWin\n     return false;\n }\n \n-void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA) {\n+void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA,",
        "comment_created_at": "2025-01-01T22:26:18+00:00",
        "comment_author": "outfoxxed",
        "comment_body": "Because overallA multiplies both the texture and blur texture A, regardless of PBLURIGNOREOPACITY .",
        "pr_file_module": null
      },
      {
        "comment_id": "1900469812",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8877,
        "pr_file": "src/render/OpenGL.cpp",
        "discussion_id": "1900468591",
        "commented_code": "@@ -2045,7 +2045,8 @@ bool CHyprOpenGLImpl::shouldUseNewBlurOptimizations(PHLLS pLayer, PHLWINDOW pWin\n     return false;\n }\n \n-void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA) {\n+void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA,",
        "comment_created_at": "2025-01-01T22:26:54+00:00",
        "comment_author": "outfoxxed",
        "comment_body": "without that we might multiply by overallA^2 if !PBLURIGNOREOPACITY",
        "pr_file_module": null
      },
      {
        "comment_id": "1900473634",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8877,
        "pr_file": "src/render/OpenGL.cpp",
        "discussion_id": "1900468591",
        "commented_code": "@@ -2045,7 +2045,8 @@ bool CHyprOpenGLImpl::shouldUseNewBlurOptimizations(PHLLS pLayer, PHLWINDOW pWin\n     return false;\n }\n \n-void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA) {\n+void CHyprOpenGLImpl::renderTextureWithBlur(SP<CTexture> tex, CBox* pBox, float a, SP<CWLSurfaceResource> pSurface, int round, bool blockBlurOptimization, float blurA,",
        "comment_created_at": "2025-01-01T22:58:41+00:00",
        "comment_author": "vaxerski",
        "comment_body": "makes sens",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2188744469",
    "pr_number": 10952,
    "pr_file": "src/config/ConfigWatcher.cpp",
    "created_at": "2025-07-06T23:54:34+00:00",
    "commented_code": "return;\n         }\n \n+        std::error_code ec, ec2;\n+        const auto      CANONICAL  = std::filesystem::canonical(WD->file, ec);\n+        const auto      IS_SYMLINK = std::filesystem::is_symlink(WD->file, ec2);\n+\n+        if (IS_SYMLINK) {\n+            const auto prev_symlink       = m_symlinks.at(WD->file);\n+            const auto prev_symlink_watch = std::ranges::find_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+\n+            Debug::log(INFO, \"Path {} -> {} got event\", WD->file, prev_symlink);\n+            if (!ec && !ec2 && IS_SYMLINK && CANONICAL != prev_symlink) {\n+                Debug::log(INFO, \"Path {} changed to {}\", WD->file, CANONICAL.c_str());\n+                Debug::log(INFO, \"Removing {} from m_symlinks and m_watches\", prev_symlink);\n+                m_symlinks.insert_or_assign(WD->file, CANONICAL);\n+                const auto [begin, end] = std::ranges::remove_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+                m_watches.erase(begin, end);\n+\n+                Debug::log(INFO, \"Removing {} inotify watch\", prev_symlink);\n+                inotify_rm_watch(m_inotifyFd.get(), prev_symlink_watch->wd);\n+\n+                Debug::log(INFO, \"Adding {} inotify watch\", CANONICAL.c_str());\n+                m_watches.emplace_back(SInotifyWatch{\n+                    .wd   = inotify_add_watch(m_inotifyFd.get(), CANONICAL.c_str(), IN_MODIFY),\n+                    .file = CANONICAL.c_str(),\n+                });",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2188744469",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10952,
        "pr_file": "src/config/ConfigWatcher.cpp",
        "discussion_id": "2188744469",
        "commented_code": "@@ -74,6 +78,33 @@ void CConfigWatcher::onInotifyEvent() {\n             return;\n         }\n \n+        std::error_code ec, ec2;\n+        const auto      CANONICAL  = std::filesystem::canonical(WD->file, ec);\n+        const auto      IS_SYMLINK = std::filesystem::is_symlink(WD->file, ec2);\n+\n+        if (IS_SYMLINK) {\n+            const auto prev_symlink       = m_symlinks.at(WD->file);\n+            const auto prev_symlink_watch = std::ranges::find_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+\n+            Debug::log(INFO, \"Path {} -> {} got event\", WD->file, prev_symlink);\n+            if (!ec && !ec2 && IS_SYMLINK && CANONICAL != prev_symlink) {\n+                Debug::log(INFO, \"Path {} changed to {}\", WD->file, CANONICAL.c_str());\n+                Debug::log(INFO, \"Removing {} from m_symlinks and m_watches\", prev_symlink);\n+                m_symlinks.insert_or_assign(WD->file, CANONICAL);\n+                const auto [begin, end] = std::ranges::remove_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+                m_watches.erase(begin, end);\n+\n+                Debug::log(INFO, \"Removing {} inotify watch\", prev_symlink);\n+                inotify_rm_watch(m_inotifyFd.get(), prev_symlink_watch->wd);\n+\n+                Debug::log(INFO, \"Adding {} inotify watch\", CANONICAL.c_str());\n+                m_watches.emplace_back(SInotifyWatch{\n+                    .wd   = inotify_add_watch(m_inotifyFd.get(), CANONICAL.c_str(), IN_MODIFY),\n+                    .file = CANONICAL.c_str(),\n+                });",
        "comment_created_at": "2025-07-06T23:54:34+00:00",
        "comment_author": "C0Florent",
        "comment_body": "I've been reading this bit of logic again and again to clearly figure out what's happening, and I think we could simply edit in place the vector element which is being updated instead of removing then adding again.\r\n\r\nI also feel like this will be useful because the removal logic seems invalid to me: `std::ranges::remove_if` is already removing elements, so calling `std::erase` right after would probably erase out-of-range elements.\r\n\r\nBy the way, I think we already have access to the previous watch in `prev_symlink_watch`, so there's probably no need to loop (or `remove_if` / `find_id`) over the `m_watches`\r\n\r\nSomething along the lines of the following:\r\n```suggestion\r\n                Debug::log(INFO, \"Removing {} inotify watch\", prev_symlink);\r\n                inotify_rm_watch(m_inotifyFd.get(), prev_symlink_watch->wd);\r\n\r\n                Debug::log(INFO, \"Adding {} inotify watch\", CANONICAL.c_str());\r\n                *prev_symlink_watch = SInotifyWatch{\r\n                    .wd   = inotify_add_watch(m_inotifyFd.get(), CANONICAL.c_str(), IN_MODIFY),\r\n                    .file = CANONICAL.c_str(),\r\n                };\r\n```\r\n\r\nNo idea if this works, untested, but at least it makes sense to me, hopefully makes sense to you too",
        "pr_file_module": null
      },
      {
        "comment_id": "2189332674",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 10952,
        "pr_file": "src/config/ConfigWatcher.cpp",
        "discussion_id": "2188744469",
        "commented_code": "@@ -74,6 +78,33 @@ void CConfigWatcher::onInotifyEvent() {\n             return;\n         }\n \n+        std::error_code ec, ec2;\n+        const auto      CANONICAL  = std::filesystem::canonical(WD->file, ec);\n+        const auto      IS_SYMLINK = std::filesystem::is_symlink(WD->file, ec2);\n+\n+        if (IS_SYMLINK) {\n+            const auto prev_symlink       = m_symlinks.at(WD->file);\n+            const auto prev_symlink_watch = std::ranges::find_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+\n+            Debug::log(INFO, \"Path {} -> {} got event\", WD->file, prev_symlink);\n+            if (!ec && !ec2 && IS_SYMLINK && CANONICAL != prev_symlink) {\n+                Debug::log(INFO, \"Path {} changed to {}\", WD->file, CANONICAL.c_str());\n+                Debug::log(INFO, \"Removing {} from m_symlinks and m_watches\", prev_symlink);\n+                m_symlinks.insert_or_assign(WD->file, CANONICAL);\n+                const auto [begin, end] = std::ranges::remove_if(m_watches, [prev_symlink](const auto& e) { return e.file == prev_symlink; });\n+                m_watches.erase(begin, end);\n+\n+                Debug::log(INFO, \"Removing {} inotify watch\", prev_symlink);\n+                inotify_rm_watch(m_inotifyFd.get(), prev_symlink_watch->wd);\n+\n+                Debug::log(INFO, \"Adding {} inotify watch\", CANONICAL.c_str());\n+                m_watches.emplace_back(SInotifyWatch{\n+                    .wd   = inotify_add_watch(m_inotifyFd.get(), CANONICAL.c_str(), IN_MODIFY),\n+                    .file = CANONICAL.c_str(),\n+                });",
        "comment_created_at": "2025-07-07T08:19:13+00:00",
        "comment_author": "fufexan",
        "comment_body": "`remove/remove_if` doesn't actually remove any elements, it just puts them at the end of the range (or after the last valid iterator). I took https://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom into account when writing this. Seems we can use `erase_if` directly though.\r\n\r\nAnd yeah we can probably directly replace `prev_symlink_watch` instead of remove-emplace.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1922660045",
    "pr_number": 8980,
    "pr_file": "src/managers/eventLoop/EventLoopManager.cpp",
    "created_at": "2025-01-20T16:44:24+00:00",
    "commented_code": "},\n         &m_sIdle);\n }\n+\n+void CEventLoopManager::syncPollFDs() {\n+    auto aqPollFDs = g_pCompositor->m_pAqBackend->getPollFDs();\n+\n+    for (auto it = aqEventSources.begin(); it != aqEventSources.end();) {",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1922660045",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8980,
        "pr_file": "src/managers/eventLoop/EventLoopManager.cpp",
        "discussion_id": "1922660045",
        "commented_code": "@@ -144,3 +145,21 @@ void CEventLoopManager::doLater(const std::function<void()>& fn) {\n         },\n         &m_sIdle);\n }\n+\n+void CEventLoopManager::syncPollFDs() {\n+    auto aqPollFDs = g_pCompositor->m_pAqBackend->getPollFDs();\n+\n+    for (auto it = aqEventSources.begin(); it != aqEventSources.end();) {",
        "comment_created_at": "2025-01-20T16:44:24+00:00",
        "comment_author": "vaxerski",
        "comment_body": "wouldn't `std::erase_if` work better here?",
        "pr_file_module": null
      }
    ]
  }
]