[
  {
    "discussion_id": "2030277284",
    "pr_number": 9805,
    "pr_file": "src/protocols/types/SurfaceState.hpp",
    "created_at": "2025-04-06T21:32:26+00:00",
    "commented_code": "#include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "2030277284",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-06T21:32:26+00:00",
        "comment_author": "vaxerski",
        "comment_body": "first time I see this syntax what the fuck? xD",
        "pr_file_module": null
      },
      {
        "comment_id": "2030279184",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-06T21:42:03+00:00",
        "comment_author": "ikalco",
        "comment_body": "each bool takes up one bit in the 2byte union and compiler does all the bit shifting stuff for us so its nice to use\r\nI can make it just a struct of bools if you want, but I bet the compiler will just optimize it like above",
        "pr_file_module": null
      },
      {
        "comment_id": "2030291371",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-06T22:38:26+00:00",
        "comment_author": "PlasmaPower",
        "comment_body": "If you made a struct of bools normally I think the compiler would have to put each in its own byte for alignment and the ability to take a pointer to each of them",
        "pr_file_module": null
      },
      {
        "comment_id": "2030292888",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-06T22:44:58+00:00",
        "comment_author": "ikalco",
        "comment_body": "maybe  \u00af\\\\_(\u30c4)_/\u00af, who knows its the cpp compiler",
        "pr_file_module": null
      },
      {
        "comment_id": "2031003532",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-07T11:03:05+00:00",
        "comment_author": "vaxerski",
        "comment_body": "can someone verify this works tho? xD like with a small cpp tester",
        "pr_file_module": null
      },
      {
        "comment_id": "2031312962",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-07T13:58:20+00:00",
        "comment_author": "ikalco",
        "comment_body": "<s>https://www.programiz.com/online-compiler/65xnymqumVjNH</s>\r\noops copied wrong thing lol\r\nhttps://www.programiz.com/online-compiler/01U4JWiVjRSl2\r\n\r\n`dothething()` basically ANDs `a` and `b`, so only true if both `a` and `b` are true\r\nand it only works in that scenario :+1: \r\n\r\nalso, heres a reference for the syntax, its called a [bit-field](https://en.cppreference.com/w/cpp/language/bit_field)\r\n\r\nedit:\r\nsame thing in godbolt, it shows the bit shift when accessing too, https://godbolt.org/z/Er7njj8To\r\n```asm\r\nmovzx   eax, BYTE PTR [rbp-2]\r\nshr     al, 6    # this is a shift right instruction, >> in cpp\r\nand     eax, 1\r\nmovzx   eax, al\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2031822443",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 9805,
        "pr_file": "src/protocols/types/SurfaceState.hpp",
        "discussion_id": "2030277284",
        "commented_code": "@@ -2,44 +2,59 @@\n \n #include \"../../helpers/math/Math.hpp\"\n #include \"../WaylandProtocol.hpp\"\n+#include \"./Buffer.hpp\"\n \n-class CHLBufferReference;\n class CTexture;\n+class CDRMSyncPointState;\n \n struct SSurfaceState {\n-    enum eUpdatedProperties : uint8_t {\n-        SURFACE_UPDATED_OPAQUE    = 1 << 0,\n-        SURFACE_UPDATED_INPUT     = 1 << 1,\n-        SURFACE_UPDATED_DAMAGE    = 1 << 2,\n-        SURFACE_UPDATED_SCALE     = 1 << 3,\n-        SURFACE_UPDATED_BUFFER    = 1 << 4,\n-        SURFACE_UPDATED_OFFSET    = 1 << 5,\n-        SURFACE_UPDATED_VIEWPORT  = 1 << 6,\n-        SURFACE_UPDATED_TRANSFORM = 1 << 7,\n-    };\n-\n-    CRegion                opaque, input = CBox{{}, {INT32_MAX, INT32_MAX}}, damage, bufferDamage = CBox{{}, {INT32_MAX, INT32_MAX}} /* initial damage */;\n-    wl_output_transform    transform = WL_OUTPUT_TRANSFORM_NORMAL;\n-    int                    scale     = 1;\n-    SP<CHLBufferReference> buffer; // buffer ref will be released once the buffer is no longer locked. For checking if a buffer is attached to this state, check texture.\n-    SP<CTexture>           texture;\n-    Vector2D               offset;\n-    Vector2D               size, bufferSize;\n+    union {\n+        uint16_t all = 0;\n+        struct {\n+            bool buffer : 1;",
        "comment_created_at": "2025-04-07T18:54:17+00:00",
        "comment_author": "vaxerski",
        "comment_body": "huh. I know what a bitfield is, just never seen this syntax. Great, guess we all learn every day. Thanks!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1806872781",
    "pr_number": 8088,
    "pr_file": "src/layout/IHyprLayout.hpp",
    "created_at": "2024-10-18T18:27:29+00:00",
    "commented_code": "enum eFullscreenMode : int8_t;\n \n enum eRectCorner {\n-    CORNER_NONE = 0,\n-    CORNER_TOPLEFT,\n-    CORNER_TOPRIGHT,\n-    CORNER_BOTTOMRIGHT,\n-    CORNER_BOTTOMLEFT\n+    CORNER_NONE        = 0,\n+    CORNER_TOPLEFT     = 1,",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1806872781",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 8088,
        "pr_file": "src/layout/IHyprLayout.hpp",
        "discussion_id": "1806872781",
        "commented_code": "@@ -18,11 +19,18 @@ struct SLayoutMessageHeader {\n enum eFullscreenMode : int8_t;\n \n enum eRectCorner {\n-    CORNER_NONE = 0,\n-    CORNER_TOPLEFT,\n-    CORNER_TOPRIGHT,\n-    CORNER_BOTTOMRIGHT,\n-    CORNER_BOTTOMLEFT\n+    CORNER_NONE        = 0,\n+    CORNER_TOPLEFT     = 1,",
        "comment_created_at": "2024-10-18T18:27:29+00:00",
        "comment_author": "vaxerski",
        "comment_body": "here and under, use the bitshift notation `(1 << 0)` `(1 << 1)` etc",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1476909084",
    "pr_number": 4514,
    "pr_file": "src/Window.hpp",
    "created_at": "2024-02-03T01:07:08+00:00",
    "commented_code": "GROUP_OVERRIDE    = 1 << 6, // Override other rules\n };\n \n+enum eGetWindowProperties {\n+    WINDOW_ONLY      = 0, // 0, 1, 2 are mutually exclusive\n+    RESERVED_EXTENTS = 1,",
    "repo_full_name": "hyprwm/Hyprland",
    "discussion_comments": [
      {
        "comment_id": "1476909084",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4514,
        "pr_file": "src/Window.hpp",
        "discussion_id": "1476909084",
        "commented_code": "@@ -30,6 +30,14 @@ enum eGroupRules {\n     GROUP_OVERRIDE    = 1 << 6, // Override other rules\n };\n \n+enum eGetWindowProperties {\n+    WINDOW_ONLY      = 0, // 0, 1, 2 are mutually exclusive\n+    RESERVED_EXTENTS = 1,",
        "comment_created_at": "2024-02-03T01:07:08+00:00",
        "comment_author": "vaxerski",
        "comment_body": "with bitfields please make all fields except 0 a `(1 << x)`",
        "pr_file_module": null
      },
      {
        "comment_id": "1476911596",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4514,
        "pr_file": "src/Window.hpp",
        "discussion_id": "1476909084",
        "commented_code": "@@ -30,6 +30,14 @@ enum eGroupRules {\n     GROUP_OVERRIDE    = 1 << 6, // Override other rules\n };\n \n+enum eGetWindowProperties {\n+    WINDOW_ONLY      = 0, // 0, 1, 2 are mutually exclusive\n+    RESERVED_EXTENTS = 1,",
        "comment_created_at": "2024-02-03T01:19:16+00:00",
        "comment_author": "MightyPlaza",
        "comment_body": "since the beginning of the enum is mutually exclusive it doesn't make sense combining them\r\nso we can use numbers that can't be represented as `1 << n`, for example 3\r\n\r\nsince they are less than `1 << 2` (1st element) they don't interfere with it\r\n\r\nshould I still use only `1 << n` for the enum's items?",
        "pr_file_module": null
      },
      {
        "comment_id": "1476913646",
        "repo_full_name": "hyprwm/Hyprland",
        "pr_number": 4514,
        "pr_file": "src/Window.hpp",
        "discussion_id": "1476909084",
        "commented_code": "@@ -30,6 +30,14 @@ enum eGroupRules {\n     GROUP_OVERRIDE    = 1 << 6, // Override other rules\n };\n \n+enum eGetWindowProperties {\n+    WINDOW_ONLY      = 0, // 0, 1, 2 are mutually exclusive\n+    RESERVED_EXTENTS = 1,",
        "comment_created_at": "2024-02-03T01:30:47+00:00",
        "comment_author": "vaxerski",
        "comment_body": "it's a stylistic choice, for consistency",
        "pr_file_module": null
      }
    ]
  }
]