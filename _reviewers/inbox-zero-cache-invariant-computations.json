[
  {
    "discussion_id": "2184876262",
    "pr_number": 541,
    "pr_file": "apps/web/app/api/labels/create/route.ts",
    "created_at": "2025-07-04T09:39:25+00:00",
    "commented_code": "+import { NextResponse } from \"next/server\";\n+import { withEmailAccount } from \"@/utils/middleware\";\n+import prisma from \"@/utils/prisma\";\n+import { createEmailProvider } from \"@/utils/email/provider\";\n+import { z } from \"zod\";\n+\n+const createLabelBody = z.object({\n+  name: z.string(),\n+  description: z.string().nullish(),\n+});\n+\n+export const POST = withEmailAccount(async (request) => {\n+  const emailAccountId = request.auth.emailAccountId;\n+  const body = await request.json();\n+  const { name, description } = createLabelBody.parse(body);\n+\n+  // Get the provider from the related account\n+  const emailAccount = await prisma.emailAccount.findUnique({\n+    where: { id: emailAccountId },\n+    select: {\n+      account: {\n+        select: {\n+          provider: true,\n+        },\n+      },\n+    },\n+  });",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2184876262",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 541,
        "pr_file": "apps/web/app/api/labels/create/route.ts",
        "discussion_id": "2184876262",
        "commented_code": "@@ -0,0 +1,44 @@\n+import { NextResponse } from \"next/server\";\n+import { withEmailAccount } from \"@/utils/middleware\";\n+import prisma from \"@/utils/prisma\";\n+import { createEmailProvider } from \"@/utils/email/provider\";\n+import { z } from \"zod\";\n+\n+const createLabelBody = z.object({\n+  name: z.string(),\n+  description: z.string().nullish(),\n+});\n+\n+export const POST = withEmailAccount(async (request) => {\n+  const emailAccountId = request.auth.emailAccountId;\n+  const body = await request.json();\n+  const { name, description } = createLabelBody.parse(body);\n+\n+  // Get the provider from the related account\n+  const emailAccount = await prisma.emailAccount.findUnique({\n+    where: { id: emailAccountId },\n+    select: {\n+      account: {\n+        select: {\n+          provider: true,\n+        },\n+      },\n+    },\n+  });",
        "comment_created_at": "2025-07-04T09:39:25+00:00",
        "comment_author": "elie222",
        "comment_body": "as we do this in a few places, probably good to just make this:\r\n\r\nawait getProvider() or getAccountProvider()\r\n\r\ncould even optimise it, and store the result in redis similar to what we do here:\r\n`apps/web/utils/redis/account-validation.ts`\r\n\r\nespecially as accountid<>provider will never actually change.\r\n\r\nwe could actually reuse the existing getEmailAccount and have it store an object instead: { email, provider } (instead of just the email string). but to not break production, you need to check if the cached result is an object, and if it isn't, then it's like we have nothing in the cache. and it needs to refetched. alternative is to use a new validation key",
        "pr_file_module": null
      }
    ]
  }
]