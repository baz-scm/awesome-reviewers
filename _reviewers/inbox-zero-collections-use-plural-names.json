[
  {
    "discussion_id": "2127325962",
    "pr_number": 478,
    "pr_file": "packages/resend/emails/digest.tsx",
    "created_at": "2025-06-04T19:49:31+00:00",
    "commented_code": "+import {\n+  Button,\n+  Text,\n+  Html,\n+  Head,\n+  Preview,\n+  Tailwind,\n+  Body,\n+  Container,\n+  Link,\n+  Section,\n+  Img,\n+  Heading,\n+  Row,\n+  Column,\n+  Hr,\n+} from \"@react-email/components\";\n+\n+export interface DigestEmailProps {\n+  baseUrl: string;\n+  unsubscribeToken: string;\n+  date?: Date;\n+  newsletter?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  receipt?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  marketing?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  calendar?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  coldEmail?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  notification?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  toReply?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+}\n+\n+export default function DigestEmail(props: DigestEmailProps) {\n+  const {\n+    baseUrl = \"https://www.getinboxzero.com\",\n+    newsletters = [],\n+    receipts = [],\n+    marketing = [],\n+    calendar = [],\n+    coldEmails = [],\n+    notification = [],\n+    toReply = [],\n+    unsubscribeToken,\n+  } = props;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2127325962",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 478,
        "pr_file": "packages/resend/emails/digest.tsx",
        "discussion_id": "2127325962",
        "commented_code": "@@ -0,0 +1,548 @@\n+import {\n+  Button,\n+  Text,\n+  Html,\n+  Head,\n+  Preview,\n+  Tailwind,\n+  Body,\n+  Container,\n+  Link,\n+  Section,\n+  Img,\n+  Heading,\n+  Row,\n+  Column,\n+  Hr,\n+} from \"@react-email/components\";\n+\n+export interface DigestEmailProps {\n+  baseUrl: string;\n+  unsubscribeToken: string;\n+  date?: Date;\n+  newsletter?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  receipt?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  marketing?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  calendar?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  coldEmail?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  notification?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+  toReply?: {\n+    content: string;\n+    subject: string;\n+    from: string;\n+  }[];\n+}\n+\n+export default function DigestEmail(props: DigestEmailProps) {\n+  const {\n+    baseUrl = \"https://www.getinboxzero.com\",\n+    newsletters = [],\n+    receipts = [],\n+    marketing = [],\n+    calendar = [],\n+    coldEmails = [],\n+    notification = [],\n+    toReply = [],\n+    unsubscribeToken,\n+  } = props;",
        "comment_created_at": "2025-06-04T19:49:31+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Fix critical props mismatch between interface and destructuring.**\n\nThe interface defines singular property names (`newsletter`, `receipt`, `coldEmail`, `notification`) but the destructuring uses plural forms (`newsletters`, `receipts`, `coldEmails`, `notification`). This will cause all email categories to be undefined.\n\n\n\nApply this diff to fix the interface:\n\n```diff\nexport interface DigestEmailProps {\n  baseUrl: string;\n  unsubscribeToken: string;\n  date?: Date;\n- newsletter?: {\n+ newsletters?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n- receipt?: {\n+ receipts?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  marketing?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  calendar?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n- coldEmail?: {\n+ coldEmails?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  notification?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  toReply?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n}\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nexport interface DigestEmailProps {\n  baseUrl: string;\n  unsubscribeToken: string;\n  date?: Date;\n  newsletters?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  receipts?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  marketing?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  calendar?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  coldEmails?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  notification?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n  toReply?: {\n    content: string;\n    subject: string;\n    from: string;\n  }[];\n}\n\nexport default function DigestEmail(props: DigestEmailProps) {\n  const {\n    baseUrl = \"https://www.getinboxzero.com\",\n    newsletters = [],\n    receipts = [],\n    marketing = [],\n    calendar = [],\n    coldEmails = [],\n    notification = [],\n    toReply = [],\n    unsubscribeToken,\n  } = props;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn packages/resend/emails/digest.tsx around lines 19 to 71, the DigestEmailProps\ninterface uses singular property names like newsletter, receipt, coldEmail, and\nnotification, but the DigestEmail function destructures plural forms such as\nnewsletters, receipts, coldEmails, and notification. To fix this, update the\ninterface property names to their plural forms to match the destructuring in the\nfunction, ensuring all email category props are correctly defined and accessed.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commit b7d3959",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2021437030",
    "pr_number": 384,
    "pr_file": "apps/web/app/(app)/automation/onboarding/page.tsx",
    "created_at": "2025-03-31T17:23:32+00:00",
    "commented_code": "import { Card } from \"@/components/ui/card\";\n import { CategoriesSetup } from \"./CategoriesSetup\";\n+import { auth } from \"@/app/api/auth/[...nextauth]/auth\";\n+import prisma from \"@/utils/prisma\";\n+import { ActionType, ColdEmailSetting, type Prisma } from \"@prisma/client\";\n+import type { CategoryAction } from \"@/utils/actions/rule.validation\";\n+import { RuleName } from \"@/utils/rule/consts\";\n+\n+export default async function OnboardingPage() {\n+  const session = await auth();\n+  if (!session?.user.id) return <div>Not authenticated</div>;\n+\n+  const defaultValues = await getUserPreferences(session.user.id);\n \n-export default function OnboardingPage() {\n   return (\n     <Card className=\"my-4 w-full max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n-      <CategoriesSetup />\n+      <CategoriesSetup defaultValues={defaultValues} />\n     </Card>\n   );\n }\n+\n+type UserPreferences = Prisma.UserGetPayload<{\n+  select: {\n+    rules: {\n+      select: {\n+        name: true;\n+        trackReplies: true;\n+        actions: {\n+          select: { type: true };\n+        };\n+      };\n+    };\n+    coldEmailBlocker: true;\n+  };\n+}>;\n+\n+async function getUserPreferences(userId: string) {\n+  const user = await prisma.user.findUnique({\n+    where: { id: userId },\n+    select: {\n+      rules: {\n+        select: {\n+          name: true,\n+          trackReplies: true,\n+          actions: {\n+            select: {\n+              type: true,\n+            },\n+          },\n+        },\n+      },\n+      coldEmailBlocker: true,\n+    },\n+  });\n+  if (!user) return undefined;\n+\n+  return {\n+    toReply: getToReplySetting(user.rules),\n+    coldEmails: getColdEmailSetting(user.coldEmailBlocker),\n+    newsletter: getRuleSetting(RuleName.Newsletter, user.rules),\n+    marketing: getRuleSetting(RuleName.Marketing, user.rules),\n+    calendar: getRuleSetting(RuleName.Calendar, user.rules),\n+    receipt: getRuleSetting(RuleName.Receipt, user.rules),\n+    notification: getRuleSetting(RuleName.Notification, user.rules),\n+  };\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2021437030",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 384,
        "pr_file": "apps/web/app/(app)/automation/onboarding/page.tsx",
        "discussion_id": "2021437030",
        "commented_code": "@@ -1,10 +1,105 @@\n import { Card } from \"@/components/ui/card\";\n import { CategoriesSetup } from \"./CategoriesSetup\";\n+import { auth } from \"@/app/api/auth/[...nextauth]/auth\";\n+import prisma from \"@/utils/prisma\";\n+import { ActionType, ColdEmailSetting, type Prisma } from \"@prisma/client\";\n+import type { CategoryAction } from \"@/utils/actions/rule.validation\";\n+import { RuleName } from \"@/utils/rule/consts\";\n+\n+export default async function OnboardingPage() {\n+  const session = await auth();\n+  if (!session?.user.id) return <div>Not authenticated</div>;\n+\n+  const defaultValues = await getUserPreferences(session.user.id);\n \n-export default function OnboardingPage() {\n   return (\n     <Card className=\"my-4 w-full max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n-      <CategoriesSetup />\n+      <CategoriesSetup defaultValues={defaultValues} />\n     </Card>\n   );\n }\n+\n+type UserPreferences = Prisma.UserGetPayload<{\n+  select: {\n+    rules: {\n+      select: {\n+        name: true;\n+        trackReplies: true;\n+        actions: {\n+          select: { type: true };\n+        };\n+      };\n+    };\n+    coldEmailBlocker: true;\n+  };\n+}>;\n+\n+async function getUserPreferences(userId: string) {\n+  const user = await prisma.user.findUnique({\n+    where: { id: userId },\n+    select: {\n+      rules: {\n+        select: {\n+          name: true,\n+          trackReplies: true,\n+          actions: {\n+            select: {\n+              type: true,\n+            },\n+          },\n+        },\n+      },\n+      coldEmailBlocker: true,\n+    },\n+  });\n+  if (!user) return undefined;\n+\n+  return {\n+    toReply: getToReplySetting(user.rules),\n+    coldEmails: getColdEmailSetting(user.coldEmailBlocker),\n+    newsletter: getRuleSetting(RuleName.Newsletter, user.rules),\n+    marketing: getRuleSetting(RuleName.Marketing, user.rules),\n+    calendar: getRuleSetting(RuleName.Calendar, user.rules),\n+    receipt: getRuleSetting(RuleName.Receipt, user.rules),\n+    notification: getRuleSetting(RuleName.Notification, user.rules),\n+  };\n+}",
        "comment_created_at": "2025-03-31T17:23:32+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Property name mismatch in returned preferences**\n\nThere's a naming inconsistency between the returned properties and what the `CategoriesSetup` component expects.\n\nThe property names in the returned object don't match what `CategoriesSetup` expects. For example, it returns `newsletter` but the component expects `newsletters`, `receipt` vs `receipts`, etc.\n\n```diff\nreturn {\n  toReply: getToReplySetting(user.rules),\n  coldEmails: getColdEmailSetting(user.coldEmailBlocker),\n-  newsletter: getRuleSetting(RuleName.Newsletter, user.rules),\n-  marketing: getRuleSetting(RuleName.Marketing, user.rules),\n-  calendar: getRuleSetting(RuleName.Calendar, user.rules),\n-  receipt: getRuleSetting(RuleName.Receipt, user.rules),\n-  notification: getRuleSetting(RuleName.Notification, user.rules),\n+  newsletters: getRuleSetting(RuleName.Newsletter, user.rules),\n+  marketing: getRuleSetting(RuleName.Marketing, user.rules),\n+  calendar: getRuleSetting(RuleName.Calendar, user.rules),\n+  receipts: getRuleSetting(RuleName.Receipt, user.rules),\n+  notifications: getRuleSetting(RuleName.Notification, user.rules),\n};\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nasync function getUserPreferences(userId: string) {\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: {\n      rules: {\n        select: {\n          name: true,\n          trackReplies: true,\n          actions: {\n            select: {\n              type: true,\n            },\n          },\n        },\n      },\n      coldEmailBlocker: true,\n    },\n  });\n  if (!user) return undefined;\n\n  return {\n    toReply: getToReplySetting(user.rules),\n    coldEmails: getColdEmailSetting(user.coldEmailBlocker),\n    newsletters: getRuleSetting(RuleName.Newsletter, user.rules),\n    marketing: getRuleSetting(RuleName.Marketing, user.rules),\n    calendar: getRuleSetting(RuleName.Calendar, user.rules),\n    receipts: getRuleSetting(RuleName.Receipt, user.rules),\n    notifications: getRuleSetting(RuleName.Notification, user.rules),\n  };\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]