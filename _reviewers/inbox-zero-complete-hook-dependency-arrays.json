[
  {
    "discussion_id": "2030224814",
    "pr_number": 392,
    "pr_file": "apps/web/components/email-list/EmailList.tsx",
    "created_at": "2025-04-06T18:28:15+00:00",
    "commented_code": ");\n   }, [selectedRows, refetch]);\n \n+  const [focusedIndex, setFocusedIndex] = useState(0);\n+\n+  useEffect(() => {\n+    function handleKeyDown(e: KeyboardEvent) {\n+      if (\n+        document.activeElement?.tagName === \"INPUT\" ||\n+        document.activeElement?.tagName === \"TEXTAREA\"\n+      )\n+        return;\n+\n+      const isCmdOrCtrl = e.metaKey || e.ctrlKey;\n+\n+      if (e.key === \"ArrowDown\") {\n+        setFocusedIndex((prev) => Math.min(prev + 1, threads.length - 1));\n+      }\n+\n+      if (e.key === \"ArrowUp\") {\n+        setFocusedIndex((prev) => Math.max(prev - 1, 0));\n+      }\n+\n+      if (e.key === \"r\" || e.key === \"R\") {\n+        if (isCmdOrCtrl) {\n+          e.preventDefault();\n+        }\n+        const thread = threads[focusedIndex];\n+        if (thread) {\n+          setOpenThreadId(thread.id);\n+          markReadThreads([thread.id], () => refetch());\n+          scrollToId(thread.id);\n+        }\n+      }\n+\n+      if (e.key === \"e\" || e.key === \"E\") {\n+        if (isCmdOrCtrl) {\n+          e.preventDefault();\n+        }\n+        const thread = threads[focusedIndex];\n+        if (thread) {\n+          onArchive(thread);\n+        }\n+      }\n+    }\n+\n+    window.addEventListener(\"keydown\", handleKeyDown);\n+    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n+  }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2030224814",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 392,
        "pr_file": "apps/web/components/email-list/EmailList.tsx",
        "discussion_id": "2030224814",
        "commented_code": "@@ -364,6 +364,53 @@ export function EmailList({\n     );\n   }, [selectedRows, refetch]);\n \n+  const [focusedIndex, setFocusedIndex] = useState(0);\n+\n+  useEffect(() => {\n+    function handleKeyDown(e: KeyboardEvent) {\n+      if (\n+        document.activeElement?.tagName === \"INPUT\" ||\n+        document.activeElement?.tagName === \"TEXTAREA\"\n+      )\n+        return;\n+\n+      const isCmdOrCtrl = e.metaKey || e.ctrlKey;\n+\n+      if (e.key === \"ArrowDown\") {\n+        setFocusedIndex((prev) => Math.min(prev + 1, threads.length - 1));\n+      }\n+\n+      if (e.key === \"ArrowUp\") {\n+        setFocusedIndex((prev) => Math.max(prev - 1, 0));\n+      }\n+\n+      if (e.key === \"r\" || e.key === \"R\") {\n+        if (isCmdOrCtrl) {\n+          e.preventDefault();\n+        }\n+        const thread = threads[focusedIndex];\n+        if (thread) {\n+          setOpenThreadId(thread.id);\n+          markReadThreads([thread.id], () => refetch());\n+          scrollToId(thread.id);\n+        }\n+      }\n+\n+      if (e.key === \"e\" || e.key === \"E\") {\n+        if (isCmdOrCtrl) {\n+          e.preventDefault();\n+        }\n+        const thread = threads[focusedIndex];\n+        if (thread) {\n+          onArchive(thread);\n+        }\n+      }\n+    }\n+\n+    window.addEventListener(\"keydown\", handleKeyDown);\n+    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n+  }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch]);",
        "comment_created_at": "2025-04-06T18:28:15+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Missing dependency in useEffect dependency array**\n\nThe `scrollToId` function is used inside the effect but is not included in the dependency array, which could lead to stale closures.\n\nUpdate the dependency array to include all dependencies:\n\n```diff\n- }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch]);\n+ }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch, scrollToId]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  useEffect(() => {\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        document.activeElement?.tagName === \"INPUT\" ||\n        document.activeElement?.tagName === \"TEXTAREA\"\n      )\n        return;\n\n      const isCmdOrCtrl = e.metaKey || e.ctrlKey;\n\n      if (e.key === \"ArrowDown\") {\n        setFocusedIndex((prev) => Math.min(prev + 1, threads.length - 1));\n      }\n\n      if (e.key === \"ArrowUp\") {\n        setFocusedIndex((prev) => Math.max(prev - 1, 0));\n      }\n\n      if (e.key === \"r\" || e.key === \"R\") {\n        if (isCmdOrCtrl) {\n          e.preventDefault();\n        }\n        const thread = threads[focusedIndex];\n        if (thread) {\n          setOpenThreadId(thread.id);\n          markReadThreads([thread.id], () => refetch());\n          scrollToId(thread.id);\n        }\n      }\n\n      if (e.key === \"e\" || e.key === \"E\") {\n        if (isCmdOrCtrl) {\n          e.preventDefault();\n        }\n        const thread = threads[focusedIndex];\n        if (thread) {\n          onArchive(thread);\n        }\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch, scrollToId]);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\uddf0 Tools</summary>\n\n<details>\n<summary>\ud83e\ude9b Biome (1.9.4)</summary>\n\n[error] 369-369: This hook does not specify all of its dependencies: scrollToId\n\nThis dependency is not specified in the hook dependency list.\n\n\n(lint/correctness/useExhaustiveDependencies)\n\n</details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2030267900",
    "pr_number": 392,
    "pr_file": "apps/web/components/email-list/EmailList.tsx",
    "created_at": "2025-04-06T20:52:22+00:00",
    "commented_code": ");\n   }, [selectedRows, refetch]);\n \n+  // useEffect(() => {\n+  //   function handleKeyDown(e: KeyboardEvent) {\n+  //     if (\n+  //       document.activeElement?.tagName === \"INPUT\" ||\n+  //       document.activeElement?.tagName === \"TEXTAREA\"\n+  //     )\n+  //       return;\n+\n+  //     const isCmdOrCtrl = e.metaKey || e.ctrlKey;\n+\n+  //     if (e.key === \"ArrowDown\") {\n+  //       setFocusedIndex((prev) => Math.min(prev + 1, threads.length - 1));\n+  //     }\n+\n+  //     if (e.key === \"ArrowUp\") {\n+  //       setFocusedIndex((prev) => Math.max(prev - 1, 0));\n+  //     }\n+\n+  //     if (e.key === \"r\" || e.key === \"R\") {\n+  //       if (isCmdOrCtrl) {\n+  //         e.preventDefault();\n+  //       }\n+  //       const thread = threads[focusedIndex];\n+  //       if (thread) {\n+  // setOpenThreadId(thread.id);\n+  // markReadThreads([thread.id], () => refetch());\n+  // scrollToId(thread.id);\n+  //       }\n+  //     }\n+\n+  //     if (e.key === \"e\" || e.key === \"E\") {\n+  //       if (isCmdOrCtrl) {\n+  //         e.preventDefault();\n+  //       }\n+  //       const thread = threads[focusedIndex];\n+  //       if (thread) {\n+  //         onArchive(thread);\n+  //       }\n+  //     }\n+  //   }\n+\n+  //   window.addEventListener(\"keydown\", handleKeyDown);\n+  //   return () => window.removeEventListener(\"keydown\", handleKeyDown);\n+  // }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch]);\n+\n+  // const [focusedIndex, setFocusedIndex] = useState(0);\n+\n+  const handleAction = useCallback(\n+    async (index: number, action: \"reply\" | \"archive\") => {\n+      const thread = threads[index];\n+      if (!thread) return;\n+\n+      if (action === \"reply\") {\n+        setOpenThreadId(thread.id);\n+        markReadThreads([thread.id], () => refetch());\n+        scrollToId(thread.id);\n+      } else if (action === \"archive\") {\n+        onArchive(thread);\n+      }\n+    },\n+    [threads, setOpenThreadId],\n+  );",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2030267900",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 392,
        "pr_file": "apps/web/components/email-list/EmailList.tsx",
        "discussion_id": "2030267900",
        "commented_code": "@@ -364,6 +365,71 @@ export function EmailList({\n     );\n   }, [selectedRows, refetch]);\n \n+  // useEffect(() => {\n+  //   function handleKeyDown(e: KeyboardEvent) {\n+  //     if (\n+  //       document.activeElement?.tagName === \"INPUT\" ||\n+  //       document.activeElement?.tagName === \"TEXTAREA\"\n+  //     )\n+  //       return;\n+\n+  //     const isCmdOrCtrl = e.metaKey || e.ctrlKey;\n+\n+  //     if (e.key === \"ArrowDown\") {\n+  //       setFocusedIndex((prev) => Math.min(prev + 1, threads.length - 1));\n+  //     }\n+\n+  //     if (e.key === \"ArrowUp\") {\n+  //       setFocusedIndex((prev) => Math.max(prev - 1, 0));\n+  //     }\n+\n+  //     if (e.key === \"r\" || e.key === \"R\") {\n+  //       if (isCmdOrCtrl) {\n+  //         e.preventDefault();\n+  //       }\n+  //       const thread = threads[focusedIndex];\n+  //       if (thread) {\n+  // setOpenThreadId(thread.id);\n+  // markReadThreads([thread.id], () => refetch());\n+  // scrollToId(thread.id);\n+  //       }\n+  //     }\n+\n+  //     if (e.key === \"e\" || e.key === \"E\") {\n+  //       if (isCmdOrCtrl) {\n+  //         e.preventDefault();\n+  //       }\n+  //       const thread = threads[focusedIndex];\n+  //       if (thread) {\n+  //         onArchive(thread);\n+  //       }\n+  //     }\n+  //   }\n+\n+  //   window.addEventListener(\"keydown\", handleKeyDown);\n+  //   return () => window.removeEventListener(\"keydown\", handleKeyDown);\n+  // }, [threads, focusedIndex, setOpenThreadId, onArchive, refetch]);\n+\n+  // const [focusedIndex, setFocusedIndex] = useState(0);\n+\n+  const handleAction = useCallback(\n+    async (index: number, action: \"reply\" | \"archive\") => {\n+      const thread = threads[index];\n+      if (!thread) return;\n+\n+      if (action === \"reply\") {\n+        setOpenThreadId(thread.id);\n+        markReadThreads([thread.id], () => refetch());\n+        scrollToId(thread.id);\n+      } else if (action === \"archive\") {\n+        onArchive(thread);\n+      }\n+    },\n+    [threads, setOpenThreadId],\n+  );",
        "comment_created_at": "2025-04-06T20:52:22+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Missing dependencies in useCallback dependency array**\n\nThe `handleAction` callback has missing dependencies in its dependency array:\n\n```diff\n- }, [threads, setOpenThreadId],\n+ }, [threads, setOpenThreadId, onArchive, refetch, scrollToId],\n```\n\nThese dependencies are used inside the callback but not included in the dependency array, which could lead to stale closures and unexpected behavior.\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  const handleAction = useCallback(\n    async (index: number, action: \"reply\" | \"archive\") => {\n      const thread = threads[index];\n      if (!thread) return;\n\n      if (action === \"reply\") {\n        setOpenThreadId(thread.id);\n        markReadThreads([thread.id], () => refetch());\n        scrollToId(thread.id);\n      } else if (action === \"archive\") {\n        onArchive(thread);\n      }\n    },\n    [threads, setOpenThreadId, onArchive, refetch, scrollToId],\n  );\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\uddf0 Tools</summary>\n\n<details>\n<summary>\ud83e\ude9b Biome (1.9.4)</summary>\n\n[error] 415-415: This hook does not specify all of its dependencies: onArchive\n\nThis dependency is not specified in the hook dependency list.\n\n\n(lint/correctness/useExhaustiveDependencies)\n\n---\n\n[error] 415-415: This hook does not specify all of its dependencies: refetch\n\nThis dependency is not specified in the hook dependency list.\n\n\n(lint/correctness/useExhaustiveDependencies)\n\n---\n\n[error] 415-415: This hook does not specify all of its dependencies: scrollToId\n\nThis dependency is not specified in the hook dependency list.\n\n\n(lint/correctness/useExhaustiveDependencies)\n\n</details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083466845",
    "pr_number": 431,
    "pr_file": "apps/web/components/assistant-chat/multimodal-input.tsx",
    "created_at": "2025-05-11T09:35:06+00:00",
    "commented_code": "+\"use client\";\n+\n+import type { Attachment, UIMessage } from \"ai\";\n+import type React from \"react\";\n+import {\n+  useRef,\n+  useEffect,\n+  useCallback,\n+  type Dispatch,\n+  type SetStateAction,\n+  memo,\n+} from \"react\";\n+import { toast } from \"sonner\";\n+import { useLocalStorage, useWindowSize } from \"usehooks-ts\";\n+import equal from \"fast-deep-equal\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+\n+import { ArrowUpIcon, StopIcon } from \"./icons\";\n+import { Button } from \"@/components/ui/button\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { SuggestedActions } from \"./suggested-actions\";\n+import { cn } from \"@/utils\";\n+\n+function PureMultimodalInput({\n+  chatId,\n+  input,\n+  setInput,\n+  status,\n+  stop,\n+  messages,\n+  setMessages,\n+  append,\n+  handleSubmit,\n+  className,\n+}: {\n+  chatId: string;\n+  input: UseChatHelpers[\"input\"];\n+  setInput: UseChatHelpers[\"setInput\"];\n+  status: UseChatHelpers[\"status\"];\n+  stop: () => void;\n+  attachments: Array<Attachment>;\n+  setAttachments: Dispatch<SetStateAction<Array<Attachment>>>;\n+  messages: Array<UIMessage>;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  append: UseChatHelpers[\"append\"];\n+  handleSubmit: UseChatHelpers[\"handleSubmit\"];\n+  className?: string;\n+}) {\n+  const textareaRef = useRef<HTMLTextAreaElement>(null);\n+  const { width } = useWindowSize();\n+\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      adjustHeight();\n+    }\n+  }, []);\n+\n+  const adjustHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n+    }\n+  };\n+\n+  const resetHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = \"98px\";\n+    }\n+  };\n+\n+  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n+    \"input\",\n+    \"\",\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      const domValue = textareaRef.current.value;\n+      // Prefer DOM value over localStorage to handle hydration\n+      const finalValue = domValue || localStorageInput || \"\";\n+      setInput(finalValue);\n+      adjustHeight();\n+    }\n+    // Only run once after hydration\n+  }, []);\n+\n+  useEffect(() => {\n+    setLocalStorageInput(input);\n+  }, [input, setLocalStorageInput]);\n+\n+  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n+    setInput(event.target.value);\n+    adjustHeight();\n+  };\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  const submitForm = useCallback(() => {\n+    // window.history.replaceState({}, \"\", `/chat/${chatId}`);\n+\n+    handleSubmit(undefined);\n+\n+    setLocalStorageInput(\"\");\n+    resetHeight();\n+\n+    if (width && width > 768) {\n+      textareaRef.current?.focus();\n+    }\n+  }, [handleSubmit, setLocalStorageInput, width, chatId]);\n+\n+  return (\n+    <div className=\"relative flex w-full flex-col gap-4\">\n+      {messages.length === 0 && (\n+        <SuggestedActions append={append} chatId={chatId} />\n+      )}\n+\n+      <Textarea\n+        data-testid=\"multimodal-input\"\n+        ref={textareaRef}\n+        placeholder=\"Send a message...\"\n+        value={input}\n+        onChange={handleInput}\n+        className={cn(\n+          \"max-h-[calc(75dvh)] min-h-[24px] resize-none overflow-hidden rounded-2xl bg-muted pb-10 !text-base dark:border-zinc-700\",\n+          className,\n+        )}\n+        rows={2}\n+        autoFocus\n+        onKeyDown={(event) => {\n+          if (\n+            event.key === \"Enter\" &&\n+            !event.shiftKey &&\n+            !event.nativeEvent.isComposing\n+          ) {\n+            event.preventDefault();\n+\n+            if (status !== \"ready\") {\n+              toast.error(\"Please wait for the model to finish its response!\");\n+            } else {\n+              submitForm();\n+            }\n+          }\n+        }}\n+      />\n+\n+      <div className=\"absolute bottom-0 right-0 flex w-fit flex-row justify-end p-2\">\n+        {status === \"submitted\" ? (\n+          <StopButton stop={stop} setMessages={setMessages} />\n+        ) : (\n+          <SendButton input={input} submitForm={submitForm} />\n+        )}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+export const MultimodalInput = memo(\n+  PureMultimodalInput,\n+  (prevProps, nextProps) => {\n+    if (prevProps.input !== nextProps.input) return false;\n+    if (prevProps.status !== nextProps.status) return false;\n+    if (!equal(prevProps.attachments, nextProps.attachments)) return false;\n+\n+    return true;\n+  },\n+);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083466845",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/components/assistant-chat/multimodal-input.tsx",
        "discussion_id": "2083466845",
        "commented_code": "@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import type { Attachment, UIMessage } from \"ai\";\n+import type React from \"react\";\n+import {\n+  useRef,\n+  useEffect,\n+  useCallback,\n+  type Dispatch,\n+  type SetStateAction,\n+  memo,\n+} from \"react\";\n+import { toast } from \"sonner\";\n+import { useLocalStorage, useWindowSize } from \"usehooks-ts\";\n+import equal from \"fast-deep-equal\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+\n+import { ArrowUpIcon, StopIcon } from \"./icons\";\n+import { Button } from \"@/components/ui/button\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { SuggestedActions } from \"./suggested-actions\";\n+import { cn } from \"@/utils\";\n+\n+function PureMultimodalInput({\n+  chatId,\n+  input,\n+  setInput,\n+  status,\n+  stop,\n+  messages,\n+  setMessages,\n+  append,\n+  handleSubmit,\n+  className,\n+}: {\n+  chatId: string;\n+  input: UseChatHelpers[\"input\"];\n+  setInput: UseChatHelpers[\"setInput\"];\n+  status: UseChatHelpers[\"status\"];\n+  stop: () => void;\n+  attachments: Array<Attachment>;\n+  setAttachments: Dispatch<SetStateAction<Array<Attachment>>>;\n+  messages: Array<UIMessage>;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  append: UseChatHelpers[\"append\"];\n+  handleSubmit: UseChatHelpers[\"handleSubmit\"];\n+  className?: string;\n+}) {\n+  const textareaRef = useRef<HTMLTextAreaElement>(null);\n+  const { width } = useWindowSize();\n+\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      adjustHeight();\n+    }\n+  }, []);\n+\n+  const adjustHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n+    }\n+  };\n+\n+  const resetHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = \"98px\";\n+    }\n+  };\n+\n+  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n+    \"input\",\n+    \"\",\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      const domValue = textareaRef.current.value;\n+      // Prefer DOM value over localStorage to handle hydration\n+      const finalValue = domValue || localStorageInput || \"\";\n+      setInput(finalValue);\n+      adjustHeight();\n+    }\n+    // Only run once after hydration\n+  }, []);\n+\n+  useEffect(() => {\n+    setLocalStorageInput(input);\n+  }, [input, setLocalStorageInput]);\n+\n+  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n+    setInput(event.target.value);\n+    adjustHeight();\n+  };\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  const submitForm = useCallback(() => {\n+    // window.history.replaceState({}, \"\", `/chat/${chatId}`);\n+\n+    handleSubmit(undefined);\n+\n+    setLocalStorageInput(\"\");\n+    resetHeight();\n+\n+    if (width && width > 768) {\n+      textareaRef.current?.focus();\n+    }\n+  }, [handleSubmit, setLocalStorageInput, width, chatId]);\n+\n+  return (\n+    <div className=\"relative flex w-full flex-col gap-4\">\n+      {messages.length === 0 && (\n+        <SuggestedActions append={append} chatId={chatId} />\n+      )}\n+\n+      <Textarea\n+        data-testid=\"multimodal-input\"\n+        ref={textareaRef}\n+        placeholder=\"Send a message...\"\n+        value={input}\n+        onChange={handleInput}\n+        className={cn(\n+          \"max-h-[calc(75dvh)] min-h-[24px] resize-none overflow-hidden rounded-2xl bg-muted pb-10 !text-base dark:border-zinc-700\",\n+          className,\n+        )}\n+        rows={2}\n+        autoFocus\n+        onKeyDown={(event) => {\n+          if (\n+            event.key === \"Enter\" &&\n+            !event.shiftKey &&\n+            !event.nativeEvent.isComposing\n+          ) {\n+            event.preventDefault();\n+\n+            if (status !== \"ready\") {\n+              toast.error(\"Please wait for the model to finish its response!\");\n+            } else {\n+              submitForm();\n+            }\n+          }\n+        }}\n+      />\n+\n+      <div className=\"absolute bottom-0 right-0 flex w-fit flex-row justify-end p-2\">\n+        {status === \"submitted\" ? (\n+          <StopButton stop={stop} setMessages={setMessages} />\n+        ) : (\n+          <SendButton input={input} submitForm={submitForm} />\n+        )}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+export const MultimodalInput = memo(\n+  PureMultimodalInput,\n+  (prevProps, nextProps) => {\n+    if (prevProps.input !== nextProps.input) return false;\n+    if (prevProps.status !== nextProps.status) return false;\n+    if (!equal(prevProps.attachments, nextProps.attachments)) return false;\n+\n+    return true;\n+  },\n+);",
        "comment_created_at": "2025-05-11T09:35:06+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Memoization error in MultimodalInput component.**\n\nThe memoization check includes `attachments` but this parameter doesn't exist in the `PureMultimodalInput` implementation, making this comparison ineffective.\n\n```diff\nexport const MultimodalInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.input !== nextProps.input) return false;\n    if (prevProps.status !== nextProps.status) return false;\n-   if (!equal(prevProps.attachments, nextProps.attachments)) return false;\n+   // Make sure this matches an actual parameter used in the component\n+   if (!equal(prevProps.attachments, nextProps.attachments)) return false;\n\n    return true;\n  },\n);\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits 65ff47c to 679a971",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083466847",
    "pr_number": 431,
    "pr_file": "apps/web/components/assistant-chat/multimodal-input.tsx",
    "created_at": "2025-05-11T09:35:06+00:00",
    "commented_code": "+\"use client\";\n+\n+import type { Attachment, UIMessage } from \"ai\";\n+import type React from \"react\";\n+import {\n+  useRef,\n+  useEffect,\n+  useCallback,\n+  type Dispatch,\n+  type SetStateAction,\n+  memo,\n+} from \"react\";\n+import { toast } from \"sonner\";\n+import { useLocalStorage, useWindowSize } from \"usehooks-ts\";\n+import equal from \"fast-deep-equal\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+\n+import { ArrowUpIcon, StopIcon } from \"./icons\";\n+import { Button } from \"@/components/ui/button\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { SuggestedActions } from \"./suggested-actions\";\n+import { cn } from \"@/utils\";\n+\n+function PureMultimodalInput({\n+  chatId,\n+  input,\n+  setInput,\n+  status,\n+  stop,\n+  messages,\n+  setMessages,\n+  append,\n+  handleSubmit,\n+  className,\n+}: {\n+  chatId: string;\n+  input: UseChatHelpers[\"input\"];\n+  setInput: UseChatHelpers[\"setInput\"];\n+  status: UseChatHelpers[\"status\"];\n+  stop: () => void;\n+  attachments: Array<Attachment>;\n+  setAttachments: Dispatch<SetStateAction<Array<Attachment>>>;\n+  messages: Array<UIMessage>;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  append: UseChatHelpers[\"append\"];\n+  handleSubmit: UseChatHelpers[\"handleSubmit\"];\n+  className?: string;\n+}) {\n+  const textareaRef = useRef<HTMLTextAreaElement>(null);\n+  const { width } = useWindowSize();\n+\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      adjustHeight();\n+    }\n+  }, []);\n+\n+  const adjustHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n+    }\n+  };\n+\n+  const resetHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = \"98px\";\n+    }\n+  };\n+\n+  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n+    \"input\",\n+    \"\",\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      const domValue = textareaRef.current.value;\n+      // Prefer DOM value over localStorage to handle hydration\n+      const finalValue = domValue || localStorageInput || \"\";\n+      setInput(finalValue);\n+      adjustHeight();\n+    }\n+    // Only run once after hydration\n+  }, []);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083466847",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/components/assistant-chat/multimodal-input.tsx",
        "discussion_id": "2083466847",
        "commented_code": "@@ -0,0 +1,218 @@\n+\"use client\";\n+\n+import type { Attachment, UIMessage } from \"ai\";\n+import type React from \"react\";\n+import {\n+  useRef,\n+  useEffect,\n+  useCallback,\n+  type Dispatch,\n+  type SetStateAction,\n+  memo,\n+} from \"react\";\n+import { toast } from \"sonner\";\n+import { useLocalStorage, useWindowSize } from \"usehooks-ts\";\n+import equal from \"fast-deep-equal\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+\n+import { ArrowUpIcon, StopIcon } from \"./icons\";\n+import { Button } from \"@/components/ui/button\";\n+import { Textarea } from \"@/components/ui/textarea\";\n+import { SuggestedActions } from \"./suggested-actions\";\n+import { cn } from \"@/utils\";\n+\n+function PureMultimodalInput({\n+  chatId,\n+  input,\n+  setInput,\n+  status,\n+  stop,\n+  messages,\n+  setMessages,\n+  append,\n+  handleSubmit,\n+  className,\n+}: {\n+  chatId: string;\n+  input: UseChatHelpers[\"input\"];\n+  setInput: UseChatHelpers[\"setInput\"];\n+  status: UseChatHelpers[\"status\"];\n+  stop: () => void;\n+  attachments: Array<Attachment>;\n+  setAttachments: Dispatch<SetStateAction<Array<Attachment>>>;\n+  messages: Array<UIMessage>;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  append: UseChatHelpers[\"append\"];\n+  handleSubmit: UseChatHelpers[\"handleSubmit\"];\n+  className?: string;\n+}) {\n+  const textareaRef = useRef<HTMLTextAreaElement>(null);\n+  const { width } = useWindowSize();\n+\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      adjustHeight();\n+    }\n+  }, []);\n+\n+  const adjustHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n+    }\n+  };\n+\n+  const resetHeight = () => {\n+    if (textareaRef.current) {\n+      textareaRef.current.style.height = \"auto\";\n+      textareaRef.current.style.height = \"98px\";\n+    }\n+  };\n+\n+  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n+    \"input\",\n+    \"\",\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n+  useEffect(() => {\n+    if (textareaRef.current) {\n+      const domValue = textareaRef.current.value;\n+      // Prefer DOM value over localStorage to handle hydration\n+      const finalValue = domValue || localStorageInput || \"\";\n+      setInput(finalValue);\n+      adjustHeight();\n+    }\n+    // Only run once after hydration\n+  }, []);",
        "comment_created_at": "2025-05-11T09:35:06+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Incomplete dependency array in useEffect hook.**\n\nThis useEffect is missing dependencies that are used inside the effect. Even though there's a biome-ignore comment, it's better to fix this for code maintainability.\n\n```diff\n- // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n- useEffect(() => {\n+ useEffect(() => {\n  if (textareaRef.current) {\n    const domValue = textareaRef.current.value;\n    // Prefer DOM value over localStorage to handle hydration\n    const finalValue = domValue || localStorageInput || \"\";\n    setInput(finalValue);\n    adjustHeight();\n  }\n  // Only run once after hydration\n-}, []);\n+}, [localStorageInput, setInput]);\n```\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]