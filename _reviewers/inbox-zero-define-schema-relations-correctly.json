[
  {
    "discussion_id": "2161515480",
    "pr_number": 519,
    "pr_file": "apps/web/prisma/schema.prisma",
    "created_at": "2025-06-23T12:33:55+00:00",
    "commented_code": "url     String?\n \n   // additional fields as a result of the action\n-  draftId      String? // Gmail draft ID created by DRAFT_EMAIL action\n-  wasDraftSent Boolean? // Tracks if the corresponding draft was sent (true) or ignored/superseded (false)\n-  draftSendLog DraftSendLog? // Will exist if the draft was sent\n-  digestItems  DigestItem[] // Relation to digest items created by this action\n+  draftId         String? // Gmail draft ID created by DRAFT_EMAIL action\n+  wasDraftSent    Boolean? // Tracks if the corresponding draft was sent (true) or ignored/superseded (false)\n+  draftSendLog    DraftSendLog? // Will exist if the draft was sent\n+  digestItems     DigestItem[] // Relation to digest items created by this action\n+  scheduledAction ScheduledAction? // Reverse relation for delayed actions\n+}\n+\n+model ScheduledAction {\n+  id             String                @id @default(cuid())\n+  executedRuleId String\n+  actionType     ActionType\n+  messageId      String\n+  threadId       String\n+  scheduledFor   DateTime\n+  emailAccountId String\n+  status         ScheduledActionStatus @default(PENDING)\n+\n+  // ActionItem data storage\n+  label   String?\n+  subject String?\n+  content String?\n+  to      String?\n+  cc      String?\n+  bcc     String?\n+  url     String?\n+\n+  // Execution tracking\n+  executedAt       DateTime?\n+  executedActionId String?   @unique\n+  errorMessage     String?\n+  retryCount       Int       @default(0)\n+\n+  // Timestamps\n+  createdAt DateTime @default(now())\n+  updatedAt DateTime @updatedAt\n+\n+  // Relations\n+  executedRule   ExecutedRule    @relation(fields: [executedRuleId], references: [id], onDelete: Cascade)\n+  executedAction ExecutedAction? @relation(fields: [executedActionId], references: [id])\n+  emailAccount   EmailAccount    @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)\n+\n+  @@unique([executedRuleId, actionType])",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2161515480",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/prisma/schema.prisma",
        "discussion_id": "2161515480",
        "commented_code": "@@ -418,10 +422,51 @@ model ExecutedAction {\n   url     String?\n \n   // additional fields as a result of the action\n-  draftId      String? // Gmail draft ID created by DRAFT_EMAIL action\n-  wasDraftSent Boolean? // Tracks if the corresponding draft was sent (true) or ignored/superseded (false)\n-  draftSendLog DraftSendLog? // Will exist if the draft was sent\n-  digestItems  DigestItem[] // Relation to digest items created by this action\n+  draftId         String? // Gmail draft ID created by DRAFT_EMAIL action\n+  wasDraftSent    Boolean? // Tracks if the corresponding draft was sent (true) or ignored/superseded (false)\n+  draftSendLog    DraftSendLog? // Will exist if the draft was sent\n+  digestItems     DigestItem[] // Relation to digest items created by this action\n+  scheduledAction ScheduledAction? // Reverse relation for delayed actions\n+}\n+\n+model ScheduledAction {\n+  id             String                @id @default(cuid())\n+  executedRuleId String\n+  actionType     ActionType\n+  messageId      String\n+  threadId       String\n+  scheduledFor   DateTime\n+  emailAccountId String\n+  status         ScheduledActionStatus @default(PENDING)\n+\n+  // ActionItem data storage\n+  label   String?\n+  subject String?\n+  content String?\n+  to      String?\n+  cc      String?\n+  bcc     String?\n+  url     String?\n+\n+  // Execution tracking\n+  executedAt       DateTime?\n+  executedActionId String?   @unique\n+  errorMessage     String?\n+  retryCount       Int       @default(0)\n+\n+  // Timestamps\n+  createdAt DateTime @default(now())\n+  updatedAt DateTime @updatedAt\n+\n+  // Relations\n+  executedRule   ExecutedRule    @relation(fields: [executedRuleId], references: [id], onDelete: Cascade)\n+  executedAction ExecutedAction? @relation(fields: [executedActionId], references: [id])\n+  emailAccount   EmailAccount    @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)\n+\n+  @@unique([executedRuleId, actionType])",
        "comment_created_at": "2025-06-23T12:33:55+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Critical: Unique constraint prevents multiple actions of the same type**\n\nThe constraint `@@unique([executedRuleId, actionType])` prevents scheduling multiple actions of the same type for a single executed rule. This is problematic for scenarios like:\n- Multiple LABEL actions with different labels\n- Multiple FORWARD actions to different recipients\n\nConsider removing this constraint or replacing it with a composite unique constraint that includes more specific identifiers.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/prisma/schema.prisma at line 466, the unique constraint\n@@unique([executedRuleId, actionType]) restricts scheduling multiple actions of\nthe same type for a single executed rule. To fix this, remove this unique\nconstraint or modify it to include additional fields that uniquely identify each\naction, such as an action-specific identifier or parameters, allowing multiple\nactions of the same type with different details.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:medusa:lion -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2151115262",
    "pr_number": 478,
    "pr_file": "apps/web/prisma/schema.prisma",
    "created_at": "2025-06-17T00:44:27+00:00",
    "commented_code": "summaryEmailFrequency Frequency         @default(WEEKLY)\n   lastSummaryEmailAt    DateTime?\n   coldEmailBlocker      ColdEmailSetting?\n+  coldEmailDigest       Boolean           @default(false)\n   coldEmailPrompt       String?\n   rulesPrompt           String?\n   outboundReplyTracking Boolean           @default(false)\n   autoCategorizeSenders Boolean           @default(false)\n \n+  // Digest email settings\n+  digestSchedule   Schedule?\n+  digestScheduleId String?  @unique\n+",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2151115262",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 478,
        "pr_file": "apps/web/prisma/schema.prisma",
        "discussion_id": "2151115262",
        "commented_code": "@@ -112,11 +112,16 @@ model EmailAccount {\n   summaryEmailFrequency Frequency         @default(WEEKLY)\n   lastSummaryEmailAt    DateTime?\n   coldEmailBlocker      ColdEmailSetting?\n+  coldEmailDigest       Boolean           @default(false)\n   coldEmailPrompt       String?\n   rulesPrompt           String?\n   outboundReplyTracking Boolean           @default(false)\n   autoCategorizeSenders Boolean           @default(false)\n \n+  // Digest email settings\n+  digestSchedule   Schedule?\n+  digestScheduleId String?  @unique\n+",
        "comment_created_at": "2025-06-17T00:44:27+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Extraneous `digestScheduleId` field breaks the one-to-one relation**\n\n`Schedule` already owns the FK (`emailAccountId`) and enforces a unique constraint.  \nHaving an unrelated `digestScheduleId String? @unique` on `EmailAccount` introduces a dangling column that Prisma will never populate, and will cause `null`-vs-`NOT NULL` headaches on migrations.\n\n```diff\n-  digestSchedule   Schedule?\n-  digestScheduleId String?  @unique\n+  digestSchedule   Schedule? // reverse side of the 1-1 relation; no extra FK column needed\n```\n\nDrop the stray field and let Prisma\u2019s implicit relation handle it.\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  // Digest email settings\n-  digestSchedule   Schedule?\n-  digestScheduleId String?  @unique\n+  digestSchedule   Schedule? // reverse side of the 1-1 relation; no extra FK column needed\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/prisma/schema.prisma around lines 121 to 124, remove the extraneous\nfield digestScheduleId String? @unique from the EmailAccount model because\nSchedule already owns the foreign key with a unique constraint. This redundant\nfield creates a dangling column that Prisma does not populate and causes\nmigration issues. Rely on Prisma's implicit relation by keeping only the\ndigestSchedule Schedule? field to maintain the one-to-one relationship\ncorrectly.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051699100",
    "pr_number": 410,
    "pr_file": "apps/web/prisma/schema.prisma",
    "created_at": "2025-04-20T11:18:18+00:00",
    "commented_code": "// Migrating over to the new settings model. Currently most settings are in the User model, but will be moved to this model in the future.\n model EmailAccount {\n-  id           String   @id @default(cuid())\n+  // id           String   @id @default(cuid())\n+  email        String   @unique\n   createdAt    DateTime @default(now())\n   updatedAt    DateTime @updatedAt\n-  email        String   @unique\n   writingStyle String?\n \n+  about                     String?\n+  signature                 String?\n+  watchEmailsExpirationDate DateTime?\n+  lastSyncedHistoryId       String?\n+  behaviorProfile           Json?\n+\n+  aiProvider            String?\n+  aiModel               String?\n+  aiApiKey              String?\n+  statsEmailFrequency   Frequency         @default(WEEKLY)\n+  summaryEmailFrequency Frequency         @default(WEEKLY)\n+  lastSummaryEmailAt    DateTime?\n+  coldEmailBlocker      ColdEmailSetting?\n+  coldEmailPrompt       String?\n+  rulesPrompt           String?\n+  webhookSecret         String?\n+  outboundReplyTracking Boolean           @default(false)\n+  autoCategorizeSenders Boolean           @default(false)\n+\n   // To add at a later date:\n-  // about String?\n   // signature String?\n   // ...\n \n   userId    String\n   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n   accountId String   @unique\n   account   Account?\n+",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2051699100",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 410,
        "pr_file": "apps/web/prisma/schema.prisma",
        "discussion_id": "2051699100",
        "commented_code": "@@ -109,21 +109,43 @@ model User {\n \n // Migrating over to the new settings model. Currently most settings are in the User model, but will be moved to this model in the future.\n model EmailAccount {\n-  id           String   @id @default(cuid())\n+  // id           String   @id @default(cuid())\n+  email        String   @unique\n   createdAt    DateTime @default(now())\n   updatedAt    DateTime @updatedAt\n-  email        String   @unique\n   writingStyle String?\n \n+  about                     String?\n+  signature                 String?\n+  watchEmailsExpirationDate DateTime?\n+  lastSyncedHistoryId       String?\n+  behaviorProfile           Json?\n+\n+  aiProvider            String?\n+  aiModel               String?\n+  aiApiKey              String?\n+  statsEmailFrequency   Frequency         @default(WEEKLY)\n+  summaryEmailFrequency Frequency         @default(WEEKLY)\n+  lastSummaryEmailAt    DateTime?\n+  coldEmailBlocker      ColdEmailSetting?\n+  coldEmailPrompt       String?\n+  rulesPrompt           String?\n+  webhookSecret         String?\n+  outboundReplyTracking Boolean           @default(false)\n+  autoCategorizeSenders Boolean           @default(false)\n+\n   // To add at a later date:\n-  // about String?\n   // signature String?\n   // ...\n \n   userId    String\n   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n   accountId String   @unique\n   account   Account?\n+",
        "comment_created_at": "2025-04-20T11:18:18+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Broken relation to `Account`**\n\n`account   Account?` has no `@relation(fields: [accountId], references: [id])`, so Prisma generates an implicit relation using a phantom `AccountId` that does not exist. Add the explicit relation:\n\n```diff\n-accountId String   @unique\n-account   Account?\n+accountId String   @unique\n+account   Account? @relation(fields: [accountId], references: [id])\n```\n\nAlso ensure `accountId` is nullable until the backfill is complete.  \n  \n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051699102",
    "pr_number": 410,
    "pr_file": "apps/web/prisma/schema.prisma",
    "created_at": "2025-04-20T11:18:18+00:00",
    "commented_code": "// Migrating over to the new settings model. Currently most settings are in the User model, but will be moved to this model in the future.\n model EmailAccount {\n-  id           String   @id @default(cuid())\n+  // id           String   @id @default(cuid())\n+  email        String   @unique\n   createdAt    DateTime @default(now())",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2051699102",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 410,
        "pr_file": "apps/web/prisma/schema.prisma",
        "discussion_id": "2051699102",
        "commented_code": "@@ -109,21 +109,43 @@\n \n // Migrating over to the new settings model. Currently most settings are in the User model, but will be moved to this model in the future.\n model EmailAccount {\n-  id           String   @id @default(cuid())\n+  // id           String   @id @default(cuid())\n+  email        String   @unique\n   createdAt    DateTime @default(now())",
        "comment_created_at": "2025-04-20T11:18:18+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**`EmailAccount` lacks a primary key \u2013 schema will not compile**\n\nThe `id` field is commented out and `email` is only `@unique`, not `@id`. Every Prisma model requires a primary key. Two safe options:\n\n```diff\n-// id           String   @id @default(cuid())\n-email        String   @unique\n+email String @id\n```\n\nor keep the UUID `id` and keep `email` unique.\n\nCompilation currently fails with:\n\n```\nError validating model \"EmailAccount\": You must provide a valid @id attribute...\n```\n  \n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  email String @id\n  createdAt DateTime @default(now())\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commit d6caf73",
        "pr_file_module": null
      }
    ]
  }
]