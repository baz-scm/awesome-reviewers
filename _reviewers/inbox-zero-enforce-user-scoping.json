[
  {
    "discussion_id": "2160420508",
    "pr_number": 478,
    "pr_file": ".cursor/rules/security-audit.mdc",
    "created_at": "2025-06-22T18:07:57+00:00",
    "commented_code": "+---\n+description: Security audit report commands\n+globs: \n+alwaysApply: false\n+---\n+# Security Audit Tools\n+\n+## Quick Security Audit Script\n+\n+Run this from your project root to check for potential security issues:\n+\n+```bash\n+#!/bin/bash\n+# security-audit.sh - Quick security audit for API routes\n+\n+echo \"\ud83d\udd0d Security Audit Report\"\n+echo \"========================\"\n+\n+echo -e \"\n1. Routes without authentication middleware:\"\n+echo \"   (These should use withAuth, withEmailAccount, or have custom auth)\"\n+grep -r \"export const \\(GET\\|POST\\|PUT\\|DELETE\\)\" apps/web/app/api/ | \\\n+  grep -v \"withEmailAccount\\|withAuth\\|withError\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\n2. Direct Prisma queries without user scoping:\"\n+echo \"   (Check these manually for emailAccountId/userId filtering)\"\n+grep -r \"prisma\\.\\w*\\.find\" apps/web/app/api/ | \\\n+  grep -v \"emailAccountId\\|userId\" | \\\n+  head -10\n+\n+echo -e \"\n3. Routes using withError (verify they have custom auth):\"\n+grep -r \"withError\" apps/web/app/api/ | \\\n+  grep \"export const\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\n4. Potential parameter injection points:\"\n+grep -r \"params\\.\" apps/web/app/api/ | \\\n+  grep -v \"await params\" | \\\n+  head -5\n+\n+echo -e \"\n5. \ud83d\udea8 CRITICAL: Potential unprotected cron endpoints:\"\n+echo \"   (Check manually - these use withError but not hasCronSecret)\"\n+echo \"   (Some may be API endpoints with custom auth like validateApiKey)\"\n+grep -r \"withError.*async.*request\" apps/web/app/api/ | \\\n+  grep -v \"hasCronSecret\\|hasPostCronSecret\\|webhook\\|linking\\|validateApiKey\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\n6. Cron endpoints (verify they use proper secret validation):\"\n+grep -r \"hasCronSecret\\|hasPostCronSecret\" apps/web/app/api/ | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\n\u2705 Audit complete! Review flagged items manually.\"\n+```\n+\n+## Manual Security Checklist\n+\n+For each API route, verify:\n+\n+### Authentication\n+- [ ] Uses `withAuth` or `withEmailAccount` middleware\n+- [ ] Or uses `withError` with custom authentication logic\n+- [ ] No public access to sensitive data\n+\n+### Authorization  \n+- [ ] All database queries include user/account filtering\n+- [ ] Uses `emailAccountId` or `userId` in WHERE clauses\n+- [ ] Related resources use proper relationship filtering\n+\n+### Input Validation\n+- [ ] Parameters are validated before use\n+- [ ] Request bodies use Zod schemas\n+- [ ] No direct parameter usage in queries\n+\n+### Output Security\n+- [ ] Only returns necessary fields (use `select`)\n+- [ ] No sensitive data in error messages\n+- [ ] Consistent error response format\n+\n+## Security Testing Commands\n+\n+```bash\n+# Find routes without proper middleware\n+grep -r \"export const\" apps/web/app/api/ | grep -v \"withEmailAccount\\|withAuth\\|withError\"\n+\n+# Find potential IDOR vulnerabilities\n+grep -r \"findUnique.*where.*id\" apps/web/app/api/ | grep -v \"emailAccountId\\|userId\"\n+\n+# Find unvalidated parameter usage\n+grep -r \"params\\.\" apps/web/app/api/ | grep -v \"await.*params\"\n+\n+# Find potential information disclosure in errors\n+grep -r \"throw.*Error\" apps/web/app/api/ | grep -v \"SafeError\"\n+\n+# \ud83d\udea8 CRITICAL: Find unprotected cron endpoints\n+grep -r \"withError.*async.*request\" apps/web/app/api/ | grep -v \"hasCronSecret\\|hasPostCronSecret\\|webhook\\|linking\"\n+\n+# Find cron endpoints (verify they have proper authentication)\n+grep -r \"hasCronSecret\\|hasPostCronSecret\" apps/web/app/api/\n+\n+# Check for weak cron secrets (should not exist)\n+grep -r \"secret.*=.*[\\\"'].*[\\\"']\" apps/web/app/api/ | grep -v \"CRON_SECRET\"\n+```\n+\n+## Common Issues to Look For\n+\n+### 1. Missing User Scoping\n+```typescript\n+// \u274c BAD: Missing user scoping\n+const schedule = await prisma.schedule.findUnique({\n+  where: { id: scheduleId }\n+});\n+\n+// \u2705 GOOD: Properly scoped\n+const schedule = await prisma.schedule.findUnique({\n+  where: { id: scheduleId, emailAccountId }\n+});\n+```\n+\n+### 2. Information Disclosure\n+```typescript\n+// \u274c BAD: Reveals internal details\n+if (!rule) {\n+  throw new Error(`Rule ${ruleId} not found for user ${userId}`);\n+}\n+\n+// \u2705 GOOD: Generic error\n+if (!rule) {\n+  throw new SafeError(\"Rule not found\");\n+}\n+```\n+\n+### 3. Unvalidated Parameters\n+```typescript\n+// \u274c BAD: Direct parameter usage\n+const { id } = await params;\n+const rule = await prisma.rule.findUnique({ where: { id } });\n+\n+// \u2705 GOOD: Validated parameters\n+const { id } = await params;\n+if (!id || typeof id !== 'string') {\n+  return NextResponse.json({ error: \"Invalid ID\" }, { status: 400 });\n+}\n+```\n+\n+## Security Review Process\n+\n+### Before Code Review\n+1. Run the security audit script\n+2. Check all flagged routes manually\n+3. Verify new routes follow security patterns\n+\n+### During Code Review\n+1. Check middleware usage on new routes\n+2. Verify database queries include user scoping\n+3. Look for potential IDOR vulnerabilities\n+4. Check error handling for information disclosure\n+\n+### Regular Security Audits\n+1. Run audit script weekly\n+2. Review any new withError usage\n+3. Check for new parameter handling patterns\n+4. Monitor for security-related dependencies\n+\n+## Integration with CI/CD\n+\n+Add this to your GitHub Actions or CI pipeline:",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2160420508",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 478,
        "pr_file": ".cursor/rules/security-audit.mdc",
        "discussion_id": "2160420508",
        "commented_code": "@@ -0,0 +1,192 @@\n+---\n+description: Security audit report commands\n+globs: \n+alwaysApply: false\n+---\n+# Security Audit Tools\n+\n+## Quick Security Audit Script\n+\n+Run this from your project root to check for potential security issues:\n+\n+```bash\n+#!/bin/bash\n+# security-audit.sh - Quick security audit for API routes\n+\n+echo \"\ud83d\udd0d Security Audit Report\"\n+echo \"========================\"\n+\n+echo -e \"\\n1. Routes without authentication middleware:\"\n+echo \"   (These should use withAuth, withEmailAccount, or have custom auth)\"\n+grep -r \"export const \\(GET\\|POST\\|PUT\\|DELETE\\)\" apps/web/app/api/ | \\\n+  grep -v \"withEmailAccount\\|withAuth\\|withError\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\\n2. Direct Prisma queries without user scoping:\"\n+echo \"   (Check these manually for emailAccountId/userId filtering)\"\n+grep -r \"prisma\\.\\w*\\.find\" apps/web/app/api/ | \\\n+  grep -v \"emailAccountId\\|userId\" | \\\n+  head -10\n+\n+echo -e \"\\n3. Routes using withError (verify they have custom auth):\"\n+grep -r \"withError\" apps/web/app/api/ | \\\n+  grep \"export const\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\\n4. Potential parameter injection points:\"\n+grep -r \"params\\.\" apps/web/app/api/ | \\\n+  grep -v \"await params\" | \\\n+  head -5\n+\n+echo -e \"\\n5. \ud83d\udea8 CRITICAL: Potential unprotected cron endpoints:\"\n+echo \"   (Check manually - these use withError but not hasCronSecret)\"\n+echo \"   (Some may be API endpoints with custom auth like validateApiKey)\"\n+grep -r \"withError.*async.*request\" apps/web/app/api/ | \\\n+  grep -v \"hasCronSecret\\|hasPostCronSecret\\|webhook\\|linking\\|validateApiKey\" | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\\n6. Cron endpoints (verify they use proper secret validation):\"\n+grep -r \"hasCronSecret\\|hasPostCronSecret\" apps/web/app/api/ | \\\n+  cut -d: -f1 | sort | uniq\n+\n+echo -e \"\\n\u2705 Audit complete! Review flagged items manually.\"\n+```\n+\n+## Manual Security Checklist\n+\n+For each API route, verify:\n+\n+### Authentication\n+- [ ] Uses `withAuth` or `withEmailAccount` middleware\n+- [ ] Or uses `withError` with custom authentication logic\n+- [ ] No public access to sensitive data\n+\n+### Authorization  \n+- [ ] All database queries include user/account filtering\n+- [ ] Uses `emailAccountId` or `userId` in WHERE clauses\n+- [ ] Related resources use proper relationship filtering\n+\n+### Input Validation\n+- [ ] Parameters are validated before use\n+- [ ] Request bodies use Zod schemas\n+- [ ] No direct parameter usage in queries\n+\n+### Output Security\n+- [ ] Only returns necessary fields (use `select`)\n+- [ ] No sensitive data in error messages\n+- [ ] Consistent error response format\n+\n+## Security Testing Commands\n+\n+```bash\n+# Find routes without proper middleware\n+grep -r \"export const\" apps/web/app/api/ | grep -v \"withEmailAccount\\|withAuth\\|withError\"\n+\n+# Find potential IDOR vulnerabilities\n+grep -r \"findUnique.*where.*id\" apps/web/app/api/ | grep -v \"emailAccountId\\|userId\"\n+\n+# Find unvalidated parameter usage\n+grep -r \"params\\.\" apps/web/app/api/ | grep -v \"await.*params\"\n+\n+# Find potential information disclosure in errors\n+grep -r \"throw.*Error\" apps/web/app/api/ | grep -v \"SafeError\"\n+\n+# \ud83d\udea8 CRITICAL: Find unprotected cron endpoints\n+grep -r \"withError.*async.*request\" apps/web/app/api/ | grep -v \"hasCronSecret\\|hasPostCronSecret\\|webhook\\|linking\"\n+\n+# Find cron endpoints (verify they have proper authentication)\n+grep -r \"hasCronSecret\\|hasPostCronSecret\" apps/web/app/api/\n+\n+# Check for weak cron secrets (should not exist)\n+grep -r \"secret.*=.*[\\\"'].*[\\\"']\" apps/web/app/api/ | grep -v \"CRON_SECRET\"\n+```\n+\n+## Common Issues to Look For\n+\n+### 1. Missing User Scoping\n+```typescript\n+// \u274c BAD: Missing user scoping\n+const schedule = await prisma.schedule.findUnique({\n+  where: { id: scheduleId }\n+});\n+\n+// \u2705 GOOD: Properly scoped\n+const schedule = await prisma.schedule.findUnique({\n+  where: { id: scheduleId, emailAccountId }\n+});\n+```\n+\n+### 2. Information Disclosure\n+```typescript\n+// \u274c BAD: Reveals internal details\n+if (!rule) {\n+  throw new Error(`Rule ${ruleId} not found for user ${userId}`);\n+}\n+\n+// \u2705 GOOD: Generic error\n+if (!rule) {\n+  throw new SafeError(\"Rule not found\");\n+}\n+```\n+\n+### 3. Unvalidated Parameters\n+```typescript\n+// \u274c BAD: Direct parameter usage\n+const { id } = await params;\n+const rule = await prisma.rule.findUnique({ where: { id } });\n+\n+// \u2705 GOOD: Validated parameters\n+const { id } = await params;\n+if (!id || typeof id !== 'string') {\n+  return NextResponse.json({ error: \"Invalid ID\" }, { status: 400 });\n+}\n+```\n+\n+## Security Review Process\n+\n+### Before Code Review\n+1. Run the security audit script\n+2. Check all flagged routes manually\n+3. Verify new routes follow security patterns\n+\n+### During Code Review\n+1. Check middleware usage on new routes\n+2. Verify database queries include user scoping\n+3. Look for potential IDOR vulnerabilities\n+4. Check error handling for information disclosure\n+\n+### Regular Security Audits\n+1. Run audit script weekly\n+2. Review any new withError usage\n+3. Check for new parameter handling patterns\n+4. Monitor for security-related dependencies\n+\n+## Integration with CI/CD\n+\n+Add this to your GitHub Actions or CI pipeline:",
        "comment_created_at": "2025-06-22T18:07:57+00:00",
        "comment_author": "elie222",
        "comment_body": "We can open a new PR to add this to our GitHub actions, and then remove it from here.\r\n\r\nNote, `withError` still potentially unprotected.\r\nAlso, may be annoying to get these warnings when a route is protected, but this shows us it might not be.",
        "pr_file_module": null
      }
    ]
  }
]