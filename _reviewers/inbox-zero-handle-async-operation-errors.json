[
  {
    "discussion_id": "2192334916",
    "pr_number": 537,
    "pr_file": "apps/web/app/(app)/accounts/AddAccount.tsx",
    "created_at": "2025-07-08T12:09:10+00:00",
    "commented_code": "import { DialogTrigger } from \"@/components/ui/dialog\";\n import { Dialog } from \"@/components/ui/dialog\";\n import type { GetAuthLinkUrlResponse } from \"@/app/api/google/linking/auth-url/route\";\n+import type { GetOutlookAuthLinkUrlResponse } from \"@/app/api/outlook/linking/auth-url/route\";\n \n export function AddAccount() {\n+  const handleConnectGoogle = async () => {\n+    await signIn(\"google\", { callbackUrl: \"/accounts\", redirect: true });\n+  };\n+\n+  const handleMergeGoogle = async () => {\n+    const response = await fetch(\"/api/google/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2192334916",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 537,
        "pr_file": "apps/web/app/(app)/accounts/AddAccount.tsx",
        "discussion_id": "2192334916",
        "commented_code": "@@ -13,97 +13,145 @@ import { DialogContent } from \"@/components/ui/dialog\";\n import { DialogTrigger } from \"@/components/ui/dialog\";\n import { Dialog } from \"@/components/ui/dialog\";\n import type { GetAuthLinkUrlResponse } from \"@/app/api/google/linking/auth-url/route\";\n+import type { GetOutlookAuthLinkUrlResponse } from \"@/app/api/outlook/linking/auth-url/route\";\n \n export function AddAccount() {\n+  const handleConnectGoogle = async () => {\n+    await signIn(\"google\", { callbackUrl: \"/accounts\", redirect: true });\n+  };\n+\n+  const handleMergeGoogle = async () => {\n+    const response = await fetch(\"/api/google/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };",
        "comment_created_at": "2025-07-08T12:09:10+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for network failures in merge flow.**\n\nThe `handleMergeGoogle` function lacks proper error handling for network failures. If the fetch request fails, the user won't get feedback about the error.\n\n\n```diff\n  const handleMergeGoogle = async () => {\n+   try {\n      const response = await fetch(\"/api/google/linking/auth-url\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n+     if (!response.ok) {\n+       throw new Error(`HTTP error! status: ${response.status}`);\n+     }\n\n      const data: GetAuthLinkUrlResponse = await response.json();\n\n      window.location.href = data.url;\n+   } catch (error) {\n+     console.error(\"Error fetching Google auth URL:\", error);\n+     toastError({\n+       title: \"Error initiating Google link\",\n+       description: \"Please try again or contact support\",\n+     });\n+   }\n  };\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const handleConnectGoogle = async () => {\n    await signIn(\"google\", { callbackUrl: \"/accounts\", redirect: true });\n  };\n\n  const handleMergeGoogle = async () => {\n    try {\n      const response = await fetch(\"/api/google/linking/auth-url\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data: GetAuthLinkUrlResponse = await response.json();\n\n      window.location.href = data.url;\n    } catch (error) {\n      console.error(\"Error fetching Google auth URL:\", error);\n      toastError({\n        title: \"Error initiating Google link\",\n        description: \"Please try again or contact support\",\n      });\n    }\n  };\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/accounts/AddAccount.tsx around lines 19 to 32, the\nhandleMergeGoogle function does not handle errors from the fetch request, which\ncan cause silent failures on network issues. Add a try-catch block around the\nfetch call and JSON parsing to catch any errors, and provide user feedback or\nlogging in the catch block to handle network failures gracefully.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:poseidon:panther -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192334933",
    "pr_number": 537,
    "pr_file": "apps/web/app/(app)/accounts/AddAccount.tsx",
    "created_at": "2025-07-08T12:09:10+00:00",
    "commented_code": "import { DialogTrigger } from \"@/components/ui/dialog\";\n import { Dialog } from \"@/components/ui/dialog\";\n import type { GetAuthLinkUrlResponse } from \"@/app/api/google/linking/auth-url/route\";\n+import type { GetOutlookAuthLinkUrlResponse } from \"@/app/api/outlook/linking/auth-url/route\";\n \n export function AddAccount() {\n+  const handleConnectGoogle = async () => {\n+    await signIn(\"google\", { callbackUrl: \"/accounts\", redirect: true });\n+  };\n+\n+  const handleMergeGoogle = async () => {\n+    const response = await fetch(\"/api/google/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };\n+\n+  const handleConnectMicrosoft = async () => {\n+    await signIn(\"microsoft-entra-id\", {\n+      callbackUrl: \"/accounts\",\n+      redirect: true,\n+    });\n+  };\n+\n+  const handleMergeMicrosoft = async () => {\n+    const response = await fetch(\"/api/outlook/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetOutlookAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2192334933",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 537,
        "pr_file": "apps/web/app/(app)/accounts/AddAccount.tsx",
        "discussion_id": "2192334933",
        "commented_code": "@@ -13,97 +13,145 @@\n import { DialogTrigger } from \"@/components/ui/dialog\";\n import { Dialog } from \"@/components/ui/dialog\";\n import type { GetAuthLinkUrlResponse } from \"@/app/api/google/linking/auth-url/route\";\n+import type { GetOutlookAuthLinkUrlResponse } from \"@/app/api/outlook/linking/auth-url/route\";\n \n export function AddAccount() {\n+  const handleConnectGoogle = async () => {\n+    await signIn(\"google\", { callbackUrl: \"/accounts\", redirect: true });\n+  };\n+\n+  const handleMergeGoogle = async () => {\n+    const response = await fetch(\"/api/google/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };\n+\n+  const handleConnectMicrosoft = async () => {\n+    await signIn(\"microsoft-entra-id\", {\n+      callbackUrl: \"/accounts\",\n+      redirect: true,\n+    });\n+  };\n+\n+  const handleMergeMicrosoft = async () => {\n+    const response = await fetch(\"/api/outlook/linking/auth-url\", {\n+      method: \"GET\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+    });\n+\n+    const data: GetOutlookAuthLinkUrlResponse = await response.json();\n+\n+    window.location.href = data.url;\n+  };",
        "comment_created_at": "2025-07-08T12:09:10+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for network failures in Microsoft merge flow.**\n\nSimilar to the Google handler, the `handleMergeMicrosoft` function needs proper error handling for network failures.\n\n\n```diff\n  const handleMergeMicrosoft = async () => {\n+   try {\n      const response = await fetch(\"/api/outlook/linking/auth-url\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n+     if (!response.ok) {\n+       throw new Error(`HTTP error! status: ${response.status}`);\n+     }\n\n      const data: GetOutlookAuthLinkUrlResponse = await response.json();\n\n      window.location.href = data.url;\n+   } catch (error) {\n+     console.error(\"Error fetching Microsoft auth URL:\", error);\n+     toastError({\n+       title: \"Error initiating Microsoft link\",\n+       description: \"Please try again or contact support\",\n+     });\n+   }\n  };\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const handleMergeMicrosoft = async () => {\n    try {\n      const response = await fetch(\"/api/outlook/linking/auth-url\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data: GetOutlookAuthLinkUrlResponse = await response.json();\n\n      window.location.href = data.url;\n    } catch (error) {\n      console.error(\"Error fetching Microsoft auth URL:\", error);\n      toastError({\n        title: \"Error initiating Microsoft link\",\n        description: \"Please try again or contact support\",\n      });\n    }\n  };\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/accounts/AddAccount.tsx around lines 41 to 50, the\nhandleMergeMicrosoft function lacks error handling for network failures. Wrap\nthe fetch call and subsequent code in a try-catch block, and in the catch block,\nhandle or log the error appropriately to ensure the app can gracefully handle\nnetwork issues like the Google handler does.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:poseidon:panther -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2189717959",
    "pr_number": 547,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/onboarding/digest-frequency/page.tsx",
    "created_at": "2025-07-07T10:57:06+00:00",
    "commented_code": "}\n   }, [digestSettings]);\n \n+  useEffect(() => {\n+    // Ensure user has a digest schedule entry when they visit this page, otherwise the digest is not sent\n+    const timeOfDay = new Date();\n+    timeOfDay.setHours(11, 0, 0, 0); // 11 AM in user's timezone\n+    ensureDefaultDigestScheduleAction(emailAccountId, { timeOfDay });\n+  }, [emailAccountId]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2189717959",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 547,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/onboarding/digest-frequency/page.tsx",
        "discussion_id": "2189717959",
        "commented_code": "@@ -53,6 +57,13 @@ export default function DigestFrequencyPage() {\n     }\n   }, [digestSettings]);\n \n+  useEffect(() => {\n+    // Ensure user has a digest schedule entry when they visit this page, otherwise the digest is not sent\n+    const timeOfDay = new Date();\n+    timeOfDay.setHours(11, 0, 0, 0); // 11 AM in user's timezone\n+    ensureDefaultDigestScheduleAction(emailAccountId, { timeOfDay });\n+  }, [emailAccountId]);",
        "comment_created_at": "2025-07-07T10:57:06+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for the default schedule creation.**\n\nThe useEffect lacks error handling for `ensureDefaultDigestScheduleAction`. While this action is designed to be safe, adding error handling would improve robustness.\n\n\n\n```diff\n  useEffect(() => {\n    // Ensure user has a digest schedule entry when they visit this page, otherwise the digest is not sent\n    const timeOfDay = new Date();\n    timeOfDay.setHours(11, 0, 0, 0); // 11 AM in user's timezone\n-   ensureDefaultDigestScheduleAction(emailAccountId, { timeOfDay });\n+   ensureDefaultDigestScheduleAction(emailAccountId, { timeOfDay }).catch(\n+     (error) => {\n+       console.error(\"Failed to ensure default digest schedule:\", error);\n+       // Non-blocking error - user can still proceed with onboarding\n+     }\n+   );\n  }, [emailAccountId]);\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  useEffect(() => {\n    // Ensure user has a digest schedule entry when they visit this page, otherwise the digest is not sent\n    const timeOfDay = new Date();\n    timeOfDay.setHours(11, 0, 0, 0); // 11 AM in user's timezone\n    ensureDefaultDigestScheduleAction(emailAccountId, { timeOfDay }).catch(\n      (error) => {\n        console.error(\"Failed to ensure default digest schedule:\", error);\n        // Non-blocking error - user can still proceed with onboarding\n      }\n    );\n  }, [emailAccountId]);\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn\napps/web/app/(app)/[emailAccountId]/assistant/onboarding/digest-frequency/page.tsx\naround lines 60 to 65, the useEffect calls ensureDefaultDigestScheduleAction\nwithout error handling. Wrap the call in a try-catch block or handle the promise\nrejection to catch any errors during the default schedule creation, and log or\nhandle the error appropriately to improve robustness.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:poseidon:panther -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2141248666",
    "pr_number": 505,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/ProcessRules.tsx",
    "created_at": "2025-06-11T23:11:45+00:00",
    "commented_code": "const currentBatch = currentData?.[page]?.messages || [];\n \n-      for (const message of currentBatch) {\n+      // Filter messages that should be processed\n+      const messagesToProcess = currentBatch.filter((message) => {\n+        if (results[message.id]) return false;\n+        if (handledThreadsRef.current.has(message.threadId)) return false;\n+        return true;\n+      });\n+\n+      // Process messages in parallel batches of 3\n+      const BATCH_SIZE = 3;\n+      for (let i = 0; i < messagesToProcess.length; i += BATCH_SIZE) {\n         if (!isRunningAllRef.current) break;\n-        if (results[message.id]) continue;\n-        if (handledThreadsRef.current.has(message.threadId)) continue;\n-        await onRun(message);\n-        handledThreadsRef.current.add(message.threadId);\n+\n+        const batch = messagesToProcess.slice(i, i + BATCH_SIZE);\n+\n+        // Process batch in parallel\n+        await Promise.all(\n+          batch.map(async (message) => {\n+            if (!isRunningAllRef.current) return;\n+            await onRun(message);\n+            handledThreadsRef.current.add(message.threadId);\n+          }),\n+        );",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2141248666",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 505,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/ProcessRules.tsx",
        "discussion_id": "2141248666",
        "commented_code": "@@ -134,12 +134,28 @@ export function ProcessRulesContent({ testMode }: { testMode: boolean }) {\n \n       const currentBatch = currentData?.[page]?.messages || [];\n \n-      for (const message of currentBatch) {\n+      // Filter messages that should be processed\n+      const messagesToProcess = currentBatch.filter((message) => {\n+        if (results[message.id]) return false;\n+        if (handledThreadsRef.current.has(message.threadId)) return false;\n+        return true;\n+      });\n+\n+      // Process messages in parallel batches of 3\n+      const BATCH_SIZE = 3;\n+      for (let i = 0; i < messagesToProcess.length; i += BATCH_SIZE) {\n         if (!isRunningAllRef.current) break;\n-        if (results[message.id]) continue;\n-        if (handledThreadsRef.current.has(message.threadId)) continue;\n-        await onRun(message);\n-        handledThreadsRef.current.add(message.threadId);\n+\n+        const batch = messagesToProcess.slice(i, i + BATCH_SIZE);\n+\n+        // Process batch in parallel\n+        await Promise.all(\n+          batch.map(async (message) => {\n+            if (!isRunningAllRef.current) return;\n+            await onRun(message);\n+            handledThreadsRef.current.add(message.threadId);\n+          }),\n+        );",
        "comment_created_at": "2025-06-11T23:11:45+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error-tolerant batching & hoist `BATCH_SIZE`**\n\n1. If any single `onRun` call rejects, `Promise.all` will short-circuit and abort the entire \u201cRun All\u201d job.  \n   Wrap each invocation in `try/catch` to isolate failures and surface them via `toastError`, while allowing the rest of the batch to proceed.\n\n2. `BATCH_SIZE` is redeclared on every page iteration. Hoist it outside `handleRunAll` (or at least to the top of the function) so the constant is defined once and is easier to tweak.\n\n```diff\n-      // Process messages in parallel batches of 3\n-      const BATCH_SIZE = 3;\n+const BATCH_SIZE = 3; // hoist near the top of the module / function\n ...\n-        await Promise.all(\n-          batch.map(async (message) => {\n-            if (!isRunningAllRef.current) return;\n-            await onRun(message);\n-            handledThreadsRef.current.add(message.threadId);\n-          }),\n-        );\n+        await Promise.all(\n+          batch.map(async (message) => {\n+            if (!isRunningAllRef.current) return;\n+            try {\n+              await onRun(message);\n+            } catch (err) {\n+              console.error(\"handleRunAll: onRun failed\", message.id, err);\n+              toastError({\n+                title: \"Failed to process email\",\n+                description:\n+                  err instanceof Error ? err.message : \"Unknown error\",\n+              });\n+            } finally {\n+              handledThreadsRef.current.add(message.threadId);\n+            }\n+          }),\n+        );\n```\n\nThis prevents a single network/runtime error from halting the whole parallel run, and keeps configuration tidy.\n\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n// Hoist near the top of the module / function\nconst BATCH_SIZE = 3;\n\n      // Process messages in parallel batches of 3\n      for (let i = 0; i < messagesToProcess.length; i += BATCH_SIZE) {\n        if (!isRunningAllRef.current) break;\n\n        const batch = messagesToProcess.slice(i, i + BATCH_SIZE);\n\n        // Process batch in parallel\n        await Promise.all(\n          batch.map(async (message) => {\n            if (!isRunningAllRef.current) return;\n            try {\n              await onRun(message);\n            } catch (err) {\n              console.error(\"handleRunAll: onRun failed\", message.id, err);\n              toastError({\n                title: \"Failed to process email\",\n                description:\n                  err instanceof Error ? err.message : \"Unknown error\",\n              });\n            } finally {\n              handledThreadsRef.current.add(message.threadId);\n            }\n          }),\n        );\n      }\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/[emailAccountId]/assistant/ProcessRules.tsx around lines\n144 to 158, the batch processing uses Promise.all without error handling,\ncausing the entire batch to abort if any onRun call rejects. Wrap each onRun\ncall inside a try/catch block to catch individual errors and call toastError for\nthem, allowing other batch items to continue processing. Also, move the\nBATCH_SIZE constant declaration outside the handleRunAll function or to the top\nof it to avoid redeclaring it on every iteration and improve maintainability.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083487916",
    "pr_number": 431,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/automation/RulesPrompt.tsx",
    "created_at": "2025-05-11T11:01:30+00:00",
    "commented_code": "Let me know if you're interested!\n ---`}\n-                />\n-\n-                <div className=\"flex flex-wrap gap-2\">\n-                  <Button\n-                    type=\"submit\"\n-                    disabled={isSubmitting || isGenerating}\n-                    loading={isSubmitting}\n-                  >\n-                    Save\n-                  </Button>\n+              />\n \n-                  <Button variant=\"outline\" onClick={onOpenPersonaDialog}>\n-                    <UserPenIcon className=\"mr-2 size-4\" />\n-                    Choose persona\n-                  </Button>\n+              <div className=\"flex flex-wrap gap-2\">\n+                <Button\n+                  type=\"submit\"\n+                  disabled={isSubmitting || isGenerating}\n+                  loading={isSubmitting}\n+                >\n+                  Save\n+                </Button>\n \n-                  <Tooltip content=\"Our AI will analyze your Gmail inbox and create a customized prompt for your assistant.\">\n-                    <Button\n-                      type=\"button\"\n-                      variant=\"outline\"\n-                      disabled={isSubmitting || isGenerating}\n-                      onClick={async () => {\n-                        if (isSubmitting || isGenerating) return;\n-                        toast.promise(\n-                          async () => {\n-                            setIsGenerating(true);\n-                            const result = await generateRulesPromptAction(\n-                              emailAccountId,\n-                              {},\n-                            );\n-\n-                            if (result?.serverError) {\n-                              setIsGenerating(false);\n-                              throw new Error(result.serverError);\n-                            }\n-\n-                            const currentPrompt = getValues(\"rulesPrompt\");\n-                            const updatedPrompt = currentPrompt\n-                              ? `${currentPrompt}\n\n${result?.data?.rulesPrompt}`\n-                              : result?.data?.rulesPrompt;\n-                            setValue(\n-                              \"rulesPrompt\",\n-                              updatedPrompt?.trim() || \"\",\n-                            );\n+                <Button variant=\"outline\" onClick={onOpenPersonaDialog}>\n+                  <UserPenIcon className=\"mr-2 size-4\" />\n+                  Choose persona\n+                </Button>\n \n+                <Tooltip content=\"Our AI will analyze your Gmail inbox and create a customized prompt for your assistant.\">\n+                  <Button\n+                    type=\"button\"\n+                    variant=\"outline\"\n+                    disabled={isSubmitting || isGenerating}\n+                    onClick={async () => {\n+                      if (isSubmitting || isGenerating) return;\n+                      toast.promise(\n+                        async () => {\n+                          setIsGenerating(true);\n+                          const result = await generateRulesPromptAction(\n+                            emailAccountId,\n+                            {},\n+                          );\n+\n+                          if (result?.serverError) {\n                             setIsGenerating(false);\n-\n-                            return result;\n+                            throw new Error(result.serverError);\n+                          }\n+\n+                          const currentPrompt = getValues(\"rulesPrompt\");\n+                          const updatedPrompt = currentPrompt\n+                            ? `${currentPrompt}\n\n${result?.data?.rulesPrompt}`\n+                            : result?.data?.rulesPrompt;\n+                          setValue(\"rulesPrompt\", updatedPrompt?.trim() || \"\");\n+\n+                          setIsGenerating(false);\n+\n+                          return result;\n+                        },",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083487916",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/automation/RulesPrompt.tsx",
        "discussion_id": "2083487916",
        "commented_code": "@@ -259,78 +265,75 @@ I'm currently offering a 10% discount for the first 10 customers.\n \n Let me know if you're interested!\n ---`}\n-                />\n-\n-                <div className=\"flex flex-wrap gap-2\">\n-                  <Button\n-                    type=\"submit\"\n-                    disabled={isSubmitting || isGenerating}\n-                    loading={isSubmitting}\n-                  >\n-                    Save\n-                  </Button>\n+              />\n \n-                  <Button variant=\"outline\" onClick={onOpenPersonaDialog}>\n-                    <UserPenIcon className=\"mr-2 size-4\" />\n-                    Choose persona\n-                  </Button>\n+              <div className=\"flex flex-wrap gap-2\">\n+                <Button\n+                  type=\"submit\"\n+                  disabled={isSubmitting || isGenerating}\n+                  loading={isSubmitting}\n+                >\n+                  Save\n+                </Button>\n \n-                  <Tooltip content=\"Our AI will analyze your Gmail inbox and create a customized prompt for your assistant.\">\n-                    <Button\n-                      type=\"button\"\n-                      variant=\"outline\"\n-                      disabled={isSubmitting || isGenerating}\n-                      onClick={async () => {\n-                        if (isSubmitting || isGenerating) return;\n-                        toast.promise(\n-                          async () => {\n-                            setIsGenerating(true);\n-                            const result = await generateRulesPromptAction(\n-                              emailAccountId,\n-                              {},\n-                            );\n-\n-                            if (result?.serverError) {\n-                              setIsGenerating(false);\n-                              throw new Error(result.serverError);\n-                            }\n-\n-                            const currentPrompt = getValues(\"rulesPrompt\");\n-                            const updatedPrompt = currentPrompt\n-                              ? `${currentPrompt}\\n\\n${result?.data?.rulesPrompt}`\n-                              : result?.data?.rulesPrompt;\n-                            setValue(\n-                              \"rulesPrompt\",\n-                              updatedPrompt?.trim() || \"\",\n-                            );\n+                <Button variant=\"outline\" onClick={onOpenPersonaDialog}>\n+                  <UserPenIcon className=\"mr-2 size-4\" />\n+                  Choose persona\n+                </Button>\n \n+                <Tooltip content=\"Our AI will analyze your Gmail inbox and create a customized prompt for your assistant.\">\n+                  <Button\n+                    type=\"button\"\n+                    variant=\"outline\"\n+                    disabled={isSubmitting || isGenerating}\n+                    onClick={async () => {\n+                      if (isSubmitting || isGenerating) return;\n+                      toast.promise(\n+                        async () => {\n+                          setIsGenerating(true);\n+                          const result = await generateRulesPromptAction(\n+                            emailAccountId,\n+                            {},\n+                          );\n+\n+                          if (result?.serverError) {\n                             setIsGenerating(false);\n-\n-                            return result;\n+                            throw new Error(result.serverError);\n+                          }\n+\n+                          const currentPrompt = getValues(\"rulesPrompt\");\n+                          const updatedPrompt = currentPrompt\n+                            ? `${currentPrompt}\\n\\n${result?.data?.rulesPrompt}`\n+                            : result?.data?.rulesPrompt;\n+                          setValue(\"rulesPrompt\", updatedPrompt?.trim() || \"\");\n+\n+                          setIsGenerating(false);\n+\n+                          return result;\n+                        },",
        "comment_created_at": "2025-05-11T11:01:30+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**`isGenerating` flag isn\u2019t cleared on unexpected errors**  \n\n`setIsGenerating(false)` is called on the happy path and on the explicit `serverError` branch, but any other thrown error will leave the button permanently disabled. Wrap the whole block in `try / finally` so the flag is always reset:\n\n```diff\n- toast.promise(async () => {\n-   setIsGenerating(true);\n-   ...\n-   if (result?.serverError) {\n-     setIsGenerating(false);\n-     throw new Error(result.serverError);\n-   }\n-   ...\n-   setIsGenerating(false);\n-   return result;\n- }, { ... })\n+ toast.promise(async () => {\n+   try {\n+     setIsGenerating(true);\n+     ...\n+     if (result?.serverError) throw new Error(result.serverError);\n+     ...\n+     return result;\n+   } finally {\n+     setIsGenerating(false);\n+   }\n+ }, { ... })\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n                      if (isSubmitting || isGenerating) return;\n                      toast.promise(\n                        async () => {\n                          try {\n                            setIsGenerating(true);\n                            const result = await generateRulesPromptAction(\n                              emailAccountId,\n                              {},\n                            );\n\n                            if (result?.serverError) {\n                              throw new Error(result.serverError);\n                            }\n\n                            const currentPrompt = getValues(\"rulesPrompt\");\n                            const updatedPrompt = currentPrompt\n                              ? `${currentPrompt}\\n\\n${result?.data?.rulesPrompt}`\n                              : result?.data?.rulesPrompt;\n                            setValue(\"rulesPrompt\", updatedPrompt?.trim() || \"\");\n\n                            return result;\n                          } finally {\n                            setIsGenerating(false);\n                          }\n                        },\n                        {\n                          // \u2026existing toast options\u2026\n                        }\n                      );\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2056122165",
    "pr_number": 412,
    "pr_file": "apps/web/app/(app)/assess.tsx",
    "created_at": "2025-04-23T13:56:59+00:00",
    "commented_code": "\"use client\";\n \n+import { useAction } from \"next-safe-action/hooks\";\n import { useEffect } from \"react\";\n import { whitelistInboxZeroAction } from \"@/utils/actions/whitelist\";\n import {\n   analyzeWritingStyleAction,\n-  assessUserAction,\n+  assessAction,\n } from \"@/utils/actions/assess\";\n-\n-async function assessUser() {\n-  const result = await assessUserAction();\n-  // no need to run this over and over after the first time\n-  if (!result.skipped) {\n-    await whitelistInboxZeroAction();\n-  }\n-}\n+import { useAccount } from \"@/providers/AccountProvider\";\n \n export function AssessUser() {\n+  const { account } = useAccount();\n+  const { executeAsync: executeAssessAsync } = useAction(\n+    assessAction.bind(null, account?.email || \"\"),\n+  );\n+  const { execute: executeWhitelistInboxZero } = useAction(\n+    whitelistInboxZeroAction.bind(null, account?.email || \"\"),\n+  );\n+  const { execute: executeAnalyzeWritingStyle } = useAction(\n+    analyzeWritingStyleAction.bind(null, account?.email || \"\"),\n+  );\n+\n   useEffect(() => {\n-    assessUser();\n-    analyzeWritingStyleAction();\n-  }, []);\n+    async function assess() {\n+      const result = await executeAssessAsync();\n+      // no need to run this over and over after the first time\n+      if (!result?.data?.skipped) {\n+        executeWhitelistInboxZero();\n+      }\n+    }\n+\n+    assess();\n+    executeAnalyzeWritingStyle();\n+  }, [\n+    executeAssessAsync,\n+    executeWhitelistInboxZero,\n+    executeAnalyzeWritingStyle,\n+  ]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2056122165",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 412,
        "pr_file": "apps/web/app/(app)/assess.tsx",
        "discussion_id": "2056122165",
        "commented_code": "@@ -1,25 +1,42 @@\n \"use client\";\n \n+import { useAction } from \"next-safe-action/hooks\";\n import { useEffect } from \"react\";\n import { whitelistInboxZeroAction } from \"@/utils/actions/whitelist\";\n import {\n   analyzeWritingStyleAction,\n-  assessUserAction,\n+  assessAction,\n } from \"@/utils/actions/assess\";\n-\n-async function assessUser() {\n-  const result = await assessUserAction();\n-  // no need to run this over and over after the first time\n-  if (!result.skipped) {\n-    await whitelistInboxZeroAction();\n-  }\n-}\n+import { useAccount } from \"@/providers/AccountProvider\";\n \n export function AssessUser() {\n+  const { account } = useAccount();\n+  const { executeAsync: executeAssessAsync } = useAction(\n+    assessAction.bind(null, account?.email || \"\"),\n+  );\n+  const { execute: executeWhitelistInboxZero } = useAction(\n+    whitelistInboxZeroAction.bind(null, account?.email || \"\"),\n+  );\n+  const { execute: executeAnalyzeWritingStyle } = useAction(\n+    analyzeWritingStyleAction.bind(null, account?.email || \"\"),\n+  );\n+\n   useEffect(() => {\n-    assessUser();\n-    analyzeWritingStyleAction();\n-  }, []);\n+    async function assess() {\n+      const result = await executeAssessAsync();\n+      // no need to run this over and over after the first time\n+      if (!result?.data?.skipped) {\n+        executeWhitelistInboxZero();\n+      }\n+    }\n+\n+    assess();\n+    executeAnalyzeWritingStyle();\n+  }, [\n+    executeAssessAsync,\n+    executeWhitelistInboxZero,\n+    executeAnalyzeWritingStyle,\n+  ]);",
        "comment_created_at": "2025-04-23T13:56:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for async operations**\n\nThe current implementation doesn't include error handling for the async operations in the useEffect hook. If `executeAssessAsync()` fails, it would throw an uncaught error, potentially causing the component to crash.\n\n\nAdd try/catch blocks to handle potential errors:\n\n```diff\nuseEffect(() => {\n  async function assess() {\n+    try {\n      const result = await executeAssessAsync();\n      // no need to run this over and over after the first time\n      if (!result?.data?.skipped) {\n        executeWhitelistInboxZero();\n      }\n+    } catch (error) {\n+      console.error(\"Error assessing user:\", error);\n+      // Consider adding user-friendly error notification\n+    }\n  }\n\n  assess();\n-  executeAnalyzeWritingStyle();\n+  try {\n+    executeAnalyzeWritingStyle();\n+  } catch (error) {\n+    console.error(\"Error analyzing writing style:\", error);\n+  }\n}, [\n  executeAssessAsync,\n  executeWhitelistInboxZero,\n  executeAnalyzeWritingStyle,\n]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  useEffect(() => {\n    async function assess() {\n      try {\n        const result = await executeAssessAsync();\n        // no need to run this over and over after the first time\n        if (!result?.data?.skipped) {\n          executeWhitelistInboxZero();\n        }\n      } catch (error) {\n        console.error(\"Error assessing user:\", error);\n        // Consider adding user-friendly error notification\n      }\n    }\n\n    assess();\n    try {\n      executeAnalyzeWritingStyle();\n    } catch (error) {\n      console.error(\"Error analyzing writing style:\", error);\n    }\n  }, [\n    executeAssessAsync,\n    executeWhitelistInboxZero,\n    executeAnalyzeWritingStyle,\n  ]);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058111559",
    "pr_number": 412,
    "pr_file": "apps/web/app/(app)/[account]/assess.tsx",
    "created_at": "2025-04-24T10:56:08+00:00",
    "commented_code": "+\"use client\";\n+\n+import { useAction } from \"next-safe-action/hooks\";\n+import { useEffect } from \"react\";\n+import { whitelistInboxZeroAction } from \"@/utils/actions/whitelist\";\n+import {\n+  analyzeWritingStyleAction,\n+  assessAction,\n+} from \"@/utils/actions/assess\";\n+import { useAccount } from \"@/providers/AccountProvider\";\n+\n+export function AssessUser() {\n+  const { email } = useAccount();\n+  const { executeAsync: executeAssessAsync } = useAction(\n+    assessAction.bind(null, email),\n+  );\n+  const { execute: executeWhitelistInboxZero } = useAction(\n+    whitelistInboxZeroAction.bind(null, email),\n+  );\n+  const { execute: executeAnalyzeWritingStyle } = useAction(\n+    analyzeWritingStyleAction.bind(null, email),\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: only run once\n+  useEffect(() => {\n+    async function assess() {\n+      const result = await executeAssessAsync();\n+      // no need to run this over and over after the first time\n+      if (!result?.data?.skipped) {\n+        executeWhitelistInboxZero();\n+      }\n+    }\n+\n+    assess();\n+    executeAnalyzeWritingStyle();\n+  }, []);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2058111559",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 412,
        "pr_file": "apps/web/app/(app)/[account]/assess.tsx",
        "discussion_id": "2058111559",
        "commented_code": "@@ -0,0 +1,39 @@\n+\"use client\";\n+\n+import { useAction } from \"next-safe-action/hooks\";\n+import { useEffect } from \"react\";\n+import { whitelistInboxZeroAction } from \"@/utils/actions/whitelist\";\n+import {\n+  analyzeWritingStyleAction,\n+  assessAction,\n+} from \"@/utils/actions/assess\";\n+import { useAccount } from \"@/providers/AccountProvider\";\n+\n+export function AssessUser() {\n+  const { email } = useAccount();\n+  const { executeAsync: executeAssessAsync } = useAction(\n+    assessAction.bind(null, email),\n+  );\n+  const { execute: executeWhitelistInboxZero } = useAction(\n+    whitelistInboxZeroAction.bind(null, email),\n+  );\n+  const { execute: executeAnalyzeWritingStyle } = useAction(\n+    analyzeWritingStyleAction.bind(null, email),\n+  );\n+\n+  // biome-ignore lint/correctness/useExhaustiveDependencies: only run once\n+  useEffect(() => {\n+    async function assess() {\n+      const result = await executeAssessAsync();\n+      // no need to run this over and over after the first time\n+      if (!result?.data?.skipped) {\n+        executeWhitelistInboxZero();\n+      }\n+    }\n+\n+    assess();\n+    executeAnalyzeWritingStyle();\n+  }, []);",
        "comment_created_at": "2025-04-24T10:56:08+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling to the assessment process.**\n\nThe `assess` function lacks error handling for the asynchronous operations. Consider adding try/catch blocks to properly handle potential errors.\n\n```diff\n   useEffect(() => {\n     async function assess() {\n+      try {\n         const result = await executeAssessAsync();\n         // no need to run this over and over after the first time\n         if (!result?.data?.skipped) {\n           executeWhitelistInboxZero();\n         }\n+      } catch (error) {\n+        console.error(\"Error during assessment:\", error);\n+      }\n     }\n\n     assess();\n-    executeAnalyzeWritingStyle();\n+    try {\n+      executeAnalyzeWritingStyle();\n+    } catch (error) {\n+      console.error(\"Error analyzing writing style:\", error);\n+    }\n   }, []);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  // biome-ignore lint/correctness/useExhaustiveDependencies: only run once\n  useEffect(() => {\n    async function assess() {\n      try {\n        const result = await executeAssessAsync();\n        // no need to run this over and over after the first time\n        if (!result?.data?.skipped) {\n          executeWhitelistInboxZero();\n        }\n      } catch (error) {\n        console.error(\"Error during assessment:\", error);\n      }\n    }\n\n    assess();\n    try {\n      executeAnalyzeWritingStyle();\n    } catch (error) {\n      console.error(\"Error analyzing writing style:\", error);\n    }\n  }, []);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058141638",
    "pr_number": 412,
    "pr_file": "apps/web/app/(app)/[account]/usage/page.tsx",
    "created_at": "2025-04-24T11:14:21+00:00",
    "commented_code": "+import { getUsage } from \"@/utils/redis/usage\";\n+import { TopSection } from \"@/components/TopSection\";\n+import { Usage } from \"@/app/(app)/[account]/usage/usage\";\n+import prisma from \"@/utils/prisma\";\n+\n+export default async function UsagePage(props: {\n+  params: Promise<{ account: string }>;\n+}) {\n+  const params = await props.params;\n+  const accountId = params.account;\n+\n+  const emailAccount = await prisma.emailAccount.findUnique({\n+    where: { accountId },\n+    select: { email: true },\n+  });\n+\n+  if (!emailAccount) return <p>Email account not found</p>;\n+\n+  const usage = await getUsage({ email: emailAccount.email });",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2058141638",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 412,
        "pr_file": "apps/web/app/(app)/[account]/usage/page.tsx",
        "discussion_id": "2058141638",
        "commented_code": "@@ -0,0 +1,29 @@\n+import { getUsage } from \"@/utils/redis/usage\";\n+import { TopSection } from \"@/components/TopSection\";\n+import { Usage } from \"@/app/(app)/[account]/usage/usage\";\n+import prisma from \"@/utils/prisma\";\n+\n+export default async function UsagePage(props: {\n+  params: Promise<{ account: string }>;\n+}) {\n+  const params = await props.params;\n+  const accountId = params.account;\n+\n+  const emailAccount = await prisma.emailAccount.findUnique({\n+    where: { accountId },\n+    select: { email: true },\n+  });\n+\n+  if (!emailAccount) return <p>Email account not found</p>;\n+\n+  const usage = await getUsage({ email: emailAccount.email });",
        "comment_created_at": "2025-04-24T11:14:21+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for getUsage call.**\n\nThe getUsage function call is not wrapped in a try/catch block, which could lead to unhandled exceptions.\n\n```diff\n-  const usage = await getUsage({ email: emailAccount.email });\n+  let usage;\n+  try {\n+    usage = await getUsage({ email: emailAccount.email });\n+  } catch (error) {\n+    console.error(\"Failed to fetch usage data:\", error);\n+    return <p>Error fetching usage data. Please try again later.</p>;\n+  }\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058175536",
    "pr_number": 412,
    "pr_file": "apps/web/app/(app)/[account]/reply-zero/onboarding/page.tsx",
    "created_at": "2025-04-24T11:34:56+00:00",
    "commented_code": "+import { EnableReplyTracker } from \"@/app/(app)/[account]/reply-zero/EnableReplyTracker\";\n+import prisma from \"@/utils/prisma\";\n+import { ActionType } from \"@prisma/client\";\n+\n+export default async function OnboardingReplyTracker(props: {\n+  params: Promise<{ account: string }>;\n+}) {\n+  const params = await props.params;\n+\n+  const trackerRule = await prisma.rule.findFirst({\n+    where: {\n+      emailAccount: { accountId: params.account },\n+      actions: { some: { type: ActionType.TRACK_THREAD } },\n+    },\n+    select: { id: true },\n+  });",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2058175536",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 412,
        "pr_file": "apps/web/app/(app)/[account]/reply-zero/onboarding/page.tsx",
        "discussion_id": "2058175536",
        "commented_code": "@@ -0,0 +1,19 @@\n+import { EnableReplyTracker } from \"@/app/(app)/[account]/reply-zero/EnableReplyTracker\";\n+import prisma from \"@/utils/prisma\";\n+import { ActionType } from \"@prisma/client\";\n+\n+export default async function OnboardingReplyTracker(props: {\n+  params: Promise<{ account: string }>;\n+}) {\n+  const params = await props.params;\n+\n+  const trackerRule = await prisma.rule.findFirst({\n+    where: {\n+      emailAccount: { accountId: params.account },\n+      actions: { some: { type: ActionType.TRACK_THREAD } },\n+    },\n+    select: { id: true },\n+  });",
        "comment_created_at": "2025-04-24T11:34:56+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for the database query.**\n\nThe database query could fail due to connectivity issues or other database problems. Adding error handling would improve reliability.\n\n\n```diff\n- const trackerRule = await prisma.rule.findFirst({\n-   where: {\n-     emailAccount: { accountId: params.account },\n-     actions: { some: { type: ActionType.TRACK_THREAD } },\n-   },\n-   select: { id: true },\n- });\n+ let trackerRule;\n+ try {\n+   trackerRule = await prisma.rule.findFirst({\n+     where: {\n+       emailAccount: { accountId: params.account },\n+       actions: { some: { type: ActionType.TRACK_THREAD } },\n+     },\n+     select: { id: true },\n+   });\n+ } catch (error) {\n+   console.error(\"Failed to query tracker rule:\", error);\n+   // Handle the error appropriately\n+ }\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n// Before querying, declare trackerRule in a higher scope\nlet trackerRule;\ntry {\n  trackerRule = await prisma.rule.findFirst({\n    where: {\n      emailAccount: { accountId: params.account },\n      actions: { some: { type: ActionType.TRACK_THREAD } },\n    },\n    select: { id: true },\n  });\n} catch (error) {\n  console.error(\"Failed to query tracker rule:\", error);\n  // Handle the error appropriately (e.g., throw a custom error, render a fallback UI, etc.)\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2020180422",
    "pr_number": 382,
    "pr_file": "apps/web/app/(app)/automation/onboarding/CategoriesSetup.tsx",
    "created_at": "2025-03-30T15:07:49+00:00",
    "commented_code": "+\"use client\";\n+\n+import { useCallback } from \"react\";\n+import Link from \"next/link\";\n+import { useRouter } from \"next/navigation\";\n+import { useForm } from \"react-hook-form\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import type { ControllerRenderProps } from \"react-hook-form\";\n+import {\n+  Mail,\n+  Newspaper,\n+  Megaphone,\n+  Calendar,\n+  Receipt,\n+  Bell,\n+  Users,\n+} from \"lucide-react\";\n+import { TypographyH3, TypographyP } from \"@/components/Typography\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\n+import {\n+  Select,\n+  SelectContent,\n+  SelectItem,\n+  SelectTrigger,\n+  SelectValue,\n+} from \"@/components/ui/select\";\n+import { createRulesOnboardingAction } from \"@/utils/actions/rule\";\n+import { isActionError } from \"@/utils/error\";\n+import { toastError } from \"@/components/Toast\";\n+import {\n+  createRulesOnboardingBody,\n+  type CreateRulesOnboardingBody,\n+} from \"@/utils/actions/rule.validation\";\n+\n+const NEXT_URL = \"/automation/onboarding/draft-replies\";\n+\n+export function CategoriesSetup() {\n+  const router = useRouter();\n+\n+  const form = useForm<CreateRulesOnboardingBody>({\n+    resolver: zodResolver(createRulesOnboardingBody),\n+    defaultValues: {\n+      toReply: \"label\",\n+      newsletters: \"label\",\n+      marketing: \"label_archive\",\n+      calendar: \"label\",\n+      receipts: \"label\",\n+      notifications: \"label\",\n+      coldEmails: \"label_archive\",\n+    },\n+  });\n+\n+  const onSubmit = useCallback(\n+    async (data: CreateRulesOnboardingBody) => {\n+      // runs in background so we can move on to next step faster\n+      createRulesOnboardingAction(data);\n+      router.push(NEXT_URL);\n+    },\n+    [router],\n+  );",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2020180422",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 382,
        "pr_file": "apps/web/app/(app)/automation/onboarding/CategoriesSetup.tsx",
        "discussion_id": "2020180422",
        "commented_code": "@@ -0,0 +1,187 @@\n+\"use client\";\n+\n+import { useCallback } from \"react\";\n+import Link from \"next/link\";\n+import { useRouter } from \"next/navigation\";\n+import { useForm } from \"react-hook-form\";\n+import { zodResolver } from \"@hookform/resolvers/zod\";\n+import type { ControllerRenderProps } from \"react-hook-form\";\n+import {\n+  Mail,\n+  Newspaper,\n+  Megaphone,\n+  Calendar,\n+  Receipt,\n+  Bell,\n+  Users,\n+} from \"lucide-react\";\n+import { TypographyH3, TypographyP } from \"@/components/Typography\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\n+import {\n+  Select,\n+  SelectContent,\n+  SelectItem,\n+  SelectTrigger,\n+  SelectValue,\n+} from \"@/components/ui/select\";\n+import { createRulesOnboardingAction } from \"@/utils/actions/rule\";\n+import { isActionError } from \"@/utils/error\";\n+import { toastError } from \"@/components/Toast\";\n+import {\n+  createRulesOnboardingBody,\n+  type CreateRulesOnboardingBody,\n+} from \"@/utils/actions/rule.validation\";\n+\n+const NEXT_URL = \"/automation/onboarding/draft-replies\";\n+\n+export function CategoriesSetup() {\n+  const router = useRouter();\n+\n+  const form = useForm<CreateRulesOnboardingBody>({\n+    resolver: zodResolver(createRulesOnboardingBody),\n+    defaultValues: {\n+      toReply: \"label\",\n+      newsletters: \"label\",\n+      marketing: \"label_archive\",\n+      calendar: \"label\",\n+      receipts: \"label\",\n+      notifications: \"label\",\n+      coldEmails: \"label_archive\",\n+    },\n+  });\n+\n+  const onSubmit = useCallback(\n+    async (data: CreateRulesOnboardingBody) => {\n+      // runs in background so we can move on to next step faster\n+      createRulesOnboardingAction(data);\n+      router.push(NEXT_URL);\n+    },\n+    [router],\n+  );",
        "comment_created_at": "2025-03-30T15:07:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Submission handler could benefit from error handling**\n\nWhile the code correctly calls the action and handles navigation, there's no error handling if the action fails.\n\n\n```diff\nconst onSubmit = useCallback(\n  async (data: CreateRulesOnboardingBody) => {\n    // runs in background so we can move on to next step faster\n-   createRulesOnboardingAction(data);\n+   const result = await createRulesOnboardingAction(data);\n+   if (isActionError(result)) {\n+     toastError({ description: \"Failed to set up categories. Please try again.\" });\n+     return;\n+   }\n    router.push(NEXT_URL);\n  },\n  [router],\n);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  const onSubmit = useCallback(\n    async (data: CreateRulesOnboardingBody) => {\n      // runs in background so we can move on to next step faster\n      const result = await createRulesOnboardingAction(data);\n      if (isActionError(result)) {\n        toastError({ description: \"Failed to set up categories. Please try again.\" });\n        return;\n      }\n      router.push(NEXT_URL);\n    },\n    [router],\n  );\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1992266583",
    "pr_number": 370,
    "pr_file": "apps/web/app/(app)/clean/page.tsx",
    "created_at": "2025-03-12T20:47:21+00:00",
    "commented_code": "+import { Suspense } from \"react\";\n+import { Card } from \"@/components/ui/card\";\n+import { cn } from \"@/utils\";\n+import { CleanStep } from \"./types\";\n+import { IntroStep } from \"@/app/(app)/clean/IntroStep\";\n+import { ActionSelectionStep } from \"@/app/(app)/clean/ActionSelectionStep\";\n+import { CleanInstructionsStep } from \"@/app/(app)/clean/CleanInstructionsStep\";\n+import { TimeRangeStep } from \"@/app/(app)/clean/TimeRangeStep\";\n+import { ConfirmationStep } from \"@/app/(app)/clean/ConfirmationStep\";\n+import { ProcessingStep } from \"@/app/(app)/clean/ProcessingStep\";\n+import { getGmailClient } from \"@/utils/gmail/client\";\n+import { auth } from \"@/app/api/auth/[...nextauth]/auth\";\n+import { getInboxCount, getUnreadCount } from \"@/utils/assess\";\n+import { Loading } from \"@/components/Loading\";\n+\n+export default async function CleanPage({\n+  searchParams,\n+}: {\n+  searchParams: { step: string; jobId: string; isPreviewBatch: string };\n+}) {\n+  const step = searchParams.step\n+    ? Number.parseInt(searchParams.step)\n+    : CleanStep.INTRO;\n+  const jobId = searchParams.jobId;\n+\n+  const session = await auth();\n+  if (!session?.user.email) return <div>Not authenticated</div>;\n+\n+  const gmail = getGmailClient(session);\n+  const inboxCount = await getInboxCount(gmail);\n+  const unreadCount = await getUnreadCount(gmail);\n+  const unhandledCount = Math.min(unreadCount, inboxCount);\n+\n+  const renderStepContent = () => {\n+    switch (step) {\n+      case CleanStep.ARCHIVE_OR_READ:\n+        return <ActionSelectionStep />;\n+\n+      case CleanStep.TIME_RANGE:\n+        return <TimeRangeStep />;\n+\n+      case CleanStep.LABEL_OPTIONS:\n+        return <CleanInstructionsStep />;\n+\n+      case CleanStep.FINAL_CONFIRMATION:\n+        return <ConfirmationStep unhandledCount={unhandledCount} />;\n+\n+      case CleanStep.PROCESSING:\n+        return (\n+          <Suspense fallback={<Loading />}>\n+            <ProcessingStep\n+              userId={session.user.id}\n+              jobId={jobId}\n+              userEmail={session.user.email || \"\"}\n+              isPreviewBatch={searchParams.isPreviewBatch}\n+            />\n+          </Suspense>\n+        );\n+\n+      // first / default step\n+      default:\n+        return (\n+          <IntroStep unhandledCount={unhandledCount} cleanAction={\"ARCHIVE\"} />\n+        );\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n+        {renderStepContent()}\n+      </Card>\n+    </div>\n+  );\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1992266583",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 370,
        "pr_file": "apps/web/app/(app)/clean/page.tsx",
        "discussion_id": "1992266583",
        "commented_code": "@@ -0,0 +1,75 @@\n+import { Suspense } from \"react\";\n+import { Card } from \"@/components/ui/card\";\n+import { cn } from \"@/utils\";\n+import { CleanStep } from \"./types\";\n+import { IntroStep } from \"@/app/(app)/clean/IntroStep\";\n+import { ActionSelectionStep } from \"@/app/(app)/clean/ActionSelectionStep\";\n+import { CleanInstructionsStep } from \"@/app/(app)/clean/CleanInstructionsStep\";\n+import { TimeRangeStep } from \"@/app/(app)/clean/TimeRangeStep\";\n+import { ConfirmationStep } from \"@/app/(app)/clean/ConfirmationStep\";\n+import { ProcessingStep } from \"@/app/(app)/clean/ProcessingStep\";\n+import { getGmailClient } from \"@/utils/gmail/client\";\n+import { auth } from \"@/app/api/auth/[...nextauth]/auth\";\n+import { getInboxCount, getUnreadCount } from \"@/utils/assess\";\n+import { Loading } from \"@/components/Loading\";\n+\n+export default async function CleanPage({\n+  searchParams,\n+}: {\n+  searchParams: { step: string; jobId: string; isPreviewBatch: string };\n+}) {\n+  const step = searchParams.step\n+    ? Number.parseInt(searchParams.step)\n+    : CleanStep.INTRO;\n+  const jobId = searchParams.jobId;\n+\n+  const session = await auth();\n+  if (!session?.user.email) return <div>Not authenticated</div>;\n+\n+  const gmail = getGmailClient(session);\n+  const inboxCount = await getInboxCount(gmail);\n+  const unreadCount = await getUnreadCount(gmail);\n+  const unhandledCount = Math.min(unreadCount, inboxCount);\n+\n+  const renderStepContent = () => {\n+    switch (step) {\n+      case CleanStep.ARCHIVE_OR_READ:\n+        return <ActionSelectionStep />;\n+\n+      case CleanStep.TIME_RANGE:\n+        return <TimeRangeStep />;\n+\n+      case CleanStep.LABEL_OPTIONS:\n+        return <CleanInstructionsStep />;\n+\n+      case CleanStep.FINAL_CONFIRMATION:\n+        return <ConfirmationStep unhandledCount={unhandledCount} />;\n+\n+      case CleanStep.PROCESSING:\n+        return (\n+          <Suspense fallback={<Loading />}>\n+            <ProcessingStep\n+              userId={session.user.id}\n+              jobId={jobId}\n+              userEmail={session.user.email || \"\"}\n+              isPreviewBatch={searchParams.isPreviewBatch}\n+            />\n+          </Suspense>\n+        );\n+\n+      // first / default step\n+      default:\n+        return (\n+          <IntroStep unhandledCount={unhandledCount} cleanAction={\"ARCHIVE\"} />\n+        );\n+    }\n+  };\n+\n+  return (\n+    <div>\n+      <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n+        {renderStepContent()}\n+      </Card>\n+    </div>\n+  );\n+}",
        "comment_created_at": "2025-03-12T20:47:21+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add error handling for async operations**\n\nThe component performs several async operations without proper error handling. If any of the Gmail API calls fail, it could result in an unhandled rejection.\n\n\nConsider adding a try/catch block to handle potential errors:\n\n```diff\nexport default async function CleanPage({\n  searchParams,\n}: {\n  searchParams: { step: string; jobId: string; isPreviewBatch: string };\n}) {\n+ try {\n    const step = searchParams.step\n      ? Number.parseInt(searchParams.step)\n      : CleanStep.INTRO;\n    const jobId = searchParams.jobId;\n\n    const session = await auth();\n    if (!session?.user.email) return <div>Not authenticated</div>;\n\n    const gmail = getGmailClient(session);\n    const inboxCount = await getInboxCount(gmail);\n    const unreadCount = await getUnreadCount(gmail);\n    const unhandledCount = Math.min(unreadCount, inboxCount);\n\n    // Rest of the component...\n    \n    return (\n      <div>\n        <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n          {renderStepContent()}\n        </Card>\n      </div>\n    );\n+ } catch (error) {\n+   console.error(\"Error loading clean page:\", error);\n+   return (\n+     <div>\n+       <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n+         <CardTitle>Error loading page</CardTitle>\n+         <CardDescription>\n+           There was an error loading this page. Please try again later.\n+         </CardDescription>\n+       </Card>\n+     </div>\n+   );\n+ }\n}\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nexport default async function CleanPage({\n  searchParams,\n}: {\n  searchParams: { step: string; jobId: string; isPreviewBatch: string };\n}) {\n  try {\n    const step = searchParams.step\n      ? Number.parseInt(searchParams.step)\n      : CleanStep.INTRO;\n    const jobId = searchParams.jobId;\n\n    const session = await auth();\n    if (!session?.user.email) return <div>Not authenticated</div>;\n\n    const gmail = getGmailClient(session);\n    const inboxCount = await getInboxCount(gmail);\n    const unreadCount = await getUnreadCount(gmail);\n    const unhandledCount = Math.min(unreadCount, inboxCount);\n\n    const renderStepContent = () => {\n      switch (step) {\n        case CleanStep.ARCHIVE_OR_READ:\n          return <ActionSelectionStep />;\n\n        case CleanStep.TIME_RANGE:\n          return <TimeRangeStep />;\n\n        case CleanStep.LABEL_OPTIONS:\n          return <CleanInstructionsStep />;\n\n        case CleanStep.FINAL_CONFIRMATION:\n          return <ConfirmationStep unhandledCount={unhandledCount} />;\n\n        case CleanStep.PROCESSING:\n          return (\n            <Suspense fallback={<Loading />}>\n              <ProcessingStep\n                userId={session.user.id}\n                jobId={jobId}\n                userEmail={session.user.email || \"\"}\n                isPreviewBatch={searchParams.isPreviewBatch}\n              />\n            </Suspense>\n          );\n\n        // first / default step\n        default:\n          return (\n            <IntroStep unhandledCount={unhandledCount} cleanAction={\"ARCHIVE\"} />\n          );\n      }\n    };\n\n    return (\n      <div>\n        <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n          {renderStepContent()}\n        </Card>\n      </div>\n    );\n  } catch (error) {\n    console.error(\"Error loading clean page:\", error);\n    return (\n      <div>\n        <Card className=\"my-4 max-w-2xl p-6 sm:mx-4 md:mx-auto\">\n          <CardTitle>Error loading page</CardTitle>\n          <CardDescription>\n            There was an error loading this page. Please try again later.\n          </CardDescription>\n        </Card>\n      </div>\n    );\n  }\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1994326229",
    "pr_number": 370,
    "pr_file": "apps/web/app/(app)/clean/PreviewBatch.tsx",
    "created_at": "2025-03-13T21:28:55+00:00",
    "commented_code": "+\"use client\";\n+\n+import { parseAsBoolean, useQueryState } from \"nuqs\";\n+import { toastError } from \"@/components/Toast\";\n+import { Button } from \"@/components/ui/button\";\n+import {\n+  CardGreen,\n+  CardContent,\n+  CardDescription,\n+  CardHeader,\n+  CardTitle,\n+} from \"@/components/ui/card\";\n+import { cleanInboxAction } from \"@/utils/actions/clean\";\n+import { isActionError } from \"@/utils/error\";\n+import { CleanAction, type CleanupJob } from \"@prisma/client\";\n+\n+export function PreviewBatch({ job }: { job: CleanupJob }) {\n+  const [, setIsPreviewBatch] = useQueryState(\"isPreviewBatch\", parseAsBoolean);\n+  const handleRunOnFullInbox = async () => {\n+    setIsPreviewBatch(false);\n+    const result = await cleanInboxAction({\n+      daysOld: job.daysOld,\n+      instructions: job.instructions || \"\",\n+      action: job.action,\n+      skips: {\n+        reply: job.skipReply,\n+        starred: job.skipStarred,\n+        calendar: job.skipCalendar,\n+        receipt: job.skipReceipt,\n+        attachment: job.skipAttachment,\n+      },\n+    });\n+\n+    if (isActionError(result)) {\n+      toastError({ description: result.error });\n+      return;\n+    }\n+  };",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1994326229",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 370,
        "pr_file": "apps/web/app/(app)/clean/PreviewBatch.tsx",
        "discussion_id": "1994326229",
        "commented_code": "@@ -0,0 +1,64 @@\n+\"use client\";\n+\n+import { parseAsBoolean, useQueryState } from \"nuqs\";\n+import { toastError } from \"@/components/Toast\";\n+import { Button } from \"@/components/ui/button\";\n+import {\n+  CardGreen,\n+  CardContent,\n+  CardDescription,\n+  CardHeader,\n+  CardTitle,\n+} from \"@/components/ui/card\";\n+import { cleanInboxAction } from \"@/utils/actions/clean\";\n+import { isActionError } from \"@/utils/error\";\n+import { CleanAction, type CleanupJob } from \"@prisma/client\";\n+\n+export function PreviewBatch({ job }: { job: CleanupJob }) {\n+  const [, setIsPreviewBatch] = useQueryState(\"isPreviewBatch\", parseAsBoolean);\n+  const handleRunOnFullInbox = async () => {\n+    setIsPreviewBatch(false);\n+    const result = await cleanInboxAction({\n+      daysOld: job.daysOld,\n+      instructions: job.instructions || \"\",\n+      action: job.action,\n+      skips: {\n+        reply: job.skipReply,\n+        starred: job.skipStarred,\n+        calendar: job.skipCalendar,\n+        receipt: job.skipReceipt,\n+        attachment: job.skipAttachment,\n+      },\n+    });\n+\n+    if (isActionError(result)) {\n+      toastError({ description: result.error });\n+      return;\n+    }\n+  };",
        "comment_created_at": "2025-03-13T21:28:55+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add loading state and improve error handling.**\n\nThe function `handleRunOnFullInbox` lacks a loading state indicator and could benefit from more detailed error handling. Consider adding a loading state to give users feedback during the operation.\n\n```diff\nexport function PreviewBatch({ job }: { job: CleanupJob }) {\n  const [, setIsPreviewBatch] = useQueryState(\"isPreviewBatch\", parseAsBoolean);\n+  const [isLoading, setIsLoading] = useState(false);\n  const handleRunOnFullInbox = async () => {\n+    setIsLoading(true);\n    setIsPreviewBatch(false);\n-    const result = await cleanInboxAction({\n-      daysOld: job.daysOld,\n-      instructions: job.instructions || \"\",\n-      action: job.action,\n-      skips: {\n-        reply: job.skipReply,\n-        starred: job.skipStarred,\n-        calendar: job.skipCalendar,\n-        receipt: job.skipReceipt,\n-        attachment: job.skipAttachment,\n-      },\n-    });\n-\n-    if (isActionError(result)) {\n-      toastError({ description: result.error });\n-      return;\n+    try {\n+      const result = await cleanInboxAction({\n+        daysOld: job.daysOld,\n+        instructions: job.instructions || \"\",\n+        action: job.action,\n+        skips: {\n+          reply: job.skipReply,\n+          starred: job.skipStarred,\n+          calendar: job.skipCalendar,\n+          receipt: job.skipReceipt,\n+          attachment: job.skipAttachment,\n+        },\n+      });\n+\n+      if (isActionError(result)) {\n+        toastError({ description: result.error });\n+        return;\n+      }\n+    } catch (error) {\n+      console.error(\"Failed to run cleanup:\", error);\n+      toastError({ \n+        description: \"An unexpected error occurred while processing your request.\" \n+      });\n+    } finally {\n+      setIsLoading(false);\n     }\n   };\n```\n\nDon't forget to add the import for useState:\n```diff\n+import { useState } from \"react\";\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nimport { useState } from \"react\";\n\nexport function PreviewBatch({ job }: { job: CleanupJob }) {\n  const [, setIsPreviewBatch] = useQueryState(\"isPreviewBatch\", parseAsBoolean);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const handleRunOnFullInbox = async () => {\n    setIsLoading(true);\n    setIsPreviewBatch(false);\n    try {\n      const result = await cleanInboxAction({\n        daysOld: job.daysOld,\n        instructions: job.instructions || \"\",\n        action: job.action,\n        skips: {\n          reply: job.skipReply,\n          starred: job.skipStarred,\n          calendar: job.skipCalendar,\n          receipt: job.skipReceipt,\n          attachment: job.skipAttachment,\n        },\n      });\n\n      if (isActionError(result)) {\n        toastError({ description: result.error });\n        return;\n      }\n    } catch (error) {\n      console.error(\"Failed to run cleanup:\", error);\n      toastError({ \n        description: \"An unexpected error occurred while processing your request.\" \n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ...rest of the component\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949004297",
    "pr_number": 330,
    "pr_file": "apps/web/components/email-list/EmailThread.tsx",
    "created_at": "2025-02-10T12:53:08+00:00",
    "commented_code": "setShowForward(false);\n   }, []);\n \n+  useEffect(() => {\n+    async function loadNudge() {\n+      const result = await generateNudgeAction({\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+\n+      console.log(\"\ud83d\ude80 ~ result:\", result);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1949004297",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/components/email-list/EmailThread.tsx",
        "discussion_id": "1949004297",
        "commented_code": "@@ -159,6 +165,28 @@ function EmailMessage({\n     setShowForward(false);\n   }, []);\n \n+  useEffect(() => {\n+    async function loadNudge() {\n+      const result = await generateNudgeAction({\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+\n+      console.log(\"\ud83d\ude80 ~ result:\", result);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);",
        "comment_created_at": "2025-02-10T12:53:08+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Remove console.log and add error handling.**\n\nThe implementation needs the following improvements:\n1. Remove the console.log statement.\n2. Add error handling for the nudge generation call.\n\nApply this diff to improve the implementation:\n\n```diff\n   useEffect(() => {\n     async function loadNudge() {\n-      const result = await generateNudgeAction({\n-        messages: [\n-          {\n-            id: message.id,\n-            textHtml: message.textHtml,\n-            textPlain: message.textPlain,\n-            date: message.headers.date,\n-            from: message.headers.from,\n-            to: message.headers.to,\n-            subject: message.headers.subject,\n-          },\n-        ],\n-      });\n+      try {\n+        const result = await generateNudgeAction({\n+          messages: [\n+            {\n+              id: message.id,\n+              textHtml: message.textHtml,\n+              textPlain: message.textPlain,\n+              date: message.headers.date,\n+              from: message.headers.from,\n+              to: message.headers.to,\n+              subject: message.headers.subject,\n+            },\n+          ],\n+        });\n-      console.log(\"\ud83d\ude80 ~ result:\", result);\n+        if (result.error) {\n+          // Handle error (e.g., show toast notification)\n+          console.error(\"Failed to generate nudge:\", result.error);\n+        }\n+      } catch (error) {\n+        // Handle error (e.g., show toast notification)\n+        console.error(\"Failed to generate nudge:\", error);\n+      }\n     }\n\n     if (generateNudge) loadNudge();\n   }, [generateNudge, message]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  useEffect(() => {\n    async function loadNudge() {\n      try {\n        const result = await generateNudgeAction({\n          messages: [\n            {\n              id: message.id,\n              textHtml: message.textHtml,\n              textPlain: message.textPlain,\n              date: message.headers.date,\n              from: message.headers.from,\n              to: message.headers.to,\n              subject: message.headers.subject,\n            },\n          ],\n        });\n        if (result.error) {\n          // Handle error (e.g., show toast notification)\n          console.error(\"Failed to generate nudge:\", result.error);\n        }\n      } catch (error) {\n        // Handle error (e.g., show toast notification)\n        console.error(\"Failed to generate nudge:\", error);\n      }\n    }\n\n    if (generateNudge) loadNudge();\n  }, [generateNudge, message]);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949042632",
    "pr_number": 330,
    "pr_file": "apps/web/components/email-list/EmailMessage.tsx",
    "created_at": "2025-02-10T13:20:39+00:00",
    "commented_code": "+import { useCallback, useMemo, useState, useRef, useEffect } from \"react\";\n+import {\n+  ForwardIcon,\n+  ReplyIcon,\n+  ChevronsUpDownIcon,\n+  ChevronsDownUpIcon,\n+} from \"lucide-react\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { extractNameFromEmail } from \"@/utils/email\";\n+import { formatShortDate } from \"@/utils/date\";\n+import { ComposeEmailFormLazy } from \"@/app/(app)/compose/ComposeEmailFormLazy\";\n+import { Button } from \"@/components/ui/button\";\n+import { Separator } from \"@/components/ui/separator\";\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { forwardEmailHtml, forwardEmailSubject } from \"@/utils/gmail/forward\";\n+import { extractEmailReply } from \"@/utils/parse/extract-reply.client\";\n+import type { ReplyingToEmail } from \"@/app/(app)/compose/ComposeEmailForm\";\n+import { createReplyContent } from \"@/utils/gmail/reply\";\n+import { cn } from \"@/utils\";\n+import { generateNudgeAction } from \"@/utils/actions/generate-reply\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+import { EmailDetails } from \"@/components/email-list/EmailDetails\";\n+import { HtmlEmail, PlainEmail } from \"@/components/email-list/EmailContents\";\n+import { EmailAttachments } from \"@/components/email-list/EmailAttachments\";\n+\n+export function EmailMessage({\n+  message,\n+  refetch,\n+  showReplyButton,\n+  defaultShowReply,\n+  draftReply,\n+  expanded,\n+  onExpand,\n+  onSendSuccess,\n+  generateNudge,\n+}: {\n+  message: ThreadMessage;\n+  draftReply?: ThreadMessage;\n+  refetch: () => void;\n+  showReplyButton: boolean;\n+  defaultShowReply?: boolean;\n+  expanded: boolean;\n+  onExpand: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  generateNudge?: boolean;\n+}) {\n+  const [showReply, setShowReply] = useState(defaultShowReply || false);\n+  const replyRef = useRef<HTMLDivElement>(null);\n+  const [showDetails, setShowDetails] = useState(false);\n+\n+  useEffect(() => {\n+    if (defaultShowReply && replyRef.current) {\n+      setTimeout(() => {\n+        replyRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n+        // NOTE: a little hacky\n+        // If this is set lower it doesn't work (or if we turn off autofocus, it does, but we want autofocus).\n+      }, 500);\n+    }\n+  }, [defaultShowReply]);\n+\n+  const onReply = useCallback(() => setShowReply(true), []);\n+  const [showForward, setShowForward] = useState(false);\n+  const onForward = useCallback(() => setShowForward(true), []);\n+\n+  const onCloseCompose = useCallback(() => {\n+    setShowReply(false);\n+    setShowForward(false);\n+  }, []);\n+\n+  useEffect(() => {\n+    async function loadNudge() {\n+      const result = await generateNudgeAction({\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+\n+      console.log(\"\ud83d\ude80 ~ result:\", result);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1949042632",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/components/email-list/EmailMessage.tsx",
        "discussion_id": "1949042632",
        "commented_code": "@@ -0,0 +1,248 @@\n+import { useCallback, useMemo, useState, useRef, useEffect } from \"react\";\n+import {\n+  ForwardIcon,\n+  ReplyIcon,\n+  ChevronsUpDownIcon,\n+  ChevronsDownUpIcon,\n+} from \"lucide-react\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { extractNameFromEmail } from \"@/utils/email\";\n+import { formatShortDate } from \"@/utils/date\";\n+import { ComposeEmailFormLazy } from \"@/app/(app)/compose/ComposeEmailFormLazy\";\n+import { Button } from \"@/components/ui/button\";\n+import { Separator } from \"@/components/ui/separator\";\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { forwardEmailHtml, forwardEmailSubject } from \"@/utils/gmail/forward\";\n+import { extractEmailReply } from \"@/utils/parse/extract-reply.client\";\n+import type { ReplyingToEmail } from \"@/app/(app)/compose/ComposeEmailForm\";\n+import { createReplyContent } from \"@/utils/gmail/reply\";\n+import { cn } from \"@/utils\";\n+import { generateNudgeAction } from \"@/utils/actions/generate-reply\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+import { EmailDetails } from \"@/components/email-list/EmailDetails\";\n+import { HtmlEmail, PlainEmail } from \"@/components/email-list/EmailContents\";\n+import { EmailAttachments } from \"@/components/email-list/EmailAttachments\";\n+\n+export function EmailMessage({\n+  message,\n+  refetch,\n+  showReplyButton,\n+  defaultShowReply,\n+  draftReply,\n+  expanded,\n+  onExpand,\n+  onSendSuccess,\n+  generateNudge,\n+}: {\n+  message: ThreadMessage;\n+  draftReply?: ThreadMessage;\n+  refetch: () => void;\n+  showReplyButton: boolean;\n+  defaultShowReply?: boolean;\n+  expanded: boolean;\n+  onExpand: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  generateNudge?: boolean;\n+}) {\n+  const [showReply, setShowReply] = useState(defaultShowReply || false);\n+  const replyRef = useRef<HTMLDivElement>(null);\n+  const [showDetails, setShowDetails] = useState(false);\n+\n+  useEffect(() => {\n+    if (defaultShowReply && replyRef.current) {\n+      setTimeout(() => {\n+        replyRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n+        // NOTE: a little hacky\n+        // If this is set lower it doesn't work (or if we turn off autofocus, it does, but we want autofocus).\n+      }, 500);\n+    }\n+  }, [defaultShowReply]);\n+\n+  const onReply = useCallback(() => setShowReply(true), []);\n+  const [showForward, setShowForward] = useState(false);\n+  const onForward = useCallback(() => setShowForward(true), []);\n+\n+  const onCloseCompose = useCallback(() => {\n+    setShowReply(false);\n+    setShowForward(false);\n+  }, []);\n+\n+  useEffect(() => {\n+    async function loadNudge() {\n+      const result = await generateNudgeAction({\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+\n+      console.log(\"\ud83d\ude80 ~ result:\", result);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);",
        "comment_created_at": "2025-02-10T13:20:39+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Remove console.log and add error handling.**\n\nThe nudge generation implementation needs two improvements:\n1. Remove the debug console.log statement\n2. Add error handling for the generateNudgeAction call\n\nConsider this improved implementation:\n\n```diff\n useEffect(() => {\n   async function loadNudge() {\n-    const result = await generateNudgeAction({\n-      messages: [\n-        {\n-          id: message.id,\n-          textHtml: message.textHtml,\n-          textPlain: message.textPlain,\n-          date: message.headers.date,\n-          from: message.headers.from,\n-          to: message.headers.to,\n-          subject: message.headers.subject,\n-        },\n-      ],\n-    });\n-\n-    console.log(\"\ud83d\ude80 ~ result:\", result);\n+    try {\n+      const result = await generateNudgeAction({\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+      // Handle successful result\n+    } catch (error) {\n+      // Handle error appropriately\n+      console.error('Failed to generate nudge:', error);\n+    }\n   }\n\n   if (generateNudge) loadNudge();\n }, [generateNudge, message]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  useEffect(() => {\n    async function loadNudge() {\n      try {\n        const result = await generateNudgeAction({\n          messages: [\n            {\n              id: message.id,\n              textHtml: message.textHtml,\n              textPlain: message.textPlain,\n              date: message.headers.date,\n              from: message.headers.from,\n              to: message.headers.to,\n              subject: message.headers.subject,\n            },\n          ],\n        });\n        // Handle successful result\n      } catch (error) {\n        // Handle error appropriately\n        console.error('Failed to generate nudge:', error);\n      }\n    }\n\n    if (generateNudge) loadNudge();\n  }, [generateNudge, message]);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]