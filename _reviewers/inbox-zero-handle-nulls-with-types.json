[
  {
    "discussion_id": "2083466854",
    "pr_number": 431,
    "pr_file": "apps/web/components/assistant-chat/tools.tsx",
    "created_at": "2025-05-11T09:35:06+00:00",
    "commented_code": "+import Link from \"next/link\";\n+import type {\n+  CreateRuleSchema,\n+  EnableColdEmailBlockerSchema,\n+  EnableReplyZeroSchema,\n+  UpdateAboutSchema,\n+  UpdateRuleSchema,\n+} from \"@/app/api/chat/route\";\n+import { Card } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { SparklesIcon, TrashIcon } from \"lucide-react\";\n+import { ActionBadges } from \"@/app/(app)/automation/Rules\";\n+import { toastSuccess } from \"@/components/Toast\";\n+\n+export function ToolCard({ toolName, args }: { toolName: string; args: any }) {\n+  switch (toolName) {\n+    case \"create_rule\":\n+      return <CreatedRule args={args as CreateRuleSchema} />;\n+    case \"update_rule\":\n+      return <UpdatedRule args={args as UpdateRuleSchema} />;\n+    case \"update_about\":\n+      return <UpdateAbout args={args as UpdateAboutSchema} />;\n+    case \"enable_cold_email_blocker\":\n+      return (\n+        <EnableColdEmailBlocker args={args as EnableColdEmailBlockerSchema} />\n+      );\n+    case \"enable_reply_zero\":\n+      return <EnableReplyZero args={args as EnableReplyZeroSchema} />;\n+  }\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083466854",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/components/assistant-chat/tools.tsx",
        "discussion_id": "2083466854",
        "commented_code": "@@ -0,0 +1,190 @@\n+import Link from \"next/link\";\n+import type {\n+  CreateRuleSchema,\n+  EnableColdEmailBlockerSchema,\n+  EnableReplyZeroSchema,\n+  UpdateAboutSchema,\n+  UpdateRuleSchema,\n+} from \"@/app/api/chat/route\";\n+import { Card } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { SparklesIcon, TrashIcon } from \"lucide-react\";\n+import { ActionBadges } from \"@/app/(app)/automation/Rules\";\n+import { toastSuccess } from \"@/components/Toast\";\n+\n+export function ToolCard({ toolName, args }: { toolName: string; args: any }) {\n+  switch (toolName) {\n+    case \"create_rule\":\n+      return <CreatedRule args={args as CreateRuleSchema} />;\n+    case \"update_rule\":\n+      return <UpdatedRule args={args as UpdateRuleSchema} />;\n+    case \"update_about\":\n+      return <UpdateAbout args={args as UpdateAboutSchema} />;\n+    case \"enable_cold_email_blocker\":\n+      return (\n+        <EnableColdEmailBlocker args={args as EnableColdEmailBlockerSchema} />\n+      );\n+    case \"enable_reply_zero\":\n+      return <EnableReplyZero args={args as EnableReplyZeroSchema} />;\n+  }\n+}",
        "comment_created_at": "2025-05-11T09:35:06+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add type safety improvements and default case handling**\n\nThe `args` parameter is typed as `any`, which circumvents TypeScript's type checking. Additionally, the switch statement lacks a default case for handling unknown tool names.\n\n\n```diff\n-export function ToolCard({ toolName, args }: { toolName: string; args: any }) {\n+type ToolArgs = \n+  | { tool: \"create_rule\"; args: CreateRuleSchema }\n+  | { tool: \"update_rule\"; args: UpdateRuleSchema }\n+  | { tool: \"update_about\"; args: UpdateAboutSchema }\n+  | { tool: \"enable_cold_email_blocker\"; args: EnableColdEmailBlockerSchema }\n+  | { tool: \"enable_reply_zero\"; args: EnableReplyZeroSchema };\n+\n+export function ToolCard({ toolName, args }: { toolName: string; args: unknown }) {\n  switch (toolName) {\n    case \"create_rule\":\n      return <CreatedRule args={args as CreateRuleSchema} />;\n    case \"update_rule\":\n      return <UpdatedRule args={args as UpdateRuleSchema} />;\n    case \"update_about\":\n      return <UpdateAbout args={args as UpdateAboutSchema} />;\n    case \"enable_cold_email_blocker\":\n      return (\n        <EnableColdEmailBlocker args={args as EnableColdEmailBlockerSchema} />\n      );\n    case \"enable_reply_zero\":\n      return <EnableReplyZero args={args as EnableReplyZeroSchema} />;\n+    default:\n+      return <Card className=\"p-4\">Unknown tool: {toolName}</Card>;\n  }\n}\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083487914",
    "pr_number": 431,
    "pr_file": "apps/web/components/assistant-chat/message.tsx",
    "created_at": "2025-05-11T11:01:30+00:00",
    "commented_code": "+\"use client\";\n+\n+import { memo, useState } from \"react\";\n+import type { UIMessage } from \"ai\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+import { AnimatePresence, motion } from \"framer-motion\";\n+import { SparklesIcon } from \"lucide-react\";\n+import equal from \"fast-deep-equal\";\n+import { Markdown } from \"./markdown\";\n+import { cn } from \"@/utils\";\n+import { MessageEditor } from \"./message-editor\";\n+import { MessageReasoning } from \"./message-reasoning\";\n+import { ToolCard } from \"@/components/assistant-chat/tools\";\n+import { Skeleton } from \"@/components/ui/skeleton\";\n+\n+const PurePreviewMessage = ({\n+  message,\n+  isLoading,\n+  setMessages,\n+  reload,\n+}: {\n+  message: UIMessage;\n+  isLoading: boolean;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  reload: UseChatHelpers[\"reload\"];\n+}) => {\n+  const [mode, setMode] = useState<\"view\" | \"edit\">(\"view\");\n+\n+  return (\n+    <AnimatePresence>\n+      <motion.div\n+        data-testid={`message-${message.role}`}\n+        className=\"group/message mx-auto w-full max-w-3xl px-4\"\n+        initial={{ y: 5, opacity: 0 }}\n+        animate={{ y: 0, opacity: 1 }}\n+        data-role={message.role}\n+      >\n+        <div\n+          className={cn(\n+            \"flex w-full gap-4 group-data-[role=user]/message:ml-auto group-data-[role=user]/message:max-w-2xl\",\n+            {\n+              \"w-full\": mode === \"edit\",\n+              \"group-data-[role=user]/message:w-fit\": mode !== \"edit\",\n+            },\n+          )}\n+        >\n+          {message.role === \"assistant\" && (\n+            <div className=\"flex size-8 shrink-0 items-center justify-center rounded-full bg-background ring-1 ring-border\">\n+              <div className=\"translate-y-px\">\n+                <SparklesIcon size={14} />\n+              </div>\n+            </div>\n+          )}\n+\n+          <div className=\"flex w-full flex-col gap-4\">\n+            {message.parts?.map((part, index) => {\n+              const { type } = part;\n+              const key = `message-${message.id}-part-${index}`;\n+\n+              if (type === \"reasoning\") {\n+                return (\n+                  <MessageReasoning\n+                    key={key}\n+                    isLoading={isLoading}\n+                    reasoning={part.reasoning}\n+                  />\n+                );\n+              }\n+\n+              if (type === \"text\") {\n+                if (mode === \"view\") {\n+                  return (\n+                    <div key={key} className=\"flex flex-row items-start gap-2\">\n+                      <div\n+                        data-testid=\"message-content\"\n+                        className={cn(\"flex flex-col gap-4\", {\n+                          \"rounded-xl bg-primary px-3 py-2 text-primary-foreground\":\n+                            message.role === \"user\",\n+                        })}\n+                      >\n+                        <Markdown>{part.text}</Markdown>\n+                      </div>\n+                    </div>\n+                  );\n+                }\n+\n+                if (mode === \"edit\") {\n+                  return (\n+                    <div key={key} className=\"flex flex-row items-start gap-2\">\n+                      <div className=\"size-8\" />\n+\n+                      <MessageEditor\n+                        key={message.id}\n+                        message={message}\n+                        setMode={setMode}\n+                        setMessages={setMessages}\n+                        reload={reload}\n+                      />\n+                    </div>\n+                  );\n+                }\n+              }\n+\n+              if (type === \"tool-invocation\") {\n+                const { toolInvocation } = part;\n+                const { toolName, toolCallId, state } = toolInvocation;\n+\n+                if (state === \"call\") {\n+                  return <Skeleton className=\"h-16 w-full\" />;\n+                }\n+\n+                if (state === \"result\") {\n+                  return (\n+                    <ToolCard\n+                      key={toolCallId}\n+                      toolName={toolName}\n+                      args={toolInvocation.args}\n+                    />\n+                  );\n+                }\n+              }",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083487914",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/components/assistant-chat/message.tsx",
        "discussion_id": "2083487914",
        "commented_code": "@@ -0,0 +1,172 @@\n+\"use client\";\n+\n+import { memo, useState } from \"react\";\n+import type { UIMessage } from \"ai\";\n+import type { UseChatHelpers } from \"@ai-sdk/react\";\n+import { AnimatePresence, motion } from \"framer-motion\";\n+import { SparklesIcon } from \"lucide-react\";\n+import equal from \"fast-deep-equal\";\n+import { Markdown } from \"./markdown\";\n+import { cn } from \"@/utils\";\n+import { MessageEditor } from \"./message-editor\";\n+import { MessageReasoning } from \"./message-reasoning\";\n+import { ToolCard } from \"@/components/assistant-chat/tools\";\n+import { Skeleton } from \"@/components/ui/skeleton\";\n+\n+const PurePreviewMessage = ({\n+  message,\n+  isLoading,\n+  setMessages,\n+  reload,\n+}: {\n+  message: UIMessage;\n+  isLoading: boolean;\n+  setMessages: UseChatHelpers[\"setMessages\"];\n+  reload: UseChatHelpers[\"reload\"];\n+}) => {\n+  const [mode, setMode] = useState<\"view\" | \"edit\">(\"view\");\n+\n+  return (\n+    <AnimatePresence>\n+      <motion.div\n+        data-testid={`message-${message.role}`}\n+        className=\"group/message mx-auto w-full max-w-3xl px-4\"\n+        initial={{ y: 5, opacity: 0 }}\n+        animate={{ y: 0, opacity: 1 }}\n+        data-role={message.role}\n+      >\n+        <div\n+          className={cn(\n+            \"flex w-full gap-4 group-data-[role=user]/message:ml-auto group-data-[role=user]/message:max-w-2xl\",\n+            {\n+              \"w-full\": mode === \"edit\",\n+              \"group-data-[role=user]/message:w-fit\": mode !== \"edit\",\n+            },\n+          )}\n+        >\n+          {message.role === \"assistant\" && (\n+            <div className=\"flex size-8 shrink-0 items-center justify-center rounded-full bg-background ring-1 ring-border\">\n+              <div className=\"translate-y-px\">\n+                <SparklesIcon size={14} />\n+              </div>\n+            </div>\n+          )}\n+\n+          <div className=\"flex w-full flex-col gap-4\">\n+            {message.parts?.map((part, index) => {\n+              const { type } = part;\n+              const key = `message-${message.id}-part-${index}`;\n+\n+              if (type === \"reasoning\") {\n+                return (\n+                  <MessageReasoning\n+                    key={key}\n+                    isLoading={isLoading}\n+                    reasoning={part.reasoning}\n+                  />\n+                );\n+              }\n+\n+              if (type === \"text\") {\n+                if (mode === \"view\") {\n+                  return (\n+                    <div key={key} className=\"flex flex-row items-start gap-2\">\n+                      <div\n+                        data-testid=\"message-content\"\n+                        className={cn(\"flex flex-col gap-4\", {\n+                          \"rounded-xl bg-primary px-3 py-2 text-primary-foreground\":\n+                            message.role === \"user\",\n+                        })}\n+                      >\n+                        <Markdown>{part.text}</Markdown>\n+                      </div>\n+                    </div>\n+                  );\n+                }\n+\n+                if (mode === \"edit\") {\n+                  return (\n+                    <div key={key} className=\"flex flex-row items-start gap-2\">\n+                      <div className=\"size-8\" />\n+\n+                      <MessageEditor\n+                        key={message.id}\n+                        message={message}\n+                        setMode={setMode}\n+                        setMessages={setMessages}\n+                        reload={reload}\n+                      />\n+                    </div>\n+                  );\n+                }\n+              }\n+\n+              if (type === \"tool-invocation\") {\n+                const { toolInvocation } = part;\n+                const { toolName, toolCallId, state } = toolInvocation;\n+\n+                if (state === \"call\") {\n+                  return <Skeleton className=\"h-16 w-full\" />;\n+                }\n+\n+                if (state === \"result\") {\n+                  return (\n+                    <ToolCard\n+                      key={toolCallId}\n+                      toolName={toolName}\n+                      args={toolInvocation.args}\n+                    />\n+                  );\n+                }\n+              }",
        "comment_created_at": "2025-05-11T11:01:30+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add missing null check for toolInvocation before accessing its properties.**\n\nThe code accesses properties of `toolInvocation` without verifying its existence, which could lead to runtime errors if the invocation data is malformed.\n\n```diff\n              if (type === \"tool-invocation\") {\n                const { toolInvocation } = part;\n+               if (!toolInvocation) {\n+                 return null;\n+               }\n                const { toolName, toolCallId, state } = toolInvocation;\n\n                if (state === \"call\") {\n                  return <Skeleton className=\"h-16 w-full\" />;\n                }\n\n                if (state === \"result\") {\n                  return (\n                    <ToolCard\n                      key={toolCallId}\n                      toolName={toolName}\n                      args={toolInvocation.args}\n                    />\n                  );\n                }\n              }\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2095372684",
    "pr_number": 431,
    "pr_file": "apps/web/components/assistant-chat/tools.tsx",
    "created_at": "2025-05-19T10:16:09+00:00",
    "commented_code": "+import { parseAsString, useQueryStates } from \"nuqs\";\n+import type {\n+  CreateRuleSchema,\n+  UpdateAboutSchema,\n+  UpdateRuleConditionSchema,\n+  UpdateRuleActionsSchema,\n+  UpdateLearnedPatternsSchema,\n+} from \"@/utils/ai/assistant/chat\";\n+import { Card } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { EyeIcon, SparklesIcon, TrashIcon } from \"lucide-react\";\n+import { ActionBadges } from \"@/app/(app)/[emailAccountId]/automation/Rules\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { deleteRuleAction } from \"@/utils/actions/rule\";\n+import { useAccount } from \"@/providers/EmailAccountProvider\";\n+\n+export function ToolCard({\n+  toolName,\n+  args,\n+  ruleId,\n+}: {\n+  toolName: string;\n+  args: any;\n+  ruleId?: string;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2095372684",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/components/assistant-chat/tools.tsx",
        "discussion_id": "2095372684",
        "commented_code": "@@ -0,0 +1,414 @@\n+import { parseAsString, useQueryStates } from \"nuqs\";\n+import type {\n+  CreateRuleSchema,\n+  UpdateAboutSchema,\n+  UpdateRuleConditionSchema,\n+  UpdateRuleActionsSchema,\n+  UpdateLearnedPatternsSchema,\n+} from \"@/utils/ai/assistant/chat\";\n+import { Card } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { EyeIcon, SparklesIcon, TrashIcon } from \"lucide-react\";\n+import { ActionBadges } from \"@/app/(app)/[emailAccountId]/automation/Rules\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { deleteRuleAction } from \"@/utils/actions/rule\";\n+import { useAccount } from \"@/providers/EmailAccountProvider\";\n+\n+export function ToolCard({\n+  toolName,\n+  args,\n+  ruleId,\n+}: {\n+  toolName: string;\n+  args: any;\n+  ruleId?: string;",
        "comment_created_at": "2025-05-19T10:16:09+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add type safety instead of using `any` for args parameter**\n\nUsing `any` for the `args` parameter circumvents TypeScript's type checking. This can lead to runtime errors if the wrong properties are accessed.\n\n```diff\n-  args: any;\n+  args: \n+    | CreateRuleSchema\n+    | UpdateRuleConditionSchema\n+    | UpdateRuleActionsSchema\n+    | UpdateLearnedPatternsSchema\n+    | UpdateAboutSchema;\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  toolName: string;\n  args:\n    | CreateRuleSchema\n    | UpdateRuleConditionSchema\n    | UpdateRuleActionsSchema\n    | UpdateLearnedPatternsSchema\n    | UpdateAboutSchema;\n  ruleId?: string;\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/components/assistant-chat/tools.tsx around lines 23 to 25, replace\nthe type of the args parameter from any to a more specific type that accurately\nrepresents the expected structure of args. Define an interface or type alias for\nargs that includes all expected properties and their types to ensure type safety\nand enable TypeScript to catch potential errors at compile time.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2058111579",
    "pr_number": 412,
    "pr_file": "apps/web/app/(app)/[account]/cold-email-blocker/ColdEmailList.tsx",
    "created_at": "2025-04-24T10:56:08+00:00",
    "commented_code": "`/api/user/cold-email?page=${page}`,\n   );\n \n-  const session = useSession();\n-  const userEmail = session.data?.user?.email || \"\";\n-\n   const { selected, isAllSelected, onToggleSelect, onToggleSelectAll } =\n     useToggleSelect(data?.coldEmails || []);\n \n-  // const [isApproving, setIsApproving] = useState(false);\n-  const [isRejecting, setIsRejecting] = useState(false);\n+  const { email } = useAccount();\n+  const { executeAsync: markNotColdEmail, isExecuting } = useAction(\n+    markNotColdEmailAction.bind(null, email),\n+    {\n+      onSuccess: () => {\n+        toastSuccess({ description: \"Marked not cold email!\" });\n+      },\n+      onError: () => {\n+        toastError({ description: \"Error marking not cold email!\" });\n+      },\n+    },\n+  );",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2058111579",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 412,
        "pr_file": "apps/web/app/(app)/[account]/cold-email-blocker/ColdEmailList.tsx",
        "discussion_id": "2058111579",
        "commented_code": "@@ -35,64 +36,42 @@ export function ColdEmailList() {\n     `/api/user/cold-email?page=${page}`,\n   );\n \n-  const session = useSession();\n-  const userEmail = session.data?.user?.email || \"\";\n-\n   const { selected, isAllSelected, onToggleSelect, onToggleSelectAll } =\n     useToggleSelect(data?.coldEmails || []);\n \n-  // const [isApproving, setIsApproving] = useState(false);\n-  const [isRejecting, setIsRejecting] = useState(false);\n+  const { email } = useAccount();\n+  const { executeAsync: markNotColdEmail, isExecuting } = useAction(\n+    markNotColdEmailAction.bind(null, email),\n+    {\n+      onSuccess: () => {\n+        toastSuccess({ description: \"Marked not cold email!\" });\n+      },\n+      onError: () => {\n+        toastError({ description: \"Error marking not cold email!\" });\n+      },\n+    },\n+  );",
        "comment_created_at": "2025-04-24T10:56:08+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Guard against an undefined `email` before creating the action**\n\n`useAccount()` can return `undefined` until the provider finishes loading.  \nIf `email` is `undefined` when this hook is first invoked, `markNotColdEmailAction.bind(null, email)` will be bound with an invalid identifier and every subsequent `executeAsync` will fail server-side.\n\nA simple defensive check plus memoisation avoids the problem and prevents the hook from being re-created on every render when the account changes:\n\n```diff\n-const { email } = useAccount();\n-const { executeAsync: markNotColdEmail, isExecuting } = useAction(\n-  markNotColdEmailAction.bind(null, email),\n+const { email } = useAccount();\n+\n+const actionFn = useMemo(() => {\n+  if (!email) return undefined;          // defer until we have a value\n+  return markNotColdEmailAction.bind(null, email);\n+}, [email]);\n+\n+const { executeAsync: markNotColdEmail, isExecuting } = useAction(\n+  // `useAction` allows the first argument to be undefined while loading.\n+  // When undefined, the hook is inert until a valid fn is supplied.\n+  actionFn as any,\n```\n\n\n\n> Committable suggestion skipped: line range outside the PR's diff.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1992266588",
    "pr_number": 370,
    "pr_file": "apps/web/app/(app)/clean/ProcessingStep.tsx",
    "created_at": "2025-03-12T20:47:22+00:00",
    "commented_code": "+import { EmailFirehose } from \"@/app/(app)/clean/EmailFirehose\";\n+import { getThreadsByJobId } from \"@/utils/redis/clean\";\n+import prisma from \"@/utils/prisma\";\n+import { CardTitle } from \"@/components/ui/card\";\n+import { PreviewBatchCompleted } from \"@/app/(app)/clean/PreviewBatchCompleted\";\n+\n+export async function ProcessingStep({\n+  userId,\n+  jobId,\n+  userEmail,\n+  isPreviewBatch,\n+}: {\n+  userId: string;\n+  jobId: string;\n+  userEmail: string;\n+  isPreviewBatch?: string;\n+}) {\n+  const threads = await getThreadsByJobId(userId, jobId);\n+\n+  if (!jobId) return <CardTitle>No job ID</CardTitle>;\n+\n+  const job = await prisma.cleanupJob.findUnique({\n+    where: { id: jobId, userId },\n+  });\n+\n+  if (!job) return <CardTitle>Job not found</CardTitle>;\n+\n+  const [total, archived] = await Promise.all([\n+    prisma.cleanupThread.count({ where: { jobId, userId } }),\n+    prisma.cleanupThread.count({ where: { jobId, userId, archived: true } }),\n+  ]);\n+\n+  return (\n+    <>\n+      {isPreviewBatch && (\n+        <PreviewBatchCompleted total={total} archived={archived} job={job} />\n+      )}\n+      <EmailFirehose\n+        threads={threads.filter((t) => t.status !== \"processing\")}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1992266588",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 370,
        "pr_file": "apps/web/app/(app)/clean/ProcessingStep.tsx",
        "discussion_id": "1992266588",
        "commented_code": "@@ -0,0 +1,46 @@\n+import { EmailFirehose } from \"@/app/(app)/clean/EmailFirehose\";\n+import { getThreadsByJobId } from \"@/utils/redis/clean\";\n+import prisma from \"@/utils/prisma\";\n+import { CardTitle } from \"@/components/ui/card\";\n+import { PreviewBatchCompleted } from \"@/app/(app)/clean/PreviewBatchCompleted\";\n+\n+export async function ProcessingStep({\n+  userId,\n+  jobId,\n+  userEmail,\n+  isPreviewBatch,\n+}: {\n+  userId: string;\n+  jobId: string;\n+  userEmail: string;\n+  isPreviewBatch?: string;\n+}) {\n+  const threads = await getThreadsByJobId(userId, jobId);\n+\n+  if (!jobId) return <CardTitle>No job ID</CardTitle>;\n+\n+  const job = await prisma.cleanupJob.findUnique({\n+    where: { id: jobId, userId },\n+  });\n+\n+  if (!job) return <CardTitle>Job not found</CardTitle>;\n+\n+  const [total, archived] = await Promise.all([\n+    prisma.cleanupThread.count({ where: { jobId, userId } }),\n+    prisma.cleanupThread.count({ where: { jobId, userId, archived: true } }),\n+  ]);\n+\n+  return (\n+    <>\n+      {isPreviewBatch && (\n+        <PreviewBatchCompleted total={total} archived={archived} job={job} />\n+      )}\n+      <EmailFirehose\n+        threads={threads.filter((t) => t.status !== \"processing\")}",
        "comment_created_at": "2025-03-12T20:47:22+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Add null/undefined check before filtering threads**\n\nThe code assumes `threads` is always an array, but if `getThreadsByJobId` returns null or undefined (e.g., due to an error), the `filter` operation will throw an error.\n\n\n```diff\n- threads={threads.filter((t) => t.status !== \"processing\")}\n+ threads={(threads || []).filter((t) => t.status !== \"processing\")}\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n        threads={(threads || []).filter((t) => t.status !== \"processing\")}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1823321766",
    "pr_number": 249,
    "pr_file": "apps/web/components/kanban/KanbanBoard.tsx",
    "created_at": "2024-10-30T20:07:00+00:00",
    "commented_code": "+\"use client\";\n+\n+// based off of https://github.com/Georgegriff/react-dnd-kit-tailwind-shadcn-ui\n+\n+import { useMemo, useRef, useState } from \"react\";\n+import { createPortal } from \"react-dom\";\n+\n+import { BoardColumn, BoardContainer } from \"./BoardColumn\";\n+import {\n+  DndContext,\n+  type DragEndEvent,\n+  type DragOverEvent,\n+  DragOverlay,\n+  type DragStartEvent,\n+  useSensor,\n+  useSensors,\n+  KeyboardSensor,\n+  type Announcements,\n+  type UniqueIdentifier,\n+  TouchSensor,\n+  MouseSensor,\n+} from \"@dnd-kit/core\";\n+import { SortableContext, arrayMove } from \"@dnd-kit/sortable\";\n+import { type Task, TaskCard } from \"./TaskCard\";\n+import type { Column } from \"./BoardColumn\";\n+import { hasDraggableData } from \"./kanban-utils\";\n+import { coordinateGetter } from \"./multipleContainersKeyboardPreset\";\n+\n+// const initialTasks: Task[] = [\n+//   {\n+//     id: \"task1\",\n+//     columnId: \"done\",\n+//     content: \"Project initiation and planning\",\n+//   },\n+//   {\n+//     id: \"task2\",\n+//     columnId: \"done\",\n+//     content: \"Gather requirements from stakeholders\",\n+//   },\n+//   {\n+//     id: \"task3\",\n+//     columnId: \"done\",\n+//     content: \"Create wireframes and mockups\",\n+//   },\n+//   {\n+//     id: \"task4\",\n+//     columnId: \"in-progress\",\n+//     content: \"Develop homepage layout\",\n+//   },\n+//   {\n+//     id: \"task5\",\n+//     columnId: \"in-progress\",\n+//     content: \"Design color scheme and typography\",\n+//   },\n+//   {\n+//     id: \"task6\",\n+//     columnId: \"todo\",\n+//     content: \"Implement user authentication\",\n+//   },\n+//   {\n+//     id: \"task7\",\n+//     columnId: \"todo\",\n+//     content: \"Build contact us page\",\n+//   },\n+//   {\n+//     id: \"task8\",\n+//     columnId: \"todo\",\n+//     content: \"Create product catalog\",\n+//   },\n+//   {\n+//     id: \"task9\",\n+//     columnId: \"todo\",\n+//     content: \"Develop about us page\",\n+//   },\n+//   {\n+//     id: \"task10\",\n+//     columnId: \"todo\",\n+//     content: \"Optimize website for mobile devices\",\n+//   },\n+//   {\n+//     id: \"task11\",\n+//     columnId: \"todo\",\n+//     content: \"Integrate payment gateway\",\n+//   },\n+//   {\n+//     id: \"task12\",\n+//     columnId: \"todo\",\n+//     content: \"Perform testing and bug fixing\",\n+//   },\n+//   {\n+//     id: \"task13\",\n+//     columnId: \"todo\",\n+//     content: \"Launch website and deploy to server\",\n+//   },\n+// ];\n+\n+export function KanbanBoard({\n+  categories,\n+  items,\n+}: {\n+  categories: Column[];\n+  items: Task[];\n+}) {\n+  const [columns, setColumns] = useState<Column[]>(categories);\n+  const pickedUpTaskColumn = useRef<string | null>(null);\n+  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\n+\n+  const [tasks, setTasks] = useState<Task[]>(items);\n+\n+  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\n+\n+  const [activeTask, setActiveTask] = useState<Task | null>(null);\n+\n+  const sensors = useSensors(\n+    useSensor(MouseSensor),\n+    useSensor(TouchSensor),\n+    useSensor(KeyboardSensor, {\n+      coordinateGetter: coordinateGetter,\n+    }),\n+  );\n+\n+  function getDraggingTaskData(taskId: UniqueIdentifier, columnId: string) {\n+    const tasksInColumn = tasks.filter((task) => task.columnId === columnId);\n+    const taskPosition = tasksInColumn.findIndex((task) => task.id === taskId);\n+    const column = columns.find((col) => col.id === columnId);\n+    return {\n+      tasksInColumn,\n+      taskPosition,\n+      column,\n+    };\n+  }\n+\n+  const announcements: Announcements = {\n+    onDragStart({ active }) {\n+      if (!hasDraggableData(active)) return;\n+      if (active.data.current?.type === \"Column\") {\n+        const startColumnIdx = columnsId.findIndex((id) => id === active.id);\n+        const startColumn = columns[startColumnIdx];\n+        return `Picked up Column ${startColumn?.title} at position: ${\n+          startColumnIdx + 1\n+        } of ${columnsId.length}`;\n+      } else if (active.data.current?.type === \"Task\") {\n+        pickedUpTaskColumn.current = active.data.current.task.columnId;\n+        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\n+          active.id,\n+          pickedUpTaskColumn.current!, // TODO: !\n+        );",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1823321766",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 249,
        "pr_file": "apps/web/components/kanban/KanbanBoard.tsx",
        "discussion_id": "1823321766",
        "commented_code": "@@ -0,0 +1,368 @@\n+\"use client\";\n+\n+// based off of https://github.com/Georgegriff/react-dnd-kit-tailwind-shadcn-ui\n+\n+import { useMemo, useRef, useState } from \"react\";\n+import { createPortal } from \"react-dom\";\n+\n+import { BoardColumn, BoardContainer } from \"./BoardColumn\";\n+import {\n+  DndContext,\n+  type DragEndEvent,\n+  type DragOverEvent,\n+  DragOverlay,\n+  type DragStartEvent,\n+  useSensor,\n+  useSensors,\n+  KeyboardSensor,\n+  type Announcements,\n+  type UniqueIdentifier,\n+  TouchSensor,\n+  MouseSensor,\n+} from \"@dnd-kit/core\";\n+import { SortableContext, arrayMove } from \"@dnd-kit/sortable\";\n+import { type Task, TaskCard } from \"./TaskCard\";\n+import type { Column } from \"./BoardColumn\";\n+import { hasDraggableData } from \"./kanban-utils\";\n+import { coordinateGetter } from \"./multipleContainersKeyboardPreset\";\n+\n+// const initialTasks: Task[] = [\n+//   {\n+//     id: \"task1\",\n+//     columnId: \"done\",\n+//     content: \"Project initiation and planning\",\n+//   },\n+//   {\n+//     id: \"task2\",\n+//     columnId: \"done\",\n+//     content: \"Gather requirements from stakeholders\",\n+//   },\n+//   {\n+//     id: \"task3\",\n+//     columnId: \"done\",\n+//     content: \"Create wireframes and mockups\",\n+//   },\n+//   {\n+//     id: \"task4\",\n+//     columnId: \"in-progress\",\n+//     content: \"Develop homepage layout\",\n+//   },\n+//   {\n+//     id: \"task5\",\n+//     columnId: \"in-progress\",\n+//     content: \"Design color scheme and typography\",\n+//   },\n+//   {\n+//     id: \"task6\",\n+//     columnId: \"todo\",\n+//     content: \"Implement user authentication\",\n+//   },\n+//   {\n+//     id: \"task7\",\n+//     columnId: \"todo\",\n+//     content: \"Build contact us page\",\n+//   },\n+//   {\n+//     id: \"task8\",\n+//     columnId: \"todo\",\n+//     content: \"Create product catalog\",\n+//   },\n+//   {\n+//     id: \"task9\",\n+//     columnId: \"todo\",\n+//     content: \"Develop about us page\",\n+//   },\n+//   {\n+//     id: \"task10\",\n+//     columnId: \"todo\",\n+//     content: \"Optimize website for mobile devices\",\n+//   },\n+//   {\n+//     id: \"task11\",\n+//     columnId: \"todo\",\n+//     content: \"Integrate payment gateway\",\n+//   },\n+//   {\n+//     id: \"task12\",\n+//     columnId: \"todo\",\n+//     content: \"Perform testing and bug fixing\",\n+//   },\n+//   {\n+//     id: \"task13\",\n+//     columnId: \"todo\",\n+//     content: \"Launch website and deploy to server\",\n+//   },\n+// ];\n+\n+export function KanbanBoard({\n+  categories,\n+  items,\n+}: {\n+  categories: Column[];\n+  items: Task[];\n+}) {\n+  const [columns, setColumns] = useState<Column[]>(categories);\n+  const pickedUpTaskColumn = useRef<string | null>(null);\n+  const columnsId = useMemo(() => columns.map((col) => col.id), [columns]);\n+\n+  const [tasks, setTasks] = useState<Task[]>(items);\n+\n+  const [activeColumn, setActiveColumn] = useState<Column | null>(null);\n+\n+  const [activeTask, setActiveTask] = useState<Task | null>(null);\n+\n+  const sensors = useSensors(\n+    useSensor(MouseSensor),\n+    useSensor(TouchSensor),\n+    useSensor(KeyboardSensor, {\n+      coordinateGetter: coordinateGetter,\n+    }),\n+  );\n+\n+  function getDraggingTaskData(taskId: UniqueIdentifier, columnId: string) {\n+    const tasksInColumn = tasks.filter((task) => task.columnId === columnId);\n+    const taskPosition = tasksInColumn.findIndex((task) => task.id === taskId);\n+    const column = columns.find((col) => col.id === columnId);\n+    return {\n+      tasksInColumn,\n+      taskPosition,\n+      column,\n+    };\n+  }\n+\n+  const announcements: Announcements = {\n+    onDragStart({ active }) {\n+      if (!hasDraggableData(active)) return;\n+      if (active.data.current?.type === \"Column\") {\n+        const startColumnIdx = columnsId.findIndex((id) => id === active.id);\n+        const startColumn = columns[startColumnIdx];\n+        return `Picked up Column ${startColumn?.title} at position: ${\n+          startColumnIdx + 1\n+        } of ${columnsId.length}`;\n+      } else if (active.data.current?.type === \"Task\") {\n+        pickedUpTaskColumn.current = active.data.current.task.columnId;\n+        const { tasksInColumn, taskPosition, column } = getDraggingTaskData(\n+          active.id,\n+          pickedUpTaskColumn.current!, // TODO: !\n+        );",
        "comment_created_at": "2024-10-30T20:07:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Remove non-null assertion.**\n\nReplace the non-null assertion with proper type checking to maintain type safety.\n\n```diff\n-pickedUpTaskColumn.current!, // TODO: !\n+pickedUpTaskColumn.current ?? '',  // or handle the null case explicitly\n```\n\n\n> Committable suggestion was skipped due to low confidence.\n\n<details>\n<summary>\ud83e\uddf0 Tools</summary>\n\n<details>\n<summary>\ud83e\ude9b Biome</summary>\n\n[error] 146-146: Forbidden non-null assertion.\n\n\n\n(lint/style/noNonNullAssertion)\n\n</details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]