[
  {
    "discussion_id": "2183909069",
    "pr_number": 519,
    "pr_file": "apps/web/app/api/scheduled-actions/execute/route.ts",
    "created_at": "2025-07-03T23:12:53+00:00",
    "commented_code": "+import { verifySignatureAppRouter } from \"@upstash/qstash/nextjs\";\n+import type { NextRequest } from \"next/server\";\n+import { z } from \"zod\";\n+import { withError } from \"@/utils/middleware\";\n+import { createScopedLogger } from \"@/utils/logger\";\n+import { markQStashActionAsExecuting } from \"@/utils/scheduled-actions/scheduler\";\n+import { executeScheduledAction } from \"@/utils/scheduled-actions/executor\";\n+import prisma from \"@/utils/prisma\";\n+import { ScheduledActionStatus } from \"@prisma/client\";\n+\n+const logger = createScopedLogger(\"qstash-scheduled-actions-executor\");\n+\n+export const maxDuration = 300; // 5 minutes\n+\n+const ScheduledActionPayloadSchema = z.object({",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2183909069",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/app/api/scheduled-actions/execute/route.ts",
        "discussion_id": "2183909069",
        "commented_code": "@@ -0,0 +1,121 @@\n+import { verifySignatureAppRouter } from \"@upstash/qstash/nextjs\";\n+import type { NextRequest } from \"next/server\";\n+import { z } from \"zod\";\n+import { withError } from \"@/utils/middleware\";\n+import { createScopedLogger } from \"@/utils/logger\";\n+import { markQStashActionAsExecuting } from \"@/utils/scheduled-actions/scheduler\";\n+import { executeScheduledAction } from \"@/utils/scheduled-actions/executor\";\n+import prisma from \"@/utils/prisma\";\n+import { ScheduledActionStatus } from \"@prisma/client\";\n+\n+const logger = createScopedLogger(\"qstash-scheduled-actions-executor\");\n+\n+export const maxDuration = 300; // 5 minutes\n+\n+const ScheduledActionPayloadSchema = z.object({",
        "comment_created_at": "2025-07-03T23:12:53+00:00",
        "comment_author": "elie222",
        "comment_body": "=> `scheduledActionPayloadSchema`\r\nto be consistent with the project\r\n\r\nor even more:\r\n=> `scheduledActionBody` is the format we use in most other places. but up to you.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183925668",
    "pr_number": 519,
    "pr_file": "apps/web/utils/actions/rule.validation.ts",
    "created_at": "2025-07-03T23:24:43+00:00",
    "commented_code": "export const enableDraftRepliesBody = z.object({ enable: z.boolean() });\n export type EnableDraftRepliesBody = z.infer<typeof enableDraftRepliesBody>;\n \n-const categoryAction = z.enum([\"label\", \"label_archive\", \"none\"]);\n+const categoryAction = z.enum([\n+  \"label\",\n+  \"label_archive\",\n+  \"label_archive_1_week\",",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2183925668",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/utils/actions/rule.validation.ts",
        "discussion_id": "2183925668",
        "commented_code": "@@ -163,7 +169,12 @@ export type UpdateRuleSettingsBody = z.infer<typeof updateRuleSettingsBody>;\n export const enableDraftRepliesBody = z.object({ enable: z.boolean() });\n export type EnableDraftRepliesBody = z.infer<typeof enableDraftRepliesBody>;\n \n-const categoryAction = z.enum([\"label\", \"label_archive\", \"none\"]);\n+const categoryAction = z.enum([\n+  \"label\",\n+  \"label_archive\",\n+  \"label_archive_1_week\",",
        "comment_created_at": "2025-07-03T23:24:43+00:00",
        "comment_author": "elie222",
        "comment_body": "wonder if we call this `label_delay_archive`/ `label_delayed_archive` / `label_archive_delayed` or similar. rather than mentioning 1 week which could change if we adjust the code",
        "pr_file_module": null
      },
      {
        "comment_id": "2185524696",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/utils/actions/rule.validation.ts",
        "discussion_id": "2183925668",
        "commented_code": "@@ -163,7 +169,12 @@ export type UpdateRuleSettingsBody = z.infer<typeof updateRuleSettingsBody>;\n export const enableDraftRepliesBody = z.object({ enable: z.boolean() });\n export type EnableDraftRepliesBody = z.infer<typeof enableDraftRepliesBody>;\n \n-const categoryAction = z.enum([\"label\", \"label_archive\", \"none\"]);\n+const categoryAction = z.enum([\n+  \"label\",\n+  \"label_archive\",\n+  \"label_archive_1_week\",",
        "comment_created_at": "2025-07-04T14:35:45+00:00",
        "comment_author": "edulelis",
        "comment_body": "I added the 1_week option because the code explicitly delays the archive by one week, as there is no user input. However, I also agree that it makes sense to have `label_archive_delayed` and later allow the user to input the desired delay if needed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2127325923",
    "pr_number": 478,
    "pr_file": "apps/web/utils/ai/digest/summarize-email.ts",
    "created_at": "2025-06-04T19:49:29+00:00",
    "commented_code": "+import { z } from \"zod\";\n+import { chatCompletionObject } from \"@/utils/llms\";\n+import type { EmailAccountWithAI } from \"@/utils/llms/types\";\n+import { createScopedLogger } from \"@/utils/logger\";\n+import type { EmailForLLM } from \"@/utils/types\";\n+import { stringifyEmailSimple } from \"@/utils/stringify-email\";\n+\n+const logger = createScopedLogger(\"summarize-email\");\n+\n+const schema = z.object({\n+  summary: z.string().nullish().describe(\"The summary of the email.\"),\n+});\n+export type AICheckResult = z.infer<typeof schema>;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2127325923",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 478,
        "pr_file": "apps/web/utils/ai/digest/summarize-email.ts",
        "discussion_id": "2127325923",
        "commented_code": "@@ -0,0 +1,55 @@\n+import { z } from \"zod\";\n+import { chatCompletionObject } from \"@/utils/llms\";\n+import type { EmailAccountWithAI } from \"@/utils/llms/types\";\n+import { createScopedLogger } from \"@/utils/logger\";\n+import type { EmailForLLM } from \"@/utils/types\";\n+import { stringifyEmailSimple } from \"@/utils/stringify-email\";\n+\n+const logger = createScopedLogger(\"summarize-email\");\n+\n+const schema = z.object({\n+  summary: z.string().nullish().describe(\"The summary of the email.\"),\n+});\n+export type AICheckResult = z.infer<typeof schema>;",
        "comment_created_at": "2025-06-04T19:49:29+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Rename type to better reflect its purpose.**\n\nThe type name `AICheckResult` is misleading since this function performs summarization, not checking.\n\n\n\n```diff\nconst schema = z.object({\n  summary: z.string().nullish().describe(\"The summary of the email.\"),\n});\n-export type AICheckResult = z.infer<typeof schema>;\n+export type AISummarizeResult = z.infer<typeof schema>;\n```\n\nUpdate the return type annotation accordingly:\n\n```diff\n-}): Promise<AICheckResult> {\n+}): Promise<AISummarizeResult> {\n```\n\n```diff\n-  return aiResponse.object as AICheckResult;\n+  return aiResponse.object as AISummarizeResult;\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nimport { z } from \"zod\";\n\nconst schema = z.object({\n  summary: z.string().nullish().describe(\"The summary of the email.\"),\n});\nexport type AISummarizeResult = z.infer<typeof schema>;\n\nexport async function summarizeEmail(\n  /* your parameters here */\n): Promise<AISummarizeResult> {\n  // \u2026existing logic\u2026\n\n  const aiResponse = await aiClient.call({\n    /* \u2026 */\n  });\n\n  return aiResponse.object as AISummarizeResult;\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/utils/ai/digest/summarize-email.ts between lines 10 and 13, the type\nname AICheckResult is misleading because the function is about summarization,\nnot checking. Rename the type to something like AISummaryResult or\nEmailSummaryResult to better reflect its purpose, and update all references to\nthis type accordingly to maintain consistency.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2100250308",
    "pr_number": 441,
    "pr_file": "apps/web/utils/ai/assistant/chat.ts",
    "created_at": "2025-05-21T13:06:49+00:00",
    "commented_code": "messages,\n   emailAccountId,\n   user,\n+  onFinish,\n }: {\n-  messages: { role: \"user\" | \"assistant\"; content: string }[];\n+  messages: Message[];\n   emailAccountId: string;\n   user: EmailAccountWithAI;\n+  onFinish: (messages: any) => void;\n }) {",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2100250308",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 441,
        "pr_file": "apps/web/utils/ai/assistant/chat.ts",
        "discussion_id": "2100250308",
        "commented_code": "@@ -161,10 +108,12 @@ export async function aiProcessAssistantChat({\n   messages,\n   emailAccountId,\n   user,\n+  onFinish,\n }: {\n-  messages: { role: \"user\" | \"assistant\"; content: string }[];\n+  messages: Message[];\n   emailAccountId: string;\n   user: EmailAccountWithAI;\n+  onFinish: (messages: any) => void;\n }) {",
        "comment_created_at": "2025-05-21T13:06:49+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Make `onFinish` optional and strongly-typed**\n\n`onFinish` is marked as required, yet the callback is guarded with `if (onFinish)` below.  \nThis is contradictory and forces callers to pass a dummy function.  \nIn addition, `any` discards helpful type-checking \u2013 we already know the payload is `Message[]`.\n\n```diff\n-  onFinish: (messages: any) => void;\n+  onFinish?: (messages: Message[]) => void;\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/utils/ai/assistant/chat.ts around lines 111 to 117, the onFinish\ncallback is currently required but conditionally called, which is inconsistent.\nMake the onFinish parameter optional by adding a question mark, and update its\ntype from any to Message[] to enforce strong typing and avoid passing dummy\nfunctions. Adjust the function signature accordingly to reflect these changes.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1948654121",
    "pr_number": 330,
    "pr_file": "apps/web/utils/types.ts",
    "created_at": "2025-02-10T09:01:14+00:00",
    "commented_code": "cc?: string;\n   subject: string;\n   content: string;\n+  date?: Date;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1948654121",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/utils/types.ts",
        "discussion_id": "1948654121",
        "commented_code": "@@ -107,4 +107,5 @@ export type EmailForLLM = {\n   cc?: string;\n   subject: string;\n   content: string;\n+  date?: Date;",
        "comment_created_at": "2025-02-10T09:01:14+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:bulb: Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Verify if date should be optional.**\n\nThe `date` property is marked as optional (`date?: Date`). Given that `internalDate` is required in the categorization schema, should this be required here as well?\n\n\nLet's check how this type is used:\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Search for usages of EmailForLLM type and date property\nrg -A 5 \"EmailForLLM\" && rg \"date.*Date\" --type ts\n```\n\nLength of output: 20626\n\n---\n\n\n\n</details>\n\n**Action: Remove the optional modifier on the \u201cdate\u201d property.**\n\nAfter reviewing the usage across the codebase and seeing that functions like `getEmailForLLM` always provide a date value (whether as a string via ISO format or as a parsed Date), it\u2019s clear that consumers are built with the assumption that a date is always present. In the type definition (in `apps/web/utils/types.ts`), the property appears twice\u2014once as a required string and again as an optional Date\u2014which is both redundant and potentially error\u2011prone given that the categorization schema requires an internal date. The fix is to remove the optional modifier (or refactor to use differently named properties if both representations are needed).\n\n- **Location:** `apps/web/utils/types.ts` (definition of `EmailForLLM`)\n- **Issue:** Duplicate declaration of `date` exists (a required string and an optional Date) causing inconsistency with the categorization schema's expectation that a date always be provided.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]