[
  {
    "discussion_id": "2128403183",
    "pr_number": 485,
    "pr_file": "apps/web/app/(landing)/login/page.tsx",
    "created_at": "2025-06-05T09:34:00+00:00",
    "commented_code": "</p>\n         </div>\n         <div className=\"mt-4\">\n-          <LoginForm />\n+          <Suspense>\n+            <LoginForm />\n+          </Suspense>",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2128403183",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 485,
        "pr_file": "apps/web/app/(landing)/login/page.tsx",
        "discussion_id": "2128403183",
        "commented_code": "@@ -37,7 +38,9 @@ export default async function AuthenticationPage(props: {\n           </p>\n         </div>\n         <div className=\"mt-4\">\n-          <LoginForm />\n+          <Suspense>\n+            <LoginForm />\n+          </Suspense>",
        "comment_created_at": "2025-06-05T09:34:00+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Remove unnecessary Suspense wrapper**\n\nThe `LoginForm` component doesn't appear to require Suspense wrapping based on the code analysis:\n\n1. `LoginForm` is not lazy-loaded (no `React.lazy()`)\n2. It doesn't use any async operations that would suspend\n3. No fallback UI is provided, which could lead to issues if Suspense triggers\n\nSince `LoginForm` is a regular synchronous component using standard hooks (`useState`, `useSearchParams`), the Suspense wrapper is unnecessary.\n\n\n\n```diff\n-          <Suspense>\n-            <LoginForm />\n-          </Suspense>\n+          <LoginForm />\n```\n\nAlso remove the unused import:\n\n```diff\n-import { Suspense } from \"react\";\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n// apps/web/app/(landing)/login/page.tsx\n\nimport React from \"react\";\n-import { Suspense } from \"react\";\nimport LoginForm from \"./LoginForm\";\n\nexport default function LoginPage() {\n  return (\n-    <Suspense>\n-      <LoginForm />\n-    </Suspense>\n+    <LoginForm />\n  );\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(landing)/login/page.tsx around lines 41 to 43, remove the\nSuspense wrapper around the LoginForm component because LoginForm is a\nsynchronous component that does not require Suspense. Also, remove the unused\nSuspense import from the file to clean up unused code.\n```\n\n</details>\n\n<!-- This is an auto-generated reply by CodeRabbit -->",
        "pr_file_module": null
      },
      {
        "comment_id": "2128434311",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 485,
        "pr_file": "apps/web/app/(landing)/login/page.tsx",
        "discussion_id": "2128403183",
        "commented_code": "@@ -37,7 +38,9 @@ export default async function AuthenticationPage(props: {\n           </p>\n         </div>\n         <div className=\"mt-4\">\n-          <LoginForm />\n+          <Suspense>\n+            <LoginForm />\n+          </Suspense>",
        "comment_created_at": "2025-06-05T09:48:51+00:00",
        "comment_author": "elie222",
        "comment_body": "It is needed as it has useSearchParams inside it",
        "pr_file_module": null
      },
      {
        "comment_id": "2128435050",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 485,
        "pr_file": "apps/web/app/(landing)/login/page.tsx",
        "discussion_id": "2128403183",
        "commented_code": "@@ -37,7 +38,9 @@ export default async function AuthenticationPage(props: {\n           </p>\n         </div>\n         <div className=\"mt-4\">\n-          <LoginForm />\n+          <Suspense>\n+            <LoginForm />\n+          </Suspense>",
        "comment_created_at": "2025-06-05T09:49:13+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "@elie222 Thank you for the clarification! You're absolutely right. I understand now that the Suspense wrapper is necessary because `useSearchParams` can trigger suspense in Next.js App Router. I'll make note of this for future reviews.\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: elie222\nPR: elie222/inbox-zero#485\nFile: apps/web/app/(landing)/login/page.tsx:41-43\nTimestamp: 2025-06-05T09:49:12.138Z\nLearning: In Next.js App Router, components that use the `useSearchParams` hook require a Suspense boundary to handle the asynchronous nature of search parameter access. The Suspense wrapper is necessary and should not be removed when a component uses useSearchParams.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n\n<!-- <agentComponentType>chat-answer</agentComponentType> -->\n\n<!-- <rawResChunk><answer>@elie222 Thank you for the clarification! You're absolutely right. I understand now that the Suspense wrapper is necessary because `useSearchParams` can trigger suspense in Next.js App Router. I'll make note of this for future reviews.\n\n---\n\n<details>\n<summary>\u270f\ufe0f Learnings added</summary>\n\n```\nLearnt from: elie222\nPR: elie222/inbox-zero#485\nFile: apps/web/app/(landing)/login/page.tsx:41-43\nTimestamp: 2025-06-05T09:49:12.138Z\nLearning: In Next.js App Router, components that use the `useSearchParams` hook require a Suspense boundary to handle the asynchronous nature of search parameter access. The Suspense wrapper is necessary and should not be removed when a component uses useSearchParams.\n```\n\n> Note: Learnings are effective only in the context of similar code segments. To apply general coding guidelines, please configure [review instructions](https://docs.coderabbit.ai/guides/review-instructions). You can manage existing learnings in the [app](https://app.coderabbit.ai/learnings).\n\n</details>\n\n</answer></rawResChunk> -->\n\n<!-- This is an auto-generated reply by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2097897419",
    "pr_number": 431,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/page.tsx",
    "created_at": "2025-05-20T12:56:11+00:00",
    "commented_code": "+import { Suspense } from \"react\";\n+import { cookies } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+import prisma from \"@/utils/prisma\";\n+import { PermissionsCheck } from \"@/app/(app)/[emailAccountId]/PermissionsCheck\";\n+import { GmailProvider } from \"@/providers/GmailProvider\";\n+import { ASSISTANT_ONBOARDING_COOKIE } from \"@/utils/cookies\";\n+import { prefixPath } from \"@/utils/path\";\n+import { Chat } from \"@/components/assistant-chat/chat\";\n+\n+export const maxDuration = 300; // Applies to the actions\n+\n+export default async function AssistantPage({\n+  params,\n+}: {\n+  params: Promise<{ emailAccountId: string }>;\n+}) {\n+  const { emailAccountId } = await params;\n+\n+  // onboarding redirect\n+  const cookieStore = await cookies();\n+  const viewedOnboarding =\n+    cookieStore.get(ASSISTANT_ONBOARDING_COOKIE)?.value === \"true\";\n+",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2097897419",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/page.tsx",
        "discussion_id": "2097897419",
        "commented_code": "@@ -0,0 +1,56 @@\n+import { Suspense } from \"react\";\n+import { cookies } from \"next/headers\";\n+import { redirect } from \"next/navigation\";\n+import prisma from \"@/utils/prisma\";\n+import { PermissionsCheck } from \"@/app/(app)/[emailAccountId]/PermissionsCheck\";\n+import { GmailProvider } from \"@/providers/GmailProvider\";\n+import { ASSISTANT_ONBOARDING_COOKIE } from \"@/utils/cookies\";\n+import { prefixPath } from \"@/utils/path\";\n+import { Chat } from \"@/components/assistant-chat/chat\";\n+\n+export const maxDuration = 300; // Applies to the actions\n+\n+export default async function AssistantPage({\n+  params,\n+}: {\n+  params: Promise<{ emailAccountId: string }>;\n+}) {\n+  const { emailAccountId } = await params;\n+\n+  // onboarding redirect\n+  const cookieStore = await cookies();\n+  const viewedOnboarding =\n+    cookieStore.get(ASSISTANT_ONBOARDING_COOKIE)?.value === \"true\";\n+",
        "comment_created_at": "2025-05-20T12:56:11+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**`cookies()` is synchronous \u2013 drop the `await`**  \n\n`next/headers.cookies()` already returns a `RequestCookies` instance. Leaving the `await` does nothing and triggers an ESLint warning.\n\n```diff\n-  const cookieStore = await cookies();\n+  const cookieStore = cookies();\n```\n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n  const cookieStore = cookies();\n  const viewedOnboarding =\n    cookieStore.get(ASSISTANT_ONBOARDING_COOKIE)?.value === \"true\";\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/[emailAccountId]/assistant/page.tsx around lines 21 to 24,\nremove the await keyword before the call to cookies() because\nnext/headers.cookies() is synchronous and returns a RequestCookies instance\ndirectly. This will fix the ESLint warning and correctly reflect the synchronous\nnature of the function.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1809689230",
    "pr_number": 249,
    "pr_file": "apps/web/app/(app)/simple/page.tsx",
    "created_at": "2024-10-22T00:28:36+00:00",
    "commented_code": "export const dynamic = \"force-dynamic\";\n \n-export default async function SimplePage({\n-  searchParams: { pageToken, type = \"IMPORTANT\" },\n-}: {\n-  searchParams: { pageToken?: string; type?: string };\n+export default async function SimplePage(props: {\n+  searchParams: Promise<{ pageToken?: string; type?: string }>;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1809689230",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 249,
        "pr_file": "apps/web/app/(app)/simple/page.tsx",
        "discussion_id": "1809689230",
        "commented_code": "@@ -15,11 +15,13 @@ import { getMessage } from \"@/utils/gmail/message\";\n \n export const dynamic = \"force-dynamic\";\n \n-export default async function SimplePage({\n-  searchParams: { pageToken, type = \"IMPORTANT\" },\n-}: {\n-  searchParams: { pageToken?: string; type?: string };\n+export default async function SimplePage(props: {\n+  searchParams: Promise<{ pageToken?: string; type?: string }>;",
        "comment_created_at": "2024-10-22T00:28:36+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Incorrect handling of `searchParams` as a Promise**\n\nIn Next.js, `searchParams` is a plain object and does not need to be awaited. Declaring `searchParams` as a `Promise` and using `await` is unnecessary and may cause unexpected behavior.\n\n\n\nApply this diff to correct the function signature and usage:\n\n```diff\n-export default async function SimplePage(props: {\n-  searchParams: Promise<{ pageToken?: string; type?: string }>;\n-}) {\n-  const searchParams = await props.searchParams;\n+export default async function SimplePage({ searchParams }: {\n+  searchParams: { pageToken?: string; type?: string };\n+}) {\n```\n\n\n<!-- suggestion_start -->\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nexport default async function SimplePage({ searchParams }: {\n  searchParams: { pageToken?: string; type?: string };\n}) {\n`````\n\n</details>\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]