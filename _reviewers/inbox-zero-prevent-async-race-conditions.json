[
  {
    "discussion_id": "2083273881",
    "pr_number": 428,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/reply-zero/EnableReplyTracker.tsx",
    "created_at": "2025-05-10T19:23:28+00:00",
    "commented_code": "toast.promise(\n           async () => {\n-            processPreviousSentEmailsAction(emailAccountId);\n+            await processPreviousSentEmailsAction(emailAccountId);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2083273881",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 428,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/reply-zero/EnableReplyTracker.tsx",
        "discussion_id": "2083273881",
        "commented_code": "@@ -84,7 +84,7 @@ export function EnableReplyTracker({ enabled }: { enabled: boolean }) {\n \n         toast.promise(\n           async () => {\n-            processPreviousSentEmailsAction(emailAccountId);\n+            await processPreviousSentEmailsAction(emailAccountId);",
        "comment_created_at": "2025-05-10T19:23:28+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Fixed asynchronous operation sequencing**\n\nAdding the `await` keyword ensures that email processing completes before navigation occurs. This fixes a potential race condition where the user might be redirected before the background task finishes, leading to incomplete data on the next page.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2079890373",
    "pr_number": 425,
    "pr_file": "apps/web/app/(app)/premium/Pricing.tsx",
    "created_at": "2025-05-08T14:56:12+00:00",
    "commented_code": ");\n }\n \n-function attachUserInfo(\n-  url: string,\n-  user: { id: string; email: string; name?: string | null },\n-  quantity?: number,\n-) {\n-  if (!user) return url;\n+function PriceTier({\n+  tier,\n+  userPremiumTier,\n+  frequency,\n+  stripeSubscriptionId,\n+}: {\n+  tier: Tier;\n+  userPremiumTier: PremiumTier | null;\n+  frequency: (typeof frequencies)[number];\n+  stripeSubscriptionId: string | null | undefined;\n+}) {\n+  const [loading, setLoading] = useState(false);\n \n-  let res = `${url}?checkout[custom][user_id]=${user.id}&checkout[email]=${user.email}&checkout[name]=${user.name}`;\n-  if (quantity) res += `&quantity=${quantity}`;\n-  return res;\n-}\n+  const isCurrentPlan = tier.tiers[frequency.value] === userPremiumTier;\n \n-function useAffiliateCode() {\n-  const searchParams = useSearchParams();\n-  const affiliateCode = searchParams.get(\"aff\");\n-  return affiliateCode;\n-}\n+  function getCTAText() {\n+    if (isCurrentPlan) return \"Current plan\";\n+    if (userPremiumTier) return \"Switch to this plan\";\n+    return tier.cta;\n+  }\n \n-function buildLemonUrl(url: string, affiliateCode: string | null) {\n-  if (!affiliateCode) return url;\n-  const newUrl = `${url}?aff_ref=${affiliateCode}`;\n-  return newUrl;\n-}\n+  return (\n+    <TwoColItem\n+      key={tier.name}\n+      className=\"flex flex-col rounded-3xl bg-white p-8 ring-1 ring-gray-200 xl:p-10\"\n+    >\n+      <div className=\"flex-1\">\n+        <div className=\"flex items-center justify-between gap-x-4\">\n+          <h3\n+            id={tier.name}\n+            className={clsx(\n+              tier.mostPopular ? \"text-blue-600\" : \"text-gray-900\",\n+              \"font-cal text-lg leading-8\",\n+            )}\n+          >\n+            {tier.name}\n+          </h3>\n+          {tier.mostPopular ? <Badge>Popular</Badge> : null}\n+        </div>\n+        <p className=\"mt-4 text-sm leading-6 text-gray-600\">\n+          {tier.description}\n+        </p>\n+        <p className=\"mt-6 flex items-baseline gap-x-1\">\n+          <span className=\"text-4xl font-bold tracking-tight text-gray-900\">\n+            ${tier.price[frequency.value]}\n+          </span>\n+          <span className=\"text-sm font-semibold leading-6 text-gray-600\">\n+            {frequency.priceSuffix}\n+          </span>\n+\n+          {!!tier.discount?.[frequency.value] && (\n+            <Badge>\n+              <span className=\"tracking-wide\">\n+                SAVE {tier.discount[frequency.value].toFixed(0)}%\n+              </span>\n+            </Badge>\n+          )}\n+        </p>\n+        {tier.priceAdditional ? (\n+          <p className=\"mt-3 text-sm leading-6 text-gray-500\">\n+            +${formatPrice(tier.priceAdditional[frequency.value])} for each\n+            additional email account\n+          </p>\n+        ) : (\n+          <div className=\"mt-16\" />\n+        )}\n+        <ul className=\"mt-8 space-y-3 text-sm leading-6 text-gray-600\">\n+          {tier.features.map((feature) => (\n+            <li key={feature.text} className=\"flex gap-x-3\">\n+              <CheckIcon\n+                className=\"h-6 w-5 flex-none text-blue-600\"\n+                aria-hidden=\"true\"\n+              />\n+              <span className=\"flex items-center gap-2\">\n+                {feature.text}\n+                {feature.tooltip && (\n+                  <TooltipExplanation text={feature.tooltip} />\n+                )}\n+              </span>\n+            </li>\n+          ))}\n+        </ul>\n+      </div>\n \n-function getLayoutComponents(\n-  pricingVariant: string,\n-  premiumTier: PremiumTier | null,\n-) {\n-  const isBasicTier =\n-    premiumTier === PremiumTier.BASIC_MONTHLY ||\n-    premiumTier === PremiumTier.BASIC_ANNUALLY;\n-\n-  if (pricingVariant === \"basic-business\" || isBasicTier) {\n-    return {\n-      Layout: TwoColLayout,\n-      Item: TwoColItem,\n-      tiers: [basicTier, businessTier],\n-    };\n-  }\n+      <button\n+        type=\"button\"\n+        onClick={async () => {\n+          setLoading(true);\n \n-  if (pricingVariant === \"business-basic\" || isBasicTier) {\n-    return {\n-      Layout: TwoColLayout,\n-      Item: TwoColItem,\n-      tiers: [businessTier, basicTier],\n-    };\n-  }\n+          async function load() {\n+            if (tier.tiers[frequency.value] === userPremiumTier) {\n+              toast.info(\"You are already on this plan\");\n+              return;\n+            }\n \n-  // control\n-  return {\n-    Layout: ThreeColLayout,\n-    Item: ThreeColItem,\n-    tiers: [basicTier, businessTier, enterpriseTier],\n-  };\n-}\n+            const upgradeToTier = tier.tiers[frequency.value];\n+\n+            const result = stripeSubscriptionId\n+              ? await getBillingPortalUrlAction({\n+                  tier: upgradeToTier,\n+                })\n+              : await generateCheckoutSessionAction({\n+                  tier: upgradeToTier,\n+                });\n+\n+            if (!result?.data?.url || result?.serverError) {\n+              toastError({\n+                description:\n+                  result?.serverError ||\n+                  \"Error creating checkout session. Please contact support.\",\n+              });\n+              return;\n+            }\n \n-function ThreeColLayout({\n-  children,\n-  className,\n-}: {\n-  children: React.ReactNode;\n-  className?: string;\n-}) {\n-  return (\n-    <div className={clsx(\"lg:mx-0 lg:max-w-none lg:grid-cols-3\", className)}>\n-      {children}\n-    </div>\n+            window.open(result.data.url);\n+          }\n+\n+          try {\n+            await load();\n+          } catch (error) {\n+            console.error(error);\n+          } finally {\n+            setLoading(false);\n+          }\n+        }}\n+        aria-describedby={tier.name}\n+        className={clsx(\n+          tier.mostPopular\n+            ? \"bg-blue-600 text-white shadow-sm hover:bg-blue-500\"\n+            : \"text-blue-600 ring-1 ring-inset ring-blue-200 hover:ring-blue-300\",\n+          \"mt-8 block rounded-md px-3 py-2 text-center text-sm font-semibold leading-6 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\",\n+        )}\n+      >\n+        {loading ? (\n+          <div className=\"flex items-center justify-center py-1\">\n+            <LoadingMiniSpinner />\n+          </div>\n+        ) : (\n+          getCTAText()\n+        )}\n+      </button>\n+    </TwoColItem>",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2079890373",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 425,
        "pr_file": "apps/web/app/(app)/premium/Pricing.tsx",
        "discussion_id": "2079890373",
        "commented_code": "@@ -289,76 +211,221 @@ export function Pricing(props: {\n   );\n }\n \n-function attachUserInfo(\n-  url: string,\n-  user: { id: string; email: string; name?: string | null },\n-  quantity?: number,\n-) {\n-  if (!user) return url;\n+function PriceTier({\n+  tier,\n+  userPremiumTier,\n+  frequency,\n+  stripeSubscriptionId,\n+}: {\n+  tier: Tier;\n+  userPremiumTier: PremiumTier | null;\n+  frequency: (typeof frequencies)[number];\n+  stripeSubscriptionId: string | null | undefined;\n+}) {\n+  const [loading, setLoading] = useState(false);\n \n-  let res = `${url}?checkout[custom][user_id]=${user.id}&checkout[email]=${user.email}&checkout[name]=${user.name}`;\n-  if (quantity) res += `&quantity=${quantity}`;\n-  return res;\n-}\n+  const isCurrentPlan = tier.tiers[frequency.value] === userPremiumTier;\n \n-function useAffiliateCode() {\n-  const searchParams = useSearchParams();\n-  const affiliateCode = searchParams.get(\"aff\");\n-  return affiliateCode;\n-}\n+  function getCTAText() {\n+    if (isCurrentPlan) return \"Current plan\";\n+    if (userPremiumTier) return \"Switch to this plan\";\n+    return tier.cta;\n+  }\n \n-function buildLemonUrl(url: string, affiliateCode: string | null) {\n-  if (!affiliateCode) return url;\n-  const newUrl = `${url}?aff_ref=${affiliateCode}`;\n-  return newUrl;\n-}\n+  return (\n+    <TwoColItem\n+      key={tier.name}\n+      className=\"flex flex-col rounded-3xl bg-white p-8 ring-1 ring-gray-200 xl:p-10\"\n+    >\n+      <div className=\"flex-1\">\n+        <div className=\"flex items-center justify-between gap-x-4\">\n+          <h3\n+            id={tier.name}\n+            className={clsx(\n+              tier.mostPopular ? \"text-blue-600\" : \"text-gray-900\",\n+              \"font-cal text-lg leading-8\",\n+            )}\n+          >\n+            {tier.name}\n+          </h3>\n+          {tier.mostPopular ? <Badge>Popular</Badge> : null}\n+        </div>\n+        <p className=\"mt-4 text-sm leading-6 text-gray-600\">\n+          {tier.description}\n+        </p>\n+        <p className=\"mt-6 flex items-baseline gap-x-1\">\n+          <span className=\"text-4xl font-bold tracking-tight text-gray-900\">\n+            ${tier.price[frequency.value]}\n+          </span>\n+          <span className=\"text-sm font-semibold leading-6 text-gray-600\">\n+            {frequency.priceSuffix}\n+          </span>\n+\n+          {!!tier.discount?.[frequency.value] && (\n+            <Badge>\n+              <span className=\"tracking-wide\">\n+                SAVE {tier.discount[frequency.value].toFixed(0)}%\n+              </span>\n+            </Badge>\n+          )}\n+        </p>\n+        {tier.priceAdditional ? (\n+          <p className=\"mt-3 text-sm leading-6 text-gray-500\">\n+            +${formatPrice(tier.priceAdditional[frequency.value])} for each\n+            additional email account\n+          </p>\n+        ) : (\n+          <div className=\"mt-16\" />\n+        )}\n+        <ul className=\"mt-8 space-y-3 text-sm leading-6 text-gray-600\">\n+          {tier.features.map((feature) => (\n+            <li key={feature.text} className=\"flex gap-x-3\">\n+              <CheckIcon\n+                className=\"h-6 w-5 flex-none text-blue-600\"\n+                aria-hidden=\"true\"\n+              />\n+              <span className=\"flex items-center gap-2\">\n+                {feature.text}\n+                {feature.tooltip && (\n+                  <TooltipExplanation text={feature.tooltip} />\n+                )}\n+              </span>\n+            </li>\n+          ))}\n+        </ul>\n+      </div>\n \n-function getLayoutComponents(\n-  pricingVariant: string,\n-  premiumTier: PremiumTier | null,\n-) {\n-  const isBasicTier =\n-    premiumTier === PremiumTier.BASIC_MONTHLY ||\n-    premiumTier === PremiumTier.BASIC_ANNUALLY;\n-\n-  if (pricingVariant === \"basic-business\" || isBasicTier) {\n-    return {\n-      Layout: TwoColLayout,\n-      Item: TwoColItem,\n-      tiers: [basicTier, businessTier],\n-    };\n-  }\n+      <button\n+        type=\"button\"\n+        onClick={async () => {\n+          setLoading(true);\n \n-  if (pricingVariant === \"business-basic\" || isBasicTier) {\n-    return {\n-      Layout: TwoColLayout,\n-      Item: TwoColItem,\n-      tiers: [businessTier, basicTier],\n-    };\n-  }\n+          async function load() {\n+            if (tier.tiers[frequency.value] === userPremiumTier) {\n+              toast.info(\"You are already on this plan\");\n+              return;\n+            }\n \n-  // control\n-  return {\n-    Layout: ThreeColLayout,\n-    Item: ThreeColItem,\n-    tiers: [basicTier, businessTier, enterpriseTier],\n-  };\n-}\n+            const upgradeToTier = tier.tiers[frequency.value];\n+\n+            const result = stripeSubscriptionId\n+              ? await getBillingPortalUrlAction({\n+                  tier: upgradeToTier,\n+                })\n+              : await generateCheckoutSessionAction({\n+                  tier: upgradeToTier,\n+                });\n+\n+            if (!result?.data?.url || result?.serverError) {\n+              toastError({\n+                description:\n+                  result?.serverError ||\n+                  \"Error creating checkout session. Please contact support.\",\n+              });\n+              return;\n+            }\n \n-function ThreeColLayout({\n-  children,\n-  className,\n-}: {\n-  children: React.ReactNode;\n-  className?: string;\n-}) {\n-  return (\n-    <div className={clsx(\"lg:mx-0 lg:max-w-none lg:grid-cols-3\", className)}>\n-      {children}\n-    </div>\n+            window.open(result.data.url);\n+          }\n+\n+          try {\n+            await load();\n+          } catch (error) {\n+            console.error(error);\n+          } finally {\n+            setLoading(false);\n+          }\n+        }}\n+        aria-describedby={tier.name}\n+        className={clsx(\n+          tier.mostPopular\n+            ? \"bg-blue-600 text-white shadow-sm hover:bg-blue-500\"\n+            : \"text-blue-600 ring-1 ring-inset ring-blue-200 hover:ring-blue-300\",\n+          \"mt-8 block rounded-md px-3 py-2 text-center text-sm font-semibold leading-6 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\",\n+        )}\n+      >\n+        {loading ? (\n+          <div className=\"flex items-center justify-center py-1\">\n+            <LoadingMiniSpinner />\n+          </div>\n+        ) : (\n+          getCTAText()\n+        )}\n+      </button>\n+    </TwoColItem>",
        "comment_created_at": "2025-05-08T14:56:12+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Prevent duplicate checkout/billing-portal calls while `loading`**  \n\nThe CTA button shows a spinner but remains clickable, so a user can unintentionally trigger multiple POST requests:\n\n```diff\n-      <button\n+      <button\n+        disabled={loading}\n```\n\nYou might also add `aria-disabled` for accessibility.  \n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n      <button\n        disabled={loading}\n        type=\"button\"\n        onClick={async () => {\n          setLoading(true);\n\n          async function load() {\n            if (tier.tiers[frequency.value] === userPremiumTier) {\n              toast.info(\"You are already on this plan\");\n              return;\n            }\n\n            const upgradeToTier = tier.tiers[frequency.value];\n\n            const result = stripeSubscriptionId\n              ? await getBillingPortalUrlAction({\n                  tier: upgradeToTier,\n                })\n              : await generateCheckoutSessionAction({\n                  tier: upgradeToTier,\n                });\n\n            if (!result?.data?.url || result?.serverError) {\n              toastError({\n                description:\n                  result?.serverError ||\n                  \"Error creating checkout session. Please contact support.\",\n              });\n              return;\n            }\n\n            window.open(result.data.url);\n          }\n\n          try {\n            await load();\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setLoading(false);\n          }\n        }}\n        aria-describedby={tier.name}\n        className={clsx(\n          tier.mostPopular\n            ? \"bg-blue-600 text-white shadow-sm hover:bg-blue-500\"\n            : \"text-blue-600 ring-1 ring-inset ring-blue-200 hover:ring-blue-300\",\n          \"mt-8 block rounded-md px-3 py-2 text-center text-sm font-semibold leading-6 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\",\n        )}\n      >\n        {loading ? (\n          <div className=\"flex items-center justify-center py-1\">\n            <LoadingMiniSpinner />\n          </div>\n        ) : (\n          getCTAText()\n        )}\n      </button>\n    </TwoColItem>\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1940283473",
    "pr_number": 320,
    "pr_file": "apps/web/app/(app)/reply-tracker/ReplyTrackerEmails.tsx",
    "created_at": "2025-02-03T23:52:15+00:00",
    "commented_code": "+\"use client\";\n+\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { type ThreadTracker, ThreadTrackerType } from \"@prisma/client\";\n+import { Table, TableBody, TableCell, TableRow } from \"@/components/ui/table\";\n+import { EmailMessageCell } from \"@/components/EmailMessageCell\";\n+import { Button } from \"@/components/ui/button\";\n+import { CheckCircleIcon, HandIcon, MailIcon } from \"lucide-react\";\n+import { useThreadsByIds } from \"@/hooks/useThreadsByIds\";\n+import { resolveThreadTrackerAction } from \"@/utils/actions/reply-tracking\";\n+import { isActionError } from \"@/utils/error\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import { useDisplayedEmail } from \"@/hooks/useDisplayedEmail\";\n+import { Loading } from \"@/components/Loading\";\n+import { TablePagination } from \"@/components/TablePagination\";\n+\n+export function ReplyTrackerEmails({\n+  trackers,\n+  userEmail,\n+  type,\n+  isResolved,\n+  totalPages,\n+}: {\n+  trackers: ThreadTracker[];\n+  userEmail: string;\n+  type?: ThreadTrackerType;\n+  isResolved?: boolean;\n+  totalPages: number;\n+}) {\n+  const { data, isLoading } = useThreadsByIds({\n+    threadIds: trackers.map((t) => t.threadId),\n+  });\n+\n+  if (isLoading && !data) {\n+    return <Loading />;\n+  }\n+\n+  if (!data?.threads.length) {\n+    return (\n+      <div className=\"mt-2\">\n+        <EmptyState message=\"No emails yet!\" />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div>\n+      <Table>\n+        <TableBody>\n+          {data?.threads.map((thread) => (\n+            <Row\n+              key={thread.id}\n+              message={thread.messages?.[thread.messages.length - 1]}\n+              userEmail={userEmail}\n+              isResolved={isResolved}\n+              type={type}\n+            />\n+          ))}\n+        </TableBody>\n+      </Table>\n+\n+      <TablePagination totalPages={totalPages} />\n+    </div>\n+  );\n+}\n+\n+function Row({\n+  message,\n+  userEmail,\n+  isResolved,\n+  type,\n+}: {\n+  message: ParsedMessage;\n+  userEmail: string;\n+  isResolved?: boolean;\n+  type?: ThreadTrackerType;\n+}) {\n+  return (\n+    <TableRow>\n+      <TableCell>\n+        <div className=\"flex items-center justify-between\">\n+          <EmailMessageCell\n+            from={message.headers.from}\n+            subject={message.headers.subject}\n+            snippet={message.snippet}\n+            userEmail={userEmail}\n+            threadId={message.threadId}\n+            messageId={message.id}\n+          />\n+          <div className=\"ml-4 flex items-center gap-1\">\n+            {isResolved ? (\n+              <UnresolveButton threadId={message.threadId} />\n+            ) : (\n+              <>\n+                {!!type && (\n+                  <NudgeButton\n+                    threadId={message.threadId}\n+                    messageId={message.id}\n+                    type={type}\n+                  />\n+                )}\n+                <ResolveButton threadId={message.threadId} />\n+              </>\n+            )}\n+          </div>\n+        </div>\n+      </TableCell>\n+    </TableRow>\n+  );\n+}\n+\n+function NudgeButton({\n+  threadId,\n+  messageId,\n+  type,\n+}: {\n+  threadId: string;\n+  messageId: string;\n+  type: ThreadTrackerType;\n+}) {\n+  const { showEmail } = useDisplayedEmail();\n+\n+  const showNudge = type === ThreadTrackerType.AWAITING;\n+\n+  return (\n+    <Button\n+      Icon={showNudge ? HandIcon : MailIcon}\n+      onClick={() => {\n+        showEmail({\n+          threadId,\n+          messageId,\n+          showReplyButton: true,\n+          autoOpenReplyForMessageId: messageId,\n+        });\n+      }}\n+    >\n+      {showNudge ? \"Nudge\" : \"Reply\"}\n+    </Button>\n+  );\n+}\n+\n+function ResolveButton({ threadId }: { threadId: string }) {\n+  return (\n+    <Button\n+      variant=\"outline\"\n+      Icon={CheckCircleIcon}\n+      onClick={async () => {\n+        const result = await resolveThreadTrackerAction({\n+          threadId,\n+          resolved: true,\n+        });\n+\n+        if (isActionError(result)) {\n+          toastError({\n+            title: \"Error\",\n+            description: result.error,\n+          });\n+        } else {\n+          toastSuccess({\n+            title: \"Success\",\n+            description: \"Resolved!\",\n+          });\n+        }\n+      }}\n+    >\n+      Resolve\n+    </Button>\n+  );\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1940283473",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 320,
        "pr_file": "apps/web/app/(app)/reply-tracker/ReplyTrackerEmails.tsx",
        "discussion_id": "1940283473",
        "commented_code": "@@ -0,0 +1,208 @@\n+\"use client\";\n+\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { type ThreadTracker, ThreadTrackerType } from \"@prisma/client\";\n+import { Table, TableBody, TableCell, TableRow } from \"@/components/ui/table\";\n+import { EmailMessageCell } from \"@/components/EmailMessageCell\";\n+import { Button } from \"@/components/ui/button\";\n+import { CheckCircleIcon, HandIcon, MailIcon } from \"lucide-react\";\n+import { useThreadsByIds } from \"@/hooks/useThreadsByIds\";\n+import { resolveThreadTrackerAction } from \"@/utils/actions/reply-tracking\";\n+import { isActionError } from \"@/utils/error\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import { useDisplayedEmail } from \"@/hooks/useDisplayedEmail\";\n+import { Loading } from \"@/components/Loading\";\n+import { TablePagination } from \"@/components/TablePagination\";\n+\n+export function ReplyTrackerEmails({\n+  trackers,\n+  userEmail,\n+  type,\n+  isResolved,\n+  totalPages,\n+}: {\n+  trackers: ThreadTracker[];\n+  userEmail: string;\n+  type?: ThreadTrackerType;\n+  isResolved?: boolean;\n+  totalPages: number;\n+}) {\n+  const { data, isLoading } = useThreadsByIds({\n+    threadIds: trackers.map((t) => t.threadId),\n+  });\n+\n+  if (isLoading && !data) {\n+    return <Loading />;\n+  }\n+\n+  if (!data?.threads.length) {\n+    return (\n+      <div className=\"mt-2\">\n+        <EmptyState message=\"No emails yet!\" />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div>\n+      <Table>\n+        <TableBody>\n+          {data?.threads.map((thread) => (\n+            <Row\n+              key={thread.id}\n+              message={thread.messages?.[thread.messages.length - 1]}\n+              userEmail={userEmail}\n+              isResolved={isResolved}\n+              type={type}\n+            />\n+          ))}\n+        </TableBody>\n+      </Table>\n+\n+      <TablePagination totalPages={totalPages} />\n+    </div>\n+  );\n+}\n+\n+function Row({\n+  message,\n+  userEmail,\n+  isResolved,\n+  type,\n+}: {\n+  message: ParsedMessage;\n+  userEmail: string;\n+  isResolved?: boolean;\n+  type?: ThreadTrackerType;\n+}) {\n+  return (\n+    <TableRow>\n+      <TableCell>\n+        <div className=\"flex items-center justify-between\">\n+          <EmailMessageCell\n+            from={message.headers.from}\n+            subject={message.headers.subject}\n+            snippet={message.snippet}\n+            userEmail={userEmail}\n+            threadId={message.threadId}\n+            messageId={message.id}\n+          />\n+          <div className=\"ml-4 flex items-center gap-1\">\n+            {isResolved ? (\n+              <UnresolveButton threadId={message.threadId} />\n+            ) : (\n+              <>\n+                {!!type && (\n+                  <NudgeButton\n+                    threadId={message.threadId}\n+                    messageId={message.id}\n+                    type={type}\n+                  />\n+                )}\n+                <ResolveButton threadId={message.threadId} />\n+              </>\n+            )}\n+          </div>\n+        </div>\n+      </TableCell>\n+    </TableRow>\n+  );\n+}\n+\n+function NudgeButton({\n+  threadId,\n+  messageId,\n+  type,\n+}: {\n+  threadId: string;\n+  messageId: string;\n+  type: ThreadTrackerType;\n+}) {\n+  const { showEmail } = useDisplayedEmail();\n+\n+  const showNudge = type === ThreadTrackerType.AWAITING;\n+\n+  return (\n+    <Button\n+      Icon={showNudge ? HandIcon : MailIcon}\n+      onClick={() => {\n+        showEmail({\n+          threadId,\n+          messageId,\n+          showReplyButton: true,\n+          autoOpenReplyForMessageId: messageId,\n+        });\n+      }}\n+    >\n+      {showNudge ? \"Nudge\" : \"Reply\"}\n+    </Button>\n+  );\n+}\n+\n+function ResolveButton({ threadId }: { threadId: string }) {\n+  return (\n+    <Button\n+      variant=\"outline\"\n+      Icon={CheckCircleIcon}\n+      onClick={async () => {\n+        const result = await resolveThreadTrackerAction({\n+          threadId,\n+          resolved: true,\n+        });\n+\n+        if (isActionError(result)) {\n+          toastError({\n+            title: \"Error\",\n+            description: result.error,\n+          });\n+        } else {\n+          toastSuccess({\n+            title: \"Success\",\n+            description: \"Resolved!\",\n+          });\n+        }\n+      }}\n+    >\n+      Resolve\n+    </Button>\n+  );\n+}",
        "comment_created_at": "2025-02-03T23:52:15+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Prevent double-clicks on resolve button.**\n\nAdd debounce or disable the button while the action is in progress to prevent duplicate submissions.\n\n```diff\n function ResolveButton({ threadId }: { threadId: string }) {\n+  const [isLoading, setIsLoading] = React.useState(false);\n   return (\n     <Button\n       variant=\"outline\"\n       Icon={CheckCircleIcon}\n+      disabled={isLoading}\n       onClick={async () => {\n+        if (isLoading) return;\n+        setIsLoading(true);\n         try {\n           const result = await resolveThreadTrackerAction({\n             threadId,\n             resolved: true,\n           });\n           // ... rest of the code\n+        } finally {\n+          setIsLoading(false);\n+        }\n       }}\n     >\n-      Resolve\n+      {isLoading ? 'Resolving...' : 'Resolve'}\n     </Button>\n   );\n }\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nfunction ResolveButton({ threadId }: { threadId: string }) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  return (\n    <Button\n      variant=\"outline\"\n      Icon={CheckCircleIcon}\n      disabled={isLoading}\n      onClick={async () => {\n        if (isLoading) return;\n        setIsLoading(true);\n        try {\n          const result = await resolveThreadTrackerAction({\n            threadId,\n            resolved: true,\n          });\n\n          if (isActionError(result)) {\n            toastError({\n              title: \"Error\",\n              description: result.error,\n            });\n          } else {\n            toastSuccess({\n              title: \"Success\",\n              description: \"Resolved!\",\n            });\n          }\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {isLoading ? 'Resolving...' : 'Resolve'}\n    </Button>\n  );\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1932934556",
    "pr_number": 316,
    "pr_file": "apps/web/app/(app)/automation/rule/[ruleId]/examples/example-list.tsx",
    "created_at": "2025-01-28T22:11:58+00:00",
    "commented_code": "size=\"sm\"\n                   className=\"mt-4 text-wrap\"\n                   onClick={() => {\n-                    const result = deleteGroupItemAction(matchingGroupItem.id);\n+                    const result = rejectGroupItemAction(matchingGroupItem.id);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1932934556",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 316,
        "pr_file": "apps/web/app/(app)/automation/rule/[ruleId]/examples/example-list.tsx",
        "discussion_id": "1932934556",
        "commented_code": "@@ -50,7 +50,7 @@ export function ExampleList({\n                   size=\"sm\"\n                   className=\"mt-4 text-wrap\"\n                   onClick={() => {\n-                    const result = deleteGroupItemAction(matchingGroupItem.id);\n+                    const result = rejectGroupItemAction(matchingGroupItem.id);",
        "comment_created_at": "2025-01-28T22:11:58+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Use `await` to handle the asynchronous server action properly.**  \nWithout `await`, `isActionError(result)` might not receive the resolved result, which could lead to silent failures or inconsistent UI updates.  \n\n```diff\n- const result = rejectGroupItemAction(matchingGroupItem.id);\n+ const result = await rejectGroupItemAction(matchingGroupItem.id);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n                    const result = await rejectGroupItemAction(matchingGroupItem.id);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1888448979",
    "pr_number": 270,
    "pr_file": "apps/web/app/(app)/automation/ProcessingPromptFileDialog.tsx",
    "created_at": "2024-12-17T12:38:58+00:00",
    "commented_code": "+import Link from \"next/link\";\n+import Image from \"next/image\";\n+import { Loader2 } from \"lucide-react\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useQueryState } from \"nuqs\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogDescription,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  type CarouselApi,\n+  Carousel,\n+  CarouselContent,\n+  CarouselItem,\n+  CarouselNext,\n+  CarouselPrevious,\n+} from \"@/components/ui/carousel\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { TestRulesContent } from \"@/app/(app)/automation/TestRules\";\n+\n+/*\n+When the modal first opens we'll tell them the AI is processing their prompt file.\n+And that they can learn about the AI assistant in the meantime.\n+When completed, we'll show them the test view and automatically start testing\n+the rules.\n+If they notice a mistake, they can mark an error.\n+*/\n+\n+export function ProcessingPromptFileDialog({\n+  open,\n+  onOpenChange,\n+  result,\n+  isLoading,\n+}: {\n+  open: boolean;\n+  onOpenChange: (open: boolean) => void;\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+  isLoading: boolean;\n+}) {\n+  const [modal] = useQueryState(\"modal\");\n+  const [currentStep, setCurrentStep] = useState(0);\n+\n+  useEffect(() => {\n+    if (!isLoading && result && currentStep < 4) {\n+      setCurrentStep(4);\n+    }\n+  }, [isLoading, result, currentStep]);\n+\n+  const showRules = modal === \"rules\";\n+\n+  return (\n+    <Dialog open={open} onOpenChange={onOpenChange}>\n+      <DialogContent className=\"max-h-[90vh] overflow-y-auto px-0 sm:max-w-7xl\">\n+        <DialogHeader className=\"px-6\">\n+          <DialogTitle>\n+            {isLoading ? (\n+              <div className=\"flex items-center gap-2\">\n+                <Loader2 className=\"h-4 w-4 animate-spin\" />\n+                Processing your prompt file...\n+              </div>\n+            ) : (\n+              \"Rules Generated\"\n+            )}\n+          </DialogTitle>\n+          <DialogDescription>\n+            {isLoading\n+              ? \"In the meantime, learn more about the AI assistant and how it works.\"\n+              : \"Your rules have been created. You can now test and improve them.\"}\n+          </DialogDescription>\n+        </DialogHeader>\n+\n+        {showRules ? (\n+          <TestRulesContent />\n+        ) : (\n+          <div className=\"space-y-4\">\n+            {!result ? (\n+              <>\n+                <ProcessingPromptFileDialogCarousel\n+                  currentStep={currentStep}\n+                  onStepChange={setCurrentStep}\n+                />\n+                <div className=\"flex justify-center\">\n+                  <Button\n+                    onClick={() =>\n+                      setCurrentStep((prev) => Math.min(prev + 1, 3))\n+                    }\n+                    disabled={currentStep >= 3}\n+                  >\n+                    Next\n+                  </Button>\n+                </div>\n+              </>\n+            ) : (\n+              <ResultContent result={result} />\n+            )}\n+          </div>\n+        )}\n+      </DialogContent>\n+    </Dialog>\n+  );\n+}\n+\n+function ResultContent({\n+  result,\n+}: {\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+}) {\n+  if (!result) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className=\"text-center\">\n+      <p className=\"text-green-500\">Rules saved!</p>\n+      <ul className=\"text-sm text-muted-foreground\">\n+        {result.createdRules > 0 && (\n+          <li>{result.createdRules} rules created</li>\n+        )}\n+        {result.editedRules > 0 && <li>{result.editedRules} rules edited</li>}\n+        {result.removedRules > 0 && (\n+          <li>{result.removedRules} rules removed</li>\n+        )}\n+      </ul>\n+      <Button asChild className=\"mt-4\">\n+        <Link href=\"?modal=rules\" shallow>\n+          View\n+        </Link>\n+      </Button>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep1() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/analyzing-prompt.png\"\n+        alt=\"Analyzing prompt file\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>First, our AI analyzes your prompt file and extracts rules from it.</p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep2() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/view-rules.svg\"\n+        alt=\"Saving rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>\n+        Next, you can view and edit the rules, or adjust your prompt further.\n+      </p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep3() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/edit-rule.svg\"\n+        alt=\"Saving rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>Next, you can click on a rule to edit it even further.</p>\n+      <p>Each rule is made up of two parts: a condition and an action.</p>\n+      <p>Our AI sets these up for you, but you can adjust them as needed.</p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep4() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/testing-rules.png\"\n+        alt=\"Testing rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>Test the rules to see how they perform.</p>\n+      <p>\n+        This allows you to ensure the rules work as expected before applying\n+        them.\n+      </p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogCarousel({\n+  currentStep,\n+  onStepChange,\n+}: {\n+  currentStep: number;\n+  onStepChange: (step: number) => void;\n+}) {\n+  const [api, setApi] = useState<CarouselApi>();\n+\n+  useEffect(() => {\n+    if (api) {\n+      api.scrollTo(currentStep);\n+    }\n+  }, [api, currentStep]);\n+\n+  useEffect(() => {\n+    if (!api) return;\n+\n+    api.on(\"select\", () => {\n+      onStepChange(api.selectedScrollSnap());\n+    });\n+  }, [api, onStepChange]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1888448979",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 270,
        "pr_file": "apps/web/app/(app)/automation/ProcessingPromptFileDialog.tsx",
        "discussion_id": "1888448979",
        "commented_code": "@@ -0,0 +1,266 @@\n+import Link from \"next/link\";\n+import Image from \"next/image\";\n+import { Loader2 } from \"lucide-react\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useQueryState } from \"nuqs\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogDescription,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  type CarouselApi,\n+  Carousel,\n+  CarouselContent,\n+  CarouselItem,\n+  CarouselNext,\n+  CarouselPrevious,\n+} from \"@/components/ui/carousel\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { TestRulesContent } from \"@/app/(app)/automation/TestRules\";\n+\n+/*\n+When the modal first opens we'll tell them the AI is processing their prompt file.\n+And that they can learn about the AI assistant in the meantime.\n+When completed, we'll show them the test view and automatically start testing\n+the rules.\n+If they notice a mistake, they can mark an error.\n+*/\n+\n+export function ProcessingPromptFileDialog({\n+  open,\n+  onOpenChange,\n+  result,\n+  isLoading,\n+}: {\n+  open: boolean;\n+  onOpenChange: (open: boolean) => void;\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+  isLoading: boolean;\n+}) {\n+  const [modal] = useQueryState(\"modal\");\n+  const [currentStep, setCurrentStep] = useState(0);\n+\n+  useEffect(() => {\n+    if (!isLoading && result && currentStep < 4) {\n+      setCurrentStep(4);\n+    }\n+  }, [isLoading, result, currentStep]);\n+\n+  const showRules = modal === \"rules\";\n+\n+  return (\n+    <Dialog open={open} onOpenChange={onOpenChange}>\n+      <DialogContent className=\"max-h-[90vh] overflow-y-auto px-0 sm:max-w-7xl\">\n+        <DialogHeader className=\"px-6\">\n+          <DialogTitle>\n+            {isLoading ? (\n+              <div className=\"flex items-center gap-2\">\n+                <Loader2 className=\"h-4 w-4 animate-spin\" />\n+                Processing your prompt file...\n+              </div>\n+            ) : (\n+              \"Rules Generated\"\n+            )}\n+          </DialogTitle>\n+          <DialogDescription>\n+            {isLoading\n+              ? \"In the meantime, learn more about the AI assistant and how it works.\"\n+              : \"Your rules have been created. You can now test and improve them.\"}\n+          </DialogDescription>\n+        </DialogHeader>\n+\n+        {showRules ? (\n+          <TestRulesContent />\n+        ) : (\n+          <div className=\"space-y-4\">\n+            {!result ? (\n+              <>\n+                <ProcessingPromptFileDialogCarousel\n+                  currentStep={currentStep}\n+                  onStepChange={setCurrentStep}\n+                />\n+                <div className=\"flex justify-center\">\n+                  <Button\n+                    onClick={() =>\n+                      setCurrentStep((prev) => Math.min(prev + 1, 3))\n+                    }\n+                    disabled={currentStep >= 3}\n+                  >\n+                    Next\n+                  </Button>\n+                </div>\n+              </>\n+            ) : (\n+              <ResultContent result={result} />\n+            )}\n+          </div>\n+        )}\n+      </DialogContent>\n+    </Dialog>\n+  );\n+}\n+\n+function ResultContent({\n+  result,\n+}: {\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+}) {\n+  if (!result) {\n+    return null;\n+  }\n+\n+  return (\n+    <div className=\"text-center\">\n+      <p className=\"text-green-500\">Rules saved!</p>\n+      <ul className=\"text-sm text-muted-foreground\">\n+        {result.createdRules > 0 && (\n+          <li>{result.createdRules} rules created</li>\n+        )}\n+        {result.editedRules > 0 && <li>{result.editedRules} rules edited</li>}\n+        {result.removedRules > 0 && (\n+          <li>{result.removedRules} rules removed</li>\n+        )}\n+      </ul>\n+      <Button asChild className=\"mt-4\">\n+        <Link href=\"?modal=rules\" shallow>\n+          View\n+        </Link>\n+      </Button>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep1() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/analyzing-prompt.png\"\n+        alt=\"Analyzing prompt file\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>First, our AI analyzes your prompt file and extracts rules from it.</p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep2() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/view-rules.svg\"\n+        alt=\"Saving rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>\n+        Next, you can view and edit the rules, or adjust your prompt further.\n+      </p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep3() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/edit-rule.svg\"\n+        alt=\"Saving rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>Next, you can click on a rule to edit it even further.</p>\n+      <p>Each rule is made up of two parts: a condition and an action.</p>\n+      <p>Our AI sets these up for you, but you can adjust them as needed.</p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogStep4() {\n+  return (\n+    <div>\n+      <Image\n+        src=\"/images/automation/testing-rules.png\"\n+        alt=\"Testing rules\"\n+        width={500}\n+        height={300}\n+        className=\"w-full\"\n+      />\n+      <p>Test the rules to see how they perform.</p>\n+      <p>\n+        This allows you to ensure the rules work as expected before applying\n+        them.\n+      </p>\n+    </div>\n+  );\n+}\n+\n+function ProcessingPromptFileDialogCarousel({\n+  currentStep,\n+  onStepChange,\n+}: {\n+  currentStep: number;\n+  onStepChange: (step: number) => void;\n+}) {\n+  const [api, setApi] = useState<CarouselApi>();\n+\n+  useEffect(() => {\n+    if (api) {\n+      api.scrollTo(currentStep);\n+    }\n+  }, [api, currentStep]);\n+\n+  useEffect(() => {\n+    if (!api) return;\n+\n+    api.on(\"select\", () => {\n+      onStepChange(api.selectedScrollSnap());\n+    });\n+  }, [api, onStepChange]);",
        "comment_created_at": "2024-12-17T12:38:58+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Add cleanup function to useEffect to avoid potential memory leaks**\n\nWhen adding event listeners in `useEffect`, it's important to clean them up to prevent potential memory leaks. Consider returning a cleanup function that removes the event listener.\n\n\n\nSuggested change:\n\n```diff\nuseEffect(() => {\n  if (!api) return;\n\n  const handler = () => {\n    onStepChange(api.selectedScrollSnap());\n  };\n  api.on(\"select\", handler);\n\n+  return () => {\n+    api.off(\"select\", handler);\n+  };\n}, [api, onStepChange]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n  useEffect(() => {\n    if (!api) return;\n\n    const handler = () => {\n      onStepChange(api.selectedScrollSnap());\n    };\n    api.on(\"select\", handler);\n\n    return () => {\n      api.off(\"select\", handler);\n    };\n  }, [api, onStepChange]);\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]