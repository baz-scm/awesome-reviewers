[
  {
    "discussion_id": "2165825644",
    "pr_number": 519,
    "pr_file": "apps/web/app/(app)/admin/scheduled-actions/ScheduledActionsTable.tsx",
    "created_at": "2025-06-25T05:36:59+00:00",
    "commented_code": "+\"use client\";\n+\n+import { useState, useEffect, useCallback } from \"react\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/Input\";\n+import {\n+  Select,\n+  SelectContent,\n+  SelectItem,\n+  SelectTrigger,\n+  SelectValue,\n+} from \"@/components/ui/select\";\n+import {\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableHeader,\n+  TableRow,\n+} from \"@/components/ui/table\";\n+import { Card } from \"@/components/ui/card\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import { RefreshCw, Search } from \"lucide-react\";\n+import { formatDistanceToNow } from \"date-fns\";\n+import type { ScheduledAction } from \"@prisma/client\";\n+\n+interface ScheduledActionWithDetails extends ScheduledAction {\n+  emailAccount: {\n+    id: string;\n+    email: string;\n+    name: string | null;\n+  };\n+  executedRule: {\n+    rule: {\n+      id: string;\n+      name: string;\n+    } | null;\n+  } | null;\n+  error?: string | null;\n+}\n+\n+const actionTypeColors = {\n+  LABEL: \"bg-purple-100 text-purple-800\",\n+  ARCHIVE: \"bg-orange-100 text-orange-800\",\n+  REPLY: \"bg-blue-100 text-blue-800\",\n+  SEND_EMAIL: \"bg-green-100 text-green-800\",\n+  FORWARD: \"bg-indigo-100 text-indigo-800\",\n+  DRAFT_EMAIL: \"bg-teal-100 text-teal-800\",\n+  MARK_SPAM: \"bg-red-100 text-red-800\",\n+  CALL_WEBHOOK: \"bg-gray-100 text-gray-800\",\n+  MARK_READ: \"bg-blue-100 text-blue-800\",\n+  TRACK_THREAD: \"bg-yellow-100 text-yellow-800\",\n+  DIGEST: \"bg-pink-100 text-pink-800\",\n+};\n+\n+const ACTION_LABELS = {\n+  LABEL: \"Label\",\n+  ARCHIVE: \"Archive\",\n+  REPLY: \"Reply\",\n+  SEND_EMAIL: \"Send Email\",\n+  FORWARD: \"Forward\",\n+  DRAFT_EMAIL: \"Draft Email\",\n+  MARK_SPAM: \"Mark Spam\",\n+  CALL_WEBHOOK: \"Call Webhook\",\n+  MARK_READ: \"Mark Read\",\n+  TRACK_THREAD: \"Track Thread\",\n+  DIGEST: \"Digest\",\n+} as const;\n+\n+const STATUS_LABELS = {\n+  PENDING: \"Pending\",\n+  EXECUTING: \"Executing\",\n+  COMPLETED: \"Completed\",\n+  FAILED: \"Failed\",\n+  CANCELLED: \"Cancelled\",\n+} as const;\n+\n+export function ScheduledActionsTable() {\n+  const [emailFilter, setEmailFilter] = useState(\"\");\n+  const [ruleFilter, setRuleFilter] = useState(\"all\");\n+  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n+  const [actions, setActions] = useState<ScheduledActionWithDetails[]>([]);\n+  const [allRules, setAllRules] = useState<Array<{ id: string; name: string }>>(\n+    [],\n+  );\n+  const [totalCount, setTotalCount] = useState(0);\n+  const [statusCounts, setStatusCounts] = useState<Record<string, number>>({});\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [errorModalOpen, setErrorModalOpen] = useState(false);\n+  const [selectedError, setSelectedError] = useState<string | null>(null);\n+\n+  const fetchScheduledActions = useCallback(async () => {\n+    setIsLoading(true);\n+    try {\n+      const params = new URLSearchParams();\n+      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n+      if (emailFilter) params.append(\"email\", emailFilter);\n+      if (ruleFilter && ruleFilter !== \"all\")\n+        params.append(\"search\", ruleFilter);\n+\n+      const response = await fetch(`/api/admin/scheduled-actions?${params}`);\n+      if (response.ok) {\n+        const data = await response.json();\n+        console.log(\"API Response:\", data); // Debug log\n+        console.log(\"All rules:\", data.allRules); // Debug log",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2165825644",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/app/(app)/admin/scheduled-actions/ScheduledActionsTable.tsx",
        "discussion_id": "2165825644",
        "commented_code": "@@ -0,0 +1,424 @@\n+\"use client\";\n+\n+import { useState, useEffect, useCallback } from \"react\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Button } from \"@/components/ui/button\";\n+import { Input } from \"@/components/Input\";\n+import {\n+  Select,\n+  SelectContent,\n+  SelectItem,\n+  SelectTrigger,\n+  SelectValue,\n+} from \"@/components/ui/select\";\n+import {\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableHeader,\n+  TableRow,\n+} from \"@/components/ui/table\";\n+import { Card } from \"@/components/ui/card\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import { RefreshCw, Search } from \"lucide-react\";\n+import { formatDistanceToNow } from \"date-fns\";\n+import type { ScheduledAction } from \"@prisma/client\";\n+\n+interface ScheduledActionWithDetails extends ScheduledAction {\n+  emailAccount: {\n+    id: string;\n+    email: string;\n+    name: string | null;\n+  };\n+  executedRule: {\n+    rule: {\n+      id: string;\n+      name: string;\n+    } | null;\n+  } | null;\n+  error?: string | null;\n+}\n+\n+const actionTypeColors = {\n+  LABEL: \"bg-purple-100 text-purple-800\",\n+  ARCHIVE: \"bg-orange-100 text-orange-800\",\n+  REPLY: \"bg-blue-100 text-blue-800\",\n+  SEND_EMAIL: \"bg-green-100 text-green-800\",\n+  FORWARD: \"bg-indigo-100 text-indigo-800\",\n+  DRAFT_EMAIL: \"bg-teal-100 text-teal-800\",\n+  MARK_SPAM: \"bg-red-100 text-red-800\",\n+  CALL_WEBHOOK: \"bg-gray-100 text-gray-800\",\n+  MARK_READ: \"bg-blue-100 text-blue-800\",\n+  TRACK_THREAD: \"bg-yellow-100 text-yellow-800\",\n+  DIGEST: \"bg-pink-100 text-pink-800\",\n+};\n+\n+const ACTION_LABELS = {\n+  LABEL: \"Label\",\n+  ARCHIVE: \"Archive\",\n+  REPLY: \"Reply\",\n+  SEND_EMAIL: \"Send Email\",\n+  FORWARD: \"Forward\",\n+  DRAFT_EMAIL: \"Draft Email\",\n+  MARK_SPAM: \"Mark Spam\",\n+  CALL_WEBHOOK: \"Call Webhook\",\n+  MARK_READ: \"Mark Read\",\n+  TRACK_THREAD: \"Track Thread\",\n+  DIGEST: \"Digest\",\n+} as const;\n+\n+const STATUS_LABELS = {\n+  PENDING: \"Pending\",\n+  EXECUTING: \"Executing\",\n+  COMPLETED: \"Completed\",\n+  FAILED: \"Failed\",\n+  CANCELLED: \"Cancelled\",\n+} as const;\n+\n+export function ScheduledActionsTable() {\n+  const [emailFilter, setEmailFilter] = useState(\"\");\n+  const [ruleFilter, setRuleFilter] = useState(\"all\");\n+  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n+  const [actions, setActions] = useState<ScheduledActionWithDetails[]>([]);\n+  const [allRules, setAllRules] = useState<Array<{ id: string; name: string }>>(\n+    [],\n+  );\n+  const [totalCount, setTotalCount] = useState(0);\n+  const [statusCounts, setStatusCounts] = useState<Record<string, number>>({});\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [errorModalOpen, setErrorModalOpen] = useState(false);\n+  const [selectedError, setSelectedError] = useState<string | null>(null);\n+\n+  const fetchScheduledActions = useCallback(async () => {\n+    setIsLoading(true);\n+    try {\n+      const params = new URLSearchParams();\n+      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n+      if (emailFilter) params.append(\"email\", emailFilter);\n+      if (ruleFilter && ruleFilter !== \"all\")\n+        params.append(\"search\", ruleFilter);\n+\n+      const response = await fetch(`/api/admin/scheduled-actions?${params}`);\n+      if (response.ok) {\n+        const data = await response.json();\n+        console.log(\"API Response:\", data); // Debug log\n+        console.log(\"All rules:\", data.allRules); // Debug log",
        "comment_created_at": "2025-06-25T05:36:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Remove debug console.log statements.**\n\nDebug logging should be removed before merging to production.\n\n\n```diff\n-        console.log(\"API Response:\", data); // Debug log\n-        console.log(\"All rules:\", data.allRules); // Debug log\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/admin/scheduled-actions/ScheduledActionsTable.tsx at lines\n110 to 111, remove the debug console.log statements that output \"API Response:\"\nand \"All rules:\" to clean up the code before production deployment.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:medusa:lion -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2165825649",
    "pr_number": 519,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/RuleForm.tsx",
    "created_at": "2025-06-25T05:36:59+00:00",
    "commented_code": "</div>\n   );\n }\n+\n+function DelayInputControls({\n+  index,\n+  delayInMinutes,\n+  setValue,\n+}: {\n+  index: number;\n+  delayInMinutes: number | null | undefined;\n+  setValue: ReturnType<typeof useForm<CreateRuleBody>>[\"setValue\"];\n+}) {\n+  const delayConfig = useMemo(() => {\n+    // Convert minutes to display value and unit\n+    const getDisplayValueAndUnit = (minutes: number | null | undefined) => {\n+      if (!minutes || minutes <= 0) return { value: \"\", unit: \"hours\" };\n+\n+      if (minutes >= 1440 && minutes % 1440 === 0) {\n+        // Days (1440 minutes = 1 day)\n+        return { value: (minutes / 1440).toString(), unit: \"days\" };\n+      } else if (minutes >= 60 && minutes % 60 === 0) {\n+        // Hours (60 minutes = 1 hour)\n+        return { value: (minutes / 60).toString(), unit: \"hours\" };\n+      } else {\n+        // Minutes\n+        return { value: minutes.toString(), unit: \"minutes\" };\n+      }\n+    };\n+\n+    // Convert display value and unit to minutes\n+    const convertToMinutes = (value: string, unit: string) => {\n+      const numValue = Number.parseInt(value, 10);\n+      if (Number.isNaN(numValue) || numValue <= 0) return null;\n+\n+      switch (unit) {\n+        case \"minutes\":\n+          return numValue;\n+        case \"hours\":\n+          return numValue * 60;\n+        case \"days\":\n+          return numValue * 1440;\n+        default:\n+          return numValue;\n+      }\n+    };\n+\n+    const { value: displayValue, unit } =\n+      getDisplayValueAndUnit(delayInMinutes);\n+\n+    const handleValueChange = (newValue: string, currentUnit: string) => {\n+      const minutes = convertToMinutes(newValue, currentUnit);\n+      setValue(`actions.${index}.delayInMinutes`, minutes, {\n+        shouldValidate: true,\n+      });\n+    };\n+\n+    const handleUnitChange = (newUnit: string) => {\n+      if (displayValue) {\n+        const minutes = convertToMinutes(displayValue, newUnit);\n+        setValue(`actions.${index}.delayInMinutes`, minutes);\n+      }\n+    };\n+\n+    return {\n+      displayValue,\n+      unit,\n+      handleValueChange,\n+      handleUnitChange,\n+    };\n+  }, [delayInMinutes, setValue, index]);\n+\n+  return (\n+    <div className=\"space-y-2\">\n+      <Label label=\"Delay\" name={`delay-${index}`} />\n+      <div className=\"flex items-center space-x-2\">\n+        <Input\n+          name={`delay-${index}`}\n+          type=\"text\"\n+          placeholder=\"0\"\n+          className=\"w-20\"\n+          registerProps={{\n+            value: delayConfig.displayValue,\n+            onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n+              const value = e.target.value.replace(/[^0-9]/g, \"\");\n+              delayConfig.handleValueChange(value, delayConfig.unit);\n+            },\n+          }}\n+        />\n+        <Select\n+          value={delayConfig.unit}\n+          onValueChange={delayConfig.handleUnitChange}\n+        >\n+          <SelectTrigger className=\"w-24\">\n+            <SelectValue />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"minutes\">Minutes</SelectItem>\n+            <SelectItem value=\"hours\">Hours</SelectItem>\n+            <SelectItem value=\"days\">Days</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function DelayInput({\n+  index,\n+  register,\n+  setValue,\n+  watch,\n+  errors,\n+}: {\n+  index: number;\n+  register: ReturnType<typeof useForm<CreateRuleBody>>[\"register\"];\n+  setValue: ReturnType<typeof useForm<CreateRuleBody>>[\"setValue\"];\n+  watch: ReturnType<typeof useForm<CreateRuleBody>>[\"watch\"];\n+  errors: any;\n+}) {\n+  const delayInMinutes = watch(`actions.${index}.delayInMinutes`);\n+  const isDelayEnabled = delayInMinutes != null && delayInMinutes > 0;\n+\n+  // Convert minutes to display value and unit\n+  const getDisplayValueAndUnit = (minutes: number | null | undefined) => {\n+    if (!minutes || minutes <= 0) return { value: \"\", unit: \"minutes\" };\n+\n+    if (minutes >= 1440 && minutes % 1440 === 0) {\n+      // Days (1440 minutes = 1 day)\n+      return { value: (minutes / 1440).toString(), unit: \"days\" };\n+    } else if (minutes >= 60 && minutes % 60 === 0) {\n+      // Hours (60 minutes = 1 hour)\n+      return { value: (minutes / 60).toString(), unit: \"hours\" };\n+    } else {\n+      // Minutes\n+      return { value: minutes.toString(), unit: \"minutes\" };\n+    }\n+  };\n+\n+  // Maintain separate state for the selected unit to ensure UI updates correctly\n+  const [selectedUnit, setSelectedUnit] = useState(() => {\n+    const { unit } = getDisplayValueAndUnit(delayInMinutes);\n+    return unit;\n+  });\n+\n+  const { value: displayValue } = getDisplayValueAndUnit(delayInMinutes);\n+\n+  // Convert display value and unit to minutes\n+  const convertToMinutes = (value: string, unit: string) => {\n+    const numValue = Number.parseInt(value, 10);\n+    if (Number.isNaN(numValue) || numValue <= 0) return null;\n+\n+    switch (unit) {\n+      case \"minutes\":\n+        return numValue;\n+      case \"hours\":\n+        return numValue * 60;\n+      case \"days\":\n+        return numValue * 1440;\n+      default:\n+        return numValue;\n+    }\n+  };\n+\n+  const handleValueChange = (newValue: string) => {\n+    const minutes = convertToMinutes(newValue, selectedUnit);\n+    setValue(`actions.${index}.delayInMinutes`, minutes, {\n+      shouldValidate: true,\n+    });\n+  };\n+\n+  const handleUnitChange = (newUnit: string) => {\n+    setSelectedUnit(newUnit);\n+    if (displayValue) {\n+      const minutes = convertToMinutes(displayValue, newUnit);\n+      setValue(`actions.${index}.delayInMinutes`, minutes);\n+    }\n+  };\n+\n+  const handleToggleChange = (enabled: boolean) => {\n+    if (enabled) {\n+      // Set a default delay of 1 hour when enabling\n+      setValue(`actions.${index}.delayInMinutes`, 60, {\n+        shouldValidate: true,\n+      });\n+      setSelectedUnit(\"hours\");\n+    } else {\n+      // Clear the delay when disabling\n+      setValue(`actions.${index}.delayInMinutes`, null, {\n+        shouldValidate: true,\n+      });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"mt-4 space-y-2\">\n+      <div className=\"flex items-center justify-end space-x-2\">\n+        <TooltipExplanation text=\"Schedule this action to execute after a delay from when the email was received. Useful for follow-ups, reminders, or giving senders time to respond.\" />\n+        <Toggle\n+          name={`actions.${index}.delayEnabled`}\n+          label=\"Delay enabled\"\n+          enabled={isDelayEnabled}\n+          onChange={handleToggleChange}\n+        />\n+      </div>\n+\n+      {isDelayEnabled && (\n+        <div className=\"flex items-center space-x-2\">\n+          <Input\n+            name={`delay-${index}`}\n+            type=\"text\"\n+            placeholder=\"0\"\n+            className=\"w-20\"\n+            registerProps={{\n+              value: displayValue,\n+              onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n+                const value = e.target.value.replace(/[^0-9]/g, \"\");\n+                handleValueChange(value);\n+              },\n+            }}\n+          />\n+          <Select value={selectedUnit} onValueChange={handleUnitChange}>\n+            <SelectTrigger className=\"w-24\">\n+              <SelectValue />\n+            </SelectTrigger>\n+            <SelectContent>\n+              <SelectItem value=\"minutes\">Minutes</SelectItem>\n+              <SelectItem value=\"hours\">Hours</SelectItem>\n+              <SelectItem value=\"days\">Days</SelectItem>\n+            </SelectContent>\n+          </Select>\n+        </div>\n+      )}\n+\n+      {/* Hidden input for form registration - needed for validation */}\n+      <input type=\"hidden\" {...register(`actions.${index}.delayInMinutes`)} />\n+\n+      {isDelayEnabled && errors?.actions?.[index]?.delayInMinutes && (\n+        <ErrorMessage\n+          message={\n+            errors.actions?.[index]?.delayInMinutes?.message?.toString() ||\n+            \"Please enter a valid delay between 1 minute and 90 days\"\n+          }\n+        />\n+      )}\n+    </div>\n+  );\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2165825649",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 519,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/RuleForm.tsx",
        "discussion_id": "2165825649",
        "commented_code": "@@ -1393,3 +1477,248 @@ function VariableProTip() {\n     </div>\n   );\n }\n+\n+function DelayInputControls({\n+  index,\n+  delayInMinutes,\n+  setValue,\n+}: {\n+  index: number;\n+  delayInMinutes: number | null | undefined;\n+  setValue: ReturnType<typeof useForm<CreateRuleBody>>[\"setValue\"];\n+}) {\n+  const delayConfig = useMemo(() => {\n+    // Convert minutes to display value and unit\n+    const getDisplayValueAndUnit = (minutes: number | null | undefined) => {\n+      if (!minutes || minutes <= 0) return { value: \"\", unit: \"hours\" };\n+\n+      if (minutes >= 1440 && minutes % 1440 === 0) {\n+        // Days (1440 minutes = 1 day)\n+        return { value: (minutes / 1440).toString(), unit: \"days\" };\n+      } else if (minutes >= 60 && minutes % 60 === 0) {\n+        // Hours (60 minutes = 1 hour)\n+        return { value: (minutes / 60).toString(), unit: \"hours\" };\n+      } else {\n+        // Minutes\n+        return { value: minutes.toString(), unit: \"minutes\" };\n+      }\n+    };\n+\n+    // Convert display value and unit to minutes\n+    const convertToMinutes = (value: string, unit: string) => {\n+      const numValue = Number.parseInt(value, 10);\n+      if (Number.isNaN(numValue) || numValue <= 0) return null;\n+\n+      switch (unit) {\n+        case \"minutes\":\n+          return numValue;\n+        case \"hours\":\n+          return numValue * 60;\n+        case \"days\":\n+          return numValue * 1440;\n+        default:\n+          return numValue;\n+      }\n+    };\n+\n+    const { value: displayValue, unit } =\n+      getDisplayValueAndUnit(delayInMinutes);\n+\n+    const handleValueChange = (newValue: string, currentUnit: string) => {\n+      const minutes = convertToMinutes(newValue, currentUnit);\n+      setValue(`actions.${index}.delayInMinutes`, minutes, {\n+        shouldValidate: true,\n+      });\n+    };\n+\n+    const handleUnitChange = (newUnit: string) => {\n+      if (displayValue) {\n+        const minutes = convertToMinutes(displayValue, newUnit);\n+        setValue(`actions.${index}.delayInMinutes`, minutes);\n+      }\n+    };\n+\n+    return {\n+      displayValue,\n+      unit,\n+      handleValueChange,\n+      handleUnitChange,\n+    };\n+  }, [delayInMinutes, setValue, index]);\n+\n+  return (\n+    <div className=\"space-y-2\">\n+      <Label label=\"Delay\" name={`delay-${index}`} />\n+      <div className=\"flex items-center space-x-2\">\n+        <Input\n+          name={`delay-${index}`}\n+          type=\"text\"\n+          placeholder=\"0\"\n+          className=\"w-20\"\n+          registerProps={{\n+            value: delayConfig.displayValue,\n+            onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n+              const value = e.target.value.replace(/[^0-9]/g, \"\");\n+              delayConfig.handleValueChange(value, delayConfig.unit);\n+            },\n+          }}\n+        />\n+        <Select\n+          value={delayConfig.unit}\n+          onValueChange={delayConfig.handleUnitChange}\n+        >\n+          <SelectTrigger className=\"w-24\">\n+            <SelectValue />\n+          </SelectTrigger>\n+          <SelectContent>\n+            <SelectItem value=\"minutes\">Minutes</SelectItem>\n+            <SelectItem value=\"hours\">Hours</SelectItem>\n+            <SelectItem value=\"days\">Days</SelectItem>\n+          </SelectContent>\n+        </Select>\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function DelayInput({\n+  index,\n+  register,\n+  setValue,\n+  watch,\n+  errors,\n+}: {\n+  index: number;\n+  register: ReturnType<typeof useForm<CreateRuleBody>>[\"register\"];\n+  setValue: ReturnType<typeof useForm<CreateRuleBody>>[\"setValue\"];\n+  watch: ReturnType<typeof useForm<CreateRuleBody>>[\"watch\"];\n+  errors: any;\n+}) {\n+  const delayInMinutes = watch(`actions.${index}.delayInMinutes`);\n+  const isDelayEnabled = delayInMinutes != null && delayInMinutes > 0;\n+\n+  // Convert minutes to display value and unit\n+  const getDisplayValueAndUnit = (minutes: number | null | undefined) => {\n+    if (!minutes || minutes <= 0) return { value: \"\", unit: \"minutes\" };\n+\n+    if (minutes >= 1440 && minutes % 1440 === 0) {\n+      // Days (1440 minutes = 1 day)\n+      return { value: (minutes / 1440).toString(), unit: \"days\" };\n+    } else if (minutes >= 60 && minutes % 60 === 0) {\n+      // Hours (60 minutes = 1 hour)\n+      return { value: (minutes / 60).toString(), unit: \"hours\" };\n+    } else {\n+      // Minutes\n+      return { value: minutes.toString(), unit: \"minutes\" };\n+    }\n+  };\n+\n+  // Maintain separate state for the selected unit to ensure UI updates correctly\n+  const [selectedUnit, setSelectedUnit] = useState(() => {\n+    const { unit } = getDisplayValueAndUnit(delayInMinutes);\n+    return unit;\n+  });\n+\n+  const { value: displayValue } = getDisplayValueAndUnit(delayInMinutes);\n+\n+  // Convert display value and unit to minutes\n+  const convertToMinutes = (value: string, unit: string) => {\n+    const numValue = Number.parseInt(value, 10);\n+    if (Number.isNaN(numValue) || numValue <= 0) return null;\n+\n+    switch (unit) {\n+      case \"minutes\":\n+        return numValue;\n+      case \"hours\":\n+        return numValue * 60;\n+      case \"days\":\n+        return numValue * 1440;\n+      default:\n+        return numValue;\n+    }\n+  };\n+\n+  const handleValueChange = (newValue: string) => {\n+    const minutes = convertToMinutes(newValue, selectedUnit);\n+    setValue(`actions.${index}.delayInMinutes`, minutes, {\n+      shouldValidate: true,\n+    });\n+  };\n+\n+  const handleUnitChange = (newUnit: string) => {\n+    setSelectedUnit(newUnit);\n+    if (displayValue) {\n+      const minutes = convertToMinutes(displayValue, newUnit);\n+      setValue(`actions.${index}.delayInMinutes`, minutes);\n+    }\n+  };\n+\n+  const handleToggleChange = (enabled: boolean) => {\n+    if (enabled) {\n+      // Set a default delay of 1 hour when enabling\n+      setValue(`actions.${index}.delayInMinutes`, 60, {\n+        shouldValidate: true,\n+      });\n+      setSelectedUnit(\"hours\");\n+    } else {\n+      // Clear the delay when disabling\n+      setValue(`actions.${index}.delayInMinutes`, null, {\n+        shouldValidate: true,\n+      });\n+    }\n+  };\n+\n+  return (\n+    <div className=\"mt-4 space-y-2\">\n+      <div className=\"flex items-center justify-end space-x-2\">\n+        <TooltipExplanation text=\"Schedule this action to execute after a delay from when the email was received. Useful for follow-ups, reminders, or giving senders time to respond.\" />\n+        <Toggle\n+          name={`actions.${index}.delayEnabled`}\n+          label=\"Delay enabled\"\n+          enabled={isDelayEnabled}\n+          onChange={handleToggleChange}\n+        />\n+      </div>\n+\n+      {isDelayEnabled && (\n+        <div className=\"flex items-center space-x-2\">\n+          <Input\n+            name={`delay-${index}`}\n+            type=\"text\"\n+            placeholder=\"0\"\n+            className=\"w-20\"\n+            registerProps={{\n+              value: displayValue,\n+              onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n+                const value = e.target.value.replace(/[^0-9]/g, \"\");\n+                handleValueChange(value);\n+              },\n+            }}\n+          />\n+          <Select value={selectedUnit} onValueChange={handleUnitChange}>\n+            <SelectTrigger className=\"w-24\">\n+              <SelectValue />\n+            </SelectTrigger>\n+            <SelectContent>\n+              <SelectItem value=\"minutes\">Minutes</SelectItem>\n+              <SelectItem value=\"hours\">Hours</SelectItem>\n+              <SelectItem value=\"days\">Days</SelectItem>\n+            </SelectContent>\n+          </Select>\n+        </div>\n+      )}\n+\n+      {/* Hidden input for form registration - needed for validation */}\n+      <input type=\"hidden\" {...register(`actions.${index}.delayInMinutes`)} />\n+\n+      {isDelayEnabled && errors?.actions?.[index]?.delayInMinutes && (\n+        <ErrorMessage\n+          message={\n+            errors.actions?.[index]?.delayInMinutes?.message?.toString() ||\n+            \"Please enter a valid delay between 1 minute and 90 days\"\n+          }\n+        />\n+      )}\n+    </div>\n+  );\n+}",
        "comment_created_at": "2025-06-25T05:36:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Remove unused `DelayInput` component.**\n\nThis component is not used anywhere in the file. The `DelayInputControls` component is used instead for delay input functionality.\n\n```diff\n-function DelayInput({\n-  index,\n-  register,\n-  setValue,\n-  watch,\n-  errors,\n-}: {\n-  index: number;\n-  register: ReturnType<typeof useForm<CreateRuleBody>>[\"register\"];\n-  setValue: ReturnType<typeof useForm<CreateRuleBody>>[\"setValue\"];\n-  watch: ReturnType<typeof useForm<CreateRuleBody>>[\"watch\"];\n-  errors: any;\n-}) {\n-  // ... entire function body ...\n-}\n```\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\n\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/[emailAccountId]/assistant/RuleForm.tsx between lines 1584\nand 1724, the DelayInput component is defined but not used anywhere in the file.\nRemove the entire DelayInput component code to clean up unused code, since\nDelayInputControls is used instead for delay input functionality.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:medusa:lion -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2142617488",
    "pr_number": 494,
    "pr_file": "apps/web/app/(app)/referrals/ReferralDashboard.tsx",
    "created_at": "2025-06-12T12:31:05+00:00",
    "commented_code": "+\"use client\";\n+\n+import useSWR from \"swr\";\n+import {\n+  Card,\n+  CardContent,\n+  CardDescription,\n+  CardHeader,\n+  CardTitle,\n+} from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Skeleton } from \"@/components/ui/skeleton\";\n+import { Copy, Share2, Users, Trophy, Clock } from \"lucide-react\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import type { GetReferralCodeResponse } from \"@/app/api/referrals/code/route\";\n+import type { GetReferralStatsResponse } from \"@/app/api/referrals/stats/route\";\n+import type { ReferralStatus } from \"@prisma/client\";\n+\n+export function ReferralDashboard() {\n+  const { data: referralCodeData, isLoading: loadingCode } =\n+    useSWR<GetReferralCodeResponse>(\"/api/referrals/code\");\n+\n+  const { data: statsData, isLoading: loadingStats } =\n+    useSWR<GetReferralStatsResponse>(\"/api/referrals/stats\");\n+\n+  const loading = loadingCode || loadingStats;\n+\n+  const copyToClipboard = async (text: string, type: \"code\" | \"link\") => {\n+    try {\n+      await navigator.clipboard.writeText(text);\n+      toastSuccess({ description: `Referral ${type} copied to clipboard!` });\n+    } catch (error) {\n+      toastError({\n+        title: `Failed to copy ${type}`,\n+        description: \"Please try again\",\n+      });\n+    }\n+  };\n+\n+  const shareReferralLink = async () => {\n+    if (!referralCodeData) return;\n+\n+    if (navigator.share) {\n+      try {\n+        await navigator.share({\n+          title: \"Join Inbox Zero with my referral\",\n+          text: `Use my referral code ${referralCodeData.code} to get started with Inbox Zero!`,\n+          url: referralCodeData.link,\n+        });\n+      } catch (error) {\n+        if ((error as Error).name !== \"AbortError\") {\n+          toastError({\n+            title: \"Failed to share\",\n+            description: \"Please try again\",\n+          });\n+        }\n+      }\n+    } else {\n+      copyToClipboard(referralCodeData.link, \"link\");\n+    }\n+  };\n+\n+  if (loading) {\n+    return <ReferralDashboardSkeleton />;\n+  }\n+\n+  return (\n+    <div className=\"space-y-8\">\n+      <div className=\"text-center\">\n+        <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\">\n+          Refer Friends, Get Rewards\n+        </h1>\n+        <p className=\"mt-4 text-lg text-gray-600\">\n+          Share Inbox Zero with friends and get a free month for each friend who\n+          completes their trial\n+        </p>\n+      </div>\n+\n+      {/* Referral Code Card */}\n+      <Card>\n+        <CardHeader>\n+          <CardTitle>Your Referral Code</CardTitle>\n+          <CardDescription>\n+            Share this code with friends to earn rewards\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          {referralCodeData ? (\n+            <div className=\"space-y-4\">\n+              <div className=\"flex items-center justify-between rounded-lg border bg-gray-50 p-4\">\n+                <span className=\"font-mono text-2xl font-bold text-gray-900\">\n+                  {referralCodeData.code}\n+                </span>\n+                <Button\n+                  onClick={() => copyToClipboard(referralCodeData.code, \"code\")}\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                >\n+                  <Copy className=\"mr-2 h-4 w-4\" />\n+                  Copy Code\n+                </Button>\n+              </div>\n+\n+              <div className=\"flex gap-2\">\n+                <Button\n+                  onClick={() => copyToClipboard(referralCodeData.link, \"link\")}\n+                  variant=\"outline\"\n+                  className=\"flex-1\"\n+                >\n+                  <Copy className=\"mr-2 h-4 w-4\" />\n+                  Copy Link\n+                </Button>\n+                <Button\n+                  onClick={shareReferralLink}\n+                  variant=\"default\"\n+                  className=\"flex-1\"\n+                >\n+                  <Share2 className=\"mr-2 h-4 w-4\" />\n+                  Share\n+                </Button>\n+              </div>\n+            </div>\n+          ) : (\n+            <p className=\"text-gray-500\">Unable to load referral code</p>\n+          )}\n+        </CardContent>\n+      </Card>\n+\n+      {/* Stats Cards */}\n+      {statsData && (\n+        <div className=\"grid gap-4 md:grid-cols-2\">\n+          <Card>\n+            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n+              <CardTitle className=\"text-sm font-medium\">\n+                Total Referrals\n+              </CardTitle>\n+              <Users className=\"h-4 w-4 text-muted-foreground\" />\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"text-2xl font-bold\">\n+                {statsData.stats.totalReferrals}\n+              </div>\n+              <p className=\"text-xs text-muted-foreground\">\n+                Friends you've referred\n+              </p>\n+            </CardContent>\n+          </Card>\n+\n+          <Card>\n+            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n+              <CardTitle className=\"text-sm font-medium\">\n+                Rewards Earned\n+              </CardTitle>\n+              <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"text-2xl font-bold\">\n+                {statsData.stats.totalRewards}\n+              </div>\n+              <p className=\"text-xs text-muted-foreground\">\n+                Free months earned\n+              </p>\n+            </CardContent>\n+          </Card>\n+        </div>\n+      )}\n+\n+      {/* Referrals List */}\n+      {statsData && statsData.referrals.length > 0 && (\n+        <Card>\n+          <CardHeader>\n+            <CardTitle>Your Referrals</CardTitle>\n+            <CardDescription>\n+              Track the status of your referred friends\n+            </CardDescription>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"space-y-4\">\n+              {statsData.referrals.map((referral) => (\n+                <div\n+                  key={referral.id}\n+                  className=\"flex items-center justify-between border-b pb-4 last:border-0\"\n+                >\n+                  <div className=\"space-y-1\">\n+                    <p className=\"font-medium\">\n+                      {referral.referredUser.name ||\n+                        referral.referredUser.email}\n+                    </p>\n+                    <p className=\"text-sm text-gray-500\">\n+                      Joined{\" \"}\n+                      {new Date(\n+                        referral.referredUser.createdAt,\n+                      ).toLocaleDateString()}\n+                    </p>\n+                  </div>\n+                  <Badge variant={getReferralStatusVariant(referral.status)}>\n+                    {getReferralStatusLabel(referral.status as ReferralStatus)}\n+                  </Badge>\n+                </div>\n+              ))}\n+            </div>\n+          </CardContent>\n+        </Card>\n+      )}\n+    </div>\n+  );\n+}\n+\n+function ReferralDashboardSkeleton() {\n+  return (\n+    <div className=\"space-y-8\">\n+      <div className=\"text-center\">\n+        <Skeleton className=\"mx-auto h-10 w-96\" />\n+        <Skeleton className=\"mx-auto mt-4 h-6 w-[600px]\" />\n+      </div>\n+\n+      <Card>\n+        <CardHeader>\n+          <Skeleton className=\"h-6 w-40\" />\n+          <Skeleton className=\"mt-2 h-4 w-60\" />\n+        </CardHeader>\n+        <CardContent>\n+          <Skeleton className=\"h-20 w-full\" />\n+          <div className=\"mt-4 flex gap-2\">\n+            <Skeleton className=\"h-10 flex-1\" />\n+            <Skeleton className=\"h-10 flex-1\" />\n+          </div>\n+        </CardContent>\n+      </Card>\n+\n+      <div className=\"grid gap-4 md:grid-cols-3\">\n+        {[1, 2, 3].map((i) => (\n+          <Card key={i}>\n+            <CardHeader>\n+              <Skeleton className=\"h-4 w-24\" />\n+            </CardHeader>\n+            <CardContent>\n+              <Skeleton className=\"h-8 w-16\" />\n+              <Skeleton className=\"mt-2 h-3 w-32\" />\n+            </CardContent>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function getReferralStatusVariant(status: ReferralStatus) {\n+  switch (status) {\n+    case \"PENDING\":\n+      return \"secondary\";\n+    case \"COMPLETED\":\n+      return \"green\";\n+  }\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2142617488",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 494,
        "pr_file": "apps/web/app/(app)/referrals/ReferralDashboard.tsx",
        "discussion_id": "2142617488",
        "commented_code": "@@ -0,0 +1,267 @@\n+\"use client\";\n+\n+import useSWR from \"swr\";\n+import {\n+  Card,\n+  CardContent,\n+  CardDescription,\n+  CardHeader,\n+  CardTitle,\n+} from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { Badge } from \"@/components/ui/badge\";\n+import { Skeleton } from \"@/components/ui/skeleton\";\n+import { Copy, Share2, Users, Trophy, Clock } from \"lucide-react\";\n+import { toastError, toastSuccess } from \"@/components/Toast\";\n+import type { GetReferralCodeResponse } from \"@/app/api/referrals/code/route\";\n+import type { GetReferralStatsResponse } from \"@/app/api/referrals/stats/route\";\n+import type { ReferralStatus } from \"@prisma/client\";\n+\n+export function ReferralDashboard() {\n+  const { data: referralCodeData, isLoading: loadingCode } =\n+    useSWR<GetReferralCodeResponse>(\"/api/referrals/code\");\n+\n+  const { data: statsData, isLoading: loadingStats } =\n+    useSWR<GetReferralStatsResponse>(\"/api/referrals/stats\");\n+\n+  const loading = loadingCode || loadingStats;\n+\n+  const copyToClipboard = async (text: string, type: \"code\" | \"link\") => {\n+    try {\n+      await navigator.clipboard.writeText(text);\n+      toastSuccess({ description: `Referral ${type} copied to clipboard!` });\n+    } catch (error) {\n+      toastError({\n+        title: `Failed to copy ${type}`,\n+        description: \"Please try again\",\n+      });\n+    }\n+  };\n+\n+  const shareReferralLink = async () => {\n+    if (!referralCodeData) return;\n+\n+    if (navigator.share) {\n+      try {\n+        await navigator.share({\n+          title: \"Join Inbox Zero with my referral\",\n+          text: `Use my referral code ${referralCodeData.code} to get started with Inbox Zero!`,\n+          url: referralCodeData.link,\n+        });\n+      } catch (error) {\n+        if ((error as Error).name !== \"AbortError\") {\n+          toastError({\n+            title: \"Failed to share\",\n+            description: \"Please try again\",\n+          });\n+        }\n+      }\n+    } else {\n+      copyToClipboard(referralCodeData.link, \"link\");\n+    }\n+  };\n+\n+  if (loading) {\n+    return <ReferralDashboardSkeleton />;\n+  }\n+\n+  return (\n+    <div className=\"space-y-8\">\n+      <div className=\"text-center\">\n+        <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\">\n+          Refer Friends, Get Rewards\n+        </h1>\n+        <p className=\"mt-4 text-lg text-gray-600\">\n+          Share Inbox Zero with friends and get a free month for each friend who\n+          completes their trial\n+        </p>\n+      </div>\n+\n+      {/* Referral Code Card */}\n+      <Card>\n+        <CardHeader>\n+          <CardTitle>Your Referral Code</CardTitle>\n+          <CardDescription>\n+            Share this code with friends to earn rewards\n+          </CardDescription>\n+        </CardHeader>\n+        <CardContent>\n+          {referralCodeData ? (\n+            <div className=\"space-y-4\">\n+              <div className=\"flex items-center justify-between rounded-lg border bg-gray-50 p-4\">\n+                <span className=\"font-mono text-2xl font-bold text-gray-900\">\n+                  {referralCodeData.code}\n+                </span>\n+                <Button\n+                  onClick={() => copyToClipboard(referralCodeData.code, \"code\")}\n+                  variant=\"outline\"\n+                  size=\"sm\"\n+                >\n+                  <Copy className=\"mr-2 h-4 w-4\" />\n+                  Copy Code\n+                </Button>\n+              </div>\n+\n+              <div className=\"flex gap-2\">\n+                <Button\n+                  onClick={() => copyToClipboard(referralCodeData.link, \"link\")}\n+                  variant=\"outline\"\n+                  className=\"flex-1\"\n+                >\n+                  <Copy className=\"mr-2 h-4 w-4\" />\n+                  Copy Link\n+                </Button>\n+                <Button\n+                  onClick={shareReferralLink}\n+                  variant=\"default\"\n+                  className=\"flex-1\"\n+                >\n+                  <Share2 className=\"mr-2 h-4 w-4\" />\n+                  Share\n+                </Button>\n+              </div>\n+            </div>\n+          ) : (\n+            <p className=\"text-gray-500\">Unable to load referral code</p>\n+          )}\n+        </CardContent>\n+      </Card>\n+\n+      {/* Stats Cards */}\n+      {statsData && (\n+        <div className=\"grid gap-4 md:grid-cols-2\">\n+          <Card>\n+            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n+              <CardTitle className=\"text-sm font-medium\">\n+                Total Referrals\n+              </CardTitle>\n+              <Users className=\"h-4 w-4 text-muted-foreground\" />\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"text-2xl font-bold\">\n+                {statsData.stats.totalReferrals}\n+              </div>\n+              <p className=\"text-xs text-muted-foreground\">\n+                Friends you've referred\n+              </p>\n+            </CardContent>\n+          </Card>\n+\n+          <Card>\n+            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n+              <CardTitle className=\"text-sm font-medium\">\n+                Rewards Earned\n+              </CardTitle>\n+              <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n+            </CardHeader>\n+            <CardContent>\n+              <div className=\"text-2xl font-bold\">\n+                {statsData.stats.totalRewards}\n+              </div>\n+              <p className=\"text-xs text-muted-foreground\">\n+                Free months earned\n+              </p>\n+            </CardContent>\n+          </Card>\n+        </div>\n+      )}\n+\n+      {/* Referrals List */}\n+      {statsData && statsData.referrals.length > 0 && (\n+        <Card>\n+          <CardHeader>\n+            <CardTitle>Your Referrals</CardTitle>\n+            <CardDescription>\n+              Track the status of your referred friends\n+            </CardDescription>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"space-y-4\">\n+              {statsData.referrals.map((referral) => (\n+                <div\n+                  key={referral.id}\n+                  className=\"flex items-center justify-between border-b pb-4 last:border-0\"\n+                >\n+                  <div className=\"space-y-1\">\n+                    <p className=\"font-medium\">\n+                      {referral.referredUser.name ||\n+                        referral.referredUser.email}\n+                    </p>\n+                    <p className=\"text-sm text-gray-500\">\n+                      Joined{\" \"}\n+                      {new Date(\n+                        referral.referredUser.createdAt,\n+                      ).toLocaleDateString()}\n+                    </p>\n+                  </div>\n+                  <Badge variant={getReferralStatusVariant(referral.status)}>\n+                    {getReferralStatusLabel(referral.status as ReferralStatus)}\n+                  </Badge>\n+                </div>\n+              ))}\n+            </div>\n+          </CardContent>\n+        </Card>\n+      )}\n+    </div>\n+  );\n+}\n+\n+function ReferralDashboardSkeleton() {\n+  return (\n+    <div className=\"space-y-8\">\n+      <div className=\"text-center\">\n+        <Skeleton className=\"mx-auto h-10 w-96\" />\n+        <Skeleton className=\"mx-auto mt-4 h-6 w-[600px]\" />\n+      </div>\n+\n+      <Card>\n+        <CardHeader>\n+          <Skeleton className=\"h-6 w-40\" />\n+          <Skeleton className=\"mt-2 h-4 w-60\" />\n+        </CardHeader>\n+        <CardContent>\n+          <Skeleton className=\"h-20 w-full\" />\n+          <div className=\"mt-4 flex gap-2\">\n+            <Skeleton className=\"h-10 flex-1\" />\n+            <Skeleton className=\"h-10 flex-1\" />\n+          </div>\n+        </CardContent>\n+      </Card>\n+\n+      <div className=\"grid gap-4 md:grid-cols-3\">\n+        {[1, 2, 3].map((i) => (\n+          <Card key={i}>\n+            <CardHeader>\n+              <Skeleton className=\"h-4 w-24\" />\n+            </CardHeader>\n+            <CardContent>\n+              <Skeleton className=\"h-8 w-16\" />\n+              <Skeleton className=\"mt-2 h-3 w-32\" />\n+            </CardContent>\n+          </Card>\n+        ))}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function getReferralStatusVariant(status: ReferralStatus) {\n+  switch (status) {\n+    case \"PENDING\":\n+      return \"secondary\";\n+    case \"COMPLETED\":\n+      return \"green\";\n+  }\n+}",
        "comment_created_at": "2025-06-12T12:31:05+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Return a valid Badge variant for all enum values.**\n\n`getReferralStatusVariant` returns `\"green\"` for `COMPLETED` and `undefined` for any future status, which might break styling or even TypeScript checks if `variant` is not optional. Provide a sane default:\n\n```diff\n   case \"COMPLETED\":\n-      return \"green\";\n+      return \"success\"; // assuming the design-system offers \u201csuccess\u201d\n+  default:\n+      return \"secondary\";\n```\n\nAlso confirm the variant names (`green` vs. `success`) with the design-system.  \n\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n```suggestion\nfunction getReferralStatusVariant(status: ReferralStatus) {\n  switch (status) {\n    case \"PENDING\":\n      return \"secondary\";\n    case \"COMPLETED\":\n      return \"success\"; // assuming the design-system offers \u201csuccess\u201d\n    default:\n      return \"secondary\";\n  }\n}\n```\n\n</details>\n\n<!-- suggestion_end -->\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/referrals/ReferralDashboard.tsx around lines 249 to 256,\nthe function getReferralStatusVariant does not return a valid badge variant for\nall ReferralStatus enum values, returning undefined for unhandled cases. Update\nthe function to include a default return value that matches the design system's\nvalid variant names (confirm if \"green\" should be \"success\") to ensure\nconsistent styling and satisfy TypeScript requirements.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112821035",
    "pr_number": 468,
    "pr_file": "apps/web/components/assistant-chat/chat.tsx",
    "created_at": "2025-05-28T22:00:39+00:00",
    "commented_code": "reload,\n   } = chat;\n \n-  const [mode, setMode] = useQueryState(\"mode\");\n+  // const [mode, setMode] = useQueryState(\"mode\");\n \n-  const isDocumentMode = mode === \"document\";\n+  // const isDocumentMode = mode === \"document\";\n+  const isDocumentMode = false;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2112821035",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 468,
        "pr_file": "apps/web/components/assistant-chat/chat.tsx",
        "discussion_id": "2112821035",
        "commented_code": "@@ -169,15 +178,16 @@ function ChatUI({ chat }: { chat: ReturnType<typeof useChat> }) {\n     reload,\n   } = chat;\n \n-  const [mode, setMode] = useQueryState(\"mode\");\n+  // const [mode, setMode] = useQueryState(\"mode\");\n \n-  const isDocumentMode = mode === \"document\";\n+  // const isDocumentMode = mode === \"document\";\n+  const isDocumentMode = false;",
        "comment_created_at": "2025-05-28T22:00:39+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Remove commented code instead of leaving it in place.**\n\nThe commented-out mode switching functionality should be removed entirely rather than left as comments, as it clutters the codebase and may cause confusion for future developers.\n\n\n\n```diff\n-  // const [mode, setMode] = useQueryState(\"mode\");\n-\n-  // const isDocumentMode = mode === \"document\";\n+  // Mode switching has been replaced with side panel toggle\n   const isDocumentMode = false;\n```\n\n```diff\n-          {/* {isDocumentMode ? (\n-            <ModeButton\n-              tooltip=\"Switch to chat mode\"\n-              icon={<MessageCircleIcon className=\"size-5\" />}\n-              label=\"Chat\"\n-              onClick={() => setMode(\"chat\")}\n-            />\n-          ) : (\n-            <ModeButton\n-              tooltip=\"Switch to document mode\"\n-              icon={<FileIcon className=\"size-5\" />}\n-              label=\"Doc\"\n-              onClick={() => setMode(\"document\")}\n-            />\n-          )} */}\n```\n\nAnd remove the entire commented ModeButton component (lines 265-284).\n\n\nAlso applies to: 190-204, 265-284\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/components/assistant-chat/chat.tsx, remove all commented-out code\nrelated to mode switching on lines 181-184 and 190-204, including the commented\nModeButton component on lines 265-284. This cleanup involves deleting the\ncommented useQueryState hook, the isDocumentMode variable assignment, and the\nentire ModeButton component to reduce clutter and improve code clarity.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2107787114",
    "pr_number": 456,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/Pending.tsx",
    "created_at": "2025-05-26T19:26:31+00:00",
    "commented_code": "threadId={p.message.threadId}\n                   messageId={p.message.id}\n                   userEmail={userEmail}\n+                  createdAt={p.createdAt}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2107787114",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 456,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/Pending.tsx",
        "discussion_id": "2107787114",
        "commented_code": "@@ -182,6 +182,7 @@ function PendingTable({\n                   threadId={p.message.threadId}\n                   messageId={p.message.id}\n                   userEmail={userEmail}\n+                  createdAt={p.createdAt}",
        "comment_created_at": "2025-05-26T19:26:31+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Verify EmailCell usage consistency across the codebase.**\n\nThe addition of the `createdAt` prop aligns with the EmailCell component simplification mentioned in the summary. However, ensure all EmailCell usages have been updated to include this now-required prop.\n\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Description: Verify all EmailCell usages include the createdAt prop\n# Expected: All EmailCell components should have createdAt prop\n\n# Search for EmailCell component usage\nrg -A 10 -B 2 \"EmailCell\" --type tsx --type ts\n```\n\nLength of output: 74\n\n---\n\nLet\u2019s adjust the search to use glob patterns instead of `--type`:\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Description: List all EmailCell usages in .tsx and .ts files\nrg -n \"EmailCell\" --glob \"*.tsx\" --glob \"*.ts\"\n```\n\nLength of output: 1007\n\n---\n\nLet\u2019s pinpoint which `<EmailCell>` tags lack the new `createdAt` prop:\n\n---\n\n\ud83c\udfc1 Script executed:\n\n```shell\n#!/bin/bash\n# Description: Find EmailCell usages missing createdAt prop\nrg -nP \"<EmailCell\\b(?![^>]*createdAt)[^>]*>\" --glob \"*.tsx\" --glob \"*.ts\"\n```\n\nLength of output: 187\n\n---\n\n\n\n</details>\n\n**Add missing `createdAt` prop to EmailCell in OnboardingBulkUnsubscriber**\n\nThe `<EmailCell />` in `OnboardingBulkUnsubscriber.tsx` is now required to receive a `createdAt` timestamp. Please update the usage below:\n\n\u2022 File: `apps/web/app/(app)/onboarding/OnboardingBulkUnsubscriber.tsx`  \n  Line: 161  \n  Current:  \n  ```tsx\n  <EmailCell emailAddress={row.name} />\n  ```  \n  Updated suggestion:  \n  ```diff\n  - <EmailCell emailAddress={row.name} />\n  + <EmailCell emailAddress={row.name} createdAt={row.createdAt} />\n  ```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/onboarding/OnboardingBulkUnsubscriber.tsx at line 161, the\nEmailCell component is missing the required createdAt prop. Update the EmailCell\nusage by adding the createdAt prop with the appropriate timestamp value from the\ndata source, ensuring it matches the expected type and format used elsewhere in\nthe codebase.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2090828103",
    "pr_number": 431,
    "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/page.tsx",
    "created_at": "2025-05-15T10:15:20+00:00",
    "commented_code": "+\"use client\";\n+\n+import { useState } from \"react\";\n+import {\n+  ResizableHandle,\n+  ResizablePanel,\n+  ResizablePanelGroup,\n+} from \"@/components/ui/resizable\";\n+import { Chat } from \"@/components/assistant-chat/chat\";\n+import { useAccount } from \"@/providers/EmailAccountProvider\";\n+import { SectionHeader } from \"@/components/Typography\";\n+import { Rules } from \"@/app/(app)/[emailAccountId]/automation/Rules\";\n+\n+export default function AssistantPage() {\n+  const { emailAccountId } = useAccount();\n+\n+  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n+\n+  return (\n+    <ResizablePanelGroup direction=\"horizontal\" className=\"h-full\">\n+      <ResizablePanel>\n+        <Chat\n+          id={emailAccountId} // TODO:\n+          initialMessages={[\n+            {\n+              id: \"1\",\n+              role: \"assistant\",\n+              content: \"\",\n+              parts: [\n+                {\n+                  type: \"text\",\n+                  text: \"Hey, I'm your AI email assistant!\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I organize your email and draft replies for you that are ready to send.\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I've got your initial rules set up, but we can add more to help you manage your inbox better.\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I'd love to learn more about you so I can better manage your needs.\",\n+                },\n+              ],\n+            },\n+          ]}\n+          selectedChatModel=\"gpt-4o-mini\"\n+          emailAccountId={emailAccountId}\n+        />\n+        {/* <Button\n+          variant=\"outline\"\n+          onClick={() => setIsArtifactOpen(true)}\n+          className=\"absolute bottom-4 right-4\"\n+        >\n+          View rules\n+        </Button> */}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2090828103",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 431,
        "pr_file": "apps/web/app/(app)/[emailAccountId]/assistant/page.tsx",
        "discussion_id": "2090828103",
        "commented_code": "@@ -0,0 +1,73 @@\n+\"use client\";\n+\n+import { useState } from \"react\";\n+import {\n+  ResizableHandle,\n+  ResizablePanel,\n+  ResizablePanelGroup,\n+} from \"@/components/ui/resizable\";\n+import { Chat } from \"@/components/assistant-chat/chat\";\n+import { useAccount } from \"@/providers/EmailAccountProvider\";\n+import { SectionHeader } from \"@/components/Typography\";\n+import { Rules } from \"@/app/(app)/[emailAccountId]/automation/Rules\";\n+\n+export default function AssistantPage() {\n+  const { emailAccountId } = useAccount();\n+\n+  const [isArtifactOpen, setIsArtifactOpen] = useState(false);\n+\n+  return (\n+    <ResizablePanelGroup direction=\"horizontal\" className=\"h-full\">\n+      <ResizablePanel>\n+        <Chat\n+          id={emailAccountId} // TODO:\n+          initialMessages={[\n+            {\n+              id: \"1\",\n+              role: \"assistant\",\n+              content: \"\",\n+              parts: [\n+                {\n+                  type: \"text\",\n+                  text: \"Hey, I'm your AI email assistant!\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I organize your email and draft replies for you that are ready to send.\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I've got your initial rules set up, but we can add more to help you manage your inbox better.\",\n+                },\n+                {\n+                  type: \"text\",\n+                  text: \"I'd love to learn more about you so I can better manage your needs.\",\n+                },\n+              ],\n+            },\n+          ]}\n+          selectedChatModel=\"gpt-4o-mini\"\n+          emailAccountId={emailAccountId}\n+        />\n+        {/* <Button\n+          variant=\"outline\"\n+          onClick={() => setIsArtifactOpen(true)}\n+          className=\"absolute bottom-4 right-4\"\n+        >\n+          View rules\n+        </Button> */}",
        "comment_created_at": "2025-05-15T10:15:20+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udca1 Verification agent_\n\n<details>\n<summary>\ud83e\udde9 Analysis chain</summary>\n\n**Address commented-out button code.**\n\nThere's a commented-out button for toggling the rules panel visibility. Since `isArtifactOpen` is initially false, there's currently no way for users to see the rules panel.\n\n---\n\n\ud83c\udf10 Web query:\n\n```web\nWhat are best practices for commented-out code in production?\n```\n\n\ud83d\udca1 Result:\n\n## Best Practices for Commented-Out Code in Production\n\n**General Consensus**\n\nAcross software engineering practices, leaving commented-out code in production is widely discouraged. While it might seem convenient for temporary changes or testing, it introduces several risks and downsides for code maintainability and team productivity[4][7].\n\n### Why Commented-Out Code is Problematic\n\n- **Clutter and Confusion**: Commented-out code adds noise, making the codebase harder to read and maintain. Other developers may not know why the code was commented, whether it\u2019s still needed, or if it could/should be safely removed[4][8].\n- **Stale or Dangerous Code**: As the surrounding code evolves, commented-out code can become outdated or incompatible, potentially misleading developers or causing bugs if reactivated[4].\n- **Version Control Obsolescence**: Modern version control systems (VCS) like Git make keeping old code unnecessary\u2014deleted code can always be recovered from history[1][8].\n\n### Recommended Best Practices\n\n- **Do Not Commit Commented-Out Code**: Remove unused or deprecated code before merging or deploying to production. Trust VCS for recovery if needed in the future[2][8].\n- **Use Source Control Branching**: If you may need a feature or code block later, keep it in a separate branch, not as comments in mainline code[1][8].\n- **Short-Term Exceptions Only**: If there is a compelling reason to temporarily comment out code (e.g., during refactoring, active debugging), clearly label it with an explanatory comment and a removal plan. Delete it before releasing to production[9].\n- **Use Compiler Directives or Feature Flags**: For debugging or feature toggles, use language features or configuration (e.g., `#ifdef DEBUG` blocks, feature flags), not comments[4][9].\n\n### Alternatives to Commented-Out Code\n\n| Practice                 | Benefit                                        |\n|--------------------------|------------------------------------------------|\n| Version control (Git)    | Retrieve any deleted code as needed            |\n| Feature branches         | Keep unfinished features out of production     |\n| Compiler directives      | Include/exclude code per build configuration   |\n| Logging frameworks       | Enable/disable debugging output cleanly        |\n\n### When is Commented-Out Code Acceptable?\n\n- **Temporary Local Changes**: When actively developing or debugging, commenting out code can be acceptable, but these comments should be removed before committing or deploying[8][9].\n- **Documentation or Usage Examples**: Occasionally, short snippets may be included as usage examples, but these should be clearly marked as documentation, not as disabled code[2].\n\n### Key Principles\n\n- **Code Should Be Clean and Self-Explanatory**: Comments should focus on explaining *why* code exists, not on preserving dead or unused code[5][6].\n- **Consistency and Clarity**: If a piece of commented code must remain briefly, accompany it with clear comments stating *why*, *when* it should be reviewed or removed, and (ideally) reference a tracking issue[3].\n\n> \"Instead of commenting out code, it's better to use a version control system, such as Git, to track your code changes.\"\n\n## Summary\n\n- Remove commented-out code before merging or deploying to production.\n- Use version control for retrieving or referencing old code.\n- For temporary changes, clearly document intent and schedule prompt removal.\n- Prefer feature branches, compiler directives, or configuration flags for conditional code paths.\n- Reserve comments for explaining intent, not preserving unused code.\n\nBy following these practices, you keep your codebase clean, maintainable, and professional[4][8].\n\nCitations:\n\n- 1: https://softwareengineering.stackexchange.com/questions/377186/why-is-it-wrong-to-comment-out-code-and-then-gradually-remove-it-to-keep-track-o\n- 2: https://kentcdodds.com/blog/please-dont-commit-commented-out-code\n- 3: https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/\n- 4: https://blog.submain.com/commented-out-code-junk-codebase/\n- 5: https://swimm.io/learn/code-collaboration/comments-in-code-best-practices-and-mistakes-to-avoid\n- 6: https://daily.dev/blog/10-code-commenting-best-practices-for-developers\n- 7: https://jinqiuyang.github.io/papers/cocode-paper-icpc20.pdf\n- 8: https://softwareengineering.stackexchange.com/questions/349514/should-i-comment-or-remove-any-un-used-code-from-my-solution\n- 9: https://softwareengineering.stackexchange.com/questions/45378/is-commented-out-code-really-always-bad\n- 10: https://dev.to/akdevcraft/how-to-review-code-2gam\n\n---\n\n\n\n</details>\n\n**Remove or Restore the Commented-Out Toggle Button**\n\nThe commented-out `<Button>` in `apps/web/app/(app)/[emailAccountId]/assistant/page.tsx` (lines 52\u201358) adds dead code and leaves the rules panel permanently inaccessible (since `isArtifactOpen` defaults to `false`). Before shipping:\n\n- Either delete these lines entirely to keep the codebase clean, or  \n- Re-enable the button and wire up its `onClick` to toggle `isArtifactOpen` if you intend to expose the rules panel in production.\n\nRemember to rely on your Git history for recovering removed code, and use feature flags or branches for incomplete features.\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/app/(app)/[emailAccountId]/assistant/page.tsx around lines 52 to 58,\nthe commented-out Button component creates dead code and prevents users from\ntoggling the rules panel since isArtifactOpen is false by default. To fix this,\neither completely remove these commented lines to clean up the codebase or\nuncomment the Button and update its onClick handler to properly toggle\nisArtifactOpen, enabling users to open the rules panel. Use version control to\nrecover removed code if needed and avoid leaving commented-out code in\nproduction.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n\u2705 Addressed in commits 50523a9 to 383b1d4",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1941515571",
    "pr_number": 321,
    "pr_file": "packages/resend/src/send.tsx",
    "created_at": "2025-02-04T16:31:59+00:00",
    "commented_code": "return result;\n };\n \n-// TODO: move this into summary email\n-export const sendStatsEmail = async ({\n-  to,\n-  test,\n-  emailProps,\n-}: {\n-  to: string;\n-  test?: boolean;\n-  emailProps: StatsUpdateEmailProps;\n-}) => {\n-  // sendEmail({\n-  //   to,\n-  //   subject: \"Your weekly email stats\",\n-  //   react: <StatsUpdateEmail {...emailProps} />,\n-  //   test,\n-  //   tags: [\n-  //     {\n-  //       name: \"category\",\n-  //       value: \"stats\",\n-  //     },\n-  //   ],\n-  // });\n-};\n+// export const sendStatsEmail = async ({\n+//   to,\n+//   test,\n+//   unsubscribeToken,\n+//   emailProps,\n+// }: {\n+//   to: string;\n+//   test?: boolean;\n+//   unsubscribeToken: string;\n+//   emailProps: StatsUpdateEmailProps;\n+// }) => {\n+//   // sendEmail({\n+//   //   to,\n+//   //   subject: \"Your weekly email stats\",\n+//   //   react: <StatsUpdateEmail {...emailProps} />,\n+//   //   test,\n+//   //   tags: [\n+//   //     {\n+//   //       name: \"category\",\n+//   //       value: \"stats\",\n+//   //     },\n+//   //   ],\n+//   // });\n+// };",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1941515571",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 321,
        "pr_file": "packages/resend/src/send.tsx",
        "discussion_id": "1941515571",
        "commented_code": "@@ -58,29 +53,30 @@ const sendEmail = async ({\n   return result;\n };\n \n-// TODO: move this into summary email\n-export const sendStatsEmail = async ({\n-  to,\n-  test,\n-  emailProps,\n-}: {\n-  to: string;\n-  test?: boolean;\n-  emailProps: StatsUpdateEmailProps;\n-}) => {\n-  // sendEmail({\n-  //   to,\n-  //   subject: \"Your weekly email stats\",\n-  //   react: <StatsUpdateEmail {...emailProps} />,\n-  //   test,\n-  //   tags: [\n-  //     {\n-  //       name: \"category\",\n-  //       value: \"stats\",\n-  //     },\n-  //   ],\n-  // });\n-};\n+// export const sendStatsEmail = async ({\n+//   to,\n+//   test,\n+//   unsubscribeToken,\n+//   emailProps,\n+// }: {\n+//   to: string;\n+//   test?: boolean;\n+//   unsubscribeToken: string;\n+//   emailProps: StatsUpdateEmailProps;\n+// }) => {\n+//   // sendEmail({\n+//   //   to,\n+//   //   subject: \"Your weekly email stats\",\n+//   //   react: <StatsUpdateEmail {...emailProps} />,\n+//   //   test,\n+//   //   tags: [\n+//   //     {\n+//   //       name: \"category\",\n+//   //       value: \"stats\",\n+//   //     },\n+//   //   ],\n+//   // });\n+// };",
        "comment_created_at": "2025-02-04T16:31:59+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Remove commented-out code.**\n\nSince the stats email functionality is being disabled, it's better to remove the commented-out code rather than leaving it in the codebase. This improves code maintainability.\n\n```diff\n-// export const sendStatsEmail = async ({\n-//   to,\n-//   test,\n-//   unsubscribeToken,\n-//   emailProps,\n-// }: {\n-//   to: string;\n-//   test?: boolean;\n-//   unsubscribeToken: string;\n-//   emailProps: StatsUpdateEmailProps;\n-// }) => {\n-//   // sendEmail({\n-//   //   to,\n-//   //   subject: \"Your weekly email stats\",\n-//   //   react: <StatsUpdateEmail {...emailProps} />,\n-//   //   test,\n-//   //   tags: [\n-//   //     {\n-//   //       name: \"category\",\n-//   //       value: \"stats\",\n-//   //     },\n-//   //   ],\n-//   // });\n-// };\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1932894447",
    "pr_number": 316,
    "pr_file": "apps/web/app/(app)/automation/page.tsx",
    "created_at": "2025-01-28T21:41:35+00:00",
    "commented_code": "<TabsContent value=\"pending\" className=\"content-container mb-10\">\n           <Pending />\n         </TabsContent>\n+        {/* no longer in use */}\n         <TabsContent value=\"groups\" className=\"content-container mb-10\">\n           <Groups />\n         </TabsContent>",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1932894447",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 316,
        "pr_file": "apps/web/app/(app)/automation/page.tsx",
        "discussion_id": "1932894447",
        "commented_code": "@@ -61,6 +61,7 @@ export default async function AutomationPage() {\n         <TabsContent value=\"pending\" className=\"content-container mb-10\">\n           <Pending />\n         </TabsContent>\n+        {/* no longer in use */}\n         <TabsContent value=\"groups\" className=\"content-container mb-10\">\n           <Groups />\n         </TabsContent>",
        "comment_created_at": "2025-01-28T21:41:35+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Remove unused Groups tab content.**\n\nThe Groups tab trigger is commented out in the UI, but the corresponding TabsContent and component are still present. This creates dead code that's loaded but inaccessible.\n\nApply this diff to clean up the unused code:\n\n```diff\n-        {/* no longer in use */}\n-        <TabsContent value=\"groups\" className=\"content-container mb-10\">\n-          <Groups />\n-        </TabsContent>\n```\n\nAlso remove the unused import:\n```diff\n-import { Groups } from \"@/app/(app)/automation/group/Groups\";\n```\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1890089065",
    "pr_number": 270,
    "pr_file": "apps/web/app/(app)/automation/ProcessingPromptFileDialog.tsx",
    "created_at": "2024-12-18T11:36:34+00:00",
    "commented_code": "+import Link from \"next/link\";\n+import Image from \"next/image\";\n+import { Loader2 } from \"lucide-react\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useQueryState } from \"nuqs\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogDescription,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  type CarouselApi,\n+  Carousel,\n+  CarouselContent,\n+  CarouselItem,\n+  CarouselNext,\n+  CarouselPrevious,\n+} from \"@/components/ui/carousel\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { TestRulesContent } from \"@/app/(app)/automation/TestRules\";\n+import { Loading } from \"@/components/Loading\";\n+\n+/*\n+When the modal first opens we'll tell them the AI is processing their prompt file.\n+And that they can learn about the AI assistant in the meantime.\n+When completed, we'll show them the test view and automatically start testing\n+the rules.\n+If they notice a mistake, they can mark an error.\n+*/\n+\n+export function ProcessingPromptFileDialog({\n+  open,\n+  onOpenChange,\n+  result,\n+  isLoading,\n+}: {\n+  open: boolean;\n+  onOpenChange: (open: boolean) => void;\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+  isLoading: boolean;\n+}) {\n+  const [modal, setModal] = useQueryState(\"modal\");\n+  const [currentStep, setCurrentStep] = useState(0);\n+\n+  // useEffect(() => {\n+  //   if (!isLoading && result && currentStep < 4) {\n+  //     setCurrentStep(4);\n+  //   }\n+  // }, [isLoading, result, currentStep]);",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1890089065",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 270,
        "pr_file": "apps/web/app/(app)/automation/ProcessingPromptFileDialog.tsx",
        "discussion_id": "1890089065",
        "commented_code": "@@ -0,0 +1,332 @@\n+import Link from \"next/link\";\n+import Image from \"next/image\";\n+import { Loader2 } from \"lucide-react\";\n+import { useEffect, useMemo, useState } from \"react\";\n+import { useQueryState } from \"nuqs\";\n+import {\n+  Dialog,\n+  DialogContent,\n+  DialogDescription,\n+  DialogHeader,\n+  DialogTitle,\n+} from \"@/components/ui/dialog\";\n+import {\n+  type CarouselApi,\n+  Carousel,\n+  CarouselContent,\n+  CarouselItem,\n+  CarouselNext,\n+  CarouselPrevious,\n+} from \"@/components/ui/carousel\";\n+import { Card, CardContent } from \"@/components/ui/card\";\n+import { Button } from \"@/components/ui/button\";\n+import { TestRulesContent } from \"@/app/(app)/automation/TestRules\";\n+import { Loading } from \"@/components/Loading\";\n+\n+/*\n+When the modal first opens we'll tell them the AI is processing their prompt file.\n+And that they can learn about the AI assistant in the meantime.\n+When completed, we'll show them the test view and automatically start testing\n+the rules.\n+If they notice a mistake, they can mark an error.\n+*/\n+\n+export function ProcessingPromptFileDialog({\n+  open,\n+  onOpenChange,\n+  result,\n+  isLoading,\n+}: {\n+  open: boolean;\n+  onOpenChange: (open: boolean) => void;\n+  result?: {\n+    createdRules: number;\n+    editedRules: number;\n+    removedRules: number;\n+  };\n+  isLoading: boolean;\n+}) {\n+  const [modal, setModal] = useQueryState(\"modal\");\n+  const [currentStep, setCurrentStep] = useState(0);\n+\n+  // useEffect(() => {\n+  //   if (!isLoading && result && currentStep < 4) {\n+  //     setCurrentStep(4);\n+  //   }\n+  // }, [isLoading, result, currentStep]);",
        "comment_created_at": "2024-12-18T11:36:34+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Remove commented out code**\n\nThe file contains several blocks of commented out code that should be removed to improve maintainability and readability. If this code is needed for reference, it should be preserved in version control history instead.\n\n\n\nAlso applies to: 89-105, 107-125\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]