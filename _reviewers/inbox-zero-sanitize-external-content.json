[
  {
    "discussion_id": "1949042601",
    "pr_number": 330,
    "pr_file": "apps/web/components/email-list/EmailContents.tsx",
    "created_at": "2025-02-10T13:20:38+00:00",
    "commented_code": "+import { type SyntheticEvent, useCallback, useMemo, useState } from \"react\";\n+import { Loading } from \"@/components/Loading\";\n+\n+export function HtmlEmail({ html }: { html: string }) {\n+  const srcDoc = useMemo(() => getIframeHtml(html), [html]);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  const onLoad = useCallback(\n+    (event: SyntheticEvent<HTMLIFrameElement, Event>) => {\n+      if (event.currentTarget.contentWindow) {\n+        // sometimes we see minimal scrollbar, so add a buffer\n+        const BUFFER = 5;\n+\n+        const height = `${\n+          event.currentTarget.contentWindow.document.documentElement\n+            .scrollHeight + BUFFER\n+        }px`;\n+\n+        event.currentTarget.style.height = height;\n+        setIsLoading(false);\n+      }\n+    },\n+    [],\n+  );\n+\n+  return (\n+    <div>\n+      {isLoading && <Loading />}\n+      <iframe\n+        srcDoc={srcDoc}\n+        onLoad={onLoad}\n+        className=\"h-0 min-h-0 w-full\"\n+        title=\"Email content preview\"\n+      />\n+    </div>\n+  );\n+}",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1949042601",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/components/email-list/EmailContents.tsx",
        "discussion_id": "1949042601",
        "commented_code": "@@ -0,0 +1,67 @@\n+import { type SyntheticEvent, useCallback, useMemo, useState } from \"react\";\n+import { Loading } from \"@/components/Loading\";\n+\n+export function HtmlEmail({ html }: { html: string }) {\n+  const srcDoc = useMemo(() => getIframeHtml(html), [html]);\n+  const [isLoading, setIsLoading] = useState(true);\n+\n+  const onLoad = useCallback(\n+    (event: SyntheticEvent<HTMLIFrameElement, Event>) => {\n+      if (event.currentTarget.contentWindow) {\n+        // sometimes we see minimal scrollbar, so add a buffer\n+        const BUFFER = 5;\n+\n+        const height = `${\n+          event.currentTarget.contentWindow.document.documentElement\n+            .scrollHeight + BUFFER\n+        }px`;\n+\n+        event.currentTarget.style.height = height;\n+        setIsLoading(false);\n+      }\n+    },\n+    [],\n+  );\n+\n+  return (\n+    <div>\n+      {isLoading && <Loading />}\n+      <iframe\n+        srcDoc={srcDoc}\n+        onLoad={onLoad}\n+        className=\"h-0 min-h-0 w-full\"\n+        title=\"Email content preview\"\n+      />\n+    </div>\n+  );\n+}",
        "comment_created_at": "2025-02-10T13:20:38+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Add error handling and sanitize HTML content.**\n\nThe `HtmlEmail` component should handle invalid HTML content and sanitize the HTML to prevent XSS attacks.\n\nConsider using a library like DOMPurify to sanitize HTML:\n\n```diff\n+import DOMPurify from \"dompurify\";\n+\n export function HtmlEmail({ html }: { html: string }) {\n-  const srcDoc = useMemo(() => getIframeHtml(html), [html]);\n+  const srcDoc = useMemo(() => {\n+    try {\n+      const sanitizedHtml = DOMPurify.sanitize(html);\n+      return getIframeHtml(sanitizedHtml);\n+    } catch (error) {\n+      console.error(\"Failed to process HTML:\", error);\n+      return \"<p>Failed to load email content</p>\";\n+    }\n+  }, [html]);\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nimport DOMPurify from \"dompurify\";\n\nexport function HtmlEmail({ html }: { html: string }) {\n  const srcDoc = useMemo(() => {\n    try {\n      const sanitizedHtml = DOMPurify.sanitize(html);\n      return getIframeHtml(sanitizedHtml);\n    } catch (error) {\n      console.error(\"Failed to process HTML:\", error);\n      return \"<p>Failed to load email content</p>\";\n    }\n  }, [html]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const onLoad = useCallback(\n    (event: SyntheticEvent<HTMLIFrameElement, Event>) => {\n      if (event.currentTarget.contentWindow) {\n        // sometimes we see minimal scrollbar, so add a buffer\n        const BUFFER = 5;\n\n        const height = `${\n          event.currentTarget.contentWindow.document.documentElement\n            .scrollHeight + BUFFER\n        }px`;\n\n        event.currentTarget.style.height = height;\n        setIsLoading(false);\n      }\n    },\n    [],\n  );\n\n  return (\n    <div>\n      {isLoading && <Loading />}\n      <iframe\n        srcDoc={srcDoc}\n        onLoad={onLoad}\n        className=\"h-0 min-h-0 w-full\"\n        title=\"Email content preview\"\n      />\n    </div>\n  );\n}\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949042604",
    "pr_number": 330,
    "pr_file": "apps/web/components/email-list/EmailAttachments.tsx",
    "created_at": "2025-02-10T13:20:38+00:00",
    "commented_code": "+import { Card } from \"@/components/Card\";\n+import { Button } from \"@/components/ui/button\";\n+import Link from \"next/link\";\n+import { DownloadIcon } from \"lucide-react\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+\n+export function EmailAttachments({ message }: { message: ThreadMessage }) {\n+  return (\n+    <div className=\"mt-4 grid grid-cols-2 gap-2 xl:grid-cols-3\">\n+      {message.attachments?.map((attachment) => {\n+        const url = `/api/google/messages/attachment?messageId=${message.id}&attachmentId=${attachment.attachmentId}&mimeType=${attachment.mimeType}&filename=${attachment.filename}`;",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1949042604",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/components/email-list/EmailAttachments.tsx",
        "discussion_id": "1949042604",
        "commented_code": "@@ -0,0 +1,62 @@\n+import { Card } from \"@/components/Card\";\n+import { Button } from \"@/components/ui/button\";\n+import Link from \"next/link\";\n+import { DownloadIcon } from \"lucide-react\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+\n+export function EmailAttachments({ message }: { message: ThreadMessage }) {\n+  return (\n+    <div className=\"mt-4 grid grid-cols-2 gap-2 xl:grid-cols-3\">\n+      {message.attachments?.map((attachment) => {\n+        const url = `/api/google/messages/attachment?messageId=${message.id}&attachmentId=${attachment.attachmentId}&mimeType=${attachment.mimeType}&filename=${attachment.filename}`;",
        "comment_created_at": "2025-02-10T13:20:38+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Encode URL parameters to prevent injection.**\n\nThe URL construction should properly encode parameters to prevent injection attacks.\n\nApply this diff:\n\n```diff\n-        const url = `/api/google/messages/attachment?messageId=${message.id}&attachmentId=${attachment.attachmentId}&mimeType=${attachment.mimeType}&filename=${attachment.filename}`;\n+        const url = `/api/google/messages/attachment?${new URLSearchParams({\n+          messageId: message.id,\n+          attachmentId: attachment.attachmentId,\n+          mimeType: attachment.mimeType,\n+          filename: attachment.filename,\n+        })}`;\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\n      {message.attachments?.map((attachment) => {\n-        const url = `/api/google/messages/attachment?messageId=${message.id}&attachmentId=${attachment.attachmentId}&mimeType=${attachment.mimeType}&filename=${attachment.filename}`;\n+        const url = `/api/google/messages/attachment?${new URLSearchParams({\n+          messageId: message.id,\n+          attachmentId: attachment.attachmentId,\n+          mimeType: attachment.mimeType,\n+          filename: attachment.filename,\n+        })}`;\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1949333808",
    "pr_number": 330,
    "pr_file": "apps/web/components/email-list/EmailMessage.tsx",
    "created_at": "2025-02-10T15:27:56+00:00",
    "commented_code": "+import { useCallback, useMemo, useState, useRef, useEffect } from \"react\";\n+import {\n+  ForwardIcon,\n+  ReplyIcon,\n+  ChevronsUpDownIcon,\n+  ChevronsDownUpIcon,\n+} from \"lucide-react\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { extractNameFromEmail } from \"@/utils/email\";\n+import { formatShortDate } from \"@/utils/date\";\n+import { ComposeEmailFormLazy } from \"@/app/(app)/compose/ComposeEmailFormLazy\";\n+import { Button } from \"@/components/ui/button\";\n+import { Separator } from \"@/components/ui/separator\";\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { forwardEmailHtml, forwardEmailSubject } from \"@/utils/gmail/forward\";\n+import { extractEmailReply } from \"@/utils/parse/extract-reply.client\";\n+import type { ReplyingToEmail } from \"@/app/(app)/compose/ComposeEmailForm\";\n+import { createReplyContent } from \"@/utils/gmail/reply\";\n+import { cn } from \"@/utils\";\n+import { generateReplyAction } from \"@/utils/actions/generate-reply\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+import { EmailDetails } from \"@/components/email-list/EmailDetails\";\n+import { HtmlEmail, PlainEmail } from \"@/components/email-list/EmailContents\";\n+import { EmailAttachments } from \"@/components/email-list/EmailAttachments\";\n+import { isActionError } from \"@/utils/error\";\n+import { Loading } from \"@/components/Loading\";\n+import { MessageText } from \"@/components/Typography\";\n+\n+export function EmailMessage({\n+  message,\n+  refetch,\n+  showReplyButton,\n+  defaultShowReply,\n+  draftMessage,\n+  expanded,\n+  onExpand,\n+  onSendSuccess,\n+  generateNudge,\n+}: {\n+  message: ThreadMessage;\n+  draftMessage?: ThreadMessage;\n+  refetch: () => void;\n+  showReplyButton: boolean;\n+  defaultShowReply?: boolean;\n+  expanded: boolean;\n+  onExpand: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  generateNudge?: boolean;\n+}) {\n+  const [showReply, setShowReply] = useState(defaultShowReply || false);\n+  const [showDetails, setShowDetails] = useState(false);\n+\n+  const onReply = useCallback(() => setShowReply(true), []);\n+  const [showForward, setShowForward] = useState(false);\n+  const onForward = useCallback(() => setShowForward(true), []);\n+\n+  const onCloseCompose = useCallback(() => {\n+    setShowReply(false);\n+    setShowForward(false);\n+  }, []);\n+\n+  const toggleDetails = useCallback((e: React.MouseEvent) => {\n+    e.stopPropagation();\n+    setShowDetails((prev) => !prev);\n+  }, []);\n+\n+  return (\n+    // biome-ignore lint/a11y/useKeyWithClickEvents: <explanation>\n+    <li\n+      className={cn(\n+        \"bg-white p-4 shadow sm:rounded-lg\",\n+        !expanded && \"cursor-pointer\",\n+      )}\n+      onClick={onExpand}\n+    >\n+      <TopBar\n+        message={message}\n+        expanded={expanded}\n+        showDetails={showDetails}\n+        toggleDetails={toggleDetails}\n+        showReplyButton={showReplyButton}\n+        onReply={onReply}\n+        onForward={onForward}\n+      />\n+\n+      {expanded && (\n+        <>\n+          {showDetails && <EmailDetails message={message} />}\n+\n+          {message.textHtml ? (\n+            <HtmlEmail html={message.textHtml} />\n+          ) : (\n+            <PlainEmail text={message.textPlain || \"\"} />\n+          )}\n+\n+          {message.attachments && <EmailAttachments message={message} />}\n+\n+          {(showReply || showForward) && (\n+            <ReplyPanel\n+              message={message}\n+              refetch={refetch}\n+              onSendSuccess={onSendSuccess}\n+              onCloseCompose={onCloseCompose}\n+              defaultShowReply={defaultShowReply}\n+              showReply={showReply}\n+              draftMessage={draftMessage}\n+              generateNudge={generateNudge}\n+            />\n+          )}\n+        </>\n+      )}\n+    </li>\n+  );\n+}\n+\n+function TopBar({\n+  message,\n+  expanded,\n+  showDetails,\n+  toggleDetails,\n+  showReplyButton,\n+  onReply,\n+  onForward,\n+}: {\n+  message: ParsedMessage;\n+  expanded: boolean;\n+  showDetails: boolean;\n+  toggleDetails: (e: React.MouseEvent) => void;\n+  showReplyButton: boolean;\n+  onReply: () => void;\n+  onForward: () => void;\n+}) {\n+  return (\n+    <div className=\"sm:flex sm:items-center sm:justify-between\">\n+      <div className=\"flex items-center gap-2\">\n+        <div className=\"flex items-center\">\n+          <h3 className=\"text-base font-medium\">\n+            <span className=\"text-gray-900\">\n+              {extractNameFromEmail(message.headers.from)}\n+            </span>{\" \"}\n+            <span className=\"text-gray-600\">wrote</span>\n+          </h3>\n+        </div>\n+        {expanded && (\n+          <Button\n+            variant=\"ghost\"\n+            size=\"sm\"\n+            className=\"size-6 p-0\"\n+            onClick={toggleDetails}\n+          >\n+            {showDetails ? (\n+              <ChevronsDownUpIcon className=\"size-4\" />\n+            ) : (\n+              <ChevronsUpDownIcon className=\"size-4\" />\n+            )}\n+          </Button>\n+        )}\n+      </div>\n+      <div className=\"flex items-center space-x-2\">\n+        <p className=\"mt-1 whitespace-nowrap text-sm text-gray-600 sm:ml-3 sm:mt-0\">\n+          <time dateTime={message.headers.date}>\n+            {formatShortDate(new Date(message.headers.date))}\n+          </time>\n+        </p>\n+        {showReplyButton && (\n+          <div className=\"relative flex items-center\">\n+            <Tooltip content=\"Reply\">\n+              <Button variant=\"ghost\" size=\"icon\" onClick={onReply}>\n+                <ReplyIcon className=\"h-4 w-4\" />\n+                <span className=\"sr-only\">Reply</span>\n+              </Button>\n+            </Tooltip>\n+            <Tooltip content=\"Forward\">\n+              <Button variant=\"ghost\" size=\"icon\">\n+                <ForwardIcon className=\"h-4 w-4\" onClick={onForward} />\n+                <span className=\"sr-only\">Forward</span>\n+              </Button>\n+            </Tooltip>\n+          </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function ReplyPanel({\n+  message,\n+  refetch,\n+  onSendSuccess,\n+  onCloseCompose,\n+  defaultShowReply,\n+  showReply,\n+  draftMessage,\n+  generateNudge,\n+}: {\n+  message: ParsedMessage;\n+  refetch: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  onCloseCompose: () => void;\n+  defaultShowReply?: boolean;\n+  showReply: boolean;\n+  draftMessage?: ThreadMessage;\n+  generateNudge?: boolean;\n+}) {\n+  const replyRef = useRef<HTMLDivElement>(null);\n+\n+  const [isGeneratingNudge, setIsGeneratingNudge] = useState(false);\n+  const [nudge, setNudge] = useState<string | null>(null);\n+  // scroll to the reply panel when it first opens\n+  useEffect(() => {\n+    if (defaultShowReply && replyRef.current) {\n+      // hacky using setTimeout\n+      setTimeout(() => {\n+        replyRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n+      }, 500);\n+    }\n+  }, [defaultShowReply]);\n+\n+  useEffect(() => {\n+    async function loadNudge() {\n+      setIsGeneratingNudge(true);\n+\n+      const isSent = message.labelIds?.includes(\"SENT\");\n+\n+      const result = await generateReplyAction({\n+        type: isSent ? \"nudge\" : \"reply\",\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+      if (isActionError(result)) {\n+        console.error(result);\n+        setNudge(\"\");\n+      } else {\n+        setNudge(result.text);\n+      }\n+      setIsGeneratingNudge(false);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);\n+\n+  const replyingToEmail: ReplyingToEmail = useMemo(() => {\n+    if (showReply) {\n+      if (draftMessage) return prepareDraftReplyEmail(draftMessage);\n+\n+      // use nudge if available\n+      if (nudge) {\n+        // Convert nudge text into HTML paragraphs\n+        const nudgeHtml = nudge\n+          ? nudge\n+              .split(\"\n\")\n+              .filter((line) => line.trim())\n+              .map((line) => `<p>${line}</p>`)\n+              .join(\"\")\n+          : \"\";",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1949333808",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 330,
        "pr_file": "apps/web/components/email-list/EmailMessage.tsx",
        "discussion_id": "1949333808",
        "commented_code": "@@ -0,0 +1,362 @@\n+import { useCallback, useMemo, useState, useRef, useEffect } from \"react\";\n+import {\n+  ForwardIcon,\n+  ReplyIcon,\n+  ChevronsUpDownIcon,\n+  ChevronsDownUpIcon,\n+} from \"lucide-react\";\n+import { Tooltip } from \"@/components/Tooltip\";\n+import { extractNameFromEmail } from \"@/utils/email\";\n+import { formatShortDate } from \"@/utils/date\";\n+import { ComposeEmailFormLazy } from \"@/app/(app)/compose/ComposeEmailFormLazy\";\n+import { Button } from \"@/components/ui/button\";\n+import { Separator } from \"@/components/ui/separator\";\n+import type { ParsedMessage } from \"@/utils/types\";\n+import { forwardEmailHtml, forwardEmailSubject } from \"@/utils/gmail/forward\";\n+import { extractEmailReply } from \"@/utils/parse/extract-reply.client\";\n+import type { ReplyingToEmail } from \"@/app/(app)/compose/ComposeEmailForm\";\n+import { createReplyContent } from \"@/utils/gmail/reply\";\n+import { cn } from \"@/utils\";\n+import { generateReplyAction } from \"@/utils/actions/generate-reply\";\n+import type { ThreadMessage } from \"@/components/email-list/types\";\n+import { EmailDetails } from \"@/components/email-list/EmailDetails\";\n+import { HtmlEmail, PlainEmail } from \"@/components/email-list/EmailContents\";\n+import { EmailAttachments } from \"@/components/email-list/EmailAttachments\";\n+import { isActionError } from \"@/utils/error\";\n+import { Loading } from \"@/components/Loading\";\n+import { MessageText } from \"@/components/Typography\";\n+\n+export function EmailMessage({\n+  message,\n+  refetch,\n+  showReplyButton,\n+  defaultShowReply,\n+  draftMessage,\n+  expanded,\n+  onExpand,\n+  onSendSuccess,\n+  generateNudge,\n+}: {\n+  message: ThreadMessage;\n+  draftMessage?: ThreadMessage;\n+  refetch: () => void;\n+  showReplyButton: boolean;\n+  defaultShowReply?: boolean;\n+  expanded: boolean;\n+  onExpand: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  generateNudge?: boolean;\n+}) {\n+  const [showReply, setShowReply] = useState(defaultShowReply || false);\n+  const [showDetails, setShowDetails] = useState(false);\n+\n+  const onReply = useCallback(() => setShowReply(true), []);\n+  const [showForward, setShowForward] = useState(false);\n+  const onForward = useCallback(() => setShowForward(true), []);\n+\n+  const onCloseCompose = useCallback(() => {\n+    setShowReply(false);\n+    setShowForward(false);\n+  }, []);\n+\n+  const toggleDetails = useCallback((e: React.MouseEvent) => {\n+    e.stopPropagation();\n+    setShowDetails((prev) => !prev);\n+  }, []);\n+\n+  return (\n+    // biome-ignore lint/a11y/useKeyWithClickEvents: <explanation>\n+    <li\n+      className={cn(\n+        \"bg-white p-4 shadow sm:rounded-lg\",\n+        !expanded && \"cursor-pointer\",\n+      )}\n+      onClick={onExpand}\n+    >\n+      <TopBar\n+        message={message}\n+        expanded={expanded}\n+        showDetails={showDetails}\n+        toggleDetails={toggleDetails}\n+        showReplyButton={showReplyButton}\n+        onReply={onReply}\n+        onForward={onForward}\n+      />\n+\n+      {expanded && (\n+        <>\n+          {showDetails && <EmailDetails message={message} />}\n+\n+          {message.textHtml ? (\n+            <HtmlEmail html={message.textHtml} />\n+          ) : (\n+            <PlainEmail text={message.textPlain || \"\"} />\n+          )}\n+\n+          {message.attachments && <EmailAttachments message={message} />}\n+\n+          {(showReply || showForward) && (\n+            <ReplyPanel\n+              message={message}\n+              refetch={refetch}\n+              onSendSuccess={onSendSuccess}\n+              onCloseCompose={onCloseCompose}\n+              defaultShowReply={defaultShowReply}\n+              showReply={showReply}\n+              draftMessage={draftMessage}\n+              generateNudge={generateNudge}\n+            />\n+          )}\n+        </>\n+      )}\n+    </li>\n+  );\n+}\n+\n+function TopBar({\n+  message,\n+  expanded,\n+  showDetails,\n+  toggleDetails,\n+  showReplyButton,\n+  onReply,\n+  onForward,\n+}: {\n+  message: ParsedMessage;\n+  expanded: boolean;\n+  showDetails: boolean;\n+  toggleDetails: (e: React.MouseEvent) => void;\n+  showReplyButton: boolean;\n+  onReply: () => void;\n+  onForward: () => void;\n+}) {\n+  return (\n+    <div className=\"sm:flex sm:items-center sm:justify-between\">\n+      <div className=\"flex items-center gap-2\">\n+        <div className=\"flex items-center\">\n+          <h3 className=\"text-base font-medium\">\n+            <span className=\"text-gray-900\">\n+              {extractNameFromEmail(message.headers.from)}\n+            </span>{\" \"}\n+            <span className=\"text-gray-600\">wrote</span>\n+          </h3>\n+        </div>\n+        {expanded && (\n+          <Button\n+            variant=\"ghost\"\n+            size=\"sm\"\n+            className=\"size-6 p-0\"\n+            onClick={toggleDetails}\n+          >\n+            {showDetails ? (\n+              <ChevronsDownUpIcon className=\"size-4\" />\n+            ) : (\n+              <ChevronsUpDownIcon className=\"size-4\" />\n+            )}\n+          </Button>\n+        )}\n+      </div>\n+      <div className=\"flex items-center space-x-2\">\n+        <p className=\"mt-1 whitespace-nowrap text-sm text-gray-600 sm:ml-3 sm:mt-0\">\n+          <time dateTime={message.headers.date}>\n+            {formatShortDate(new Date(message.headers.date))}\n+          </time>\n+        </p>\n+        {showReplyButton && (\n+          <div className=\"relative flex items-center\">\n+            <Tooltip content=\"Reply\">\n+              <Button variant=\"ghost\" size=\"icon\" onClick={onReply}>\n+                <ReplyIcon className=\"h-4 w-4\" />\n+                <span className=\"sr-only\">Reply</span>\n+              </Button>\n+            </Tooltip>\n+            <Tooltip content=\"Forward\">\n+              <Button variant=\"ghost\" size=\"icon\">\n+                <ForwardIcon className=\"h-4 w-4\" onClick={onForward} />\n+                <span className=\"sr-only\">Forward</span>\n+              </Button>\n+            </Tooltip>\n+          </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+}\n+\n+function ReplyPanel({\n+  message,\n+  refetch,\n+  onSendSuccess,\n+  onCloseCompose,\n+  defaultShowReply,\n+  showReply,\n+  draftMessage,\n+  generateNudge,\n+}: {\n+  message: ParsedMessage;\n+  refetch: () => void;\n+  onSendSuccess: (messageId: string) => void;\n+  onCloseCompose: () => void;\n+  defaultShowReply?: boolean;\n+  showReply: boolean;\n+  draftMessage?: ThreadMessage;\n+  generateNudge?: boolean;\n+}) {\n+  const replyRef = useRef<HTMLDivElement>(null);\n+\n+  const [isGeneratingNudge, setIsGeneratingNudge] = useState(false);\n+  const [nudge, setNudge] = useState<string | null>(null);\n+  // scroll to the reply panel when it first opens\n+  useEffect(() => {\n+    if (defaultShowReply && replyRef.current) {\n+      // hacky using setTimeout\n+      setTimeout(() => {\n+        replyRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n+      }, 500);\n+    }\n+  }, [defaultShowReply]);\n+\n+  useEffect(() => {\n+    async function loadNudge() {\n+      setIsGeneratingNudge(true);\n+\n+      const isSent = message.labelIds?.includes(\"SENT\");\n+\n+      const result = await generateReplyAction({\n+        type: isSent ? \"nudge\" : \"reply\",\n+        messages: [\n+          {\n+            id: message.id,\n+            textHtml: message.textHtml,\n+            textPlain: message.textPlain,\n+            date: message.headers.date,\n+            from: message.headers.from,\n+            to: message.headers.to,\n+            subject: message.headers.subject,\n+          },\n+        ],\n+      });\n+      if (isActionError(result)) {\n+        console.error(result);\n+        setNudge(\"\");\n+      } else {\n+        setNudge(result.text);\n+      }\n+      setIsGeneratingNudge(false);\n+    }\n+\n+    if (generateNudge) loadNudge();\n+  }, [generateNudge, message]);\n+\n+  const replyingToEmail: ReplyingToEmail = useMemo(() => {\n+    if (showReply) {\n+      if (draftMessage) return prepareDraftReplyEmail(draftMessage);\n+\n+      // use nudge if available\n+      if (nudge) {\n+        // Convert nudge text into HTML paragraphs\n+        const nudgeHtml = nudge\n+          ? nudge\n+              .split(\"\\n\")\n+              .filter((line) => line.trim())\n+              .map((line) => `<p>${line}</p>`)\n+              .join(\"\")\n+          : \"\";",
        "comment_created_at": "2025-02-10T15:27:56+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:warning: Potential issue_\n\n**Sanitize HTML content before rendering.**\n\nDirect conversion of text to HTML without sanitization could lead to XSS vulnerabilities if the nudge text contains malicious content.\n\nConsider using DOMPurify or a similar library:\n\n```diff\n+import DOMPurify from 'dompurify';\n+\n const nudgeHtml = nudge\n   ? nudge\n       .split(\"\\n\")\n       .filter((line) => line.trim())\n-      .map((line) => `<p>${line}</p>`)\n+      .map((line) => `<p>${DOMPurify.sanitize(line)}</p>`)\n       .join(\"\")\n   : \"\";\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nimport DOMPurify from 'dompurify';\n\n        const nudgeHtml = nudge\n          ? nudge\n              .split(\"\\n\")\n              .filter((line) => line.trim())\n              .map((line) => `<p>${DOMPurify.sanitize(line)}</p>`)\n              .join(\"\")\n          : \"\";\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]