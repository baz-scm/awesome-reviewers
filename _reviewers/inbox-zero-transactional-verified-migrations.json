[
  {
    "discussion_id": "1893014414",
    "pr_number": 270,
    "pr_file": "apps/web/prisma/migrations/20241219190656_deprecate_rule_type/migration.sql",
    "created_at": "2024-12-19T19:12:02+00:00",
    "commented_code": "+-- Making sure that all rules are cleaned up before we deprecate the type column\n+\n+-- Clean up AI rules\n+UPDATE \"Rule\"\n+SET \"groupId\" = NULL,\n+    \"from\" = NULL,\n+    \"to\" = NULL,\n+    \"subject\" = NULL,\n+    \"body\" = NULL\n+WHERE \"type\" = 'AI';\n+\n+-- Clean up GROUP rules\n+UPDATE \"Rule\"\n+SET \"instructions\" = NULL,\n+    \"from\" = NULL,\n+    \"to\" = NULL,\n+    \"subject\" = NULL,\n+    \"body\" = NULL,\n+    \"categoryFilterType\" = NULL\n+WHERE \"type\" = 'GROUP';\n+\n+-- Clean up STATIC rules\n+UPDATE \"Rule\"\n+SET \"instructions\" = NULL,\n+    \"groupId\" = NULL,\n+    \"categoryFilterType\" = NULL\n+WHERE \"type\" = 'STATIC';",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "1893014414",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 270,
        "pr_file": "apps/web/prisma/migrations/20241219190656_deprecate_rule_type/migration.sql",
        "discussion_id": "1893014414",
        "commented_code": "@@ -0,0 +1,27 @@\n+-- Making sure that all rules are cleaned up before we deprecate the type column\n+\n+-- Clean up AI rules\n+UPDATE \"Rule\"\n+SET \"groupId\" = NULL,\n+    \"from\" = NULL,\n+    \"to\" = NULL,\n+    \"subject\" = NULL,\n+    \"body\" = NULL\n+WHERE \"type\" = 'AI';\n+\n+-- Clean up GROUP rules\n+UPDATE \"Rule\"\n+SET \"instructions\" = NULL,\n+    \"from\" = NULL,\n+    \"to\" = NULL,\n+    \"subject\" = NULL,\n+    \"body\" = NULL,\n+    \"categoryFilterType\" = NULL\n+WHERE \"type\" = 'GROUP';\n+\n+-- Clean up STATIC rules\n+UPDATE \"Rule\"\n+SET \"instructions\" = NULL,\n+    \"groupId\" = NULL,\n+    \"categoryFilterType\" = NULL\n+WHERE \"type\" = 'STATIC';",
        "comment_created_at": "2024-12-19T19:12:02+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_:hammer_and_wrench: Refactor suggestion_\n\n**Consider wrapping updates in a transaction with verification steps.**\n\nWhile the migration logic for cleaning up rule types is clear and well-structured, consider enhancing the robustness of this migration:\n\n1. Wrap the updates in a transaction to ensure atomic execution\n2. Add verification steps to confirm the cleanup was successful\n3. Include error handling for potential constraint violations\n\nConsider updating the migration to include these safety measures:\n\n```diff\n+ BEGIN;\n\n+ -- Verify all rules have valid types before updates\n+ DO $$ \n+ BEGIN\n+   IF EXISTS (\n+     SELECT 1 FROM \"Rule\" \n+     WHERE \"type\" NOT IN ('AI', 'GROUP', 'STATIC')\n+   ) THEN\n+     RAISE EXCEPTION 'Invalid rule types found';\n+   END IF;\n+ END $$;\n\n  -- Clean up AI rules\n  UPDATE \"Rule\"\n  SET \"groupId\" = NULL,\n      \"from\" = NULL,\n      \"to\" = NULL,\n      \"subject\" = NULL,\n      \"body\" = NULL\n  WHERE \"type\" = 'AI';\n\n  -- Clean up GROUP rules\n  UPDATE \"Rule\"\n  SET \"instructions\" = NULL,\n      \"from\" = NULL,\n      \"to\" = NULL,\n      \"subject\" = NULL,\n      \"body\" = NULL,\n      \"categoryFilterType\" = NULL\n  WHERE \"type\" = 'GROUP';\n\n  -- Clean up STATIC rules\n  UPDATE \"Rule\"\n  SET \"instructions\" = NULL,\n      \"groupId\" = NULL,\n      \"categoryFilterType\" = NULL\n  WHERE \"type\" = 'STATIC';\n\n+ -- Verify cleanup was successful\n+ DO $$\n+ BEGIN\n+   IF EXISTS (\n+     SELECT 1 FROM \"Rule\" \n+     WHERE (\n+       \"type\" = 'AI' AND \n+       (\"groupId\" IS NOT NULL OR \"from\" IS NOT NULL OR \"to\" IS NOT NULL OR \n+        \"subject\" IS NOT NULL OR \"body\" IS NOT NULL)\n+     ) OR (\n+       \"type\" = 'GROUP' AND \n+       (\"instructions\" IS NOT NULL OR \"from\" IS NOT NULL OR \"to\" IS NOT NULL OR \n+        \"subject\" IS NOT NULL OR \"body\" IS NOT NULL OR \"categoryFilterType\" IS NOT NULL)\n+     ) OR (\n+       \"type\" = 'STATIC' AND \n+       (\"instructions\" IS NOT NULL OR \"groupId\" IS NOT NULL OR \n+        \"categoryFilterType\" IS NOT NULL)\n+     )\n+   ) THEN\n+     RAISE EXCEPTION 'Cleanup verification failed';\n+   END IF;\n+ END $$;\n\n+ COMMIT;\n```\n\n\n<!-- suggestion_start -->\n\n<details>\n<summary>\ud83d\udcdd Committable suggestion</summary>\n\n> \u203c\ufe0f **IMPORTANT**\n> Carefully review the code before committing. Ensure that it accurately replaces the highlighted code, contains no missing lines, and has no issues with indentation. Thoroughly test & benchmark the code to ensure it meets the requirements.\n\n`````suggestion\nBEGIN;\n\n-- Verify all rules have valid types before updates\nDO $$ \nBEGIN\n  IF EXISTS (\n    SELECT 1 FROM \"Rule\" \n    WHERE \"type\" NOT IN ('AI', 'GROUP', 'STATIC')\n  ) THEN\n    RAISE EXCEPTION 'Invalid rule types found';\n  END IF;\nEND $$;\n\n-- Clean up AI rules\nUPDATE \"Rule\"\nSET \"groupId\" = NULL,\n    \"from\" = NULL,\n    \"to\" = NULL,\n    \"subject\" = NULL,\n    \"body\" = NULL\nWHERE \"type\" = 'AI';\n\n-- Clean up GROUP rules\nUPDATE \"Rule\"\nSET \"instructions\" = NULL,\n    \"from\" = NULL,\n    \"to\" = NULL,\n    \"subject\" = NULL,\n    \"body\" = NULL,\n    \"categoryFilterType\" = NULL\nWHERE \"type\" = 'GROUP';\n\n-- Clean up STATIC rules\nUPDATE \"Rule\"\nSET \"instructions\" = NULL,\n    \"groupId\" = NULL,\n    \"categoryFilterType\" = NULL\nWHERE \"type\" = 'STATIC';\n\n-- Verify cleanup was successful\nDO $$\nBEGIN\n  IF EXISTS (\n    SELECT 1 FROM \"Rule\" \n    WHERE (\n      \"type\" = 'AI' AND \n      (\"groupId\" IS NOT NULL OR \"from\" IS NOT NULL OR \"to\" IS NOT NULL OR \n       \"subject\" IS NOT NULL OR \"body\" IS NOT NULL)\n    ) OR (\n      \"type\" = 'GROUP' AND \n      (\"instructions\" IS NOT NULL OR \"from\" IS NOT NULL OR \"to\" IS NOT NULL OR \n       \"subject\" IS NOT NULL OR \"body\" IS NOT NULL OR \"categoryFilterType\" IS NOT NULL)\n    ) OR (\n      \"type\" = 'STATIC' AND \n      (\"instructions\" IS NOT NULL OR \"groupId\" IS NOT NULL OR \n       \"categoryFilterType\" IS NOT NULL)\n    )\n  ) THEN\n    RAISE EXCEPTION 'Cleanup verification failed';\n  END IF;\nEND $$;\n\nCOMMIT;\n`````\n\n</details>\n\n<!-- suggestion_end -->\n\n---\n\n_:bulb: Codebase verification_\n\nBased on the search results, I can now provide a final response:\n\n**Migration requires code updates to handle nullified fields**\n\nThe migration's impact on existing functionality needs to be addressed as the codebase actively uses these fields:\n\n- `condition.ts` contains type guards and utility functions that check for these fields\n- Several components and utilities rely on these fields for displaying and processing rules:\n  - `PlanBadge.tsx` uses `rule.instructions`\n  - `TestRules.tsx` displays rule instructions\n  - `ReportMistake.tsx` uses instructions in form defaults\n  - `example/controller.ts` uses `from`, `to`, and `subject` fields for queries\n\nThe schema shows these fields are optional (`String?`), but the codebase should be updated to:\n1. Update type guards in `condition.ts` to handle null values\n2. Add null checks in components displaying these fields\n3. Modify rule processing logic to handle missing field values\n\n\n\n<details>\n<summary>\ud83d\udd17 Analysis chain</summary>\n\n**Verify impact on existing functionality.**\n\nSince this migration nullifies several fields based on rule types, we should verify that this doesn't break any existing functionality that might depend on these fields.\n\n---\n\nLet me try a different search strategy to find the relevant code.\n\n---\n\nLet me try one more search strategy without specifying file extensions explicitly.\n\n</details>\n\n<details>\n<summary>\ud83c\udfc1 Scripts executed</summary>\n\nThe following scripts were executed for the analysis:\n\nScript:\n\n```shell\n#!/bin/bash\n# Search for any code that might be accessing these fields\n# to ensure we're not breaking existing functionality\n\n# Look for references to these fields in the codebase\necho \"Searching for field references in components and utilities...\"\nrg -t typescript -t javascript \\\n  -e \"rule\\.(groupId|from|to|subject|body|instructions|categoryFilterType)\" \\\n  -e \"rule\\['(groupId|from|to|subject|body|instructions|categoryFilterType)'\\]\"\n\n# Look for type definitions that might need updating\necho \"Searching for Rule type definitions...\"\nast-grep --pattern 'interface Rule {\n  $$$\n}'\n\n```\n\nLength of output: 493\n\n---\n\nScript:\n\n```shell\n#!/bin/bash\n# Search for files containing \"Rule\" type definitions and usages\necho \"Searching for Rule type and related code...\"\nrg -l \"Rule\" --type ts --type tsx --type js --type jsx\n\n# Then let's examine the content of these files\necho -e \"\\nSearching for field references...\"\nrg \"rule\\.(groupId|from|to|subject|body|instructions|categoryFilterType)\" \\\n   --type ts --type tsx --type js --type jsx -A 2 -B 2\n\necho -e \"\\nSearching for Rule interface or type definitions...\"\nrg \"(?:interface|type)\\s+Rule\\s*(?:[{=]|extends)\" \\\n   --type ts --type tsx --type js --type jsx -A 10 -B 2\n\n```\n\nLength of output: 670\n\n---\n\nScript:\n\n```shell\n#!/bin/bash\n# Search for Rule-related files and their contents\necho \"Searching for files containing Rule references...\"\nfd -t f . | rg -l \"Rule\"\n\necho -e \"\\nSearching for field references in the codebase...\"\nrg \"rule\\.(groupId|from|to|subject|body|instructions|categoryFilterType)\" -A 2 -B 2\n\necho -e \"\\nSearching for Rule type definitions...\"\nrg \"type.*Rule.*=|interface.*Rule.*{\" -A 10 -B 2\n\necho -e \"\\nLooking at the schema file to understand the Rule model...\"\nfd -t f \"schema.prisma\" --exec cat {}\n\n```\n\nLength of output: 20885\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051706595",
    "pr_number": 410,
    "pr_file": "apps/web/prisma/migrations/20250420112535_email_account_settings/migration.sql",
    "created_at": "2025-04-20T11:56:57+00:00",
    "commented_code": "+/*\n+  Warnings:\n+\n+  - You are about to drop the column `emailAccountId` on the `Account` table. All the data in the column will be lost.\n+  - The primary key for the `EmailAccount` table will be changed. If it partially fails, the table could be left without primary key constraint.\n+  - A unique constraint covering the columns `[email]` on the table `Account` will be added. If there are existing duplicate values, this will fail.\n+  - Added the required column `email` to the `CleanupJob` table without a default value. This is not possible if the table is not empty.\n+\n+*/",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2051706595",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 410,
        "pr_file": "apps/web/prisma/migrations/20250420112535_email_account_settings/migration.sql",
        "discussion_id": "2051706595",
        "commented_code": "@@ -0,0 +1,140 @@\n+/*\n+  Warnings:\n+\n+  - You are about to drop the column `emailAccountId` on the `Account` table. All the data in the column will be lost.\n+  - The primary key for the `EmailAccount` table will be changed. If it partially fails, the table could be left without primary key constraint.\n+  - A unique constraint covering the columns `[email]` on the table `Account` will be added. If there are existing duplicate values, this will fail.\n+  - Added the required column `email` to the `CleanupJob` table without a default value. This is not possible if the table is not empty.\n+\n+*/",
        "comment_created_at": "2025-04-20T11:56:57+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Wrap the migration in a transaction for atomicity.**  \nWithout a surrounding `BEGIN; \u2026 COMMIT;` (or the framework\u2019s equivalent), partial failures\u2014especially around dropping and re-adding the primary key\u2014can leave the schema in an inconsistent state. Consider wrapping all operations in a single transaction or using your migration tool\u2019s transactional support.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2144238460",
    "pr_number": 478,
    "pr_file": "apps/web/prisma/migrations/20250613053132_digests/migration.sql",
    "created_at": "2025-06-13T05:34:14+00:00",
    "commented_code": "+/*\n+  Warnings:\n+\n+  - A unique constraint covering the columns `[digestFrequencyId]` on the table `EmailAccount` will be added. If there are existing duplicate values, this will fail.\n+\n+*/",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2144238460",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 478,
        "pr_file": "apps/web/prisma/migrations/20250613053132_digests/migration.sql",
        "discussion_id": "2144238460",
        "commented_code": "@@ -0,0 +1,88 @@\n+/*\n+  Warnings:\n+\n+  - A unique constraint covering the columns `[digestFrequencyId]` on the table `EmailAccount` will be added. If there are existing duplicate values, this will fail.\n+\n+*/",
        "comment_created_at": "2025-06-13T05:34:14+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Pre-migration duplicate detection required**  \nThe warning about the unique constraint on `digestFrequencyId` is critical\u2014without cleaning up existing duplicates, this migration will fail. Add a pre-check or data cleanup step to fail early or dedupe before applying the constraint.  \n  \nExample snippet to insert before the ALTER TABLE:\n\n```sql\n-- Abort if any duplicate digestFrequencyId exists\nDO $$\nBEGIN\n  IF EXISTS (\n    SELECT digestFrequencyId\n    FROM \"EmailAccount\"\n    WHERE digestFrequencyId IS NOT NULL\n    GROUP BY digestFrequencyId\n    HAVING COUNT(*) > 1\n  ) THEN\n    RAISE EXCEPTION 'Duplicate digestFrequencyId values found; please resolve before migrating.';\n  END IF;\nEND;\n$$;\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/prisma/migrations/20250613053132_digests/migration.sql at lines 1 to\n6, the migration adds a unique constraint on digestFrequencyId in EmailAccount\nbut does not handle existing duplicates. To fix this, add a pre-migration SQL\nblock that checks for duplicate digestFrequencyId values and raises an exception\nif any are found, preventing the migration from proceeding until duplicates are\nresolved. Insert the provided DO block before the ALTER TABLE statement to\nimplement this pre-check.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2171696211",
    "pr_number": 528,
    "pr_file": "apps/web/prisma/migrations/20250627111946_update_digest/migration.sql",
    "created_at": "2025-06-27T11:25:37+00:00",
    "commented_code": "+/*\n+  Warnings:\n+\n+  - You are about to drop the column `digestScheduleId` on the `EmailAccount` table. All the data in the column will be lost.\n+\n+*/\n+-- DropForeignKey\n+ALTER TABLE \"EmailAccount\" DROP CONSTRAINT \"EmailAccount_digestScheduleId_fkey\";\n+\n+-- DropIndex\n+DROP INDEX \"EmailAccount_digestScheduleId_key\";\n+\n+-- AlterTable\n+ALTER TABLE \"EmailAccount\" DROP COLUMN \"digestScheduleId\";",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2171696211",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 528,
        "pr_file": "apps/web/prisma/migrations/20250627111946_update_digest/migration.sql",
        "discussion_id": "2171696211",
        "commented_code": "@@ -0,0 +1,14 @@\n+/*\n+  Warnings:\n+\n+  - You are about to drop the column `digestScheduleId` on the `EmailAccount` table. All the data in the column will be lost.\n+\n+*/\n+-- DropForeignKey\n+ALTER TABLE \"EmailAccount\" DROP CONSTRAINT \"EmailAccount_digestScheduleId_fkey\";\n+\n+-- DropIndex\n+DROP INDEX \"EmailAccount_digestScheduleId_key\";\n+\n+-- AlterTable\n+ALTER TABLE \"EmailAccount\" DROP COLUMN \"digestScheduleId\";",
        "comment_created_at": "2025-06-27T11:25:37+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\ud83d\udee0\ufe0f Refactor suggestion_\n\n**Use `IF EXISTS` to make the migration idempotent & environment-safe**\n\nIf the DB has already drifted (e.g. column dropped in a hotfix) the migration will abort.  Guard the drops to avoid breaking CI / staging deploys:\n\n```diff\n-ALTER TABLE \"EmailAccount\" DROP CONSTRAINT \"EmailAccount_digestScheduleId_fkey\";\n+ALTER TABLE \"EmailAccount\" DROP CONSTRAINT IF EXISTS \"EmailAccount_digestScheduleId_fkey\";\n\n-DROP INDEX \"EmailAccount_digestScheduleId_key\";\n+DROP INDEX IF EXISTS \"EmailAccount_digestScheduleId_key\";\n```\n\n<details>\n<summary>\ud83e\udd16 Prompt for AI Agents</summary>\n\n```\nIn apps/web/prisma/migrations/20250627111946_update_digest/migration.sql around\nlines 7 to 14, the DROP CONSTRAINT, DROP INDEX, and DROP COLUMN statements lack\nIF EXISTS clauses, which can cause the migration to fail if these objects are\nalready removed. Modify each DROP statement to include IF EXISTS to make the\nmigration idempotent and safe to run multiple times or in environments where the\nschema may have drifted.\n```\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit -->\n\n<!-- fingerprinting:phantom:triton:cougar -->",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2051706593",
    "pr_number": 410,
    "pr_file": "apps/web/prisma/migrations/20250420112535_email_account_settings/migration.sql",
    "created_at": "2025-04-20T11:56:57+00:00",
    "commented_code": "+/*\n+  Warnings:\n+\n+  - You are about to drop the column `emailAccountId` on the `Account` table. All the data in the column will be lost.\n+  - The primary key for the `EmailAccount` table will be changed. If it partially fails, the table could be left without primary key constraint.\n+  - A unique constraint covering the columns `[email]` on the table `Account` will be added. If there are existing duplicate values, this will fail.\n+  - Added the required column `email` to the `CleanupJob` table without a default value. This is not possible if the table is not empty.\n+\n+*/\n+-- DropForeignKey\n+ALTER TABLE \"Account\" DROP CONSTRAINT \"Account_emailAccountId_fkey\";\n+\n+-- DropIndex\n+DROP INDEX \"Account_emailAccountId_key\";\n+\n+-- DropIndex\n+DROP INDEX \"EmailAccount_email_key\";\n+\n+-- AlterTable\n+ALTER TABLE \"Account\" DROP COLUMN \"emailAccountId\",\n+ADD COLUMN     \"email\" TEXT;\n+\n+-- AlterTable\n+ALTER TABLE \"CleanupJob\" ADD COLUMN     \"email\" TEXT NOT NULL;\n+",
    "repo_full_name": "elie222/inbox-zero",
    "discussion_comments": [
      {
        "comment_id": "2051706593",
        "repo_full_name": "elie222/inbox-zero",
        "pr_number": 410,
        "pr_file": "apps/web/prisma/migrations/20250420112535_email_account_settings/migration.sql",
        "discussion_id": "2051706593",
        "commented_code": "@@ -0,0 +1,140 @@\n+/*\n+  Warnings:\n+\n+  - You are about to drop the column `emailAccountId` on the `Account` table. All the data in the column will be lost.\n+  - The primary key for the `EmailAccount` table will be changed. If it partially fails, the table could be left without primary key constraint.\n+  - A unique constraint covering the columns `[email]` on the table `Account` will be added. If there are existing duplicate values, this will fail.\n+  - Added the required column `email` to the `CleanupJob` table without a default value. This is not possible if the table is not empty.\n+\n+*/\n+-- DropForeignKey\n+ALTER TABLE \"Account\" DROP CONSTRAINT \"Account_emailAccountId_fkey\";\n+\n+-- DropIndex\n+DROP INDEX \"Account_emailAccountId_key\";\n+\n+-- DropIndex\n+DROP INDEX \"EmailAccount_email_key\";\n+\n+-- AlterTable\n+ALTER TABLE \"Account\" DROP COLUMN \"emailAccountId\",\n+ADD COLUMN     \"email\" TEXT;\n+\n+-- AlterTable\n+ALTER TABLE \"CleanupJob\" ADD COLUMN     \"email\" TEXT NOT NULL;\n+",
        "comment_created_at": "2025-04-20T11:56:57+00:00",
        "comment_author": "coderabbitai[bot]",
        "comment_body": "_\u26a0\ufe0f Potential issue_\n\n**Avoid adding a NOT NULL column without a default or backfill.**  \nAdding `email TEXT NOT NULL` to `CleanupJob` will fail on non-empty tables. Instead, first add it as nullable, backfill existing rows, then `ALTER TABLE \u2026 ALTER COLUMN email SET NOT NULL`.\n\n<!-- This is an auto-generated comment by CodeRabbit -->",
        "pr_file_module": null
      }
    ]
  }
]