[
  {
    "discussion_id": "1920020671",
    "pr_number": 25849,
    "pr_file": "influxdb3/tests/server/cli.rs",
    "created_at": "2025-01-17T11:14:50+00:00",
    "commented_code": "file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1920020671",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920020671",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()",
        "comment_created_at": "2025-01-17T11:14:50+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Is it `failure()` because process starts and hangs around till 500 millis and then shuts down? Just wondered if it could've used the `TestServer` to spin up the server and got hold of the stdout for your assertions. If you'd already looked into it and it didn't work for you that's fine, but it has the mechanism built in to kill the process after the test without `timeout`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920485711",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920020671",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()",
        "comment_created_at": "2025-01-17T17:01:11+00:00",
        "comment_author": "waynr",
        "comment_body": ">Is it failure() because process starts and hangs around till 500 millis and then shuts down?\r\n\r\nI added the `failure()` call just to be clear in this test case that we expect a non-zero exit code when the process is killed using the `timeout` method. It's not strictly necessary for this test case (we only really care about checking the stdout), just me trying to be explicit.\r\n\r\n>Just wondered if it could've used the TestServer to spin up the server and got hold of the stdout for your assertions.\r\n\r\nI did look through the `TestSever` code a little, and it looked to me like it was intended more for API-level integration testing than what I'm doing here, which is asserting on the CLI's stdout. Looking at it again, it's still not obvious how to get the stdout from it without modifying it non-trivially to preserve stdout. \r\n\r\n>  it has the mechanism built in to kill the process after the test without timeout.\r\n\r\nYeah, I see the it has the mechanism built in to kill the process after the test without timeout using the `kill` method, but that would require additional boilerplate to have the test case sleep 500 ms before killing it (assuming we also added more code to preserve and retrieve the `TestServer` stdout).\r\n\r\nTo be clear, the `timeout` method isn't used to kill the process after the test -- the test happens after we've killed the process. We kill it after a constant 500 ms because that's what I thought would reliably be enough time to reach the stdout debug messages that are being asserted on (a too small timeout could cause this test to be flaky since we would be less likely to reach that debug message). I know it's not ideal asserting on stdout to test whether the telemetry store is running in but I think the only other option would be to actually set up a listening http server and point it at that, and test that something reached it from the `TelemetryStore` (or not as the test case might call for), but that seemed like it might no be worth the additional effort...",
        "pr_file_module": null
      },
      {
        "comment_id": "1920555677",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920020671",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()",
        "comment_created_at": "2025-01-17T17:57:01+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "I did think the test happens after killing the process as well with the timeout - just wasn't sure if there was easy wins in extending `TestServer`.  ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1920028156",
    "pr_number": 25849,
    "pr_file": "influxdb3/tests/server/cli.rs",
    "created_at": "2025-01-17T11:17:06+00:00",
    "commented_code": "file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1920028156",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920028156",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
        "comment_created_at": "2025-01-17T11:17:06+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "I think using `predicates` is fine but I've been following the existing pattern of using `assert_contains!` and `assert_not_contains!` macros from `test_helpers` just to keep it consistent. If those macros are lacking in functionality for your use case, definitely keep `predicates` in.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920485837",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920028156",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
        "comment_created_at": "2025-01-17T17:01:18+00:00",
        "comment_author": "waynr",
        "comment_body": "Ah, I now see the `run*` functions used elsewhere in this file and how they are using those assertions you mentioned. But those test cases seem to be running short-lived subcommands rather than the long-lived `serve` subcommand. I like the `assert_cmd` abstractions for their succinctness in a case like this -- particularly the `timeout` method to avoid extra boilerplate around waiting a fixed time before killing the process. Using `predicates` just seemed a natural extension of using the `assert_cmd` crate, which I noticed was already being used here for its `cargo_bin` command constructor. I'll look into using the other assertions though!",
        "pr_file_module": null
      },
      {
        "comment_id": "1920568316",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920028156",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
        "comment_created_at": "2025-01-17T18:06:32+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Yea - it'd have had to wait till server started fully. I think we already loop through in `TestServer` till it hits the last line to capture the address. So, you could just extend `TestServer` to hold all the lines it's seen during the startup and access it in the tests. When `TestServer::spawn().await` completes, that means server is fully up. Then you can just loop through and check the line you wanted to assert is there. \r\n\r\nSee if that works, if not go ahead and merge this PR - the point about `TestServer` is not really critical, I just wanted to check if you'd seen it and still thought it's not fit for your test. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1920759361",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920028156",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
        "comment_created_at": "2025-01-17T21:07:28+00:00",
        "comment_author": "waynr",
        "comment_body": "What is the value in adding more code to `TestServer` when all we need to accomplish the task at hand is `std::process::Command`? I see the specific value of `TestServer` where it's used -- it abstracts over a running server while executing API-driven test cases and displaying logs in the test case if `TEST_LOG` is set. That makes sense. But it's super heavy-handed when all that's necessary for these new test cases is `std::process::Command`. Is it just the `assert_cmd` helpers that you don't like? It would still be simpler to remove those (then add more code to `TestServer` that is), but the test case code becomes more verbose in doing so.",
        "pr_file_module": null
      },
      {
        "comment_id": "1920860076",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25849,
        "pr_file": "influxdb3/tests/server/cli.rs",
        "discussion_id": "1920028156",
        "commented_code": "@@ -107,6 +109,105 @@ fn create_plugin_file(code: &str) -> NamedTempFile {\n     file\n }\n \n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled_with_debug_msg() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+\n+    // validate we get a debug message indicating upload disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-vv\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled));\n+}\n+\n+#[test_log::test(tokio::test)]\n+async fn test_telemetry_disabled() {\n+    let serve_args = &[\n+        \"serve\",\n+        \"--writer-id\",\n+        \"the-best-writer\",\n+        \"--object-store\",\n+        \"memory\",\n+    ];\n+\n+    let expected_disabled: &str = \"Initializing TelemetryStore with upload disabled.\";\n+    // validate no message when debug output disabled\n+    AssertCmd::cargo_bin(\"influxdb3\")\n+        .unwrap()\n+        .args(serve_args)\n+        .arg(\"-v\")\n+        .arg(\"--disable-telemetry-upload\")\n+        .timeout(std::time::Duration::from_millis(500))\n+        .assert()\n+        .failure()\n+        .stdout(predicates::str::contains(expected_disabled).not());",
        "comment_created_at": "2025-01-17T23:13:32+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Not really, it's the timeouts that stood out. The initial thought was `TestServer` already abstracts the server starting part already and it also hooks into server logs and then the assertions stood out as well. But as I said, both aren't critical they're part of test infra, we can ship it.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1892353381",
    "pr_number": 25682,
    "pr_file": "influxdb3_telemetry/src/store.rs",
    "created_at": "2024-12-19T14:44:13+00:00",
    "commented_code": "\"http://localhost/telemetry\",\n         )\n         .await;\n+        tokio::time::sleep(Duration::from_secs(1)).await;",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1892353381",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25682,
        "pr_file": "influxdb3_telemetry/src/store.rs",
        "discussion_id": "1892353381",
        "commented_code": "@@ -311,33 +317,36 @@ mod tests {\n             \"http://localhost/telemetry\",\n         )\n         .await;\n+        tokio::time::sleep(Duration::from_secs(1)).await;",
        "comment_created_at": "2024-12-19T14:44:13+00:00",
        "comment_author": "dgnorton",
        "comment_body": "Probably my lack of Rust skills but sleeps in Go tests are sometimes problematic. Is the `TelemetryStore` doing something in the background that this is waiting for?",
        "pr_file_module": null
      },
      {
        "comment_id": "1892378469",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25682,
        "pr_file": "influxdb3_telemetry/src/store.rs",
        "discussion_id": "1892353381",
        "commented_code": "@@ -311,33 +317,36 @@ mod tests {\n             \"http://localhost/telemetry\",\n         )\n         .await;\n+        tokio::time::sleep(Duration::from_secs(1)).await;",
        "comment_created_at": "2024-12-19T14:51:53+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "It's just for the assertion https://github.com/influxdata/influxdb/blob/dc1537edc5151ce8c74cafcf08b8913cfedd5129/influxdb3_telemetry/src/store.rs#L325. \r\n\r\nThe timer is started when a new instance is created and if I immediately assert on duration I get 0, I added that sleep to make it actually assert on a non zero value. There is nothing running in the background.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1817047645",
    "pr_number": 25492,
    "pr_file": "influxdb3_catalog/src/catalog.rs",
    "created_at": "2024-10-25T16:54:51+00:00",
    "commented_code": ".databases\n             .insert(database.id, Arc::new(database));\n \n+        // TODO: with the use of the SerdeVecHashMap, using a snapshot test is flaky. This is\n+        // because the serialized vector can not have a deterministic order. So, this part of the\n+        // test is disabled for now.\n+",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1817047645",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25492,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "1817047645",
        "commented_code": "@@ -1104,9 +1057,19 @@ mod tests {\n             .databases\n             .insert(database.id, Arc::new(database));\n \n+        // TODO: with the use of the SerdeVecHashMap, using a snapshot test is flaky. This is\n+        // because the serialized vector can not have a deterministic order. So, this part of the\n+        // test is disabled for now.\n+",
        "comment_created_at": "2024-10-25T16:54:51+00:00",
        "comment_author": "pauldix",
        "comment_body": "I think with these kinds of serialization things, snapshot testing might not be what we want to use anyway. We want to confirm that we can serialize and deserialize data. Later when we make updates to the types, we want to make sure we can still deserialize older data.\r\n\r\nBut if we're marshalling into RAM, it's the equality of the data members that we're looking for.",
        "pr_file_module": null
      },
      {
        "comment_id": "1817067173",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25492,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "1817047645",
        "commented_code": "@@ -1104,9 +1057,19 @@ mod tests {\n             .databases\n             .insert(database.id, Arc::new(database));\n \n+        // TODO: with the use of the SerdeVecHashMap, using a snapshot test is flaky. This is\n+        // because the serialized vector can not have a deterministic order. So, this part of the\n+        // test is disabled for now.\n+",
        "comment_created_at": "2024-10-25T17:11:19+00:00",
        "comment_author": "hiltontj",
        "comment_body": "Yeah, `insta` is compelling but not the  right tool here. I think @waynr was grappling with a similar issue in clustered so I may pick his brain to see if he landed on a solution.",
        "pr_file_module": null
      },
      {
        "comment_id": "1817078416",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25492,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "1817047645",
        "commented_code": "@@ -1104,9 +1057,19 @@ mod tests {\n             .databases\n             .insert(database.id, Arc::new(database));\n \n+        // TODO: with the use of the SerdeVecHashMap, using a snapshot test is flaky. This is\n+        // because the serialized vector can not have a deterministic order. So, this part of the\n+        // test is disabled for now.\n+",
        "comment_created_at": "2024-10-25T17:17:31+00:00",
        "comment_author": "hiltontj",
        "comment_body": "I opened https://github.com/influxdata/influxdb/issues/25493",
        "pr_file_module": null
      }
    ]
  }
]