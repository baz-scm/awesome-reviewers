[
  {
    "discussion_id": "2047609752",
    "pr_number": 26281,
    "pr_file": "influxdb3/src/commands/create.rs",
    "created_at": "2025-04-16T19:25:34+00:00",
    "commented_code": "columns: Vec<String>,\n \n     /// The maximum number of distinct value combinations to hold in the cache\n-    #[clap(long = \"max-cardinality\")]\n+    #[clap(long = \"max-cardinality\", default_value = \"100000\")]\n     max_cardinality: Option<NonZeroUsize>,\n \n     /// The maximum age of an entry in the cache entered as a human-readable duration, e.g., \"30d\", \"24h\"\n-    #[clap(long = \"max-age\")]\n+    #[clap(long = \"max-age\", default_value = \"1d\")]",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2047609752",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26281,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "2047609752",
        "commented_code": "@@ -200,11 +200,11 @@ pub struct DistinctCacheConfig {\n     columns: Vec<String>,\n \n     /// The maximum number of distinct value combinations to hold in the cache\n-    #[clap(long = \"max-cardinality\")]\n+    #[clap(long = \"max-cardinality\", default_value = \"100000\")]\n     max_cardinality: Option<NonZeroUsize>,\n \n     /// The maximum age of an entry in the cache entered as a human-readable duration, e.g., \"30d\", \"24h\"\n-    #[clap(long = \"max-age\")]\n+    #[clap(long = \"max-age\", default_value = \"1d\")]",
        "comment_created_at": "2025-04-16T19:25:34+00:00",
        "comment_author": "hiltontj",
        "comment_body": "The default should already have been 1 day: https://github.com/influxdata/influxdb/blob/e4cfbf71f78ce44072ec48f41b83721af6d21799/influxdb3_catalog/src/log/versions/v2.rs#L568\r\n\r\nI guess this is just for the purpose of documentation? Since, the coded default doesn't appear in the CLI output anywhere.",
        "pr_file_module": null
      },
      {
        "comment_id": "2047614343",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26281,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "2047609752",
        "commented_code": "@@ -200,11 +200,11 @@ pub struct DistinctCacheConfig {\n     columns: Vec<String>,\n \n     /// The maximum number of distinct value combinations to hold in the cache\n-    #[clap(long = \"max-cardinality\")]\n+    #[clap(long = \"max-cardinality\", default_value = \"100000\")]\n     max_cardinality: Option<NonZeroUsize>,\n \n     /// The maximum age of an entry in the cache entered as a human-readable duration, e.g., \"30d\", \"24h\"\n-    #[clap(long = \"max-age\")]\n+    #[clap(long = \"max-age\", default_value = \"1d\")]",
        "comment_created_at": "2025-04-16T19:29:07+00:00",
        "comment_author": "peterbarnett03",
        "comment_body": "Yeah, had a user running into issues because it makes it 1d if you don't specify and they were loading in historical data, so they didn't know why they weren't seeing the data. Something we should probably make more clear or revisit in general, but a small update for now. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1924161666",
    "pr_number": 25890,
    "pr_file": "influxdb3/src/commands/serve.rs",
    "created_at": "2025-01-21T17:58:22+00:00",
    "commented_code": "action\n     )]\n     pub telemetry_endpoint: String,\n+\n+    /// Set the limit for number of parquet files allowed in a query. Defaults to 432 which is about\n+    /// 3 days worth of files. This number can be increased to allow more files to be queried, but\n+    /// query performance will likely suffer as a result. It would be better to specify smaller time\n+    /// ranges if possible in a query\n+    #[clap(long = \"file-limit\", env = \"INFLUXDB3_FILE_LIMIT\", action)]\n+    pub file_limit: Option<usize>,",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1924161666",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25890,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1924161666",
        "commented_code": "@@ -345,6 +345,13 @@ pub struct Config {\n         action\n     )]\n     pub telemetry_endpoint: String,\n+\n+    /// Set the limit for number of parquet files allowed in a query. Defaults to 432 which is about\n+    /// 3 days worth of files. This number can be increased to allow more files to be queried, but\n+    /// query performance will likely suffer as a result. It would be better to specify smaller time\n+    /// ranges if possible in a query\n+    #[clap(long = \"file-limit\", env = \"INFLUXDB3_FILE_LIMIT\", action)]\n+    pub file_limit: Option<usize>,",
        "comment_created_at": "2025-01-21T17:58:22+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Just a minor thing, setting 432 here directly as a default here could've worked?",
        "pr_file_module": null
      },
      {
        "comment_id": "1924364266",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25890,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1924161666",
        "commented_code": "@@ -345,6 +345,13 @@ pub struct Config {\n         action\n     )]\n     pub telemetry_endpoint: String,\n+\n+    /// Set the limit for number of parquet files allowed in a query. Defaults to 432 which is about\n+    /// 3 days worth of files. This number can be increased to allow more files to be queried, but\n+    /// query performance will likely suffer as a result. It would be better to specify smaller time\n+    /// ranges if possible in a query\n+    #[clap(long = \"file-limit\", env = \"INFLUXDB3_FILE_LIMIT\", action)]\n+    pub file_limit: Option<usize>,",
        "comment_created_at": "2025-01-21T21:07:13+00:00",
        "comment_author": "mgattozzi",
        "comment_body": "I'd still have to pass it in for testing purposes so I kept it as an Option so that there would only be one place that the default would need to be defined!",
        "pr_file_module": null
      },
      {
        "comment_id": "1924680345",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25890,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1924161666",
        "commented_code": "@@ -345,6 +345,13 @@ pub struct Config {\n         action\n     )]\n     pub telemetry_endpoint: String,\n+\n+    /// Set the limit for number of parquet files allowed in a query. Defaults to 432 which is about\n+    /// 3 days worth of files. This number can be increased to allow more files to be queried, but\n+    /// query performance will likely suffer as a result. It would be better to specify smaller time\n+    /// ranges if possible in a query\n+    #[clap(long = \"file-limit\", env = \"INFLUXDB3_FILE_LIMIT\", action)]\n+    pub file_limit: Option<usize>,",
        "comment_created_at": "2025-01-22T04:33:10+00:00",
        "comment_author": "pauldix",
        "comment_body": "Can we rename to `query-file-limit`? I think it's better to be more descriptive about what this file limit is about.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912287565",
    "pr_number": 25801,
    "pr_file": "influxdb3/src/commands/serve.rs",
    "created_at": "2025-01-11T23:09:28+00:00",
    "commented_code": ")]\n     pub wal_max_write_buffer_size: usize,\n \n+    /// Number of wal files to keep behind, wal flush does not clear the wal files immediately\n+    /// instead they are only deleted when num wal files count exceed this keep behind size\n+    #[clap(\n+        long = \"num-wal-files-to-keep\",",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1912287565",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25801,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1912287565",
        "commented_code": "@@ -208,6 +208,16 @@ pub struct Config {\n     )]\n     pub wal_max_write_buffer_size: usize,\n \n+    /// Number of wal files to keep behind, wal flush does not clear the wal files immediately\n+    /// instead they are only deleted when num wal files count exceed this keep behind size\n+    #[clap(\n+        long = \"num-wal-files-to-keep\",",
        "comment_created_at": "2025-01-11T23:09:28+00:00",
        "comment_author": "pauldix",
        "comment_body": "should be renamed to `snapshotted-wal-files-to-keep`. It's not the actual total number of WAL files, it's the number that have been snapshotted. So if you have 200 files that haven't been snapshotted and this setting is 50, you'd have 250 total files at that point.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902198807",
    "pr_number": 25737,
    "pr_file": "influxdb3/src/commands/create.rs",
    "created_at": "2025-01-03T22:00:01+00:00",
    "commented_code": "+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1902198807",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902198807",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]",
        "comment_created_at": "2025-01-03T22:00:01+00:00",
        "comment_author": "pauldix",
        "comment_body": "Not sure if we want to change this here, but I've logged #25735 to be able to create tables without specifying any fields.",
        "pr_file_module": null
      },
      {
        "comment_id": "1902207302",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902198807",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]",
        "comment_created_at": "2025-01-03T22:18:17+00:00",
        "comment_author": "pauldix",
        "comment_body": "This could also use help that indicates what fields should look like if provided, and what the valid types are.",
        "pr_file_module": null
      },
      {
        "comment_id": "1902213007",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902198807",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]",
        "comment_created_at": "2025-01-03T22:30:35+00:00",
        "comment_author": "pauldix",
        "comment_body": "Looking at the help for the delete commands it seems it's a bit off:\r\n\r\n```\r\ninfluxdb3 delete table -h\r\nCreate a new table in a database\r\n\r\nUsage: influxdb3 delete table [OPTIONS] --database <DATABASE_NAME> <TABLE_NAME>\r\n\r\nArguments:\r\n  <TABLE_NAME>  \r\n\r\nOptions:\r\n  -H, --host <HOST_URL>           The host URL of the running InfluxDB 3 Core server [env: INFLUXDB3_HOST_URL=] [default: http://127.0.0.1:8181]\r\n  -d, --database <DATABASE_NAME>  The database name to run the query against [env: INFLUXDB3_DATABASE_NAME=]\r\n      --token <AUTH_TOKEN>        The token for authentication with the InfluxDB 3 Core server [env: INFLUXDB3_AUTH_TOKEN=]\r\n  -h, --help                      Print help information\r\n```\r\n\r\nI'm guessing you'll need to create different config blocks for each of the actions `TableDeleteConfig`, `TableCreateConfig`, etc. I saw this for the other nouns as well.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1781727897",
    "pr_number": 25415,
    "pr_file": "influxdb3/src/commands/serve.rs",
    "created_at": "2024-09-30T20:58:52+00:00",
    "commented_code": "/// for any hosts that share the same object store configuration, i.e., the same bucket.\n     #[clap(long = \"host-id\", env = \"INFLUXDB3_HOST_IDENTIFIER_PREFIX\", action)]\n     pub host_identifier_prefix: String,\n+\n+    /// The size of the in-memory Parquet cache in bytes.",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1781727897",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25415,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1781727897",
        "commented_code": "@@ -216,6 +217,67 @@ pub struct Config {\n     /// for any hosts that share the same object store configuration, i.e., the same bucket.\n     #[clap(long = \"host-id\", env = \"INFLUXDB3_HOST_IDENTIFIER_PREFIX\", action)]\n     pub host_identifier_prefix: String,\n+\n+    /// The size of the in-memory Parquet cache in bytes.",
        "comment_created_at": "2024-09-30T20:58:52+00:00",
        "comment_author": "pauldix",
        "comment_body": "Would it be better/more user friendly to have this value in MB? ",
        "pr_file_module": null
      }
    ]
  }
]