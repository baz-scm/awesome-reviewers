[
  {
    "discussion_id": "2122372779",
    "pr_number": 26479,
    "pr_file": "influxdb3_catalog/src/catalog.rs",
    "created_at": "2025-06-03T00:23:00+00:00",
    "commented_code": "// send in subsequent requests\n         Ok((token_info, token))\n     }\n+\n+    // Return the oldest allowable timestamp for the given table according to the\n+    // currently-available set of retention policies. This is returned as a number of nanoseconds\n+    // since the Unix Epoch.\n+    pub fn get_retention_period_cutoff_ts_nanos(&self, db_id: &DbId, _: &TableId) -> Option<i64> {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2122372779",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26479,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "2122372779",
        "commented_code": "@@ -595,6 +595,20 @@ impl Catalog {\n         // send in subsequent requests\n         Ok((token_info, token))\n     }\n+\n+    // Return the oldest allowable timestamp for the given table according to the\n+    // currently-available set of retention policies. This is returned as a number of nanoseconds\n+    // since the Unix Epoch.\n+    pub fn get_retention_period_cutoff_ts_nanos(&self, db_id: &DbId, _: &TableId) -> Option<i64> {",
        "comment_created_at": "2025-06-03T00:23:00+00:00",
        "comment_author": "stuartcarnie",
        "comment_body": "> [!NOTE]\r\n>\r\n> Just my musing, not something that needs to be changed for this PR\r\n\r\nI have been thinking that adding a specific `UnixTimestamp` would be beneficial. We handle nanosecond UNIX epoch timestamps regularly, but an `i64` doesn't carry any semantic meaning. Passing around `UnixTimestamp` would be clearer. I found a crate, [`unix-ts`](https://docs.rs/unix-ts/1.0.0/unix_ts/index.html), but that stores the value as an `i128`. We could consider adding our own for `i64`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2122383072",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26479,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "2122372779",
        "commented_code": "@@ -595,6 +595,20 @@ impl Catalog {\n         // send in subsequent requests\n         Ok((token_info, token))\n     }\n+\n+    // Return the oldest allowable timestamp for the given table according to the\n+    // currently-available set of retention policies. This is returned as a number of nanoseconds\n+    // since the Unix Epoch.\n+    pub fn get_retention_period_cutoff_ts_nanos(&self, db_id: &DbId, _: &TableId) -> Option<i64> {",
        "comment_created_at": "2025-06-03T00:35:46+00:00",
        "comment_author": "waynr",
        "comment_body": "I like the sound of that as a general repo-wide refactor, but for this purpose I just stuck with the type used to represent timestamps wherever these values will be used.",
        "pr_file_module": null
      },
      {
        "comment_id": "2122406123",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26479,
        "pr_file": "influxdb3_catalog/src/catalog.rs",
        "discussion_id": "2122372779",
        "commented_code": "@@ -595,6 +595,20 @@ impl Catalog {\n         // send in subsequent requests\n         Ok((token_info, token))\n     }\n+\n+    // Return the oldest allowable timestamp for the given table according to the\n+    // currently-available set of retention policies. This is returned as a number of nanoseconds\n+    // since the Unix Epoch.\n+    pub fn get_retention_period_cutoff_ts_nanos(&self, db_id: &DbId, _: &TableId) -> Option<i64> {",
        "comment_created_at": "2025-06-03T01:04:11+00:00",
        "comment_author": "stuartcarnie",
        "comment_body": "Same â€“ definitely should be a deliberate PR. Start with developing the type with a good API, and then a separate PR to do the repo-wide refactor.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912294867",
    "pr_number": 25801,
    "pr_file": "influxdb3_wal/src/object_store.rs",
    "created_at": "2025-01-11T23:23:54+00:00",
    "commented_code": "}\n }\n \n+#[derive(Debug)]\n+struct WalFileRemover {\n+    oldest_wal_file: Option<WalFileSequenceNumber>,\n+    last_wal_sequence_number: Option<WalFileSequenceNumber>,",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1912294867",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25801,
        "pr_file": "influxdb3_wal/src/object_store.rs",
        "discussion_id": "1912294867",
        "commented_code": "@@ -743,6 +836,32 @@ impl<'a> TryFrom<&'a Path> for WalFileSequenceNumber {\n     }\n }\n \n+#[derive(Debug)]\n+struct WalFileRemover {\n+    oldest_wal_file: Option<WalFileSequenceNumber>,\n+    last_wal_sequence_number: Option<WalFileSequenceNumber>,",
        "comment_created_at": "2025-01-11T23:23:54+00:00",
        "comment_author": "pauldix",
        "comment_body": "rename to `last_snapshotted_wal_sequence_number` for clarity. The latest wal file number will always be >= this one.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1899114186",
    "pr_number": 25722,
    "pr_file": "influxdb3_write/src/write_buffer/metrics.rs",
    "created_at": "2024-12-29T11:37:35+00:00",
    "commented_code": "#[derive(Debug)]\n pub(super) struct WriteMetrics {\n-    write_lines_total: Metric<U64Counter>,\n-    write_bytes_total: Metric<U64Counter>,\n+    write_lines_count: Metric<U64Counter>,",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1899114186",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25722,
        "pr_file": "influxdb3_write/src/write_buffer/metrics.rs",
        "discussion_id": "1899114186",
        "commented_code": "@@ -4,37 +4,51 @@ use metric::{Metric, Registry, U64Counter};\n \n #[derive(Debug)]\n pub(super) struct WriteMetrics {\n-    write_lines_total: Metric<U64Counter>,\n-    write_bytes_total: Metric<U64Counter>,\n+    write_lines_count: Metric<U64Counter>,",
        "comment_created_at": "2024-12-29T11:37:35+00:00",
        "comment_author": "pauldix",
        "comment_body": "`write_lines_total` is the more standard naming convention. Metric names should end in units, e.g. _seconds, _bytes, or _total for unit-less metrics. See https://prometheus.io/docs/practices/naming/",
        "pr_file_module": null
      },
      {
        "comment_id": "1899137434",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25722,
        "pr_file": "influxdb3_write/src/write_buffer/metrics.rs",
        "discussion_id": "1899114186",
        "commented_code": "@@ -4,37 +4,51 @@ use metric::{Metric, Registry, U64Counter};\n \n #[derive(Debug)]\n pub(super) struct WriteMetrics {\n-    write_lines_total: Metric<U64Counter>,\n-    write_bytes_total: Metric<U64Counter>,\n+    write_lines_count: Metric<U64Counter>,",
        "comment_created_at": "2024-12-29T14:01:44+00:00",
        "comment_author": "hiltontj",
        "comment_body": "Addressed this in https://github.com/influxdata/influxdb/pull/25722/commits/cd51bc2beda9a23446d694ee411e409871b1de39",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1834825635",
    "pr_number": 25525,
    "pr_file": "influxdb3_wal/src/create.rs",
    "created_at": "2024-11-08T17:39:53+00:00",
    "commented_code": "+//! A set of helper methods for creating WAL operations in tests.\n+\n+use std::sync::Arc;\n+\n+use influxdb3_id::{ColumnId, DbId};\n+\n+use crate::*;\n+\n+pub fn wal_contents(\n+    (min_timestamp_ns, max_timestamp_ns, wal_file_number): (i64, i64, u64),\n+    ops: impl IntoIterator<Item = WalOp>,\n+) -> WalContents {\n+    WalContents {\n+        min_timestamp_ns,\n+        max_timestamp_ns,",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1834825635",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25525,
        "pr_file": "influxdb3_wal/src/create.rs",
        "discussion_id": "1834825635",
        "commented_code": "@@ -0,0 +1,135 @@\n+//! A set of helper methods for creating WAL operations in tests.\n+\n+use std::sync::Arc;\n+\n+use influxdb3_id::{ColumnId, DbId};\n+\n+use crate::*;\n+\n+pub fn wal_contents(\n+    (min_timestamp_ns, max_timestamp_ns, wal_file_number): (i64, i64, u64),\n+    ops: impl IntoIterator<Item = WalOp>,\n+) -> WalContents {\n+    WalContents {\n+        min_timestamp_ns,\n+        max_timestamp_ns,",
        "comment_created_at": "2024-11-08T17:39:53+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Thanks for embedding the unit `ns`, really helps when reading the code without full context. ",
        "pr_file_module": null
      },
      {
        "comment_id": "1834854583",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25525,
        "pr_file": "influxdb3_wal/src/create.rs",
        "discussion_id": "1834825635",
        "commented_code": "@@ -0,0 +1,135 @@\n+//! A set of helper methods for creating WAL operations in tests.\n+\n+use std::sync::Arc;\n+\n+use influxdb3_id::{ColumnId, DbId};\n+\n+use crate::*;\n+\n+pub fn wal_contents(\n+    (min_timestamp_ns, max_timestamp_ns, wal_file_number): (i64, i64, u64),\n+    ops: impl IntoIterator<Item = WalOp>,\n+) -> WalContents {\n+    WalContents {\n+        min_timestamp_ns,\n+        max_timestamp_ns,",
        "comment_created_at": "2024-11-08T18:02:11+00:00",
        "comment_author": "pauldix",
        "comment_body": "Yeah, we should do that everywhere in the code where we don't have a typed time.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1725377302",
    "pr_number": 25258,
    "pr_file": "influxdb3_write/src/lib.rs",
    "created_at": "2024-08-21T16:21:25+00:00",
    "commented_code": "pub tables: hashbrown::HashMap<Arc<str>, Vec<ParquetFile>>,\n }\n \n+/// The next file id to be used when persisting `ParquetFile`s\n+pub static NEXT_FILE_ID: AtomicU64 = AtomicU64::new(0);\n+\n /// The summary data for a persisted parquet file in a snapshot.\n #[derive(Debug, Serialize, Deserialize, Eq, PartialEq, Clone)]\n pub struct ParquetFile {\n+    pub id: u64,",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1725377302",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25258,
        "pr_file": "influxdb3_write/src/lib.rs",
        "discussion_id": "1725377302",
        "commented_code": "@@ -277,9 +282,13 @@ pub struct DatabaseTables {\n     pub tables: hashbrown::HashMap<Arc<str>, Vec<ParquetFile>>,\n }\n \n+/// The next file id to be used when persisting `ParquetFile`s\n+pub static NEXT_FILE_ID: AtomicU64 = AtomicU64::new(0);\n+\n /// The summary data for a persisted parquet file in a snapshot.\n #[derive(Debug, Serialize, Deserialize, Eq, PartialEq, Clone)]\n pub struct ParquetFile {\n+    pub id: u64,",
        "comment_created_at": "2024-08-21T16:21:25+00:00",
        "comment_author": "pauldix",
        "comment_body": "Should this be a new type like `struct ParquetFileId(u64)`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1725401085",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25258,
        "pr_file": "influxdb3_write/src/lib.rs",
        "discussion_id": "1725377302",
        "commented_code": "@@ -277,9 +282,13 @@ pub struct DatabaseTables {\n     pub tables: hashbrown::HashMap<Arc<str>, Vec<ParquetFile>>,\n }\n \n+/// The next file id to be used when persisting `ParquetFile`s\n+pub static NEXT_FILE_ID: AtomicU64 = AtomicU64::new(0);\n+\n /// The summary data for a persisted parquet file in a snapshot.\n #[derive(Debug, Serialize, Deserialize, Eq, PartialEq, Clone)]\n pub struct ParquetFile {\n+    pub id: u64,",
        "comment_created_at": "2024-08-21T16:40:04+00:00",
        "comment_author": "mgattozzi",
        "comment_body": "I think to make it consistent it probably should be.",
        "pr_file_module": null
      },
      {
        "comment_id": "1725416613",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25258,
        "pr_file": "influxdb3_write/src/lib.rs",
        "discussion_id": "1725377302",
        "commented_code": "@@ -277,9 +282,13 @@ pub struct DatabaseTables {\n     pub tables: hashbrown::HashMap<Arc<str>, Vec<ParquetFile>>,\n }\n \n+/// The next file id to be used when persisting `ParquetFile`s\n+pub static NEXT_FILE_ID: AtomicU64 = AtomicU64::new(0);\n+\n /// The summary data for a persisted parquet file in a snapshot.\n #[derive(Debug, Serialize, Deserialize, Eq, PartialEq, Clone)]\n pub struct ParquetFile {\n+    pub id: u64,",
        "comment_created_at": "2024-08-21T16:51:27+00:00",
        "comment_author": "mgattozzi",
        "comment_body": "I derived it and created some convenience methods to make it easier https://github.com/influxdata/influxdb/pull/25258/commits/ae0de02286305b81064eb65033e2e10844dc4acf",
        "pr_file_module": null
      }
    ]
  }
]