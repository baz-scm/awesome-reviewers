[
  {
    "discussion_id": "1902210452",
    "pr_number": 25737,
    "pr_file": "influxdb3/src/commands/create.rs",
    "created_at": "2025-01-03T22:25:05+00:00",
    "commented_code": "+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1902210452",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902210452",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against",
        "comment_created_at": "2025-01-03T22:25:05+00:00",
        "comment_author": "pauldix",
        "comment_body": "This is a bit odd but if you run\r\n\r\n```\r\ninfluxdb3 create database -h\r\nCreate a new database\r\n\r\nUsage: influxdb3 create database [OPTIONS] <DATABASE_NAME>\r\n\r\nArguments:\r\n  <DATABASE_NAME>  The database name to run the query against [env: INFLUXDB3_DATABASE_NAME=]\r\n```\r\n\r\nThe text is that you're running a query against a database, when if fact you're creating a database with that name. Ideally it would say that and also include some information about valid naming (i.e. alphanumeric with underscore and dash, starting with a letter or number).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902213602",
    "pr_number": 25737,
    "pr_file": "influxdb3/src/commands/create.rs",
    "created_at": "2025-01-03T22:31:58+00:00",
    "commented_code": "+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1902213602",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902213602",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]",
        "comment_created_at": "2025-01-03T22:31:58+00:00",
        "comment_author": "pauldix",
        "comment_body": "Would be good to have help that indicates what this is with an example. Also guidance on what valid tag names are.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1902213929",
    "pr_number": 25737,
    "pr_file": "influxdb3/src/commands/create.rs",
    "created_at": "2025-01-03T22:32:45+00:00",
    "commented_code": "+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]\n+    fields: Vec<(String, DataType)>,\n+\n+    #[clap(flatten)]\n+    influxdb3_config: InfluxDb3Config,\n+\n+    #[clap(required = true)]\n+    table_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct LastCacheConfig {\n+    #[clap(flatten)]\n+    influxdb3_config: InfluxDb3Config,\n+\n+    /// The table name for which the cache is being created\n+    #[clap(short = 't', long = \"table\")]\n+    table: String,\n+\n+    /// Give a name for the cache.\n+    #[clap(long = \"cache-name\")]\n+    cache_name: Option<String>,\n+\n+    /// Which columns in the table to use as keys in the cache",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1902213929",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25737,
        "pr_file": "influxdb3/src/commands/create.rs",
        "discussion_id": "1902213929",
        "commented_code": "@@ -0,0 +1,327 @@\n+use crate::commands::common::{parse_key_val, DataType, InfluxDb3Config, SeparatedList};\n+use base64::engine::general_purpose::URL_SAFE_NO_PAD as B64;\n+use base64::Engine as _;\n+use rand::rngs::OsRng;\n+use rand::RngCore;\n+use secrecy::ExposeSecret;\n+use secrecy::Secret;\n+use sha2::Digest;\n+use sha2::Sha512;\n+use std::error::Error;\n+use std::num::NonZeroUsize;\n+use std::str;\n+use url::Url;\n+\n+#[derive(Debug, clap::Parser)]\n+pub struct Config {\n+    #[clap(subcommand)]\n+    cmd: SubCommand,\n+}\n+\n+#[derive(Debug, clap::Subcommand)]\n+pub enum SubCommand {\n+    /// Create a new database\n+    Database(DatabaseConfig),\n+    /// Create a new table in a database\n+    Table(TableConfig),\n+    /// Create a new auth token\n+    Token,\n+    /// Create a new last cache\n+    LastCache(LastCacheConfig),\n+    /// Create a new metacache\n+    MetaCache(MetaCacheConfig),\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct DatabaseConfig {\n+    /// The host URL of the running InfluxDB 3 Core server\n+    #[clap(\n+        short = 'H',\n+        long = \"host\",\n+        env = \"INFLUXDB3_HOST_URL\",\n+        default_value = \"http://127.0.0.1:8181\"\n+    )]\n+    pub host_url: Url,\n+\n+    /// The token for authentication with the InfluxDB 3 Core server\n+    #[clap(long = \"token\", env = \"INFLUXDB3_AUTH_TOKEN\")]\n+    pub auth_token: Option<Secret<String>>,\n+\n+    /// The database name to run the query against\n+    #[clap(env = \"INFLUXDB3_DATABASE_NAME\", required = true)]\n+    pub database_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct TableConfig {\n+    #[clap(long = \"tags\", required = true, num_args=0..)]\n+    tags: Vec<String>,\n+\n+    #[clap(short = 'f', long = \"fields\", value_parser = parse_key_val::<String, DataType>, required = true, num_args=0..)]\n+    fields: Vec<(String, DataType)>,\n+\n+    #[clap(flatten)]\n+    influxdb3_config: InfluxDb3Config,\n+\n+    #[clap(required = true)]\n+    table_name: String,\n+}\n+\n+#[derive(Debug, clap::Args)]\n+pub struct LastCacheConfig {\n+    #[clap(flatten)]\n+    influxdb3_config: InfluxDb3Config,\n+\n+    /// The table name for which the cache is being created\n+    #[clap(short = 't', long = \"table\")]\n+    table: String,\n+\n+    /// Give a name for the cache.\n+    #[clap(long = \"cache-name\")]\n+    cache_name: Option<String>,\n+\n+    /// Which columns in the table to use as keys in the cache",
        "comment_created_at": "2025-01-03T22:32:45+00:00",
        "comment_author": "pauldix",
        "comment_body": "Update to include information that it's a comma separated list and provide an example.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1773371741",
    "pr_number": 25380,
    "pr_file": "influxdb3/src/commands/serve.rs",
    "created_at": "2024-09-24T13:40:00+00:00",
    "commented_code": "Ok(())\n }\n \n+async fn setup_telemetry_store(\n+    object_store_config: &ObjectStoreConfig,\n+    instance_id: Arc<str>,\n+    num_cpus: usize,\n+) -> Arc<TelemetryStore> {\n+    let os = std::env::consts::OS;\n+    let influxdb_pkg_version = env!(\"CARGO_PKG_VERSION\");\n+    let influxdb_pkg_name = env!(\"CARGO_PKG_NAME\");\n+    let influx_version = format!(\"{}-{}\", influxdb_pkg_name, influxdb_pkg_version);",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1773371741",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25380,
        "pr_file": "influxdb3/src/commands/serve.rs",
        "discussion_id": "1773371741",
        "commented_code": "@@ -372,6 +377,30 @@ pub async fn command(config: Config) -> Result<()> {\n     Ok(())\n }\n \n+async fn setup_telemetry_store(\n+    object_store_config: &ObjectStoreConfig,\n+    instance_id: Arc<str>,\n+    num_cpus: usize,\n+) -> Arc<TelemetryStore> {\n+    let os = std::env::consts::OS;\n+    let influxdb_pkg_version = env!(\"CARGO_PKG_VERSION\");\n+    let influxdb_pkg_name = env!(\"CARGO_PKG_NAME\");\n+    let influx_version = format!(\"{}-{}\", influxdb_pkg_name, influxdb_pkg_version);",
        "comment_created_at": "2024-09-24T13:40:00+00:00",
        "comment_author": "pauldix",
        "comment_body": "Can you add a comment with some examples of what you expect this to be? e.g. \"influxdb3-3.0.1\"",
        "pr_file_module": null
      }
    ]
  }
]