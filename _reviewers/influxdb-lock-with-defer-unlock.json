[
  {
    "discussion_id": "1803793441",
    "pr_number": 25398,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-10-16T21:00:30+00:00",
    "commented_code": "return sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1803793441",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803793441",
        "commented_code": "@@ -672,6 +673,26 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)",
        "comment_created_at": "2024-10-16T21:00:30+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "I believe that this needs to be protected by the `s.badShards.mu` throughout this method.\r\n\r\n`s.badShards.shardErrors` should never be `nil`, so we probably want to do two things:\r\n\r\n1. Log a warning\r\n2. Set `s.badShards.ShardErrors`  to an empty map.\r\n\r\nThen we can proceed with the clone and clear code below which will be the same in all cases.\r\n\r\n ",
        "pr_file_module": null
      },
      {
        "comment_id": "1803827901",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803793441",
        "commented_code": "@@ -672,6 +673,26 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)",
        "comment_created_at": "2024-10-16T21:37:23+00:00",
        "comment_author": "gwossum",
        "comment_body": "`ClearBadShardList` should use `GetBadShardList` so that all the mutex and clone logic is localized to a single method.",
        "pr_file_module": null
      },
      {
        "comment_id": "1803862164",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803793441",
        "commented_code": "@@ -672,6 +673,26 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)",
        "comment_created_at": "2024-10-16T22:20:06+00:00",
        "comment_author": "devanbenz",
        "comment_body": "That would produce: \r\n\r\n```go\r\nfunc (s *Store) ClearBadShardList() map[uint64]error {\r\n\tbadShards := s.GetBadShardList()\r\n\tclear(s.badShards.shardErrors)\r\n\r\n\treturn badShards\r\n}\r\n\r\n// GetBadShardList is exposed as a method for test purposes\r\nfunc (s *Store) GetBadShardList() map[uint64]error {\r\n\ts.badShards.mu.Lock()\r\n\tdefer s.badShards.mu.Unlock()\r\n\r\n\tif s.badShards.shardErrors == nil {\r\n\t\ts.Logger.Warn(\"badShards was nil\")\r\n\t\ts.badShards.shardErrors = make(map[uint64]error)\r\n\t}\r\n\r\n\tshardList := maps.Clone(s.badShards.shardErrors)\r\n\r\n\treturn shardList\r\n}\r\n```\r\n\r\nSo it's likely I would still need to use a mutex in `ClearBadShardList()` to call the `clear()` method on the original map? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1803906639",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803793441",
        "commented_code": "@@ -672,6 +673,26 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)",
        "comment_created_at": "2024-10-16T23:26:58+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Yes, you must use the mutex around the `clear`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1803794320",
    "pr_number": 25398,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-10-16T21:01:24+00:00",
    "commented_code": "return sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)\n+\t\treturn badShards\n+\t}\n+\tbadShards := maps.Clone(s.badShards.shardErrors)\n+\tclear(s.badShards.shardErrors)\n+\n+\treturn badShards\n+}\n+\n+// GetBadShardList is exposed as a method for test purposes\n+func (s *Store) GetBadShardList() map[uint64]error {\n+\treturn s.badShards.shardErrors",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1803794320",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803794320",
        "commented_code": "@@ -672,6 +673,26 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tif s.badShards.shardErrors == nil {\n+\t\tbadShards := make(map[uint64]error)\n+\t\treturn badShards\n+\t}\n+\tbadShards := maps.Clone(s.badShards.shardErrors)\n+\tclear(s.badShards.shardErrors)\n+\n+\treturn badShards\n+}\n+\n+// GetBadShardList is exposed as a method for test purposes\n+func (s *Store) GetBadShardList() map[uint64]error {\n+\treturn s.badShards.shardErrors",
        "comment_created_at": "2024-10-16T21:01:24+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "This needs to be protected by the mutex here, and the return value cloned for safety.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1803825065",
    "pr_number": 25398,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-10-16T21:34:04+00:00",
    "commented_code": "// longer in a \"bad\" state. This method will return any shards that\n // were removed from the cache.\n func (s *Store) ClearBadShardList() map[uint64]error {\n+\ts.badShards.mu.Lock()\n \tif s.badShards.shardErrors == nil {\n-\t\tbadShards := make(map[uint64]error)\n-\t\treturn badShards\n+\t\ts.Logger.Warn(\"badShards was nil\")\n+\t\ts.badShards.shardErrors = make(map[uint64]error)\n \t}\n \tbadShards := maps.Clone(s.badShards.shardErrors)\n \tclear(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1803825065",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803825065",
        "commented_code": "@@ -678,19 +678,25 @@ func (s *Store) Shard(id uint64) *Shard {\n // longer in a \"bad\" state. This method will return any shards that\n // were removed from the cache.\n func (s *Store) ClearBadShardList() map[uint64]error {\n+\ts.badShards.mu.Lock()\n \tif s.badShards.shardErrors == nil {\n-\t\tbadShards := make(map[uint64]error)\n-\t\treturn badShards\n+\t\ts.Logger.Warn(\"badShards was nil\")\n+\t\ts.badShards.shardErrors = make(map[uint64]error)\n \t}\n \tbadShards := maps.Clone(s.badShards.shardErrors)\n \tclear(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()",
        "comment_created_at": "2024-10-16T21:34:04+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "I would use `defer` immediately after the `Lock` call as future-proofing against other code paths being added, as well as idiomatic Go.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1803825921",
    "pr_number": 25398,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-10-16T21:35:07+00:00",
    "commented_code": "// longer in a \"bad\" state. This method will return any shards that\n // were removed from the cache.\n func (s *Store) ClearBadShardList() map[uint64]error {\n+\ts.badShards.mu.Lock()\n \tif s.badShards.shardErrors == nil {\n-\t\tbadShards := make(map[uint64]error)\n-\t\treturn badShards\n+\t\ts.Logger.Warn(\"badShards was nil\")\n+\t\ts.badShards.shardErrors = make(map[uint64]error)\n \t}\n \tbadShards := maps.Clone(s.badShards.shardErrors)\n \tclear(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()\n \n \treturn badShards\n }\n \n // GetBadShardList is exposed as a method for test purposes\n func (s *Store) GetBadShardList() map[uint64]error {\n-\treturn s.badShards.shardErrors\n+\ts.badShards.mu.Lock()\n+\tshardList := maps.Clone(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1803825921",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1803825921",
        "commented_code": "@@ -678,19 +678,25 @@ func (s *Store) Shard(id uint64) *Shard {\n // longer in a \"bad\" state. This method will return any shards that\n // were removed from the cache.\n func (s *Store) ClearBadShardList() map[uint64]error {\n+\ts.badShards.mu.Lock()\n \tif s.badShards.shardErrors == nil {\n-\t\tbadShards := make(map[uint64]error)\n-\t\treturn badShards\n+\t\ts.Logger.Warn(\"badShards was nil\")\n+\t\ts.badShards.shardErrors = make(map[uint64]error)\n \t}\n \tbadShards := maps.Clone(s.badShards.shardErrors)\n \tclear(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()\n \n \treturn badShards\n }\n \n // GetBadShardList is exposed as a method for test purposes\n func (s *Store) GetBadShardList() map[uint64]error {\n-\treturn s.badShards.shardErrors\n+\ts.badShards.mu.Lock()\n+\tshardList := maps.Clone(s.badShards.shardErrors)\n+\ts.badShards.mu.Unlock()",
        "comment_created_at": "2024-10-16T21:35:07+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "As suggested above, I would use `defer` immediately after the `Lock` call. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1805274956",
    "pr_number": 25398,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-10-17T18:55:48+00:00",
    "commented_code": "return sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tbadShards := s.GetBadShardList()\n+\tclear(s.badShards.shardErrors)",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1805274956",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1805274956",
        "commented_code": "@@ -672,6 +673,32 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tbadShards := s.GetBadShardList()\n+\tclear(s.badShards.shardErrors)",
        "comment_created_at": "2024-10-17T18:55:48+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Don't we need a mutex around the `clear`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1805420700",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25398,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1805274956",
        "commented_code": "@@ -672,6 +673,32 @@ func (s *Store) Shard(id uint64) *Shard {\n \treturn sh\n }\n \n+// ClearBadShardList will remove all shards from the badShards cache\n+// this will allow for lazy loading of bad shards if/when they are no\n+// longer in a \"bad\" state. This method will return any shards that\n+// were removed from the cache.\n+func (s *Store) ClearBadShardList() map[uint64]error {\n+\tbadShards := s.GetBadShardList()\n+\tclear(s.badShards.shardErrors)",
        "comment_created_at": "2024-10-17T20:53:08+00:00",
        "comment_author": "devanbenz",
        "comment_body": "Ah yeah - let me add that, something I was meaning to do per the comment above. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1951755974",
    "pr_number": 25998,
    "pr_file": "tsdb/shard.go",
    "created_at": "2025-02-11T23:38:37+00:00",
    "commented_code": "continue\n \t\t}\n \n-\t\tname := p.Name()\n-\t\tmf := engine.MeasurementFields(name)\n-\n-\t\t// Check with the field validator.\n-\t\tif err := ValidateFields(mf, p, s.options.Config.SkipFieldSizeValidation); err != nil {\n-\t\t\tswitch err := err.(type) {\n-\t\t\tcase PartialWriteError:\n-\t\t\t\tif reason == \"\" {\n-\t\t\t\t\treason = err.Reason\n+\t\tcont, err := func(p models.Point, iter models.FieldIterator) (cont bool, err error) {\n+\t\t\tname := p.Name()\n+\t\t\tmf := engine.MeasurementFields(name)\n+\t\t\tmf.mu.Lock()",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1951755974",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25998,
        "pr_file": "tsdb/shard.go",
        "discussion_id": "1951755974",
        "commented_code": "@@ -702,56 +702,64 @@ func (s *Shard) validateSeriesAndFields(points []models.Point, tracker StatsTrac\n \t\t\tcontinue\n \t\t}\n \n-\t\tname := p.Name()\n-\t\tmf := engine.MeasurementFields(name)\n-\n-\t\t// Check with the field validator.\n-\t\tif err := ValidateFields(mf, p, s.options.Config.SkipFieldSizeValidation); err != nil {\n-\t\t\tswitch err := err.(type) {\n-\t\t\tcase PartialWriteError:\n-\t\t\t\tif reason == \"\" {\n-\t\t\t\t\treason = err.Reason\n+\t\tcont, err := func(p models.Point, iter models.FieldIterator) (cont bool, err error) {\n+\t\t\tname := p.Name()\n+\t\t\tmf := engine.MeasurementFields(name)\n+\t\t\tmf.mu.Lock()",
        "comment_created_at": "2025-02-11T23:38:37+00:00",
        "comment_author": "gwossum",
        "comment_body": "It feels like there is still a potential race condition. We lock the `mf` while looking up fields here, but then unlock it while we continue to the next point. Another incoming write in a different goroutine could then look up fields in `mf` before this goroutine can create the new fields. Or am I missing something?",
        "pr_file_module": null
      },
      {
        "comment_id": "1951760799",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25998,
        "pr_file": "tsdb/shard.go",
        "discussion_id": "1951755974",
        "commented_code": "@@ -702,56 +702,64 @@ func (s *Shard) validateSeriesAndFields(points []models.Point, tracker StatsTrac\n \t\t\tcontinue\n \t\t}\n \n-\t\tname := p.Name()\n-\t\tmf := engine.MeasurementFields(name)\n-\n-\t\t// Check with the field validator.\n-\t\tif err := ValidateFields(mf, p, s.options.Config.SkipFieldSizeValidation); err != nil {\n-\t\t\tswitch err := err.(type) {\n-\t\t\tcase PartialWriteError:\n-\t\t\t\tif reason == \"\" {\n-\t\t\t\t\treason = err.Reason\n+\t\tcont, err := func(p models.Point, iter models.FieldIterator) (cont bool, err error) {\n+\t\t\tname := p.Name()\n+\t\t\tmf := engine.MeasurementFields(name)\n+\t\t\tmf.mu.Lock()",
        "comment_created_at": "2025-02-11T23:45:53+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "The field creation has its own locking and checks yet again for field type conflicts. So either of the go routines may win, and the other will report an error.\r\n\r\nSo, the race you describe is real, but gets sequenced in field creation.",
        "pr_file_module": null
      },
      {
        "comment_id": "1953551094",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25998,
        "pr_file": "tsdb/shard.go",
        "discussion_id": "1951755974",
        "commented_code": "@@ -702,56 +702,64 @@ func (s *Shard) validateSeriesAndFields(points []models.Point, tracker StatsTrac\n \t\t\tcontinue\n \t\t}\n \n-\t\tname := p.Name()\n-\t\tmf := engine.MeasurementFields(name)\n-\n-\t\t// Check with the field validator.\n-\t\tif err := ValidateFields(mf, p, s.options.Config.SkipFieldSizeValidation); err != nil {\n-\t\t\tswitch err := err.(type) {\n-\t\t\tcase PartialWriteError:\n-\t\t\t\tif reason == \"\" {\n-\t\t\t\t\treason = err.Reason\n+\t\tcont, err := func(p models.Point, iter models.FieldIterator) (cont bool, err error) {\n+\t\t\tname := p.Name()\n+\t\t\tmf := engine.MeasurementFields(name)\n+\t\t\tmf.mu.Lock()",
        "comment_created_at": "2025-02-12T23:30:09+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "I changed the `MeasurementFields` lock to a `RWMutex` and used an `RLock` in  `Shard.validateSeriesAndFields` to allow greater parallelism. \r\n\r\nThe lock has to be taken on a per point basis, because points can differ in which measurement they pertain to, and thus which `MeasurementFields` object has to be locked.\r\n\r\n `MeasurementFields.CreateFieldIfNotExists` still uses the full lock, of course.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904788399",
    "pr_number": 25710,
    "pr_file": "query/file_log_watcher.go",
    "created_at": "2025-01-07T01:03:28+00:00",
    "commented_code": "+package query\n+\n+import (\n+\t\"os\"\n+\t\"sync\"\n+\n+\t\"github.com/fsnotify/fsnotify\"\n+\tl \"github.com/influxdata/influxdb/logger\"\n+\t\"go.uber.org/zap\"\n+\t\"go.uber.org/zap/zapcore\"\n+)\n+\n+type FileLogWatcher struct {\n+\tpath            string\n+\tcurrFile        *os.File\n+\tlogger          *zap.Logger\n+\tformatterConfig string\n+\texecutor        *Executor\n+\tmu              sync.Mutex\n+\tfsWatcher       *fsnotify.Watcher\n+}\n+\n+func (f *FileLogWatcher) Event() chan fsnotify.Event {\n+\treturn f.fsWatcher.Events\n+}\n+\n+func (f *FileLogWatcher) Error() chan error {\n+\treturn f.fsWatcher.Errors\n+}\n+\n+func (f *FileLogWatcher) Add(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Add(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Remove(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Remove(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func NewFileLogWatcher(e *Executor, path string, logger *zap.Logger, format string) *FileLogWatcher {\n+\t// FileWatcher is not meant to be used with interactive shell sessions so\n+\t// console as a logging format will not be supported.\n+\tif format == \"console\" {\n+\t\tlogger.Error(\"unknown logging format\", zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tif format == \"\" || format == \"auto\" {\n+\t\tformat = \"logfmt\"\n+\t}\n+\n+\tlogFile, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to open log file\", zap.Error(err))\n+\t\treturn nil\n+\t}\n+\n+\texistingCore := logger.Core()\n+\tencoder, err := l.NewEncoder(format)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create log encoder\", zap.Error(err), zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tlogger = zap.New(newCore)\n+\n+\tfsWatcher, err := fsnotify.NewWatcher()\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create fsnotify watcher\", zap.Error(err), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\treturn &FileLogWatcher{\n+\t\tlogger:          logger,\n+\t\tpath:            path,\n+\t\tcurrFile:        logFile,\n+\t\texecutor:        e,\n+\t\tformatterConfig: format,\n+\t\tmu:              sync.Mutex{},\n+\t\tfsWatcher:       fsWatcher,\n+\t}\n+}\n+\n+func (f *FileLogWatcher) GetLogger() *zap.Logger {\n+\treturn f.logger",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1904788399",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25710,
        "pr_file": "query/file_log_watcher.go",
        "discussion_id": "1904788399",
        "commented_code": "@@ -0,0 +1,164 @@\n+package query\n+\n+import (\n+\t\"os\"\n+\t\"sync\"\n+\n+\t\"github.com/fsnotify/fsnotify\"\n+\tl \"github.com/influxdata/influxdb/logger\"\n+\t\"go.uber.org/zap\"\n+\t\"go.uber.org/zap/zapcore\"\n+)\n+\n+type FileLogWatcher struct {\n+\tpath            string\n+\tcurrFile        *os.File\n+\tlogger          *zap.Logger\n+\tformatterConfig string\n+\texecutor        *Executor\n+\tmu              sync.Mutex\n+\tfsWatcher       *fsnotify.Watcher\n+}\n+\n+func (f *FileLogWatcher) Event() chan fsnotify.Event {\n+\treturn f.fsWatcher.Events\n+}\n+\n+func (f *FileLogWatcher) Error() chan error {\n+\treturn f.fsWatcher.Errors\n+}\n+\n+func (f *FileLogWatcher) Add(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Add(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Remove(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Remove(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func NewFileLogWatcher(e *Executor, path string, logger *zap.Logger, format string) *FileLogWatcher {\n+\t// FileWatcher is not meant to be used with interactive shell sessions so\n+\t// console as a logging format will not be supported.\n+\tif format == \"console\" {\n+\t\tlogger.Error(\"unknown logging format\", zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tif format == \"\" || format == \"auto\" {\n+\t\tformat = \"logfmt\"\n+\t}\n+\n+\tlogFile, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to open log file\", zap.Error(err))\n+\t\treturn nil\n+\t}\n+\n+\texistingCore := logger.Core()\n+\tencoder, err := l.NewEncoder(format)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create log encoder\", zap.Error(err), zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tlogger = zap.New(newCore)\n+\n+\tfsWatcher, err := fsnotify.NewWatcher()\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create fsnotify watcher\", zap.Error(err), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\treturn &FileLogWatcher{\n+\t\tlogger:          logger,\n+\t\tpath:            path,\n+\t\tcurrFile:        logFile,\n+\t\texecutor:        e,\n+\t\tformatterConfig: format,\n+\t\tmu:              sync.Mutex{},\n+\t\tfsWatcher:       fsWatcher,\n+\t}\n+}\n+\n+func (f *FileLogWatcher) GetLogger() *zap.Logger {\n+\treturn f.logger",
        "comment_created_at": "2025-01-07T01:03:28+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Does this need mutex protection?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1904792405",
    "pr_number": 25710,
    "pr_file": "query/file_log_watcher.go",
    "created_at": "2025-01-07T01:12:03+00:00",
    "commented_code": "+package query\n+\n+import (\n+\t\"os\"\n+\t\"sync\"\n+\n+\t\"github.com/fsnotify/fsnotify\"\n+\tl \"github.com/influxdata/influxdb/logger\"\n+\t\"go.uber.org/zap\"\n+\t\"go.uber.org/zap/zapcore\"\n+)\n+\n+type FileLogWatcher struct {\n+\tpath            string\n+\tcurrFile        *os.File\n+\tlogger          *zap.Logger\n+\tformatterConfig string\n+\texecutor        *Executor\n+\tmu              sync.Mutex\n+\tfsWatcher       *fsnotify.Watcher\n+}\n+\n+func (f *FileLogWatcher) Event() chan fsnotify.Event {\n+\treturn f.fsWatcher.Events\n+}\n+\n+func (f *FileLogWatcher) Error() chan error {\n+\treturn f.fsWatcher.Errors\n+}\n+\n+func (f *FileLogWatcher) Add(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Add(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Remove(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Remove(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func NewFileLogWatcher(e *Executor, path string, logger *zap.Logger, format string) *FileLogWatcher {\n+\t// FileWatcher is not meant to be used with interactive shell sessions so\n+\t// console as a logging format will not be supported.\n+\tif format == \"console\" {\n+\t\tlogger.Error(\"unknown logging format\", zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tif format == \"\" || format == \"auto\" {\n+\t\tformat = \"logfmt\"\n+\t}\n+\n+\tlogFile, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to open log file\", zap.Error(err))\n+\t\treturn nil\n+\t}\n+\n+\texistingCore := logger.Core()\n+\tencoder, err := l.NewEncoder(format)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create log encoder\", zap.Error(err), zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tlogger = zap.New(newCore)\n+\n+\tfsWatcher, err := fsnotify.NewWatcher()\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create fsnotify watcher\", zap.Error(err), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\treturn &FileLogWatcher{\n+\t\tlogger:          logger,\n+\t\tpath:            path,\n+\t\tcurrFile:        logFile,\n+\t\texecutor:        e,\n+\t\tformatterConfig: format,\n+\t\tmu:              sync.Mutex{},\n+\t\tfsWatcher:       fsWatcher,\n+\t}\n+}\n+\n+func (f *FileLogWatcher) GetLogger() *zap.Logger {\n+\treturn f.logger\n+}\n+\n+func (f *FileLogWatcher) GetLogPath() string {\n+\treturn f.path\n+}\n+\n+func (f *FileLogWatcher) FileChangeCapture() error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\n+\tif err := f.currFile.Sync(); err != nil {\n+\t\treturn err\n+\t}\n+\tif err := f.currFile.Close(); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tlogFile, err := os.OpenFile(f.path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tf.logger.Error(\"failed to open log file\", zap.Error(err), zap.String(\"path\", f.path))\n+\t\treturn nil\n+\t}\n+\tf.currFile = logFile\n+\texistingCore := f.logger.Core()\n+\tencoder, err := l.NewEncoder(f.formatterConfig)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tf.logger = zap.New(newCore)\n+\n+\tif err := f.fsWatcher.Add(f.path); err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Close() error {\n+\tif err := f.currFile.Sync(); err != nil {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1904792405",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25710,
        "pr_file": "query/file_log_watcher.go",
        "discussion_id": "1904792405",
        "commented_code": "@@ -0,0 +1,164 @@\n+package query\n+\n+import (\n+\t\"os\"\n+\t\"sync\"\n+\n+\t\"github.com/fsnotify/fsnotify\"\n+\tl \"github.com/influxdata/influxdb/logger\"\n+\t\"go.uber.org/zap\"\n+\t\"go.uber.org/zap/zapcore\"\n+)\n+\n+type FileLogWatcher struct {\n+\tpath            string\n+\tcurrFile        *os.File\n+\tlogger          *zap.Logger\n+\tformatterConfig string\n+\texecutor        *Executor\n+\tmu              sync.Mutex\n+\tfsWatcher       *fsnotify.Watcher\n+}\n+\n+func (f *FileLogWatcher) Event() chan fsnotify.Event {\n+\treturn f.fsWatcher.Events\n+}\n+\n+func (f *FileLogWatcher) Error() chan error {\n+\treturn f.fsWatcher.Errors\n+}\n+\n+func (f *FileLogWatcher) Add(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Add(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Remove(name string) error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\terr := f.fsWatcher.Remove(name)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil\n+}\n+\n+func NewFileLogWatcher(e *Executor, path string, logger *zap.Logger, format string) *FileLogWatcher {\n+\t// FileWatcher is not meant to be used with interactive shell sessions so\n+\t// console as a logging format will not be supported.\n+\tif format == \"console\" {\n+\t\tlogger.Error(\"unknown logging format\", zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tif format == \"\" || format == \"auto\" {\n+\t\tformat = \"logfmt\"\n+\t}\n+\n+\tlogFile, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to open log file\", zap.Error(err))\n+\t\treturn nil\n+\t}\n+\n+\texistingCore := logger.Core()\n+\tencoder, err := l.NewEncoder(format)\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create log encoder\", zap.Error(err), zap.String(\"format\", format), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tlogger = zap.New(newCore)\n+\n+\tfsWatcher, err := fsnotify.NewWatcher()\n+\tif err != nil {\n+\t\tlogger.Error(\"failed to create fsnotify watcher\", zap.Error(err), zap.String(\"path\", path))\n+\t\treturn nil\n+\t}\n+\n+\treturn &FileLogWatcher{\n+\t\tlogger:          logger,\n+\t\tpath:            path,\n+\t\tcurrFile:        logFile,\n+\t\texecutor:        e,\n+\t\tformatterConfig: format,\n+\t\tmu:              sync.Mutex{},\n+\t\tfsWatcher:       fsWatcher,\n+\t}\n+}\n+\n+func (f *FileLogWatcher) GetLogger() *zap.Logger {\n+\treturn f.logger\n+}\n+\n+func (f *FileLogWatcher) GetLogPath() string {\n+\treturn f.path\n+}\n+\n+func (f *FileLogWatcher) FileChangeCapture() error {\n+\tf.mu.Lock()\n+\tdefer f.mu.Unlock()\n+\n+\tif err := f.currFile.Sync(); err != nil {\n+\t\treturn err\n+\t}\n+\tif err := f.currFile.Close(); err != nil {\n+\t\treturn err\n+\t}\n+\n+\tlogFile, err := os.OpenFile(f.path, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)\n+\tif err != nil {\n+\t\tf.logger.Error(\"failed to open log file\", zap.Error(err), zap.String(\"path\", f.path))\n+\t\treturn nil\n+\t}\n+\tf.currFile = logFile\n+\texistingCore := f.logger.Core()\n+\tencoder, err := l.NewEncoder(f.formatterConfig)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tfileCore := zapcore.NewCore(\n+\t\tencoder,\n+\t\tzapcore.Lock(logFile),\n+\t\tzapcore.InfoLevel,\n+\t)\n+\n+\tnewCore := zapcore.NewTee(existingCore, fileCore)\n+\tf.logger = zap.New(newCore)\n+\n+\tif err := f.fsWatcher.Add(f.path); err != nil {\n+\t\treturn err\n+\t}\n+\n+\treturn nil\n+}\n+\n+func (f *FileLogWatcher) Close() error {\n+\tif err := f.currFile.Sync(); err != nil {",
        "comment_created_at": "2025-01-07T01:12:03+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "- Do we need mutex protection here?\r\n- We should always close the file, even if the sync fails.\r\n- We should close the `fsWatcher` even if the sync or close fails\r\n- `errors.Join` is your friend.",
        "pr_file_module": null
      }
    ]
  }
]