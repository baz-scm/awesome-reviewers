[
  {
    "discussion_id": "2098565580",
    "pr_number": 26432,
    "pr_file": "tsdb/engine/tsm1/compact_test.go",
    "created_at": "2025-05-20T17:55:25+00:00",
    "commented_code": "}\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2098565580",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098565580",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:",
        "comment_created_at": "2025-05-20T17:55:25+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "For ease of reading, I would make the case \r\n\r\n`case tsm1.PT_SmartOptimize, tsm1.PT_NoOptimize:`\r\n\r\nif you have two identical results.  Later changes which differentiate the cases can be made by dividing the case branches as necessary. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2098568890",
    "pr_number": 26432,
    "pr_file": "tsdb/engine/tsm1/compact_test.go",
    "created_at": "2025-05-20T17:57:21+00:00",
    "commented_code": "}\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2098568890",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T17:57:21+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Same comment as above; combine cases where possible. This highlights that the two options behave the same (when they do).\r\n\r\nAlso, I think there should be cases here where we see different results for  standard and smart optimize.",
        "pr_file_module": null
      },
      {
        "comment_id": "2098577247",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T18:02:11+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Finally, would a `map` be better than case statements?  Just a thought, to have fully table-driven code.\r\n```\r\nvar results map[tsm1.PlanType]testLeveltResults = {tsm1.PT_Standard: testlevelReesults{.....\r\n```\r\n\r\nI'm not sure which I prefer, so use case or map whichever seems best to you.",
        "pr_file_module": null
      },
      {
        "comment_id": "2098656510",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T18:50:44+00:00",
        "comment_author": "devanbenz",
        "comment_body": "I think that using a map could seem nice. I'm wondering if theres a good way to make multiple keys have the same value :thinking: \r\n\r\n```go\r\n\t\t\tresults: map[tsm1.PlanType]testLevelResults{\r\n\t\t\t\ttsm1.PT_SmartOptimize: {\r\n\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\r\n\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\ttsm1.PT_NoOptimize: {\r\n\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\r\n\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\ttsm1.PT_Standard: {\r\n\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\r\n\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2098663908",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T18:55:42+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Define the common result in a variable, then put that in the map.",
        "pr_file_module": null
      },
      {
        "comment_id": "2098669985",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T18:59:58+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "```\r\ntype Element struct {\r\n    Name  string\r\n    Value int\r\n}\r\n\r\nvar repeatedElement = Element{Name: \"Element1\", Value: 10}\r\n\r\nelements := map[string]Element{\r\n    \"key1\": repeatedElement,\r\n    \"key2\": {Name: \"Element2\", Value: 20},\r\n    \"key3\": repeatedElement, // Reuse the variable\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2098734703",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2098568890",
        "commented_code": "@@ -4180,78 +4032,272 @@ func TestIsGroupOptimized(t *testing.T) {\n }\n \n func TestEnginePlanCompactions(t *testing.T) {\n-\ttestFileSets := [][]tsm1.FileStat{\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-04.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t\t[]tsm1.FileStat{\n-\t\t\t{\n-\t\t\t\tPath: \"01-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"02-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"03-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t\t{\n-\t\t\t\tPath: \"04-05.tsm\",\n-\t\t\t\tSize: 256 * 1024 * 1024,\n-\t\t\t},\n-\t\t},\n-\t}\n-\ttestBlockCountsAndResults := []struct {\n-\t\tblockCounts  []int\n+\ttype testLevelResults struct {\n \t\tlevel1Groups []tsm1.PlannedCompactionGroup\n \t\tlevel2Groups []tsm1.PlannedCompactionGroup\n \t\tlevel3Groups []tsm1.PlannedCompactionGroup\n \t\tlevel4Groups []tsm1.PlannedCompactionGroup\n \t\tlevel5Groups []tsm1.PlannedCompactionGroup\n-\t}{\n+\t}\n+\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n+\t}\n+\n+\ttests := []testEnginePlanCompactionsRunner{\n \t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n \t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t},\n-\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n-\t\t\t\t{\n-\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n-\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n-\t\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{\n+\t\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n \t\t\t},\n \t\t},\n \t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n \t\t\tblockCounts: []int{\n-\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n \t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:",
        "comment_created_at": "2025-05-20T19:43:18+00:00",
        "comment_author": "devanbenz",
        "comment_body": "Hmmm I kinda like doing it with the switch + function better. \r\n\r\n```go\r\n\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\r\n\t\t\t\tcommon := testLevelResults{\r\n\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\", \"01-06.tsm1\", \"01-07.tsm1\", \"01-08.tsm1\", \"02-05.tsm1\", \"02-06.tsm1\", \"02-07.tsm1\", \"02-08.tsm1\", \"03-04.tsm1\", \"03-05.tsm1\"},\r\n\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch planType {\r\n\t\t\t\tcase tsm1.PT_Standard:\r\n\t\t\t\t\treturn common\r\n\t\t\t\tcase tsm1.PT_SmartOptimize:\r\n\t\t\t\t\treturn common\r\n\t\t\t\tcase tsm1.PT_NoOptimize:\r\n\t\t\t\t\treturn testLevelResults{}\r\n\t\t\t\t}\r\n\t\t\t\treturn testLevelResults{}\r\n\t\t\t},\r\n```\r\n\r\nI'm able to just throw the common var in the function body. I quite like this. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2099058745",
    "pr_number": 26432,
    "pr_file": "tsdb/engine/tsm1/compact_test.go",
    "created_at": "2025-05-21T00:01:41+00:00",
    "commented_code": "}\n }\n \n-func TestDefaultPlanner_Plan_LargeGeneration(t *testing.T) {\n-\tcp := tsm1.NewDefaultPlanner(\n-\t\t&fakeFileStore{\n-\t\t\tPathsFn: func() []tsm1.FileStat {\n-\t\t\t\treturn []tsm1.FileStat{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000006.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000007.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000008.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000047040.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000047041.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t}\n-\t\t\t},\n-\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n-\t)\n+func TestDefaultPlanner_Plan_LargeGeneration(t *testing.T) {\n+\tcp := tsm1.NewDefaultPlanner(\n+\t\t&fakeFileStore{\n+\t\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\t\treturn []tsm1.FileStat{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000006.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000007.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000008.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000047040.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000047041.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t}\n+\t\t\t},\n+\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n+\t)\n+\n+\ttsm, pLen := cp.Plan(time.Now())\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+}\n+\n+func TestDefaultPlanner_Plan_ForceFull(t *testing.T) {\n+\tcp := tsm1.NewDefaultPlanner(\n+\t\t&fakeFileStore{\n+\t\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\t\treturn []tsm1.FileStat{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000001-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000002-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000003-000000001.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000004-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000005-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000006-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000007-000000001.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000008-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000009-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000010-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000011-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000012-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000013-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t}\n+\t\t\t},\n+\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n+\t)\n+\n+\ttsm, pLen := cp.PlanLevel(1)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\tcp.ForceFull()\n+\n+\t// Level plans should not return any plans\n+\ttsm, pLen = cp.PlanLevel(1)\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.Plan(time.Now())\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\n+\tif got, exp := len(tsm[0]), 13; got != exp {\n+\t\tt.Fatalf(\"plan length mismatch: got %v, exp %v\", got, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\t// Level plans should return plans now that Plan has been called\n+\ttsm, pLen = cp.PlanLevel(1)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+}\n+\n+func TestIsGroupOptimized(t *testing.T) {\n+\ttestSet := []tsm1.FileStat{\n+\t\t{\n+\t\t\tPath: \"01-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"02-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"03-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"04-04.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t}\n+\tblockCounts := []struct {\n+\t\tblockCounts   []int\n+\t\toptimizedName string\n+\t}{\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"01-05.tsm\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"02-05.tsm\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"04-04.tsm\",\n+\t\t},\n+\t}\n+\n+\tffs := &fakeFileStore{\n+\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\treturn testSet\n+\t\t},\n+\t}\n+\tcp := tsm1.NewDefaultPlanner(ffs, tsdb.DefaultCompactFullWriteColdDuration)\n+\n+\te := MustOpenEngine(tsdb.InmemIndexName)\n+\te.CompactionPlan = cp\n+\te.Compactor = tsm1.NewCompactor()\n+\te.Compactor.FileStore = ffs\n+\n+\tfileGroup := make([]string, 0, len(testSet))\n+\tfor j := 0; j < len(testSet); j++ {\n+\t\tfileGroup = append(fileGroup, testSet[j].Path)\n+\t}\n+\n+\tfor i := 0; i < len(blockCounts); i++ {\n+\t\trequire.NoError(t, ffs.SetBlockCounts(blockCounts[i].blockCounts), \"failed setting block counts\")\n+\t\tok, fName, _ := e.IsGroupOptimized(fileGroup)\n+\t\trequire.Equal(t, blockCounts[i].optimizedName != \"\", ok, \"unexpected result for optimization check\")\n+\t\trequire.Equal(t, blockCounts[i].optimizedName, fName, \"unexpected file name in optimization check\")\n+\t}\n+}\n+\n+func TestEnginePlanCompactions(t *testing.T) {\n+\ttype testLevelResults struct {\n+\t\tlevel1Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel2Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel3Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel4Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel5Groups []tsm1.PlannedCompactionGroup\n+\t}\n \n-\ttsm, pLen := cp.Plan(time.Now())\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n \t}\n-}\n \n-func TestDefaultPlanner_Plan_ForceFull(t *testing.T) {\n-\tcp := tsm1.NewDefaultPlanner(\n-\t\t&fakeFileStore{\n-\t\t\tPathsFn: func() []tsm1.FileStat {\n-\t\t\t\treturn []tsm1.FileStat{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000001-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000002-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000003-000000001.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000004-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000005-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000006-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000007-000000001.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000008-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000009-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000010-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000011-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\ttests := []testEnginePlanCompactionsRunner{\n+\t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000012-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t}\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\", \"01-06.tsm1\", \"01-07.tsm1\", \"01-08.tsm1\", \"02-05.tsm1\", \"02-06.tsm1\", \"02-07.tsm1\", \"02-08.tsm1\", \"03-04.tsm1\", \"03-05.tsm1\"},\n+\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000013-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t}\n+\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts:   make([]int, 0),\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n \t\t\t\t}\n-\t\t\t},\n-\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n-\t)\n-\n-\ttsm, pLen := cp.PlanLevel(1)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\tcp.ForceFull()\n-\n-\t// Level plans should not return any plans\n-\ttsm, pLen = cp.PlanLevel(1)\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n \n-\ttsm, pLen = cp.Plan(time.Now())\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation and levels under 4\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-02.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-03.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-04.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-02.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-03.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-04.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\tif got, exp := len(tsm[0]), 13; got != exp {\n-\t\tt.Fatalf(\"plan length mismatch: got %v, exp %v\", got, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation all at DefaultMaxPointsPerBlock\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts:   []int{tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\t// Level plans should return plans now that Plan has been called\n-\ttsm, pLen = cp.PlanLevel(1)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation 50% at DefaultMaxPointsPerBlock and 50% at DefaultAggressiveMaxPointsPerBlock\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 700 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 500 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 400 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-09.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-10.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-11.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-12.tsm1\",\n+\t\t\t\t\tSize: 25 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-09.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-10.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-11.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-12.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2099058745",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26432,
        "pr_file": "tsdb/engine/tsm1/compact_test.go",
        "discussion_id": "2099058745",
        "commented_code": "@@ -3779,477 +2699,1362 @@ func TestDefaultPlanner_Plan_CompactsMiddleSteps(t *testing.T) {\n \t}\n }\n \n-func TestDefaultPlanner_Plan_LargeGeneration(t *testing.T) {\n-\tcp := tsm1.NewDefaultPlanner(\n-\t\t&fakeFileStore{\n-\t\t\tPathsFn: func() []tsm1.FileStat {\n-\t\t\t\treturn []tsm1.FileStat{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000006.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000007.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000000008.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000047040.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000278-000047041.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t}\n-\t\t\t},\n-\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n-\t)\n+func TestDefaultPlanner_Plan_LargeGeneration(t *testing.T) {\n+\tcp := tsm1.NewDefaultPlanner(\n+\t\t&fakeFileStore{\n+\t\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\t\treturn []tsm1.FileStat{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000006.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000007.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000000008.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000047040.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000278-000047041.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t}\n+\t\t\t},\n+\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n+\t)\n+\n+\ttsm, pLen := cp.Plan(time.Now())\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+}\n+\n+func TestDefaultPlanner_Plan_ForceFull(t *testing.T) {\n+\tcp := tsm1.NewDefaultPlanner(\n+\t\t&fakeFileStore{\n+\t\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\t\treturn []tsm1.FileStat{\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000001-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000002-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000003-000000001.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000004-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000005-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148340232,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000006-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148356556,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000007-000000001.tsm\",\n+\t\t\t\t\t\tSize: 167780181,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000008-000000001.tsm\",\n+\t\t\t\t\t\tSize: 2148728539,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000009-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000010-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000011-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000012-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPath: \"000000013-000000002.tsm\",\n+\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t\t},\n+\t\t\t\t}\n+\t\t\t},\n+\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n+\t)\n+\n+\ttsm, pLen := cp.PlanLevel(1)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\tcp.ForceFull()\n+\n+\t// Level plans should not return any plans\n+\ttsm, pLen = cp.PlanLevel(1)\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 0, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.Plan(time.Now())\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\n+\tif got, exp := len(tsm[0]), 13; got != exp {\n+\t\tt.Fatalf(\"plan length mismatch: got %v, exp %v\", got, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\t// Level plans should return plans now that Plan has been called\n+\ttsm, pLen = cp.PlanLevel(1)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+\ttsm, pLen = cp.PlanLevel(2)\n+\tif exp, got := 1, len(tsm); got != exp {\n+\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n+\t} else if pLen != int64(len(tsm)) {\n+\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\t}\n+\tcp.Release(tsm)\n+\n+}\n+\n+func TestIsGroupOptimized(t *testing.T) {\n+\ttestSet := []tsm1.FileStat{\n+\t\t{\n+\t\t\tPath: \"01-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"02-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"03-05.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t\t{\n+\t\t\tPath: \"04-04.tsm\",\n+\t\t\tSize: 256 * 1024 * 1024,\n+\t\t},\n+\t}\n+\tblockCounts := []struct {\n+\t\tblockCounts   []int\n+\t\toptimizedName string\n+\t}{\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"01-05.tsm\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"02-05.tsm\",\n+\t\t},\n+\t\t{\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\toptimizedName: \"04-04.tsm\",\n+\t\t},\n+\t}\n+\n+\tffs := &fakeFileStore{\n+\t\tPathsFn: func() []tsm1.FileStat {\n+\t\t\treturn testSet\n+\t\t},\n+\t}\n+\tcp := tsm1.NewDefaultPlanner(ffs, tsdb.DefaultCompactFullWriteColdDuration)\n+\n+\te := MustOpenEngine(tsdb.InmemIndexName)\n+\te.CompactionPlan = cp\n+\te.Compactor = tsm1.NewCompactor()\n+\te.Compactor.FileStore = ffs\n+\n+\tfileGroup := make([]string, 0, len(testSet))\n+\tfor j := 0; j < len(testSet); j++ {\n+\t\tfileGroup = append(fileGroup, testSet[j].Path)\n+\t}\n+\n+\tfor i := 0; i < len(blockCounts); i++ {\n+\t\trequire.NoError(t, ffs.SetBlockCounts(blockCounts[i].blockCounts), \"failed setting block counts\")\n+\t\tok, fName, _ := e.IsGroupOptimized(fileGroup)\n+\t\trequire.Equal(t, blockCounts[i].optimizedName != \"\", ok, \"unexpected result for optimization check\")\n+\t\trequire.Equal(t, blockCounts[i].optimizedName, fName, \"unexpected file name in optimization check\")\n+\t}\n+}\n+\n+func TestEnginePlanCompactions(t *testing.T) {\n+\ttype testLevelResults struct {\n+\t\tlevel1Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel2Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel3Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel4Groups []tsm1.PlannedCompactionGroup\n+\t\tlevel5Groups []tsm1.PlannedCompactionGroup\n+\t}\n \n-\ttsm, pLen := cp.Plan(time.Now())\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n+\ttype testEnginePlanCompactionsRunner struct {\n+\t\tname        string\n+\t\tfiles       []tsm1.FileStat\n+\t\tblockCounts []int\n+\t\t// This is specifically used to adjust the modification time\n+\t\t// so we can simulate the passage of time in tests\n+\t\ttestShardTime time.Duration\n+\t\t// Each result is for the different plantypes\n+\t\tgetResultByPlanType func(planType tsm1.PlanType) testLevelResults\n \t}\n-}\n \n-func TestDefaultPlanner_Plan_ForceFull(t *testing.T) {\n-\tcp := tsm1.NewDefaultPlanner(\n-\t\t&fakeFileStore{\n-\t\t\tPathsFn: func() []tsm1.FileStat {\n-\t\t\t\treturn []tsm1.FileStat{\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000001-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000002-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000003-000000001.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000004-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000005-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148340232,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000006-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148356556,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000007-000000001.tsm\",\n-\t\t\t\t\t\tSize: 167780181,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000008-000000001.tsm\",\n-\t\t\t\t\t\tSize: 2148728539,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000009-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000010-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n-\t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000011-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\ttests := []testEnginePlanCompactionsRunner{\n+\t\t{\n+\t\t\tname: \"many generations under 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"04-04.tsm\",\n+\t\t\t\t\tSize: 256 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel4Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm\", \"02-05.tsm\", \"03-05.tsm\", \"04-04.tsm\"},\n+\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000012-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t}\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Many generations with files over 2GB\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-05.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-06.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-07.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"02-08.tsm1\",\n+\t\t\t\t\tSize: 1048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-04.tsm1\",\n+\t\t\t\t\tSize: 2048 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"03-05.tsm1\",\n+\t\t\t\t\tSize: 512 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t100,\n+\t\t\t\t10,\n+\t\t\t\t5,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\", \"01-06.tsm1\", \"01-07.tsm1\", \"01-08.tsm1\", \"02-05.tsm1\", \"02-06.tsm1\", \"02-07.tsm1\", \"02-08.tsm1\", \"03-04.tsm1\", \"03-05.tsm1\"},\n+\t\t\t\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n-\t\t\t\t\t{\n-\t\t\t\t\t\tPath: \"000000013-000000002.tsm\",\n-\t\t\t\t\t\tSize: 701863692,\n+\t\t\t\t}\n+\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts:   make([]int, 0),\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n \t\t\t\t\t},\n \t\t\t\t}\n-\t\t\t},\n-\t\t}, tsdb.DefaultCompactFullWriteColdDuration,\n-\t)\n-\n-\ttsm, pLen := cp.PlanLevel(1)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\tcp.ForceFull()\n-\n-\t// Level plans should not return any plans\n-\ttsm, pLen = cp.PlanLevel(1)\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n-\n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 0, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n \n-\ttsm, pLen = cp.Plan(time.Now())\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation and levels under 4\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-02.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-03.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-04.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-02.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-03.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-04.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\tif got, exp := len(tsm[0]), 13; got != exp {\n-\t\tt.Fatalf(\"plan length mismatch: got %v, exp %v\", got, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation all at DefaultMaxPointsPerBlock\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts:   []int{tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock, tsdb.DefaultMaxPointsPerBlock},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\t// Level plans should return plans now that Plan has been called\n-\ttsm, pLen = cp.PlanLevel(1)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {\n+\t\t\t\tcase tsm1.PT_Standard:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_SmartOptimize:\n+\t\t\t\t\treturn common\n+\t\t\t\tcase tsm1.PT_NoOptimize:\n+\t\t\t\t\treturn testLevelResults{}\n+\t\t\t\t}\n+\t\t\t\treturn testLevelResults{}\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"Small group size with single generation 50% at DefaultMaxPointsPerBlock and 50% at DefaultAggressiveMaxPointsPerBlock\",\n+\t\t\tfiles: []tsm1.FileStat{\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-05.tsm1\",\n+\t\t\t\t\tSize: 700 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-06.tsm1\",\n+\t\t\t\t\tSize: 500 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-07.tsm1\",\n+\t\t\t\t\tSize: 400 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-08.tsm1\",\n+\t\t\t\t\tSize: 300 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-09.tsm1\",\n+\t\t\t\t\tSize: 200 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-10.tsm1\",\n+\t\t\t\t\tSize: 100 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-11.tsm1\",\n+\t\t\t\t\tSize: 50 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tPath: \"01-12.tsm1\",\n+\t\t\t\t\tSize: 25 * 1024 * 1024,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tblockCounts: []int{\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t\ttsdb.DefaultMaxPointsPerBlock,\n+\t\t\t},\n+\t\t\ttestShardTime: -1,\n+\t\t\tgetResultByPlanType: func(planType tsm1.PlanType) testLevelResults {\n+\t\t\t\tcommon := testLevelResults{\n+\t\t\t\t\tlevel5Groups: []tsm1.PlannedCompactionGroup{\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\ttsm1.CompactionGroup{\"01-05.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-06.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-07.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-08.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-09.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-10.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-11.tsm1\",\n+\t\t\t\t\t\t\t\t\"01-12.tsm1\",\n+\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\ttsdb.DefaultAggressiveMaxPointsPerBlock,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t}\n \n-\ttsm, pLen = cp.PlanLevel(2)\n-\tif exp, got := 1, len(tsm); got != exp {\n-\t\tt.Fatalf(\"tsm file length mismatch: got %v, exp %v\", got, exp)\n-\t} else if pLen != int64(len(tsm)) {\n-\t\tt.Fatalf(\"tsm file plan length mismatch: got %v, exp %v\", pLen, exp)\n-\t}\n-\tcp.Release(tsm)\n+\t\t\t\tswitch planType {",
        "comment_created_at": "2025-05-21T00:01:41+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Unify first two choices in a single `case`.\r\n\r\n```\r\ncase tsm1.PT_Standard, tsm1.PT_SmartOptimize:\r\n    return common\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1968327788",
    "pr_number": 26054,
    "pr_file": "tsdb/shard.go",
    "created_at": "2025-02-24T19:50:14+00:00",
    "commented_code": "// CreateFieldIfNotExists creates a new field with the given name and type.\n // Returns an error if the field already exists with a different type.\n-func (m *MeasurementFields) CreateFieldIfNotExists(name string, typ influxql.DataType) (bool, error) {\n+func (m *MeasurementFields) CreateFieldIfNotExists(name string, typ influxql.DataType) (*Field, bool, error) {\n \tnewField := &Field{\n \t\tName: name,\n \t\tType: typ,\n \t}\n \tif f, loaded := m.fields.LoadOrStore(newField.Name, newField); loaded {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1968327788",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26054,
        "pr_file": "tsdb/shard.go",
        "discussion_id": "1968327788",
        "commented_code": "@@ -1589,18 +1575,19 @@ func (m *MeasurementFields) bytes() int {\n \n // CreateFieldIfNotExists creates a new field with the given name and type.\n // Returns an error if the field already exists with a different type.\n-func (m *MeasurementFields) CreateFieldIfNotExists(name string, typ influxql.DataType) (bool, error) {\n+func (m *MeasurementFields) CreateFieldIfNotExists(name string, typ influxql.DataType) (*Field, bool, error) {\n \tnewField := &Field{\n \t\tName: name,\n \t\tType: typ,\n \t}\n \tif f, loaded := m.fields.LoadOrStore(newField.Name, newField); loaded {",
        "comment_created_at": "2025-02-24T19:50:14+00:00",
        "comment_author": "philjb",
        "comment_body": "I think this nested `if else` can reduce to this (note the \"not loaded\" `!loaded`):\r\n\r\n```\r\n\tvar loaded bool\r\n\tif f, loaded = m.fields.LoadOrStore(newField.Name, newField); loaded && f.Type != typ {\r\n\t\treturn f, false, ErrFieldTypeConflict\r\n\t} else {\r\n\t\treturn f, !loaded, nil\r\n\t}\r\n```\r\n\r\ni believe including `loaded` in the `if` isn't needed either: just `f.Type != typ`\r\n\r\n\r\n```\r\n\tvar loaded bool\r\n\tif f, loaded = m.fields.LoadOrStore(newField.Name, newField); f.Type != typ {\r\n\t\treturn f, !loaded, ErrFieldTypeConflict\r\n\t} else {\r\n\t\treturn f, !loaded, nil\r\n\t}\r\n```\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1887611024",
    "pr_number": 25594,
    "pr_file": "tsdb/engine/tsm1/engine.go",
    "created_at": "2024-12-16T21:32:34+00:00",
    "commented_code": "level3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n+\t\t\t\t\t// This is a heuristic. 100_000 points per block is suitable for when we have a\n+\t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n+\t\t\t\t\tif genLen == 1 {\n+\t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n+\t\t\t\t\t\tfor _, f := range level4Groups[0] {\n+\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block to 100_000.\", zap.String(\"path\", f))\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultMaxPointsPerBlock * 100",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1887611024",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25594,
        "pr_file": "tsdb/engine/tsm1/engine.go",
        "discussion_id": "1887611024",
        "commented_code": "@@ -2166,6 +2167,17 @@ func (e *Engine) compact(wg *sync.WaitGroup) {\n \t\t\t\t\t\tlevel3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n+\t\t\t\t\t// This is a heuristic. 100_000 points per block is suitable for when we have a\n+\t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n+\t\t\t\t\tif genLen == 1 {\n+\t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n+\t\t\t\t\t\tfor _, f := range level4Groups[0] {\n+\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block to 100_000.\", zap.String(\"path\", f))\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultMaxPointsPerBlock * 100",
        "comment_created_at": "2024-12-16T21:32:34+00:00",
        "comment_author": "gwossum",
        "comment_body": "I feel like `tsdb.DefaultMaxPointsPerBlock * 100` should be its own named constant (`tsdb.AgressiveMaxPointsPerBlock`), or the `100` should be a constant (e.g. `tsdb.AgressiveMaxPointsPerBlockMultipler`). The result of an operation between a named constant and a magic number is a magic number, unless the result is assigned to a new named constant.",
        "pr_file_module": null
      }
    ]
  }
]