[
  {
    "discussion_id": "2032036998",
    "pr_number": 26211,
    "pr_file": "tsdb/engine/tsm1/engine.go",
    "created_at": "2025-04-07T21:32:10+00:00",
    "commented_code": "if level, runnable := e.scheduler.next(); runnable {\n \t\t\t\tswitch level {\n \t\t\t\tcase 1:\n-\t\t\t\t\tif e.compactHiPriorityLevel(level1Groups[0], 1, false, wg) {\n+\t\t\t\t\tif e.compactHiPriorityLevel(level1Groups[0], 1, false, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel1Groups = level1Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 2:\n-\t\t\t\t\tif e.compactHiPriorityLevel(level2Groups[0], 2, false, wg) {\n+\t\t\t\t\tif e.compactHiPriorityLevel(level2Groups[0], 2, false, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel2Groups = level2Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 3:\n-\t\t\t\t\tif e.compactLoPriorityLevel(level3Groups[0], 3, true, wg) {\n+\t\t\t\t\tif e.compactLoPriorityLevel(level3Groups[0], 3, true, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n+\t\t\t\t\tvar pointsPerBlock int\n \t\t\t\t\t// This is a heuristic. The 10_000 points per block default is suitable for when we have a\n \t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n \t\t\t\t\tif genLen == 1 {\n \t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n \t\t\t\t\t\tfor _, f := range level4Groups[0] {\n \t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block.\", zap.String(\"path\", f), zap.Int(\"points-per-block\", e.CompactionPlan.GetAggressiveCompactionPointsPerBlock()))\n \t\t\t\t\t\t}\n-\t\t\t\t\t\te.Compactor.Size = e.CompactionPlan.GetAggressiveCompactionPointsPerBlock()\n+\t\t\t\t\t\tpointsPerBlock = tsdb.DefaultAggressiveMaxPointsPerBlock\n \t\t\t\t\t} else {\n-\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultMaxPointsPerBlock\n+\t\t\t\t\t\tpointsPerBlock = tsdb.DefaultMaxPointsPerBlock\n+\t\t\t\t\t\tfor _, f := range level4Groups[0] {\n+\t\t\t\t\t\t\tif tsmPointsPerBlock := e.Compactor.FileStore.BlockCount(f, 1); tsmPointsPerBlock == tsdb.DefaultAggressiveMaxPointsPerBlock {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2032036998",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26211,
        "pr_file": "tsdb/engine/tsm1/engine.go",
        "discussion_id": "2032036998",
        "commented_code": "@@ -2157,30 +2165,36 @@ func (e *Engine) compact(wg *sync.WaitGroup) {\n \t\t\tif level, runnable := e.scheduler.next(); runnable {\n \t\t\t\tswitch level {\n \t\t\t\tcase 1:\n-\t\t\t\t\tif e.compactHiPriorityLevel(level1Groups[0], 1, false, wg) {\n+\t\t\t\t\tif e.compactHiPriorityLevel(level1Groups[0], 1, false, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel1Groups = level1Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 2:\n-\t\t\t\t\tif e.compactHiPriorityLevel(level2Groups[0], 2, false, wg) {\n+\t\t\t\t\tif e.compactHiPriorityLevel(level2Groups[0], 2, false, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel2Groups = level2Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 3:\n-\t\t\t\t\tif e.compactLoPriorityLevel(level3Groups[0], 3, true, wg) {\n+\t\t\t\t\tif e.compactLoPriorityLevel(level3Groups[0], 3, true, wg, tsdb.DefaultMaxPointsPerBlock) {\n \t\t\t\t\t\tlevel3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n+\t\t\t\t\tvar pointsPerBlock int\n \t\t\t\t\t// This is a heuristic. The 10_000 points per block default is suitable for when we have a\n \t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n \t\t\t\t\tif genLen == 1 {\n \t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n \t\t\t\t\t\tfor _, f := range level4Groups[0] {\n \t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block.\", zap.String(\"path\", f), zap.Int(\"points-per-block\", e.CompactionPlan.GetAggressiveCompactionPointsPerBlock()))\n \t\t\t\t\t\t}\n-\t\t\t\t\t\te.Compactor.Size = e.CompactionPlan.GetAggressiveCompactionPointsPerBlock()\n+\t\t\t\t\t\tpointsPerBlock = tsdb.DefaultAggressiveMaxPointsPerBlock\n \t\t\t\t\t} else {\n-\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultMaxPointsPerBlock\n+\t\t\t\t\t\tpointsPerBlock = tsdb.DefaultMaxPointsPerBlock\n+\t\t\t\t\t\tfor _, f := range level4Groups[0] {\n+\t\t\t\t\t\t\tif tsmPointsPerBlock := e.Compactor.FileStore.BlockCount(f, 1); tsmPointsPerBlock == tsdb.DefaultAggressiveMaxPointsPerBlock {",
        "comment_created_at": "2025-04-07T21:32:10+00:00",
        "comment_author": "gwossum",
        "comment_body": "We need to check against the configured aggressive points per block, not the default. Also, should this be changed to be `tsmPointsPerBlock >= configAggressivePointsPerBlock`, in case the user lowers their configured aggressive points per block?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1980107258",
    "pr_number": 26100,
    "pr_file": "tsdb/engine/tsm1/engine.go",
    "created_at": "2025-03-04T19:28:35+00:00",
    "commented_code": "level3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n-\t\t\t\t\t// This is a heuristic. 100_000 points per block is suitable for when we have a\n+\t\t\t\t\t// This is a heuristic. The 10_000 points per block default is suitable for when we have a\n \t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n \t\t\t\t\tif genLen == 1 {\n \t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n \t\t\t\t\t\tfor _, f := range level4Groups[0] {\n-\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block to 100_000.\", zap.String(\"path\", f))\n+\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block.\", zap.String(\"path\", f), zap.Int(\"points-per-block\", tsdb.DefaultAggressiveMaxPointsPerBlock))\n \t\t\t\t\t\t}\n-\t\t\t\t\t\te.Compactor.Size = tsdb.AggressiveMaxPointsPerBlock\n+\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultAggressiveMaxPointsPerBlock",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1980107258",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26100,
        "pr_file": "tsdb/engine/tsm1/engine.go",
        "discussion_id": "1980107258",
        "commented_code": "@@ -2167,14 +2167,14 @@ func (e *Engine) compact(wg *sync.WaitGroup) {\n \t\t\t\t\t\tlevel3Groups = level3Groups[1:]\n \t\t\t\t\t}\n \t\t\t\tcase 4:\n-\t\t\t\t\t// This is a heuristic. 100_000 points per block is suitable for when we have a\n+\t\t\t\t\t// This is a heuristic. The 10_000 points per block default is suitable for when we have a\n \t\t\t\t\t// single generation with multiple files at max block size under 2 GB.\n \t\t\t\t\tif genLen == 1 {\n \t\t\t\t\t\t// Log TSM files that will have an increased points per block count.\n \t\t\t\t\t\tfor _, f := range level4Groups[0] {\n-\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block to 100_000.\", zap.String(\"path\", f))\n+\t\t\t\t\t\t\te.logger.Info(\"TSM optimized compaction on single generation running, increasing total points per block.\", zap.String(\"path\", f), zap.Int(\"points-per-block\", tsdb.DefaultAggressiveMaxPointsPerBlock))\n \t\t\t\t\t\t}\n-\t\t\t\t\t\te.Compactor.Size = tsdb.AggressiveMaxPointsPerBlock\n+\t\t\t\t\t\te.Compactor.Size = tsdb.DefaultAggressiveMaxPointsPerBlock",
        "comment_created_at": "2025-03-04T19:28:35+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "shouldn't this be the config value?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1980506006",
    "pr_number": 26100,
    "pr_file": "tsdb/config.go",
    "created_at": "2025-03-05T01:09:43+00:00",
    "commented_code": "// when checked for full compaction.\n // 1048576000 is a magic number for bytes per gigabyte.\n func SingleGenerationReason() string {\n-\treturn fmt.Sprintf(\"not fully compacted and not idle because single generation with more than 2 files under %d GB and more than 1 file(s) under aggressive compaction points per block count (%d points)\", int(MaxTSMFileSize/1048576000), AggressiveMaxPointsPerBlock)\n+\treturn fmt.Sprintf(\"not fully compacted and not idle because single generation with more than 2 files under %d GB and more than 1 file(s) under aggressive compaction points per block count (%d points)\", int(MaxTSMFileSize/1048576000), DefaultAggressiveMaxPointsPerBlock)",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1980506006",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26100,
        "pr_file": "tsdb/config.go",
        "discussion_id": "1980506006",
        "commented_code": "@@ -92,7 +92,7 @@ var SingleGenerationReasonText string = SingleGenerationReason()\n // when checked for full compaction.\n // 1048576000 is a magic number for bytes per gigabyte.\n func SingleGenerationReason() string {\n-\treturn fmt.Sprintf(\"not fully compacted and not idle because single generation with more than 2 files under %d GB and more than 1 file(s) under aggressive compaction points per block count (%d points)\", int(MaxTSMFileSize/1048576000), AggressiveMaxPointsPerBlock)\n+\treturn fmt.Sprintf(\"not fully compacted and not idle because single generation with more than 2 files under %d GB and more than 1 file(s) under aggressive compaction points per block count (%d points)\", int(MaxTSMFileSize/1048576000), DefaultAggressiveMaxPointsPerBlock)",
        "comment_created_at": "2025-03-05T01:09:43+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "Because you can't put the config value in the Sprintf, you should use a phrase like  \r\n\r\n`under aggressive compaction points per block count (default: %d points)`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1889271782",
    "pr_number": 25594,
    "pr_file": "tsdb/config.go",
    "created_at": "2024-12-17T21:49:48+00:00",
    "commented_code": "// block in a TSM file\n \tDefaultMaxPointsPerBlock = 1000\n \n+\t// AggressiveMaxPointsPerBlock is used when we want to further compact blocks\n+\t// it is 100 times the default amount of points we use per block",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1889271782",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25594,
        "pr_file": "tsdb/config.go",
        "discussion_id": "1889271782",
        "commented_code": "@@ -52,6 +52,10 @@ const (\n \t// block in a TSM file\n \tDefaultMaxPointsPerBlock = 1000\n \n+\t// AggressiveMaxPointsPerBlock is used when we want to further compact blocks\n+\t// it is 100 times the default amount of points we use per block",
        "comment_created_at": "2024-12-17T21:49:48+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "If this is to be 100 times `DefaultMaxPointsPerBlock` then define it by multiplying, to ensure changes to one are reflected in the other.",
        "pr_file_module": null
      }
    ]
  }
]