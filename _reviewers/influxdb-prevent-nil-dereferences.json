[
  {
    "discussion_id": "1972466761",
    "pr_number": 25982,
    "pr_file": "authorization/storage_authorization.go",
    "created_at": "2025-02-26T21:46:37+00:00",
    "commented_code": "return nil\n }\n \n+// transformToken updates a.Token and a.HashedToken to match configuration state,\n+// if needed. If needed, transformToken generates the a.HashedToken from a.Token when\n+// token hashing is enabled. transformToken will also clear a.HashedToken if token\n+// hashing is turned off and a.Token is set to the matching token. If a.HashedToken and\n+// a.Token are both set but do not match (a.HashedToken is a hash of a.Token), then an\n+// error is returned.\n+func (s *Store) transformToken(a *influxdb.Authorization) error {\n+\t// Verify Token and HashedToken match if both are set.\n+\tif a.Token != \"\" && a.HashedToken != \"\" {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1972466761",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25982,
        "pr_file": "authorization/storage_authorization.go",
        "discussion_id": "1972466761",
        "commented_code": "@@ -50,6 +81,46 @@ func decodeAuthorization(b []byte, a *influxdb.Authorization) error {\n \treturn nil\n }\n \n+// transformToken updates a.Token and a.HashedToken to match configuration state,\n+// if needed. If needed, transformToken generates the a.HashedToken from a.Token when\n+// token hashing is enabled. transformToken will also clear a.HashedToken if token\n+// hashing is turned off and a.Token is set to the matching token. If a.HashedToken and\n+// a.Token are both set but do not match (a.HashedToken is a hash of a.Token), then an\n+// error is returned.\n+func (s *Store) transformToken(a *influxdb.Authorization) error {\n+\t// Verify Token and HashedToken match if both are set.\n+\tif a.Token != \"\" && a.HashedToken != \"\" {",
        "comment_created_at": "2025-02-26T21:46:37+00:00",
        "comment_author": "devanbenz",
        "comment_body": "since 'a' is a pointer should there be a nil check for safety before field access? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1887611972",
    "pr_number": 25594,
    "pr_file": "tsdb/engine/tsm1/compact.go",
    "created_at": "2024-12-16T21:33:34+00:00",
    "commented_code": "} else if gens.hasTombstones() {\n \t\treturn false, \"not fully compacted and not idle because of tombstones\"\n \t} else {\n+\t\t// Safety: check for first index so we don't accidentally do out of bounds access\n+\t\tif len(gens) == 1 && len(gens[0].files) > 1 && gens[0].size() < uint64(maxTSMFileSize) {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1887611972",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25594,
        "pr_file": "tsdb/engine/tsm1/compact.go",
        "discussion_id": "1887611972",
        "commented_code": "@@ -225,6 +225,10 @@ func (c *DefaultPlanner) FullyCompacted() (bool, string) {\n \t} else if gens.hasTombstones() {\n \t\treturn false, \"not fully compacted and not idle because of tombstones\"\n \t} else {\n+\t\t// Safety: check for first index so we don't accidentally do out of bounds access\n+\t\tif len(gens) == 1 && len(gens[0].files) > 1 && gens[0].size() < uint64(maxTSMFileSize) {",
        "comment_created_at": "2024-12-16T21:33:34+00:00",
        "comment_author": "gwossum",
        "comment_body": "Is the safety check `len(gens) == 1`, or `len(gens[0].files > 1`?)",
        "pr_file_module": null
      },
      {
        "comment_id": "1887612630",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25594,
        "pr_file": "tsdb/engine/tsm1/compact.go",
        "discussion_id": "1887611972",
        "commented_code": "@@ -225,6 +225,10 @@ func (c *DefaultPlanner) FullyCompacted() (bool, string) {\n \t} else if gens.hasTombstones() {\n \t\treturn false, \"not fully compacted and not idle because of tombstones\"\n \t} else {\n+\t\t// Safety: check for first index so we don't accidentally do out of bounds access\n+\t\tif len(gens) == 1 && len(gens[0].files) > 1 && gens[0].size() < uint64(maxTSMFileSize) {",
        "comment_created_at": "2024-12-16T21:34:18+00:00",
        "comment_author": "devanbenz",
        "comment_body": "len(gens) == 1, I want to ensure there is a 0th element I can index in to",
        "pr_file_module": null
      },
      {
        "comment_id": "1887623439",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25594,
        "pr_file": "tsdb/engine/tsm1/compact.go",
        "discussion_id": "1887611972",
        "commented_code": "@@ -225,6 +225,10 @@ func (c *DefaultPlanner) FullyCompacted() (bool, string) {\n \t} else if gens.hasTombstones() {\n \t\treturn false, \"not fully compacted and not idle because of tombstones\"\n \t} else {\n+\t\t// Safety: check for first index so we don't accidentally do out of bounds access\n+\t\tif len(gens) == 1 && len(gens[0].files) > 1 && gens[0].size() < uint64(maxTSMFileSize) {",
        "comment_created_at": "2024-12-16T21:46:17+00:00",
        "comment_author": "gwossum",
        "comment_body": "It looks like `gens[0].size()` would be fine if `gens[0].files` is empty. It feels like `len(gens[0].files) > 1` is there because we want to make sure there is at least one file because it's important for the planner logic. If so, commenting why that is there is important. On the first pass it was ambiguous to me if `len(gens[0].files > 1` as the bounds check referred to in the comment, or an important piece of logic.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1757631821",
    "pr_number": 25312,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-09-12T21:50:04+00:00",
    "commented_code": "})\n }\n \n-// filterShards returns a slice of shards where fn returns true\n+// filterShards takes in a list of functions and\n+// returns a slice of shards where fn returns true\n // for the shard. If the provided predicate is nil then all shards are returned.\n // filterShards should be called under a lock.\n-func (s *Store) filterShards(fn func(sh *Shard) bool) []*Shard {\n+func (s *Store) filterShards(fns []func(sh *Shard) bool) []*Shard {\n \tvar shards []*Shard\n-\tif fn == nil {\n+\n+\t// Early return if nil or 0 len\n+\tif len(fns) == 0 || fns == nil {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1757631821",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25312,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1757631821",
        "commented_code": "@@ -1124,23 +1124,42 @@ func (s *Store) DeleteMeasurement(database, name string) error {\n \t})\n }\n \n-// filterShards returns a slice of shards where fn returns true\n+// filterShards takes in a list of functions and\n+// returns a slice of shards where fn returns true\n // for the shard. If the provided predicate is nil then all shards are returned.\n // filterShards should be called under a lock.\n-func (s *Store) filterShards(fn func(sh *Shard) bool) []*Shard {\n+func (s *Store) filterShards(fns []func(sh *Shard) bool) []*Shard {\n \tvar shards []*Shard\n-\tif fn == nil {\n+\n+\t// Early return if nil or 0 len\n+\tif len(fns) == 0 || fns == nil {",
        "comment_created_at": "2024-09-12T21:50:04+00:00",
        "comment_author": "davidby-influx",
        "comment_body": "`len(fns)` should return 0 if `fns == nil`, shouldn't it?",
        "pr_file_module": null
      },
      {
        "comment_id": "1758858469",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25312,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1757631821",
        "commented_code": "@@ -1124,23 +1124,42 @@ func (s *Store) DeleteMeasurement(database, name string) error {\n \t})\n }\n \n-// filterShards returns a slice of shards where fn returns true\n+// filterShards takes in a list of functions and\n+// returns a slice of shards where fn returns true\n // for the shard. If the provided predicate is nil then all shards are returned.\n // filterShards should be called under a lock.\n-func (s *Store) filterShards(fn func(sh *Shard) bool) []*Shard {\n+func (s *Store) filterShards(fns []func(sh *Shard) bool) []*Shard {\n \tvar shards []*Shard\n-\tif fn == nil {\n+\n+\t// Early return if nil or 0 len\n+\tif len(fns) == 0 || fns == nil {",
        "comment_created_at": "2024-09-13T13:19:15+00:00",
        "comment_author": "devanbenz",
        "comment_body": "I believe so, will adjust",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1757663787",
    "pr_number": 25312,
    "pr_file": "tsdb/store.go",
    "created_at": "2024-09-12T22:25:53+00:00",
    "commented_code": "})\n }\n \n-// filterShards returns a slice of shards where fn returns true\n+// filterShards takes in a list of functions and\n+// returns a slice of shards where fn returns true\n // for the shard. If the provided predicate is nil then all shards are returned.\n // filterShards should be called under a lock.\n-func (s *Store) filterShards(fn func(sh *Shard) bool) []*Shard {\n+func (s *Store) filterShards(fns []func(sh *Shard) bool) []*Shard {\n \tvar shards []*Shard\n-\tif fn == nil {\n+\n+\t// Early return if nil or 0 len\n+\tif len(fns) == 0 || fns == nil {",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1757663787",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25312,
        "pr_file": "tsdb/store.go",
        "discussion_id": "1757663787",
        "commented_code": "@@ -1124,23 +1124,42 @@ func (s *Store) DeleteMeasurement(database, name string) error {\n \t})\n }\n \n-// filterShards returns a slice of shards where fn returns true\n+// filterShards takes in a list of functions and\n+// returns a slice of shards where fn returns true\n // for the shard. If the provided predicate is nil then all shards are returned.\n // filterShards should be called under a lock.\n-func (s *Store) filterShards(fn func(sh *Shard) bool) []*Shard {\n+func (s *Store) filterShards(fns []func(sh *Shard) bool) []*Shard {\n \tvar shards []*Shard\n-\tif fn == nil {\n+\n+\t// Early return if nil or 0 len\n+\tif len(fns) == 0 || fns == nil {",
        "comment_created_at": "2024-09-12T22:25:53+00:00",
        "comment_author": "gwossum",
        "comment_body": "`len(fns) == 0` is sufficient, you don't need the separate nil check. You can see this in action at https://go.dev/play/p/XWF--s4NyNn\r\n\r\nAlso, if you did _need_ a nil check, you would need to put it first to avoid dereferencing a nil pointer.\r\n\r\n",
        "pr_file_module": null
      }
    ]
  }
]