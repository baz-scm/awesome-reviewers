[
  {
    "discussion_id": "2089081276",
    "pr_number": 26418,
    "pr_file": "influxdb3/src/commands/delete.rs",
    "created_at": "2025-05-14T14:24:14+00:00",
    "commented_code": "if confirmation.trim() != \"yes\" {\n                 println!(\"Cannot delete token without confirmation\");\n             } else {\n-                client.api_v3_configure_token_delete(&token_name).await?;\n-\n+                let respone = client.api_v3_configure_token_delete(&token_name).await;\n+                if let Err(e) = respone {\n+                    match e {\n+                        influxdb3_client::Error::ApiError { code, ref message } => {\n+                            if code == StatusCode::METHOD_NOT_ALLOWED\n+                                && message == \"cannot delete operator token\"\n+                            {\n+                                println!(\n+                                    \"Cannot delete operator token, to regenerate an operator token, use `influxdb3 create token --admin --regenerate --token $TOKEN`\"",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2089081276",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26418,
        "pr_file": "influxdb3/src/commands/delete.rs",
        "discussion_id": "2089081276",
        "commented_code": "@@ -302,8 +303,26 @@ pub async fn command(config: Config) -> Result<(), Box<dyn Error>> {\n             if confirmation.trim() != \"yes\" {\n                 println!(\"Cannot delete token without confirmation\");\n             } else {\n-                client.api_v3_configure_token_delete(&token_name).await?;\n-\n+                let respone = client.api_v3_configure_token_delete(&token_name).await;\n+                if let Err(e) = respone {\n+                    match e {\n+                        influxdb3_client::Error::ApiError { code, ref message } => {\n+                            if code == StatusCode::METHOD_NOT_ALLOWED\n+                                && message == \"cannot delete operator token\"\n+                            {\n+                                println!(\n+                                    \"Cannot delete operator token, to regenerate an operator token, use `influxdb3 create token --admin --regenerate --token $TOKEN`\"",
        "comment_created_at": "2025-05-14T14:24:14+00:00",
        "comment_author": "peterbarnett03",
        "comment_body": "The operator token \"_admin\" is required cannot be deleted. To regenerate an operator token, use `influxdb3 create token --admin --regenerate --token $TOKEN`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2037813999",
    "pr_number": 26247,
    "pr_file": "influxdb3/tests/cli/mod.rs",
    "created_at": "2025-04-10T16:29:24+00:00",
    "commented_code": "let res = server.create_database(\"sample_db\").run().unwrap();\n     assert_contains!(&res, \"Database \\\"sample_db\\\" created successfully\");\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn test_delete_token() {\n+    let server = TestServer::spawn().await;\n+    let args = &[];\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+    let token = parse_token(result);\n+\n+    let result = server\n+        .run_with_confirmation(\n+            vec![\"delete\", \"token\"],\n+            &[\"--token-name\", \"_admin\", \"--token\", &token],\n+        )\n+        .unwrap();\n+    info!(result, \"test: deleted token using token name\");\n+\n+    // you should be able to create the token again\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+}",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2037813999",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26247,
        "pr_file": "influxdb3/tests/cli/mod.rs",
        "discussion_id": "2037813999",
        "commented_code": "@@ -2940,3 +2940,34 @@ async fn test_regenerate_admin_token() {\n     let res = server.create_database(\"sample_db\").run().unwrap();\n     assert_contains!(&res, \"Database \\\"sample_db\\\" created successfully\");\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn test_delete_token() {\n+    let server = TestServer::spawn().await;\n+    let args = &[];\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+    let token = parse_token(result);\n+\n+    let result = server\n+        .run_with_confirmation(\n+            vec![\"delete\", \"token\"],\n+            &[\"--token-name\", \"_admin\", \"--token\", &token],\n+        )\n+        .unwrap();\n+    info!(result, \"test: deleted token using token name\");\n+\n+    // you should be able to create the token again\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+}",
        "comment_created_at": "2025-04-10T16:29:24+00:00",
        "comment_author": "hiltontj",
        "comment_body": "Is it possible to assert that the new token is assigned a new unique `TokenId` from the previous deleted token? The catalog repository type should handle this but having a check in place would be good.\r\n\r\nWe also do hard deletion in other places (LVC, DVC, and triggers) and may not have such a check in place, but I think it is worth adding for tokens here if possible, given sensitive nature.",
        "pr_file_module": null
      },
      {
        "comment_id": "2037828855",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26247,
        "pr_file": "influxdb3/tests/cli/mod.rs",
        "discussion_id": "2037813999",
        "commented_code": "@@ -2940,3 +2940,34 @@ async fn test_regenerate_admin_token() {\n     let res = server.create_database(\"sample_db\").run().unwrap();\n     assert_contains!(&res, \"Database \\\"sample_db\\\" created successfully\");\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn test_delete_token() {\n+    let server = TestServer::spawn().await;\n+    let args = &[];\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+    let token = parse_token(result);\n+\n+    let result = server\n+        .run_with_confirmation(\n+            vec![\"delete\", \"token\"],\n+            &[\"--token-name\", \"_admin\", \"--token\", &token],\n+        )\n+        .unwrap();\n+    info!(result, \"test: deleted token using token name\");\n+\n+    // you should be able to create the token again\n+    let result = server\n+        .run(vec![\"create\", \"token\", \"--admin\"], args)\n+        .unwrap();\n+    assert_contains!(\n+        &result,\n+        \"This will grant you access to every HTTP endpoint or deny it otherwise\"\n+    );\n+}",
        "comment_created_at": "2025-04-10T16:35:19+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Yes sure - I'll setup an API test for that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2037924247",
    "pr_number": 26247,
    "pr_file": "influxdb3/tests/server/configure.rs",
    "created_at": "2025-04-10T17:27:37+00:00",
    "commented_code": ".expect(\"delete table call succeed\");\n     assert_eq!(StatusCode::NOT_FOUND, resp.status());\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn api_v3_configure_token_delete() {\n+    let token_name = \"_admin\";\n+    let server = TestServer::configure().with_auth().spawn().await;\n+    let client = reqwest::Client::new();\n+    let create_url = format!(\n+        \"{base}/api/v3/configure/token/admin\",\n+        base = server.client_addr()\n+    );\n+    let delete_url = format!(\"{base}/api/v3/configure/token\", base = server.client_addr());\n+\n+    let admin_token = server.token().expect(\"admin token to be present\");\n+\n+    let delete_result = client\n+        .delete(&delete_url)\n+        .bearer_auth(admin_token)\n+        .query(&[(\"token_name\", token_name)])\n+        .send()\n+        .await\n+        .unwrap();\n+    info!(?delete_result, \"test: result running the token delete\");\n+\n+    // create admin token again\n+    let result = client.post(&create_url).send().await.unwrap();\n+    info!(?result, \"test: result running the create token\");\n+    assert_eq!(result.status(), StatusCode::CREATED);",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "2037924247",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26247,
        "pr_file": "influxdb3/tests/server/configure.rs",
        "discussion_id": "2037924247",
        "commented_code": "@@ -1351,3 +1352,52 @@ async fn try_deleting_table_after_db_is_deleted() {\n         .expect(\"delete table call succeed\");\n     assert_eq!(StatusCode::NOT_FOUND, resp.status());\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn api_v3_configure_token_delete() {\n+    let token_name = \"_admin\";\n+    let server = TestServer::configure().with_auth().spawn().await;\n+    let client = reqwest::Client::new();\n+    let create_url = format!(\n+        \"{base}/api/v3/configure/token/admin\",\n+        base = server.client_addr()\n+    );\n+    let delete_url = format!(\"{base}/api/v3/configure/token\", base = server.client_addr());\n+\n+    let admin_token = server.token().expect(\"admin token to be present\");\n+\n+    let delete_result = client\n+        .delete(&delete_url)\n+        .bearer_auth(admin_token)\n+        .query(&[(\"token_name\", token_name)])\n+        .send()\n+        .await\n+        .unwrap();\n+    info!(?delete_result, \"test: result running the token delete\");\n+\n+    // create admin token again\n+    let result = client.post(&create_url).send().await.unwrap();\n+    info!(?result, \"test: result running the create token\");\n+    assert_eq!(result.status(), StatusCode::CREATED);",
        "comment_created_at": "2025-04-10T17:27:37+00:00",
        "comment_author": "hiltontj",
        "comment_body": "Does this work because the `_admin` token has been deleted?\r\n\r\ni.e., normally this request to create the token would require a valid auth token, but the `_admin` token has been deleted, and there are no tokens to authenticate, so the create token request is allowed.",
        "pr_file_module": null
      },
      {
        "comment_id": "2038069486",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26247,
        "pr_file": "influxdb3/tests/server/configure.rs",
        "discussion_id": "2037924247",
        "commented_code": "@@ -1351,3 +1352,52 @@ async fn try_deleting_table_after_db_is_deleted() {\n         .expect(\"delete table call succeed\");\n     assert_eq!(StatusCode::NOT_FOUND, resp.status());\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn api_v3_configure_token_delete() {\n+    let token_name = \"_admin\";\n+    let server = TestServer::configure().with_auth().spawn().await;\n+    let client = reqwest::Client::new();\n+    let create_url = format!(\n+        \"{base}/api/v3/configure/token/admin\",\n+        base = server.client_addr()\n+    );\n+    let delete_url = format!(\"{base}/api/v3/configure/token\", base = server.client_addr());\n+\n+    let admin_token = server.token().expect(\"admin token to be present\");\n+\n+    let delete_result = client\n+        .delete(&delete_url)\n+        .bearer_auth(admin_token)\n+        .query(&[(\"token_name\", token_name)])\n+        .send()\n+        .await\n+        .unwrap();\n+    info!(?delete_result, \"test: result running the token delete\");\n+\n+    // create admin token again\n+    let result = client.post(&create_url).send().await.unwrap();\n+    info!(?result, \"test: result running the create token\");\n+    assert_eq!(result.status(), StatusCode::CREATED);",
        "comment_created_at": "2025-04-10T18:42:27+00:00",
        "comment_author": "praveen-influx",
        "comment_body": "Yes - but not exactly for the reason you mentioned there. Currently we keep admin token creation endpoint open but there's no way to create more than one admin token which is basically the guard at the moment. So, in this test because we've deleted the previous one, new one can be added in it's place.\r\n\r\nThis behavior would likely have to change to support updates to tokens,  you still won't be able to create more than one token with `_admin` name but allow multiple _named_ admin tokens. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2038107815",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 26247,
        "pr_file": "influxdb3/tests/server/configure.rs",
        "discussion_id": "2037924247",
        "commented_code": "@@ -1351,3 +1352,52 @@ async fn try_deleting_table_after_db_is_deleted() {\n         .expect(\"delete table call succeed\");\n     assert_eq!(StatusCode::NOT_FOUND, resp.status());\n }\n+\n+#[test_log::test(tokio::test)]\n+async fn api_v3_configure_token_delete() {\n+    let token_name = \"_admin\";\n+    let server = TestServer::configure().with_auth().spawn().await;\n+    let client = reqwest::Client::new();\n+    let create_url = format!(\n+        \"{base}/api/v3/configure/token/admin\",\n+        base = server.client_addr()\n+    );\n+    let delete_url = format!(\"{base}/api/v3/configure/token\", base = server.client_addr());\n+\n+    let admin_token = server.token().expect(\"admin token to be present\");\n+\n+    let delete_result = client\n+        .delete(&delete_url)\n+        .bearer_auth(admin_token)\n+        .query(&[(\"token_name\", token_name)])\n+        .send()\n+        .await\n+        .unwrap();\n+    info!(?delete_result, \"test: result running the token delete\");\n+\n+    // create admin token again\n+    let result = client.post(&create_url).send().await.unwrap();\n+    info!(?result, \"test: result running the create token\");\n+    assert_eq!(result.status(), StatusCode::CREATED);",
        "comment_created_at": "2025-04-10T18:59:15+00:00",
        "comment_author": "hiltontj",
        "comment_body": "Ah, right, that makes sense. Thanks for clarifying.",
        "pr_file_module": null
      }
    ]
  }
]