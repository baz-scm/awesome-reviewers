[
  {
    "discussion_id": "1880548603",
    "pr_number": 25639,
    "pr_file": "influxdb3_py_api/Cargo.toml",
    "created_at": "2024-12-11T16:47:11+00:00",
    "commented_code": "+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
    "repo_full_name": "influxdata/influxdb",
    "discussion_comments": [
      {
        "comment_id": "1880548603",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25639,
        "pr_file": "influxdb3_py_api/Cargo.toml",
        "discussion_id": "1880548603",
        "commented_code": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
        "comment_created_at": "2024-12-11T16:47:11+00:00",
        "comment_author": "jdstrand",
        "comment_body": "Leaving a quick comment that the choice of https://github.com/PyO3/pyo3 seems reasonable from a security and maintenance perspective. It is an active project with lots of users (23.4k) and contributors (355). It has a CVE history:\r\n- https://www.cve.org/CVERecord?id=CVE-2020-35917 (fixed in 0.12.4)\r\n- https://www.cve.org/CVERecord?id=CVE-2024-9979 (fixed in 0.22.4; we're using 0.23.3)\r\n\r\nhttps://github.com/PyO3/pyo3/pull/4590 (for CVE-2024-9979) demonstrates that the project cares about its users and they did a 0.22.4 release that mitigates the security issue even though there were plans in the works for 0.23 to remove the problematic code that was the context of the vulnerability.\r\n\r\nhttps://github.com/PyO3/pyo3 lists a number of popular projects that use pyo3. RedHat is interested in the project (they reported CVE-2024-9979) and a cursory search show they have products that use it: https://access.redhat.com/security/cve/cve-2024-9979. Debian has it [packaged](https://packages.debian.org/search?keywords=librust-pyo3-dev). All of this adds up to this bodes well for continued support.\r\n\r\nIt is also properly hooked into the GitHub advisory database: https://github.com/advisories?query=pyo3 so we'll see issues in pyo3 itself via dependabot alerts.\r\n\r\nWhen the time is right, we should discuss where we are getting the embedded python interpreter that is provided to pyo3 (depend on the system? will we build it ourselves? grab it from somewhere official? etc) as there is a security maintenance angle here, but we don't have to discuss that now. Depending on the choice, we'll have to track security issues in the embedded interpreter specially (since dependabot can't help with that). This is tractable.\r\n\r\nAs an fyi, might want to be aware of https://github.com/PyO3/pyo3/issues/4265 which is pyo3 dealing with the non-GIL python versions/builds.",
        "pr_file_module": null
      },
      {
        "comment_id": "1880565040",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25639,
        "pr_file": "influxdb3_py_api/Cargo.toml",
        "discussion_id": "1880548603",
        "commented_code": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
        "comment_created_at": "2024-12-11T16:57:20+00:00",
        "comment_author": "pauldix",
        "comment_body": "We don't want to depend on the system. We want the interpreter included in the InfluxDB binary so that the user has no other local system setup to do other than install InfluxDB. I'm guessing we'll use PyOxidizer for this, although I'm not sure it's [fully supported yet](https://github.com/indygreg/PyOxidizer/issues/324).",
        "pr_file_module": null
      },
      {
        "comment_id": "1880792565",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25639,
        "pr_file": "influxdb3_py_api/Cargo.toml",
        "discussion_id": "1880548603",
        "commented_code": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
        "comment_created_at": "2024-12-11T19:28:03+00:00",
        "comment_author": "jdstrand",
        "comment_body": "> We don't want to depend on the system\r\n\r\nRight. This makes perfect sense. Not trying to distract from this PR, but we'll definitely want to understand the maintenance story of the interpreter itself that we ship as it will require security support. I'm unfamiliar with PyOxidizer, but (unlike pyo3), it isn't widely used and doesn't seem terribly active (doesn't mean we can't choose it; just means there is a risk associated with the project going away). On the other hand, it is a proper crate and so dependabot alerts/etc we'd just get.\r\n\r\nOther options exist: eg, we could choose to build the official cpython ourselves. That could be from upstream python but an alternative would be taking a linux distro's sources but building it the way we want; if we chose wisely (eg, Ubuntu 24.04 LTS's source deb or perhaps a newer Rocky Linux srpm) we'd get years of 'free' upgrades on a stable base (distros stay on a particular upstream version and backport patches; whenever a security notice was issued, we'd simply refresh our sources on the new Ubuntu source deb/Rocky srpm/etc).\r\n\r\nI'm not saying we *should* do that: pyoxidizer exists for a reason after all, but this type of thing is probably worth entertaining even if in the end we reject it. (It could also be our escape hatch if pyoxidizer goes away).",
        "pr_file_module": null
      },
      {
        "comment_id": "1880923843",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25639,
        "pr_file": "influxdb3_py_api/Cargo.toml",
        "discussion_id": "1880548603",
        "commented_code": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
        "comment_created_at": "2024-12-11T20:36:26+00:00",
        "comment_author": "jdstrand",
        "comment_body": "> I'm unfamiliar with PyOxidizer, but (unlike pyo3), it isn't widely used and doesn't seem terribly active (doesn't mean we can't choose it; just means there is a risk associated with the project going away). On the other hand, it is a proper crate and so dependabot alerts/etc we'd just get.\r\n\r\nTLDR: +1 from security on pyo3+pyoxidyzer. pyoxidizer seems like a reasonable choice to start with. It provides builds (or we can choose to build based on its `python-build-standalone` support) for the architectures we want and it solves a lot of problems that we'd encounter if we built our own.\r\n\r\nI looked into this a bit and it appears (please correct me!) that PyOxidizer is a glue layer that allows you to choose from a list [available python distributions](https://pyoxidizer.readthedocs.io/en/stable/pyoxidizer_packaging_python_distributions.html#available-python-distributions), of which it lists CPython (upstream python) 3.8.15, 3.9.15 and 3.10.8. This list is based on what https://github.com/indygreg/python-build-standalone supports, and it seems we can choose to build from source or to download a pre-built release from https://github.com/indygreg/python-build-standalone/releases.\r\n\r\n[Official python](https://www.python.org/downloads/) lists 3.8's EOL as 2024-10-07, 3.9 as 2025-10 and 3.10 as 2026-10. Official python lists 3.8's EOL as 2024-10-07, 3.9 as 2025-10 and 3.10 as 2026-10. [3.10.16](https://docs.python.org/release/3.10.16/whatsnew/changelog.html) is the latest 3.10 release (and there are security fixes since 3.10.8). [3.9.21](https://docs.python.org/release/3.9.21/whatsnew/changelog.html) is the latest 3.9 release (and there are security fixes since 3.9.15). [3.8.20](https://docs.python.org/release/3.8.20/whatsnew/changelog.html) is the latest 3.8 release (and there are security fixes since 3.8.15).\r\n\r\nAt first glance it seems like the project is trailing behind in both micro and minor versions, however, the aforementioned https://pyoxidizer.readthedocs.io is out of date and if we compare https://github.com/indygreg/python-build-standalone/releases with https://www.python.org/downloads/, pyoxidizer is closely following upstream with up to date CPython builds from upstream. Eg, https://github.com/indygreg/python-build-standalone/releases/tag/20241205 says:\r\n\r\n```\r\n# Breaking\r\n* Drop support for Python 3.8: The [20241008 release](https://github.com/indygreg/python-build-standalone/releases/tag/20241008) was the last release with Python 3.8 distributions. Support has now been removed from the build process.\r\n* Rename python3.13t.exe to python.exe in Windows free-threaded distributions: This matches the other Windows distributions. See https://github.com/astral-sh/uv/issues/8298 for discussion.\r\n\r\n# Upgrades\r\n* CPython 3.9.20 -> 3.9.21\r\n* CPython 3.10.15 -> 3.10.16\r\n* CPython 3.11.10 -> 3.11.11\r\n* CPython 3.12.7 -> 3.12.8\r\n* CPython 3.13.0 -> 3.13.1\r\n...\r\n```\r\n\r\nAssuming pyoxidizer does what we want and we're comfortable with the health of the project (perhaps we'd want to invest in the project through code contributions or maintenance at some point?), then it seems like a fine choice.\r\n\r\nA more reasonable escape hatch to the one I mentioned before if the project goes away is likely to fork the project and update `python-build-standalone`/etc to follow upstream python and to build the specific new version we want to target.\r\n\r\n> Depending on the choice, we'll have to track security issues in the embedded interpreter specially (since dependabot can't help with that). This is tractable.\r\n\r\nIf we choose pyoxidizer, we aren't going to get dependabot alerts and PRs automatically for the runtime itself (we would for the rust crates of course). This means if we choose this approach, our CVE tracking will necessarily need to follow upstream python and pyoxidizer releases. This is all fine: if this is the chosen path, I'll simply follow upstream python security announcements and then file issues/triage for our products in the normal way.",
        "pr_file_module": null
      },
      {
        "comment_id": "1937709165",
        "repo_full_name": "influxdata/influxdb",
        "pr_number": 25639,
        "pr_file": "influxdb3_py_api/Cargo.toml",
        "discussion_id": "1880548603",
        "commented_code": "@@ -0,0 +1,20 @@\n+[package]\n+name = \"influxdb3_py_api\"\n+version.workspace = true\n+authors.workspace = true\n+edition.workspace = true\n+license.workspace = true\n+\n+[dependencies]\n+influxdb3_wal = { path = \"../influxdb3_wal\" }\n+influxdb3_catalog = {path = \"../influxdb3_catalog\"}\n+influxdb-line-protocol = { workspace = true }\n+schema = { workspace = true }\n+\n+[dependencies.pyo3]\n+version = \"0.23.3\"",
        "comment_created_at": "2025-01-31T17:53:36+00:00",
        "comment_author": "jdstrand",
        "comment_body": "> TLDR: +1 from security on pyo3+pyoxidyzer. pyoxidizer seems like a reasonable choice to start with. It provides builds (or we can choose to build based on its python-build-standalone support) for the architectures we want and it solves a lot of problems that we'd encounter if we built our own.\r\n\r\n2025-01-31 UPDATE: for posterity, pyoxidizer is now [unmaintained](https://gregoryszorc.com/blog/2024/03/17/my-shifting-open-source-priorities/), but the InfluxData team has switched to using just `pyo3` on its own (still maintained) and we're exploring options of using it with `python-build-standalone`. The combination of pyo3+python-build-standalone has a good maintenance path forward.",
        "pr_file_module": null
      }
    ]
  }
]