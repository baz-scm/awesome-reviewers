[
  {
    "discussion_id": "394799810",
    "pr_number": 264,
    "pr_file": "src/components/Color.tsx",
    "created_at": "2020-03-19T05:35:52+00:00",
    "commented_code": "+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "394799810",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "394799810",
        "commented_code": "@@ -0,0 +1,126 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
        "comment_created_at": "2020-03-19T05:35:52+00:00",
        "comment_author": "twick00",
        "comment_body": "Is there something better we can do here other than `@ts-ignore` everything?",
        "pr_file_module": null
      },
      {
        "comment_id": "394911717",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "394799810",
        "commented_code": "@@ -0,0 +1,126 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
        "comment_created_at": "2020-03-19T10:02:09+00:00",
        "comment_author": "taras",
        "comment_body": "I was going to return to it but forgot. Thank you for bringing it to my attention. I'll look into it in the morning.",
        "pr_file_module": null
      },
      {
        "comment_id": "395928770",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "394799810",
        "commented_code": "@@ -0,0 +1,126 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
        "comment_created_at": "2020-03-20T23:17:36+00:00",
        "comment_author": "taras",
        "comment_body": "@twick00 I went back and looked over the types in Color component. I was able to improve types slightly by consuming types from Chalk instead of having a hardcoded interface for Color props. \r\n\r\nI had to use `as any` in 2 places because no matter what I tried, I couldn't get the correct call signatures to match the prop names. I have a sneaking suspicion that chalk's types are not correct. I looked at trying to fix chalk's types but it's a pretty nuanced API for such a small library. I decided to leave that yak unshaved. I rewrote `transformChildren` to use reduce because I believe it conveys the intention better than `forEach` that was there.\r\n\r\nDoes this work for you?",
        "pr_file_module": null
      },
      {
        "comment_id": "395977230",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "394799810",
        "commented_code": "@@ -0,0 +1,126 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
        "comment_created_at": "2020-03-21T09:26:21+00:00",
        "comment_author": "taras",
        "comment_body": "I restored the original forEach loop because of https://github.com/vadimdemedes/ink/pull/264#discussion_r395977218",
        "pr_file_module": null
      },
      {
        "comment_id": "397385636",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "394799810",
        "commented_code": "@@ -0,0 +1,126 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk from 'chalk';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword'\n+];\n+\n+const Color: FC<ColorProps & { children: ReactNode }> = ({children, ...colorProps}) => {\n+\tif (children === '') {\n+\t\treturn null;\n+\t}\n+\n+\t// TODO: Figure out what's going on here and write the type definition",
        "comment_created_at": "2020-03-24T18:50:00+00:00",
        "comment_author": "twick00",
        "comment_body": "\ud83d\udc4d I'm ok with this.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "395964554",
    "pr_number": 264,
    "pr_file": "src/components/Box.tsx",
    "created_at": "2020-03-21T05:44:47+00:00",
    "commented_code": "+import React, {PureComponent} from 'react';\n+import PropTypes from 'prop-types';\n+import {YogaNode} from 'yoga-layout-prebuilt';\n+\n+interface BoxProps {\n+\treadonly width?: number | string;\n+\treadonly height?: number | string;\n+\treadonly minWidth?: number;\n+\treadonly minHeight?: number;\n+\treadonly paddingTop?: number;\n+\treadonly paddingBottom?: number;\n+\treadonly paddingLeft?: number;\n+\treadonly paddingRight?: number;\n+\treadonly paddingX?: number;\n+\treadonly paddingY?: number;\n+\treadonly padding?: number;\n+\treadonly marginTop?: number;\n+\treadonly marginBottom?: number;\n+\treadonly marginLeft?: number;\n+\treadonly marginRight?: number;\n+\treadonly marginX?: number;\n+\treadonly marginY?: number;\n+\treadonly margin?: number;\n+\treadonly flexGrow?: number;\n+\treadonly flexShrink?: number;\n+\treadonly flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n+\treadonly flexBasis?: string | number;\n+\treadonly alignItems?: 'flex-start' | 'center' | 'flex-end';\n+\treadonly justifyContent?:\n+\t| 'flex-start'\n+\t| 'center'\n+\t| 'flex-end'\n+\t| 'space-between'\n+\t| 'space-around';\n+\treadonly textWrap?:\n+\t| 'wrap'\n+\t| 'truncate'\n+\t| 'truncate-start'\n+\t| 'truncate-middle'\n+\t| 'truncate-end';\n+\treadonly unstable__transformChildren?: (x: any) => any;",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "395964554",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Box.tsx",
        "discussion_id": "395964554",
        "commented_code": "@@ -0,0 +1,123 @@\n+import React, {PureComponent} from 'react';\n+import PropTypes from 'prop-types';\n+import {YogaNode} from 'yoga-layout-prebuilt';\n+\n+interface BoxProps {\n+\treadonly width?: number | string;\n+\treadonly height?: number | string;\n+\treadonly minWidth?: number;\n+\treadonly minHeight?: number;\n+\treadonly paddingTop?: number;\n+\treadonly paddingBottom?: number;\n+\treadonly paddingLeft?: number;\n+\treadonly paddingRight?: number;\n+\treadonly paddingX?: number;\n+\treadonly paddingY?: number;\n+\treadonly padding?: number;\n+\treadonly marginTop?: number;\n+\treadonly marginBottom?: number;\n+\treadonly marginLeft?: number;\n+\treadonly marginRight?: number;\n+\treadonly marginX?: number;\n+\treadonly marginY?: number;\n+\treadonly margin?: number;\n+\treadonly flexGrow?: number;\n+\treadonly flexShrink?: number;\n+\treadonly flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n+\treadonly flexBasis?: string | number;\n+\treadonly alignItems?: 'flex-start' | 'center' | 'flex-end';\n+\treadonly justifyContent?:\n+\t| 'flex-start'\n+\t| 'center'\n+\t| 'flex-end'\n+\t| 'space-between'\n+\t| 'space-around';\n+\treadonly textWrap?:\n+\t| 'wrap'\n+\t| 'truncate'\n+\t| 'truncate-start'\n+\t| 'truncate-middle'\n+\t| 'truncate-end';\n+\treadonly unstable__transformChildren?: (x: any) => any;",
        "comment_created_at": "2020-03-21T05:44:47+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "Don't use `any`. Use `unknown`.",
        "pr_file_module": null
      },
      {
        "comment_id": "395979097",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Box.tsx",
        "discussion_id": "395964554",
        "commented_code": "@@ -0,0 +1,123 @@\n+import React, {PureComponent} from 'react';\n+import PropTypes from 'prop-types';\n+import {YogaNode} from 'yoga-layout-prebuilt';\n+\n+interface BoxProps {\n+\treadonly width?: number | string;\n+\treadonly height?: number | string;\n+\treadonly minWidth?: number;\n+\treadonly minHeight?: number;\n+\treadonly paddingTop?: number;\n+\treadonly paddingBottom?: number;\n+\treadonly paddingLeft?: number;\n+\treadonly paddingRight?: number;\n+\treadonly paddingX?: number;\n+\treadonly paddingY?: number;\n+\treadonly padding?: number;\n+\treadonly marginTop?: number;\n+\treadonly marginBottom?: number;\n+\treadonly marginLeft?: number;\n+\treadonly marginRight?: number;\n+\treadonly marginX?: number;\n+\treadonly marginY?: number;\n+\treadonly margin?: number;\n+\treadonly flexGrow?: number;\n+\treadonly flexShrink?: number;\n+\treadonly flexDirection?: 'row' | 'row-reverse' | 'column' | 'column-reverse';\n+\treadonly flexBasis?: string | number;\n+\treadonly alignItems?: 'flex-start' | 'center' | 'flex-end';\n+\treadonly justifyContent?:\n+\t| 'flex-start'\n+\t| 'center'\n+\t| 'flex-end'\n+\t| 'space-between'\n+\t| 'space-around';\n+\treadonly textWrap?:\n+\t| 'wrap'\n+\t| 'truncate'\n+\t| 'truncate-start'\n+\t| 'truncate-middle'\n+\t| 'truncate-end';\n+\treadonly unstable__transformChildren?: (x: any) => any;",
        "comment_created_at": "2020-03-21T09:57:33+00:00",
        "comment_author": "taras",
        "comment_body": "I can actually do better because we know that it's a `ReactNode`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "395964785",
    "pr_number": 264,
    "pr_file": "src/ink.tsx",
    "created_at": "2020-03-21T05:48:55+00:00",
    "commented_code": "+import React, {ReactNode} from 'react';\n+import throttle from 'lodash.throttle';\n+import logUpdate, {LogUpdate} from 'log-update';\n+import isCI from 'is-ci';\n+import reconciler from './reconciler';\n+import createRenderer, {InkRenderer} from './renderer';\n+import signalExit from 'signal-exit';\n+import {createNode, DOMNode} from './dom';\n+import instances from './instances';\n+import App from './components/App';\n+\n+export interface InkOptions {\n+\tstdout: NodeJS.WriteStream;\n+\tstdin: NodeJS.ReadStream;\n+\tdebug: boolean;\n+\texitOnCtrlC: boolean;\n+\twaitUntilExit?: () => Promise<any>;",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "395964785",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/ink.tsx",
        "discussion_id": "395964785",
        "commented_code": "@@ -0,0 +1,182 @@\n+import React, {ReactNode} from 'react';\n+import throttle from 'lodash.throttle';\n+import logUpdate, {LogUpdate} from 'log-update';\n+import isCI from 'is-ci';\n+import reconciler from './reconciler';\n+import createRenderer, {InkRenderer} from './renderer';\n+import signalExit from 'signal-exit';\n+import {createNode, DOMNode} from './dom';\n+import instances from './instances';\n+import App from './components/App';\n+\n+export interface InkOptions {\n+\tstdout: NodeJS.WriteStream;\n+\tstdin: NodeJS.ReadStream;\n+\tdebug: boolean;\n+\texitOnCtrlC: boolean;\n+\twaitUntilExit?: () => Promise<any>;",
        "comment_created_at": "2020-03-21T05:48:55+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "Don't use `any`. Also applies to all the other places `any` is used. Try to use a more explicit type.",
        "pr_file_module": null
      },
      {
        "comment_id": "398419788",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/ink.tsx",
        "discussion_id": "395964785",
        "commented_code": "@@ -0,0 +1,182 @@\n+import React, {ReactNode} from 'react';\n+import throttle from 'lodash.throttle';\n+import logUpdate, {LogUpdate} from 'log-update';\n+import isCI from 'is-ci';\n+import reconciler from './reconciler';\n+import createRenderer, {InkRenderer} from './renderer';\n+import signalExit from 'signal-exit';\n+import {createNode, DOMNode} from './dom';\n+import instances from './instances';\n+import App from './components/App';\n+\n+export interface InkOptions {\n+\tstdout: NodeJS.WriteStream;\n+\tstdin: NodeJS.ReadStream;\n+\tdebug: boolean;\n+\texitOnCtrlC: boolean;\n+\twaitUntilExit?: () => Promise<any>;",
        "comment_created_at": "2020-03-26T09:17:11+00:00",
        "comment_author": "taras",
        "comment_body": "I removed any everywhere except for in Color component.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "396113291",
    "pr_number": 264,
    "pr_file": "test/render.tsx",
    "created_at": "2020-03-22T16:29:15+00:00",
    "commented_code": "import {spawn} from 'node-pty';\n import ansiEscapes from 'ansi-escapes';\n \n-const term = (fixture, args = []) => {\n-\tlet resolve;\n-\tlet reject;\n+const term = (fixture: string, args: string[] = []) => {\n+\tlet resolve: (value?: any) => void;",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "396113291",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "test/render.tsx",
        "discussion_id": "396113291",
        "commented_code": "@@ -2,17 +2,17 @@ import {serial as test} from 'ava';\n import {spawn} from 'node-pty';\n import ansiEscapes from 'ansi-escapes';\n \n-const term = (fixture, args = []) => {\n-\tlet resolve;\n-\tlet reject;\n+const term = (fixture: string, args: string[] = []) => {\n+\tlet resolve: (value?: any) => void;",
        "comment_created_at": "2020-03-22T16:29:15+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "Use `unknown`.",
        "pr_file_module": null
      },
      {
        "comment_id": "398442922",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "test/render.tsx",
        "discussion_id": "396113291",
        "commented_code": "@@ -2,17 +2,17 @@ import {serial as test} from 'ava';\n import {spawn} from 'node-pty';\n import ansiEscapes from 'ansi-escapes';\n \n-const term = (fixture, args = []) => {\n-\tlet resolve;\n-\tlet reject;\n+const term = (fixture: string, args: string[] = []) => {\n+\tlet resolve: (value?: any) => void;",
        "comment_created_at": "2020-03-26T09:53:06+00:00",
        "comment_author": "taras",
        "comment_body": "Done.",
        "pr_file_module": null
      }
    ]
  }
]