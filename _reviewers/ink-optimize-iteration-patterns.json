[
  {
    "discussion_id": "1305010008",
    "pr_number": 619,
    "pr_file": "src/output.ts",
    "created_at": "2023-08-25T01:08:22+00:00",
    "commented_code": "let offsetY = 0;\n \n-\t\t\t\tfor (let line of lines) {\n+\t\t\t\tfor (let index = 0; index < lines.length; index++) {",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "1305010008",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 619,
        "pr_file": "src/output.ts",
        "discussion_id": "1305010008",
        "commented_code": "@@ -187,7 +187,9 @@ export default class Output {\n \n \t\t\t\tlet offsetY = 0;\n \n-\t\t\t\tfor (let line of lines) {\n+\t\t\t\tfor (let index = 0; index < lines.length; index++) {",
        "comment_created_at": "2023-08-25T01:08:22+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "```suggestion\r\n\t\t\t\tfor (let [index, line] of lines.entries()) {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1305166388",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 619,
        "pr_file": "src/output.ts",
        "discussion_id": "1305010008",
        "commented_code": "@@ -187,7 +187,9 @@ export default class Output {\n \n \t\t\t\tlet offsetY = 0;\n \n-\t\t\t\tfor (let line of lines) {\n+\t\t\t\tfor (let index = 0; index < lines.length; index++) {",
        "comment_created_at": "2023-08-25T05:42:35+00:00",
        "comment_author": "isaacs",
        "comment_body": "Ah, yeah, that works, too, I guess.  I'll use that.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1161083567",
    "pr_number": 564,
    "pr_file": "src/output.ts",
    "created_at": "2023-04-08T08:32:27+00:00",
    "commented_code": "for (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "1161083567",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-08T08:32:27+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "Why does this skip the first character and starts from the second one?",
        "pr_file_module": null
      },
      {
        "comment_id": "1161084336",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-08T08:39:53+00:00",
        "comment_author": "AlCalzone",
        "comment_body": "Because the first char is the char that's actually written, so width 1 is already accounted for.",
        "pr_file_module": null
      },
      {
        "comment_id": "1161086377",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-08T09:00:20+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "Not sure I understand, could you elaborate the \"that's actually written\" part?",
        "pr_file_module": null
      },
      {
        "comment_id": "1161087501",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-08T09:11:45+00:00",
        "comment_author": "AlCalzone",
        "comment_body": "Line 201 writes the current character to the output array. Some characters are wider than a single column though, so we have to set the following columns (up to the character width) to \"\" so we don't end up with extra characters.\nSo if the char is a 2-column emoji, we write the emoji to column x and \"\" to column x+1. The character after the emoji will then correctly be at column x+2.",
        "pr_file_module": null
      },
      {
        "comment_id": "1161899300",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-10T17:01:38+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "Do we need a loop here then? Could it be simplified to this?\r\n\r\n```js\r\nif (char.fullWidth) {\r\n  currentLine[offsetX + 1] = /* empty char */\r\n}\r\n\r\noffsetX += character.fullWidth ? 2 : 1\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "1161990402",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-10T18:57:32+00:00",
        "comment_author": "AlCalzone",
        "comment_body": "Aren't there some emojis which have length > 4?",
        "pr_file_module": null
      },
      {
        "comment_id": "1162832858",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-11T13:38:26+00:00",
        "comment_author": "AlCalzone",
        "comment_body": "Nevermind, they have a visual width of 2. We can't fully go by the \"fullWidth\" property though, since some emojis with a visual width of 2 are not detected by https://github.com/sindresorhus/is-fullwidth-code-point\r\nFor example \ud83c\udf66 (code point 0x1f366) and \ud83c\udf89 (code point 0x1f389)",
        "pr_file_module": null
      },
      {
        "comment_id": "1162834301",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 564,
        "pr_file": "src/output.ts",
        "discussion_id": "1161083567",
        "commented_code": "@@ -172,29 +188,41 @@ export default class Output {\n \n \t\t\t\tfor (let line of lines) {\n \t\t\t\t\tconst currentLine = output[y + offsetY];\n-\n \t\t\t\t\t// Line can be missing if `text` is taller than height of pre-initialized `this.output`\n-\t\t\t\t\tif (!currentLine) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tconst width = stringWidth(line);\n+\t\t\t\t\tif (!currentLine) continue;\n \n \t\t\t\t\tfor (const transformer of transformers) {\n \t\t\t\t\t\tline = transformer(line);\n \t\t\t\t\t}\n \n-\t\t\t\t\toutput[y + offsetY] =\n-\t\t\t\t\t\tsliceAnsi(currentLine, 0, x) +\n-\t\t\t\t\t\tline +\n-\t\t\t\t\t\tsliceAnsi(currentLine, x + width);\n+\t\t\t\t\tconst chars = styledCharsFromTokens(tokenize(line));\n+\t\t\t\t\tlet offsetX = x;\n+\t\t\t\t\tfor (const char of chars) {\n+\t\t\t\t\t\tcurrentLine[offsetX] = char;\n+\n+\t\t\t\t\t\t// Some characters take up more than one column. In that case, the following\n+\t\t\t\t\t\t// pixels need to be cleared to avoid printing extra characters\n+\t\t\t\t\t\tconst charWidth = char.fullWidth ? 2 : char.value.length;\n+\t\t\t\t\t\tfor (let dx = 1; dx < charWidth; dx++) {",
        "comment_created_at": "2023-04-11T13:39:31+00:00",
        "comment_author": "AlCalzone",
        "comment_body": "I've pushed a commit to eliminate the loop.",
        "pr_file_module": null
      }
    ]
  }
]