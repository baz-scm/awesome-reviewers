[
  {
    "discussion_id": "546228675",
    "pr_number": 406,
    "pr_file": "examples/subprocess-output/subprocess-output.js",
    "created_at": "2020-12-19T11:41:30+00:00",
    "commented_code": "+'use strict';\n+const React = require('react');\n+const {render, Text, Box} = require('../../build');",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "546228675",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 406,
        "pr_file": "examples/subprocess-output/subprocess-output.js",
        "discussion_id": "546228675",
        "commented_code": "@@ -0,0 +1,25 @@\n+'use strict';\n+const React = require('react');\n+const {render, Text, Box} = require('../../build');",
        "comment_created_at": "2020-12-19T11:41:30+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "You don't have to explicitly include `build` folder, because it's already set as the `main` folder in `package.json`.\r\n\r\n```suggestion\r\nconst {render, Text, Box} = require('../..');\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "324512957",
    "pr_number": 227,
    "pr_file": "src/hooks/useInput.js",
    "created_at": "2019-09-16T05:23:20+00:00",
    "commented_code": "+import {useLayoutEffect, useContext} from 'react';\n+import {StdinContext} from '..';\n+\n+export default inputHandler => {\n+\tconst {stdin, setRawMode} = useContext(StdinContext);\n+\n+\tuseLayoutEffect(() => {\n+\t\tsetRawMode(true);\n+\n+\t\treturn () => setRawMode(false);\n+\t}, [setRawMode]);\n+\n+\tuseLayoutEffect(() => {\n+\t\tconst handleData = data => {\n+\t\t\tconst input = String(data);\n+\t\t\tconst meta = {\n+\t\t\t\tup: input === '\\u001B[A',\n+\t\t\t\tdown: input === '\\u001B[B',\n+\t\t\t\tleft: input === '\\u001B[D',\n+\t\t\t\tright: input === '\\u001B[C'\n+\t\t\t};\n+\n+\t\t\tinputHandler(input, meta);\n+\t\t};\n+\n+\t\tstdin.on('data', handleData);\n+\n+\t\treturn () => stdin.off('data', handleData);",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "324512957",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 227,
        "pr_file": "src/hooks/useInput.js",
        "discussion_id": "324512957",
        "commented_code": "@@ -0,0 +1,30 @@\n+import {useLayoutEffect, useContext} from 'react';\n+import {StdinContext} from '..';\n+\n+export default inputHandler => {\n+\tconst {stdin, setRawMode} = useContext(StdinContext);\n+\n+\tuseLayoutEffect(() => {\n+\t\tsetRawMode(true);\n+\n+\t\treturn () => setRawMode(false);\n+\t}, [setRawMode]);\n+\n+\tuseLayoutEffect(() => {\n+\t\tconst handleData = data => {\n+\t\t\tconst input = String(data);\n+\t\t\tconst meta = {\n+\t\t\t\tup: input === '\\u001B[A',\n+\t\t\t\tdown: input === '\\u001B[B',\n+\t\t\t\tleft: input === '\\u001B[D',\n+\t\t\t\tright: input === '\\u001B[C'\n+\t\t\t};\n+\n+\t\t\tinputHandler(input, meta);\n+\t\t};\n+\n+\t\tstdin.on('data', handleData);\n+\n+\t\treturn () => stdin.off('data', handleData);",
        "comment_created_at": "2019-09-16T05:23:20+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "```suggestion\r\n\t\treturn () => {\r\n\t\t\tstdin.off('data', handleData);\r\n\t\t};\r\n```\r\n\r\nYou don't want to return the event emitter to the user, which `stdin.off` returns. That's why I only use inline arrow functions when I actually want to use the return value, not as a tiny syntactic shortcut.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "296317185",
    "pr_number": 147,
    "pr_file": "examples/usekeypress/usekeypress.js",
    "created_at": "2019-06-21T16:59:44+00:00",
    "commented_code": "+'use strict';\n+const {useState} = require('react');\n+const React = require('react');\n+const {render, useKeypress} = require('../..');\n+\n+const {exit} = process;\n+\n+const Robot = () => {\n+\tconst [x, setX] = useState(1);\n+\tconst [y, setY] = useState(1);\n+\n+\tuseKeypress(str => {\n+\t\tif (str === 'h') {\n+\t\t\tsetX(Math.max(1, x - 1));\n+\t\t}\n+\n+\t\tif (str === 'l') {\n+\t\t\tsetX(Math.min(40, x + 1));\n+\t\t}\n+\n+\t\tif (str === 'j') {\n+\t\t\tsetY(Math.min(40, y + 1));\n+\t\t}\n+\n+\t\tif (str === 'k') {\n+\t\t\tsetY(Math.max(1, y - 1));\n+\t\t}\n+\n+\t\tif (str === 'q') {\n+\t\t\texit();\n+\t\t}",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "296317185",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 147,
        "pr_file": "examples/usekeypress/usekeypress.js",
        "discussion_id": "296317185",
        "commented_code": "@@ -0,0 +1,48 @@\n+'use strict';\n+const {useState} = require('react');\n+const React = require('react');\n+const {render, useKeypress} = require('../..');\n+\n+const {exit} = process;\n+\n+const Robot = () => {\n+\tconst [x, setX] = useState(1);\n+\tconst [y, setY] = useState(1);\n+\n+\tuseKeypress(str => {\n+\t\tif (str === 'h') {\n+\t\t\tsetX(Math.max(1, x - 1));\n+\t\t}\n+\n+\t\tif (str === 'l') {\n+\t\t\tsetX(Math.min(40, x + 1));\n+\t\t}\n+\n+\t\tif (str === 'j') {\n+\t\t\tsetY(Math.min(40, y + 1));\n+\t\t}\n+\n+\t\tif (str === 'k') {\n+\t\t\tsetY(Math.max(1, y - 1));\n+\t\t}\n+\n+\t\tif (str === 'q') {\n+\t\t\texit();\n+\t\t}",
        "comment_created_at": "2019-06-21T16:59:44+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "Seems like a switch statement would be better here.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "126292215",
    "pr_number": 3,
    "pr_file": "lib/components/bar.js",
    "created_at": "2017-07-08T23:11:50+00:00",
    "commented_code": "+'use strict';\n+\n+const blacklist = require('blacklist');\n+const Component = require('../component');\n+const h = require('../h');\n+const Text = require('./text');\n+\n+const PROPS = ['percent', 'left', 'right', 'columns', 'char'];\n+\n+class Bar extends Component {\n+\tgetString() {\n+\t\tconst {\n+\t\t\tpercent = 1,\n+\t\t\tleft = 0,\n+\t\t\tright = 0,\n+\t\t\tchar = '\u2588'\n+\t\t} = this.props;\n+\t\tconst screen = this.props.columns || process.stdout.columns || 80;\n+\t\tconst space = screen - right - left;\n+\t\tlet str = '';\n+\t\tconst max = Math.min(Math.floor(space * percent), space);\n+\t\tfor (let i = 0; i < max; i++) {\n+\t\t\tstr += char;\n+\t\t}",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "126292215",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 3,
        "pr_file": "lib/components/bar.js",
        "discussion_id": "126292215",
        "commented_code": "@@ -0,0 +1,36 @@\n+'use strict';\n+\n+const blacklist = require('blacklist');\n+const Component = require('../component');\n+const h = require('../h');\n+const Text = require('./text');\n+\n+const PROPS = ['percent', 'left', 'right', 'columns', 'char'];\n+\n+class Bar extends Component {\n+\tgetString() {\n+\t\tconst {\n+\t\t\tpercent = 1,\n+\t\t\tleft = 0,\n+\t\t\tright = 0,\n+\t\t\tchar = '\u2588'\n+\t\t} = this.props;\n+\t\tconst screen = this.props.columns || process.stdout.columns || 80;\n+\t\tconst space = screen - right - left;\n+\t\tlet str = '';\n+\t\tconst max = Math.min(Math.floor(space * percent), space);\n+\t\tfor (let i = 0; i < max; i++) {\n+\t\t\tstr += char;\n+\t\t}",
        "comment_created_at": "2017-07-08T23:11:50+00:00",
        "comment_author": "sindresorhus",
        "comment_body": "```js\r\nchar.repeat(max);\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "126292552",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 3,
        "pr_file": "lib/components/bar.js",
        "discussion_id": "126292215",
        "commented_code": "@@ -0,0 +1,36 @@\n+'use strict';\n+\n+const blacklist = require('blacklist');\n+const Component = require('../component');\n+const h = require('../h');\n+const Text = require('./text');\n+\n+const PROPS = ['percent', 'left', 'right', 'columns', 'char'];\n+\n+class Bar extends Component {\n+\tgetString() {\n+\t\tconst {\n+\t\t\tpercent = 1,\n+\t\t\tleft = 0,\n+\t\t\tright = 0,\n+\t\t\tchar = '\u2588'\n+\t\t} = this.props;\n+\t\tconst screen = this.props.columns || process.stdout.columns || 80;\n+\t\tconst space = screen - right - left;\n+\t\tlet str = '';\n+\t\tconst max = Math.min(Math.floor(space * percent), space);\n+\t\tfor (let i = 0; i < max; i++) {\n+\t\t\tstr += char;\n+\t\t}",
        "comment_created_at": "2017-07-08T23:31:06+00:00",
        "comment_author": "brigand",
        "comment_body": "Fixed",
        "pr_file_module": null
      }
    ]
  }
]