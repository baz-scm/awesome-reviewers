[
  {
    "discussion_id": "399674079",
    "pr_number": 264,
    "pr_file": "src/components/Color.tsx",
    "created_at": "2020-03-28T15:23:56+00:00",
    "commented_code": "+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "399674079",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "399674079",
        "commented_code": "@@ -0,0 +1,84 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
        "comment_created_at": "2020-03-28T15:23:56+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "I think `React.FC` type already includes a type for `children` prop, you don't need it to include it here. It can just be `FC<ColorProps>`.",
        "pr_file_module": null
      },
      {
        "comment_id": "399685724",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "399674079",
        "commented_code": "@@ -0,0 +1,84 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
        "comment_created_at": "2020-03-28T17:10:59+00:00",
        "comment_author": "taras",
        "comment_body": "TypeScript fails to compile with errors because over defaultValue and propTypes. I can remove propTypes and defaultValue and children or keep the children. I would prefer to remove propTypes.\r\n\r\n<details><summary>Without children</summary>\r\n<img width=\"675\" alt=\"image\" src=\"https://user-images.githubusercontent.com/74687/77829007-8fcb8680-70f5-11ea-9af6-c6fde73b24c3.png\">\r\n</details>\r\n\r\n<details>\r\n<summary>Without children and without defaultProps/propTypes</summary>\r\n<img width=\"638\" alt=\"image\" src=\"https://user-images.githubusercontent.com/74687/77829067-e933b580-70f5-11ea-8015-82ce642a77a6.png\">\r\n</details>\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "403705479",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "399674079",
        "commented_code": "@@ -0,0 +1,84 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
        "comment_created_at": "2020-04-05T13:56:55+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "What's the error that is being reported here? It's not visible in the screenshots.",
        "pr_file_module": null
      },
      {
        "comment_id": "403706410",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "399674079",
        "commented_code": "@@ -0,0 +1,84 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
        "comment_created_at": "2020-04-05T14:04:07+00:00",
        "comment_author": "taras",
        "comment_body": "@vadimdemedes if I removed children prop, I get a typescript error on propTypes - you can see it at the bottom of the first screenshot. \r\n\r\nSince, FC type has children as optional by default, I think the best would be to add children to ColorProps type because children are not optional. ",
        "pr_file_module": null
      },
      {
        "comment_id": "403707677",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "src/components/Color.tsx",
        "discussion_id": "399674079",
        "commented_code": "@@ -0,0 +1,84 @@\n+import React, {FC, ReactNode} from 'react';\n+import PropTypes from 'prop-types';\n+import arrify from 'arrify';\n+import chalk, {Chalk} from 'chalk';\n+import {Except} from 'type-fest';\n+\n+const methods = [\n+\t'hex',\n+\t'hsl',\n+\t'hsv',\n+\t'hwb',\n+\t'rgb',\n+\t'keyword',\n+\t'bgHex',\n+\t'bgHsl',\n+\t'bgHsv',\n+\t'bgHwb',\n+\t'bgRgb',\n+\t'bgKeyword',\n+\t'ansi',\n+\t'ansi256',\n+\t'bgAnsi',\n+\t'bgAnsi256'\n+];\n+\n+/**\n+ * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.\n+ */\n+export const Color: FC<ColorProps & {children: ReactNode}> = ({",
        "comment_created_at": "2020-04-05T14:14:19+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "I meant the error message from TypeScript, it's not in the screenshot.\r\n\r\nIf it works with `children` in `ColorProps` while still keeping `propTypes`, if I understood correctly, that'd be great.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "399676090",
    "pr_number": 264,
    "pr_file": "test/fixtures/use-input.tsx",
    "created_at": "2020-03-28T15:42:58+00:00",
    "commented_code": "-'use strict';\n-const React = require('react');\n-const {render, useInput, AppContext} = require('../..');\n+import React from 'react';\n+import {render, useInput, AppContext} from '../../src';\n \n-const UserInput = ({test}) => {\n+const UserInput: (props: { test: string }) => JSX.Element | null = ({test}) => {",
    "repo_full_name": "vadimdemedes/ink",
    "discussion_comments": [
      {
        "comment_id": "399676090",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "test/fixtures/use-input.tsx",
        "discussion_id": "399676090",
        "commented_code": "@@ -1,8 +1,7 @@\n-'use strict';\n-const React = require('react');\n-const {render, useInput, AppContext} = require('../..');\n+import React from 'react';\n+import {render, useInput, AppContext} from '../../src';\n \n-const UserInput = ({test}) => {\n+const UserInput: (props: { test: string }) => JSX.Element | null = ({test}) => {",
        "comment_created_at": "2020-03-28T15:42:58+00:00",
        "comment_author": "vadimdemedes",
        "comment_body": "```suggestion\r\nconst UserInput: React.FC<{ test: string }> = ({test}) => {\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "399689036",
        "repo_full_name": "vadimdemedes/ink",
        "pr_number": 264,
        "pr_file": "test/fixtures/use-input.tsx",
        "discussion_id": "399676090",
        "commented_code": "@@ -1,8 +1,7 @@\n-'use strict';\n-const React = require('react');\n-const {render, useInput, AppContext} = require('../..');\n+import React from 'react';\n+import {render, useInput, AppContext} from '../../src';\n \n-const UserInput = ({test}) => {\n+const UserInput: (props: { test: string }) => JSX.Element | null = ({test}) => {",
        "comment_created_at": "2020-03-28T17:41:43+00:00",
        "comment_author": "taras",
        "comment_body": "Resolved in https://github.com/vadimdemedes/ink/pull/264/commits/afc427c554aab7b4f763fdcdac7c9e3320f78d73",
        "pr_file_module": null
      }
    ]
  }
]