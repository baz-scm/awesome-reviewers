[
  {
    "discussion_id": "2198731671",
    "pr_number": 56844,
    "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/multicluster.go",
    "created_at": "2025-07-10T20:58:35+00:00",
    "commented_code": "opts,\n \t)\n \n-\tWorkloadAddressIndex := krt.NewIndex[networkAddress, model.WorkloadInfo](GlobalWorkloads, \"networkAddress\", networkAddressFromWorkload)\n-\tWorkloadServiceIndex := krt.NewIndex[string, model.WorkloadInfo](GlobalWorkloads, \"service\", func(o model.WorkloadInfo) []string {\n+\tGlobalWorkloadServiceIndex := krt.NewIndex[string, model.WorkloadInfo](GlobalWorkloads, \"service\", func(o model.WorkloadInfo) []string {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2198731671",
        "repo_full_name": "istio/istio",
        "pr_number": 56844,
        "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/multicluster.go",
        "discussion_id": "2198731671",
        "commented_code": "@@ -345,11 +298,101 @@ func (a *index) buildGlobalCollections(\n \t\topts,\n \t)\n \n-\tWorkloadAddressIndex := krt.NewIndex[networkAddress, model.WorkloadInfo](GlobalWorkloads, \"networkAddress\", networkAddressFromWorkload)\n-\tWorkloadServiceIndex := krt.NewIndex[string, model.WorkloadInfo](GlobalWorkloads, \"service\", func(o model.WorkloadInfo) []string {\n+\tGlobalWorkloadServiceIndex := krt.NewIndex[string, model.WorkloadInfo](GlobalWorkloads, \"service\", func(o model.WorkloadInfo) []string {",
        "comment_created_at": "2025-07-10T20:58:35+00:00",
        "comment_author": "jaellio",
        "comment_body": "Could we add more comments to this code block? For example, make the purpose networkService index more clear, clarify what split horizon is and why we are coalescing workloads, etc.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2198740510",
    "pr_number": 56844,
    "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/multicluster.go",
    "created_at": "2025-07-10T21:03:26+00:00",
    "commented_code": "return []networkAddress{netaddr}\n \t})\n-\t// TODO: confirm expected functionality before we register\n-\tGlobalWorkloads.RegisterBatch(krt.BatchedEventFilter(\n-\t\tfunc(a model.WorkloadInfo) *workloadapi.Workload {\n+\n+\tSplitHorizonServices := krt.NewCollection(\n+\t\tGlobalMergedWorkloadServices,\n+\t\tfunc(ctx krt.HandlerContext, svc model.ServiceInfo) *model.ServiceInfo {\n+\t\t\tif svc.Scope != model.Global {\n+\t\t\t\treturn &svc\n+\t\t\t}\n+\n+\t\t\twls := krt.Fetch(ctx, GlobalWorkloads, krt.FilterIndex(GlobalWorkloadServiceIndex, svc.ResourceName()))\n+\t\t\tif len(wls) == 0 {\n+\t\t\t\treturn &svc\n+\t\t\t}\n+\n+\t\t\tmeshCfg := krt.FetchOne(ctx, a.meshConfig.AsCollection())\n+\t\t\tif meshCfg == nil {\n+\t\t\t\tlog.Errorf(\"Failed to find mesh config\")\n+\t\t\t\treturn nil\n+\t\t\t}\n+\t\t\tlocalNetwork := a.Network(ctx).String()",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2198740510",
        "repo_full_name": "istio/istio",
        "pr_number": 56844,
        "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/multicluster.go",
        "discussion_id": "2198740510",
        "commented_code": "@@ -390,21 +433,104 @@ func (a *index) buildGlobalCollections(\n \n \t\treturn []networkAddress{netaddr}\n \t})\n-\t// TODO: confirm expected functionality before we register\n-\tGlobalWorkloads.RegisterBatch(krt.BatchedEventFilter(\n-\t\tfunc(a model.WorkloadInfo) *workloadapi.Workload {\n+\n+\tSplitHorizonServices := krt.NewCollection(\n+\t\tGlobalMergedWorkloadServices,\n+\t\tfunc(ctx krt.HandlerContext, svc model.ServiceInfo) *model.ServiceInfo {\n+\t\t\tif svc.Scope != model.Global {\n+\t\t\t\treturn &svc\n+\t\t\t}\n+\n+\t\t\twls := krt.Fetch(ctx, GlobalWorkloads, krt.FilterIndex(GlobalWorkloadServiceIndex, svc.ResourceName()))\n+\t\t\tif len(wls) == 0 {\n+\t\t\t\treturn &svc\n+\t\t\t}\n+\n+\t\t\tmeshCfg := krt.FetchOne(ctx, a.meshConfig.AsCollection())\n+\t\t\tif meshCfg == nil {\n+\t\t\t\tlog.Errorf(\"Failed to find mesh config\")\n+\t\t\t\treturn nil\n+\t\t\t}\n+\t\t\tlocalNetwork := a.Network(ctx).String()",
        "comment_created_at": "2025-07-10T21:03:26+00:00",
        "comment_author": "jaellio",
        "comment_body": "Add comments to explain what we're doing with the SANs and why",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2112488949",
    "pr_number": 56428,
    "pr_file": "pkg/kube/inject/webhook.go",
    "created_at": "2025-05-28T18:15:06+00:00",
    "commented_code": "return sideCarUser == appUser\n }\n \n+func detectNativeSidecar(nodes kclient.Client[*corev1.Node]) bool {\n+\tif !features.EnableNativeSidecars {\n+\t\treturn false\n+\t}\n+\n+\tif nodes == nil {\n+\t\tlog.Warnf(\"configured to auto detect native sidecar support, but couldn't find a client\")\n+\t\treturn false\n+\t}\n+\n+\tminVersion := 29",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2112488949",
        "repo_full_name": "istio/istio",
        "pr_number": 56428,
        "pr_file": "pkg/kube/inject/webhook.go",
        "discussion_id": "2112488949",
        "commented_code": "@@ -1206,6 +1230,36 @@ func isSidecarUserMatchingAppUser(containers []corev1.Container) bool {\n \treturn sideCarUser == appUser\n }\n \n+func detectNativeSidecar(nodes kclient.Client[*corev1.Node]) bool {\n+\tif !features.EnableNativeSidecars {\n+\t\treturn false\n+\t}\n+\n+\tif nodes == nil {\n+\t\tlog.Warnf(\"configured to auto detect native sidecar support, but couldn't find a client\")\n+\t\treturn false\n+\t}\n+\n+\tminVersion := 29",
        "comment_created_at": "2025-05-28T18:15:06+00:00",
        "comment_author": "keithmattix",
        "comment_body": "Link to KEP version history or something so future work in this file can reference it",
        "pr_file_module": null
      },
      {
        "comment_id": "2113151094",
        "repo_full_name": "istio/istio",
        "pr_number": 56428,
        "pr_file": "pkg/kube/inject/webhook.go",
        "discussion_id": "2112488949",
        "commented_code": "@@ -1206,6 +1230,36 @@ func isSidecarUserMatchingAppUser(containers []corev1.Container) bool {\n \treturn sideCarUser == appUser\n }\n \n+func detectNativeSidecar(nodes kclient.Client[*corev1.Node]) bool {\n+\tif !features.EnableNativeSidecars {\n+\t\treturn false\n+\t}\n+\n+\tif nodes == nil {\n+\t\tlog.Warnf(\"configured to auto detect native sidecar support, but couldn't find a client\")\n+\t\treturn false\n+\t}\n+\n+\tminVersion := 29",
        "comment_created_at": "2025-05-29T04:33:07+00:00",
        "comment_author": "irenezhong2861",
        "comment_body": "added comment with [link](https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/753-sidecar-containers/README.md#implementation-history)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1866471744",
    "pr_number": 53781,
    "pr_file": "pilot/pkg/model/policyattachment.go",
    "created_at": "2024-12-02T19:14:31+00:00",
    "commented_code": "return p\n \t}\n \n-\tp.Service = ptr.NonEmptyOrDefault(service.Attributes.ObjectName, service.Attributes.Name)\n-\tp.ServiceNamespace = service.Attributes.Namespace\n-\tp.ServiceRegistry = service.Attributes.ServiceRegistry\n+\tp.Services = append(p.Services, ServiceInfoForPolicyMatcher{\n+\t\tName:      ptr.NonEmptyOrDefault(service.Attributes.ObjectName, service.Attributes.Name),\n+\t\tNamespace: service.Attributes.Namespace,\n+\t\tRegistry:  service.Attributes.ServiceRegistry,\n+\t})\n+\treturn p\n+}\n+\n+func (p WorkloadPolicyMatcher) WithServices(services []*Service) WorkloadPolicyMatcher {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1866471744",
        "repo_full_name": "istio/istio",
        "pr_number": 53781,
        "pr_file": "pilot/pkg/model/policyattachment.go",
        "discussion_id": "1866471744",
        "commented_code": "@@ -68,9 +72,18 @@ func (p WorkloadPolicyMatcher) WithService(service *Service) WorkloadPolicyMatch\n \t\treturn p\n \t}\n \n-\tp.Service = ptr.NonEmptyOrDefault(service.Attributes.ObjectName, service.Attributes.Name)\n-\tp.ServiceNamespace = service.Attributes.Namespace\n-\tp.ServiceRegistry = service.Attributes.ServiceRegistry\n+\tp.Services = append(p.Services, ServiceInfoForPolicyMatcher{\n+\t\tName:      ptr.NonEmptyOrDefault(service.Attributes.ObjectName, service.Attributes.Name),\n+\t\tNamespace: service.Attributes.Namespace,\n+\t\tRegistry:  service.Attributes.ServiceRegistry,\n+\t})\n+\treturn p\n+}\n+\n+func (p WorkloadPolicyMatcher) WithServices(services []*Service) WorkloadPolicyMatcher {",
        "comment_created_at": "2024-12-02T19:14:31+00:00",
        "comment_author": "howardjohn",
        "comment_body": "I think this makes sense but it was super confusing to me how we can have multiple Services. Can we add some comments here to explain why? Something like\r\n\r\n```go\r\n// WithServices marks multiple services as part of the selection criteria. This is used when we want to find **all** policies attached to a specific proxy instance, rather than scoped to a specific service. This is useful when using ECDS, for example, where we might have:\r\n// * Each unique service creates a listener, and applies a policy selected by `WithService` pointing to ECDS\r\n// * All policies are found, by `WithServices`, and returned in ECDS\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1866474924",
    "pr_number": 53781,
    "pr_file": "pilot/pkg/model/push_context.go",
    "created_at": "2024-12-02T19:16:58+00:00",
    "commented_code": "// WasmPlugins return the WasmPluginWrappers of a proxy.\n func (ps *PushContext) WasmPlugins(proxy *Proxy) map[extensions.PluginPhase][]*WasmPluginWrapper {\n-\treturn ps.WasmPluginsByListenerInfo(proxy, anyListener, WasmPluginTypeAny)\n+\tlistenerInfo := WasmPluginListenerInfo{}\n+\tif proxy.IsWaypointProxy() {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1866474924",
        "repo_full_name": "istio/istio",
        "pr_number": 53781,
        "pr_file": "pilot/pkg/model/push_context.go",
        "discussion_id": "1866474924",
        "commented_code": "@@ -2110,7 +2110,19 @@ func (ps *PushContext) initWasmPlugins(env *Environment) {\n \n // WasmPlugins return the WasmPluginWrappers of a proxy.\n func (ps *PushContext) WasmPlugins(proxy *Proxy) map[extensions.PluginPhase][]*WasmPluginWrapper {\n-\treturn ps.WasmPluginsByListenerInfo(proxy, anyListener, WasmPluginTypeAny)\n+\tlistenerInfo := WasmPluginListenerInfo{}\n+\tif proxy.IsWaypointProxy() {",
        "comment_created_at": "2024-12-02T19:16:58+00:00",
        "comment_author": "howardjohn",
        "comment_body": "can we add some comments? Like\r\n\r\n```go\r\n// For most proxy types, we include only the root namespace and same-namespace objects. However, waypoints allow\r\n// cross-namespace access based on attached Service objects. In this case, include all referenced services in the selection criteria\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1369325509",
    "pr_number": 47273,
    "pr_file": "pilot/pkg/model/service.go",
    "created_at": "2023-10-23T22:29:30+00:00",
    "commented_code": "// Labels points to the workload or deployment labels.\n \tLabels labels.Instance\n \n-\t// Address is the address of the endpoint, using envoy proto.\n-\tAddress string\n+\t// Addresses is the address of the endpoint, using envoy proto.",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1369325509",
        "repo_full_name": "istio/istio",
        "pr_number": 47273,
        "pr_file": "pilot/pkg/model/service.go",
        "discussion_id": "1369325509",
        "commented_code": "@@ -479,8 +490,8 @@ type IstioEndpoint struct {\n \t// Labels points to the workload or deployment labels.\n \tLabels labels.Instance\n \n-\t// Address is the address of the endpoint, using envoy proto.\n-\tAddress string\n+\t// Addresses is the address of the endpoint, using envoy proto.",
        "comment_created_at": "2023-10-23T22:29:30+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Please add a LOT of comments on what the semantics of this field is now that there are multiple.",
        "pr_file_module": null
      },
      {
        "comment_id": "1369370319",
        "repo_full_name": "istio/istio",
        "pr_number": 47273,
        "pr_file": "pilot/pkg/model/service.go",
        "discussion_id": "1369325509",
        "commented_code": "@@ -479,8 +490,8 @@ type IstioEndpoint struct {\n \t// Labels points to the workload or deployment labels.\n \tLabels labels.Instance\n \n-\t// Address is the address of the endpoint, using envoy proto.\n-\tAddress string\n+\t// Addresses is the address of the endpoint, using envoy proto.",
        "comment_created_at": "2023-10-23T23:25:56+00:00",
        "comment_author": "keithmattix",
        "comment_body": "+1 - one specific comment I'd like to see is a set of constraints around an endpoints' addresses (e.g. all elements of `Addresses` must have the same metadata)",
        "pr_file_module": null
      },
      {
        "comment_id": "1372574363",
        "repo_full_name": "istio/istio",
        "pr_number": 47273,
        "pr_file": "pilot/pkg/model/service.go",
        "discussion_id": "1369325509",
        "commented_code": "@@ -479,8 +490,8 @@ type IstioEndpoint struct {\n \t// Labels points to the workload or deployment labels.\n \tLabels labels.Instance\n \n-\t// Address is the address of the endpoint, using envoy proto.\n-\tAddress string\n+\t// Addresses is the address of the endpoint, using envoy proto.",
        "comment_created_at": "2023-10-26T04:43:13+00:00",
        "comment_author": "zhlsunshine",
        "comment_body": "okay, I add more description and 2 constraints in comments.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1305900379",
    "pr_number": 46560,
    "pr_file": "pilot/pkg/model/push_context.go",
    "created_at": "2023-08-25T16:43:22+00:00",
    "commented_code": "ps.initDestinationRules(env)\n \tps.initAuthnPolicies(env)\n \n+\t// INFO: gets all authorization policies across all namespaces",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1305900379",
        "repo_full_name": "istio/istio",
        "pr_number": 46560,
        "pr_file": "pilot/pkg/model/push_context.go",
        "discussion_id": "1305900379",
        "commented_code": "@@ -1218,6 +1218,7 @@ func (ps *PushContext) createNewContext(env *Environment) error {\n \tps.initDestinationRules(env)\n \tps.initAuthnPolicies(env)\n \n+\t// INFO: gets all authorization policies across all namespaces",
        "comment_created_at": "2023-08-25T16:43:22+00:00",
        "comment_author": "jaellio",
        "comment_body": "Could we add this info as a function comment?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1088045576",
    "pr_number": 42372,
    "pr_file": "cni/pkg/ebpf/server/options.go",
    "created_at": "2023-01-26T16:03:30+00:00",
    "commented_code": "+// Copyright Istio Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package server\n+\n+// RedirectArgs provides all of the configuration parameters for the redirection.\n+type RedirectArgs struct {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1088045576",
        "repo_full_name": "istio/istio",
        "pr_number": 42372,
        "pr_file": "cni/pkg/ebpf/server/options.go",
        "discussion_id": "1088045576",
        "commented_code": "@@ -0,0 +1,26 @@\n+// Copyright Istio Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package server\n+\n+// RedirectArgs provides all of the configuration parameters for the redirection.\n+type RedirectArgs struct {",
        "comment_created_at": "2023-01-26T16:03:30+00:00",
        "comment_author": "howardjohn",
        "comment_body": "can you add comments what each one means",
        "pr_file_module": null
      },
      {
        "comment_id": "1099401433",
        "repo_full_name": "istio/istio",
        "pr_number": 42372,
        "pr_file": "cni/pkg/ebpf/server/options.go",
        "discussion_id": "1088045576",
        "commented_code": "@@ -0,0 +1,26 @@\n+// Copyright Istio Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package server\n+\n+// RedirectArgs provides all of the configuration parameters for the redirection.\n+type RedirectArgs struct {",
        "comment_created_at": "2023-02-07T23:23:14+00:00",
        "comment_author": "howardjohn",
        "comment_body": "This is really nit, but Go standard practice is to comment above the field, not beside. This supports godocs.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1090832781",
    "pr_number": 43032,
    "pr_file": "tests/integration/telemetry/envoyfilter/customizemetrics/customize_metrics_test.go",
    "created_at": "2023-01-30T16:07:49+00:00",
    "commented_code": "}\n \t\t\tutil.ValidateMetric(t, cluster, promInst, httpDestinationQuery, 1)\n \t\t\tutil.ValidateMetric(t, cluster, promInst, grpcDestinationQuery, 1)\n+\t\t\tif err := common.ValidateBucket(cluster, promInst, \"client\", 10); err != nil {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1090832781",
        "repo_full_name": "istio/istio",
        "pr_number": 43032,
        "pr_file": "tests/integration/telemetry/envoyfilter/customizemetrics/customize_metrics_test.go",
        "discussion_id": "1090832781",
        "commented_code": "@@ -144,6 +145,9 @@ func TestCustomizeMetrics(t *testing.T) {\n \t\t\t}\n \t\t\tutil.ValidateMetric(t, cluster, promInst, httpDestinationQuery, 1)\n \t\t\tutil.ValidateMetric(t, cluster, promInst, grpcDestinationQuery, 1)\n+\t\t\tif err := common.ValidateBucket(cluster, promInst, \"client\", 10); err != nil {",
        "comment_created_at": "2023-01-30T16:07:49+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Maybe we can comment where `10` came from?",
        "pr_file_module": null
      }
    ]
  }
]