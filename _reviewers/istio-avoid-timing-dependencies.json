[
  {
    "discussion_id": "2247876259",
    "pr_number": 57221,
    "pr_file": "pilot/pkg/controllers/ipallocate/ipallocate_test.go",
    "created_at": "2025-08-01T12:39:15+00:00",
    "commented_code": "features.IPAutoallocateIPv6Prefix = TestNonDefaultIPV6PrefixCIDR\n \n \trig := setupIPAllocateTest(t, TestNonDefaultIPV4Prefix, TestNonDefaultIPV6Prefix)\n+\n+\tassert.EventuallyEqual(t, func() int {\n+\t\tse := rig.se.Get(\"pre-existing\", \"default\")\n+\t\treturn len(autoallocate.GetAddressesFromServiceEntry(se))\n+\t}, 2, retry.Converge(10), retry.Delay(time.Millisecond*5))",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2247876259",
        "repo_full_name": "istio/istio",
        "pr_number": 57221,
        "pr_file": "pilot/pkg/controllers/ipallocate/ipallocate_test.go",
        "discussion_id": "2247876259",
        "commented_code": "@@ -477,6 +477,12 @@ func TestIPAllocateWithEnvCIDR(t *testing.T) {\n \tfeatures.IPAutoallocateIPv6Prefix = TestNonDefaultIPV6PrefixCIDR\n \n \trig := setupIPAllocateTest(t, TestNonDefaultIPV4Prefix, TestNonDefaultIPV6Prefix)\n+\n+\tassert.EventuallyEqual(t, func() int {\n+\t\tse := rig.se.Get(\"pre-existing\", \"default\")\n+\t\treturn len(autoallocate.GetAddressesFromServiceEntry(se))\n+\t}, 2, retry.Converge(10), retry.Delay(time.Millisecond*5))",
        "comment_created_at": "2025-08-01T12:39:15+00:00",
        "comment_author": "sridhargaddam",
        "comment_body": "Can we use `retry.MaxAttempts` to be consistent with the rest of the file?\r\n\r\n```suggestion\r\n\tassert.EventuallyEqual(t, func() int {\r\n\t\tse := rig.se.Get(\"pre-existing\", \"default\")\r\n\t\treturn len(autoallocate.GetAddressesFromServiceEntry(se))\r\n\t}, 2, retry.MaxAttempts(10), retry.Delay(time.Millisecond*5))\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2248027645",
        "repo_full_name": "istio/istio",
        "pr_number": 57221,
        "pr_file": "pilot/pkg/controllers/ipallocate/ipallocate_test.go",
        "discussion_id": "2247876259",
        "commented_code": "@@ -477,6 +477,12 @@ func TestIPAllocateWithEnvCIDR(t *testing.T) {\n \tfeatures.IPAutoallocateIPv6Prefix = TestNonDefaultIPV6PrefixCIDR\n \n \trig := setupIPAllocateTest(t, TestNonDefaultIPV4Prefix, TestNonDefaultIPV6Prefix)\n+\n+\tassert.EventuallyEqual(t, func() int {\n+\t\tse := rig.se.Get(\"pre-existing\", \"default\")\n+\t\treturn len(autoallocate.GetAddressesFromServiceEntry(se))\n+\t}, 2, retry.Converge(10), retry.Delay(time.Millisecond*5))",
        "comment_created_at": "2025-08-01T13:42:43+00:00",
        "comment_author": "AritraDey-Dev",
        "comment_body": "I tried using `retry.MaxAttempts(10)`, but it still fails occasionally\u2014likely because it can give up early during controller startup. Switching to `retry.Converge(10)` makes it more stable since it waits for 10 consistent checks, helping avoid flaky tests.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2183426139",
    "pr_number": 56844,
    "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/ambientindex_multicluster_test.go",
    "created_at": "2025-07-03T18:01:29+00:00",
    "commented_code": "Labels: map[string]string{label.TopologyNetwork.Name: clusterToNetwork[client.clusterID]},\n \t\t\t\t\t\t},\n \t\t\t\t\t})\n+\t\t\t\t\tclient.ns.Create(&corev1.Namespace{\n+\t\t\t\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\t\t\t\tName:   testNS,\n+\t\t\t\t\t\t\tLabels: map[string]string{label.TopologyNetwork.Name: clusterToNetwork[client.clusterID]},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t})\n+\t\t\t\t\tclient.gwcls.Create(&k8sbeta.GatewayClass{\n+\t\t\t\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\t\t\t\tName: constants.EastWestGatewayClassName,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tSpec: k8sv1.GatewayClassSpec{\n+\t\t\t\t\t\t\tControllerName: constants.ManagedGatewayMeshController,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t})\n+\t\t\t\t}\n+\t\t\t\ttime.Sleep(2 * time.Second) // wait for the namespace to be created",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2183426139",
        "repo_full_name": "istio/istio",
        "pr_number": 56844,
        "pr_file": "pilot/pkg/serviceregistry/kube/controller/ambient/ambientindex_multicluster_test.go",
        "discussion_id": "2183426139",
        "commented_code": "@@ -192,21 +201,55 @@ func TestAmbientMulticlusterIndex_WaypointForWorkloadTraffic(t *testing.T) {\n \t\t\t\t\t\t\tLabels: map[string]string{label.TopologyNetwork.Name: clusterToNetwork[client.clusterID]},\n \t\t\t\t\t\t},\n \t\t\t\t\t})\n+\t\t\t\t\tclient.ns.Create(&corev1.Namespace{\n+\t\t\t\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\t\t\t\tName:   testNS,\n+\t\t\t\t\t\t\tLabels: map[string]string{label.TopologyNetwork.Name: clusterToNetwork[client.clusterID]},\n+\t\t\t\t\t\t},\n+\t\t\t\t\t})\n+\t\t\t\t\tclient.gwcls.Create(&k8sbeta.GatewayClass{\n+\t\t\t\t\t\tObjectMeta: metav1.ObjectMeta{\n+\t\t\t\t\t\t\tName: constants.EastWestGatewayClassName,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tSpec: k8sv1.GatewayClassSpec{\n+\t\t\t\t\t\t\tControllerName: constants.ManagedGatewayMeshController,\n+\t\t\t\t\t\t},\n+\t\t\t\t\t})\n+\t\t\t\t}\n+\t\t\t\ttime.Sleep(2 * time.Second) // wait for the namespace to be created",
        "comment_created_at": "2025-07-03T18:01:29+00:00",
        "comment_author": "keithmattix",
        "comment_body": "Please use `assert.EventuallyEqual(...)` instead",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839794453",
    "pr_number": 38187,
    "pr_file": "pilot/pkg/model/jwks_resolver_test.go",
    "created_at": "2022-03-31T16:16:10+00:00",
    "commented_code": "}\n \tfor _, c := range cases {\n \t\tpk, err := r.GetPublicKey(c.in[0], c.in[1])\n+\t\tkey := jwtKey{issuer: c.in[0], jwksURI: c.in[1]}\n+\t\ttime.Sleep(time.Millisecond * 100)",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "839794453",
        "repo_full_name": "istio/istio",
        "pr_number": 38187,
        "pr_file": "pilot/pkg/model/jwks_resolver_test.go",
        "discussion_id": "839794453",
        "commented_code": "@@ -144,13 +151,20 @@ func TestGetPublicKeyReorderedKey(t *testing.T) {\n \t}\n \tfor _, c := range cases {\n \t\tpk, err := r.GetPublicKey(c.in[0], c.in[1])\n+\t\tkey := jwtKey{issuer: c.in[0], jwksURI: c.in[1]}\n+\t\ttime.Sleep(time.Millisecond * 100)",
        "comment_created_at": "2022-03-31T16:16:10+00:00",
        "comment_author": "howardjohn",
        "comment_body": "can we avoid sleeping? https://github.com/istio/istio/wiki/Test-Flakes#timing-dependencies",
        "pr_file_module": null
      },
      {
        "comment_id": "839805447",
        "repo_full_name": "istio/istio",
        "pr_number": 38187,
        "pr_file": "pilot/pkg/model/jwks_resolver_test.go",
        "discussion_id": "839794453",
        "commented_code": "@@ -144,13 +151,20 @@ func TestGetPublicKeyReorderedKey(t *testing.T) {\n \t}\n \tfor _, c := range cases {\n \t\tpk, err := r.GetPublicKey(c.in[0], c.in[1])\n+\t\tkey := jwtKey{issuer: c.in[0], jwksURI: c.in[1]}\n+\t\ttime.Sleep(time.Millisecond * 100)",
        "comment_created_at": "2022-03-31T16:27:55+00:00",
        "comment_author": "aryan16",
        "comment_body": "In middle of changes, will remove this soon.",
        "pr_file_module": null
      }
    ]
  }
]