[
  {
    "discussion_id": "2116711518",
    "pr_number": 56428,
    "pr_file": "pkg/kube/inject/webhook.go",
    "created_at": "2025-05-30T21:53:59+00:00",
    "commented_code": "// application container's value. At the same time, if user explicitly configures a RunAsUser in the istio-proxy\n \t\t// container which is different to the application container's value, that setting is still honored.\n \t\tif sideCarProxy := FindSidecar(params.pod); sideCarProxy != nil && sideCarProxy.SecurityContext != nil {\n-\t\t\tif isSidecarUserMatchingAppUser(params.pod.Spec.Containers) {\n+\t\t\tif isSidecarUserMatchingAppUser(params.pod) {\n \t\t\t\tlog.Infof(\"Resetting the UserID of sideCar proxy as it matches with the app container for Pod %q\", params.pod.Name)\n \t\t\t\tsideCarProxy.SecurityContext.RunAsUser = nil\n \t\t\t\tsideCarProxy.SecurityContext.RunAsGroup = nil\n \t\t\t}\n \t\t}\n \t}\n+\n+\tvar nodes kclient.Client[*corev1.Node]\n+\tif wh.nodes != nil {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2116711518",
        "repo_full_name": "istio/istio",
        "pr_number": 56428,
        "pr_file": "pkg/kube/inject/webhook.go",
        "discussion_id": "2116711518",
        "commented_code": "@@ -1163,13 +1174,25 @@ func (wh *Webhook) inject(ar *kube.AdmissionReview, path string) *kube.Admission\n \t\t// application container's value. At the same time, if user explicitly configures a RunAsUser in the istio-proxy\n \t\t// container which is different to the application container's value, that setting is still honored.\n \t\tif sideCarProxy := FindSidecar(params.pod); sideCarProxy != nil && sideCarProxy.SecurityContext != nil {\n-\t\t\tif isSidecarUserMatchingAppUser(params.pod.Spec.Containers) {\n+\t\t\tif isSidecarUserMatchingAppUser(params.pod) {\n \t\t\t\tlog.Infof(\"Resetting the UserID of sideCar proxy as it matches with the app container for Pod %q\", params.pod.Name)\n \t\t\t\tsideCarProxy.SecurityContext.RunAsUser = nil\n \t\t\t\tsideCarProxy.SecurityContext.RunAsGroup = nil\n \t\t\t}\n \t\t}\n \t}\n+\n+\tvar nodes kclient.Client[*corev1.Node]\n+\tif wh.nodes != nil {",
        "comment_created_at": "2025-05-30T21:53:59+00:00",
        "comment_author": "keithmattix",
        "comment_body": "Can we short-circuit these nil checks to clean the code up? If `wh.nodes == nil`, we should probably only enable native sidecars if it was explicitly set to true (and not defaulted). I think there's some code in the env package that enables checking this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1738914088",
    "pr_number": 52915,
    "pr_file": "pilot/pkg/networking/core/tracing.go",
    "created_at": "2024-08-30T15:18:44+00:00",
    "commented_code": "}\n \treturn target\n }\n+\n+func buildInitialMetadata(metadata []*meshconfig.MeshConfig_ExtensionProvider_HttpHeader) []*core.HeaderValue {\n+\ttarget := make([]*core.HeaderValue, 0, len(metadata))",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1738914088",
        "repo_full_name": "istio/istio",
        "pr_number": 52915,
        "pr_file": "pilot/pkg/networking/core/tracing.go",
        "discussion_id": "1738914088",
        "commented_code": "@@ -717,3 +720,15 @@ func buildHTTPHeaders(headers []*meshconfig.MeshConfig_ExtensionProvider_HttpHea\n \t}\n \treturn target\n }\n+\n+func buildInitialMetadata(metadata []*meshconfig.MeshConfig_ExtensionProvider_HttpHeader) []*core.HeaderValue {\n+\ttarget := make([]*core.HeaderValue, 0, len(metadata))",
        "comment_created_at": "2024-08-30T15:18:44+00:00",
        "comment_author": "howardjohn",
        "comment_body": "This is always setting `initialmetadata` to non nil, can we add `if metadata == nil { return nil }`?",
        "pr_file_module": null
      },
      {
        "comment_id": "1739584521",
        "repo_full_name": "istio/istio",
        "pr_number": 52915,
        "pr_file": "pilot/pkg/networking/core/tracing.go",
        "discussion_id": "1738914088",
        "commented_code": "@@ -717,3 +720,15 @@ func buildHTTPHeaders(headers []*meshconfig.MeshConfig_ExtensionProvider_HttpHea\n \t}\n \treturn target\n }\n+\n+func buildInitialMetadata(metadata []*meshconfig.MeshConfig_ExtensionProvider_HttpHeader) []*core.HeaderValue {\n+\ttarget := make([]*core.HeaderValue, 0, len(metadata))",
        "comment_created_at": "2024-08-31T02:10:10+00:00",
        "comment_author": "Kuromesi",
        "comment_body": "Done. :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1102208878",
    "pr_number": 43269,
    "pr_file": "pilot/pkg/networking/core/v1alpha3/listener_waypoint.go",
    "created_at": "2023-02-10T02:19:00+00:00",
    "commented_code": "PrefixLen:     cidr.PrefixLen,\n \t\t\t})\n \t\t}\n-\t\tchains = append(chains, directChain)\n-\t\tipMatcher.RangeMatchers = append(ipMatcher.RangeMatchers,\n-\t\t\t&matcher.IPMatcher_IPRangeMatcher{\n-\t\t\t\tRanges:  ipRange,\n-\t\t\t\tOnMatch: match.ToChain(directChain.Name),\n-\t\t\t})\n+\t\tif len(ipRange) > 0 {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1102208878",
        "repo_full_name": "istio/istio",
        "pr_number": 43269,
        "pr_file": "pilot/pkg/networking/core/v1alpha3/listener_waypoint.go",
        "discussion_id": "1102208878",
        "commented_code": "@@ -294,12 +294,14 @@ func (lb *ListenerBuilder) buildWaypointInternal(wls []WorkloadAndServices, svcs\n \t\t\t\tPrefixLen:     cidr.PrefixLen,\n \t\t\t})\n \t\t}\n-\t\tchains = append(chains, directChain)\n-\t\tipMatcher.RangeMatchers = append(ipMatcher.RangeMatchers,\n-\t\t\t&matcher.IPMatcher_IPRangeMatcher{\n-\t\t\t\tRanges:  ipRange,\n-\t\t\t\tOnMatch: match.ToChain(directChain.Name),\n-\t\t\t})\n+\t\tif len(ipRange) > 0 {",
        "comment_created_at": "2023-02-10T02:19:00+00:00",
        "comment_author": "hzxuzhonghu",
        "comment_body": "can check len(wls) in L275",
        "pr_file_module": null
      }
    ]
  }
]