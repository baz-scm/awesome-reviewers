[
  {
    "discussion_id": "2014234667",
    "pr_number": 55676,
    "pr_file": "pilot/pkg/features/telemetry.go",
    "created_at": "2025-03-26T14:06:13+00:00",
    "commented_code": "EnableControllerQueueMetrics = env.Register(\"ISTIO_ENABLE_CONTROLLER_QUEUE_METRICS\", false,\n \t\t\"If enabled, publishes metrics for queue depth, latency and processing times.\").Get()\n+\n+\tSpawnUpstreamSpanForGateway = env.Register(\"PILOT_SPAWN_UPSTREAM_SPAN_FOR_GATEWAY\", false,",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "2014234667",
        "repo_full_name": "istio/istio",
        "pr_number": 55676,
        "pr_file": "pilot/pkg/features/telemetry.go",
        "discussion_id": "2014234667",
        "commented_code": "@@ -76,4 +76,7 @@ var (\n \n \tEnableControllerQueueMetrics = env.Register(\"ISTIO_ENABLE_CONTROLLER_QUEUE_METRICS\", false,\n \t\t\"If enabled, publishes metrics for queue depth, latency and processing times.\").Get()\n+\n+\tSpawnUpstreamSpanForGateway = env.Register(\"PILOT_SPAWN_UPSTREAM_SPAN_FOR_GATEWAY\", false,",
        "comment_created_at": "2025-03-26T14:06:13+00:00",
        "comment_author": "keithmattix",
        "comment_body": "Is there a reason we don't always want this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2015160780",
        "repo_full_name": "istio/istio",
        "pr_number": 55676,
        "pr_file": "pilot/pkg/features/telemetry.go",
        "discussion_id": "2014234667",
        "commented_code": "@@ -76,4 +76,7 @@ var (\n \n \tEnableControllerQueueMetrics = env.Register(\"ISTIO_ENABLE_CONTROLLER_QUEUE_METRICS\", false,\n \t\t\"If enabled, publishes metrics for queue depth, latency and processing times.\").Get()\n+\n+\tSpawnUpstreamSpanForGateway = env.Register(\"PILOT_SPAWN_UPSTREAM_SPAN_FOR_GATEWAY\", false,",
        "comment_created_at": "2025-03-27T00:12:22+00:00",
        "comment_author": "zirain",
        "comment_body": "the only reason I think is backward compatibility.\r\n\r\nMy plan is changed the default value to ture in v1.27 and remove it then.",
        "pr_file_module": null
      },
      {
        "comment_id": "2016777600",
        "repo_full_name": "istio/istio",
        "pr_number": 55676,
        "pr_file": "pilot/pkg/features/telemetry.go",
        "discussion_id": "2014234667",
        "commented_code": "@@ -76,4 +76,7 @@ var (\n \n \tEnableControllerQueueMetrics = env.Register(\"ISTIO_ENABLE_CONTROLLER_QUEUE_METRICS\", false,\n \t\t\"If enabled, publishes metrics for queue depth, latency and processing times.\").Get()\n+\n+\tSpawnUpstreamSpanForGateway = env.Register(\"PILOT_SPAWN_UPSTREAM_SPAN_FOR_GATEWAY\", false,",
        "comment_created_at": "2025-03-27T14:17:18+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Can we add to compatibility profile then?",
        "pr_file_module": null
      },
      {
        "comment_id": "2017738039",
        "repo_full_name": "istio/istio",
        "pr_number": 55676,
        "pr_file": "pilot/pkg/features/telemetry.go",
        "discussion_id": "2014234667",
        "commented_code": "@@ -76,4 +76,7 @@ var (\n \n \tEnableControllerQueueMetrics = env.Register(\"ISTIO_ENABLE_CONTROLLER_QUEUE_METRICS\", false,\n \t\t\"If enabled, publishes metrics for queue depth, latency and processing times.\").Get()\n+\n+\tSpawnUpstreamSpanForGateway = env.Register(\"PILOT_SPAWN_UPSTREAM_SPAN_FOR_GATEWAY\", false,",
        "comment_created_at": "2025-03-28T00:01:27+00:00",
        "comment_author": "zirain",
        "comment_body": "yes, will add compatibility in v1.27, addressed with TODO.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1421416565",
    "pr_number": 48256,
    "pr_file": "pilot/pkg/features/pilot.go",
    "created_at": "2023-12-09T13:07:23+00:00",
    "commented_code": "StackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1421416565",
        "repo_full_name": "istio/istio",
        "pr_number": 48256,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1421416565",
        "commented_code": "@@ -704,6 +704,8 @@ var (\n \n \tStackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+",
        "comment_created_at": "2023-12-09T13:07:23+00:00",
        "comment_author": "ramaraochavali",
        "comment_body": "What are the considerations for enabling it if it is defaulted to false? I assume this is only as a short term measure till this is stabilized? If yes, may be we should default it to true. Also explain when this should be set to false",
        "pr_file_module": null
      },
      {
        "comment_id": "1421423416",
        "repo_full_name": "istio/istio",
        "pr_number": 48256,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1421416565",
        "commented_code": "@@ -704,6 +704,8 @@ var (\n \n \tStackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+",
        "comment_created_at": "2023-12-09T13:50:07+00:00",
        "comment_author": "zirain",
        "comment_body": "I trade this as an experimental feature, so I think it should be off by default.\r\nLike we did for native stats filter, it was first default off, then default on later.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1415806661",
    "pr_number": 48141,
    "pr_file": "pilot/pkg/features/pilot.go",
    "created_at": "2023-12-05T15:25:17+00:00",
    "commented_code": "StackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+\n+\tEnableGatewayMtlsDownstreamMetadataExchnage = env.RegisterBoolVar(\"ENABLE_GATEWAY_MTLS_DOWNSTREAM_METADATA_EXCHANGE\", false,",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1415806661",
        "repo_full_name": "istio/istio",
        "pr_number": 48141,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1415806661",
        "commented_code": "@@ -704,6 +704,9 @@ var (\n \n \tStackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+\n+\tEnableGatewayMtlsDownstreamMetadataExchnage = env.RegisterBoolVar(\"ENABLE_GATEWAY_MTLS_DOWNSTREAM_METADATA_EXCHANGE\", false,",
        "comment_created_at": "2023-12-05T15:25:17+00:00",
        "comment_author": "GregHanson",
        "comment_body": "if adding a new feature flag, please include a release note and link to the issue mentioned in the PR description",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1415807604",
    "pr_number": 48141,
    "pr_file": "pilot/pkg/features/pilot.go",
    "created_at": "2023-12-05T15:25:52+00:00",
    "commented_code": "StackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+\n+\tEnableGatewayMtlsDownstreamMetadataExchnage = env.RegisterBoolVar(\"ENABLE_GATEWAY_MTLS_DOWNSTREAM_METADATA_EXCHANGE\", false,",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1415807604",
        "repo_full_name": "istio/istio",
        "pr_number": 48141,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1415807604",
        "commented_code": "@@ -704,6 +704,9 @@ var (\n \n \tStackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+\n+\tEnableGatewayMtlsDownstreamMetadataExchnage = env.RegisterBoolVar(\"ENABLE_GATEWAY_MTLS_DOWNSTREAM_METADATA_EXCHANGE\", false,",
        "comment_created_at": "2023-12-05T15:25:52+00:00",
        "comment_author": "hzxuzhonghu",
        "comment_body": "probably we do not need this flag",
        "pr_file_module": null
      },
      {
        "comment_id": "1423997886",
        "repo_full_name": "istio/istio",
        "pr_number": 48141,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1415807604",
        "commented_code": "@@ -704,6 +704,9 @@ var (\n \n \tStackdriverAuditLog = env.Register(\"STACKDRIVER_AUDIT_LOG\", false, \"\"+\n \t\t\"If enabled, StackDriver audit logging will be enabled.\").Get()\n+\n+\tEnableGatewayMtlsDownstreamMetadataExchnage = env.RegisterBoolVar(\"ENABLE_GATEWAY_MTLS_DOWNSTREAM_METADATA_EXCHANGE\", false,",
        "comment_created_at": "2023-12-12T13:31:36+00:00",
        "comment_author": "psinghal20",
        "comment_body": "I am personally in favour of enabling this by default without any feature flag. I added the feature flag considering the issues highlighted here: https://github.com/istio/istio/pull/48141/#issuecomment-1839883860.\r\n\r\nLet me know if removing the feature flag and enabling it by default should be safe.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1291683576",
    "pr_number": 46067,
    "pr_file": "pilot/pkg/features/pilot.go",
    "created_at": "2023-08-11T18:53:00+00:00",
    "commented_code": "MetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1291683576",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T18:53:00+00:00",
        "comment_author": "lei-tang",
        "comment_body": "Should the default value of \"NATIVE_METADATA_EXCHANGE\" be false instead?  A user can opt in to try it by setting the flag to be true and when it becomes stable, the flag can be set as true by default.",
        "pr_file_module": null
      },
      {
        "comment_id": "1291689279",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T19:00:52+00:00",
        "comment_author": "kyessenov",
        "comment_body": "How would we stabilize it if it's off-by-default for new clusters? I think it's indeed some risk, but this filter is fairly simple that it might be OK to avoid a prolonged maintenance interval for the Wasm version.",
        "pr_file_module": null
      },
      {
        "comment_id": "1291692368",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T19:05:11+00:00",
        "comment_author": "howardjohn",
        "comment_body": "+1 to **on** by default. \r\n\r\nOff by default is good for cool new features that users will want to use, but have some risk associated such that we cannot turn them on.\r\n\r\nOn by default is good for improvements we make that we are worried about unknown-risks, so we have an escape hatch if something goes wrong.\r\n\r\noff-by-default for something like this will not help us. No one will opt into an internal refactoring, so we will not get feedback.\r\n\r\neven better, this is merging that the start of the release cycle so we have 3 months before it ships to users (unless we planned to backport to 1.19)",
        "pr_file_module": null
      },
      {
        "comment_id": "1291697668",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T19:12:57+00:00",
        "comment_author": "GregHanson",
        "comment_body": "> an internal refactoring,\r\n\r\n+1 to on by default for this reason",
        "pr_file_module": null
      },
      {
        "comment_id": "1291721362",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T19:47:30+00:00",
        "comment_author": "linsun",
        "comment_body": "definitely +1 for 1.20. Worth considering for 1.19 as well if pass all of our testing.",
        "pr_file_module": null
      },
      {
        "comment_id": "1291747443",
        "repo_full_name": "istio/istio",
        "pr_number": 46067,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "1291683576",
        "commented_code": "@@ -653,6 +653,9 @@ var (\n \tMetricGracefulDeletionInterval = env.Register(\"METRIC_GRACEFUL_DELETION_INTERVAL\", 5*time.Minute,\n \t\t\"Metric expiry graceful deletion interval. No-op if METRIC_ROTATION_INTERVAL is disabled.\").Get()\n \n+\tNativeMetadataExchange = env.Register(\"NATIVE_METADATA_EXCHANGE\", true,",
        "comment_created_at": "2023-08-11T20:24:26+00:00",
        "comment_author": "lei-tang",
        "comment_body": "SGTM.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "984991389",
    "pr_number": 41198,
    "pr_file": "pilot/pkg/features/pilot.go",
    "created_at": "2022-09-30T22:57:00+00:00",
    "commented_code": "SidecarIgnorePort = env.Register(\"SIDECAR_IGNORE_PORT_IN_HOST_MATCH\", true, \"If enabled, port will not be used in vhost domain matches.\").Get()\n \n \tEnableEnhancedResourceScoping = env.Register(\"ENABLE_ENHANCED_RESOURCE_SCOPING\", false,\n-\t\t\"If enabled, meshConfig.discoverySelectors will also limit the configurations(like Gateway,VirtualService,DestinationRule,Ingress, etc)\"+",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "984991389",
        "repo_full_name": "istio/istio",
        "pr_number": 41198,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "984991389",
        "commented_code": "@@ -655,8 +655,8 @@ var (\n \tSidecarIgnorePort = env.Register(\"SIDECAR_IGNORE_PORT_IN_HOST_MATCH\", true, \"If enabled, port will not be used in vhost domain matches.\").Get()\n \n \tEnableEnhancedResourceScoping = env.Register(\"ENABLE_ENHANCED_RESOURCE_SCOPING\", false,\n-\t\t\"If enabled, meshConfig.discoverySelectors will also limit the configurations(like Gateway,VirtualService,DestinationRule,Ingress, etc)\"+",
        "comment_created_at": "2022-09-30T22:57:00+00:00",
        "comment_author": "kfaseela",
        "comment_body": "@howardjohn though we agreed on having a single selector, wondering if there should be a separate feature flag so that people get flexibility to choose. Ofcourse my usecase works with a single feature flag, just in case anyone else would need the flexibility.",
        "pr_file_module": null
      },
      {
        "comment_id": "991455516",
        "repo_full_name": "istio/istio",
        "pr_number": 41198,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "984991389",
        "commented_code": "@@ -655,8 +655,8 @@ var (\n \tSidecarIgnorePort = env.Register(\"SIDECAR_IGNORE_PORT_IN_HOST_MATCH\", true, \"If enabled, port will not be used in vhost domain matches.\").Get()\n \n \tEnableEnhancedResourceScoping = env.Register(\"ENABLE_ENHANCED_RESOURCE_SCOPING\", false,\n-\t\t\"If enabled, meshConfig.discoverySelectors will also limit the configurations(like Gateway,VirtualService,DestinationRule,Ingress, etc)\"+",
        "comment_created_at": "2022-10-10T16:14:33+00:00",
        "comment_author": "howardjohn",
        "comment_body": "IMO no.\r\n\r\nEither:\r\n* Long term we want to have granular config, and should use something other than env var to expose that API\r\n* This is only a short-term opt out, and we will remove it soon. If this is the case, there is no need for granular opt-in to new functionality.\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "995664601",
        "repo_full_name": "istio/istio",
        "pr_number": 41198,
        "pr_file": "pilot/pkg/features/pilot.go",
        "discussion_id": "984991389",
        "commented_code": "@@ -655,8 +655,8 @@ var (\n \tSidecarIgnorePort = env.Register(\"SIDECAR_IGNORE_PORT_IN_HOST_MATCH\", true, \"If enabled, port will not be used in vhost domain matches.\").Get()\n \n \tEnableEnhancedResourceScoping = env.Register(\"ENABLE_ENHANCED_RESOURCE_SCOPING\", false,\n-\t\t\"If enabled, meshConfig.discoverySelectors will also limit the configurations(like Gateway,VirtualService,DestinationRule,Ingress, etc)\"+",
        "comment_created_at": "2022-10-14T11:38:29+00:00",
        "comment_author": "kfaseela",
        "comment_body": "Makes sense",
        "pr_file_module": null
      }
    ]
  }
]