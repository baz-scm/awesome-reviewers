[
  {
    "discussion_id": "1034891059",
    "pr_number": 42196,
    "pr_file": "pilot/pkg/model/telemetry.go",
    "created_at": "2022-11-29T15:16:53+00:00",
    "commented_code": "func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1034891059",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-11-29T15:16:53+00:00",
        "comment_author": "howardjohn",
        "comment_body": "what if its not a pod",
        "pr_file_module": null
      },
      {
        "comment_id": "1034891986",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-11-29T15:17:39+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Actually workload name is more commonly Deployment anyways?not pod name",
        "pr_file_module": null
      },
      {
        "comment_id": "1035417046",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-11-30T00:36:42+00:00",
        "comment_author": "zirain",
        "comment_body": "yes, I misunderstand that\r\npod name is more useful, let me do some research ",
        "pr_file_module": null
      },
      {
        "comment_id": "1036172893",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-11-30T16:14:03+00:00",
        "comment_author": "howardjohn",
        "comment_body": "We should probably use the same values we are setting in `baggage` for ambient",
        "pr_file_module": null
      },
      {
        "comment_id": "1036583949",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-01T00:41:07+00:00",
        "comment_author": "zirain",
        "comment_body": "should we follow the existing [OpenTelemetry Resource Semantic Conventions](https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/) ?",
        "pr_file_module": null
      },
      {
        "comment_id": "1036598075",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-01T01:12:33+00:00",
        "comment_author": "howardjohn",
        "comment_body": "@kyessenov @lei-tang @costinm ",
        "pr_file_module": null
      },
      {
        "comment_id": "1036615640",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-01T01:49:04+00:00",
        "comment_author": "hzxuzhonghu",
        "comment_body": "I think we should obey the OTEL rule",
        "pr_file_module": null
      },
      {
        "comment_id": "1036632775",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-01T02:29:36+00:00",
        "comment_author": "howardjohn",
        "comment_body": "It seems like we should probably align with Otel and baggage. So if those aren't already aligned maybe we should align those as well",
        "pr_file_module": null
      },
      {
        "comment_id": "1036680645",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-01T04:33:09+00:00",
        "comment_author": "kyessenov",
        "comment_body": "Agree with @hzxuzhonghu , Otel semantic conventions take priority over anything in Istio or Ambient.\r\n`k8s.pod.name` seems like the right thing for pods, but not every sidecar runs in a pod, could be a job, for example.",
        "pr_file_module": null
      },
      {
        "comment_id": "1037707312",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-02T01:25:56+00:00",
        "comment_author": "zirain",
        "comment_body": "> but not every sidecar runs in a pod, could be a job, for example\r\n\r\ngood catch, seems it's better to remove `k8s.deployment.name` for now.",
        "pr_file_module": null
      },
      {
        "comment_id": "1043041928",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-08T08:06:59+00:00",
        "comment_author": "zirain",
        "comment_body": "reverted deployment name\r\n\r\n@kyessenov @howardjohn further options on this PR?",
        "pr_file_module": null
      },
      {
        "comment_id": "1043934185",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-08T23:54:43+00:00",
        "comment_author": "kyessenov",
        "comment_body": "Sorry, what I meant is that deployment is actually useful, but it should only be set for deployment pods. The attribute is called `k8s.deployment.name`.",
        "pr_file_module": null
      },
      {
        "comment_id": "1043935282",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-08T23:56:10+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Just to clarify - We should, IMO, have the same logic as https://github.com/istio/istio/blob/373fc89518c986c9f48ed3cd891930da6fdc8628/pilot/pkg/networking/core/v1alpha3/listener.go#L1653. If that logic is considered wrong, I have no objections to changing it, but they should be consistent (and consistent with OTEL)",
        "pr_file_module": null
      },
      {
        "comment_id": "1043966294",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-09T01:07:24+00:00",
        "comment_author": "zirain",
        "comment_body": "> Sorry, what I meant is that deployment is actually useful, but it should only be set for deployment pods. The attribute is called k8s.deployment.name.\r\n\r\nIIRC, there's no way to determine a pod came from a deployment or job, revert it this first, may add it back later.",
        "pr_file_module": null
      },
      {
        "comment_id": "1043976564",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-09T01:28:27+00:00",
        "comment_author": "kyessenov",
        "comment_body": "Does https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/ not work?",
        "pr_file_module": null
      },
      {
        "comment_id": "1043990551",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1034891059",
        "commented_code": "@@ -1052,3 +1053,32 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.Namespace}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.name\",",
        "comment_created_at": "2022-12-09T01:54:23+00:00",
        "comment_author": "zirain",
        "comment_body": "> Does https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/ not work?\r\n\r\nbut can we get this from `model.Proxy` ?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1043493543",
    "pr_number": 42196,
    "pr_file": "pilot/pkg/model/telemetry.go",
    "created_at": "2022-12-08T15:33:33+00:00",
    "commented_code": "func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, namespace := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1043493543",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1043493543",
        "commented_code": "@@ -1052,3 +1053,47 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, namespace := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",",
        "comment_created_at": "2022-12-08T15:33:33+00:00",
        "comment_author": "howardjohn",
        "comment_body": "this doesn't seem to be an OTEL one either?",
        "pr_file_module": null
      },
      {
        "comment_id": "1043495400",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1043493543",
        "commented_code": "@@ -1052,3 +1053,47 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, namespace := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.cluster.name\",\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.Metadata.ClusterID.String()}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey: \"k8s.service.name\",\n+\t\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: proxy.XdsNode.Cluster}},\n+\t\t\t},\n+\t\t\t{\n+\t\t\t\tKey:   \"k8s.pod.namespace\",",
        "comment_created_at": "2022-12-08T15:34:35+00:00",
        "comment_author": "howardjohn",
        "comment_body": "`k8s.namespace.name`. We should be aligning with https://github.com/istio/istio/blob/373fc89518c986c9f48ed3cd891930da6fdc8628/pilot/pkg/networking/core/v1alpha3/listener.go#L1653",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1045106106",
    "pr_number": 42196,
    "pr_file": "pilot/pkg/model/telemetry.go",
    "created_at": "2022-12-10T16:33:54+00:00",
    "commented_code": "func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1045106106",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1045106106",
        "commented_code": "@@ -1052,3 +1053,51 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"",
        "comment_created_at": "2022-12-10T16:33:54+00:00",
        "comment_author": "costinm",
        "comment_body": "Doesn't otlp define those constants ? I don't usually ask for more dependencies, but they use go.mod to keep them small, and it would make it clear we use the same names - and if we use any name not defined by their semantic convention it'll be easier to flag.\r\n\r\nI agree with John - it must match baggage header processing, and it needs to be replicated to the ambient branch as well. \r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1045133552",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1045106106",
        "commented_code": "@@ -1052,3 +1053,51 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"",
        "comment_created_at": "2022-12-10T20:29:38+00:00",
        "comment_author": "kyessenov",
        "comment_body": "@costinm OTLP uses generic strings as keys, it's not schematized.\r\n\r\nBaggage does seem to follow apart from the canonical stuff. Not sure how the vendor extensions are meant to be represented. We probably need a canonical document somewhere, not in the code.\r\n\r\nVMs shouldn't be represented as k8s, use https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/host/ instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1047855058",
    "pr_number": 42196,
    "pr_file": "pilot/pkg/model/telemetry.go",
    "created_at": "2022-12-13T23:33:25+00:00",
    "commented_code": "func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"\n+\tKubernetesNamespace OTelResourceSemantic = \"k8s.namespace.name\"\n+\tKubernetesPod       OTelResourceSemantic = \"k8s.pod.name\"\n+\tServiceName         OTelResourceSemantic = \"service.name\"\n+)\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, _ := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\totelKeyValue(otelsemconv.K8SClusterNameKey, proxy.Metadata.ClusterID.String()),\n+\t\t\totelKeyValue(otelsemconv.K8SNamespaceNameKey, proxy.ConfigNamespace),\n+\t\t\totelKeyValue(otelsemconv.K8SPodNameKey, podName),\n+\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\totelKeyValue(otelsemconv.ServiceNameKey, proxy.XdsNode.Cluster),\n+\t\t},\n+\t}\n+}\n+\n+func otelKeyValue(semantic attribute.Key, val string) *otlpcommon.KeyValue {\n+\treturn &otlpcommon.KeyValue{\n+\t\tKey:   string(semantic),\n+\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: val}},\n+\t}\n+}\n+\n+func extractProxyID(proxy *Proxy) (string, string) {",
    "repo_full_name": "istio/istio",
    "discussion_comments": [
      {
        "comment_id": "1047855058",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1047855058",
        "commented_code": "@@ -1052,3 +1055,51 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"\n+\tKubernetesNamespace OTelResourceSemantic = \"k8s.namespace.name\"\n+\tKubernetesPod       OTelResourceSemantic = \"k8s.pod.name\"\n+\tServiceName         OTelResourceSemantic = \"service.name\"\n+)\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, _ := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\totelKeyValue(otelsemconv.K8SClusterNameKey, proxy.Metadata.ClusterID.String()),\n+\t\t\totelKeyValue(otelsemconv.K8SNamespaceNameKey, proxy.ConfigNamespace),\n+\t\t\totelKeyValue(otelsemconv.K8SPodNameKey, podName),\n+\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\totelKeyValue(otelsemconv.ServiceNameKey, proxy.XdsNode.Cluster),\n+\t\t},\n+\t}\n+}\n+\n+func otelKeyValue(semantic attribute.Key, val string) *otlpcommon.KeyValue {\n+\treturn &otlpcommon.KeyValue{\n+\t\tKey:   string(semantic),\n+\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: val}},\n+\t}\n+}\n+\n+func extractProxyID(proxy *Proxy) (string, string) {",
        "comment_created_at": "2022-12-13T23:33:25+00:00",
        "comment_author": "howardjohn",
        "comment_body": "Can we please use the same logic in baggage and here? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1049134690",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1047855058",
        "commented_code": "@@ -1052,3 +1055,51 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"\n+\tKubernetesNamespace OTelResourceSemantic = \"k8s.namespace.name\"\n+\tKubernetesPod       OTelResourceSemantic = \"k8s.pod.name\"\n+\tServiceName         OTelResourceSemantic = \"service.name\"\n+)\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, _ := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\totelKeyValue(otelsemconv.K8SClusterNameKey, proxy.Metadata.ClusterID.String()),\n+\t\t\totelKeyValue(otelsemconv.K8SNamespaceNameKey, proxy.ConfigNamespace),\n+\t\t\totelKeyValue(otelsemconv.K8SPodNameKey, podName),\n+\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\totelKeyValue(otelsemconv.ServiceNameKey, proxy.XdsNode.Cluster),\n+\t\t},\n+\t}\n+}\n+\n+func otelKeyValue(semantic attribute.Key, val string) *otlpcommon.KeyValue {\n+\treturn &otlpcommon.KeyValue{\n+\t\tKey:   string(semantic),\n+\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: val}},\n+\t}\n+}\n+\n+func extractProxyID(proxy *Proxy) (string, string) {",
        "comment_created_at": "2022-12-15T01:48:16+00:00",
        "comment_author": "zirain",
        "comment_body": "refactor with pkg go.opentelemetry.io/otel/baggage, PTAL again.",
        "pr_file_module": null
      },
      {
        "comment_id": "1051242381",
        "repo_full_name": "istio/istio",
        "pr_number": 42196,
        "pr_file": "pilot/pkg/model/telemetry.go",
        "discussion_id": "1047855058",
        "commented_code": "@@ -1052,3 +1055,51 @@ func generateStatsConfig(class networking.ListenerClass, metricsCfg telemetryFil\n func disableHostHeaderFallback(class networking.ListenerClass) bool {\n \treturn class == networking.ListenerClassSidecarInbound || class == networking.ListenerClassGateway\n }\n+\n+type OTelResourceSemantic string\n+\n+const (\n+\tKubernetesCluster   OTelResourceSemantic = \"k8s.cluster.name\"\n+\tKubernetesNamespace OTelResourceSemantic = \"k8s.namespace.name\"\n+\tKubernetesPod       OTelResourceSemantic = \"k8s.pod.name\"\n+\tServiceName         OTelResourceSemantic = \"service.name\"\n+)\n+\n+// resourceAttributes return semantic attributes follow OpenTelemetry specification\n+// see more details here: https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/\n+func resourceAttributes(proxy *Proxy) *otlpcommon.KeyValueList {\n+\t// TODO(zirain): generate resource attributes for VM\n+\tif proxy.IsVM() {\n+\t\treturn nil\n+\t}\n+\n+\tpodName, _ := extractProxyID(proxy)\n+\n+\treturn &otlpcommon.KeyValueList{\n+\t\tValues: []*otlpcommon.KeyValue{\n+\t\t\totelKeyValue(otelsemconv.K8SClusterNameKey, proxy.Metadata.ClusterID.String()),\n+\t\t\totelKeyValue(otelsemconv.K8SNamespaceNameKey, proxy.ConfigNamespace),\n+\t\t\totelKeyValue(otelsemconv.K8SPodNameKey, podName),\n+\t\t\t// this seems a little hack, but in istio it works, we do the samething for `serviceCluster` in tracing\n+\t\t\totelKeyValue(otelsemconv.ServiceNameKey, proxy.XdsNode.Cluster),\n+\t\t},\n+\t}\n+}\n+\n+func otelKeyValue(semantic attribute.Key, val string) *otlpcommon.KeyValue {\n+\treturn &otlpcommon.KeyValue{\n+\t\tKey:   string(semantic),\n+\t\tValue: &otlpcommon.AnyValue{Value: &otlpcommon.AnyValue_StringValue{StringValue: val}},\n+\t}\n+}\n+\n+func extractProxyID(proxy *Proxy) (string, string) {",
        "comment_created_at": "2022-12-16T23:47:33+00:00",
        "comment_author": "howardjohn",
        "comment_body": "I meant the business logic of populating the fields more so than the `go.opentelemetry.io/otel/baggage` package.. although that is interesting, I didn't know they had a package. It seems like just a very inefficient version of fmt.Sprintf though....\r\n\r\n\r\nIts not clear to me we should be using `k8s.pod.name` in all cases. In other telemetry aspects, we are using WorkloadName, which is quite different - even on k8s, this is not always a Pod, but more often the Deployment name. There is currently a `TODO do not hardcode deployment. But I think we ignore it anyways?` in the Go code, but in the proxy code (`istio.telemetry.baggagehandler.v1.Config`). The proxy already actually returns the info we need to access this via OWNER.\r\n\r\nMore concretely, we shouldn't be parsing ID here, beyond the initial computation of model.Proxy it should be thought of as an opaque string. There are other, more reliable, ways to access the info we are after.\r\n",
        "pr_file_module": null
      }
    ]
  }
]