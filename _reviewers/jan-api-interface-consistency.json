[
  {
    "discussion_id": "1500142841",
    "pr_number": 2104,
    "pr_file": "core/src/node/api/processors/fsExt.ts",
    "created_at": "2024-02-23T01:50:39+00:00",
    "commented_code": "}\n \n   // handle fs is directory here\n-  fileStat(path: string) {\n+  async fileStat(path: string, outsideJanDataFolder?: boolean): Promise<FileStat | undefined> {",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1500142841",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 2104,
        "pr_file": "core/src/node/api/processors/fsExt.ts",
        "discussion_id": "1500142841",
        "commented_code": "@@ -48,10 +47,12 @@ export class FSExt implements Processor {\n   }\n \n   // handle fs is directory here\n-  fileStat(path: string) {\n+  async fileStat(path: string, outsideJanDataFolder?: boolean): Promise<FileStat | undefined> {",
        "comment_created_at": "2024-02-23T01:50:39+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "The function does not return Promise",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1422054948",
    "pr_number": 938,
    "pr_file": "extensions/conversational-extension/src/index.ts",
    "created_at": "2023-12-11T08:00:09+00:00",
    "commented_code": "* functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1422054948",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:00:09+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "This would look very clean at the interface design level, but quite complicated at implementation level, the app/extension would not be able to access JSONConversationalExtension to invoke its functions.",
        "pr_file_module": null
      },
      {
        "comment_id": "1422056715",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:02:10+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "i.e. pull extension from map using its type(). What's the type of this extension now.\r\nFurthermore, an extension should only extend one parent extension and can implement many features",
        "pr_file_module": null
      },
      {
        "comment_id": "1422090846",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:37:48+00:00",
        "comment_author": "freelerobot",
        "comment_body": "1. Can you give an example of `the app/extension would not be able to access JSONConversationalExtension`?\r\n\r\n1. `an extension should only extend one parent extension and can implement many features`\r\n\r\nI disagree. An extension should be composable and modular, and be able to depend on various modules from core.\r\n\r\nImagine a scenario where user wants to build a view/feature for **stateless llm chatting**. In this case, they could implement core's `message` & `inference`, without threads. This is a trivial example, but I do see a need for this type of composability once we introduce notions like `files` and more.",
        "pr_file_module": null
      },
      {
        "comment_id": "1422097911",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:44:30+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "@0xSage that's why I mentioned an extension can implement many features such as `thread, message & inference` but not many parent extensions. In OOP, an object would just be able to inherit 1 parent only. A Dog can inherit Animal but not Plant, same as extension. I'm seeing Thread & Message as features not extensions for now.\r\n\r\nThread & Message should not extends BaseExtension as well, but Conversational, so: \r\n```ts\r\nclass ConversationExtension extends BaseExtension implements Thread, Message {\r\n}\r\n```\r\nBut I have no idea how to name the Thread and Message here without extension suffix.",
        "pr_file_module": null
      },
      {
        "comment_id": "1422107287",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:52:42+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "For the 1, its about runtime type check as I mentioned before, can't check ConversationExtension inherited ThreadExtension or not \ud83e\udee8",
        "pr_file_module": null
      },
      {
        "comment_id": "1422110748",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T08:55:23+00:00",
        "comment_author": "freelerobot",
        "comment_body": "Ah yeah I see your pt. Hmm will play around this a bit",
        "pr_file_module": null
      },
      {
        "comment_id": "1422611162",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-11T15:02:33+00:00",
        "comment_author": "freelerobot",
        "comment_body": "@louis-jan I have noob questions:\r\n_Caveat: I am very rusty at js/sdk design at this point; please do cmiiw_\r\n\r\n1. Is this a correct rep of our current impl?\r\n<img width=\"1620\" alt=\"image\" src=\"https://github.com/janhq/jan/assets/69952136/fc0728f3-88ae-4e7d-a8c2-7439bb773acb\">\r\n\r\n2. **Can client implementations (in `/web`) depend on controller level implementations (in `/extension`)**? i.e.  precompile `/extensions` s.t. `entities/use case` > `controllers` > `UI` > `Framework/devices`. \r\n\r\n3. If so, how might we override-default-extensions at runtime, injection script?\r\n<img width=\"1596\" alt=\"image\" src=\"https://github.com/janhq/jan/assets/69952136/ff96154f-52a9-4859-bbce-3ea59ef986d2\">\r\n\r\n4. From a devex perspective, how can we avoid devs touching `core` (highly permissioned)? ",
        "pr_file_module": null
      },
      {
        "comment_id": "1423364293",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-12T03:34:08+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "1. Yeah, that's correct, but app can use default implemented extensions directly instead of just EventHandler. e.g.\r\n```ts\r\n// in useCreateAssistanth() \r\nconst threads = await extensionManager.get<ConversationalExtension>().getThreads() // here is runtime type check needed\r\n```\r\n2. Precompile extensions in app should work, we don't need to manage anonymous extensions, but quite anti-pattern (Registry). \r\nIt works with singleton extensions only\r\n```ts\r\nconst convExt = new ConversationalExtension() // singleton - global access\r\n\r\nconst threads = await convExt.getThreads()\r\n```\r\n3. Since it `implements` features, I have no idea for now on how to deal with that. `Implements` do not mean much in TS after compiled.\r\n\r\n4. Since `core` module is extensively used from the app client to the Node server and every single extension, any update to the core could potentially affect other components. For example, if we rename the API routes, all extensions dependent on these routes would require updates, otherwise, they may break. I believe developers might struggle to make it work without proper alignment and granted permissions",
        "pr_file_module": null
      },
      {
        "comment_id": "1423379237",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-12T04:08:26+00:00",
        "comment_author": "freelerobot",
        "comment_body": "Can you elaborate a bit? Not sure I understand what you mean. \r\n\r\n2. Are you saying precompiling extensions is an anti-pattern, or are you saying injecting anon extensions is an anti-pattern? Or both?\r\n2.1. What do you mean by \"singleton global access\"? Please do elaborate.\r\n3. Since what implements features? what is `it`?\r\n4. Not sure you answered my question. Are you simply agreeing that 90% of external extensions devs should not touch core? \r\n\r\nMy main concern, at the end of the day, is that, in our current implementation, **devs can only override existing uses cases (defined by core), and are not able to introduce new entities and use cases.**\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "1423384823",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 938,
        "pr_file": "extensions/conversational-extension/src/index.ts",
        "discussion_id": "1422054948",
        "commented_code": "@@ -8,7 +8,7 @@ import { join } from 'path'\n  * functionality for managing threads.\n  */\n export default class JSONConversationalExtension\n-  implements ConversationalExtension\n+  implements ThreadExtension, MessageExtension",
        "comment_created_at": "2023-12-12T04:21:03+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "2. I mean to access precompile extensions without checking their type, we have to force to constraint the logic with type casting `(use singleton + cast type -> anti pattern)` and not to put them in extension registry, otherwise we could not know how to pull the correct extension out of the registry to use (could not inject)\r\n\r\n3. I mean `extension` implements `thread / message / assistant`\r\n4. Yes, totally correct.",
        "pr_file_module": null
      }
    ]
  }
]