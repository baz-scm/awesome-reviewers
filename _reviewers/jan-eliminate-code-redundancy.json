[
  {
    "discussion_id": "2222800919",
    "pr_number": 5838,
    "pr_file": "extensions/llamacpp-extension/src/index.ts",
    "created_at": "2025-07-22T14:49:53+00:00",
    "commented_code": "import { invoke } from '@tauri-apps/api/core'\n import { basename } from '@tauri-apps/api/path'\n import { getProxyConfig } from './util'\n+import { basename } from '@tauri-apps/api/path'",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "2222800919",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 5838,
        "pr_file": "extensions/llamacpp-extension/src/index.ts",
        "discussion_id": "2222800919",
        "commented_code": "@@ -32,6 +32,7 @@ import {\n import { invoke } from '@tauri-apps/api/core'\n import { basename } from '@tauri-apps/api/path'\n import { getProxyConfig } from './util'\n+import { basename } from '@tauri-apps/api/path'",
        "comment_created_at": "2025-07-22T14:49:53+00:00",
        "comment_author": "qnixsynapse",
        "comment_body": "Double import",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1772446259",
    "pr_number": 3725,
    "pr_file": "extensions/model-extension/src/index.ts",
    "created_at": "2024-09-24T01:42:01+00:00",
    "commented_code": ")\n \n     const eos_id = metadata?.['tokenizer.ggml.eos_token_id']\n+    const updatedModel = await this.retrieveGGUFMetadata(metadata)",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1772446259",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 3725,
        "pr_file": "extensions/model-extension/src/index.ts",
        "discussion_id": "1772446259",
        "commented_code": "@@ -556,6 +573,7 @@ export default class JanModelExtension extends ModelExtension {\n     )\n \n     const eos_id = metadata?.['tokenizer.ggml.eos_token_id']\n+    const updatedModel = await this.retrieveGGUFMetadata(metadata)",
        "comment_created_at": "2024-09-24T01:42:01+00:00",
        "comment_author": "dan-menlo",
        "comment_body": "This is much needed - thank you @louis-jan! ",
        "pr_file_module": null
      },
      {
        "comment_id": "1772482461",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 3725,
        "pr_file": "extensions/model-extension/src/index.ts",
        "discussion_id": "1772446259",
        "commented_code": "@@ -556,6 +573,7 @@ export default class JanModelExtension extends ModelExtension {\n     )\n \n     const eos_id = metadata?.['tokenizer.ggml.eos_token_id']\n+    const updatedModel = await this.retrieveGGUFMetadata(metadata)",
        "comment_created_at": "2024-09-24T02:39:36+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "Thanks for the comment. I noticed that eos_id appears to be legacy code, which we should consider cleaning up. Removed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1673609757",
    "pr_number": 3153,
    "pr_file": "web/hooks/useMigratingData.ts",
    "created_at": "2024-07-11T08:21:50+00:00",
    "commented_code": "try {\n       const threadsAndMessages = await getJanThreadsAndMessages()\n       const janThreads = threadsAndMessages.threads\n-      for (const thread of janThreads) {\n-        const modelId: string | undefined = thread.assistants[0]?.model?.id\n-        if (!modelId || modelId.trim().length === 0 || modelId === '*') {\n-          console.error(\n-            `Ignore thread ${thread.id} because modelId is not found`\n-          )\n-          continue\n-        }\n-        const threadTitle: string = thread.title ?? 'New Thread'\n-        const instruction: string = thread.assistants[0]?.instruction ?? ''\n+      if (!threadsMessagesMigrationSuccess) {",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1673609757",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 3153,
        "pr_file": "web/hooks/useMigratingData.ts",
        "discussion_id": "1673609757",
        "commented_code": "@@ -33,64 +50,70 @@ const useMigratingData = () => {\n     try {\n       const threadsAndMessages = await getJanThreadsAndMessages()\n       const janThreads = threadsAndMessages.threads\n-      for (const thread of janThreads) {\n-        const modelId: string | undefined = thread.assistants[0]?.model?.id\n-        if (!modelId || modelId.trim().length === 0 || modelId === '*') {\n-          console.error(\n-            `Ignore thread ${thread.id} because modelId is not found`\n-          )\n-          continue\n-        }\n-        const threadTitle: string = thread.title ?? 'New Thread'\n-        const instruction: string = thread.assistants[0]?.instruction ?? ''\n+      if (!threadsMessagesMigrationSuccess) {",
        "comment_created_at": "2024-07-11T08:21:50+00:00",
        "comment_author": "namchuai",
        "comment_body": "I think we can use early return here.\r\n`if (threadsMessagesMigrationSuccess) return`\r\nand, I think we can check this earlier, right? before getting `getJanThreadsAndMessages`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1477319527",
    "pr_number": 1803,
    "pr_file": "core/src/types/message/messageEvent.ts",
    "created_at": "2024-02-04T14:07:05+00:00",
    "commented_code": "OnMessageResponse = 'OnMessageResponse',\n   /** The `OnMessageUpdate` event is emitted when a message is updated. */\n   OnMessageUpdate = 'OnMessageUpdate',\n+\n+  OnFirstPrompt = 'OnFirstPrompt',",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1477319527",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 1803,
        "pr_file": "core/src/types/message/messageEvent.ts",
        "discussion_id": "1477319527",
        "commented_code": "@@ -5,4 +5,8 @@ export enum MessageEvent {\n   OnMessageResponse = 'OnMessageResponse',\n   /** The `OnMessageUpdate` event is emitted when a message is updated. */\n   OnMessageUpdate = 'OnMessageUpdate',\n+\n+  OnFirstPrompt = 'OnFirstPrompt',",
        "comment_created_at": "2024-02-04T14:07:05+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "I think we can avoid code duplication. Let's say we can remove these, also, instead of onFirstPrompt, add a message type into MessageRequestBody, and the app's EventHandler can switch logics there. The PR would be very short and clean then.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1379533039",
    "pr_number": 526,
    "pr_file": "web/hooks/useCreateConversation.ts",
    "created_at": "2023-11-02T02:51:44+00:00",
    "commented_code": "const requestCreateConvo = async (model: AssistantModel, bot?: Bot) => {\n     const conversationName = model.name\n+    const convoId = `jan-${(Date.now() / 1000).toFixed(0)}`",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1379533039",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 526,
        "pr_file": "web/hooks/useCreateConversation.ts",
        "discussion_id": "1379533039",
        "commented_code": "@@ -31,30 +31,24 @@ const useCreateConversation = () => {\n \n   const requestCreateConvo = async (model: AssistantModel, bot?: Bot) => {\n     const conversationName = model.name\n+    const convoId = `jan-${(Date.now() / 1000).toFixed(0)}`",
        "comment_created_at": "2023-11-02T02:51:44+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "this will be used in system wide, should be an util?",
        "pr_file_module": null
      }
    ]
  }
]