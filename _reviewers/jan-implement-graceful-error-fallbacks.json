[
  {
    "discussion_id": "2253023585",
    "pr_number": 6049,
    "pr_file": "extensions/llamacpp-extension/src/index.ts",
    "created_at": "2025-08-05T03:31:21+00:00",
    "commented_code": "}\n   }\n \n+  async getRecommendedBackend(): Promise<string> {\n+    try {\n+      const supportedBackends = await listSupportedBackends()\n+      return this.determineBestBackend(supportedBackends)\n+    } catch (error) {\n+      logger.error('Failed to get recommended backend:', error)\n+      return ''\n+    }",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "2253023585",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 6049,
        "pr_file": "extensions/llamacpp-extension/src/index.ts",
        "discussion_id": "2253023585",
        "commented_code": "@@ -1576,6 +1576,16 @@ export default class llamacpp_extension extends AIEngine {\n     }\n   }\n \n+  async getRecommendedBackend(): Promise<string> {\n+    try {\n+      const supportedBackends = await listSupportedBackends()\n+      return this.determineBestBackend(supportedBackends)\n+    } catch (error) {\n+      logger.error('Failed to get recommended backend:', error)\n+      return ''\n+    }",
        "comment_created_at": "2025-08-05T03:31:21+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "Since this function returns a promise, there is no need to try catch in place\n```suggestion\n    return listSupportedBackends().then(this.determineBestBackend)\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1440070569",
    "pr_number": 1299,
    "pr_file": "electron/main.ts",
    "created_at": "2024-01-03T04:39:20+00:00",
    "commented_code": "})\n \n app.once('window-all-closed', () => {\n-  cleanUpAndQuit()\n+  if (process.platform !== 'darwin') app.quit()",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1440070569",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 1299,
        "pr_file": "electron/main.ts",
        "discussion_id": "1440070569",
        "commented_code": "@@ -39,7 +39,7 @@ app\n   })\n \n app.once('window-all-closed', () => {\n-  cleanUpAndQuit()\n+  if (process.platform !== 'darwin') app.quit()",
        "comment_created_at": "2024-01-03T04:39:20+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "This would lead to an issue where app subprocesses, such as Nitro, loaded models, API server, are not being killed properly.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1425094507",
    "pr_number": 975,
    "pr_file": "extensions/inference-nitro-extension/src/module.ts",
    "created_at": "2023-12-13T09:39:57+00:00",
    "commented_code": "*/\n function killSubprocess(): Promise<void> {\n   if (subprocess) {\n-    subprocess.kill();\n-    subprocess = null;\n-    console.debug(\"Subprocess terminated.\");\n+    fetch(NITRO_HTTP_KILL_URL, {\n+      method: \"DELETE\",\n+    }).catch((err) => {\n+      console.error(err);\n+      subprocess.kill();\n+      subprocess = null;\n+      return killSubprocess();\n+    });",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1425094507",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 975,
        "pr_file": "extensions/inference-nitro-extension/src/module.ts",
        "discussion_id": "1425094507",
        "commented_code": "@@ -188,9 +189,14 @@ async function validateModelStatus(): Promise<ModelOperationResponse> {\n  */\n function killSubprocess(): Promise<void> {\n   if (subprocess) {\n-    subprocess.kill();\n-    subprocess = null;\n-    console.debug(\"Subprocess terminated.\");\n+    fetch(NITRO_HTTP_KILL_URL, {\n+      method: \"DELETE\",\n+    }).catch((err) => {\n+      console.error(err);\n+      subprocess.kill();\n+      subprocess = null;\n+      return killSubprocess();\n+    });",
        "comment_created_at": "2023-12-13T09:39:57+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "```suggestion\r\n    return fetch(NITRO_HTTP_KILL_URL, {\r\n      method: \"DELETE\",\r\n    }).catch((err) => {\r\n      console.error(err);\r\n      subprocess.kill();\r\n      subprocess = null;\r\n      return kill(PORT, \"tcp\").then(console.log).catch(console.log);\r\n});\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1393633976",
    "pr_number": 598,
    "pr_file": "web/hooks/useSendChatMessage.ts",
    "created_at": "2023-11-15T04:52:47+00:00",
    "commented_code": "}\n \n   const sendChatMessage = async () => {\n-    const convoId = currentConvo?._id as string\n+    const convoId = currentConvo?.id\n+    if (!convoId) {\n+      console.error('No conversation id')",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1393633976",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 598,
        "pr_file": "web/hooks/useSendChatMessage.ts",
        "discussion_id": "1393633976",
        "commented_code": "@@ -87,7 +85,11 @@ export default function useSendChatMessage() {\n   }\n \n   const sendChatMessage = async () => {\n-    const convoId = currentConvo?._id as string\n+    const convoId = currentConvo?.id\n+    if (!convoId) {\n+      console.error('No conversation id')",
        "comment_created_at": "2023-11-15T04:52:47+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "TODO: Display a toast notification to inform the user of these types of errors. cc @urmauur ",
        "pr_file_module": null
      }
    ]
  }
]