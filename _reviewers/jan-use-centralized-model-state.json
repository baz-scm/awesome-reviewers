[
  {
    "discussion_id": "1751405133",
    "pr_number": 3615,
    "pr_file": "web/containers/SliderRightPanel/index.test.tsx",
    "created_at": "2024-09-10T07:24:17+00:00",
    "commented_code": "+import React from 'react'\n+import { render } from '@testing-library/react'\n+import { fireEvent, screen } from '@testing-library/dom'\n+import SliderRightPanel from './index'\n+import '@testing-library/jest-dom'\n+\n+class ResizeObserverMock {\n+  observe() {}\n+  unobserve() {}\n+  disconnect() {}\n+}\n+\n+global.ResizeObserver = ResizeObserverMock\n+\n+jest.mock('@radix-ui/react-slider', () => ({\n+  Root: ({ children, onValueChange, ...props }: any) => (\n+    <div data-testid=\"slider-root\" {...props}>\n+      <input\n+        data-testid=\"slider-input\"\n+        type=\"number\"\n+        {...props}\n+        onChange={(e: any) =>\n+          onValueChange && onValueChange([parseInt(e.target.value)])\n+        }\n+      />\n+      {children}\n+    </div>\n+  ),\n+  Track: ({ children }: any) => (\n+    <div data-testid=\"slider-track\">{children}</div>\n+  ),\n+  Range: () => <div data-testid=\"slider-range\" />,\n+  Thumb: () => <div data-testid=\"slider-thumb\" />,\n+}))\n+\n+describe('SliderRightPanel', () => {\n+  const defaultProps = {\n+    title: 'Test Slider',\n+    disabled: false,\n+    min: 0,\n+    max: 100,\n+    step: 1,\n+    description: 'This is a test slider',\n+    value: 50,\n+    onValueChanged: jest.fn(),\n+  }\n+\n+  it('renders correctly with given props', () => {\n+    const { getByText } = render(\n+      <SliderRightPanel {...defaultProps} />\n+    )\n+    expect(getByText('Test Slider')).toBeInTheDocument()\n+  })\n+\n+  it('calls onValueChanged with correct value when input is changed', () => {\n+    defaultProps.onValueChanged = jest.fn()\n+    const { getByRole } = render(<SliderRightPanel {...defaultProps} />)\n+\n+    const input = getByRole('textbox')\n+    fireEvent.change(input, { target: { value: '75' } })\n+    expect(defaultProps.onValueChanged).toHaveBeenCalledWith(75)\n+  })\n+\n+  it('calls onValueChanged with correct value when slider is changed', () => {\n+    defaultProps.onValueChanged = jest.fn()\n+\n+    const input = screen.getByTestId('slider-input')\n+    fireEvent.change(input, { target: { value: '75' } })\n+    expect(defaultProps.onValueChanged).toHaveBeenCalledWith(75)\n+  })\n+\n+  it('displays tooltip with max value message when input exceeds max', () => {",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1751405133",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 3615,
        "pr_file": "web/containers/SliderRightPanel/index.test.tsx",
        "discussion_id": "1751405133",
        "commented_code": "@@ -0,0 +1,97 @@\n+import React from 'react'\n+import { render } from '@testing-library/react'\n+import { fireEvent, screen } from '@testing-library/dom'\n+import SliderRightPanel from './index'\n+import '@testing-library/jest-dom'\n+\n+class ResizeObserverMock {\n+  observe() {}\n+  unobserve() {}\n+  disconnect() {}\n+}\n+\n+global.ResizeObserver = ResizeObserverMock\n+\n+jest.mock('@radix-ui/react-slider', () => ({\n+  Root: ({ children, onValueChange, ...props }: any) => (\n+    <div data-testid=\"slider-root\" {...props}>\n+      <input\n+        data-testid=\"slider-input\"\n+        type=\"number\"\n+        {...props}\n+        onChange={(e: any) =>\n+          onValueChange && onValueChange([parseInt(e.target.value)])\n+        }\n+      />\n+      {children}\n+    </div>\n+  ),\n+  Track: ({ children }: any) => (\n+    <div data-testid=\"slider-track\">{children}</div>\n+  ),\n+  Range: () => <div data-testid=\"slider-range\" />,\n+  Thumb: () => <div data-testid=\"slider-thumb\" />,\n+}))\n+\n+describe('SliderRightPanel', () => {\n+  const defaultProps = {\n+    title: 'Test Slider',\n+    disabled: false,\n+    min: 0,\n+    max: 100,\n+    step: 1,\n+    description: 'This is a test slider',\n+    value: 50,\n+    onValueChanged: jest.fn(),\n+  }\n+\n+  it('renders correctly with given props', () => {\n+    const { getByText } = render(\n+      <SliderRightPanel {...defaultProps} />\n+    )\n+    expect(getByText('Test Slider')).toBeInTheDocument()\n+  })\n+\n+  it('calls onValueChanged with correct value when input is changed', () => {\n+    defaultProps.onValueChanged = jest.fn()\n+    const { getByRole } = render(<SliderRightPanel {...defaultProps} />)\n+\n+    const input = getByRole('textbox')\n+    fireEvent.change(input, { target: { value: '75' } })\n+    expect(defaultProps.onValueChanged).toHaveBeenCalledWith(75)\n+  })\n+\n+  it('calls onValueChanged with correct value when slider is changed', () => {\n+    defaultProps.onValueChanged = jest.fn()\n+\n+    const input = screen.getByTestId('slider-input')\n+    fireEvent.change(input, { target: { value: '75' } })\n+    expect(defaultProps.onValueChanged).toHaveBeenCalledWith(75)\n+  })\n+\n+  it('displays tooltip with max value message when input exceeds max', () => {",
        "comment_created_at": "2024-09-10T07:24:17+00:00",
        "comment_author": "dan-menlo",
        "comment_body": "This is outside the scope of this PR, but how do we currently define the max/min values for each llama.cpp param?\r\nThis will be a tasklist item in https://github.com/janhq/cortex.cpp/issues/1151",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1485019337",
    "pr_number": 1976,
    "pr_file": "web/containers/Providers/EventHandler.tsx",
    "created_at": "2024-02-10T08:48:11+00:00",
    "commented_code": "const onNewMessageResponse = useCallback(\n     (message: ThreadMessage) => {\n+      // If this is the first ever prompt in the thread\n+      if (message.msg_len == 1 && message.type != MessageRequestType.Summary) {\n+        // This is the first time message comes in on a new thread\n+        //  Summarize the first message, and make that the title of the Thread\n+        // 1. Get the summary of the first prompt using whatever engine user is currently using\n+        const firstPrompt = message.msg_str.trim()\n+        const summarizeFirstPrompt =\n+          'Summarize \"' + firstPrompt + '\" in 5 words as a title'\n+\n+        // Prompt: Given this query from user {query}, return to me the summary in 5 words as the title\n+        const msgId = ulid()\n+        const messages: ChatCompletionMessage[] = [\n+          {\n+            role: ChatCompletionRole.User,\n+            content: summarizeFirstPrompt,\n+          } as ChatCompletionMessage,\n+        ]\n+\n+        const firstPromptRequest: MessageRequest = {\n+          id: msgId,\n+          threadId: message.thread_id,\n+          type: MessageRequestType.Summary,\n+          messages,\n+          model: message.model,",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1485019337",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 1976,
        "pr_file": "web/containers/Providers/EventHandler.tsx",
        "discussion_id": "1485019337",
        "commented_code": "@@ -62,6 +67,36 @@ export default function EventHandler({ children }: { children: ReactNode }) {\n \n   const onNewMessageResponse = useCallback(\n     (message: ThreadMessage) => {\n+      // If this is the first ever prompt in the thread\n+      if (message.msg_len == 1 && message.type != MessageRequestType.Summary) {\n+        // This is the first time message comes in on a new thread\n+        //  Summarize the first message, and make that the title of the Thread\n+        // 1. Get the summary of the first prompt using whatever engine user is currently using\n+        const firstPrompt = message.msg_str.trim()\n+        const summarizeFirstPrompt =\n+          'Summarize \"' + firstPrompt + '\" in 5 words as a title'\n+\n+        // Prompt: Given this query from user {query}, return to me the summary in 5 words as the title\n+        const msgId = ulid()\n+        const messages: ChatCompletionMessage[] = [\n+          {\n+            role: ChatCompletionRole.User,\n+            content: summarizeFirstPrompt,\n+          } as ChatCompletionMessage,\n+        ]\n+\n+        const firstPromptRequest: MessageRequest = {\n+          id: msgId,\n+          threadId: message.thread_id,\n+          type: MessageRequestType.Summary,\n+          messages,\n+          model: message.model,",
        "comment_created_at": "2024-02-10T08:48:11+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "model can be retrieved using i-m states, e.g. `currentActiveModel`",
        "pr_file_module": null
      }
    ]
  }
]