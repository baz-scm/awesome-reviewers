[
  {
    "discussion_id": "1696161805",
    "pr_number": 3217,
    "pr_file": "web/helpers/atoms/SetupRemoteModel.atom.ts",
    "created_at": "2024-07-30T01:44:32+00:00",
    "commented_code": "import { RemoteEngine } from '@janhq/core'\n import { atom } from 'jotai'\n+import { atomWithStorage } from 'jotai/utils'\n \n export type SetupRemoteModelStage = 'NONE' | 'SETUP_INTRO' | 'SETUP_API_KEY'\n+const SOME_API_KEY_ADDED = 'someApiKeyAdded'",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1696161805",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 3217,
        "pr_file": "web/helpers/atoms/SetupRemoteModel.atom.ts",
        "discussion_id": "1696161805",
        "commented_code": "@@ -1,8 +1,11 @@\n import { RemoteEngine } from '@janhq/core'\n import { atom } from 'jotai'\n+import { atomWithStorage } from 'jotai/utils'\n \n export type SetupRemoteModelStage = 'NONE' | 'SETUP_INTRO' | 'SETUP_API_KEY'\n+const SOME_API_KEY_ADDED = 'someApiKeyAdded'",
        "comment_created_at": "2024-07-30T01:44:32+00:00",
        "comment_author": "namchuai",
        "comment_body": "should rename to `IS_ANY_REMOTE_MODEL_CONFIGURED`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1438274816",
    "pr_number": 1258,
    "pr_file": "web/utils/posthog.ts",
    "created_at": "2023-12-29T14:19:52+00:00",
    "commented_code": "import posthog, { Properties } from 'posthog-js'\n \n+// Initialize PostHog\n posthog.init(ANALYTICS_ID, {\n   api_host: ANALYTICS_HOST,\n   autocapture: false,\n+  capture_pageview: false,\n+  capture_pageleave: false,\n+  rageclick: false,\n })\n-\n+// Export the PostHog instance\n export const instance = posthog\n \n-// eslint-disable-next-line @typescript-eslint/no-explicit-any\n-export const trackEvent = (name: string, properties?: Properties) => {\n-  posthog.capture(name, properties)\n+// Enum for Analytics Events\n+export enum AnalyticsEvent {\n+  Ping = 'Ping',\n+}\n+\n+// Function to determine the operating system\n+function getOperatingSystem(): string {\n+  if (isMac) return 'MacOS'\n+  if (isWindows) return 'Windows'\n+  if (isLinux) return 'Linux'\n+  return 'Unknown'\n+}\n+\n+// Function to capture app version and operating system\n+function captureAppVersionAndOS() {\n+  const properties: Properties = {\n+    JanVersion: VERSION,",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1438274816",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 1258,
        "pr_file": "web/utils/posthog.ts",
        "discussion_id": "1438274816",
        "commented_code": "@@ -1,15 +1,36 @@\n import posthog, { Properties } from 'posthog-js'\n \n+// Initialize PostHog\n posthog.init(ANALYTICS_ID, {\n   api_host: ANALYTICS_HOST,\n   autocapture: false,\n+  capture_pageview: false,\n+  capture_pageleave: false,\n+  rageclick: false,\n })\n-\n+// Export the PostHog instance\n export const instance = posthog\n \n-// eslint-disable-next-line @typescript-eslint/no-explicit-any\n-export const trackEvent = (name: string, properties?: Properties) => {\n-  posthog.capture(name, properties)\n+// Enum for Analytics Events\n+export enum AnalyticsEvent {\n+  Ping = 'Ping',\n+}\n+\n+// Function to determine the operating system\n+function getOperatingSystem(): string {\n+  if (isMac) return 'MacOS'\n+  if (isWindows) return 'Windows'\n+  if (isLinux) return 'Linux'\n+  return 'Unknown'\n+}\n+\n+// Function to capture app version and operating system\n+function captureAppVersionAndOS() {\n+  const properties: Properties = {\n+    JanVersion: VERSION,",
        "comment_created_at": "2023-12-29T14:19:52+00:00",
        "comment_author": "louis-menlo",
        "comment_body": "We should use camel case for all properties to avoid inserting the product name everywhere. This is not a good approach for an open source project, as users can fork our repository and give it a new product name. This makes `find and replace` difficult. Simply using `appVersion` would be better",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1418469207",
    "pr_number": 814,
    "pr_file": "core/src/fs.ts",
    "created_at": "2023-12-07T06:53:21+00:00",
    "commented_code": "isDirectory,\n   writeFile,\n   readFile,\n+  checkFileExists,",
    "repo_full_name": "menloresearch/jan",
    "discussion_comments": [
      {
        "comment_id": "1418469207",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 814,
        "pr_file": "core/src/fs.ts",
        "discussion_id": "1418469207",
        "commented_code": "@@ -77,6 +83,7 @@ export const fs = {\n   isDirectory,\n   writeFile,\n   readFile,\n+  checkFileExists,",
        "comment_created_at": "2023-12-07T06:53:21+00:00",
        "comment_author": "namchuai",
        "comment_body": "Since this function return a boolean, please rename it to `exist` or `isExist`",
        "pr_file_module": null
      },
      {
        "comment_id": "1418536837",
        "repo_full_name": "menloresearch/jan",
        "pr_number": 814,
        "pr_file": "core/src/fs.ts",
        "discussion_id": "1418469207",
        "commented_code": "@@ -77,6 +83,7 @@ export const fs = {\n   isDirectory,\n   writeFile,\n   readFile,\n+  checkFileExists,",
        "comment_created_at": "2023-12-07T08:08:28+00:00",
        "comment_author": "hiro-v",
        "comment_body": "I change to `exists` as it's the binding for nodejs `fs.exists` that works for dir and file",
        "pr_file_module": null
      }
    ]
  }
]