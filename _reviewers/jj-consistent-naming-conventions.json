[
  {
    "discussion_id": "2424334808",
    "pr_number": 7704,
    "pr_file": "docs/guides/coming-from-git.md",
    "created_at": "2025-10-12T15:19:31+00:00",
    "commented_code": "+# Coming from Git\n+\n+## Minimal risk\n+\n+Since `jujutsu` is compatible with `git`, you can colocate a jujutsu repository",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2424334808",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7704,
        "pr_file": "docs/guides/coming-from-git.md",
        "discussion_id": "2424334808",
        "commented_code": "@@ -0,0 +1,125 @@\n+# Coming from Git\n+\n+## Minimal risk\n+\n+Since `jujutsu` is compatible with `git`, you can colocate a jujutsu repository",
        "comment_created_at": "2025-10-12T15:19:31+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "nit: all `jujutsu` in the document should be `Jujutsu` same with `git` => `Git` since they're names",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2314674092",
    "pr_number": 7396,
    "pr_file": "docs/gerrit.md",
    "created_at": "2025-09-02T00:05:18+00:00",
    "commented_code": "+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a\n+> commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the last real commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the last non-empty commit\n+- `-r 'trunk()..@-'`: everything on top of trunk\n+- `-r 'A..B'`: commits reachable from `B` but not `A`\n+\n+See the [revsets](./revsets.md) guide for more.\n+\n+> Warning\n+> The working-copy commit `@` is empty and is rejected. Use `@-` or another\n+> concrete commit.\n+\n+### Preview without pushing\n+\n+Use `--dry-run` to see which commits would be modified and pushed, and where,\n+without changing anything or contacting the remote.\n+\n+```shell\n+$ jj gerrit upload -r 'trunk()..@-' --for main --dry-run\n+```\n+\n+## Target branch and remote selection\n+\n+You must specify the target branch for review with `--for <branch>` or by\n+configuring `[gerrit].default_for`.\n+\n+The remote used to push is determined as follows:\n+\n+1. `--remote <name>` if provided\n+2. `[gerrit].default_remote` if configured\n+3. The sole configured Git remote, if exactly one exists\n+4. A Git remote named `gerrit`, if present\n+5. Otherwise, the command errors\n+\n+## Updating changes after review\n+\n+To address review feedback, amend or rewrite your commits, then run `jj gerrit",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2314674092",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2314674092",
        "commented_code": "@@ -0,0 +1,115 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a\n+> commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the last real commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the last non-empty commit\n+- `-r 'trunk()..@-'`: everything on top of trunk\n+- `-r 'A..B'`: commits reachable from `B` but not `A`\n+\n+See the [revsets](./revsets.md) guide for more.\n+\n+> Warning\n+> The working-copy commit `@` is empty and is rejected. Use `@-` or another\n+> concrete commit.\n+\n+### Preview without pushing\n+\n+Use `--dry-run` to see which commits would be modified and pushed, and where,\n+without changing anything or contacting the remote.\n+\n+```shell\n+$ jj gerrit upload -r 'trunk()..@-' --for main --dry-run\n+```\n+\n+## Target branch and remote selection\n+\n+You must specify the target branch for review with `--for <branch>` or by\n+configuring `[gerrit].default_for`.\n+\n+The remote used to push is determined as follows:\n+\n+1. `--remote <name>` if provided\n+2. `[gerrit].default_remote` if configured\n+3. The sole configured Git remote, if exactly one exists\n+4. A Git remote named `gerrit`, if present\n+5. Otherwise, the command errors\n+\n+## Updating changes after review\n+\n+To address review feedback, amend or rewrite your commits, then run `jj gerrit",
        "comment_created_at": "2025-09-02T00:05:18+00:00",
        "comment_author": "matts1",
        "comment_body": "Nit: s/amend or rewrite your commits/update your revisions.\r\n\r\nAmend is a bit of an overloaded term, and we work with revisions / changes in jj, not commits",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2352578578",
    "pr_number": 7396,
    "pr_file": "docs/gerrit.md",
    "created_at": "2025-09-16T13:47:02+00:00",
    "commented_code": "+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time, exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit https://review.gerrithub.io/yourname/yourproject\n+\n+# Option 3: Clone the repo via jj\n+$ jj git clone \"https://review.gerrithub.io/your/project\n+```\n+\n+If you used option 2 You can configure default values in your repository config\n+by appending the below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, and uploads the stack of commits\n+ending in them to Gerrit. Each JJ change will map to a single gerrit change\n+based on the JJ change id. This should be what you want most of the time, but if",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2352578578",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2352578578",
        "commented_code": "@@ -0,0 +1,110 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time, exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit https://review.gerrithub.io/yourname/yourproject\n+\n+# Option 3: Clone the repo via jj\n+$ jj git clone \"https://review.gerrithub.io/your/project\n+```\n+\n+If you used option 2 You can configure default values in your repository config\n+by appending the below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, and uploads the stack of commits\n+ending in them to Gerrit. Each JJ change will map to a single gerrit change\n+based on the JJ change id. This should be what you want most of the time, but if",
        "comment_created_at": "2025-09-16T13:47:02+00:00",
        "comment_author": "martinvonz",
        "comment_body": "nit: \"change id\" -> \"change ID\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2085770777",
    "pr_number": 3089,
    "pr_file": "docs/jj_first_principles.md",
    "created_at": "2025-05-13T01:36:44+00:00",
    "commented_code": "+# Jujutsu from first principles (without Git)\n+\n+This document describes what Jujutsu's core principles are and explores some\n+possibilities which a native backend could encompass.\n+\n+## Preface\n+\n+Why does Jujutsu exist and which problems does it solve? This document tries to\n+answer both of these questions while expanding on the design in a user-friendly\n+way.\n+\n+At its core Jujutsu is [Version Control System][vcs] which scales to huge\n+repositories at [Google scale][billion-lines]. Many design choices are\n+influenced by the concurrent commits happening in Google's Monorepo, as there\n+are always multiple people working on the same file(s) at the same time.\n+\n+## Base design\n+\n+The initial base design is to be a conceptually simpler Mercurial, as\n+automatically snapshotting the working copy simplifies the UX of the\n+command-line interface by a huge amount and avoids many bad states.\n+\n+By also choosing to operate by default on the history of the repository (\n+just called the \"the Graph\" from now on) instead of files, all history\n+modifying commands can be done at any point. This is a major improvement on\n+other version control systems as they need to re-apply a single patch on each\n+new ancestor before finishing the Graph rewrite. Since the Graph can be changed\n+at any point, the working copy cannot contain any state depending on it, thus\n+we have the working-copy commit, which just is another commit from the Graph's\n+point of view.\n+\n+### Commit Evolution (Change-IDs and Changes)",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2085770777",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 3089,
        "pr_file": "docs/jj_first_principles.md",
        "discussion_id": "2085770777",
        "commented_code": "@@ -0,0 +1,61 @@\n+# Jujutsu from first principles (without Git)\n+\n+This document describes what Jujutsu's core principles are and explores some\n+possibilities which a native backend could encompass.\n+\n+## Preface\n+\n+Why does Jujutsu exist and which problems does it solve? This document tries to\n+answer both of these questions while expanding on the design in a user-friendly\n+way.\n+\n+At its core Jujutsu is [Version Control System][vcs] which scales to huge\n+repositories at [Google scale][billion-lines]. Many design choices are\n+influenced by the concurrent commits happening in Google's Monorepo, as there\n+are always multiple people working on the same file(s) at the same time.\n+\n+## Base design\n+\n+The initial base design is to be a conceptually simpler Mercurial, as\n+automatically snapshotting the working copy simplifies the UX of the\n+command-line interface by a huge amount and avoids many bad states.\n+\n+By also choosing to operate by default on the history of the repository (\n+just called the \"the Graph\" from now on) instead of files, all history\n+modifying commands can be done at any point. This is a major improvement on\n+other version control systems as they need to re-apply a single patch on each\n+new ancestor before finishing the Graph rewrite. Since the Graph can be changed\n+at any point, the working copy cannot contain any state depending on it, thus\n+we have the working-copy commit, which just is another commit from the Graph's\n+point of view.\n+\n+### Commit Evolution (Change-IDs and Changes)",
        "comment_created_at": "2025-05-13T01:36:44+00:00",
        "comment_author": "cenviity",
        "comment_body": "```suggestion\r\n### Commit evolution (change IDs and changes)\r\n```\r\n\r\nUse sentence case for consistency with the other headings. Also, the [glossary](https://jj-vcs.github.io/jj/prerelease/glossary/#change) and I think the docs in general use 'change ID' and 'change' without uppercasing?",
        "pr_file_module": null
      },
      {
        "comment_id": "2089240735",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 3089,
        "pr_file": "docs/jj_first_principles.md",
        "discussion_id": "2085770777",
        "commented_code": "@@ -0,0 +1,61 @@\n+# Jujutsu from first principles (without Git)\n+\n+This document describes what Jujutsu's core principles are and explores some\n+possibilities which a native backend could encompass.\n+\n+## Preface\n+\n+Why does Jujutsu exist and which problems does it solve? This document tries to\n+answer both of these questions while expanding on the design in a user-friendly\n+way.\n+\n+At its core Jujutsu is [Version Control System][vcs] which scales to huge\n+repositories at [Google scale][billion-lines]. Many design choices are\n+influenced by the concurrent commits happening in Google's Monorepo, as there\n+are always multiple people working on the same file(s) at the same time.\n+\n+## Base design\n+\n+The initial base design is to be a conceptually simpler Mercurial, as\n+automatically snapshotting the working copy simplifies the UX of the\n+command-line interface by a huge amount and avoids many bad states.\n+\n+By also choosing to operate by default on the history of the repository (\n+just called the \"the Graph\" from now on) instead of files, all history\n+modifying commands can be done at any point. This is a major improvement on\n+other version control systems as they need to re-apply a single patch on each\n+new ancestor before finishing the Graph rewrite. Since the Graph can be changed\n+at any point, the working copy cannot contain any state depending on it, thus\n+we have the working-copy commit, which just is another commit from the Graph's\n+point of view.\n+\n+### Commit Evolution (Change-IDs and Changes)",
        "comment_created_at": "2025-05-14T15:41:20+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277982482",
    "pr_number": 7227,
    "pr_file": "CHANGELOG.md",
    "created_at": "2025-08-15T00:09:35+00:00",
    "commented_code": "and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2277982482",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T00:09:35+00:00",
        "comment_author": "joyously",
        "comment_body": "Just this morning, I wanted to undo a commit I had made in Breezy, which has `uncommit`. It leaves the working copy as is, so you can commit again. What I wanted was to get my file back to the previous commit. In Breezy, that is `revert`, which I think is `jj restore`.\r\nI like `undo` since other VCSs don't use it.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278162303",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T03:42:17+00:00",
        "comment_author": "senekor",
        "comment_body": "I'm not sure what your point is. But looking at that changelog entry again, I forgot to mention that `jj undo` is still available. I added it now.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278889358",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T12:16:37+00:00",
        "comment_author": "joyously",
        "comment_body": "It's my two cents on the naming... Everyone knows what `undo` means, whereas `revert` seems to be different in every VCS.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278898565",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T12:23:56+00:00",
        "comment_author": "senekor",
        "comment_body": "I see. We already have a command `jj revert`, which applies the inverse of a commit. I think `jj op revert` applying the inverse of an operation is consistent UI.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278940498",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T12:53:59+00:00",
        "comment_author": "joyously",
        "comment_body": "Now I'm more confused. ",
        "pr_file_module": null
      },
      {
        "comment_id": "2279004928",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T13:36:15+00:00",
        "comment_author": "apoelstra",
        "comment_body": "@senekor because `jj undo` creates a new op entry with the contents of the second-to-last op revision, its behavior is identical to what you're describing. So `jj op undo` has the same \"apply the reverse of the last commit\" behavior that `git revert` or (apparently) breezy `revert` has. (It also has the same \"if you do it twice you get back where you started, except with more log entries\" behavior.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2279031499",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T13:51:33+00:00",
        "comment_author": "senekor",
        "comment_body": "Yes. What's your point?",
        "pr_file_module": null
      },
      {
        "comment_id": "2279295071",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T15:35:36+00:00",
        "comment_author": "joyously",
        "comment_body": "> So `jj op undo` has the same \"apply the reverse of the last commit\" behavior that `git revert` or (apparently) breezy `revert` has.\r\n\r\nTo be clear, Breezy `revert` does not affect the stored history. It only affects the working copy. I don't know what Git `revert` does, or whether that is applicable in Piper land (or other future backends).",
        "pr_file_module": null
      },
      {
        "comment_id": "2279320479",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T15:41:41+00:00",
        "comment_author": "apoelstra",
        "comment_body": ">Yes. What's your point?\r\n\r\nOops, I'm sorry, I meant to highlight @joyously (in support of your point, @senekor).\r\n\r\n@joyously in `git`, `revert` creates a new commit by inverting the diff between the original commit and its parent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2279372498",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T15:57:45+00:00",
        "comment_author": "joyously",
        "comment_body": "I think you supported my point instead... that it should be called `invert` because `revert` means different things in different VCS, or `undo` because none of the others use that.",
        "pr_file_module": null
      },
      {
        "comment_id": "2279434251",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T16:27:07+00:00",
        "comment_author": "senekor",
        "comment_body": "Andrew explained that `jj revert` behaves exactly the same way `git revert` does. And `jj op revert` behaves also the same way - just for operations.",
        "pr_file_module": null
      },
      {
        "comment_id": "2279462081",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T16:44:25+00:00",
        "comment_author": "apoelstra",
        "comment_body": "I don't have a strong opinon on trying to match other VCS's -- but across software in general, I think of \"undo\" as having the connotation of \"popping an action off the stack\" and leaving no trace of what was removed (and that if you repeatedly \"undo\" it should undo more stuff instead of toggling).\r\n\r\nI think of \"revert\" as doing a new action which inverts the most recent action (and if you repeatedly revert, you'll get toggling behavior).",
        "pr_file_module": null
      },
      {
        "comment_id": "2279497746",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T16:59:33+00:00",
        "comment_author": "joyously",
        "comment_body": "> Andrew explained that `jj revert` behaves exactly the same way `git revert` does.\r\n\r\nYou can't count explanations in GitHub comments. The user doesn't see those. And you also can't explain in terms of other VCSs, which not all users are familiar with.\r\n> trying to match other VCS's\r\n\r\nTo be clear, I don't want to match them, especially when they use the same word differently.\r\nI think we might all have different concepts of what software does, as we are all exposed to a different set of it. Those of us that are older might have ingrained notions from early software, and those in different fields are exposed to other jargon meaning different things.\r\nThis particular edit is for the CHANGELOG, so it should make sense for historical purposes why this whole change is made.",
        "pr_file_module": null
      },
      {
        "comment_id": "2279516390",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:08:31+00:00",
        "comment_author": "senekor",
        "comment_body": "Are you suggesting an edit to the changelog? You didn't say that anywhere until now. It seemed like you were just not in agreement with the choice of name.",
        "pr_file_module": null
      },
      {
        "comment_id": "2279538918",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:23:27+00:00",
        "comment_author": "joyously",
        "comment_body": "I chose this particular CHANGELOG edit to make my original comment because it was relevant to that. The entry itself is pretty innocuous, not giving any context of this change to the big picture or pointing to where the decision was made or anything (I don't know if those are wanted or required, just sayin'.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2279540846",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:24:37+00:00",
        "comment_author": "martinvonz",
        "comment_body": "Since we already have `jj revert`, I think it makes sense to call this `jj op revert`. We can decide whether we should rename them both (to e.g. `jj invert` and `jj op invert`) but I don't think we should name them inconsistently now, and I don't want to block this PR on the naming discussion.\r\n\r\n(It would be a bit unfortunate to rename `jj revert` so soon after we renamed it to that name from `jj backout` (in #5932)).",
        "pr_file_module": null
      },
      {
        "comment_id": "2279556524",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:32:58+00:00",
        "comment_author": "martinvonz",
        "comment_body": "> The entry itself is pretty innocuous, not giving any context of this change to the big picture or pointing to where the decision was made or anything (I don't know if those are wanted or required, just sayin'.)\r\n\r\nI think this is a good point. Can you add some context, @senekor? Something like this, perhaps (feel free to rephrase):\r\n\r\n```md\r\n* `jj op undo` is deprecated in favor of `jj op revert`. (`jj undo` is still\r\n  available unchanged, but we plan to make repeated `jj undo` go gradually further back.)\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2279582854",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:50:15+00:00",
        "comment_author": "joyously",
        "comment_body": "It's starting to sound like adding more commands to do the same thing. So it's `revert`, `undo`, and `op revert` all doing the same thing? Is this temporary while deprecation time passes, or what? (this should be in the LOG entry)",
        "pr_file_module": null
      },
      {
        "comment_id": "2279589037",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T17:54:13+00:00",
        "comment_author": "martinvonz",
        "comment_body": "`revert` creates a commit that does the inverse of another commit. `op revert` creates an operation that does the inverse of another operation. `undo` currently does the same thing as `op revert` but we plan on making it different (as the suggested changelog snippet says).",
        "pr_file_module": null
      },
      {
        "comment_id": "2279625681",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2277982482",
        "commented_code": "@@ -16,6 +16,8 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n   and new formats, so old `jj` versions should be able to read these index\n   files. This compatibility layer will be removed in a future release.\n \n+* `jj op undo` is deprecated in favor of `jj op revert`.",
        "comment_created_at": "2025-08-15T18:16:43+00:00",
        "comment_author": "senekor",
        "comment_body": "I updated the changelog :+1: ",
        "pr_file_module": null
      }
    ]
  }
]