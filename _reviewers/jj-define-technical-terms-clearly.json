[
  {
    "discussion_id": "2261100328",
    "pr_number": 7164,
    "pr_file": "docs/design/gitattributes.md",
    "created_at": "2025-08-07T18:17:34+00:00",
    "commented_code": "+# Git attributes\n+\n+**Authors**: [Kaiyi Li](mailto:kaiyili@google.com)\n+\n+**Summary**: This design introduces an API internal to `jj-lib` that future git attributes related features could use to query the git attributes information associated with a file.\n+\n+## Context and Scope\n+\n+We are interested in many git attributes related features:\n+\n+* Perform EOL conversion differently for different files: the [`text`](https://git-scm.com/docs/gitattributes#_text) and the [`eol`](https://git-scm.com/docs/gitattributes#_eol) git attributes.\n+* Control the behavior of `jj diff` on binary files or generated files: the [`diff`](https://git-scm.com/docs/gitattributes#_generating_diff_text) and the [`linguist-generated`](https://docs.github.com/en/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github) git attributes.\n+* Smudge and clean [filter](https://git-scm.com/docs/gitattributes#_filter), which paves a straight forward path for [`git-lfs` support](https://github.com/git-lfs/git-lfs/blob/main/docs/spec.md#intercepting-git), and [`git-crypt` support](https://github.com/AGWA/git-crypt?tab=readme-ov-file#using-git-crypt).\n+\n+This design provides the cornerstone of all the previously mentioned features.\n+\n+In this design, we use the same terminology as the [git attributes document](https://git-scm.com/docs/gitattributes#_description). Some regularly used definitions include pattern, state, and `gitattributes` file.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2261100328",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7164,
        "pr_file": "docs/design/gitattributes.md",
        "discussion_id": "2261100328",
        "commented_code": "@@ -0,0 +1,590 @@\n+# Git attributes\n+\n+**Authors**: [Kaiyi Li](mailto:kaiyili@google.com)\n+\n+**Summary**: This design introduces an API internal to `jj-lib` that future git attributes related features could use to query the git attributes information associated with a file.\n+\n+## Context and Scope\n+\n+We are interested in many git attributes related features:\n+\n+* Perform EOL conversion differently for different files: the [`text`](https://git-scm.com/docs/gitattributes#_text) and the [`eol`](https://git-scm.com/docs/gitattributes#_eol) git attributes.\n+* Control the behavior of `jj diff` on binary files or generated files: the [`diff`](https://git-scm.com/docs/gitattributes#_generating_diff_text) and the [`linguist-generated`](https://docs.github.com/en/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github) git attributes.\n+* Smudge and clean [filter](https://git-scm.com/docs/gitattributes#_filter), which paves a straight forward path for [`git-lfs` support](https://github.com/git-lfs/git-lfs/blob/main/docs/spec.md#intercepting-git), and [`git-crypt` support](https://github.com/AGWA/git-crypt?tab=readme-ov-file#using-git-crypt).\n+\n+This design provides the cornerstone of all the previously mentioned features.\n+\n+In this design, we use the same terminology as the [git attributes document](https://git-scm.com/docs/gitattributes#_description). Some regularly used definitions include pattern, state, and `gitattributes` file.",
        "comment_created_at": "2025-08-07T18:17:34+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "nit: While a link is fine, it forces you to keep a tab open to it. And since there are a bunch of newcomers to source control here it'd be also worthwhile to copy the relevant terms into this section (it'd also help if the link were unavailable). ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2423035303",
    "pr_number": 7703,
    "pr_file": "docs/templates.md",
    "created_at": "2025-10-11T16:40:12+00:00",
    "commented_code": "This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit message.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2423035303",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7703,
        "pr_file": "docs/templates.md",
        "discussion_id": "2423035303",
        "commented_code": "@@ -128,17 +128,21 @@ _Conversion: `Boolean`: no, `Serialize`: yes, `Template`: no_\n This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit message.",
        "comment_created_at": "2025-10-11T16:40:12+00:00",
        "comment_author": "martinvonz",
        "comment_body": "I think we should explain what trailers are. Maybe \"The lines at the end of the commit description formatted as `<name>: <value>`.\" or something like that.\r\n\r\n(Also note the change from \"commit message\" to \"commit description\". I think we should try to stick to \"description\". I think we already do that pretty well in general.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2423042988",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7703,
        "pr_file": "docs/templates.md",
        "discussion_id": "2423035303",
        "commented_code": "@@ -128,17 +128,21 @@ _Conversion: `Boolean`: no, `Serialize`: yes, `Template`: no_\n This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit message.",
        "comment_created_at": "2025-10-11T16:47:02+00:00",
        "comment_author": "josephlou5",
        "comment_body": "Good point about \"message\" vs. \"description\".\r\n\r\nI changed to `<key>: <value>` to match the `Trailer` type's `key()` and `value()` methods.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2423047744",
    "pr_number": 7703,
    "pr_file": "docs/templates.md",
    "created_at": "2025-10-11T16:59:42+00:00",
    "commented_code": "This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit\n+  description, formatted as `<key>: <value>`. These are returned in the same",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2423047744",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7703,
        "pr_file": "docs/templates.md",
        "discussion_id": "2423047744",
        "commented_code": "@@ -128,17 +128,22 @@ _Conversion: `Boolean`: no, `Serialize`: yes, `Template`: no_\n This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit\n+  description, formatted as `<key>: <value>`. These are returned in the same",
        "comment_created_at": "2025-10-11T16:59:42+00:00",
        "comment_author": "martinvonz",
        "comment_body": "The way I would interpret the \", formatted as ...\" is as saying that the `Trailer` object is formatted that way. That's true, but it's not what we want to say here.\r\n\r\nSimply dropping the comma might help a little by making it read more like a condition on the set of lines as with \"that\" than additional information as with \"which\". You could even spell it out as \"Lines at the end of the commit description that are formatted as `<key>: <value>`.\"\r\n\r\nSorry if this is nitpicking. Maybe it's obvious to most readers?",
        "pr_file_module": null
      },
      {
        "comment_id": "2423065194",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7703,
        "pr_file": "docs/templates.md",
        "discussion_id": "2423047744",
        "commented_code": "@@ -128,17 +128,22 @@ _Conversion: `Boolean`: no, `Serialize`: yes, `Template`: no_\n This type cannot be printed. The following methods are defined.\n \n * `.description() -> String`\n-* `.trailers() -> List<Trailer>`\n+* `.trailers() -> List<Trailer>`: The trailers at the end of the commit\n+  description, formatted as `<key>: <value>`. These are returned in the same",
        "comment_created_at": "2025-10-11T17:42:53+00:00",
        "comment_author": "josephlou5",
        "comment_body": "It may be nitpicking, but I appreciate it! Documentation is important, and you were right that it was a little confusing. Applied your suggestion of using \"that\".",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2391108532",
    "pr_number": 7611,
    "pr_file": "docs/templates.md",
    "created_at": "2025-09-30T11:52:43+00:00",
    "commented_code": "local ref.\n * `.tracking_behind_count() -> SizeHint`: Number of commits behind of the\n   tracking local ref.\n+* `.synced() -> Boolean`: For a local bookmark, true if synced with all remotes.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2391108532",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7611,
        "pr_file": "docs/templates.md",
        "discussion_id": "2391108532",
        "commented_code": "@@ -221,6 +221,8 @@ The following methods are defined.\n   local ref.\n * `.tracking_behind_count() -> SizeHint`: Number of commits behind of the\n   tracking local ref.\n+* `.synced() -> Boolean`: For a local bookmark, true if synced with all remotes.",
        "comment_created_at": "2025-09-30T11:52:43+00:00",
        "comment_author": "yuja",
        "comment_body": "nit: \"all remotes\" -> \"all tracked remotes\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2314674827",
    "pr_number": 7396,
    "pr_file": "docs/gerrit.md",
    "created_at": "2025-09-02T00:06:32+00:00",
    "commented_code": "+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a\n+> commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the last real commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the last non-empty commit\n+- `-r 'trunk()..@-'`: everything on top of trunk\n+- `-r 'A..B'`: commits reachable from `B` but not `A`\n+\n+See the [revsets](./revsets.md) guide for more.\n+\n+> Warning\n+> The working-copy commit `@` is empty and is rejected. Use `@-` or another\n+> concrete commit.\n+\n+### Preview without pushing\n+\n+Use `--dry-run` to see which commits would be modified and pushed, and where,\n+without changing anything or contacting the remote.\n+\n+```shell\n+$ jj gerrit upload -r 'trunk()..@-' --for main --dry-run\n+```\n+\n+## Target branch and remote selection\n+\n+You must specify the target branch for review with `--for <branch>` or by\n+configuring `[gerrit].default_for`.\n+\n+The remote used to push is determined as follows:\n+\n+1. `--remote <name>` if provided\n+2. `[gerrit].default_remote` if configured\n+3. The sole configured Git remote, if exactly one exists\n+4. A Git remote named `gerrit`, if present\n+5. Otherwise, the command errors\n+\n+## Updating changes after review\n+\n+To address review feedback, amend or rewrite your commits, then run `jj gerrit\n+upload` again with the same revsets. Because the `Change-Id` footer is preserved,",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2314674827",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2314674827",
        "commented_code": "@@ -0,0 +1,115 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a\n+> commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the last real commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the last non-empty commit\n+- `-r 'trunk()..@-'`: everything on top of trunk\n+- `-r 'A..B'`: commits reachable from `B` but not `A`\n+\n+See the [revsets](./revsets.md) guide for more.\n+\n+> Warning\n+> The working-copy commit `@` is empty and is rejected. Use `@-` or another\n+> concrete commit.\n+\n+### Preview without pushing\n+\n+Use `--dry-run` to see which commits would be modified and pushed, and where,\n+without changing anything or contacting the remote.\n+\n+```shell\n+$ jj gerrit upload -r 'trunk()..@-' --for main --dry-run\n+```\n+\n+## Target branch and remote selection\n+\n+You must specify the target branch for review with `--for <branch>` or by\n+configuring `[gerrit].default_for`.\n+\n+The remote used to push is determined as follows:\n+\n+1. `--remote <name>` if provided\n+2. `[gerrit].default_remote` if configured\n+3. The sole configured Git remote, if exactly one exists\n+4. A Git remote named `gerrit`, if present\n+5. Otherwise, the command errors\n+\n+## Updating changes after review\n+\n+To address review feedback, amend or rewrite your commits, then run `jj gerrit\n+upload` again with the same revsets. Because the `Change-Id` footer is preserved,",
        "comment_created_at": "2025-09-02T00:06:32+00:00",
        "comment_author": "matts1",
        "comment_body": "Nit: this is a user guide, can we remove the \"Because the change-ID footer is preserved\". This is another one of those things that the user doesn't need to know. All they need to know is \"I say upload, and it updates an existing gerrit change because I already uploaded it\"",
        "pr_file_module": null
      },
      {
        "comment_id": "2315607751",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2314674827",
        "commented_code": "@@ -0,0 +1,115 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a\n+> commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the last real commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the last non-empty commit\n+- `-r 'trunk()..@-'`: everything on top of trunk\n+- `-r 'A..B'`: commits reachable from `B` but not `A`\n+\n+See the [revsets](./revsets.md) guide for more.\n+\n+> Warning\n+> The working-copy commit `@` is empty and is rejected. Use `@-` or another\n+> concrete commit.\n+\n+### Preview without pushing\n+\n+Use `--dry-run` to see which commits would be modified and pushed, and where,\n+without changing anything or contacting the remote.\n+\n+```shell\n+$ jj gerrit upload -r 'trunk()..@-' --for main --dry-run\n+```\n+\n+## Target branch and remote selection\n+\n+You must specify the target branch for review with `--for <branch>` or by\n+configuring `[gerrit].default_for`.\n+\n+The remote used to push is determined as follows:\n+\n+1. `--remote <name>` if provided\n+2. `[gerrit].default_remote` if configured\n+3. The sole configured Git remote, if exactly one exists\n+4. A Git remote named `gerrit`, if present\n+5. Otherwise, the command errors\n+\n+## Updating changes after review\n+\n+To address review feedback, amend or rewrite your commits, then run `jj gerrit\n+upload` again with the same revsets. Because the `Change-Id` footer is preserved,",
        "comment_created_at": "2025-09-02T10:09:15+00:00",
        "comment_author": "talios",
        "comment_body": "`Change-Id` is a trailer. I believe gerrit used to use the term footer, but it seems now git officially supports them, they're trailers, and JJ also uses the term trailer.\n\nSince we've already mentioned the trailer earlier (well, see my previous comment) we could probably omit repeating it here?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2315592436",
    "pr_number": 7396,
    "pr_file": "docs/gerrit.md",
    "created_at": "2025-09-02T10:03:04+00:00",
    "commented_code": "+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2315592436",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2315592436",
        "commented_code": "@@ -0,0 +1,115 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time\u2014exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit ssh://gerrit.example.com:29418/your/project\n+```\n+\n+You can configure default values in your repository config by appending the\n+below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, ensures each selected commit has a\n+Gerrit-compatible `Change-Id:` footer (adding one if missing), and pushes the\n+resulting heads to `refs/for/<branch>` on your Gerrit remote.\n+\n+> Note\n+> Gerrit identifies and updates changes by `Change-Id`. When you reupload a",
        "comment_created_at": "2025-09-02T10:03:04+00:00",
        "comment_author": "talios",
        "comment_body": "Is it worth being explicit and mentioning that `Change-Id` is a commit _trailer_?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2352596828",
    "pr_number": 7396,
    "pr_file": "docs/gerrit.md",
    "created_at": "2025-09-16T13:52:41+00:00",
    "commented_code": "+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time, exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit https://review.gerrithub.io/yourname/yourproject\n+\n+# Option 3: Clone the repo via jj\n+$ jj git clone \"https://review.gerrithub.io/your/project\n+```\n+\n+If you used option 2 You can configure default values in your repository config\n+by appending the below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, and uploads the stack of commits\n+ending in them to Gerrit. Each JJ change will map to a single gerrit change\n+based on the JJ change id. This should be what you want most of the time, but if\n+you want to associate a JJ change with a specific change already uploaded to\n+gerrit, you can copy the Change-Id footer from gerrit to the bottom of the\n+commit description in JJ.\n+\n+> Note\n+> Gerrit identifies and updates changes by the `Change-Id` trailer. When you\n+> reupload a commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the previous commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the commit previous to the one you're currently working on\n+- `-r 'A..B'`: commits reachable from `B` but not `A`",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2352596828",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7396,
        "pr_file": "docs/gerrit.md",
        "discussion_id": "2352596828",
        "commented_code": "@@ -0,0 +1,110 @@\n+# Using Jujutsu with Gerrit Code Review\n+\n+JJ and Gerrit share the same mental model, which makes Gerrit feel like a\n+natural collaboration tool for JJ. JJ tracks a \"change identity\" across\n+rewrites, and Gerrit\u2019s `Change-Id` tracks the same logical change across patch\n+sets. JJ and Gerrit's `Change-Id`s aren\u2019t natively compatible yet, but they\u2019re\n+philosophically aligned. `jj gerrit upload` bridges the gap today by adding a\n+Gerrit-style `Change-Id` while JJ keeps its own notion of change identity on the\n+client. In practice, that means small, clean commits that evolve over\n+time, exactly how Gerrit wants you to work.\n+\n+This guide assumes a basic understanding of Git, Gerrit, and Jujutsu.\n+\n+## Set up a Gerrit remote\n+\n+Jujutsu communicates with Gerrit by pushing commits to a Git remote. If you're\n+starting from an existing Git repository with Gerrit remotes already configured,\n+you can use `jj git init --colocate` to start using JJ in that repo. Otherwise,\n+set up your Gerrit remote.\n+\n+```shell\n+# Option 1: Start JJ in an existing Git repo with Gerrit remotes\n+$ jj git init --colocate\n+\n+# Option 2: Add a Gerrit remote to a JJ repo\n+$ jj git remote add gerrit https://review.gerrithub.io/yourname/yourproject\n+\n+# Option 3: Clone the repo via jj\n+$ jj git clone \"https://review.gerrithub.io/your/project\n+```\n+\n+If you used option 2 You can configure default values in your repository config\n+by appending the below to `.jj/repo/config.toml`, like so:\n+\n+```toml\n+[gerrit]\n+default_remote = \"gerrit\"  # name of the Git remote to push to\n+default_for = \"main\"        # target branch in Gerrit\n+```\n+\n+## Basic workflow\n+\n+`jj gerrit upload` takes one or more revsets, and uploads the stack of commits\n+ending in them to Gerrit. Each JJ change will map to a single gerrit change\n+based on the JJ change id. This should be what you want most of the time, but if\n+you want to associate a JJ change with a specific change already uploaded to\n+gerrit, you can copy the Change-Id footer from gerrit to the bottom of the\n+commit description in JJ.\n+\n+> Note\n+> Gerrit identifies and updates changes by the `Change-Id` trailer. When you\n+> reupload a commit with the same `Change-Id`, Gerrit creates a new patch set.\n+\n+### upload a single change\n+\n+```shell\n+# upload the previous commit (@-) for review to main\n+$ jj gerrit upload -r @-\n+```\n+\n+## Selecting revisions (revsets)\n+\n+`jj gerrit upload` accepts one or more `-r/--revisions` arguments. Each argument\n+may expand to multiple commits. Common patterns:\n+\n+- `-r @-`: the commit previous to the one you're currently working on\n+- `-r 'A..B'`: commits reachable from `B` but not `A`",
        "comment_created_at": "2025-09-16T13:52:41+00:00",
        "comment_author": "martinvonz",
        "comment_body": "nit: maybe say \"commits that are ancestors of `B` but not of `A`\" instead so avoid confusion with `reachable()`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2320629195",
    "pr_number": 7410,
    "pr_file": "CHANGELOG.md",
    "created_at": "2025-09-04T02:07:40+00:00",
    "commented_code": "### Breaking changes\n \n+### Deprecations\n+\n+### New features\n+\n+### Fixed bugs\n+\n+## [0.33.0] - 2025-09-03\n+\n+### Release highlights\n+\n+* `jj undo` is now *sequential*: invoking it multiple times in sequence repeatedly undoes\n+  actions in the operation log. Previously, `jj undo` would only undo *the most recent*\n+  operation in the operation log, a \"fixed point\". As a result, a new `jj redo` command\n+  has been added.\n+\n+* Experimental support for improving query performance over filesets and file\n+  queries (like `jj log path/to/file.txt`) has been added. To enable this, you\n+  must use the `jj debug index-changed-paths` command.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2320629195",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7410,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2320629195",
        "commented_code": "@@ -10,6 +10,27 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n ### Breaking changes\n \n+### Deprecations\n+\n+### New features\n+\n+### Fixed bugs\n+\n+## [0.33.0] - 2025-09-03\n+\n+### Release highlights\n+\n+* `jj undo` is now *sequential*: invoking it multiple times in sequence repeatedly undoes\n+  actions in the operation log. Previously, `jj undo` would only undo *the most recent*\n+  operation in the operation log, a \"fixed point\". As a result, a new `jj redo` command\n+  has been added.\n+\n+* Experimental support for improving query performance over filesets and file\n+  queries (like `jj log path/to/file.txt`) has been added. To enable this, you\n+  must use the `jj debug index-changed-paths` command.",
        "comment_created_at": "2025-09-04T02:07:40+00:00",
        "comment_author": "martinvonz",
        "comment_body": "The way I first read this made me think that `jj debug index-changed-paths` is used as a replacement for some other command. I think it's the \"you must use the ... command\" bit that confused me. Maybe replace the sentence by \"Run ... to create the index.\" is clearer?",
        "pr_file_module": null
      },
      {
        "comment_id": "2320632843",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7410,
        "pr_file": "CHANGELOG.md",
        "discussion_id": "2320629195",
        "commented_code": "@@ -10,6 +10,27 @@ to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n ### Breaking changes\n \n+### Deprecations\n+\n+### New features\n+\n+### Fixed bugs\n+\n+## [0.33.0] - 2025-09-03\n+\n+### Release highlights\n+\n+* `jj undo` is now *sequential*: invoking it multiple times in sequence repeatedly undoes\n+  actions in the operation log. Previously, `jj undo` would only undo *the most recent*\n+  operation in the operation log, a \"fixed point\". As a result, a new `jj redo` command\n+  has been added.\n+\n+* Experimental support for improving query performance over filesets and file\n+  queries (like `jj log path/to/file.txt`) has been added. To enable this, you\n+  must use the `jj debug index-changed-paths` command.",
        "comment_created_at": "2025-09-04T02:11:29+00:00",
        "comment_author": "thoughtpolice",
        "comment_body": "Good point.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2297180460",
    "pr_number": 7342,
    "pr_file": "docs/working-copy.md",
    "created_at": "2025-08-25T05:52:09+00:00",
    "commented_code": "`.gitignore` files (there's no such thing as `.jjignore` yet). See\n <https://git-scm.com/docs/gitignore> for details about the format. `.gitignore`\n files are supported in any directory in the working copy, as well as in\n-`$XDG_CONFIG_HOME/git/ignore` and `$GIT_DIR/info/exclude`.\n+`$XDG_CONFIG_HOME/git/ignore` and `$GIT_DIR/info/exclude` (for existing `jj`",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2297180460",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7342,
        "pr_file": "docs/working-copy.md",
        "discussion_id": "2297180460",
        "commented_code": "@@ -67,7 +67,9 @@ control. You can tell Jujutsu to not automatically track certain files by using\n `.gitignore` files (there's no such thing as `.jjignore` yet). See\n <https://git-scm.com/docs/gitignore> for details about the format. `.gitignore`\n files are supported in any directory in the working copy, as well as in\n-`$XDG_CONFIG_HOME/git/ignore` and `$GIT_DIR/info/exclude`.\n+`$XDG_CONFIG_HOME/git/ignore` and `$GIT_DIR/info/exclude` (for existing `jj`",
        "comment_created_at": "2025-08-25T05:52:09+00:00",
        "comment_author": "yuja",
        "comment_body": "\"existing\" -> \"non-colocated\"\r\n\r\nI think it's also good to suggest `jj git root` instead.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2277973987",
    "pr_number": 7227,
    "pr_file": "docs/operation-log.md",
    "created_at": "2025-08-15T00:00:23+00:00",
    "commented_code": "before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2277973987",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T00:00:23+00:00",
        "comment_author": "joyously",
        "comment_body": "The way this is worded now makes it seem like `undo` is different from applying the inverse of an operation.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278159351",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T03:38:55+00:00",
        "comment_author": "senekor",
        "comment_body": "You're right, that's not ideal. This is a high-level introduction, do you think we should just not talk about the ability to invert operations which aren't the most recent one?",
        "pr_file_module": null
      },
      {
        "comment_id": "2278893521",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T12:20:03+00:00",
        "comment_author": "joyously",
        "comment_body": "If there is a good reason for this name change (I haven't heard it), that reasoning should be expressed in the high-level intro. This makes it sound like the name should be `invert`, but they are both the same, so way two names, and why change it since they both were the best name before?",
        "pr_file_module": null
      },
      {
        "comment_id": "2278903376",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T12:27:38+00:00",
        "comment_author": "senekor",
        "comment_body": "The reason is explained in the commit message:\r\n\r\n> This paves the way for the semantics of `jj undo` and `jj op revert` to\r\nevolve independently.\r\n\r\n`jj undo` and `jj op undo` currently do the same thing, so having the same name makes sense. If they are going to do different things in the future, it makes sense to have different names.\r\n\r\nThis is originally Martin's idea:\r\nhttps://github.com/jj-vcs/jj/issues/3700#issuecomment-2170981856\r\n\r\n(He suggested to use `jj op backout`, because `jj revert` used to be called `jj backout` back then.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2278934178",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T12:49:42+00:00",
        "comment_author": "joyously",
        "comment_body": "I see you answering my question here in the comments, but this change is for a documentation file. I'm not expecting the whole history to be put in there (that would be weird), but the explanation of the commands should make sense and explained to the user, so when it doesn't make sense, I have to wonder if that rename was the best choice. My review is about the end product. Please reread my previous comment from that perspective.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278947467",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T12:58:25+00:00",
        "comment_author": "senekor",
        "comment_body": "I don't think we should explain the reason for the _rename_ in this introduction. It's a document that describes the current state of things.\r\n\r\nI agree that the distinction is a little awkward, but this may just be unsolvable during a the time when `jj undo` and `jj op revert` have different names but still basically do the same thing. The distinction will become less awkward as more steps of the plan are implemented.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278978666",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T13:20:52+00:00",
        "comment_author": "joyously",
        "comment_body": ">  that reasoning should be expressed in the high-level intro.\r\n\r\nYou might think I asked for the reason for the name change to be in the intro. But I am saying that the **reasoning** should be obvious in the explanation of the commands. It currently is not obvious and is a bit confusing to have two commands that do the same thing, called by names that don't quite indicate what they do. The document's job is to explain the state of the software, and if in doing that, you question why, then perhaps the choice made should be re-examined.",
        "pr_file_module": null
      },
      {
        "comment_id": "2278993991",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7227,
        "pr_file": "docs/operation-log.md",
        "discussion_id": "2277973987",
        "commented_code": "@@ -13,9 +13,10 @@ and the current working-copy commit in each workspace. The operation object also\n before it, as well as metadata about the operation, such as timestamps,\n username, hostname, description.\n \n-The operation log allows you to undo an operation (`jj [op] undo`), which doesn't\n-need to be the most recent one. It also lets you restore the entire repo to the\n-way it looked at an earlier point (`jj op restore`).\n+The operation log allows you to undo an operation (`jj undo`) and apply the\n+inverse of any operation, not just the most recent one (`jj op revert`). It also",
        "comment_created_at": "2025-08-15T13:29:42+00:00",
        "comment_author": "senekor",
        "comment_body": "Ok, I simply removed `jj op revert` from that paragraph. For now, there's not much reason to mention both, since they can do the same thing. This should avoid any confusion.",
        "pr_file_module": null
      }
    ]
  }
]