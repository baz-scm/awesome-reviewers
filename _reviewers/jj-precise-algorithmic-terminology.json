[
  {
    "discussion_id": "2389998165",
    "pr_number": 7589,
    "pr_file": "docs/revsets.md",
    "created_at": "2025-09-30T06:27:18+00:00",
    "commented_code": "* `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.\n+\n+The `x..y` operator behaves like a set-difference operator, removing `::x` from",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2389998165",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2389998165",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.\n+\n+The `x..y` operator behaves like a set-difference operator, removing `::x` from",
        "comment_created_at": "2025-09-30T06:27:18+00:00",
        "comment_author": "martinvonz",
        "comment_body": "We have `~` for set difference, so the first part here is perhaps a bit confusing.\r\n\r\nWhat do you think about the following?\r\n\r\n> `x..y` is the set of revisions introduced from `x` to `y`. \r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2394852083",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2389998165",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.\n+\n+The `x..y` operator behaves like a set-difference operator, removing `::x` from",
        "comment_created_at": "2025-10-01T14:36:54+00:00",
        "comment_author": "zstewar1",
        "comment_body": "Well, this operator is defined such that it is equivalent to `::y ~ ::x`, isn't it? So perhaps it needs a comparison to that as well. I'll try to reword this section.\r\n\r\nThe tricky part with describing this with 'between' or 'from' is that, to me at least, those would imply direct descent and the key difference is that this doesn't require direct descent from `x`.",
        "pr_file_module": null
      },
      {
        "comment_id": "2394945710",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2389998165",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.\n+\n+The `x..y` operator behaves like a set-difference operator, removing `::x` from",
        "comment_created_at": "2025-10-01T15:03:51+00:00",
        "comment_author": "martinvonz",
        "comment_body": "> Well, this operator is defined such that it is equivalent to `::y ~ ::x`, isn't it?\r\n\r\nYes, that's correct.\r\n\r\n> The tricky part with describing this with 'between' or 'from' is that, to me at least, those would imply direct descent and the key difference is that this doesn't require direct descent from `x`.\r\n\r\nRight, that's what I was trying to capture with my wording. For example, if you say `v1.0..v2.0`, then that includes all revisions introduced from v1.0 to v2.0, even if some of them were introduced by branching off of `v0.9` and then merged into the main branch after v1.0.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2390005577",
    "pr_number": 7589,
    "pr_file": "docs/revsets.md",
    "created_at": "2025-09-30T06:30:54+00:00",
    "commented_code": "* `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2390005577",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2390005577",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.",
        "comment_created_at": "2025-09-30T06:30:54+00:00",
        "comment_author": "martinvonz",
        "comment_body": "I think of it more like this:\r\n\r\n> `x::y` are the revisions along the path from `x` to `y`.\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2394838285",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2390005577",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.",
        "comment_created_at": "2025-10-01T14:32:30+00:00",
        "comment_author": "zstewar1",
        "comment_body": "It's all commits along all direct paths from `x` to `y`, right?",
        "pr_file_module": null
      },
      {
        "comment_id": "2394937593",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7589,
        "pr_file": "docs/revsets.md",
        "discussion_id": "2390005577",
        "commented_code": "@@ -187,6 +187,23 @@ You can use parentheses to control evaluation order, such as `(x & y) | z` or\n     * `D..B` \u21d2 `{}` (empty set)\n     * `(C|B)..(C|B)` \u21d2 `{}` (empty set)\n \n+### Comparison of the operators `::` and `..`\n+\n+The `x::y` operator behaves like an \"inclusive range\" operator.",
        "comment_created_at": "2025-10-01T15:01:10+00:00",
        "comment_author": "martinvonz",
        "comment_body": "Yes, that's correct. I was thinking of that as a single path, but using plural makes more sense.",
        "pr_file_module": null
      }
    ]
  }
]