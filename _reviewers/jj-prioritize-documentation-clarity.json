[
  {
    "discussion_id": "2427923873",
    "pr_number": 7716,
    "pr_file": "cli/src/commands/undo.rs",
    "created_at": "2025-10-14T05:08:13+00:00",
    "commented_code": "/// This option is EXPERIMENTAL.\n     #[arg(long, value_enum, hide = true, default_values_t = DEFAULT_REVERT_WHAT)]\n     what: Vec<RevertWhatToRestore>,\n+\n+    /// Allow undoing a push operation\n+    ///\n+    /// Undoing a push operation does not undo the push itself. Bookmarks on the",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2427923873",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7716,
        "pr_file": "cli/src/commands/undo.rs",
        "discussion_id": "2427923873",
        "commented_code": "@@ -60,6 +60,25 @@ pub struct UndoArgs {\n     /// This option is EXPERIMENTAL.\n     #[arg(long, value_enum, hide = true, default_values_t = DEFAULT_REVERT_WHAT)]\n     what: Vec<RevertWhatToRestore>,\n+\n+    /// Allow undoing a push operation\n+    ///\n+    /// Undoing a push operation does not undo the push itself. Bookmarks on the",
        "comment_created_at": "2025-10-14T05:08:13+00:00",
        "comment_author": "martinvonz",
        "comment_body": "\"the push itself\" is not clear to me. How about \"does not undo the effects on the remote\"?",
        "pr_file_module": null
      },
      {
        "comment_id": "2428570200",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7716,
        "pr_file": "cli/src/commands/undo.rs",
        "discussion_id": "2427923873",
        "commented_code": "@@ -60,6 +60,25 @@ pub struct UndoArgs {\n     /// This option is EXPERIMENTAL.\n     #[arg(long, value_enum, hide = true, default_values_t = DEFAULT_REVERT_WHAT)]\n     what: Vec<RevertWhatToRestore>,\n+\n+    /// Allow undoing a push operation\n+    ///\n+    /// Undoing a push operation does not undo the push itself. Bookmarks on the",
        "comment_created_at": "2025-10-14T09:51:28+00:00",
        "comment_author": "senekor",
        "comment_body": "much better!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2213525034",
    "pr_number": 6990,
    "pr_file": "cli/src/commands/config/review_managed.rs",
    "created_at": "2025-07-17T14:32:06+00:00",
    "commented_code": "+// Copyright 2025 The Jujutsu Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+use std::borrow::Borrow as _;\n+use std::borrow::Cow;\n+\n+use tracing::instrument;\n+\n+use crate::cli_util::CommandHelper;\n+use crate::command_error::internal_error_with_message;\n+use crate::command_error::user_error;\n+use crate::command_error::CommandError;\n+use crate::config::maybe_read_to_string;\n+use crate::merge_tools::make_diff_sections;\n+use crate::ui::Ui;\n+\n+#[derive(clap::Args, Clone, Debug)]\n+pub struct ConfigReviewManagedArgs {\n+    /// Trust the repository config. Copy the file over without reviewing\n+    /// changes.\n+    #[arg(long)]\n+    trust: bool,\n+}",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2213525034",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213525034",
        "commented_code": "@@ -0,0 +1,121 @@\n+// Copyright 2025 The Jujutsu Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+use std::borrow::Borrow as _;\n+use std::borrow::Cow;\n+\n+use tracing::instrument;\n+\n+use crate::cli_util::CommandHelper;\n+use crate::command_error::internal_error_with_message;\n+use crate::command_error::user_error;\n+use crate::command_error::CommandError;\n+use crate::config::maybe_read_to_string;\n+use crate::merge_tools::make_diff_sections;\n+use crate::ui::Ui;\n+\n+#[derive(clap::Args, Clone, Debug)]\n+pub struct ConfigReviewManagedArgs {\n+    /// Trust the repository config. Copy the file over without reviewing\n+    /// changes.\n+    #[arg(long)]\n+    trust: bool,\n+}",
        "comment_created_at": "2025-07-17T14:32:06+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "Nit: this is missing a user-friendly doc comment which explains the commands use-case. I know what you intend to do with it but others may not. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2134709498",
    "pr_number": 6715,
    "pr_file": "cli/src/commands/status.rs",
    "created_at": "2025-06-08T13:54:43+00:00",
    "commented_code": "}\n             }\n         }\n+        let unmatched_paths =\n+            print_unmatched_explicit_paths(ui, &workspace_command, &fileset_expression, [&tree])?;\n+\n+        if let [only_path] = args.paths.as_slice() {\n+            if !unmatched_paths.is_empty()\n+                && workspace_command\n+                    .parse_revset(ui, &RevisionArg::from(only_path.to_owned()))\n+                    .is_ok()\n+            {\n+                writeln!(\n+                    ui.hint_default(),\n+                    \"Maybe you meant `jj diff --summary -r {only_path:?}`?\",",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2134709498",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6715,
        "pr_file": "cli/src/commands/status.rs",
        "discussion_id": "2134709498",
        "commented_code": "@@ -162,6 +164,21 @@ pub(crate) fn cmd_status(\n                 }\n             }\n         }\n+        let unmatched_paths =\n+            print_unmatched_explicit_paths(ui, &workspace_command, &fileset_expression, [&tree])?;\n+\n+        if let [only_path] = args.paths.as_slice() {\n+            if !unmatched_paths.is_empty()\n+                && workspace_command\n+                    .parse_revset(ui, &RevisionArg::from(only_path.to_owned()))\n+                    .is_ok()\n+            {\n+                writeln!(\n+                    ui.hint_default(),\n+                    \"Maybe you meant `jj diff --summary -r {only_path:?}`?\",",
        "comment_created_at": "2025-06-08T13:54:43+00:00",
        "comment_author": "yuja",
        "comment_body": "nit: \"To show changes in a certain revision, use `jj diff ...`\" or something? It's not so obvious that the user expects `jj status` could show changes of arbitrary revision.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2324916223",
    "pr_number": 7427,
    "pr_file": "cli/src/commands/describe.rs",
    "created_at": "2025-09-05T12:05:53+00:00",
    "commented_code": "/// Update the change description or other metadata [default alias: desc]\n ///\n-/// Starts an editor to let you edit the description of changes. The editor\n-/// will be $EDITOR, or `nano` if that's not defined (`Notepad` on Windows).\n+/// Starts an editor to let you edit the description of changes. The editor will\n+/// be chosen from $JJ_EDITOR, `ui.editor`, $VISUAL, $EDITOR, or `nano`",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2324916223",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7427,
        "pr_file": "cli/src/commands/describe.rs",
        "discussion_id": "2324916223",
        "commented_code": "@@ -41,8 +41,9 @@ use crate::ui::Ui;\n \n /// Update the change description or other metadata [default alias: desc]\n ///\n-/// Starts an editor to let you edit the description of changes. The editor\n-/// will be $EDITOR, or `nano` if that's not defined (`Notepad` on Windows).\n+/// Starts an editor to let you edit the description of changes. The editor will\n+/// be chosen from $JJ_EDITOR, `ui.editor`, $VISUAL, $EDITOR, or `nano`",
        "comment_created_at": "2025-09-05T12:05:53+00:00",
        "comment_author": "scott2000",
        "comment_body": "It might be good to mention that these options are listed in the order they are searched, and/or that it will use the first editor it finds.",
        "pr_file_module": null
      },
      {
        "comment_id": "2325797135",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7427,
        "pr_file": "cli/src/commands/describe.rs",
        "discussion_id": "2324916223",
        "commented_code": "@@ -41,8 +41,9 @@ use crate::ui::Ui;\n \n /// Update the change description or other metadata [default alias: desc]\n ///\n-/// Starts an editor to let you edit the description of changes. The editor\n-/// will be $EDITOR, or `nano` if that's not defined (`Notepad` on Windows).\n+/// Starts an editor to let you edit the description of changes. The editor will\n+/// be chosen from $JJ_EDITOR, `ui.editor`, $VISUAL, $EDITOR, or `nano`",
        "comment_created_at": "2025-09-05T18:40:54+00:00",
        "comment_author": "the-kenny",
        "comment_body": "Good point. I just pushed a change adapting the text while trying to keep it as short as possible. Let me know if you prefer clearer (and more verbose) wording.",
        "pr_file_module": null
      },
      {
        "comment_id": "2327717097",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7427,
        "pr_file": "cli/src/commands/describe.rs",
        "discussion_id": "2324916223",
        "commented_code": "@@ -41,8 +41,9 @@ use crate::ui::Ui;\n \n /// Update the change description or other metadata [default alias: desc]\n ///\n-/// Starts an editor to let you edit the description of changes. The editor\n-/// will be $EDITOR, or `nano` if that's not defined (`Notepad` on Windows).\n+/// Starts an editor to let you edit the description of changes. The editor will\n+/// be chosen from $JJ_EDITOR, `ui.editor`, $VISUAL, $EDITOR, or `nano`",
        "comment_created_at": "2025-09-06T15:32:43+00:00",
        "comment_author": "scott2000",
        "comment_body": "I think it might be better to use a bit clearer wording, even if it is longer, since this could be the first place someone looks to find out how to configure the editor.\r\n\r\nI'm also not sure it's necessary to mention $JJ_EDITOR here, since I believe the recommended way to set the editor would be the `ui.editor` config option instead. Maybe we could just mention that it can be configured using `ui.editor`, and that it defaults to $VISUAL, $EDITOR, or nano/notepad otherwise?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2214775908",
    "pr_number": 6899,
    "pr_file": "cli/src/templater.rs",
    "created_at": "2025-07-18T03:03:03+00:00",
    "commented_code": "}\n }\n \n+/// Template which, upon being forced (`extract()`ed), will evaluate its\n+/// condition and select between a template for the true case and a template\n+/// for the false case (which will yield nothing if it is [`None`]).",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2214775908",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6899,
        "pr_file": "cli/src/templater.rs",
        "discussion_id": "2214775908",
        "commented_code": "@@ -594,6 +603,9 @@ where\n     }\n }\n \n+/// Template which, upon being forced (`extract()`ed), will evaluate its\n+/// condition and select between a template for the true case and a template\n+/// for the false case (which will yield nothing if it is [`None`]).",
        "comment_created_at": "2025-07-18T03:03:03+00:00",
        "comment_author": "yuja",
        "comment_body": "This sounds more like a textual explanation of the code. Can you simplify? I think it'll be something like \"Template which selects output based on a boolean condition.\"",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2303539937",
    "pr_number": 7362,
    "pr_file": "cli/src/commands/redo.rs",
    "created_at": "2025-08-27T10:36:42+00:00",
    "commented_code": "/// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.\n+///\n+/// See also `jj op restore` to explicitly restore an older operation by id.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2303539937",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303539937",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.\n+///\n+/// See also `jj op restore` to explicitly restore an older operation by id.",
        "comment_created_at": "2025-08-27T10:36:42+00:00",
        "comment_author": "senekor",
        "comment_body": "Maybe mention `op log` here as well, as in the documentation of `jj undo`? I think it's even more important with redo, because users might undo some important change, accidentally create a new operation and then fail to redo the important operation. Then they might ask themselves: \"Is there some way I can redo the operation I just lost?\" They have to find out about `op log` to even identify which operation to restore.",
        "pr_file_module": null
      },
      {
        "comment_id": "2305584433",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303539937",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.\n+///\n+/// See also `jj op restore` to explicitly restore an older operation by id.",
        "comment_created_at": "2025-08-27T23:47:56+00:00",
        "comment_author": "ilyagr",
        "comment_body": "It was mentioned right before, and I didn't want to repeat. Still, it's a good point that no matter how we rewrite the above paragraph, we want to make sure `op log` is mentioned (and perhaps more prominently than it currently is).",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2303551954",
    "pr_number": 7362,
    "pr_file": "cli/src/commands/redo.rs",
    "created_at": "2025-08-27T10:43:12+00:00",
    "commented_code": "/// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2303551954",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303551954",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.",
        "comment_created_at": "2025-08-27T10:43:12+00:00",
        "comment_author": "senekor",
        "comment_body": "I'm not sure who this comment is helping. Is \"undo stack\" a common term people use? I've never heard it outside our discussion about implementing the feature. In what way does our implementation work differently than what people think of as an \"undo stack\"?\r\n\r\n\"just try it out\" and \"read the source code\" don't seem helpful either.\r\n\r\nI would consider making a reference to the undo/redo feature of GUI apps / text editors. Our implementation works exactly the same on the surface. That should be intuitive for most users. (Our implementation is more powerful, but only once you dive into `jj operation` commands.)",
        "pr_file_module": null
      },
      {
        "comment_id": "2305585261",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303551954",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.",
        "comment_created_at": "2025-08-27T23:48:19+00:00",
        "comment_author": "ilyagr",
        "comment_body": "I was concerned about this as well; I imagine this would be edited further as we get better ideas. I kept it in because I thought it was better than nothing, but I could have been wrong.\n\nI would consider making a reference to the undo/redo feature of GUI apps / text editors.\n\nI'll think about this. More concrete suggestions (from you or others) are welcome as well.\nAnother option I'm considering is to just delete this paragraph and only add the next one (with jj op log added to it). It seems that we have at least one vote for this paragraph (as it is now) not being better than nothing.\n\nAnd thank you for your review and thoughts so far!",
        "pr_file_module": null
      },
      {
        "comment_id": "2309036826",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303551954",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.",
        "comment_created_at": "2025-08-29T03:29:22+00:00",
        "comment_author": "ilyagr",
        "comment_body": "OK, how about this?",
        "pr_file_module": null
      },
      {
        "comment_id": "2309078873",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7362,
        "pr_file": "cli/src/commands/redo.rs",
        "discussion_id": "2303551954",
        "commented_code": "@@ -28,6 +28,14 @@ use crate::ui::Ui;\n /// Redo the most recently undone operation\n ///\n /// This is the natural counterpart of `jj undo`.\n+///\n+/// Repeated invocations of `jj undo` and `jj redo` are meant to feel intuitive\n+/// if you are used to the model of an \"undo stack\". However, the behavior is\n+/// not completely identical in complicated cases. If interested in the details,\n+/// experiment and compare the command output to `jj op log` output and/or see\n+/// the comments in the source code.",
        "comment_created_at": "2025-08-29T04:06:25+00:00",
        "comment_author": "senekor",
        "comment_body": "I like it much better now, I think this should be clear and intuitive for newcomers. Thanks!",
        "pr_file_module": null
      }
    ]
  }
]