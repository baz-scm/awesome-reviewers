[
  {
    "discussion_id": "2213534130",
    "pr_number": 6990,
    "pr_file": "cli/src/commands/config/review_managed.rs",
    "created_at": "2025-07-17T14:35:57+00:00",
    "commented_code": null,
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2213534130",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213534130",
        "commented_code": null,
        "comment_created_at": "2025-07-17T14:35:57+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "In my opinion this shouldn't belong in the VCS.",
        "pr_file_module": null
      },
      {
        "comment_id": "2214563156",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213534130",
        "commented_code": null,
        "comment_created_at": "2025-07-18T00:19:49+00:00",
        "comment_author": "matts1",
        "comment_body": "I quite strongly disagree with this. If you leave it up to the user to review the config and copy it, it's far less secure due to psychology:\r\n* The user can run `ln -s` to create a symlink instead of copying the config, thus never even reviewing changes\r\n* The user is far more likely to review the diff if you actually force a diff open for them than if you tell them \"please review and copy if you trust it\" - most users will not be bothered to open a diff\r\n\r\nWhat makes you say this shouldn't be in the VCS?",
        "pr_file_module": null
      },
      {
        "comment_id": "2216091793",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213534130",
        "commented_code": null,
        "comment_created_at": "2025-07-18T13:48:46+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "> I quite strongly disagree with this. If you leave it up to the user to review the config and copy it, it's far less secure due to psychology:\r\n> \r\n> * The user can run `ln -s` to create a symlink instead of copying the config, thus never even reviewing changes\r\n> * The user is far more likely to review the diff if you actually force a diff open for them than if you tell them \"please review and copy if you trust it\" - most users will not be bothered to open a diff\r\n\r\nI don't disagree that the config should be reviewed by the users it just inherently is to late at the point when you run an updating command (`jj git sync`, `jj git fetch`) since you trusted the repo's owner the moment you put it on your disk. It'll also be the case that people will just \"skip\" (and even be encouraged to by repo owners) this process since they blindly trust the organization behind it. \r\n\r\nAll in all this is to me a technical solution to a social problem.\r\n\r\n> What makes you say this shouldn't be in the VCS?\r\n\r\nBecause building a meta-configuration system doesn't belong into a VCS's responsibility and you essentially trust the organization/person or repo when you download or unzip it. Ideally this is done via a configuration management system outside the VCS which is individually reviewed and approved by the respective organization. \r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2216512002",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213534130",
        "commented_code": null,
        "comment_created_at": "2025-07-18T17:00:25+00:00",
        "comment_author": "emilazy",
        "comment_body": "It's not true that download some files is consent to execute arbitrary code on your machine and to the extent this is true it's a deficiency of systems that is being increasingly moved away from. Editors ask you whether you want to enable risky LSPs in new workspaces or accept configuration from them, tools like `direnv` won't load new files without a trust prompt, unsandboxed build scripts in things like Cargo are acknowledged as unfortunate design mistakes (but builds are easier to sandbox than VCS config).\r\n\r\nI haven't reviewed the design of this PR and don't have strong opinions on whether we should support dangerous config settings in repos at all - I just want to speak against the risk of falling into a security nihilism where the only solution is for everyone to exercise unrealistic caution and tools shouldn't try to be safe by default. If we do let repos set dangerous settings then we should certainly have a trust model for it. Git just had a CVE very recently that allowed escalating from repository contents to writes/code execution as a user. If we deliberately expose that kind of functionality it should be behind user consent.",
        "pr_file_module": null
      },
      {
        "comment_id": "2223998233",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6990,
        "pr_file": "cli/src/commands/config/review_managed.rs",
        "discussion_id": "2213534130",
        "commented_code": null,
        "comment_created_at": "2025-07-22T23:16:14+00:00",
        "comment_author": "PhilipMetzger",
        "comment_body": "To be clear I don't really have an issue with supporting per repo configs, I just see unfortunate social interactions with people adding a `jj util exec` alias which blasts everything away. And since they already executed `jj` and established such a trust with their upstream project, then they'll come back to blame us. \r\n\r\nIt seems both of you misunderstood it that it was about this (which is entirely my opinion on the whole thing, so not blocking at all). Anyway I see the same social issues upcoming as this lobste.rs thread talks about: https://lobste.rs/s/nm5lho/stop_putting_nix_setup_your_checked_envrc. (Also the discussion in https://github.com/jj-vcs/jj/pull/4759#pullrequestreview-2416330036 somewhat relevant). ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2317293604",
    "pr_number": 6998,
    "pr_file": "cli/src/template_builder.rs",
    "created_at": "2025-09-02T22:17:03+00:00",
    "commented_code": "Ok(out_property.into_dyn_wrapped())\n         },\n     );\n+    map.insert(\n+        \"replace\",\n+        |language, diagnostics, build_ctx, self_property, function| {\n+            let [from, to] = function.expect_exact_arguments()?;\n+            let from = expect_stringify_expression(language, diagnostics, build_ctx, from)?;\n+            let to = expect_stringify_expression(language, diagnostics, build_ctx, to)?;",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2317293604",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 6998,
        "pr_file": "cli/src/template_builder.rs",
        "discussion_id": "2317293604",
        "commented_code": "@@ -1022,6 +1022,16 @@ fn builtin_string_methods<'a, L: TemplateLanguage<'a> + ?Sized>(\n             Ok(out_property.into_dyn_wrapped())\n         },\n     );\n+    map.insert(\n+        \"replace\",\n+        |language, diagnostics, build_ctx, self_property, function| {\n+            let [from, to] = function.expect_exact_arguments()?;\n+            let from = expect_stringify_expression(language, diagnostics, build_ctx, from)?;\n+            let to = expect_stringify_expression(language, diagnostics, build_ctx, to)?;",
        "comment_created_at": "2025-09-02T22:17:03+00:00",
        "comment_author": "lf-",
        "comment_body": "I wonder if this should be stringify at all, if it should be a non-coercing string, or if it should be forced to be a literal string. The reason to not allow it to be stringify is that dealing with dynamic template strings is a known problem spot in basically every language (c.f. printf vulnerabilities in C, etc) since you have to deal with invalid ones, and it would probably be surprising behaviour to the user to allow them to shoot themselves in the foot with this not being interpreted as a literal string.\r\n\r\nSpecifically, in a world where this supports `$1`, `$2`, etc regex capture group references, allowing this to vary could prove somewhat annoying.",
        "pr_file_module": null
      }
    ]
  }
]