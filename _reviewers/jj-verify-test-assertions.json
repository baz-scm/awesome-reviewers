[
  {
    "discussion_id": "2370857203",
    "pr_number": 7392,
    "pr_file": "cli/tests/test_git_colocation.rs",
    "created_at": "2025-09-23T02:48:04+00:00",
    "commented_code": "+// Copyright 2025 The Jujutsu Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+use crate::common::TestEnvironment;\n+\n+fn read_git_target(workspace_root: &std::path::Path) -> String {\n+    let mut path = workspace_root.to_path_buf();\n+    path.extend([\".jj\", \"repo\", \"store\", \"git_target\"]);\n+    std::fs::read_to_string(path).unwrap()\n+}\n+\n+#[test]\n+fn test_git_colocation_enable_success() {\n+    let test_env = TestEnvironment::default();\n+\n+    // Initialize a regular jj repo backed by git\n+    let _ = test_env.run_jj_in(test_env.env_root(), [\"git\", \"init\", \"repo\"]);\n+    let workspace_root = test_env.env_root().join(\"repo\");\n+\n+    // Verify it's not colocated initially\n+    assert!(!workspace_root.join(\".git\").exists());\n+    assert_eq!(read_git_target(&workspace_root), \"git\");\n+\n+    // Run colocate command\n+    let _output = test_env.run_jj_in(&workspace_root, [\"git\", \"colocation\", \"enable\"]);",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2370857203",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7392,
        "pr_file": "cli/tests/test_git_colocation.rs",
        "discussion_id": "2370857203",
        "commented_code": "@@ -0,0 +1,198 @@\n+// Copyright 2025 The Jujutsu Authors\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+use crate::common::TestEnvironment;\n+\n+fn read_git_target(workspace_root: &std::path::Path) -> String {\n+    let mut path = workspace_root.to_path_buf();\n+    path.extend([\".jj\", \"repo\", \"store\", \"git_target\"]);\n+    std::fs::read_to_string(path).unwrap()\n+}\n+\n+#[test]\n+fn test_git_colocation_enable_success() {\n+    let test_env = TestEnvironment::default();\n+\n+    // Initialize a regular jj repo backed by git\n+    let _ = test_env.run_jj_in(test_env.env_root(), [\"git\", \"init\", \"repo\"]);\n+    let workspace_root = test_env.env_root().join(\"repo\");\n+\n+    // Verify it's not colocated initially\n+    assert!(!workspace_root.join(\".git\").exists());\n+    assert_eq!(read_git_target(&workspace_root), \"git\");\n+\n+    // Run colocate command\n+    let _output = test_env.run_jj_in(&workspace_root, [\"git\", \"colocation\", \"enable\"]);",
        "comment_created_at": "2025-09-23T02:48:04+00:00",
        "comment_author": "yuja",
        "comment_body": "If you aren't interested in the output, use `.success()` to ensure that the command didn't fail. I think it's probably better to snapshot the command output here, though.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2401919371",
    "pr_number": 7605,
    "pr_file": "cli/tests/test_metaedit_command.rs",
    "created_at": "2025-10-03T13:29:42+00:00",
    "commented_code": "\");\n }\n \n+#[test]\n+/// Test that setting the same timestamp twice does nothing (issue #7602)\n+fn test_metaedit_set_same_timestamp_twice() {\n+    let test_env = TestEnvironment::default();\n+    test_env.run_jj_in(\".\", [\"git\", \"init\", \"repo\"]).success();\n+    let work_dir = test_env.work_dir(\"repo\");\n+\n+    // Set the author-timestamp to the same value twice\n+    // and check that the second time it does nothing\n+    work_dir\n+        .run_jj([\n+            \"metaedit\",\n+            \"--author-timestamp\",\n+            \"2001-02-03 04:05:14.000+07:00\",\n+        ])\n+        .success();",
    "repo_full_name": "jj-vcs/jj",
    "discussion_comments": [
      {
        "comment_id": "2401919371",
        "repo_full_name": "jj-vcs/jj",
        "pr_number": 7605,
        "pr_file": "cli/tests/test_metaedit_command.rs",
        "discussion_id": "2401919371",
        "commented_code": "@@ -485,6 +485,38 @@ fn test_update_empty_author() {\n     \");\n }\n \n+#[test]\n+/// Test that setting the same timestamp twice does nothing (issue #7602)\n+fn test_metaedit_set_same_timestamp_twice() {\n+    let test_env = TestEnvironment::default();\n+    test_env.run_jj_in(\".\", [\"git\", \"init\", \"repo\"]).success();\n+    let work_dir = test_env.work_dir(\"repo\");\n+\n+    // Set the author-timestamp to the same value twice\n+    // and check that the second time it does nothing\n+    work_dir\n+        .run_jj([\n+            \"metaedit\",\n+            \"--author-timestamp\",\n+            \"2001-02-03 04:05:14.000+07:00\",\n+        ])\n+        .success();",
        "comment_created_at": "2025-10-03T13:29:42+00:00",
        "comment_author": "yuja",
        "comment_body": "nit: snapshot the output as well (instead of `.success())`? I think it's better to ensure that the commit is rewritten by this command.",
        "pr_file_module": null
      }
    ]
  }
]