[
  {
    "discussion_id": "2185284298",
    "pr_number": 20045,
    "pr_file": "core/src/main/scala/kafka/server/DelayedRemoteFetch.scala",
    "created_at": "2025-07-04T12:46:32+00:00",
    "commented_code": "override def onExpiration(): Unit = {\n     // cancel the remote storage read task, if it has not been executed yet and\n     // avoid interrupting the task if it is already running as it may force closing opened/cached resources as transaction index.\n-    val cancelled = remoteFetchTask.cancel(false)\n-    if (!cancelled) debug(s\"Remote fetch task for RemoteStorageFetchInfo: $remoteFetchInfo could not be cancelled and its isDone value is ${remoteFetchTask.isDone}\")\n+    remoteFetchTasks.forEach { (topicIdPartition, task) =>\n+      if (!task.isDone) {",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2185284298",
        "repo_full_name": "apache/kafka",
        "pr_number": 20045,
        "pr_file": "core/src/main/scala/kafka/server/DelayedRemoteFetch.scala",
        "discussion_id": "2185284298",
        "commented_code": "@@ -90,8 +92,13 @@ class DelayedRemoteFetch(remoteFetchTask: Future[Void],\n   override def onExpiration(): Unit = {\n     // cancel the remote storage read task, if it has not been executed yet and\n     // avoid interrupting the task if it is already running as it may force closing opened/cached resources as transaction index.\n-    val cancelled = remoteFetchTask.cancel(false)\n-    if (!cancelled) debug(s\"Remote fetch task for RemoteStorageFetchInfo: $remoteFetchInfo could not be cancelled and its isDone value is ${remoteFetchTask.isDone}\")\n+    remoteFetchTasks.forEach { (topicIdPartition, task) =>\n+      if (!task.isDone) {",
        "comment_created_at": "2025-07-04T12:46:32+00:00",
        "comment_author": "kamalcph",
        "comment_body": "should we add a null check? The task can be null when thread-pool throws RejectedExecutionException in ReplicaManager#processRemoteFetch.\r\n\r\n```\r\nif (task != null && !task.isDone)\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108068881",
    "pr_number": 19793,
    "pr_file": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala",
    "created_at": "2025-05-27T03:06:38+00:00",
    "commented_code": "requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n     val topicIdPartition = new TopicIdPartition(topicId, partition)\n-    def appendCallback(responses: Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(topicIdPartition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: util.Map[TopicIdPartition, PartitionResponse]): Unit = {\n+      val response = java.util.Optional.ofNullable(responses.get(topicIdPartition))",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2108068881",
        "repo_full_name": "apache/kafka",
        "pr_number": 19793,
        "pr_file": "core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala",
        "discussion_id": "2108068881",
        "commented_code": "@@ -2990,9 +2990,9 @@ class ReplicaManagerTest {\n                             requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n     val topicIdPartition = new TopicIdPartition(topicId, partition)\n-    def appendCallback(responses: Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(topicIdPartition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: util.Map[TopicIdPartition, PartitionResponse]): Unit = {\n+      val response = java.util.Optional.ofNullable(responses.get(topicIdPartition))",
        "comment_created_at": "2025-05-27T03:06:38+00:00",
        "comment_author": "frankvicky",
        "comment_body": "We already imported `java.util.Optional`, so we don't need a full-qualified name.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108484602",
    "pr_number": 19793,
    "pr_file": "core/src/test/scala/kafka/server/LocalLeaderEndPointTest.scala",
    "created_at": "2025-05-27T07:59:40+00:00",
    "commented_code": "origin: AppendOrigin = AppendOrigin.CLIENT,\n                             requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n-    def appendCallback(responses: scala.collection.Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(partition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: java.util.Map[TopicIdPartition, PartitionResponse]): Unit = {\n+      val response = Optional.ofNullable(responses.get(partition))\n+\n+      assertTrue(response.isPresent)\n       result.fire(response.get)",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2108484602",
        "repo_full_name": "apache/kafka",
        "pr_number": 19793,
        "pr_file": "core/src/test/scala/kafka/server/LocalLeaderEndPointTest.scala",
        "discussion_id": "2108484602",
        "commented_code": "@@ -271,9 +271,10 @@ class LocalLeaderEndPointTest extends Logging {\n                             origin: AppendOrigin = AppendOrigin.CLIENT,\n                             requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n-    def appendCallback(responses: scala.collection.Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(partition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: java.util.Map[TopicIdPartition, PartitionResponse]): Unit = {\n+      val response = Optional.ofNullable(responses.get(partition))\n+\n+      assertTrue(response.isPresent)\n       result.fire(response.get)",
        "comment_created_at": "2025-05-27T07:59:40+00:00",
        "comment_author": "m1a2st",
        "comment_body": "```suggestion\r\n      val response = responses.get(partition)\r\n      assertNotNull(response)\r\n      result.fire(response)\r\n```",
        "pr_file_module": null
      }
    ]
  }
]