[
  {
    "discussion_id": "2224997029",
    "pr_number": 20177,
    "pr_file": "tools/src/test/java/org/apache/kafka/tools/DelegationTokenCommandTest.java",
    "created_at": "2025-07-23T09:42:47+00:00",
    "commented_code": "String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--expire\", \"--expiry-time-period\", \"-1\", \"--hmac\", hmac};\n         return new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n     }\n+\n+    @Test\n+    public void testCheckArgsCreateOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--create\", \"--max-life-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsRenewOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--renew\", \"--hmac\", \"test-hmac\", \"--renew-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsExpireOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--expire\", \"--hmac\", \"test-hmac\", \"--expiry-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsDescribeOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--describe\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsInvalidArgsForCreate() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--create\", \"--max-life-time-period\", \"604800000\", \"--hmac\", \"test-hmac\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2224997029",
        "repo_full_name": "apache/kafka",
        "pr_number": 20177,
        "pr_file": "tools/src/test/java/org/apache/kafka/tools/DelegationTokenCommandTest.java",
        "discussion_id": "2224997029",
        "commented_code": "@@ -109,4 +110,142 @@ private DelegationTokenCommand.DelegationTokenCommandOptions getExpireOpts(Strin\n         String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--expire\", \"--expiry-time-period\", \"-1\", \"--hmac\", hmac};\n         return new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n     }\n+\n+    @Test\n+    public void testCheckArgsCreateOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--create\", \"--max-life-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsRenewOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--renew\", \"--hmac\", \"test-hmac\", \"--renew-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsExpireOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--expire\", \"--hmac\", \"test-hmac\", \"--expiry-time-period\", \"604800000\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsDescribeOperation() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--describe\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);\n+        \n+        opts.checkArgs();\n+    }\n+\n+    @Test\n+    public void testCheckArgsInvalidArgsForCreate() {\n+        String[] args = {\"--bootstrap-server\", \"localhost:9092\", \"--command-config\", \"testfile\", \"--create\", \"--max-life-time-period\", \"604800000\", \"--hmac\", \"test-hmac\"};\n+        DelegationTokenCommand.DelegationTokenCommandOptions opts = new DelegationTokenCommand.DelegationTokenCommandOptions(args);",
        "comment_created_at": "2025-07-23T09:42:47+00:00",
        "comment_author": "FrankYang0529",
        "comment_body": "For `--create` command, `--renew-time-period` and `--expiry-time-period` are invalid arguments as well. Could you also add them to the case? We also need similar update for different commands.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2070531668",
    "pr_number": 19589,
    "pr_file": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
    "created_at": "2025-05-01T17:08:34+00:00",
    "commented_code": "handledSuccessfully = handleUpdateVoterResponse(response, currentTimeMs);\n                 break;\n \n+            case ADD_RAFT_VOTER:\n+                handledSuccessfully = handleAddVoterResponse(response, currentTimeMs);\n+                break;\n+\n+            case REMOVE_RAFT_VOTER:\n+                handledSuccessfully = handleRemoveVoterResponse(response, currentTimeMs);\n+                break;",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2070531668",
        "repo_full_name": "apache/kafka",
        "pr_number": 19589,
        "pr_file": "raft/src/main/java/org/apache/kafka/raft/KafkaRaftClient.java",
        "discussion_id": "2070531668",
        "commented_code": "@@ -2618,6 +2656,14 @@ private void handleResponse(RaftResponse.Inbound response, long currentTimeMs) {\n                 handledSuccessfully = handleUpdateVoterResponse(response, currentTimeMs);\n                 break;\n \n+            case ADD_RAFT_VOTER:\n+                handledSuccessfully = handleAddVoterResponse(response, currentTimeMs);\n+                break;\n+\n+            case REMOVE_RAFT_VOTER:\n+                handledSuccessfully = handleRemoveVoterResponse(response, currentTimeMs);\n+                break;",
        "comment_created_at": "2025-05-01T17:08:34+00:00",
        "comment_author": "jsancio",
        "comment_body": "Since now kraft can send these RPCs, we need to add a case for them in `RaftUtil#errorResponse`.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2034702639",
    "pr_number": 19306,
    "pr_file": "tools/src/main/java/org/apache/kafka/tools/DelegationTokenCommand.java",
    "created_at": "2025-04-09T07:45:02+00:00",
    "commented_code": "public DelegationTokenCommandOptions(String[] args) {\n             super(args);\n \n-            String bootstrapServerDoc = \"REQUIRED: server(s) to use for bootstrapping.\";\n+            String bootstrapServerDoc = \"REQUIRED: server(s) to use for bootstrapping. When the --bootstrap-controller argument is used --bootstrap-servers must not be specified.\";\n             String commandConfigDoc = \"REQUIRED: A property file containing configs to be passed to Admin Client. Token management\" +\n                     \" operations are allowed in secure mode only. This config file is used to pass security related configs.\";\n \n             this.bootstrapServerOpt = parser.accepts(\"bootstrap-server\", bootstrapServerDoc)\n                     .withRequiredArg()\n                     .ofType(String.class);\n \n+            this.bootstrapControllerOpt = parser.accepts(\"bootstrap-controller\",\n+                                                         \"REQUIRED: A comma-separated list of bootstrap.controllers that can be supplied instead of bootstrap-servers.\"\n+                                                         + \" This is useful for administrators who wish to bypass the brokers.\")\n+                                            .withRequiredArg()",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2034702639",
        "repo_full_name": "apache/kafka",
        "pr_number": 19306,
        "pr_file": "tools/src/main/java/org/apache/kafka/tools/DelegationTokenCommand.java",
        "discussion_id": "2034702639",
        "commented_code": "@@ -202,14 +206,20 @@ static class DelegationTokenCommandOptions extends CommandDefaultOptions {\n         public DelegationTokenCommandOptions(String[] args) {\n             super(args);\n \n-            String bootstrapServerDoc = \"REQUIRED: server(s) to use for bootstrapping.\";\n+            String bootstrapServerDoc = \"REQUIRED: server(s) to use for bootstrapping. When the --bootstrap-controller argument is used --bootstrap-servers must not be specified.\";\n             String commandConfigDoc = \"REQUIRED: A property file containing configs to be passed to Admin Client. Token management\" +\n                     \" operations are allowed in secure mode only. This config file is used to pass security related configs.\";\n \n             this.bootstrapServerOpt = parser.accepts(\"bootstrap-server\", bootstrapServerDoc)\n                     .withRequiredArg()\n                     .ofType(String.class);\n \n+            this.bootstrapControllerOpt = parser.accepts(\"bootstrap-controller\",\n+                                                         \"REQUIRED: A comma-separated list of bootstrap.controllers that can be supplied instead of bootstrap-servers.\"\n+                                                         + \" This is useful for administrators who wish to bypass the brokers.\")\n+                                            .withRequiredArg()",
        "comment_created_at": "2025-04-09T07:45:02+00:00",
        "comment_author": "FrankYang0529",
        "comment_body": "You cannot specify both `--bootstrap-server` and `--bootstrap-controller` as required. This makes result like:\r\n\r\n```\r\n>  ./bin/kafka-delegation-tokens.sh --bootstrap-controller localhost:9093 --describe\r\nMissing required argument \"[bootstrap-server]\"\r\n```\r\n\r\nPlease using `withOptionalArg` and do the check in `checkArgs`.\r\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2126352604",
    "pr_number": 19646,
    "pr_file": "tools/src/main/java/org/apache/kafka/tools/streams/StreamsGroupCommandOptions.java",
    "created_at": "2025-06-04T11:21:06+00:00",
    "commented_code": ".withRequiredArg()\n             .describedAs(\"streams group\")\n             .ofType(String.class);\n+        topicOpt = parser.accepts(\"topic\", TOPIC_DOC)",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2126352604",
        "repo_full_name": "apache/kafka",
        "pr_number": 19646,
        "pr_file": "tools/src/main/java/org/apache/kafka/tools/streams/StreamsGroupCommandOptions.java",
        "discussion_id": "2126352604",
        "commented_code": "@@ -76,8 +121,14 @@ public StreamsGroupCommandOptions(String[] args) {\n             .withRequiredArg()\n             .describedAs(\"streams group\")\n             .ofType(String.class);\n+        topicOpt = parser.accepts(\"topic\", TOPIC_DOC)",
        "comment_created_at": "2025-06-04T11:21:06+00:00",
        "comment_author": "lucasbru",
        "comment_body": "According to the KIP, this should be --input-topics, and allow multiple topics to be passed.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2083623960",
    "pr_number": 18929,
    "pr_file": "clients/src/main/java/org/apache/kafka/common/requests/AlterShareGroupOffsetsRequest.java",
    "created_at": "2025-05-11T21:20:34+00:00",
    "commented_code": ");\n     }\n \n+    public static AlterShareGroupOffsetsResponseData.AlterShareGroupOffsetsResponseTopic getErrorAlterShareGroup(\n+        Errors error\n+    ) {\n+        return new AlterShareGroupOffsetsResponseData.AlterShareGroupOffsetsResponseTopic()",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2083623960",
        "repo_full_name": "apache/kafka",
        "pr_number": 18929,
        "pr_file": "clients/src/main/java/org/apache/kafka/common/requests/AlterShareGroupOffsetsRequest.java",
        "discussion_id": "2083623960",
        "commented_code": "@@ -78,6 +79,25 @@ public static AlterShareGroupOffsetsRequest parse(Readable readable, short versi\n         );\n     }\n \n+    public static AlterShareGroupOffsetsResponseData.AlterShareGroupOffsetsResponseTopic getErrorAlterShareGroup(\n+        Errors error\n+    ) {\n+        return new AlterShareGroupOffsetsResponseData.AlterShareGroupOffsetsResponseTopic()",
        "comment_created_at": "2025-05-11T21:20:34+00:00",
        "comment_author": "AndrewJSchofield",
        "comment_body": "In `DeleteShareGroupOffsetsResponse`, there are a top-level error code and message. These are missing in `AlterShareGroupOffsetResponse`. It would probably be best to add them, rather than setting an empty topic name and -1 partition index like this. wdyt?",
        "pr_file_module": null
      }
    ]
  }
]