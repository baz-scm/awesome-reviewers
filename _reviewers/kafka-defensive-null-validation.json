[
  {
    "discussion_id": "2212720679",
    "pr_number": 20144,
    "pr_file": "clients/src/main/java/org/apache/kafka/common/telemetry/internals/ClientTelemetryUtils.java",
    "created_at": "2025-07-17T08:46:11+00:00",
    "commented_code": "return validateResourceLabel(metadata, MetricsContext.NAMESPACE);\n     }\n \n-    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes) {\n-        if (acceptedCompressionTypes != null && !acceptedCompressionTypes.isEmpty()) {\n-            // Broker is providing the compression types in order of preference. Grab the\n-            // first one.\n+    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes, Set<CompressionType> unsupportedCompressionTypes) {\n+        if (acceptedCompressionTypes == null || acceptedCompressionTypes.isEmpty()) {\n+            return CompressionType.NONE;\n+        }\n+\n+        // If no unsupported types, return the first accepted type (broker's preference)\n+        if (unsupportedCompressionTypes == null || unsupportedCompressionTypes.isEmpty()) {\n             return acceptedCompressionTypes.get(0);\n         }",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2212720679",
        "repo_full_name": "apache/kafka",
        "pr_number": 20144,
        "pr_file": "clients/src/main/java/org/apache/kafka/common/telemetry/internals/ClientTelemetryUtils.java",
        "discussion_id": "2212720679",
        "commented_code": "@@ -181,13 +182,22 @@ public static boolean validateRequiredResourceLabels(Map<String, String> metadat\n         return validateResourceLabel(metadata, MetricsContext.NAMESPACE);\n     }\n \n-    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes) {\n-        if (acceptedCompressionTypes != null && !acceptedCompressionTypes.isEmpty()) {\n-            // Broker is providing the compression types in order of preference. Grab the\n-            // first one.\n+    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes, Set<CompressionType> unsupportedCompressionTypes) {\n+        if (acceptedCompressionTypes == null || acceptedCompressionTypes.isEmpty()) {\n+            return CompressionType.NONE;\n+        }\n+\n+        // If no unsupported types, return the first accepted type (broker's preference)\n+        if (unsupportedCompressionTypes == null || unsupportedCompressionTypes.isEmpty()) {\n             return acceptedCompressionTypes.get(0);\n         }",
        "comment_created_at": "2025-07-17T08:46:11+00:00",
        "comment_author": "apoorvmittal10",
        "comment_body": "Can unsupported compression types be ever null? If not then this code is not required. And a comment on top of method can be that `unsupportedCompressionTypes` can never be null.",
        "pr_file_module": null
      },
      {
        "comment_id": "2212810251",
        "repo_full_name": "apache/kafka",
        "pr_number": 20144,
        "pr_file": "clients/src/main/java/org/apache/kafka/common/telemetry/internals/ClientTelemetryUtils.java",
        "discussion_id": "2212720679",
        "commented_code": "@@ -181,13 +182,22 @@ public static boolean validateRequiredResourceLabels(Map<String, String> metadat\n         return validateResourceLabel(metadata, MetricsContext.NAMESPACE);\n     }\n \n-    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes) {\n-        if (acceptedCompressionTypes != null && !acceptedCompressionTypes.isEmpty()) {\n-            // Broker is providing the compression types in order of preference. Grab the\n-            // first one.\n+    public static CompressionType preferredCompressionType(List<CompressionType> acceptedCompressionTypes, Set<CompressionType> unsupportedCompressionTypes) {\n+        if (acceptedCompressionTypes == null || acceptedCompressionTypes.isEmpty()) {\n+            return CompressionType.NONE;\n+        }\n+\n+        // If no unsupported types, return the first accepted type (broker's preference)\n+        if (unsupportedCompressionTypes == null || unsupportedCompressionTypes.isEmpty()) {\n             return acceptedCompressionTypes.get(0);\n         }",
        "comment_created_at": "2025-07-17T09:19:25+00:00",
        "comment_author": "k-raina",
        "comment_body": "Addressed in commit https://github.com/apache/kafka/pull/20144/commits/fe88db0c50668c23509d75d8d439e8a19501cd4d",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2039713242",
    "pr_number": 19275,
    "pr_file": "streams/integration-tests/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java",
    "created_at": "2025-04-11T14:55:22+00:00",
    "commented_code": "streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.IntegerSerde.class);\n         streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n         streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n-        streamsConfiguration.putAll(extraProperties);\n+\n+        if (extraProperties != null) {\n+            streamsConfiguration.putAll(extraProperties);\n+        }",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2039713242",
        "repo_full_name": "apache/kafka",
        "pr_number": 19275,
        "pr_file": "streams/integration-tests/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java",
        "discussion_id": "2039713242",
        "commented_code": "@@ -161,7 +154,10 @@ private Properties props(final Properties extraProperties) {\n         streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.IntegerSerde.class);\n         streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n         streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n-        streamsConfiguration.putAll(extraProperties);\n+\n+        if (extraProperties != null) {\n+            streamsConfiguration.putAll(extraProperties);\n+        }",
        "comment_created_at": "2025-04-11T14:55:22+00:00",
        "comment_author": "cadonna",
        "comment_body": "Instead of passing `null` could you please do the following:\r\n```java\r\n    private Properties props(final Properties extraProperties) {\r\n        Properties streamsConfiguration = props();\r\n        streamsConfiguration.putAll(extraProperties);\r\n        return streamsConfiguration;\r\n    }\r\n\r\n    private Properties props() {\r\n        final Properties streamsConfiguration = new Properties();\r\n\r\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\r\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\r\n        streamsConfiguration.put(StreamsConfig.STATESTORE_CACHE_MAX_BYTES_CONFIG, 0);\r\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\r\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.IntegerSerde.class);\r\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.IntegerSerde.class);\r\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\r\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\r\n\r\n        streamsConfigurations.add(streamsConfiguration);\r\n\r\n        return streamsConfiguration;\r\n    }\r\n\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2162042496",
    "pr_number": 20021,
    "pr_file": "server/src/main/java/org/apache/kafka/server/metrics/NodeMetrics.java",
    "created_at": "2025-06-23T16:43:20+00:00",
    "commented_code": "+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.server.metrics;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.controller.QuorumFeatures;\n+import org.apache.kafka.metadata.VersionRange;\n+import org.apache.kafka.server.common.Feature;\n+import org.apache.kafka.server.common.MetadataVersion;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public final class NodeMetrics implements AutoCloseable {\n+    private static final String METRIC_GROUP_NAME = \"node-metrics\";\n+    private static final String FEATURE_NAME_TAG = \"feature-name\";\n+    private static final String MAXIMUM_SUPPORTED_LEVEL_NAME = \"maximum-supported-level\";\n+    private static final String MINIMUM_SUPPORTED_LEVEL_NAME = \"minimum-supported-level\";\n+\n+    private final Metrics metrics;\n+    private final Map<String, VersionRange> supportedFeatureRanges;\n+\n+    public NodeMetrics(Metrics metrics, boolean enableUnstableVersions) {\n+        this.metrics = metrics;\n+        this.supportedFeatureRanges = QuorumFeatures.defaultSupportedFeatureMap(enableUnstableVersions);",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2162042496",
        "repo_full_name": "apache/kafka",
        "pr_number": 20021,
        "pr_file": "server/src/main/java/org/apache/kafka/server/metrics/NodeMetrics.java",
        "discussion_id": "2162042496",
        "commented_code": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.server.metrics;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.controller.QuorumFeatures;\n+import org.apache.kafka.metadata.VersionRange;\n+import org.apache.kafka.server.common.Feature;\n+import org.apache.kafka.server.common.MetadataVersion;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public final class NodeMetrics implements AutoCloseable {\n+    private static final String METRIC_GROUP_NAME = \"node-metrics\";\n+    private static final String FEATURE_NAME_TAG = \"feature-name\";\n+    private static final String MAXIMUM_SUPPORTED_LEVEL_NAME = \"maximum-supported-level\";\n+    private static final String MINIMUM_SUPPORTED_LEVEL_NAME = \"minimum-supported-level\";\n+\n+    private final Metrics metrics;\n+    private final Map<String, VersionRange> supportedFeatureRanges;\n+\n+    public NodeMetrics(Metrics metrics, boolean enableUnstableVersions) {\n+        this.metrics = metrics;\n+        this.supportedFeatureRanges = QuorumFeatures.defaultSupportedFeatureMap(enableUnstableVersions);",
        "comment_created_at": "2025-06-23T16:43:20+00:00",
        "comment_author": "chia7712",
        "comment_body": "`QuorumFeatures.defaultSupportedFeatureMap` exclude the feature if the `enableUnstableVersions` is false and production version is zero. Hence, should we iterate `supportedFeatureRanges` instead of `Feature.PRODUCTION_FEATURE_NAMES` to avoid a possible NPE?",
        "pr_file_module": null
      },
      {
        "comment_id": "2163855467",
        "repo_full_name": "apache/kafka",
        "pr_number": 20021,
        "pr_file": "server/src/main/java/org/apache/kafka/server/metrics/NodeMetrics.java",
        "discussion_id": "2162042496",
        "commented_code": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.server.metrics;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.controller.QuorumFeatures;\n+import org.apache.kafka.metadata.VersionRange;\n+import org.apache.kafka.server.common.Feature;\n+import org.apache.kafka.server.common.MetadataVersion;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public final class NodeMetrics implements AutoCloseable {\n+    private static final String METRIC_GROUP_NAME = \"node-metrics\";\n+    private static final String FEATURE_NAME_TAG = \"feature-name\";\n+    private static final String MAXIMUM_SUPPORTED_LEVEL_NAME = \"maximum-supported-level\";\n+    private static final String MINIMUM_SUPPORTED_LEVEL_NAME = \"minimum-supported-level\";\n+\n+    private final Metrics metrics;\n+    private final Map<String, VersionRange> supportedFeatureRanges;\n+\n+    public NodeMetrics(Metrics metrics, boolean enableUnstableVersions) {\n+        this.metrics = metrics;\n+        this.supportedFeatureRanges = QuorumFeatures.defaultSupportedFeatureMap(enableUnstableVersions);",
        "comment_created_at": "2025-06-24T12:27:05+00:00",
        "comment_author": "Yunyung",
        "comment_body": "And in close(), supportedFeatureRanges.keySet() is iterated to remove metric. Should we align them?",
        "pr_file_module": null
      },
      {
        "comment_id": "2164179856",
        "repo_full_name": "apache/kafka",
        "pr_number": 20021,
        "pr_file": "server/src/main/java/org/apache/kafka/server/metrics/NodeMetrics.java",
        "discussion_id": "2162042496",
        "commented_code": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.kafka.server.metrics;\n+\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.controller.QuorumFeatures;\n+import org.apache.kafka.metadata.VersionRange;\n+import org.apache.kafka.server.common.Feature;\n+import org.apache.kafka.server.common.MetadataVersion;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public final class NodeMetrics implements AutoCloseable {\n+    private static final String METRIC_GROUP_NAME = \"node-metrics\";\n+    private static final String FEATURE_NAME_TAG = \"feature-name\";\n+    private static final String MAXIMUM_SUPPORTED_LEVEL_NAME = \"maximum-supported-level\";\n+    private static final String MINIMUM_SUPPORTED_LEVEL_NAME = \"minimum-supported-level\";\n+\n+    private final Metrics metrics;\n+    private final Map<String, VersionRange> supportedFeatureRanges;\n+\n+    public NodeMetrics(Metrics metrics, boolean enableUnstableVersions) {\n+        this.metrics = metrics;\n+        this.supportedFeatureRanges = QuorumFeatures.defaultSupportedFeatureMap(enableUnstableVersions);",
        "comment_created_at": "2025-06-24T14:27:43+00:00",
        "comment_author": "kevin-wu24",
        "comment_body": "> should we iterate supportedFeatureRanges instead of Feature.PRODUCTION_FEATURE_NAMES to avoid a possible NPE\r\n\r\nYes, will do.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2185381222",
    "pr_number": 20097,
    "pr_file": "group-coordinator/src/main/java/org/apache/kafka/coordinator/group/streams/TopologyMetadata.java",
    "created_at": "2025-07-04T13:29:59+00:00",
    "commented_code": "public record TopologyMetadata(MetadataImage metadataImage, SortedMap<String, ConfiguredSubtopology> subtopologyMap) implements TopologyDescriber {\n \n     public TopologyMetadata {\n-        metadataImage = Objects.requireNonNull(metadataImage);\n+        Objects.requireNonNull(metadataImage);\n         subtopologyMap = Objects.requireNonNull(Collections.unmodifiableSortedMap(subtopologyMap));",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2185381222",
        "repo_full_name": "apache/kafka",
        "pr_number": 20097,
        "pr_file": "group-coordinator/src/main/java/org/apache/kafka/coordinator/group/streams/TopologyMetadata.java",
        "discussion_id": "2185381222",
        "commented_code": "@@ -36,7 +36,7 @@\n public record TopologyMetadata(MetadataImage metadataImage, SortedMap<String, ConfiguredSubtopology> subtopologyMap) implements TopologyDescriber {\n \n     public TopologyMetadata {\n-        metadataImage = Objects.requireNonNull(metadataImage);\n+        Objects.requireNonNull(metadataImage);\n         subtopologyMap = Objects.requireNonNull(Collections.unmodifiableSortedMap(subtopologyMap));",
        "comment_created_at": "2025-07-04T13:29:59+00:00",
        "comment_author": "Yunyung",
        "comment_body": "Nitpick. The same applies to line36 in `StreamsGroupHeartbeatResult.java`.\r\n```suggestion\r\n        subtopologyMap = Collections.unmodifiableSortedMap(Objects.requireNonNull(subtopologyMap));\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "2189535843",
        "repo_full_name": "apache/kafka",
        "pr_number": 20097,
        "pr_file": "group-coordinator/src/main/java/org/apache/kafka/coordinator/group/streams/TopologyMetadata.java",
        "discussion_id": "2185381222",
        "commented_code": "@@ -36,7 +36,7 @@\n public record TopologyMetadata(MetadataImage metadataImage, SortedMap<String, ConfiguredSubtopology> subtopologyMap) implements TopologyDescriber {\n \n     public TopologyMetadata {\n-        metadataImage = Objects.requireNonNull(metadataImage);\n+        Objects.requireNonNull(metadataImage);\n         subtopologyMap = Objects.requireNonNull(Collections.unmodifiableSortedMap(subtopologyMap));",
        "comment_created_at": "2025-07-07T09:50:03+00:00",
        "comment_author": "mimaison",
        "comment_body": "I'm not sure I understand your comment. Can you clarify what you mean?",
        "pr_file_module": null
      },
      {
        "comment_id": "2189963542",
        "repo_full_name": "apache/kafka",
        "pr_number": 20097,
        "pr_file": "group-coordinator/src/main/java/org/apache/kafka/coordinator/group/streams/TopologyMetadata.java",
        "discussion_id": "2185381222",
        "commented_code": "@@ -36,7 +36,7 @@\n public record TopologyMetadata(MetadataImage metadataImage, SortedMap<String, ConfiguredSubtopology> subtopologyMap) implements TopologyDescriber {\n \n     public TopologyMetadata {\n-        metadataImage = Objects.requireNonNull(metadataImage);\n+        Objects.requireNonNull(metadataImage);\n         subtopologyMap = Objects.requireNonNull(Collections.unmodifiableSortedMap(subtopologyMap));",
        "comment_created_at": "2025-07-07T12:40:45+00:00",
        "comment_author": "Yunyung",
        "comment_body": "If the passed `subtopologyMap` is null\r\nCurrent: Collections.unmodifiableSortedMap throws NPE (so Objects.requireNonNull never takes effect).\r\nAfter: Objects.requireNonNull throws NPE.\r\n\r\nAlso, this results in a different stack trace if NPE.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1912152006",
    "pr_number": 17870,
    "pr_file": "share/src/test/java/org/apache/kafka/server/share/fetch/PartitionMaxBytesStrategyTest.java",
    "created_at": "2025-01-11T18:38:53+00:00",
    "commented_code": "+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.server.share.fetch;\n+\n+import org.apache.kafka.common.TopicIdPartition;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.Uuid;\n+import org.apache.kafka.server.share.fetch.PartitionMaxBytesStrategy.StrategyType;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class PartitionMaxBytesStrategyTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        assertThrows(IllegalArgumentException.class, () -> PartitionMaxBytesStrategy.type(null));\n+        assertDoesNotThrow(() -> PartitionMaxBytesStrategy.type(StrategyType.UNIFORM));\n+    }\n+\n+    @Test\n+    public void testCheckValidArguments() {\n+        TopicIdPartition topicIdPartition1 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic1\", 0));\n+        TopicIdPartition topicIdPartition2 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic1\", 1));\n+        TopicIdPartition topicIdPartition3 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic2\", 0));\n+        Set<TopicIdPartition> partitions = new LinkedHashSet<>();\n+        partitions.add(topicIdPartition1);\n+        partitions.add(topicIdPartition2);\n+        partitions.add(topicIdPartition3);\n+\n+        // acquired partitions size is 0.\n+        assertThrows(IllegalArgumentException.class, () -> PartitionMaxBytesStrategy.checkValidArguments(\n+            100, partitions, 0));\n+        // empty partitions set.",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "1912152006",
        "repo_full_name": "apache/kafka",
        "pr_number": 17870,
        "pr_file": "share/src/test/java/org/apache/kafka/server/share/fetch/PartitionMaxBytesStrategyTest.java",
        "discussion_id": "1912152006",
        "commented_code": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.server.share.fetch;\n+\n+import org.apache.kafka.common.TopicIdPartition;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.Uuid;\n+import org.apache.kafka.server.share.fetch.PartitionMaxBytesStrategy.StrategyType;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class PartitionMaxBytesStrategyTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        assertThrows(IllegalArgumentException.class, () -> PartitionMaxBytesStrategy.type(null));\n+        assertDoesNotThrow(() -> PartitionMaxBytesStrategy.type(StrategyType.UNIFORM));\n+    }\n+\n+    @Test\n+    public void testCheckValidArguments() {\n+        TopicIdPartition topicIdPartition1 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic1\", 0));\n+        TopicIdPartition topicIdPartition2 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic1\", 1));\n+        TopicIdPartition topicIdPartition3 = new TopicIdPartition(Uuid.randomUuid(), new TopicPartition(\"topic2\", 0));\n+        Set<TopicIdPartition> partitions = new LinkedHashSet<>();\n+        partitions.add(topicIdPartition1);\n+        partitions.add(topicIdPartition2);\n+        partitions.add(topicIdPartition3);\n+\n+        // acquired partitions size is 0.\n+        assertThrows(IllegalArgumentException.class, () -> PartitionMaxBytesStrategy.checkValidArguments(\n+            100, partitions, 0));\n+        // empty partitions set.",
        "comment_created_at": "2025-01-11T18:38:53+00:00",
        "comment_author": "apoorvmittal10",
        "comment_body": "Can you add another assert throws for null topicIdPartition as argument to method?",
        "pr_file_module": null
      }
    ]
  }
]