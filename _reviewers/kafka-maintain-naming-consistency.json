[
  {
    "discussion_id": "2169778933",
    "pr_number": 20024,
    "pr_file": "core/src/test/scala/unit/kafka/server/TxnOffsetCommitRequestTest.scala",
    "created_at": "2025-06-26T19:09:46+00:00",
    "commented_code": "testTxnOffsetCommit(false)\n   }\n \n+  @ClusterTest\n+  def testDelayedTxnOffsetCommitWithBumpedEpochIsRejectedWithOldConsumerGroupProtocol(): Unit = {\n+    testDelayedTxnOffsetCommitWithBumpedEpochIsRejected(true)",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2169778933",
        "repo_full_name": "apache/kafka",
        "pr_number": 20024,
        "pr_file": "core/src/test/scala/unit/kafka/server/TxnOffsetCommitRequestTest.scala",
        "discussion_id": "2169778933",
        "commented_code": "@@ -51,6 +51,16 @@ class TxnOffsetCommitRequestTest(cluster:ClusterInstance) extends GroupCoordinat\n     testTxnOffsetCommit(false)\n   }\n \n+  @ClusterTest\n+  def testDelayedTxnOffsetCommitWithBumpedEpochIsRejectedWithOldConsumerGroupProtocol(): Unit = {\n+    testDelayedTxnOffsetCommitWithBumpedEpochIsRejected(true)",
        "comment_created_at": "2025-06-26T19:09:46+00:00",
        "comment_author": "chia7712",
        "comment_body": "According to the naming, it should pass `false` instead of `true`, shouldn't it?",
        "pr_file_module": null
      },
      {
        "comment_id": "2171295436",
        "repo_full_name": "apache/kafka",
        "pr_number": 20024,
        "pr_file": "core/src/test/scala/unit/kafka/server/TxnOffsetCommitRequestTest.scala",
        "discussion_id": "2169778933",
        "commented_code": "@@ -51,6 +51,16 @@ class TxnOffsetCommitRequestTest(cluster:ClusterInstance) extends GroupCoordinat\n     testTxnOffsetCommit(false)\n   }\n \n+  @ClusterTest\n+  def testDelayedTxnOffsetCommitWithBumpedEpochIsRejectedWithOldConsumerGroupProtocol(): Unit = {\n+    testDelayedTxnOffsetCommitWithBumpedEpochIsRejected(true)",
        "comment_created_at": "2025-06-27T08:54:53+00:00",
        "comment_author": "frankvicky",
        "comment_body": "+1",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2202026091",
    "pr_number": 20024,
    "pr_file": "core/src/test/scala/unit/kafka/server/GroupCoordinatorBaseRequestTest.scala",
    "created_at": "2025-07-11T22:53:23+00:00",
    "commented_code": "groupResponse\n   }\n \n+  protected def fetchOffset(\n+    topic: String,\n+    partition: Int,\n+    groupId: String",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2202026091",
        "repo_full_name": "apache/kafka",
        "pr_number": 20024,
        "pr_file": "core/src/test/scala/unit/kafka/server/GroupCoordinatorBaseRequestTest.scala",
        "discussion_id": "2202026091",
        "commented_code": "@@ -421,6 +452,27 @@ class GroupCoordinatorBaseRequestTest(cluster: ClusterInstance) {\n     groupResponse\n   }\n \n+  protected def fetchOffset(\n+    topic: String,\n+    partition: Int,\n+    groupId: String",
        "comment_created_at": "2025-07-11T22:53:23+00:00",
        "comment_author": "squah-confluent",
        "comment_body": "nit: The other methods in this class put the groupId as the first parameter. Could we re-order the parameters for consistency?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2108058643",
    "pr_number": 19793,
    "pr_file": "core/src/test/scala/kafka/server/LocalLeaderEndPointTest.scala",
    "created_at": "2025-05-27T02:57:48+00:00",
    "commented_code": "origin: AppendOrigin = AppendOrigin.CLIENT,\n                             requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n-    def appendCallback(responses: scala.collection.Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(partition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: java.util.Map[TopicIdPartition, PartitionResponse]): Unit = {",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2108058643",
        "repo_full_name": "apache/kafka",
        "pr_number": 19793,
        "pr_file": "core/src/test/scala/kafka/server/LocalLeaderEndPointTest.scala",
        "discussion_id": "2108058643",
        "commented_code": "@@ -271,9 +271,10 @@ class LocalLeaderEndPointTest extends Logging {\n                             origin: AppendOrigin = AppendOrigin.CLIENT,\n                             requiredAcks: Short = -1): CallbackResult[PartitionResponse] = {\n     val result = new CallbackResult[PartitionResponse]()\n-    def appendCallback(responses: scala.collection.Map[TopicIdPartition, PartitionResponse]): Unit = {\n-      val response = responses.get(partition)\n-      assertTrue(response.isDefined)\n+    def appendCallback(responses: java.util.Map[TopicIdPartition, PartitionResponse]): Unit = {",
        "comment_created_at": "2025-05-27T02:57:48+00:00",
        "comment_author": "frankvicky",
        "comment_body": "Given that we already have an import alias for `java.util.Map`, we could reuse it.\r\n```suggestion\r\n    def appendCallback(responses: JMap[TopicIdPartition, PartitionResponse]): Unit = {\r\n```",
        "pr_file_module": null
      }
    ]
  }
]