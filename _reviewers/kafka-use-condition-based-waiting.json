[
  {
    "discussion_id": "2175335108",
    "pr_number": 20068,
    "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
    "created_at": "2025-06-30T15:18:53+00:00",
    "commented_code": "TestUtils.assertLeader(client, partition2, 0)\n \n     // Now change the preferred leader to 1\n+    Thread.sleep(1000)",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2175335108",
        "repo_full_name": "apache/kafka",
        "pr_number": 20068,
        "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
        "discussion_id": "2175335108",
        "commented_code": "@@ -2909,6 +2909,7 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n     TestUtils.assertLeader(client, partition2, 0)\n \n     // Now change the preferred leader to 1\n+    Thread.sleep(1000)",
        "comment_created_at": "2025-06-30T15:18:53+00:00",
        "comment_author": "chia7712",
        "comment_body": "Could you please use \"wait for condition\" instead of time-based waiting? ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2193889425",
    "pr_number": 20068,
    "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
    "created_at": "2025-07-09T02:41:29+00:00",
    "commented_code": "val partition2 = new TopicPartition(\"elect-preferred-leaders-topic-2\", 0)\n     createTopicWithAssignment(partition2.topic, Map[Int, Seq[Int]](partition2.partition -> prefer0))\n \n+    var prior1 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition1.topic, partition1.partition(), listenerName).get.id()\n+    var prior2 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition2.topic, partition2.partition(), listenerName).get.id()\n+\n+    def sleepMillisToPropagateMetadata(durationMs: Long): Unit = {\n+      TimeUnit.MILLISECONDS.sleep(100)",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2193889425",
        "repo_full_name": "apache/kafka",
        "pr_number": 20068,
        "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
        "discussion_id": "2193889425",
        "commented_code": "@@ -2864,6 +2865,26 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n     val partition2 = new TopicPartition(\"elect-preferred-leaders-topic-2\", 0)\n     createTopicWithAssignment(partition2.topic, Map[Int, Seq[Int]](partition2.partition -> prefer0))\n \n+    var prior1 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition1.topic, partition1.partition(), listenerName).get.id()\n+    var prior2 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition2.topic, partition2.partition(), listenerName).get.id()\n+\n+    def sleepMillisToPropagateMetadata(durationMs: Long): Unit = {\n+      TimeUnit.MILLISECONDS.sleep(100)",
        "comment_created_at": "2025-07-09T02:41:29+00:00",
        "comment_author": "FrankYang0529",
        "comment_body": "In the following `TestUtils.waitUntilTrue`, it already do sleep if the condition is not matched. Do we need `TimeUnit.MILLISECONDS.sleep(100)` here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2194135377",
        "repo_full_name": "apache/kafka",
        "pr_number": 20068,
        "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
        "discussion_id": "2193889425",
        "commented_code": "@@ -2864,6 +2865,26 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n     val partition2 = new TopicPartition(\"elect-preferred-leaders-topic-2\", 0)\n     createTopicWithAssignment(partition2.topic, Map[Int, Seq[Int]](partition2.partition -> prefer0))\n \n+    var prior1 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition1.topic, partition1.partition(), listenerName).get.id()\n+    var prior2 = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition2.topic, partition2.partition(), listenerName).get.id()\n+\n+    def sleepMillisToPropagateMetadata(durationMs: Long): Unit = {\n+      TimeUnit.MILLISECONDS.sleep(100)",
        "comment_created_at": "2025-07-09T06:17:03+00:00",
        "comment_author": "jim0987795064",
        "comment_body": "Hello @FrankYang0529 , I think we can move `TimeUnit.MILLISECONDS.sleep(100) here`.\r\nThank you for pointing out!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2198067365",
    "pr_number": 20068,
    "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
    "created_at": "2025-07-10T15:29:02+00:00",
    "commented_code": "}\n   }\n \n+  def sleepMillisToPropagateMetadata(durationMs: Long, partition: TopicPartition): Unit = {\n+    TimeUnit.MILLISECONDS.sleep(1000)\n+    val prior = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition.topic, partition.partition(), listenerName).get.id()",
    "repo_full_name": "apache/kafka",
    "discussion_comments": [
      {
        "comment_id": "2198067365",
        "repo_full_name": "apache/kafka",
        "pr_number": 20068,
        "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
        "discussion_id": "2198067365",
        "commented_code": "@@ -2850,6 +2851,20 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n     }\n   }\n \n+  def sleepMillisToPropagateMetadata(durationMs: Long, partition: TopicPartition): Unit = {\n+    TimeUnit.MILLISECONDS.sleep(1000)\n+    val prior = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition.topic, partition.partition(), listenerName).get.id()",
        "comment_created_at": "2025-07-10T15:29:02+00:00",
        "comment_author": "m1a2st",
        "comment_body": "Could you add a comment explaining why we need to call sleep here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2202210131",
        "repo_full_name": "apache/kafka",
        "pr_number": 20068,
        "pr_file": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala",
        "discussion_id": "2198067365",
        "commented_code": "@@ -2850,6 +2851,20 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n     }\n   }\n \n+  def sleepMillisToPropagateMetadata(durationMs: Long, partition: TopicPartition): Unit = {\n+    TimeUnit.MILLISECONDS.sleep(1000)\n+    val prior = brokers.head.metadataCache.getPartitionLeaderEndpoint(partition.topic, partition.partition(), listenerName).get.id()",
        "comment_created_at": "2025-07-12T01:01:32+00:00",
        "comment_author": "m1a2st",
        "comment_body": "How can we ensure that the first broker\u2019s metadata is updated after 1000ms?",
        "pr_file_module": null
      }
    ]
  }
]