[
  {
    "discussion_id": "2164708470",
    "pr_number": 842,
    "pr_file": "webview-ui/src/services/mermaidSyntaxFixer.ts",
    "created_at": "2025-06-24T19:05:15+00:00",
    "commented_code": "+import { vscode } from \"@src/utils/vscode\"\n+\n+export interface MermaidFixResult {\n+\tsuccess: boolean\n+\tfixedCode?: string\n+\terror?: string\n+\tattempts?: number\n+}\n+\n+export interface MermaidValidationResult {\n+\tisValid: boolean\n+\terror?: string\n+}\n+\n+/**\n+ * Service for validating and fixing Mermaid syntax using LLM assistance\n+ */\n+export class MermaidSyntaxFixer {\n+\tprivate static readonly MAX_FIX_ATTEMPTS = 2\n+\tprivate static readonly FIX_TIMEOUT = 30000 // 30 seconds\n+\n+\t/**\n+\t * Applies deterministic fixes for common LLM errors before validation\n+\t */\n+\tstatic applyDeterministicFixes(code: string): string {\n+\t\t// Fix HTML entity encoding: --&gt; should be -->\n+\t\treturn code.replace(/--&gt;/g, \"-->\")\n+\t}\n+\n+\t/**\n+\t * Validates Mermaid syntax using the mermaid library\n+\t */\n+\tstatic async validateSyntax(code: string): Promise<MermaidValidationResult> {\n+\t\ttry {\n+\t\t\tconst mermaid = (await import(\"mermaid\")).default\n+\t\t\tawait mermaid.parse(code)\n+\t\t\treturn { isValid: true }\n+\t\t} catch (error) {\n+\t\t\treturn {\n+\t\t\t\tisValid: false,\n+\t\t\t\terror: error instanceof Error ? error.message : \"Unknown syntax error\",\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Requests the LLM to fix the Mermaid syntax via the extension\n+\t */\n+\tprivate static async requestLLMFix(code: string, error: string): Promise<string | null> {",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2164708470",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 842,
        "pr_file": "webview-ui/src/services/mermaidSyntaxFixer.ts",
        "discussion_id": "2164708470",
        "commented_code": "@@ -0,0 +1,135 @@\n+import { vscode } from \"@src/utils/vscode\"\n+\n+export interface MermaidFixResult {\n+\tsuccess: boolean\n+\tfixedCode?: string\n+\terror?: string\n+\tattempts?: number\n+}\n+\n+export interface MermaidValidationResult {\n+\tisValid: boolean\n+\terror?: string\n+}\n+\n+/**\n+ * Service for validating and fixing Mermaid syntax using LLM assistance\n+ */\n+export class MermaidSyntaxFixer {\n+\tprivate static readonly MAX_FIX_ATTEMPTS = 2\n+\tprivate static readonly FIX_TIMEOUT = 30000 // 30 seconds\n+\n+\t/**\n+\t * Applies deterministic fixes for common LLM errors before validation\n+\t */\n+\tstatic applyDeterministicFixes(code: string): string {\n+\t\t// Fix HTML entity encoding: --&gt; should be -->\n+\t\treturn code.replace(/--&gt;/g, \"-->\")\n+\t}\n+\n+\t/**\n+\t * Validates Mermaid syntax using the mermaid library\n+\t */\n+\tstatic async validateSyntax(code: string): Promise<MermaidValidationResult> {\n+\t\ttry {\n+\t\t\tconst mermaid = (await import(\"mermaid\")).default\n+\t\t\tawait mermaid.parse(code)\n+\t\t\treturn { isValid: true }\n+\t\t} catch (error) {\n+\t\t\treturn {\n+\t\t\t\tisValid: false,\n+\t\t\t\terror: error instanceof Error ? error.message : \"Unknown syntax error\",\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Requests the LLM to fix the Mermaid syntax via the extension\n+\t */\n+\tprivate static async requestLLMFix(code: string, error: string): Promise<string | null> {",
        "comment_created_at": "2025-06-24T19:05:15+00:00",
        "comment_author": "chrarnoldus",
        "comment_body": "Why is this async? Does that make sense considering you're returning the promise explicitly?",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2003419932",
    "pr_number": 57,
    "pr_file": "src/extension.ts",
    "created_at": "2025-03-19T14:07:03+00:00",
    "commented_code": "}),\n \t)\n \n+\tif (!context.globalState.get(\"firstInstallCompleted\")) {\n+\t\t// This is the first installation, open the sidebar\n+\t\toutputChannel.appendLine(\"First installation detected, opening Kilo Code sidebar\")\n+\t\t// Use Promise.resolve to ensure we have a proper Promise with catch method\n+\t\tPromise.resolve(vscode.commands.executeCommand(\"kilo-code.SidebarProvider.focus\"))",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2003419932",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 57,
        "pr_file": "src/extension.ts",
        "discussion_id": "2003419932",
        "commented_code": "@@ -60,6 +60,20 @@ export function activate(context: vscode.ExtensionContext) {\n \t\t}),\n \t)\n \n+\tif (!context.globalState.get(\"firstInstallCompleted\")) {\n+\t\t// This is the first installation, open the sidebar\n+\t\toutputChannel.appendLine(\"First installation detected, opening Kilo Code sidebar\")\n+\t\t// Use Promise.resolve to ensure we have a proper Promise with catch method\n+\t\tPromise.resolve(vscode.commands.executeCommand(\"kilo-code.SidebarProvider.focus\"))",
        "comment_created_at": "2025-03-19T14:07:03+00:00",
        "comment_author": "kevinvandijk",
        "comment_body": "Can we change this to use `async/await` instead? Makes it easier to read",
        "pr_file_module": null
      },
      {
        "comment_id": "2003466650",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 57,
        "pr_file": "src/extension.ts",
        "discussion_id": "2003419932",
        "commented_code": "@@ -60,6 +60,20 @@ export function activate(context: vscode.ExtensionContext) {\n \t\t}),\n \t)\n \n+\tif (!context.globalState.get(\"firstInstallCompleted\")) {\n+\t\t// This is the first installation, open the sidebar\n+\t\toutputChannel.appendLine(\"First installation detected, opening Kilo Code sidebar\")\n+\t\t// Use Promise.resolve to ensure we have a proper Promise with catch method\n+\t\tPromise.resolve(vscode.commands.executeCommand(\"kilo-code.SidebarProvider.focus\"))",
        "comment_created_at": "2025-03-19T14:24:17+00:00",
        "comment_author": "Juice10",
        "comment_body": "Yes great idea, done",
        "pr_file_module": null
      },
      {
        "comment_id": "2003480479",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 57,
        "pr_file": "src/extension.ts",
        "discussion_id": "2003419932",
        "commented_code": "@@ -60,6 +60,20 @@ export function activate(context: vscode.ExtensionContext) {\n \t\t}),\n \t)\n \n+\tif (!context.globalState.get(\"firstInstallCompleted\")) {\n+\t\t// This is the first installation, open the sidebar\n+\t\toutputChannel.appendLine(\"First installation detected, opening Kilo Code sidebar\")\n+\t\t// Use Promise.resolve to ensure we have a proper Promise with catch method\n+\t\tPromise.resolve(vscode.commands.executeCommand(\"kilo-code.SidebarProvider.focus\"))",
        "comment_created_at": "2025-03-19T14:27:27+00:00",
        "comment_author": "janpaul123",
        "comment_body": "Hm, not a huge fan of how this changes `export function activate` to now return a `Promise`, implying that we should wait for it to finish. For this reason I like the original version better.",
        "pr_file_module": null
      },
      {
        "comment_id": "2003480671",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 57,
        "pr_file": "src/extension.ts",
        "discussion_id": "2003419932",
        "commented_code": "@@ -60,6 +60,20 @@ export function activate(context: vscode.ExtensionContext) {\n \t\t}),\n \t)\n \n+\tif (!context.globalState.get(\"firstInstallCompleted\")) {\n+\t\t// This is the first installation, open the sidebar\n+\t\toutputChannel.appendLine(\"First installation detected, opening Kilo Code sidebar\")\n+\t\t// Use Promise.resolve to ensure we have a proper Promise with catch method\n+\t\tPromise.resolve(vscode.commands.executeCommand(\"kilo-code.SidebarProvider.focus\"))",
        "comment_created_at": "2025-03-19T14:27:32+00:00",
        "comment_author": "janpaul123",
        "comment_body": "#nitpick though",
        "pr_file_module": null
      }
    ]
  }
]