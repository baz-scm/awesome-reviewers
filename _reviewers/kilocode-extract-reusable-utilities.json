[
  {
    "discussion_id": "2235966921",
    "pr_number": 1428,
    "pr_file": "src/core/prompts/system.ts",
    "created_at": "2025-07-28T11:24:39+00:00",
    "commented_code": "return component\n }\n \n+// Helper function to generate morph instructions when available\n+function getMorphInstructions(cwd: string, supportsComputerUse: boolean, settings?: Record<string, any>): string {",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2235966921",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1428,
        "pr_file": "src/core/prompts/system.ts",
        "discussion_id": "2235966921",
        "commented_code": "@@ -40,6 +40,17 @@ export function getPromptComponent(\n \treturn component\n }\n \n+// Helper function to generate morph instructions when available\n+function getMorphInstructions(cwd: string, supportsComputerUse: boolean, settings?: Record<string, any>): string {",
        "comment_created_at": "2025-07-28T11:24:39+00:00",
        "comment_author": "chrarnoldus",
        "comment_body": "Please move this to a separate file (to reduce the likelihood of merge conflicts). That goes for all functions added.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135726531",
    "pr_number": 616,
    "pr_file": "src/integrations/misc/extract-text.ts",
    "created_at": "2025-06-09T13:28:37+00:00",
    "commented_code": "return curLine\n }\n+\n+// kilocode_change start\n+/**\n+ * Helper function used to load file(s) and format them into a string\n+ */\n+export async function processFilesIntoText(files: string[]): Promise<string> {",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2135726531",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 616,
        "pr_file": "src/integrations/misc/extract-text.ts",
        "discussion_id": "2135726531",
        "commented_code": "@@ -411,3 +411,35 @@ function processLineWithCarriageReturns(\n \n \treturn curLine\n }\n+\n+// kilocode_change start\n+/**\n+ * Helper function used to load file(s) and format them into a string\n+ */\n+export async function processFilesIntoText(files: string[]): Promise<string> {",
        "comment_created_at": "2025-06-09T13:28:37+00:00",
        "comment_author": "hassoncs",
        "comment_body": "maybe we could put this entire thing in its own file to avoid potential conflicts down the road",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2136179984",
    "pr_number": 616,
    "pr_file": "src/core/webview/webviewMessageHandler.ts",
    "created_at": "2025-06-09T17:42:51+00:00",
    "commented_code": "import { Package } from \"../../shared/package\"\n import { RouterName, toRouterName, ModelRecord } from \"../../shared/api\"\n import { supportPrompt } from \"../../shared/support-prompt\"\n-\n import { checkoutDiffPayloadSchema, checkoutRestorePayloadSchema, WebviewMessage } from \"../../shared/WebviewMessage\"\n import { checkExistKey } from \"../../shared/checkExistApiConfig\"\n import { experimentDefault } from \"../../shared/experiments\"\n import { Terminal } from \"../../integrations/terminal/Terminal\"\n import { openFile, openImage } from \"../../integrations/misc/open-file\"\n-import { selectImages } from \"../../integrations/misc/process-images\"\n+import { selectFiles } from \"../../integrations/misc/process-files\"",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2136179984",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 616,
        "pr_file": "src/core/webview/webviewMessageHandler.ts",
        "discussion_id": "2136179984",
        "commented_code": "@@ -13,13 +13,12 @@ import { changeLanguage, t } from \"../../i18n\"\n import { Package } from \"../../shared/package\"\n import { RouterName, toRouterName, ModelRecord } from \"../../shared/api\"\n import { supportPrompt } from \"../../shared/support-prompt\"\n-\n import { checkoutDiffPayloadSchema, checkoutRestorePayloadSchema, WebviewMessage } from \"../../shared/WebviewMessage\"\n import { checkExistKey } from \"../../shared/checkExistApiConfig\"\n import { experimentDefault } from \"../../shared/experiments\"\n import { Terminal } from \"../../integrations/terminal/Terminal\"\n import { openFile, openImage } from \"../../integrations/misc/open-file\"\n-import { selectImages } from \"../../integrations/misc/process-images\"\n+import { selectFiles } from \"../../integrations/misc/process-files\"",
        "comment_created_at": "2025-06-09T17:42:51+00:00",
        "comment_author": "hassoncs",
        "comment_body": "maybe put this in its own file to avoid the conflict",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192775986",
    "pr_number": 1171,
    "pr_file": "src/services/ghost/GhostStrategy.ts",
    "created_at": "2025-07-08T15:05:22+00:00",
    "commented_code": "+import * as vscode from \"vscode\"\n+import { parsePatch } from \"diff\"\n+\n+export class GhostStrategy {",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2192775986",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1171,
        "pr_file": "src/services/ghost/GhostStrategy.ts",
        "discussion_id": "2192775986",
        "commented_code": "@@ -0,0 +1,181 @@\n+import * as vscode from \"vscode\"\n+import { parsePatch } from \"diff\"\n+\n+export class GhostStrategy {",
        "comment_created_at": "2025-07-08T15:05:22+00:00",
        "comment_author": "hassoncs",
        "comment_body": "I like the strategy structure with prompt + parsing together. would be nice to util-ify this",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2192786145",
    "pr_number": 1171,
    "pr_file": "src/services/ghost/GhostModel.ts",
    "created_at": "2025-07-08T15:08:22+00:00",
    "commented_code": "+import { ApiHandler, buildApiHandler } from \"../../api\"\n+import { ContextProxy } from \"../../core/config/ContextProxy\"\n+\n+export class GhostModel {\n+\tprivate apiHandler: ApiHandler | null = null\n+\tprivate modelName: string = \"google/gemini-2.5-flash-preview-05-20\"\n+\n+\tconstructor() {\n+\t\tconst kilocodeToken = ContextProxy.instance.getProviderSettings().kilocodeToken\n+\n+\t\tif (kilocodeToken) {\n+\t\t\tthis.apiHandler = buildApiHandler({\n+\t\t\t\tapiProvider: \"kilocode\",\n+\t\t\t\tkilocodeToken,\n+\t\t\t\tkilocodeModel: this.modelName,\n+\t\t\t})\n+\t\t}\n+\t}\n+\n+\tpublic async generateResponse(systemPrompt: string, userPrompt: string) {\n+\t\tif (!this.apiHandler) {\n+\t\t\tthrow new Error(\"API handler is not initialized. Please check your configuration.\")\n+\t\t}\n+\n+\t\tconst stream = this.apiHandler.createMessage(systemPrompt, [\n+\t\t\t{ role: \"user\", content: [{ type: \"text\", text: userPrompt }] },\n+\t\t])\n+\n+\t\tlet response: string = \"\"\n+\t\tlet completionCost = 0\n+\t\ttry {\n+\t\t\tfor await (const chunk of stream) {\n+\t\t\t\tif (chunk.type === \"text\") {\n+\t\t\t\t\tresponse += chunk.text\n+\t\t\t\t} else if (chunk.type === \"usage\") {\n+\t\t\t\t\tcompletionCost = chunk.totalCost ?? 0\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (error) {\n+\t\t\tconsole.error(\"Error streaming completion:\", error)\n+\t\t\tresponse = \"\"\n+\t\t}",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2192786145",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1171,
        "pr_file": "src/services/ghost/GhostModel.ts",
        "discussion_id": "2192786145",
        "commented_code": "@@ -0,0 +1,46 @@\n+import { ApiHandler, buildApiHandler } from \"../../api\"\n+import { ContextProxy } from \"../../core/config/ContextProxy\"\n+\n+export class GhostModel {\n+\tprivate apiHandler: ApiHandler | null = null\n+\tprivate modelName: string = \"google/gemini-2.5-flash-preview-05-20\"\n+\n+\tconstructor() {\n+\t\tconst kilocodeToken = ContextProxy.instance.getProviderSettings().kilocodeToken\n+\n+\t\tif (kilocodeToken) {\n+\t\t\tthis.apiHandler = buildApiHandler({\n+\t\t\t\tapiProvider: \"kilocode\",\n+\t\t\t\tkilocodeToken,\n+\t\t\t\tkilocodeModel: this.modelName,\n+\t\t\t})\n+\t\t}\n+\t}\n+\n+\tpublic async generateResponse(systemPrompt: string, userPrompt: string) {\n+\t\tif (!this.apiHandler) {\n+\t\t\tthrow new Error(\"API handler is not initialized. Please check your configuration.\")\n+\t\t}\n+\n+\t\tconst stream = this.apiHandler.createMessage(systemPrompt, [\n+\t\t\t{ role: \"user\", content: [{ type: \"text\", text: userPrompt }] },\n+\t\t])\n+\n+\t\tlet response: string = \"\"\n+\t\tlet completionCost = 0\n+\t\ttry {\n+\t\t\tfor await (const chunk of stream) {\n+\t\t\t\tif (chunk.type === \"text\") {\n+\t\t\t\t\tresponse += chunk.text\n+\t\t\t\t} else if (chunk.type === \"usage\") {\n+\t\t\t\t\tcompletionCost = chunk.totalCost ?? 0\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (error) {\n+\t\t\tconsole.error(\"Error streaming completion:\", error)\n+\t\t\tresponse = \"\"\n+\t\t}",
        "comment_created_at": "2025-07-08T15:08:22+00:00",
        "comment_author": "hassoncs",
        "comment_body": "we have this logic in a bunch of spots now. it'd be nice to move to some util",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2111523720",
    "pr_number": 446,
    "pr_file": "repo-mcp-server/src/tools/index.ts",
    "created_at": "2025-05-28T10:35:57+00:00",
    "commented_code": "+import { ToolHandler } from \"./types.js\"\n+import { i18nTools } from \"./i18n/index.js\"\n+\n+const allTools: ToolHandler[] = [...i18nTools]\n+\n+export function getAllTools(): ToolHandler[] {\n+\treturn allTools\n+}\n+\n+export function getToolByName(name: string): ToolHandler | undefined {\n+\treturn allTools.find((tool) => tool.name === name)\n+}",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2111523720",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 446,
        "pr_file": "repo-mcp-server/src/tools/index.ts",
        "discussion_id": "2111523720",
        "commented_code": "@@ -0,0 +1,14 @@\n+import { ToolHandler } from \"./types.js\"\n+import { i18nTools } from \"./i18n/index.js\"\n+\n+const allTools: ToolHandler[] = [...i18nTools]\n+\n+export function getAllTools(): ToolHandler[] {\n+\treturn allTools\n+}\n+\n+export function getToolByName(name: string): ToolHandler | undefined {\n+\treturn allTools.find((tool) => tool.name === name)\n+}",
        "comment_created_at": "2025-05-28T10:35:57+00:00",
        "comment_author": "EamonNerbonne",
        "comment_body": "\r\nI'm for deleting this file.  if we ever have more mcp tools, we an make the array in index.ts directly; there's really not much point in this extra indirection - and we don't even use it at all right now, because there is just 1 tool.",
        "pr_file_module": null
      }
    ]
  }
]