[
  {
    "discussion_id": "2277863744",
    "pr_number": 1947,
    "pr_file": "src/api/providers/kilocode/getKilocodeDefaultModel.ts",
    "created_at": "2025-08-14T22:43:21+00:00",
    "commented_code": "+import { openRouterDefaultModelId } from \"@roo-code/types\"\n+import { getKiloBaseUriFromToken } from \"../../../shared/kilocode/token\"\n+import { TelemetryService } from \"@roo-code/telemetry\"\n+import { z } from \"zod\"\n+import { fetchWithTimeout } from \"./fetchWithTimeout\"\n+\n+const cache = new Map<string, Promise<string>>()",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2277863744",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1947,
        "pr_file": "src/api/providers/kilocode/getKilocodeDefaultModel.ts",
        "discussion_id": "2277863744",
        "commented_code": "@@ -0,0 +1,52 @@\n+import { openRouterDefaultModelId } from \"@roo-code/types\"\n+import { getKiloBaseUriFromToken } from \"../../../shared/kilocode/token\"\n+import { TelemetryService } from \"@roo-code/telemetry\"\n+import { z } from \"zod\"\n+import { fetchWithTimeout } from \"./fetchWithTimeout\"\n+\n+const cache = new Map<string, Promise<string>>()",
        "comment_created_at": "2025-08-14T22:43:21+00:00",
        "comment_author": "hassoncs",
        "comment_body": "Maybe leave a quick comment here about why we cache based on `kilocodeToken`, or that the `string` here is a `kilocodeToken`",
        "pr_file_module": null
      },
      {
        "comment_id": "2278415307",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1947,
        "pr_file": "src/api/providers/kilocode/getKilocodeDefaultModel.ts",
        "discussion_id": "2277863744",
        "commented_code": "@@ -0,0 +1,52 @@\n+import { openRouterDefaultModelId } from \"@roo-code/types\"\n+import { getKiloBaseUriFromToken } from \"../../../shared/kilocode/token\"\n+import { TelemetryService } from \"@roo-code/telemetry\"\n+import { z } from \"zod\"\n+import { fetchWithTimeout } from \"./fetchWithTimeout\"\n+\n+const cache = new Map<string, Promise<string>>()",
        "comment_created_at": "2025-08-15T06:52:26+00:00",
        "comment_author": "markijbema",
        "comment_body": "we might consider making a type even to make it clearer, `{ kilocodeToken: string }` called `KilocodeToken` and have it be typesafe if we do this a lot (not sure if it's worth it for this case) ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2244889887",
    "pr_number": 1628,
    "pr_file": "src/core/assistant-message/presentAssistantMessage.ts",
    "created_at": "2025-07-31T09:45:18+00:00",
    "commented_code": "return `[${block.name} for '${block.params.path}']`\n \t\t\t\t\tcase \"search_and_replace\":\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n+\t\t\t\t\t// kilocode_change start: Morph fast apply\n+\t\t\t\t\tcase \"edit_file\":",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2244889887",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1628,
        "pr_file": "src/core/assistant-message/presentAssistantMessage.ts",
        "discussion_id": "2244889887",
        "commented_code": "@@ -194,6 +195,10 @@ export async function presentAssistantMessage(cline: Task, recursionDepth: numbe\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n \t\t\t\t\tcase \"search_and_replace\":\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n+\t\t\t\t\t// kilocode_change start: Morph fast apply\n+\t\t\t\t\tcase \"edit_file\":",
        "comment_created_at": "2025-07-31T09:45:18+00:00",
        "comment_author": "hassoncs",
        "comment_body": "This seems like a really generic name for a fairly specific tool",
        "pr_file_module": null
      },
      {
        "comment_id": "2244934474",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1628,
        "pr_file": "src/core/assistant-message/presentAssistantMessage.ts",
        "discussion_id": "2244889887",
        "commented_code": "@@ -194,6 +195,10 @@ export async function presentAssistantMessage(cline: Task, recursionDepth: numbe\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n \t\t\t\t\tcase \"search_and_replace\":\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n+\t\t\t\t\t// kilocode_change start: Morph fast apply\n+\t\t\t\t\tcase \"edit_file\":",
        "comment_created_at": "2025-07-31T10:04:23+00:00",
        "comment_author": "chrarnoldus",
        "comment_body": "I feel the same way, although perhaps there's a future where we support multiple models here?",
        "pr_file_module": null
      },
      {
        "comment_id": "2246047893",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1628,
        "pr_file": "src/core/assistant-message/presentAssistantMessage.ts",
        "discussion_id": "2244889887",
        "commented_code": "@@ -194,6 +195,10 @@ export async function presentAssistantMessage(cline: Task, recursionDepth: numbe\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n \t\t\t\t\tcase \"search_and_replace\":\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n+\t\t\t\t\t// kilocode_change start: Morph fast apply\n+\t\t\t\t\tcase \"edit_file\":",
        "comment_created_at": "2025-07-31T18:01:26+00:00",
        "comment_author": "bhaktatejas922",
        "comment_body": "the motivation for the name was to make it clear to the model what it does. Maybe something like fast_edit_file or morph_edit_file? ",
        "pr_file_module": null
      },
      {
        "comment_id": "2246181005",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1628,
        "pr_file": "src/core/assistant-message/presentAssistantMessage.ts",
        "discussion_id": "2244889887",
        "commented_code": "@@ -194,6 +195,10 @@ export async function presentAssistantMessage(cline: Task, recursionDepth: numbe\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n \t\t\t\t\tcase \"search_and_replace\":\n \t\t\t\t\t\treturn `[${block.name} for '${block.params.path}']`\n+\t\t\t\t\t// kilocode_change start: Morph fast apply\n+\t\t\t\t\tcase \"edit_file\":",
        "comment_created_at": "2025-07-31T19:09:01+00:00",
        "comment_author": "chrarnoldus",
        "comment_body": "Simpler is probably better for many models.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2135725404",
    "pr_number": 616,
    "pr_file": "src/extension/api.ts",
    "created_at": "2025-06-09T13:27:57+00:00",
    "commented_code": "configuration,\n \t\ttext,\n \t\timages,\n+\t\tfiles,\n \t\tnewTab,\n \t}: {\n \t\tconfiguration: RooCodeSettings\n \t\ttext?: string\n \t\timages?: string[]\n+\t\tfiles?: string[]",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2135725404",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 616,
        "pr_file": "src/extension/api.ts",
        "discussion_id": "2135725404",
        "commented_code": "@@ -96,11 +96,13 @@ export class API extends EventEmitter<RooCodeEvents> implements RooCodeAPI {\n \t\tconfiguration,\n \t\ttext,\n \t\timages,\n+\t\tfiles,\n \t\tnewTab,\n \t}: {\n \t\tconfiguration: RooCodeSettings\n \t\ttext?: string\n \t\timages?: string[]\n+\t\tfiles?: string[]",
        "comment_created_at": "2025-06-09T13:27:57+00:00",
        "comment_author": "hassoncs",
        "comment_body": "maybe name filePaths here too? I like it better than just \"files\" so you know it's either the path to the file or the file itself",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2205671639",
    "pr_number": 1304,
    "pr_file": "src/services/ghost/GhostSuggestions.ts",
    "created_at": "2025-07-14T19:41:29+00:00",
    "commented_code": "+import * as vscode from \"vscode\"\n+import { GhostSuggestionEditOperation } from \"./types\"\n+\n+class GhostSuggestionFile {\n+\tpublic fileUri: vscode.Uri\n+\tprivate selectedGroup: number | null = null",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2205671639",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 1304,
        "pr_file": "src/services/ghost/GhostSuggestions.ts",
        "discussion_id": "2205671639",
        "commented_code": "@@ -0,0 +1,136 @@\n+import * as vscode from \"vscode\"\n+import { GhostSuggestionEditOperation } from \"./types\"\n+\n+class GhostSuggestionFile {\n+\tpublic fileUri: vscode.Uri\n+\tprivate selectedGroup: number | null = null",
        "comment_created_at": "2025-07-14T19:41:29+00:00",
        "comment_author": "hassoncs",
        "comment_body": "#nit rename `selectedGroupIndex`",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2157021458",
    "pr_number": 769,
    "pr_file": "webview-ui/src/utils/timeline/taskTimelineTypeRegistry.ts",
    "created_at": "2025-06-19T13:27:37+00:00",
    "commented_code": "+import type { ClineMessage } from \"@roo-code/types\"\n+\n+export interface TaskTimelineMessageTypeConfig {\n+\tcolor: string\n+\ttranslationKey: string\n+}\n+\n+const taskTimelineColorsByType = {\n+\tUSER_INTERACTION: \"bg-[var(--vscode-chat-editedFileForeground)]\", // Tan/orange for all 'ask' types\n+\tSYSTEM_READ: \"bg-[var(--vscode-textLink-foreground)]\", // Light blue for file reads\n+\tSYSTEM_WRITE: \"bg-[var(--vscode-focusBorder)]\", // Dark blue for file writes\n+\tSYSTEM_GENERAL_TOOL: \"bg-[var(--vscode-activityBarBadge-background)]\", // Blue for browser/server tools\n+\tSUCCESS: \"bg-[var(--vscode-editorGutter-addedBackground)]\", // Green for success\n+\tERROR: \"bg-[var(--vscode-errorForeground)]\", // Red for errors\n+\tASSISTANT_MUTTERING: \"bg-[var(--vscode-descriptionForeground)]\", // Gray for reasoning/text\n+\tGROUPED: \"bg-[var(--vscode-textLink-activeForeground)]\", // Cyan for grouped messages\n+\tDEFAULT: \"bg-[var(--vscode-badge-background)]\", // Fallback gray\n+}\n+\n+/**\n+ * Registry of message types that should be shown in the task timeline.\n+ * If a message type is not in this registry, it will be filtered out.\n+ * This serves as the single source of truth for task timeline message configuration.\n+ */\n+export const TASK_TIMELINE_MESSAGE_TYPES: Record<string, TaskTimelineMessageTypeConfig> = {\n+\t// Ask types that should be shown (everything except the filtered ones)\n+\t\"ask:tool\": {\n+\t\tcolor: taskTimelineColorsByType.SYSTEM_GENERAL_TOOL,\n+\t\ttranslationKey: \"tool\",",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2157021458",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 769,
        "pr_file": "webview-ui/src/utils/timeline/taskTimelineTypeRegistry.ts",
        "discussion_id": "2157021458",
        "commented_code": "@@ -0,0 +1,184 @@\n+import type { ClineMessage } from \"@roo-code/types\"\n+\n+export interface TaskTimelineMessageTypeConfig {\n+\tcolor: string\n+\ttranslationKey: string\n+}\n+\n+const taskTimelineColorsByType = {\n+\tUSER_INTERACTION: \"bg-[var(--vscode-chat-editedFileForeground)]\", // Tan/orange for all 'ask' types\n+\tSYSTEM_READ: \"bg-[var(--vscode-textLink-foreground)]\", // Light blue for file reads\n+\tSYSTEM_WRITE: \"bg-[var(--vscode-focusBorder)]\", // Dark blue for file writes\n+\tSYSTEM_GENERAL_TOOL: \"bg-[var(--vscode-activityBarBadge-background)]\", // Blue for browser/server tools\n+\tSUCCESS: \"bg-[var(--vscode-editorGutter-addedBackground)]\", // Green for success\n+\tERROR: \"bg-[var(--vscode-errorForeground)]\", // Red for errors\n+\tASSISTANT_MUTTERING: \"bg-[var(--vscode-descriptionForeground)]\", // Gray for reasoning/text\n+\tGROUPED: \"bg-[var(--vscode-textLink-activeForeground)]\", // Cyan for grouped messages\n+\tDEFAULT: \"bg-[var(--vscode-badge-background)]\", // Fallback gray\n+}\n+\n+/**\n+ * Registry of message types that should be shown in the task timeline.\n+ * If a message type is not in this registry, it will be filtered out.\n+ * This serves as the single source of truth for task timeline message configuration.\n+ */\n+export const TASK_TIMELINE_MESSAGE_TYPES: Record<string, TaskTimelineMessageTypeConfig> = {\n+\t// Ask types that should be shown (everything except the filtered ones)\n+\t\"ask:tool\": {\n+\t\tcolor: taskTimelineColorsByType.SYSTEM_GENERAL_TOOL,\n+\t\ttranslationKey: \"tool\",",
        "comment_created_at": "2025-06-19T13:27:37+00:00",
        "comment_author": "chrarnoldus",
        "comment_body": "Maybe it makes sense to have the entire key here and not just the suffix? Would make it easier to find the keys if you're interested in where a particular string is used.",
        "pr_file_module": null
      },
      {
        "comment_id": "2157391434",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 769,
        "pr_file": "webview-ui/src/utils/timeline/taskTimelineTypeRegistry.ts",
        "discussion_id": "2157021458",
        "commented_code": "@@ -0,0 +1,184 @@\n+import type { ClineMessage } from \"@roo-code/types\"\n+\n+export interface TaskTimelineMessageTypeConfig {\n+\tcolor: string\n+\ttranslationKey: string\n+}\n+\n+const taskTimelineColorsByType = {\n+\tUSER_INTERACTION: \"bg-[var(--vscode-chat-editedFileForeground)]\", // Tan/orange for all 'ask' types\n+\tSYSTEM_READ: \"bg-[var(--vscode-textLink-foreground)]\", // Light blue for file reads\n+\tSYSTEM_WRITE: \"bg-[var(--vscode-focusBorder)]\", // Dark blue for file writes\n+\tSYSTEM_GENERAL_TOOL: \"bg-[var(--vscode-activityBarBadge-background)]\", // Blue for browser/server tools\n+\tSUCCESS: \"bg-[var(--vscode-editorGutter-addedBackground)]\", // Green for success\n+\tERROR: \"bg-[var(--vscode-errorForeground)]\", // Red for errors\n+\tASSISTANT_MUTTERING: \"bg-[var(--vscode-descriptionForeground)]\", // Gray for reasoning/text\n+\tGROUPED: \"bg-[var(--vscode-textLink-activeForeground)]\", // Cyan for grouped messages\n+\tDEFAULT: \"bg-[var(--vscode-badge-background)]\", // Fallback gray\n+}\n+\n+/**\n+ * Registry of message types that should be shown in the task timeline.\n+ * If a message type is not in this registry, it will be filtered out.\n+ * This serves as the single source of truth for task timeline message configuration.\n+ */\n+export const TASK_TIMELINE_MESSAGE_TYPES: Record<string, TaskTimelineMessageTypeConfig> = {\n+\t// Ask types that should be shown (everything except the filtered ones)\n+\t\"ask:tool\": {\n+\t\tcolor: taskTimelineColorsByType.SYSTEM_GENERAL_TOOL,\n+\t\ttranslationKey: \"tool\",",
        "comment_created_at": "2025-06-19T16:46:45+00:00",
        "comment_author": "hassoncs",
        "comment_body": "I had a similar thought! Will do",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "2050535545",
    "pr_number": 225,
    "pr_file": "src/api/providers/kilocode.ts",
    "created_at": "2025-04-18T12:07:23+00:00",
    "commented_code": "}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
    "repo_full_name": "Kilo-Org/kilocode",
    "discussion_comments": [
      {
        "comment_id": "2050535545",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 225,
        "pr_file": "src/api/providers/kilocode.ts",
        "discussion_id": "2050535545",
        "commented_code": "@@ -335,3 +321,16 @@ export class KiloCodeAnthropicHandler extends BaseProvider implements SingleComp\n \t\t}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
        "comment_created_at": "2025-04-18T12:07:23+00:00",
        "comment_author": "kevinvandijk",
        "comment_body": "Pet peeve: can we stick with camelCase convention which is usual for TS/JS functions? Something like `getKiloBaseUri` would be my preference. Will approve already anyway for convenience once build is not breaking anymore but please change it, it now looks like a class",
        "pr_file_module": null
      },
      {
        "comment_id": "2050548917",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 225,
        "pr_file": "src/api/providers/kilocode.ts",
        "discussion_id": "2050535545",
        "commented_code": "@@ -335,3 +321,16 @@ export class KiloCodeAnthropicHandler extends BaseProvider implements SingleComp\n \t\t}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
        "comment_created_at": "2025-04-18T12:25:10+00:00",
        "comment_author": "EamonNerbonne",
        "comment_body": "of course!\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "2050549222",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 225,
        "pr_file": "src/api/providers/kilocode.ts",
        "discussion_id": "2050535545",
        "commented_code": "@@ -335,3 +321,16 @@ export class KiloCodeAnthropicHandler extends BaseProvider implements SingleComp\n \t\t}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
        "comment_created_at": "2025-04-18T12:25:36+00:00",
        "comment_author": "drakonen",
        "comment_body": "i agree, `getKiloBaseUri` should be its name or even better `getKilocodeBaseUri`",
        "pr_file_module": null
      },
      {
        "comment_id": "2050552548",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 225,
        "pr_file": "src/api/providers/kilocode.ts",
        "discussion_id": "2050535545",
        "commented_code": "@@ -335,3 +321,16 @@ export class KiloCodeAnthropicHandler extends BaseProvider implements SingleComp\n \t\t}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
        "comment_created_at": "2025-04-18T12:27:55+00:00",
        "comment_author": "EamonNerbonne",
        "comment_body": "Out of curiosity; I see more get.... functions around; I'm curious why we like that prefix?  Wouldn't conceptually `kiloBaseUri` have the same clarity and just be shorter? Anything with a return value get's something; and I guess I'd kind of hope those kind of generally pure functions are the norm...",
        "pr_file_module": null
      },
      {
        "comment_id": "2050639101",
        "repo_full_name": "Kilo-Org/kilocode",
        "pr_number": 225,
        "pr_file": "src/api/providers/kilocode.ts",
        "discussion_id": "2050535545",
        "commented_code": "@@ -335,3 +321,16 @@ export class KiloCodeAnthropicHandler extends BaseProvider implements SingleComp\n \t\t}\n \t}\n }\n+\n+function KiloBaseUri(options: ApiHandlerOptions) {",
        "comment_created_at": "2025-04-18T13:38:34+00:00",
        "comment_author": "kevinvandijk",
        "comment_body": "My general philosophy is that a function name should describe intent or an action that it will do. `kiloBaseUri` is a bit ambiguous in that sense. Does it create a uri? Does it set it? Does it get it? I don't know by reading the name alone. `kiloBaseUri` would read on first glance to me as a variable containing the uri. It's also just a convention that's used a lot in the TS world afaik so it's nice to stick with that and be consistent. ",
        "pr_file_module": null
      }
    ]
  }
]