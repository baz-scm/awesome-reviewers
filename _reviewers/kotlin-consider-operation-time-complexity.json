[
  {
    "discussion_id": "1151434877",
    "pr_number": 5116,
    "pr_file": "libraries/stdlib/js/src/kotlin/collections/ArrayList.kt",
    "created_at": "2023-03-29T06:09:39+00:00",
    "commented_code": "if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n\n        var i = index\n        elements.forEach { element ->\n            array.asDynamic().splice(i, 0, element)",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "1151434877",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5116,
        "pr_file": "libraries/stdlib/js/src/kotlin/collections/ArrayList.kt",
        "discussion_id": "1151434877",
        "commented_code": "@@ -82,10 +83,11 @@ public actual open class ArrayList<E> internal constructor(private var array: Ar\n \n         if (index == size) return addAll(elements)\n         if (elements.isEmpty()) return false\n-        when (index) {\n-            size -> return addAll(elements)\n-            0 -> array = elements.toTypedArray<Any?>() + array\n-            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n+\n+        var i = index\n+        elements.forEach { element ->\n+            array.asDynamic().splice(i, 0, element)",
        "comment_created_at": "2023-03-29T06:09:39+00:00",
        "comment_author": "ilya-g",
        "comment_body": "Moving array tail on each element insertion would result in quadratic complexity.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1320287309",
    "pr_number": 5174,
    "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/LookupMap.kt",
    "created_at": "2023-09-08T19:54:43+00:00",
    "commented_code": "override fun dumpValue(value: Collection<Int>): String = value.toString()\n\n    fun add(name: String, scope: String, fileId: Int) {\n        storage.append(LookupSymbolKey(name, scope), listOf(fileId))\n        storage.append(LookupSymbolKey(name, scope), fileId)\n    }\n\n    fun append(lookup: LookupSymbolKey, fileIds: Collection<Int>) {\n        storage.append(lookup, fileIds)\n    }\n\n    operator fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]\n    override fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]?.toSet()",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "1320287309",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/LookupMap.kt",
        "discussion_id": "1320287309",
        "commented_code": "@@ -35,23 +35,13 @@ class LookupMap(\n     override fun dumpValue(value: Collection<Int>): String = value.toString()\n \n     fun add(name: String, scope: String, fileId: Int) {\n-        storage.append(LookupSymbolKey(name, scope), listOf(fileId))\n+        storage.append(LookupSymbolKey(name, scope), fileId)\n     }\n \n-    fun append(lookup: LookupSymbolKey, fileIds: Collection<Int>) {\n-        storage.append(lookup, fileIds)\n-    }\n-\n-    operator fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]\n+    override fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]?.toSet()",
        "comment_created_at": "2023-09-08T19:54:43+00:00",
        "comment_author": "ALikhachev",
        "comment_body": "What do you think about making the map values as `Set` in the first place? Now it's declared to be a map of `LookupSymbolKey -> Collection<Int>`, however effectively it is `LookupSymbolKey -> Set<Int>`, we deserialize the values as `List` and then convert the list into a `Set`. Perhaps we could avoid that conversion. On the other side, such a change will make the append logic of `InMemoryStorage` more complex",
        "pr_file_module": null
      },
      {
        "comment_id": "1321592368",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/LookupMap.kt",
        "discussion_id": "1320287309",
        "commented_code": "@@ -35,23 +35,13 @@ class LookupMap(\n     override fun dumpValue(value: Collection<Int>): String = value.toString()\n \n     fun add(name: String, scope: String, fileId: Int) {\n-        storage.append(LookupSymbolKey(name, scope), listOf(fileId))\n+        storage.append(LookupSymbolKey(name, scope), fileId)\n     }\n \n-    fun append(lookup: LookupSymbolKey, fileIds: Collection<Int>) {\n-        storage.append(lookup, fileIds)\n-    }\n-\n-    operator fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]\n+    override fun get(key: LookupSymbolKey): Collection<Int>? = storage[key]?.toSet()",
        "comment_created_at": "2023-09-11T13:51:47+00:00",
        "comment_author": "hungvietnguyen",
        "comment_body": "Yup you’re right. I plan to declare this map as `LookupSymbolKey -> Set<Int>` in the follow-up PR. (This PR focuses on the abstract classes; the next PR will clean up the subclasses – e.g., removing all these overriding methods in the subclasses.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1173660401",
    "pr_number": 5123,
    "pr_file": "compiler/incremental-compilation-impl/src/org/jetbrains/kotlin/incremental/classpathDiff/ClasspathSnapshotter.kt",
    "created_at": "2023-04-21T11:28:08+00:00",
    "commented_code": "/** Creates [ClassSnapshot]s of the given classes. */\n    fun snapshot(\n        classes: List<ClassFileWithContents>,\n        granularity: ClassSnapshotGranularity = CLASS_MEMBER_LEVEL,\n        classes: List<ClassFileWithContentsProvider>,\n        granularity: ClassSnapshotGranularity,\n        metrics: BuildMetricsReporter = DoNothingBuildMetricsReporter\n    ): List<ClassSnapshot> {\n        val classesInfo: List<BasicClassInfo> = metrics.measure(BuildTime.READ_CLASSES_BASIC_INFO) {\n            classes.map { it.classInfo }\n        }\n        val inaccessibleClassesInfo: Set<BasicClassInfo> = metrics.measure(BuildTime.FIND_INACCESSIBLE_CLASSES) {\n            findInaccessibleClasses(classesInfo)\n        }\n        return classes.map {\n            when {\n                it.classInfo in inaccessibleClassesInfo -> InaccessibleClassSnapshot\n                it.classInfo.isKotlinClass -> metrics.measure(BuildTime.SNAPSHOT_KOTLIN_CLASSES) {\n                    snapshotKotlinClass(it, granularity)\n        val classSnapshots = mutableMapOf<ClassFileWithContentsProvider, ClassSnapshot>()\n        val inaccessibleClasses = mutableSetOf<ClassId>()\n\n        // Process the classes in descending order of their relative paths so that outer classes are processed first, which is needed for\n        // detecting transitively inaccessible classes -- see below.\n        // For example, if `com/example/A$B.class` has outer class `com/example/A.class`, we will process `com/example/A.class` first (the\n        // string `com/example/A.class` is higher than `com/example/A$B.class` because `.` is higher than `$`).\n        classes.sortedByDescending { it.classFile.unixStyleRelativePath }.forEach {\n            val clazz = metrics.measure(BuildTime.LOAD_CONTENTS_OF_CLASSES) {\n                it.loadContents()\n            }\n            val classSnapshot = when {\n                // We don't need to snapshot classes that are (directly or transitively) inaccessible.\n                // A class is transitively inaccessible if its outer class is (directly or transitively) inaccessible.\n                // The outer class (if present) should have been processed due to the way we sorted the given classes (see above).\n                //\n                // In the uncommon case that the outer class is not yet processed (i.e., when the outer class's path is not a prefix of this\n                // class's path) or if it can't be found in the given classes (this could happen with faulty jars), then we will not be able\n                // to confirm whether this class is transitively inaccessible. If we try to find and process the outer class on the fly, we\n                // will potentially need to load many more classes, and we will also have to cache them in memory to avoid loading them\n                // twice later, therefore consuming more memory (KT-57757). To keep things simple and avoid KT-57757, we'll just consider\n                // that the class is accessible and snapshot it (it's okay to snapshot more than required, but incorrect to snapshot less).\n                // Note that this case is unlikely to happen anyway.",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "1173660401",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5123,
        "pr_file": "compiler/incremental-compilation-impl/src/org/jetbrains/kotlin/incremental/classpathDiff/ClasspathSnapshotter.kt",
        "discussion_id": "1173660401",
        "commented_code": "@@ -57,26 +63,66 @@ object ClassSnapshotter {\n \n     /** Creates [ClassSnapshot]s of the given classes. */\n     fun snapshot(\n-        classes: List<ClassFileWithContents>,\n-        granularity: ClassSnapshotGranularity = CLASS_MEMBER_LEVEL,\n+        classes: List<ClassFileWithContentsProvider>,\n+        granularity: ClassSnapshotGranularity,\n         metrics: BuildMetricsReporter = DoNothingBuildMetricsReporter\n     ): List<ClassSnapshot> {\n-        val classesInfo: List<BasicClassInfo> = metrics.measure(BuildTime.READ_CLASSES_BASIC_INFO) {\n-            classes.map { it.classInfo }\n-        }\n-        val inaccessibleClassesInfo: Set<BasicClassInfo> = metrics.measure(BuildTime.FIND_INACCESSIBLE_CLASSES) {\n-            findInaccessibleClasses(classesInfo)\n-        }\n-        return classes.map {\n-            when {\n-                it.classInfo in inaccessibleClassesInfo -> InaccessibleClassSnapshot\n-                it.classInfo.isKotlinClass -> metrics.measure(BuildTime.SNAPSHOT_KOTLIN_CLASSES) {\n-                    snapshotKotlinClass(it, granularity)\n+        val classSnapshots = mutableMapOf<ClassFileWithContentsProvider, ClassSnapshot>()\n+        val inaccessibleClasses = mutableSetOf<ClassId>()\n+\n+        // Process the classes in descending order of their relative paths so that outer classes are processed first, which is needed for\n+        // detecting transitively inaccessible classes -- see below.\n+        // For example, if `com/example/A$B.class` has outer class `com/example/A.class`, we will process `com/example/A.class` first (the\n+        // string `com/example/A.class` is higher than `com/example/A$B.class` because `.` is higher than `$`).\n+        classes.sortedByDescending { it.classFile.unixStyleRelativePath }.forEach {\n+            val clazz = metrics.measure(BuildTime.LOAD_CONTENTS_OF_CLASSES) {\n+                it.loadContents()\n+            }\n+            val classSnapshot = when {\n+                // We don't need to snapshot classes that are (directly or transitively) inaccessible.\n+                // A class is transitively inaccessible if its outer class is (directly or transitively) inaccessible.\n+                // The outer class (if present) should have been processed due to the way we sorted the given classes (see above).\n+                //\n+                // In the uncommon case that the outer class is not yet processed (i.e., when the outer class's path is not a prefix of this\n+                // class's path) or if it can't be found in the given classes (this could happen with faulty jars), then we will not be able\n+                // to confirm whether this class is transitively inaccessible. If we try to find and process the outer class on the fly, we\n+                // will potentially need to load many more classes, and we will also have to cache them in memory to avoid loading them\n+                // twice later, therefore consuming more memory (KT-57757). To keep things simple and avoid KT-57757, we'll just consider\n+                // that the class is accessible and snapshot it (it's okay to snapshot more than required, but incorrect to snapshot less).\n+                // Note that this case is unlikely to happen anyway.",
        "comment_created_at": "2023-04-21T11:28:08+00:00",
        "comment_author": "gavra0",
        "comment_body": "While this seems to address this use-case, I think we should still file a YT issue to switch to on-demand loading of classes. If we need B in order to process A, the class loading mechanism can provide this information. Currently, sorting of entries addresses the most common scenario, but if there are new cross-class requirements, this becomes difficult to maintain.\r\n\r\nAlso, the comment about the memory consumption does not really hold, in order to load A, you'll need to load the outer class parent chain. which should not be more than ~10 classes.",
        "pr_file_module": null
      },
      {
        "comment_id": "1173941121",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5123,
        "pr_file": "compiler/incremental-compilation-impl/src/org/jetbrains/kotlin/incremental/classpathDiff/ClasspathSnapshotter.kt",
        "discussion_id": "1173660401",
        "commented_code": "@@ -57,26 +63,66 @@ object ClassSnapshotter {\n \n     /** Creates [ClassSnapshot]s of the given classes. */\n     fun snapshot(\n-        classes: List<ClassFileWithContents>,\n-        granularity: ClassSnapshotGranularity = CLASS_MEMBER_LEVEL,\n+        classes: List<ClassFileWithContentsProvider>,\n+        granularity: ClassSnapshotGranularity,\n         metrics: BuildMetricsReporter = DoNothingBuildMetricsReporter\n     ): List<ClassSnapshot> {\n-        val classesInfo: List<BasicClassInfo> = metrics.measure(BuildTime.READ_CLASSES_BASIC_INFO) {\n-            classes.map { it.classInfo }\n-        }\n-        val inaccessibleClassesInfo: Set<BasicClassInfo> = metrics.measure(BuildTime.FIND_INACCESSIBLE_CLASSES) {\n-            findInaccessibleClasses(classesInfo)\n-        }\n-        return classes.map {\n-            when {\n-                it.classInfo in inaccessibleClassesInfo -> InaccessibleClassSnapshot\n-                it.classInfo.isKotlinClass -> metrics.measure(BuildTime.SNAPSHOT_KOTLIN_CLASSES) {\n-                    snapshotKotlinClass(it, granularity)\n+        val classSnapshots = mutableMapOf<ClassFileWithContentsProvider, ClassSnapshot>()\n+        val inaccessibleClasses = mutableSetOf<ClassId>()\n+\n+        // Process the classes in descending order of their relative paths so that outer classes are processed first, which is needed for\n+        // detecting transitively inaccessible classes -- see below.\n+        // For example, if `com/example/A$B.class` has outer class `com/example/A.class`, we will process `com/example/A.class` first (the\n+        // string `com/example/A.class` is higher than `com/example/A$B.class` because `.` is higher than `$`).\n+        classes.sortedByDescending { it.classFile.unixStyleRelativePath }.forEach {\n+            val clazz = metrics.measure(BuildTime.LOAD_CONTENTS_OF_CLASSES) {\n+                it.loadContents()\n+            }\n+            val classSnapshot = when {\n+                // We don't need to snapshot classes that are (directly or transitively) inaccessible.\n+                // A class is transitively inaccessible if its outer class is (directly or transitively) inaccessible.\n+                // The outer class (if present) should have been processed due to the way we sorted the given classes (see above).\n+                //\n+                // In the uncommon case that the outer class is not yet processed (i.e., when the outer class's path is not a prefix of this\n+                // class's path) or if it can't be found in the given classes (this could happen with faulty jars), then we will not be able\n+                // to confirm whether this class is transitively inaccessible. If we try to find and process the outer class on the fly, we\n+                // will potentially need to load many more classes, and we will also have to cache them in memory to avoid loading them\n+                // twice later, therefore consuming more memory (KT-57757). To keep things simple and avoid KT-57757, we'll just consider\n+                // that the class is accessible and snapshot it (it's okay to snapshot more than required, but incorrect to snapshot less).\n+                // Note that this case is unlikely to happen anyway.",
        "comment_created_at": "2023-04-21T16:01:50+00:00",
        "comment_author": "hungvietnguyen",
        "comment_body": "> Also, the comment about the memory consumption does not really hold, in order to load A, you'll need to load the outer class parent chain. which should not be more than ~10 classes.\r\n\r\nThe key challenge is that we can only get a `ClassID` by reading the `.class` file's contents, not by its path, because the `$` character in the file path is ambiguous (`A$B.class` can either mean inner class `B` of outer class `A`, or it can mean top-level class `A$B` where `$` is part of its name).\r\n\r\nSo to find the outer class we will potentially need to look for + load all entries in the jar.\r\n\r\nI've updated the algorithm to look for outer classes, could you take another look and see if it addresses the issue?\r\n\r\n-----------------------------------\r\n\r\n(Btw, I tested on the 400 MB `ideaIC-2022.1.4/lib/app.jar` and got some numbers:\r\n\r\n-  Directly inaccessible classes: 20241\r\n- Transitively inaccessible classes: 0 (we never found a case where a class says it's accessible but its outer class is inaccessible)\r\n- Kotlin classes: 9377\r\n- Java classes: 47854\r\n\r\nSo I'll need to be careful not to increase code complexity too much for detecting \"transitively inaccessible\" classes.)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1320244529",
    "pr_number": 5174,
    "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/externalizers.kt",
    "created_at": "2023-09-08T19:11:20+00:00",
    "commented_code": "}\n}\n\nobject StringCollectionExternalizer : CollectionExternalizer<String, Collection<String>>(StringExternalizer, { size -> ArrayList(size) })",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "1320244529",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/externalizers.kt",
        "discussion_id": "1320244529",
        "commented_code": "@@ -384,11 +323,13 @@ abstract class GenericCollectionExternalizer<T, C : Collection<T>>(\n     }\n }\n \n+object StringCollectionExternalizer : CollectionExternalizer<String, Collection<String>>(StringExternalizer, { size -> ArrayList(size) })",
        "comment_created_at": "2023-09-08T19:11:20+00:00",
        "comment_author": "ALikhachev",
        "comment_body": "I'm a bit worried by that change. Previously it was backed by `HashSet`",
        "pr_file_module": null
      },
      {
        "comment_id": "1321591326",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/externalizers.kt",
        "discussion_id": "1320244529",
        "commented_code": "@@ -384,11 +323,13 @@ abstract class GenericCollectionExternalizer<T, C : Collection<T>>(\n     }\n }\n \n+object StringCollectionExternalizer : CollectionExternalizer<String, Collection<String>>(StringExternalizer, { size -> ArrayList(size) })",
        "comment_created_at": "2023-09-11T13:51:07+00:00",
        "comment_author": "hungvietnguyen",
        "comment_body": "A **Collection**Externalizer must be able to preserve duplicates in the collection, so I think using a List is required for correctness. Using a `HashSet` before was probably a mistake.",
        "pr_file_module": null
      },
      {
        "comment_id": "1322166847",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/externalizers.kt",
        "discussion_id": "1320244529",
        "commented_code": "@@ -384,11 +323,13 @@ abstract class GenericCollectionExternalizer<T, C : Collection<T>>(\n     }\n }\n \n+object StringCollectionExternalizer : CollectionExternalizer<String, Collection<String>>(StringExternalizer, { size -> ArrayList(size) })",
        "comment_created_at": "2023-09-11T23:08:47+00:00",
        "comment_author": "ALikhachev",
        "comment_body": "Yep, I agree that in general it should be as you have done. Since you're going to perform more work on that as you say below, then I'm fine with that",
        "pr_file_module": null
      },
      {
        "comment_id": "1322806157",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 5174,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/storage/externalizers.kt",
        "discussion_id": "1320244529",
        "commented_code": "@@ -384,11 +323,13 @@ abstract class GenericCollectionExternalizer<T, C : Collection<T>>(\n     }\n }\n \n+object StringCollectionExternalizer : CollectionExternalizer<String, Collection<String>>(StringExternalizer, { size -> ArrayList(size) })",
        "comment_created_at": "2023-09-12T10:13:54+00:00",
        "comment_author": "hungvietnguyen",
        "comment_body": "Great, thank you for your review! :)",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "995659629",
    "pr_number": 4985,
    "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/IncrementalJvmCache.kt",
    "created_at": "2022-10-14T11:31:49+00:00",
    "commented_code": "// todo: reuse code with InlineFunctionsMap?\n    private inner class ConstantsMap(storageFile: File) :\n        BasicStringMap<LinkedHashMap<String, Any>>(storageFile, LinkedHashMapExternalizer(StringExternalizer, ConstantExternalizer)) {\n        BasicStringMap<Map<String, Any>>(storageFile, MapExternalizer(StringExternalizer, ConstantValueExternalizer)) {",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "995659629",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4985,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/IncrementalJvmCache.kt",
        "discussion_id": "995659629",
        "commented_code": "@@ -439,7 +432,7 @@ open class IncrementalJvmCache(\n \n     // todo: reuse code with InlineFunctionsMap?\n     private inner class ConstantsMap(storageFile: File) :\n-        BasicStringMap<LinkedHashMap<String, Any>>(storageFile, LinkedHashMapExternalizer(StringExternalizer, ConstantExternalizer)) {\n+        BasicStringMap<Map<String, Any>>(storageFile, MapExternalizer(StringExternalizer, ConstantValueExternalizer)) {",
        "comment_created_at": "2022-10-14T11:31:49+00:00",
        "comment_author": "gavra0",
        "comment_body": "What is the benefit of replacing Map with LinkedHashMap? Previously, it was clear that this was an ordered collection.",
        "pr_file_module": null
      },
      {
        "comment_id": "995877871",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4985,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/IncrementalJvmCache.kt",
        "discussion_id": "995659629",
        "commented_code": "@@ -439,7 +432,7 @@ open class IncrementalJvmCache(\n \n     // todo: reuse code with InlineFunctionsMap?\n     private inner class ConstantsMap(storageFile: File) :\n-        BasicStringMap<LinkedHashMap<String, Any>>(storageFile, LinkedHashMapExternalizer(StringExternalizer, ConstantExternalizer)) {\n+        BasicStringMap<Map<String, Any>>(storageFile, MapExternalizer(StringExternalizer, ConstantValueExternalizer)) {",
        "comment_created_at": "2022-10-14T15:20:18+00:00",
        "comment_author": "hungvietnguyen",
        "comment_body": "Right, I also liked the fact that it was ordered, but I made this change because:\r\n   1. `LinkedHashMap` feels a bit heavy.\r\n   2. All collections in Kotlin are already implicitly ordered.\r\n   3. If we really want to preserver order, having it a `LinkedHashMap` here is not enough. We will have to preserve order all the way from source to sink, and we would want to do that for all other data structures as well because almost everything involved in build should ideally be ordered. So we will end up turning all `Map`s and `Set`s throughout the codebase into `LinkedHashMap` and `LinkedHashSet`.\r\n        - Actually, when implementing the new IC, I initially wrote new code with `LinkedHashMap` but over time found that it doesn't scale and the code just looks inconsistent if sometimes we use `Map`, sometimes we use `LinkedHashMap`. (Here is our previous discussion on this: https://github.com/google/kotlin/commit/654c4250ba81ce0d02c167c39de96b1212b3c2e7#commitcomment-57900126)\r\n\r\nThat said, I can also revert to `LinkedHashMap` if you think it's still nice to have.",
        "pr_file_module": null
      },
      {
        "comment_id": "999556776",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4985,
        "pr_file": "build-common/src/org/jetbrains/kotlin/incremental/IncrementalJvmCache.kt",
        "discussion_id": "995659629",
        "commented_code": "@@ -439,7 +432,7 @@ open class IncrementalJvmCache(\n \n     // todo: reuse code with InlineFunctionsMap?\n     private inner class ConstantsMap(storageFile: File) :\n-        BasicStringMap<LinkedHashMap<String, Any>>(storageFile, LinkedHashMapExternalizer(StringExternalizer, ConstantExternalizer)) {\n+        BasicStringMap<Map<String, Any>>(storageFile, MapExternalizer(StringExternalizer, ConstantValueExternalizer)) {",
        "comment_created_at": "2022-10-19T14:39:06+00:00",
        "comment_author": "gavra0",
        "comment_body": "kk, let's keep it as-is.",
        "pr_file_module": null
      }
    ]
  }
]