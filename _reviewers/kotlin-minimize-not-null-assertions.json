[
  {
    "discussion_id": "1010257",
    "pr_number": 80,
    "pr_file": "idea/src/org/jetbrains/jet/plugin/quickfix/UnnecessaryNotNullAssertionFix.java",
    "created_at": "2012-06-19T15:01:46+00:00",
    "commented_code": "/*\n * Copyright 2010-2012 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.jetbrains.jet.plugin.quickfix;\n\nimport com.intellij.codeInsight.intention.IntentionAction;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiFile;\nimport com.intellij.psi.impl.source.tree.LeafPsiElement;\nimport com.intellij.util.IncorrectOperationException;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.jet.lang.psi.JetFile;\nimport org.jetbrains.jet.lexer.JetTokens;\nimport org.jetbrains.jet.plugin.JetBundle;\n\n/**\n * @author slukjanov aka Frostman\n */\npublic class UnnecessaryNotNullAssertionFix implements IntentionAction {",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "1010257",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 80,
        "pr_file": "idea/src/org/jetbrains/jet/plugin/quickfix/UnnecessaryNotNullAssertionFix.java",
        "discussion_id": "1010257",
        "commented_code": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2010-2012 JetBrains s.r.o.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jetbrains.jet.plugin.quickfix;\n+\n+import com.intellij.codeInsight.intention.IntentionAction;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.psi.PsiElement;\n+import com.intellij.psi.PsiFile;\n+import com.intellij.psi.impl.source.tree.LeafPsiElement;\n+import com.intellij.util.IncorrectOperationException;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.jet.lang.psi.JetFile;\n+import org.jetbrains.jet.lexer.JetTokens;\n+import org.jetbrains.jet.plugin.JetBundle;\n+\n+/**\n+ * @author slukjanov aka Frostman\n+ */\n+public class UnnecessaryNotNullAssertionFix implements IntentionAction {",
        "comment_created_at": "2012-06-19T15:01:46+00:00",
        "comment_author": "goodwinnk",
        "comment_body": "I understand why you decided to create another class for that task but still think that there should be another logic in UnnecessaryNotNullAssertionFix and ReplaceCallFix. I propose ReplaceCallFix could also be used for replacing !!. call to something else as it can be used for introducing such calls now. And this class can could be responsible only for introducing and removing a!! postfix operation.\nWhat do you think?\n",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "915071284",
    "pr_number": 4890,
    "pr_file": "compiler/frontend/src/org/jetbrains/kotlin/types/expressions/ExpressionTypingVisitorForStatements.java",
    "created_at": "2022-07-06T17:03:30+00:00",
    "commented_code": "return resultInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(expression, contextWithExpectedType));\n    }\n\n    private KotlinTypeInfo resolveAssignOperatorOverload(\n            BindingContext bindingContext,\n            KtBinaryExpression expression,\n            ExpressionTypingContext contextWithExpectedType,\n            KtExpression leftOperand,\n            KtExpression left,\n            KotlinTypeInfo leftInfo,\n            ExpressionTypingContext context\n    ) {\n        KotlinType leftType = leftInfo.getType();\n        KotlinType assignmentOperationType = null;\n        TemporaryTraceAndCache temporaryForAssignmentOperation = null;\n        VariableDescriptor descriptor = BindingContextUtils.extractVariableFromResolvedCall(bindingContext, leftOperand);\n        OverloadResolutionResults<FunctionDescriptor> assignmentOperationDescriptors = new NameNotFoundResolutionResult<>();\n        if (descriptor != null && !descriptor.isVar()) {",
    "repo_full_name": "JetBrains/kotlin",
    "discussion_comments": [
      {
        "comment_id": "915071284",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4890,
        "pr_file": "compiler/frontend/src/org/jetbrains/kotlin/types/expressions/ExpressionTypingVisitorForStatements.java",
        "discussion_id": "915071284",
        "commented_code": "@@ -477,6 +486,41 @@ protected KotlinTypeInfo visitAssignment(KtBinaryExpression expression, Expressi\n         return resultInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(expression, contextWithExpectedType));\n     }\n \n+    private KotlinTypeInfo resolveAssignOperatorOverload(\n+            BindingContext bindingContext,\n+            KtBinaryExpression expression,\n+            ExpressionTypingContext contextWithExpectedType,\n+            KtExpression leftOperand,\n+            KtExpression left,\n+            KotlinTypeInfo leftInfo,\n+            ExpressionTypingContext context\n+    ) {\n+        KotlinType leftType = leftInfo.getType();\n+        KotlinType assignmentOperationType = null;\n+        TemporaryTraceAndCache temporaryForAssignmentOperation = null;\n+        VariableDescriptor descriptor = BindingContextUtils.extractVariableFromResolvedCall(bindingContext, leftOperand);\n+        OverloadResolutionResults<FunctionDescriptor> assignmentOperationDescriptors = new NameNotFoundResolutionResult<>();\n+        if (descriptor != null && !descriptor.isVar()) {",
        "comment_created_at": "2022-07-06T17:03:30+00:00",
        "comment_author": "mglukhikh",
        "comment_body": "Should we just do early return in case `descriptor.isVar() == true`?",
        "pr_file_module": null
      },
      {
        "comment_id": "915072169",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4890,
        "pr_file": "compiler/frontend/src/org/jetbrains/kotlin/types/expressions/ExpressionTypingVisitorForStatements.java",
        "discussion_id": "915071284",
        "commented_code": "@@ -477,6 +486,41 @@ protected KotlinTypeInfo visitAssignment(KtBinaryExpression expression, Expressi\n         return resultInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(expression, contextWithExpectedType));\n     }\n \n+    private KotlinTypeInfo resolveAssignOperatorOverload(\n+            BindingContext bindingContext,\n+            KtBinaryExpression expression,\n+            ExpressionTypingContext contextWithExpectedType,\n+            KtExpression leftOperand,\n+            KtExpression left,\n+            KotlinTypeInfo leftInfo,\n+            ExpressionTypingContext context\n+    ) {\n+        KotlinType leftType = leftInfo.getType();\n+        KotlinType assignmentOperationType = null;\n+        TemporaryTraceAndCache temporaryForAssignmentOperation = null;\n+        VariableDescriptor descriptor = BindingContextUtils.extractVariableFromResolvedCall(bindingContext, leftOperand);\n+        OverloadResolutionResults<FunctionDescriptor> assignmentOperationDescriptors = new NameNotFoundResolutionResult<>();\n+        if (descriptor != null && !descriptor.isVar()) {",
        "comment_created_at": "2022-07-06T17:04:38+00:00",
        "comment_author": "mglukhikh",
        "comment_body": "(and also in case when `descriptor == null`)",
        "pr_file_module": null
      },
      {
        "comment_id": "926654946",
        "repo_full_name": "JetBrains/kotlin",
        "pr_number": 4890,
        "pr_file": "compiler/frontend/src/org/jetbrains/kotlin/types/expressions/ExpressionTypingVisitorForStatements.java",
        "discussion_id": "915071284",
        "commented_code": "@@ -477,6 +486,41 @@ protected KotlinTypeInfo visitAssignment(KtBinaryExpression expression, Expressi\n         return resultInfo.replaceType(components.dataFlowAnalyzer.checkStatementType(expression, contextWithExpectedType));\n     }\n \n+    private KotlinTypeInfo resolveAssignOperatorOverload(\n+            BindingContext bindingContext,\n+            KtBinaryExpression expression,\n+            ExpressionTypingContext contextWithExpectedType,\n+            KtExpression leftOperand,\n+            KtExpression left,\n+            KotlinTypeInfo leftInfo,\n+            ExpressionTypingContext context\n+    ) {\n+        KotlinType leftType = leftInfo.getType();\n+        KotlinType assignmentOperationType = null;\n+        TemporaryTraceAndCache temporaryForAssignmentOperation = null;\n+        VariableDescriptor descriptor = BindingContextUtils.extractVariableFromResolvedCall(bindingContext, leftOperand);\n+        OverloadResolutionResults<FunctionDescriptor> assignmentOperationDescriptors = new NameNotFoundResolutionResult<>();\n+        if (descriptor != null && !descriptor.isVar()) {",
        "comment_created_at": "2022-07-21T13:09:12+00:00",
        "comment_author": "asodja",
        "comment_body": "Makes sense, done.",
        "pr_file_module": null
      }
    ]
  }
]