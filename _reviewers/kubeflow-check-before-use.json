[
  {
    "discussion_id": "956151854",
    "pr_number": 6628,
    "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
    "created_at": "2022-08-26T15:16:18+00:00",
    "commented_code": "return ctrl.Result{RequeueAfter: culler.GetRequeueTime()}, nil\n}\n\nfunc updateNotebookStatus(r *NotebookReconciler, nb *v1beta1.Notebook,\n\tsts *appsv1.StatefulSet, req ctrl.Request) (bool, error) {\n\n\tlog := r.Log.WithValues(\"notebook\", req.NamespacedName)\n\tctx := context.Background()\n\n\tstatusUpdate := false\n\t// Initialize Notebook CR Status\n\tif nb.Status.Conditions == nil {\n\t\tlog.Info(\"Initializing Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\tnewStatus := initializeStatus()\n\t\tnb.Status = newStatus\n\t\tstatusUpdate = true\n\t}\n\n\t// Update the Notebook CR status.readyReplicas if the status is changed\n\tif sts.Status.ReadyReplicas != nb.Status.ReadyReplicas {\n\t\tlog.Info(\"Updating status.ReadyReplicas\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\tnb.Status.ReadyReplicas = sts.Status.ReadyReplicas\n\t\tstatusUpdate = true\n\t}\n\n\t// Check the pod status\n\tpod := &corev1.Pod{}\n\tpodFound := false\n\terr := r.Get(ctx, types.NamespacedName{Name: sts.Name + \"-0\", Namespace: sts.Namespace}, pod)",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "956151854",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6628,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "956151854",
        "commented_code": "@@ -324,6 +269,102 @@ func (r *NotebookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (c\n \treturn ctrl.Result{RequeueAfter: culler.GetRequeueTime()}, nil\n }\n \n+func updateNotebookStatus(r *NotebookReconciler, nb *v1beta1.Notebook,\n+\tsts *appsv1.StatefulSet, req ctrl.Request) (bool, error) {\n+\n+\tlog := r.Log.WithValues(\"notebook\", req.NamespacedName)\n+\tctx := context.Background()\n+\n+\tstatusUpdate := false\n+\t// Initialize Notebook CR Status\n+\tif nb.Status.Conditions == nil {\n+\t\tlog.Info(\"Initializing Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnewStatus := initializeStatus()\n+\t\tnb.Status = newStatus\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Update the Notebook CR status.readyReplicas if the status is changed\n+\tif sts.Status.ReadyReplicas != nb.Status.ReadyReplicas {\n+\t\tlog.Info(\"Updating status.ReadyReplicas\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnb.Status.ReadyReplicas = sts.Status.ReadyReplicas\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Check the pod status\n+\tpod := &corev1.Pod{}\n+\tpodFound := false\n+\terr := r.Get(ctx, types.NamespacedName{Name: sts.Name + \"-0\", Namespace: sts.Namespace}, pod)",
        "comment_created_at": "2022-08-26T15:16:18+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Let's move this part completely outside of this function and treat the Pod as the StatefulSet. \r\n\r\nThe main reconciliation logic is responsible for finding the objects (Pod, StatefulSet) and our function will need to check if they are `nil` or not",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "956155664",
    "pr_number": 6628,
    "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
    "created_at": "2022-08-26T15:20:25+00:00",
    "commented_code": "}\n\t}\n\n\t// Update the readyReplicas if the status is changed\n\tif foundStateful.Status.ReadyReplicas != instance.Status.ReadyReplicas {\n\t\tlog.Info(\"Updating Status\", \"namespace\", instance.Namespace, \"name\", instance.Name)\n\t\tinstance.Status.ReadyReplicas = foundStateful.Status.ReadyReplicas\n\t\terr = r.Status().Update(ctx, instance)\n\t\tif err != nil {\n\t\t\treturn ctrl.Result{}, err\n\t\t}\n\t}\n\n\t// Check the pod status\n\tpod := &corev1.Pod{}\n\tpodFound := false\n\terr = r.Get(ctx, types.NamespacedName{Name: ss.Name + \"-0\", Namespace: ss.Namespace}, pod)\n\tif err != nil && apierrs.IsNotFound(err) {\n\t\t// This should be reconciled by the StatefulSet\n\t\tlog.Info(\"Pod not found...\")\n\t} else if err != nil {\n\t// Update Notebook CR status\n\tpodFound, err := updateNotebookStatus(r, instance, foundStateful, req)\n\tif err != nil {\n\t\treturn ctrl.Result{}, err\n\t} else {",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "956155664",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6628,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "956155664",
        "commented_code": "@@ -206,65 +206,10 @@ func (r *NotebookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (c\n \t\t}\n \t}\n \n-\t// Update the readyReplicas if the status is changed\n-\tif foundStateful.Status.ReadyReplicas != instance.Status.ReadyReplicas {\n-\t\tlog.Info(\"Updating Status\", \"namespace\", instance.Namespace, \"name\", instance.Name)\n-\t\tinstance.Status.ReadyReplicas = foundStateful.Status.ReadyReplicas\n-\t\terr = r.Status().Update(ctx, instance)\n-\t\tif err != nil {\n-\t\t\treturn ctrl.Result{}, err\n-\t\t}\n-\t}\n-\n-\t// Check the pod status\n-\tpod := &corev1.Pod{}\n-\tpodFound := false\n-\terr = r.Get(ctx, types.NamespacedName{Name: ss.Name + \"-0\", Namespace: ss.Namespace}, pod)\n-\tif err != nil && apierrs.IsNotFound(err) {\n-\t\t// This should be reconciled by the StatefulSet\n-\t\tlog.Info(\"Pod not found...\")\n-\t} else if err != nil {\n+\t// Update Notebook CR status\n+\tpodFound, err := updateNotebookStatus(r, instance, foundStateful, req)\n+\tif err != nil {\n \t\treturn ctrl.Result{}, err\n-\t} else {",
        "comment_created_at": "2022-08-26T15:20:25+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "This nesting level can be simplified by checking the incoming `pod` object:\r\n\r\n```golang\r\nif pod == nil {\r\n    log.Info(\"No pod found. Won't update notebook conditions and containerState\")\r\n    return status, nil\r\n}\r\n\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "957340345",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6628,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "956155664",
        "commented_code": "@@ -206,65 +206,10 @@ func (r *NotebookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (c\n \t\t}\n \t}\n \n-\t// Update the readyReplicas if the status is changed\n-\tif foundStateful.Status.ReadyReplicas != instance.Status.ReadyReplicas {\n-\t\tlog.Info(\"Updating Status\", \"namespace\", instance.Namespace, \"name\", instance.Name)\n-\t\tinstance.Status.ReadyReplicas = foundStateful.Status.ReadyReplicas\n-\t\terr = r.Status().Update(ctx, instance)\n-\t\tif err != nil {\n-\t\t\treturn ctrl.Result{}, err\n-\t\t}\n-\t}\n-\n-\t// Check the pod status\n-\tpod := &corev1.Pod{}\n-\tpodFound := false\n-\terr = r.Get(ctx, types.NamespacedName{Name: ss.Name + \"-0\", Namespace: ss.Namespace}, pod)\n-\tif err != nil && apierrs.IsNotFound(err) {\n-\t\t// This should be reconciled by the StatefulSet\n-\t\tlog.Info(\"Pod not found...\")\n-\t} else if err != nil {\n+\t// Update Notebook CR status\n+\tpodFound, err := updateNotebookStatus(r, instance, foundStateful, req)\n+\tif err != nil {\n \t\treturn ctrl.Result{}, err\n-\t} else {",
        "comment_created_at": "2022-08-29T13:31:02+00:00",
        "comment_author": "apo-ger",
        "comment_body": "Fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "335224658",
    "pr_number": 4309,
    "pr_file": "bootstrap/pkg/kfapp/gcp/gcp.go",
    "created_at": "2019-10-15T23:46:15+00:00",
    "commented_code": "return nil\n}\n\n// createK8sServiceAccount creates k8s servicea account with annotation\n// createOrUpdateK8sServiceAccount creates or updates k8s service account with annotation\n// iam.gke.io/gcp-service-account=gsa\n// TODO(lunkai): Ideally the k8s service account should be specified by kustomize.\nfunc createK8sServiceAccount(k8sClientset *clientset.Clientset, namespace string, name string, gsa string) error {\nfunc createOrUpdateK8sServiceAccount(k8sClientset *clientset.Clientset, namespace string, name string, gsa string) error {\n\tlog.Infof(\"Creating service account %v in namespace %v\", name, namespace)\n\t_, err := k8sClientset.CoreV1().ServiceAccounts(namespace).Get(name, metav1.GetOptions{})\n\tcurrSA, err := k8sClientset.CoreV1().ServiceAccounts(namespace).Get(name, metav1.GetOptions{})\n\tif err == nil {\n\t\tlog.Infof(\"Service account already exists...\")\n\t\tif currSA.Annotations == nil {\n\t\t\tcurrSA.Annotations = map[string]string{",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "335224658",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4309,
        "pr_file": "bootstrap/pkg/kfapp/gcp/gcp.go",
        "discussion_id": "335224658",
        "commented_code": "@@ -1675,14 +1709,28 @@ func (gcp *Gcp) setupWorkloadIdentity(namespace string) error {\n \treturn nil\n }\n \n-// createK8sServiceAccount creates k8s servicea account with annotation\n+// createOrUpdateK8sServiceAccount creates or updates k8s service account with annotation\n // iam.gke.io/gcp-service-account=gsa\n // TODO(lunkai): Ideally the k8s service account should be specified by kustomize.\n-func createK8sServiceAccount(k8sClientset *clientset.Clientset, namespace string, name string, gsa string) error {\n+func createOrUpdateK8sServiceAccount(k8sClientset *clientset.Clientset, namespace string, name string, gsa string) error {\n \tlog.Infof(\"Creating service account %v in namespace %v\", name, namespace)\n-\t_, err := k8sClientset.CoreV1().ServiceAccounts(namespace).Get(name, metav1.GetOptions{})\n+\tcurrSA, err := k8sClientset.CoreV1().ServiceAccounts(namespace).Get(name, metav1.GetOptions{})\n \tif err == nil {\n \t\tlog.Infof(\"Service account already exists...\")\n+\t\tif currSA.Annotations == nil {\n+\t\t\tcurrSA.Annotations = map[string]string{",
        "comment_created_at": "2019-10-15T23:46:15+00:00",
        "comment_author": "jlewi",
        "comment_body": "nit: The code would be more robust as\r\n\r\nif currSa.Annotation == nil {\r\n   curSA.Annotations = map[string]string{}\r\n}\r\n\r\ncurrSa.Annotations[...] =....\r\n\r\nThis way you only end up writing this once.",
        "pr_file_module": null
      }
    ]
  }
]