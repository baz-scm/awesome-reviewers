[
  {
    "discussion_id": "591695608",
    "pr_number": 5660,
    "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
    "created_at": "2021-03-10T16:53:30+00:00",
    "commented_code": "\"timeout\": \"300s\",\n\t\t},\n\t}\n\n\t// Create a template map for the headers section\n\t// of the Istio VirtualService\n\theaders := map[string]interface{}{\n\t\t\"request\": map[string]interface{}{\n\t\t\t\"set\": map[string]interface{}{},\n\t\t},\n\t}\n\n\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n\t// split the literal string into keys and values and add them\n\t// to the headers variable. Finally, add the headers section to\n\t// the variable with the http spec.\n\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n\t\tfor _, kv := range requestHeaders {\n\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n\t\t\t\tk := strings.Split(kv, \": \")[0]\n\t\t\t\tv := strings.Split(kv, \": \")[1]\n\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "591695608",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T16:53:30+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I think we should not let users arbitrarily add headers to the requests that pass from the ingress gateway. For example they could even override the ISTIO `userid-header`, the `X-Forwarded-Proto` so that the server assumes http instead of https etc.\r\n\r\nI think we should reconsider the design we take here\r\nalso cc @yanniszark who has a lot of experience on security",
        "pr_file_module": null
      },
      {
        "comment_id": "591699285",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T16:57:41+00:00",
        "comment_author": "davidspek",
        "comment_body": "I believe if we change the method to `add` instead of `set` the header only gets added if it is not already present. ",
        "pr_file_module": null
      },
      {
        "comment_id": "591773485",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T18:36:49+00:00",
        "comment_author": "davidspek",
        "comment_body": "If this is a security issue, I think https://github.com/kubeflow/kubeflow/issues/5588 is a much larger problem. ",
        "pr_file_module": null
      },
      {
        "comment_id": "591823260",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T19:48:04+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd I don't think this is a big problem, as the rest of the virtual service is not touched. So all the user can do is mess up the requests going to the service he already has access to, I don't think this would actually enable somebody to be able to access a notebook in another namespace (unlike the issue linked above). But I am all about learning so I'd like to know the actual dangers/problems this could have. \r\n\r\nDon't forget, users are already able to can already create any virtual service spec they want in their namespace. If there is a security issue with any of this, allowing users to create or edit virtual services would be the actual issue. ",
        "pr_file_module": null
      },
      {
        "comment_id": "591882365",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T21:24:50+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd To continue on your last comment below, there are a large amount of header configurations that can be used with RStudio. `X-RStudio-Root-Path` is one of course, `X-RStudio-Request` is another. However, much more can be set with headers: https://docs.rstudio.com/connect/admin/appendix/configuration/#ProxyAuth.Settings. I could be mistaken, but I thought you could also configure or use custom headers with JupyterLab as well. I will need to look at it further tomorrow morning, however, I'm sure there are other applications for which setting headers to configure them is supported and would be useful. I think with the URI rewriting, the configurable request headers, and allowing to set the application port (not included here but I do have a PR open for this), the notebook controller will be compatible with most web-applications a user could want to deploy. \r\n\r\nHowever, seeing as the issue described here is an issue that is already present, I do not think this is a blocker. Fixing the underlying issue will be a larger task and not something that will be done before the 1.3 release. ",
        "pr_file_module": null
      },
      {
        "comment_id": "591927042",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-10T22:44:53+00:00",
        "comment_author": "thesuperzapper",
        "comment_body": "@kimwnasptd There is a very simple solution here, just reject the annotation if it sets a restricted header name.\r\n\r\nThis should be easy to implement quickly, and I think we can start with a blacklist (which can be extended in future if issues are found).\r\n\r\nSo @kimwnasptd what headers should be blacklisted?",
        "pr_file_module": null
      },
      {
        "comment_id": "592021956",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T02:27:36+00:00",
        "comment_author": "davidspek",
        "comment_body": "I added a blacklist, so I believe this issue is now resolved.",
        "pr_file_module": null
      },
      {
        "comment_id": "592145006",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T08:11:53+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I took a more extensive look at the docs and I propose the following solution:\r\n\r\nThe headers that are used to configure parts of R-Studio are all non-standard headers, starting with `X-*`. Such example headers are\r\n* `X-RStudio-Request`\r\n* `X-RStudio-Root-Path`\r\n* `X-Forwarded-Host`\r\n* `X-Forwarded-Proto`\r\n* `X-Auth-Token`\r\n\r\nSo I propose to go the other way around from blacklisting specific headers. Let's only allow the users to edit/set non-standard headers that start with `X-*`. This way we provide all the necessary configuration for R-Studio and at the same time don't allow the users to edit any header arbitrarily.\r\n\r\nAnd if in the future we find users that need to specifically set well defined headers for a Notebook then we can discuss based on the specific use case on how to proceed and allow users to add more headers.\r\n\r\nThis is the case for the docs I looked up to now\r\nhttps://docs.rstudio.com/ide/server-pro/access-and-security.htmlhttps://docs.rstudio.com/connect/admin/authentication/proxied/\r\nhttps://docs.rstudio.com/connect/admin/appendix/configuration/#ProxyAuth.Settings\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "592156403",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T08:30:30+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "And lastly, the controller will set accordingly the `X-RStudio-Root-Path` header if the `server-type` is `rstudio`. But the user could still be able to override this by manually specifying a different value.\r\n\r\nThis way in order for a CR to support RStuido it will only need the `notebooks.kubeflow.org/server-type` annotation, which provides a good default mechanism and extensibility to the users.",
        "pr_file_module": null
      },
      {
        "comment_id": "592225937",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T10:06:45+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd A white-list rather than a blacklist would indeed be a possibility. However, by backing this into the controller administrators cannot easily customize these values. Also, using `X-*` for headers seems to have been deprecated int 2012: see https://tools.ietf.org/html/rfc6648. There might be a way to make this configurable, but I'm not sure this can be done on time. \r\n\r\nRegarding your last comment, are you suggesting that the current mechanisms added to the controller stay as they are, but the controller itself adds the annotations to the CR when `notebooks.kubeflow.org/server-type: rstudio` is present? Because I don't think this would work, as the controller will forcefully change the annotations if they are edited. I think what you are proposing, is essentially already what is being done except for that it is done in the frontend/backend rather than the controller. Users even looking into this feature are probably already aware, or capable of, figuring out how to change the virtual service spec. ",
        "pr_file_module": null
      },
      {
        "comment_id": "592245141",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T10:33:12+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "> Also, using X-* for headers seems to have been deprecated int 2012: see https://tools.ietf.org/html/rfc6648\r\n\r\nThis is a very good argument to make to the folks maintaining the R-Studio code :) \r\n\r\n> However, by backing this into the controller administrators cannot easily customize these values.\r\n\r\nWhat extra headers do you think they would need to set aside, from the `X-*`  headers R-Studio knows/expects?\r\n\r\n> Regarding your last comment, are you suggesting that the current mechanisms added to the controller stay as they are, but the controller itself adds the annotations to the CR when notebooks.kubeflow.org/server-type: rstudio is present?\r\n\r\nNo, the controller will not add any extra annotations if the `server-type` is present. It will only configure the vsvc accordingly.\r\nLet me try to clarify with two examples:\r\n\r\nCR 1:\r\n```yaml\r\nmetadata:\r\n  annotations:\r\n    notebooks.kubeflow.org/server-type: rstudio\r\n```\r\n\r\nIn this case the controller will see that the Notebook is for R-Studio so it will set the `/` url rewrite in the vsvc and also set the `X-RStudio-Root-Path` header in the vsvc for the prefix\r\n\r\nCR 2:\r\n```yaml\r\nmetadata:\r\n  annotations:\r\n    notebooks.kubeflow.org/server-type: rstudio\r\n    notebooks.kubeflow.org/http-rewrite-uri: /some/path\r\n```\r\n\r\nIn this case the controller will first do exactly what it would for CR 1. But then it would also detect the `notebooks.kubeflow.org/http-rewrite-uri` and use this value for the Istio rewrite, instead of the default it previously put. \r\n\r\nAlso the same approach will be used with the `notebooks.kubeflow.org/http-headers-request-set`. If this annotation is present then the controller will use the `X-*` headers mentioned in this annotations instead",
        "pr_file_module": null
      },
      {
        "comment_id": "592282634",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T11:28:19+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd This is now implemented, as well as a whitelist instead of a blacklist",
        "pr_file_module": null
      },
      {
        "comment_id": "592287637",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T11:36:33+00:00",
        "comment_author": "thesuperzapper",
        "comment_body": "I think with the blacklist there is very little additional risk from this PR, and I think it's good to merge.\r\n\r\nRegarding the server-type thing, we can do that in the future but its not necessary right now. \r\n\r\nAdding a whitelist would only act to reduce the usefulness of this feature for users why might have their own container images.",
        "pr_file_module": null
      },
      {
        "comment_id": "592294749",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5660,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "591695608",
        "commented_code": "@@ -449,6 +464,32 @@ func generateVirtualService(instance *v1beta1.Notebook) (*unstructured.Unstructu\n \t\t\t\"timeout\": \"300s\",\n \t\t},\n \t}\n+\n+\t// Create a template map for the headers section\n+\t// of the Istio VirtualService\n+\theaders := map[string]interface{}{\n+\t\t\"request\": map[string]interface{}{\n+\t\t\t\"set\": map[string]interface{}{},\n+\t\t},\n+\t}\n+\n+\t// If key \"notebooks.kubeflow.org/http-headers-request-set\" is present on the notebook resource,\n+\t// split the literal string into keys and values and add them\n+\t// to the headers variable. Finally, add the headers section to\n+\t// the variable with the http spec.\n+\tif _, ok := annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]; ok && len(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"]) > 0 {\n+\t\trequestHeaders := strings.Split(annotations[\"notebooks.kubeflow.org/http-headers-request-set\"], \"\\n\")\n+\t\tfor _, kv := range requestHeaders {\n+\t\t\tif len(strings.Split(kv, \": \")) == 2 {\n+\t\t\t\tk := strings.Split(kv, \": \")[0]\n+\t\t\t\tv := strings.Split(kv, \": \")[1]\n+\t\t\t\theaders[\"request\"].(map[string]interface{})[\"set\"].(map[string]interface{})[k] = v",
        "comment_created_at": "2021-03-11T11:48:07+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "> Regarding the server-type thing, we can do that in the future but its not necessary right now.\r\n\r\n@thesuperzapper I can understand your urge to have this effort merged as soon as possible, but this is not a big feature so lets get it right from the beginning and not worry about it in the future. The functionality I described is almost there.\r\n\r\n> Adding a whitelist would only act to reduce the usefulness of this feature for users why might have their own container images.\r\n\r\nCould you elaborate on this? What use cases do you think we limit? With the mention mechanism, of allowing the user to set any `X-*` header they want, we still support all of the configuration options from R-Studio.",
        "pr_file_module": null
      }
    ]
  }
]