[
  {
    "discussion_id": "920964404",
    "pr_number": 6491,
    "pr_file": "components/profile-controller/Makefile",
    "created_at": "2022-07-14T09:43:16+00:00",
    "commented_code": "GOBIN=$(shell go env GOBIN)\nendif\n\nall: manager\n# Setting SHELL to bash allows bash commands to be executed by recipes.\n# This is a requirement for 'setup-envtest.sh' in the test target.\n# Options are set to exit when a recipe line exits non-zero or a piped command fails.\nSHELL = /usr/bin/env bash -o pipefail\n.SHELLFLAGS = -ec\n\n# Run tests\ntest: generate fmt vet\n\tgo test ./... -coverprofile cover.out\n.PHONY: all\nall: build\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet\n\tgo run ./main.go\n\n# Install CRDs into a cluster\ninstall:\n\tkustomize build config/crd | kubectl apply -f -\n.PHONY: help\nhelp: ## Display this help.\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\n# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\ndeploy: manifests\n\tcd config/manager && kustomize edit set image gcr.io/kubeflow-images-public/profile-controller=${IMG}\n\tkustomize build config/default | kubectl apply -f -\n##@ Development\n\n# Generate manifests e.g. CRD, RBAC etc.\nmanifests: controller-gen\n\t$(CONTROLLER_GEN) crd:trivialVersions=true paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n.PHONY: manifests\nmanifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n\t$(CONTROLLER_GEN) crd paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n\t# Uncomment when we remove the permissive ClusterRoleBinding to cluster-admin\n\t# $(CONTROLLER_GEN) rbac:roleName=cluster-role-binding webhook paths=\"./...\"\n\n# Run go fmt against code\nfmt:\n.PHONY: generate\ngenerate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n\t\n\n.PHONY: fmt\nfmt: ## Run go fmt against code.\n\tgo fmt ./...\n\n# Run go vet against code\nvet:\n.PHONY: vet\nvet: ## Run go vet against code.\n\tgo vet ./...\n\n# Generate code\ngenerate: controller-gen\n\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=\"./...\"\n.PHONY: test\ntest: manifests generate fmt vet envtest ## Run tests.\n\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n\n##@ Build\n\n.PHONY: build\nbuild: generate fmt vet ## Build manager binary.\n\tgo build -o bin/manager main.go\n\n.PHONY: run\nrun: manifests generate fmt vet ## Run a controller from your host.\n\tgo run ./main.go -namespace-labels-path ./config/base/namespace-labels.yaml \n\n# Build the docker image\ndocker-build:\n\tdocker build --build-arg GOLANG_VERSION=${GOLANG_VERSION} -t ${IMG}:${TAG} .\n\t@echo Built ${IMG}:${TAG}\n.PHONY: docker-build\ndocker-build: test ## Build docker image with the manager.",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "920964404",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6491,
        "pr_file": "components/profile-controller/Makefile",
        "discussion_id": "920964404",
        "commented_code": "@@ -11,65 +11,136 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n-all: manager\n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n \n-# Run tests\n-test: generate fmt vet\n-\tgo test ./... -coverprofile cover.out\n+.PHONY: all\n+all: build\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n-\n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n-\n-# Install CRDs into a cluster\n-install:\n-\tkustomize build config/crd | kubectl apply -f -\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tcd config/manager && kustomize edit set image gcr.io/kubeflow-images-public/profile-controller=${IMG}\n-\tkustomize build config/default | kubectl apply -f -\n+##@ Development\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) crd:trivialVersions=true paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) crd paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \t# Uncomment when we remove the permissive ClusterRoleBinding to cluster-admin\n \t# $(CONTROLLER_GEN) rbac:roleName=cluster-role-binding webhook paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n+\t\n+\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=\"./...\"\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n+\n+.PHONY: build\n+build: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go -namespace-labels-path ./config/base/namespace-labels.yaml \n \n-# Build the docker image\n-docker-build:\n-\tdocker build --build-arg GOLANG_VERSION=${GOLANG_VERSION} -t ${IMG}:${TAG} .\n-\t@echo Built ${IMG}:${TAG}\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.",
        "comment_created_at": "2022-07-14T09:43:16+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "let's remove the dependency on the `test` rule. This would require users to have a configured Go environment to build the controller. \r\n\r\nIf in the future we'd like to run these tests then we should do this inside of the Dockerfile, just like we do for the CentralDashboard",
        "pr_file_module": null
      },
      {
        "comment_id": "920997563",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6491,
        "pr_file": "components/profile-controller/Makefile",
        "discussion_id": "920964404",
        "commented_code": "@@ -11,65 +11,136 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n-all: manager\n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n \n-# Run tests\n-test: generate fmt vet\n-\tgo test ./... -coverprofile cover.out\n+.PHONY: all\n+all: build\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n-\n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n-\n-# Install CRDs into a cluster\n-install:\n-\tkustomize build config/crd | kubectl apply -f -\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tcd config/manager && kustomize edit set image gcr.io/kubeflow-images-public/profile-controller=${IMG}\n-\tkustomize build config/default | kubectl apply -f -\n+##@ Development\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) crd:trivialVersions=true paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) crd paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \t# Uncomment when we remove the permissive ClusterRoleBinding to cluster-admin\n \t# $(CONTROLLER_GEN) rbac:roleName=cluster-role-binding webhook paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n+\t\n+\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=\"./...\"\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n+\n+.PHONY: build\n+build: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go -namespace-labels-path ./config/base/namespace-labels.yaml \n \n-# Build the docker image\n-docker-build:\n-\tdocker build --build-arg GOLANG_VERSION=${GOLANG_VERSION} -t ${IMG}:${TAG} .\n-\t@echo Built ${IMG}:${TAG}\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.",
        "comment_created_at": "2022-07-14T10:21:27+00:00",
        "comment_author": "apo-ger",
        "comment_body": "test dependency is removed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839931745",
    "pr_number": 6374,
    "pr_file": "components/notebook-controller/Makefile",
    "created_at": "2022-03-31T19:02:40+00:00",
    "commented_code": "# Image URL to use all building/pushing image targets\nIMG ?= gcr.io/kubeflow-images-public/notebook-controller\nIMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\nTAG ?= $(shell git describe --tags --always)\nSHELL := /bin/bash\nGOLANG_VERSION ?= 1.15\n\n# Whether to use cached images with GCB\nUSE_IMAGE_CACHE ?= true\n\n# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\nCRD_OPTIONS ?= \"crd\"",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "839931745",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-03-31T19:02:40+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "When I tried applying the new CRD on a cluster with the previous CRD I got the following errors back:\r\n```\r\nThe CustomResourceDefinition \"notebooks.kubeflow.org\" is invalid:\r\n* metadata.annotations: Too long: must have at most 262144 bytes\r\n* spec.preserveUnknownFields: Invalid value: true: must be false in order to use defaults in the schema\r\n```\r\n\r\nRegarding the `preserveUnknownFIelds`, could you explicitly set it to `false`?\r\n\r\nThis is also the recommended way in the docs to have compatibility: \r\nhttps://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning\r\nhttps://github.com/kubernetes-sigs/controller-tools/issues/476#issuecomment-691519936\r\n\r\nAlthough with a quick look at the kubebuilder docs I'm not 100% sure whether we should do this with a [marker](https://book.kubebuilder.io/reference/markers/crd-processing.html) or via the [makefile](https://book.kubebuilder.io/reference/generating-crd.html#multiple-versions)",
        "pr_file_module": null
      },
      {
        "comment_id": "840440645",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-04-01T10:17:54+00:00",
        "comment_author": "samuelvl",
        "comment_body": "Thanks for the comments! I'm starting to review them.\r\n\r\nIs `kubectl replace` instead of `kubectl apply` an option? It should fix both errors:\r\n\r\n```\r\nkubectl replace -f config/crd/bases/kubeflow.org_notebooks.yaml\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "850313417",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-04-14T10:32:50+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "After looking at this again I propose that we manually \r\n1. add the `spec.preserveUnknownFields: false` just for this release\r\n2. remove this field in KF 1.7, since it's only needed for the `apiextensions.k8s.io/v1beta1` to `apiextensions.k8s.io/v1` transition.\r\n\r\nThe `controller-gen` does not allow us to explicitly set this to false https://book.kubebuilder.io/reference/markers/crd-processing.html\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "853985090",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-04-20T10:36:05+00:00",
        "comment_author": "samuelvl",
        "comment_body": "I have added it to the `config/crd/patches/trivial_conversion_patch.yaml` file instead of using `yq` or `sed` hacks:\r\n\r\n```yaml\r\napiVersion: apiextensions.k8s.io/v1\r\nkind: CustomResourceDefinition\r\nmetadata:\r\n  name: notebooks.kubeflow.org\r\nspec:\r\n  preserveUnknownFields: false # TODO: Remove in Kubeflow 1.7 release\r\n  conversion:\r\n    strategy: None\r\n```\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "862437781",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-05-01T07:52:29+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "This is awesome @samuelvl!\r\n\r\nOne final nit, I see that you've commented out the `crd` part in the manifests, which results in the CRD to not be included when generating `base` or `overlays/kubeflow` \r\n\r\nhttps://github.com/kubeflow/kubeflow/pull/6374/files#diff-28481732533c7c75d2d2ba504e9670d90e72ed98f999115fd92a0f8e8a5aace2R20\r\n\r\nCould you revert it back, so that the CRD is included as well? We should be ready to merge afterwards",
        "pr_file_module": null
      },
      {
        "comment_id": "863698254",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-05-03T11:55:24+00:00",
        "comment_author": "samuelvl",
        "comment_body": "I commented the `crd` part to avoid this issue (https://github.com/prometheus-community/helm-charts/issues/1500 is similar): \r\n\r\n```\r\nThe CustomResourceDefinition \"notebooks.kubeflow.org\" is invalid: metadata.annotations: Too long: must have at most 262144 bytes\r\n``` \r\n\r\nI have reverted the original logic and added the `maxDescLen=0` option when generating the crd to avoid this issue, however we'll miss some information when using the `kubectl explain notebook` command:\r\n\r\n```\r\n$(CONTROLLER_GEN) rbac:roleName=role crd:maxDescLen=0 ...\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "863922630",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839931745",
        "commented_code": "@@ -1,18 +1,10 @@\n \n # Image URL to use all building/pushing image targets\n-IMG ?= gcr.io/kubeflow-images-public/notebook-controller\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/notebook-controller\n TAG ?= $(shell git describe --tags --always)\n-SHELL := /bin/bash\n-GOLANG_VERSION ?= 1.15\n \n-# Whether to use cached images with GCB\n-USE_IMAGE_CACHE ?= true\n-\n-# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)\n-CRD_OPTIONS ?= \"crd\"",
        "comment_created_at": "2022-05-03T15:47:44+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Hmm, indeed in this PR we made the CRD quite bigger since we now actually include the full PodSpec for validation.\r\n\r\nBut the `maxDescLen=0` seems like a good way to cut down significantly the size of it. The spec is currently only the PodSpec, for which descriptions are widely available so we are OK.\r\n\r\nGood job @samuelvl!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839948826",
    "pr_number": 6374,
    "pr_file": "components/notebook-controller/Makefile",
    "created_at": "2022-03-31T19:26:41+00:00",
    "commented_code": "GOBIN=$(shell go env GOBIN)\nendif\n\n# Setting SHELL to bash allows bash commands to be executed by recipes.\n# This is a requirement for 'setup-envtest.sh' in the test target.\n# Options are set to exit when a recipe line exits non-zero or a piped command fails.\nSHELL = /usr/bin/env bash -o pipefail\n.SHELLFLAGS = -ec\n\n.PHONY: all\nall: manager\n\n# check license\ncheck-license:\n\t./third_party/check-license.sh\n##@ General\n\n# Run tests\ntest: generate fmt vet manifests\n\tmkdir -p ${ENVTEST_ASSETS_DIR}\n\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n\tgo test ./api/... ./controllers/... -coverprofile cover.out\n# The help target prints out all targets with their descriptions organized\n# beneath their categories. The categories are represented by '##@' and the\n# target descriptions by '##'. The awk commands is responsible for reading the\n# entire set of makefiles included in this invocation, looking for lines of the\n# file as xyz: ## something, and then pretty-format the target and help. Then,\n# if there's a line with ##@ something, that gets pretty-printed as a category.\n# More info on the usage of ANSI control characters for terminal formatting:\n# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n# More info on the awk command:\n# http://linuxcommand.org/lc3_adv_awk.php\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n.PHONY: help\nhelp: ## Display this help.\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet\n\tgo run ./main.go\n##@ Development\n\n# Install CRDs into a cluster\ninstall: manifests\n\tkubectl apply -f config/crd/bases\n.PHONY: check-license\ncheck-license: ## Check third-party license\n\t./third_party/check-license.sh\n\n# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\ndeploy: manifests\n\tkubectl apply -f config/crd/bases\n\tkustomize build config/default | kubectl apply -f -\n.PHONY: manifests\nmanifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n\n# Generate manifests e.g. CRD, RBAC etc.\nmanifests: controller-gen\n\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n.PHONY: generate\ngenerate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n\n# Run go fmt against code\nfmt:\n.PHONY: fmt\nfmt: ## Run go fmt against code.\n\tgo fmt ./...\n\n# Run go vet against code\nvet:\n.PHONY: vet\nvet: ## Run go vet against code.\n\tgo vet ./...\n\n# Generate code\ngenerate: controller-gen\n\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n.PHONY: test\ntest: manifests generate fmt vet envtest ## Run tests.\n\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n\n##@ Build\n\n# Build the docker image\ndocker-build: test\n.PHONY: manager\nmanager: generate fmt vet ## Build manager binary.\n\tgo build -o bin/manager main.go\n\n.PHONY: run\nrun: manifests generate fmt vet ## Run a controller from your host.\n\tgo run ./main.go\n\n.PHONY: docker-build\ndocker-build: test ## Build docker image with the manager.\n\tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n\t@echo \"updating kustomize image patch file for manager resource\"\n\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n\n# Push the docker image\ndocker-push:\n.PHONY: docker-push\ndocker-push: ## Push docker image with the manager.\n\tdocker push ${IMG}:${TAG}\n\n# find or download controller-gen\n# download controller-gen if necessary\ncontroller-gen:\nifeq (, $(shell which controller-gen))\n\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\nCONTROLLER_GEN=$(GOBIN)/controller-gen\nelse\nCONTROLLER_GEN=$(shell which controller-gen)\nendif\n##@ Deployment\n\n# TODO(jlewi): Can we get rid of this and just use skaffold?\nbuild-gcr: test\n\tdocker build -t $(IMG):$(TAG) .\n\t@echo Built $(IMG):$(TAG)\nifndef ignore-not-found\n  ignore-not-found = false\nendif\n\npush-gcr: build-gcr\n\tdocker push $(IMG):$(TAG)\n\t@echo Pushed $(IMG):$(TAG)\n.PHONY: install\ninstall: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n\n.PHONY: uninstall\nuninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n\n.PHONY: deploy\ndeploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n\n.PHONY: undeploy\nundeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n\nCONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n.PHONY: controller-gen\ncontroller-gen: ## Download controller-gen locally if necessary.\n\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n\nKUSTOMIZE = $(shell pwd)/bin/kustomize\n.PHONY: kustomize\nkustomize: ## Download kustomize locally if necessary.\n\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "839948826",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839948826",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.\n \tdocker push ${IMG}:${TAG}\n \n-# find or download controller-gen\n-# download controller-gen if necessary\n-controller-gen:\n-ifeq (, $(shell which controller-gen))\n-\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\n-CONTROLLER_GEN=$(GOBIN)/controller-gen\n-else\n-CONTROLLER_GEN=$(shell which controller-gen)\n-endif\n+##@ Deployment\n \n-# TODO(jlewi): Can we get rid of this and just use skaffold?\n-build-gcr: test\n-\tdocker build -t $(IMG):$(TAG) .\n-\t@echo Built $(IMG):$(TAG)\n+ifndef ignore-not-found\n+  ignore-not-found = false\n+endif\n \n-push-gcr: build-gcr\n-\tdocker push $(IMG):$(TAG)\n-\t@echo Pushed $(IMG):$(TAG)\n+.PHONY: install\n+install: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n+\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n+\n+.PHONY: uninstall\n+uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+.PHONY: deploy\n+deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n+\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n+\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n+\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n+\n+.PHONY: undeploy\n+undeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+CONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n+.PHONY: controller-gen\n+controller-gen: ## Download controller-gen locally if necessary.\n+\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n+\n+KUSTOMIZE = $(shell pwd)/bin/kustomize\n+.PHONY: kustomize\n+kustomize: ## Download kustomize locally if necessary.\n+\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
        "comment_created_at": "2022-03-31T19:26:41+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I tried to `kustomize build config/crd` with a 3.2 version, since this was the one [used from manifests](https://github.com/kubeflow/manifests#prerequisites) but I got the following errors:\r\n```\r\nError: no matches for OriginalId apiextensions.k8s.io_v1beta1_CustomResourceDefinition|~X|notebooks.kubeflow.org; no matches for CurrentId apiextensions.k8s.io_v1beta1_CustomResourceDefinition|~X|notebooks.kubeflow.org; failed to find unique target for patch apiextensions.k8s.io_v1beta1_CustomResourceDefinition|notebooks.kubeflow.org\r\n``` \r\n\r\nDo you know why these occur? They were not shows in the previous iteration of the controller, so maybe something slightly changed in the autogenerated manifests?\r\n\r\nIf I use the 3.8 version from the makefile this error goes away. Also it's not shown even with 3.2 when I build the `base`, so it's not that critical. But let's try to understand why this happens. I'll try to look into it within the next days as well",
        "pr_file_module": null
      },
      {
        "comment_id": "840777413",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839948826",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.\n \tdocker push ${IMG}:${TAG}\n \n-# find or download controller-gen\n-# download controller-gen if necessary\n-controller-gen:\n-ifeq (, $(shell which controller-gen))\n-\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\n-CONTROLLER_GEN=$(GOBIN)/controller-gen\n-else\n-CONTROLLER_GEN=$(shell which controller-gen)\n-endif\n+##@ Deployment\n \n-# TODO(jlewi): Can we get rid of this and just use skaffold?\n-build-gcr: test\n-\tdocker build -t $(IMG):$(TAG) .\n-\t@echo Built $(IMG):$(TAG)\n+ifndef ignore-not-found\n+  ignore-not-found = false\n+endif\n \n-push-gcr: build-gcr\n-\tdocker push $(IMG):$(TAG)\n-\t@echo Pushed $(IMG):$(TAG)\n+.PHONY: install\n+install: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n+\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n+\n+.PHONY: uninstall\n+uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+.PHONY: deploy\n+deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n+\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n+\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n+\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n+\n+.PHONY: undeploy\n+undeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+CONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n+.PHONY: controller-gen\n+controller-gen: ## Download controller-gen locally if necessary.\n+\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n+\n+KUSTOMIZE = $(shell pwd)/bin/kustomize\n+.PHONY: kustomize\n+kustomize: ## Download kustomize locally if necessary.\n+\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
        "comment_created_at": "2022-04-01T17:14:26+00:00",
        "comment_author": "samuelvl",
        "comment_body": "It's failing because there is a patch trying to modify the old v1beta1 CRD but there is no match (obviously):\r\n\r\n```\r\npatchesJson6902:\r\n# Remove once the following issue is resolved:\r\n# https://github.com/kubeflow/kubeflow/issues/5722\r\n- path: patches/old_crd.yaml\r\n  target:\r\n    group: apiextensions.k8s.io\r\n    version: v1beta1 # <--------- This should be v1\r\n    kind: CustomResourceDefinition\r\n    name: notebooks.kubeflow.org\r\n ```\r\n \r\nSince https://github.com/kubeflow/kubeflow/issues/5722 is resolved I think the best solution is to remove the entire patch block, what do you think?\r\n\r\nIf we are using Kustomize 3.2 in manifests I can update the Makefile to download that version to be aligned, that may save some compatibility issues in the future.",
        "pr_file_module": null
      },
      {
        "comment_id": "850178203",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839948826",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.\n \tdocker push ${IMG}:${TAG}\n \n-# find or download controller-gen\n-# download controller-gen if necessary\n-controller-gen:\n-ifeq (, $(shell which controller-gen))\n-\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\n-CONTROLLER_GEN=$(GOBIN)/controller-gen\n-else\n-CONTROLLER_GEN=$(shell which controller-gen)\n-endif\n+##@ Deployment\n \n-# TODO(jlewi): Can we get rid of this and just use skaffold?\n-build-gcr: test\n-\tdocker build -t $(IMG):$(TAG) .\n-\t@echo Built $(IMG):$(TAG)\n+ifndef ignore-not-found\n+  ignore-not-found = false\n+endif\n \n-push-gcr: build-gcr\n-\tdocker push $(IMG):$(TAG)\n-\t@echo Pushed $(IMG):$(TAG)\n+.PHONY: install\n+install: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n+\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n+\n+.PHONY: uninstall\n+uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+.PHONY: deploy\n+deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n+\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n+\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n+\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n+\n+.PHONY: undeploy\n+undeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+CONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n+.PHONY: controller-gen\n+controller-gen: ## Download controller-gen locally if necessary.\n+\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n+\n+KUSTOMIZE = $(shell pwd)/bin/kustomize\n+.PHONY: kustomize\n+kustomize: ## Download kustomize locally if necessary.\n+\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
        "comment_created_at": "2022-04-14T07:50:45+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I agree to remove the patch altogether. The patch was making the validation more lax, by removing validation from the CPU/Memory fields.\r\n\r\n@samuelvl can you double check that creating a Notebook with the Jupyter web app also works as expected after this change? To make sure the backend is submitting objects that are valid.",
        "pr_file_module": null
      },
      {
        "comment_id": "854062860",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839948826",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.\n \tdocker push ${IMG}:${TAG}\n \n-# find or download controller-gen\n-# download controller-gen if necessary\n-controller-gen:\n-ifeq (, $(shell which controller-gen))\n-\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\n-CONTROLLER_GEN=$(GOBIN)/controller-gen\n-else\n-CONTROLLER_GEN=$(shell which controller-gen)\n-endif\n+##@ Deployment\n \n-# TODO(jlewi): Can we get rid of this and just use skaffold?\n-build-gcr: test\n-\tdocker build -t $(IMG):$(TAG) .\n-\t@echo Built $(IMG):$(TAG)\n+ifndef ignore-not-found\n+  ignore-not-found = false\n+endif\n \n-push-gcr: build-gcr\n-\tdocker push $(IMG):$(TAG)\n-\t@echo Pushed $(IMG):$(TAG)\n+.PHONY: install\n+install: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n+\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n+\n+.PHONY: uninstall\n+uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+.PHONY: deploy\n+deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n+\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n+\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n+\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n+\n+.PHONY: undeploy\n+undeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+CONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n+.PHONY: controller-gen\n+controller-gen: ## Download controller-gen locally if necessary.\n+\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n+\n+KUSTOMIZE = $(shell pwd)/bin/kustomize\n+.PHONY: kustomize\n+kustomize: ## Download kustomize locally if necessary.\n+\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
        "comment_created_at": "2022-04-20T12:14:24+00:00",
        "comment_author": "samuelvl",
        "comment_body": "I do confirm the backend creates the notebook object correctly after removing the patch:\r\n\r\n``` shell\r\n$ kubectl get notebooks\r\nNAME    AGE\r\nscipy   13m\r\n\r\n$ kubectl get pods     \r\nNAME      READY   STATUS    RESTARTS   AGE\r\nscipy-0   1/1     Running   0          10m\r\n```\r\n\r\nThis is the notebook created by the JWA:\r\n\r\n```yaml\r\napiVersion: kubeflow.org/v1\r\nkind: Notebook\r\nmetadata:\r\n  annotations:\r\n    notebooks.kubeflow.org/last-activity: \"2022-04-20T12:06:44Z\"\r\n    notebooks.kubeflow.org/server-type: jupyter\r\n  labels:\r\n    app: scipy\r\n  name: scipy\r\n  namespace: kubeflow-user\r\nspec:\r\n  template:\r\n    spec:\r\n      containers:\r\n      - image: public.ecr.aws/j1r0q0g6/notebooks/notebook-servers/jupyter-scipy:v1.5.0\r\n        imagePullPolicy: IfNotPresent\r\n        name: scipy\r\n        resources:\r\n          limits:\r\n            cpu: 600m\r\n            memory: 1288490188800m\r\n          requests:\r\n            cpu: 500m\r\n            memory: 1Gi\r\n        volumeMounts:\r\n        - mountPath: /dev/shm\r\n          name: dshm\r\n        - mountPath: /home/jovyan\r\n          name: scipy-volume\r\n      serviceAccountName: default-editor\r\n      volumes:\r\n      - emptyDir:\r\n          medium: Memory\r\n        name: dshm\r\n      - name: scipy-volume\r\n        persistentVolumeClaim:\r\n          claimName: scipy-volume\r\n``` \r\n\r\n\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "862436970",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839948826",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.\n \tdocker push ${IMG}:${TAG}\n \n-# find or download controller-gen\n-# download controller-gen if necessary\n-controller-gen:\n-ifeq (, $(shell which controller-gen))\n-\tgo get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.0\n-CONTROLLER_GEN=$(GOBIN)/controller-gen\n-else\n-CONTROLLER_GEN=$(shell which controller-gen)\n-endif\n+##@ Deployment\n \n-# TODO(jlewi): Can we get rid of this and just use skaffold?\n-build-gcr: test\n-\tdocker build -t $(IMG):$(TAG) .\n-\t@echo Built $(IMG):$(TAG)\n+ifndef ignore-not-found\n+  ignore-not-found = false\n+endif\n \n-push-gcr: build-gcr\n-\tdocker push $(IMG):$(TAG)\n-\t@echo Pushed $(IMG):$(TAG)\n+.PHONY: install\n+install: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.\n+\tkubectl get crd notebooks.kubeflow.org || $(KUSTOMIZE) build config/crd | kubectl create -f -\n+\n+.PHONY: uninstall\n+uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/crd | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+.PHONY: deploy\n+deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.\n+\tsed -i'' -e 's@newName: .*@newName: '\"${IMG}\"'@' ./config/base/kustomization.yaml\n+\tsed -i'' -e 's@newTag: .*@newTag: '\"${TAG}\"'@' ./config/base/kustomization.yaml\n+\t$(KUSTOMIZE) build config/base | kubectl apply -f -\n+\n+.PHONY: undeploy\n+undeploy: ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.\n+\t$(KUSTOMIZE) build config/base | kubectl delete --ignore-not-found=$(ignore-not-found) -f -\n+\n+CONTROLLER_GEN = $(shell pwd)/bin/controller-gen\n+.PHONY: controller-gen\n+controller-gen: ## Download controller-gen locally if necessary.\n+\t$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)\n+\n+KUSTOMIZE = $(shell pwd)/bin/kustomize\n+.PHONY: kustomize\n+kustomize: ## Download kustomize locally if necessary.\n+\t$(call go-get-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v3@v3.8.7)",
        "comment_created_at": "2022-05-01T07:44:23+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Perfect!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "519691721",
    "pr_number": 5378,
    "pr_file": "components/notebook-controller/Makefile",
    "created_at": "2020-11-09T10:10:35+00:00",
    "commented_code": "# Run tests\ntest: generate fmt vet manifests check-license\n\tmkdir -p ${ENVTEST_ASSETS_DIR}\n\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/master/hack/setup-envtest.sh",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "519691721",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5378,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "519691721",
        "commented_code": "@@ -25,6 +28,9 @@ check-license:\n \n # Run tests\n test: generate fmt vet manifests check-license\n+\tmkdir -p ${ENVTEST_ASSETS_DIR}\n+\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/master/hack/setup-envtest.sh",
        "comment_created_at": "2020-11-09T10:10:35+00:00",
        "comment_author": "yanniszark",
        "comment_body": "Can you pin the script at a particular commit?\r\nThis way, we can be sure an update in this external repo doesn't break us.",
        "pr_file_module": null
      },
      {
        "comment_id": "520057276",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5378,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "519691721",
        "commented_code": "@@ -25,6 +28,9 @@ check-license:\n \n # Run tests\n test: generate fmt vet manifests check-license\n+\tmkdir -p ${ENVTEST_ASSETS_DIR}\n+\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/master/hack/setup-envtest.sh",
        "comment_created_at": "2020-11-09T19:12:56+00:00",
        "comment_author": "naveensrinivasan",
        "comment_body": "Thanks, I will do that. 👍 ",
        "pr_file_module": null
      }
    ]
  }
]