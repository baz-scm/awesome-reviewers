[
  {
    "discussion_id": "493976616",
    "pr_number": 5316,
    "pr_file": "components/crud-web-apps/jupyter/backend/apps/common/routes/patch.py",
    "created_at": "2020-09-24T00:47:04+00:00",
    "commented_code": "import datetime as dt\n\nfrom flask import request\nfrom werkzeug import exceptions\n\nfrom kubeflow.kubeflow.flask_rest_backend import api, decorators, logging\n\nfrom .. import status\nfrom . import bp\n\nlog = logging.getLogger(__name__)\n\nSTOP_ATTR = \"stopped\"\nATTRIBUTES = set([STOP_ATTR])\n\n\n# Routes\n@bp.route(\n    \"/api/namespaces/<namespace>/notebooks/<notebook>\", methods=[\"PATCH\"]\n)\n@decorators.request_is_json_type\ndef patch_notebook(namespace, notebook):\n    request_body = request.get_json()\n    log.info(\"Got body: %s\", request_body)\n\n    if request_body is None:\n        raise exceptions.BadRequest(\"Request doesn't have a body.\")\n\n    # Ensure request has at least one valid command\n    if not any(attr in ATTRIBUTES for attr in request_body.keys()):\n        raise exceptions.BadRequest(\n            \"Request body must include at least one supported key: %s\"\n            % list(ATTRIBUTES)\n        )\n\n    # start/stop a notebook\n    if STOP_ATTR in request_body:\n        start_stop_notebook(namespace, notebook, request_body)\n\n    return api.success_response()\n\n\n# helper functions\ndef start_stop_notebook(namespace, notebook, request_body):",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "493976616",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5316,
        "pr_file": "components/crud-web-apps/jupyter/backend/apps/common/routes/patch.py",
        "discussion_id": "493976616",
        "commented_code": "@@ -0,0 +1,80 @@\n+import datetime as dt\n+\n+from flask import request\n+from werkzeug import exceptions\n+\n+from kubeflow.kubeflow.flask_rest_backend import api, decorators, logging\n+\n+from .. import status\n+from . import bp\n+\n+log = logging.getLogger(__name__)\n+\n+STOP_ATTR = \"stopped\"\n+ATTRIBUTES = set([STOP_ATTR])\n+\n+\n+# Routes\n+@bp.route(\n+    \"/api/namespaces/<namespace>/notebooks/<notebook>\", methods=[\"PATCH\"]\n+)\n+@decorators.request_is_json_type\n+def patch_notebook(namespace, notebook):\n+    request_body = request.get_json()\n+    log.info(\"Got body: %s\", request_body)\n+\n+    if request_body is None:\n+        raise exceptions.BadRequest(\"Request doesn't have a body.\")\n+\n+    # Ensure request has at least one valid command\n+    if not any(attr in ATTRIBUTES for attr in request_body.keys()):\n+        raise exceptions.BadRequest(\n+            \"Request body must include at least one supported key: %s\"\n+            % list(ATTRIBUTES)\n+        )\n+\n+    # start/stop a notebook\n+    if STOP_ATTR in request_body:\n+        start_stop_notebook(namespace, notebook, request_body)\n+\n+    return api.success_response()\n+\n+\n+# helper functions\n+def start_stop_notebook(namespace, notebook, request_body):",
        "comment_created_at": "2020-09-24T00:47:04+00:00",
        "comment_author": "thesuperzapper",
        "comment_body": "Why does this need to be a separate function?\r\n\r\nThe patch function is sufficient? ",
        "pr_file_module": null
      },
      {
        "comment_id": "494179332",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5316,
        "pr_file": "components/crud-web-apps/jupyter/backend/apps/common/routes/patch.py",
        "discussion_id": "493976616",
        "commented_code": "@@ -0,0 +1,80 @@\n+import datetime as dt\n+\n+from flask import request\n+from werkzeug import exceptions\n+\n+from kubeflow.kubeflow.flask_rest_backend import api, decorators, logging\n+\n+from .. import status\n+from . import bp\n+\n+log = logging.getLogger(__name__)\n+\n+STOP_ATTR = \"stopped\"\n+ATTRIBUTES = set([STOP_ATTR])\n+\n+\n+# Routes\n+@bp.route(\n+    \"/api/namespaces/<namespace>/notebooks/<notebook>\", methods=[\"PATCH\"]\n+)\n+@decorators.request_is_json_type\n+def patch_notebook(namespace, notebook):\n+    request_body = request.get_json()\n+    log.info(\"Got body: %s\", request_body)\n+\n+    if request_body is None:\n+        raise exceptions.BadRequest(\"Request doesn't have a body.\")\n+\n+    # Ensure request has at least one valid command\n+    if not any(attr in ATTRIBUTES for attr in request_body.keys()):\n+        raise exceptions.BadRequest(\n+            \"Request body must include at least one supported key: %s\"\n+            % list(ATTRIBUTES)\n+        )\n+\n+    # start/stop a notebook\n+    if STOP_ATTR in request_body:\n+        start_stop_notebook(namespace, notebook, request_body)\n+\n+    return api.success_response()\n+\n+\n+# helper functions\n+def start_stop_notebook(namespace, notebook, request_body):",
        "comment_created_at": "2020-09-24T09:41:56+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I was thinking that If in the future we want to handle other cases in the PATCH request, then each one of them should be its own function and not have all the logic unfolded in the PATCH handler",
        "pr_file_module": null
      },
      {
        "comment_id": "494180275",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5316,
        "pr_file": "components/crud-web-apps/jupyter/backend/apps/common/routes/patch.py",
        "discussion_id": "493976616",
        "commented_code": "@@ -0,0 +1,80 @@\n+import datetime as dt\n+\n+from flask import request\n+from werkzeug import exceptions\n+\n+from kubeflow.kubeflow.flask_rest_backend import api, decorators, logging\n+\n+from .. import status\n+from . import bp\n+\n+log = logging.getLogger(__name__)\n+\n+STOP_ATTR = \"stopped\"\n+ATTRIBUTES = set([STOP_ATTR])\n+\n+\n+# Routes\n+@bp.route(\n+    \"/api/namespaces/<namespace>/notebooks/<notebook>\", methods=[\"PATCH\"]\n+)\n+@decorators.request_is_json_type\n+def patch_notebook(namespace, notebook):\n+    request_body = request.get_json()\n+    log.info(\"Got body: %s\", request_body)\n+\n+    if request_body is None:\n+        raise exceptions.BadRequest(\"Request doesn't have a body.\")\n+\n+    # Ensure request has at least one valid command\n+    if not any(attr in ATTRIBUTES for attr in request_body.keys()):\n+        raise exceptions.BadRequest(\n+            \"Request body must include at least one supported key: %s\"\n+            % list(ATTRIBUTES)\n+        )\n+\n+    # start/stop a notebook\n+    if STOP_ATTR in request_body:\n+        start_stop_notebook(namespace, notebook, request_body)\n+\n+    return api.success_response()\n+\n+\n+# helper functions\n+def start_stop_notebook(namespace, notebook, request_body):",
        "comment_created_at": "2020-09-24T09:43:32+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "I was thinking that If in the future we want to handle other cases in the PATCH request, then each one of them should be its own function and not have all the logic unfolded in the PATCH handler",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "467112305",
    "pr_number": 5180,
    "pr_file": "components/crud-web-apps/tensorboards/backend/app/routes/delete.py",
    "created_at": "2020-08-07T15:29:25+00:00",
    "commented_code": "from kubeflow.kubeflow.crud_backend import api, logging\n\nfrom . import bp\n\nlog = logging.getLogger(__name__)\n\n\n@bp.route(\"/api/namespaces/<namespace>/tensorboards/<tensorboard>\", methods=[\"DELETE\"]) # noqa E501",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "467112305",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5180,
        "pr_file": "components/crud-web-apps/tensorboards/backend/app/routes/delete.py",
        "discussion_id": "467112305",
        "commented_code": "@@ -0,0 +1,19 @@\n+from kubeflow.kubeflow.crud_backend import api, logging\n+\n+from . import bp\n+\n+log = logging.getLogger(__name__)\n+\n+\n+@bp.route(\"/api/namespaces/<namespace>/tensorboards/<tensorboard>\", methods=[\"DELETE\"]) # noqa E501",
        "comment_created_at": "2020-08-07T15:29:25+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "We should not ignore the E501 warnings.\r\nIf the line is too long you could put each argument in a distinct line.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "447076008",
    "pr_number": 5074,
    "pr_file": "components/jupyter-web-app/backend/kubeflow_jupyter/common/utils.py",
    "created_at": "2020-06-29T15:53:11+00:00",
    "commented_code": "# VAR: change this function according to the main resource\n    cntr = rsrc[\"spec\"][\"template\"][\"spec\"][\"containers\"][0]\n    status, reason = process_status(rsrc, rsrc_events)\n    \n    # GPUs may not have been assigned to a pod",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "447076008",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5074,
        "pr_file": "components/jupyter-web-app/backend/kubeflow_jupyter/common/utils.py",
        "discussion_id": "447076008",
        "commented_code": "@@ -263,6 +263,19 @@ def process_resource(rsrc, rsrc_events):\n     # VAR: change this function according to the main resource\n     cntr = rsrc[\"spec\"][\"template\"][\"spec\"][\"containers\"][0]\n     status, reason = process_status(rsrc, rsrc_events)\n+    \n+    # GPUs may not have been assigned to a pod ",
        "comment_created_at": "2020-06-29T15:53:11+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "nit: @lalithvaka could you add this logic into a distinct function on its own?",
        "pr_file_module": null
      },
      {
        "comment_id": "447478189",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5074,
        "pr_file": "components/jupyter-web-app/backend/kubeflow_jupyter/common/utils.py",
        "discussion_id": "447076008",
        "commented_code": "@@ -263,6 +263,19 @@ def process_resource(rsrc, rsrc_events):\n     # VAR: change this function according to the main resource\n     cntr = rsrc[\"spec\"][\"template\"][\"spec\"][\"containers\"][0]\n     status, reason = process_status(rsrc, rsrc_events)\n+    \n+    # GPUs may not have been assigned to a pod ",
        "comment_created_at": "2020-06-30T07:44:47+00:00",
        "comment_author": "lalithvaka",
        "comment_body": "@kimwnasptd submitted the change requested. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "341452867",
    "pr_number": 4447,
    "pr_file": "testing/gcp_util.py",
    "created_at": "2019-11-01T05:07:38+00:00",
    "commented_code": "resp = requests.request(\n          \"GET\",\n          url,\n          headers={\n              \"Authorization\":\n              \"Bearer {}\".format(google_open_id_connect_token)\n          },\n          verify=False)\n          verify=False) if use_basic_auth else requests.request(",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "341452867",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4447,
        "pr_file": "testing/gcp_util.py",
        "discussion_id": "341452867",
        "commented_code": "@@ -100,19 +102,22 @@ def endpoint_is_ready(url, wait_min=15):\n       resp = requests.request(\n           \"GET\",\n           url,\n-          headers={\n-              \"Authorization\":\n-              \"Bearer {}\".format(google_open_id_connect_token)\n-          },\n-          verify=False)\n+          verify=False) if use_basic_auth else requests.request(",
        "comment_created_at": "2019-11-01T05:07:38+00:00",
        "comment_author": "jlewi",
        "comment_body": "Is there a typo here? This doesn't looks like valid syntax",
        "pr_file_module": null
      },
      {
        "comment_id": "341682418",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4447,
        "pr_file": "testing/gcp_util.py",
        "discussion_id": "341452867",
        "commented_code": "@@ -100,19 +102,22 @@ def endpoint_is_ready(url, wait_min=15):\n       resp = requests.request(\n           \"GET\",\n           url,\n-          headers={\n-              \"Authorization\":\n-              \"Bearer {}\".format(google_open_id_connect_token)\n-          },\n-          verify=False)\n+          verify=False) if use_basic_auth else requests.request(",
        "comment_created_at": "2019-11-01T17:49:02+00:00",
        "comment_author": "gabrielwen",
        "comment_body": "yes, it is valid - this is like Python version of syntax sugar.",
        "pr_file_module": null
      },
      {
        "comment_id": "341717177",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4447,
        "pr_file": "testing/gcp_util.py",
        "discussion_id": "341452867",
        "commented_code": "@@ -100,19 +102,22 @@ def endpoint_is_ready(url, wait_min=15):\n       resp = requests.request(\n           \"GET\",\n           url,\n-          headers={\n-              \"Authorization\":\n-              \"Bearer {}\".format(google_open_id_connect_token)\n-          },\n-          verify=False)\n+          verify=False) if use_basic_auth else requests.request(",
        "comment_created_at": "2019-11-01T19:19:29+00:00",
        "comment_author": "jlewi",
        "comment_body": "Google style guide suggests eschewing complex \"list comprehensions\". If it doesn't fit on one line its a good indicator its too complicated.\r\n\r\nCan we use a standard multi-line if/else statement?",
        "pr_file_module": null
      },
      {
        "comment_id": "341742715",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4447,
        "pr_file": "testing/gcp_util.py",
        "discussion_id": "341452867",
        "commented_code": "@@ -100,19 +102,22 @@ def endpoint_is_ready(url, wait_min=15):\n       resp = requests.request(\n           \"GET\",\n           url,\n-          headers={\n-              \"Authorization\":\n-              \"Bearer {}\".format(google_open_id_connect_token)\n-          },\n-          verify=False)\n+          verify=False) if use_basic_auth else requests.request(",
        "comment_created_at": "2019-11-01T20:39:41+00:00",
        "comment_author": "gabrielwen",
        "comment_body": "done.",
        "pr_file_module": null
      }
    ]
  }
]