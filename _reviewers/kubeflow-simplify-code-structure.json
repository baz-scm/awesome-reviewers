[
  {
    "discussion_id": "857440867",
    "pr_number": 6435,
    "pr_file": "components/profile-controller/controllers/profile_controller.go",
    "created_at": "2022-04-25T09:39:08+00:00",
    "commented_code": "},\n\t\t\t})\n\t\t}\n\t}\n\tif err := r.Update(ctx, profileIns); err != nil {\n\t\treturn err\n\t\tif err := r.Update(ctx, profileIns); err != nil {\n\t\t\treturn err\n\t\t}",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "857440867",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6435,
        "pr_file": "components/profile-controller/controllers/profile_controller.go",
        "discussion_id": "857440867",
        "commented_code": "@@ -710,9 +710,10 @@ func (r *ProfileReconciler) PatchDefaultPluginSpec(ctx context.Context, profileI\n \t\t\t\t},\n \t\t\t})\n \t\t}\n-\t}\n-\tif err := r.Update(ctx, profileIns); err != nil {\n-\t\treturn err\n+\t\tif err := r.Update(ctx, profileIns); err != nil {\n+\t\t\treturn err\n+\t\t}\n+",
        "comment_created_at": "2022-04-25T09:39:08+00:00",
        "comment_author": "umka1332",
        "comment_body": "You should put it even higher - there is no point in updating the profile unless something is changed in this profile. And `profileIns` is changed only in the innermost if statement.",
        "pr_file_module": null
      },
      {
        "comment_id": "881192272",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6435,
        "pr_file": "components/profile-controller/controllers/profile_controller.go",
        "discussion_id": "857440867",
        "commented_code": "@@ -710,9 +710,10 @@ func (r *ProfileReconciler) PatchDefaultPluginSpec(ctx context.Context, profileI\n \t\t\t\t},\n \t\t\t})\n \t\t}\n-\t}\n-\tif err := r.Update(ctx, profileIns); err != nil {\n-\t\treturn err\n+\t\tif err := r.Update(ctx, profileIns); err != nil {\n+\t\t\treturn err\n+\t\t}\n+",
        "comment_created_at": "2022-05-25T03:50:59+00:00",
        "comment_author": "henrysecond1",
        "comment_body": "Nice catch! Thank you",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "955983665",
    "pr_number": 6628,
    "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
    "created_at": "2022-08-26T12:17:52+00:00",
    "commented_code": "return ctrl.Result{RequeueAfter: culler.GetRequeueTime()}, nil\n}\n\nfunc updateNotebookStatus(r *NotebookReconciler, nb *v1beta1.Notebook,\n\tsts *appsv1.StatefulSet, req ctrl.Request) (bool, error) {\n\n\tlog := r.Log.WithValues(\"notebook\", req.NamespacedName)\n\tctx := context.Background()\n\n\tstatusUpdate := false\n\t// Initialize Notebook CR Status\n\tif nb.Status.Conditions == nil {\n\t\tlog.Info(\"Initializing Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\tnewStatus := initializeStatus()\n\t\tnb.Status = newStatus\n\t\tstatusUpdate = true\n\t}\n\n\t// Update the Notebook CR status.readyReplicas if the status is changed\n\tif sts.Status.ReadyReplicas != nb.Status.ReadyReplicas {\n\t\tlog.Info(\"Updating status.ReadyReplicas\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\tnb.Status.ReadyReplicas = sts.Status.ReadyReplicas\n\t\tstatusUpdate = true\n\t}\n\n\t// Check the pod status\n\tpod := &corev1.Pod{}\n\tpodFound := false\n\terr := r.Get(ctx, types.NamespacedName{Name: sts.Name + \"-0\", Namespace: sts.Namespace}, pod)\n\tif err != nil && apierrs.IsNotFound(err) {\n\t\t// This should be reconciled by the StatefulSet\n\t\tlog.Info(\"Pod not found...\")\n\t\treturn podFound, nil\n\t} else if err != nil {\n\t\treturn podFound, err\n\t} else {\n\t\tpodFound = true\n\t\t// Update status of the CR using the ContainerState of\n\t\t// the container that has the same name as the CR.\n\t\t// If no container of same name is found, the state of the CR is not updated.\n\t\tif len(pod.Status.ContainerStatuses) > 0 {\n\t\t\tnotebookContainerFound := false\n\t\t\tfor i := range pod.Status.ContainerStatuses {\n\t\t\t\tif pod.Status.ContainerStatuses[i].Name != nb.Name {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif pod.Status.ContainerStatuses[i].State == nb.Status.ContainerState {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t// Update Notebook CR's status.ContainerState\n\t\t\t\tlog.Info(\"Updating Notebook CR state: \", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\t\t\tcs := pod.Status.ContainerStatuses[i].State\n\t\t\t\tnb.Status.ContainerState = cs\n\t\t\t\t// Mirroring pod condition\n\t\t\t\tnotebookConditions := []v1beta1.NotebookCondition{}\n\t\t\t\tfor i := range pod.Status.Conditions {\n\t\t\t\t\tcondition := PodCondToNotebookCond(pod.Status.Conditions[i])\n\t\t\t\t\tlog.Info(\"Mirroring pod condition: \", \"namespace\", nb.Namespace, \"name\", nb.Name, \"type\", condition.Type,\n\t\t\t\t\t\t\"status\", condition.Status, \"reason\", condition.Reason, \"message\", condition.Message)\n\t\t\t\t\tnotebookConditions = append(notebookConditions, condition)\n\t\t\t\t}\n\t\t\t\tnb.Status.Conditions = notebookConditions\n\n\t\t\t\tstatusUpdate = true\n\t\t\t\tnotebookContainerFound = true\n\t\t\t\tbreak\n\n\t\t\t}\n\t\t\tif !notebookContainerFound {\n\t\t\t\tlog.Error(nil, \"Could not find the Notebook container, will not update the status of the CR. No container has the same name as the CR.\", \"CR name:\", nb.Name)\n\t\t\t}\n\t\t}\n\t}\n\n\tif statusUpdate {\n\t\tlog.Info(\"Updating Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n\t\terr = r.Status().Update(ctx, nb)\n\t\tif err != nil {\n\t\t\treturn podFound, err\n\t\t}\n\t}\n\n\treturn podFound, nil\n}\n\nfunc initializeStatus() v1beta1.NotebookStatus {",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "955983665",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6628,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "955983665",
        "commented_code": "@@ -324,6 +269,102 @@ func (r *NotebookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (c\n \treturn ctrl.Result{RequeueAfter: culler.GetRequeueTime()}, nil\n }\n \n+func updateNotebookStatus(r *NotebookReconciler, nb *v1beta1.Notebook,\n+\tsts *appsv1.StatefulSet, req ctrl.Request) (bool, error) {\n+\n+\tlog := r.Log.WithValues(\"notebook\", req.NamespacedName)\n+\tctx := context.Background()\n+\n+\tstatusUpdate := false\n+\t// Initialize Notebook CR Status\n+\tif nb.Status.Conditions == nil {\n+\t\tlog.Info(\"Initializing Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnewStatus := initializeStatus()\n+\t\tnb.Status = newStatus\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Update the Notebook CR status.readyReplicas if the status is changed\n+\tif sts.Status.ReadyReplicas != nb.Status.ReadyReplicas {\n+\t\tlog.Info(\"Updating status.ReadyReplicas\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnb.Status.ReadyReplicas = sts.Status.ReadyReplicas\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Check the pod status\n+\tpod := &corev1.Pod{}\n+\tpodFound := false\n+\terr := r.Get(ctx, types.NamespacedName{Name: sts.Name + \"-0\", Namespace: sts.Namespace}, pod)\n+\tif err != nil && apierrs.IsNotFound(err) {\n+\t\t// This should be reconciled by the StatefulSet\n+\t\tlog.Info(\"Pod not found...\")\n+\t\treturn podFound, nil\n+\t} else if err != nil {\n+\t\treturn podFound, err\n+\t} else {\n+\t\tpodFound = true\n+\t\t// Update status of the CR using the ContainerState of\n+\t\t// the container that has the same name as the CR.\n+\t\t// If no container of same name is found, the state of the CR is not updated.\n+\t\tif len(pod.Status.ContainerStatuses) > 0 {\n+\t\t\tnotebookContainerFound := false\n+\t\t\tfor i := range pod.Status.ContainerStatuses {\n+\t\t\t\tif pod.Status.ContainerStatuses[i].Name != nb.Name {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tif pod.Status.ContainerStatuses[i].State == nb.Status.ContainerState {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\t// Update Notebook CR's status.ContainerState\n+\t\t\t\tlog.Info(\"Updating Notebook CR state: \", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\t\t\tcs := pod.Status.ContainerStatuses[i].State\n+\t\t\t\tnb.Status.ContainerState = cs\n+\t\t\t\t// Mirroring pod condition\n+\t\t\t\tnotebookConditions := []v1beta1.NotebookCondition{}\n+\t\t\t\tfor i := range pod.Status.Conditions {\n+\t\t\t\t\tcondition := PodCondToNotebookCond(pod.Status.Conditions[i])\n+\t\t\t\t\tlog.Info(\"Mirroring pod condition: \", \"namespace\", nb.Namespace, \"name\", nb.Name, \"type\", condition.Type,\n+\t\t\t\t\t\t\"status\", condition.Status, \"reason\", condition.Reason, \"message\", condition.Message)\n+\t\t\t\t\tnotebookConditions = append(notebookConditions, condition)\n+\t\t\t\t}\n+\t\t\t\tnb.Status.Conditions = notebookConditions\n+\n+\t\t\t\tstatusUpdate = true\n+\t\t\t\tnotebookContainerFound = true\n+\t\t\t\tbreak\n+\n+\t\t\t}\n+\t\t\tif !notebookContainerFound {\n+\t\t\t\tlog.Error(nil, \"Could not find the Notebook container, will not update the status of the CR. No container has the same name as the CR.\", \"CR name:\", nb.Name)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif statusUpdate {\n+\t\tlog.Info(\"Updating Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\terr = r.Status().Update(ctx, nb)\n+\t\tif err != nil {\n+\t\t\treturn podFound, err\n+\t\t}\n+\t}\n+\n+\treturn podFound, nil\n+}\n+\n+func initializeStatus() v1beta1.NotebookStatus {",
        "comment_created_at": "2022-08-26T12:17:52+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Let's remove this function. We only need this initialization in one place and can simplify with something like:\r\n\r\n```golang\r\nstatus := v1beta1.NotebookStatus{\r\n    Conditions:     make([]v1beta1.NotebookCondition, 0),\r\n    ReadyReplicas:  sts.Status.ReadyReplicas,\r\n    ContainerState: corev1.ContainerState{},\r\n}\r\n```",
        "pr_file_module": null
      },
      {
        "comment_id": "957337073",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6628,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "955983665",
        "commented_code": "@@ -324,6 +269,102 @@ func (r *NotebookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (c\n \treturn ctrl.Result{RequeueAfter: culler.GetRequeueTime()}, nil\n }\n \n+func updateNotebookStatus(r *NotebookReconciler, nb *v1beta1.Notebook,\n+\tsts *appsv1.StatefulSet, req ctrl.Request) (bool, error) {\n+\n+\tlog := r.Log.WithValues(\"notebook\", req.NamespacedName)\n+\tctx := context.Background()\n+\n+\tstatusUpdate := false\n+\t// Initialize Notebook CR Status\n+\tif nb.Status.Conditions == nil {\n+\t\tlog.Info(\"Initializing Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnewStatus := initializeStatus()\n+\t\tnb.Status = newStatus\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Update the Notebook CR status.readyReplicas if the status is changed\n+\tif sts.Status.ReadyReplicas != nb.Status.ReadyReplicas {\n+\t\tlog.Info(\"Updating status.ReadyReplicas\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\tnb.Status.ReadyReplicas = sts.Status.ReadyReplicas\n+\t\tstatusUpdate = true\n+\t}\n+\n+\t// Check the pod status\n+\tpod := &corev1.Pod{}\n+\tpodFound := false\n+\terr := r.Get(ctx, types.NamespacedName{Name: sts.Name + \"-0\", Namespace: sts.Namespace}, pod)\n+\tif err != nil && apierrs.IsNotFound(err) {\n+\t\t// This should be reconciled by the StatefulSet\n+\t\tlog.Info(\"Pod not found...\")\n+\t\treturn podFound, nil\n+\t} else if err != nil {\n+\t\treturn podFound, err\n+\t} else {\n+\t\tpodFound = true\n+\t\t// Update status of the CR using the ContainerState of\n+\t\t// the container that has the same name as the CR.\n+\t\t// If no container of same name is found, the state of the CR is not updated.\n+\t\tif len(pod.Status.ContainerStatuses) > 0 {\n+\t\t\tnotebookContainerFound := false\n+\t\t\tfor i := range pod.Status.ContainerStatuses {\n+\t\t\t\tif pod.Status.ContainerStatuses[i].Name != nb.Name {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\tif pod.Status.ContainerStatuses[i].State == nb.Status.ContainerState {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\t\t// Update Notebook CR's status.ContainerState\n+\t\t\t\tlog.Info(\"Updating Notebook CR state: \", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\t\t\tcs := pod.Status.ContainerStatuses[i].State\n+\t\t\t\tnb.Status.ContainerState = cs\n+\t\t\t\t// Mirroring pod condition\n+\t\t\t\tnotebookConditions := []v1beta1.NotebookCondition{}\n+\t\t\t\tfor i := range pod.Status.Conditions {\n+\t\t\t\t\tcondition := PodCondToNotebookCond(pod.Status.Conditions[i])\n+\t\t\t\t\tlog.Info(\"Mirroring pod condition: \", \"namespace\", nb.Namespace, \"name\", nb.Name, \"type\", condition.Type,\n+\t\t\t\t\t\t\"status\", condition.Status, \"reason\", condition.Reason, \"message\", condition.Message)\n+\t\t\t\t\tnotebookConditions = append(notebookConditions, condition)\n+\t\t\t\t}\n+\t\t\t\tnb.Status.Conditions = notebookConditions\n+\n+\t\t\t\tstatusUpdate = true\n+\t\t\t\tnotebookContainerFound = true\n+\t\t\t\tbreak\n+\n+\t\t\t}\n+\t\t\tif !notebookContainerFound {\n+\t\t\t\tlog.Error(nil, \"Could not find the Notebook container, will not update the status of the CR. No container has the same name as the CR.\", \"CR name:\", nb.Name)\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif statusUpdate {\n+\t\tlog.Info(\"Updating Notebook CR Status\", \"namespace\", nb.Namespace, \"name\", nb.Name)\n+\t\terr = r.Status().Update(ctx, nb)\n+\t\tif err != nil {\n+\t\t\treturn podFound, err\n+\t\t}\n+\t}\n+\n+\treturn podFound, nil\n+}\n+\n+func initializeStatus() v1beta1.NotebookStatus {",
        "comment_created_at": "2022-08-29T13:27:57+00:00",
        "comment_author": "apo-ger",
        "comment_body": "Fixed!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "604789893",
    "pr_number": 5761,
    "pr_file": "components/profile-controller/controllers/profile_controller.go",
    "created_at": "2021-03-31T10:44:12+00:00",
    "commented_code": "return\n}\n\nfunc enforceNamespaceLabelsFromConfig(ns *corev1.Namespace, logger logr.Logger) {\n\tif ns.Labels == nil {\n\t\tns.Labels = make(map[string]string)\n\t}\n\n\tfor k, v := range enforcedKubeflowNamespaceLabels {\n\t\texistingValue, ok := ns.Labels[k]\n\t\tif len(v) == 0 {\n\t\t\t// When there is an empty value, k should be removed.\n\t\t\tif ok {\n\t\t\t\tdelete(ns.Labels, k)\n\t\t\t}\n\t\t} else {\n\t\t\tif !ok || existingValue != v {",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "604789893",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5761,
        "pr_file": "components/profile-controller/controllers/profile_controller.go",
        "discussion_id": "604789893",
        "commented_code": "@@ -617,15 +630,48 @@ func removeString(slice []string, s string) (result []string) {\n \treturn\n }\n \n+func enforceNamespaceLabelsFromConfig(ns *corev1.Namespace, logger logr.Logger) {\n+\tif ns.Labels == nil {\n+\t\tns.Labels = make(map[string]string)\n+\t}\n+\n+\tfor k, v := range enforcedKubeflowNamespaceLabels {\n+\t\texistingValue, ok := ns.Labels[k]\n+\t\tif len(v) == 0 {\n+\t\t\t// When there is an empty value, k should be removed.\n+\t\t\tif ok {\n+\t\t\t\tdelete(ns.Labels, k)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif !ok || existingValue != v {",
        "comment_created_at": "2021-03-31T10:44:12+00:00",
        "comment_author": "Bobgy",
        "comment_body": "The if seems unnecessary, no matter what, you will set this label",
        "pr_file_module": null
      },
      {
        "comment_id": "605286906",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5761,
        "pr_file": "components/profile-controller/controllers/profile_controller.go",
        "discussion_id": "604789893",
        "commented_code": "@@ -617,15 +630,48 @@ func removeString(slice []string, s string) (result []string) {\n \treturn\n }\n \n+func enforceNamespaceLabelsFromConfig(ns *corev1.Namespace, logger logr.Logger) {\n+\tif ns.Labels == nil {\n+\t\tns.Labels = make(map[string]string)\n+\t}\n+\n+\tfor k, v := range enforcedKubeflowNamespaceLabels {\n+\t\texistingValue, ok := ns.Labels[k]\n+\t\tif len(v) == 0 {\n+\t\t\t// When there is an empty value, k should be removed.\n+\t\t\tif ok {\n+\t\t\t\tdelete(ns.Labels, k)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif !ok || existingValue != v {",
        "comment_created_at": "2021-03-31T23:38:03+00:00",
        "comment_author": "zijianjoy",
        "comment_body": "You are right! Removed this if condition.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "547974495",
    "pr_number": 5314,
    "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
    "created_at": "2020-12-23T14:05:47+00:00",
    "commented_code": "} else {\n\t\t// Got the pod\n\t\tpodFound = true\n\t\tif len(pod.Status.ContainerStatuses) > 0 &&\n\t\t\tpod.Status.ContainerStatuses[0].State != instance.Status.ContainerState {\n\t\t\tlog.Info(\"Updating container state: \", \"namespace\", instance.Namespace, \"name\", instance.Name)\n\t\t\tcs := pod.Status.ContainerStatuses[0].State\n\t\t\tinstance.Status.ContainerState = cs\n\t\t\toldConditions := instance.Status.Conditions\n\t\t\tnewCondition := getNextCondition(cs)\n\t\t\t// Append new condition\n\t\t\tif len(oldConditions) == 0 || oldConditions[0].Type != newCondition.Type ||\n\t\t\t\toldConditions[0].Reason != newCondition.Reason ||\n\t\t\t\toldConditions[0].Message != newCondition.Message {\n\t\t\t\tlog.Info(\"Appending to conditions: \", \"namespace\", instance.Namespace, \"name\", instance.Name, \"type\", newCondition.Type, \"reason\", newCondition.Reason, \"message\", newCondition.Message)\n\t\t\t\tinstance.Status.Conditions = append([]v1beta1.NotebookCondition{newCondition}, oldConditions...)\n\n\t\t// Update status of the CR using the ContainerState of\n\t\t// the container that has the same name as the CR.\n\t\t// If no container of same name is found, the state of the CR is not updated.\n\t\tif len(pod.Status.ContainerStatuses) > 0 {\n\t\t\tnotebookContainerFound := false\n\t\t\tfor i := range pod.Status.ContainerStatuses {\n\t\t\t\tif pod.Status.ContainerStatuses[i].Name == instance.Name &&",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "547974495",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5314,
        "pr_file": "components/notebook-controller/controllers/notebook_controller.go",
        "discussion_id": "547974495",
        "commented_code": "@@ -206,23 +206,37 @@ func (r *NotebookReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n \t} else {\n \t\t// Got the pod\n \t\tpodFound = true\n-\t\tif len(pod.Status.ContainerStatuses) > 0 &&\n-\t\t\tpod.Status.ContainerStatuses[0].State != instance.Status.ContainerState {\n-\t\t\tlog.Info(\"Updating container state: \", \"namespace\", instance.Namespace, \"name\", instance.Name)\n-\t\t\tcs := pod.Status.ContainerStatuses[0].State\n-\t\t\tinstance.Status.ContainerState = cs\n-\t\t\toldConditions := instance.Status.Conditions\n-\t\t\tnewCondition := getNextCondition(cs)\n-\t\t\t// Append new condition\n-\t\t\tif len(oldConditions) == 0 || oldConditions[0].Type != newCondition.Type ||\n-\t\t\t\toldConditions[0].Reason != newCondition.Reason ||\n-\t\t\t\toldConditions[0].Message != newCondition.Message {\n-\t\t\t\tlog.Info(\"Appending to conditions: \", \"namespace\", instance.Namespace, \"name\", instance.Name, \"type\", newCondition.Type, \"reason\", newCondition.Reason, \"message\", newCondition.Message)\n-\t\t\t\tinstance.Status.Conditions = append([]v1beta1.NotebookCondition{newCondition}, oldConditions...)\n+\n+\t\t// Update status of the CR using the ContainerState of\n+\t\t// the container that has the same name as the CR.\n+\t\t// If no container of same name is found, the state of the CR is not updated.\n+\t\tif len(pod.Status.ContainerStatuses) > 0 {\n+\t\t\tnotebookContainerFound := false\n+\t\t\tfor i := range pod.Status.ContainerStatuses {\n+\t\t\t\tif pod.Status.ContainerStatuses[i].Name == instance.Name &&",
        "comment_created_at": "2020-12-23T14:05:47+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Could you break this if statement to the following ones:\r\n\r\n```golang\r\nif pod.Status.ContainerStatuses[i].Name != instance.Name {\r\n    continue\r\n}\r\n\r\nif pod.Status.ContainerStatuses[i].State == instance.Status.ContainerState {\r\n    continue\r\n}\r\n\r\nlog.Info(\"Updating Notebook CR state: \", \"namespace\", instance.Namespace, \"name\", instance.Name)\r\ncs := pod.Status.ContainerStatuses[i].State\r\n...\r\n```",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "473846716",
    "pr_number": 5218,
    "pr_file": "components/tensorboard-controller/controllers/tensorboard_controller.go",
    "created_at": "2020-08-20T10:11:05+00:00",
    "commented_code": "func isGoogleCloudPath(path string) bool {\n\treturn strings.HasPrefix(path, \"gs://\")\n}\n\nfunc isPVCPath(path string) bool {\n\treturn strings.HasPrefix(path, \"pvc://\")\n}\n\nfunc extractPVCName(path string) string {\n\ttrimmed := strings.TrimPrefix(path, \"pvc://\") //removing \"pvc://\" prefix\n\tending := strings.Index(trimmed, \"/\")         //finding ending index of pvc-name string\n\tif ending == -1 {\n\t\treturn trimmed\n\t} else {\n\t\treturn trimmed[0:ending]\n\t}\n}\n\nfunc extractPVCSubPath(path string) string {\n\ttrimmed := strings.TrimPrefix(path, \"pvc://\") //removing \"pvc://\" prefix\n\tstart := strings.Index(trimmed, \"/\")          //finding starting index of local path inside PVC\n\tif start == -1 || len(trimmed) == start+1 {\n\t\treturn \"\"\n\t} else {\n\t\treturn trimmed[start+1:]\n\t}\n}\n\n//Searches a corev1.PodList for running pods and returns\n//a running corev1.Pod (if exists)\nfunc findRunningPod(pods *corev1.PodList) corev1.Pod {\n\tfor _, pod := range pods.Items {\n\t\tif pod.Status.Phase == \"Running\" {\n\t\t\treturn pod\n\t\t}\n\t}\n\n\treturn corev1.Pod{}\n}\n\nfunc extractNodeName(pod corev1.Pod) string {\n\treturn pod.Spec.NodeName\n}\n\nfunc generateNodeAffinity(affinity *corev1.Affinity, pvcname string, r *TensorboardReconciler, tb *tensorboardv1alpha1.Tensorboard) error {\n\tvar nodename string\n\tvar pods = &corev1.PodList{}\n\tvar pod corev1.Pod\n\n\t//List all pods that access the PVC that has ClaimName: pvcname.\n\t//NOTE: We use only one custom field selector to filter out pods that don't use this PVC.\n\tif err := r.List(context.Background(), pods, client.InNamespace(tb.Namespace), client.MatchingFields{\"spec.volumes.persistentvolumeclaim.claimname\": pvcname}); err != nil {\n\t\treturn fmt.Errorf(\"List pods error: %v\", err)\n\t}\n\n\t//Find a running pod that uses the PVC.\n\tpod = findRunningPod(pods)\n\n\t//If there is no running pod that uses the PVC, then: nodename == \"\".\n\t//Else, nodename contains the name of the node that the pod is running on.\n\tnodename = extractNodeName(pod)\n\n\t//In this case, there is a running pod that uses the PVC, therefore we create\n\t//a nodeAffinity field so that the Tensorboard server will be scheduled (if possible)\n\t//on the same node as the running pod.\n\tif nodename != \"\" {",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "473846716",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5218,
        "pr_file": "components/tensorboard-controller/controllers/tensorboard_controller.go",
        "discussion_id": "473846716",
        "commented_code": "@@ -281,3 +328,102 @@ func isCloudPath(path string) bool {\n func isGoogleCloudPath(path string) bool {\n \treturn strings.HasPrefix(path, \"gs://\")\n }\n+\n+func isPVCPath(path string) bool {\n+\treturn strings.HasPrefix(path, \"pvc://\")\n+}\n+\n+func extractPVCName(path string) string {\n+\ttrimmed := strings.TrimPrefix(path, \"pvc://\") //removing \"pvc://\" prefix\n+\tending := strings.Index(trimmed, \"/\")         //finding ending index of pvc-name string\n+\tif ending == -1 {\n+\t\treturn trimmed\n+\t} else {\n+\t\treturn trimmed[0:ending]\n+\t}\n+}\n+\n+func extractPVCSubPath(path string) string {\n+\ttrimmed := strings.TrimPrefix(path, \"pvc://\") //removing \"pvc://\" prefix\n+\tstart := strings.Index(trimmed, \"/\")          //finding starting index of local path inside PVC\n+\tif start == -1 || len(trimmed) == start+1 {\n+\t\treturn \"\"\n+\t} else {\n+\t\treturn trimmed[start+1:]\n+\t}\n+}\n+\n+//Searches a corev1.PodList for running pods and returns\n+//a running corev1.Pod (if exists)\n+func findRunningPod(pods *corev1.PodList) corev1.Pod {\n+\tfor _, pod := range pods.Items {\n+\t\tif pod.Status.Phase == \"Running\" {\n+\t\t\treturn pod\n+\t\t}\n+\t}\n+\n+\treturn corev1.Pod{}\n+}\n+\n+func extractNodeName(pod corev1.Pod) string {\n+\treturn pod.Spec.NodeName\n+}\n+\n+func generateNodeAffinity(affinity *corev1.Affinity, pvcname string, r *TensorboardReconciler, tb *tensorboardv1alpha1.Tensorboard) error {\n+\tvar nodename string\n+\tvar pods = &corev1.PodList{}\n+\tvar pod corev1.Pod\n+\n+\t//List all pods that access the PVC that has ClaimName: pvcname.\n+\t//NOTE: We use only one custom field selector to filter out pods that don't use this PVC.\n+\tif err := r.List(context.Background(), pods, client.InNamespace(tb.Namespace), client.MatchingFields{\"spec.volumes.persistentvolumeclaim.claimname\": pvcname}); err != nil {\n+\t\treturn fmt.Errorf(\"List pods error: %v\", err)\n+\t}\n+\n+\t//Find a running pod that uses the PVC.\n+\tpod = findRunningPod(pods)\n+\n+\t//If there is no running pod that uses the PVC, then: nodename == \"\".\n+\t//Else, nodename contains the name of the node that the pod is running on.\n+\tnodename = extractNodeName(pod)\n+\n+\t//In this case, there is a running pod that uses the PVC, therefore we create\n+\t//a nodeAffinity field so that the Tensorboard server will be scheduled (if possible)\n+\t//on the same node as the running pod.\n+\tif nodename != \"\" {",
        "comment_created_at": "2020-08-20T10:11:05+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "nit: You could have an `if nodename == \"\" {` here and return nil if that holds.\r\n\r\nThen you could move the code below one tab to the left, outside of an if clause, to make it a little bit more simple to read",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "320263186",
    "pr_number": 4040,
    "pr_file": "bootstrap/pkg/kfapp/apply/apply.go",
    "created_at": "2019-09-03T13:12:21+00:00",
    "commented_code": "package apply\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\n\tkftypes \"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/apis/apps\"\n\tkfdefsv3 \"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/apis/apps/kfdef/v1alpha1\"\n\t\"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/kfapp/coordinator\"\n\tlog \"github.com/sirupsen/logrus\"\n)\n\n// BootstrapKubeflow is used by the kfctl apply sub-command to take in a configfile\n// as a flag and boostrap a KfApp and deploy it\nfunc BootstrapKubeflow(configFilePath string, kfResource kftypes.ResourceEnum) error {\n\t// Set default app name to kf-app\n\tappName := \"kf-app\"\n\n\t// Construct KfDef from the configFilePath provided\n\tkfDef := &kfdefsv3.KfDef{}\n\tkfDef, err := kfdefsv3.LoadKFDefFromURI(configFilePath)\n\tif err != nil {\n\t\tlog.Printf(\"Unable to create KfDef from config file: %v\", err)\n\t}\n\tif kfDef.Name != \"\" {\n\t\tlog.Warnf(\"Overriding KfDef.Spec.Name; old value %v; new value %v\", kfDef.Name, appName)\n\t}\n\tkfDef.Name = appName",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "320263186",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 4040,
        "pr_file": "bootstrap/pkg/kfapp/apply/apply.go",
        "discussion_id": "320263186",
        "commented_code": "@@ -0,0 +1,103 @@\n+package apply\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"os\"\n+\n+\tkftypes \"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/apis/apps\"\n+\tkfdefsv3 \"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/apis/apps/kfdef/v1alpha1\"\n+\t\"github.com/kubeflow/kubeflow/bootstrap/v3/pkg/kfapp/coordinator\"\n+\tlog \"github.com/sirupsen/logrus\"\n+)\n+\n+// BootstrapKubeflow is used by the kfctl apply sub-command to take in a configfile\n+// as a flag and boostrap a KfApp and deploy it\n+func BootstrapKubeflow(configFilePath string, kfResource kftypes.ResourceEnum) error {\n+\t// Set default app name to kf-app\n+\tappName := \"kf-app\"\n+\n+\t// Construct KfDef from the configFilePath provided\n+\tkfDef := &kfdefsv3.KfDef{}\n+\tkfDef, err := kfdefsv3.LoadKFDefFromURI(configFilePath)\n+\tif err != nil {\n+\t\tlog.Printf(\"Unable to create KfDef from config file: %v\", err)\n+\t}\n+\tif kfDef.Name != \"\" {\n+\t\tlog.Warnf(\"Overriding KfDef.Spec.Name; old value %v; new value %v\", kfDef.Name, appName)\n+\t}\n+\tkfDef.Name = appName",
        "comment_created_at": "2019-09-03T13:12:21+00:00",
        "comment_author": "yanniszark",
        "comment_body": "This line should be inside the if statement.\r\nNow it always overrides.",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "300474899",
    "pr_number": 3607,
    "pr_file": "bootstrap/v2/pkg/kfapp/existing_arrikto/existing.go",
    "created_at": "2019-07-04T17:54:25+00:00",
    "commented_code": "}\n\treturn string(b)\n}\n\nfunc initialiseHMACSecretFromEnvOrGen(secEnv string, reqLen int) []byte {\n\tenvContent := os.Getenv(secEnv)\n\n\tif len(envContent) < reqLen {\n\t\tlog.Println(\"WARNING: HMAC secret not provided or secret too short. Generating a random one from nonce characters.\")\n\t\treturn []byte(createNonce(reqLen))\n\t}\n\n\treturn []byte(envContent)\n}\n\nfunc createNonce(length int) string {",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "300474899",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 3607,
        "pr_file": "bootstrap/v2/pkg/kfapp/existing_arrikto/existing.go",
        "discussion_id": "300474899",
        "commented_code": "@@ -470,3 +480,24 @@ func genRandomString(length int) string {\n \t}\n \treturn string(b)\n }\n+\n+func initialiseHMACSecretFromEnvOrGen(secEnv string, reqLen int) []byte {\n+\tenvContent := os.Getenv(secEnv)\n+\n+\tif len(envContent) < reqLen {\n+\t\tlog.Println(\"WARNING: HMAC secret not provided or secret too short. Generating a random one from nonce characters.\")\n+\t\treturn []byte(createNonce(reqLen))\n+\t}\n+\n+\treturn []byte(envContent)\n+}\n+\n+func createNonce(length int) string {",
        "comment_created_at": "2019-07-04T17:54:25+00:00",
        "comment_author": "SachinVarghese",
        "comment_body": "You can use the genRandomString function here and the createNonce is not really required.",
        "pr_file_module": null
      }
    ]
  }
]