[
  {
    "discussion_id": "1030570642",
    "pr_number": 6753,
    "pr_file": "components/centraldashboard/README.md",
    "created_at": "2022-11-23T15:18:19+00:00",
    "commented_code": "from the front-end starting with `/api` are proxied to the Express\n      server. All other requests are handled by the front-end server which\n      mirrors the production configuration.\n4. To access the Kubenetes REST API, run `kubectl proxy --port=8083`.\n   - This runs [kubectl proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy) to create a reverse proxy at http://localhost:8083. Requests from the front-end starting with `/jupyter`, `/metadata`, `/notebook` and `/pipeline` are proxied to the [Kubenetes API server](https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/). See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.\n4. To access a Kubenetes service, run `kubectl port-forward -n kubeflow svc/<service-name> <service-proxy-port>:<service-port>` e.g. `kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8085:80`.",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "1030570642",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6753,
        "pr_file": "components/centraldashboard/README.md",
        "discussion_id": "1030570642",
        "commented_code": "@@ -45,8 +45,8 @@ Make sure you have the latest LTS version of `node` installed along with `npm`.\n       from the front-end starting with `/api` are proxied to the Express\n       server. All other requests are handled by the front-end server which\n       mirrors the production configuration.\n-4. To access the Kubenetes REST API, run `kubectl proxy --port=8083`.\n-   - This runs [kubectl proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy) to create a reverse proxy at http://localhost:8083. Requests from the front-end starting with `/jupyter`, `/metadata`, `/notebook` and `/pipeline` are proxied to the [Kubenetes API server](https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/). See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.\n+4. To access a Kubenetes service, run `kubectl port-forward -n kubeflow svc/<service-name> <service-proxy-port>:<service-port>` e.g. `kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8085:80`.",
        "comment_created_at": "2022-11-23T15:18:19+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Could you instead have a list for this numbered step and expose each `kubectl port-forward` command that a user needs to run?\r\n\r\nWe can just have commands for the Services that we proxy in the webpack config",
        "pr_file_module": null
      },
      {
        "comment_id": "1030685930",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6753,
        "pr_file": "components/centraldashboard/README.md",
        "discussion_id": "1030570642",
        "commented_code": "@@ -45,8 +45,8 @@ Make sure you have the latest LTS version of `node` installed along with `npm`.\n       from the front-end starting with `/api` are proxied to the Express\n       server. All other requests are handled by the front-end server which\n       mirrors the production configuration.\n-4. To access the Kubenetes REST API, run `kubectl proxy --port=8083`.\n-   - This runs [kubectl proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy) to create a reverse proxy at http://localhost:8083. Requests from the front-end starting with `/jupyter`, `/metadata`, `/notebook` and `/pipeline` are proxied to the [Kubenetes API server](https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/). See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.\n+4. To access a Kubenetes service, run `kubectl port-forward -n kubeflow svc/<service-name> <service-proxy-port>:<service-port>` e.g. `kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8085:80`.",
        "comment_created_at": "2022-11-23T16:53:33+00:00",
        "comment_author": "orfeas-k",
        "comment_body": "Pushed a new commit for both of the comments @kimwnasptd. ",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1030571442",
    "pr_number": 6753,
    "pr_file": "components/centraldashboard/README.md",
    "created_at": "2022-11-23T15:19:00+00:00",
    "commented_code": "from the front-end starting with `/api` are proxied to the Express\n      server. All other requests are handled by the front-end server which\n      mirrors the production configuration.\n4. To access the Kubenetes REST API, run `kubectl proxy --port=8083`.\n   - This runs [kubectl proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy) to create a reverse proxy at http://localhost:8083. Requests from the front-end starting with `/jupyter`, `/metadata`, `/notebook` and `/pipeline` are proxied to the [Kubenetes API server](https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/). See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.\n4. To access a Kubenetes service, run `kubectl port-forward -n kubeflow svc/<service-name> <service-proxy-port>:<service-port>` e.g. `kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8085:80`.\n   - This forwards requests to Kubernetes services from http://localhost:service-proxy-port. Requests from the front-end starting with `/jupyter`, `/notebook` and `/pipeline` are proxied there. See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "1030571442",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6753,
        "pr_file": "components/centraldashboard/README.md",
        "discussion_id": "1030571442",
        "commented_code": "@@ -45,8 +45,8 @@ Make sure you have the latest LTS version of `node` installed along with `npm`.\n       from the front-end starting with `/api` are proxied to the Express\n       server. All other requests are handled by the front-end server which\n       mirrors the production configuration.\n-4. To access the Kubenetes REST API, run `kubectl proxy --port=8083`.\n-   - This runs [kubectl proxy](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#proxy) to create a reverse proxy at http://localhost:8083. Requests from the front-end starting with `/jupyter`, `/metadata`, `/notebook` and `/pipeline` are proxied to the [Kubenetes API server](https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/). See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.\n+4. To access a Kubenetes service, run `kubectl port-forward -n kubeflow svc/<service-name> <service-proxy-port>:<service-port>` e.g. `kubectl port-forward -n kubeflow svc/jupyter-web-app-service 8085:80`.\n+   - This forwards requests to Kubernetes services from http://localhost:service-proxy-port. Requests from the front-end starting with `/jupyter`, `/notebook` and `/pipeline` are proxied there. See the [webpack config file](https://github.com/kubeflow/kubeflow/blob/master/components/centraldashboard/webpack.config.js) for more details.",
        "comment_created_at": "2022-11-23T15:19:00+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Let's add this explanation at the numbered step, since it explains how the proxying works. And, as mentioned above, have the bullet list for the different proxying commands",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "870246337",
    "pr_number": 6459,
    "pr_file": "components/admission-webhook/README.md",
    "created_at": "2022-05-11T12:34:24+00:00",
    "commented_code": "1. When there is a pod being created (see `rules`),\n1. call the webhook service `gcp-cred-webhook.default` at path `/add-cred` (see `clientConfig`)\n\n### admissionregistration.k8s.io/v1 default failurePolicy\nIn adopting `admissionregistration.k8s.io/v1` for the `MutatingWebhookConfiguration` we accept the default value\nfor `failurePolicy` to be `Fail` per [documentation](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#failure-policy). Upon testing this default feature it was discovered if the `AdmissionWebhook`'s `mutating-webhook-configuration` failed to mutate a pod then the pod would fail to start, its associated `Deployment` or `StatefulSet` would continually attempt to create the pod until the process that created the pod was terminated. This continuous failure to mutate the target pod may block other target pods from mutation\nuntil the failing process ends.",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "870246337",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6459,
        "pr_file": "components/admission-webhook/README.md",
        "discussion_id": "870246337",
        "commented_code": "@@ -75,10 +75,19 @@ This specifies\n 1. When there is a pod being created (see `rules`),\n 1. call the webhook service `gcp-cred-webhook.default` at path `/add-cred` (see `clientConfig`)\n \n+### admissionregistration.k8s.io/v1 default failurePolicy\n+In adopting `admissionregistration.k8s.io/v1` for the `MutatingWebhookConfiguration` we accept the default value\n+for `failurePolicy` to be `Fail` per [documentation](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#failure-policy). Upon testing this default feature it was discovered if the `AdmissionWebhook`'s `mutating-webhook-configuration` failed to mutate a pod then the pod would fail to start, its associated `Deployment` or `StatefulSet` would continually attempt to create the pod until the process that created the pod was terminated. This continuous failure to mutate the target pod may block other target pods from mutation\n+until the failing process ends.",
        "comment_created_at": "2022-05-11T12:34:24+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": ">This continuous failure to mutate the target pod may block other target pods from mutation\r\nuntil the failing process ends.\r\n\r\nCould you clarify a little bit more what you mean here? By other Pods you are not referring to other unrelated Pods in the cluster right?\r\n\r\nIIUC, as you described, the Deployment/StatefulSet will be retrying to create the Pod which will keep failing. Are there other side effects to other pods?",
        "pr_file_module": null
      },
      {
        "comment_id": "870631231",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6459,
        "pr_file": "components/admission-webhook/README.md",
        "discussion_id": "870246337",
        "commented_code": "@@ -75,10 +75,19 @@ This specifies\n 1. When there is a pod being created (see `rules`),\n 1. call the webhook service `gcp-cred-webhook.default` at path `/add-cred` (see `clientConfig`)\n \n+### admissionregistration.k8s.io/v1 default failurePolicy\n+In adopting `admissionregistration.k8s.io/v1` for the `MutatingWebhookConfiguration` we accept the default value\n+for `failurePolicy` to be `Fail` per [documentation](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#failure-policy). Upon testing this default feature it was discovered if the `AdmissionWebhook`'s `mutating-webhook-configuration` failed to mutate a pod then the pod would fail to start, its associated `Deployment` or `StatefulSet` would continually attempt to create the pod until the process that created the pod was terminated. This continuous failure to mutate the target pod may block other target pods from mutation\n+until the failing process ends.",
        "comment_created_at": "2022-05-11T18:33:42+00:00",
        "comment_author": "aaron-arellano",
        "comment_body": "yep. will clarify. Pretty much any pod that is targeted by the admission webhook for mutation is effected and will fail to start if there are configuration collisions or some other issue. Already running pods are not effected at all, again only pods being created after the policy change. Will add this to Readme for clarification.",
        "pr_file_module": null
      }
    ]
  }
]