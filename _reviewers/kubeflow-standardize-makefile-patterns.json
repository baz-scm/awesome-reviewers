[
  {
    "discussion_id": "911899164",
    "pr_number": 6555,
    "pr_file": "components/access-management/Makefile",
    "created_at": "2022-07-01T12:00:51+00:00",
    "commented_code": "REGISTRY_PROJECT ?= kubeflow-dev\nGOLANG_VERSION ?= 1.12\nGCLOUD_PROJECT ?= kubeflow-images-public\nIMG ?= gcr.io/$(GCLOUD_PROJECT)/kfam\nPROJECT ?= kubeflow-dev\nTAG ?= $(eval TAG := $(shell date +v%Y%m%d)-$(shell git describe --tags --always --dirty)-$(shell git diff | shasum -a256 | cut -c -6))$(TAG)\nGO_SWAGGER_URL ?= https://github.com/go-swagger/go-swagger/releases/download/v0.21.0/swagger_linux_amd64\n\nCHANGED_FILES := $(shell git diff-files --relative=components/centraldashboard)\nGIT_VERSION := $(shell git describe --tags --always --dirty)\n\nifeq ($(strip $(CHANGED_FILES)),)\n# Changed files is empty; not dirty\n# Don't include --dirty because it could be dirty if files outside the ones we care\n# about changed.\nGIT_VERSION := $(shell git describe --tags --long)\nelse\nGIT_VERSION := $(shell git describe --tags --long)-dirty-$(shell git diff | shasum -a256 | cut -c -6)\nendif\nIMG ?= kfam\nTAG ?= $(GIT_VERSION)\n\nbuild:\ngenerate-go-client: bin/swagger\n\tbin/swagger generate client -f api/swagger.yaml -t api/go_client\n\nbin/swagger:\n\tmkdir -p bin\n\twget -O bin/swagger '$(GO_SWAGGER_URL)'\n\tchmod +x bin/swagger\n\ndocker-build:\n\tdocker build -t $(IMG):$(TAG) .\n\ndocker-push: \n\tdocker push $(IMG):$(TAG)\n\nimage: docker-build docker-push \n\nbuild-gcb:",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "911899164",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6555,
        "pr_file": "components/access-management/Makefile",
        "discussion_id": "911899164",
        "commented_code": "@@ -1,30 +1,31 @@\n REGISTRY_PROJECT ?= kubeflow-dev\n-GOLANG_VERSION ?= 1.12\n-GCLOUD_PROJECT ?= kubeflow-images-public\n-IMG ?= gcr.io/$(GCLOUD_PROJECT)/kfam\n PROJECT ?= kubeflow-dev\n-TAG ?= $(eval TAG := $(shell date +v%Y%m%d)-$(shell git describe --tags --always --dirty)-$(shell git diff | shasum -a256 | cut -c -6))$(TAG)\n+GO_SWAGGER_URL ?= https://github.com/go-swagger/go-swagger/releases/download/v0.21.0/swagger_linux_amd64\n \n-CHANGED_FILES := $(shell git diff-files --relative=components/centraldashboard)\n+GIT_VERSION := $(shell git describe --tags --always --dirty)\n \n-ifeq ($(strip $(CHANGED_FILES)),)\n-# Changed files is empty; not dirty\n-# Don't include --dirty because it could be dirty if files outside the ones we care\n-# about changed.\n-GIT_VERSION := $(shell git describe --tags --long)\n-else\n-GIT_VERSION := $(shell git describe --tags --long)-dirty-$(shell git diff | shasum -a256 | cut -c -6)\n-endif\n+IMG ?= kfam\n+TAG ?= $(GIT_VERSION)\n \n-build:\n+generate-go-client: bin/swagger\n+\tbin/swagger generate client -f api/swagger.yaml -t api/go_client\n+\n+bin/swagger:\n+\tmkdir -p bin\n+\twget -O bin/swagger '$(GO_SWAGGER_URL)'\n+\tchmod +x bin/swagger\n+\n+docker-build:\n \tdocker build -t $(IMG):$(TAG) .\n \n+docker-push: \n+\tdocker push $(IMG):$(TAG)\n+\n+image: docker-build docker-push \n+\n build-gcb:",
        "comment_created_at": "2022-07-01T12:00:51+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Can you also remove this rule? We don't use `build-gcb` anywhere in the project.\r\n\r\nIt's a good chance to clean up the project",
        "pr_file_module": null
      },
      {
        "comment_id": "912027678",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6555,
        "pr_file": "components/access-management/Makefile",
        "discussion_id": "911899164",
        "commented_code": "@@ -1,30 +1,31 @@\n REGISTRY_PROJECT ?= kubeflow-dev\n-GOLANG_VERSION ?= 1.12\n-GCLOUD_PROJECT ?= kubeflow-images-public\n-IMG ?= gcr.io/$(GCLOUD_PROJECT)/kfam\n PROJECT ?= kubeflow-dev\n-TAG ?= $(eval TAG := $(shell date +v%Y%m%d)-$(shell git describe --tags --always --dirty)-$(shell git diff | shasum -a256 | cut -c -6))$(TAG)\n+GO_SWAGGER_URL ?= https://github.com/go-swagger/go-swagger/releases/download/v0.21.0/swagger_linux_amd64\n \n-CHANGED_FILES := $(shell git diff-files --relative=components/centraldashboard)\n+GIT_VERSION := $(shell git describe --tags --always --dirty)\n \n-ifeq ($(strip $(CHANGED_FILES)),)\n-# Changed files is empty; not dirty\n-# Don't include --dirty because it could be dirty if files outside the ones we care\n-# about changed.\n-GIT_VERSION := $(shell git describe --tags --long)\n-else\n-GIT_VERSION := $(shell git describe --tags --long)-dirty-$(shell git diff | shasum -a256 | cut -c -6)\n-endif\n+IMG ?= kfam\n+TAG ?= $(GIT_VERSION)\n \n-build:\n+generate-go-client: bin/swagger\n+\tbin/swagger generate client -f api/swagger.yaml -t api/go_client\n+\n+bin/swagger:\n+\tmkdir -p bin\n+\twget -O bin/swagger '$(GO_SWAGGER_URL)'\n+\tchmod +x bin/swagger\n+\n+docker-build:\n \tdocker build -t $(IMG):$(TAG) .\n \n+docker-push: \n+\tdocker push $(IMG):$(TAG)\n+\n+image: docker-build docker-push \n+\n build-gcb:",
        "comment_created_at": "2022-07-01T14:45:55+00:00",
        "comment_author": "apo-ger",
        "comment_body": "Done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "1186255342",
    "pr_number": 7123,
    "pr_file": "conformance/1.7/Makefile",
    "created_at": "2023-05-05T15:53:46+00:00",
    "commented_code": "# Copyright 2022 The Kubeflow Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nTEST_PROFILE ?= kf-conformance-test\nKUBEFLOW_NAMESPACE ?= kubeflow\n\nsetup:",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "1186255342",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 7123,
        "pr_file": "conformance/1.7/Makefile",
        "discussion_id": "1186255342",
        "commented_code": "@@ -0,0 +1,59 @@\n+# Copyright 2022 The Kubeflow Authors.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+TEST_PROFILE ?= kf-conformance-test\n+KUBEFLOW_NAMESPACE ?= kubeflow\n+\n+setup:",
        "comment_created_at": "2023-05-05T15:53:46+00:00",
        "comment_author": "gkcalat",
        "comment_body": "NIT: Replace here and below:\r\n```\r\n.PHONY: setup\r\nsetup:\r\n...\r\n```\r\n\r\nThis will prevent the `make <rule>` from failing when there is a `<rule>` file inside the folder. For example, if someone removes the `.yaml` extension from `setup.yaml`, `make setup` won't behave as expected.",
        "pr_file_module": null
      },
      {
        "comment_id": "1186508559",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 7123,
        "pr_file": "conformance/1.7/Makefile",
        "discussion_id": "1186255342",
        "commented_code": "@@ -0,0 +1,59 @@\n+# Copyright 2022 The Kubeflow Authors.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+TEST_PROFILE ?= kf-conformance-test\n+KUBEFLOW_NAMESPACE ?= kubeflow\n+\n+setup:",
        "comment_created_at": "2023-05-05T21:21:04+00:00",
        "comment_author": "james-jwu",
        "comment_body": "Done",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "897092814",
    "pr_number": 6406,
    "pr_file": "components/tensorboard-controller/Makefile",
    "created_at": "2022-06-14T17:14:22+00:00",
    "commented_code": "# Image URL to use all building/pushing image targets\nIMG ?= controller:latest",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "897092814",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6406,
        "pr_file": "components/tensorboard-controller/Makefile",
        "discussion_id": "897092814",
        "commented_code": "@@ -1,8 +1,8 @@\n \n # Image URL to use all building/pushing image targets\n IMG ?= controller:latest",
        "comment_created_at": "2022-06-14T17:14:22+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Can you add a `TAG ?= $(shell git describe --tags --always)` here? This is the one we use in the web apps as well. Let's standardize on this one",
        "pr_file_module": null
      },
      {
        "comment_id": "897805578",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6406,
        "pr_file": "components/tensorboard-controller/Makefile",
        "discussion_id": "897092814",
        "commented_code": "@@ -1,8 +1,8 @@\n \n # Image URL to use all building/pushing image targets\n IMG ?= controller:latest",
        "comment_created_at": "2022-06-15T10:23:02+00:00",
        "comment_author": "alembiewski",
        "comment_body": "Addressed",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "839946589",
    "pr_number": 6374,
    "pr_file": "components/notebook-controller/Makefile",
    "created_at": "2022-03-31T19:23:29+00:00",
    "commented_code": "GOBIN=$(shell go env GOBIN)\nendif\n\n# Setting SHELL to bash allows bash commands to be executed by recipes.\n# This is a requirement for 'setup-envtest.sh' in the test target.\n# Options are set to exit when a recipe line exits non-zero or a piped command fails.\nSHELL = /usr/bin/env bash -o pipefail\n.SHELLFLAGS = -ec\n\n.PHONY: all\nall: manager\n\n# check license\ncheck-license:\n\t./third_party/check-license.sh\n##@ General\n\n# Run tests\ntest: generate fmt vet manifests\n\tmkdir -p ${ENVTEST_ASSETS_DIR}\n\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n\tgo test ./api/... ./controllers/... -coverprofile cover.out\n# The help target prints out all targets with their descriptions organized\n# beneath their categories. The categories are represented by '##@' and the\n# target descriptions by '##'. The awk commands is responsible for reading the\n# entire set of makefiles included in this invocation, looking for lines of the\n# file as xyz: ## something, and then pretty-format the target and help. Then,\n# if there's a line with ##@ something, that gets pretty-printed as a category.\n# More info on the usage of ANSI control characters for terminal formatting:\n# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n# More info on the awk command:\n# http://linuxcommand.org/lc3_adv_awk.php\n\n# Build manager binary\nmanager: generate fmt vet\n\tgo build -o bin/manager main.go\n.PHONY: help\nhelp: ## Display this help.\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n\n# Run against the configured Kubernetes cluster in ~/.kube/config\nrun: generate fmt vet\n\tgo run ./main.go\n##@ Development\n\n# Install CRDs into a cluster\ninstall: manifests\n\tkubectl apply -f config/crd/bases\n.PHONY: check-license\ncheck-license: ## Check third-party license\n\t./third_party/check-license.sh\n\n# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\ndeploy: manifests\n\tkubectl apply -f config/crd/bases\n\tkustomize build config/default | kubectl apply -f -\n.PHONY: manifests\nmanifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n\n# Generate manifests e.g. CRD, RBAC etc.\nmanifests: controller-gen\n\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n.PHONY: generate\ngenerate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n\n# Run go fmt against code\nfmt:\n.PHONY: fmt\nfmt: ## Run go fmt against code.\n\tgo fmt ./...\n\n# Run go vet against code\nvet:\n.PHONY: vet\nvet: ## Run go vet against code.\n\tgo vet ./...\n\n# Generate code\ngenerate: controller-gen\n\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n.PHONY: test\ntest: manifests generate fmt vet envtest ## Run tests.\n\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n\n##@ Build\n\n# Build the docker image\ndocker-build: test\n.PHONY: manager\nmanager: generate fmt vet ## Build manager binary.\n\tgo build -o bin/manager main.go\n\n.PHONY: run\nrun: manifests generate fmt vet ## Run a controller from your host.\n\tgo run ./main.go\n\n.PHONY: docker-build\ndocker-build: test ## Build docker image with the manager.\n\tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n\t@echo \"updating kustomize image patch file for manager resource\"\n\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n\n# Push the docker image\ndocker-push:\n.PHONY: docker-push\ndocker-push: ## Push docker image with the manager.",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "839946589",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839946589",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.",
        "comment_created_at": "2022-03-31T19:23:29+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "nit: Could you also create an `image` rule, which builds and pushes the image?\r\n\r\nWe have this for the web apps as well and would be nice to keep this convention across all components\r\nhttps://github.com/kubeflow/kubeflow/blob/master/components/crud-web-apps/jupyter/Makefile#L11",
        "pr_file_module": null
      },
      {
        "comment_id": "840447074",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 6374,
        "pr_file": "components/notebook-controller/Makefile",
        "discussion_id": "839946589",
        "commented_code": "@@ -21,77 +13,125 @@ else\n GOBIN=$(shell go env GOBIN)\n endif\n \n+# Setting SHELL to bash allows bash commands to be executed by recipes.\n+# This is a requirement for 'setup-envtest.sh' in the test target.\n+# Options are set to exit when a recipe line exits non-zero or a piped command fails.\n+SHELL = /usr/bin/env bash -o pipefail\n+.SHELLFLAGS = -ec\n+\n+.PHONY: all\n all: manager\n \n-# check license\n-check-license:\n-\t./third_party/check-license.sh\n+##@ General\n \n-# Run tests\n-test: generate fmt vet manifests\n-\tmkdir -p ${ENVTEST_ASSETS_DIR}\n-\ttest -f ${ENVTEST_ASSETS_DIR}/setup-envtest.sh || curl -sSLo ${ENVTEST_ASSETS_DIR}/setup-envtest.sh https://raw.githubusercontent.com/kubernetes-sigs/controller-runtime/a9bd9117a77a2f84bbc546e28991136fe0000dc0/hack/setup-envtest.sh\n-\tsource ${ENVTEST_ASSETS_DIR}/setup-envtest.sh; fetch_envtest_tools $(ENVTEST_ASSETS_DIR); setup_envtest_env $(ENVTEST_ASSETS_DIR);\n-\tgo test ./api/... ./controllers/... -coverprofile cover.out\n+# The help target prints out all targets with their descriptions organized\n+# beneath their categories. The categories are represented by '##@' and the\n+# target descriptions by '##'. The awk commands is responsible for reading the\n+# entire set of makefiles included in this invocation, looking for lines of the\n+# file as xyz: ## something, and then pretty-format the target and help. Then,\n+# if there's a line with ##@ something, that gets pretty-printed as a category.\n+# More info on the usage of ANSI control characters for terminal formatting:\n+# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters\n+# More info on the awk command:\n+# http://linuxcommand.org/lc3_adv_awk.php\n \n-# Build manager binary\n-manager: generate fmt vet\n-\tgo build -o bin/manager main.go\n+.PHONY: help\n+help: ## Display this help.\n+\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\"} /^[a-zA-Z_0-9-]+:.*?##/ { printf \"  \\033[36m%-15s\\033[0m %s\\n\", $$1, $$2 } /^##@/ { printf \"\\n\\033[1m%s\\033[0m\\n\", substr($$0, 5) } ' $(MAKEFILE_LIST)\n \n-# Run against the configured Kubernetes cluster in ~/.kube/config\n-run: generate fmt vet\n-\tgo run ./main.go\n+##@ Development\n \n-# Install CRDs into a cluster\n-install: manifests\n-\tkubectl apply -f config/crd/bases\n+.PHONY: check-license\n+check-license: ## Check third-party license\n+\t./third_party/check-license.sh\n \n-# Deploy controller in the configured Kubernetes cluster in ~/.kube/config\n-deploy: manifests\n-\tkubectl apply -f config/crd/bases\n-\tkustomize build config/default | kubectl apply -f -\n+.PHONY: manifests\n+manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n+\t$(CONTROLLER_GEN) rbac:roleName=role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n \n-# Generate manifests e.g. CRD, RBAC etc.\n-manifests: controller-gen\n-\t$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=role webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\n+.PHONY: generate\n+generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n+\t$(CONTROLLER_GEN) object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\n \n-# Run go fmt against code\n-fmt:\n+.PHONY: fmt\n+fmt: ## Run go fmt against code.\n \tgo fmt ./...\n \n-# Run go vet against code\n-vet:\n+.PHONY: vet\n+vet: ## Run go vet against code.\n \tgo vet ./...\n \n-# Generate code\n-generate: controller-gen\n-\t$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths=./api/...\n+.PHONY: test\n+test: manifests generate fmt vet envtest ## Run tests.\n+\tKUBEBUILDER_ASSETS=\"$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) -p path)\" go test ./... -coverprofile cover.out\n+\n+##@ Build\n \n-# Build the docker image\n-docker-build: test\n+.PHONY: manager\n+manager: generate fmt vet ## Build manager binary.\n+\tgo build -o bin/manager main.go\n+\n+.PHONY: run\n+run: manifests generate fmt vet ## Run a controller from your host.\n+\tgo run ./main.go\n+\n+.PHONY: docker-build\n+docker-build: test ## Build docker image with the manager.\n \tcd .. && docker build . -t ${IMG}:${TAG} -f ./notebook-controller/Dockerfile\n-\t@echo \"updating kustomize image patch file for manager resource\"\n-\tsed -i'' -e 's@image: .*@image: '\"${IMG}:${TAG}\"'@' ./config/default/manager_image_patch.yaml\n \n-# Push the docker image\n-docker-push:\n+.PHONY: docker-push\n+docker-push: ## Push docker image with the manager.",
        "comment_created_at": "2022-04-01T10:26:53+00:00",
        "comment_author": "samuelvl",
        "comment_body": "Done!",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "613160932",
    "pr_number": 5820,
    "pr_file": "components/crud-web-apps/volumes/Makefile",
    "created_at": "2021-04-14T11:23:03+00:00",
    "commented_code": "IMG ?= gcr.io/arrikto-playground/kubeflow/volumes-web-app\nTAG ?= $(shell git describe --tags)\nDOCKERFILE=volumes/Dockerfile\nIMG ?= public.ecr.aws/j1r0q0g6/notebooks/volumes-web-app\nTAG ?= $(shell git describe --tags --always)\nDOCKERFILE ?= volumes/Dockerfile\n\ndocker-build:\n\tcp Dockerfile.dockerignore ../.dockerignore\n\t-cd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .\n\trm ../.dockerignore\n\tcd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "613160932",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5820,
        "pr_file": "components/crud-web-apps/volumes/Makefile",
        "discussion_id": "613160932",
        "commented_code": "@@ -1,11 +1,9 @@\n-IMG ?= gcr.io/arrikto-playground/kubeflow/volumes-web-app\n-TAG ?= $(shell git describe --tags)\n-DOCKERFILE=volumes/Dockerfile\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/volumes-web-app\n+TAG ?= $(shell git describe --tags --always)\n+DOCKERFILE ?= volumes/Dockerfile\n \n docker-build:\n-\tcp Dockerfile.dockerignore ../.dockerignore\n-\t-cd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .\n-\trm ../.dockerignore\n+\tcd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .",
        "comment_created_at": "2021-04-14T11:23:03+00:00",
        "comment_author": "elikatsis",
        "comment_body": "This part is a bit weird. I mean mentioning paths as if we are in a different directory because we will be using them in a different context (after `cd`ing).\r\n\r\nMay I suggest we\r\n1. Drop the `DOCKERFILE` variable (I think we shouldn't be messing with it) OR make it relative to this directory\r\n   I.e.,\r\n   ```\r\n   DOCKERFILE=Dockerfile\r\n   ```\r\n2. Drop the `cd`ing part from the Makefile target and use the parent directory as the path for the Docker building context (https://docs.docker.com/engine/reference/commandline/build/#build-with-path)\r\n   This will make the Makefile target as follows\r\n   ```Makefile\r\n   docker-build:\r\n       docker build -t ${IMG}:${TAG} -f Dockerfile ..  # Or \"-f ${DOCKERFILE}\" depending on the decision of (1)\r\n   ```\r\n\r\nI understand the reason we are `cd`ing to the parent directory is to use a single `.dockerignore` file for all the web apps.\r\nI tested locally that we maintain this behavior with the change I proposed, so there should be no problem. Let's also have others verify this as well (you, the CI, other?).\r\n\r\nThen, we can follow up changing this for the other web apps as well (this is not a blocker for the release of course).",
        "pr_file_module": null
      },
      {
        "comment_id": "633478595",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5820,
        "pr_file": "components/crud-web-apps/volumes/Makefile",
        "discussion_id": "613160932",
        "commented_code": "@@ -1,11 +1,9 @@\n-IMG ?= gcr.io/arrikto-playground/kubeflow/volumes-web-app\n-TAG ?= $(shell git describe --tags)\n-DOCKERFILE=volumes/Dockerfile\n+IMG ?= public.ecr.aws/j1r0q0g6/notebooks/volumes-web-app\n+TAG ?= $(shell git describe --tags --always)\n+DOCKERFILE ?= volumes/Dockerfile\n \n docker-build:\n-\tcp Dockerfile.dockerignore ../.dockerignore\n-\t-cd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .\n-\trm ../.dockerignore\n+\tcd ../ && docker build -t ${IMG}:${TAG} -f ${DOCKERFILE} .",
        "comment_created_at": "2021-05-17T12:16:43+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "@elikatsis ACK, this is a very good suggestion!\r\n\r\nI'll add a commit for Volumes web app in this PR, since it's fixing the formatting for this component. I'll then open up a new issue to keep track of the uniformity in the dockerfiles for the other web apps as well.",
        "pr_file_module": null
      }
    ]
  }
]