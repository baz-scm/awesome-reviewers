[
  {
    "discussion_id": "593307884",
    "pr_number": 5631,
    "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
    "created_at": "2021-03-12T16:38:21+00:00",
    "commented_code": "extend the code.\n        \"\"\"\n        kaniko = argo_build_util.deep_copy(task_template)\n        # for shurt UUID generation\n        alphabet = string.ascii_lowercase + string.digits\n\n        # append the tag base-commit[0:7]\n        if \":\" not in destination:\n            sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n            base = os.getenv(\"PULL_BASE_REF\", \"master\")\n            destination += \":%s-%s\" % (base, sha[0:8])\n\n        kaniko[\"name\"] = \"kaniko-build-push\"\n        # add short UUID to step name to ensure it is unique\n        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "593307884",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5631,
        "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
        "discussion_id": "593307884",
        "commented_code": "@@ -200,14 +202,17 @@ def create_kaniko_task(self, task_template, dockerfile, context,\n         extend the code.\n         \"\"\"\n         kaniko = argo_build_util.deep_copy(task_template)\n+        # for shurt UUID generation\n+        alphabet = string.ascii_lowercase + string.digits\n \n         # append the tag base-commit[0:7]\n         if \":\" not in destination:\n             sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n             base = os.getenv(\"PULL_BASE_REF\", \"master\")\n             destination += \":%s-%s\" % (base, sha[0:8])\n \n-        kaniko[\"name\"] = \"kaniko-build-push\"\n+        # add short UUID to step name to ensure it is unique\n+        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
        "comment_created_at": "2021-03-12T16:38:21+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Could you provide some more details as to why this change is needed?",
        "pr_file_module": null
      },
      {
        "comment_id": "593309537",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5631,
        "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
        "discussion_id": "593307884",
        "commented_code": "@@ -200,14 +202,17 @@ def create_kaniko_task(self, task_template, dockerfile, context,\n         extend the code.\n         \"\"\"\n         kaniko = argo_build_util.deep_copy(task_template)\n+        # for shurt UUID generation\n+        alphabet = string.ascii_lowercase + string.digits\n \n         # append the tag base-commit[0:7]\n         if \":\" not in destination:\n             sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n             base = os.getenv(\"PULL_BASE_REF\", \"master\")\n             destination += \":%s-%s\" % (base, sha[0:8])\n \n-        kaniko[\"name\"] = \"kaniko-build-push\"\n+        # add short UUID to step name to ensure it is unique\n+        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
        "comment_created_at": "2021-03-12T16:40:39+00:00",
        "comment_author": "davidspek",
        "comment_body": "Otherwise there are 2 steps in the workflow (this workflow builds 2 images) that are both named `kaniko-build-push`. I wasn't sure if it would like that so I tested it and Argo does not :). ",
        "pr_file_module": null
      },
      {
        "comment_id": "593311545",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5631,
        "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
        "discussion_id": "593307884",
        "commented_code": "@@ -200,14 +202,17 @@ def create_kaniko_task(self, task_template, dockerfile, context,\n         extend the code.\n         \"\"\"\n         kaniko = argo_build_util.deep_copy(task_template)\n+        # for shurt UUID generation\n+        alphabet = string.ascii_lowercase + string.digits\n \n         # append the tag base-commit[0:7]\n         if \":\" not in destination:\n             sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n             base = os.getenv(\"PULL_BASE_REF\", \"master\")\n             destination += \":%s-%s\" % (base, sha[0:8])\n \n-        kaniko[\"name\"] = \"kaniko-build-push\"\n+        # add short UUID to step name to ensure it is unique\n+        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
        "comment_created_at": "2021-03-12T16:43:46+00:00",
        "comment_author": "davidspek",
        "comment_body": "The same thing is done here BTW: https://github.com/kubeflow/kubeflow/pull/5626/files#diff-a58831ea15b3ba92fe93b2196dc2867189dc87c3836c617833dbdf652ad22fd0R205",
        "pr_file_module": null
      },
      {
        "comment_id": "593312071",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5631,
        "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
        "discussion_id": "593307884",
        "commented_code": "@@ -200,14 +202,17 @@ def create_kaniko_task(self, task_template, dockerfile, context,\n         extend the code.\n         \"\"\"\n         kaniko = argo_build_util.deep_copy(task_template)\n+        # for shurt UUID generation\n+        alphabet = string.ascii_lowercase + string.digits\n \n         # append the tag base-commit[0:7]\n         if \":\" not in destination:\n             sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n             base = os.getenv(\"PULL_BASE_REF\", \"master\")\n             destination += \":%s-%s\" % (base, sha[0:8])\n \n-        kaniko[\"name\"] = \"kaniko-build-push\"\n+        # add short UUID to step name to ensure it is unique\n+        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
        "comment_created_at": "2021-03-12T16:44:34+00:00",
        "comment_author": "davidspek",
        "comment_body": "Here you can see what the workflow I just linked looks like when it runs. \r\nhttps://argo.kubeflow-testing.com/workflows/kubeflow-test-infra/kubeflow-kubeflow-presubmit-nb-j-pt-5626-5feb726-6224-63fc?tab=workflow&nodeId=kubeflow-kubeflow-presubmit-nb-j-pt-5626-5feb726-6224-63fc-2134638194",
        "pr_file_module": null
      },
      {
        "comment_id": "593312328",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5631,
        "pr_file": "py/kubeflow/kubeflow/ci/workflow_utils.py",
        "discussion_id": "593307884",
        "commented_code": "@@ -200,14 +202,17 @@ def create_kaniko_task(self, task_template, dockerfile, context,\n         extend the code.\n         \"\"\"\n         kaniko = argo_build_util.deep_copy(task_template)\n+        # for shurt UUID generation\n+        alphabet = string.ascii_lowercase + string.digits\n \n         # append the tag base-commit[0:7]\n         if \":\" not in destination:\n             sha = os.getenv(\"PULL_BASE_SHA\", \"12341234kanikotest\")\n             base = os.getenv(\"PULL_BASE_REF\", \"master\")\n             destination += \":%s-%s\" % (base, sha[0:8])\n \n-        kaniko[\"name\"] = \"kaniko-build-push\"\n+        # add short UUID to step name to ensure it is unique\n+        kaniko[\"name\"] = \"kaniko-build-push-\" + ''.join(random.choices(alphabet, k=8))",
        "comment_created_at": "2021-03-12T16:44:55+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Makes sense",
        "pr_file_module": null
      }
    ]
  },
  {
    "discussion_id": "588900578",
    "pr_number": 5640,
    "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
    "created_at": "2021-03-06T16:23:14+00:00",
    "commented_code": "\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
    "repo_full_name": "kubeflow/kubeflow",
    "discussion_comments": [
      {
        "comment_id": "588900578",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-06T16:23:14+00:00",
        "comment_author": "PatrickXYS",
        "comment_body": "Same herer: \r\n\r\nI feel like you can abstract this Builder python file given you have multiple almost same file here, add it in e.g, py/kubeflow/kubeflow/ci/base_builder.py\r\n\r\nAnd for each Argo Workflow, just reference it should be fine",
        "pr_file_module": null
      },
      {
        "comment_id": "589016392",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-07T11:37:14+00:00",
        "comment_author": "davidspek",
        "comment_body": "I'm not sure it makes sense for these CI files, as I am assuming they will be extended with more tests similar to https://github.com/kubeflow/kubeflow/blob/master/py/kubeflow/kubeflow/ci/common_ui_tests.py",
        "pr_file_module": null
      },
      {
        "comment_id": "589060586",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-07T17:17:58+00:00",
        "comment_author": "PatrickXYS",
        "comment_body": "For extensibility, I would suggest using parent class as base, and child class for patch.",
        "pr_file_module": null
      },
      {
        "comment_id": "589383241",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-08T12:24:27+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd What is your thought on this?",
        "pr_file_module": null
      },
      {
        "comment_id": "589383886",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-08T12:25:34+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "@PatrickXYS to make sure I'm synced with the proposed changes; the argument is to create a common base class for building a workflow that always has a step for kaniko-build, with `--no-push`, since we essentially use it in all of the component CI files?",
        "pr_file_module": null
      },
      {
        "comment_id": "589518357",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-08T15:38:17+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd I'm also not completely clear what the proposed implementation would look like. Either way, I'm not sure if this is a blocker as it testing if images can be built seems like something that should be added sooner rather than later. This way we would have discovered that the admission-webhook was broken before https://github.com/kubeflow/kubeflow/pull/5661.\r\nAlso, https://github.com/kubeflow/kubeflow/issues/5482#issuecomment-791906596 still needs to be resolved. Should the registry be called `access-management` or should it be `kfam`?",
        "pr_file_module": null
      },
      {
        "comment_id": "589576038",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-08T16:46:05+00:00",
        "comment_author": "PatrickXYS",
        "comment_body": "This is only NIT change, if we feel it's urgent, feel free to move forward",
        "pr_file_module": null
      },
      {
        "comment_id": "589721942",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-08T20:21:44+00:00",
        "comment_author": "davidspek",
        "comment_body": "I think this can be dealt with in the future when the tests for each component get expanded. For now, I think it is most important images start getting built and the PRs that are being merged for the release are at least tested if they break the image building. ",
        "pr_file_module": null
      },
      {
        "comment_id": "590290661",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T12:00:00+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "Regarding the changes for using a different class I agree with @DavidSpek that this isn't a blocker, so let's go with this implementation for now and if in the future we find ourselves repeating too much code then lets go over this argument.\r\nDoes this sound OK to you @PatrickXYS ?\r\n",
        "pr_file_module": null
      },
      {
        "comment_id": "590291700",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T12:01:03+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "> Should the registry be called access-management or should it be kfam?\r\n\r\n@yanniszark what are your thoughts on this? I guess we should stick to `access-management` for now?\r\n\r\nI'll also give a heads up to our tracking issue to add this registry as well ",
        "pr_file_module": null
      },
      {
        "comment_id": "590304574",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T12:15:29+00:00",
        "comment_author": "davidspek",
        "comment_body": "@kimwnasptd I actually just ran into an issue where using the common `kaniko_builder.py` actually complicates things slightly. For this situation specifically it is easily fixed, however; for the CI testing I think it could just complicate things with little added value. ",
        "pr_file_module": null
      },
      {
        "comment_id": "590362886",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T13:21:39+00:00",
        "comment_author": "kimwnasptd",
        "comment_body": "> @kimwnasptd I actually just ran into an issue where using the common kaniko_builder.py actually complicates things slightly. For this situation specifically it is easily fixed\r\n\r\nCould you provide some more details for this? Just so that we can identify the pattern/pain-point once we see it reoccurring ",
        "pr_file_module": null
      },
      {
        "comment_id": "590369432",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T13:30:34+00:00",
        "comment_author": "davidspek",
        "comment_body": "I need to build 2 dockerfiles that exist in the same folder. For that, I just added a `second_dockerfile` and `second_destination` to the build function in `kaniko_builder.py`. I also added a small UUID tag for the task name in the workflow in the `create_kaniko_task` function in `workflow_utils.py` so that each kaniko building step has a unique name in the workflow. So for building the images I don't think it is a big deal at this point. ",
        "pr_file_module": null
      },
      {
        "comment_id": "590413497",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T14:24:57+00:00",
        "comment_author": "yanniszark",
        "comment_body": ">  I guess we should stick to access-management for now?\r\n\r\n@kimwnasptd I would vote for `kfam`, as it is what we usually call the component. What do you think?",
        "pr_file_module": null
      },
      {
        "comment_id": "590416936",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T14:28:41+00:00",
        "comment_author": "davidspek",
        "comment_body": "I think it's better to be consistent in the naming scheme and use the folder name just like every other component. So `access-management`. ",
        "pr_file_module": null
      },
      {
        "comment_id": "590420959",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T14:33:12+00:00",
        "comment_author": "thesuperzapper",
        "comment_body": "Also kfam actually stands for Kubeflow Access Management (just like we don't call it kubeflow-pipelines, but kubeflow/pipelines, I think we can leave it as `access-management`)",
        "pr_file_module": null
      },
      {
        "comment_id": "590421528",
        "repo_full_name": "kubeflow/kubeflow",
        "pr_number": 5640,
        "pr_file": "py/kubeflow/kubeflow/ci/access_management_tests.py",
        "discussion_id": "588900578",
        "commented_code": "@@ -0,0 +1,43 @@\n+\"\"\"\"Argo Workflow for testing Access Management's OCI image using Kaniko\"\"\"",
        "comment_created_at": "2021-03-09T14:33:52+00:00",
        "comment_author": "davidspek",
        "comment_body": "@yanniszark @kimwnasptd I think this discussion should move to https://github.com/kubeflow/kubeflow/issues/5675. Then this PR can be merged and I will update all the registry naming in a new PR depending on the outcome of https://github.com/kubeflow/kubeflow/issues/5675.",
        "pr_file_module": null
      }
    ]
  }
]